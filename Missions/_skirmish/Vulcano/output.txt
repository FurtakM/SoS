// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 18312 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 924 0 0
// PrepareRussian ;
  27: CALL 3341 0 0
// PrepareLegion ;
  31: CALL 7105 0 0
// Action ;
  35: CALL 10615 0 0
// InitArt ;
  39: CALL 245 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 15
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// base_captured := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// russian_prepared := false ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_can_attack := false ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// ru_sib_bomb := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 10
  97: PUSH
  98: LD_INT 25
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: PUSH
 106: LD_OWVAR 67
 110: ARRAY
 111: ST_TO_ADDR
// player_res_art := false ;
 112: LD_ADDR_EXP 6
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_artifact_ready := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// art_icon := art_use_atom ;
 128: LD_ADDR_EXP 9
 132: PUSH
 133: LD_INT 7
 135: ST_TO_ADDR
// time_res_art := 600 ;
 136: LD_ADDR_EXP 10
 140: PUSH
 141: LD_INT 600
 143: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 144: LD_ADDR_EXP 12
 148: PUSH
 149: LD_INT 21000
 151: ST_TO_ADDR
// mine_vulc := false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// medal_enabled := false ;
 160: LD_ADDR_EXP 14
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dead_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// kill_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// veh_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// tech_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 200: LD_ADDR_EXP 20
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_progress := 0 ;
 208: LD_ADDR_EXP 7
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// event_legion_attack := 1 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// event_russian_attack := 2 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// event_alliance_attack := 3 ;
 232: LD_ADDR_EXP 23
 236: PUSH
 237: LD_INT 3
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// function InitArt ; begin
 245: LD_INT 0
 247: PPUSH
// SetArtifactRes ( your_side , true ) ;
 248: LD_OWVAR 2
 252: PPUSH
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 467
// end ; end_of_file
 260: LD_VAR 0 1
 264: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
 271: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 6
 282: PUSH
 283: LD_INT 5
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_OWVAR 67
 295: ARRAY
 296: ST_TO_ADDR
// us_force := [ ] ;
 297: LD_ADDR_EXP 25
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 304: LD_INT 17
 306: PPUSH
 307: CALL_OW 355
// PrepareAllianceAI ( ) ;
 311: CALL 15613 0 0
// uc_side := 1 ;
 315: LD_ADDR_OWVAR 20
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// uc_nation := nation_american ;
 323: LD_ADDR_OWVAR 21
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// hc_gallery :=  ;
 331: LD_ADDR_OWVAR 33
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_name :=  ;
 339: LD_ADDR_OWVAR 26
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// hc_importance := 0 ;
 347: LD_ADDR_OWVAR 32
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// for i = 1 to 11 do
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: DOUBLE
 361: LD_INT 1
 363: DEC
 364: ST_TO_ADDR
 365: LD_INT 11
 367: PUSH
 368: FOR_TO
 369: IFFALSE 422
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 371: LD_INT 0
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 12
 384: PPUSH
 385: LD_EXP 26
 389: PPUSH
 390: CALL_OW 380
// un := CreateHuman ;
 394: LD_ADDR_VAR 0 4
 398: PUSH
 399: CALL_OW 44
 403: ST_TO_ADDR
// us_force := us_force ^ un ;
 404: LD_ADDR_EXP 25
 408: PUSH
 409: LD_EXP 25
 413: PUSH
 414: LD_VAR 0 4
 418: ADD
 419: ST_TO_ADDR
// end ;
 420: GO 368
 422: POP
 423: POP
// hc_importance := 100 ;
 424: LD_ADDR_OWVAR 32
 428: PUSH
 429: LD_INT 100
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_EXP 26
 442: PPUSH
 443: CALL_OW 380
// us_commander := CreateHuman ;
 447: LD_ADDR_EXP 24
 451: PUSH
 452: CALL_OW 44
 456: ST_TO_ADDR
// player_commander := us_commander ;
 457: LD_ADDR_EXP 11
 461: PUSH
 462: LD_EXP 24
 466: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 467: LD_ADDR_VAR 0 5
 471: PUSH
 472: LD_STRING text
 474: PPUSH
 475: LD_INT 6
 477: PUSH
 478: LD_INT 5
 480: PUSH
 481: LD_INT 4
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 5
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: PPUSH
 515: LD_INT -5
 517: PUSH
 518: LD_EXP 24
 522: PUSH
 523: LD_INT -3
 525: PUSH
 526: LD_INT -2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_EXP 25
 539: ADD
 540: PPUSH
 541: LD_INT 1
 543: PUSH
 544: LD_INT 3
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: PUSH
 567: LD_INT 5
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 1
 575: NEG
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: PPUSH
 595: CALL_OW 42
 599: ST_TO_ADDR
// team := team ^ us_commander ;
 600: LD_ADDR_VAR 0 5
 604: PUSH
 605: LD_VAR 0 5
 609: PUSH
 610: LD_EXP 24
 614: ADD
 615: ST_TO_ADDR
// for i = 1 to team do
 616: LD_ADDR_VAR 0 2
 620: PUSH
 621: DOUBLE
 622: LD_INT 1
 624: DEC
 625: ST_TO_ADDR
 626: LD_VAR 0 5
 630: PUSH
 631: FOR_TO
 632: IFFALSE 657
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 634: LD_VAR 0 5
 638: PUSH
 639: LD_VAR 0 2
 643: ARRAY
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 49
 655: GO 631
 657: POP
 658: POP
// end ;
 659: LD_VAR 0 1
 663: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 664: LD_OWVAR 1
 668: PUSH
 669: LD_INT 73500
 671: LESS
 672: IFFALSE 699
 674: GO 676
 676: DISABLE
// begin enable ;
 677: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 678: LD_INT 1
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: PPUSH
 689: LD_INT 23
 691: PPUSH
 692: LD_INT 1
 694: PPUSH
 695: CALL_OW 55
// end ;
 699: END
// every 1 1$10 do var time , p , l ;
 700: GO 702
 702: DISABLE
 703: LD_INT 0
 705: PPUSH
 706: PPUSH
 707: PPUSH
// begin time := 0 0$44 ;
 708: LD_ADDR_VAR 0 1
 712: PUSH
 713: LD_INT 1540
 715: ST_TO_ADDR
// l := 0 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 724: LD_VAR 0 1
 728: PPUSH
 729: CALL_OW 67
// l := l + 1 ;
 733: LD_ADDR_VAR 0 3
 737: PUSH
 738: LD_VAR 0 3
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 747: LD_INT 12
 749: PPUSH
 750: CALL_OW 435
 754: PUSH
 755: LD_INT 30
 757: LESS
 758: IFFALSE 817
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 12
 770: PPUSH
 771: LD_INT 12
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 781: LD_INT 1155
 783: PPUSH
 784: LD_INT 1540
 786: PPUSH
 787: CALL_OW 12
 791: PPUSH
 792: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: LD_INT 12
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 817: LD_ADDR_VAR 0 2
 821: PUSH
 822: LD_INT 0
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL_OW 12
 832: ST_TO_ADDR
// if p then
 833: LD_VAR 0 2
 837: IFFALSE 872
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 839: LD_INT 105
 841: PPUSH
 842: LD_INT 350
 844: PPUSH
 845: CALL_OW 12
 849: PPUSH
 850: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 4
 859: PPUSH
 860: CALL_OW 12
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 872: LD_VAR 0 3
 876: PUSH
 877: LD_INT 15
 879: PUSH
 880: LD_INT 13
 882: PUSH
 883: LD_INT 11
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_OWVAR 67
 895: ARRAY
 896: MOD
 897: PUSH
 898: LD_INT 0
 900: EQUAL
 901: IFFALSE 917
// time := time + 2 2$00 ;
 903: LD_ADDR_VAR 0 1
 907: PUSH
 908: LD_VAR 0 1
 912: PUSH
 913: LD_INT 4200
 915: PLUS
 916: ST_TO_ADDR
// end until false ;
 917: LD_INT 0
 919: IFFALSE 724
// end ; end_of_file
 921: PPOPN 3
 923: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 924: LD_INT 0
 926: PPUSH
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 933: LD_ADDR_VAR 0 3
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 4
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: LD_INT 470
 974: PUSH
 975: LD_INT 370
 977: PUSH
 978: LD_INT 290
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: PUSH
 986: LD_OWVAR 67
 990: ARRAY
 991: ST_TO_ADDR
// case Difficulty of 2 :
 992: LD_OWVAR 67
 996: PUSH
 997: LD_INT 2
 999: DOUBLE
1000: EQUAL
1001: IFTRUE 1005
1003: GO 1036
1005: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 30
1013: PUSH
1014: LD_INT 32
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 72
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 65
// end ; 3 :
1034: GO 1112
1036: LD_INT 3
1038: DOUBLE
1039: EQUAL
1040: IFTRUE 1044
1042: GO 1111
1044: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1045: LD_VAR 0 3
1049: PPUSH
1050: LD_INT 30
1052: PUSH
1053: LD_INT 32
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 72
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1073: LD_VAR 0 3
1077: PPUSH
1078: LD_INT 30
1080: PUSH
1081: LD_INT 27
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 72
1092: PUSH
1093: LD_INT 1
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 12
1103: ARRAY
1104: PPUSH
1105: CALL_OW 65
// end ; end ;
1109: GO 1112
1111: POP
// for i = 1 to filter do
1112: LD_ADDR_VAR 0 2
1116: PUSH
1117: DOUBLE
1118: LD_INT 1
1120: DEC
1121: ST_TO_ADDR
1122: LD_VAR 0 3
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1165
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1130: LD_VAR 0 3
1134: PUSH
1135: LD_VAR 0 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 4
1145: PUSH
1146: LD_INT 29
1148: NEG
1149: PPUSH
1150: LD_INT 29
1152: PPUSH
1153: CALL_OW 12
1157: PLUS
1158: PPUSH
1159: CALL_OW 234
1163: GO 1127
1165: POP
1166: POP
// SetBName ( us_depot , Vulcano1 ) ;
1167: LD_INT 50
1169: PPUSH
1170: LD_STRING Vulcano1
1172: PPUSH
1173: CALL_OW 500
// hc_importance := 0 ;
1177: LD_ADDR_OWVAR 32
1181: PUSH
1182: LD_INT 0
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := nation_russian ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// russian_in_base := [ ] ;
1201: LD_ADDR_VAR 0 7
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 6
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_INT 7
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_OWVAR 67
1236: ARRAY
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1320
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1241: LD_INT 0
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: LD_INT 4
1249: PUSH
1250: LD_INT 5
1252: PUSH
1253: LD_INT 6
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: PUSH
1261: LD_OWVAR 67
1265: ARRAY
1266: PPUSH
1267: CALL_OW 380
// un := CreateHuman ;
1271: LD_ADDR_VAR 0 5
1275: PUSH
1276: CALL_OW 44
1280: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1281: LD_ADDR_VAR 0 7
1285: PUSH
1286: LD_VAR 0 7
1290: PUSH
1291: LD_VAR 0 5
1295: ADD
1296: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1297: LD_VAR 0 5
1301: PPUSH
1302: LD_INT 94
1304: PPUSH
1305: LD_INT 145
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 50
// end ;
1318: GO 1238
1320: POP
1321: POP
// end ;
1322: LD_VAR 0 1
1326: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1327: LD_INT 50
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 1703 0 2
1337: PUSH
1338: LD_INT 40
1340: LESS
1341: IFFALSE 1538
1343: GO 1345
1345: DISABLE
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
// begin uc_side := 4 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 4
1357: ST_TO_ADDR
// uc_nation := nation_american ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// hc_importance := 0 ;
1366: LD_ADDR_OWVAR 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// for i = 1 to 7 do
1374: LD_ADDR_VAR 0 1
1378: PUSH
1379: DOUBLE
1380: LD_INT 1
1382: DEC
1383: ST_TO_ADDR
1384: LD_INT 7
1386: PUSH
1387: FOR_TO
1388: IFFALSE 1452
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1390: LD_INT 0
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: CALL_OW 12
1403: PPUSH
1404: LD_EXP 26
1408: PPUSH
1409: CALL_OW 380
// un := CreateHuman ;
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: CALL_OW 44
1422: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1423: LD_VAR 0 2
1427: PPUSH
1428: LD_INT 7
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// SetLives ( un , 10 ) ;
1438: LD_VAR 0 2
1442: PPUSH
1443: LD_INT 10
1445: PPUSH
1446: CALL_OW 234
// end ;
1450: GO 1387
1452: POP
1453: POP
// for i = 1 to 5 do
1454: LD_ADDR_VAR 0 1
1458: PUSH
1459: DOUBLE
1460: LD_INT 1
1462: DEC
1463: ST_TO_ADDR
1464: LD_INT 5
1466: PUSH
1467: FOR_TO
1468: IFFALSE 1536
// begin PrepareHuman ( false , 4 , us_skill ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 4
1475: PPUSH
1476: LD_EXP 26
1480: PPUSH
1481: CALL_OW 380
// SetDir ( un , 1 ) ;
1485: LD_VAR 0 2
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL_OW 233
// un := CreateHuman ;
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: CALL_OW 44
1506: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1507: LD_VAR 0 2
1511: PPUSH
1512: LD_INT 22
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 49
// SetLives ( un , 10 ) ;
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 10
1529: PPUSH
1530: CALL_OW 234
// end ;
1534: GO 1467
1536: POP
1537: POP
// end ; end_of_file
1538: PPOPN 2
1540: END
// export function PrepareApeman ( n ) ; var un , i ; begin
1541: LD_INT 0
1543: PPUSH
1544: PPUSH
1545: PPUSH
// for i = 1 to n do
1546: LD_ADDR_VAR 0 4
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 1
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1696
// begin uc_side := 0 ;
1564: LD_ADDR_OWVAR 20
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// uc_nation := 0 ;
1572: LD_ADDR_OWVAR 21
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// hc_class := class_apeman ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_INT 12
1587: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1588: LD_ADDR_OWVAR 31
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: LD_INT 0
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: LD_INT 0
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: ST_TO_ADDR
// hc_name :=  ;
1611: LD_ADDR_OWVAR 26
1615: PUSH
1616: LD_STRING 
1618: ST_TO_ADDR
// hc_gallery :=  ;
1619: LD_ADDR_OWVAR 33
1623: PUSH
1624: LD_STRING 
1626: ST_TO_ADDR
// hc_importance := 0 ;
1627: LD_ADDR_OWVAR 32
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// un := CreateHuman ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 44
1644: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 19
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1679: LD_INT 1155
1681: PPUSH
1682: LD_INT 5355
1684: PPUSH
1685: CALL_OW 12
1689: PPUSH
1690: CALL_OW 67
// end ;
1694: GO 1561
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 2
1702: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1708: LD_ADDR_VAR 0 4
1712: PUSH
1713: LD_INT 22
1715: PUSH
1716: LD_VAR 0 2
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PPUSH
1730: LD_VAR 0 1
1734: PPUSH
1735: CALL_OW 74
1739: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1740: LD_ADDR_VAR 0 5
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: LD_VAR 0 4
1754: PPUSH
1755: CALL_OW 296
1759: ST_TO_ADDR
// if dist >= 9999 then
1760: LD_VAR 0 5
1764: PUSH
1765: LD_INT 9999
1767: GREATEREQUAL
1768: IFFALSE 1781
// result := - 1 else
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: LD_INT 1
1777: NEG
1778: ST_TO_ADDR
1779: GO 1791
// result := dist ;
1781: LD_ADDR_VAR 0 3
1785: PUSH
1786: LD_VAR 0 5
1790: ST_TO_ADDR
// end ;
1791: LD_VAR 0 3
1795: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
1796: LD_INT 0
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// tmp := 9999 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 9999
1809: ST_TO_ADDR
// for i = 1 to plist do
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: DOUBLE
1816: LD_INT 1
1818: DEC
1819: ST_TO_ADDR
1820: LD_VAR 0 1
1824: PUSH
1825: FOR_TO
1826: IFFALSE 1900
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
1828: LD_VAR 0 1
1832: PUSH
1833: LD_VAR 0 4
1837: ARRAY
1838: PPUSH
1839: LD_VAR 0 2
1843: PPUSH
1844: CALL 1703 0 2
1848: PUSH
1849: LD_VAR 0 5
1853: LESS
1854: IFFALSE 1898
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
1856: LD_ADDR_VAR 0 5
1860: PUSH
1861: LD_VAR 0 1
1865: PUSH
1866: LD_VAR 0 4
1870: ARRAY
1871: PPUSH
1872: LD_VAR 0 2
1876: PPUSH
1877: CALL 1703 0 2
1881: ST_TO_ADDR
// unit := plist [ i ] ;
1882: LD_ADDR_VAR 0 6
1886: PUSH
1887: LD_VAR 0 1
1891: PUSH
1892: LD_VAR 0 4
1896: ARRAY
1897: ST_TO_ADDR
// end ;
1898: GO 1825
1900: POP
1901: POP
// result := unit ;
1902: LD_ADDR_VAR 0 3
1906: PUSH
1907: LD_VAR 0 6
1911: ST_TO_ADDR
// end ;
1912: LD_VAR 0 3
1916: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
1917: LD_INT 0
1919: PPUSH
1920: PPUSH
1921: PPUSH
1922: PPUSH
1923: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 2500
1934: PUSH
1935: LD_INT 5000
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_OWVAR 67
1947: ARRAY
1948: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: LD_VAR 0 2
1958: PUSH
1959: LD_INT 1
1961: NEG
1962: PUSH
1963: LD_INT 22
1965: PUSH
1966: LD_OWVAR 2
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 3
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: MUL
1994: PUSH
1995: LD_INT 30
1997: MUL
1998: PLUS
1999: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2000: LD_ADDR_VAR 0 2
2004: PUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_EXP 17
2014: PUSH
2015: LD_INT 10
2017: MUL
2018: PLUS
2019: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_VAR 0 2
2029: PUSH
2030: LD_INT 1
2032: NEG
2033: PUSH
2034: LD_EXP 17
2038: MUL
2039: PUSH
2040: LD_INT 20
2042: MUL
2043: PLUS
2044: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 1
2057: NEG
2058: PUSH
2059: LD_OWVAR 1
2063: PUSH
2064: LD_INT 35
2066: DIVREAL
2067: PUSH
2068: LD_INT 60
2070: DIVREAL
2071: MUL
2072: PUSH
2073: LD_INT 25
2075: MUL
2076: PLUS
2077: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_EXP 19
2092: PUSH
2093: LD_INT 15
2095: MUL
2096: PLUS
2097: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2098: LD_ADDR_VAR 0 2
2102: PUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 1
2110: NEG
2111: PUSH
2112: LD_EXP 20
2116: MUL
2117: PUSH
2118: LD_INT 1000
2120: MUL
2121: PLUS
2122: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2123: LD_ADDR_VAR 0 2
2127: PUSH
2128: LD_VAR 0 2
2132: PUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 5
2140: MUL
2141: PLUS
2142: ST_TO_ADDR
// result := points ;
2143: LD_ADDR_VAR 0 1
2147: PUSH
2148: LD_VAR 0 2
2152: ST_TO_ADDR
// end ; end_of_file
2153: LD_VAR 0 1
2157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2158: LD_VAR 0 1
2162: PPUSH
2163: CALL 32265 0 1
// if un = ru_cargo then
2167: LD_VAR 0 1
2171: PUSH
2172: LD_EXP 30
2176: EQUAL
2177: IFFALSE 2187
// ru_cargo := 0 ;
2179: LD_ADDR_EXP 30
2183: PUSH
2184: LD_INT 0
2186: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2187: LD_VAR 0 1
2191: PPUSH
2192: CALL_OW 255
2196: PUSH
2197: LD_OWVAR 2
2201: EQUAL
2202: IFFALSE 2218
// dead_counter := dead_counter + 1 ;
2204: LD_ADDR_EXP 16
2208: PUSH
2209: LD_EXP 16
2213: PUSH
2214: LD_INT 1
2216: PLUS
2217: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2218: LD_VAR 0 1
2222: PPUSH
2223: CALL_OW 255
2227: PUSH
2228: LD_INT 81
2230: PUSH
2231: LD_OWVAR 2
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: IN
2245: IFFALSE 2261
// kill_counter := kill_counter + 1 ;
2247: LD_ADDR_EXP 17
2251: PUSH
2252: LD_EXP 17
2256: PUSH
2257: LD_INT 1
2259: PLUS
2260: ST_TO_ADDR
// if un = player_commander then
2261: LD_VAR 0 1
2265: PUSH
2266: LD_EXP 11
2270: EQUAL
2271: IFFALSE 2280
// YouLost ( vulcano-lost ) ;
2273: LD_STRING vulcano-lost
2275: PPUSH
2276: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2280: LD_VAR 0 1
2284: PUSH
2285: LD_INT 22
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 21
2297: PUSH
2298: LD_INT 3
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 69
2313: IN
2314: IFFALSE 2430
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2316: LD_VAR 0 1
2320: PPUSH
2321: CALL_OW 266
2325: PUSH
2326: LD_INT 33
2328: EQUAL
2329: PUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 266
2339: PUSH
2340: LD_INT 28
2342: EQUAL
2343: OR
2344: IFFALSE 2430
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2346: LD_ADDR_EXP 31
2350: PUSH
2351: LD_EXP 31
2355: PUSH
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 266
2365: ADD
2366: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2367: LD_ADDR_EXP 31
2371: PUSH
2372: LD_EXP 31
2376: PUSH
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL_OW 250
2386: ADD
2387: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2388: LD_ADDR_EXP 31
2392: PUSH
2393: LD_EXP 31
2397: PUSH
2398: LD_VAR 0 1
2402: PPUSH
2403: CALL_OW 251
2407: ADD
2408: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2409: LD_ADDR_EXP 31
2413: PUSH
2414: LD_EXP 31
2418: PUSH
2419: LD_VAR 0 1
2423: PPUSH
2424: CALL_OW 254
2428: ADD
2429: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2430: LD_VAR 0 1
2434: PUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 8
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: IN
2464: IFFALSE 2608
// begin if GetBType ( un ) = b_barracks then
2466: LD_VAR 0 1
2470: PPUSH
2471: CALL_OW 266
2475: PUSH
2476: LD_INT 5
2478: EQUAL
2479: IFFALSE 2497
// legion_blist := legion_blist ^ b_armoury else
2481: LD_ADDR_EXP 39
2485: PUSH
2486: LD_EXP 39
2490: PUSH
2491: LD_INT 4
2493: ADD
2494: ST_TO_ADDR
2495: GO 2545
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2497: LD_VAR 0 1
2501: PPUSH
2502: CALL_OW 266
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 6
2512: PUSH
2513: LD_INT 8
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: IN
2521: NOT
2522: IFFALSE 2545
// legion_blist := legion_blist ^ GetBType ( un ) ;
2524: LD_ADDR_EXP 39
2528: PUSH
2529: LD_EXP 39
2533: PUSH
2534: LD_VAR 0 1
2538: PPUSH
2539: CALL_OW 266
2543: ADD
2544: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2545: LD_ADDR_EXP 39
2549: PUSH
2550: LD_EXP 39
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: ADD
2565: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2566: LD_ADDR_EXP 39
2570: PUSH
2571: LD_EXP 39
2575: PUSH
2576: LD_VAR 0 1
2580: PPUSH
2581: CALL_OW 251
2585: ADD
2586: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2587: LD_ADDR_EXP 39
2591: PUSH
2592: LD_EXP 39
2596: PUSH
2597: LD_VAR 0 1
2601: PPUSH
2602: CALL_OW 254
2606: ADD
2607: ST_TO_ADDR
// end ; if un in legion_force then
2608: LD_VAR 0 1
2612: PUSH
2613: LD_EXP 36
2617: IN
2618: IFFALSE 2636
// legion_force := legion_force diff un ;
2620: LD_ADDR_EXP 36
2624: PUSH
2625: LD_EXP 36
2629: PUSH
2630: LD_VAR 0 1
2634: DIFF
2635: ST_TO_ADDR
// if un in ru_force then
2636: LD_VAR 0 1
2640: PUSH
2641: LD_EXP 28
2645: IN
2646: IFFALSE 2664
// ru_force := ru_force diff un ;
2648: LD_ADDR_EXP 28
2652: PUSH
2653: LD_EXP 28
2657: PUSH
2658: LD_VAR 0 1
2662: DIFF
2663: ST_TO_ADDR
// if un in al_force then
2664: LD_VAR 0 1
2668: PUSH
2669: LD_EXP 43
2673: IN
2674: IFFALSE 2692
// al_force := al_force diff un ;
2676: LD_ADDR_EXP 43
2680: PUSH
2681: LD_EXP 43
2685: PUSH
2686: LD_VAR 0 1
2690: DIFF
2691: ST_TO_ADDR
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do var i ;
2695: LD_INT 0
2697: PPUSH
// begin if GetSide ( b ) = 8 then
2698: LD_VAR 0 1
2702: PPUSH
2703: CALL_OW 255
2707: PUSH
2708: LD_INT 8
2710: EQUAL
2711: IFFALSE 2751
// for i = 1 to 4 do
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: DOUBLE
2719: LD_INT 1
2721: DEC
2722: ST_TO_ADDR
2723: LD_INT 4
2725: PUSH
2726: FOR_TO
2727: IFFALSE 2749
// legion_blist := Delete ( legion_blist , 1 ) ;
2729: LD_ADDR_EXP 39
2733: PUSH
2734: LD_EXP 39
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 3
2746: ST_TO_ADDR
2747: GO 2726
2749: POP
2750: POP
// if GetSide ( b ) = 3 then
2751: LD_VAR 0 1
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 3
2763: EQUAL
2764: IFFALSE 2804
// for i = 1 to 4 do
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: DOUBLE
2772: LD_INT 1
2774: DEC
2775: ST_TO_ADDR
2776: LD_INT 4
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2802
// ru_blist := Delete ( ru_blist , 1 ) ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_EXP 31
2791: PPUSH
2792: LD_INT 1
2794: PPUSH
2795: CALL_OW 3
2799: ST_TO_ADDR
2800: GO 2779
2802: POP
2803: POP
// end ;
2804: PPOPN 2
2806: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL_OW 264
2816: PUSH
2817: LD_INT 51
2819: PUSH
2820: LD_INT 48
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: IN
2827: NOT
2828: IFFALSE 2876
// begin if GetSide ( veh ) = 3 then
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL_OW 255
2839: PUSH
2840: LD_INT 3
2842: EQUAL
2843: IFFALSE 2876
// begin ComMoveXY ( veh , 149 , 8 ) ;
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_INT 149
2852: PPUSH
2853: LD_INT 8
2855: PPUSH
2856: CALL_OW 111
// ru_force := ru_force ^ veh ;
2860: LD_ADDR_EXP 28
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_VAR 0 1
2874: ADD
2875: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
2876: LD_VAR 0 1
2880: PPUSH
2881: CALL_OW 264
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 31
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: IN
2896: NOT
2897: IFFALSE 2930
// begin if GetSide ( veh ) = 8 then
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL_OW 255
2908: PUSH
2909: LD_INT 8
2911: EQUAL
2912: IFFALSE 2930
// legion_force := legion_force ^ veh ;
2914: LD_ADDR_EXP 36
2918: PUSH
2919: LD_EXP 36
2923: PUSH
2924: LD_VAR 0 1
2928: ADD
2929: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 255
2939: PUSH
2940: LD_INT 3
2942: EQUAL
2943: PUSH
2944: LD_EXP 30
2948: NOT
2949: AND
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: CALL_OW 264
2960: PUSH
2961: LD_INT 51
2963: EQUAL
2964: AND
2965: IFFALSE 2977
// ru_cargo := veh ;
2967: LD_ADDR_EXP 30
2971: PUSH
2972: LD_VAR 0 1
2976: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
2977: LD_VAR 0 1
2981: PPUSH
2982: CALL_OW 255
2986: PUSH
2987: LD_INT 7
2989: EQUAL
2990: PUSH
2991: LD_OWVAR 2
2995: PUSH
2996: LD_INT 7
2998: NONEQUAL
2999: AND
3000: IFFALSE 3018
// al_force := al_force ^ veh ;
3002: LD_ADDR_EXP 43
3006: PUSH
3007: LD_EXP 43
3011: PUSH
3012: LD_VAR 0 1
3016: ADD
3017: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_OWVAR 2
3032: EQUAL
3033: IFFALSE 3049
// veh_counter := veh_counter + 1 ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: LD_EXP 18
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ST_TO_ADDR
// end ;
3049: PPOPN 2
3051: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3052: LD_VAR 0 1
3056: PPUSH
3057: CALL_OW 255
3061: PUSH
3062: LD_OWVAR 2
3066: NONEQUAL
3067: IFFALSE 3083
// sib_contamin_counter := sib_contamin_counter + 1 ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_INT 1
3081: PLUS
3082: ST_TO_ADDR
// end ;
3083: PPOPN 3
3085: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3086: LD_VAR 0 2
3090: PPUSH
3091: CALL_OW 255
3095: PUSH
3096: LD_OWVAR 2
3100: EQUAL
3101: IFFALSE 3117
// tech_counter := tech_counter + 1 ;
3103: LD_ADDR_EXP 19
3107: PUSH
3108: LD_EXP 19
3112: PUSH
3113: LD_INT 1
3115: PLUS
3116: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3117: LD_VAR 0 1
3121: PUSH
3122: LD_INT 53
3124: EQUAL
3125: PUSH
3126: LD_OWVAR 2
3130: PUSH
3131: LD_INT 1
3133: EQUAL
3134: AND
3135: IFFALSE 3150
// SetTech ( 80 , 1 , state_researched ) ;
3137: LD_INT 80
3139: PPUSH
3140: LD_INT 1
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 322
// end ;
3150: PPOPN 2
3152: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 255
3162: PUSH
3163: LD_INT 8
3165: EQUAL
3166: PUSH
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 263
3176: PUSH
3177: LD_INT 2
3179: EQUAL
3180: AND
3181: IFFALSE 3192
// ComAutodestruct ( un ) ;
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL 69050 0 1
// end ;
3192: PPOPN 1
3194: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3195: LD_VAR 0 1
3199: PUSH
3200: LD_EXP 21
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3217
3210: POP
// LegionAttack ( ) ; event_alliance_attack :
3211: CALL 10405 0 0
3215: GO 3252
3217: LD_EXP 23
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3234
3227: POP
// AllianceAttack ( ) ; event_russian_attack :
3228: CALL 17521 0 0
3232: GO 3252
3234: LD_EXP 22
3238: DOUBLE
3239: EQUAL
3240: IFTRUE 3244
3242: GO 3251
3244: POP
// RussianAttack ( ) ; end ;
3245: CALL 6629 0 0
3249: GO 3252
3251: POP
// end ;
3252: PPOPN 1
3254: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3255: LD_INT 25
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PPUSH
3265: CALL_OW 69
3269: PUSH
3270: LD_INT 9
3272: LESS
3273: IFFALSE 3306
3275: GO 3277
3277: DISABLE
// begin enable ;
3278: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3279: LD_INT 8
3281: PUSH
3282: LD_INT 25
3284: PUSH
3285: LD_INT 12
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 69
3296: PUSH
3297: LD_INT 0
3299: PLUS
3300: MINUS
3301: PPUSH
3302: CALL 1541 0 1
// end ;
3306: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3307: LD_VAR 0 1
3311: PPUSH
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_VAR 0 3
3321: PPUSH
3322: CALL 32363 0 3
// end ;
3326: PPOPN 3
3328: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 32371 0 1
// end ; end_of_file
3338: PPOPN 1
3340: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
3347: PPUSH
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// uc_side := 3 ;
3354: LD_ADDR_OWVAR 20
3358: PUSH
3359: LD_INT 3
3361: ST_TO_ADDR
// uc_nation := nation_russian ;
3362: LD_ADDR_OWVAR 21
3366: PUSH
3367: LD_INT 3
3369: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PUSH
3404: LD_INT 1
3406: ARRAY
3407: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3408: LD_ADDR_VAR 0 5
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 3
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PPUSH
3437: CALL_OW 69
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3446: LD_ADDR_VAR 0 6
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 34
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3484: LD_ADDR_VAR 0 8
3488: PUSH
3489: LD_INT 22
3491: PUSH
3492: LD_INT 3
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 33
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3518: LD_ADDR_VAR 0 7
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 30
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: ST_TO_ADDR
// ru_blist := [ ] ;
3556: LD_ADDR_EXP 31
3560: PUSH
3561: EMPTY
3562: ST_TO_ADDR
// ru_vlist := [ ] ;
3563: LD_ADDR_EXP 32
3567: PUSH
3568: EMPTY
3569: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3570: LD_ADDR_EXP 35
3574: PUSH
3575: LD_INT 183
3577: PUSH
3578: LD_INT 62
3580: PUSH
3581: LD_INT 147
3583: PUSH
3584: LD_INT 44
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3593: LD_INT 30
3595: PUSH
3596: LD_INT 34
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_EXP 35
3616: PUSH
3617: LD_INT 1
3619: ARRAY
3620: PPUSH
3621: LD_EXP 35
3625: PUSH
3626: LD_INT 2
3628: ARRAY
3629: PPUSH
3630: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3634: LD_ADDR_EXP 33
3638: PUSH
3639: LD_INT 4
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: LD_INT 6
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: LD_OWVAR 67
3657: ARRAY
3658: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: CALL_OW 274
3668: PPUSH
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 3000
3674: PPUSH
3675: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: LD_INT 300
3694: PPUSH
3695: CALL_OW 277
// hc_gallery :=  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name :=  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_importance := 0 ;
3715: LD_ADDR_OWVAR 32
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3723: LD_ADDR_EXP 29
3727: PUSH
3728: LD_INT 5
3730: PUSH
3731: LD_INT 6
3733: PUSH
3734: LD_INT 7
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: LD_OWVAR 67
3746: ARRAY
3747: ST_TO_ADDR
// for i = 1 to 6 do
3748: LD_ADDR_VAR 0 2
3752: PUSH
3753: DOUBLE
3754: LD_INT 1
3756: DEC
3757: ST_TO_ADDR
3758: LD_INT 6
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3920
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3764: LD_INT 0
3766: PPUSH
3767: LD_INT 9
3769: PPUSH
3770: LD_EXP 29
3774: PPUSH
3775: CALL_OW 380
// un := CreateHuman ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: CALL_OW 44
3788: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3789: LD_VAR 0 3
3793: PPUSH
3794: LD_VAR 0 7
3798: PPUSH
3799: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3803: LD_INT 0
3805: PPUSH
3806: LD_INT 4
3808: PPUSH
3809: LD_EXP 29
3813: PPUSH
3814: CALL_OW 380
// un := CreateHuman ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: CALL_OW 44
3827: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3828: LD_VAR 0 3
3832: PPUSH
3833: LD_INT 24
3835: PPUSH
3836: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_INT 3
3845: PPUSH
3846: LD_EXP 29
3850: PPUSH
3851: CALL_OW 380
// un := CreateHuman ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: CALL_OW 44
3864: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
3865: LD_VAR 0 3
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
3879: LD_INT 0
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: LD_EXP 29
3889: PPUSH
3890: CALL_OW 380
// un := CreateHuman ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 44
3903: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: CALL_OW 52
// end ;
3918: GO 3761
3920: POP
3921: POP
// russian_prepared := true ;
3922: LD_ADDR_EXP 2
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: LD_INT 3
3943: PPUSH
3944: LD_INT 51
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: LD_VAR 0 1
3955: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
3956: LD_INT 22
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 69
3970: PUSH
3971: LD_INT 0
3973: GREATER
3974: PUSH
3975: LD_EXP 2
3979: AND
3980: IFFALSE 6130
3982: GO 3984
3984: DISABLE
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
// begin enable ;
4003: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4004: LD_ADDR_VAR 0 1
4008: PUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 30
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 69
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_INT 22
4049: PUSH
4050: LD_INT 3
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: LD_INT 1
4078: ARRAY
4079: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4080: LD_ADDR_VAR 0 3
4084: PUSH
4085: LD_INT 22
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 30
4097: PUSH
4098: LD_INT 34
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_INT 22
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 30
4135: PUSH
4136: LD_INT 33
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 22
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 30
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_INT 22
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 21
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4224: LD_ADDR_VAR 0 6
4228: PUSH
4229: LD_INT 22
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 21
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PPUSH
4253: CALL_OW 69
4257: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4258: LD_ADDR_VAR 0 7
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 21
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PPUSH
4287: CALL_OW 69
4291: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4292: LD_ADDR_VAR 0 9
4296: PUSH
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 25
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 72
4316: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4317: LD_ADDR_VAR 0 10
4321: PUSH
4322: LD_VAR 0 7
4326: PPUSH
4327: LD_INT 25
4329: PUSH
4330: LD_INT 3
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 72
4341: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4342: LD_ADDR_VAR 0 11
4346: PUSH
4347: LD_VAR 0 7
4351: PPUSH
4352: LD_INT 25
4354: PUSH
4355: LD_INT 4
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PPUSH
4362: CALL_OW 72
4366: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4367: LD_INT 22
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 51
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 69
4395: PUSH
4396: LD_INT 0
4398: GREATER
4399: PUSH
4400: LD_EXP 30
4404: PUSH
4405: LD_INT 0
4407: EQUAL
4408: AND
4409: IFFALSE 4449
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4411: LD_ADDR_EXP 30
4415: PUSH
4416: LD_INT 22
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 34
4428: PUSH
4429: LD_INT 51
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: ST_TO_ADDR
// if ru_cargo then
4449: LD_EXP 30
4453: IFFALSE 4793
// begin if IsInArea ( ru_cargo , ru_base ) then
4455: LD_EXP 30
4459: PPUSH
4460: LD_INT 9
4462: PPUSH
4463: CALL_OW 308
4467: IFFALSE 4546
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4469: LD_EXP 30
4473: PPUSH
4474: LD_INT 1
4476: PPUSH
4477: CALL_OW 289
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: IFFALSE 4503
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4487: LD_EXP 30
4491: PPUSH
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 120
4501: GO 4544
// if not HasTask ( ru_cargo ) then
4503: LD_EXP 30
4507: PPUSH
4508: CALL_OW 314
4512: NOT
4513: IFFALSE 4544
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4515: LD_EXP 30
4519: PPUSH
4520: LD_VAR 0 1
4524: PPUSH
4525: CALL_OW 250
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 251
4539: PPUSH
4540: CALL_OW 111
// end else
4544: GO 4793
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4546: LD_EXP 30
4550: PPUSH
4551: CALL_OW 314
4555: NOT
4556: PUSH
4557: LD_EXP 30
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 289
4569: PUSH
4570: LD_INT 100
4572: LESS
4573: AND
4574: PUSH
4575: LD_EXP 30
4579: PPUSH
4580: LD_INT 10
4582: PPUSH
4583: CALL_OW 308
4587: NOT
4588: AND
4589: IFFALSE 4666
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4591: LD_ADDR_VAR 0 15
4595: PUSH
4596: LD_INT 11
4598: PPUSH
4599: CALL_OW 435
4603: ST_TO_ADDR
// if cr then
4604: LD_VAR 0 15
4608: IFFALSE 4639
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4610: LD_EXP 30
4614: PPUSH
4615: LD_VAR 0 15
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: LD_VAR 0 15
4628: PUSH
4629: LD_INT 2
4631: ARRAY
4632: PPUSH
4633: CALL_OW 117
4637: GO 4666
// if not IsInArea ( ru_cargo , ru_crates ) then
4639: LD_EXP 30
4643: PPUSH
4644: LD_INT 11
4646: PPUSH
4647: CALL_OW 308
4651: NOT
4652: IFFALSE 4666
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4654: LD_EXP 30
4658: PPUSH
4659: LD_INT 11
4661: PPUSH
4662: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
4666: LD_EXP 30
4670: PPUSH
4671: CALL_OW 314
4675: NOT
4676: PUSH
4677: LD_EXP 30
4681: PPUSH
4682: LD_INT 10
4684: PPUSH
4685: CALL_OW 308
4689: NOT
4690: AND
4691: PUSH
4692: LD_EXP 30
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 289
4704: PUSH
4705: LD_INT 100
4707: EQUAL
4708: PUSH
4709: LD_OWVAR 2
4713: PPUSH
4714: LD_EXP 30
4718: PPUSH
4719: CALL_OW 292
4723: OR
4724: AND
4725: IFFALSE 4739
// ComMoveToArea ( ru_cargo , cargoa ) ;
4727: LD_EXP 30
4731: PPUSH
4732: LD_INT 10
4734: PPUSH
4735: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4739: LD_EXP 30
4743: PPUSH
4744: LD_INT 10
4746: PPUSH
4747: CALL_OW 308
4751: PUSH
4752: LD_VAR 0 8
4756: AND
4757: IFFALSE 4793
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4759: LD_VAR 0 7
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 9
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: LD_INT 139
4785: PPUSH
4786: LD_INT 24
4788: PPUSH
4789: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4793: LD_EXP 30
4797: PUSH
4798: LD_INT 0
4800: EQUAL
4801: PUSH
4802: LD_VAR 0 2
4806: AND
4807: PUSH
4808: LD_VAR 0 2
4812: PPUSH
4813: CALL_OW 461
4817: PUSH
4818: LD_INT 2
4820: EQUAL
4821: AND
4822: IFFALSE 4845
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 21
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 51
4840: PPUSH
4841: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
4845: LD_VAR 0 2
4849: PUSH
4850: LD_EXP 32
4854: PUSH
4855: LD_INT 0
4857: GREATER
4858: AND
4859: IFFALSE 4959
// begin if BuildingStatus ( ru_factory ) = bs_idle then
4861: LD_VAR 0 2
4865: PPUSH
4866: CALL_OW 461
4870: PUSH
4871: LD_INT 2
4873: EQUAL
4874: IFFALSE 4959
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
4876: LD_VAR 0 2
4880: PPUSH
4881: LD_EXP 32
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: PPUSH
4890: LD_EXP 32
4894: PUSH
4895: LD_INT 2
4897: ARRAY
4898: PPUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_INT 3
4906: ARRAY
4907: PPUSH
4908: LD_EXP 32
4912: PUSH
4913: LD_INT 4
4915: ARRAY
4916: PPUSH
4917: CALL_OW 125
// for i = 1 to 4 do
4921: LD_ADDR_VAR 0 12
4925: PUSH
4926: DOUBLE
4927: LD_INT 1
4929: DEC
4930: ST_TO_ADDR
4931: LD_INT 4
4933: PUSH
4934: FOR_TO
4935: IFFALSE 4957
// ru_vlist := Delete ( ru_vlist , 1 ) ;
4937: LD_ADDR_EXP 32
4941: PUSH
4942: LD_EXP 32
4946: PPUSH
4947: LD_INT 1
4949: PPUSH
4950: CALL_OW 3
4954: ST_TO_ADDR
4955: GO 4934
4957: POP
4958: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
4959: LD_INT 24
4961: PPUSH
4962: CALL_OW 461
4966: PUSH
4967: LD_INT 2
4969: EQUAL
4970: PUSH
4971: LD_EXP 4
4975: AND
4976: IFFALSE 5004
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
4978: LD_INT 25
4980: PPUSH
4981: LD_INT 3
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: IFFALSE 5004
// ComResearch ( ru_lab , tech_sibfiss ) ;
4994: LD_INT 24
4996: PPUSH
4997: LD_INT 25
4999: PPUSH
5000: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5004: LD_INT 25
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: CALL_OW 321
5014: PUSH
5015: LD_INT 2
5017: EQUAL
5018: PUSH
5019: LD_OWVAR 1
5023: PUSH
5024: LD_INT 10500
5026: MOD
5027: PUSH
5028: LD_INT 0
5030: EQUAL
5031: AND
5032: IFFALSE 5070
// if BuildingStatus ( ru_factory ) = bs_idle then
5034: LD_VAR 0 2
5038: PPUSH
5039: CALL_OW 461
5043: PUSH
5044: LD_INT 2
5046: EQUAL
5047: IFFALSE 5070
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_INT 23
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 3
5062: PPUSH
5063: LD_INT 48
5065: PPUSH
5066: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5070: LD_INT 22
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 34
5082: PUSH
5083: LD_INT 48
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 69
5098: PUSH
5099: LD_INT 0
5101: GREATER
5102: IFFALSE 5476
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5104: LD_ADDR_VAR 0 16
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 34
5121: PUSH
5122: LD_INT 48
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5142: LD_VAR 0 16
5146: PPUSH
5147: LD_INT 9
5149: PPUSH
5150: CALL_OW 308
5154: IFFALSE 5172
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5156: LD_VAR 0 16
5160: PPUSH
5161: LD_VAR 0 3
5165: PPUSH
5166: CALL_OW 120
5170: GO 5476
// if not HasTask ( sib_bomb ) then
5172: LD_VAR 0 16
5176: PPUSH
5177: CALL_OW 314
5181: NOT
5182: IFFALSE 5476
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5184: LD_INT 22
5186: PUSH
5187: LD_OWVAR 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 30
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: CALL_OW 256
5223: PUSH
5224: LD_INT 250
5226: GREATER
5227: IFFALSE 5320
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5229: LD_VAR 0 16
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_OWVAR 2
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 30
5248: PUSH
5249: LD_INT 1
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PPUSH
5260: CALL_OW 69
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: CALL_OW 250
5273: PPUSH
5274: LD_INT 22
5276: PUSH
5277: LD_OWVAR 2
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 1
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_INT 1
5307: ARRAY
5308: PPUSH
5309: CALL_OW 251
5313: PPUSH
5314: CALL_OW 116
5318: GO 5476
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5320: LD_INT 22
5322: PUSH
5323: LD_OWVAR 2
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: PUSH
5351: LD_INT 0
5353: GREATER
5354: IFFALSE 5447
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5356: LD_VAR 0 16
5360: PPUSH
5361: LD_INT 22
5363: PUSH
5364: LD_OWVAR 2
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: CALL_OW 250
5400: PPUSH
5401: LD_INT 22
5403: PUSH
5404: LD_OWVAR 2
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 21
5415: PUSH
5416: LD_INT 3
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: CALL_OW 251
5440: PPUSH
5441: CALL_OW 116
5445: GO 5476
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5447: LD_VAR 0 16
5451: PPUSH
5452: LD_EXP 11
5456: PPUSH
5457: CALL_OW 250
5461: PPUSH
5462: LD_EXP 11
5466: PPUSH
5467: CALL_OW 251
5471: PPUSH
5472: CALL_OW 116
// end ; if ru_can_attack then
5476: LD_EXP 3
5480: IFFALSE 5628
// if ru_time > 0 0$00 then
5482: LD_EXP 34
5486: PUSH
5487: LD_INT 0
5489: GREATER
5490: IFFALSE 5508
// ru_time := ru_time - 0 0$03 else
5492: LD_ADDR_EXP 34
5496: PUSH
5497: LD_EXP 34
5501: PUSH
5502: LD_INT 105
5504: MINUS
5505: ST_TO_ADDR
5506: GO 5628
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5508: LD_ADDR_EXP 34
5512: PUSH
5513: LD_INT 20265
5515: PPUSH
5516: LD_INT 30765
5518: PPUSH
5519: CALL_OW 12
5523: ST_TO_ADDR
// for i = 1 to ru_amount do
5524: LD_ADDR_VAR 0 12
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 33
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5626
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5542: LD_ADDR_EXP 32
5546: PUSH
5547: LD_EXP 32
5551: PUSH
5552: LD_INT 23
5554: ADD
5555: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5556: LD_ADDR_EXP 32
5560: PUSH
5561: LD_EXP 32
5565: PUSH
5566: LD_INT 3
5568: ADD
5569: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5570: LD_ADDR_EXP 32
5574: PUSH
5575: LD_EXP 32
5579: PUSH
5580: LD_INT 3
5582: ADD
5583: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5584: LD_ADDR_EXP 32
5588: PUSH
5589: LD_EXP 32
5593: PUSH
5594: LD_INT 46
5596: PUSH
5597: LD_INT 45
5599: PUSH
5600: LD_INT 47
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_INT 3
5616: PPUSH
5617: CALL_OW 14
5621: ARRAY
5622: ADD
5623: ST_TO_ADDR
// end ;
5624: GO 5539
5626: POP
5627: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5628: LD_VAR 0 4
5632: PPUSH
5633: LD_INT 35
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 72
5647: PUSH
5648: LD_INT 0
5650: GREATER
5651: IFFALSE 5699
// if BuildingStatus ( ru_factory ) = bs_idle then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 461
5662: PUSH
5663: LD_INT 2
5665: EQUAL
5666: IFFALSE 5699
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5668: LD_VAR 0 4
5672: PPUSH
5673: LD_INT 35
5675: PUSH
5676: LD_INT 0
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 72
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_INT 47
5694: PPUSH
5695: CALL_OW 148
// if ru_force >= ru_amount then
5699: LD_EXP 28
5703: PUSH
5704: LD_EXP 33
5708: GREATEREQUAL
5709: IFFALSE 5720
// RaiseSailEvent ( event_russian_attack ) ;
5711: LD_EXP 22
5715: PPUSH
5716: CALL_OW 427
// if ru_engs > 0 then
5720: LD_VAR 0 9
5724: PUSH
5725: LD_INT 0
5727: GREATER
5728: IFFALSE 6130
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 3
5737: PUSH
5738: LD_INT 24
5740: PUSH
5741: LD_INT 1000
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 72
5756: PUSH
5757: LD_INT 0
5759: GREATER
5760: IFFALSE 5915
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
5762: LD_ADDR_VAR 0 14
5766: PUSH
5767: LD_VAR 0 5
5771: PPUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: LD_INT 1000
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 72
5793: ST_TO_ADDR
// for i = 1 to ru_engs do
5794: LD_ADDR_VAR 0 12
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_VAR 0 9
5808: PUSH
5809: FOR_TO
5810: IFFALSE 5911
// begin if IsInUnit ( ru_engs [ i ] ) then
5812: LD_VAR 0 9
5816: PUSH
5817: LD_VAR 0 12
5821: ARRAY
5822: PPUSH
5823: CALL_OW 310
5827: IFFALSE 5846
// ComExitBuilding ( ru_engs [ i ] ) else
5829: LD_VAR 0 9
5833: PUSH
5834: LD_VAR 0 12
5838: ARRAY
5839: PPUSH
5840: CALL_OW 122
5844: GO 5909
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
5846: LD_VAR 0 9
5850: PUSH
5851: LD_VAR 0 12
5855: ARRAY
5856: PPUSH
5857: CALL_OW 314
5861: NOT
5862: PUSH
5863: LD_VAR 0 9
5867: PUSH
5868: LD_VAR 0 12
5872: ARRAY
5873: PPUSH
5874: CALL_OW 256
5878: PUSH
5879: LD_INT 600
5881: GREATER
5882: AND
5883: IFFALSE 5909
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
5885: LD_VAR 0 9
5889: PUSH
5890: LD_VAR 0 12
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 14
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: CALL_OW 130
// end ;
5909: GO 5809
5911: POP
5912: POP
// end else
5913: GO 6130
// begin if ru_blist = 0 then
5915: LD_EXP 31
5919: PUSH
5920: LD_INT 0
5922: EQUAL
5923: IFFALSE 6005
// begin for i = 1 to ru_engs do
5925: LD_ADDR_VAR 0 12
5929: PUSH
5930: DOUBLE
5931: LD_INT 1
5933: DEC
5934: ST_TO_ADDR
5935: LD_VAR 0 9
5939: PUSH
5940: FOR_TO
5941: IFFALSE 6001
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
5943: LD_VAR 0 9
5947: PUSH
5948: LD_VAR 0 12
5952: ARRAY
5953: PPUSH
5954: CALL_OW 314
5958: NOT
5959: PUSH
5960: LD_VAR 0 9
5964: PUSH
5965: LD_VAR 0 12
5969: ARRAY
5970: PPUSH
5971: CALL_OW 310
5975: NOT
5976: AND
5977: IFFALSE 5999
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
5979: LD_VAR 0 9
5983: PUSH
5984: LD_VAR 0 12
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 120
5999: GO 5940
6001: POP
6002: POP
// end else
6003: GO 6130
// begin for i = 1 to ru_engs do
6005: LD_ADDR_VAR 0 12
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_VAR 0 9
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6128
// begin if IsInUnit ( ru_engs [ i ] ) then
6023: LD_VAR 0 9
6027: PUSH
6028: LD_VAR 0 12
6032: ARRAY
6033: PPUSH
6034: CALL_OW 310
6038: IFFALSE 6057
// ComExitBuilding ( ru_engs [ i ] ) else
6040: LD_VAR 0 9
6044: PUSH
6045: LD_VAR 0 12
6049: ARRAY
6050: PPUSH
6051: CALL_OW 122
6055: GO 6126
// if not HasTask ( ru_engs [ i ] ) then
6057: LD_VAR 0 9
6061: PUSH
6062: LD_VAR 0 12
6066: ARRAY
6067: PPUSH
6068: CALL_OW 314
6072: NOT
6073: IFFALSE 6126
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6075: LD_VAR 0 9
6079: PUSH
6080: LD_VAR 0 12
6084: ARRAY
6085: PPUSH
6086: LD_EXP 31
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_EXP 31
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: LD_EXP 31
6108: PUSH
6109: LD_INT 3
6111: ARRAY
6112: PPUSH
6113: LD_EXP 31
6117: PUSH
6118: LD_INT 4
6120: ARRAY
6121: PPUSH
6122: CALL_OW 145
// end ;
6126: GO 6020
6128: POP
6129: POP
// end ; end ; end ; end ;
6130: PPOPN 16
6132: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6133: LD_EXP 2
6137: PUSH
6138: LD_INT 11
6140: PPUSH
6141: CALL_OW 435
6145: PUSH
6146: LD_INT 10
6148: LESS
6149: AND
6150: IFFALSE 6213
6152: GO 6154
6154: DISABLE
// begin enable ;
6155: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6156: LD_INT 1
6158: PPUSH
6159: LD_INT 5
6161: PPUSH
6162: CALL_OW 12
6166: PPUSH
6167: LD_INT 11
6169: PPUSH
6170: LD_INT 1
6172: PPUSH
6173: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6177: LD_INT 1505
6179: PPUSH
6180: LD_INT 2100
6182: PPUSH
6183: CALL_OW 12
6187: PPUSH
6188: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6192: LD_INT 1
6194: PPUSH
6195: LD_INT 5
6197: PPUSH
6198: CALL_OW 12
6202: PPUSH
6203: LD_INT 11
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 55
// end ;
6213: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6214: LD_EXP 4
6218: NOT
6219: IFFALSE 6334
6221: GO 6223
6223: DISABLE
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// begin enable ;
6228: ENABLE
// i := Rand ( 0 , 100 ) ;
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 100
6239: PPUSH
6240: CALL_OW 12
6244: ST_TO_ADDR
// case your_side of 1 :
6245: LD_OWVAR 2
6249: PUSH
6250: LD_INT 1
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6269
6258: POP
// tmp := 10 ; 2 :
6259: LD_ADDR_VAR 0 2
6263: PUSH
6264: LD_INT 10
6266: ST_TO_ADDR
6267: GO 6308
6269: LD_INT 2
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6288
6277: POP
// tmp := 0 ; 7 :
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
6286: GO 6308
6288: LD_INT 7
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6296
6294: GO 6307
6296: POP
// tmp := 15 ; end ;
6297: LD_ADDR_VAR 0 2
6301: PUSH
6302: LD_INT 15
6304: ST_TO_ADDR
6305: GO 6308
6307: POP
// if i < chance_to_bomb + tmp then
6308: LD_VAR 0 1
6312: PUSH
6313: LD_EXP 5
6317: PUSH
6318: LD_VAR 0 2
6322: PLUS
6323: LESS
6324: IFFALSE 6334
// ru_sib_bomb := true ;
6326: LD_ADDR_EXP 4
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// end ;
6334: PPOPN 2
6336: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6337: LD_INT 22
6339: PUSH
6340: LD_OWVAR 2
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 34
6351: PUSH
6352: LD_INT 8
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 69
6367: IFFALSE 6380
6369: GO 6371
6371: DISABLE
// begin ru_sib_bomb := true ;
6372: LD_ADDR_EXP 4
6376: PUSH
6377: LD_INT 1
6379: ST_TO_ADDR
// end ;
6380: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6381: LD_INT 22
6383: PUSH
6384: LD_INT 3
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 34
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 69
6409: IFFALSE 6508
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
// begin enable ;
6417: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6418: LD_ADDR_VAR 0 1
6422: PUSH
6423: LD_INT 1
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL_OW 12
6443: ARRAY
6444: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6445: LD_INT 22
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 30
6457: PUSH
6458: LD_INT 34
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_EXP 35
6482: PUSH
6483: LD_VAR 0 1
6487: ARRAY
6488: PPUSH
6489: LD_EXP 35
6493: PUSH
6494: LD_VAR 0 1
6498: PUSH
6499: LD_INT 1
6501: PLUS
6502: ARRAY
6503: PPUSH
6504: CALL_OW 243
// end ;
6508: PPOPN 1
6510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: IFFALSE 6626
6541: GO 6543
6543: DISABLE
6544: LD_INT 0
6546: PPUSH
// begin enable ;
6547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 30
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 69
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 274
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 6000
6601: PPUSH
6602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
6606: LD_VAR 0 1
6610: PPUSH
6611: CALL_OW 274
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 600
6621: PPUSH
6622: CALL_OW 276
// end ;
6626: PPOPN 1
6628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
6629: LD_INT 0
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
// units := ru_force ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_EXP 28
6646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_INT 3
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 30
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: ST_TO_ADDR
// ru_force := [ ] ;
6681: LD_ADDR_EXP 28
6685: PUSH
6686: EMPTY
6687: ST_TO_ADDR
// if not teleport then
6688: LD_VAR 0 6
6692: NOT
6693: IFFALSE 6735
// begin for i in units do
6695: LD_ADDR_VAR 0 5
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: FOR_IN
6706: IFFALSE 6731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
6708: LD_VAR 0 5
6712: PPUSH
6713: LD_INT 150
6715: PPUSH
6716: LD_INT 65
6718: PPUSH
6719: LD_INT 12
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 483
6729: GO 6705
6731: POP
6732: POP
// end else
6733: GO 6830
// begin repeat for i = 1 to units do
6735: LD_ADDR_VAR 0 5
6739: PUSH
6740: DOUBLE
6741: LD_INT 1
6743: DEC
6744: ST_TO_ADDR
6745: LD_VAR 0 3
6749: PUSH
6750: FOR_TO
6751: IFFALSE 6799
// if IsInArea ( units [ i ] , ru_base ) then
6753: LD_VAR 0 3
6757: PUSH
6758: LD_VAR 0 5
6762: ARRAY
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 308
6771: IFFALSE 6797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
6773: LD_VAR 0 3
6777: PUSH
6778: LD_VAR 0 5
6782: ARRAY
6783: PPUSH
6784: LD_VAR 0 6
6788: PUSH
6789: LD_INT 1
6791: ARRAY
6792: PPUSH
6793: CALL_OW 120
6797: GO 6750
6799: POP
6800: POP
// wait ( 0 0$10 ) ;
6801: LD_INT 350
6803: PPUSH
6804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 95
6815: PUSH
6816: LD_INT 9
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: NOT
6828: IFFALSE 6735
// end ; p := rand ( 1 , 2 ) ;
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 2
6840: PPUSH
6841: CALL_OW 12
6845: ST_TO_ADDR
// case p of 1 :
6846: LD_VAR 0 4
6850: PUSH
6851: LD_INT 1
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6913
6859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_INT 159
6867: PUSH
6868: LD_INT 71
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 152
6877: PUSH
6878: LD_INT 99
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 107
6887: PUSH
6888: LD_INT 119
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 104
6897: PUSH
6898: LD_INT 127
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 6976
6913: LD_INT 2
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6975
6921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_INT 116
6929: PUSH
6930: LD_INT 36
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 52
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 53
6949: PUSH
6950: LD_INT 67
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 58
6959: PUSH
6960: LD_INT 107
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
6973: GO 6976
6975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
6976: LD_INT 22
6978: PUSH
6979: LD_INT 7
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_INT 1
6998: GREATER
6999: AND
7000: IFFALSE 7031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7002: LD_ADDR_VAR 0 2
7006: PUSH
7007: LD_INT 116
7009: PUSH
7010: LD_INT 36
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 91
7019: PUSH
7020: LD_INT 52
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7031: LD_INT 35
7033: PPUSH
7034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7038: LD_VAR 0 3
7042: PPUSH
7043: LD_VAR 0 2
7047: PPUSH
7048: CALL 75402 0 2
7052: NOT
7053: IFFALSE 7031
// end ; end_of_file
7055: LD_VAR 0 1
7059: RET
// export function RemoveLegion ; var i ; begin
7060: LD_INT 0
7062: PPUSH
7063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7064: LD_ADDR_VAR 0 2
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 8
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PPUSH
7079: CALL_OW 69
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7098
// RemoveUnit ( i ) ;
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 64
7096: GO 7084
7098: POP
7099: POP
// end ;
7100: LD_VAR 0 1
7104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7105: LD_INT 0
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7117: LD_ADDR_VAR 0 6
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 8
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 30
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 69
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7155: LD_ADDR_VAR 0 8
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 8
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 30
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7193: LD_ADDR_VAR 0 9
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 8
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 6
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 30
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7249: LD_ADDR_VAR 0 10
7253: PUSH
7254: LD_INT 22
7256: PUSH
7257: LD_INT 8
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 32
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: ST_TO_ADDR
// uc_side := 8 ;
7283: LD_ADDR_OWVAR 20
7287: PUSH
7288: LD_INT 8
7290: ST_TO_ADDR
// uc_nation := nation_arabian ;
7291: LD_ADDR_OWVAR 21
7295: PUSH
7296: LD_INT 2
7298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7299: LD_ADDR_EXP 37
7303: PUSH
7304: LD_INT 5
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: LD_INT 7
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: LD_OWVAR 67
7322: ARRAY
7323: ST_TO_ADDR
// legion_blist := [ ] ;
7324: LD_ADDR_EXP 39
7328: PUSH
7329: EMPTY
7330: ST_TO_ADDR
// legion_vlist := [ ] ;
7331: LD_ADDR_EXP 40
7335: PUSH
7336: EMPTY
7337: ST_TO_ADDR
// legion_force := [ ] ;
7338: LD_ADDR_EXP 36
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// legion_enemy := - 1 ;
7345: LD_ADDR_EXP 41
7349: PUSH
7350: LD_INT 1
7352: NEG
7353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7354: LD_VAR 0 6
7358: PPUSH
7359: CALL_OW 274
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 10000
7369: PPUSH
7370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7374: LD_VAR 0 6
7378: PPUSH
7379: CALL_OW 274
7383: PPUSH
7384: LD_INT 3
7386: PPUSH
7387: LD_INT 1000
7389: PPUSH
7390: CALL_OW 277
// for i = 1 to l_towers do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: DOUBLE
7400: LD_INT 1
7402: DEC
7403: ST_TO_ADDR
7404: LD_VAR 0 10
7408: PUSH
7409: FOR_TO
7410: IFFALSE 7459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7412: LD_INT 0
7414: PPUSH
7415: LD_INT 1
7417: PPUSH
7418: LD_EXP 37
7422: PPUSH
7423: CALL_OW 380
// un := CreateHuman ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: CALL_OW 44
7436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7437: LD_VAR 0 2
7441: PPUSH
7442: LD_VAR 0 10
7446: PUSH
7447: LD_VAR 0 3
7451: ARRAY
7452: PPUSH
7453: CALL_OW 52
// end ;
7457: GO 7409
7459: POP
7460: POP
// for i = 1 to 4 do
7461: LD_ADDR_VAR 0 3
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_INT 4
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7568
// for p = 1 to 2 do
7477: LD_ADDR_VAR 0 7
7481: PUSH
7482: DOUBLE
7483: LD_INT 1
7485: DEC
7486: ST_TO_ADDR
7487: LD_INT 2
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7493: LD_INT 0
7495: PPUSH
7496: LD_INT 8
7498: PPUSH
7499: LD_EXP 37
7503: PPUSH
7504: CALL_OW 380
// un := CreateHuman ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: CALL_OW 44
7517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 30
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: PUSH
7552: LD_VAR 0 7
7556: ARRAY
7557: PPUSH
7558: CALL_OW 52
// end ;
7562: GO 7490
7564: POP
7565: POP
7566: GO 7474
7568: POP
7569: POP
// for i = 1 to 4 do
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: DOUBLE
7576: LD_INT 1
7578: DEC
7579: ST_TO_ADDR
7580: LD_INT 4
7582: PUSH
7583: FOR_TO
7584: IFFALSE 7627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7586: LD_INT 0
7588: PPUSH
7589: LD_INT 4
7591: PPUSH
7592: LD_EXP 37
7596: PPUSH
7597: CALL_OW 380
// un := CreateHuman ;
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: CALL_OW 44
7610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7611: LD_VAR 0 2
7615: PPUSH
7616: LD_VAR 0 9
7620: PPUSH
7621: CALL_OW 52
// end ;
7625: GO 7583
7627: POP
7628: POP
// for i = 1 to 4 do
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_INT 4
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_INT 3
7650: PPUSH
7651: LD_EXP 37
7655: PPUSH
7656: CALL_OW 380
// un := CreateHuman ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 8
7679: PPUSH
7680: CALL_OW 52
// end ;
7684: GO 7642
7686: POP
7687: POP
// for i = 1 to 3 do
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: DOUBLE
7694: LD_INT 1
7696: DEC
7697: ST_TO_ADDR
7698: LD_INT 3
7700: PUSH
7701: FOR_TO
7702: IFFALSE 7745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7704: LD_INT 0
7706: PPUSH
7707: LD_INT 2
7709: PPUSH
7710: LD_EXP 37
7714: PPUSH
7715: CALL_OW 380
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7729: LD_VAR 0 2
7733: PPUSH
7734: LD_VAR 0 6
7738: PPUSH
7739: CALL_OW 52
// end ;
7743: GO 7701
7745: POP
7746: POP
// for i = 1 to 3 do
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: DOUBLE
7753: LD_INT 1
7755: DEC
7756: ST_TO_ADDR
7757: LD_INT 3
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7871
// begin vc_chassis := ar_half_tracked ;
7763: LD_ADDR_OWVAR 37
7767: PUSH
7768: LD_INT 14
7770: ST_TO_ADDR
// vc_engine := engine_siberite ;
7771: LD_ADDR_OWVAR 39
7775: PUSH
7776: LD_INT 3
7778: ST_TO_ADDR
// vc_control := control_manual ;
7779: LD_ADDR_OWVAR 38
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7787: LD_ADDR_OWVAR 40
7791: PUSH
7792: LD_INT 31
7794: ST_TO_ADDR
// veh := CreateVehicle ;
7795: LD_ADDR_VAR 0 5
7799: PUSH
7800: CALL_OW 45
7804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
7805: LD_VAR 0 5
7809: PPUSH
7810: LD_INT 212
7812: PPUSH
7813: LD_INT 135
7815: PPUSH
7816: LD_INT 5
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7826: LD_INT 0
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_EXP 37
7836: PUSH
7837: LD_INT 1
7839: PLUS
7840: PPUSH
7841: CALL_OW 380
// un := CreateHuman ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: CALL_OW 44
7854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7855: LD_VAR 0 2
7859: PPUSH
7860: LD_VAR 0 5
7864: PPUSH
7865: CALL_OW 52
// end ;
7869: GO 7760
7871: POP
7872: POP
// PrepareSoldier ( false , 8 ) ;
7873: LD_INT 0
7875: PPUSH
7876: LD_INT 8
7878: PPUSH
7879: CALL_OW 381
// hc_class := class_sniper ;
7883: LD_ADDR_OWVAR 28
7887: PUSH
7888: LD_INT 5
7890: ST_TO_ADDR
// un := CreateHuman ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: CALL_OW 44
7900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7901: LD_VAR 0 2
7905: PPUSH
7906: LD_INT 4
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
7913: LD_VAR 0 2
7917: PPUSH
7918: LD_INT 136
7920: PPUSH
7921: LD_INT 92
7923: PPUSH
7924: CALL_OW 428
7928: PPUSH
7929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
7933: LD_INT 198
7935: PPUSH
7936: LD_INT 94
7938: PPUSH
7939: LD_INT 8
7941: PPUSH
7942: LD_INT 10
7944: PPUSH
7945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
7949: LD_INT 167
7951: PPUSH
7952: LD_INT 130
7954: PPUSH
7955: LD_INT 8
7957: PPUSH
7958: LD_INT 10
7960: PPUSH
7961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
7965: LD_ADDR_VAR 0 4
7969: PUSH
7970: LD_INT 24
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: CALL_OW 517
7980: ST_TO_ADDR
// legion_mines := [ ] ;
7981: LD_ADDR_EXP 38
7985: PUSH
7986: EMPTY
7987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: DOUBLE
7994: LD_INT 1
7996: DEC
7997: ST_TO_ADDR
7998: LD_VAR 0 4
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PUSH
8019: LD_VAR 0 3
8023: ARRAY
8024: PPUSH
8025: LD_VAR 0 4
8029: PUSH
8030: LD_INT 2
8032: ARRAY
8033: PUSH
8034: LD_VAR 0 3
8038: ARRAY
8039: PPUSH
8040: LD_INT 8
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8050: LD_ADDR_EXP 38
8054: PUSH
8055: LD_EXP 38
8059: PPUSH
8060: LD_EXP 38
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PUSH
8078: LD_VAR 0 3
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PUSH
8093: LD_VAR 0 3
8097: ARRAY
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// end ;
8108: GO 8007
8110: POP
8111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8112: LD_ADDR_EXP 40
8116: PUSH
8117: LD_INT 13
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 32
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 1
8139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
8140: LD_EXP 38
8144: PUSH
8145: LD_INT 24
8147: PPUSH
8148: LD_INT 22
8150: PUSH
8151: LD_OWVAR 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 70
8164: AND
8165: IFFALSE 8332
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// begin enable ;
8174: ENABLE
// for i := legion_mines downto 1 do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: DOUBLE
8181: LD_EXP 38
8185: INC
8186: ST_TO_ADDR
8187: LD_INT 1
8189: PUSH
8190: FOR_DOWNTO
8191: IFFALSE 8330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_EXP 38
8202: PUSH
8203: LD_VAR 0 1
8207: ARRAY
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_EXP 38
8217: PUSH
8218: LD_VAR 0 1
8222: ARRAY
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 428
8232: ST_TO_ADDR
// if un then
8233: LD_VAR 0 2
8237: IFFALSE 8328
// if GetSide ( un ) = legion_enemy then
8239: LD_VAR 0 2
8243: PPUSH
8244: CALL_OW 255
8248: PUSH
8249: LD_EXP 41
8253: EQUAL
8254: IFFALSE 8328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
8256: LD_EXP 38
8260: PUSH
8261: LD_VAR 0 1
8265: ARRAY
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_EXP 38
8275: PUSH
8276: LD_VAR 0 1
8280: ARRAY
8281: PUSH
8282: LD_INT 2
8284: ARRAY
8285: PPUSH
8286: LD_INT 8
8288: PPUSH
8289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
8293: LD_ADDR_EXP 38
8297: PUSH
8298: LD_EXP 38
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 3
8312: ST_TO_ADDR
// if not mine_vulc then
8313: LD_EXP 13
8317: NOT
8318: IFFALSE 8328
// mine_vulc := true ;
8320: LD_ADDR_EXP 13
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// end ; end ;
8328: GO 8190
8330: POP
8331: POP
// end ;
8332: PPOPN 2
8334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8335: LD_OWVAR 1
8339: PUSH
8340: LD_INT 52500
8342: PUSH
8343: LD_INT 46200
8345: PUSH
8346: LD_INT 42000
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: GREATEREQUAL
8360: IFFALSE 8538
8362: GO 8364
8364: DISABLE
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: LD_INT 1
8376: PPUSH
8377: CALL_OW 469
8381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8382: LD_VAR 0 1
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: PUSH
8391: LD_INT 112
8393: EQUAL
8394: PUSH
8395: LD_VAR 0 1
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PUSH
8404: LD_INT 67
8406: EQUAL
8407: AND
8408: IFFALSE 8538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 8
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not un then
8444: LD_VAR 0 2
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8538
// un := un [ 1 ] ;
8453: LD_ADDR_VAR 0 2
8457: PUSH
8458: LD_VAR 0 2
8462: PUSH
8463: LD_INT 1
8465: ARRAY
8466: ST_TO_ADDR
// if IsInUnit ( un ) then
8467: LD_VAR 0 2
8471: PPUSH
8472: CALL_OW 310
8476: IFFALSE 8487
// ComExitBuilding ( un ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_VAR 0 1
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 1
8505: PUSH
8506: LD_INT 2
8508: ARRAY
8509: PPUSH
8510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_INT 207
8521: PPUSH
8522: LD_INT 123
8524: PPUSH
8525: CALL_OW 171
// AddComUnload ( un ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: CALL_OW 219
// end ; end ;
8538: PPOPN 2
8540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8541: LD_INT 22
8543: PUSH
8544: LD_INT 8
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 69
8555: PUSH
8556: LD_INT 0
8558: GREATER
8559: IFFALSE 10147
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
// begin enable ;
8583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8584: LD_ADDR_VAR 0 8
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 30
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 8
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 1
8658: ARRAY
8659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_INT 22
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 30
8680: PUSH
8681: LD_INT 6
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 30
8690: PUSH
8691: LD_INT 8
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8716: LD_ADDR_VAR 0 11
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 30
8733: PUSH
8734: LD_INT 32
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8750: LD_ADDR_VAR 0 16
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_INT 8
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 69
8783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8784: LD_ADDR_VAR 0 15
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 8
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8818: LD_ADDR_VAR 0 14
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 8
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8852: LD_ADDR_VAR 0 13
8856: PUSH
8857: LD_INT 22
8859: PUSH
8860: LD_INT 8
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 25
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PPUSH
8881: CALL_OW 69
8885: ST_TO_ADDR
// if l_eng then
8886: LD_VAR 0 16
8890: IFFALSE 9308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_INT 25
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 70
8928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8929: LD_VAR 0 5
8933: PPUSH
8934: LD_INT 3
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 1000
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 72
8955: PUSH
8956: LD_INT 0
8958: GREATER
8959: IFFALSE 9093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 5
8970: PPUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 24
8976: PUSH
8977: LD_INT 1000
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 72
8992: ST_TO_ADDR
// for i = 1 to l_eng do
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: DOUBLE
8999: LD_INT 1
9001: DEC
9002: ST_TO_ADDR
9003: LD_VAR 0 16
9007: PUSH
9008: FOR_TO
9009: IFFALSE 9089
// if IsInUnit ( l_eng [ i ] ) then
9011: LD_VAR 0 16
9015: PUSH
9016: LD_VAR 0 2
9020: ARRAY
9021: PPUSH
9022: CALL_OW 310
9026: IFFALSE 9045
// ComExitBuilding ( l_eng [ i ] ) else
9028: LD_VAR 0 16
9032: PUSH
9033: LD_VAR 0 2
9037: ARRAY
9038: PPUSH
9039: CALL_OW 122
9043: GO 9087
// if not HasTask ( l_eng [ i ] ) then
9045: LD_VAR 0 16
9049: PUSH
9050: LD_VAR 0 2
9054: ARRAY
9055: PPUSH
9056: CALL_OW 314
9060: NOT
9061: IFFALSE 9087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9063: LD_VAR 0 16
9067: PUSH
9068: LD_VAR 0 2
9072: ARRAY
9073: PPUSH
9074: LD_VAR 0 3
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PPUSH
9083: CALL_OW 130
9087: GO 9008
9089: POP
9090: POP
// end else
9091: GO 9308
// begin if legion_blist > 0 then
9093: LD_EXP 39
9097: PUSH
9098: LD_INT 0
9100: GREATER
9101: IFFALSE 9230
// begin for i = 1 to l_eng do
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: DOUBLE
9109: LD_INT 1
9111: DEC
9112: ST_TO_ADDR
9113: LD_VAR 0 16
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9226
// if IsInUnit ( l_eng [ i ] ) then
9121: LD_VAR 0 16
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: PPUSH
9132: CALL_OW 310
9136: IFFALSE 9155
// ComExitBuilding ( l_eng [ i ] ) else
9138: LD_VAR 0 16
9142: PUSH
9143: LD_VAR 0 2
9147: ARRAY
9148: PPUSH
9149: CALL_OW 122
9153: GO 9224
// if not HasTask ( l_eng [ i ] ) then
9155: LD_VAR 0 16
9159: PUSH
9160: LD_VAR 0 2
9164: ARRAY
9165: PPUSH
9166: CALL_OW 314
9170: NOT
9171: IFFALSE 9224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9173: LD_VAR 0 16
9177: PUSH
9178: LD_VAR 0 2
9182: ARRAY
9183: PPUSH
9184: LD_EXP 39
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: LD_EXP 39
9197: PUSH
9198: LD_INT 2
9200: ARRAY
9201: PPUSH
9202: LD_EXP 39
9206: PUSH
9207: LD_INT 3
9209: ARRAY
9210: PPUSH
9211: LD_EXP 39
9215: PUSH
9216: LD_INT 4
9218: ARRAY
9219: PPUSH
9220: CALL_OW 145
9224: GO 9118
9226: POP
9227: POP
// end else
9228: GO 9308
// for i = 1 to l_eng do
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: DOUBLE
9236: LD_INT 1
9238: DEC
9239: ST_TO_ADDR
9240: LD_VAR 0 16
9244: PUSH
9245: FOR_TO
9246: IFFALSE 9306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9248: LD_VAR 0 16
9252: PUSH
9253: LD_VAR 0 2
9257: ARRAY
9258: PPUSH
9259: CALL_OW 310
9263: NOT
9264: PUSH
9265: LD_VAR 0 16
9269: PUSH
9270: LD_VAR 0 2
9274: ARRAY
9275: PPUSH
9276: CALL_OW 314
9280: NOT
9281: AND
9282: IFFALSE 9304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9284: LD_VAR 0 16
9288: PUSH
9289: LD_VAR 0 2
9293: ARRAY
9294: PPUSH
9295: LD_VAR 0 8
9299: PPUSH
9300: CALL_OW 120
9304: GO 9245
9306: POP
9307: POP
// end ; end ; if l_factory then
9308: LD_VAR 0 9
9312: IFFALSE 9712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9314: LD_INT 22
9316: PUSH
9317: LD_INT 8
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 2
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: LD_INT 61
9339: PUSH
9340: EMPTY
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_INT 0
9359: GREATER
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 8
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 34
9373: PUSH
9374: LD_INT 31
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: PUSH
9390: LD_INT 0
9392: GREATER
9393: AND
9394: IFFALSE 9514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9396: LD_INT 22
9398: PUSH
9399: LD_INT 8
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 33
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: LD_INT 61
9421: PUSH
9422: EMPTY
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 8
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 34
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 34
9487: PUSH
9488: LD_INT 31
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PPUSH
9504: CALL_OW 12
9508: ARRAY
9509: PPUSH
9510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9514: LD_EXP 40
9518: PUSH
9519: LD_INT 0
9521: GREATER
9522: PUSH
9523: LD_VAR 0 9
9527: PPUSH
9528: CALL_OW 461
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: AND
9537: IFFALSE 9622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9539: LD_VAR 0 9
9543: PPUSH
9544: LD_EXP 40
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: LD_EXP 40
9557: PUSH
9558: LD_INT 2
9560: ARRAY
9561: PPUSH
9562: LD_EXP 40
9566: PUSH
9567: LD_INT 3
9569: ARRAY
9570: PPUSH
9571: LD_EXP 40
9575: PUSH
9576: LD_INT 4
9578: ARRAY
9579: PPUSH
9580: CALL_OW 125
// for i = 1 to 4 do
9584: LD_ADDR_VAR 0 2
9588: PUSH
9589: DOUBLE
9590: LD_INT 1
9592: DEC
9593: ST_TO_ADDR
9594: LD_INT 4
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9600: LD_ADDR_EXP 40
9604: PUSH
9605: LD_EXP 40
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 3
9617: ST_TO_ADDR
9618: GO 9597
9620: POP
9621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9622: LD_VAR 0 11
9626: PPUSH
9627: LD_INT 35
9629: PUSH
9630: LD_INT 0
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 72
9641: PUSH
9642: LD_INT 0
9644: GREATER
9645: PUSH
9646: LD_VAR 0 9
9650: PPUSH
9651: CALL_OW 461
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: AND
9660: IFFALSE 9712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9662: LD_VAR 0 11
9666: PPUSH
9667: LD_INT 35
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_INT 1
9684: ARRAY
9685: PPUSH
9686: LD_INT 28
9688: PUSH
9689: LD_INT 27
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 1
9698: PPUSH
9699: LD_INT 2
9701: PPUSH
9702: CALL_OW 12
9706: ARRAY
9707: PPUSH
9708: CALL_OW 148
// end ; if legion_enemy > 0 then
9712: LD_EXP 41
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: IFFALSE 10005
// begin if tick mod 11 11$00 = 0 then
9722: LD_OWVAR 1
9726: PUSH
9727: LD_INT 23100
9729: MOD
9730: PUSH
9731: LD_INT 0
9733: EQUAL
9734: IFFALSE 9986
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9736: LD_ADDR_EXP 40
9740: PUSH
9741: LD_EXP 40
9745: PUSH
9746: LD_INT 13
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: LD_INT 2
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: ADD
9760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9761: LD_ADDR_EXP 40
9765: PUSH
9766: LD_EXP 40
9770: PUSH
9771: LD_INT 28
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 29
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 3
9790: PPUSH
9791: CALL_OW 12
9795: ARRAY
9796: ADD
9797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9798: LD_ADDR_EXP 40
9802: PUSH
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 13
9810: PUSH
9811: LD_INT 1
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: ADD
9822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9823: LD_ADDR_EXP 40
9827: PUSH
9828: LD_EXP 40
9832: PUSH
9833: LD_INT 28
9835: PUSH
9836: LD_INT 27
9838: PUSH
9839: LD_INT 29
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_INT 3
9852: PPUSH
9853: CALL_OW 12
9857: ARRAY
9858: ADD
9859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9860: LD_ADDR_EXP 40
9864: PUSH
9865: LD_EXP 40
9869: PUSH
9870: LD_INT 13
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: ADD
9884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9885: LD_ADDR_EXP 40
9889: PUSH
9890: LD_EXP 40
9894: PUSH
9895: LD_INT 28
9897: PUSH
9898: LD_EXP 64
9902: PUSH
9903: LD_INT 29
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 1
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: CALL_OW 12
9921: ARRAY
9922: ADD
9923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9924: LD_ADDR_EXP 40
9928: PUSH
9929: LD_EXP 40
9933: PUSH
9934: LD_INT 13
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ADD
9948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9949: LD_ADDR_EXP 40
9953: PUSH
9954: LD_EXP 40
9958: PUSH
9959: LD_INT 28
9961: PUSH
9962: LD_INT 27
9964: PUSH
9965: LD_INT 29
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_INT 3
9978: PPUSH
9979: CALL_OW 12
9983: ARRAY
9984: ADD
9985: ST_TO_ADDR
// end ; if legion_force >= 8 then
9986: LD_EXP 36
9990: PUSH
9991: LD_INT 8
9993: GREATEREQUAL
9994: IFFALSE 10005
// RaiseSailEvent ( event_legion_attack ) ;
9996: LD_EXP 21
10000: PPUSH
10001: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10005: LD_INT 22
10007: PUSH
10008: LD_INT 8
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 34
10017: PUSH
10018: LD_INT 32
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 69
10033: IFFALSE 10147
// begin if l_cargo = false then
10035: LD_VAR 0 17
10039: PUSH
10040: LD_INT 0
10042: EQUAL
10043: IFFALSE 10079
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10045: LD_ADDR_VAR 0 17
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 32
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 69
10078: ST_TO_ADDR
// if l_cargo then
10079: LD_VAR 0 17
10083: IFFALSE 10147
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10085: LD_ADDR_VAR 0 7
10089: PUSH
10090: LD_INT 14
10092: PPUSH
10093: CALL_OW 435
10097: ST_TO_ADDR
// if cr > 0 then
10098: LD_VAR 0 7
10102: PUSH
10103: LD_INT 0
10105: GREATER
10106: IFFALSE 10147
// if not HasTask ( l_cargo ) then
10108: LD_VAR 0 17
10112: PPUSH
10113: CALL_OW 314
10117: NOT
10118: IFFALSE 10147
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10120: LD_VAR 0 17
10124: PPUSH
10125: LD_VAR 0 7
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 7
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: PPUSH
10143: CALL_OW 117
// end ; end ; end ;
10147: PPOPN 17
10149: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10150: LD_OWVAR 67
10154: PUSH
10155: LD_INT 1
10157: GREATER
10158: IFFALSE 10363
10160: GO 10162
10162: DISABLE
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
10167: PPUSH
10168: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10169: LD_INT 35
10171: PPUSH
10172: LD_INT 12635
10174: PPUSH
10175: CALL_OW 12
10179: PPUSH
10180: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 8
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 25
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL_OW 69
10217: ST_TO_ADDR
// p := 1 ;
10218: LD_ADDR_VAR 0 4
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10226: LD_ADDR_VAR 0 3
10230: PUSH
10231: LD_INT 116
10233: PUSH
10234: LD_INT 139
10236: PUSH
10237: LD_INT 69
10239: PUSH
10240: LD_INT 13
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
// for i = 1 to 2 do
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_INT 2
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10361
// begin if IsInUnit ( sci [ i ] ) then
10265: LD_VAR 0 2
10269: PUSH
10270: LD_VAR 0 1
10274: ARRAY
10275: PPUSH
10276: CALL_OW 310
10280: IFFALSE 10297
// ComExitBuilding ( sci [ i ] ) ;
10282: LD_VAR 0 2
10286: PUSH
10287: LD_VAR 0 1
10291: ARRAY
10292: PPUSH
10293: CALL_OW 122
// Wait ( 0 0$03 ) ;
10297: LD_INT 105
10299: PPUSH
10300: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10304: LD_VAR 0 2
10308: PUSH
10309: LD_VAR 0 1
10313: ARRAY
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 4
10324: ARRAY
10325: PPUSH
10326: LD_VAR 0 3
10330: PUSH
10331: LD_VAR 0 4
10335: PUSH
10336: LD_INT 1
10338: PLUS
10339: ARRAY
10340: PPUSH
10341: CALL_OW 158
// p := p + 2 ;
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: LD_VAR 0 4
10354: PUSH
10355: LD_INT 2
10357: PLUS
10358: ST_TO_ADDR
// end ;
10359: GO 10262
10361: POP
10362: POP
// end ;
10363: PPOPN 4
10365: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10366: LD_INT 14
10368: PPUSH
10369: CALL_OW 435
10373: PUSH
10374: LD_INT 20
10376: LESS
10377: IFFALSE 10404
10379: GO 10381
10381: DISABLE
// begin enable ;
10382: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 5
10388: PPUSH
10389: CALL_OW 12
10393: PPUSH
10394: LD_INT 14
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 55
// end ;
10404: END
// export function LegionAttack ( ) ; var path , units ; begin
10405: LD_INT 0
10407: PPUSH
10408: PPUSH
10409: PPUSH
// units := legion_force ;
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: LD_EXP 36
10419: ST_TO_ADDR
// legion_force := [ ] ;
10420: LD_ADDR_EXP 36
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// case legion_enemy of 1 :
10427: LD_EXP 41
10431: PUSH
10432: LD_INT 1
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10483
10440: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_INT 174
10448: PUSH
10449: LD_INT 135
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 153
10458: PUSH
10459: LD_INT 146
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 118
10468: PUSH
10469: LD_INT 122
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: ST_TO_ADDR
10481: GO 10586
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10534
10491: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
10492: LD_ADDR_VAR 0 2
10496: PUSH
10497: LD_INT 164
10499: PUSH
10500: LD_INT 73
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 130
10509: PUSH
10510: LD_INT 48
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 96
10519: PUSH
10520: LD_INT 48
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 10586
10534: LD_INT 7
10536: DOUBLE
10537: EQUAL
10538: IFTRUE 10542
10540: GO 10585
10542: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 174
10550: PUSH
10551: LD_INT 135
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 153
10560: PUSH
10561: LD_INT 146
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: LD_INT 122
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: ST_TO_ADDR
10583: GO 10586
10585: POP
// repeat wait ( 0 0$1 ) ;
10586: LD_INT 35
10588: PPUSH
10589: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL 75402 0 2
10607: NOT
10608: IFFALSE 10586
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// export function Action ; var un , gamemode , speaker ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
// if debug then
10621: LD_EXP 15
10625: IFFALSE 10652
// begin Difficulty := 2 ;
10627: LD_ADDR_OWVAR 67
10631: PUSH
10632: LD_INT 2
10634: ST_TO_ADDR
// gamemode := 3 ;
10635: LD_ADDR_VAR 0 3
10639: PUSH
10640: LD_INT 3
10642: ST_TO_ADDR
// FogOff ( 7 ) ;
10643: LD_INT 7
10645: PPUSH
10646: CALL_OW 344
// end else
10650: GO 10678
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
10652: LD_ADDR_OWVAR 67
10656: PUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 426
10664: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 426
10677: ST_TO_ADDR
// end ; if gamemode = 1 then
10678: LD_VAR 0 3
10682: PUSH
10683: LD_INT 1
10685: EQUAL
10686: IFFALSE 10710
// begin your_side := 1 ;
10688: LD_ADDR_OWVAR 2
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// legion_enemy := 1 ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// PrepareAmerican ;
10704: CALL 265 0 0
// end else
10708: GO 10762
// if gamemode = 2 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10742
// begin your_side := 2 ;
10720: LD_ADDR_OWVAR 2
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// legion_enemy := 2 ;
10728: LD_ADDR_EXP 41
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// PrepareArabian ;
10736: CALL 17655 0 0
// end else
10740: GO 10762
// begin your_side := 7 ;
10742: LD_ADDR_OWVAR 2
10746: PUSH
10747: LD_INT 7
10749: ST_TO_ADDR
// legion_enemy := 7 ;
10750: LD_ADDR_EXP 41
10754: PUSH
10755: LD_INT 7
10757: ST_TO_ADDR
// PrepareAlliance ;
10758: CALL 15114 0 0
// end ; if your_side = 1 then
10762: LD_OWVAR 2
10766: PUSH
10767: LD_INT 1
10769: EQUAL
10770: IFFALSE 11248
// begin case Query ( QVul4 ) of 1 :
10772: LD_STRING QVul4
10774: PPUSH
10775: CALL_OW 97
10779: PUSH
10780: LD_INT 1
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10791
10788: POP
// ; end ;
10789: GO 10792
10791: POP
// InGameOn ;
10792: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10796: LD_INT 8
10798: PPUSH
10799: LD_INT 5
10801: PPUSH
10802: CALL_OW 86
// uc_side := 4 ;
10806: LD_ADDR_OWVAR 20
10810: PUSH
10811: LD_INT 4
10813: ST_TO_ADDR
// uc_nation := 1 ;
10814: LD_ADDR_OWVAR 21
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// hc_importance := 0 ;
10822: LD_ADDR_OWVAR 32
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 3
10835: PPUSH
10836: LD_EXP 26
10840: PPUSH
10841: CALL_OW 380
// un := CreateHuman ;
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: CALL_OW 44
10854: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10855: LD_VAR 0 2
10859: PPUSH
10860: LD_INT 12
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// hc_name := Stuart Carey ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING Stuart Carey
10880: ST_TO_ADDR
// hc_class := 1 ;
10881: LD_ADDR_OWVAR 28
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// hc_gallery := vulcano ;
10889: LD_ADDR_OWVAR 33
10893: PUSH
10894: LD_STRING vulcano
10896: ST_TO_ADDR
// hc_face_number := 1 ;
10897: LD_ADDR_OWVAR 34
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// us_guy := CreateHuman ;
10905: LD_ADDR_EXP 27
10909: PUSH
10910: CALL_OW 44
10914: ST_TO_ADDR
// InitHc ;
10915: CALL_OW 19
// if rand ( 0 , 1 ) then
10919: LD_INT 0
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 12
10929: IFFALSE 10946
// PrepareHuman ( sex_male , 3 , 6 ) else
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: LD_INT 6
10939: PPUSH
10940: CALL_OW 380
10944: GO 10959
// PrepareHuman ( sex_female , 4 , 8 ) ;
10946: LD_INT 2
10948: PPUSH
10949: LD_INT 4
10951: PPUSH
10952: LD_INT 8
10954: PPUSH
10955: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
10959: LD_VAR 0 2
10963: PPUSH
10964: LD_EXP 24
10968: PPUSH
10969: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
10973: LD_EXP 24
10977: PPUSH
10978: LD_VAR 0 2
10982: PPUSH
10983: CALL_OW 119
// if GetSex ( un ) = sex_male then
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 258
10996: PUSH
10997: LD_INT 1
10999: EQUAL
11000: IFFALSE 11083
// begin Say ( un , VD-un1 ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_STRING VD-un1
11009: PPUSH
11010: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11014: LD_EXP 24
11018: PPUSH
11019: LD_STRING VDc-1
11021: PPUSH
11022: CALL_OW 88
// Say ( un , VD-un2 ) ;
11026: LD_VAR 0 2
11030: PPUSH
11031: LD_STRING VD-un2
11033: PPUSH
11034: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11038: LD_EXP 24
11042: PPUSH
11043: LD_STRING VDc-2
11045: PPUSH
11046: CALL_OW 88
// Say ( un , VD-un3 ) ;
11050: LD_VAR 0 2
11054: PPUSH
11055: LD_STRING VD-un3
11057: PPUSH
11058: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11062: LD_INT 7
11064: PPUSH
11065: CALL_OW 67
// Say ( un , VD-un4 ) ;
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_STRING VD-un4
11076: PPUSH
11077: CALL_OW 88
// end else
11081: GO 11162
// begin Say ( un , VD-unf1 ) ;
11083: LD_VAR 0 2
11087: PPUSH
11088: LD_STRING VD-unf1
11090: PPUSH
11091: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11095: LD_EXP 24
11099: PPUSH
11100: LD_STRING VDc-1
11102: PPUSH
11103: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11107: LD_VAR 0 2
11111: PPUSH
11112: LD_STRING VD-unf2
11114: PPUSH
11115: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11119: LD_EXP 24
11123: PPUSH
11124: LD_STRING VDc-2
11126: PPUSH
11127: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_STRING VD-unf3
11138: PPUSH
11139: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11143: LD_INT 7
11145: PPUSH
11146: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11150: LD_VAR 0 2
11154: PPUSH
11155: LD_STRING VD-unf4
11157: PPUSH
11158: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: LD_INT 2
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11177: LD_EXP 24
11181: PPUSH
11182: LD_STRING VDc-3
11184: PPUSH
11185: CALL_OW 88
// InGameOff ;
11189: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11193: LD_STRING CVulc1
11195: PPUSH
11196: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11200: LD_INT 35
11202: PPUSH
11203: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 250
11216: PUSH
11217: LD_INT 2
11219: EQUAL
11220: PUSH
11221: LD_VAR 0 2
11225: PPUSH
11226: CALL_OW 251
11230: PUSH
11231: LD_INT 2
11233: EQUAL
11234: AND
11235: IFFALSE 11200
// RemoveUnit ( un ) ;
11237: LD_VAR 0 2
11241: PPUSH
11242: CALL_OW 64
// end else
11246: GO 11625
// if your_side = 2 then
11248: LD_OWVAR 2
11252: PUSH
11253: LD_INT 2
11255: EQUAL
11256: IFFALSE 11472
// begin CenterNowOnUnits ( player_commander ) ;
11258: LD_EXP 11
11262: PPUSH
11263: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11267: LD_ADDR_VAR 0 4
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_INT 2
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 69
11300: PUSH
11301: LD_EXP 56
11305: DIFF
11306: ST_TO_ADDR
// if speaker then
11307: LD_VAR 0 4
11311: IFFALSE 11463
// begin InGameOn ;
11313: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11317: LD_EXP 56
11321: PPUSH
11322: LD_STRING VSd-1
11324: PPUSH
11325: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 258
11342: PUSH
11343: LD_INT 1
11345: EQUAL
11346: IFFALSE 11366
// Say ( speaker [ 1 ] , VAd-1 ) else
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PPUSH
11357: LD_STRING VAd-1
11359: PPUSH
11360: CALL_OW 88
11364: GO 11382
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11366: LD_VAR 0 4
11370: PUSH
11371: LD_INT 1
11373: ARRAY
11374: PPUSH
11375: LD_STRING VAfd-1
11377: PPUSH
11378: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11382: LD_EXP 56
11386: PPUSH
11387: LD_STRING VSd-2
11389: PPUSH
11390: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11394: LD_VAR 0 4
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 258
11407: PUSH
11408: LD_INT 1
11410: EQUAL
11411: IFFALSE 11431
// Say ( speaker [ 1 ] , VAd-2 ) else
11413: LD_VAR 0 4
11417: PUSH
11418: LD_INT 1
11420: ARRAY
11421: PPUSH
11422: LD_STRING VAd-2
11424: PPUSH
11425: CALL_OW 88
11429: GO 11447
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11431: LD_VAR 0 4
11435: PUSH
11436: LD_INT 1
11438: ARRAY
11439: PPUSH
11440: LD_STRING VAfd-2
11442: PPUSH
11443: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11447: LD_EXP 56
11451: PPUSH
11452: LD_STRING VSd-3
11454: PPUSH
11455: CALL_OW 88
// InGameOff ;
11459: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11463: LD_STRING CVulc5
11465: PPUSH
11466: CALL_OW 337
// end else
11470: GO 11625
// if your_side = 7 then
11472: LD_OWVAR 2
11476: PUSH
11477: LD_INT 7
11479: EQUAL
11480: IFFALSE 11625
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11482: LD_ADDR_VAR 0 4
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_INT 7
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: PUSH
11516: LD_EXP 42
11520: DIFF
11521: ST_TO_ADDR
// if speaker then
11522: LD_VAR 0 4
11526: IFFALSE 11618
// begin CenterNowOnUnits ( al_commander ) ;
11528: LD_EXP 42
11532: PPUSH
11533: CALL_OW 87
// InGameOn ;
11537: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11541: LD_EXP 42
11545: PPUSH
11546: LD_STRING VPd-1
11548: PPUSH
11549: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11553: LD_VAR 0 4
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: CALL_OW 258
11566: IFFALSE 11586
// Say ( speaker [ 1 ] , VPpd-1 ) else
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PPUSH
11577: LD_STRING VPpd-1
11579: PPUSH
11580: CALL_OW 88
11584: GO 11602
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11586: LD_VAR 0 4
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: LD_STRING VPpdf-1
11597: PPUSH
11598: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11602: LD_EXP 42
11606: PPUSH
11607: LD_STRING VPd-2
11609: PPUSH
11610: CALL_OW 88
// InGameOff ;
11614: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11618: LD_STRING CVulc7
11620: PPUSH
11621: CALL_OW 337
// end ; SaveForQuickRestart ;
11625: CALL_OW 22
// end ;
11629: LD_VAR 0 1
11633: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: IFFALSE 11706
11664: GO 11666
11666: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11667: LD_STRING CVulc6
11669: PPUSH
11670: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11674: LD_INT 52500
11676: PUSH
11677: LD_INT 47250
11679: PUSH
11680: LD_INT 42000
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_OWVAR 67
11692: ARRAY
11693: PPUSH
11694: CALL_OW 67
// ru_can_attack := true ;
11698: LD_ADDR_EXP 3
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// end ;
11706: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11707: LD_INT 50
11709: PPUSH
11710: CALL_OW 255
11714: PUSH
11715: LD_INT 1
11717: EQUAL
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: LD_INT 3
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 30
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: OR
11766: IFFALSE 12000
11768: GO 11770
11770: DISABLE
11771: LD_INT 0
11773: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11774: LD_STRING CVulc2
11776: PPUSH
11777: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: PUSH
11815: LD_EXP 24
11819: DIFF
11820: ST_TO_ADDR
// DialogueOn ;
11821: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11825: LD_INT 10
11827: PPUSH
11828: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11832: LD_VAR 0 1
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: CALL_OW 258
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 11869
// Say ( speaker [ 1 ] , VDb-1 ) else
11851: LD_VAR 0 1
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: PPUSH
11860: LD_STRING VDb-1
11862: PPUSH
11863: CALL_OW 88
11867: GO 11885
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11869: LD_VAR 0 1
11873: PUSH
11874: LD_INT 1
11876: ARRAY
11877: PPUSH
11878: LD_STRING VDbf-1
11880: PPUSH
11881: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11885: LD_INT 10
11887: PPUSH
11888: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: CALL_OW 258
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: IFFALSE 11929
// Say ( speaker [ 1 ] , VDb-2 ) else
11911: LD_VAR 0 1
11915: PUSH
11916: LD_INT 1
11918: ARRAY
11919: PPUSH
11920: LD_STRING VDb-2
11922: PPUSH
11923: CALL_OW 88
11927: GO 11945
// Say ( speaker [ 1 ] , VDbf-2 ) ;
11929: LD_VAR 0 1
11933: PUSH
11934: LD_INT 1
11936: ARRAY
11937: PPUSH
11938: LD_STRING VDbf-2
11940: PPUSH
11941: CALL_OW 88
// DWait ( 0 0$01 ) ;
11945: LD_INT 35
11947: PPUSH
11948: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
11952: LD_EXP 24
11956: PPUSH
11957: LD_STRING VDb-com1
11959: PPUSH
11960: CALL_OW 88
// DialogueOff ;
11964: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
11968: LD_INT 44100
11970: PUSH
11971: LD_INT 36750
11973: PUSH
11974: LD_INT 31500
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_OWVAR 67
11986: ARRAY
11987: PPUSH
11988: CALL_OW 67
// ru_can_attack := true ;
11992: LD_ADDR_EXP 3
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// end ;
12000: PPOPN 1
12002: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12003: LD_INT 22
12005: PUSH
12006: LD_INT 7
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 30
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: IFFALSE 12068
12033: GO 12035
12035: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12036: LD_INT 42000
12038: PUSH
12039: LD_INT 34650
12041: PUSH
12042: LD_INT 29400
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_OWVAR 67
12054: ARRAY
12055: PPUSH
12056: CALL_OW 67
// ru_can_attack := true ;
12060: LD_ADDR_EXP 3
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// end ;
12068: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12069: LD_INT 58
12071: PPUSH
12072: CALL_OW 255
12076: PUSH
12077: LD_INT 1
12079: EQUAL
12080: IFFALSE 12287
12082: GO 12084
12084: DISABLE
12085: LD_INT 0
12087: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 25
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// DialogueOn ;
12122: CALL_OW 6
// if speaker then
12126: LD_VAR 0 1
12130: IFFALSE 12185
// if GetSex ( speaker [ 1 ] ) = sex_male then
12132: LD_VAR 0 1
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 258
12145: PUSH
12146: LD_INT 1
12148: EQUAL
12149: IFFALSE 12169
// Say ( speaker [ 1 ] , VDe-1 ) else
12151: LD_VAR 0 1
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: LD_STRING VDe-1
12162: PPUSH
12163: CALL_OW 88
12167: GO 12185
// Say ( speaker [ 1 ] , VDef-1 ) ;
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: LD_STRING VDef-1
12180: PPUSH
12181: CALL_OW 88
// case Query ( SibNote ) of 1 :
12185: LD_STRING SibNote
12187: PPUSH
12188: CALL_OW 97
12192: PUSH
12193: LD_INT 1
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12204
12201: POP
// ; end ;
12202: GO 12205
12204: POP
// if speaker then
12205: LD_VAR 0 1
12209: IFFALSE 12264
// if GetSex ( speaker [ 1 ] ) = sex_male then
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 258
12224: PUSH
12225: LD_INT 1
12227: EQUAL
12228: IFFALSE 12248
// Say ( speaker [ 1 ] , VDe-2 ) else
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_STRING VDe-2
12241: PPUSH
12242: CALL_OW 88
12246: GO 12264
// Say ( speaker [ 1 ] , VDef-2 ) ;
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING VDef-2
12259: PPUSH
12260: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12264: LD_EXP 24
12268: PPUSH
12269: LD_STRING VDc-4
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12280: LD_STRING CVulc3
12282: PPUSH
12283: CALL_OW 337
// end ;
12287: PPOPN 1
12289: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12290: LD_OWVAR 2
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: PUSH
12299: LD_INT 22
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: PUSH
12328: LD_INT 0
12330: GREATER
12331: AND
12332: IFFALSE 12766
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12342: LD_INT 245
12344: PPUSH
12345: LD_INT 1295
12347: PPUSH
12348: CALL_OW 12
12352: PPUSH
12353: CALL_OW 67
// DialogueOn ;
12357: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12361: LD_EXP 27
12365: PPUSH
12366: LD_STRING VDG-1
12368: PPUSH
12369: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12373: LD_EXP 24
12377: PPUSH
12378: LD_STRING VDc-5
12380: PPUSH
12381: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12385: LD_EXP 27
12389: PPUSH
12390: LD_STRING VDG-2
12392: PPUSH
12393: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12397: LD_EXP 24
12401: PPUSH
12402: LD_STRING VDc-6
12404: PPUSH
12405: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12409: LD_EXP 27
12413: PPUSH
12414: LD_STRING VDG-3
12416: PPUSH
12417: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12421: LD_EXP 24
12425: PPUSH
12426: LD_STRING VDc-7
12428: PPUSH
12429: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12433: LD_EXP 27
12437: PPUSH
12438: LD_STRING VDG-4
12440: PPUSH
12441: CALL_OW 94
// DialogueOff ;
12445: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12449: LD_STRING CVulc4
12451: PPUSH
12452: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12456: LD_INT 18900
12458: PUSH
12459: LD_INT 21000
12461: PUSH
12462: LD_INT 23100
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_OWVAR 67
12474: ARRAY
12475: PPUSH
12476: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12480: LD_ADDR_VAR 0 1
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_INT 4
12492: PUSH
12493: LD_INT 5
12495: PUSH
12496: LD_INT 6
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_OWVAR 67
12508: ARRAY
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12755
// begin uc_side := 1 ;
12513: LD_ADDR_OWVAR 20
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// uc_nation := 1 ;
12521: LD_ADDR_OWVAR 21
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12529: LD_INT 0
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_INT 4
12537: PPUSH
12538: CALL_OW 12
12542: PPUSH
12543: LD_EXP 26
12547: PPUSH
12548: CALL_OW 380
// un := CreateHuman ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: CALL_OW 44
12561: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12562: LD_VAR 0 2
12566: PPUSH
12567: LD_INT 2
12569: PPUSH
12570: CALL_OW 233
// if GetClass ( un ) = 3 then
12574: LD_VAR 0 2
12578: PPUSH
12579: CALL_OW 257
12583: PUSH
12584: LD_INT 3
12586: EQUAL
12587: IFFALSE 12738
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12589: LD_ADDR_OWVAR 37
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: MOD
12612: ARRAY
12613: ST_TO_ADDR
// vc_engine := engine_combustion ;
12614: LD_ADDR_OWVAR 39
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// vc_control := control_manual ;
12622: LD_ADDR_OWVAR 38
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12630: LD_ADDR_OWVAR 40
12634: PUSH
12635: LD_INT 9
12637: PUSH
12638: LD_INT 9
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: LD_INT 11
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 4
12658: PPUSH
12659: CALL_OW 12
12663: ARRAY
12664: ST_TO_ADDR
// veh := CreateVehicle ;
12665: LD_ADDR_VAR 0 3
12669: PUSH
12670: CALL_OW 45
12674: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 77
12694: PPUSH
12695: LD_INT 88
12697: PPUSH
12698: CALL_OW 12
12702: PPUSH
12703: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_INT 0
12717: PPUSH
12718: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: CALL_OW 52
// end else
12736: GO 12753
// PlaceUnitArea ( un , start_north , false ) ;
12738: LD_VAR 0 2
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 49
// end ;
12753: GO 12510
12755: POP
12756: POP
// CenterNowOnUnits ( un ) ;
12757: LD_VAR 0 2
12761: PPUSH
12762: CALL_OW 87
// end ;
12766: PPOPN 3
12768: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12769: LD_INT 21
12771: PPUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 70
12788: IFFALSE 13109
12790: GO 12792
12792: DISABLE
12793: LD_INT 0
12795: PPUSH
12796: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12797: LD_ADDR_VAR 0 2
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_OWVAR 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 4
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_EXP 11
12877: DIFF
12878: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12879: LD_ADDR_VAR 0 1
12883: PUSH
12884: LD_VAR 0 2
12888: PPUSH
12889: LD_INT 112
12891: PPUSH
12892: LD_INT 67
12894: PPUSH
12895: CALL_OW 73
12899: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12900: LD_VAR 0 1
12904: PPUSH
12905: CALL_OW 255
12909: PUSH
12910: LD_INT 7
12912: EQUAL
12913: IFFALSE 12956
// if GetSex ( un ) = sex_male then
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 258
12924: PUSH
12925: LD_INT 1
12927: EQUAL
12928: IFFALSE 12944
// Say ( un , VD-find-al ) else
12930: LD_VAR 0 1
12934: PPUSH
12935: LD_STRING VD-find-al
12937: PPUSH
12938: CALL_OW 88
12942: GO 12956
// Say ( un , VD-find-al-f ) ;
12944: LD_VAR 0 1
12948: PPUSH
12949: LD_STRING VD-find-al-f
12951: PPUSH
12952: CALL_OW 88
// if GetSide ( un ) = 2 then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 255
12965: PUSH
12966: LD_INT 2
12968: EQUAL
12969: IFFALSE 13012
// if GetSex ( un ) = sex_male then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 258
12980: PUSH
12981: LD_INT 1
12983: EQUAL
12984: IFFALSE 13000
// Say ( un , VD-find-ar ) else
12986: LD_VAR 0 1
12990: PPUSH
12991: LD_STRING VD-find-ar
12993: PPUSH
12994: CALL_OW 88
12998: GO 13012
// Say ( un , VD-find-ar-f ) ;
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_STRING VD-find-ar-f
13007: PPUSH
13008: CALL_OW 88
// if GetSide ( un ) = 1 then
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 255
13021: PUSH
13022: LD_INT 1
13024: EQUAL
13025: IFFALSE 13092
// begin if GetSex ( un ) = sex_male then
13027: LD_VAR 0 1
13031: PPUSH
13032: CALL_OW 258
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13068
// begin Say ( un , VD-find-us ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_STRING VD-find-us
13049: PPUSH
13050: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13054: LD_VAR 0 1
13058: PPUSH
13059: LD_STRING VD-find-us2
13061: PPUSH
13062: CALL_OW 88
// end else
13066: GO 13092
// begin Say ( un , VD-find-us-f ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_STRING VD-find-us-f
13075: PPUSH
13076: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13080: LD_VAR 0 1
13084: PPUSH
13085: LD_STRING VD-find-us2-f
13087: PPUSH
13088: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13092: LD_INT 10
13094: PPUSH
13095: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13099: LD_INT 112
13101: PPUSH
13102: LD_INT 67
13104: PPUSH
13105: CALL_OW 86
// end ;
13109: PPOPN 2
13111: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13112: LD_EXP 8
13116: IFFALSE 13618
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
// begin if your_side = 1 then
13124: LD_OWVAR 2
13128: PUSH
13129: LD_INT 1
13131: EQUAL
13132: IFFALSE 13313
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 4
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PPUSH
13163: CALL_OW 69
13167: PUSH
13168: LD_EXP 24
13172: DIFF
13173: ST_TO_ADDR
// if not speaker then
13174: LD_VAR 0 1
13178: NOT
13179: IFFALSE 13183
// exit ;
13181: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13183: LD_VAR 0 1
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 258
13196: PUSH
13197: LD_INT 1
13199: EQUAL
13200: IFFALSE 13220
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13202: LD_VAR 0 1
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_STRING VD-us-sci-art-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13236
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_STRING VD-us-fsci-art-1
13231: PPUSH
13232: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13236: LD_EXP 24
13240: PPUSH
13241: LD_STRING VDc-art1
13243: PPUSH
13244: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 258
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13285
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: LD_STRING VD-us-sci-art-2
13278: PPUSH
13279: CALL_OW 88
13283: GO 13301
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13285: LD_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: ARRAY
13293: PPUSH
13294: LD_STRING VD-us-fsci-art-2
13296: PPUSH
13297: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13301: LD_EXP 24
13305: PPUSH
13306: LD_STRING VDc-art2
13308: PPUSH
13309: CALL_OW 88
// end ; if your_side = 2 then
13313: LD_OWVAR 2
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13425
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13323: LD_ADDR_VAR 0 1
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 4
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: PUSH
13357: LD_EXP 56
13361: DIFF
13362: ST_TO_ADDR
// if not speaker then
13363: LD_VAR 0 1
13367: NOT
13368: IFFALSE 13372
// exit ;
13370: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13372: LD_VAR 0 1
13376: PUSH
13377: LD_INT 1
13379: ARRAY
13380: PPUSH
13381: CALL_OW 258
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: IFFALSE 13409
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: LD_STRING VD-ar-sci-art-1
13402: PPUSH
13403: CALL_OW 88
13407: GO 13425
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13409: LD_VAR 0 1
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_STRING VD-ar-fsci-art-1
13420: PPUSH
13421: CALL_OW 88
// end ; if your_side = 7 then
13425: LD_OWVAR 2
13429: PUSH
13430: LD_INT 7
13432: EQUAL
13433: IFFALSE 13618
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 7
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 25
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: LD_EXP 42
13473: DIFF
13474: ST_TO_ADDR
// if speaker then
13475: LD_VAR 0 1
13479: IFFALSE 13611
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: CALL_OW 258
13494: PUSH
13495: LD_INT 1
13497: EQUAL
13498: IFFALSE 13518
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13500: LD_VAR 0 1
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_STRING VD-al-sci-art-1
13511: PPUSH
13512: CALL_OW 88
13516: GO 13534
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13518: LD_VAR 0 1
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: LD_STRING VD-al-fsci-art-1
13529: PPUSH
13530: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13534: LD_EXP 42
13538: PPUSH
13539: LD_STRING VPd-art-1
13541: PPUSH
13542: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13546: LD_VAR 0 1
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: CALL_OW 258
13559: PUSH
13560: LD_INT 1
13562: EQUAL
13563: IFFALSE 13583
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13565: LD_VAR 0 1
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_STRING VD-al-sci-art-2
13576: PPUSH
13577: CALL_OW 88
13581: GO 13599
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_STRING VD-al-fsci-art-2
13594: PPUSH
13595: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13599: LD_EXP 42
13603: PPUSH
13604: LD_STRING VPd-art-2
13606: PPUSH
13607: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13611: LD_STRING CVulc7out
13613: PPUSH
13614: CALL_OW 337
// end ; end ;
13618: PPOPN 1
13620: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
13621: LD_INT 22
13623: PUSH
13624: LD_OWVAR 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 101
13635: PUSH
13636: LD_INT 8
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: IFFALSE 13794
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin if your_side = 1 then
13659: LD_OWVAR 2
13663: PUSH
13664: LD_INT 1
13666: EQUAL
13667: IFFALSE 13750
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13669: LD_ADDR_VAR 0 1
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 69
13688: PUSH
13689: LD_EXP 24
13693: DIFF
13694: ST_TO_ADDR
// if speaker then
13695: LD_VAR 0 1
13699: IFFALSE 13750
// if GetSex ( speaker [ 1 ] ) then
13701: LD_VAR 0 1
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: CALL_OW 258
13714: IFFALSE 13734
// Say ( speaker [ 1 ] , VD-legion-us ) else
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PPUSH
13725: LD_STRING VD-legion-us
13727: PPUSH
13728: CALL_OW 88
13732: GO 13750
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13734: LD_VAR 0 1
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: LD_STRING VD-legion-us-f
13745: PPUSH
13746: CALL_OW 88
// end ; if your_side = 2 then
13750: LD_OWVAR 2
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: IFFALSE 13772
// Say ( ar_commander , VD-legion-ar ) ;
13760: LD_EXP 56
13764: PPUSH
13765: LD_STRING VD-legion-ar
13767: PPUSH
13768: CALL_OW 88
// if your_side = 7 then
13772: LD_OWVAR 2
13776: PUSH
13777: LD_INT 7
13779: EQUAL
13780: IFFALSE 13794
// Say ( al_commander , VD-legion-al ) ;
13782: LD_EXP 42
13786: PPUSH
13787: LD_STRING VD-legion-al
13789: PPUSH
13790: CALL_OW 88
// end ;
13794: PPOPN 1
13796: END
// every 0 0$01 trigger mine_vulc do
13797: LD_EXP 13
13801: IFFALSE 13818
13803: GO 13805
13805: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING VD-vulc-mines
13813: PPUSH
13814: CALL_OW 88
// end ;
13818: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
13819: LD_INT 22
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: PUSH
13834: LD_INT 0
13836: EQUAL
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: LD_INT 2
13845: NONEQUAL
13846: AND
13847: IFFALSE 13856
13849: GO 13851
13851: DISABLE
// Win ;
13852: CALL 13913 0 0
13856: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
13857: LD_INT 2
13859: PUSH
13860: LD_INT 22
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: PUSH
13890: LD_INT 0
13892: EQUAL
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: LD_INT 2
13901: EQUAL
13902: AND
13903: IFFALSE 13912
13905: GO 13907
13907: DISABLE
// Win ;
13908: CALL 13913 0 0
13912: END
// function Win ; var points ; begin
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
// case Query ( VulcWin ) of 1 :
13917: LD_STRING VulcWin
13919: PPUSH
13920: CALL_OW 97
13924: PUSH
13925: LD_INT 1
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13936
13933: POP
// ; end ;
13934: GO 13937
13936: POP
// if medal_enabled then
13937: LD_EXP 14
13941: IFFALSE 13955
// AddMedal ( vulc_1 , 1 ) else
13943: LD_STRING vulc_1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 101
13953: GO 13966
// AddMedal ( vulc_1 , - 1 ) ;
13955: LD_STRING vulc_1
13957: PPUSH
13958: LD_INT 1
13960: NEG
13961: PPUSH
13962: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
13966: LD_INT 22
13968: PUSH
13969: LD_INT 8
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_INT 0
13983: EQUAL
13984: IFFALSE 13998
// AddMedal ( vulc_2 , 1 ) else
13986: LD_STRING vulc_2
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 101
13996: GO 14009
// AddMedal ( vulc_2 , - 1 ) ;
13998: LD_STRING vulc_2
14000: PPUSH
14001: LD_INT 1
14003: NEG
14004: PPUSH
14005: CALL_OW 101
// points := CalculateCommanderPoints ;
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: CALL 1917 0 0
14018: ST_TO_ADDR
// if points >= 2000 then
14019: LD_VAR 0 2
14023: PUSH
14024: LD_INT 2000
14026: GREATEREQUAL
14027: IFFALSE 14041
// AddMedal ( vulc_3 , 2 ) else
14029: LD_STRING vulc_3
14031: PPUSH
14032: LD_INT 2
14034: PPUSH
14035: CALL_OW 101
14039: GO 14074
// if points >= 0 then
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 0
14048: GREATEREQUAL
14049: IFFALSE 14063
// AddMedal ( vulc_3 , 1 ) else
14051: LD_STRING vulc_3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 101
14061: GO 14074
// AddMedal ( vulc_3 , - 1 ) ;
14063: LD_STRING vulc_3
14065: PPUSH
14066: LD_INT 1
14068: NEG
14069: PPUSH
14070: CALL_OW 101
// GiveMedals ( MAIN ) ;
14074: LD_STRING MAIN
14076: PPUSH
14077: CALL_OW 102
// YouWin ;
14081: CALL_OW 103
// end ; end_of_file
14085: LD_VAR 0 1
14089: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
14090: LD_INT 13
14092: PPUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: IFFALSE 14167
14109: GO 14111
14111: DISABLE
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
// begin enable ;
14116: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: LD_INT 13
14124: PPUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 70
14139: PUSH
14140: FOR_IN
14141: IFFALSE 14165
// if GetLives ( i ) then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 256
14152: IFFALSE 14163
// KillUnit ( i ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 66
14163: GO 14140
14165: POP
14166: POP
// end ;
14167: PPOPN 2
14169: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 255
14179: PUSH
14180: LD_OWVAR 2
14184: EQUAL
14185: IFFALSE 14195
// player_res_art := true ;
14187: LD_ADDR_EXP 6
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// end ;
14195: PPOPN 1
14197: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14198: LD_INT 22
14200: PUSH
14201: LD_OWVAR 2
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 7
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 30
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: PUSH
14258: LD_EXP 6
14262: AND
14263: IFFALSE 14620
14265: GO 14267
14267: DISABLE
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
// begin enable ;
14272: ENABLE
// xy := FindArtifact ( 1 ) ;
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 469
14285: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_OWVAR 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 8
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 30
14318: PUSH
14319: LD_INT 7
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 30
14328: PUSH
14329: LD_INT 11
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: PPUSH
14351: LD_VAR 0 1
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: PPUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 2
14367: ARRAY
14368: PPUSH
14369: CALL_OW 73
14373: ST_TO_ADDR
// if player_artifact_ready = false then
14374: LD_EXP 8
14378: PUSH
14379: LD_INT 0
14381: EQUAL
14382: IFFALSE 14496
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: PPUSH
14407: CALL_OW 297
14411: PUSH
14412: LD_INT 6
14414: LESS
14415: IFFALSE 14476
// begin if BuildingStatus ( lab ) = bs_idle then
14417: LD_VAR 0 2
14421: PPUSH
14422: CALL_OW 461
14426: PUSH
14427: LD_INT 2
14429: EQUAL
14430: IFFALSE 14454
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14432: LD_OWVAR 2
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 468
14452: GO 14474
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14454: LD_OWVAR 2
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL_OW 468
// end else
14474: GO 14496
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14476: LD_OWVAR 2
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: LD_INT 1
14486: PPUSH
14487: LD_VAR 0 2
14491: PPUSH
14492: CALL_OW 468
// if player_artifact_ready then
14496: LD_EXP 8
14500: IFFALSE 14620
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 1
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: CALL_OW 297
14529: PUSH
14530: LD_INT 6
14532: LESS
14533: IFFALSE 14598
// begin if BuildingStatus ( lab ) = bs_idle then
14535: LD_VAR 0 2
14539: PPUSH
14540: CALL_OW 461
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: IFFALSE 14574
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
14550: LD_OWVAR 2
14554: PPUSH
14555: LD_EXP 9
14559: PPUSH
14560: LD_INT 4
14562: PPUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: CALL_OW 468
14572: GO 14596
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14574: LD_OWVAR 2
14578: PPUSH
14579: LD_EXP 9
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL_OW 468
// end else
14596: GO 14620
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14598: LD_OWVAR 2
14602: PPUSH
14603: LD_EXP 9
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_VAR 0 2
14615: PPUSH
14616: CALL_OW 468
// end ;
14620: PPOPN 2
14622: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
// begin xy := FindArtifact ( 1 ) ;
14629: LD_ADDR_VAR 0 5
14633: PUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 469
14641: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14642: LD_ADDR_VAR 0 7
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 8
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 30
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: PPUSH
14696: LD_VAR 0 5
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: LD_VAR 0 5
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PPUSH
14714: CALL_OW 73
14718: ST_TO_ADDR
// if icon = art_exp_left then
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 1
14726: EQUAL
14727: IFFALSE 14780
// begin SetSpecResearch ( lab , time_res_art , true ) ;
14729: LD_VAR 0 7
14733: PPUSH
14734: LD_EXP 10
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
14746: LD_VAR 0 7
14750: PPUSH
14751: LD_EXP 7
14755: PPUSH
14756: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
14760: LD_OWVAR 2
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: LD_VAR 0 7
14775: PPUSH
14776: CALL_OW 468
// end ; if icon = art_icon then
14780: LD_VAR 0 2
14784: PUSH
14785: LD_EXP 9
14789: EQUAL
14790: IFFALSE 15001
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
14792: LD_VAR 0 3
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: IN
14812: IFFALSE 15001
// begin side := GetSide ( cr1 ) ;
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: CALL_OW 255
14828: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
14829: LD_INT 22
14831: PUSH
14832: LD_VAR 0 8
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 30
14843: PUSH
14844: LD_INT 28
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 0
14862: GREATER
14863: IFFALSE 15001
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
14865: LD_ADDR_VAR 0 6
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_VAR 0 8
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 26
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 27
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 28
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14944
// KillUnit ( i ) ;
14933: LD_VAR 0 6
14937: PPUSH
14938: CALL_OW 66
14942: GO 14930
14944: POP
14945: POP
// player_res_art := false ;
14946: LD_ADDR_EXP 6
14950: PUSH
14951: LD_INT 0
14953: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14954: LD_OWVAR 2
14958: PPUSH
14959: LD_EXP 9
14963: PPUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_VAR 0 7
14971: PPUSH
14972: CALL_OW 468
// wait ( time_to_reuse ) ;
14976: LD_EXP 12
14980: PPUSH
14981: CALL_OW 67
// player_res_art := true ;
14985: LD_ADDR_EXP 6
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// medal_enabled := true ;
14993: LD_ADDR_EXP 14
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// end ; end ; end ; end ;
15001: PPOPN 8
15003: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 255
15013: PUSH
15014: LD_OWVAR 2
15018: EQUAL
15019: IFFALSE 15056
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15021: LD_OWVAR 2
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: LD_VAR 0 1
15036: PPUSH
15037: CALL_OW 468
// player_artifact_ready := true ;
15041: LD_ADDR_EXP 8
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15049: LD_STRING ArtVulcano
15051: PPUSH
15052: CALL_OW 339
// end ; end ;
15056: PPOPN 1
15058: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15059: LD_ADDR_EXP 7
15063: PUSH
15064: LD_VAR 0 2
15068: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15069: LD_OWVAR 2
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_INT 2
15079: PPUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 468
// end ; end_of_file
15089: PPOPN 2
15091: END
// every 0 0$01 do
15092: GO 15094
15094: DISABLE
// begin enable ;
15095: ENABLE
// Display_Strings := [ #tick , tick ] ;
15096: LD_ADDR_OWVAR 47
15100: PUSH
15101: LD_STRING #tick
15103: PUSH
15104: LD_OWVAR 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: ST_TO_ADDR
// end ; end_of_file
15113: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15114: LD_INT 0
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15121: LD_ADDR_EXP 44
15125: PUSH
15126: LD_INT 7
15128: PUSH
15129: LD_INT 6
15131: PUSH
15132: LD_INT 5
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: LD_OWVAR 67
15144: ARRAY
15145: ST_TO_ADDR
// al_force := [ ] ;
15146: LD_ADDR_EXP 43
15150: PUSH
15151: EMPTY
15152: ST_TO_ADDR
// RemoveAlliance ;
15153: CALL 15531 0 0
// ResetFog ;
15157: CALL_OW 335
// your_side := 7 ;
15161: LD_ADDR_OWVAR 2
15165: PUSH
15166: LD_INT 7
15168: ST_TO_ADDR
// uc_side := 7 ;
15169: LD_ADDR_OWVAR 20
15173: PUSH
15174: LD_INT 7
15176: ST_TO_ADDR
// hc_gallery :=  ;
15177: LD_ADDR_OWVAR 33
15181: PUSH
15182: LD_STRING 
15184: ST_TO_ADDR
// hc_name :=  ;
15185: LD_ADDR_OWVAR 26
15189: PUSH
15190: LD_STRING 
15192: ST_TO_ADDR
// hc_importance := 0 ;
15193: LD_ADDR_OWVAR 32
15197: PUSH
15198: LD_INT 0
15200: ST_TO_ADDR
// for i = 1 to 17 do
15201: LD_ADDR_VAR 0 2
15205: PUSH
15206: DOUBLE
15207: LD_INT 1
15209: DEC
15210: ST_TO_ADDR
15211: LD_INT 17
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15295
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15217: LD_ADDR_OWVAR 21
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: LD_INT 3
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_INT 2
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15244: LD_INT 0
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_INT 4
15252: PPUSH
15253: CALL_OW 12
15257: PPUSH
15258: LD_EXP 44
15262: PPUSH
15263: CALL_OW 380
// un := CreateHuman ;
15267: LD_ADDR_VAR 0 4
15271: PUSH
15272: CALL_OW 44
15276: ST_TO_ADDR
// al_force := al_force ^ un ;
15277: LD_ADDR_EXP 43
15281: PUSH
15282: LD_EXP 43
15286: PUSH
15287: LD_VAR 0 4
15291: ADD
15292: ST_TO_ADDR
// end ;
15293: GO 15214
15295: POP
15296: POP
// hc_importance := 100 ;
15297: LD_ADDR_OWVAR 32
15301: PUSH
15302: LD_INT 100
15304: ST_TO_ADDR
// uc_nation := 1 ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: LD_EXP 44
15323: PPUSH
15324: CALL_OW 380
// al_commander := CreateHuman ;
15328: LD_ADDR_EXP 42
15332: PUSH
15333: CALL_OW 44
15337: ST_TO_ADDR
// player_commander := al_commander ;
15338: LD_ADDR_EXP 11
15342: PUSH
15343: LD_EXP 42
15347: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_STRING text
15355: PPUSH
15356: LD_INT 9
15358: PUSH
15359: LD_INT 9
15361: PUSH
15362: LD_INT 8
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_OWVAR 67
15374: ARRAY
15375: PPUSH
15376: LD_INT 9
15378: PUSH
15379: LD_INT 9
15381: PUSH
15382: LD_INT 8
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_OWVAR 67
15394: ARRAY
15395: PPUSH
15396: LD_INT -5
15398: PUSH
15399: LD_EXP 42
15403: PUSH
15404: LD_INT -3
15406: PUSH
15407: LD_INT -2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_EXP 43
15420: ADD
15421: PPUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 4
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 9
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 42
15466: ST_TO_ADDR
// team := team ^ al_commander ;
15467: LD_ADDR_VAR 0 5
15471: PUSH
15472: LD_VAR 0 5
15476: PUSH
15477: LD_EXP 42
15481: ADD
15482: ST_TO_ADDR
// for i = 1 to team do
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: DOUBLE
15489: LD_INT 1
15491: DEC
15492: ST_TO_ADDR
15493: LD_VAR 0 5
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15524
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15501: LD_VAR 0 5
15505: PUSH
15506: LD_VAR 0 2
15510: ARRAY
15511: PPUSH
15512: LD_INT 15
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: CALL_OW 49
15522: GO 15498
15524: POP
15525: POP
// end ;
15526: LD_VAR 0 1
15530: RET
// export function RemoveAlliance ; var i ; begin
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
15535: LD_INT 22
15537: PUSH
15538: LD_INT 7
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 7
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: PUSH
15592: FOR_IN
15593: IFFALSE 15606
// RemoveUnit ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 64
15604: GO 15592
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
15619: LD_INT 31
15621: PPUSH
15622: LD_INT 7
15624: PPUSH
15625: LD_INT 2
15627: PPUSH
15628: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
15632: LD_INT 32
15634: PPUSH
15635: LD_INT 7
15637: PPUSH
15638: LD_INT 2
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
15645: LD_INT 59
15647: PPUSH
15648: LD_INT 7
15650: PPUSH
15651: LD_INT 2
15653: PPUSH
15654: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
15658: LD_ADDR_EXP 44
15662: PUSH
15663: LD_INT 5
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: LD_INT 7
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: LD_OWVAR 67
15681: ARRAY
15682: ST_TO_ADDR
// al_force := [ ] ;
15683: LD_ADDR_EXP 43
15687: PUSH
15688: EMPTY
15689: ST_TO_ADDR
// al_vehs := [ ] ;
15690: LD_ADDR_EXP 49
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// uc_side := 7 ;
15697: LD_ADDR_OWVAR 20
15701: PUSH
15702: LD_INT 7
15704: ST_TO_ADDR
// uc_nation := 1 ;
15705: LD_ADDR_OWVAR 21
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// bc_type := b_oil_mine ;
15713: LD_ADDR_OWVAR 42
15717: PUSH
15718: LD_INT 29
15720: ST_TO_ADDR
// b := CreateBuilding ;
15721: LD_ADDR_VAR 0 4
15725: PUSH
15726: CALL_OW 46
15730: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_INT 61
15738: PPUSH
15739: LD_INT 7
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: LD_INT 0
15747: PPUSH
15748: CALL_OW 50
// bc_type := b_siberite_mine ;
15752: LD_ADDR_OWVAR 42
15756: PUSH
15757: LD_INT 30
15759: ST_TO_ADDR
// b := CreateBuilding ;
15760: LD_ADDR_VAR 0 4
15764: PUSH
15765: CALL_OW 46
15769: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
15770: LD_VAR 0 4
15774: PPUSH
15775: LD_INT 69
15777: PPUSH
15778: LD_INT 13
15780: PPUSH
15781: LD_INT 0
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 50
// hc_gallery :=  ;
15791: LD_ADDR_OWVAR 33
15795: PUSH
15796: LD_STRING 
15798: ST_TO_ADDR
// hc_name :=  ;
15799: LD_ADDR_OWVAR 26
15803: PUSH
15804: LD_STRING 
15806: ST_TO_ADDR
// hc_importance := 0 ;
15807: LD_ADDR_OWVAR 32
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 30
15832: PUSH
15833: LD_INT 32
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15920
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15852: LD_ADDR_OWVAR 21
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 2
15872: PPUSH
15873: CALL_OW 12
15877: ARRAY
15878: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
15879: LD_INT 0
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: LD_EXP 44
15889: PPUSH
15890: CALL_OW 380
// un := CreateHuman ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: CALL_OW 44
15903: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 52
// end ;
15918: GO 15849
15920: POP
15921: POP
// for i = 1 to 3 do
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_INT 3
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16004
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15938: LD_ADDR_OWVAR 21
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: PPUSH
15956: LD_INT 2
15958: PPUSH
15959: CALL_OW 12
15963: ARRAY
15964: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
15965: LD_INT 0
15967: PPUSH
15968: LD_INT 4
15970: PPUSH
15971: LD_EXP 44
15975: PPUSH
15976: CALL_OW 380
// un := CreateHuman ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: CALL_OW 44
15989: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 164
15997: PPUSH
15998: CALL_OW 52
// end ;
16002: GO 15935
16004: POP
16005: POP
// for i = 1 to 4 do
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_INT 4
16018: PUSH
16019: FOR_TO
16020: IFFALSE 16111
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16022: LD_ADDR_OWVAR 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PPUSH
16040: LD_INT 2
16042: PPUSH
16043: CALL_OW 12
16047: ARRAY
16048: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16049: LD_INT 0
16051: PPUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 9
16057: PUSH
16058: LD_INT 9
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: PPUSH
16069: LD_INT 3
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: PPUSH
16078: LD_EXP 44
16082: PPUSH
16083: CALL_OW 380
// un := CreateHuman ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: CALL_OW 44
16096: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 173
16104: PPUSH
16105: CALL_OW 52
// end ;
16109: GO 16019
16111: POP
16112: POP
// for i = 1 to 4 do
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: DOUBLE
16119: LD_INT 1
16121: DEC
16122: ST_TO_ADDR
16123: LD_INT 4
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16225
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16129: LD_ADDR_OWVAR 21
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_INT 2
16149: PPUSH
16150: CALL_OW 12
16154: ARRAY
16155: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 3
16161: PPUSH
16162: LD_EXP 44
16166: PPUSH
16167: CALL_OW 380
// un := CreateHuman ;
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: CALL_OW 44
16180: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 22
16188: PUSH
16189: LD_INT 7
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 30
16198: PUSH
16199: LD_INT 3
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: CALL_OW 52
// end ;
16223: GO 16126
16225: POP
16226: POP
// for i = 1 to 4 do
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: DOUBLE
16233: LD_INT 1
16235: DEC
16236: ST_TO_ADDR
16237: LD_INT 4
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16309
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16243: LD_ADDR_OWVAR 21
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_INT 2
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16270: LD_INT 0
16272: PPUSH
16273: LD_INT 2
16275: PPUSH
16276: LD_EXP 44
16280: PPUSH
16281: CALL_OW 380
// un := CreateHuman ;
16285: LD_ADDR_VAR 0 3
16289: PUSH
16290: CALL_OW 44
16294: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 162
16302: PPUSH
16303: CALL_OW 52
// end ;
16307: GO 16240
16309: POP
16310: POP
// uc_nation := 3 ;
16311: LD_ADDR_OWVAR 21
16315: PUSH
16316: LD_INT 3
16318: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16319: LD_ADDR_OWVAR 37
16323: PUSH
16324: LD_INT 21
16326: ST_TO_ADDR
// vc_engine := engine_siberite ;
16327: LD_ADDR_OWVAR 39
16331: PUSH
16332: LD_INT 3
16334: ST_TO_ADDR
// vc_control := control_computer ;
16335: LD_ADDR_OWVAR 38
16339: PUSH
16340: LD_INT 3
16342: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16343: LD_ADDR_OWVAR 40
16347: PUSH
16348: LD_INT 51
16350: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16351: CALL_OW 45
16355: PPUSH
16356: LD_INT 49
16358: PPUSH
16359: LD_INT 13
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16369: LD_ADDR_EXP 51
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 30
16386: PUSH
16387: LD_INT 33
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_INT 22
16415: PUSH
16416: LD_INT 7
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 30
16425: PUSH
16426: LD_INT 33
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 35
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16517
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16459: LD_INT 22
16461: PUSH
16462: LD_INT 7
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 33
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 35
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_VAR 0 2
16506: ARRAY
16507: PPUSH
16508: LD_INT 49
16510: PPUSH
16511: CALL_OW 208
16515: GO 16456
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 1
16523: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
16524: LD_OWVAR 2
16528: PUSH
16529: LD_INT 1
16531: EQUAL
16532: IFFALSE 17518
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
// begin enable ;
16543: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
16544: LD_ADDR_EXP 55
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 7
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 3
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
16578: LD_ADDR_EXP 53
16582: PUSH
16583: LD_INT 164
16585: PUSH
16586: LD_INT 197
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
16593: LD_ADDR_EXP 52
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_INT 7
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 30
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
16631: LD_ADDR_EXP 54
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_INT 7
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 69
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
16669: LD_INT 22
16671: PUSH
16672: LD_INT 7
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 34
16681: PUSH
16682: LD_INT 51
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: IFFALSE 16737
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
16699: LD_ADDR_EXP 50
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 7
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 34
16716: PUSH
16717: LD_INT 51
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
16737: LD_ADDR_EXP 46
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_INT 7
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 25
16754: PUSH
16755: LD_INT 9
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PPUSH
16766: CALL_OW 69
16770: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
16771: LD_ADDR_EXP 45
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_INT 7
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 25
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
16805: LD_ADDR_EXP 47
16809: PUSH
16810: LD_INT 22
16812: PUSH
16813: LD_INT 7
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
16839: LD_ADDR_EXP 48
16843: PUSH
16844: LD_INT 22
16846: PUSH
16847: LD_INT 7
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 25
16856: PUSH
16857: LD_INT 4
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PPUSH
16868: CALL_OW 69
16872: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
16873: LD_EXP 50
16877: PPUSH
16878: CALL_OW 314
16882: NOT
16883: PUSH
16884: LD_EXP 50
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 289
16896: PUSH
16897: LD_INT 100
16899: LESS
16900: AND
16901: IFFALSE 16949
// begin cr := GetListOfCratesInArea ( us_crates ) ;
16903: LD_ADDR_VAR 0 4
16907: PUSH
16908: LD_INT 12
16910: PPUSH
16911: CALL_OW 435
16915: ST_TO_ADDR
// if cr then
16916: LD_VAR 0 4
16920: IFFALSE 16949
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
16922: LD_EXP 50
16926: PPUSH
16927: LD_VAR 0 4
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_VAR 0 4
16940: PUSH
16941: LD_INT 2
16943: ARRAY
16944: PPUSH
16945: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
16949: LD_EXP 55
16953: PPUSH
16954: LD_INT 3
16956: PUSH
16957: LD_INT 24
16959: PUSH
16960: LD_INT 1000
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 72
16975: IFFALSE 17105
// begin if al_eng then
16977: LD_EXP 45
16981: IFFALSE 17103
// for i = 1 to al_eng do
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: DOUBLE
16989: LD_INT 1
16991: DEC
16992: ST_TO_ADDR
16993: LD_EXP 45
16997: PUSH
16998: FOR_TO
16999: IFFALSE 17101
// if IsInUnit ( al_eng [ i ] ) then
17001: LD_EXP 45
17005: PUSH
17006: LD_VAR 0 1
17010: ARRAY
17011: PPUSH
17012: CALL_OW 310
17016: IFFALSE 17035
// ComExitBuilding ( al_eng [ i ] ) else
17018: LD_EXP 45
17022: PUSH
17023: LD_VAR 0 1
17027: ARRAY
17028: PPUSH
17029: CALL_OW 122
17033: GO 17099
// if not HasTask ( al_eng [ i ] ) then
17035: LD_EXP 45
17039: PUSH
17040: LD_VAR 0 1
17044: ARRAY
17045: PPUSH
17046: CALL_OW 314
17050: NOT
17051: IFFALSE 17099
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17053: LD_EXP 45
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PPUSH
17064: LD_EXP 55
17068: PPUSH
17069: LD_INT 3
17071: PUSH
17072: LD_INT 24
17074: PUSH
17075: LD_INT 1000
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 72
17090: PUSH
17091: LD_INT 1
17093: ARRAY
17094: PPUSH
17095: CALL_OW 130
17099: GO 16998
17101: POP
17102: POP
// end else
17103: GO 17187
// if al_eng then
17105: LD_EXP 45
17109: IFFALSE 17187
// if not IsInUnit ( al_eng [ 1 ] ) then
17111: LD_EXP 45
17115: PUSH
17116: LD_INT 1
17118: ARRAY
17119: PPUSH
17120: CALL_OW 310
17124: NOT
17125: IFFALSE 17187
// for i = 1 to al_eng do
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 45
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17185
// if not IsInUnit ( al_eng [ i ] ) then
17145: LD_EXP 45
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PPUSH
17156: CALL_OW 310
17160: NOT
17161: IFFALSE 17183
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17163: LD_EXP 45
17167: PUSH
17168: LD_VAR 0 1
17172: ARRAY
17173: PPUSH
17174: LD_EXP 52
17178: PPUSH
17179: CALL_OW 120
17183: GO 17142
17185: POP
17186: POP
// if al_vehs then
17187: LD_EXP 49
17191: IFFALSE 17291
// if BuildingStatus ( al_fac ) = bs_idle then
17193: LD_EXP 54
17197: PPUSH
17198: CALL_OW 461
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: IFFALSE 17291
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17208: LD_EXP 54
17212: PPUSH
17213: LD_EXP 49
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PPUSH
17222: LD_EXP 49
17226: PUSH
17227: LD_INT 2
17229: ARRAY
17230: PPUSH
17231: LD_EXP 49
17235: PUSH
17236: LD_INT 3
17238: ARRAY
17239: PPUSH
17240: LD_EXP 49
17244: PUSH
17245: LD_INT 4
17247: ARRAY
17248: PPUSH
17249: CALL_OW 125
// for i = 1 to 4 do
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: DOUBLE
17259: LD_INT 1
17261: DEC
17262: ST_TO_ADDR
17263: LD_INT 4
17265: PUSH
17266: FOR_TO
17267: IFFALSE 17289
// al_vehs := Delete ( al_vehs , 1 ) ;
17269: LD_ADDR_EXP 49
17273: PUSH
17274: LD_EXP 49
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 3
17286: ST_TO_ADDR
17287: GO 17266
17289: POP
17290: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17291: LD_EXP 43
17295: PUSH
17296: LD_INT 0
17298: EQUAL
17299: PUSH
17300: LD_OWVAR 1
17304: PUSH
17305: LD_INT 23100
17307: MOD
17308: PUSH
17309: LD_INT 0
17311: EQUAL
17312: AND
17313: IFFALSE 17427
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: DOUBLE
17321: LD_INT 1
17323: DEC
17324: ST_TO_ADDR
17325: LD_INT 6
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 8
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PUSH
17339: LD_OWVAR 67
17343: ARRAY
17344: PUSH
17345: FOR_TO
17346: IFFALSE 17425
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17348: LD_ADDR_EXP 49
17352: PUSH
17353: LD_EXP 49
17357: PUSH
17358: LD_INT 23
17360: ADD
17361: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17362: LD_ADDR_EXP 49
17366: PUSH
17367: LD_EXP 49
17371: PUSH
17372: LD_INT 1
17374: ADD
17375: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17376: LD_ADDR_EXP 49
17380: PUSH
17381: LD_EXP 49
17385: PUSH
17386: LD_INT 3
17388: ADD
17389: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17390: LD_ADDR_EXP 49
17394: PUSH
17395: LD_EXP 49
17399: PUSH
17400: LD_INT 46
17402: PUSH
17403: LD_INT 47
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: CALL_OW 12
17420: ARRAY
17421: ADD
17422: ST_TO_ADDR
// end ;
17423: GO 17345
17425: POP
17426: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17427: LD_INT 22
17429: PUSH
17430: LD_INT 7
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 34
17439: PUSH
17440: LD_INT 51
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: PUSH
17456: LD_INT 0
17458: EQUAL
17459: IFFALSE 17482
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17461: LD_EXP 54
17465: PPUSH
17466: LD_INT 21
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 3
17474: PPUSH
17475: LD_INT 51
17477: PPUSH
17478: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
17482: LD_EXP 43
17486: PUSH
17487: LD_INT 6
17489: PUSH
17490: LD_INT 7
17492: PUSH
17493: LD_INT 8
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_OWVAR 67
17505: ARRAY
17506: GREATEREQUAL
17507: IFFALSE 17518
// RaiseSailEvent ( event_alliance_attack ) ;
17509: LD_EXP 23
17513: PPUSH
17514: CALL_OW 427
// end ;
17518: PPOPN 4
17520: END
// export function AllianceAttack ( ) ; var path , units ; begin
17521: LD_INT 0
17523: PPUSH
17524: PPUSH
17525: PPUSH
// units := al_force ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_EXP 43
17535: ST_TO_ADDR
// al_force := [ ] ;
17536: LD_ADDR_EXP 43
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// if rand ( 0 , 1 ) then
17543: LD_INT 0
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 12
17553: IFFALSE 17597
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_INT 49
17562: PUSH
17563: LD_INT 53
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 52
17572: PUSH
17573: LD_INT 90
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 63
17582: PUSH
17583: LD_INT 114
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: ST_TO_ADDR
17595: GO 17626
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 89
17604: PUSH
17605: LD_INT 52
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 143
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17626: LD_INT 35
17628: PPUSH
17629: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL 75402 0 2
17647: NOT
17648: IFFALSE 17626
// end ; end_of_file
17650: LD_VAR 0 1
17654: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
17662: LD_ADDR_EXP 58
17666: PUSH
17667: LD_INT 9
17669: PUSH
17670: LD_INT 8
17672: PUSH
17673: LD_INT 7
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_OWVAR 67
17685: ARRAY
17686: ST_TO_ADDR
// ar_force := [ ] ;
17687: LD_ADDR_EXP 57
17691: PUSH
17692: EMPTY
17693: ST_TO_ADDR
// RemoveAlliance ;
17694: CALL 15531 0 0
// RemoveEnvironmentArea ( evn ) ;
17698: LD_INT 17
17700: PPUSH
17701: CALL_OW 355
// your_side := 2 ;
17705: LD_ADDR_OWVAR 2
17709: PUSH
17710: LD_INT 2
17712: ST_TO_ADDR
// uc_side := 2 ;
17713: LD_ADDR_OWVAR 20
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// uc_nation := nation_arabian ;
17721: LD_ADDR_OWVAR 21
17725: PUSH
17726: LD_INT 2
17728: ST_TO_ADDR
// hc_gallery :=  ;
17729: LD_ADDR_OWVAR 33
17733: PUSH
17734: LD_STRING 
17736: ST_TO_ADDR
// hc_name :=  ;
17737: LD_ADDR_OWVAR 26
17741: PUSH
17742: LD_STRING 
17744: ST_TO_ADDR
// hc_importance := 0 ;
17745: LD_ADDR_OWVAR 32
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// for i = 1 to 20 do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: DOUBLE
17759: LD_INT 1
17761: DEC
17762: ST_TO_ADDR
17763: LD_INT 20
17765: PUSH
17766: FOR_TO
17767: IFFALSE 17832
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
17769: LD_INT 0
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 4
17777: PPUSH
17778: CALL_OW 12
17782: PPUSH
17783: LD_EXP 58
17787: PPUSH
17788: CALL_OW 380
// un := CreateHuman ;
17792: LD_ADDR_VAR 0 4
17796: PUSH
17797: CALL_OW 44
17801: ST_TO_ADDR
// SetDir ( un , 2 ) ;
17802: LD_VAR 0 4
17806: PPUSH
17807: LD_INT 2
17809: PPUSH
17810: CALL_OW 233
// ar_force := ar_force ^ un ;
17814: LD_ADDR_EXP 57
17818: PUSH
17819: LD_EXP 57
17823: PUSH
17824: LD_VAR 0 4
17828: ADD
17829: ST_TO_ADDR
// end ;
17830: GO 17766
17832: POP
17833: POP
// hc_importance := 100 ;
17834: LD_ADDR_OWVAR 32
17838: PUSH
17839: LD_INT 100
17841: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 11
17847: PPUSH
17848: LD_EXP 58
17852: PPUSH
17853: CALL_OW 380
// ar_commander := CreateHuman ;
17857: LD_ADDR_EXP 56
17861: PUSH
17862: CALL_OW 44
17866: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
17867: LD_EXP 56
17871: PPUSH
17872: LD_INT 2
17874: PPUSH
17875: CALL_OW 233
// player_commander := ar_commander ;
17879: LD_ADDR_EXP 11
17883: PUSH
17884: LD_EXP 56
17888: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
17889: LD_ADDR_VAR 0 5
17893: PUSH
17894: LD_STRING text
17896: PPUSH
17897: LD_INT 14
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: LD_INT 12
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: LD_OWVAR 67
17915: ARRAY
17916: PPUSH
17917: LD_INT 14
17919: PUSH
17920: LD_INT 13
17922: PUSH
17923: LD_INT 12
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: LD_OWVAR 67
17935: ARRAY
17936: PPUSH
17937: LD_INT -6
17939: PUSH
17940: LD_EXP 56
17944: PUSH
17945: LD_INT -2
17947: PUSH
17948: LD_INT -3
17950: PUSH
17951: LD_INT -5
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: LD_EXP 57
17965: ADD
17966: PPUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 4
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 8
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 42
18007: ST_TO_ADDR
// team := team ^ ar_commander ;
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: LD_VAR 0 5
18017: PUSH
18018: LD_EXP 56
18022: ADD
18023: ST_TO_ADDR
// for i = 1 to 4 do
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_INT 4
18036: PUSH
18037: FOR_TO
18038: IFFALSE 18140
// begin vc_chassis := ar_medium_trike ;
18040: LD_ADDR_OWVAR 37
18044: PUSH
18045: LD_INT 13
18047: ST_TO_ADDR
// vc_engine := engine_siberite ;
18048: LD_ADDR_OWVAR 39
18052: PUSH
18053: LD_INT 3
18055: ST_TO_ADDR
// vc_control := control_manual ;
18056: LD_ADDR_OWVAR 38
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
18064: LD_ADDR_OWVAR 40
18068: PUSH
18069: LD_INT 27
18071: PUSH
18072: LD_INT 32
18074: PUSH
18075: LD_EXP 65
18079: PUSH
18080: LD_INT 27
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: LD_VAR 0 2
18093: ARRAY
18094: ST_TO_ADDR
// un := CreateVehicle ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: CALL_OW 45
18104: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18105: LD_VAR 0 4
18109: PPUSH
18110: LD_INT 2
18112: PPUSH
18113: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
18117: LD_VAR 0 4
18121: PPUSH
18122: LD_INT 54
18124: PPUSH
18125: LD_INT 15
18127: PPUSH
18128: LD_INT 6
18130: PPUSH
18131: LD_INT 0
18133: PPUSH
18134: CALL_OW 50
// end ;
18138: GO 18037
18140: POP
18141: POP
// for i = 1 to team do
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: DOUBLE
18148: LD_INT 1
18150: DEC
18151: ST_TO_ADDR
18152: LD_VAR 0 5
18156: PUSH
18157: FOR_TO
18158: IFFALSE 18255
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
18160: LD_INT 22
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 58
18172: PUSH
18173: EMPTY
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: IFFALSE 18232
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
18186: LD_VAR 0 5
18190: PUSH
18191: LD_VAR 0 2
18195: ARRAY
18196: PPUSH
18197: LD_INT 22
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 58
18209: PUSH
18210: EMPTY
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PPUSH
18217: CALL_OW 69
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PPUSH
18226: CALL_OW 52
18230: GO 18253
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18232: LD_VAR 0 5
18236: PUSH
18237: LD_VAR 0 2
18241: ARRAY
18242: PPUSH
18243: LD_INT 16
18245: PPUSH
18246: LD_INT 0
18248: PPUSH
18249: CALL_OW 49
// end ;
18253: GO 18157
18255: POP
18256: POP
// uc_side := 0 ;
18257: LD_ADDR_OWVAR 20
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// uc_nation := 0 ;
18265: LD_ADDR_OWVAR 21
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// vc_chassis := 31 ;
18273: LD_ADDR_OWVAR 37
18277: PUSH
18278: LD_INT 31
18280: ST_TO_ADDR
// vc_control := control_rider ;
18281: LD_ADDR_OWVAR 38
18285: PUSH
18286: LD_INT 4
18288: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18289: CALL_OW 45
18293: PPUSH
18294: LD_INT 96
18296: PPUSH
18297: LD_INT 20
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 48
// end ; end_of_file
18307: LD_VAR 0 1
18311: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18312: LD_INT 0
18314: PPUSH
// ar_miner := 81 ;
18315: LD_ADDR_EXP 66
18319: PUSH
18320: LD_INT 81
18322: ST_TO_ADDR
// ar_crane := 88 ;
18323: LD_ADDR_EXP 65
18327: PUSH
18328: LD_INT 88
18330: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18331: LD_ADDR_EXP 60
18335: PUSH
18336: LD_INT 89
18338: ST_TO_ADDR
// us_hack := 99 ;
18339: LD_ADDR_EXP 61
18343: PUSH
18344: LD_INT 99
18346: ST_TO_ADDR
// us_artillery := 97 ;
18347: LD_ADDR_EXP 62
18351: PUSH
18352: LD_INT 97
18354: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18355: LD_ADDR_EXP 63
18359: PUSH
18360: LD_INT 91
18362: ST_TO_ADDR
// ar_mortar := 92 ;
18363: LD_ADDR_EXP 64
18367: PUSH
18368: LD_INT 92
18370: ST_TO_ADDR
// ru_radar := 98 ;
18371: LD_ADDR_EXP 59
18375: PUSH
18376: LD_INT 98
18378: ST_TO_ADDR
// tech_Artillery := 80 ;
18379: LD_ADDR_EXP 67
18383: PUSH
18384: LD_INT 80
18386: ST_TO_ADDR
// tech_RadMat := 81 ;
18387: LD_ADDR_EXP 68
18391: PUSH
18392: LD_INT 81
18394: ST_TO_ADDR
// tech_BasicTools := 82 ;
18395: LD_ADDR_EXP 69
18399: PUSH
18400: LD_INT 82
18402: ST_TO_ADDR
// tech_Cargo := 83 ;
18403: LD_ADDR_EXP 70
18407: PUSH
18408: LD_INT 83
18410: ST_TO_ADDR
// tech_Track := 84 ;
18411: LD_ADDR_EXP 71
18415: PUSH
18416: LD_INT 84
18418: ST_TO_ADDR
// tech_Crane := 85 ;
18419: LD_ADDR_EXP 72
18423: PUSH
18424: LD_INT 85
18426: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18427: LD_ADDR_EXP 73
18431: PUSH
18432: LD_INT 86
18434: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18435: LD_ADDR_EXP 74
18439: PUSH
18440: LD_INT 87
18442: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18443: LD_ADDR_EXP 75
18447: PUSH
18448: LD_INT 88
18450: ST_TO_ADDR
// class_mastodont := 31 ;
18451: LD_ADDR_EXP 76
18455: PUSH
18456: LD_INT 31
18458: ST_TO_ADDR
// class_horse := 21 ;
18459: LD_ADDR_EXP 77
18463: PUSH
18464: LD_INT 21
18466: ST_TO_ADDR
// end ;
18467: LD_VAR 0 1
18471: RET
// every 1 do
18472: GO 18474
18474: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18475: CALL 18312 0 0
18479: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18480: LD_INT 0
18482: PPUSH
// if p2 = 100 then
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 100
18490: EQUAL
18491: IFFALSE 19494
// begin if not StreamModeActive then
18493: LD_EXP 78
18497: NOT
18498: IFFALSE 18508
// StreamModeActive := true ;
18500: LD_ADDR_EXP 78
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// if p3 = 0 then
18508: LD_VAR 0 3
18512: PUSH
18513: LD_INT 0
18515: EQUAL
18516: IFFALSE 18522
// InitStreamMode ;
18518: CALL 19654 0 0
// if p3 = 1 then
18522: LD_VAR 0 3
18526: PUSH
18527: LD_INT 1
18529: EQUAL
18530: IFFALSE 18540
// sRocket := true ;
18532: LD_ADDR_EXP 83
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// if p3 = 2 then
18540: LD_VAR 0 3
18544: PUSH
18545: LD_INT 2
18547: EQUAL
18548: IFFALSE 18558
// sSpeed := true ;
18550: LD_ADDR_EXP 82
18554: PUSH
18555: LD_INT 1
18557: ST_TO_ADDR
// if p3 = 3 then
18558: LD_VAR 0 3
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: IFFALSE 18576
// sEngine := true ;
18568: LD_ADDR_EXP 84
18572: PUSH
18573: LD_INT 1
18575: ST_TO_ADDR
// if p3 = 4 then
18576: LD_VAR 0 3
18580: PUSH
18581: LD_INT 4
18583: EQUAL
18584: IFFALSE 18594
// sSpec := true ;
18586: LD_ADDR_EXP 81
18590: PUSH
18591: LD_INT 1
18593: ST_TO_ADDR
// if p3 = 5 then
18594: LD_VAR 0 3
18598: PUSH
18599: LD_INT 5
18601: EQUAL
18602: IFFALSE 18612
// sLevel := true ;
18604: LD_ADDR_EXP 85
18608: PUSH
18609: LD_INT 1
18611: ST_TO_ADDR
// if p3 = 6 then
18612: LD_VAR 0 3
18616: PUSH
18617: LD_INT 6
18619: EQUAL
18620: IFFALSE 18630
// sArmoury := true ;
18622: LD_ADDR_EXP 86
18626: PUSH
18627: LD_INT 1
18629: ST_TO_ADDR
// if p3 = 7 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_INT 7
18637: EQUAL
18638: IFFALSE 18648
// sRadar := true ;
18640: LD_ADDR_EXP 87
18644: PUSH
18645: LD_INT 1
18647: ST_TO_ADDR
// if p3 = 8 then
18648: LD_VAR 0 3
18652: PUSH
18653: LD_INT 8
18655: EQUAL
18656: IFFALSE 18666
// sBunker := true ;
18658: LD_ADDR_EXP 88
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// if p3 = 9 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 9
18673: EQUAL
18674: IFFALSE 18684
// sHack := true ;
18676: LD_ADDR_EXP 89
18680: PUSH
18681: LD_INT 1
18683: ST_TO_ADDR
// if p3 = 10 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 10
18691: EQUAL
18692: IFFALSE 18702
// sFire := true ;
18694: LD_ADDR_EXP 90
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 11 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 11
18709: EQUAL
18710: IFFALSE 18720
// sRefresh := true ;
18712: LD_ADDR_EXP 91
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// if p3 = 12 then
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 12
18727: EQUAL
18728: IFFALSE 18738
// sExp := true ;
18730: LD_ADDR_EXP 92
18734: PUSH
18735: LD_INT 1
18737: ST_TO_ADDR
// if p3 = 13 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 13
18745: EQUAL
18746: IFFALSE 18756
// sDepot := true ;
18748: LD_ADDR_EXP 93
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// if p3 = 14 then
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 14
18763: EQUAL
18764: IFFALSE 18774
// sFlag := true ;
18766: LD_ADDR_EXP 94
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// if p3 = 15 then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 15
18781: EQUAL
18782: IFFALSE 18792
// sKamikadze := true ;
18784: LD_ADDR_EXP 102
18788: PUSH
18789: LD_INT 1
18791: ST_TO_ADDR
// if p3 = 16 then
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 16
18799: EQUAL
18800: IFFALSE 18810
// sTroll := true ;
18802: LD_ADDR_EXP 103
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// if p3 = 17 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 17
18817: EQUAL
18818: IFFALSE 18828
// sSlow := true ;
18820: LD_ADDR_EXP 104
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if p3 = 18 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 18
18835: EQUAL
18836: IFFALSE 18846
// sLack := true ;
18838: LD_ADDR_EXP 105
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// if p3 = 19 then
18846: LD_VAR 0 3
18850: PUSH
18851: LD_INT 19
18853: EQUAL
18854: IFFALSE 18864
// sTank := true ;
18856: LD_ADDR_EXP 107
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// if p3 = 20 then
18864: LD_VAR 0 3
18868: PUSH
18869: LD_INT 20
18871: EQUAL
18872: IFFALSE 18882
// sRemote := true ;
18874: LD_ADDR_EXP 108
18878: PUSH
18879: LD_INT 1
18881: ST_TO_ADDR
// if p3 = 21 then
18882: LD_VAR 0 3
18886: PUSH
18887: LD_INT 21
18889: EQUAL
18890: IFFALSE 18900
// sPowell := true ;
18892: LD_ADDR_EXP 109
18896: PUSH
18897: LD_INT 1
18899: ST_TO_ADDR
// if p3 = 22 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 22
18907: EQUAL
18908: IFFALSE 18918
// sTeleport := true ;
18910: LD_ADDR_EXP 112
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// if p3 = 23 then
18918: LD_VAR 0 3
18922: PUSH
18923: LD_INT 23
18925: EQUAL
18926: IFFALSE 18936
// sOilTower := true ;
18928: LD_ADDR_EXP 114
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// if p3 = 24 then
18936: LD_VAR 0 3
18940: PUSH
18941: LD_INT 24
18943: EQUAL
18944: IFFALSE 18954
// sShovel := true ;
18946: LD_ADDR_EXP 115
18950: PUSH
18951: LD_INT 1
18953: ST_TO_ADDR
// if p3 = 25 then
18954: LD_VAR 0 3
18958: PUSH
18959: LD_INT 25
18961: EQUAL
18962: IFFALSE 18972
// sSheik := true ;
18964: LD_ADDR_EXP 116
18968: PUSH
18969: LD_INT 1
18971: ST_TO_ADDR
// if p3 = 26 then
18972: LD_VAR 0 3
18976: PUSH
18977: LD_INT 26
18979: EQUAL
18980: IFFALSE 18990
// sEarthquake := true ;
18982: LD_ADDR_EXP 118
18986: PUSH
18987: LD_INT 1
18989: ST_TO_ADDR
// if p3 = 27 then
18990: LD_VAR 0 3
18994: PUSH
18995: LD_INT 27
18997: EQUAL
18998: IFFALSE 19008
// sAI := true ;
19000: LD_ADDR_EXP 119
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// if p3 = 28 then
19008: LD_VAR 0 3
19012: PUSH
19013: LD_INT 28
19015: EQUAL
19016: IFFALSE 19026
// sCargo := true ;
19018: LD_ADDR_EXP 122
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// if p3 = 29 then
19026: LD_VAR 0 3
19030: PUSH
19031: LD_INT 29
19033: EQUAL
19034: IFFALSE 19044
// sDLaser := true ;
19036: LD_ADDR_EXP 123
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// if p3 = 30 then
19044: LD_VAR 0 3
19048: PUSH
19049: LD_INT 30
19051: EQUAL
19052: IFFALSE 19062
// sExchange := true ;
19054: LD_ADDR_EXP 124
19058: PUSH
19059: LD_INT 1
19061: ST_TO_ADDR
// if p3 = 31 then
19062: LD_VAR 0 3
19066: PUSH
19067: LD_INT 31
19069: EQUAL
19070: IFFALSE 19080
// sFac := true ;
19072: LD_ADDR_EXP 125
19076: PUSH
19077: LD_INT 1
19079: ST_TO_ADDR
// if p3 = 32 then
19080: LD_VAR 0 3
19084: PUSH
19085: LD_INT 32
19087: EQUAL
19088: IFFALSE 19098
// sPower := true ;
19090: LD_ADDR_EXP 126
19094: PUSH
19095: LD_INT 1
19097: ST_TO_ADDR
// if p3 = 33 then
19098: LD_VAR 0 3
19102: PUSH
19103: LD_INT 33
19105: EQUAL
19106: IFFALSE 19116
// sRandom := true ;
19108: LD_ADDR_EXP 127
19112: PUSH
19113: LD_INT 1
19115: ST_TO_ADDR
// if p3 = 34 then
19116: LD_VAR 0 3
19120: PUSH
19121: LD_INT 34
19123: EQUAL
19124: IFFALSE 19134
// sShield := true ;
19126: LD_ADDR_EXP 128
19130: PUSH
19131: LD_INT 1
19133: ST_TO_ADDR
// if p3 = 35 then
19134: LD_VAR 0 3
19138: PUSH
19139: LD_INT 35
19141: EQUAL
19142: IFFALSE 19152
// sTime := true ;
19144: LD_ADDR_EXP 129
19148: PUSH
19149: LD_INT 1
19151: ST_TO_ADDR
// if p3 = 36 then
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 36
19159: EQUAL
19160: IFFALSE 19170
// sTools := true ;
19162: LD_ADDR_EXP 130
19166: PUSH
19167: LD_INT 1
19169: ST_TO_ADDR
// if p3 = 101 then
19170: LD_VAR 0 3
19174: PUSH
19175: LD_INT 101
19177: EQUAL
19178: IFFALSE 19188
// sSold := true ;
19180: LD_ADDR_EXP 95
19184: PUSH
19185: LD_INT 1
19187: ST_TO_ADDR
// if p3 = 102 then
19188: LD_VAR 0 3
19192: PUSH
19193: LD_INT 102
19195: EQUAL
19196: IFFALSE 19206
// sDiff := true ;
19198: LD_ADDR_EXP 96
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// if p3 = 103 then
19206: LD_VAR 0 3
19210: PUSH
19211: LD_INT 103
19213: EQUAL
19214: IFFALSE 19224
// sFog := true ;
19216: LD_ADDR_EXP 99
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// if p3 = 104 then
19224: LD_VAR 0 3
19228: PUSH
19229: LD_INT 104
19231: EQUAL
19232: IFFALSE 19242
// sReset := true ;
19234: LD_ADDR_EXP 100
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// if p3 = 105 then
19242: LD_VAR 0 3
19246: PUSH
19247: LD_INT 105
19249: EQUAL
19250: IFFALSE 19260
// sSun := true ;
19252: LD_ADDR_EXP 101
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// if p3 = 106 then
19260: LD_VAR 0 3
19264: PUSH
19265: LD_INT 106
19267: EQUAL
19268: IFFALSE 19278
// sTiger := true ;
19270: LD_ADDR_EXP 97
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
// if p3 = 107 then
19278: LD_VAR 0 3
19282: PUSH
19283: LD_INT 107
19285: EQUAL
19286: IFFALSE 19296
// sBomb := true ;
19288: LD_ADDR_EXP 98
19292: PUSH
19293: LD_INT 1
19295: ST_TO_ADDR
// if p3 = 108 then
19296: LD_VAR 0 3
19300: PUSH
19301: LD_INT 108
19303: EQUAL
19304: IFFALSE 19314
// sWound := true ;
19306: LD_ADDR_EXP 106
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// if p3 = 109 then
19314: LD_VAR 0 3
19318: PUSH
19319: LD_INT 109
19321: EQUAL
19322: IFFALSE 19332
// sBetray := true ;
19324: LD_ADDR_EXP 110
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// if p3 = 110 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 110
19339: EQUAL
19340: IFFALSE 19350
// sContamin := true ;
19342: LD_ADDR_EXP 111
19346: PUSH
19347: LD_INT 1
19349: ST_TO_ADDR
// if p3 = 111 then
19350: LD_VAR 0 3
19354: PUSH
19355: LD_INT 111
19357: EQUAL
19358: IFFALSE 19368
// sOil := true ;
19360: LD_ADDR_EXP 113
19364: PUSH
19365: LD_INT 1
19367: ST_TO_ADDR
// if p3 = 112 then
19368: LD_VAR 0 3
19372: PUSH
19373: LD_INT 112
19375: EQUAL
19376: IFFALSE 19386
// sStu := true ;
19378: LD_ADDR_EXP 117
19382: PUSH
19383: LD_INT 1
19385: ST_TO_ADDR
// if p3 = 113 then
19386: LD_VAR 0 3
19390: PUSH
19391: LD_INT 113
19393: EQUAL
19394: IFFALSE 19404
// sBazooka := true ;
19396: LD_ADDR_EXP 120
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// if p3 = 114 then
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 114
19411: EQUAL
19412: IFFALSE 19422
// sMortar := true ;
19414: LD_ADDR_EXP 121
19418: PUSH
19419: LD_INT 1
19421: ST_TO_ADDR
// if p3 = 115 then
19422: LD_VAR 0 3
19426: PUSH
19427: LD_INT 115
19429: EQUAL
19430: IFFALSE 19440
// sRanger := true ;
19432: LD_ADDR_EXP 131
19436: PUSH
19437: LD_INT 1
19439: ST_TO_ADDR
// if p3 = 116 then
19440: LD_VAR 0 3
19444: PUSH
19445: LD_INT 116
19447: EQUAL
19448: IFFALSE 19458
// sComputer := true ;
19450: LD_ADDR_EXP 132
19454: PUSH
19455: LD_INT 1
19457: ST_TO_ADDR
// if p3 = 117 then
19458: LD_VAR 0 3
19462: PUSH
19463: LD_INT 117
19465: EQUAL
19466: IFFALSE 19476
// s30 := true ;
19468: LD_ADDR_EXP 133
19472: PUSH
19473: LD_INT 1
19475: ST_TO_ADDR
// if p3 = 118 then
19476: LD_VAR 0 3
19480: PUSH
19481: LD_INT 118
19483: EQUAL
19484: IFFALSE 19494
// s60 := true ;
19486: LD_ADDR_EXP 134
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// end ; if p2 = 101 then
19494: LD_VAR 0 2
19498: PUSH
19499: LD_INT 101
19501: EQUAL
19502: IFFALSE 19630
// begin case p3 of 1 :
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 1
19511: DOUBLE
19512: EQUAL
19513: IFTRUE 19517
19515: GO 19524
19517: POP
// hHackUnlimitedResources ; 2 :
19518: CALL 31226 0 0
19522: GO 19630
19524: LD_INT 2
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19539
19532: POP
// hHackSetLevel10 ; 3 :
19533: CALL 31359 0 0
19537: GO 19630
19539: LD_INT 3
19541: DOUBLE
19542: EQUAL
19543: IFTRUE 19547
19545: GO 19554
19547: POP
// hHackSetLevel10YourUnits ; 4 :
19548: CALL 31444 0 0
19552: GO 19630
19554: LD_INT 4
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19569
19562: POP
// hHackInvincible ; 5 :
19563: CALL 31892 0 0
19567: GO 19630
19569: LD_INT 5
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19584
19577: POP
// hHackInvisible ; 6 :
19578: CALL 32003 0 0
19582: GO 19630
19584: LD_INT 6
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19599
19592: POP
// hHackChangeYourSide ; 7 :
19593: CALL 32060 0 0
19597: GO 19630
19599: LD_INT 7
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19614
19607: POP
// hHackChangeUnitSide ; 8 :
19608: CALL 32102 0 0
19612: GO 19630
19614: LD_INT 8
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19629
19622: POP
// hHackFog ; end ;
19623: CALL 32203 0 0
19627: GO 19630
19629: POP
// end ; end ;
19630: LD_VAR 0 7
19634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19635: GO 19637
19637: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19638: LD_STRING initStreamRollete();
19640: PPUSH
19641: CALL_OW 559
// InitStreamMode ;
19645: CALL 19654 0 0
// DefineStreamItems ( ) ;
19649: CALL 20118 0 0
// end ;
19653: END
// function InitStreamMode ; begin
19654: LD_INT 0
19656: PPUSH
// streamModeActive := false ;
19657: LD_ADDR_EXP 78
19661: PUSH
19662: LD_INT 0
19664: ST_TO_ADDR
// normalCounter := 36 ;
19665: LD_ADDR_EXP 79
19669: PUSH
19670: LD_INT 36
19672: ST_TO_ADDR
// hardcoreCounter := 16 ;
19673: LD_ADDR_EXP 80
19677: PUSH
19678: LD_INT 16
19680: ST_TO_ADDR
// sRocket := false ;
19681: LD_ADDR_EXP 83
19685: PUSH
19686: LD_INT 0
19688: ST_TO_ADDR
// sSpeed := false ;
19689: LD_ADDR_EXP 82
19693: PUSH
19694: LD_INT 0
19696: ST_TO_ADDR
// sEngine := false ;
19697: LD_ADDR_EXP 84
19701: PUSH
19702: LD_INT 0
19704: ST_TO_ADDR
// sSpec := false ;
19705: LD_ADDR_EXP 81
19709: PUSH
19710: LD_INT 0
19712: ST_TO_ADDR
// sLevel := false ;
19713: LD_ADDR_EXP 85
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// sArmoury := false ;
19721: LD_ADDR_EXP 86
19725: PUSH
19726: LD_INT 0
19728: ST_TO_ADDR
// sRadar := false ;
19729: LD_ADDR_EXP 87
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// sBunker := false ;
19737: LD_ADDR_EXP 88
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// sHack := false ;
19745: LD_ADDR_EXP 89
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
// sFire := false ;
19753: LD_ADDR_EXP 90
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// sRefresh := false ;
19761: LD_ADDR_EXP 91
19765: PUSH
19766: LD_INT 0
19768: ST_TO_ADDR
// sExp := false ;
19769: LD_ADDR_EXP 92
19773: PUSH
19774: LD_INT 0
19776: ST_TO_ADDR
// sDepot := false ;
19777: LD_ADDR_EXP 93
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// sFlag := false ;
19785: LD_ADDR_EXP 94
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// sKamikadze := false ;
19793: LD_ADDR_EXP 102
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// sTroll := false ;
19801: LD_ADDR_EXP 103
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
// sSlow := false ;
19809: LD_ADDR_EXP 104
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// sLack := false ;
19817: LD_ADDR_EXP 105
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// sTank := false ;
19825: LD_ADDR_EXP 107
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// sRemote := false ;
19833: LD_ADDR_EXP 108
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
// sPowell := false ;
19841: LD_ADDR_EXP 109
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// sTeleport := false ;
19849: LD_ADDR_EXP 112
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// sOilTower := false ;
19857: LD_ADDR_EXP 114
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// sShovel := false ;
19865: LD_ADDR_EXP 115
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sSheik := false ;
19873: LD_ADDR_EXP 116
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// sEarthquake := false ;
19881: LD_ADDR_EXP 118
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// sAI := false ;
19889: LD_ADDR_EXP 119
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// sCargo := false ;
19897: LD_ADDR_EXP 122
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// sDLaser := false ;
19905: LD_ADDR_EXP 123
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// sExchange := false ;
19913: LD_ADDR_EXP 124
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// sFac := false ;
19921: LD_ADDR_EXP 125
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// sPower := false ;
19929: LD_ADDR_EXP 126
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// sRandom := false ;
19937: LD_ADDR_EXP 127
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// sShield := false ;
19945: LD_ADDR_EXP 128
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// sTime := false ;
19953: LD_ADDR_EXP 129
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// sTools := false ;
19961: LD_ADDR_EXP 130
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// sSold := false ;
19969: LD_ADDR_EXP 95
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// sDiff := false ;
19977: LD_ADDR_EXP 96
19981: PUSH
19982: LD_INT 0
19984: ST_TO_ADDR
// sFog := false ;
19985: LD_ADDR_EXP 99
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sReset := false ;
19993: LD_ADDR_EXP 100
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sSun := false ;
20001: LD_ADDR_EXP 101
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sTiger := false ;
20009: LD_ADDR_EXP 97
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sBomb := false ;
20017: LD_ADDR_EXP 98
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sWound := false ;
20025: LD_ADDR_EXP 106
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sBetray := false ;
20033: LD_ADDR_EXP 110
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sContamin := false ;
20041: LD_ADDR_EXP 111
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sOil := false ;
20049: LD_ADDR_EXP 113
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sStu := false ;
20057: LD_ADDR_EXP 117
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sBazooka := false ;
20065: LD_ADDR_EXP 120
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sMortar := false ;
20073: LD_ADDR_EXP 121
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sRanger := false ;
20081: LD_ADDR_EXP 131
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sComputer := false ;
20089: LD_ADDR_EXP 132
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// s30 := false ;
20097: LD_ADDR_EXP 133
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// s60 := false ;
20105: LD_ADDR_EXP 134
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// end ;
20113: LD_VAR 0 1
20117: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20118: LD_INT 0
20120: PPUSH
20121: PPUSH
20122: PPUSH
20123: PPUSH
20124: PPUSH
// result := [ ] ;
20125: LD_ADDR_VAR 0 1
20129: PUSH
20130: EMPTY
20131: ST_TO_ADDR
// if campaign_id = 1 then
20132: LD_OWVAR 69
20136: PUSH
20137: LD_INT 1
20139: EQUAL
20140: IFFALSE 23306
// begin case mission_number of 1 :
20142: LD_OWVAR 70
20146: PUSH
20147: LD_INT 1
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20231
20155: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20156: LD_ADDR_VAR 0 1
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 4
20166: PUSH
20167: LD_INT 11
20169: PUSH
20170: LD_INT 12
20172: PUSH
20173: LD_INT 15
20175: PUSH
20176: LD_INT 16
20178: PUSH
20179: LD_INT 22
20181: PUSH
20182: LD_INT 23
20184: PUSH
20185: LD_INT 26
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 101
20201: PUSH
20202: LD_INT 102
20204: PUSH
20205: LD_INT 106
20207: PUSH
20208: LD_INT 116
20210: PUSH
20211: LD_INT 117
20213: PUSH
20214: LD_INT 118
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: ST_TO_ADDR
20229: GO 23304
20231: LD_INT 2
20233: DOUBLE
20234: EQUAL
20235: IFTRUE 20239
20237: GO 20323
20239: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20240: LD_ADDR_VAR 0 1
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 4
20250: PUSH
20251: LD_INT 11
20253: PUSH
20254: LD_INT 12
20256: PUSH
20257: LD_INT 15
20259: PUSH
20260: LD_INT 16
20262: PUSH
20263: LD_INT 22
20265: PUSH
20266: LD_INT 23
20268: PUSH
20269: LD_INT 26
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 101
20285: PUSH
20286: LD_INT 102
20288: PUSH
20289: LD_INT 105
20291: PUSH
20292: LD_INT 106
20294: PUSH
20295: LD_INT 108
20297: PUSH
20298: LD_INT 116
20300: PUSH
20301: LD_INT 117
20303: PUSH
20304: LD_INT 118
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: ST_TO_ADDR
20321: GO 23304
20323: LD_INT 3
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20419
20331: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20332: LD_ADDR_VAR 0 1
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 4
20342: PUSH
20343: LD_INT 5
20345: PUSH
20346: LD_INT 11
20348: PUSH
20349: LD_INT 12
20351: PUSH
20352: LD_INT 15
20354: PUSH
20355: LD_INT 16
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_INT 26
20363: PUSH
20364: LD_INT 36
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 101
20381: PUSH
20382: LD_INT 102
20384: PUSH
20385: LD_INT 105
20387: PUSH
20388: LD_INT 106
20390: PUSH
20391: LD_INT 108
20393: PUSH
20394: LD_INT 116
20396: PUSH
20397: LD_INT 117
20399: PUSH
20400: LD_INT 118
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: ST_TO_ADDR
20417: GO 23304
20419: LD_INT 4
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20523
20427: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20428: LD_ADDR_VAR 0 1
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 4
20438: PUSH
20439: LD_INT 5
20441: PUSH
20442: LD_INT 8
20444: PUSH
20445: LD_INT 11
20447: PUSH
20448: LD_INT 12
20450: PUSH
20451: LD_INT 15
20453: PUSH
20454: LD_INT 16
20456: PUSH
20457: LD_INT 22
20459: PUSH
20460: LD_INT 23
20462: PUSH
20463: LD_INT 26
20465: PUSH
20466: LD_INT 36
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 101
20485: PUSH
20486: LD_INT 102
20488: PUSH
20489: LD_INT 105
20491: PUSH
20492: LD_INT 106
20494: PUSH
20495: LD_INT 108
20497: PUSH
20498: LD_INT 116
20500: PUSH
20501: LD_INT 117
20503: PUSH
20504: LD_INT 118
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: ST_TO_ADDR
20521: GO 23304
20523: LD_INT 5
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20643
20531: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20532: LD_ADDR_VAR 0 1
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 4
20542: PUSH
20543: LD_INT 5
20545: PUSH
20546: LD_INT 6
20548: PUSH
20549: LD_INT 8
20551: PUSH
20552: LD_INT 11
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: LD_INT 15
20560: PUSH
20561: LD_INT 16
20563: PUSH
20564: LD_INT 22
20566: PUSH
20567: LD_INT 23
20569: PUSH
20570: LD_INT 25
20572: PUSH
20573: LD_INT 26
20575: PUSH
20576: LD_INT 36
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 101
20597: PUSH
20598: LD_INT 102
20600: PUSH
20601: LD_INT 105
20603: PUSH
20604: LD_INT 106
20606: PUSH
20607: LD_INT 108
20609: PUSH
20610: LD_INT 109
20612: PUSH
20613: LD_INT 112
20615: PUSH
20616: LD_INT 116
20618: PUSH
20619: LD_INT 117
20621: PUSH
20622: LD_INT 118
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: ST_TO_ADDR
20641: GO 23304
20643: LD_INT 6
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20783
20651: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20652: LD_ADDR_VAR 0 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 4
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: LD_INT 6
20668: PUSH
20669: LD_INT 8
20671: PUSH
20672: LD_INT 11
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: LD_INT 15
20680: PUSH
20681: LD_INT 16
20683: PUSH
20684: LD_INT 20
20686: PUSH
20687: LD_INT 21
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_INT 23
20695: PUSH
20696: LD_INT 25
20698: PUSH
20699: LD_INT 26
20701: PUSH
20702: LD_INT 30
20704: PUSH
20705: LD_INT 31
20707: PUSH
20708: LD_INT 32
20710: PUSH
20711: LD_INT 36
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 101
20737: PUSH
20738: LD_INT 102
20740: PUSH
20741: LD_INT 105
20743: PUSH
20744: LD_INT 106
20746: PUSH
20747: LD_INT 108
20749: PUSH
20750: LD_INT 109
20752: PUSH
20753: LD_INT 112
20755: PUSH
20756: LD_INT 116
20758: PUSH
20759: LD_INT 117
20761: PUSH
20762: LD_INT 118
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 23304
20783: LD_INT 7
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20903
20791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 4
20802: PUSH
20803: LD_INT 5
20805: PUSH
20806: LD_INT 7
20808: PUSH
20809: LD_INT 11
20811: PUSH
20812: LD_INT 12
20814: PUSH
20815: LD_INT 15
20817: PUSH
20818: LD_INT 16
20820: PUSH
20821: LD_INT 20
20823: PUSH
20824: LD_INT 21
20826: PUSH
20827: LD_INT 22
20829: PUSH
20830: LD_INT 23
20832: PUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 26
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 101
20857: PUSH
20858: LD_INT 102
20860: PUSH
20861: LD_INT 103
20863: PUSH
20864: LD_INT 105
20866: PUSH
20867: LD_INT 106
20869: PUSH
20870: LD_INT 108
20872: PUSH
20873: LD_INT 112
20875: PUSH
20876: LD_INT 116
20878: PUSH
20879: LD_INT 117
20881: PUSH
20882: LD_INT 118
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: ST_TO_ADDR
20901: GO 23304
20903: LD_INT 8
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 21051
20911: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20912: LD_ADDR_VAR 0 1
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 4
20922: PUSH
20923: LD_INT 5
20925: PUSH
20926: LD_INT 6
20928: PUSH
20929: LD_INT 7
20931: PUSH
20932: LD_INT 8
20934: PUSH
20935: LD_INT 11
20937: PUSH
20938: LD_INT 12
20940: PUSH
20941: LD_INT 15
20943: PUSH
20944: LD_INT 16
20946: PUSH
20947: LD_INT 20
20949: PUSH
20950: LD_INT 21
20952: PUSH
20953: LD_INT 22
20955: PUSH
20956: LD_INT 23
20958: PUSH
20959: LD_INT 25
20961: PUSH
20962: LD_INT 26
20964: PUSH
20965: LD_INT 30
20967: PUSH
20968: LD_INT 31
20970: PUSH
20971: LD_INT 32
20973: PUSH
20974: LD_INT 36
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 101
21001: PUSH
21002: LD_INT 102
21004: PUSH
21005: LD_INT 103
21007: PUSH
21008: LD_INT 105
21010: PUSH
21011: LD_INT 106
21013: PUSH
21014: LD_INT 108
21016: PUSH
21017: LD_INT 109
21019: PUSH
21020: LD_INT 112
21022: PUSH
21023: LD_INT 116
21025: PUSH
21026: LD_INT 117
21028: PUSH
21029: LD_INT 118
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 23304
21051: LD_INT 9
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21207
21059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 4
21070: PUSH
21071: LD_INT 5
21073: PUSH
21074: LD_INT 6
21076: PUSH
21077: LD_INT 7
21079: PUSH
21080: LD_INT 8
21082: PUSH
21083: LD_INT 11
21085: PUSH
21086: LD_INT 12
21088: PUSH
21089: LD_INT 15
21091: PUSH
21092: LD_INT 16
21094: PUSH
21095: LD_INT 20
21097: PUSH
21098: LD_INT 21
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 25
21109: PUSH
21110: LD_INT 26
21112: PUSH
21113: LD_INT 28
21115: PUSH
21116: LD_INT 30
21118: PUSH
21119: LD_INT 31
21121: PUSH
21122: LD_INT 32
21124: PUSH
21125: LD_INT 36
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 101
21153: PUSH
21154: LD_INT 102
21156: PUSH
21157: LD_INT 103
21159: PUSH
21160: LD_INT 105
21162: PUSH
21163: LD_INT 106
21165: PUSH
21166: LD_INT 108
21168: PUSH
21169: LD_INT 109
21171: PUSH
21172: LD_INT 112
21174: PUSH
21175: LD_INT 114
21177: PUSH
21178: LD_INT 116
21180: PUSH
21181: LD_INT 117
21183: PUSH
21184: LD_INT 118
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: ST_TO_ADDR
21205: GO 23304
21207: LD_INT 10
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21411
21215: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21216: LD_ADDR_VAR 0 1
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: LD_INT 4
21226: PUSH
21227: LD_INT 5
21229: PUSH
21230: LD_INT 6
21232: PUSH
21233: LD_INT 7
21235: PUSH
21236: LD_INT 8
21238: PUSH
21239: LD_INT 9
21241: PUSH
21242: LD_INT 10
21244: PUSH
21245: LD_INT 11
21247: PUSH
21248: LD_INT 12
21250: PUSH
21251: LD_INT 13
21253: PUSH
21254: LD_INT 14
21256: PUSH
21257: LD_INT 15
21259: PUSH
21260: LD_INT 16
21262: PUSH
21263: LD_INT 17
21265: PUSH
21266: LD_INT 18
21268: PUSH
21269: LD_INT 19
21271: PUSH
21272: LD_INT 20
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 22
21280: PUSH
21281: LD_INT 23
21283: PUSH
21284: LD_INT 24
21286: PUSH
21287: LD_INT 25
21289: PUSH
21290: LD_INT 26
21292: PUSH
21293: LD_INT 28
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 31
21301: PUSH
21302: LD_INT 32
21304: PUSH
21305: LD_INT 36
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 101
21341: PUSH
21342: LD_INT 102
21344: PUSH
21345: LD_INT 103
21347: PUSH
21348: LD_INT 104
21350: PUSH
21351: LD_INT 105
21353: PUSH
21354: LD_INT 106
21356: PUSH
21357: LD_INT 107
21359: PUSH
21360: LD_INT 108
21362: PUSH
21363: LD_INT 109
21365: PUSH
21366: LD_INT 110
21368: PUSH
21369: LD_INT 111
21371: PUSH
21372: LD_INT 112
21374: PUSH
21375: LD_INT 114
21377: PUSH
21378: LD_INT 116
21380: PUSH
21381: LD_INT 117
21383: PUSH
21384: LD_INT 118
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: ST_TO_ADDR
21409: GO 23304
21411: LD_INT 11
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21623
21419: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21420: LD_ADDR_VAR 0 1
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: LD_INT 4
21433: PUSH
21434: LD_INT 5
21436: PUSH
21437: LD_INT 6
21439: PUSH
21440: LD_INT 7
21442: PUSH
21443: LD_INT 8
21445: PUSH
21446: LD_INT 9
21448: PUSH
21449: LD_INT 10
21451: PUSH
21452: LD_INT 11
21454: PUSH
21455: LD_INT 12
21457: PUSH
21458: LD_INT 13
21460: PUSH
21461: LD_INT 14
21463: PUSH
21464: LD_INT 15
21466: PUSH
21467: LD_INT 16
21469: PUSH
21470: LD_INT 17
21472: PUSH
21473: LD_INT 18
21475: PUSH
21476: LD_INT 19
21478: PUSH
21479: LD_INT 20
21481: PUSH
21482: LD_INT 21
21484: PUSH
21485: LD_INT 22
21487: PUSH
21488: LD_INT 23
21490: PUSH
21491: LD_INT 24
21493: PUSH
21494: LD_INT 25
21496: PUSH
21497: LD_INT 26
21499: PUSH
21500: LD_INT 28
21502: PUSH
21503: LD_INT 30
21505: PUSH
21506: LD_INT 31
21508: PUSH
21509: LD_INT 32
21511: PUSH
21512: LD_INT 34
21514: PUSH
21515: LD_INT 36
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 101
21553: PUSH
21554: LD_INT 102
21556: PUSH
21557: LD_INT 103
21559: PUSH
21560: LD_INT 104
21562: PUSH
21563: LD_INT 105
21565: PUSH
21566: LD_INT 106
21568: PUSH
21569: LD_INT 107
21571: PUSH
21572: LD_INT 108
21574: PUSH
21575: LD_INT 109
21577: PUSH
21578: LD_INT 110
21580: PUSH
21581: LD_INT 111
21583: PUSH
21584: LD_INT 112
21586: PUSH
21587: LD_INT 114
21589: PUSH
21590: LD_INT 116
21592: PUSH
21593: LD_INT 117
21595: PUSH
21596: LD_INT 118
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: ST_TO_ADDR
21621: GO 23304
21623: LD_INT 12
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21851
21631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 3
21645: PUSH
21646: LD_INT 4
21648: PUSH
21649: LD_INT 5
21651: PUSH
21652: LD_INT 6
21654: PUSH
21655: LD_INT 7
21657: PUSH
21658: LD_INT 8
21660: PUSH
21661: LD_INT 9
21663: PUSH
21664: LD_INT 10
21666: PUSH
21667: LD_INT 11
21669: PUSH
21670: LD_INT 12
21672: PUSH
21673: LD_INT 13
21675: PUSH
21676: LD_INT 14
21678: PUSH
21679: LD_INT 15
21681: PUSH
21682: LD_INT 16
21684: PUSH
21685: LD_INT 17
21687: PUSH
21688: LD_INT 18
21690: PUSH
21691: LD_INT 19
21693: PUSH
21694: LD_INT 20
21696: PUSH
21697: LD_INT 21
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_INT 23
21705: PUSH
21706: LD_INT 24
21708: PUSH
21709: LD_INT 25
21711: PUSH
21712: LD_INT 26
21714: PUSH
21715: LD_INT 27
21717: PUSH
21718: LD_INT 28
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 31
21726: PUSH
21727: LD_INT 32
21729: PUSH
21730: LD_INT 33
21732: PUSH
21733: LD_INT 34
21735: PUSH
21736: LD_INT 36
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 101
21777: PUSH
21778: LD_INT 102
21780: PUSH
21781: LD_INT 103
21783: PUSH
21784: LD_INT 104
21786: PUSH
21787: LD_INT 105
21789: PUSH
21790: LD_INT 106
21792: PUSH
21793: LD_INT 107
21795: PUSH
21796: LD_INT 108
21798: PUSH
21799: LD_INT 109
21801: PUSH
21802: LD_INT 110
21804: PUSH
21805: LD_INT 111
21807: PUSH
21808: LD_INT 112
21810: PUSH
21811: LD_INT 113
21813: PUSH
21814: LD_INT 114
21816: PUSH
21817: LD_INT 116
21819: PUSH
21820: LD_INT 117
21822: PUSH
21823: LD_INT 118
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: ST_TO_ADDR
21849: GO 23304
21851: LD_INT 13
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 22067
21859: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21860: LD_ADDR_VAR 0 1
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: LD_INT 3
21873: PUSH
21874: LD_INT 4
21876: PUSH
21877: LD_INT 5
21879: PUSH
21880: LD_INT 8
21882: PUSH
21883: LD_INT 9
21885: PUSH
21886: LD_INT 10
21888: PUSH
21889: LD_INT 11
21891: PUSH
21892: LD_INT 12
21894: PUSH
21895: LD_INT 14
21897: PUSH
21898: LD_INT 15
21900: PUSH
21901: LD_INT 16
21903: PUSH
21904: LD_INT 17
21906: PUSH
21907: LD_INT 18
21909: PUSH
21910: LD_INT 19
21912: PUSH
21913: LD_INT 20
21915: PUSH
21916: LD_INT 21
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 23
21924: PUSH
21925: LD_INT 24
21927: PUSH
21928: LD_INT 25
21930: PUSH
21931: LD_INT 26
21933: PUSH
21934: LD_INT 27
21936: PUSH
21937: LD_INT 28
21939: PUSH
21940: LD_INT 30
21942: PUSH
21943: LD_INT 31
21945: PUSH
21946: LD_INT 32
21948: PUSH
21949: LD_INT 33
21951: PUSH
21952: LD_INT 34
21954: PUSH
21955: LD_INT 36
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 101
21993: PUSH
21994: LD_INT 102
21996: PUSH
21997: LD_INT 103
21999: PUSH
22000: LD_INT 104
22002: PUSH
22003: LD_INT 105
22005: PUSH
22006: LD_INT 106
22008: PUSH
22009: LD_INT 107
22011: PUSH
22012: LD_INT 108
22014: PUSH
22015: LD_INT 109
22017: PUSH
22018: LD_INT 110
22020: PUSH
22021: LD_INT 111
22023: PUSH
22024: LD_INT 112
22026: PUSH
22027: LD_INT 113
22029: PUSH
22030: LD_INT 114
22032: PUSH
22033: LD_INT 116
22035: PUSH
22036: LD_INT 117
22038: PUSH
22039: LD_INT 118
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 23304
22067: LD_INT 14
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22299
22075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22076: LD_ADDR_VAR 0 1
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: LD_INT 2
22086: PUSH
22087: LD_INT 3
22089: PUSH
22090: LD_INT 4
22092: PUSH
22093: LD_INT 5
22095: PUSH
22096: LD_INT 6
22098: PUSH
22099: LD_INT 7
22101: PUSH
22102: LD_INT 8
22104: PUSH
22105: LD_INT 9
22107: PUSH
22108: LD_INT 10
22110: PUSH
22111: LD_INT 11
22113: PUSH
22114: LD_INT 12
22116: PUSH
22117: LD_INT 13
22119: PUSH
22120: LD_INT 14
22122: PUSH
22123: LD_INT 15
22125: PUSH
22126: LD_INT 16
22128: PUSH
22129: LD_INT 17
22131: PUSH
22132: LD_INT 18
22134: PUSH
22135: LD_INT 19
22137: PUSH
22138: LD_INT 20
22140: PUSH
22141: LD_INT 21
22143: PUSH
22144: LD_INT 22
22146: PUSH
22147: LD_INT 23
22149: PUSH
22150: LD_INT 24
22152: PUSH
22153: LD_INT 25
22155: PUSH
22156: LD_INT 26
22158: PUSH
22159: LD_INT 27
22161: PUSH
22162: LD_INT 28
22164: PUSH
22165: LD_INT 29
22167: PUSH
22168: LD_INT 30
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 32
22176: PUSH
22177: LD_INT 33
22179: PUSH
22180: LD_INT 34
22182: PUSH
22183: LD_INT 36
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 101
22225: PUSH
22226: LD_INT 102
22228: PUSH
22229: LD_INT 103
22231: PUSH
22232: LD_INT 104
22234: PUSH
22235: LD_INT 105
22237: PUSH
22238: LD_INT 106
22240: PUSH
22241: LD_INT 107
22243: PUSH
22244: LD_INT 108
22246: PUSH
22247: LD_INT 109
22249: PUSH
22250: LD_INT 110
22252: PUSH
22253: LD_INT 111
22255: PUSH
22256: LD_INT 112
22258: PUSH
22259: LD_INT 113
22261: PUSH
22262: LD_INT 114
22264: PUSH
22265: LD_INT 116
22267: PUSH
22268: LD_INT 117
22270: PUSH
22271: LD_INT 118
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: ST_TO_ADDR
22297: GO 23304
22299: LD_INT 15
22301: DOUBLE
22302: EQUAL
22303: IFTRUE 22307
22305: GO 22531
22307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22308: LD_ADDR_VAR 0 1
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 4
22324: PUSH
22325: LD_INT 5
22327: PUSH
22328: LD_INT 6
22330: PUSH
22331: LD_INT 7
22333: PUSH
22334: LD_INT 8
22336: PUSH
22337: LD_INT 9
22339: PUSH
22340: LD_INT 10
22342: PUSH
22343: LD_INT 11
22345: PUSH
22346: LD_INT 12
22348: PUSH
22349: LD_INT 13
22351: PUSH
22352: LD_INT 14
22354: PUSH
22355: LD_INT 15
22357: PUSH
22358: LD_INT 16
22360: PUSH
22361: LD_INT 17
22363: PUSH
22364: LD_INT 18
22366: PUSH
22367: LD_INT 19
22369: PUSH
22370: LD_INT 20
22372: PUSH
22373: LD_INT 21
22375: PUSH
22376: LD_INT 22
22378: PUSH
22379: LD_INT 23
22381: PUSH
22382: LD_INT 24
22384: PUSH
22385: LD_INT 25
22387: PUSH
22388: LD_INT 26
22390: PUSH
22391: LD_INT 27
22393: PUSH
22394: LD_INT 28
22396: PUSH
22397: LD_INT 29
22399: PUSH
22400: LD_INT 30
22402: PUSH
22403: LD_INT 31
22405: PUSH
22406: LD_INT 32
22408: PUSH
22409: LD_INT 33
22411: PUSH
22412: LD_INT 34
22414: PUSH
22415: LD_INT 36
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 101
22457: PUSH
22458: LD_INT 102
22460: PUSH
22461: LD_INT 103
22463: PUSH
22464: LD_INT 104
22466: PUSH
22467: LD_INT 105
22469: PUSH
22470: LD_INT 106
22472: PUSH
22473: LD_INT 107
22475: PUSH
22476: LD_INT 108
22478: PUSH
22479: LD_INT 109
22481: PUSH
22482: LD_INT 110
22484: PUSH
22485: LD_INT 111
22487: PUSH
22488: LD_INT 112
22490: PUSH
22491: LD_INT 113
22493: PUSH
22494: LD_INT 114
22496: PUSH
22497: LD_INT 116
22499: PUSH
22500: LD_INT 117
22502: PUSH
22503: LD_INT 118
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: ST_TO_ADDR
22529: GO 23304
22531: LD_INT 16
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22675
22539: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22540: LD_ADDR_VAR 0 1
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 4
22550: PUSH
22551: LD_INT 5
22553: PUSH
22554: LD_INT 7
22556: PUSH
22557: LD_INT 11
22559: PUSH
22560: LD_INT 12
22562: PUSH
22563: LD_INT 15
22565: PUSH
22566: LD_INT 16
22568: PUSH
22569: LD_INT 20
22571: PUSH
22572: LD_INT 21
22574: PUSH
22575: LD_INT 22
22577: PUSH
22578: LD_INT 23
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 26
22586: PUSH
22587: LD_INT 30
22589: PUSH
22590: LD_INT 31
22592: PUSH
22593: LD_INT 32
22595: PUSH
22596: LD_INT 33
22598: PUSH
22599: LD_INT 34
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 101
22625: PUSH
22626: LD_INT 102
22628: PUSH
22629: LD_INT 103
22631: PUSH
22632: LD_INT 106
22634: PUSH
22635: LD_INT 108
22637: PUSH
22638: LD_INT 112
22640: PUSH
22641: LD_INT 113
22643: PUSH
22644: LD_INT 114
22646: PUSH
22647: LD_INT 116
22649: PUSH
22650: LD_INT 117
22652: PUSH
22653: LD_INT 118
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: ST_TO_ADDR
22673: GO 23304
22675: LD_INT 17
22677: DOUBLE
22678: EQUAL
22679: IFTRUE 22683
22681: GO 22907
22683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22684: LD_ADDR_VAR 0 1
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: LD_INT 4
22700: PUSH
22701: LD_INT 5
22703: PUSH
22704: LD_INT 6
22706: PUSH
22707: LD_INT 7
22709: PUSH
22710: LD_INT 8
22712: PUSH
22713: LD_INT 9
22715: PUSH
22716: LD_INT 10
22718: PUSH
22719: LD_INT 11
22721: PUSH
22722: LD_INT 12
22724: PUSH
22725: LD_INT 13
22727: PUSH
22728: LD_INT 14
22730: PUSH
22731: LD_INT 15
22733: PUSH
22734: LD_INT 16
22736: PUSH
22737: LD_INT 17
22739: PUSH
22740: LD_INT 18
22742: PUSH
22743: LD_INT 19
22745: PUSH
22746: LD_INT 20
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 22
22754: PUSH
22755: LD_INT 23
22757: PUSH
22758: LD_INT 24
22760: PUSH
22761: LD_INT 25
22763: PUSH
22764: LD_INT 26
22766: PUSH
22767: LD_INT 27
22769: PUSH
22770: LD_INT 28
22772: PUSH
22773: LD_INT 29
22775: PUSH
22776: LD_INT 30
22778: PUSH
22779: LD_INT 31
22781: PUSH
22782: LD_INT 32
22784: PUSH
22785: LD_INT 33
22787: PUSH
22788: LD_INT 34
22790: PUSH
22791: LD_INT 36
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 101
22833: PUSH
22834: LD_INT 102
22836: PUSH
22837: LD_INT 103
22839: PUSH
22840: LD_INT 104
22842: PUSH
22843: LD_INT 105
22845: PUSH
22846: LD_INT 106
22848: PUSH
22849: LD_INT 107
22851: PUSH
22852: LD_INT 108
22854: PUSH
22855: LD_INT 109
22857: PUSH
22858: LD_INT 110
22860: PUSH
22861: LD_INT 111
22863: PUSH
22864: LD_INT 112
22866: PUSH
22867: LD_INT 113
22869: PUSH
22870: LD_INT 114
22872: PUSH
22873: LD_INT 116
22875: PUSH
22876: LD_INT 117
22878: PUSH
22879: LD_INT 118
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: ST_TO_ADDR
22905: GO 23304
22907: LD_INT 18
22909: DOUBLE
22910: EQUAL
22911: IFTRUE 22915
22913: GO 23063
22915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22916: LD_ADDR_VAR 0 1
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: LD_INT 4
22926: PUSH
22927: LD_INT 5
22929: PUSH
22930: LD_INT 7
22932: PUSH
22933: LD_INT 11
22935: PUSH
22936: LD_INT 12
22938: PUSH
22939: LD_INT 15
22941: PUSH
22942: LD_INT 16
22944: PUSH
22945: LD_INT 20
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 25
22959: PUSH
22960: LD_INT 26
22962: PUSH
22963: LD_INT 30
22965: PUSH
22966: LD_INT 31
22968: PUSH
22969: LD_INT 32
22971: PUSH
22972: LD_INT 33
22974: PUSH
22975: LD_INT 34
22977: PUSH
22978: LD_INT 35
22980: PUSH
22981: LD_INT 36
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 101
23009: PUSH
23010: LD_INT 102
23012: PUSH
23013: LD_INT 103
23015: PUSH
23016: LD_INT 106
23018: PUSH
23019: LD_INT 108
23021: PUSH
23022: LD_INT 112
23024: PUSH
23025: LD_INT 113
23027: PUSH
23028: LD_INT 114
23030: PUSH
23031: LD_INT 115
23033: PUSH
23034: LD_INT 116
23036: PUSH
23037: LD_INT 117
23039: PUSH
23040: LD_INT 118
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: ST_TO_ADDR
23061: GO 23304
23063: LD_INT 19
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23303
23071: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23072: LD_ADDR_VAR 0 1
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: LD_INT 4
23088: PUSH
23089: LD_INT 5
23091: PUSH
23092: LD_INT 6
23094: PUSH
23095: LD_INT 7
23097: PUSH
23098: LD_INT 8
23100: PUSH
23101: LD_INT 9
23103: PUSH
23104: LD_INT 10
23106: PUSH
23107: LD_INT 11
23109: PUSH
23110: LD_INT 12
23112: PUSH
23113: LD_INT 13
23115: PUSH
23116: LD_INT 14
23118: PUSH
23119: LD_INT 15
23121: PUSH
23122: LD_INT 16
23124: PUSH
23125: LD_INT 17
23127: PUSH
23128: LD_INT 18
23130: PUSH
23131: LD_INT 19
23133: PUSH
23134: LD_INT 20
23136: PUSH
23137: LD_INT 21
23139: PUSH
23140: LD_INT 22
23142: PUSH
23143: LD_INT 23
23145: PUSH
23146: LD_INT 24
23148: PUSH
23149: LD_INT 25
23151: PUSH
23152: LD_INT 26
23154: PUSH
23155: LD_INT 27
23157: PUSH
23158: LD_INT 28
23160: PUSH
23161: LD_INT 29
23163: PUSH
23164: LD_INT 30
23166: PUSH
23167: LD_INT 31
23169: PUSH
23170: LD_INT 32
23172: PUSH
23173: LD_INT 33
23175: PUSH
23176: LD_INT 34
23178: PUSH
23179: LD_INT 35
23181: PUSH
23182: LD_INT 36
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 101
23225: PUSH
23226: LD_INT 102
23228: PUSH
23229: LD_INT 103
23231: PUSH
23232: LD_INT 104
23234: PUSH
23235: LD_INT 105
23237: PUSH
23238: LD_INT 106
23240: PUSH
23241: LD_INT 107
23243: PUSH
23244: LD_INT 108
23246: PUSH
23247: LD_INT 109
23249: PUSH
23250: LD_INT 110
23252: PUSH
23253: LD_INT 111
23255: PUSH
23256: LD_INT 112
23258: PUSH
23259: LD_INT 113
23261: PUSH
23262: LD_INT 114
23264: PUSH
23265: LD_INT 115
23267: PUSH
23268: LD_INT 116
23270: PUSH
23271: LD_INT 117
23273: PUSH
23274: LD_INT 118
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 23304
23303: POP
// end else
23304: GO 23535
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23306: LD_ADDR_VAR 0 1
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: LD_INT 4
23322: PUSH
23323: LD_INT 5
23325: PUSH
23326: LD_INT 6
23328: PUSH
23329: LD_INT 7
23331: PUSH
23332: LD_INT 8
23334: PUSH
23335: LD_INT 9
23337: PUSH
23338: LD_INT 10
23340: PUSH
23341: LD_INT 11
23343: PUSH
23344: LD_INT 12
23346: PUSH
23347: LD_INT 13
23349: PUSH
23350: LD_INT 14
23352: PUSH
23353: LD_INT 15
23355: PUSH
23356: LD_INT 16
23358: PUSH
23359: LD_INT 17
23361: PUSH
23362: LD_INT 18
23364: PUSH
23365: LD_INT 19
23367: PUSH
23368: LD_INT 20
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 22
23376: PUSH
23377: LD_INT 23
23379: PUSH
23380: LD_INT 24
23382: PUSH
23383: LD_INT 25
23385: PUSH
23386: LD_INT 26
23388: PUSH
23389: LD_INT 27
23391: PUSH
23392: LD_INT 28
23394: PUSH
23395: LD_INT 29
23397: PUSH
23398: LD_INT 30
23400: PUSH
23401: LD_INT 31
23403: PUSH
23404: LD_INT 32
23406: PUSH
23407: LD_INT 33
23409: PUSH
23410: LD_INT 34
23412: PUSH
23413: LD_INT 35
23415: PUSH
23416: LD_INT 36
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 103
23465: PUSH
23466: LD_INT 104
23468: PUSH
23469: LD_INT 105
23471: PUSH
23472: LD_INT 106
23474: PUSH
23475: LD_INT 107
23477: PUSH
23478: LD_INT 108
23480: PUSH
23481: LD_INT 109
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 111
23489: PUSH
23490: LD_INT 112
23492: PUSH
23493: LD_INT 113
23495: PUSH
23496: LD_INT 114
23498: PUSH
23499: LD_INT 115
23501: PUSH
23502: LD_INT 116
23504: PUSH
23505: LD_INT 117
23507: PUSH
23508: LD_INT 118
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// if result then
23535: LD_VAR 0 1
23539: IFFALSE 23828
// begin normal :=  ;
23541: LD_ADDR_VAR 0 3
23545: PUSH
23546: LD_STRING 
23548: ST_TO_ADDR
// hardcore :=  ;
23549: LD_ADDR_VAR 0 4
23553: PUSH
23554: LD_STRING 
23556: ST_TO_ADDR
// for i = 1 to normalCounter do
23557: LD_ADDR_VAR 0 5
23561: PUSH
23562: DOUBLE
23563: LD_INT 1
23565: DEC
23566: ST_TO_ADDR
23567: LD_EXP 79
23571: PUSH
23572: FOR_TO
23573: IFFALSE 23674
// begin tmp := 0 ;
23575: LD_ADDR_VAR 0 2
23579: PUSH
23580: LD_STRING 0
23582: ST_TO_ADDR
// if result [ 1 ] then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 1
23590: ARRAY
23591: IFFALSE 23656
// if result [ 1 ] [ 1 ] = i then
23593: LD_VAR 0 1
23597: PUSH
23598: LD_INT 1
23600: ARRAY
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PUSH
23606: LD_VAR 0 5
23610: EQUAL
23611: IFFALSE 23656
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: LD_VAR 0 1
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: LD_VAR 0 1
23630: PUSH
23631: LD_INT 1
23633: ARRAY
23634: PPUSH
23635: LD_INT 1
23637: PPUSH
23638: CALL_OW 3
23642: PPUSH
23643: CALL_OW 1
23647: ST_TO_ADDR
// tmp := 1 ;
23648: LD_ADDR_VAR 0 2
23652: PUSH
23653: LD_STRING 1
23655: ST_TO_ADDR
// end ; normal := normal & tmp ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: LD_VAR 0 3
23665: PUSH
23666: LD_VAR 0 2
23670: STR
23671: ST_TO_ADDR
// end ;
23672: GO 23572
23674: POP
23675: POP
// for i = 1 to hardcoreCounter do
23676: LD_ADDR_VAR 0 5
23680: PUSH
23681: DOUBLE
23682: LD_INT 1
23684: DEC
23685: ST_TO_ADDR
23686: LD_EXP 80
23690: PUSH
23691: FOR_TO
23692: IFFALSE 23797
// begin tmp := 0 ;
23694: LD_ADDR_VAR 0 2
23698: PUSH
23699: LD_STRING 0
23701: ST_TO_ADDR
// if result [ 2 ] then
23702: LD_VAR 0 1
23706: PUSH
23707: LD_INT 2
23709: ARRAY
23710: IFFALSE 23779
// if result [ 2 ] [ 1 ] = 100 + i then
23712: LD_VAR 0 1
23716: PUSH
23717: LD_INT 2
23719: ARRAY
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PUSH
23725: LD_INT 100
23727: PUSH
23728: LD_VAR 0 5
23732: PLUS
23733: EQUAL
23734: IFFALSE 23779
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23736: LD_ADDR_VAR 0 1
23740: PUSH
23741: LD_VAR 0 1
23745: PPUSH
23746: LD_INT 2
23748: PPUSH
23749: LD_VAR 0 1
23753: PUSH
23754: LD_INT 2
23756: ARRAY
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 3
23765: PPUSH
23766: CALL_OW 1
23770: ST_TO_ADDR
// tmp := 1 ;
23771: LD_ADDR_VAR 0 2
23775: PUSH
23776: LD_STRING 1
23778: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23779: LD_ADDR_VAR 0 4
23783: PUSH
23784: LD_VAR 0 4
23788: PUSH
23789: LD_VAR 0 2
23793: STR
23794: ST_TO_ADDR
// end ;
23795: GO 23691
23797: POP
23798: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23799: LD_STRING getStreamItemsFromMission("
23801: PUSH
23802: LD_VAR 0 3
23806: STR
23807: PUSH
23808: LD_STRING ","
23810: STR
23811: PUSH
23812: LD_VAR 0 4
23816: STR
23817: PUSH
23818: LD_STRING ")
23820: STR
23821: PPUSH
23822: CALL_OW 559
// end else
23826: GO 23835
// ToLua ( getStreamItemsFromMission("","") ) ;
23828: LD_STRING getStreamItemsFromMission("","")
23830: PPUSH
23831: CALL_OW 559
// end ;
23835: LD_VAR 0 1
23839: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23840: LD_EXP 78
23844: PUSH
23845: LD_EXP 83
23849: AND
23850: IFFALSE 23974
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
// begin enable ;
23859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23860: LD_ADDR_VAR 0 2
23864: PUSH
23865: LD_INT 22
23867: PUSH
23868: LD_OWVAR 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 34
23882: PUSH
23883: LD_INT 7
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 34
23892: PUSH
23893: LD_INT 45
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 34
23902: PUSH
23903: LD_INT 28
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 34
23912: PUSH
23913: LD_INT 47
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 69
23935: ST_TO_ADDR
// if not tmp then
23936: LD_VAR 0 2
23940: NOT
23941: IFFALSE 23945
// exit ;
23943: GO 23974
// for i in tmp do
23945: LD_ADDR_VAR 0 1
23949: PUSH
23950: LD_VAR 0 2
23954: PUSH
23955: FOR_IN
23956: IFFALSE 23972
// begin SetLives ( i , 0 ) ;
23958: LD_VAR 0 1
23962: PPUSH
23963: LD_INT 0
23965: PPUSH
23966: CALL_OW 234
// end ;
23970: GO 23955
23972: POP
23973: POP
// end ;
23974: PPOPN 2
23976: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23977: LD_EXP 78
23981: PUSH
23982: LD_EXP 84
23986: AND
23987: IFFALSE 24071
23989: GO 23991
23991: DISABLE
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
// begin enable ;
23996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23997: LD_ADDR_VAR 0 2
24001: PUSH
24002: LD_INT 22
24004: PUSH
24005: LD_OWVAR 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 32
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PPUSH
24028: CALL_OW 69
24032: ST_TO_ADDR
// if not tmp then
24033: LD_VAR 0 2
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24071
// for i in tmp do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: LD_VAR 0 2
24051: PUSH
24052: FOR_IN
24053: IFFALSE 24069
// begin SetLives ( i , 0 ) ;
24055: LD_VAR 0 1
24059: PPUSH
24060: LD_INT 0
24062: PPUSH
24063: CALL_OW 234
// end ;
24067: GO 24052
24069: POP
24070: POP
// end ;
24071: PPOPN 2
24073: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24074: LD_EXP 78
24078: PUSH
24079: LD_EXP 81
24083: AND
24084: IFFALSE 24177
24086: GO 24088
24088: DISABLE
24089: LD_INT 0
24091: PPUSH
// begin enable ;
24092: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24093: LD_ADDR_VAR 0 1
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_OWVAR 2
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 25
24115: PUSH
24116: LD_INT 5
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 9
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 25
24135: PUSH
24136: LD_INT 8
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PPUSH
24153: CALL_OW 69
24157: PUSH
24158: FOR_IN
24159: IFFALSE 24175
// begin SetClass ( i , 1 ) ;
24161: LD_VAR 0 1
24165: PPUSH
24166: LD_INT 1
24168: PPUSH
24169: CALL_OW 336
// end ;
24173: GO 24158
24175: POP
24176: POP
// end ;
24177: PPOPN 1
24179: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24180: LD_EXP 78
24184: PUSH
24185: LD_EXP 82
24189: AND
24190: PUSH
24191: LD_OWVAR 65
24195: PUSH
24196: LD_INT 7
24198: LESS
24199: AND
24200: IFFALSE 24214
24202: GO 24204
24204: DISABLE
// begin enable ;
24205: ENABLE
// game_speed := 7 ;
24206: LD_ADDR_OWVAR 65
24210: PUSH
24211: LD_INT 7
24213: ST_TO_ADDR
// end ;
24214: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24215: LD_EXP 78
24219: PUSH
24220: LD_EXP 85
24224: AND
24225: IFFALSE 24427
24227: GO 24229
24229: DISABLE
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
24234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24235: LD_ADDR_VAR 0 3
24239: PUSH
24240: LD_INT 81
24242: PUSH
24243: LD_OWVAR 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 21
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: ST_TO_ADDR
// if not tmp then
24271: LD_VAR 0 3
24275: NOT
24276: IFFALSE 24280
// exit ;
24278: GO 24427
// if tmp > 5 then
24280: LD_VAR 0 3
24284: PUSH
24285: LD_INT 5
24287: GREATER
24288: IFFALSE 24300
// k := 5 else
24290: LD_ADDR_VAR 0 2
24294: PUSH
24295: LD_INT 5
24297: ST_TO_ADDR
24298: GO 24310
// k := tmp ;
24300: LD_ADDR_VAR 0 2
24304: PUSH
24305: LD_VAR 0 3
24309: ST_TO_ADDR
// for i := 1 to k do
24310: LD_ADDR_VAR 0 1
24314: PUSH
24315: DOUBLE
24316: LD_INT 1
24318: DEC
24319: ST_TO_ADDR
24320: LD_VAR 0 2
24324: PUSH
24325: FOR_TO
24326: IFFALSE 24425
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24328: LD_VAR 0 3
24332: PUSH
24333: LD_VAR 0 1
24337: ARRAY
24338: PPUSH
24339: LD_VAR 0 1
24343: PUSH
24344: LD_INT 4
24346: MOD
24347: PUSH
24348: LD_INT 1
24350: PLUS
24351: PPUSH
24352: CALL_OW 259
24356: PUSH
24357: LD_INT 10
24359: LESS
24360: IFFALSE 24423
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24362: LD_VAR 0 3
24366: PUSH
24367: LD_VAR 0 1
24371: ARRAY
24372: PPUSH
24373: LD_VAR 0 1
24377: PUSH
24378: LD_INT 4
24380: MOD
24381: PUSH
24382: LD_INT 1
24384: PLUS
24385: PPUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_VAR 0 1
24395: ARRAY
24396: PPUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_INT 4
24404: MOD
24405: PUSH
24406: LD_INT 1
24408: PLUS
24409: PPUSH
24410: CALL_OW 259
24414: PUSH
24415: LD_INT 1
24417: PLUS
24418: PPUSH
24419: CALL_OW 237
24423: GO 24325
24425: POP
24426: POP
// end ;
24427: PPOPN 3
24429: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24430: LD_EXP 78
24434: PUSH
24435: LD_EXP 86
24439: AND
24440: IFFALSE 24460
24442: GO 24444
24444: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24445: LD_INT 4
24447: PPUSH
24448: LD_OWVAR 2
24452: PPUSH
24453: LD_INT 0
24455: PPUSH
24456: CALL_OW 324
24460: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24461: LD_EXP 78
24465: PUSH
24466: LD_EXP 115
24470: AND
24471: IFFALSE 24491
24473: GO 24475
24475: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24476: LD_INT 19
24478: PPUSH
24479: LD_OWVAR 2
24483: PPUSH
24484: LD_INT 0
24486: PPUSH
24487: CALL_OW 324
24491: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24492: LD_EXP 78
24496: PUSH
24497: LD_EXP 87
24501: AND
24502: IFFALSE 24604
24504: GO 24506
24506: DISABLE
24507: LD_INT 0
24509: PPUSH
24510: PPUSH
// begin enable ;
24511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_OWVAR 2
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 34
24534: PUSH
24535: LD_INT 11
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 34
24544: PUSH
24545: LD_INT 30
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PPUSH
24561: CALL_OW 69
24565: ST_TO_ADDR
// if not tmp then
24566: LD_VAR 0 2
24570: NOT
24571: IFFALSE 24575
// exit ;
24573: GO 24604
// for i in tmp do
24575: LD_ADDR_VAR 0 1
24579: PUSH
24580: LD_VAR 0 2
24584: PUSH
24585: FOR_IN
24586: IFFALSE 24602
// begin SetLives ( i , 0 ) ;
24588: LD_VAR 0 1
24592: PPUSH
24593: LD_INT 0
24595: PPUSH
24596: CALL_OW 234
// end ;
24600: GO 24585
24602: POP
24603: POP
// end ;
24604: PPOPN 2
24606: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24607: LD_EXP 78
24611: PUSH
24612: LD_EXP 88
24616: AND
24617: IFFALSE 24637
24619: GO 24621
24621: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24622: LD_INT 32
24624: PPUSH
24625: LD_OWVAR 2
24629: PPUSH
24630: LD_INT 0
24632: PPUSH
24633: CALL_OW 324
24637: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24638: LD_EXP 78
24642: PUSH
24643: LD_EXP 89
24647: AND
24648: IFFALSE 24829
24650: GO 24652
24652: DISABLE
24653: LD_INT 0
24655: PPUSH
24656: PPUSH
24657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_OWVAR 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 33
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 69
24693: ST_TO_ADDR
// if not tmp then
24694: LD_VAR 0 2
24698: NOT
24699: IFFALSE 24703
// exit ;
24701: GO 24829
// side := 0 ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_INT 0
24710: ST_TO_ADDR
// for i := 1 to 8 do
24711: LD_ADDR_VAR 0 1
24715: PUSH
24716: DOUBLE
24717: LD_INT 1
24719: DEC
24720: ST_TO_ADDR
24721: LD_INT 8
24723: PUSH
24724: FOR_TO
24725: IFFALSE 24773
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24727: LD_OWVAR 2
24731: PUSH
24732: LD_VAR 0 1
24736: NONEQUAL
24737: PUSH
24738: LD_OWVAR 2
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 81
24752: PUSH
24753: LD_INT 2
24755: EQUAL
24756: AND
24757: IFFALSE 24771
// begin side := i ;
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_VAR 0 1
24768: ST_TO_ADDR
// break ;
24769: GO 24773
// end ;
24771: GO 24724
24773: POP
24774: POP
// if not side then
24775: LD_VAR 0 3
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 24829
// for i := 1 to tmp do
24784: LD_ADDR_VAR 0 1
24788: PUSH
24789: DOUBLE
24790: LD_INT 1
24792: DEC
24793: ST_TO_ADDR
24794: LD_VAR 0 2
24798: PUSH
24799: FOR_TO
24800: IFFALSE 24827
// if Prob ( 60 ) then
24802: LD_INT 60
24804: PPUSH
24805: CALL_OW 13
24809: IFFALSE 24825
// SetSide ( i , side ) ;
24811: LD_VAR 0 1
24815: PPUSH
24816: LD_VAR 0 3
24820: PPUSH
24821: CALL_OW 235
24825: GO 24799
24827: POP
24828: POP
// end ;
24829: PPOPN 3
24831: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24832: LD_EXP 78
24836: PUSH
24837: LD_EXP 91
24841: AND
24842: IFFALSE 24961
24844: GO 24846
24846: DISABLE
24847: LD_INT 0
24849: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24850: LD_ADDR_VAR 0 1
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_OWVAR 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 21
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 23
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: PUSH
24904: FOR_IN
24905: IFFALSE 24959
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 257
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 2
24922: PUSH
24923: LD_INT 3
24925: PUSH
24926: LD_INT 4
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: IN
24935: IFFALSE 24957
// SetClass ( un , rand ( 1 , 4 ) ) ;
24937: LD_VAR 0 1
24941: PPUSH
24942: LD_INT 1
24944: PPUSH
24945: LD_INT 4
24947: PPUSH
24948: CALL_OW 12
24952: PPUSH
24953: CALL_OW 336
24957: GO 24904
24959: POP
24960: POP
// end ;
24961: PPOPN 1
24963: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24964: LD_EXP 78
24968: PUSH
24969: LD_EXP 90
24973: AND
24974: IFFALSE 25053
24976: GO 24978
24978: DISABLE
24979: LD_INT 0
24981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24982: LD_ADDR_VAR 0 1
24986: PUSH
24987: LD_INT 22
24989: PUSH
24990: LD_OWVAR 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 21
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PPUSH
25013: CALL_OW 69
25017: ST_TO_ADDR
// if not tmp then
25018: LD_VAR 0 1
25022: NOT
25023: IFFALSE 25027
// exit ;
25025: GO 25053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 1
25034: PPUSH
25035: LD_VAR 0 1
25039: PPUSH
25040: CALL_OW 12
25044: ARRAY
25045: PPUSH
25046: LD_INT 100
25048: PPUSH
25049: CALL_OW 234
// end ;
25053: PPOPN 1
25055: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25056: LD_EXP 78
25060: PUSH
25061: LD_EXP 92
25065: AND
25066: IFFALSE 25164
25068: GO 25070
25070: DISABLE
25071: LD_INT 0
25073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25074: LD_ADDR_VAR 0 1
25078: PUSH
25079: LD_INT 22
25081: PUSH
25082: LD_OWVAR 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 21
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PPUSH
25105: CALL_OW 69
25109: ST_TO_ADDR
// if not tmp then
25110: LD_VAR 0 1
25114: NOT
25115: IFFALSE 25119
// exit ;
25117: GO 25164
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25119: LD_VAR 0 1
25123: PUSH
25124: LD_INT 1
25126: PPUSH
25127: LD_VAR 0 1
25131: PPUSH
25132: CALL_OW 12
25136: ARRAY
25137: PPUSH
25138: LD_INT 1
25140: PPUSH
25141: LD_INT 4
25143: PPUSH
25144: CALL_OW 12
25148: PPUSH
25149: LD_INT 3000
25151: PPUSH
25152: LD_INT 9000
25154: PPUSH
25155: CALL_OW 12
25159: PPUSH
25160: CALL_OW 492
// end ;
25164: PPOPN 1
25166: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25167: LD_EXP 78
25171: PUSH
25172: LD_EXP 93
25176: AND
25177: IFFALSE 25197
25179: GO 25181
25181: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25182: LD_INT 1
25184: PPUSH
25185: LD_OWVAR 2
25189: PPUSH
25190: LD_INT 0
25192: PPUSH
25193: CALL_OW 324
25197: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25198: LD_EXP 78
25202: PUSH
25203: LD_EXP 94
25207: AND
25208: IFFALSE 25291
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
25216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25217: LD_ADDR_VAR 0 2
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_OWVAR 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: ST_TO_ADDR
// if not tmp then
25253: LD_VAR 0 2
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25291
// for i in tmp do
25262: LD_ADDR_VAR 0 1
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25289
// SetBLevel ( i , 10 ) ;
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_INT 10
25282: PPUSH
25283: CALL_OW 241
25287: GO 25272
25289: POP
25290: POP
// end ;
25291: PPOPN 2
25293: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25294: LD_EXP 78
25298: PUSH
25299: LD_EXP 95
25303: AND
25304: IFFALSE 25415
25306: GO 25308
25308: DISABLE
25309: LD_INT 0
25311: PPUSH
25312: PPUSH
25313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 22
25321: PUSH
25322: LD_OWVAR 2
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 25
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: CALL_OW 69
25349: ST_TO_ADDR
// if not tmp then
25350: LD_VAR 0 3
25354: NOT
25355: IFFALSE 25359
// exit ;
25357: GO 25415
// un := tmp [ rand ( 1 , tmp ) ] ;
25359: LD_ADDR_VAR 0 2
25363: PUSH
25364: LD_VAR 0 3
25368: PUSH
25369: LD_INT 1
25371: PPUSH
25372: LD_VAR 0 3
25376: PPUSH
25377: CALL_OW 12
25381: ARRAY
25382: ST_TO_ADDR
// if Crawls ( un ) then
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 318
25392: IFFALSE 25403
// ComWalk ( un ) ;
25394: LD_VAR 0 2
25398: PPUSH
25399: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25403: LD_VAR 0 2
25407: PPUSH
25408: LD_INT 5
25410: PPUSH
25411: CALL_OW 336
// end ;
25415: PPOPN 3
25417: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25418: LD_EXP 78
25422: PUSH
25423: LD_EXP 96
25427: AND
25428: PUSH
25429: LD_OWVAR 67
25433: PUSH
25434: LD_INT 4
25436: LESS
25437: AND
25438: IFFALSE 25457
25440: GO 25442
25442: DISABLE
// begin Difficulty := Difficulty + 1 ;
25443: LD_ADDR_OWVAR 67
25447: PUSH
25448: LD_OWVAR 67
25452: PUSH
25453: LD_INT 1
25455: PLUS
25456: ST_TO_ADDR
// end ;
25457: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25458: LD_EXP 78
25462: PUSH
25463: LD_EXP 97
25467: AND
25468: IFFALSE 25571
25470: GO 25472
25472: DISABLE
25473: LD_INT 0
25475: PPUSH
// begin for i := 1 to 5 do
25476: LD_ADDR_VAR 0 1
25480: PUSH
25481: DOUBLE
25482: LD_INT 1
25484: DEC
25485: ST_TO_ADDR
25486: LD_INT 5
25488: PUSH
25489: FOR_TO
25490: IFFALSE 25569
// begin uc_nation := nation_nature ;
25492: LD_ADDR_OWVAR 21
25496: PUSH
25497: LD_INT 0
25499: ST_TO_ADDR
// uc_side := 0 ;
25500: LD_ADDR_OWVAR 20
25504: PUSH
25505: LD_INT 0
25507: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25508: LD_ADDR_OWVAR 29
25512: PUSH
25513: LD_INT 12
25515: PUSH
25516: LD_INT 12
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: ST_TO_ADDR
// hc_agressivity := 20 ;
25523: LD_ADDR_OWVAR 35
25527: PUSH
25528: LD_INT 20
25530: ST_TO_ADDR
// hc_class := class_tiger ;
25531: LD_ADDR_OWVAR 28
25535: PUSH
25536: LD_INT 14
25538: ST_TO_ADDR
// hc_gallery :=  ;
25539: LD_ADDR_OWVAR 33
25543: PUSH
25544: LD_STRING 
25546: ST_TO_ADDR
// hc_name :=  ;
25547: LD_ADDR_OWVAR 26
25551: PUSH
25552: LD_STRING 
25554: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25555: CALL_OW 44
25559: PPUSH
25560: LD_INT 0
25562: PPUSH
25563: CALL_OW 51
// end ;
25567: GO 25489
25569: POP
25570: POP
// end ;
25571: PPOPN 1
25573: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25574: LD_EXP 78
25578: PUSH
25579: LD_EXP 98
25583: AND
25584: IFFALSE 25593
25586: GO 25588
25588: DISABLE
// StreamSibBomb ;
25589: CALL 25594 0 0
25593: END
// export function StreamSibBomb ; var i , x , y ; begin
25594: LD_INT 0
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
// result := false ;
25600: LD_ADDR_VAR 0 1
25604: PUSH
25605: LD_INT 0
25607: ST_TO_ADDR
// for i := 1 to 16 do
25608: LD_ADDR_VAR 0 2
25612: PUSH
25613: DOUBLE
25614: LD_INT 1
25616: DEC
25617: ST_TO_ADDR
25618: LD_INT 16
25620: PUSH
25621: FOR_TO
25622: IFFALSE 25821
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_INT 10
25631: PUSH
25632: LD_INT 20
25634: PUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 40
25640: PUSH
25641: LD_INT 50
25643: PUSH
25644: LD_INT 60
25646: PUSH
25647: LD_INT 70
25649: PUSH
25650: LD_INT 80
25652: PUSH
25653: LD_INT 90
25655: PUSH
25656: LD_INT 100
25658: PUSH
25659: LD_INT 110
25661: PUSH
25662: LD_INT 120
25664: PUSH
25665: LD_INT 130
25667: PUSH
25668: LD_INT 140
25670: PUSH
25671: LD_INT 150
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PPUSH
25694: LD_INT 15
25696: PPUSH
25697: CALL_OW 12
25701: ARRAY
25702: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25703: LD_ADDR_VAR 0 4
25707: PUSH
25708: LD_INT 10
25710: PUSH
25711: LD_INT 20
25713: PUSH
25714: LD_INT 30
25716: PUSH
25717: LD_INT 40
25719: PUSH
25720: LD_INT 50
25722: PUSH
25723: LD_INT 60
25725: PUSH
25726: LD_INT 70
25728: PUSH
25729: LD_INT 80
25731: PUSH
25732: LD_INT 90
25734: PUSH
25735: LD_INT 100
25737: PUSH
25738: LD_INT 110
25740: PUSH
25741: LD_INT 120
25743: PUSH
25744: LD_INT 130
25746: PUSH
25747: LD_INT 140
25749: PUSH
25750: LD_INT 150
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PPUSH
25773: LD_INT 15
25775: PPUSH
25776: CALL_OW 12
25780: ARRAY
25781: ST_TO_ADDR
// if ValidHex ( x , y ) then
25782: LD_VAR 0 3
25786: PPUSH
25787: LD_VAR 0 4
25791: PPUSH
25792: CALL_OW 488
25796: IFFALSE 25819
// begin result := [ x , y ] ;
25798: LD_ADDR_VAR 0 1
25802: PUSH
25803: LD_VAR 0 3
25807: PUSH
25808: LD_VAR 0 4
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: ST_TO_ADDR
// break ;
25817: GO 25821
// end ; end ;
25819: GO 25621
25821: POP
25822: POP
// if result then
25823: LD_VAR 0 1
25827: IFFALSE 25887
// begin ToLua ( playSibBomb() ) ;
25829: LD_STRING playSibBomb()
25831: PPUSH
25832: CALL_OW 559
// wait ( 0 0$14 ) ;
25836: LD_INT 490
25838: PPUSH
25839: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PPUSH
25852: LD_VAR 0 1
25856: PUSH
25857: LD_INT 2
25859: ARRAY
25860: PPUSH
25861: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 2
25881: ARRAY
25882: PPUSH
25883: CALL_OW 429
// end ; end ;
25887: LD_VAR 0 1
25891: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25892: LD_EXP 78
25896: PUSH
25897: LD_EXP 100
25901: AND
25902: IFFALSE 25914
25904: GO 25906
25906: DISABLE
// YouLost (  ) ;
25907: LD_STRING 
25909: PPUSH
25910: CALL_OW 104
25914: END
// every 0 0$1 trigger StreamModeActive and sFog do
25915: LD_EXP 78
25919: PUSH
25920: LD_EXP 99
25924: AND
25925: IFFALSE 25939
25927: GO 25929
25929: DISABLE
// FogOff ( your_side ) ;
25930: LD_OWVAR 2
25934: PPUSH
25935: CALL_OW 344
25939: END
// every 0 0$1 trigger StreamModeActive and sSun do
25940: LD_EXP 78
25944: PUSH
25945: LD_EXP 101
25949: AND
25950: IFFALSE 25978
25952: GO 25954
25954: DISABLE
// begin solar_recharge_percent := 0 ;
25955: LD_ADDR_OWVAR 79
25959: PUSH
25960: LD_INT 0
25962: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25963: LD_INT 10500
25965: PPUSH
25966: CALL_OW 67
// solar_recharge_percent := 100 ;
25970: LD_ADDR_OWVAR 79
25974: PUSH
25975: LD_INT 100
25977: ST_TO_ADDR
// end ;
25978: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25979: LD_EXP 78
25983: PUSH
25984: LD_EXP 102
25988: AND
25989: IFFALSE 26228
25991: GO 25993
25993: DISABLE
25994: LD_INT 0
25996: PPUSH
25997: PPUSH
25998: PPUSH
// begin tmp := [ ] ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: EMPTY
26005: ST_TO_ADDR
// for i := 1 to 6 do
26006: LD_ADDR_VAR 0 1
26010: PUSH
26011: DOUBLE
26012: LD_INT 1
26014: DEC
26015: ST_TO_ADDR
26016: LD_INT 6
26018: PUSH
26019: FOR_TO
26020: IFFALSE 26125
// begin uc_nation := nation_nature ;
26022: LD_ADDR_OWVAR 21
26026: PUSH
26027: LD_INT 0
26029: ST_TO_ADDR
// uc_side := 0 ;
26030: LD_ADDR_OWVAR 20
26034: PUSH
26035: LD_INT 0
26037: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26038: LD_ADDR_OWVAR 29
26042: PUSH
26043: LD_INT 12
26045: PUSH
26046: LD_INT 12
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: ST_TO_ADDR
// hc_agressivity := 20 ;
26053: LD_ADDR_OWVAR 35
26057: PUSH
26058: LD_INT 20
26060: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26061: LD_ADDR_OWVAR 28
26065: PUSH
26066: LD_INT 17
26068: ST_TO_ADDR
// hc_gallery :=  ;
26069: LD_ADDR_OWVAR 33
26073: PUSH
26074: LD_STRING 
26076: ST_TO_ADDR
// hc_name :=  ;
26077: LD_ADDR_OWVAR 26
26081: PUSH
26082: LD_STRING 
26084: ST_TO_ADDR
// un := CreateHuman ;
26085: LD_ADDR_VAR 0 2
26089: PUSH
26090: CALL_OW 44
26094: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: LD_INT 1
26102: PPUSH
26103: CALL_OW 51
// tmp := tmp ^ un ;
26107: LD_ADDR_VAR 0 3
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: LD_VAR 0 2
26121: ADD
26122: ST_TO_ADDR
// end ;
26123: GO 26019
26125: POP
26126: POP
// repeat wait ( 0 0$1 ) ;
26127: LD_INT 35
26129: PPUSH
26130: CALL_OW 67
// for un in tmp do
26134: LD_ADDR_VAR 0 2
26138: PUSH
26139: LD_VAR 0 3
26143: PUSH
26144: FOR_IN
26145: IFFALSE 26219
// begin if IsDead ( un ) then
26147: LD_VAR 0 2
26151: PPUSH
26152: CALL_OW 301
26156: IFFALSE 26176
// begin tmp := tmp diff un ;
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_VAR 0 3
26167: PUSH
26168: LD_VAR 0 2
26172: DIFF
26173: ST_TO_ADDR
// continue ;
26174: GO 26144
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26176: LD_VAR 0 2
26180: PPUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 22
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: PPUSH
26203: LD_VAR 0 2
26207: PPUSH
26208: CALL_OW 74
26212: PPUSH
26213: CALL_OW 115
// end ;
26217: GO 26144
26219: POP
26220: POP
// until not tmp ;
26221: LD_VAR 0 3
26225: NOT
26226: IFFALSE 26127
// end ;
26228: PPOPN 3
26230: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26231: LD_EXP 78
26235: PUSH
26236: LD_EXP 103
26240: AND
26241: IFFALSE 26295
26243: GO 26245
26245: DISABLE
// begin ToLua ( displayTroll(); ) ;
26246: LD_STRING displayTroll();
26248: PPUSH
26249: CALL_OW 559
// wait ( 3 3$00 ) ;
26253: LD_INT 6300
26255: PPUSH
26256: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26260: LD_STRING hideTroll();
26262: PPUSH
26263: CALL_OW 559
// wait ( 1 1$00 ) ;
26267: LD_INT 2100
26269: PPUSH
26270: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26274: LD_STRING displayTroll();
26276: PPUSH
26277: CALL_OW 559
// wait ( 1 1$00 ) ;
26281: LD_INT 2100
26283: PPUSH
26284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26288: LD_STRING hideTroll();
26290: PPUSH
26291: CALL_OW 559
// end ;
26295: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26296: LD_EXP 78
26300: PUSH
26301: LD_EXP 104
26305: AND
26306: IFFALSE 26369
26308: GO 26310
26310: DISABLE
26311: LD_INT 0
26313: PPUSH
// begin p := 0 ;
26314: LD_ADDR_VAR 0 1
26318: PUSH
26319: LD_INT 0
26321: ST_TO_ADDR
// repeat game_speed := 1 ;
26322: LD_ADDR_OWVAR 65
26326: PUSH
26327: LD_INT 1
26329: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26330: LD_INT 35
26332: PPUSH
26333: CALL_OW 67
// p := p + 1 ;
26337: LD_ADDR_VAR 0 1
26341: PUSH
26342: LD_VAR 0 1
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: ST_TO_ADDR
// until p >= 60 ;
26351: LD_VAR 0 1
26355: PUSH
26356: LD_INT 60
26358: GREATEREQUAL
26359: IFFALSE 26322
// game_speed := 4 ;
26361: LD_ADDR_OWVAR 65
26365: PUSH
26366: LD_INT 4
26368: ST_TO_ADDR
// end ;
26369: PPOPN 1
26371: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26372: LD_EXP 78
26376: PUSH
26377: LD_EXP 105
26381: AND
26382: IFFALSE 26528
26384: GO 26386
26386: DISABLE
26387: LD_INT 0
26389: PPUSH
26390: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26391: LD_ADDR_VAR 0 1
26395: PUSH
26396: LD_INT 22
26398: PUSH
26399: LD_OWVAR 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 30
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 30
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 69
26444: ST_TO_ADDR
// if not depot then
26445: LD_VAR 0 1
26449: NOT
26450: IFFALSE 26454
// exit ;
26452: GO 26528
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26454: LD_ADDR_VAR 0 2
26458: PUSH
26459: LD_VAR 0 1
26463: PUSH
26464: LD_INT 1
26466: PPUSH
26467: LD_VAR 0 1
26471: PPUSH
26472: CALL_OW 12
26476: ARRAY
26477: PPUSH
26478: CALL_OW 274
26482: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26483: LD_VAR 0 2
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: LD_INT 0
26493: PPUSH
26494: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_INT 2
26505: PPUSH
26506: LD_INT 0
26508: PPUSH
26509: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26513: LD_VAR 0 2
26517: PPUSH
26518: LD_INT 3
26520: PPUSH
26521: LD_INT 0
26523: PPUSH
26524: CALL_OW 277
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26531: LD_EXP 78
26535: PUSH
26536: LD_EXP 106
26540: AND
26541: IFFALSE 26638
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 21
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 3
26578: PUSH
26579: LD_INT 23
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: PPUSH
26598: CALL_OW 69
26602: ST_TO_ADDR
// if not tmp then
26603: LD_VAR 0 1
26607: NOT
26608: IFFALSE 26612
// exit ;
26610: GO 26638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26612: LD_VAR 0 1
26616: PUSH
26617: LD_INT 1
26619: PPUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL_OW 12
26629: ARRAY
26630: PPUSH
26631: LD_INT 200
26633: PPUSH
26634: CALL_OW 234
// end ;
26638: PPOPN 1
26640: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26641: LD_EXP 78
26645: PUSH
26646: LD_EXP 107
26650: AND
26651: IFFALSE 26730
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_INT 22
26666: PUSH
26667: LD_OWVAR 2
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 21
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PPUSH
26690: CALL_OW 69
26694: ST_TO_ADDR
// if not tmp then
26695: LD_VAR 0 1
26699: NOT
26700: IFFALSE 26704
// exit ;
26702: GO 26730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26704: LD_VAR 0 1
26708: PUSH
26709: LD_INT 1
26711: PPUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 12
26721: ARRAY
26722: PPUSH
26723: LD_INT 60
26725: PPUSH
26726: CALL_OW 234
// end ;
26730: PPOPN 1
26732: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26733: LD_EXP 78
26737: PUSH
26738: LD_EXP 108
26742: AND
26743: IFFALSE 26842
26745: GO 26747
26747: DISABLE
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
// begin enable ;
26752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 61
26772: PUSH
26773: EMPTY
26774: LIST
26775: PUSH
26776: LD_INT 33
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 69
26795: ST_TO_ADDR
// if not tmp then
26796: LD_VAR 0 1
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26842
// for i in tmp do
26805: LD_ADDR_VAR 0 2
26809: PUSH
26810: LD_VAR 0 1
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26840
// if IsControledBy ( i ) then
26818: LD_VAR 0 2
26822: PPUSH
26823: CALL_OW 312
26827: IFFALSE 26838
// ComUnlink ( i ) ;
26829: LD_VAR 0 2
26833: PPUSH
26834: CALL_OW 136
26838: GO 26815
26840: POP
26841: POP
// end ;
26842: PPOPN 2
26844: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26845: LD_EXP 78
26849: PUSH
26850: LD_EXP 109
26854: AND
26855: IFFALSE 26995
26857: GO 26859
26859: DISABLE
26860: LD_INT 0
26862: PPUSH
26863: PPUSH
// begin ToLua ( displayPowell(); ) ;
26864: LD_STRING displayPowell();
26866: PPUSH
26867: CALL_OW 559
// uc_side := 0 ;
26871: LD_ADDR_OWVAR 20
26875: PUSH
26876: LD_INT 0
26878: ST_TO_ADDR
// uc_nation := 2 ;
26879: LD_ADDR_OWVAR 21
26883: PUSH
26884: LD_INT 2
26886: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26887: LD_ADDR_OWVAR 37
26891: PUSH
26892: LD_INT 14
26894: ST_TO_ADDR
// vc_engine := engine_siberite ;
26895: LD_ADDR_OWVAR 39
26899: PUSH
26900: LD_INT 3
26902: ST_TO_ADDR
// vc_control := control_apeman ;
26903: LD_ADDR_OWVAR 38
26907: PUSH
26908: LD_INT 5
26910: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26911: LD_ADDR_OWVAR 40
26915: PUSH
26916: LD_INT 29
26918: ST_TO_ADDR
// un := CreateVehicle ;
26919: LD_ADDR_VAR 0 2
26923: PUSH
26924: CALL_OW 45
26928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_INT 1
26936: PPUSH
26937: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26941: LD_INT 35
26943: PPUSH
26944: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_INT 22
26955: PUSH
26956: LD_OWVAR 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: PPUSH
26970: LD_VAR 0 2
26974: PPUSH
26975: CALL_OW 74
26979: PPUSH
26980: CALL_OW 115
// until IsDead ( un ) ;
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL_OW 301
26993: IFFALSE 26941
// end ;
26995: PPOPN 2
26997: END
// every 0 0$1 trigger StreamModeActive and sStu do
26998: LD_EXP 78
27002: PUSH
27003: LD_EXP 117
27007: AND
27008: IFFALSE 27024
27010: GO 27012
27012: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27013: LD_STRING displayStucuk();
27015: PPUSH
27016: CALL_OW 559
// ResetFog ;
27020: CALL_OW 335
// end ;
27024: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27025: LD_EXP 78
27029: PUSH
27030: LD_EXP 110
27034: AND
27035: IFFALSE 27176
27037: GO 27039
27039: DISABLE
27040: LD_INT 0
27042: PPUSH
27043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27044: LD_ADDR_VAR 0 2
27048: PUSH
27049: LD_INT 22
27051: PUSH
27052: LD_OWVAR 2
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 21
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 69
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 2
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27176
// un := tmp [ rand ( 1 , tmp ) ] ;
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: LD_VAR 0 2
27098: PUSH
27099: LD_INT 1
27101: PPUSH
27102: LD_VAR 0 2
27106: PPUSH
27107: CALL_OW 12
27111: ARRAY
27112: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27113: LD_VAR 0 1
27117: PPUSH
27118: LD_INT 0
27120: PPUSH
27121: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27125: LD_VAR 0 1
27129: PPUSH
27130: LD_OWVAR 3
27134: PUSH
27135: LD_VAR 0 1
27139: DIFF
27140: PPUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: CALL_OW 74
27150: PPUSH
27151: CALL_OW 115
// wait ( 0 0$20 ) ;
27155: LD_INT 700
27157: PPUSH
27158: CALL_OW 67
// SetSide ( un , your_side ) ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_OWVAR 2
27171: PPUSH
27172: CALL_OW 235
// end ;
27176: PPOPN 2
27178: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27179: LD_EXP 78
27183: PUSH
27184: LD_EXP 111
27188: AND
27189: IFFALSE 27295
27191: GO 27193
27193: DISABLE
27194: LD_INT 0
27196: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27197: LD_ADDR_VAR 0 1
27201: PUSH
27202: LD_INT 22
27204: PUSH
27205: LD_OWVAR 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 30
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 30
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 69
27250: ST_TO_ADDR
// if not depot then
27251: LD_VAR 0 1
27255: NOT
27256: IFFALSE 27260
// exit ;
27258: GO 27295
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27260: LD_VAR 0 1
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: PPUSH
27269: CALL_OW 250
27273: PPUSH
27274: LD_VAR 0 1
27278: PUSH
27279: LD_INT 1
27281: ARRAY
27282: PPUSH
27283: CALL_OW 251
27287: PPUSH
27288: LD_INT 70
27290: PPUSH
27291: CALL_OW 495
// end ;
27295: PPOPN 1
27297: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27298: LD_EXP 78
27302: PUSH
27303: LD_EXP 112
27307: AND
27308: IFFALSE 27519
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 21
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: ST_TO_ADDR
// if not tmp then
27356: LD_VAR 0 5
27360: NOT
27361: IFFALSE 27365
// exit ;
27363: GO 27519
// for i in tmp do
27365: LD_ADDR_VAR 0 1
27369: PUSH
27370: LD_VAR 0 5
27374: PUSH
27375: FOR_IN
27376: IFFALSE 27517
// begin d := rand ( 0 , 5 ) ;
27378: LD_ADDR_VAR 0 4
27382: PUSH
27383: LD_INT 0
27385: PPUSH
27386: LD_INT 5
27388: PPUSH
27389: CALL_OW 12
27393: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 250
27408: PPUSH
27409: LD_VAR 0 4
27413: PPUSH
27414: LD_INT 3
27416: PPUSH
27417: LD_INT 12
27419: PPUSH
27420: CALL_OW 12
27424: PPUSH
27425: CALL_OW 272
27429: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: LD_VAR 0 1
27439: PPUSH
27440: CALL_OW 251
27444: PPUSH
27445: LD_VAR 0 4
27449: PPUSH
27450: LD_INT 3
27452: PPUSH
27453: LD_INT 12
27455: PPUSH
27456: CALL_OW 12
27460: PPUSH
27461: CALL_OW 273
27465: ST_TO_ADDR
// if ValidHex ( x , y ) then
27466: LD_VAR 0 2
27470: PPUSH
27471: LD_VAR 0 3
27475: PPUSH
27476: CALL_OW 488
27480: IFFALSE 27515
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27482: LD_VAR 0 1
27486: PPUSH
27487: LD_VAR 0 2
27491: PPUSH
27492: LD_VAR 0 3
27496: PPUSH
27497: LD_INT 3
27499: PPUSH
27500: LD_INT 6
27502: PPUSH
27503: CALL_OW 12
27507: PPUSH
27508: LD_INT 1
27510: PPUSH
27511: CALL_OW 483
// end ;
27515: GO 27375
27517: POP
27518: POP
// end ;
27519: PPOPN 5
27521: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27522: LD_EXP 78
27526: PUSH
27527: LD_EXP 113
27531: AND
27532: IFFALSE 27626
27534: GO 27536
27536: DISABLE
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27541: LD_ADDR_VAR 0 2
27545: PUSH
27546: LD_INT 22
27548: PUSH
27549: LD_OWVAR 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 32
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 21
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// if not tmp then
27588: LD_VAR 0 2
27592: NOT
27593: IFFALSE 27597
// exit ;
27595: GO 27626
// for i in tmp do
27597: LD_ADDR_VAR 0 1
27601: PUSH
27602: LD_VAR 0 2
27606: PUSH
27607: FOR_IN
27608: IFFALSE 27624
// SetFuel ( i , 0 ) ;
27610: LD_VAR 0 1
27614: PPUSH
27615: LD_INT 0
27617: PPUSH
27618: CALL_OW 240
27622: GO 27607
27624: POP
27625: POP
// end ;
27626: PPOPN 2
27628: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27629: LD_EXP 78
27633: PUSH
27634: LD_EXP 114
27638: AND
27639: IFFALSE 27705
27641: GO 27643
27643: DISABLE
27644: LD_INT 0
27646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_OWVAR 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 30
27666: PUSH
27667: LD_INT 29
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PPUSH
27678: CALL_OW 69
27682: ST_TO_ADDR
// if not tmp then
27683: LD_VAR 0 1
27687: NOT
27688: IFFALSE 27692
// exit ;
27690: GO 27705
// DestroyUnit ( tmp [ 1 ] ) ;
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PPUSH
27701: CALL_OW 65
// end ;
27705: PPOPN 1
27707: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27708: LD_EXP 78
27712: PUSH
27713: LD_EXP 116
27717: AND
27718: IFFALSE 27847
27720: GO 27722
27722: DISABLE
27723: LD_INT 0
27725: PPUSH
// begin uc_side := 0 ;
27726: LD_ADDR_OWVAR 20
27730: PUSH
27731: LD_INT 0
27733: ST_TO_ADDR
// uc_nation := nation_arabian ;
27734: LD_ADDR_OWVAR 21
27738: PUSH
27739: LD_INT 2
27741: ST_TO_ADDR
// hc_gallery :=  ;
27742: LD_ADDR_OWVAR 33
27746: PUSH
27747: LD_STRING 
27749: ST_TO_ADDR
// hc_name :=  ;
27750: LD_ADDR_OWVAR 26
27754: PUSH
27755: LD_STRING 
27757: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27758: LD_INT 1
27760: PPUSH
27761: LD_INT 11
27763: PPUSH
27764: LD_INT 10
27766: PPUSH
27767: CALL_OW 380
// un := CreateHuman ;
27771: LD_ADDR_VAR 0 1
27775: PUSH
27776: CALL_OW 44
27780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27781: LD_VAR 0 1
27785: PPUSH
27786: LD_INT 1
27788: PPUSH
27789: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27793: LD_INT 35
27795: PPUSH
27796: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27800: LD_VAR 0 1
27804: PPUSH
27805: LD_INT 22
27807: PUSH
27808: LD_OWVAR 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PPUSH
27817: CALL_OW 69
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 74
27831: PPUSH
27832: CALL_OW 115
// until IsDead ( un ) ;
27836: LD_VAR 0 1
27840: PPUSH
27841: CALL_OW 301
27845: IFFALSE 27793
// end ;
27847: PPOPN 1
27849: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27850: LD_EXP 78
27854: PUSH
27855: LD_EXP 118
27859: AND
27860: IFFALSE 27872
27862: GO 27864
27864: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27865: LD_STRING earthquake(getX(game), 0, 32)
27867: PPUSH
27868: CALL_OW 559
27872: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27873: LD_EXP 78
27877: PUSH
27878: LD_EXP 119
27882: AND
27883: IFFALSE 27974
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
// begin enable ;
27891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27892: LD_ADDR_VAR 0 1
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 21
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 33
27921: PUSH
27922: LD_INT 3
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: PPUSH
27934: CALL_OW 69
27938: ST_TO_ADDR
// if not tmp then
27939: LD_VAR 0 1
27943: NOT
27944: IFFALSE 27948
// exit ;
27946: GO 27974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27948: LD_VAR 0 1
27952: PUSH
27953: LD_INT 1
27955: PPUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 12
27965: ARRAY
27966: PPUSH
27967: LD_INT 1
27969: PPUSH
27970: CALL_OW 234
// end ;
27974: PPOPN 1
27976: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27977: LD_EXP 78
27981: PUSH
27982: LD_EXP 120
27986: AND
27987: IFFALSE 28128
27989: GO 27991
27991: DISABLE
27992: LD_INT 0
27994: PPUSH
27995: PPUSH
27996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 22
28004: PUSH
28005: LD_OWVAR 2
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 25
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PPUSH
28028: CALL_OW 69
28032: ST_TO_ADDR
// if not tmp then
28033: LD_VAR 0 3
28037: NOT
28038: IFFALSE 28042
// exit ;
28040: GO 28128
// un := tmp [ rand ( 1 , tmp ) ] ;
28042: LD_ADDR_VAR 0 2
28046: PUSH
28047: LD_VAR 0 3
28051: PUSH
28052: LD_INT 1
28054: PPUSH
28055: LD_VAR 0 3
28059: PPUSH
28060: CALL_OW 12
28064: ARRAY
28065: ST_TO_ADDR
// if Crawls ( un ) then
28066: LD_VAR 0 2
28070: PPUSH
28071: CALL_OW 318
28075: IFFALSE 28086
// ComWalk ( un ) ;
28077: LD_VAR 0 2
28081: PPUSH
28082: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28086: LD_VAR 0 2
28090: PPUSH
28091: LD_INT 9
28093: PPUSH
28094: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28098: LD_INT 28
28100: PPUSH
28101: LD_OWVAR 2
28105: PPUSH
28106: LD_INT 2
28108: PPUSH
28109: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28113: LD_INT 29
28115: PPUSH
28116: LD_OWVAR 2
28120: PPUSH
28121: LD_INT 2
28123: PPUSH
28124: CALL_OW 322
// end ;
28128: PPOPN 3
28130: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28131: LD_EXP 78
28135: PUSH
28136: LD_EXP 121
28140: AND
28141: IFFALSE 28252
28143: GO 28145
28145: DISABLE
28146: LD_INT 0
28148: PPUSH
28149: PPUSH
28150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_INT 22
28158: PUSH
28159: LD_OWVAR 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 25
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PPUSH
28182: CALL_OW 69
28186: ST_TO_ADDR
// if not tmp then
28187: LD_VAR 0 3
28191: NOT
28192: IFFALSE 28196
// exit ;
28194: GO 28252
// un := tmp [ rand ( 1 , tmp ) ] ;
28196: LD_ADDR_VAR 0 2
28200: PUSH
28201: LD_VAR 0 3
28205: PUSH
28206: LD_INT 1
28208: PPUSH
28209: LD_VAR 0 3
28213: PPUSH
28214: CALL_OW 12
28218: ARRAY
28219: ST_TO_ADDR
// if Crawls ( un ) then
28220: LD_VAR 0 2
28224: PPUSH
28225: CALL_OW 318
28229: IFFALSE 28240
// ComWalk ( un ) ;
28231: LD_VAR 0 2
28235: PPUSH
28236: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28240: LD_VAR 0 2
28244: PPUSH
28245: LD_INT 8
28247: PPUSH
28248: CALL_OW 336
// end ;
28252: PPOPN 3
28254: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28255: LD_EXP 78
28259: PUSH
28260: LD_EXP 122
28264: AND
28265: IFFALSE 28409
28267: GO 28269
28269: DISABLE
28270: LD_INT 0
28272: PPUSH
28273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28274: LD_ADDR_VAR 0 2
28278: PUSH
28279: LD_INT 22
28281: PUSH
28282: LD_OWVAR 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 21
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 34
28306: PUSH
28307: LD_INT 12
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 34
28316: PUSH
28317: LD_INT 51
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 34
28326: PUSH
28327: LD_INT 32
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: PPUSH
28345: CALL_OW 69
28349: ST_TO_ADDR
// if not tmp then
28350: LD_VAR 0 2
28354: NOT
28355: IFFALSE 28359
// exit ;
28357: GO 28409
// for i in tmp do
28359: LD_ADDR_VAR 0 1
28363: PUSH
28364: LD_VAR 0 2
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28407
// if GetCargo ( i , mat_artifact ) = 0 then
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_INT 4
28379: PPUSH
28380: CALL_OW 289
28384: PUSH
28385: LD_INT 0
28387: EQUAL
28388: IFFALSE 28405
// SetCargo ( i , mat_siberit , 100 ) ;
28390: LD_VAR 0 1
28394: PPUSH
28395: LD_INT 3
28397: PPUSH
28398: LD_INT 100
28400: PPUSH
28401: CALL_OW 290
28405: GO 28369
28407: POP
28408: POP
// end ;
28409: PPOPN 2
28411: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28412: LD_EXP 78
28416: PUSH
28417: LD_EXP 123
28421: AND
28422: IFFALSE 28605
28424: GO 28426
28426: DISABLE
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_OWVAR 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PPUSH
28448: CALL_OW 69
28452: ST_TO_ADDR
// if not tmp then
28453: LD_VAR 0 2
28457: NOT
28458: IFFALSE 28462
// exit ;
28460: GO 28605
// for i := 1 to 2 do
28462: LD_ADDR_VAR 0 1
28466: PUSH
28467: DOUBLE
28468: LD_INT 1
28470: DEC
28471: ST_TO_ADDR
28472: LD_INT 2
28474: PUSH
28475: FOR_TO
28476: IFFALSE 28603
// begin uc_side := your_side ;
28478: LD_ADDR_OWVAR 20
28482: PUSH
28483: LD_OWVAR 2
28487: ST_TO_ADDR
// uc_nation := nation_american ;
28488: LD_ADDR_OWVAR 21
28492: PUSH
28493: LD_INT 1
28495: ST_TO_ADDR
// vc_chassis := us_morphling ;
28496: LD_ADDR_OWVAR 37
28500: PUSH
28501: LD_INT 5
28503: ST_TO_ADDR
// vc_engine := engine_siberite ;
28504: LD_ADDR_OWVAR 39
28508: PUSH
28509: LD_INT 3
28511: ST_TO_ADDR
// vc_control := control_computer ;
28512: LD_ADDR_OWVAR 38
28516: PUSH
28517: LD_INT 3
28519: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28520: LD_ADDR_OWVAR 40
28524: PUSH
28525: LD_INT 10
28527: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28528: LD_VAR 0 2
28532: PUSH
28533: LD_INT 1
28535: ARRAY
28536: PPUSH
28537: CALL_OW 310
28541: NOT
28542: IFFALSE 28589
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28544: CALL_OW 45
28548: PPUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PPUSH
28558: CALL_OW 250
28562: PPUSH
28563: LD_VAR 0 2
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PPUSH
28572: CALL_OW 251
28576: PPUSH
28577: LD_INT 12
28579: PPUSH
28580: LD_INT 1
28582: PPUSH
28583: CALL_OW 50
28587: GO 28601
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28589: CALL_OW 45
28593: PPUSH
28594: LD_INT 1
28596: PPUSH
28597: CALL_OW 51
// end ;
28601: GO 28475
28603: POP
28604: POP
// end ;
28605: PPOPN 2
28607: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28608: LD_EXP 78
28612: PUSH
28613: LD_EXP 124
28617: AND
28618: IFFALSE 28840
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
28627: PPUSH
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28631: LD_ADDR_VAR 0 6
28635: PUSH
28636: LD_INT 22
28638: PUSH
28639: LD_OWVAR 2
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 21
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: LD_INT 23
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: PPUSH
28680: CALL_OW 69
28684: ST_TO_ADDR
// if not tmp then
28685: LD_VAR 0 6
28689: NOT
28690: IFFALSE 28694
// exit ;
28692: GO 28840
// s1 := rand ( 1 , 4 ) ;
28694: LD_ADDR_VAR 0 2
28698: PUSH
28699: LD_INT 1
28701: PPUSH
28702: LD_INT 4
28704: PPUSH
28705: CALL_OW 12
28709: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28710: LD_ADDR_VAR 0 4
28714: PUSH
28715: LD_VAR 0 6
28719: PUSH
28720: LD_INT 1
28722: ARRAY
28723: PPUSH
28724: LD_VAR 0 2
28728: PPUSH
28729: CALL_OW 259
28733: ST_TO_ADDR
// if s1 = 1 then
28734: LD_VAR 0 2
28738: PUSH
28739: LD_INT 1
28741: EQUAL
28742: IFFALSE 28762
// s2 := rand ( 2 , 4 ) else
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 2
28751: PPUSH
28752: LD_INT 4
28754: PPUSH
28755: CALL_OW 12
28759: ST_TO_ADDR
28760: GO 28770
// s2 := 1 ;
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 1
28769: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28770: LD_ADDR_VAR 0 5
28774: PUSH
28775: LD_VAR 0 6
28779: PUSH
28780: LD_INT 1
28782: ARRAY
28783: PPUSH
28784: LD_VAR 0 3
28788: PPUSH
28789: CALL_OW 259
28793: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28794: LD_VAR 0 6
28798: PUSH
28799: LD_INT 1
28801: ARRAY
28802: PPUSH
28803: LD_VAR 0 2
28807: PPUSH
28808: LD_VAR 0 5
28812: PPUSH
28813: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28817: LD_VAR 0 6
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: PPUSH
28826: LD_VAR 0 3
28830: PPUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: CALL_OW 237
// end ;
28840: PPOPN 6
28842: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28843: LD_EXP 78
28847: PUSH
28848: LD_EXP 125
28852: AND
28853: IFFALSE 28932
28855: GO 28857
28857: DISABLE
28858: LD_INT 0
28860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28861: LD_ADDR_VAR 0 1
28865: PUSH
28866: LD_INT 22
28868: PUSH
28869: LD_OWVAR 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 69
28896: ST_TO_ADDR
// if not tmp then
28897: LD_VAR 0 1
28901: NOT
28902: IFFALSE 28906
// exit ;
28904: GO 28932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28906: LD_VAR 0 1
28910: PUSH
28911: LD_INT 1
28913: PPUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 12
28923: ARRAY
28924: PPUSH
28925: LD_INT 1
28927: PPUSH
28928: CALL_OW 234
// end ;
28932: PPOPN 1
28934: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28935: LD_EXP 78
28939: PUSH
28940: LD_EXP 126
28944: AND
28945: IFFALSE 29057
28947: GO 28949
28949: DISABLE
28950: LD_INT 0
28952: PPUSH
28953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28954: LD_ADDR_VAR 0 2
28958: PUSH
28959: LD_INT 22
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 30
28976: PUSH
28977: LD_INT 27
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 30
28986: PUSH
28987: LD_INT 26
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 30
28996: PUSH
28997: LD_INT 28
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: CALL_OW 69
29018: ST_TO_ADDR
// if not tmp then
29019: LD_VAR 0 2
29023: NOT
29024: IFFALSE 29028
// exit ;
29026: GO 29057
// for i in tmp do
29028: LD_ADDR_VAR 0 1
29032: PUSH
29033: LD_VAR 0 2
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29055
// SetLives ( i , 1 ) ;
29041: LD_VAR 0 1
29045: PPUSH
29046: LD_INT 1
29048: PPUSH
29049: CALL_OW 234
29053: GO 29038
29055: POP
29056: POP
// end ;
29057: PPOPN 2
29059: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29060: LD_EXP 78
29064: PUSH
29065: LD_EXP 127
29069: AND
29070: IFFALSE 29357
29072: GO 29074
29074: DISABLE
29075: LD_INT 0
29077: PPUSH
29078: PPUSH
29079: PPUSH
// begin i := rand ( 1 , 7 ) ;
29080: LD_ADDR_VAR 0 1
29084: PUSH
29085: LD_INT 1
29087: PPUSH
29088: LD_INT 7
29090: PPUSH
29091: CALL_OW 12
29095: ST_TO_ADDR
// case i of 1 :
29096: LD_VAR 0 1
29100: PUSH
29101: LD_INT 1
29103: DOUBLE
29104: EQUAL
29105: IFTRUE 29109
29107: GO 29119
29109: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29110: LD_STRING earthquake(getX(game), 0, 32)
29112: PPUSH
29113: CALL_OW 559
29117: GO 29357
29119: LD_INT 2
29121: DOUBLE
29122: EQUAL
29123: IFTRUE 29127
29125: GO 29141
29127: POP
// begin ToLua ( displayStucuk(); ) ;
29128: LD_STRING displayStucuk();
29130: PPUSH
29131: CALL_OW 559
// ResetFog ;
29135: CALL_OW 335
// end ; 3 :
29139: GO 29357
29141: LD_INT 3
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29253
29149: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29150: LD_ADDR_VAR 0 2
29154: PUSH
29155: LD_INT 22
29157: PUSH
29158: LD_OWVAR 2
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 25
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PPUSH
29181: CALL_OW 69
29185: ST_TO_ADDR
// if not tmp then
29186: LD_VAR 0 2
29190: NOT
29191: IFFALSE 29195
// exit ;
29193: GO 29357
// un := tmp [ rand ( 1 , tmp ) ] ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_VAR 0 2
29204: PUSH
29205: LD_INT 1
29207: PPUSH
29208: LD_VAR 0 2
29212: PPUSH
29213: CALL_OW 12
29217: ARRAY
29218: ST_TO_ADDR
// if Crawls ( un ) then
29219: LD_VAR 0 3
29223: PPUSH
29224: CALL_OW 318
29228: IFFALSE 29239
// ComWalk ( un ) ;
29230: LD_VAR 0 3
29234: PPUSH
29235: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29239: LD_VAR 0 3
29243: PPUSH
29244: LD_INT 8
29246: PPUSH
29247: CALL_OW 336
// end ; 4 :
29251: GO 29357
29253: LD_INT 4
29255: DOUBLE
29256: EQUAL
29257: IFTRUE 29261
29259: GO 29335
29261: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29262: LD_ADDR_VAR 0 2
29266: PUSH
29267: LD_INT 22
29269: PUSH
29270: LD_OWVAR 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 30
29281: PUSH
29282: LD_INT 29
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PPUSH
29293: CALL_OW 69
29297: ST_TO_ADDR
// if not tmp then
29298: LD_VAR 0 2
29302: NOT
29303: IFFALSE 29307
// exit ;
29305: GO 29357
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29307: LD_VAR 0 2
29311: PUSH
29312: LD_INT 1
29314: ARRAY
29315: PPUSH
29316: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29320: LD_VAR 0 2
29324: PUSH
29325: LD_INT 1
29327: ARRAY
29328: PPUSH
29329: CALL_OW 65
// end ; 5 .. 7 :
29333: GO 29357
29335: LD_INT 5
29337: DOUBLE
29338: GREATEREQUAL
29339: IFFALSE 29347
29341: LD_INT 7
29343: DOUBLE
29344: LESSEQUAL
29345: IFTRUE 29349
29347: GO 29356
29349: POP
// StreamSibBomb ; end ;
29350: CALL 25594 0 0
29354: GO 29357
29356: POP
// end ;
29357: PPOPN 3
29359: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29360: LD_EXP 78
29364: PUSH
29365: LD_EXP 128
29369: AND
29370: IFFALSE 29526
29372: GO 29374
29374: DISABLE
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
29379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_INT 81
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: LD_INT 21
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 21
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 69
29433: ST_TO_ADDR
// if not tmp then
29434: LD_VAR 0 2
29438: NOT
29439: IFFALSE 29443
// exit ;
29441: GO 29526
// p := 0 ;
29443: LD_ADDR_VAR 0 3
29447: PUSH
29448: LD_INT 0
29450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29451: LD_INT 35
29453: PPUSH
29454: CALL_OW 67
// p := p + 1 ;
29458: LD_ADDR_VAR 0 3
29462: PUSH
29463: LD_VAR 0 3
29467: PUSH
29468: LD_INT 1
29470: PLUS
29471: ST_TO_ADDR
// for i in tmp do
29472: LD_ADDR_VAR 0 1
29476: PUSH
29477: LD_VAR 0 2
29481: PUSH
29482: FOR_IN
29483: IFFALSE 29514
// if GetLives ( i ) < 1000 then
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 256
29494: PUSH
29495: LD_INT 1000
29497: LESS
29498: IFFALSE 29512
// SetLives ( i , 1000 ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 1000
29507: PPUSH
29508: CALL_OW 234
29512: GO 29482
29514: POP
29515: POP
// until p > 20 ;
29516: LD_VAR 0 3
29520: PUSH
29521: LD_INT 20
29523: GREATER
29524: IFFALSE 29451
// end ;
29526: PPOPN 3
29528: END
// every 0 0$1 trigger StreamModeActive and sTime do
29529: LD_EXP 78
29533: PUSH
29534: LD_EXP 129
29538: AND
29539: IFFALSE 29574
29541: GO 29543
29543: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29544: LD_INT 28
29546: PPUSH
29547: LD_OWVAR 2
29551: PPUSH
29552: LD_INT 2
29554: PPUSH
29555: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29559: LD_INT 30
29561: PPUSH
29562: LD_OWVAR 2
29566: PPUSH
29567: LD_INT 2
29569: PPUSH
29570: CALL_OW 322
// end ;
29574: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29575: LD_EXP 78
29579: PUSH
29580: LD_EXP 130
29584: AND
29585: IFFALSE 29706
29587: GO 29589
29589: DISABLE
29590: LD_INT 0
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29594: LD_ADDR_VAR 0 2
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 23
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 2
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29706
// for i in tmp do
29657: LD_ADDR_VAR 0 1
29661: PUSH
29662: LD_VAR 0 2
29666: PUSH
29667: FOR_IN
29668: IFFALSE 29704
// begin if Crawls ( i ) then
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 318
29679: IFFALSE 29690
// ComWalk ( i ) ;
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 138
// SetClass ( i , 2 ) ;
29690: LD_VAR 0 1
29694: PPUSH
29695: LD_INT 2
29697: PPUSH
29698: CALL_OW 336
// end ;
29702: GO 29667
29704: POP
29705: POP
// end ;
29706: PPOPN 2
29708: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29709: LD_EXP 78
29713: PUSH
29714: LD_EXP 131
29718: AND
29719: IFFALSE 30007
29721: GO 29723
29723: DISABLE
29724: LD_INT 0
29726: PPUSH
29727: PPUSH
29728: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29729: LD_OWVAR 2
29733: PPUSH
29734: LD_INT 9
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: LD_INT 1
29742: PPUSH
29743: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29747: LD_INT 9
29749: PPUSH
29750: LD_OWVAR 2
29754: PPUSH
29755: CALL_OW 343
// uc_side := 9 ;
29759: LD_ADDR_OWVAR 20
29763: PUSH
29764: LD_INT 9
29766: ST_TO_ADDR
// uc_nation := 2 ;
29767: LD_ADDR_OWVAR 21
29771: PUSH
29772: LD_INT 2
29774: ST_TO_ADDR
// hc_name := Dark Warrior ;
29775: LD_ADDR_OWVAR 26
29779: PUSH
29780: LD_STRING Dark Warrior
29782: ST_TO_ADDR
// hc_gallery :=  ;
29783: LD_ADDR_OWVAR 33
29787: PUSH
29788: LD_STRING 
29790: ST_TO_ADDR
// hc_noskilllimit := true ;
29791: LD_ADDR_OWVAR 76
29795: PUSH
29796: LD_INT 1
29798: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29799: LD_ADDR_OWVAR 31
29803: PUSH
29804: LD_INT 30
29806: PUSH
29807: LD_INT 30
29809: PUSH
29810: LD_INT 30
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
// un := CreateHuman ;
29822: LD_ADDR_VAR 0 3
29826: PUSH
29827: CALL_OW 44
29831: ST_TO_ADDR
// hc_noskilllimit := false ;
29832: LD_ADDR_OWVAR 76
29836: PUSH
29837: LD_INT 0
29839: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29840: LD_VAR 0 3
29844: PPUSH
29845: LD_INT 1
29847: PPUSH
29848: CALL_OW 51
// ToLua ( playRanger() ) ;
29852: LD_STRING playRanger()
29854: PPUSH
29855: CALL_OW 559
// p := 0 ;
29859: LD_ADDR_VAR 0 2
29863: PUSH
29864: LD_INT 0
29866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29867: LD_INT 35
29869: PPUSH
29870: CALL_OW 67
// p := p + 1 ;
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_VAR 0 2
29883: PUSH
29884: LD_INT 1
29886: PLUS
29887: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29888: LD_VAR 0 3
29892: PPUSH
29893: CALL_OW 256
29897: PUSH
29898: LD_INT 1000
29900: LESS
29901: IFFALSE 29915
// SetLives ( un , 1000 ) ;
29903: LD_VAR 0 3
29907: PPUSH
29908: LD_INT 1000
29910: PPUSH
29911: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29915: LD_VAR 0 3
29919: PPUSH
29920: LD_INT 81
29922: PUSH
29923: LD_OWVAR 2
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 91
29934: PUSH
29935: LD_VAR 0 3
29939: PUSH
29940: LD_INT 30
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 69
29956: PPUSH
29957: LD_VAR 0 3
29961: PPUSH
29962: CALL_OW 74
29966: PPUSH
29967: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29971: LD_VAR 0 2
29975: PUSH
29976: LD_INT 80
29978: GREATER
29979: PUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: CALL_OW 301
29989: OR
29990: IFFALSE 29867
// if un then
29992: LD_VAR 0 3
29996: IFFALSE 30007
// RemoveUnit ( un ) ;
29998: LD_VAR 0 3
30002: PPUSH
30003: CALL_OW 64
// end ;
30007: PPOPN 3
30009: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30010: LD_EXP 132
30014: IFFALSE 30130
30016: GO 30018
30018: DISABLE
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
30023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30024: LD_ADDR_VAR 0 2
30028: PUSH
30029: LD_INT 81
30031: PUSH
30032: LD_OWVAR 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 21
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PPUSH
30055: CALL_OW 69
30059: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30060: LD_STRING playComputer()
30062: PPUSH
30063: CALL_OW 559
// if not tmp then
30067: LD_VAR 0 2
30071: NOT
30072: IFFALSE 30076
// exit ;
30074: GO 30130
// for i in tmp do
30076: LD_ADDR_VAR 0 1
30080: PUSH
30081: LD_VAR 0 2
30085: PUSH
30086: FOR_IN
30087: IFFALSE 30128
// for j := 1 to 4 do
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: DOUBLE
30095: LD_INT 1
30097: DEC
30098: ST_TO_ADDR
30099: LD_INT 4
30101: PUSH
30102: FOR_TO
30103: IFFALSE 30124
// SetSkill ( i , j , 10 ) ;
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_VAR 0 3
30114: PPUSH
30115: LD_INT 10
30117: PPUSH
30118: CALL_OW 237
30122: GO 30102
30124: POP
30125: POP
30126: GO 30086
30128: POP
30129: POP
// end ;
30130: PPOPN 3
30132: END
// every 0 0$1 trigger s30 do var i , tmp ;
30133: LD_EXP 133
30137: IFFALSE 30206
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30146: LD_ADDR_VAR 0 2
30150: PUSH
30151: LD_INT 22
30153: PUSH
30154: LD_OWVAR 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PPUSH
30163: CALL_OW 69
30167: ST_TO_ADDR
// if not tmp then
30168: LD_VAR 0 2
30172: NOT
30173: IFFALSE 30177
// exit ;
30175: GO 30206
// for i in tmp do
30177: LD_ADDR_VAR 0 1
30181: PUSH
30182: LD_VAR 0 2
30186: PUSH
30187: FOR_IN
30188: IFFALSE 30204
// SetLives ( i , 300 ) ;
30190: LD_VAR 0 1
30194: PPUSH
30195: LD_INT 300
30197: PPUSH
30198: CALL_OW 234
30202: GO 30187
30204: POP
30205: POP
// end ;
30206: PPOPN 2
30208: END
// every 0 0$1 trigger s60 do var i , tmp ;
30209: LD_EXP 134
30213: IFFALSE 30282
30215: GO 30217
30217: DISABLE
30218: LD_INT 0
30220: PPUSH
30221: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_INT 22
30229: PUSH
30230: LD_OWVAR 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PPUSH
30239: CALL_OW 69
30243: ST_TO_ADDR
// if not tmp then
30244: LD_VAR 0 2
30248: NOT
30249: IFFALSE 30253
// exit ;
30251: GO 30282
// for i in tmp do
30253: LD_ADDR_VAR 0 1
30257: PUSH
30258: LD_VAR 0 2
30262: PUSH
30263: FOR_IN
30264: IFFALSE 30280
// SetLives ( i , 600 ) ;
30266: LD_VAR 0 1
30270: PPUSH
30271: LD_INT 600
30273: PPUSH
30274: CALL_OW 234
30278: GO 30263
30280: POP
30281: POP
// end ;
30282: PPOPN 2
30284: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30285: LD_INT 0
30287: PPUSH
// case cmd of 301 :
30288: LD_VAR 0 1
30292: PUSH
30293: LD_INT 301
30295: DOUBLE
30296: EQUAL
30297: IFTRUE 30301
30299: GO 30333
30301: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30302: LD_VAR 0 6
30306: PPUSH
30307: LD_VAR 0 7
30311: PPUSH
30312: LD_VAR 0 8
30316: PPUSH
30317: LD_VAR 0 4
30321: PPUSH
30322: LD_VAR 0 5
30326: PPUSH
30327: CALL 31534 0 5
30331: GO 30454
30333: LD_INT 302
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30378
30341: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30342: LD_VAR 0 6
30346: PPUSH
30347: LD_VAR 0 7
30351: PPUSH
30352: LD_VAR 0 8
30356: PPUSH
30357: LD_VAR 0 9
30361: PPUSH
30362: LD_VAR 0 4
30366: PPUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: CALL 31625 0 6
30376: GO 30454
30378: LD_INT 303
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30423
30386: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30387: LD_VAR 0 6
30391: PPUSH
30392: LD_VAR 0 7
30396: PPUSH
30397: LD_VAR 0 8
30401: PPUSH
30402: LD_VAR 0 9
30406: PPUSH
30407: LD_VAR 0 4
30411: PPUSH
30412: LD_VAR 0 5
30416: PPUSH
30417: CALL 30459 0 6
30421: GO 30454
30423: LD_INT 304
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30453
30431: POP
// hHackTeleport ( unit , x , y ) ; end ;
30432: LD_VAR 0 2
30436: PPUSH
30437: LD_VAR 0 4
30441: PPUSH
30442: LD_VAR 0 5
30446: PPUSH
30447: CALL 32218 0 3
30451: GO 30454
30453: POP
// end ;
30454: LD_VAR 0 12
30458: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30459: LD_INT 0
30461: PPUSH
30462: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30463: LD_VAR 0 1
30467: PUSH
30468: LD_INT 1
30470: LESS
30471: PUSH
30472: LD_VAR 0 1
30476: PUSH
30477: LD_INT 3
30479: GREATER
30480: OR
30481: PUSH
30482: LD_VAR 0 5
30486: PPUSH
30487: LD_VAR 0 6
30491: PPUSH
30492: CALL_OW 428
30496: OR
30497: IFFALSE 30501
// exit ;
30499: GO 31221
// uc_side := your_side ;
30501: LD_ADDR_OWVAR 20
30505: PUSH
30506: LD_OWVAR 2
30510: ST_TO_ADDR
// uc_nation := nation ;
30511: LD_ADDR_OWVAR 21
30515: PUSH
30516: LD_VAR 0 1
30520: ST_TO_ADDR
// bc_level = 1 ;
30521: LD_ADDR_OWVAR 43
30525: PUSH
30526: LD_INT 1
30528: ST_TO_ADDR
// case btype of 1 :
30529: LD_VAR 0 2
30533: PUSH
30534: LD_INT 1
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30553
30542: POP
// bc_type := b_depot ; 2 :
30543: LD_ADDR_OWVAR 42
30547: PUSH
30548: LD_INT 0
30550: ST_TO_ADDR
30551: GO 31165
30553: LD_INT 2
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30572
30561: POP
// bc_type := b_warehouse ; 3 :
30562: LD_ADDR_OWVAR 42
30566: PUSH
30567: LD_INT 1
30569: ST_TO_ADDR
30570: GO 31165
30572: LD_INT 3
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30591
30580: POP
// bc_type := b_lab ; 4 .. 9 :
30581: LD_ADDR_OWVAR 42
30585: PUSH
30586: LD_INT 6
30588: ST_TO_ADDR
30589: GO 31165
30591: LD_INT 4
30593: DOUBLE
30594: GREATEREQUAL
30595: IFFALSE 30603
30597: LD_INT 9
30599: DOUBLE
30600: LESSEQUAL
30601: IFTRUE 30605
30603: GO 30657
30605: POP
// begin bc_type := b_lab_half ;
30606: LD_ADDR_OWVAR 42
30610: PUSH
30611: LD_INT 7
30613: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30614: LD_ADDR_OWVAR 44
30618: PUSH
30619: LD_INT 10
30621: PUSH
30622: LD_INT 11
30624: PUSH
30625: LD_INT 12
30627: PUSH
30628: LD_INT 15
30630: PUSH
30631: LD_INT 14
30633: PUSH
30634: LD_INT 13
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: LD_VAR 0 2
30649: PUSH
30650: LD_INT 3
30652: MINUS
30653: ARRAY
30654: ST_TO_ADDR
// end ; 10 .. 13 :
30655: GO 31165
30657: LD_INT 10
30659: DOUBLE
30660: GREATEREQUAL
30661: IFFALSE 30669
30663: LD_INT 13
30665: DOUBLE
30666: LESSEQUAL
30667: IFTRUE 30671
30669: GO 30748
30671: POP
// begin bc_type := b_lab_full ;
30672: LD_ADDR_OWVAR 42
30676: PUSH
30677: LD_INT 8
30679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30680: LD_ADDR_OWVAR 44
30684: PUSH
30685: LD_INT 10
30687: PUSH
30688: LD_INT 12
30690: PUSH
30691: LD_INT 14
30693: PUSH
30694: LD_INT 13
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: PUSH
30703: LD_VAR 0 2
30707: PUSH
30708: LD_INT 9
30710: MINUS
30711: ARRAY
30712: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30713: LD_ADDR_OWVAR 45
30717: PUSH
30718: LD_INT 11
30720: PUSH
30721: LD_INT 15
30723: PUSH
30724: LD_INT 12
30726: PUSH
30727: LD_INT 15
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: PUSH
30736: LD_VAR 0 2
30740: PUSH
30741: LD_INT 9
30743: MINUS
30744: ARRAY
30745: ST_TO_ADDR
// end ; 14 :
30746: GO 31165
30748: LD_INT 14
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30767
30756: POP
// bc_type := b_workshop ; 15 :
30757: LD_ADDR_OWVAR 42
30761: PUSH
30762: LD_INT 2
30764: ST_TO_ADDR
30765: GO 31165
30767: LD_INT 15
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30786
30775: POP
// bc_type := b_factory ; 16 :
30776: LD_ADDR_OWVAR 42
30780: PUSH
30781: LD_INT 3
30783: ST_TO_ADDR
30784: GO 31165
30786: LD_INT 16
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30805
30794: POP
// bc_type := b_ext_gun ; 17 :
30795: LD_ADDR_OWVAR 42
30799: PUSH
30800: LD_INT 17
30802: ST_TO_ADDR
30803: GO 31165
30805: LD_INT 17
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30841
30813: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30814: LD_ADDR_OWVAR 42
30818: PUSH
30819: LD_INT 19
30821: PUSH
30822: LD_INT 23
30824: PUSH
30825: LD_INT 19
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: PUSH
30833: LD_VAR 0 1
30837: ARRAY
30838: ST_TO_ADDR
30839: GO 31165
30841: LD_INT 18
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30860
30849: POP
// bc_type := b_ext_radar ; 19 :
30850: LD_ADDR_OWVAR 42
30854: PUSH
30855: LD_INT 20
30857: ST_TO_ADDR
30858: GO 31165
30860: LD_INT 19
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30879
30868: POP
// bc_type := b_ext_radio ; 20 :
30869: LD_ADDR_OWVAR 42
30873: PUSH
30874: LD_INT 22
30876: ST_TO_ADDR
30877: GO 31165
30879: LD_INT 20
30881: DOUBLE
30882: EQUAL
30883: IFTRUE 30887
30885: GO 30898
30887: POP
// bc_type := b_ext_siberium ; 21 :
30888: LD_ADDR_OWVAR 42
30892: PUSH
30893: LD_INT 21
30895: ST_TO_ADDR
30896: GO 31165
30898: LD_INT 21
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30917
30906: POP
// bc_type := b_ext_computer ; 22 :
30907: LD_ADDR_OWVAR 42
30911: PUSH
30912: LD_INT 24
30914: ST_TO_ADDR
30915: GO 31165
30917: LD_INT 22
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30936
30925: POP
// bc_type := b_ext_track ; 23 :
30926: LD_ADDR_OWVAR 42
30930: PUSH
30931: LD_INT 16
30933: ST_TO_ADDR
30934: GO 31165
30936: LD_INT 23
30938: DOUBLE
30939: EQUAL
30940: IFTRUE 30944
30942: GO 30955
30944: POP
// bc_type := b_ext_laser ; 24 :
30945: LD_ADDR_OWVAR 42
30949: PUSH
30950: LD_INT 25
30952: ST_TO_ADDR
30953: GO 31165
30955: LD_INT 24
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30974
30963: POP
// bc_type := b_control_tower ; 25 :
30964: LD_ADDR_OWVAR 42
30968: PUSH
30969: LD_INT 36
30971: ST_TO_ADDR
30972: GO 31165
30974: LD_INT 25
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 30993
30982: POP
// bc_type := b_breastwork ; 26 :
30983: LD_ADDR_OWVAR 42
30987: PUSH
30988: LD_INT 31
30990: ST_TO_ADDR
30991: GO 31165
30993: LD_INT 26
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31001
30999: GO 31012
31001: POP
// bc_type := b_bunker ; 27 :
31002: LD_ADDR_OWVAR 42
31006: PUSH
31007: LD_INT 32
31009: ST_TO_ADDR
31010: GO 31165
31012: LD_INT 27
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31031
31020: POP
// bc_type := b_turret ; 28 :
31021: LD_ADDR_OWVAR 42
31025: PUSH
31026: LD_INT 33
31028: ST_TO_ADDR
31029: GO 31165
31031: LD_INT 28
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31039
31037: GO 31050
31039: POP
// bc_type := b_armoury ; 29 :
31040: LD_ADDR_OWVAR 42
31044: PUSH
31045: LD_INT 4
31047: ST_TO_ADDR
31048: GO 31165
31050: LD_INT 29
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31069
31058: POP
// bc_type := b_barracks ; 30 :
31059: LD_ADDR_OWVAR 42
31063: PUSH
31064: LD_INT 5
31066: ST_TO_ADDR
31067: GO 31165
31069: LD_INT 30
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31088
31077: POP
// bc_type := b_solar_power ; 31 :
31078: LD_ADDR_OWVAR 42
31082: PUSH
31083: LD_INT 27
31085: ST_TO_ADDR
31086: GO 31165
31088: LD_INT 31
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31107
31096: POP
// bc_type := b_oil_power ; 32 :
31097: LD_ADDR_OWVAR 42
31101: PUSH
31102: LD_INT 26
31104: ST_TO_ADDR
31105: GO 31165
31107: LD_INT 32
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31126
31115: POP
// bc_type := b_siberite_power ; 33 :
31116: LD_ADDR_OWVAR 42
31120: PUSH
31121: LD_INT 28
31123: ST_TO_ADDR
31124: GO 31165
31126: LD_INT 33
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31145
31134: POP
// bc_type := b_oil_mine ; 34 :
31135: LD_ADDR_OWVAR 42
31139: PUSH
31140: LD_INT 29
31142: ST_TO_ADDR
31143: GO 31165
31145: LD_INT 34
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31164
31153: POP
// bc_type := b_siberite_mine ; end ;
31154: LD_ADDR_OWVAR 42
31158: PUSH
31159: LD_INT 30
31161: ST_TO_ADDR
31162: GO 31165
31164: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31165: LD_ADDR_VAR 0 8
31169: PUSH
31170: LD_VAR 0 5
31174: PPUSH
31175: LD_VAR 0 6
31179: PPUSH
31180: LD_VAR 0 3
31184: PPUSH
31185: CALL_OW 47
31189: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31190: LD_OWVAR 42
31194: PUSH
31195: LD_INT 32
31197: PUSH
31198: LD_INT 33
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: IN
31205: IFFALSE 31221
// PlaceWeaponTurret ( b , weapon ) ;
31207: LD_VAR 0 8
31211: PPUSH
31212: LD_VAR 0 4
31216: PPUSH
31217: CALL_OW 431
// end ;
31221: LD_VAR 0 7
31225: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
31230: PPUSH
31231: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: LD_INT 22
31239: PUSH
31240: LD_OWVAR 2
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 30
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 30
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PPUSH
31281: CALL_OW 69
31285: ST_TO_ADDR
// if not tmp then
31286: LD_VAR 0 4
31290: NOT
31291: IFFALSE 31295
// exit ;
31293: GO 31354
// for i in tmp do
31295: LD_ADDR_VAR 0 2
31299: PUSH
31300: LD_VAR 0 4
31304: PUSH
31305: FOR_IN
31306: IFFALSE 31352
// for j = 1 to 3 do
31308: LD_ADDR_VAR 0 3
31312: PUSH
31313: DOUBLE
31314: LD_INT 1
31316: DEC
31317: ST_TO_ADDR
31318: LD_INT 3
31320: PUSH
31321: FOR_TO
31322: IFFALSE 31348
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31324: LD_VAR 0 2
31328: PPUSH
31329: CALL_OW 274
31333: PPUSH
31334: LD_VAR 0 3
31338: PPUSH
31339: LD_INT 99999
31341: PPUSH
31342: CALL_OW 277
31346: GO 31321
31348: POP
31349: POP
31350: GO 31305
31352: POP
31353: POP
// end ;
31354: LD_VAR 0 1
31358: RET
// export function hHackSetLevel10 ; var i , j ; begin
31359: LD_INT 0
31361: PPUSH
31362: PPUSH
31363: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31364: LD_ADDR_VAR 0 2
31368: PUSH
31369: LD_INT 21
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PPUSH
31379: CALL_OW 69
31383: PUSH
31384: FOR_IN
31385: IFFALSE 31437
// if IsSelected ( i ) then
31387: LD_VAR 0 2
31391: PPUSH
31392: CALL_OW 306
31396: IFFALSE 31435
// begin for j := 1 to 4 do
31398: LD_ADDR_VAR 0 3
31402: PUSH
31403: DOUBLE
31404: LD_INT 1
31406: DEC
31407: ST_TO_ADDR
31408: LD_INT 4
31410: PUSH
31411: FOR_TO
31412: IFFALSE 31433
// SetSkill ( i , j , 10 ) ;
31414: LD_VAR 0 2
31418: PPUSH
31419: LD_VAR 0 3
31423: PPUSH
31424: LD_INT 10
31426: PPUSH
31427: CALL_OW 237
31431: GO 31411
31433: POP
31434: POP
// end ;
31435: GO 31384
31437: POP
31438: POP
// end ;
31439: LD_VAR 0 1
31443: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31444: LD_INT 0
31446: PPUSH
31447: PPUSH
31448: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_OWVAR 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 21
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: PUSH
31485: FOR_IN
31486: IFFALSE 31527
// begin for j := 1 to 4 do
31488: LD_ADDR_VAR 0 3
31492: PUSH
31493: DOUBLE
31494: LD_INT 1
31496: DEC
31497: ST_TO_ADDR
31498: LD_INT 4
31500: PUSH
31501: FOR_TO
31502: IFFALSE 31523
// SetSkill ( i , j , 10 ) ;
31504: LD_VAR 0 2
31508: PPUSH
31509: LD_VAR 0 3
31513: PPUSH
31514: LD_INT 10
31516: PPUSH
31517: CALL_OW 237
31521: GO 31501
31523: POP
31524: POP
// end ;
31525: GO 31485
31527: POP
31528: POP
// end ;
31529: LD_VAR 0 1
31533: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31534: LD_INT 0
31536: PPUSH
// uc_side := your_side ;
31537: LD_ADDR_OWVAR 20
31541: PUSH
31542: LD_OWVAR 2
31546: ST_TO_ADDR
// uc_nation := nation ;
31547: LD_ADDR_OWVAR 21
31551: PUSH
31552: LD_VAR 0 1
31556: ST_TO_ADDR
// InitHc ;
31557: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31561: LD_INT 0
31563: PPUSH
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 3
31573: PPUSH
31574: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31578: LD_VAR 0 4
31582: PPUSH
31583: LD_VAR 0 5
31587: PPUSH
31588: CALL_OW 428
31592: PUSH
31593: LD_INT 0
31595: EQUAL
31596: IFFALSE 31620
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31598: CALL_OW 44
31602: PPUSH
31603: LD_VAR 0 4
31607: PPUSH
31608: LD_VAR 0 5
31612: PPUSH
31613: LD_INT 1
31615: PPUSH
31616: CALL_OW 48
// end ;
31620: LD_VAR 0 6
31624: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31625: LD_INT 0
31627: PPUSH
31628: PPUSH
// uc_side := your_side ;
31629: LD_ADDR_OWVAR 20
31633: PUSH
31634: LD_OWVAR 2
31638: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31639: LD_VAR 0 1
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 4
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: IN
31666: IFFALSE 31678
// uc_nation := nation_american else
31668: LD_ADDR_OWVAR 21
31672: PUSH
31673: LD_INT 1
31675: ST_TO_ADDR
31676: GO 31721
// if chassis in [ 11 , 12 , 13 , 14 ] then
31678: LD_VAR 0 1
31682: PUSH
31683: LD_INT 11
31685: PUSH
31686: LD_INT 12
31688: PUSH
31689: LD_INT 13
31691: PUSH
31692: LD_INT 14
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: IN
31701: IFFALSE 31713
// uc_nation := nation_arabian else
31703: LD_ADDR_OWVAR 21
31707: PUSH
31708: LD_INT 2
31710: ST_TO_ADDR
31711: GO 31721
// uc_nation := nation_russian ;
31713: LD_ADDR_OWVAR 21
31717: PUSH
31718: LD_INT 3
31720: ST_TO_ADDR
// vc_chassis := chassis ;
31721: LD_ADDR_OWVAR 37
31725: PUSH
31726: LD_VAR 0 1
31730: ST_TO_ADDR
// vc_engine := engine ;
31731: LD_ADDR_OWVAR 39
31735: PUSH
31736: LD_VAR 0 2
31740: ST_TO_ADDR
// vc_control := control ;
31741: LD_ADDR_OWVAR 38
31745: PUSH
31746: LD_VAR 0 3
31750: ST_TO_ADDR
// vc_weapon := weapon ;
31751: LD_ADDR_OWVAR 40
31755: PUSH
31756: LD_VAR 0 4
31760: ST_TO_ADDR
// un := CreateVehicle ;
31761: LD_ADDR_VAR 0 8
31765: PUSH
31766: CALL_OW 45
31770: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31771: LD_VAR 0 8
31775: PPUSH
31776: LD_INT 0
31778: PPUSH
31779: LD_INT 5
31781: PPUSH
31782: CALL_OW 12
31786: PPUSH
31787: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31791: LD_VAR 0 8
31795: PPUSH
31796: LD_VAR 0 5
31800: PPUSH
31801: LD_VAR 0 6
31805: PPUSH
31806: LD_INT 1
31808: PPUSH
31809: CALL_OW 48
// end ;
31813: LD_VAR 0 7
31817: RET
// export hInvincible ; every 1 do
31818: GO 31820
31820: DISABLE
// hInvincible := [ ] ;
31821: LD_ADDR_EXP 135
31825: PUSH
31826: EMPTY
31827: ST_TO_ADDR
31828: END
// every 10 do var i ;
31829: GO 31831
31831: DISABLE
31832: LD_INT 0
31834: PPUSH
// begin enable ;
31835: ENABLE
// if not hInvincible then
31836: LD_EXP 135
31840: NOT
31841: IFFALSE 31845
// exit ;
31843: GO 31889
// for i in hInvincible do
31845: LD_ADDR_VAR 0 1
31849: PUSH
31850: LD_EXP 135
31854: PUSH
31855: FOR_IN
31856: IFFALSE 31887
// if GetLives ( i ) < 1000 then
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 256
31867: PUSH
31868: LD_INT 1000
31870: LESS
31871: IFFALSE 31885
// SetLives ( i , 1000 ) ;
31873: LD_VAR 0 1
31877: PPUSH
31878: LD_INT 1000
31880: PPUSH
31881: CALL_OW 234
31885: GO 31855
31887: POP
31888: POP
// end ;
31889: PPOPN 1
31891: END
// export function hHackInvincible ; var i ; begin
31892: LD_INT 0
31894: PPUSH
31895: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31896: LD_ADDR_VAR 0 2
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 21
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 21
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: PPUSH
31929: CALL_OW 69
31933: PUSH
31934: FOR_IN
31935: IFFALSE 31996
// if IsSelected ( i ) then
31937: LD_VAR 0 2
31941: PPUSH
31942: CALL_OW 306
31946: IFFALSE 31994
// begin if i in hInvincible then
31948: LD_VAR 0 2
31952: PUSH
31953: LD_EXP 135
31957: IN
31958: IFFALSE 31978
// hInvincible := hInvincible diff i else
31960: LD_ADDR_EXP 135
31964: PUSH
31965: LD_EXP 135
31969: PUSH
31970: LD_VAR 0 2
31974: DIFF
31975: ST_TO_ADDR
31976: GO 31994
// hInvincible := hInvincible union i ;
31978: LD_ADDR_EXP 135
31982: PUSH
31983: LD_EXP 135
31987: PUSH
31988: LD_VAR 0 2
31992: UNION
31993: ST_TO_ADDR
// end ;
31994: GO 31934
31996: POP
31997: POP
// end ;
31998: LD_VAR 0 1
32002: RET
// export function hHackInvisible ; var i , j ; begin
32003: LD_INT 0
32005: PPUSH
32006: PPUSH
32007: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32008: LD_ADDR_VAR 0 2
32012: PUSH
32013: LD_INT 21
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PPUSH
32023: CALL_OW 69
32027: PUSH
32028: FOR_IN
32029: IFFALSE 32053
// if IsSelected ( i ) then
32031: LD_VAR 0 2
32035: PPUSH
32036: CALL_OW 306
32040: IFFALSE 32051
// ComForceInvisible ( i ) ;
32042: LD_VAR 0 2
32046: PPUSH
32047: CALL_OW 496
32051: GO 32028
32053: POP
32054: POP
// end ;
32055: LD_VAR 0 1
32059: RET
// export function hHackChangeYourSide ; begin
32060: LD_INT 0
32062: PPUSH
// if your_side = 8 then
32063: LD_OWVAR 2
32067: PUSH
32068: LD_INT 8
32070: EQUAL
32071: IFFALSE 32083
// your_side := 0 else
32073: LD_ADDR_OWVAR 2
32077: PUSH
32078: LD_INT 0
32080: ST_TO_ADDR
32081: GO 32097
// your_side := your_side + 1 ;
32083: LD_ADDR_OWVAR 2
32087: PUSH
32088: LD_OWVAR 2
32092: PUSH
32093: LD_INT 1
32095: PLUS
32096: ST_TO_ADDR
// end ;
32097: LD_VAR 0 1
32101: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32102: LD_INT 0
32104: PPUSH
32105: PPUSH
32106: PPUSH
// for i in all_units do
32107: LD_ADDR_VAR 0 2
32111: PUSH
32112: LD_OWVAR 3
32116: PUSH
32117: FOR_IN
32118: IFFALSE 32196
// if IsSelected ( i ) then
32120: LD_VAR 0 2
32124: PPUSH
32125: CALL_OW 306
32129: IFFALSE 32194
// begin j := GetSide ( i ) ;
32131: LD_ADDR_VAR 0 3
32135: PUSH
32136: LD_VAR 0 2
32140: PPUSH
32141: CALL_OW 255
32145: ST_TO_ADDR
// if j = 8 then
32146: LD_VAR 0 3
32150: PUSH
32151: LD_INT 8
32153: EQUAL
32154: IFFALSE 32166
// j := 0 else
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
32164: GO 32180
// j := j + 1 ;
32166: LD_ADDR_VAR 0 3
32170: PUSH
32171: LD_VAR 0 3
32175: PUSH
32176: LD_INT 1
32178: PLUS
32179: ST_TO_ADDR
// SetSide ( i , j ) ;
32180: LD_VAR 0 2
32184: PPUSH
32185: LD_VAR 0 3
32189: PPUSH
32190: CALL_OW 235
// end ;
32194: GO 32117
32196: POP
32197: POP
// end ;
32198: LD_VAR 0 1
32202: RET
// export function hHackFog ; begin
32203: LD_INT 0
32205: PPUSH
// FogOff ( true ) ;
32206: LD_INT 1
32208: PPUSH
32209: CALL_OW 344
// end ;
32213: LD_VAR 0 1
32217: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32218: LD_INT 0
32220: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32221: LD_VAR 0 1
32225: PPUSH
32226: LD_VAR 0 2
32230: PPUSH
32231: LD_VAR 0 3
32235: PPUSH
32236: LD_INT 1
32238: PPUSH
32239: LD_INT 1
32241: PPUSH
32242: CALL_OW 483
// CenterOnXY ( x , y ) ;
32246: LD_VAR 0 2
32250: PPUSH
32251: LD_VAR 0 3
32255: PPUSH
32256: CALL_OW 84
// end ; end_of_file
32260: LD_VAR 0 4
32264: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32265: LD_INT 0
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 264
32280: PUSH
32281: LD_EXP 63
32285: EQUAL
32286: IFFALSE 32358
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32288: LD_INT 68
32290: PPUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: CALL_OW 255
32300: PPUSH
32301: CALL_OW 321
32305: PUSH
32306: LD_INT 2
32308: EQUAL
32309: IFFALSE 32321
// eff := 70 else
32311: LD_ADDR_VAR 0 4
32315: PUSH
32316: LD_INT 70
32318: ST_TO_ADDR
32319: GO 32329
// eff := 30 ;
32321: LD_ADDR_VAR 0 4
32325: PUSH
32326: LD_INT 30
32328: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 250
32338: PPUSH
32339: LD_VAR 0 1
32343: PPUSH
32344: CALL_OW 251
32348: PPUSH
32349: LD_VAR 0 4
32353: PPUSH
32354: CALL_OW 495
// end ; end ;
32358: LD_VAR 0 2
32362: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32363: LD_INT 0
32365: PPUSH
// end ;
32366: LD_VAR 0 4
32370: RET
// export function SOS_Command ( cmd ) ; begin
32371: LD_INT 0
32373: PPUSH
// end ;
32374: LD_VAR 0 2
32378: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32379: LD_INT 0
32381: PPUSH
// end ;
32382: LD_VAR 0 6
32386: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32387: LD_INT 0
32389: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32390: LD_VAR 0 1
32394: PUSH
32395: LD_INT 250
32397: EQUAL
32398: PUSH
32399: LD_VAR 0 2
32403: PPUSH
32404: CALL_OW 264
32408: PUSH
32409: LD_EXP 66
32413: EQUAL
32414: AND
32415: IFFALSE 32436
// MinerPlaceMine ( unit , x , y ) ;
32417: LD_VAR 0 2
32421: PPUSH
32422: LD_VAR 0 4
32426: PPUSH
32427: LD_VAR 0 5
32431: PPUSH
32432: CALL 34785 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32436: LD_VAR 0 1
32440: PUSH
32441: LD_INT 251
32443: EQUAL
32444: PUSH
32445: LD_VAR 0 2
32449: PPUSH
32450: CALL_OW 264
32454: PUSH
32455: LD_EXP 66
32459: EQUAL
32460: AND
32461: IFFALSE 32482
// MinerDetonateMine ( unit , x , y ) ;
32463: LD_VAR 0 2
32467: PPUSH
32468: LD_VAR 0 4
32472: PPUSH
32473: LD_VAR 0 5
32477: PPUSH
32478: CALL 35062 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32482: LD_VAR 0 1
32486: PUSH
32487: LD_INT 252
32489: EQUAL
32490: PUSH
32491: LD_VAR 0 2
32495: PPUSH
32496: CALL_OW 264
32500: PUSH
32501: LD_EXP 66
32505: EQUAL
32506: AND
32507: IFFALSE 32528
// MinerCreateMinefield ( unit , x , y ) ;
32509: LD_VAR 0 2
32513: PPUSH
32514: LD_VAR 0 4
32518: PPUSH
32519: LD_VAR 0 5
32523: PPUSH
32524: CALL 35479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32528: LD_VAR 0 1
32532: PUSH
32533: LD_INT 253
32535: EQUAL
32536: PUSH
32537: LD_VAR 0 2
32541: PPUSH
32542: CALL_OW 257
32546: PUSH
32547: LD_INT 5
32549: EQUAL
32550: AND
32551: IFFALSE 32572
// ComBinocular ( unit , x , y ) ;
32553: LD_VAR 0 2
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL 35850 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32572: LD_VAR 0 1
32576: PUSH
32577: LD_INT 254
32579: EQUAL
32580: PUSH
32581: LD_VAR 0 2
32585: PPUSH
32586: CALL_OW 264
32590: PUSH
32591: LD_EXP 61
32595: EQUAL
32596: AND
32597: PUSH
32598: LD_VAR 0 3
32602: PPUSH
32603: CALL_OW 263
32607: PUSH
32608: LD_INT 3
32610: EQUAL
32611: AND
32612: IFFALSE 32628
// HackDestroyVehicle ( unit , selectedUnit ) ;
32614: LD_VAR 0 2
32618: PPUSH
32619: LD_VAR 0 3
32623: PPUSH
32624: CALL 34145 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32628: LD_VAR 0 1
32632: PUSH
32633: LD_INT 255
32635: EQUAL
32636: PUSH
32637: LD_VAR 0 2
32641: PPUSH
32642: CALL_OW 264
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: LD_INT 53
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: IN
32657: AND
32658: PUSH
32659: LD_VAR 0 4
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL_OW 488
32673: AND
32674: IFFALSE 32698
// CutTreeXYR ( unit , x , y , 12 ) ;
32676: LD_VAR 0 2
32680: PPUSH
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: LD_INT 12
32693: PPUSH
32694: CALL 32711 0 4
// end ;
32698: LD_VAR 0 6
32702: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32703: LD_INT 0
32705: PPUSH
// end ;
32706: LD_VAR 0 4
32710: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32711: LD_INT 0
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32722: LD_VAR 0 1
32726: NOT
32727: PUSH
32728: LD_VAR 0 2
32732: PPUSH
32733: LD_VAR 0 3
32737: PPUSH
32738: CALL_OW 488
32742: NOT
32743: OR
32744: PUSH
32745: LD_VAR 0 4
32749: NOT
32750: OR
32751: IFFALSE 32755
// exit ;
32753: GO 33095
// list := [ ] ;
32755: LD_ADDR_VAR 0 13
32759: PUSH
32760: EMPTY
32761: ST_TO_ADDR
// if x - r < 0 then
32762: LD_VAR 0 2
32766: PUSH
32767: LD_VAR 0 4
32771: MINUS
32772: PUSH
32773: LD_INT 0
32775: LESS
32776: IFFALSE 32788
// min_x := 0 else
32778: LD_ADDR_VAR 0 7
32782: PUSH
32783: LD_INT 0
32785: ST_TO_ADDR
32786: GO 32804
// min_x := x - r ;
32788: LD_ADDR_VAR 0 7
32792: PUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_VAR 0 4
32802: MINUS
32803: ST_TO_ADDR
// if y - r < 0 then
32804: LD_VAR 0 3
32808: PUSH
32809: LD_VAR 0 4
32813: MINUS
32814: PUSH
32815: LD_INT 0
32817: LESS
32818: IFFALSE 32830
// min_y := 0 else
32820: LD_ADDR_VAR 0 8
32824: PUSH
32825: LD_INT 0
32827: ST_TO_ADDR
32828: GO 32846
// min_y := y - r ;
32830: LD_ADDR_VAR 0 8
32834: PUSH
32835: LD_VAR 0 3
32839: PUSH
32840: LD_VAR 0 4
32844: MINUS
32845: ST_TO_ADDR
// max_x := x + r ;
32846: LD_ADDR_VAR 0 9
32850: PUSH
32851: LD_VAR 0 2
32855: PUSH
32856: LD_VAR 0 4
32860: PLUS
32861: ST_TO_ADDR
// max_y := y + r ;
32862: LD_ADDR_VAR 0 10
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_VAR 0 4
32876: PLUS
32877: ST_TO_ADDR
// for _x = min_x to max_x do
32878: LD_ADDR_VAR 0 11
32882: PUSH
32883: DOUBLE
32884: LD_VAR 0 7
32888: DEC
32889: ST_TO_ADDR
32890: LD_VAR 0 9
32894: PUSH
32895: FOR_TO
32896: IFFALSE 33013
// for _y = min_y to max_y do
32898: LD_ADDR_VAR 0 12
32902: PUSH
32903: DOUBLE
32904: LD_VAR 0 8
32908: DEC
32909: ST_TO_ADDR
32910: LD_VAR 0 10
32914: PUSH
32915: FOR_TO
32916: IFFALSE 33009
// begin if not ValidHex ( _x , _y ) then
32918: LD_VAR 0 11
32922: PPUSH
32923: LD_VAR 0 12
32927: PPUSH
32928: CALL_OW 488
32932: NOT
32933: IFFALSE 32937
// continue ;
32935: GO 32915
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32937: LD_VAR 0 11
32941: PPUSH
32942: LD_VAR 0 12
32946: PPUSH
32947: CALL_OW 351
32951: PUSH
32952: LD_VAR 0 11
32956: PPUSH
32957: LD_VAR 0 12
32961: PPUSH
32962: CALL_OW 554
32966: AND
32967: IFFALSE 33007
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32969: LD_ADDR_VAR 0 13
32973: PUSH
32974: LD_VAR 0 13
32978: PPUSH
32979: LD_VAR 0 13
32983: PUSH
32984: LD_INT 1
32986: PLUS
32987: PPUSH
32988: LD_VAR 0 11
32992: PUSH
32993: LD_VAR 0 12
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PPUSH
33002: CALL_OW 2
33006: ST_TO_ADDR
// end ;
33007: GO 32915
33009: POP
33010: POP
33011: GO 32895
33013: POP
33014: POP
// if not list then
33015: LD_VAR 0 13
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33095
// for i in list do
33024: LD_ADDR_VAR 0 6
33028: PUSH
33029: LD_VAR 0 13
33033: PUSH
33034: FOR_IN
33035: IFFALSE 33093
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33037: LD_VAR 0 1
33041: PPUSH
33042: LD_STRING M
33044: PUSH
33045: LD_VAR 0 6
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: PUSH
33054: LD_VAR 0 6
33058: PUSH
33059: LD_INT 2
33061: ARRAY
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: PPUSH
33087: CALL_OW 447
33091: GO 33034
33093: POP
33094: POP
// end ;
33095: LD_VAR 0 5
33099: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33100: LD_EXP 138
33104: NOT
33105: IFFALSE 33155
33107: GO 33109
33109: DISABLE
// begin initHack := true ;
33110: LD_ADDR_EXP 138
33114: PUSH
33115: LD_INT 1
33117: ST_TO_ADDR
// hackTanks := [ ] ;
33118: LD_ADDR_EXP 139
33122: PUSH
33123: EMPTY
33124: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33125: LD_ADDR_EXP 140
33129: PUSH
33130: EMPTY
33131: ST_TO_ADDR
// hackLimit := 3 ;
33132: LD_ADDR_EXP 141
33136: PUSH
33137: LD_INT 3
33139: ST_TO_ADDR
// hackDist := 12 ;
33140: LD_ADDR_EXP 142
33144: PUSH
33145: LD_INT 12
33147: ST_TO_ADDR
// hackCounter := [ ] ;
33148: LD_ADDR_EXP 143
33152: PUSH
33153: EMPTY
33154: ST_TO_ADDR
// end ;
33155: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33156: LD_EXP 138
33160: PUSH
33161: LD_INT 34
33163: PUSH
33164: LD_EXP 61
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 69
33177: AND
33178: IFFALSE 33433
33180: GO 33182
33182: DISABLE
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
// begin enable ;
33187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33188: LD_ADDR_VAR 0 1
33192: PUSH
33193: LD_INT 34
33195: PUSH
33196: LD_EXP 61
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PPUSH
33205: CALL_OW 69
33209: PUSH
33210: FOR_IN
33211: IFFALSE 33431
// begin if not i in hackTanks then
33213: LD_VAR 0 1
33217: PUSH
33218: LD_EXP 139
33222: IN
33223: NOT
33224: IFFALSE 33307
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33226: LD_ADDR_EXP 139
33230: PUSH
33231: LD_EXP 139
33235: PPUSH
33236: LD_EXP 139
33240: PUSH
33241: LD_INT 1
33243: PLUS
33244: PPUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 1
33254: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33255: LD_ADDR_EXP 140
33259: PUSH
33260: LD_EXP 140
33264: PPUSH
33265: LD_EXP 140
33269: PUSH
33270: LD_INT 1
33272: PLUS
33273: PPUSH
33274: EMPTY
33275: PPUSH
33276: CALL_OW 1
33280: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33281: LD_ADDR_EXP 143
33285: PUSH
33286: LD_EXP 143
33290: PPUSH
33291: LD_EXP 143
33295: PUSH
33296: LD_INT 1
33298: PLUS
33299: PPUSH
33300: EMPTY
33301: PPUSH
33302: CALL_OW 1
33306: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 302
33316: NOT
33317: IFFALSE 33330
// begin HackUnlinkAll ( i ) ;
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL 33436 0 1
// continue ;
33328: GO 33210
// end ; HackCheckCapturedStatus ( i ) ;
33330: LD_VAR 0 1
33334: PPUSH
33335: CALL 33879 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_INT 81
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 255
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 33
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 91
33373: PUSH
33374: LD_VAR 0 1
33378: PUSH
33379: LD_EXP 142
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 50
33391: PUSH
33392: EMPTY
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: PPUSH
33401: CALL_OW 69
33405: ST_TO_ADDR
// if not tmp then
33406: LD_VAR 0 2
33410: NOT
33411: IFFALSE 33415
// continue ;
33413: GO 33210
// HackLink ( i , tmp ) ;
33415: LD_VAR 0 1
33419: PPUSH
33420: LD_VAR 0 2
33424: PPUSH
33425: CALL 33572 0 2
// end ;
33429: GO 33210
33431: POP
33432: POP
// end ;
33433: PPOPN 2
33435: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33436: LD_INT 0
33438: PPUSH
33439: PPUSH
33440: PPUSH
// if not hack in hackTanks then
33441: LD_VAR 0 1
33445: PUSH
33446: LD_EXP 139
33450: IN
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33567
// index := GetElementIndex ( hackTanks , hack ) ;
33456: LD_ADDR_VAR 0 4
33460: PUSH
33461: LD_EXP 139
33465: PPUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: CALL 41041 0 2
33475: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33476: LD_EXP 140
33480: PUSH
33481: LD_VAR 0 4
33485: ARRAY
33486: IFFALSE 33567
// begin for i in hackTanksCaptured [ index ] do
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_EXP 140
33497: PUSH
33498: LD_VAR 0 4
33502: ARRAY
33503: PUSH
33504: FOR_IN
33505: IFFALSE 33531
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33507: LD_VAR 0 3
33511: PUSH
33512: LD_INT 1
33514: ARRAY
33515: PPUSH
33516: LD_VAR 0 3
33520: PUSH
33521: LD_INT 2
33523: ARRAY
33524: PPUSH
33525: CALL_OW 235
33529: GO 33504
33531: POP
33532: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33533: LD_ADDR_EXP 140
33537: PUSH
33538: LD_EXP 140
33542: PPUSH
33543: LD_VAR 0 4
33547: PPUSH
33548: EMPTY
33549: PPUSH
33550: CALL_OW 1
33554: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33555: LD_VAR 0 1
33559: PPUSH
33560: LD_INT 0
33562: PPUSH
33563: CALL_OW 505
// end ; end ;
33567: LD_VAR 0 2
33571: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
33576: PPUSH
// if not hack in hackTanks or not vehicles then
33577: LD_VAR 0 1
33581: PUSH
33582: LD_EXP 139
33586: IN
33587: NOT
33588: PUSH
33589: LD_VAR 0 2
33593: NOT
33594: OR
33595: IFFALSE 33599
// exit ;
33597: GO 33874
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33599: LD_ADDR_VAR 0 2
33603: PUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: LD_VAR 0 2
33613: PPUSH
33614: LD_INT 1
33616: PPUSH
33617: LD_INT 1
33619: PPUSH
33620: CALL 41691 0 4
33624: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33625: LD_ADDR_VAR 0 5
33629: PUSH
33630: LD_EXP 139
33634: PPUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: CALL 41041 0 2
33644: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33645: LD_EXP 140
33649: PUSH
33650: LD_VAR 0 5
33654: ARRAY
33655: PUSH
33656: LD_EXP 141
33660: LESS
33661: IFFALSE 33850
// begin for i := 1 to vehicles do
33663: LD_ADDR_VAR 0 4
33667: PUSH
33668: DOUBLE
33669: LD_INT 1
33671: DEC
33672: ST_TO_ADDR
33673: LD_VAR 0 2
33677: PUSH
33678: FOR_TO
33679: IFFALSE 33848
// begin if hackTanksCaptured [ index ] = hackLimit then
33681: LD_EXP 140
33685: PUSH
33686: LD_VAR 0 5
33690: ARRAY
33691: PUSH
33692: LD_EXP 141
33696: EQUAL
33697: IFFALSE 33701
// break ;
33699: GO 33848
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33701: LD_ADDR_EXP 143
33705: PUSH
33706: LD_EXP 143
33710: PPUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: LD_EXP 143
33720: PUSH
33721: LD_VAR 0 5
33725: ARRAY
33726: PUSH
33727: LD_INT 1
33729: PLUS
33730: PPUSH
33731: CALL_OW 1
33735: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33736: LD_ADDR_EXP 140
33740: PUSH
33741: LD_EXP 140
33745: PPUSH
33746: LD_VAR 0 5
33750: PUSH
33751: LD_EXP 140
33755: PUSH
33756: LD_VAR 0 5
33760: ARRAY
33761: PUSH
33762: LD_INT 1
33764: PLUS
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PPUSH
33770: LD_VAR 0 2
33774: PUSH
33775: LD_VAR 0 4
33779: ARRAY
33780: PUSH
33781: LD_VAR 0 2
33785: PUSH
33786: LD_VAR 0 4
33790: ARRAY
33791: PPUSH
33792: CALL_OW 255
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL 41256 0 3
33805: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33806: LD_VAR 0 2
33810: PUSH
33811: LD_VAR 0 4
33815: ARRAY
33816: PPUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 255
33826: PPUSH
33827: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33831: LD_VAR 0 2
33835: PUSH
33836: LD_VAR 0 4
33840: ARRAY
33841: PPUSH
33842: CALL_OW 141
// end ;
33846: GO 33678
33848: POP
33849: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33850: LD_VAR 0 1
33854: PPUSH
33855: LD_EXP 140
33859: PUSH
33860: LD_VAR 0 5
33864: ARRAY
33865: PUSH
33866: LD_INT 0
33868: PLUS
33869: PPUSH
33870: CALL_OW 505
// end ;
33874: LD_VAR 0 3
33878: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33879: LD_INT 0
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
// if not hack in hackTanks then
33885: LD_VAR 0 1
33889: PUSH
33890: LD_EXP 139
33894: IN
33895: NOT
33896: IFFALSE 33900
// exit ;
33898: GO 34140
// index := GetElementIndex ( hackTanks , hack ) ;
33900: LD_ADDR_VAR 0 4
33904: PUSH
33905: LD_EXP 139
33909: PPUSH
33910: LD_VAR 0 1
33914: PPUSH
33915: CALL 41041 0 2
33919: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33920: LD_ADDR_VAR 0 3
33924: PUSH
33925: DOUBLE
33926: LD_EXP 140
33930: PUSH
33931: LD_VAR 0 4
33935: ARRAY
33936: INC
33937: ST_TO_ADDR
33938: LD_INT 1
33940: PUSH
33941: FOR_DOWNTO
33942: IFFALSE 34114
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33944: LD_ADDR_VAR 0 5
33948: PUSH
33949: LD_EXP 140
33953: PUSH
33954: LD_VAR 0 4
33958: ARRAY
33959: PUSH
33960: LD_VAR 0 3
33964: ARRAY
33965: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33966: LD_VAR 0 5
33970: PUSH
33971: LD_INT 1
33973: ARRAY
33974: PPUSH
33975: CALL_OW 302
33979: NOT
33980: PUSH
33981: LD_VAR 0 5
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: PPUSH
33990: CALL_OW 255
33994: PUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 255
34004: NONEQUAL
34005: OR
34006: IFFALSE 34112
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34008: LD_VAR 0 5
34012: PUSH
34013: LD_INT 1
34015: ARRAY
34016: PPUSH
34017: CALL_OW 305
34021: PUSH
34022: LD_VAR 0 5
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: PPUSH
34031: CALL_OW 255
34035: PUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 255
34045: EQUAL
34046: AND
34047: IFFALSE 34071
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34049: LD_VAR 0 5
34053: PUSH
34054: LD_INT 1
34056: ARRAY
34057: PPUSH
34058: LD_VAR 0 5
34062: PUSH
34063: LD_INT 2
34065: ARRAY
34066: PPUSH
34067: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34071: LD_ADDR_EXP 140
34075: PUSH
34076: LD_EXP 140
34080: PPUSH
34081: LD_VAR 0 4
34085: PPUSH
34086: LD_EXP 140
34090: PUSH
34091: LD_VAR 0 4
34095: ARRAY
34096: PPUSH
34097: LD_VAR 0 3
34101: PPUSH
34102: CALL_OW 3
34106: PPUSH
34107: CALL_OW 1
34111: ST_TO_ADDR
// end ; end ;
34112: GO 33941
34114: POP
34115: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_EXP 140
34125: PUSH
34126: LD_VAR 0 4
34130: ARRAY
34131: PUSH
34132: LD_INT 0
34134: PLUS
34135: PPUSH
34136: CALL_OW 505
// end ;
34140: LD_VAR 0 2
34144: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
// if not hack in hackTanks then
34151: LD_VAR 0 1
34155: PUSH
34156: LD_EXP 139
34160: IN
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34251
// index := GetElementIndex ( hackTanks , hack ) ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_EXP 139
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL 41041 0 2
34185: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34186: LD_ADDR_VAR 0 4
34190: PUSH
34191: DOUBLE
34192: LD_INT 1
34194: DEC
34195: ST_TO_ADDR
34196: LD_EXP 140
34200: PUSH
34201: LD_VAR 0 5
34205: ARRAY
34206: PUSH
34207: FOR_TO
34208: IFFALSE 34249
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34210: LD_EXP 140
34214: PUSH
34215: LD_VAR 0 5
34219: ARRAY
34220: PUSH
34221: LD_VAR 0 4
34225: ARRAY
34226: PUSH
34227: LD_INT 1
34229: ARRAY
34230: PUSH
34231: LD_VAR 0 2
34235: EQUAL
34236: IFFALSE 34247
// KillUnit ( vehicle ) ;
34238: LD_VAR 0 2
34242: PPUSH
34243: CALL_OW 66
34247: GO 34207
34249: POP
34250: POP
// end ;
34251: LD_VAR 0 3
34255: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34256: LD_EXP 144
34260: NOT
34261: IFFALSE 34296
34263: GO 34265
34265: DISABLE
// begin initMiner := true ;
34266: LD_ADDR_EXP 144
34270: PUSH
34271: LD_INT 1
34273: ST_TO_ADDR
// minersList := [ ] ;
34274: LD_ADDR_EXP 145
34278: PUSH
34279: EMPTY
34280: ST_TO_ADDR
// minerMinesList := [ ] ;
34281: LD_ADDR_EXP 146
34285: PUSH
34286: EMPTY
34287: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34288: LD_ADDR_EXP 147
34292: PUSH
34293: LD_INT 5
34295: ST_TO_ADDR
// end ;
34296: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34297: LD_EXP 144
34301: PUSH
34302: LD_INT 34
34304: PUSH
34305: LD_EXP 66
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PPUSH
34314: CALL_OW 69
34318: AND
34319: IFFALSE 34782
34321: GO 34323
34323: DISABLE
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
// begin enable ;
34330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34331: LD_ADDR_VAR 0 1
34335: PUSH
34336: LD_INT 34
34338: PUSH
34339: LD_EXP 66
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PPUSH
34348: CALL_OW 69
34352: PUSH
34353: FOR_IN
34354: IFFALSE 34426
// begin if not i in minersList then
34356: LD_VAR 0 1
34360: PUSH
34361: LD_EXP 145
34365: IN
34366: NOT
34367: IFFALSE 34424
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34369: LD_ADDR_EXP 145
34373: PUSH
34374: LD_EXP 145
34378: PPUSH
34379: LD_EXP 145
34383: PUSH
34384: LD_INT 1
34386: PLUS
34387: PPUSH
34388: LD_VAR 0 1
34392: PPUSH
34393: CALL_OW 1
34397: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34398: LD_ADDR_EXP 146
34402: PUSH
34403: LD_EXP 146
34407: PPUSH
34408: LD_EXP 146
34412: PUSH
34413: LD_INT 1
34415: PLUS
34416: PPUSH
34417: EMPTY
34418: PPUSH
34419: CALL_OW 1
34423: ST_TO_ADDR
// end end ;
34424: GO 34353
34426: POP
34427: POP
// for i := minerMinesList downto 1 do
34428: LD_ADDR_VAR 0 1
34432: PUSH
34433: DOUBLE
34434: LD_EXP 146
34438: INC
34439: ST_TO_ADDR
34440: LD_INT 1
34442: PUSH
34443: FOR_DOWNTO
34444: IFFALSE 34780
// begin if IsLive ( minersList [ i ] ) then
34446: LD_EXP 145
34450: PUSH
34451: LD_VAR 0 1
34455: ARRAY
34456: PPUSH
34457: CALL_OW 300
34461: IFFALSE 34489
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34463: LD_EXP 145
34467: PUSH
34468: LD_VAR 0 1
34472: ARRAY
34473: PPUSH
34474: LD_EXP 146
34478: PUSH
34479: LD_VAR 0 1
34483: ARRAY
34484: PPUSH
34485: CALL_OW 505
// if not minerMinesList [ i ] then
34489: LD_EXP 146
34493: PUSH
34494: LD_VAR 0 1
34498: ARRAY
34499: NOT
34500: IFFALSE 34504
// continue ;
34502: GO 34443
// for j := minerMinesList [ i ] downto 1 do
34504: LD_ADDR_VAR 0 2
34508: PUSH
34509: DOUBLE
34510: LD_EXP 146
34514: PUSH
34515: LD_VAR 0 1
34519: ARRAY
34520: INC
34521: ST_TO_ADDR
34522: LD_INT 1
34524: PUSH
34525: FOR_DOWNTO
34526: IFFALSE 34776
// begin side := GetSide ( minersList [ i ] ) ;
34528: LD_ADDR_VAR 0 3
34532: PUSH
34533: LD_EXP 145
34537: PUSH
34538: LD_VAR 0 1
34542: ARRAY
34543: PPUSH
34544: CALL_OW 255
34548: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: LD_EXP 146
34558: PUSH
34559: LD_VAR 0 1
34563: ARRAY
34564: PUSH
34565: LD_VAR 0 2
34569: ARRAY
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: LD_EXP 146
34579: PUSH
34580: LD_VAR 0 1
34584: ARRAY
34585: PUSH
34586: LD_VAR 0 2
34590: ARRAY
34591: PUSH
34592: LD_INT 2
34594: ARRAY
34595: PPUSH
34596: CALL_OW 428
34600: ST_TO_ADDR
// if not tmp then
34601: LD_VAR 0 4
34605: NOT
34606: IFFALSE 34610
// continue ;
34608: GO 34525
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34610: LD_VAR 0 4
34614: PUSH
34615: LD_INT 81
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PPUSH
34627: CALL_OW 69
34631: IN
34632: PUSH
34633: LD_EXP 146
34637: PUSH
34638: LD_VAR 0 1
34642: ARRAY
34643: PUSH
34644: LD_VAR 0 2
34648: ARRAY
34649: PUSH
34650: LD_INT 1
34652: ARRAY
34653: PPUSH
34654: LD_EXP 146
34658: PUSH
34659: LD_VAR 0 1
34663: ARRAY
34664: PUSH
34665: LD_VAR 0 2
34669: ARRAY
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: PPUSH
34675: CALL_OW 458
34679: AND
34680: IFFALSE 34774
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34682: LD_EXP 146
34686: PUSH
34687: LD_VAR 0 1
34691: ARRAY
34692: PUSH
34693: LD_VAR 0 2
34697: ARRAY
34698: PUSH
34699: LD_INT 1
34701: ARRAY
34702: PPUSH
34703: LD_EXP 146
34707: PUSH
34708: LD_VAR 0 1
34712: ARRAY
34713: PUSH
34714: LD_VAR 0 2
34718: ARRAY
34719: PUSH
34720: LD_INT 2
34722: ARRAY
34723: PPUSH
34724: LD_VAR 0 3
34728: PPUSH
34729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34733: LD_ADDR_EXP 146
34737: PUSH
34738: LD_EXP 146
34742: PPUSH
34743: LD_VAR 0 1
34747: PPUSH
34748: LD_EXP 146
34752: PUSH
34753: LD_VAR 0 1
34757: ARRAY
34758: PPUSH
34759: LD_VAR 0 2
34763: PPUSH
34764: CALL_OW 3
34768: PPUSH
34769: CALL_OW 1
34773: ST_TO_ADDR
// end ; end ;
34774: GO 34525
34776: POP
34777: POP
// end ;
34778: GO 34443
34780: POP
34781: POP
// end ;
34782: PPOPN 4
34784: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34785: LD_INT 0
34787: PPUSH
34788: PPUSH
// result := false ;
34789: LD_ADDR_VAR 0 4
34793: PUSH
34794: LD_INT 0
34796: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 264
34806: PUSH
34807: LD_EXP 66
34811: EQUAL
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 35057
// index := GetElementIndex ( minersList , unit ) ;
34817: LD_ADDR_VAR 0 5
34821: PUSH
34822: LD_EXP 145
34826: PPUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL 41041 0 2
34836: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34837: LD_EXP 146
34841: PUSH
34842: LD_VAR 0 5
34846: ARRAY
34847: PUSH
34848: LD_EXP 147
34852: GREATEREQUAL
34853: IFFALSE 34857
// exit ;
34855: GO 35057
// ComMoveXY ( unit , x , y ) ;
34857: LD_VAR 0 1
34861: PPUSH
34862: LD_VAR 0 2
34866: PPUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34876: LD_INT 35
34878: PPUSH
34879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34883: LD_VAR 0 1
34887: PPUSH
34888: LD_VAR 0 2
34892: PPUSH
34893: LD_VAR 0 3
34897: PPUSH
34898: CALL 71813 0 3
34902: NOT
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL_OW 314
34913: AND
34914: IFFALSE 34918
// exit ;
34916: GO 35057
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 3
34927: PPUSH
34928: CALL_OW 428
34932: PUSH
34933: LD_VAR 0 1
34937: EQUAL
34938: PUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 314
34948: NOT
34949: AND
34950: IFFALSE 34876
// PlaySoundXY ( x , y , PlantMine ) ;
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: LD_STRING PlantMine
34964: PPUSH
34965: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34969: LD_VAR 0 2
34973: PPUSH
34974: LD_VAR 0 3
34978: PPUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL_OW 255
34988: PPUSH
34989: LD_INT 0
34991: PPUSH
34992: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34996: LD_ADDR_EXP 146
35000: PUSH
35001: LD_EXP 146
35005: PPUSH
35006: LD_VAR 0 5
35010: PUSH
35011: LD_EXP 146
35015: PUSH
35016: LD_VAR 0 5
35020: ARRAY
35021: PUSH
35022: LD_INT 1
35024: PLUS
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PPUSH
35030: LD_VAR 0 2
35034: PUSH
35035: LD_VAR 0 3
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL 41256 0 3
35048: ST_TO_ADDR
// result := true ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_INT 1
35056: ST_TO_ADDR
// end ;
35057: LD_VAR 0 4
35061: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
// if not unit in minersList then
35067: LD_VAR 0 1
35071: PUSH
35072: LD_EXP 145
35076: IN
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35474
// index := GetElementIndex ( minersList , unit ) ;
35082: LD_ADDR_VAR 0 6
35086: PUSH
35087: LD_EXP 145
35091: PPUSH
35092: LD_VAR 0 1
35096: PPUSH
35097: CALL 41041 0 2
35101: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35102: LD_ADDR_VAR 0 5
35106: PUSH
35107: DOUBLE
35108: LD_EXP 146
35112: PUSH
35113: LD_VAR 0 6
35117: ARRAY
35118: INC
35119: ST_TO_ADDR
35120: LD_INT 1
35122: PUSH
35123: FOR_DOWNTO
35124: IFFALSE 35285
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35126: LD_EXP 146
35130: PUSH
35131: LD_VAR 0 6
35135: ARRAY
35136: PUSH
35137: LD_VAR 0 5
35141: ARRAY
35142: PUSH
35143: LD_INT 1
35145: ARRAY
35146: PUSH
35147: LD_VAR 0 2
35151: EQUAL
35152: PUSH
35153: LD_EXP 146
35157: PUSH
35158: LD_VAR 0 6
35162: ARRAY
35163: PUSH
35164: LD_VAR 0 5
35168: ARRAY
35169: PUSH
35170: LD_INT 2
35172: ARRAY
35173: PUSH
35174: LD_VAR 0 3
35178: EQUAL
35179: AND
35180: IFFALSE 35283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35182: LD_EXP 146
35186: PUSH
35187: LD_VAR 0 6
35191: ARRAY
35192: PUSH
35193: LD_VAR 0 5
35197: ARRAY
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PPUSH
35203: LD_EXP 146
35207: PUSH
35208: LD_VAR 0 6
35212: ARRAY
35213: PUSH
35214: LD_VAR 0 5
35218: ARRAY
35219: PUSH
35220: LD_INT 2
35222: ARRAY
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 255
35233: PPUSH
35234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35238: LD_ADDR_EXP 146
35242: PUSH
35243: LD_EXP 146
35247: PPUSH
35248: LD_VAR 0 6
35252: PPUSH
35253: LD_EXP 146
35257: PUSH
35258: LD_VAR 0 6
35262: ARRAY
35263: PPUSH
35264: LD_VAR 0 5
35268: PPUSH
35269: CALL_OW 3
35273: PPUSH
35274: CALL_OW 1
35278: ST_TO_ADDR
// exit ;
35279: POP
35280: POP
35281: GO 35474
// end ; end ;
35283: GO 35123
35285: POP
35286: POP
// for i := minerMinesList [ index ] downto 1 do
35287: LD_ADDR_VAR 0 5
35291: PUSH
35292: DOUBLE
35293: LD_EXP 146
35297: PUSH
35298: LD_VAR 0 6
35302: ARRAY
35303: INC
35304: ST_TO_ADDR
35305: LD_INT 1
35307: PUSH
35308: FOR_DOWNTO
35309: IFFALSE 35472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35311: LD_EXP 146
35315: PUSH
35316: LD_VAR 0 6
35320: ARRAY
35321: PUSH
35322: LD_VAR 0 5
35326: ARRAY
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PPUSH
35332: LD_EXP 146
35336: PUSH
35337: LD_VAR 0 6
35341: ARRAY
35342: PUSH
35343: LD_VAR 0 5
35347: ARRAY
35348: PUSH
35349: LD_INT 2
35351: ARRAY
35352: PPUSH
35353: LD_VAR 0 2
35357: PPUSH
35358: LD_VAR 0 3
35362: PPUSH
35363: CALL_OW 298
35367: PUSH
35368: LD_INT 6
35370: LESS
35371: IFFALSE 35470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35373: LD_EXP 146
35377: PUSH
35378: LD_VAR 0 6
35382: ARRAY
35383: PUSH
35384: LD_VAR 0 5
35388: ARRAY
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PPUSH
35394: LD_EXP 146
35398: PUSH
35399: LD_VAR 0 6
35403: ARRAY
35404: PUSH
35405: LD_VAR 0 5
35409: ARRAY
35410: PUSH
35411: LD_INT 2
35413: ARRAY
35414: PPUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 255
35424: PPUSH
35425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35429: LD_ADDR_EXP 146
35433: PUSH
35434: LD_EXP 146
35438: PPUSH
35439: LD_VAR 0 6
35443: PPUSH
35444: LD_EXP 146
35448: PUSH
35449: LD_VAR 0 6
35453: ARRAY
35454: PPUSH
35455: LD_VAR 0 5
35459: PPUSH
35460: CALL_OW 3
35464: PPUSH
35465: CALL_OW 1
35469: ST_TO_ADDR
// end ; end ;
35470: GO 35308
35472: POP
35473: POP
// end ;
35474: LD_VAR 0 4
35478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL_OW 264
35499: PUSH
35500: LD_EXP 66
35504: EQUAL
35505: NOT
35506: PUSH
35507: LD_VAR 0 1
35511: PUSH
35512: LD_EXP 145
35516: IN
35517: NOT
35518: OR
35519: IFFALSE 35523
// exit ;
35521: GO 35845
// index := GetElementIndex ( minersList , unit ) ;
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_EXP 145
35532: PPUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL 41041 0 2
35542: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35543: LD_ADDR_VAR 0 8
35547: PUSH
35548: LD_EXP 147
35552: PUSH
35553: LD_EXP 146
35557: PUSH
35558: LD_VAR 0 6
35562: ARRAY
35563: MINUS
35564: ST_TO_ADDR
// if not minesFreeAmount then
35565: LD_VAR 0 8
35569: NOT
35570: IFFALSE 35574
// exit ;
35572: GO 35845
// tmp := [ ] ;
35574: LD_ADDR_VAR 0 7
35578: PUSH
35579: EMPTY
35580: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35581: LD_ADDR_VAR 0 5
35585: PUSH
35586: DOUBLE
35587: LD_INT 1
35589: DEC
35590: ST_TO_ADDR
35591: LD_VAR 0 8
35595: PUSH
35596: FOR_TO
35597: IFFALSE 35792
// begin _d := rand ( 0 , 5 ) ;
35599: LD_ADDR_VAR 0 11
35603: PUSH
35604: LD_INT 0
35606: PPUSH
35607: LD_INT 5
35609: PPUSH
35610: CALL_OW 12
35614: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35615: LD_ADDR_VAR 0 12
35619: PUSH
35620: LD_INT 2
35622: PPUSH
35623: LD_INT 6
35625: PPUSH
35626: CALL_OW 12
35630: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35631: LD_ADDR_VAR 0 9
35635: PUSH
35636: LD_VAR 0 2
35640: PPUSH
35641: LD_VAR 0 11
35645: PPUSH
35646: LD_VAR 0 12
35650: PPUSH
35651: CALL_OW 272
35655: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35656: LD_ADDR_VAR 0 10
35660: PUSH
35661: LD_VAR 0 3
35665: PPUSH
35666: LD_VAR 0 11
35670: PPUSH
35671: LD_VAR 0 12
35675: PPUSH
35676: CALL_OW 273
35680: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35681: LD_VAR 0 9
35685: PPUSH
35686: LD_VAR 0 10
35690: PPUSH
35691: CALL_OW 488
35695: PUSH
35696: LD_VAR 0 9
35700: PUSH
35701: LD_VAR 0 10
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_VAR 0 7
35714: IN
35715: NOT
35716: AND
35717: PUSH
35718: LD_VAR 0 9
35722: PPUSH
35723: LD_VAR 0 10
35727: PPUSH
35728: CALL_OW 458
35732: NOT
35733: AND
35734: IFFALSE 35776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35736: LD_ADDR_VAR 0 7
35740: PUSH
35741: LD_VAR 0 7
35745: PPUSH
35746: LD_VAR 0 7
35750: PUSH
35751: LD_INT 1
35753: PLUS
35754: PPUSH
35755: LD_VAR 0 9
35759: PUSH
35760: LD_VAR 0 10
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PPUSH
35769: CALL_OW 1
35773: ST_TO_ADDR
35774: GO 35790
// i := i - 1 ;
35776: LD_ADDR_VAR 0 5
35780: PUSH
35781: LD_VAR 0 5
35785: PUSH
35786: LD_INT 1
35788: MINUS
35789: ST_TO_ADDR
// end ;
35790: GO 35596
35792: POP
35793: POP
// for i in tmp do
35794: LD_ADDR_VAR 0 5
35798: PUSH
35799: LD_VAR 0 7
35803: PUSH
35804: FOR_IN
35805: IFFALSE 35843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35807: LD_VAR 0 1
35811: PPUSH
35812: LD_VAR 0 5
35816: PUSH
35817: LD_INT 1
35819: ARRAY
35820: PPUSH
35821: LD_VAR 0 5
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: PPUSH
35830: CALL 34785 0 3
35834: NOT
35835: IFFALSE 35841
// exit ;
35837: POP
35838: POP
35839: GO 35845
35841: GO 35804
35843: POP
35844: POP
// end ;
35845: LD_VAR 0 4
35849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35850: LD_INT 0
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
// if not GetClass ( unit ) = class_sniper then
35859: LD_VAR 0 1
35863: PPUSH
35864: CALL_OW 257
35868: PUSH
35869: LD_INT 5
35871: EQUAL
35872: NOT
35873: IFFALSE 35877
// exit ;
35875: GO 36265
// dist := 8 ;
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: LD_INT 8
35884: ST_TO_ADDR
// viewRange := 12 ;
35885: LD_ADDR_VAR 0 7
35889: PUSH
35890: LD_INT 12
35892: ST_TO_ADDR
// side := GetSide ( unit ) ;
35893: LD_ADDR_VAR 0 6
35897: PUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 255
35907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35908: LD_INT 61
35910: PPUSH
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 321
35920: PUSH
35921: LD_INT 2
35923: EQUAL
35924: IFFALSE 35934
// viewRange := 16 ;
35926: LD_ADDR_VAR 0 7
35930: PUSH
35931: LD_INT 16
35933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35934: LD_VAR 0 1
35938: PPUSH
35939: LD_VAR 0 2
35943: PPUSH
35944: LD_VAR 0 3
35948: PPUSH
35949: CALL_OW 297
35953: PUSH
35954: LD_VAR 0 5
35958: GREATER
35959: IFFALSE 36038
// begin ComMoveXY ( unit , x , y ) ;
35961: LD_VAR 0 1
35965: PPUSH
35966: LD_VAR 0 2
35970: PPUSH
35971: LD_VAR 0 3
35975: PPUSH
35976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35980: LD_INT 35
35982: PPUSH
35983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35987: LD_VAR 0 1
35991: PPUSH
35992: LD_VAR 0 2
35996: PPUSH
35997: LD_VAR 0 3
36001: PPUSH
36002: CALL 71813 0 3
36006: NOT
36007: IFFALSE 36011
// exit ;
36009: GO 36265
// until GetDistUnitXY ( unit , x , y ) < dist ;
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_VAR 0 2
36020: PPUSH
36021: LD_VAR 0 3
36025: PPUSH
36026: CALL_OW 297
36030: PUSH
36031: LD_VAR 0 5
36035: LESS
36036: IFFALSE 35980
// end ; ComTurnXY ( unit , x , y ) ;
36038: LD_VAR 0 1
36042: PPUSH
36043: LD_VAR 0 2
36047: PPUSH
36048: LD_VAR 0 3
36052: PPUSH
36053: CALL_OW 118
// wait ( 5 ) ;
36057: LD_INT 5
36059: PPUSH
36060: CALL_OW 67
// _d := GetDir ( unit ) ;
36064: LD_ADDR_VAR 0 10
36068: PUSH
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 254
36078: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36079: LD_ADDR_VAR 0 8
36083: PUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 250
36093: PPUSH
36094: LD_VAR 0 10
36098: PPUSH
36099: LD_VAR 0 5
36103: PPUSH
36104: CALL_OW 272
36108: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 251
36123: PPUSH
36124: LD_VAR 0 10
36128: PPUSH
36129: LD_VAR 0 5
36133: PPUSH
36134: CALL_OW 273
36138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36139: LD_VAR 0 8
36143: PPUSH
36144: LD_VAR 0 9
36148: PPUSH
36149: CALL_OW 488
36153: NOT
36154: IFFALSE 36158
// exit ;
36156: GO 36265
// ComAnimCustom ( unit , 1 ) ;
36158: LD_VAR 0 1
36162: PPUSH
36163: LD_INT 1
36165: PPUSH
36166: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36170: LD_VAR 0 8
36174: PPUSH
36175: LD_VAR 0 9
36179: PPUSH
36180: LD_VAR 0 6
36184: PPUSH
36185: LD_VAR 0 7
36189: PPUSH
36190: CALL_OW 330
// repeat wait ( 1 ) ;
36194: LD_INT 1
36196: PPUSH
36197: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 316
36210: PUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 314
36220: OR
36221: PUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: CALL_OW 302
36231: NOT
36232: OR
36233: PUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 301
36243: OR
36244: IFFALSE 36194
// RemoveSeeing ( _x , _y , side ) ;
36246: LD_VAR 0 8
36250: PPUSH
36251: LD_VAR 0 9
36255: PPUSH
36256: LD_VAR 0 6
36260: PPUSH
36261: CALL_OW 331
// end ; end_of_file
36265: LD_VAR 0 4
36269: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
// if exist_mode then
36274: LD_VAR 0 2
36278: IFFALSE 36303
// unit := CreateCharacter ( prefix & ident ) else
36280: LD_ADDR_VAR 0 5
36284: PUSH
36285: LD_VAR 0 3
36289: PUSH
36290: LD_VAR 0 1
36294: STR
36295: PPUSH
36296: CALL_OW 34
36300: ST_TO_ADDR
36301: GO 36318
// unit := NewCharacter ( ident ) ;
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL_OW 25
36317: ST_TO_ADDR
// result := unit ;
36318: LD_ADDR_VAR 0 4
36322: PUSH
36323: LD_VAR 0 5
36327: ST_TO_ADDR
// end ;
36328: LD_VAR 0 4
36332: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36333: LD_INT 0
36335: PPUSH
36336: PPUSH
// if not side or not nation then
36337: LD_VAR 0 1
36341: NOT
36342: PUSH
36343: LD_VAR 0 2
36347: NOT
36348: OR
36349: IFFALSE 36353
// exit ;
36351: GO 37121
// case nation of nation_american :
36353: LD_VAR 0 2
36357: PUSH
36358: LD_INT 1
36360: DOUBLE
36361: EQUAL
36362: IFTRUE 36366
36364: GO 36580
36366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36367: LD_ADDR_VAR 0 4
36371: PUSH
36372: LD_INT 35
36374: PUSH
36375: LD_INT 45
36377: PUSH
36378: LD_INT 46
36380: PUSH
36381: LD_INT 47
36383: PUSH
36384: LD_INT 82
36386: PUSH
36387: LD_INT 83
36389: PUSH
36390: LD_INT 84
36392: PUSH
36393: LD_INT 85
36395: PUSH
36396: LD_INT 86
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 6
36407: PUSH
36408: LD_INT 15
36410: PUSH
36411: LD_INT 16
36413: PUSH
36414: LD_INT 7
36416: PUSH
36417: LD_INT 12
36419: PUSH
36420: LD_INT 13
36422: PUSH
36423: LD_INT 10
36425: PUSH
36426: LD_INT 14
36428: PUSH
36429: LD_INT 20
36431: PUSH
36432: LD_INT 21
36434: PUSH
36435: LD_INT 22
36437: PUSH
36438: LD_INT 25
36440: PUSH
36441: LD_INT 32
36443: PUSH
36444: LD_INT 27
36446: PUSH
36447: LD_INT 36
36449: PUSH
36450: LD_INT 69
36452: PUSH
36453: LD_INT 39
36455: PUSH
36456: LD_INT 34
36458: PUSH
36459: LD_INT 40
36461: PUSH
36462: LD_INT 48
36464: PUSH
36465: LD_INT 49
36467: PUSH
36468: LD_INT 50
36470: PUSH
36471: LD_INT 51
36473: PUSH
36474: LD_INT 52
36476: PUSH
36477: LD_INT 53
36479: PUSH
36480: LD_INT 54
36482: PUSH
36483: LD_INT 55
36485: PUSH
36486: LD_INT 56
36488: PUSH
36489: LD_INT 57
36491: PUSH
36492: LD_INT 58
36494: PUSH
36495: LD_INT 59
36497: PUSH
36498: LD_INT 60
36500: PUSH
36501: LD_INT 61
36503: PUSH
36504: LD_INT 62
36506: PUSH
36507: LD_INT 80
36509: PUSH
36510: LD_INT 82
36512: PUSH
36513: LD_INT 83
36515: PUSH
36516: LD_INT 84
36518: PUSH
36519: LD_INT 85
36521: PUSH
36522: LD_INT 86
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
36578: GO 37045
36580: LD_INT 2
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36588
36586: GO 36814
36588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36589: LD_ADDR_VAR 0 4
36593: PUSH
36594: LD_INT 35
36596: PUSH
36597: LD_INT 45
36599: PUSH
36600: LD_INT 46
36602: PUSH
36603: LD_INT 47
36605: PUSH
36606: LD_INT 82
36608: PUSH
36609: LD_INT 83
36611: PUSH
36612: LD_INT 84
36614: PUSH
36615: LD_INT 85
36617: PUSH
36618: LD_INT 87
36620: PUSH
36621: LD_INT 70
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 11
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: LD_INT 4
36635: PUSH
36636: LD_INT 5
36638: PUSH
36639: LD_INT 6
36641: PUSH
36642: LD_INT 15
36644: PUSH
36645: LD_INT 18
36647: PUSH
36648: LD_INT 7
36650: PUSH
36651: LD_INT 17
36653: PUSH
36654: LD_INT 8
36656: PUSH
36657: LD_INT 20
36659: PUSH
36660: LD_INT 21
36662: PUSH
36663: LD_INT 22
36665: PUSH
36666: LD_INT 72
36668: PUSH
36669: LD_INT 26
36671: PUSH
36672: LD_INT 69
36674: PUSH
36675: LD_INT 39
36677: PUSH
36678: LD_INT 40
36680: PUSH
36681: LD_INT 41
36683: PUSH
36684: LD_INT 42
36686: PUSH
36687: LD_INT 43
36689: PUSH
36690: LD_INT 48
36692: PUSH
36693: LD_INT 49
36695: PUSH
36696: LD_INT 50
36698: PUSH
36699: LD_INT 51
36701: PUSH
36702: LD_INT 52
36704: PUSH
36705: LD_INT 53
36707: PUSH
36708: LD_INT 54
36710: PUSH
36711: LD_INT 55
36713: PUSH
36714: LD_INT 56
36716: PUSH
36717: LD_INT 60
36719: PUSH
36720: LD_INT 61
36722: PUSH
36723: LD_INT 62
36725: PUSH
36726: LD_INT 66
36728: PUSH
36729: LD_INT 67
36731: PUSH
36732: LD_INT 68
36734: PUSH
36735: LD_INT 81
36737: PUSH
36738: LD_INT 82
36740: PUSH
36741: LD_INT 83
36743: PUSH
36744: LD_INT 84
36746: PUSH
36747: LD_INT 85
36749: PUSH
36750: LD_INT 87
36752: PUSH
36753: LD_INT 88
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: ST_TO_ADDR
36812: GO 37045
36814: LD_INT 3
36816: DOUBLE
36817: EQUAL
36818: IFTRUE 36822
36820: GO 37044
36822: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36823: LD_ADDR_VAR 0 4
36827: PUSH
36828: LD_INT 46
36830: PUSH
36831: LD_INT 47
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 82
36842: PUSH
36843: LD_INT 83
36845: PUSH
36846: LD_INT 84
36848: PUSH
36849: LD_INT 85
36851: PUSH
36852: LD_INT 86
36854: PUSH
36855: LD_INT 11
36857: PUSH
36858: LD_INT 9
36860: PUSH
36861: LD_INT 20
36863: PUSH
36864: LD_INT 19
36866: PUSH
36867: LD_INT 21
36869: PUSH
36870: LD_INT 24
36872: PUSH
36873: LD_INT 22
36875: PUSH
36876: LD_INT 25
36878: PUSH
36879: LD_INT 28
36881: PUSH
36882: LD_INT 29
36884: PUSH
36885: LD_INT 30
36887: PUSH
36888: LD_INT 31
36890: PUSH
36891: LD_INT 37
36893: PUSH
36894: LD_INT 38
36896: PUSH
36897: LD_INT 32
36899: PUSH
36900: LD_INT 27
36902: PUSH
36903: LD_INT 33
36905: PUSH
36906: LD_INT 69
36908: PUSH
36909: LD_INT 39
36911: PUSH
36912: LD_INT 34
36914: PUSH
36915: LD_INT 40
36917: PUSH
36918: LD_INT 71
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 44
36926: PUSH
36927: LD_INT 48
36929: PUSH
36930: LD_INT 49
36932: PUSH
36933: LD_INT 50
36935: PUSH
36936: LD_INT 51
36938: PUSH
36939: LD_INT 52
36941: PUSH
36942: LD_INT 53
36944: PUSH
36945: LD_INT 54
36947: PUSH
36948: LD_INT 55
36950: PUSH
36951: LD_INT 56
36953: PUSH
36954: LD_INT 57
36956: PUSH
36957: LD_INT 58
36959: PUSH
36960: LD_INT 59
36962: PUSH
36963: LD_INT 63
36965: PUSH
36966: LD_INT 64
36968: PUSH
36969: LD_INT 65
36971: PUSH
36972: LD_INT 82
36974: PUSH
36975: LD_INT 83
36977: PUSH
36978: LD_INT 84
36980: PUSH
36981: LD_INT 85
36983: PUSH
36984: LD_INT 86
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: ST_TO_ADDR
37042: GO 37045
37044: POP
// if state > - 1 and state < 3 then
37045: LD_VAR 0 3
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: GREATER
37054: PUSH
37055: LD_VAR 0 3
37059: PUSH
37060: LD_INT 3
37062: LESS
37063: AND
37064: IFFALSE 37121
// for i in result do
37066: LD_ADDR_VAR 0 5
37070: PUSH
37071: LD_VAR 0 4
37075: PUSH
37076: FOR_IN
37077: IFFALSE 37119
// if GetTech ( i , side ) <> state then
37079: LD_VAR 0 5
37083: PPUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 321
37093: PUSH
37094: LD_VAR 0 3
37098: NONEQUAL
37099: IFFALSE 37117
// result := result diff i ;
37101: LD_ADDR_VAR 0 4
37105: PUSH
37106: LD_VAR 0 4
37110: PUSH
37111: LD_VAR 0 5
37115: DIFF
37116: ST_TO_ADDR
37117: GO 37076
37119: POP
37120: POP
// end ;
37121: LD_VAR 0 4
37125: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37126: LD_INT 0
37128: PPUSH
37129: PPUSH
37130: PPUSH
// result := true ;
37131: LD_ADDR_VAR 0 3
37135: PUSH
37136: LD_INT 1
37138: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_VAR 0 2
37148: PPUSH
37149: CALL_OW 480
37153: ST_TO_ADDR
// if not tmp then
37154: LD_VAR 0 5
37158: NOT
37159: IFFALSE 37163
// exit ;
37161: GO 37212
// for i in tmp do
37163: LD_ADDR_VAR 0 4
37167: PUSH
37168: LD_VAR 0 5
37172: PUSH
37173: FOR_IN
37174: IFFALSE 37210
// if GetTech ( i , side ) <> state_researched then
37176: LD_VAR 0 4
37180: PPUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 321
37190: PUSH
37191: LD_INT 2
37193: NONEQUAL
37194: IFFALSE 37208
// begin result := false ;
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: LD_INT 0
37203: ST_TO_ADDR
// exit ;
37204: POP
37205: POP
37206: GO 37212
// end ;
37208: GO 37173
37210: POP
37211: POP
// end ;
37212: LD_VAR 0 3
37216: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37217: LD_INT 0
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37232: LD_VAR 0 1
37236: NOT
37237: PUSH
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL_OW 257
37247: PUSH
37248: LD_INT 9
37250: NONEQUAL
37251: OR
37252: IFFALSE 37256
// exit ;
37254: GO 37829
// side := GetSide ( unit ) ;
37256: LD_ADDR_VAR 0 9
37260: PUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 255
37270: ST_TO_ADDR
// tech_space := tech_spacanom ;
37271: LD_ADDR_VAR 0 12
37275: PUSH
37276: LD_INT 29
37278: ST_TO_ADDR
// tech_time := tech_taurad ;
37279: LD_ADDR_VAR 0 13
37283: PUSH
37284: LD_INT 28
37286: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37287: LD_ADDR_VAR 0 11
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 310
37301: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37302: LD_VAR 0 11
37306: PPUSH
37307: CALL_OW 247
37311: PUSH
37312: LD_INT 2
37314: EQUAL
37315: IFFALSE 37319
// exit ;
37317: GO 37829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37319: LD_ADDR_VAR 0 8
37323: PUSH
37324: LD_INT 81
37326: PUSH
37327: LD_VAR 0 9
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: LD_INT 21
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PPUSH
37357: CALL_OW 69
37361: ST_TO_ADDR
// if not tmp then
37362: LD_VAR 0 8
37366: NOT
37367: IFFALSE 37371
// exit ;
37369: GO 37829
// if in_unit then
37371: LD_VAR 0 11
37375: IFFALSE 37399
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37377: LD_ADDR_VAR 0 10
37381: PUSH
37382: LD_VAR 0 8
37386: PPUSH
37387: LD_VAR 0 11
37391: PPUSH
37392: CALL_OW 74
37396: ST_TO_ADDR
37397: GO 37419
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37399: LD_ADDR_VAR 0 10
37403: PUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: LD_VAR 0 1
37413: PPUSH
37414: CALL_OW 74
37418: ST_TO_ADDR
// if not enemy then
37419: LD_VAR 0 10
37423: NOT
37424: IFFALSE 37428
// exit ;
37426: GO 37829
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37428: LD_VAR 0 11
37432: PUSH
37433: LD_VAR 0 11
37437: PPUSH
37438: LD_VAR 0 10
37442: PPUSH
37443: CALL_OW 296
37447: PUSH
37448: LD_INT 13
37450: GREATER
37451: AND
37452: PUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: LD_VAR 0 10
37462: PPUSH
37463: CALL_OW 296
37467: PUSH
37468: LD_INT 12
37470: GREATER
37471: OR
37472: IFFALSE 37476
// exit ;
37474: GO 37829
// missile := [ 1 ] ;
37476: LD_ADDR_VAR 0 14
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37487: LD_VAR 0 9
37491: PPUSH
37492: LD_VAR 0 12
37496: PPUSH
37497: CALL_OW 325
37501: IFFALSE 37530
// missile := Insert ( missile , missile + 1 , 2 ) ;
37503: LD_ADDR_VAR 0 14
37507: PUSH
37508: LD_VAR 0 14
37512: PPUSH
37513: LD_VAR 0 14
37517: PUSH
37518: LD_INT 1
37520: PLUS
37521: PPUSH
37522: LD_INT 2
37524: PPUSH
37525: CALL_OW 2
37529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37530: LD_VAR 0 9
37534: PPUSH
37535: LD_VAR 0 13
37539: PPUSH
37540: CALL_OW 325
37544: PUSH
37545: LD_VAR 0 10
37549: PPUSH
37550: CALL_OW 255
37554: PPUSH
37555: LD_VAR 0 13
37559: PPUSH
37560: CALL_OW 325
37564: NOT
37565: AND
37566: IFFALSE 37595
// missile := Insert ( missile , missile + 1 , 3 ) ;
37568: LD_ADDR_VAR 0 14
37572: PUSH
37573: LD_VAR 0 14
37577: PPUSH
37578: LD_VAR 0 14
37582: PUSH
37583: LD_INT 1
37585: PLUS
37586: PPUSH
37587: LD_INT 3
37589: PPUSH
37590: CALL_OW 2
37594: ST_TO_ADDR
// if missile < 2 then
37595: LD_VAR 0 14
37599: PUSH
37600: LD_INT 2
37602: LESS
37603: IFFALSE 37607
// exit ;
37605: GO 37829
// x := GetX ( enemy ) ;
37607: LD_ADDR_VAR 0 4
37611: PUSH
37612: LD_VAR 0 10
37616: PPUSH
37617: CALL_OW 250
37621: ST_TO_ADDR
// y := GetY ( enemy ) ;
37622: LD_ADDR_VAR 0 5
37626: PUSH
37627: LD_VAR 0 10
37631: PPUSH
37632: CALL_OW 251
37636: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37637: LD_ADDR_VAR 0 6
37641: PUSH
37642: LD_VAR 0 4
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PPUSH
37651: LD_INT 1
37653: PPUSH
37654: CALL_OW 12
37658: PLUS
37659: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37660: LD_ADDR_VAR 0 7
37664: PUSH
37665: LD_VAR 0 5
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PPUSH
37674: LD_INT 1
37676: PPUSH
37677: CALL_OW 12
37681: PLUS
37682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37683: LD_VAR 0 6
37687: PPUSH
37688: LD_VAR 0 7
37692: PPUSH
37693: CALL_OW 488
37697: NOT
37698: IFFALSE 37720
// begin _x := x ;
37700: LD_ADDR_VAR 0 6
37704: PUSH
37705: LD_VAR 0 4
37709: ST_TO_ADDR
// _y := y ;
37710: LD_ADDR_VAR 0 7
37714: PUSH
37715: LD_VAR 0 5
37719: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 1
37727: PPUSH
37728: LD_VAR 0 14
37732: PPUSH
37733: CALL_OW 12
37737: ST_TO_ADDR
// case i of 1 :
37738: LD_VAR 0 3
37742: PUSH
37743: LD_INT 1
37745: DOUBLE
37746: EQUAL
37747: IFTRUE 37751
37749: GO 37768
37751: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_VAR 0 10
37761: PPUSH
37762: CALL_OW 115
37766: GO 37829
37768: LD_INT 2
37770: DOUBLE
37771: EQUAL
37772: IFTRUE 37776
37774: GO 37798
37776: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_VAR 0 6
37786: PPUSH
37787: LD_VAR 0 7
37791: PPUSH
37792: CALL_OW 153
37796: GO 37829
37798: LD_INT 3
37800: DOUBLE
37801: EQUAL
37802: IFTRUE 37806
37804: GO 37828
37806: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37807: LD_VAR 0 1
37811: PPUSH
37812: LD_VAR 0 6
37816: PPUSH
37817: LD_VAR 0 7
37821: PPUSH
37822: CALL_OW 154
37826: GO 37829
37828: POP
// end ;
37829: LD_VAR 0 2
37833: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37834: LD_INT 0
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
// if not unit or not building then
37842: LD_VAR 0 1
37846: NOT
37847: PUSH
37848: LD_VAR 0 2
37852: NOT
37853: OR
37854: IFFALSE 37858
// exit ;
37856: GO 38016
// x := GetX ( building ) ;
37858: LD_ADDR_VAR 0 5
37862: PUSH
37863: LD_VAR 0 2
37867: PPUSH
37868: CALL_OW 250
37872: ST_TO_ADDR
// y := GetY ( building ) ;
37873: LD_ADDR_VAR 0 6
37877: PUSH
37878: LD_VAR 0 2
37882: PPUSH
37883: CALL_OW 251
37887: ST_TO_ADDR
// for i = 0 to 5 do
37888: LD_ADDR_VAR 0 4
37892: PUSH
37893: DOUBLE
37894: LD_INT 0
37896: DEC
37897: ST_TO_ADDR
37898: LD_INT 5
37900: PUSH
37901: FOR_TO
37902: IFFALSE 38014
// begin _x := ShiftX ( x , i , 3 ) ;
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: LD_VAR 0 5
37913: PPUSH
37914: LD_VAR 0 4
37918: PPUSH
37919: LD_INT 3
37921: PPUSH
37922: CALL_OW 272
37926: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37927: LD_ADDR_VAR 0 8
37931: PUSH
37932: LD_VAR 0 6
37936: PPUSH
37937: LD_VAR 0 4
37941: PPUSH
37942: LD_INT 3
37944: PPUSH
37945: CALL_OW 273
37949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37950: LD_VAR 0 7
37954: PPUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: CALL_OW 488
37964: NOT
37965: IFFALSE 37969
// continue ;
37967: GO 37901
// if HexInfo ( _x , _y ) = 0 then
37969: LD_VAR 0 7
37973: PPUSH
37974: LD_VAR 0 8
37978: PPUSH
37979: CALL_OW 428
37983: PUSH
37984: LD_INT 0
37986: EQUAL
37987: IFFALSE 38012
// begin ComMoveXY ( unit , _x , _y ) ;
37989: LD_VAR 0 1
37993: PPUSH
37994: LD_VAR 0 7
37998: PPUSH
37999: LD_VAR 0 8
38003: PPUSH
38004: CALL_OW 111
// exit ;
38008: POP
38009: POP
38010: GO 38016
// end ; end ;
38012: GO 37901
38014: POP
38015: POP
// end ;
38016: LD_VAR 0 3
38020: RET
// export function ScanBase ( side , base_area ) ; begin
38021: LD_INT 0
38023: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: LD_VAR 0 2
38033: PPUSH
38034: LD_INT 81
38036: PUSH
38037: LD_VAR 0 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 70
38050: ST_TO_ADDR
// end ;
38051: LD_VAR 0 3
38055: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
// result := false ;
38062: LD_ADDR_VAR 0 2
38066: PUSH
38067: LD_INT 0
38069: ST_TO_ADDR
// side := GetSide ( unit ) ;
38070: LD_ADDR_VAR 0 3
38074: PUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL_OW 255
38084: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38085: LD_ADDR_VAR 0 4
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 248
38099: ST_TO_ADDR
// case nat of 1 :
38100: LD_VAR 0 4
38104: PUSH
38105: LD_INT 1
38107: DOUBLE
38108: EQUAL
38109: IFTRUE 38113
38111: GO 38124
38113: POP
// tech := tech_lassight ; 2 :
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_INT 12
38121: ST_TO_ADDR
38122: GO 38163
38124: LD_INT 2
38126: DOUBLE
38127: EQUAL
38128: IFTRUE 38132
38130: GO 38143
38132: POP
// tech := tech_mortar ; 3 :
38133: LD_ADDR_VAR 0 5
38137: PUSH
38138: LD_INT 41
38140: ST_TO_ADDR
38141: GO 38163
38143: LD_INT 3
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38151
38149: GO 38162
38151: POP
// tech := tech_bazooka ; end ;
38152: LD_ADDR_VAR 0 5
38156: PUSH
38157: LD_INT 44
38159: ST_TO_ADDR
38160: GO 38163
38162: POP
// if Researched ( side , tech ) then
38163: LD_VAR 0 3
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: CALL_OW 325
38177: IFFALSE 38204
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38179: LD_ADDR_VAR 0 2
38183: PUSH
38184: LD_INT 5
38186: PUSH
38187: LD_INT 8
38189: PUSH
38190: LD_INT 9
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: PUSH
38198: LD_VAR 0 4
38202: ARRAY
38203: ST_TO_ADDR
// end ;
38204: LD_VAR 0 2
38208: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38209: LD_INT 0
38211: PPUSH
38212: PPUSH
38213: PPUSH
// if not mines then
38214: LD_VAR 0 2
38218: NOT
38219: IFFALSE 38223
// exit ;
38221: GO 38367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38223: LD_ADDR_VAR 0 5
38227: PUSH
38228: LD_INT 81
38230: PUSH
38231: LD_VAR 0 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 3
38242: PUSH
38243: LD_INT 21
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PPUSH
38261: CALL_OW 69
38265: ST_TO_ADDR
// for i in mines do
38266: LD_ADDR_VAR 0 4
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: FOR_IN
38277: IFFALSE 38365
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38279: LD_VAR 0 4
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PPUSH
38288: LD_VAR 0 4
38292: PUSH
38293: LD_INT 2
38295: ARRAY
38296: PPUSH
38297: CALL_OW 458
38301: NOT
38302: IFFALSE 38306
// continue ;
38304: GO 38276
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38306: LD_VAR 0 4
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 4
38319: PUSH
38320: LD_INT 2
38322: ARRAY
38323: PPUSH
38324: CALL_OW 428
38328: PUSH
38329: LD_VAR 0 5
38333: IN
38334: IFFALSE 38363
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38336: LD_VAR 0 4
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PPUSH
38345: LD_VAR 0 4
38349: PUSH
38350: LD_INT 2
38352: ARRAY
38353: PPUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 456
// end ;
38363: GO 38276
38365: POP
38366: POP
// end ;
38367: LD_VAR 0 3
38371: RET
// export function Count ( array ) ; var i ; begin
38372: LD_INT 0
38374: PPUSH
38375: PPUSH
// result := 0 ;
38376: LD_ADDR_VAR 0 2
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// for i in array do
38384: LD_ADDR_VAR 0 3
38388: PUSH
38389: LD_VAR 0 1
38393: PUSH
38394: FOR_IN
38395: IFFALSE 38419
// if i then
38397: LD_VAR 0 3
38401: IFFALSE 38417
// result := result + 1 ;
38403: LD_ADDR_VAR 0 2
38407: PUSH
38408: LD_VAR 0 2
38412: PUSH
38413: LD_INT 1
38415: PLUS
38416: ST_TO_ADDR
38417: GO 38394
38419: POP
38420: POP
// end ;
38421: LD_VAR 0 2
38425: RET
// export function IsEmpty ( building ) ; begin
38426: LD_INT 0
38428: PPUSH
// if not building then
38429: LD_VAR 0 1
38433: NOT
38434: IFFALSE 38438
// exit ;
38436: GO 38481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38438: LD_ADDR_VAR 0 2
38442: PUSH
38443: LD_VAR 0 1
38447: PUSH
38448: LD_INT 22
38450: PUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL_OW 255
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 58
38467: PUSH
38468: EMPTY
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PPUSH
38475: CALL_OW 69
38479: IN
38480: ST_TO_ADDR
// end ;
38481: LD_VAR 0 2
38485: RET
// export function IsNotFull ( building ) ; begin
38486: LD_INT 0
38488: PPUSH
// if not building then
38489: LD_VAR 0 1
38493: NOT
38494: IFFALSE 38498
// exit ;
38496: GO 38517
// result := UnitsInside ( building ) < 6 ;
38498: LD_ADDR_VAR 0 2
38502: PUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 313
38512: PUSH
38513: LD_INT 6
38515: LESS
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 2
38521: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
// tmp := [ ] ;
38528: LD_ADDR_VAR 0 3
38532: PUSH
38533: EMPTY
38534: ST_TO_ADDR
// list := [ ] ;
38535: LD_ADDR_VAR 0 5
38539: PUSH
38540: EMPTY
38541: ST_TO_ADDR
// for i = 16 to 25 do
38542: LD_ADDR_VAR 0 4
38546: PUSH
38547: DOUBLE
38548: LD_INT 16
38550: DEC
38551: ST_TO_ADDR
38552: LD_INT 25
38554: PUSH
38555: FOR_TO
38556: IFFALSE 38629
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38558: LD_ADDR_VAR 0 3
38562: PUSH
38563: LD_VAR 0 3
38567: PUSH
38568: LD_INT 22
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 255
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 91
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: LD_INT 6
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_VAR 0 4
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: PPUSH
38621: CALL_OW 69
38625: ADD
38626: ST_TO_ADDR
38627: GO 38555
38629: POP
38630: POP
// for i = 1 to tmp do
38631: LD_ADDR_VAR 0 4
38635: PUSH
38636: DOUBLE
38637: LD_INT 1
38639: DEC
38640: ST_TO_ADDR
38641: LD_VAR 0 3
38645: PUSH
38646: FOR_TO
38647: IFFALSE 38735
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_VAR 0 5
38658: PUSH
38659: LD_VAR 0 3
38663: PUSH
38664: LD_VAR 0 4
38668: ARRAY
38669: PPUSH
38670: CALL_OW 266
38674: PUSH
38675: LD_VAR 0 3
38679: PUSH
38680: LD_VAR 0 4
38684: ARRAY
38685: PPUSH
38686: CALL_OW 250
38690: PUSH
38691: LD_VAR 0 3
38695: PUSH
38696: LD_VAR 0 4
38700: ARRAY
38701: PPUSH
38702: CALL_OW 251
38706: PUSH
38707: LD_VAR 0 3
38711: PUSH
38712: LD_VAR 0 4
38716: ARRAY
38717: PPUSH
38718: CALL_OW 254
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: ADD
38732: ST_TO_ADDR
38733: GO 38646
38735: POP
38736: POP
// result := list ;
38737: LD_ADDR_VAR 0 2
38741: PUSH
38742: LD_VAR 0 5
38746: ST_TO_ADDR
// end ;
38747: LD_VAR 0 2
38751: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38752: LD_INT 0
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
// if not factory then
38761: LD_VAR 0 1
38765: NOT
38766: IFFALSE 38770
// exit ;
38768: GO 39363
// if control = control_apeman then
38770: LD_VAR 0 4
38774: PUSH
38775: LD_INT 5
38777: EQUAL
38778: IFFALSE 38887
// begin tmp := UnitsInside ( factory ) ;
38780: LD_ADDR_VAR 0 8
38784: PUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 313
38794: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38795: LD_VAR 0 8
38799: PPUSH
38800: LD_INT 25
38802: PUSH
38803: LD_INT 12
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PPUSH
38810: CALL_OW 72
38814: NOT
38815: IFFALSE 38825
// control := control_manual ;
38817: LD_ADDR_VAR 0 4
38821: PUSH
38822: LD_INT 1
38824: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38825: LD_ADDR_VAR 0 8
38829: PUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: CALL 38522 0 1
38839: ST_TO_ADDR
// if tmp then
38840: LD_VAR 0 8
38844: IFFALSE 38887
// begin for i in tmp do
38846: LD_ADDR_VAR 0 7
38850: PUSH
38851: LD_VAR 0 8
38855: PUSH
38856: FOR_IN
38857: IFFALSE 38885
// if i [ 1 ] = b_ext_radio then
38859: LD_VAR 0 7
38863: PUSH
38864: LD_INT 1
38866: ARRAY
38867: PUSH
38868: LD_INT 22
38870: EQUAL
38871: IFFALSE 38883
// begin control := control_remote ;
38873: LD_ADDR_VAR 0 4
38877: PUSH
38878: LD_INT 2
38880: ST_TO_ADDR
// break ;
38881: GO 38885
// end ;
38883: GO 38856
38885: POP
38886: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_VAR 0 2
38896: PPUSH
38897: LD_VAR 0 3
38901: PPUSH
38902: LD_VAR 0 4
38906: PPUSH
38907: LD_VAR 0 5
38911: PPUSH
38912: CALL_OW 448
38916: IFFALSE 38951
// begin result := [ chassis , engine , control , weapon ] ;
38918: LD_ADDR_VAR 0 6
38922: PUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_VAR 0 3
38932: PUSH
38933: LD_VAR 0 4
38937: PUSH
38938: LD_VAR 0 5
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// exit ;
38949: GO 39363
// end ; _chassis := AvailableChassisList ( factory ) ;
38951: LD_ADDR_VAR 0 9
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 475
38965: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38966: LD_ADDR_VAR 0 11
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 476
38980: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38981: LD_ADDR_VAR 0 12
38985: PUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 477
38995: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38996: LD_ADDR_VAR 0 10
39000: PUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 478
39010: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39011: LD_VAR 0 9
39015: NOT
39016: PUSH
39017: LD_VAR 0 11
39021: NOT
39022: OR
39023: PUSH
39024: LD_VAR 0 12
39028: NOT
39029: OR
39030: PUSH
39031: LD_VAR 0 10
39035: NOT
39036: OR
39037: IFFALSE 39072
// begin result := [ chassis , engine , control , weapon ] ;
39039: LD_ADDR_VAR 0 6
39043: PUSH
39044: LD_VAR 0 2
39048: PUSH
39049: LD_VAR 0 3
39053: PUSH
39054: LD_VAR 0 4
39058: PUSH
39059: LD_VAR 0 5
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: ST_TO_ADDR
// exit ;
39070: GO 39363
// end ; if not chassis in _chassis then
39072: LD_VAR 0 2
39076: PUSH
39077: LD_VAR 0 9
39081: IN
39082: NOT
39083: IFFALSE 39109
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39085: LD_ADDR_VAR 0 2
39089: PUSH
39090: LD_VAR 0 9
39094: PUSH
39095: LD_INT 1
39097: PPUSH
39098: LD_VAR 0 9
39102: PPUSH
39103: CALL_OW 12
39107: ARRAY
39108: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39109: LD_VAR 0 2
39113: PPUSH
39114: LD_VAR 0 3
39118: PPUSH
39119: CALL 39368 0 2
39123: NOT
39124: IFFALSE 39183
// repeat engine := _engine [ 1 ] ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: LD_VAR 0 11
39135: PUSH
39136: LD_INT 1
39138: ARRAY
39139: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39140: LD_ADDR_VAR 0 11
39144: PUSH
39145: LD_VAR 0 11
39149: PPUSH
39150: LD_INT 1
39152: PPUSH
39153: CALL_OW 3
39157: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39158: LD_VAR 0 2
39162: PPUSH
39163: LD_VAR 0 3
39167: PPUSH
39168: CALL 39368 0 2
39172: PUSH
39173: LD_VAR 0 11
39177: PUSH
39178: EMPTY
39179: EQUAL
39180: OR
39181: IFFALSE 39126
// if not control in _control then
39183: LD_VAR 0 4
39187: PUSH
39188: LD_VAR 0 12
39192: IN
39193: NOT
39194: IFFALSE 39220
// control := _control [ rand ( 1 , _control ) ] ;
39196: LD_ADDR_VAR 0 4
39200: PUSH
39201: LD_VAR 0 12
39205: PUSH
39206: LD_INT 1
39208: PPUSH
39209: LD_VAR 0 12
39213: PPUSH
39214: CALL_OW 12
39218: ARRAY
39219: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39220: LD_VAR 0 2
39224: PPUSH
39225: LD_VAR 0 5
39229: PPUSH
39230: CALL 39588 0 2
39234: NOT
39235: IFFALSE 39294
// repeat weapon := _weapon [ 1 ] ;
39237: LD_ADDR_VAR 0 5
39241: PUSH
39242: LD_VAR 0 10
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39251: LD_ADDR_VAR 0 10
39255: PUSH
39256: LD_VAR 0 10
39260: PPUSH
39261: LD_INT 1
39263: PPUSH
39264: CALL_OW 3
39268: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39269: LD_VAR 0 2
39273: PPUSH
39274: LD_VAR 0 5
39278: PPUSH
39279: CALL 39588 0 2
39283: PUSH
39284: LD_VAR 0 10
39288: PUSH
39289: EMPTY
39290: EQUAL
39291: OR
39292: IFFALSE 39237
// result := [ ] ;
39294: LD_ADDR_VAR 0 6
39298: PUSH
39299: EMPTY
39300: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39301: LD_VAR 0 1
39305: PPUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: LD_VAR 0 3
39315: PPUSH
39316: LD_VAR 0 4
39320: PPUSH
39321: LD_VAR 0 5
39325: PPUSH
39326: CALL_OW 448
39330: IFFALSE 39363
// result := [ chassis , engine , control , weapon ] ;
39332: LD_ADDR_VAR 0 6
39336: PUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_VAR 0 3
39346: PUSH
39347: LD_VAR 0 4
39351: PUSH
39352: LD_VAR 0 5
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: ST_TO_ADDR
// end ;
39363: LD_VAR 0 6
39367: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39368: LD_INT 0
39370: PPUSH
// if not chassis or not engine then
39371: LD_VAR 0 1
39375: NOT
39376: PUSH
39377: LD_VAR 0 2
39381: NOT
39382: OR
39383: IFFALSE 39387
// exit ;
39385: GO 39583
// case engine of engine_solar :
39387: LD_VAR 0 2
39391: PUSH
39392: LD_INT 2
39394: DOUBLE
39395: EQUAL
39396: IFTRUE 39400
39398: GO 39438
39400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39401: LD_ADDR_VAR 0 3
39405: PUSH
39406: LD_INT 11
39408: PUSH
39409: LD_INT 12
39411: PUSH
39412: LD_INT 13
39414: PUSH
39415: LD_INT 14
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
39436: GO 39567
39438: LD_INT 1
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39508
39446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 11
39454: PUSH
39455: LD_INT 12
39457: PUSH
39458: LD_INT 13
39460: PUSH
39461: LD_INT 14
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 4
39475: PUSH
39476: LD_INT 5
39478: PUSH
39479: LD_INT 21
39481: PUSH
39482: LD_INT 23
39484: PUSH
39485: LD_INT 22
39487: PUSH
39488: LD_INT 24
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: ST_TO_ADDR
39506: GO 39567
39508: LD_INT 3
39510: DOUBLE
39511: EQUAL
39512: IFTRUE 39516
39514: GO 39566
39516: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_INT 13
39524: PUSH
39525: LD_INT 14
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: LD_INT 4
39536: PUSH
39537: LD_INT 5
39539: PUSH
39540: LD_INT 21
39542: PUSH
39543: LD_INT 22
39545: PUSH
39546: LD_INT 23
39548: PUSH
39549: LD_INT 24
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
39564: GO 39567
39566: POP
// result := ( chassis in result ) ;
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_VAR 0 1
39576: PUSH
39577: LD_VAR 0 3
39581: IN
39582: ST_TO_ADDR
// end ;
39583: LD_VAR 0 3
39587: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39588: LD_INT 0
39590: PPUSH
// if not chassis or not weapon then
39591: LD_VAR 0 1
39595: NOT
39596: PUSH
39597: LD_VAR 0 2
39601: NOT
39602: OR
39603: IFFALSE 39607
// exit ;
39605: GO 40669
// case weapon of us_machine_gun :
39607: LD_VAR 0 2
39611: PUSH
39612: LD_INT 2
39614: DOUBLE
39615: EQUAL
39616: IFTRUE 39620
39618: GO 39650
39620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: LD_INT 4
39637: PUSH
39638: LD_INT 5
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
39648: GO 40653
39650: LD_INT 3
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 39688
39658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: LD_INT 4
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: ST_TO_ADDR
39686: GO 40653
39688: LD_INT 11
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39726
39696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: LD_INT 4
39713: PUSH
39714: LD_INT 5
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
39724: GO 40653
39726: LD_INT 4
39728: DOUBLE
39729: EQUAL
39730: IFTRUE 39734
39732: GO 39760
39734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 3
39745: PUSH
39746: LD_INT 4
39748: PUSH
39749: LD_INT 5
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
39758: GO 40653
39760: LD_INT 5
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39794
39768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: LD_INT 4
39782: PUSH
39783: LD_INT 5
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
39792: GO 40653
39794: LD_INT 9
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39828
39802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: LD_INT 4
39816: PUSH
39817: LD_INT 5
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 40653
39828: LD_INT 7
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39862
39836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 5
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
39860: GO 40653
39862: LD_INT 12
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39870
39868: GO 39896
39870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 3
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: LD_INT 5
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
39894: GO 40653
39896: LD_INT 13
39898: DOUBLE
39899: EQUAL
39900: IFTRUE 39904
39902: GO 39930
39904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 4
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: ST_TO_ADDR
39928: GO 40653
39930: LD_INT 14
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39938
39936: GO 39956
39938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_INT 4
39946: PUSH
39947: LD_INT 5
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: ST_TO_ADDR
39954: GO 40653
39956: LD_INT 6
39958: DOUBLE
39959: EQUAL
39960: IFTRUE 39964
39962: GO 39982
39964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_INT 4
39972: PUSH
39973: LD_INT 5
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: ST_TO_ADDR
39980: GO 40653
39982: LD_INT 10
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40008
39990: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_INT 4
39998: PUSH
39999: LD_INT 5
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: ST_TO_ADDR
40006: GO 40653
40008: LD_INT 22
40010: DOUBLE
40011: EQUAL
40012: IFTRUE 40016
40014: GO 40042
40016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40017: LD_ADDR_VAR 0 3
40021: PUSH
40022: LD_INT 11
40024: PUSH
40025: LD_INT 12
40027: PUSH
40028: LD_INT 13
40030: PUSH
40031: LD_INT 14
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: ST_TO_ADDR
40040: GO 40653
40042: LD_INT 23
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40076
40050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_INT 11
40058: PUSH
40059: LD_INT 12
40061: PUSH
40062: LD_INT 13
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: ST_TO_ADDR
40074: GO 40653
40076: LD_INT 24
40078: DOUBLE
40079: EQUAL
40080: IFTRUE 40084
40082: GO 40110
40084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: LD_INT 11
40092: PUSH
40093: LD_INT 12
40095: PUSH
40096: LD_INT 13
40098: PUSH
40099: LD_INT 14
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
40108: GO 40653
40110: LD_INT 30
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40144
40118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40119: LD_ADDR_VAR 0 3
40123: PUSH
40124: LD_INT 11
40126: PUSH
40127: LD_INT 12
40129: PUSH
40130: LD_INT 13
40132: PUSH
40133: LD_INT 14
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
40142: GO 40653
40144: LD_INT 25
40146: DOUBLE
40147: EQUAL
40148: IFTRUE 40152
40150: GO 40170
40152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40153: LD_ADDR_VAR 0 3
40157: PUSH
40158: LD_INT 13
40160: PUSH
40161: LD_INT 14
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: ST_TO_ADDR
40168: GO 40653
40170: LD_INT 27
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40178
40176: GO 40196
40178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40179: LD_ADDR_VAR 0 3
40183: PUSH
40184: LD_INT 13
40186: PUSH
40187: LD_INT 14
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: ST_TO_ADDR
40194: GO 40653
40196: LD_EXP 64
40200: DOUBLE
40201: EQUAL
40202: IFTRUE 40206
40204: GO 40232
40206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40207: LD_ADDR_VAR 0 3
40211: PUSH
40212: LD_INT 11
40214: PUSH
40215: LD_INT 12
40217: PUSH
40218: LD_INT 13
40220: PUSH
40221: LD_INT 14
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
40230: GO 40653
40232: LD_INT 28
40234: DOUBLE
40235: EQUAL
40236: IFTRUE 40240
40238: GO 40258
40240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_INT 13
40248: PUSH
40249: LD_INT 14
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: ST_TO_ADDR
40256: GO 40653
40258: LD_INT 29
40260: DOUBLE
40261: EQUAL
40262: IFTRUE 40266
40264: GO 40284
40266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40267: LD_ADDR_VAR 0 3
40271: PUSH
40272: LD_INT 13
40274: PUSH
40275: LD_INT 14
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: ST_TO_ADDR
40282: GO 40653
40284: LD_INT 31
40286: DOUBLE
40287: EQUAL
40288: IFTRUE 40292
40290: GO 40310
40292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: LD_INT 13
40300: PUSH
40301: LD_INT 14
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: ST_TO_ADDR
40308: GO 40653
40310: LD_INT 26
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40318
40316: GO 40336
40318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_INT 13
40326: PUSH
40327: LD_INT 14
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: ST_TO_ADDR
40334: GO 40653
40336: LD_INT 42
40338: DOUBLE
40339: EQUAL
40340: IFTRUE 40344
40342: GO 40370
40344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40345: LD_ADDR_VAR 0 3
40349: PUSH
40350: LD_INT 21
40352: PUSH
40353: LD_INT 22
40355: PUSH
40356: LD_INT 23
40358: PUSH
40359: LD_INT 24
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
40368: GO 40653
40370: LD_INT 43
40372: DOUBLE
40373: EQUAL
40374: IFTRUE 40378
40376: GO 40404
40378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40379: LD_ADDR_VAR 0 3
40383: PUSH
40384: LD_INT 21
40386: PUSH
40387: LD_INT 22
40389: PUSH
40390: LD_INT 23
40392: PUSH
40393: LD_INT 24
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
40402: GO 40653
40404: LD_INT 44
40406: DOUBLE
40407: EQUAL
40408: IFTRUE 40412
40410: GO 40438
40412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 22
40423: PUSH
40424: LD_INT 23
40426: PUSH
40427: LD_INT 24
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
40436: GO 40653
40438: LD_INT 45
40440: DOUBLE
40441: EQUAL
40442: IFTRUE 40446
40444: GO 40472
40446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40447: LD_ADDR_VAR 0 3
40451: PUSH
40452: LD_INT 21
40454: PUSH
40455: LD_INT 22
40457: PUSH
40458: LD_INT 23
40460: PUSH
40461: LD_INT 24
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
40470: GO 40653
40472: LD_INT 49
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40506
40480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_INT 21
40488: PUSH
40489: LD_INT 22
40491: PUSH
40492: LD_INT 23
40494: PUSH
40495: LD_INT 24
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
40504: GO 40653
40506: LD_INT 51
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40540
40514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_INT 21
40522: PUSH
40523: LD_INT 22
40525: PUSH
40526: LD_INT 23
40528: PUSH
40529: LD_INT 24
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
40538: GO 40653
40540: LD_INT 52
40542: DOUBLE
40543: EQUAL
40544: IFTRUE 40548
40546: GO 40574
40548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 21
40556: PUSH
40557: LD_INT 22
40559: PUSH
40560: LD_INT 23
40562: PUSH
40563: LD_INT 24
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
40572: GO 40653
40574: LD_INT 53
40576: DOUBLE
40577: EQUAL
40578: IFTRUE 40582
40580: GO 40600
40582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40583: LD_ADDR_VAR 0 3
40587: PUSH
40588: LD_INT 23
40590: PUSH
40591: LD_INT 24
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: ST_TO_ADDR
40598: GO 40653
40600: LD_INT 46
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40626
40608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 23
40616: PUSH
40617: LD_INT 24
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: ST_TO_ADDR
40624: GO 40653
40626: LD_INT 47
40628: DOUBLE
40629: EQUAL
40630: IFTRUE 40634
40632: GO 40652
40634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: LD_INT 23
40642: PUSH
40643: LD_INT 24
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: ST_TO_ADDR
40650: GO 40653
40652: POP
// result := ( chassis in result ) ;
40653: LD_ADDR_VAR 0 3
40657: PUSH
40658: LD_VAR 0 1
40662: PUSH
40663: LD_VAR 0 3
40667: IN
40668: ST_TO_ADDR
// end ;
40669: LD_VAR 0 3
40673: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40674: LD_INT 0
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
// result := array ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_VAR 0 1
40692: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40693: LD_VAR 0 1
40697: NOT
40698: PUSH
40699: LD_VAR 0 2
40703: NOT
40704: OR
40705: PUSH
40706: LD_VAR 0 3
40710: NOT
40711: OR
40712: PUSH
40713: LD_VAR 0 2
40717: PUSH
40718: LD_VAR 0 1
40722: GREATER
40723: OR
40724: PUSH
40725: LD_VAR 0 3
40729: PUSH
40730: LD_VAR 0 1
40734: GREATER
40735: OR
40736: IFFALSE 40740
// exit ;
40738: GO 41036
// if direction then
40740: LD_VAR 0 4
40744: IFFALSE 40808
// begin d := 1 ;
40746: LD_ADDR_VAR 0 9
40750: PUSH
40751: LD_INT 1
40753: ST_TO_ADDR
// if i_from > i_to then
40754: LD_VAR 0 2
40758: PUSH
40759: LD_VAR 0 3
40763: GREATER
40764: IFFALSE 40790
// length := ( array - i_from ) + i_to else
40766: LD_ADDR_VAR 0 11
40770: PUSH
40771: LD_VAR 0 1
40775: PUSH
40776: LD_VAR 0 2
40780: MINUS
40781: PUSH
40782: LD_VAR 0 3
40786: PLUS
40787: ST_TO_ADDR
40788: GO 40806
// length := i_to - i_from ;
40790: LD_ADDR_VAR 0 11
40794: PUSH
40795: LD_VAR 0 3
40799: PUSH
40800: LD_VAR 0 2
40804: MINUS
40805: ST_TO_ADDR
// end else
40806: GO 40869
// begin d := - 1 ;
40808: LD_ADDR_VAR 0 9
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: ST_TO_ADDR
// if i_from > i_to then
40817: LD_VAR 0 2
40821: PUSH
40822: LD_VAR 0 3
40826: GREATER
40827: IFFALSE 40847
// length := i_from - i_to else
40829: LD_ADDR_VAR 0 11
40833: PUSH
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 3
40843: MINUS
40844: ST_TO_ADDR
40845: GO 40869
// length := ( array - i_to ) + i_from ;
40847: LD_ADDR_VAR 0 11
40851: PUSH
40852: LD_VAR 0 1
40856: PUSH
40857: LD_VAR 0 3
40861: MINUS
40862: PUSH
40863: LD_VAR 0 2
40867: PLUS
40868: ST_TO_ADDR
// end ; if not length then
40869: LD_VAR 0 11
40873: NOT
40874: IFFALSE 40878
// exit ;
40876: GO 41036
// tmp := array ;
40878: LD_ADDR_VAR 0 10
40882: PUSH
40883: LD_VAR 0 1
40887: ST_TO_ADDR
// for i = 1 to length do
40888: LD_ADDR_VAR 0 6
40892: PUSH
40893: DOUBLE
40894: LD_INT 1
40896: DEC
40897: ST_TO_ADDR
40898: LD_VAR 0 11
40902: PUSH
40903: FOR_TO
40904: IFFALSE 41024
// begin for j = 1 to array do
40906: LD_ADDR_VAR 0 7
40910: PUSH
40911: DOUBLE
40912: LD_INT 1
40914: DEC
40915: ST_TO_ADDR
40916: LD_VAR 0 1
40920: PUSH
40921: FOR_TO
40922: IFFALSE 41010
// begin k := j + d ;
40924: LD_ADDR_VAR 0 8
40928: PUSH
40929: LD_VAR 0 7
40933: PUSH
40934: LD_VAR 0 9
40938: PLUS
40939: ST_TO_ADDR
// if k > array then
40940: LD_VAR 0 8
40944: PUSH
40945: LD_VAR 0 1
40949: GREATER
40950: IFFALSE 40960
// k := 1 ;
40952: LD_ADDR_VAR 0 8
40956: PUSH
40957: LD_INT 1
40959: ST_TO_ADDR
// if not k then
40960: LD_VAR 0 8
40964: NOT
40965: IFFALSE 40977
// k := array ;
40967: LD_ADDR_VAR 0 8
40971: PUSH
40972: LD_VAR 0 1
40976: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40977: LD_ADDR_VAR 0 10
40981: PUSH
40982: LD_VAR 0 10
40986: PPUSH
40987: LD_VAR 0 8
40991: PPUSH
40992: LD_VAR 0 1
40996: PUSH
40997: LD_VAR 0 7
41001: ARRAY
41002: PPUSH
41003: CALL_OW 1
41007: ST_TO_ADDR
// end ;
41008: GO 40921
41010: POP
41011: POP
// array := tmp ;
41012: LD_ADDR_VAR 0 1
41016: PUSH
41017: LD_VAR 0 10
41021: ST_TO_ADDR
// end ;
41022: GO 40903
41024: POP
41025: POP
// result := array ;
41026: LD_ADDR_VAR 0 5
41030: PUSH
41031: LD_VAR 0 1
41035: ST_TO_ADDR
// end ;
41036: LD_VAR 0 5
41040: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41041: LD_INT 0
41043: PPUSH
41044: PPUSH
// result := 0 ;
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 0
41052: ST_TO_ADDR
// if not array or not value in array then
41053: LD_VAR 0 1
41057: NOT
41058: PUSH
41059: LD_VAR 0 2
41063: PUSH
41064: LD_VAR 0 1
41068: IN
41069: NOT
41070: OR
41071: IFFALSE 41075
// exit ;
41073: GO 41129
// for i = 1 to array do
41075: LD_ADDR_VAR 0 4
41079: PUSH
41080: DOUBLE
41081: LD_INT 1
41083: DEC
41084: ST_TO_ADDR
41085: LD_VAR 0 1
41089: PUSH
41090: FOR_TO
41091: IFFALSE 41127
// if value = array [ i ] then
41093: LD_VAR 0 2
41097: PUSH
41098: LD_VAR 0 1
41102: PUSH
41103: LD_VAR 0 4
41107: ARRAY
41108: EQUAL
41109: IFFALSE 41125
// begin result := i ;
41111: LD_ADDR_VAR 0 3
41115: PUSH
41116: LD_VAR 0 4
41120: ST_TO_ADDR
// exit ;
41121: POP
41122: POP
41123: GO 41129
// end ;
41125: GO 41090
41127: POP
41128: POP
// end ;
41129: LD_VAR 0 3
41133: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41134: LD_INT 0
41136: PPUSH
// vc_chassis := chassis ;
41137: LD_ADDR_OWVAR 37
41141: PUSH
41142: LD_VAR 0 1
41146: ST_TO_ADDR
// vc_engine := engine ;
41147: LD_ADDR_OWVAR 39
41151: PUSH
41152: LD_VAR 0 2
41156: ST_TO_ADDR
// vc_control := control ;
41157: LD_ADDR_OWVAR 38
41161: PUSH
41162: LD_VAR 0 3
41166: ST_TO_ADDR
// vc_weapon := weapon ;
41167: LD_ADDR_OWVAR 40
41171: PUSH
41172: LD_VAR 0 4
41176: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41177: LD_ADDR_OWVAR 41
41181: PUSH
41182: LD_VAR 0 5
41186: ST_TO_ADDR
// end ;
41187: LD_VAR 0 6
41191: RET
// export function WantPlant ( unit ) ; var task ; begin
41192: LD_INT 0
41194: PPUSH
41195: PPUSH
// result := false ;
41196: LD_ADDR_VAR 0 2
41200: PUSH
41201: LD_INT 0
41203: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 437
41218: ST_TO_ADDR
// if task then
41219: LD_VAR 0 3
41223: IFFALSE 41251
// if task [ 1 ] [ 1 ] = p then
41225: LD_VAR 0 3
41229: PUSH
41230: LD_INT 1
41232: ARRAY
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PUSH
41238: LD_STRING p
41240: EQUAL
41241: IFFALSE 41251
// result := true ;
41243: LD_ADDR_VAR 0 2
41247: PUSH
41248: LD_INT 1
41250: ST_TO_ADDR
// end ;
41251: LD_VAR 0 2
41255: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41256: LD_INT 0
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
// if pos < 1 then
41262: LD_VAR 0 2
41266: PUSH
41267: LD_INT 1
41269: LESS
41270: IFFALSE 41274
// exit ;
41272: GO 41577
// if pos = 1 then
41274: LD_VAR 0 2
41278: PUSH
41279: LD_INT 1
41281: EQUAL
41282: IFFALSE 41315
// result := Replace ( arr , pos [ 1 ] , value ) else
41284: LD_ADDR_VAR 0 4
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_VAR 0 2
41298: PUSH
41299: LD_INT 1
41301: ARRAY
41302: PPUSH
41303: LD_VAR 0 3
41307: PPUSH
41308: CALL_OW 1
41312: ST_TO_ADDR
41313: GO 41577
// begin tmp := arr ;
41315: LD_ADDR_VAR 0 6
41319: PUSH
41320: LD_VAR 0 1
41324: ST_TO_ADDR
// s_arr := [ tmp ] ;
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: LD_VAR 0 6
41334: PUSH
41335: EMPTY
41336: LIST
41337: ST_TO_ADDR
// for i = 1 to pos - 1 do
41338: LD_ADDR_VAR 0 5
41342: PUSH
41343: DOUBLE
41344: LD_INT 1
41346: DEC
41347: ST_TO_ADDR
41348: LD_VAR 0 2
41352: PUSH
41353: LD_INT 1
41355: MINUS
41356: PUSH
41357: FOR_TO
41358: IFFALSE 41403
// begin tmp := tmp [ pos [ i ] ] ;
41360: LD_ADDR_VAR 0 6
41364: PUSH
41365: LD_VAR 0 6
41369: PUSH
41370: LD_VAR 0 2
41374: PUSH
41375: LD_VAR 0 5
41379: ARRAY
41380: ARRAY
41381: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41382: LD_ADDR_VAR 0 7
41386: PUSH
41387: LD_VAR 0 7
41391: PUSH
41392: LD_VAR 0 6
41396: PUSH
41397: EMPTY
41398: LIST
41399: ADD
41400: ST_TO_ADDR
// end ;
41401: GO 41357
41403: POP
41404: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41405: LD_ADDR_VAR 0 6
41409: PUSH
41410: LD_VAR 0 6
41414: PPUSH
41415: LD_VAR 0 2
41419: PUSH
41420: LD_VAR 0 2
41424: ARRAY
41425: PPUSH
41426: LD_VAR 0 3
41430: PPUSH
41431: CALL_OW 1
41435: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41436: LD_ADDR_VAR 0 7
41440: PUSH
41441: LD_VAR 0 7
41445: PPUSH
41446: LD_VAR 0 7
41450: PPUSH
41451: LD_VAR 0 6
41455: PPUSH
41456: CALL_OW 1
41460: ST_TO_ADDR
// for i = s_arr downto 2 do
41461: LD_ADDR_VAR 0 5
41465: PUSH
41466: DOUBLE
41467: LD_VAR 0 7
41471: INC
41472: ST_TO_ADDR
41473: LD_INT 2
41475: PUSH
41476: FOR_DOWNTO
41477: IFFALSE 41561
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41479: LD_ADDR_VAR 0 6
41483: PUSH
41484: LD_VAR 0 7
41488: PUSH
41489: LD_VAR 0 5
41493: PUSH
41494: LD_INT 1
41496: MINUS
41497: ARRAY
41498: PPUSH
41499: LD_VAR 0 2
41503: PUSH
41504: LD_VAR 0 5
41508: PUSH
41509: LD_INT 1
41511: MINUS
41512: ARRAY
41513: PPUSH
41514: LD_VAR 0 7
41518: PUSH
41519: LD_VAR 0 5
41523: ARRAY
41524: PPUSH
41525: CALL_OW 1
41529: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41530: LD_ADDR_VAR 0 7
41534: PUSH
41535: LD_VAR 0 7
41539: PPUSH
41540: LD_VAR 0 5
41544: PUSH
41545: LD_INT 1
41547: MINUS
41548: PPUSH
41549: LD_VAR 0 6
41553: PPUSH
41554: CALL_OW 1
41558: ST_TO_ADDR
// end ;
41559: GO 41476
41561: POP
41562: POP
// result := s_arr [ 1 ] ;
41563: LD_ADDR_VAR 0 4
41567: PUSH
41568: LD_VAR 0 7
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: ST_TO_ADDR
// end ; end ;
41577: LD_VAR 0 4
41581: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
// if not list then
41586: LD_VAR 0 1
41590: NOT
41591: IFFALSE 41595
// exit ;
41593: GO 41686
// i := list [ pos1 ] ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 1
41604: PUSH
41605: LD_VAR 0 2
41609: ARRAY
41610: ST_TO_ADDR
// if not i then
41611: LD_VAR 0 5
41615: NOT
41616: IFFALSE 41620
// exit ;
41618: GO 41686
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41620: LD_ADDR_VAR 0 1
41624: PUSH
41625: LD_VAR 0 1
41629: PPUSH
41630: LD_VAR 0 2
41634: PPUSH
41635: LD_VAR 0 1
41639: PUSH
41640: LD_VAR 0 3
41644: ARRAY
41645: PPUSH
41646: CALL_OW 1
41650: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41651: LD_ADDR_VAR 0 1
41655: PUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_VAR 0 3
41665: PPUSH
41666: LD_VAR 0 5
41670: PPUSH
41671: CALL_OW 1
41675: ST_TO_ADDR
// result := list ;
41676: LD_ADDR_VAR 0 4
41680: PUSH
41681: LD_VAR 0 1
41685: ST_TO_ADDR
// end ;
41686: LD_VAR 0 4
41690: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41691: LD_INT 0
41693: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_VAR 0 1
41703: PPUSH
41704: CALL_OW 250
41708: PPUSH
41709: LD_VAR 0 1
41713: PPUSH
41714: CALL_OW 251
41718: PPUSH
41719: LD_VAR 0 2
41723: PPUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: LD_VAR 0 4
41733: PPUSH
41734: CALL 41744 0 5
41738: ST_TO_ADDR
// end ;
41739: LD_VAR 0 5
41743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
// if not list then
41750: LD_VAR 0 3
41754: NOT
41755: IFFALSE 41759
// exit ;
41757: GO 42147
// result := [ ] ;
41759: LD_ADDR_VAR 0 6
41763: PUSH
41764: EMPTY
41765: ST_TO_ADDR
// for i in list do
41766: LD_ADDR_VAR 0 7
41770: PUSH
41771: LD_VAR 0 3
41775: PUSH
41776: FOR_IN
41777: IFFALSE 41979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41779: LD_ADDR_VAR 0 9
41783: PUSH
41784: LD_VAR 0 7
41788: PPUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: LD_VAR 0 2
41798: PPUSH
41799: CALL_OW 297
41803: ST_TO_ADDR
// if not result then
41804: LD_VAR 0 6
41808: NOT
41809: IFFALSE 41835
// result := [ [ i , tmp ] ] else
41811: LD_ADDR_VAR 0 6
41815: PUSH
41816: LD_VAR 0 7
41820: PUSH
41821: LD_VAR 0 9
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: ST_TO_ADDR
41833: GO 41977
// begin if result [ result ] [ 2 ] < tmp then
41835: LD_VAR 0 6
41839: PUSH
41840: LD_VAR 0 6
41844: ARRAY
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PUSH
41850: LD_VAR 0 9
41854: LESS
41855: IFFALSE 41897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41857: LD_ADDR_VAR 0 6
41861: PUSH
41862: LD_VAR 0 6
41866: PPUSH
41867: LD_VAR 0 6
41871: PUSH
41872: LD_INT 1
41874: PLUS
41875: PPUSH
41876: LD_VAR 0 7
41880: PUSH
41881: LD_VAR 0 9
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PPUSH
41890: CALL_OW 2
41894: ST_TO_ADDR
41895: GO 41977
// for j = 1 to result do
41897: LD_ADDR_VAR 0 8
41901: PUSH
41902: DOUBLE
41903: LD_INT 1
41905: DEC
41906: ST_TO_ADDR
41907: LD_VAR 0 6
41911: PUSH
41912: FOR_TO
41913: IFFALSE 41975
// begin if tmp < result [ j ] [ 2 ] then
41915: LD_VAR 0 9
41919: PUSH
41920: LD_VAR 0 6
41924: PUSH
41925: LD_VAR 0 8
41929: ARRAY
41930: PUSH
41931: LD_INT 2
41933: ARRAY
41934: LESS
41935: IFFALSE 41973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41937: LD_ADDR_VAR 0 6
41941: PUSH
41942: LD_VAR 0 6
41946: PPUSH
41947: LD_VAR 0 8
41951: PPUSH
41952: LD_VAR 0 7
41956: PUSH
41957: LD_VAR 0 9
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PPUSH
41966: CALL_OW 2
41970: ST_TO_ADDR
// break ;
41971: GO 41975
// end ; end ;
41973: GO 41912
41975: POP
41976: POP
// end ; end ;
41977: GO 41776
41979: POP
41980: POP
// if result and not asc then
41981: LD_VAR 0 6
41985: PUSH
41986: LD_VAR 0 4
41990: NOT
41991: AND
41992: IFFALSE 42067
// begin tmp := result ;
41994: LD_ADDR_VAR 0 9
41998: PUSH
41999: LD_VAR 0 6
42003: ST_TO_ADDR
// for i = tmp downto 1 do
42004: LD_ADDR_VAR 0 7
42008: PUSH
42009: DOUBLE
42010: LD_VAR 0 9
42014: INC
42015: ST_TO_ADDR
42016: LD_INT 1
42018: PUSH
42019: FOR_DOWNTO
42020: IFFALSE 42065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42022: LD_ADDR_VAR 0 6
42026: PUSH
42027: LD_VAR 0 6
42031: PPUSH
42032: LD_VAR 0 9
42036: PUSH
42037: LD_VAR 0 7
42041: MINUS
42042: PUSH
42043: LD_INT 1
42045: PLUS
42046: PPUSH
42047: LD_VAR 0 9
42051: PUSH
42052: LD_VAR 0 7
42056: ARRAY
42057: PPUSH
42058: CALL_OW 1
42062: ST_TO_ADDR
42063: GO 42019
42065: POP
42066: POP
// end ; tmp := [ ] ;
42067: LD_ADDR_VAR 0 9
42071: PUSH
42072: EMPTY
42073: ST_TO_ADDR
// if mode then
42074: LD_VAR 0 5
42078: IFFALSE 42147
// begin for i = 1 to result do
42080: LD_ADDR_VAR 0 7
42084: PUSH
42085: DOUBLE
42086: LD_INT 1
42088: DEC
42089: ST_TO_ADDR
42090: LD_VAR 0 6
42094: PUSH
42095: FOR_TO
42096: IFFALSE 42135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42098: LD_ADDR_VAR 0 9
42102: PUSH
42103: LD_VAR 0 9
42107: PPUSH
42108: LD_VAR 0 7
42112: PPUSH
42113: LD_VAR 0 6
42117: PUSH
42118: LD_VAR 0 7
42122: ARRAY
42123: PUSH
42124: LD_INT 1
42126: ARRAY
42127: PPUSH
42128: CALL_OW 1
42132: ST_TO_ADDR
42133: GO 42095
42135: POP
42136: POP
// result := tmp ;
42137: LD_ADDR_VAR 0 6
42141: PUSH
42142: LD_VAR 0 9
42146: ST_TO_ADDR
// end ; end ;
42147: LD_VAR 0 6
42151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42160: LD_ADDR_VAR 0 5
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// if not x or not y then
42182: LD_VAR 0 2
42186: NOT
42187: PUSH
42188: LD_VAR 0 3
42192: NOT
42193: OR
42194: IFFALSE 42198
// exit ;
42196: GO 43850
// if not range then
42198: LD_VAR 0 4
42202: NOT
42203: IFFALSE 42213
// range := 10 ;
42205: LD_ADDR_VAR 0 4
42209: PUSH
42210: LD_INT 10
42212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42213: LD_ADDR_VAR 0 8
42217: PUSH
42218: LD_INT 81
42220: PUSH
42221: LD_VAR 0 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 92
42232: PUSH
42233: LD_VAR 0 2
42237: PUSH
42238: LD_VAR 0 3
42242: PUSH
42243: LD_VAR 0 4
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 21
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: PPUSH
42276: CALL_OW 69
42280: ST_TO_ADDR
// if not tmp then
42281: LD_VAR 0 8
42285: NOT
42286: IFFALSE 42290
// exit ;
42288: GO 43850
// for i in tmp do
42290: LD_ADDR_VAR 0 6
42294: PUSH
42295: LD_VAR 0 8
42299: PUSH
42300: FOR_IN
42301: IFFALSE 43825
// begin points := [ 0 , 0 , 0 ] ;
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// bpoints := 1 ;
42322: LD_ADDR_VAR 0 10
42326: PUSH
42327: LD_INT 1
42329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42330: LD_VAR 0 6
42334: PPUSH
42335: CALL_OW 247
42339: PUSH
42340: LD_INT 1
42342: DOUBLE
42343: EQUAL
42344: IFTRUE 42348
42346: GO 42926
42348: POP
// begin if GetClass ( i ) = 1 then
42349: LD_VAR 0 6
42353: PPUSH
42354: CALL_OW 257
42358: PUSH
42359: LD_INT 1
42361: EQUAL
42362: IFFALSE 42383
// points := [ 10 , 5 , 3 ] ;
42364: LD_ADDR_VAR 0 9
42368: PUSH
42369: LD_INT 10
42371: PUSH
42372: LD_INT 5
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42383: LD_VAR 0 6
42387: PPUSH
42388: CALL_OW 257
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: LD_INT 4
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: IN
42407: IFFALSE 42428
// points := [ 3 , 2 , 1 ] ;
42409: LD_ADDR_VAR 0 9
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42428: LD_VAR 0 6
42432: PPUSH
42433: CALL_OW 257
42437: PUSH
42438: LD_INT 5
42440: EQUAL
42441: IFFALSE 42462
// points := [ 130 , 5 , 2 ] ;
42443: LD_ADDR_VAR 0 9
42447: PUSH
42448: LD_INT 130
42450: PUSH
42451: LD_INT 5
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42462: LD_VAR 0 6
42466: PPUSH
42467: CALL_OW 257
42471: PUSH
42472: LD_INT 8
42474: EQUAL
42475: IFFALSE 42496
// points := [ 35 , 35 , 30 ] ;
42477: LD_ADDR_VAR 0 9
42481: PUSH
42482: LD_INT 35
42484: PUSH
42485: LD_INT 35
42487: PUSH
42488: LD_INT 30
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42496: LD_VAR 0 6
42500: PPUSH
42501: CALL_OW 257
42505: PUSH
42506: LD_INT 9
42508: EQUAL
42509: IFFALSE 42530
// points := [ 20 , 55 , 40 ] ;
42511: LD_ADDR_VAR 0 9
42515: PUSH
42516: LD_INT 20
42518: PUSH
42519: LD_INT 55
42521: PUSH
42522: LD_INT 40
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42530: LD_VAR 0 6
42534: PPUSH
42535: CALL_OW 257
42539: PUSH
42540: LD_INT 12
42542: PUSH
42543: LD_INT 16
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: IN
42550: IFFALSE 42571
// points := [ 5 , 3 , 2 ] ;
42552: LD_ADDR_VAR 0 9
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42571: LD_VAR 0 6
42575: PPUSH
42576: CALL_OW 257
42580: PUSH
42581: LD_INT 17
42583: EQUAL
42584: IFFALSE 42605
// points := [ 100 , 50 , 75 ] ;
42586: LD_ADDR_VAR 0 9
42590: PUSH
42591: LD_INT 100
42593: PUSH
42594: LD_INT 50
42596: PUSH
42597: LD_INT 75
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42605: LD_VAR 0 6
42609: PPUSH
42610: CALL_OW 257
42614: PUSH
42615: LD_INT 15
42617: EQUAL
42618: IFFALSE 42639
// points := [ 10 , 5 , 3 ] ;
42620: LD_ADDR_VAR 0 9
42624: PUSH
42625: LD_INT 10
42627: PUSH
42628: LD_INT 5
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42639: LD_VAR 0 6
42643: PPUSH
42644: CALL_OW 257
42648: PUSH
42649: LD_INT 14
42651: EQUAL
42652: IFFALSE 42673
// points := [ 10 , 0 , 0 ] ;
42654: LD_ADDR_VAR 0 9
42658: PUSH
42659: LD_INT 10
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42673: LD_VAR 0 6
42677: PPUSH
42678: CALL_OW 257
42682: PUSH
42683: LD_INT 11
42685: EQUAL
42686: IFFALSE 42707
// points := [ 30 , 10 , 5 ] ;
42688: LD_ADDR_VAR 0 9
42692: PUSH
42693: LD_INT 30
42695: PUSH
42696: LD_INT 10
42698: PUSH
42699: LD_INT 5
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42707: LD_VAR 0 1
42711: PPUSH
42712: LD_INT 5
42714: PPUSH
42715: CALL_OW 321
42719: PUSH
42720: LD_INT 2
42722: EQUAL
42723: IFFALSE 42740
// bpoints := bpoints * 1.8 ;
42725: LD_ADDR_VAR 0 10
42729: PUSH
42730: LD_VAR 0 10
42734: PUSH
42735: LD_REAL  1.80000000000000E+0000
42738: MUL
42739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42740: LD_VAR 0 6
42744: PPUSH
42745: CALL_OW 257
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 3
42758: PUSH
42759: LD_INT 4
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: IN
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: LD_INT 51
42776: PPUSH
42777: CALL_OW 321
42781: PUSH
42782: LD_INT 2
42784: EQUAL
42785: AND
42786: IFFALSE 42803
// bpoints := bpoints * 1.2 ;
42788: LD_ADDR_VAR 0 10
42792: PUSH
42793: LD_VAR 0 10
42797: PUSH
42798: LD_REAL  1.20000000000000E+0000
42801: MUL
42802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42803: LD_VAR 0 6
42807: PPUSH
42808: CALL_OW 257
42812: PUSH
42813: LD_INT 5
42815: PUSH
42816: LD_INT 7
42818: PUSH
42819: LD_INT 9
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: IN
42827: PUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: LD_INT 52
42835: PPUSH
42836: CALL_OW 321
42840: PUSH
42841: LD_INT 2
42843: EQUAL
42844: AND
42845: IFFALSE 42862
// bpoints := bpoints * 1.5 ;
42847: LD_ADDR_VAR 0 10
42851: PUSH
42852: LD_VAR 0 10
42856: PUSH
42857: LD_REAL  1.50000000000000E+0000
42860: MUL
42861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42862: LD_VAR 0 1
42866: PPUSH
42867: LD_INT 66
42869: PPUSH
42870: CALL_OW 321
42874: PUSH
42875: LD_INT 2
42877: EQUAL
42878: IFFALSE 42895
// bpoints := bpoints * 1.1 ;
42880: LD_ADDR_VAR 0 10
42884: PUSH
42885: LD_VAR 0 10
42889: PUSH
42890: LD_REAL  1.10000000000000E+0000
42893: MUL
42894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42895: LD_ADDR_VAR 0 10
42899: PUSH
42900: LD_VAR 0 10
42904: PUSH
42905: LD_VAR 0 6
42909: PPUSH
42910: LD_INT 1
42912: PPUSH
42913: CALL_OW 259
42917: PUSH
42918: LD_REAL  1.15000000000000E+0000
42921: MUL
42922: MUL
42923: ST_TO_ADDR
// end ; unit_vehicle :
42924: GO 43754
42926: LD_INT 2
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42934
42932: GO 43742
42934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 264
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 42
42950: PUSH
42951: LD_INT 24
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: IN
42959: IFFALSE 42980
// points := [ 25 , 5 , 3 ] ;
42961: LD_ADDR_VAR 0 9
42965: PUSH
42966: LD_INT 25
42968: PUSH
42969: LD_INT 5
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42980: LD_VAR 0 6
42984: PPUSH
42985: CALL_OW 264
42989: PUSH
42990: LD_INT 4
42992: PUSH
42993: LD_INT 43
42995: PUSH
42996: LD_INT 25
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: IN
43004: IFFALSE 43025
// points := [ 40 , 15 , 5 ] ;
43006: LD_ADDR_VAR 0 9
43010: PUSH
43011: LD_INT 40
43013: PUSH
43014: LD_INT 15
43016: PUSH
43017: LD_INT 5
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43025: LD_VAR 0 6
43029: PPUSH
43030: CALL_OW 264
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 23
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: IN
43045: IFFALSE 43066
// points := [ 7 , 25 , 8 ] ;
43047: LD_ADDR_VAR 0 9
43051: PUSH
43052: LD_INT 7
43054: PUSH
43055: LD_INT 25
43057: PUSH
43058: LD_INT 8
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43066: LD_VAR 0 6
43070: PPUSH
43071: CALL_OW 264
43075: PUSH
43076: LD_INT 5
43078: PUSH
43079: LD_INT 27
43081: PUSH
43082: LD_INT 44
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: IN
43090: IFFALSE 43111
// points := [ 14 , 50 , 16 ] ;
43092: LD_ADDR_VAR 0 9
43096: PUSH
43097: LD_INT 14
43099: PUSH
43100: LD_INT 50
43102: PUSH
43103: LD_INT 16
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43111: LD_VAR 0 6
43115: PPUSH
43116: CALL_OW 264
43120: PUSH
43121: LD_INT 6
43123: PUSH
43124: LD_INT 46
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: IN
43131: IFFALSE 43152
// points := [ 32 , 120 , 70 ] ;
43133: LD_ADDR_VAR 0 9
43137: PUSH
43138: LD_INT 32
43140: PUSH
43141: LD_INT 120
43143: PUSH
43144: LD_INT 70
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43152: LD_VAR 0 6
43156: PPUSH
43157: CALL_OW 264
43161: PUSH
43162: LD_INT 7
43164: PUSH
43165: LD_INT 28
43167: PUSH
43168: LD_INT 45
43170: PUSH
43171: LD_EXP 64
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: IN
43182: IFFALSE 43203
// points := [ 35 , 20 , 45 ] ;
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_INT 35
43191: PUSH
43192: LD_INT 20
43194: PUSH
43195: LD_INT 45
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 264
43212: PUSH
43213: LD_INT 47
43215: PUSH
43216: EMPTY
43217: LIST
43218: IN
43219: IFFALSE 43240
// points := [ 67 , 45 , 75 ] ;
43221: LD_ADDR_VAR 0 9
43225: PUSH
43226: LD_INT 67
43228: PUSH
43229: LD_INT 45
43231: PUSH
43232: LD_INT 75
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43240: LD_VAR 0 6
43244: PPUSH
43245: CALL_OW 264
43249: PUSH
43250: LD_INT 26
43252: PUSH
43253: EMPTY
43254: LIST
43255: IN
43256: IFFALSE 43277
// points := [ 120 , 30 , 80 ] ;
43258: LD_ADDR_VAR 0 9
43262: PUSH
43263: LD_INT 120
43265: PUSH
43266: LD_INT 30
43268: PUSH
43269: LD_INT 80
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43277: LD_VAR 0 6
43281: PPUSH
43282: CALL_OW 264
43286: PUSH
43287: LD_INT 22
43289: PUSH
43290: EMPTY
43291: LIST
43292: IN
43293: IFFALSE 43314
// points := [ 40 , 1 , 1 ] ;
43295: LD_ADDR_VAR 0 9
43299: PUSH
43300: LD_INT 40
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43314: LD_VAR 0 6
43318: PPUSH
43319: CALL_OW 264
43323: PUSH
43324: LD_INT 29
43326: PUSH
43327: EMPTY
43328: LIST
43329: IN
43330: IFFALSE 43351
// points := [ 70 , 200 , 400 ] ;
43332: LD_ADDR_VAR 0 9
43336: PUSH
43337: LD_INT 70
43339: PUSH
43340: LD_INT 200
43342: PUSH
43343: LD_INT 400
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43351: LD_VAR 0 6
43355: PPUSH
43356: CALL_OW 264
43360: PUSH
43361: LD_INT 14
43363: PUSH
43364: LD_INT 53
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: IN
43371: IFFALSE 43392
// points := [ 40 , 10 , 20 ] ;
43373: LD_ADDR_VAR 0 9
43377: PUSH
43378: LD_INT 40
43380: PUSH
43381: LD_INT 10
43383: PUSH
43384: LD_INT 20
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 264
43401: PUSH
43402: LD_INT 9
43404: PUSH
43405: EMPTY
43406: LIST
43407: IN
43408: IFFALSE 43429
// points := [ 5 , 70 , 20 ] ;
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: LD_INT 70
43420: PUSH
43421: LD_INT 20
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43429: LD_VAR 0 6
43433: PPUSH
43434: CALL_OW 264
43438: PUSH
43439: LD_INT 10
43441: PUSH
43442: EMPTY
43443: LIST
43444: IN
43445: IFFALSE 43466
// points := [ 35 , 110 , 70 ] ;
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: LD_INT 35
43454: PUSH
43455: LD_INT 110
43457: PUSH
43458: LD_INT 70
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43466: LD_VAR 0 6
43470: PPUSH
43471: CALL_OW 265
43475: PUSH
43476: LD_INT 25
43478: EQUAL
43479: IFFALSE 43500
// points := [ 80 , 65 , 100 ] ;
43481: LD_ADDR_VAR 0 9
43485: PUSH
43486: LD_INT 80
43488: PUSH
43489: LD_INT 65
43491: PUSH
43492: LD_INT 100
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43500: LD_VAR 0 6
43504: PPUSH
43505: CALL_OW 263
43509: PUSH
43510: LD_INT 1
43512: EQUAL
43513: IFFALSE 43548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43515: LD_ADDR_VAR 0 10
43519: PUSH
43520: LD_VAR 0 10
43524: PUSH
43525: LD_VAR 0 6
43529: PPUSH
43530: CALL_OW 311
43534: PPUSH
43535: LD_INT 3
43537: PPUSH
43538: CALL_OW 259
43542: PUSH
43543: LD_INT 4
43545: MUL
43546: MUL
43547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43548: LD_VAR 0 6
43552: PPUSH
43553: CALL_OW 263
43557: PUSH
43558: LD_INT 2
43560: EQUAL
43561: IFFALSE 43612
// begin j := IsControledBy ( i ) ;
43563: LD_ADDR_VAR 0 7
43567: PUSH
43568: LD_VAR 0 6
43572: PPUSH
43573: CALL_OW 312
43577: ST_TO_ADDR
// if j then
43578: LD_VAR 0 7
43582: IFFALSE 43612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43584: LD_ADDR_VAR 0 10
43588: PUSH
43589: LD_VAR 0 10
43593: PUSH
43594: LD_VAR 0 7
43598: PPUSH
43599: LD_INT 3
43601: PPUSH
43602: CALL_OW 259
43606: PUSH
43607: LD_INT 3
43609: MUL
43610: MUL
43611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43612: LD_VAR 0 6
43616: PPUSH
43617: CALL_OW 264
43621: PUSH
43622: LD_INT 5
43624: PUSH
43625: LD_INT 6
43627: PUSH
43628: LD_INT 46
43630: PUSH
43631: LD_INT 44
43633: PUSH
43634: LD_INT 47
43636: PUSH
43637: LD_INT 45
43639: PUSH
43640: LD_INT 28
43642: PUSH
43643: LD_INT 7
43645: PUSH
43646: LD_INT 27
43648: PUSH
43649: LD_INT 29
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: IN
43664: PUSH
43665: LD_VAR 0 1
43669: PPUSH
43670: LD_INT 52
43672: PPUSH
43673: CALL_OW 321
43677: PUSH
43678: LD_INT 2
43680: EQUAL
43681: AND
43682: IFFALSE 43699
// bpoints := bpoints * 1.2 ;
43684: LD_ADDR_VAR 0 10
43688: PUSH
43689: LD_VAR 0 10
43693: PUSH
43694: LD_REAL  1.20000000000000E+0000
43697: MUL
43698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43699: LD_VAR 0 6
43703: PPUSH
43704: CALL_OW 264
43708: PUSH
43709: LD_INT 6
43711: PUSH
43712: LD_INT 46
43714: PUSH
43715: LD_INT 47
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: IN
43723: IFFALSE 43740
// bpoints := bpoints * 1.2 ;
43725: LD_ADDR_VAR 0 10
43729: PUSH
43730: LD_VAR 0 10
43734: PUSH
43735: LD_REAL  1.20000000000000E+0000
43738: MUL
43739: ST_TO_ADDR
// end ; unit_building :
43740: GO 43754
43742: LD_INT 3
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43753
43750: POP
// ; end ;
43751: GO 43754
43753: POP
// for j = 1 to 3 do
43754: LD_ADDR_VAR 0 7
43758: PUSH
43759: DOUBLE
43760: LD_INT 1
43762: DEC
43763: ST_TO_ADDR
43764: LD_INT 3
43766: PUSH
43767: FOR_TO
43768: IFFALSE 43821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_VAR 0 5
43779: PPUSH
43780: LD_VAR 0 7
43784: PPUSH
43785: LD_VAR 0 5
43789: PUSH
43790: LD_VAR 0 7
43794: ARRAY
43795: PUSH
43796: LD_VAR 0 9
43800: PUSH
43801: LD_VAR 0 7
43805: ARRAY
43806: PUSH
43807: LD_VAR 0 10
43811: MUL
43812: PLUS
43813: PPUSH
43814: CALL_OW 1
43818: ST_TO_ADDR
43819: GO 43767
43821: POP
43822: POP
// end ;
43823: GO 42300
43825: POP
43826: POP
// result := Replace ( result , 4 , tmp ) ;
43827: LD_ADDR_VAR 0 5
43831: PUSH
43832: LD_VAR 0 5
43836: PPUSH
43837: LD_INT 4
43839: PPUSH
43840: LD_VAR 0 8
43844: PPUSH
43845: CALL_OW 1
43849: ST_TO_ADDR
// end ;
43850: LD_VAR 0 5
43854: RET
// export function DangerAtRange ( unit , range ) ; begin
43855: LD_INT 0
43857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 255
43872: PPUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 250
43882: PPUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 251
43892: PPUSH
43893: LD_VAR 0 2
43897: PPUSH
43898: CALL 42152 0 4
43902: ST_TO_ADDR
// end ;
43903: LD_VAR 0 3
43907: RET
// export function DangerInArea ( side , area ) ; begin
43908: LD_INT 0
43910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_VAR 0 2
43920: PPUSH
43921: LD_INT 81
43923: PUSH
43924: LD_VAR 0 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PPUSH
43933: CALL_OW 70
43937: ST_TO_ADDR
// end ;
43938: LD_VAR 0 3
43942: RET
// export function IsExtension ( b ) ; begin
43943: LD_INT 0
43945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: LD_VAR 0 1
43955: PUSH
43956: LD_INT 23
43958: PUSH
43959: LD_INT 20
43961: PUSH
43962: LD_INT 22
43964: PUSH
43965: LD_INT 17
43967: PUSH
43968: LD_INT 24
43970: PUSH
43971: LD_INT 21
43973: PUSH
43974: LD_INT 19
43976: PUSH
43977: LD_INT 16
43979: PUSH
43980: LD_INT 25
43982: PUSH
43983: LD_INT 18
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: IN
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 2
44003: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44004: LD_INT 0
44006: PPUSH
44007: PPUSH
44008: PPUSH
// result := [ ] ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: EMPTY
44015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44016: LD_ADDR_VAR 0 5
44020: PUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_INT 21
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PPUSH
44036: CALL_OW 70
44040: ST_TO_ADDR
// if not tmp then
44041: LD_VAR 0 5
44045: NOT
44046: IFFALSE 44050
// exit ;
44048: GO 44114
// if checkLink then
44050: LD_VAR 0 3
44054: IFFALSE 44104
// begin for i in tmp do
44056: LD_ADDR_VAR 0 6
44060: PUSH
44061: LD_VAR 0 5
44065: PUSH
44066: FOR_IN
44067: IFFALSE 44102
// if GetBase ( i ) <> base then
44069: LD_VAR 0 6
44073: PPUSH
44074: CALL_OW 274
44078: PUSH
44079: LD_VAR 0 1
44083: NONEQUAL
44084: IFFALSE 44100
// ComLinkToBase ( base , i ) ;
44086: LD_VAR 0 1
44090: PPUSH
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 169
44100: GO 44066
44102: POP
44103: POP
// end ; result := tmp ;
44104: LD_ADDR_VAR 0 4
44108: PUSH
44109: LD_VAR 0 5
44113: ST_TO_ADDR
// end ;
44114: LD_VAR 0 4
44118: RET
// export function ComComplete ( units , b ) ; var i ; begin
44119: LD_INT 0
44121: PPUSH
44122: PPUSH
// if not units then
44123: LD_VAR 0 1
44127: NOT
44128: IFFALSE 44132
// exit ;
44130: GO 44222
// for i in units do
44132: LD_ADDR_VAR 0 4
44136: PUSH
44137: LD_VAR 0 1
44141: PUSH
44142: FOR_IN
44143: IFFALSE 44220
// if BuildingStatus ( b ) = bs_build then
44145: LD_VAR 0 2
44149: PPUSH
44150: CALL_OW 461
44154: PUSH
44155: LD_INT 1
44157: EQUAL
44158: IFFALSE 44218
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44160: LD_VAR 0 4
44164: PPUSH
44165: LD_STRING h
44167: PUSH
44168: LD_VAR 0 2
44172: PPUSH
44173: CALL_OW 250
44177: PUSH
44178: LD_VAR 0 2
44182: PPUSH
44183: CALL_OW 251
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: PPUSH
44214: CALL_OW 446
44218: GO 44142
44220: POP
44221: POP
// end ;
44222: LD_VAR 0 3
44226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44227: LD_INT 0
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44235: LD_VAR 0 1
44239: NOT
44240: PUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 263
44250: PUSH
44251: LD_INT 2
44253: NONEQUAL
44254: OR
44255: IFFALSE 44259
// exit ;
44257: GO 44575
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44259: LD_ADDR_VAR 0 6
44263: PUSH
44264: LD_INT 22
44266: PUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 255
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 30
44286: PUSH
44287: LD_INT 36
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 34
44296: PUSH
44297: LD_INT 31
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PPUSH
44313: CALL_OW 69
44317: ST_TO_ADDR
// if not tmp then
44318: LD_VAR 0 6
44322: NOT
44323: IFFALSE 44327
// exit ;
44325: GO 44575
// result := [ ] ;
44327: LD_ADDR_VAR 0 2
44331: PUSH
44332: EMPTY
44333: ST_TO_ADDR
// for i in tmp do
44334: LD_ADDR_VAR 0 3
44338: PUSH
44339: LD_VAR 0 6
44343: PUSH
44344: FOR_IN
44345: IFFALSE 44416
// begin t := UnitsInside ( i ) ;
44347: LD_ADDR_VAR 0 4
44351: PUSH
44352: LD_VAR 0 3
44356: PPUSH
44357: CALL_OW 313
44361: ST_TO_ADDR
// if t then
44362: LD_VAR 0 4
44366: IFFALSE 44414
// for j in t do
44368: LD_ADDR_VAR 0 7
44372: PUSH
44373: LD_VAR 0 4
44377: PUSH
44378: FOR_IN
44379: IFFALSE 44412
// result := Replace ( result , result + 1 , j ) ;
44381: LD_ADDR_VAR 0 2
44385: PUSH
44386: LD_VAR 0 2
44390: PPUSH
44391: LD_VAR 0 2
44395: PUSH
44396: LD_INT 1
44398: PLUS
44399: PPUSH
44400: LD_VAR 0 7
44404: PPUSH
44405: CALL_OW 1
44409: ST_TO_ADDR
44410: GO 44378
44412: POP
44413: POP
// end ;
44414: GO 44344
44416: POP
44417: POP
// if not result then
44418: LD_VAR 0 2
44422: NOT
44423: IFFALSE 44427
// exit ;
44425: GO 44575
// mech := result [ 1 ] ;
44427: LD_ADDR_VAR 0 5
44431: PUSH
44432: LD_VAR 0 2
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: ST_TO_ADDR
// if result > 1 then
44441: LD_VAR 0 2
44445: PUSH
44446: LD_INT 1
44448: GREATER
44449: IFFALSE 44561
// begin for i = 2 to result do
44451: LD_ADDR_VAR 0 3
44455: PUSH
44456: DOUBLE
44457: LD_INT 2
44459: DEC
44460: ST_TO_ADDR
44461: LD_VAR 0 2
44465: PUSH
44466: FOR_TO
44467: IFFALSE 44559
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44469: LD_ADDR_VAR 0 4
44473: PUSH
44474: LD_VAR 0 2
44478: PUSH
44479: LD_VAR 0 3
44483: ARRAY
44484: PPUSH
44485: LD_INT 3
44487: PPUSH
44488: CALL_OW 259
44492: PUSH
44493: LD_VAR 0 2
44497: PUSH
44498: LD_VAR 0 3
44502: ARRAY
44503: PPUSH
44504: CALL_OW 432
44508: MINUS
44509: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44510: LD_VAR 0 4
44514: PUSH
44515: LD_VAR 0 5
44519: PPUSH
44520: LD_INT 3
44522: PPUSH
44523: CALL_OW 259
44527: PUSH
44528: LD_VAR 0 5
44532: PPUSH
44533: CALL_OW 432
44537: MINUS
44538: GREATEREQUAL
44539: IFFALSE 44557
// mech := result [ i ] ;
44541: LD_ADDR_VAR 0 5
44545: PUSH
44546: LD_VAR 0 2
44550: PUSH
44551: LD_VAR 0 3
44555: ARRAY
44556: ST_TO_ADDR
// end ;
44557: GO 44466
44559: POP
44560: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44561: LD_VAR 0 1
44565: PPUSH
44566: LD_VAR 0 5
44570: PPUSH
44571: CALL_OW 135
// end ;
44575: LD_VAR 0 2
44579: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44580: LD_INT 0
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
44594: PPUSH
// result := [ ] ;
44595: LD_ADDR_VAR 0 7
44599: PUSH
44600: EMPTY
44601: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44602: LD_VAR 0 1
44606: PPUSH
44607: CALL_OW 266
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: IN
44622: NOT
44623: IFFALSE 44627
// exit ;
44625: GO 46261
// if name then
44627: LD_VAR 0 3
44631: IFFALSE 44647
// SetBName ( base_dep , name ) ;
44633: LD_VAR 0 1
44637: PPUSH
44638: LD_VAR 0 3
44642: PPUSH
44643: CALL_OW 500
// base := GetBase ( base_dep ) ;
44647: LD_ADDR_VAR 0 15
44651: PUSH
44652: LD_VAR 0 1
44656: PPUSH
44657: CALL_OW 274
44661: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44662: LD_ADDR_VAR 0 16
44666: PUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 255
44676: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44677: LD_ADDR_VAR 0 17
44681: PUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 248
44691: ST_TO_ADDR
// if sources then
44692: LD_VAR 0 5
44696: IFFALSE 44743
// for i = 1 to 3 do
44698: LD_ADDR_VAR 0 8
44702: PUSH
44703: DOUBLE
44704: LD_INT 1
44706: DEC
44707: ST_TO_ADDR
44708: LD_INT 3
44710: PUSH
44711: FOR_TO
44712: IFFALSE 44741
// AddResourceType ( base , i , sources [ i ] ) ;
44714: LD_VAR 0 15
44718: PPUSH
44719: LD_VAR 0 8
44723: PPUSH
44724: LD_VAR 0 5
44728: PUSH
44729: LD_VAR 0 8
44733: ARRAY
44734: PPUSH
44735: CALL_OW 276
44739: GO 44711
44741: POP
44742: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44743: LD_ADDR_VAR 0 18
44747: PUSH
44748: LD_VAR 0 15
44752: PPUSH
44753: LD_VAR 0 2
44757: PPUSH
44758: LD_INT 1
44760: PPUSH
44761: CALL 44004 0 3
44765: ST_TO_ADDR
// InitHc ;
44766: CALL_OW 19
// InitUc ;
44770: CALL_OW 18
// uc_side := side ;
44774: LD_ADDR_OWVAR 20
44778: PUSH
44779: LD_VAR 0 16
44783: ST_TO_ADDR
// uc_nation := nation ;
44784: LD_ADDR_OWVAR 21
44788: PUSH
44789: LD_VAR 0 17
44793: ST_TO_ADDR
// if buildings then
44794: LD_VAR 0 18
44798: IFFALSE 46120
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44800: LD_ADDR_VAR 0 19
44804: PUSH
44805: LD_VAR 0 18
44809: PPUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 30
44815: PUSH
44816: LD_INT 29
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 30
44825: PUSH
44826: LD_INT 30
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: PPUSH
44838: CALL_OW 72
44842: ST_TO_ADDR
// if tmp then
44843: LD_VAR 0 19
44847: IFFALSE 44895
// for i in tmp do
44849: LD_ADDR_VAR 0 8
44853: PUSH
44854: LD_VAR 0 19
44858: PUSH
44859: FOR_IN
44860: IFFALSE 44893
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44862: LD_VAR 0 8
44866: PPUSH
44867: CALL_OW 250
44871: PPUSH
44872: LD_VAR 0 8
44876: PPUSH
44877: CALL_OW 251
44881: PPUSH
44882: LD_VAR 0 16
44886: PPUSH
44887: CALL_OW 441
44891: GO 44859
44893: POP
44894: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44895: LD_VAR 0 18
44899: PPUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: LD_INT 32
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: LD_INT 33
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: PPUSH
44928: CALL_OW 72
44932: IFFALSE 45020
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44934: LD_ADDR_VAR 0 8
44938: PUSH
44939: LD_VAR 0 18
44943: PPUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 30
44949: PUSH
44950: LD_INT 32
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 30
44959: PUSH
44960: LD_INT 33
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: PPUSH
44972: CALL_OW 72
44976: PUSH
44977: FOR_IN
44978: IFFALSE 45018
// begin if not GetBWeapon ( i ) then
44980: LD_VAR 0 8
44984: PPUSH
44985: CALL_OW 269
44989: NOT
44990: IFFALSE 45016
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44992: LD_VAR 0 8
44996: PPUSH
44997: LD_VAR 0 8
45001: PPUSH
45002: LD_VAR 0 2
45006: PPUSH
45007: CALL 46266 0 2
45011: PPUSH
45012: CALL_OW 431
// end ;
45016: GO 44977
45018: POP
45019: POP
// end ; for i = 1 to personel do
45020: LD_ADDR_VAR 0 8
45024: PUSH
45025: DOUBLE
45026: LD_INT 1
45028: DEC
45029: ST_TO_ADDR
45030: LD_VAR 0 6
45034: PUSH
45035: FOR_TO
45036: IFFALSE 46100
// begin if i > 4 then
45038: LD_VAR 0 8
45042: PUSH
45043: LD_INT 4
45045: GREATER
45046: IFFALSE 45050
// break ;
45048: GO 46100
// case i of 1 :
45050: LD_VAR 0 8
45054: PUSH
45055: LD_INT 1
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45063
45061: GO 45143
45063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45064: LD_ADDR_VAR 0 12
45068: PUSH
45069: LD_VAR 0 18
45073: PPUSH
45074: LD_INT 22
45076: PUSH
45077: LD_VAR 0 16
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 58
45088: PUSH
45089: EMPTY
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 30
45097: PUSH
45098: LD_INT 32
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 30
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 30
45117: PUSH
45118: LD_INT 5
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: PPUSH
45136: CALL_OW 72
45140: ST_TO_ADDR
45141: GO 45365
45143: LD_INT 2
45145: DOUBLE
45146: EQUAL
45147: IFTRUE 45151
45149: GO 45213
45151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45152: LD_ADDR_VAR 0 12
45156: PUSH
45157: LD_VAR 0 18
45161: PPUSH
45162: LD_INT 22
45164: PUSH
45165: LD_VAR 0 16
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 30
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 30
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PPUSH
45206: CALL_OW 72
45210: ST_TO_ADDR
45211: GO 45365
45213: LD_INT 3
45215: DOUBLE
45216: EQUAL
45217: IFTRUE 45221
45219: GO 45283
45221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45222: LD_ADDR_VAR 0 12
45226: PUSH
45227: LD_VAR 0 18
45231: PPUSH
45232: LD_INT 22
45234: PUSH
45235: LD_VAR 0 16
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 30
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 30
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PPUSH
45276: CALL_OW 72
45280: ST_TO_ADDR
45281: GO 45365
45283: LD_INT 4
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45364
45291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45292: LD_ADDR_VAR 0 12
45296: PUSH
45297: LD_VAR 0 18
45301: PPUSH
45302: LD_INT 22
45304: PUSH
45305: LD_VAR 0 16
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 30
45319: PUSH
45320: LD_INT 6
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 30
45329: PUSH
45330: LD_INT 7
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 30
45339: PUSH
45340: LD_INT 8
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PPUSH
45357: CALL_OW 72
45361: ST_TO_ADDR
45362: GO 45365
45364: POP
// if i = 1 then
45365: LD_VAR 0 8
45369: PUSH
45370: LD_INT 1
45372: EQUAL
45373: IFFALSE 45484
// begin tmp := [ ] ;
45375: LD_ADDR_VAR 0 19
45379: PUSH
45380: EMPTY
45381: ST_TO_ADDR
// for j in f do
45382: LD_ADDR_VAR 0 9
45386: PUSH
45387: LD_VAR 0 12
45391: PUSH
45392: FOR_IN
45393: IFFALSE 45466
// if GetBType ( j ) = b_bunker then
45395: LD_VAR 0 9
45399: PPUSH
45400: CALL_OW 266
45404: PUSH
45405: LD_INT 32
45407: EQUAL
45408: IFFALSE 45435
// tmp := Insert ( tmp , 1 , j ) else
45410: LD_ADDR_VAR 0 19
45414: PUSH
45415: LD_VAR 0 19
45419: PPUSH
45420: LD_INT 1
45422: PPUSH
45423: LD_VAR 0 9
45427: PPUSH
45428: CALL_OW 2
45432: ST_TO_ADDR
45433: GO 45464
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45435: LD_ADDR_VAR 0 19
45439: PUSH
45440: LD_VAR 0 19
45444: PPUSH
45445: LD_VAR 0 19
45449: PUSH
45450: LD_INT 1
45452: PLUS
45453: PPUSH
45454: LD_VAR 0 9
45458: PPUSH
45459: CALL_OW 2
45463: ST_TO_ADDR
45464: GO 45392
45466: POP
45467: POP
// if tmp then
45468: LD_VAR 0 19
45472: IFFALSE 45484
// f := tmp ;
45474: LD_ADDR_VAR 0 12
45478: PUSH
45479: LD_VAR 0 19
45483: ST_TO_ADDR
// end ; x := personel [ i ] ;
45484: LD_ADDR_VAR 0 13
45488: PUSH
45489: LD_VAR 0 6
45493: PUSH
45494: LD_VAR 0 8
45498: ARRAY
45499: ST_TO_ADDR
// if x = - 1 then
45500: LD_VAR 0 13
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: EQUAL
45509: IFFALSE 45718
// begin for j in f do
45511: LD_ADDR_VAR 0 9
45515: PUSH
45516: LD_VAR 0 12
45520: PUSH
45521: FOR_IN
45522: IFFALSE 45714
// repeat InitHc ;
45524: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45528: LD_VAR 0 9
45532: PPUSH
45533: CALL_OW 266
45537: PUSH
45538: LD_INT 5
45540: EQUAL
45541: IFFALSE 45611
// begin if UnitsInside ( j ) < 3 then
45543: LD_VAR 0 9
45547: PPUSH
45548: CALL_OW 313
45552: PUSH
45553: LD_INT 3
45555: LESS
45556: IFFALSE 45592
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45558: LD_INT 0
45560: PPUSH
45561: LD_INT 5
45563: PUSH
45564: LD_INT 8
45566: PUSH
45567: LD_INT 9
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: PUSH
45575: LD_VAR 0 17
45579: ARRAY
45580: PPUSH
45581: LD_VAR 0 4
45585: PPUSH
45586: CALL_OW 380
45590: GO 45609
// PrepareHuman ( false , i , skill ) ;
45592: LD_INT 0
45594: PPUSH
45595: LD_VAR 0 8
45599: PPUSH
45600: LD_VAR 0 4
45604: PPUSH
45605: CALL_OW 380
// end else
45609: GO 45628
// PrepareHuman ( false , i , skill ) ;
45611: LD_INT 0
45613: PPUSH
45614: LD_VAR 0 8
45618: PPUSH
45619: LD_VAR 0 4
45623: PPUSH
45624: CALL_OW 380
// un := CreateHuman ;
45628: LD_ADDR_VAR 0 14
45632: PUSH
45633: CALL_OW 44
45637: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45638: LD_ADDR_VAR 0 7
45642: PUSH
45643: LD_VAR 0 7
45647: PPUSH
45648: LD_INT 1
45650: PPUSH
45651: LD_VAR 0 14
45655: PPUSH
45656: CALL_OW 2
45660: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45661: LD_VAR 0 14
45665: PPUSH
45666: LD_VAR 0 9
45670: PPUSH
45671: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45675: LD_VAR 0 9
45679: PPUSH
45680: CALL_OW 313
45684: PUSH
45685: LD_INT 6
45687: EQUAL
45688: PUSH
45689: LD_VAR 0 9
45693: PPUSH
45694: CALL_OW 266
45698: PUSH
45699: LD_INT 32
45701: PUSH
45702: LD_INT 31
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: IN
45709: OR
45710: IFFALSE 45524
45712: GO 45521
45714: POP
45715: POP
// end else
45716: GO 46098
// for j = 1 to x do
45718: LD_ADDR_VAR 0 9
45722: PUSH
45723: DOUBLE
45724: LD_INT 1
45726: DEC
45727: ST_TO_ADDR
45728: LD_VAR 0 13
45732: PUSH
45733: FOR_TO
45734: IFFALSE 46096
// begin InitHc ;
45736: CALL_OW 19
// if not f then
45740: LD_VAR 0 12
45744: NOT
45745: IFFALSE 45834
// begin PrepareHuman ( false , i , skill ) ;
45747: LD_INT 0
45749: PPUSH
45750: LD_VAR 0 8
45754: PPUSH
45755: LD_VAR 0 4
45759: PPUSH
45760: CALL_OW 380
// un := CreateHuman ;
45764: LD_ADDR_VAR 0 14
45768: PUSH
45769: CALL_OW 44
45773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45774: LD_ADDR_VAR 0 7
45778: PUSH
45779: LD_VAR 0 7
45783: PPUSH
45784: LD_INT 1
45786: PPUSH
45787: LD_VAR 0 14
45791: PPUSH
45792: CALL_OW 2
45796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45797: LD_VAR 0 14
45801: PPUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: CALL_OW 250
45811: PPUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 251
45821: PPUSH
45822: LD_INT 10
45824: PPUSH
45825: LD_INT 0
45827: PPUSH
45828: CALL_OW 50
// continue ;
45832: GO 45733
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45834: LD_VAR 0 12
45838: PUSH
45839: LD_INT 1
45841: ARRAY
45842: PPUSH
45843: CALL_OW 313
45847: PUSH
45848: LD_VAR 0 12
45852: PUSH
45853: LD_INT 1
45855: ARRAY
45856: PPUSH
45857: CALL_OW 266
45861: PUSH
45862: LD_INT 32
45864: PUSH
45865: LD_INT 31
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: IN
45872: AND
45873: PUSH
45874: LD_VAR 0 12
45878: PUSH
45879: LD_INT 1
45881: ARRAY
45882: PPUSH
45883: CALL_OW 313
45887: PUSH
45888: LD_INT 6
45890: EQUAL
45891: OR
45892: IFFALSE 45912
// f := Delete ( f , 1 ) ;
45894: LD_ADDR_VAR 0 12
45898: PUSH
45899: LD_VAR 0 12
45903: PPUSH
45904: LD_INT 1
45906: PPUSH
45907: CALL_OW 3
45911: ST_TO_ADDR
// if not f then
45912: LD_VAR 0 12
45916: NOT
45917: IFFALSE 45935
// begin x := x + 2 ;
45919: LD_ADDR_VAR 0 13
45923: PUSH
45924: LD_VAR 0 13
45928: PUSH
45929: LD_INT 2
45931: PLUS
45932: ST_TO_ADDR
// continue ;
45933: GO 45733
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45935: LD_VAR 0 12
45939: PUSH
45940: LD_INT 1
45942: ARRAY
45943: PPUSH
45944: CALL_OW 266
45948: PUSH
45949: LD_INT 5
45951: EQUAL
45952: IFFALSE 46026
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45954: LD_VAR 0 12
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PPUSH
45963: CALL_OW 313
45967: PUSH
45968: LD_INT 3
45970: LESS
45971: IFFALSE 46007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45973: LD_INT 0
45975: PPUSH
45976: LD_INT 5
45978: PUSH
45979: LD_INT 8
45981: PUSH
45982: LD_INT 9
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: PUSH
45990: LD_VAR 0 17
45994: ARRAY
45995: PPUSH
45996: LD_VAR 0 4
46000: PPUSH
46001: CALL_OW 380
46005: GO 46024
// PrepareHuman ( false , i , skill ) ;
46007: LD_INT 0
46009: PPUSH
46010: LD_VAR 0 8
46014: PPUSH
46015: LD_VAR 0 4
46019: PPUSH
46020: CALL_OW 380
// end else
46024: GO 46043
// PrepareHuman ( false , i , skill ) ;
46026: LD_INT 0
46028: PPUSH
46029: LD_VAR 0 8
46033: PPUSH
46034: LD_VAR 0 4
46038: PPUSH
46039: CALL_OW 380
// un := CreateHuman ;
46043: LD_ADDR_VAR 0 14
46047: PUSH
46048: CALL_OW 44
46052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46053: LD_ADDR_VAR 0 7
46057: PUSH
46058: LD_VAR 0 7
46062: PPUSH
46063: LD_INT 1
46065: PPUSH
46066: LD_VAR 0 14
46070: PPUSH
46071: CALL_OW 2
46075: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46076: LD_VAR 0 14
46080: PPUSH
46081: LD_VAR 0 12
46085: PUSH
46086: LD_INT 1
46088: ARRAY
46089: PPUSH
46090: CALL_OW 52
// end ;
46094: GO 45733
46096: POP
46097: POP
// end ;
46098: GO 45035
46100: POP
46101: POP
// result := result ^ buildings ;
46102: LD_ADDR_VAR 0 7
46106: PUSH
46107: LD_VAR 0 7
46111: PUSH
46112: LD_VAR 0 18
46116: ADD
46117: ST_TO_ADDR
// end else
46118: GO 46261
// begin for i = 1 to personel do
46120: LD_ADDR_VAR 0 8
46124: PUSH
46125: DOUBLE
46126: LD_INT 1
46128: DEC
46129: ST_TO_ADDR
46130: LD_VAR 0 6
46134: PUSH
46135: FOR_TO
46136: IFFALSE 46259
// begin if i > 4 then
46138: LD_VAR 0 8
46142: PUSH
46143: LD_INT 4
46145: GREATER
46146: IFFALSE 46150
// break ;
46148: GO 46259
// x := personel [ i ] ;
46150: LD_ADDR_VAR 0 13
46154: PUSH
46155: LD_VAR 0 6
46159: PUSH
46160: LD_VAR 0 8
46164: ARRAY
46165: ST_TO_ADDR
// if x = - 1 then
46166: LD_VAR 0 13
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: EQUAL
46175: IFFALSE 46179
// continue ;
46177: GO 46135
// PrepareHuman ( false , i , skill ) ;
46179: LD_INT 0
46181: PPUSH
46182: LD_VAR 0 8
46186: PPUSH
46187: LD_VAR 0 4
46191: PPUSH
46192: CALL_OW 380
// un := CreateHuman ;
46196: LD_ADDR_VAR 0 14
46200: PUSH
46201: CALL_OW 44
46205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46206: LD_VAR 0 14
46210: PPUSH
46211: LD_VAR 0 1
46215: PPUSH
46216: CALL_OW 250
46220: PPUSH
46221: LD_VAR 0 1
46225: PPUSH
46226: CALL_OW 251
46230: PPUSH
46231: LD_INT 10
46233: PPUSH
46234: LD_INT 0
46236: PPUSH
46237: CALL_OW 50
// result := result ^ un ;
46241: LD_ADDR_VAR 0 7
46245: PUSH
46246: LD_VAR 0 7
46250: PUSH
46251: LD_VAR 0 14
46255: ADD
46256: ST_TO_ADDR
// end ;
46257: GO 46135
46259: POP
46260: POP
// end ; end ;
46261: LD_VAR 0 7
46265: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46266: LD_INT 0
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
// result := false ;
46284: LD_ADDR_VAR 0 3
46288: PUSH
46289: LD_INT 0
46291: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46292: LD_VAR 0 1
46296: NOT
46297: PUSH
46298: LD_VAR 0 1
46302: PPUSH
46303: CALL_OW 266
46307: PUSH
46308: LD_INT 32
46310: PUSH
46311: LD_INT 33
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: IN
46318: NOT
46319: OR
46320: IFFALSE 46324
// exit ;
46322: GO 47433
// nat := GetNation ( tower ) ;
46324: LD_ADDR_VAR 0 12
46328: PUSH
46329: LD_VAR 0 1
46333: PPUSH
46334: CALL_OW 248
46338: ST_TO_ADDR
// side := GetSide ( tower ) ;
46339: LD_ADDR_VAR 0 16
46343: PUSH
46344: LD_VAR 0 1
46348: PPUSH
46349: CALL_OW 255
46353: ST_TO_ADDR
// x := GetX ( tower ) ;
46354: LD_ADDR_VAR 0 10
46358: PUSH
46359: LD_VAR 0 1
46363: PPUSH
46364: CALL_OW 250
46368: ST_TO_ADDR
// y := GetY ( tower ) ;
46369: LD_ADDR_VAR 0 11
46373: PUSH
46374: LD_VAR 0 1
46378: PPUSH
46379: CALL_OW 251
46383: ST_TO_ADDR
// if not x or not y then
46384: LD_VAR 0 10
46388: NOT
46389: PUSH
46390: LD_VAR 0 11
46394: NOT
46395: OR
46396: IFFALSE 46400
// exit ;
46398: GO 47433
// weapon := 0 ;
46400: LD_ADDR_VAR 0 18
46404: PUSH
46405: LD_INT 0
46407: ST_TO_ADDR
// fac_list := [ ] ;
46408: LD_ADDR_VAR 0 17
46412: PUSH
46413: EMPTY
46414: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46415: LD_ADDR_VAR 0 6
46419: PUSH
46420: LD_VAR 0 1
46424: PPUSH
46425: CALL_OW 274
46429: PPUSH
46430: LD_VAR 0 2
46434: PPUSH
46435: LD_INT 0
46437: PPUSH
46438: CALL 44004 0 3
46442: PPUSH
46443: LD_INT 30
46445: PUSH
46446: LD_INT 3
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PPUSH
46453: CALL_OW 72
46457: ST_TO_ADDR
// if not factories then
46458: LD_VAR 0 6
46462: NOT
46463: IFFALSE 46467
// exit ;
46465: GO 47433
// for i in factories do
46467: LD_ADDR_VAR 0 8
46471: PUSH
46472: LD_VAR 0 6
46476: PUSH
46477: FOR_IN
46478: IFFALSE 46503
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46480: LD_ADDR_VAR 0 17
46484: PUSH
46485: LD_VAR 0 17
46489: PUSH
46490: LD_VAR 0 8
46494: PPUSH
46495: CALL_OW 478
46499: UNION
46500: ST_TO_ADDR
46501: GO 46477
46503: POP
46504: POP
// if not fac_list then
46505: LD_VAR 0 17
46509: NOT
46510: IFFALSE 46514
// exit ;
46512: GO 47433
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46514: LD_ADDR_VAR 0 5
46518: PUSH
46519: LD_INT 4
46521: PUSH
46522: LD_INT 5
46524: PUSH
46525: LD_INT 9
46527: PUSH
46528: LD_INT 10
46530: PUSH
46531: LD_INT 6
46533: PUSH
46534: LD_INT 7
46536: PUSH
46537: LD_INT 11
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 27
46551: PUSH
46552: LD_INT 28
46554: PUSH
46555: LD_INT 26
46557: PUSH
46558: LD_INT 30
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 43
46569: PUSH
46570: LD_INT 44
46572: PUSH
46573: LD_INT 46
46575: PUSH
46576: LD_INT 45
46578: PUSH
46579: LD_INT 47
46581: PUSH
46582: LD_INT 49
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PUSH
46598: LD_VAR 0 12
46602: ARRAY
46603: ST_TO_ADDR
// list := list isect fac_list ;
46604: LD_ADDR_VAR 0 5
46608: PUSH
46609: LD_VAR 0 5
46613: PUSH
46614: LD_VAR 0 17
46618: ISECT
46619: ST_TO_ADDR
// if not list then
46620: LD_VAR 0 5
46624: NOT
46625: IFFALSE 46629
// exit ;
46627: GO 47433
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46629: LD_VAR 0 12
46633: PUSH
46634: LD_INT 3
46636: EQUAL
46637: PUSH
46638: LD_INT 49
46640: PUSH
46641: LD_VAR 0 5
46645: IN
46646: AND
46647: PUSH
46648: LD_INT 31
46650: PPUSH
46651: LD_VAR 0 16
46655: PPUSH
46656: CALL_OW 321
46660: PUSH
46661: LD_INT 2
46663: EQUAL
46664: AND
46665: IFFALSE 46725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46667: LD_INT 22
46669: PUSH
46670: LD_VAR 0 16
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 35
46681: PUSH
46682: LD_INT 49
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 91
46691: PUSH
46692: LD_VAR 0 1
46696: PUSH
46697: LD_INT 10
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: PPUSH
46710: CALL_OW 69
46714: NOT
46715: IFFALSE 46725
// weapon := ru_time_lapser ;
46717: LD_ADDR_VAR 0 18
46721: PUSH
46722: LD_INT 49
46724: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46725: LD_VAR 0 12
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: IN
46740: PUSH
46741: LD_INT 11
46743: PUSH
46744: LD_VAR 0 5
46748: IN
46749: PUSH
46750: LD_INT 30
46752: PUSH
46753: LD_VAR 0 5
46757: IN
46758: OR
46759: AND
46760: PUSH
46761: LD_INT 6
46763: PPUSH
46764: LD_VAR 0 16
46768: PPUSH
46769: CALL_OW 321
46773: PUSH
46774: LD_INT 2
46776: EQUAL
46777: AND
46778: IFFALSE 46943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46780: LD_INT 22
46782: PUSH
46783: LD_VAR 0 16
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 35
46797: PUSH
46798: LD_INT 11
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 35
46807: PUSH
46808: LD_INT 30
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 91
46822: PUSH
46823: LD_VAR 0 1
46827: PUSH
46828: LD_INT 18
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: PPUSH
46841: CALL_OW 69
46845: NOT
46846: PUSH
46847: LD_INT 22
46849: PUSH
46850: LD_VAR 0 16
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 30
46864: PUSH
46865: LD_INT 32
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 30
46874: PUSH
46875: LD_INT 33
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 91
46889: PUSH
46890: LD_VAR 0 1
46894: PUSH
46895: LD_INT 12
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: PPUSH
46911: CALL_OW 69
46915: PUSH
46916: LD_INT 2
46918: GREATER
46919: AND
46920: IFFALSE 46943
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46922: LD_ADDR_VAR 0 18
46926: PUSH
46927: LD_INT 11
46929: PUSH
46930: LD_INT 30
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_VAR 0 12
46941: ARRAY
46942: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46943: LD_VAR 0 18
46947: NOT
46948: PUSH
46949: LD_INT 40
46951: PPUSH
46952: LD_VAR 0 16
46956: PPUSH
46957: CALL_OW 321
46961: PUSH
46962: LD_INT 2
46964: EQUAL
46965: AND
46966: PUSH
46967: LD_INT 7
46969: PUSH
46970: LD_VAR 0 5
46974: IN
46975: PUSH
46976: LD_INT 28
46978: PUSH
46979: LD_VAR 0 5
46983: IN
46984: OR
46985: PUSH
46986: LD_INT 45
46988: PUSH
46989: LD_VAR 0 5
46993: IN
46994: OR
46995: AND
46996: IFFALSE 47250
// begin hex := GetHexInfo ( x , y ) ;
46998: LD_ADDR_VAR 0 4
47002: PUSH
47003: LD_VAR 0 10
47007: PPUSH
47008: LD_VAR 0 11
47012: PPUSH
47013: CALL_OW 546
47017: ST_TO_ADDR
// if hex [ 1 ] then
47018: LD_VAR 0 4
47022: PUSH
47023: LD_INT 1
47025: ARRAY
47026: IFFALSE 47030
// exit ;
47028: GO 47433
// height := hex [ 2 ] ;
47030: LD_ADDR_VAR 0 15
47034: PUSH
47035: LD_VAR 0 4
47039: PUSH
47040: LD_INT 2
47042: ARRAY
47043: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47044: LD_ADDR_VAR 0 14
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 5
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: ST_TO_ADDR
// for i in tmp do
47067: LD_ADDR_VAR 0 8
47071: PUSH
47072: LD_VAR 0 14
47076: PUSH
47077: FOR_IN
47078: IFFALSE 47248
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47080: LD_ADDR_VAR 0 9
47084: PUSH
47085: LD_VAR 0 10
47089: PPUSH
47090: LD_VAR 0 8
47094: PPUSH
47095: LD_INT 5
47097: PPUSH
47098: CALL_OW 272
47102: PUSH
47103: LD_VAR 0 11
47107: PPUSH
47108: LD_VAR 0 8
47112: PPUSH
47113: LD_INT 5
47115: PPUSH
47116: CALL_OW 273
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47125: LD_VAR 0 9
47129: PUSH
47130: LD_INT 1
47132: ARRAY
47133: PPUSH
47134: LD_VAR 0 9
47138: PUSH
47139: LD_INT 2
47141: ARRAY
47142: PPUSH
47143: CALL_OW 488
47147: IFFALSE 47246
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47149: LD_ADDR_VAR 0 4
47153: PUSH
47154: LD_VAR 0 9
47158: PUSH
47159: LD_INT 1
47161: ARRAY
47162: PPUSH
47163: LD_VAR 0 9
47167: PUSH
47168: LD_INT 2
47170: ARRAY
47171: PPUSH
47172: CALL_OW 546
47176: ST_TO_ADDR
// if hex [ 1 ] then
47177: LD_VAR 0 4
47181: PUSH
47182: LD_INT 1
47184: ARRAY
47185: IFFALSE 47189
// continue ;
47187: GO 47077
// h := hex [ 2 ] ;
47189: LD_ADDR_VAR 0 13
47193: PUSH
47194: LD_VAR 0 4
47198: PUSH
47199: LD_INT 2
47201: ARRAY
47202: ST_TO_ADDR
// if h + 7 < height then
47203: LD_VAR 0 13
47207: PUSH
47208: LD_INT 7
47210: PLUS
47211: PUSH
47212: LD_VAR 0 15
47216: LESS
47217: IFFALSE 47246
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47219: LD_ADDR_VAR 0 18
47223: PUSH
47224: LD_INT 7
47226: PUSH
47227: LD_INT 28
47229: PUSH
47230: LD_INT 45
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: PUSH
47238: LD_VAR 0 12
47242: ARRAY
47243: ST_TO_ADDR
// break ;
47244: GO 47248
// end ; end ; end ;
47246: GO 47077
47248: POP
47249: POP
// end ; if not weapon then
47250: LD_VAR 0 18
47254: NOT
47255: IFFALSE 47315
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47257: LD_ADDR_VAR 0 5
47261: PUSH
47262: LD_VAR 0 5
47266: PUSH
47267: LD_INT 11
47269: PUSH
47270: LD_INT 30
47272: PUSH
47273: LD_INT 49
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: DIFF
47281: ST_TO_ADDR
// if not list then
47282: LD_VAR 0 5
47286: NOT
47287: IFFALSE 47291
// exit ;
47289: GO 47433
// weapon := list [ rand ( 1 , list ) ] ;
47291: LD_ADDR_VAR 0 18
47295: PUSH
47296: LD_VAR 0 5
47300: PUSH
47301: LD_INT 1
47303: PPUSH
47304: LD_VAR 0 5
47308: PPUSH
47309: CALL_OW 12
47313: ARRAY
47314: ST_TO_ADDR
// end ; if weapon then
47315: LD_VAR 0 18
47319: IFFALSE 47433
// begin tmp := CostOfWeapon ( weapon ) ;
47321: LD_ADDR_VAR 0 14
47325: PUSH
47326: LD_VAR 0 18
47330: PPUSH
47331: CALL_OW 451
47335: ST_TO_ADDR
// j := GetBase ( tower ) ;
47336: LD_ADDR_VAR 0 9
47340: PUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: CALL_OW 274
47350: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47351: LD_VAR 0 9
47355: PPUSH
47356: LD_INT 1
47358: PPUSH
47359: CALL_OW 275
47363: PUSH
47364: LD_VAR 0 14
47368: PUSH
47369: LD_INT 1
47371: ARRAY
47372: GREATEREQUAL
47373: PUSH
47374: LD_VAR 0 9
47378: PPUSH
47379: LD_INT 2
47381: PPUSH
47382: CALL_OW 275
47386: PUSH
47387: LD_VAR 0 14
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: GREATEREQUAL
47396: AND
47397: PUSH
47398: LD_VAR 0 9
47402: PPUSH
47403: LD_INT 3
47405: PPUSH
47406: CALL_OW 275
47410: PUSH
47411: LD_VAR 0 14
47415: PUSH
47416: LD_INT 3
47418: ARRAY
47419: GREATEREQUAL
47420: AND
47421: IFFALSE 47433
// result := weapon ;
47423: LD_ADDR_VAR 0 3
47427: PUSH
47428: LD_VAR 0 18
47432: ST_TO_ADDR
// end ; end ;
47433: LD_VAR 0 3
47437: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47438: LD_INT 0
47440: PPUSH
47441: PPUSH
// result := true ;
47442: LD_ADDR_VAR 0 3
47446: PUSH
47447: LD_INT 1
47449: ST_TO_ADDR
// if array1 = array2 then
47450: LD_VAR 0 1
47454: PUSH
47455: LD_VAR 0 2
47459: EQUAL
47460: IFFALSE 47520
// begin for i = 1 to array1 do
47462: LD_ADDR_VAR 0 4
47466: PUSH
47467: DOUBLE
47468: LD_INT 1
47470: DEC
47471: ST_TO_ADDR
47472: LD_VAR 0 1
47476: PUSH
47477: FOR_TO
47478: IFFALSE 47516
// if array1 [ i ] <> array2 [ i ] then
47480: LD_VAR 0 1
47484: PUSH
47485: LD_VAR 0 4
47489: ARRAY
47490: PUSH
47491: LD_VAR 0 2
47495: PUSH
47496: LD_VAR 0 4
47500: ARRAY
47501: NONEQUAL
47502: IFFALSE 47514
// begin result := false ;
47504: LD_ADDR_VAR 0 3
47508: PUSH
47509: LD_INT 0
47511: ST_TO_ADDR
// break ;
47512: GO 47516
// end ;
47514: GO 47477
47516: POP
47517: POP
// end else
47518: GO 47528
// result := false ;
47520: LD_ADDR_VAR 0 3
47524: PUSH
47525: LD_INT 0
47527: ST_TO_ADDR
// end ;
47528: LD_VAR 0 3
47532: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47533: LD_INT 0
47535: PPUSH
47536: PPUSH
// if not array1 or not array2 then
47537: LD_VAR 0 1
47541: NOT
47542: PUSH
47543: LD_VAR 0 2
47547: NOT
47548: OR
47549: IFFALSE 47553
// exit ;
47551: GO 47617
// result := true ;
47553: LD_ADDR_VAR 0 3
47557: PUSH
47558: LD_INT 1
47560: ST_TO_ADDR
// for i = 1 to array1 do
47561: LD_ADDR_VAR 0 4
47565: PUSH
47566: DOUBLE
47567: LD_INT 1
47569: DEC
47570: ST_TO_ADDR
47571: LD_VAR 0 1
47575: PUSH
47576: FOR_TO
47577: IFFALSE 47615
// if array1 [ i ] <> array2 [ i ] then
47579: LD_VAR 0 1
47583: PUSH
47584: LD_VAR 0 4
47588: ARRAY
47589: PUSH
47590: LD_VAR 0 2
47594: PUSH
47595: LD_VAR 0 4
47599: ARRAY
47600: NONEQUAL
47601: IFFALSE 47613
// begin result := false ;
47603: LD_ADDR_VAR 0 3
47607: PUSH
47608: LD_INT 0
47610: ST_TO_ADDR
// break ;
47611: GO 47615
// end ;
47613: GO 47576
47615: POP
47616: POP
// end ;
47617: LD_VAR 0 3
47621: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47622: LD_INT 0
47624: PPUSH
47625: PPUSH
47626: PPUSH
// pom := GetBase ( fac ) ;
47627: LD_ADDR_VAR 0 5
47631: PUSH
47632: LD_VAR 0 1
47636: PPUSH
47637: CALL_OW 274
47641: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47642: LD_ADDR_VAR 0 4
47646: PUSH
47647: LD_VAR 0 2
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: PPUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_INT 2
47663: ARRAY
47664: PPUSH
47665: LD_VAR 0 2
47669: PUSH
47670: LD_INT 3
47672: ARRAY
47673: PPUSH
47674: LD_VAR 0 2
47678: PUSH
47679: LD_INT 4
47681: ARRAY
47682: PPUSH
47683: CALL_OW 449
47687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47688: LD_ADDR_VAR 0 3
47692: PUSH
47693: LD_VAR 0 5
47697: PPUSH
47698: LD_INT 1
47700: PPUSH
47701: CALL_OW 275
47705: PUSH
47706: LD_VAR 0 4
47710: PUSH
47711: LD_INT 1
47713: ARRAY
47714: GREATEREQUAL
47715: PUSH
47716: LD_VAR 0 5
47720: PPUSH
47721: LD_INT 2
47723: PPUSH
47724: CALL_OW 275
47728: PUSH
47729: LD_VAR 0 4
47733: PUSH
47734: LD_INT 2
47736: ARRAY
47737: GREATEREQUAL
47738: AND
47739: PUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: LD_INT 3
47747: PPUSH
47748: CALL_OW 275
47752: PUSH
47753: LD_VAR 0 4
47757: PUSH
47758: LD_INT 3
47760: ARRAY
47761: GREATEREQUAL
47762: AND
47763: ST_TO_ADDR
// end ;
47764: LD_VAR 0 3
47768: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47769: LD_INT 0
47771: PPUSH
47772: PPUSH
47773: PPUSH
47774: PPUSH
// pom := GetBase ( building ) ;
47775: LD_ADDR_VAR 0 3
47779: PUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: CALL_OW 274
47789: ST_TO_ADDR
// if not pom then
47790: LD_VAR 0 3
47794: NOT
47795: IFFALSE 47799
// exit ;
47797: GO 47969
// btype := GetBType ( building ) ;
47799: LD_ADDR_VAR 0 5
47803: PUSH
47804: LD_VAR 0 1
47808: PPUSH
47809: CALL_OW 266
47813: ST_TO_ADDR
// if btype = b_armoury then
47814: LD_VAR 0 5
47818: PUSH
47819: LD_INT 4
47821: EQUAL
47822: IFFALSE 47832
// btype := b_barracks ;
47824: LD_ADDR_VAR 0 5
47828: PUSH
47829: LD_INT 5
47831: ST_TO_ADDR
// if btype = b_depot then
47832: LD_VAR 0 5
47836: PUSH
47837: LD_INT 0
47839: EQUAL
47840: IFFALSE 47850
// btype := b_warehouse ;
47842: LD_ADDR_VAR 0 5
47846: PUSH
47847: LD_INT 1
47849: ST_TO_ADDR
// if btype = b_workshop then
47850: LD_VAR 0 5
47854: PUSH
47855: LD_INT 2
47857: EQUAL
47858: IFFALSE 47868
// btype := b_factory ;
47860: LD_ADDR_VAR 0 5
47864: PUSH
47865: LD_INT 3
47867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47868: LD_ADDR_VAR 0 4
47872: PUSH
47873: LD_VAR 0 5
47877: PPUSH
47878: LD_VAR 0 1
47882: PPUSH
47883: CALL_OW 248
47887: PPUSH
47888: CALL_OW 450
47892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47893: LD_ADDR_VAR 0 2
47897: PUSH
47898: LD_VAR 0 3
47902: PPUSH
47903: LD_INT 1
47905: PPUSH
47906: CALL_OW 275
47910: PUSH
47911: LD_VAR 0 4
47915: PUSH
47916: LD_INT 1
47918: ARRAY
47919: GREATEREQUAL
47920: PUSH
47921: LD_VAR 0 3
47925: PPUSH
47926: LD_INT 2
47928: PPUSH
47929: CALL_OW 275
47933: PUSH
47934: LD_VAR 0 4
47938: PUSH
47939: LD_INT 2
47941: ARRAY
47942: GREATEREQUAL
47943: AND
47944: PUSH
47945: LD_VAR 0 3
47949: PPUSH
47950: LD_INT 3
47952: PPUSH
47953: CALL_OW 275
47957: PUSH
47958: LD_VAR 0 4
47962: PUSH
47963: LD_INT 3
47965: ARRAY
47966: GREATEREQUAL
47967: AND
47968: ST_TO_ADDR
// end ;
47969: LD_VAR 0 2
47973: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
47978: PPUSH
// pom := GetBase ( building ) ;
47979: LD_ADDR_VAR 0 4
47983: PUSH
47984: LD_VAR 0 1
47988: PPUSH
47989: CALL_OW 274
47993: ST_TO_ADDR
// if not pom then
47994: LD_VAR 0 4
47998: NOT
47999: IFFALSE 48003
// exit ;
48001: GO 48104
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48003: LD_ADDR_VAR 0 5
48007: PUSH
48008: LD_VAR 0 2
48012: PPUSH
48013: LD_VAR 0 1
48017: PPUSH
48018: CALL_OW 248
48022: PPUSH
48023: CALL_OW 450
48027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_VAR 0 4
48037: PPUSH
48038: LD_INT 1
48040: PPUSH
48041: CALL_OW 275
48045: PUSH
48046: LD_VAR 0 5
48050: PUSH
48051: LD_INT 1
48053: ARRAY
48054: GREATEREQUAL
48055: PUSH
48056: LD_VAR 0 4
48060: PPUSH
48061: LD_INT 2
48063: PPUSH
48064: CALL_OW 275
48068: PUSH
48069: LD_VAR 0 5
48073: PUSH
48074: LD_INT 2
48076: ARRAY
48077: GREATEREQUAL
48078: AND
48079: PUSH
48080: LD_VAR 0 4
48084: PPUSH
48085: LD_INT 3
48087: PPUSH
48088: CALL_OW 275
48092: PUSH
48093: LD_VAR 0 5
48097: PUSH
48098: LD_INT 3
48100: ARRAY
48101: GREATEREQUAL
48102: AND
48103: ST_TO_ADDR
// end ;
48104: LD_VAR 0 3
48108: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48109: LD_INT 0
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
// result := false ;
48122: LD_ADDR_VAR 0 8
48126: PUSH
48127: LD_INT 0
48129: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48130: LD_VAR 0 5
48134: NOT
48135: PUSH
48136: LD_VAR 0 1
48140: NOT
48141: OR
48142: PUSH
48143: LD_VAR 0 2
48147: NOT
48148: OR
48149: PUSH
48150: LD_VAR 0 3
48154: NOT
48155: OR
48156: IFFALSE 48160
// exit ;
48158: GO 48974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48160: LD_ADDR_VAR 0 14
48164: PUSH
48165: LD_VAR 0 1
48169: PPUSH
48170: LD_VAR 0 2
48174: PPUSH
48175: LD_VAR 0 3
48179: PPUSH
48180: LD_VAR 0 4
48184: PPUSH
48185: LD_VAR 0 5
48189: PUSH
48190: LD_INT 1
48192: ARRAY
48193: PPUSH
48194: CALL_OW 248
48198: PPUSH
48199: LD_INT 0
48201: PPUSH
48202: CALL 50211 0 6
48206: ST_TO_ADDR
// if not hexes then
48207: LD_VAR 0 14
48211: NOT
48212: IFFALSE 48216
// exit ;
48214: GO 48974
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48216: LD_ADDR_VAR 0 17
48220: PUSH
48221: LD_VAR 0 5
48225: PPUSH
48226: LD_INT 22
48228: PUSH
48229: LD_VAR 0 13
48233: PPUSH
48234: CALL_OW 255
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 30
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 30
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PPUSH
48275: CALL_OW 72
48279: ST_TO_ADDR
// for i = 1 to hexes do
48280: LD_ADDR_VAR 0 9
48284: PUSH
48285: DOUBLE
48286: LD_INT 1
48288: DEC
48289: ST_TO_ADDR
48290: LD_VAR 0 14
48294: PUSH
48295: FOR_TO
48296: IFFALSE 48972
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48298: LD_ADDR_VAR 0 13
48302: PUSH
48303: LD_VAR 0 14
48307: PUSH
48308: LD_VAR 0 9
48312: ARRAY
48313: PUSH
48314: LD_INT 1
48316: ARRAY
48317: PPUSH
48318: LD_VAR 0 14
48322: PUSH
48323: LD_VAR 0 9
48327: ARRAY
48328: PUSH
48329: LD_INT 2
48331: ARRAY
48332: PPUSH
48333: CALL_OW 428
48337: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48338: LD_VAR 0 14
48342: PUSH
48343: LD_VAR 0 9
48347: ARRAY
48348: PUSH
48349: LD_INT 1
48351: ARRAY
48352: PPUSH
48353: LD_VAR 0 14
48357: PUSH
48358: LD_VAR 0 9
48362: ARRAY
48363: PUSH
48364: LD_INT 2
48366: ARRAY
48367: PPUSH
48368: CALL_OW 351
48372: PUSH
48373: LD_VAR 0 14
48377: PUSH
48378: LD_VAR 0 9
48382: ARRAY
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: PPUSH
48388: LD_VAR 0 14
48392: PUSH
48393: LD_VAR 0 9
48397: ARRAY
48398: PUSH
48399: LD_INT 2
48401: ARRAY
48402: PPUSH
48403: CALL_OW 488
48407: NOT
48408: OR
48409: PUSH
48410: LD_VAR 0 13
48414: PPUSH
48415: CALL_OW 247
48419: PUSH
48420: LD_INT 3
48422: EQUAL
48423: OR
48424: IFFALSE 48430
// exit ;
48426: POP
48427: POP
48428: GO 48974
// if not tmp then
48430: LD_VAR 0 13
48434: NOT
48435: IFFALSE 48439
// continue ;
48437: GO 48295
// result := true ;
48439: LD_ADDR_VAR 0 8
48443: PUSH
48444: LD_INT 1
48446: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48447: LD_VAR 0 6
48451: PUSH
48452: LD_VAR 0 13
48456: PPUSH
48457: CALL_OW 247
48461: PUSH
48462: LD_INT 2
48464: EQUAL
48465: AND
48466: PUSH
48467: LD_VAR 0 13
48471: PPUSH
48472: CALL_OW 263
48476: PUSH
48477: LD_INT 1
48479: EQUAL
48480: AND
48481: IFFALSE 48645
// begin if IsDrivenBy ( tmp ) then
48483: LD_VAR 0 13
48487: PPUSH
48488: CALL_OW 311
48492: IFFALSE 48496
// continue ;
48494: GO 48295
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48496: LD_VAR 0 6
48500: PPUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 60
48506: PUSH
48507: EMPTY
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: LD_INT 55
48519: PUSH
48520: EMPTY
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PPUSH
48531: CALL_OW 72
48535: IFFALSE 48643
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48537: LD_ADDR_VAR 0 18
48541: PUSH
48542: LD_VAR 0 6
48546: PPUSH
48547: LD_INT 3
48549: PUSH
48550: LD_INT 60
48552: PUSH
48553: EMPTY
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: PUSH
48563: LD_INT 55
48565: PUSH
48566: EMPTY
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PPUSH
48577: CALL_OW 72
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: ST_TO_ADDR
// if IsInUnit ( driver ) then
48586: LD_VAR 0 18
48590: PPUSH
48591: CALL_OW 310
48595: IFFALSE 48606
// ComExit ( driver ) ;
48597: LD_VAR 0 18
48601: PPUSH
48602: CALL 73395 0 1
// AddComEnterUnit ( driver , tmp ) ;
48606: LD_VAR 0 18
48610: PPUSH
48611: LD_VAR 0 13
48615: PPUSH
48616: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48620: LD_VAR 0 18
48624: PPUSH
48625: LD_VAR 0 7
48629: PPUSH
48630: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48634: LD_VAR 0 18
48638: PPUSH
48639: CALL_OW 181
// end ; continue ;
48643: GO 48295
// end ; if not cleaners or not tmp in cleaners then
48645: LD_VAR 0 6
48649: NOT
48650: PUSH
48651: LD_VAR 0 13
48655: PUSH
48656: LD_VAR 0 6
48660: IN
48661: NOT
48662: OR
48663: IFFALSE 48970
// begin if dep then
48665: LD_VAR 0 17
48669: IFFALSE 48805
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48671: LD_ADDR_VAR 0 16
48675: PUSH
48676: LD_VAR 0 17
48680: PUSH
48681: LD_INT 1
48683: ARRAY
48684: PPUSH
48685: CALL_OW 250
48689: PPUSH
48690: LD_VAR 0 17
48694: PUSH
48695: LD_INT 1
48697: ARRAY
48698: PPUSH
48699: CALL_OW 254
48703: PPUSH
48704: LD_INT 5
48706: PPUSH
48707: CALL_OW 272
48711: PUSH
48712: LD_VAR 0 17
48716: PUSH
48717: LD_INT 1
48719: ARRAY
48720: PPUSH
48721: CALL_OW 251
48725: PPUSH
48726: LD_VAR 0 17
48730: PUSH
48731: LD_INT 1
48733: ARRAY
48734: PPUSH
48735: CALL_OW 254
48739: PPUSH
48740: LD_INT 5
48742: PPUSH
48743: CALL_OW 273
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48752: LD_VAR 0 16
48756: PUSH
48757: LD_INT 1
48759: ARRAY
48760: PPUSH
48761: LD_VAR 0 16
48765: PUSH
48766: LD_INT 2
48768: ARRAY
48769: PPUSH
48770: CALL_OW 488
48774: IFFALSE 48805
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48776: LD_VAR 0 13
48780: PPUSH
48781: LD_VAR 0 16
48785: PUSH
48786: LD_INT 1
48788: ARRAY
48789: PPUSH
48790: LD_VAR 0 16
48794: PUSH
48795: LD_INT 2
48797: ARRAY
48798: PPUSH
48799: CALL_OW 111
// continue ;
48803: GO 48295
// end ; end ; r := GetDir ( tmp ) ;
48805: LD_ADDR_VAR 0 15
48809: PUSH
48810: LD_VAR 0 13
48814: PPUSH
48815: CALL_OW 254
48819: ST_TO_ADDR
// if r = 5 then
48820: LD_VAR 0 15
48824: PUSH
48825: LD_INT 5
48827: EQUAL
48828: IFFALSE 48838
// r := 0 ;
48830: LD_ADDR_VAR 0 15
48834: PUSH
48835: LD_INT 0
48837: ST_TO_ADDR
// for j = r to 5 do
48838: LD_ADDR_VAR 0 10
48842: PUSH
48843: DOUBLE
48844: LD_VAR 0 15
48848: DEC
48849: ST_TO_ADDR
48850: LD_INT 5
48852: PUSH
48853: FOR_TO
48854: IFFALSE 48968
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48856: LD_ADDR_VAR 0 11
48860: PUSH
48861: LD_VAR 0 13
48865: PPUSH
48866: CALL_OW 250
48870: PPUSH
48871: LD_VAR 0 10
48875: PPUSH
48876: LD_INT 2
48878: PPUSH
48879: CALL_OW 272
48883: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48884: LD_ADDR_VAR 0 12
48888: PUSH
48889: LD_VAR 0 13
48893: PPUSH
48894: CALL_OW 251
48898: PPUSH
48899: LD_VAR 0 10
48903: PPUSH
48904: LD_INT 2
48906: PPUSH
48907: CALL_OW 273
48911: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48912: LD_VAR 0 11
48916: PPUSH
48917: LD_VAR 0 12
48921: PPUSH
48922: CALL_OW 488
48926: PUSH
48927: LD_VAR 0 11
48931: PPUSH
48932: LD_VAR 0 12
48936: PPUSH
48937: CALL_OW 428
48941: NOT
48942: AND
48943: IFFALSE 48966
// begin ComMoveXY ( tmp , _x , _y ) ;
48945: LD_VAR 0 13
48949: PPUSH
48950: LD_VAR 0 11
48954: PPUSH
48955: LD_VAR 0 12
48959: PPUSH
48960: CALL_OW 111
// break ;
48964: GO 48968
// end ; end ;
48966: GO 48853
48968: POP
48969: POP
// end ; end ;
48970: GO 48295
48972: POP
48973: POP
// end ;
48974: LD_VAR 0 8
48978: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48979: LD_INT 0
48981: PPUSH
// result := true ;
48982: LD_ADDR_VAR 0 3
48986: PUSH
48987: LD_INT 1
48989: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48990: LD_VAR 0 2
48994: PUSH
48995: LD_INT 24
48997: DOUBLE
48998: EQUAL
48999: IFTRUE 49009
49001: LD_INT 33
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49009
49007: GO 49034
49009: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49010: LD_ADDR_VAR 0 3
49014: PUSH
49015: LD_INT 32
49017: PPUSH
49018: LD_VAR 0 1
49022: PPUSH
49023: CALL_OW 321
49027: PUSH
49028: LD_INT 2
49030: EQUAL
49031: ST_TO_ADDR
49032: GO 49354
49034: LD_INT 20
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49042
49040: GO 49067
49042: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49043: LD_ADDR_VAR 0 3
49047: PUSH
49048: LD_INT 6
49050: PPUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 321
49060: PUSH
49061: LD_INT 2
49063: EQUAL
49064: ST_TO_ADDR
49065: GO 49354
49067: LD_INT 22
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49081
49073: LD_INT 36
49075: DOUBLE
49076: EQUAL
49077: IFTRUE 49081
49079: GO 49106
49081: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49082: LD_ADDR_VAR 0 3
49086: PUSH
49087: LD_INT 15
49089: PPUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 321
49099: PUSH
49100: LD_INT 2
49102: EQUAL
49103: ST_TO_ADDR
49104: GO 49354
49106: LD_INT 30
49108: DOUBLE
49109: EQUAL
49110: IFTRUE 49114
49112: GO 49139
49114: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49115: LD_ADDR_VAR 0 3
49119: PUSH
49120: LD_INT 20
49122: PPUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL_OW 321
49132: PUSH
49133: LD_INT 2
49135: EQUAL
49136: ST_TO_ADDR
49137: GO 49354
49139: LD_INT 28
49141: DOUBLE
49142: EQUAL
49143: IFTRUE 49153
49145: LD_INT 21
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49153
49151: GO 49178
49153: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49154: LD_ADDR_VAR 0 3
49158: PUSH
49159: LD_INT 21
49161: PPUSH
49162: LD_VAR 0 1
49166: PPUSH
49167: CALL_OW 321
49171: PUSH
49172: LD_INT 2
49174: EQUAL
49175: ST_TO_ADDR
49176: GO 49354
49178: LD_INT 16
49180: DOUBLE
49181: EQUAL
49182: IFTRUE 49186
49184: GO 49213
49186: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49187: LD_ADDR_VAR 0 3
49191: PUSH
49192: LD_EXP 71
49196: PPUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 321
49206: PUSH
49207: LD_INT 2
49209: EQUAL
49210: ST_TO_ADDR
49211: GO 49354
49213: LD_INT 19
49215: DOUBLE
49216: EQUAL
49217: IFTRUE 49227
49219: LD_INT 23
49221: DOUBLE
49222: EQUAL
49223: IFTRUE 49227
49225: GO 49254
49227: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_EXP 70
49237: PPUSH
49238: LD_VAR 0 1
49242: PPUSH
49243: CALL_OW 321
49247: PUSH
49248: LD_INT 2
49250: EQUAL
49251: ST_TO_ADDR
49252: GO 49354
49254: LD_INT 17
49256: DOUBLE
49257: EQUAL
49258: IFTRUE 49262
49260: GO 49287
49262: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49263: LD_ADDR_VAR 0 3
49267: PUSH
49268: LD_INT 39
49270: PPUSH
49271: LD_VAR 0 1
49275: PPUSH
49276: CALL_OW 321
49280: PUSH
49281: LD_INT 2
49283: EQUAL
49284: ST_TO_ADDR
49285: GO 49354
49287: LD_INT 18
49289: DOUBLE
49290: EQUAL
49291: IFTRUE 49295
49293: GO 49320
49295: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49296: LD_ADDR_VAR 0 3
49300: PUSH
49301: LD_INT 40
49303: PPUSH
49304: LD_VAR 0 1
49308: PPUSH
49309: CALL_OW 321
49313: PUSH
49314: LD_INT 2
49316: EQUAL
49317: ST_TO_ADDR
49318: GO 49354
49320: LD_INT 27
49322: DOUBLE
49323: EQUAL
49324: IFTRUE 49328
49326: GO 49353
49328: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49329: LD_ADDR_VAR 0 3
49333: PUSH
49334: LD_INT 35
49336: PPUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 321
49346: PUSH
49347: LD_INT 2
49349: EQUAL
49350: ST_TO_ADDR
49351: GO 49354
49353: POP
// end ;
49354: LD_VAR 0 3
49358: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49359: LD_INT 0
49361: PPUSH
49362: PPUSH
49363: PPUSH
49364: PPUSH
49365: PPUSH
49366: PPUSH
49367: PPUSH
49368: PPUSH
49369: PPUSH
49370: PPUSH
49371: PPUSH
// result := false ;
49372: LD_ADDR_VAR 0 6
49376: PUSH
49377: LD_INT 0
49379: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49380: LD_VAR 0 1
49384: NOT
49385: PUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 266
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: IN
49406: NOT
49407: OR
49408: PUSH
49409: LD_VAR 0 2
49413: NOT
49414: OR
49415: PUSH
49416: LD_VAR 0 5
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: LD_INT 4
49435: PUSH
49436: LD_INT 5
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: IN
49447: NOT
49448: OR
49449: PUSH
49450: LD_VAR 0 3
49454: PPUSH
49455: LD_VAR 0 4
49459: PPUSH
49460: CALL_OW 488
49464: NOT
49465: OR
49466: IFFALSE 49470
// exit ;
49468: GO 50206
// side := GetSide ( depot ) ;
49470: LD_ADDR_VAR 0 9
49474: PUSH
49475: LD_VAR 0 1
49479: PPUSH
49480: CALL_OW 255
49484: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49485: LD_VAR 0 9
49489: PPUSH
49490: LD_VAR 0 2
49494: PPUSH
49495: CALL 48979 0 2
49499: NOT
49500: IFFALSE 49504
// exit ;
49502: GO 50206
// pom := GetBase ( depot ) ;
49504: LD_ADDR_VAR 0 10
49508: PUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 274
49518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49519: LD_ADDR_VAR 0 11
49523: PUSH
49524: LD_VAR 0 2
49528: PPUSH
49529: LD_VAR 0 1
49533: PPUSH
49534: CALL_OW 248
49538: PPUSH
49539: CALL_OW 450
49543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49544: LD_VAR 0 10
49548: PPUSH
49549: LD_INT 1
49551: PPUSH
49552: CALL_OW 275
49556: PUSH
49557: LD_VAR 0 11
49561: PUSH
49562: LD_INT 1
49564: ARRAY
49565: GREATEREQUAL
49566: PUSH
49567: LD_VAR 0 10
49571: PPUSH
49572: LD_INT 2
49574: PPUSH
49575: CALL_OW 275
49579: PUSH
49580: LD_VAR 0 11
49584: PUSH
49585: LD_INT 2
49587: ARRAY
49588: GREATEREQUAL
49589: AND
49590: PUSH
49591: LD_VAR 0 10
49595: PPUSH
49596: LD_INT 3
49598: PPUSH
49599: CALL_OW 275
49603: PUSH
49604: LD_VAR 0 11
49608: PUSH
49609: LD_INT 3
49611: ARRAY
49612: GREATEREQUAL
49613: AND
49614: NOT
49615: IFFALSE 49619
// exit ;
49617: GO 50206
// if GetBType ( depot ) = b_depot then
49619: LD_VAR 0 1
49623: PPUSH
49624: CALL_OW 266
49628: PUSH
49629: LD_INT 0
49631: EQUAL
49632: IFFALSE 49644
// dist := 28 else
49634: LD_ADDR_VAR 0 14
49638: PUSH
49639: LD_INT 28
49641: ST_TO_ADDR
49642: GO 49652
// dist := 36 ;
49644: LD_ADDR_VAR 0 14
49648: PUSH
49649: LD_INT 36
49651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49652: LD_VAR 0 1
49656: PPUSH
49657: LD_VAR 0 3
49661: PPUSH
49662: LD_VAR 0 4
49666: PPUSH
49667: CALL_OW 297
49671: PUSH
49672: LD_VAR 0 14
49676: GREATER
49677: IFFALSE 49681
// exit ;
49679: GO 50206
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49681: LD_ADDR_VAR 0 12
49685: PUSH
49686: LD_VAR 0 2
49690: PPUSH
49691: LD_VAR 0 3
49695: PPUSH
49696: LD_VAR 0 4
49700: PPUSH
49701: LD_VAR 0 5
49705: PPUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 248
49715: PPUSH
49716: LD_INT 0
49718: PPUSH
49719: CALL 50211 0 6
49723: ST_TO_ADDR
// if not hexes then
49724: LD_VAR 0 12
49728: NOT
49729: IFFALSE 49733
// exit ;
49731: GO 50206
// hex := GetHexInfo ( x , y ) ;
49733: LD_ADDR_VAR 0 15
49737: PUSH
49738: LD_VAR 0 3
49742: PPUSH
49743: LD_VAR 0 4
49747: PPUSH
49748: CALL_OW 546
49752: ST_TO_ADDR
// if hex [ 1 ] then
49753: LD_VAR 0 15
49757: PUSH
49758: LD_INT 1
49760: ARRAY
49761: IFFALSE 49765
// exit ;
49763: GO 50206
// height := hex [ 2 ] ;
49765: LD_ADDR_VAR 0 13
49769: PUSH
49770: LD_VAR 0 15
49774: PUSH
49775: LD_INT 2
49777: ARRAY
49778: ST_TO_ADDR
// for i = 1 to hexes do
49779: LD_ADDR_VAR 0 7
49783: PUSH
49784: DOUBLE
49785: LD_INT 1
49787: DEC
49788: ST_TO_ADDR
49789: LD_VAR 0 12
49793: PUSH
49794: FOR_TO
49795: IFFALSE 50125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49797: LD_VAR 0 12
49801: PUSH
49802: LD_VAR 0 7
49806: ARRAY
49807: PUSH
49808: LD_INT 1
49810: ARRAY
49811: PPUSH
49812: LD_VAR 0 12
49816: PUSH
49817: LD_VAR 0 7
49821: ARRAY
49822: PUSH
49823: LD_INT 2
49825: ARRAY
49826: PPUSH
49827: CALL_OW 488
49831: NOT
49832: PUSH
49833: LD_VAR 0 12
49837: PUSH
49838: LD_VAR 0 7
49842: ARRAY
49843: PUSH
49844: LD_INT 1
49846: ARRAY
49847: PPUSH
49848: LD_VAR 0 12
49852: PUSH
49853: LD_VAR 0 7
49857: ARRAY
49858: PUSH
49859: LD_INT 2
49861: ARRAY
49862: PPUSH
49863: CALL_OW 428
49867: PUSH
49868: LD_INT 0
49870: GREATER
49871: OR
49872: PUSH
49873: LD_VAR 0 12
49877: PUSH
49878: LD_VAR 0 7
49882: ARRAY
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PPUSH
49888: LD_VAR 0 12
49892: PUSH
49893: LD_VAR 0 7
49897: ARRAY
49898: PUSH
49899: LD_INT 2
49901: ARRAY
49902: PPUSH
49903: CALL_OW 351
49907: OR
49908: IFFALSE 49914
// exit ;
49910: POP
49911: POP
49912: GO 50206
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49914: LD_ADDR_VAR 0 8
49918: PUSH
49919: LD_VAR 0 12
49923: PUSH
49924: LD_VAR 0 7
49928: ARRAY
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: PPUSH
49934: LD_VAR 0 12
49938: PUSH
49939: LD_VAR 0 7
49943: ARRAY
49944: PUSH
49945: LD_INT 2
49947: ARRAY
49948: PPUSH
49949: CALL_OW 546
49953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49954: LD_VAR 0 8
49958: PUSH
49959: LD_INT 1
49961: ARRAY
49962: PUSH
49963: LD_VAR 0 8
49967: PUSH
49968: LD_INT 2
49970: ARRAY
49971: PUSH
49972: LD_VAR 0 13
49976: PUSH
49977: LD_INT 2
49979: PLUS
49980: GREATER
49981: OR
49982: PUSH
49983: LD_VAR 0 8
49987: PUSH
49988: LD_INT 2
49990: ARRAY
49991: PUSH
49992: LD_VAR 0 13
49996: PUSH
49997: LD_INT 2
49999: MINUS
50000: LESS
50001: OR
50002: PUSH
50003: LD_VAR 0 8
50007: PUSH
50008: LD_INT 3
50010: ARRAY
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 8
50017: PUSH
50018: LD_INT 9
50020: PUSH
50021: LD_INT 10
50023: PUSH
50024: LD_INT 11
50026: PUSH
50027: LD_INT 12
50029: PUSH
50030: LD_INT 13
50032: PUSH
50033: LD_INT 16
50035: PUSH
50036: LD_INT 17
50038: PUSH
50039: LD_INT 18
50041: PUSH
50042: LD_INT 19
50044: PUSH
50045: LD_INT 20
50047: PUSH
50048: LD_INT 21
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: IN
50066: NOT
50067: OR
50068: PUSH
50069: LD_VAR 0 8
50073: PUSH
50074: LD_INT 5
50076: ARRAY
50077: NOT
50078: OR
50079: PUSH
50080: LD_VAR 0 8
50084: PUSH
50085: LD_INT 6
50087: ARRAY
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 7
50097: PUSH
50098: LD_INT 9
50100: PUSH
50101: LD_INT 10
50103: PUSH
50104: LD_INT 11
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: IN
50115: NOT
50116: OR
50117: IFFALSE 50123
// exit ;
50119: POP
50120: POP
50121: GO 50206
// end ;
50123: GO 49794
50125: POP
50126: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50127: LD_VAR 0 9
50131: PPUSH
50132: LD_VAR 0 3
50136: PPUSH
50137: LD_VAR 0 4
50141: PPUSH
50142: LD_INT 20
50144: PPUSH
50145: CALL 42152 0 4
50149: PUSH
50150: LD_INT 4
50152: ARRAY
50153: IFFALSE 50157
// exit ;
50155: GO 50206
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50157: LD_VAR 0 2
50161: PUSH
50162: LD_INT 29
50164: PUSH
50165: LD_INT 30
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: IN
50172: PUSH
50173: LD_VAR 0 3
50177: PPUSH
50178: LD_VAR 0 4
50182: PPUSH
50183: LD_VAR 0 9
50187: PPUSH
50188: CALL_OW 440
50192: NOT
50193: AND
50194: IFFALSE 50198
// exit ;
50196: GO 50206
// result := true ;
50198: LD_ADDR_VAR 0 6
50202: PUSH
50203: LD_INT 1
50205: ST_TO_ADDR
// end ;
50206: LD_VAR 0 6
50210: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50211: LD_INT 0
50213: PPUSH
50214: PPUSH
50215: PPUSH
50216: PPUSH
50217: PPUSH
50218: PPUSH
50219: PPUSH
50220: PPUSH
50221: PPUSH
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
50254: PPUSH
50255: PPUSH
50256: PPUSH
50257: PPUSH
50258: PPUSH
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
50269: PPUSH
50270: PPUSH
// result = [ ] ;
50271: LD_ADDR_VAR 0 7
50275: PUSH
50276: EMPTY
50277: ST_TO_ADDR
// temp_list = [ ] ;
50278: LD_ADDR_VAR 0 9
50282: PUSH
50283: EMPTY
50284: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50285: LD_VAR 0 4
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 4
50304: PUSH
50305: LD_INT 5
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: IN
50316: NOT
50317: PUSH
50318: LD_VAR 0 1
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: IN
50333: PUSH
50334: LD_VAR 0 5
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: IN
50353: NOT
50354: AND
50355: OR
50356: IFFALSE 50360
// exit ;
50358: GO 68751
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50360: LD_VAR 0 1
50364: PUSH
50365: LD_INT 6
50367: PUSH
50368: LD_INT 7
50370: PUSH
50371: LD_INT 8
50373: PUSH
50374: LD_INT 13
50376: PUSH
50377: LD_INT 12
50379: PUSH
50380: LD_INT 15
50382: PUSH
50383: LD_INT 11
50385: PUSH
50386: LD_INT 14
50388: PUSH
50389: LD_INT 10
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: IN
50403: IFFALSE 50413
// btype = b_lab ;
50405: LD_ADDR_VAR 0 1
50409: PUSH
50410: LD_INT 6
50412: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50413: LD_VAR 0 6
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: IN
50432: NOT
50433: PUSH
50434: LD_VAR 0 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 6
50453: PUSH
50454: LD_INT 36
50456: PUSH
50457: LD_INT 4
50459: PUSH
50460: LD_INT 5
50462: PUSH
50463: LD_INT 31
50465: PUSH
50466: LD_INT 32
50468: PUSH
50469: LD_INT 33
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: IN
50485: NOT
50486: PUSH
50487: LD_VAR 0 6
50491: PUSH
50492: LD_INT 1
50494: EQUAL
50495: AND
50496: OR
50497: PUSH
50498: LD_VAR 0 1
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: IN
50513: NOT
50514: PUSH
50515: LD_VAR 0 6
50519: PUSH
50520: LD_INT 2
50522: EQUAL
50523: AND
50524: OR
50525: IFFALSE 50535
// mode = 0 ;
50527: LD_ADDR_VAR 0 6
50531: PUSH
50532: LD_INT 0
50534: ST_TO_ADDR
// case mode of 0 :
50535: LD_VAR 0 6
50539: PUSH
50540: LD_INT 0
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50548
50546: GO 62001
50548: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50549: LD_ADDR_VAR 0 11
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50742: LD_ADDR_VAR 0 12
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50938: LD_ADDR_VAR 0 13
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51137: LD_ADDR_VAR 0 14
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51333: LD_ADDR_VAR 0 15
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51526: LD_ADDR_VAR 0 16
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51719: LD_ADDR_VAR 0 17
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51949: LD_ADDR_VAR 0 18
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52179: LD_ADDR_VAR 0 19
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52409: LD_ADDR_VAR 0 20
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52639: LD_ADDR_VAR 0 21
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52869: LD_ADDR_VAR 0 22
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53099: LD_ADDR_VAR 0 23
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53379: LD_ADDR_VAR 0 24
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53655: LD_ADDR_VAR 0 25
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53929: LD_ADDR_VAR 0 26
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54205: LD_ADDR_VAR 0 27
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54485: LD_ADDR_VAR 0 28
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54767: LD_ADDR_VAR 0 29
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55046: LD_ADDR_VAR 0 30
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55324: LD_ADDR_VAR 0 31
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55602: LD_ADDR_VAR 0 32
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55880: LD_ADDR_VAR 0 33
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56159: LD_ADDR_VAR 0 34
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56439: LD_ADDR_VAR 0 35
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56551: LD_ADDR_VAR 0 36
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56663: LD_ADDR_VAR 0 37
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56775: LD_ADDR_VAR 0 38
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56887: LD_ADDR_VAR 0 39
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56999: LD_ADDR_VAR 0 40
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57111: LD_ADDR_VAR 0 41
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57461: LD_ADDR_VAR 0 42
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57811: LD_ADDR_VAR 0 43
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58159: LD_ADDR_VAR 0 44
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58509: LD_ADDR_VAR 0 45
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 3
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58859: LD_ADDR_VAR 0 46
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59207: LD_ADDR_VAR 0 47
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59358: LD_ADDR_VAR 0 48
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59505: LD_ADDR_VAR 0 49
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59649: LD_ADDR_VAR 0 50
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59793: LD_ADDR_VAR 0 51
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59940: LD_ADDR_VAR 0 52
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60091: LD_ADDR_VAR 0 53
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60321: LD_ADDR_VAR 0 54
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60551: LD_ADDR_VAR 0 55
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60781: LD_ADDR_VAR 0 56
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61011: LD_ADDR_VAR 0 57
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61241: LD_ADDR_VAR 0 58
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61471: LD_ADDR_VAR 0 59
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61559: LD_ADDR_VAR 0 60
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61647: LD_ADDR_VAR 0 61
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61735: LD_ADDR_VAR 0 62
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61823: LD_ADDR_VAR 0 63
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61911: LD_ADDR_VAR 0 64
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: ST_TO_ADDR
// end ; 1 :
61999: GO 67896
62001: LD_INT 1
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62009
62007: GO 64632
62009: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62010: LD_ADDR_VAR 0 11
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 3
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62054: LD_ADDR_VAR 0 12
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62095: LD_ADDR_VAR 0 13
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 3
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62135: LD_ADDR_VAR 0 14
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62176: LD_ADDR_VAR 0 15
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62220: LD_ADDR_VAR 0 16
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 3
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62266: LD_ADDR_VAR 0 17
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 3
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62310: LD_ADDR_VAR 0 18
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62351: LD_ADDR_VAR 0 19
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62391: LD_ADDR_VAR 0 20
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62432: LD_ADDR_VAR 0 21
62436: PUSH
62437: LD_INT 2
62439: NEG
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62476: LD_ADDR_VAR 0 22
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 3
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62522: LD_ADDR_VAR 0 23
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 4
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62566: LD_ADDR_VAR 0 24
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62607: LD_ADDR_VAR 0 25
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62647: LD_ADDR_VAR 0 26
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62688: LD_ADDR_VAR 0 27
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62732: LD_ADDR_VAR 0 28
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: LD_INT 3
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: LD_INT 4
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 4
62763: NEG
62764: PUSH
62765: LD_INT 3
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62778: LD_ADDR_VAR 0 29
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 2
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 4
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 4
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 5
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 5
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 6
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 6
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 5
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62933: LD_ADDR_VAR 0 30
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 4
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 4
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 5
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 5
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 6
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 6
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63076: LD_ADDR_VAR 0 31
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: LD_INT 4
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 5
63143: PUSH
63144: LD_INT 4
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: LD_INT 5
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 6
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 6
63183: PUSH
63184: LD_INT 6
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 5
63193: PUSH
63194: LD_INT 6
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63215: LD_ADDR_VAR 0 32
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 5
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: LD_INT 4
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 6
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 6
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63358: LD_ADDR_VAR 0 33
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 3
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 4
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 4
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 5
63444: NEG
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 5
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 5
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 6
63478: NEG
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 6
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63513: LD_ADDR_VAR 0 34
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: NEG
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 3
63544: NEG
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 3
63556: NEG
63557: PUSH
63558: LD_INT 4
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 4
63568: NEG
63569: PUSH
63570: LD_INT 3
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 4
63580: NEG
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 4
63592: NEG
63593: PUSH
63594: LD_INT 5
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 5
63604: NEG
63605: PUSH
63606: LD_INT 4
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 5
63616: NEG
63617: PUSH
63618: LD_INT 5
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 5
63628: NEG
63629: PUSH
63630: LD_INT 6
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 6
63640: NEG
63641: PUSH
63642: LD_INT 5
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 6
63652: NEG
63653: PUSH
63654: LD_INT 6
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63676: LD_ADDR_VAR 0 41
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 3
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63720: LD_ADDR_VAR 0 42
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63761: LD_ADDR_VAR 0 43
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 3
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63801: LD_ADDR_VAR 0 44
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 3
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63842: LD_ADDR_VAR 0 45
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63886: LD_ADDR_VAR 0 46
63890: PUSH
63891: LD_INT 2
63893: NEG
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 3
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63932: LD_ADDR_VAR 0 47
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63965: LD_ADDR_VAR 0 48
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63996: LD_ADDR_VAR 0 49
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64025: LD_ADDR_VAR 0 50
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 3
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64054: LD_ADDR_VAR 0 51
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64085: LD_ADDR_VAR 0 52
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64118: LD_ADDR_VAR 0 53
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 3
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: LD_INT 3
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64162: LD_ADDR_VAR 0 54
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64203: LD_ADDR_VAR 0 55
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64243: LD_ADDR_VAR 0 56
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64284: LD_ADDR_VAR 0 57
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 3
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64328: LD_ADDR_VAR 0 58
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 3
64347: NEG
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: NEG
64360: PUSH
64361: LD_INT 3
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64374: LD_ADDR_VAR 0 59
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64418: LD_ADDR_VAR 0 60
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64459: LD_ADDR_VAR 0 61
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64499: LD_ADDR_VAR 0 62
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64540: LD_ADDR_VAR 0 63
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64584: LD_ADDR_VAR 0 64
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// end ; 2 :
64630: GO 67896
64632: LD_INT 2
64634: DOUBLE
64635: EQUAL
64636: IFTRUE 64640
64638: GO 67895
64640: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64641: LD_ADDR_VAR 0 29
64645: PUSH
64646: LD_INT 4
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 4
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 5
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 5
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 5
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 4
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 4
64771: PUSH
64772: LD_INT 4
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: PUSH
64782: LD_INT 4
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 4
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 4
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 4
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 5
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 5
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 5
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 3
64935: NEG
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: NEG
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 3
64969: NEG
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 4
64980: NEG
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 4
64991: NEG
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: NEG
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 4
65026: NEG
65027: PUSH
65028: LD_INT 4
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 4
65038: NEG
65039: PUSH
65040: LD_INT 5
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: LD_INT 4
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 3
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 4
65074: NEG
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 5
65086: NEG
65087: PUSH
65088: LD_INT 4
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 5
65098: NEG
65099: PUSH
65100: LD_INT 5
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: LD_INT 5
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 5
65122: NEG
65123: PUSH
65124: LD_INT 3
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65179: LD_ADDR_VAR 0 30
65183: PUSH
65184: LD_INT 4
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 4
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 5
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 5
65216: PUSH
65217: LD_INT 5
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: LD_INT 5
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 4
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 5
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 3
65266: PUSH
65267: LD_INT 5
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 3
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: NEG
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 5
65425: NEG
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 5
65436: NEG
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 5
65448: NEG
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 2
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: LD_INT 2
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 4
65543: NEG
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: LD_INT 4
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: NEG
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 4
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 5
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 4
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: LD_INT 5
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: LD_INT 3
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 5
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65726: LD_ADDR_VAR 0 31
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 4
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: LD_INT 5
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 5
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 5
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 3
65826: NEG
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 4
65882: NEG
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 4
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 4
65928: NEG
65929: PUSH
65930: LD_INT 4
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 4
65940: NEG
65941: PUSH
65942: LD_INT 5
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 4
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 3
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 4
65976: NEG
65977: PUSH
65978: LD_INT 3
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 5
65988: NEG
65989: PUSH
65990: LD_INT 4
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 5
66000: NEG
66001: PUSH
66002: LD_INT 5
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: LD_INT 5
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 5
66024: NEG
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 4
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: LD_INT 3
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 4
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 4
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 4
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 4
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 5
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 5
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 4
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 5
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66276: LD_ADDR_VAR 0 32
66280: PUSH
66281: LD_INT 4
66283: NEG
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 4
66294: NEG
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 5
66339: NEG
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 5
66362: NEG
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: NEG
66398: PUSH
66399: LD_INT 4
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 2
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 3
66433: NEG
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: NEG
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 4
66457: NEG
66458: PUSH
66459: LD_INT 4
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: LD_INT 4
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 4
66481: NEG
66482: PUSH
66483: LD_INT 2
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 4
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 5
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 4
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 3
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 5
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 5
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 3
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 4
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 2
66667: PUSH
66668: LD_INT 2
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 4
66688: PUSH
66689: LD_INT 4
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 4
66698: PUSH
66699: LD_INT 3
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 5
66708: PUSH
66709: LD_INT 4
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 5
66718: PUSH
66719: LD_INT 5
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 4
66728: PUSH
66729: LD_INT 5
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 4
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 5
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 5
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66823: LD_ADDR_VAR 0 33
66827: PUSH
66828: LD_INT 4
66830: NEG
66831: PUSH
66832: LD_INT 4
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 4
66842: NEG
66843: PUSH
66844: LD_INT 5
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 4
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 4
66878: NEG
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 5
66890: NEG
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 5
66902: NEG
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 3
66914: NEG
66915: PUSH
66916: LD_INT 5
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 5
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: LD_INT 3
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 4
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 2
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: LD_INT 4
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 4
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 5
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 5
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 4
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 5
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 4
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 3
67173: PUSH
67174: LD_INT 4
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: LD_INT 4
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 4
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: LD_INT 4
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: LD_INT 5
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 5
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 4
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 5
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67361: LD_ADDR_VAR 0 34
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 5
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: LD_INT 4
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 5
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: LD_INT 5
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 3
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 4
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 4
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 2
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 4
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 5
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 4
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: LD_INT 4
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 5
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 5
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: LD_INT 2
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: LD_INT 4
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: NEG
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 3
67780: NEG
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 4
67791: NEG
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 5
67802: NEG
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 5
67825: NEG
67826: PUSH
67827: LD_INT 2
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: ST_TO_ADDR
// end ; end ;
67893: GO 67896
67895: POP
// case btype of b_depot , b_warehouse :
67896: LD_VAR 0 1
67900: PUSH
67901: LD_INT 0
67903: DOUBLE
67904: EQUAL
67905: IFTRUE 67915
67907: LD_INT 1
67909: DOUBLE
67910: EQUAL
67911: IFTRUE 67915
67913: GO 68116
67915: POP
// case nation of nation_american :
67916: LD_VAR 0 5
67920: PUSH
67921: LD_INT 1
67923: DOUBLE
67924: EQUAL
67925: IFTRUE 67929
67927: GO 67985
67929: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67930: LD_ADDR_VAR 0 9
67934: PUSH
67935: LD_VAR 0 11
67939: PUSH
67940: LD_VAR 0 12
67944: PUSH
67945: LD_VAR 0 13
67949: PUSH
67950: LD_VAR 0 14
67954: PUSH
67955: LD_VAR 0 15
67959: PUSH
67960: LD_VAR 0 16
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: PUSH
67973: LD_VAR 0 4
67977: PUSH
67978: LD_INT 1
67980: PLUS
67981: ARRAY
67982: ST_TO_ADDR
67983: GO 68114
67985: LD_INT 2
67987: DOUBLE
67988: EQUAL
67989: IFTRUE 67993
67991: GO 68049
67993: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67994: LD_ADDR_VAR 0 9
67998: PUSH
67999: LD_VAR 0 17
68003: PUSH
68004: LD_VAR 0 18
68008: PUSH
68009: LD_VAR 0 19
68013: PUSH
68014: LD_VAR 0 20
68018: PUSH
68019: LD_VAR 0 21
68023: PUSH
68024: LD_VAR 0 22
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: PUSH
68037: LD_VAR 0 4
68041: PUSH
68042: LD_INT 1
68044: PLUS
68045: ARRAY
68046: ST_TO_ADDR
68047: GO 68114
68049: LD_INT 3
68051: DOUBLE
68052: EQUAL
68053: IFTRUE 68057
68055: GO 68113
68057: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68058: LD_ADDR_VAR 0 9
68062: PUSH
68063: LD_VAR 0 23
68067: PUSH
68068: LD_VAR 0 24
68072: PUSH
68073: LD_VAR 0 25
68077: PUSH
68078: LD_VAR 0 26
68082: PUSH
68083: LD_VAR 0 27
68087: PUSH
68088: LD_VAR 0 28
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: PUSH
68101: LD_VAR 0 4
68105: PUSH
68106: LD_INT 1
68108: PLUS
68109: ARRAY
68110: ST_TO_ADDR
68111: GO 68114
68113: POP
68114: GO 68669
68116: LD_INT 2
68118: DOUBLE
68119: EQUAL
68120: IFTRUE 68130
68122: LD_INT 3
68124: DOUBLE
68125: EQUAL
68126: IFTRUE 68130
68128: GO 68186
68130: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68131: LD_ADDR_VAR 0 9
68135: PUSH
68136: LD_VAR 0 29
68140: PUSH
68141: LD_VAR 0 30
68145: PUSH
68146: LD_VAR 0 31
68150: PUSH
68151: LD_VAR 0 32
68155: PUSH
68156: LD_VAR 0 33
68160: PUSH
68161: LD_VAR 0 34
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: PUSH
68174: LD_VAR 0 4
68178: PUSH
68179: LD_INT 1
68181: PLUS
68182: ARRAY
68183: ST_TO_ADDR
68184: GO 68669
68186: LD_INT 16
68188: DOUBLE
68189: EQUAL
68190: IFTRUE 68248
68192: LD_INT 17
68194: DOUBLE
68195: EQUAL
68196: IFTRUE 68248
68198: LD_INT 18
68200: DOUBLE
68201: EQUAL
68202: IFTRUE 68248
68204: LD_INT 19
68206: DOUBLE
68207: EQUAL
68208: IFTRUE 68248
68210: LD_INT 22
68212: DOUBLE
68213: EQUAL
68214: IFTRUE 68248
68216: LD_INT 20
68218: DOUBLE
68219: EQUAL
68220: IFTRUE 68248
68222: LD_INT 21
68224: DOUBLE
68225: EQUAL
68226: IFTRUE 68248
68228: LD_INT 23
68230: DOUBLE
68231: EQUAL
68232: IFTRUE 68248
68234: LD_INT 24
68236: DOUBLE
68237: EQUAL
68238: IFTRUE 68248
68240: LD_INT 25
68242: DOUBLE
68243: EQUAL
68244: IFTRUE 68248
68246: GO 68304
68248: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68249: LD_ADDR_VAR 0 9
68253: PUSH
68254: LD_VAR 0 35
68258: PUSH
68259: LD_VAR 0 36
68263: PUSH
68264: LD_VAR 0 37
68268: PUSH
68269: LD_VAR 0 38
68273: PUSH
68274: LD_VAR 0 39
68278: PUSH
68279: LD_VAR 0 40
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: PUSH
68292: LD_VAR 0 4
68296: PUSH
68297: LD_INT 1
68299: PLUS
68300: ARRAY
68301: ST_TO_ADDR
68302: GO 68669
68304: LD_INT 6
68306: DOUBLE
68307: EQUAL
68308: IFTRUE 68360
68310: LD_INT 7
68312: DOUBLE
68313: EQUAL
68314: IFTRUE 68360
68316: LD_INT 8
68318: DOUBLE
68319: EQUAL
68320: IFTRUE 68360
68322: LD_INT 13
68324: DOUBLE
68325: EQUAL
68326: IFTRUE 68360
68328: LD_INT 12
68330: DOUBLE
68331: EQUAL
68332: IFTRUE 68360
68334: LD_INT 15
68336: DOUBLE
68337: EQUAL
68338: IFTRUE 68360
68340: LD_INT 11
68342: DOUBLE
68343: EQUAL
68344: IFTRUE 68360
68346: LD_INT 14
68348: DOUBLE
68349: EQUAL
68350: IFTRUE 68360
68352: LD_INT 10
68354: DOUBLE
68355: EQUAL
68356: IFTRUE 68360
68358: GO 68416
68360: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68361: LD_ADDR_VAR 0 9
68365: PUSH
68366: LD_VAR 0 41
68370: PUSH
68371: LD_VAR 0 42
68375: PUSH
68376: LD_VAR 0 43
68380: PUSH
68381: LD_VAR 0 44
68385: PUSH
68386: LD_VAR 0 45
68390: PUSH
68391: LD_VAR 0 46
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: PUSH
68404: LD_VAR 0 4
68408: PUSH
68409: LD_INT 1
68411: PLUS
68412: ARRAY
68413: ST_TO_ADDR
68414: GO 68669
68416: LD_INT 36
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68424
68422: GO 68480
68424: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68425: LD_ADDR_VAR 0 9
68429: PUSH
68430: LD_VAR 0 47
68434: PUSH
68435: LD_VAR 0 48
68439: PUSH
68440: LD_VAR 0 49
68444: PUSH
68445: LD_VAR 0 50
68449: PUSH
68450: LD_VAR 0 51
68454: PUSH
68455: LD_VAR 0 52
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_VAR 0 4
68472: PUSH
68473: LD_INT 1
68475: PLUS
68476: ARRAY
68477: ST_TO_ADDR
68478: GO 68669
68480: LD_INT 4
68482: DOUBLE
68483: EQUAL
68484: IFTRUE 68506
68486: LD_INT 5
68488: DOUBLE
68489: EQUAL
68490: IFTRUE 68506
68492: LD_INT 34
68494: DOUBLE
68495: EQUAL
68496: IFTRUE 68506
68498: LD_INT 37
68500: DOUBLE
68501: EQUAL
68502: IFTRUE 68506
68504: GO 68562
68506: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68507: LD_ADDR_VAR 0 9
68511: PUSH
68512: LD_VAR 0 53
68516: PUSH
68517: LD_VAR 0 54
68521: PUSH
68522: LD_VAR 0 55
68526: PUSH
68527: LD_VAR 0 56
68531: PUSH
68532: LD_VAR 0 57
68536: PUSH
68537: LD_VAR 0 58
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: PUSH
68550: LD_VAR 0 4
68554: PUSH
68555: LD_INT 1
68557: PLUS
68558: ARRAY
68559: ST_TO_ADDR
68560: GO 68669
68562: LD_INT 31
68564: DOUBLE
68565: EQUAL
68566: IFTRUE 68612
68568: LD_INT 32
68570: DOUBLE
68571: EQUAL
68572: IFTRUE 68612
68574: LD_INT 33
68576: DOUBLE
68577: EQUAL
68578: IFTRUE 68612
68580: LD_INT 27
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68612
68586: LD_INT 26
68588: DOUBLE
68589: EQUAL
68590: IFTRUE 68612
68592: LD_INT 28
68594: DOUBLE
68595: EQUAL
68596: IFTRUE 68612
68598: LD_INT 29
68600: DOUBLE
68601: EQUAL
68602: IFTRUE 68612
68604: LD_INT 30
68606: DOUBLE
68607: EQUAL
68608: IFTRUE 68612
68610: GO 68668
68612: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68613: LD_ADDR_VAR 0 9
68617: PUSH
68618: LD_VAR 0 59
68622: PUSH
68623: LD_VAR 0 60
68627: PUSH
68628: LD_VAR 0 61
68632: PUSH
68633: LD_VAR 0 62
68637: PUSH
68638: LD_VAR 0 63
68642: PUSH
68643: LD_VAR 0 64
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: PUSH
68656: LD_VAR 0 4
68660: PUSH
68661: LD_INT 1
68663: PLUS
68664: ARRAY
68665: ST_TO_ADDR
68666: GO 68669
68668: POP
// temp_list2 = [ ] ;
68669: LD_ADDR_VAR 0 10
68673: PUSH
68674: EMPTY
68675: ST_TO_ADDR
// for i in temp_list do
68676: LD_ADDR_VAR 0 8
68680: PUSH
68681: LD_VAR 0 9
68685: PUSH
68686: FOR_IN
68687: IFFALSE 68739
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68689: LD_ADDR_VAR 0 10
68693: PUSH
68694: LD_VAR 0 10
68698: PUSH
68699: LD_VAR 0 8
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PUSH
68708: LD_VAR 0 2
68712: PLUS
68713: PUSH
68714: LD_VAR 0 8
68718: PUSH
68719: LD_INT 2
68721: ARRAY
68722: PUSH
68723: LD_VAR 0 3
68727: PLUS
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: EMPTY
68734: LIST
68735: ADD
68736: ST_TO_ADDR
68737: GO 68686
68739: POP
68740: POP
// result = temp_list2 ;
68741: LD_ADDR_VAR 0 7
68745: PUSH
68746: LD_VAR 0 10
68750: ST_TO_ADDR
// end ;
68751: LD_VAR 0 7
68755: RET
// export function EnemyInRange ( unit , dist ) ; begin
68756: LD_INT 0
68758: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: CALL_OW 255
68773: PPUSH
68774: LD_VAR 0 1
68778: PPUSH
68779: CALL_OW 250
68783: PPUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: CALL_OW 251
68793: PPUSH
68794: LD_VAR 0 2
68798: PPUSH
68799: CALL 42152 0 4
68803: PUSH
68804: LD_INT 4
68806: ARRAY
68807: ST_TO_ADDR
// end ;
68808: LD_VAR 0 3
68812: RET
// export function PlayerSeeMe ( unit ) ; begin
68813: LD_INT 0
68815: PPUSH
// result := See ( your_side , unit ) ;
68816: LD_ADDR_VAR 0 2
68820: PUSH
68821: LD_OWVAR 2
68825: PPUSH
68826: LD_VAR 0 1
68830: PPUSH
68831: CALL_OW 292
68835: ST_TO_ADDR
// end ;
68836: LD_VAR 0 2
68840: RET
// export function ReverseDir ( unit ) ; begin
68841: LD_INT 0
68843: PPUSH
// if not unit then
68844: LD_VAR 0 1
68848: NOT
68849: IFFALSE 68853
// exit ;
68851: GO 68876
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68853: LD_ADDR_VAR 0 2
68857: PUSH
68858: LD_VAR 0 1
68862: PPUSH
68863: CALL_OW 254
68867: PUSH
68868: LD_INT 3
68870: PLUS
68871: PUSH
68872: LD_INT 6
68874: MOD
68875: ST_TO_ADDR
// end ;
68876: LD_VAR 0 2
68880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68881: LD_INT 0
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
// if not hexes then
68888: LD_VAR 0 2
68892: NOT
68893: IFFALSE 68897
// exit ;
68895: GO 69045
// dist := 9999 ;
68897: LD_ADDR_VAR 0 5
68901: PUSH
68902: LD_INT 9999
68904: ST_TO_ADDR
// for i = 1 to hexes do
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: DOUBLE
68911: LD_INT 1
68913: DEC
68914: ST_TO_ADDR
68915: LD_VAR 0 2
68919: PUSH
68920: FOR_TO
68921: IFFALSE 69033
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68923: LD_VAR 0 1
68927: PPUSH
68928: LD_VAR 0 2
68932: PUSH
68933: LD_VAR 0 4
68937: ARRAY
68938: PUSH
68939: LD_INT 1
68941: ARRAY
68942: PPUSH
68943: LD_VAR 0 2
68947: PUSH
68948: LD_VAR 0 4
68952: ARRAY
68953: PUSH
68954: LD_INT 2
68956: ARRAY
68957: PPUSH
68958: CALL_OW 297
68962: PUSH
68963: LD_VAR 0 5
68967: LESS
68968: IFFALSE 69031
// begin hex := hexes [ i ] ;
68970: LD_ADDR_VAR 0 7
68974: PUSH
68975: LD_VAR 0 2
68979: PUSH
68980: LD_VAR 0 4
68984: ARRAY
68985: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68986: LD_ADDR_VAR 0 5
68990: PUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 2
69000: PUSH
69001: LD_VAR 0 4
69005: ARRAY
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PPUSH
69011: LD_VAR 0 2
69015: PUSH
69016: LD_VAR 0 4
69020: ARRAY
69021: PUSH
69022: LD_INT 2
69024: ARRAY
69025: PPUSH
69026: CALL_OW 297
69030: ST_TO_ADDR
// end ; end ;
69031: GO 68920
69033: POP
69034: POP
// result := hex ;
69035: LD_ADDR_VAR 0 3
69039: PUSH
69040: LD_VAR 0 7
69044: ST_TO_ADDR
// end ;
69045: LD_VAR 0 3
69049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69050: LD_INT 0
69052: PPUSH
69053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69054: LD_VAR 0 1
69058: NOT
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: LD_INT 21
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 23
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PPUSH
69089: CALL_OW 69
69093: IN
69094: NOT
69095: OR
69096: IFFALSE 69100
// exit ;
69098: GO 69147
// for i = 1 to 3 do
69100: LD_ADDR_VAR 0 3
69104: PUSH
69105: DOUBLE
69106: LD_INT 1
69108: DEC
69109: ST_TO_ADDR
69110: LD_INT 3
69112: PUSH
69113: FOR_TO
69114: IFFALSE 69145
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69116: LD_VAR 0 1
69120: PPUSH
69121: CALL_OW 250
69125: PPUSH
69126: LD_VAR 0 1
69130: PPUSH
69131: CALL_OW 251
69135: PPUSH
69136: LD_INT 1
69138: PPUSH
69139: CALL_OW 453
69143: GO 69113
69145: POP
69146: POP
// end ;
69147: LD_VAR 0 2
69151: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69152: LD_INT 0
69154: PPUSH
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
69159: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69160: LD_VAR 0 1
69164: NOT
69165: PUSH
69166: LD_VAR 0 2
69170: NOT
69171: OR
69172: PUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 314
69182: OR
69183: IFFALSE 69187
// exit ;
69185: GO 69628
// x := GetX ( enemy_unit ) ;
69187: LD_ADDR_VAR 0 7
69191: PUSH
69192: LD_VAR 0 2
69196: PPUSH
69197: CALL_OW 250
69201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69202: LD_ADDR_VAR 0 8
69206: PUSH
69207: LD_VAR 0 2
69211: PPUSH
69212: CALL_OW 251
69216: ST_TO_ADDR
// if not x or not y then
69217: LD_VAR 0 7
69221: NOT
69222: PUSH
69223: LD_VAR 0 8
69227: NOT
69228: OR
69229: IFFALSE 69233
// exit ;
69231: GO 69628
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69233: LD_ADDR_VAR 0 6
69237: PUSH
69238: LD_VAR 0 7
69242: PPUSH
69243: LD_INT 0
69245: PPUSH
69246: LD_INT 4
69248: PPUSH
69249: CALL_OW 272
69253: PUSH
69254: LD_VAR 0 8
69258: PPUSH
69259: LD_INT 0
69261: PPUSH
69262: LD_INT 4
69264: PPUSH
69265: CALL_OW 273
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_VAR 0 7
69278: PPUSH
69279: LD_INT 1
69281: PPUSH
69282: LD_INT 4
69284: PPUSH
69285: CALL_OW 272
69289: PUSH
69290: LD_VAR 0 8
69294: PPUSH
69295: LD_INT 1
69297: PPUSH
69298: LD_INT 4
69300: PPUSH
69301: CALL_OW 273
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_VAR 0 7
69314: PPUSH
69315: LD_INT 2
69317: PPUSH
69318: LD_INT 4
69320: PPUSH
69321: CALL_OW 272
69325: PUSH
69326: LD_VAR 0 8
69330: PPUSH
69331: LD_INT 2
69333: PPUSH
69334: LD_INT 4
69336: PPUSH
69337: CALL_OW 273
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_VAR 0 7
69350: PPUSH
69351: LD_INT 3
69353: PPUSH
69354: LD_INT 4
69356: PPUSH
69357: CALL_OW 272
69361: PUSH
69362: LD_VAR 0 8
69366: PPUSH
69367: LD_INT 3
69369: PPUSH
69370: LD_INT 4
69372: PPUSH
69373: CALL_OW 273
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_VAR 0 7
69386: PPUSH
69387: LD_INT 4
69389: PPUSH
69390: LD_INT 4
69392: PPUSH
69393: CALL_OW 272
69397: PUSH
69398: LD_VAR 0 8
69402: PPUSH
69403: LD_INT 4
69405: PPUSH
69406: LD_INT 4
69408: PPUSH
69409: CALL_OW 273
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_VAR 0 7
69422: PPUSH
69423: LD_INT 5
69425: PPUSH
69426: LD_INT 4
69428: PPUSH
69429: CALL_OW 272
69433: PUSH
69434: LD_VAR 0 8
69438: PPUSH
69439: LD_INT 5
69441: PPUSH
69442: LD_INT 4
69444: PPUSH
69445: CALL_OW 273
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: ST_TO_ADDR
// for i = tmp downto 1 do
69462: LD_ADDR_VAR 0 4
69466: PUSH
69467: DOUBLE
69468: LD_VAR 0 6
69472: INC
69473: ST_TO_ADDR
69474: LD_INT 1
69476: PUSH
69477: FOR_DOWNTO
69478: IFFALSE 69579
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69480: LD_VAR 0 6
69484: PUSH
69485: LD_VAR 0 4
69489: ARRAY
69490: PUSH
69491: LD_INT 1
69493: ARRAY
69494: PPUSH
69495: LD_VAR 0 6
69499: PUSH
69500: LD_VAR 0 4
69504: ARRAY
69505: PUSH
69506: LD_INT 2
69508: ARRAY
69509: PPUSH
69510: CALL_OW 488
69514: NOT
69515: PUSH
69516: LD_VAR 0 6
69520: PUSH
69521: LD_VAR 0 4
69525: ARRAY
69526: PUSH
69527: LD_INT 1
69529: ARRAY
69530: PPUSH
69531: LD_VAR 0 6
69535: PUSH
69536: LD_VAR 0 4
69540: ARRAY
69541: PUSH
69542: LD_INT 2
69544: ARRAY
69545: PPUSH
69546: CALL_OW 428
69550: PUSH
69551: LD_INT 0
69553: NONEQUAL
69554: OR
69555: IFFALSE 69577
// tmp := Delete ( tmp , i ) ;
69557: LD_ADDR_VAR 0 6
69561: PUSH
69562: LD_VAR 0 6
69566: PPUSH
69567: LD_VAR 0 4
69571: PPUSH
69572: CALL_OW 3
69576: ST_TO_ADDR
69577: GO 69477
69579: POP
69580: POP
// j := GetClosestHex ( unit , tmp ) ;
69581: LD_ADDR_VAR 0 5
69585: PUSH
69586: LD_VAR 0 1
69590: PPUSH
69591: LD_VAR 0 6
69595: PPUSH
69596: CALL 68881 0 2
69600: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69601: LD_VAR 0 1
69605: PPUSH
69606: LD_VAR 0 5
69610: PUSH
69611: LD_INT 1
69613: ARRAY
69614: PPUSH
69615: LD_VAR 0 5
69619: PUSH
69620: LD_INT 2
69622: ARRAY
69623: PPUSH
69624: CALL_OW 111
// end ;
69628: LD_VAR 0 3
69632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
69637: PPUSH
// uc_side = 0 ;
69638: LD_ADDR_OWVAR 20
69642: PUSH
69643: LD_INT 0
69645: ST_TO_ADDR
// uc_nation = 0 ;
69646: LD_ADDR_OWVAR 21
69650: PUSH
69651: LD_INT 0
69653: ST_TO_ADDR
// InitHc_All ( ) ;
69654: CALL_OW 584
// InitVc ;
69658: CALL_OW 20
// if mastodonts then
69662: LD_VAR 0 6
69666: IFFALSE 69733
// for i = 1 to mastodonts do
69668: LD_ADDR_VAR 0 11
69672: PUSH
69673: DOUBLE
69674: LD_INT 1
69676: DEC
69677: ST_TO_ADDR
69678: LD_VAR 0 6
69682: PUSH
69683: FOR_TO
69684: IFFALSE 69731
// begin vc_chassis := 31 ;
69686: LD_ADDR_OWVAR 37
69690: PUSH
69691: LD_INT 31
69693: ST_TO_ADDR
// vc_control := control_rider ;
69694: LD_ADDR_OWVAR 38
69698: PUSH
69699: LD_INT 4
69701: ST_TO_ADDR
// animal := CreateVehicle ;
69702: LD_ADDR_VAR 0 12
69706: PUSH
69707: CALL_OW 45
69711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69712: LD_VAR 0 12
69716: PPUSH
69717: LD_VAR 0 8
69721: PPUSH
69722: LD_INT 0
69724: PPUSH
69725: CALL 71921 0 3
// end ;
69729: GO 69683
69731: POP
69732: POP
// if horses then
69733: LD_VAR 0 5
69737: IFFALSE 69804
// for i = 1 to horses do
69739: LD_ADDR_VAR 0 11
69743: PUSH
69744: DOUBLE
69745: LD_INT 1
69747: DEC
69748: ST_TO_ADDR
69749: LD_VAR 0 5
69753: PUSH
69754: FOR_TO
69755: IFFALSE 69802
// begin hc_class := 21 ;
69757: LD_ADDR_OWVAR 28
69761: PUSH
69762: LD_INT 21
69764: ST_TO_ADDR
// hc_gallery :=  ;
69765: LD_ADDR_OWVAR 33
69769: PUSH
69770: LD_STRING 
69772: ST_TO_ADDR
// animal := CreateHuman ;
69773: LD_ADDR_VAR 0 12
69777: PUSH
69778: CALL_OW 44
69782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69783: LD_VAR 0 12
69787: PPUSH
69788: LD_VAR 0 8
69792: PPUSH
69793: LD_INT 0
69795: PPUSH
69796: CALL 71921 0 3
// end ;
69800: GO 69754
69802: POP
69803: POP
// if birds then
69804: LD_VAR 0 1
69808: IFFALSE 69875
// for i = 1 to birds do
69810: LD_ADDR_VAR 0 11
69814: PUSH
69815: DOUBLE
69816: LD_INT 1
69818: DEC
69819: ST_TO_ADDR
69820: LD_VAR 0 1
69824: PUSH
69825: FOR_TO
69826: IFFALSE 69873
// begin hc_class = 18 ;
69828: LD_ADDR_OWVAR 28
69832: PUSH
69833: LD_INT 18
69835: ST_TO_ADDR
// hc_gallery =  ;
69836: LD_ADDR_OWVAR 33
69840: PUSH
69841: LD_STRING 
69843: ST_TO_ADDR
// animal := CreateHuman ;
69844: LD_ADDR_VAR 0 12
69848: PUSH
69849: CALL_OW 44
69853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69854: LD_VAR 0 12
69858: PPUSH
69859: LD_VAR 0 8
69863: PPUSH
69864: LD_INT 0
69866: PPUSH
69867: CALL 71921 0 3
// end ;
69871: GO 69825
69873: POP
69874: POP
// if tigers then
69875: LD_VAR 0 2
69879: IFFALSE 69963
// for i = 1 to tigers do
69881: LD_ADDR_VAR 0 11
69885: PUSH
69886: DOUBLE
69887: LD_INT 1
69889: DEC
69890: ST_TO_ADDR
69891: LD_VAR 0 2
69895: PUSH
69896: FOR_TO
69897: IFFALSE 69961
// begin hc_class = class_tiger ;
69899: LD_ADDR_OWVAR 28
69903: PUSH
69904: LD_INT 14
69906: ST_TO_ADDR
// hc_gallery =  ;
69907: LD_ADDR_OWVAR 33
69911: PUSH
69912: LD_STRING 
69914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69915: LD_ADDR_OWVAR 35
69919: PUSH
69920: LD_INT 7
69922: NEG
69923: PPUSH
69924: LD_INT 7
69926: PPUSH
69927: CALL_OW 12
69931: ST_TO_ADDR
// animal := CreateHuman ;
69932: LD_ADDR_VAR 0 12
69936: PUSH
69937: CALL_OW 44
69941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69942: LD_VAR 0 12
69946: PPUSH
69947: LD_VAR 0 8
69951: PPUSH
69952: LD_INT 0
69954: PPUSH
69955: CALL 71921 0 3
// end ;
69959: GO 69896
69961: POP
69962: POP
// if apemans then
69963: LD_VAR 0 3
69967: IFFALSE 70090
// for i = 1 to apemans do
69969: LD_ADDR_VAR 0 11
69973: PUSH
69974: DOUBLE
69975: LD_INT 1
69977: DEC
69978: ST_TO_ADDR
69979: LD_VAR 0 3
69983: PUSH
69984: FOR_TO
69985: IFFALSE 70088
// begin hc_class = class_apeman ;
69987: LD_ADDR_OWVAR 28
69991: PUSH
69992: LD_INT 12
69994: ST_TO_ADDR
// hc_gallery =  ;
69995: LD_ADDR_OWVAR 33
69999: PUSH
70000: LD_STRING 
70002: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70003: LD_ADDR_OWVAR 35
70007: PUSH
70008: LD_INT 2
70010: NEG
70011: PPUSH
70012: LD_INT 2
70014: PPUSH
70015: CALL_OW 12
70019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70020: LD_ADDR_OWVAR 31
70024: PUSH
70025: LD_INT 1
70027: PPUSH
70028: LD_INT 3
70030: PPUSH
70031: CALL_OW 12
70035: PUSH
70036: LD_INT 1
70038: PPUSH
70039: LD_INT 3
70041: PPUSH
70042: CALL_OW 12
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: ST_TO_ADDR
// animal := CreateHuman ;
70059: LD_ADDR_VAR 0 12
70063: PUSH
70064: CALL_OW 44
70068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70069: LD_VAR 0 12
70073: PPUSH
70074: LD_VAR 0 8
70078: PPUSH
70079: LD_INT 0
70081: PPUSH
70082: CALL 71921 0 3
// end ;
70086: GO 69984
70088: POP
70089: POP
// if enchidnas then
70090: LD_VAR 0 4
70094: IFFALSE 70161
// for i = 1 to enchidnas do
70096: LD_ADDR_VAR 0 11
70100: PUSH
70101: DOUBLE
70102: LD_INT 1
70104: DEC
70105: ST_TO_ADDR
70106: LD_VAR 0 4
70110: PUSH
70111: FOR_TO
70112: IFFALSE 70159
// begin hc_class = 13 ;
70114: LD_ADDR_OWVAR 28
70118: PUSH
70119: LD_INT 13
70121: ST_TO_ADDR
// hc_gallery =  ;
70122: LD_ADDR_OWVAR 33
70126: PUSH
70127: LD_STRING 
70129: ST_TO_ADDR
// animal := CreateHuman ;
70130: LD_ADDR_VAR 0 12
70134: PUSH
70135: CALL_OW 44
70139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70140: LD_VAR 0 12
70144: PPUSH
70145: LD_VAR 0 8
70149: PPUSH
70150: LD_INT 0
70152: PPUSH
70153: CALL 71921 0 3
// end ;
70157: GO 70111
70159: POP
70160: POP
// if fishes then
70161: LD_VAR 0 7
70165: IFFALSE 70232
// for i = 1 to fishes do
70167: LD_ADDR_VAR 0 11
70171: PUSH
70172: DOUBLE
70173: LD_INT 1
70175: DEC
70176: ST_TO_ADDR
70177: LD_VAR 0 7
70181: PUSH
70182: FOR_TO
70183: IFFALSE 70230
// begin hc_class = 20 ;
70185: LD_ADDR_OWVAR 28
70189: PUSH
70190: LD_INT 20
70192: ST_TO_ADDR
// hc_gallery =  ;
70193: LD_ADDR_OWVAR 33
70197: PUSH
70198: LD_STRING 
70200: ST_TO_ADDR
// animal := CreateHuman ;
70201: LD_ADDR_VAR 0 12
70205: PUSH
70206: CALL_OW 44
70210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70211: LD_VAR 0 12
70215: PPUSH
70216: LD_VAR 0 9
70220: PPUSH
70221: LD_INT 0
70223: PPUSH
70224: CALL 71921 0 3
// end ;
70228: GO 70182
70230: POP
70231: POP
// end ;
70232: LD_VAR 0 10
70236: RET
// export function WantHeal ( sci , unit ) ; begin
70237: LD_INT 0
70239: PPUSH
// if GetTaskList ( sci ) > 0 then
70240: LD_VAR 0 1
70244: PPUSH
70245: CALL_OW 437
70249: PUSH
70250: LD_INT 0
70252: GREATER
70253: IFFALSE 70323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 437
70264: PUSH
70265: LD_INT 1
70267: ARRAY
70268: PUSH
70269: LD_INT 1
70271: ARRAY
70272: PUSH
70273: LD_STRING l
70275: EQUAL
70276: PUSH
70277: LD_VAR 0 1
70281: PPUSH
70282: CALL_OW 437
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PUSH
70291: LD_INT 4
70293: ARRAY
70294: PUSH
70295: LD_VAR 0 2
70299: EQUAL
70300: AND
70301: IFFALSE 70313
// result := true else
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: LD_INT 1
70310: ST_TO_ADDR
70311: GO 70321
// result := false ;
70313: LD_ADDR_VAR 0 3
70317: PUSH
70318: LD_INT 0
70320: ST_TO_ADDR
// end else
70321: GO 70331
// result := false ;
70323: LD_ADDR_VAR 0 3
70327: PUSH
70328: LD_INT 0
70330: ST_TO_ADDR
// end ;
70331: LD_VAR 0 3
70335: RET
// export function HealTarget ( sci ) ; begin
70336: LD_INT 0
70338: PPUSH
// if not sci then
70339: LD_VAR 0 1
70343: NOT
70344: IFFALSE 70348
// exit ;
70346: GO 70413
// result := 0 ;
70348: LD_ADDR_VAR 0 2
70352: PUSH
70353: LD_INT 0
70355: ST_TO_ADDR
// if GetTaskList ( sci ) then
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 437
70365: IFFALSE 70413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70367: LD_VAR 0 1
70371: PPUSH
70372: CALL_OW 437
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_INT 1
70383: ARRAY
70384: PUSH
70385: LD_STRING l
70387: EQUAL
70388: IFFALSE 70413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70390: LD_ADDR_VAR 0 2
70394: PUSH
70395: LD_VAR 0 1
70399: PPUSH
70400: CALL_OW 437
70404: PUSH
70405: LD_INT 1
70407: ARRAY
70408: PUSH
70409: LD_INT 4
70411: ARRAY
70412: ST_TO_ADDR
// end ;
70413: LD_VAR 0 2
70417: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
70422: PPUSH
70423: PPUSH
// if not base_units then
70424: LD_VAR 0 1
70428: NOT
70429: IFFALSE 70433
// exit ;
70431: GO 70520
// result := false ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_INT 0
70440: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: LD_VAR 0 1
70450: PPUSH
70451: LD_INT 21
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PPUSH
70461: CALL_OW 72
70465: ST_TO_ADDR
// if not tmp then
70466: LD_VAR 0 5
70470: NOT
70471: IFFALSE 70475
// exit ;
70473: GO 70520
// for i in tmp do
70475: LD_ADDR_VAR 0 3
70479: PUSH
70480: LD_VAR 0 5
70484: PUSH
70485: FOR_IN
70486: IFFALSE 70518
// begin result := EnemyInRange ( i , 22 ) ;
70488: LD_ADDR_VAR 0 2
70492: PUSH
70493: LD_VAR 0 3
70497: PPUSH
70498: LD_INT 22
70500: PPUSH
70501: CALL 68756 0 2
70505: ST_TO_ADDR
// if result then
70506: LD_VAR 0 2
70510: IFFALSE 70516
// exit ;
70512: POP
70513: POP
70514: GO 70520
// end ;
70516: GO 70485
70518: POP
70519: POP
// end ;
70520: LD_VAR 0 2
70524: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70525: LD_INT 0
70527: PPUSH
70528: PPUSH
// if not units then
70529: LD_VAR 0 1
70533: NOT
70534: IFFALSE 70538
// exit ;
70536: GO 70608
// result := [ ] ;
70538: LD_ADDR_VAR 0 3
70542: PUSH
70543: EMPTY
70544: ST_TO_ADDR
// for i in units do
70545: LD_ADDR_VAR 0 4
70549: PUSH
70550: LD_VAR 0 1
70554: PUSH
70555: FOR_IN
70556: IFFALSE 70606
// if GetTag ( i ) = tag then
70558: LD_VAR 0 4
70562: PPUSH
70563: CALL_OW 110
70567: PUSH
70568: LD_VAR 0 2
70572: EQUAL
70573: IFFALSE 70604
// result := Replace ( result , result + 1 , i ) ;
70575: LD_ADDR_VAR 0 3
70579: PUSH
70580: LD_VAR 0 3
70584: PPUSH
70585: LD_VAR 0 3
70589: PUSH
70590: LD_INT 1
70592: PLUS
70593: PPUSH
70594: LD_VAR 0 4
70598: PPUSH
70599: CALL_OW 1
70603: ST_TO_ADDR
70604: GO 70555
70606: POP
70607: POP
// end ;
70608: LD_VAR 0 3
70612: RET
// export function IsDriver ( un ) ; begin
70613: LD_INT 0
70615: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70616: LD_ADDR_VAR 0 2
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: LD_INT 55
70628: PUSH
70629: EMPTY
70630: LIST
70631: PPUSH
70632: CALL_OW 69
70636: IN
70637: ST_TO_ADDR
// end ;
70638: LD_VAR 0 2
70642: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70643: LD_INT 0
70645: PPUSH
70646: PPUSH
// list := [ ] ;
70647: LD_ADDR_VAR 0 5
70651: PUSH
70652: EMPTY
70653: ST_TO_ADDR
// case d of 0 :
70654: LD_VAR 0 3
70658: PUSH
70659: LD_INT 0
70661: DOUBLE
70662: EQUAL
70663: IFTRUE 70667
70665: GO 70800
70667: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70668: LD_ADDR_VAR 0 5
70672: PUSH
70673: LD_VAR 0 1
70677: PUSH
70678: LD_INT 4
70680: MINUS
70681: PUSH
70682: LD_VAR 0 2
70686: PUSH
70687: LD_INT 4
70689: MINUS
70690: PUSH
70691: LD_INT 2
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: LIST
70698: PUSH
70699: LD_VAR 0 1
70703: PUSH
70704: LD_INT 3
70706: MINUS
70707: PUSH
70708: LD_VAR 0 2
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: LIST
70720: PUSH
70721: LD_VAR 0 1
70725: PUSH
70726: LD_INT 4
70728: PLUS
70729: PUSH
70730: LD_VAR 0 2
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 3
70750: PLUS
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_INT 3
70759: PLUS
70760: PUSH
70761: LD_INT 5
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_VAR 0 2
70778: PUSH
70779: LD_INT 4
70781: PLUS
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: ST_TO_ADDR
// end ; 1 :
70798: GO 71498
70800: LD_INT 1
70802: DOUBLE
70803: EQUAL
70804: IFTRUE 70808
70806: GO 70941
70808: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70809: LD_ADDR_VAR 0 5
70813: PUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_VAR 0 2
70823: PUSH
70824: LD_INT 4
70826: MINUS
70827: PUSH
70828: LD_INT 3
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: LD_VAR 0 1
70840: PUSH
70841: LD_INT 3
70843: MINUS
70844: PUSH
70845: LD_VAR 0 2
70849: PUSH
70850: LD_INT 3
70852: MINUS
70853: PUSH
70854: LD_INT 2
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: PUSH
70862: LD_VAR 0 1
70866: PUSH
70867: LD_INT 4
70869: MINUS
70870: PUSH
70871: LD_VAR 0 2
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: LD_VAR 0 2
70893: PUSH
70894: LD_INT 3
70896: PLUS
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 1
70910: PUSH
70911: LD_INT 4
70913: PLUS
70914: PUSH
70915: LD_VAR 0 2
70919: PUSH
70920: LD_INT 4
70922: PLUS
70923: PUSH
70924: LD_INT 5
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: ST_TO_ADDR
// end ; 2 :
70939: GO 71498
70941: LD_INT 2
70943: DOUBLE
70944: EQUAL
70945: IFTRUE 70949
70947: GO 71078
70949: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70950: LD_ADDR_VAR 0 5
70954: PUSH
70955: LD_VAR 0 1
70959: PUSH
70960: LD_VAR 0 2
70964: PUSH
70965: LD_INT 3
70967: MINUS
70968: PUSH
70969: LD_INT 3
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: LIST
70976: PUSH
70977: LD_VAR 0 1
70981: PUSH
70982: LD_INT 4
70984: PLUS
70985: PUSH
70986: LD_VAR 0 2
70990: PUSH
70991: LD_INT 4
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 1
71003: PUSH
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 4
71011: PLUS
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: LD_VAR 0 1
71025: PUSH
71026: LD_INT 3
71028: MINUS
71029: PUSH
71030: LD_VAR 0 2
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_INT 4
71050: MINUS
71051: PUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 4
71059: MINUS
71060: PUSH
71061: LD_INT 2
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: ST_TO_ADDR
// end ; 3 :
71076: GO 71498
71078: LD_INT 3
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71086
71084: GO 71219
71086: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71087: LD_ADDR_VAR 0 5
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 3
71099: PLUS
71100: PUSH
71101: LD_VAR 0 2
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_INT 4
71121: PLUS
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: LD_INT 4
71130: PLUS
71131: PUSH
71132: LD_INT 5
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: LIST
71139: PUSH
71140: LD_VAR 0 1
71144: PUSH
71145: LD_INT 4
71147: MINUS
71148: PUSH
71149: LD_VAR 0 2
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_VAR 0 2
71171: PUSH
71172: LD_INT 4
71174: MINUS
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: PUSH
71184: LD_VAR 0 1
71188: PUSH
71189: LD_INT 3
71191: MINUS
71192: PUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 3
71200: MINUS
71201: PUSH
71202: LD_INT 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: ST_TO_ADDR
// end ; 4 :
71217: GO 71498
71219: LD_INT 4
71221: DOUBLE
71222: EQUAL
71223: IFTRUE 71227
71225: GO 71360
71227: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71228: LD_ADDR_VAR 0 5
71232: PUSH
71233: LD_VAR 0 1
71237: PUSH
71238: LD_VAR 0 2
71242: PUSH
71243: LD_INT 4
71245: PLUS
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_INT 3
71262: PLUS
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: LD_INT 3
71271: PLUS
71272: PUSH
71273: LD_INT 5
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: PUSH
71281: LD_VAR 0 1
71285: PUSH
71286: LD_INT 4
71288: PLUS
71289: PUSH
71290: LD_VAR 0 2
71294: PUSH
71295: LD_INT 4
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_VAR 0 2
71312: PUSH
71313: LD_INT 3
71315: MINUS
71316: PUSH
71317: LD_INT 3
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: PUSH
71325: LD_VAR 0 1
71329: PUSH
71330: LD_INT 4
71332: MINUS
71333: PUSH
71334: LD_VAR 0 2
71338: PUSH
71339: LD_INT 4
71341: MINUS
71342: PUSH
71343: LD_INT 2
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: LIST
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: ST_TO_ADDR
// end ; 5 :
71358: GO 71498
71360: LD_INT 5
71362: DOUBLE
71363: EQUAL
71364: IFTRUE 71368
71366: GO 71497
71368: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71369: LD_ADDR_VAR 0 5
71373: PUSH
71374: LD_VAR 0 1
71378: PUSH
71379: LD_INT 4
71381: MINUS
71382: PUSH
71383: LD_VAR 0 2
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_VAR 0 2
71405: PUSH
71406: LD_INT 4
71408: MINUS
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 1
71422: PUSH
71423: LD_INT 4
71425: PLUS
71426: PUSH
71427: LD_VAR 0 2
71431: PUSH
71432: LD_INT 4
71434: PLUS
71435: PUSH
71436: LD_INT 5
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: PUSH
71444: LD_VAR 0 1
71448: PUSH
71449: LD_INT 3
71451: PLUS
71452: PUSH
71453: LD_VAR 0 2
71457: PUSH
71458: LD_INT 4
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: PUSH
71466: LD_VAR 0 1
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_INT 3
71478: PLUS
71479: PUSH
71480: LD_INT 0
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: LIST
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: ST_TO_ADDR
// end ; end ;
71495: GO 71498
71497: POP
// result := list ;
71498: LD_ADDR_VAR 0 4
71502: PUSH
71503: LD_VAR 0 5
71507: ST_TO_ADDR
// end ;
71508: LD_VAR 0 4
71512: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71513: LD_INT 0
71515: PPUSH
71516: PPUSH
71517: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71518: LD_VAR 0 1
71522: NOT
71523: PUSH
71524: LD_VAR 0 2
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: LD_INT 3
71537: PUSH
71538: LD_INT 4
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: IN
71547: NOT
71548: OR
71549: IFFALSE 71553
// exit ;
71551: GO 71645
// tmp := [ ] ;
71553: LD_ADDR_VAR 0 5
71557: PUSH
71558: EMPTY
71559: ST_TO_ADDR
// for i in units do
71560: LD_ADDR_VAR 0 4
71564: PUSH
71565: LD_VAR 0 1
71569: PUSH
71570: FOR_IN
71571: IFFALSE 71614
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71573: LD_ADDR_VAR 0 5
71577: PUSH
71578: LD_VAR 0 5
71582: PPUSH
71583: LD_VAR 0 5
71587: PUSH
71588: LD_INT 1
71590: PLUS
71591: PPUSH
71592: LD_VAR 0 4
71596: PPUSH
71597: LD_VAR 0 2
71601: PPUSH
71602: CALL_OW 259
71606: PPUSH
71607: CALL_OW 2
71611: ST_TO_ADDR
71612: GO 71570
71614: POP
71615: POP
// if not tmp then
71616: LD_VAR 0 5
71620: NOT
71621: IFFALSE 71625
// exit ;
71623: GO 71645
// result := SortListByListDesc ( units , tmp ) ;
71625: LD_ADDR_VAR 0 3
71629: PUSH
71630: LD_VAR 0 1
71634: PPUSH
71635: LD_VAR 0 5
71639: PPUSH
71640: CALL_OW 77
71644: ST_TO_ADDR
// end ;
71645: LD_VAR 0 3
71649: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71650: LD_INT 0
71652: PPUSH
71653: PPUSH
71654: PPUSH
// result := false ;
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: LD_INT 0
71662: ST_TO_ADDR
// x := GetX ( building ) ;
71663: LD_ADDR_VAR 0 4
71667: PUSH
71668: LD_VAR 0 2
71672: PPUSH
71673: CALL_OW 250
71677: ST_TO_ADDR
// y := GetY ( building ) ;
71678: LD_ADDR_VAR 0 5
71682: PUSH
71683: LD_VAR 0 2
71687: PPUSH
71688: CALL_OW 251
71692: ST_TO_ADDR
// if not building or not x or not y then
71693: LD_VAR 0 2
71697: NOT
71698: PUSH
71699: LD_VAR 0 4
71703: NOT
71704: OR
71705: PUSH
71706: LD_VAR 0 5
71710: NOT
71711: OR
71712: IFFALSE 71716
// exit ;
71714: GO 71808
// if GetTaskList ( unit ) then
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL_OW 437
71725: IFFALSE 71808
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71727: LD_STRING e
71729: PUSH
71730: LD_VAR 0 1
71734: PPUSH
71735: CALL_OW 437
71739: PUSH
71740: LD_INT 1
71742: ARRAY
71743: PUSH
71744: LD_INT 1
71746: ARRAY
71747: EQUAL
71748: PUSH
71749: LD_VAR 0 4
71753: PUSH
71754: LD_VAR 0 1
71758: PPUSH
71759: CALL_OW 437
71763: PUSH
71764: LD_INT 1
71766: ARRAY
71767: PUSH
71768: LD_INT 2
71770: ARRAY
71771: EQUAL
71772: AND
71773: PUSH
71774: LD_VAR 0 5
71778: PUSH
71779: LD_VAR 0 1
71783: PPUSH
71784: CALL_OW 437
71788: PUSH
71789: LD_INT 1
71791: ARRAY
71792: PUSH
71793: LD_INT 3
71795: ARRAY
71796: EQUAL
71797: AND
71798: IFFALSE 71808
// result := true end ;
71800: LD_ADDR_VAR 0 3
71804: PUSH
71805: LD_INT 1
71807: ST_TO_ADDR
// end ;
71808: LD_VAR 0 3
71812: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71813: LD_INT 0
71815: PPUSH
// result := false ;
71816: LD_ADDR_VAR 0 4
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
// if GetTaskList ( unit ) then
71824: LD_VAR 0 1
71828: PPUSH
71829: CALL_OW 437
71833: IFFALSE 71916
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71835: LD_STRING M
71837: PUSH
71838: LD_VAR 0 1
71842: PPUSH
71843: CALL_OW 437
71847: PUSH
71848: LD_INT 1
71850: ARRAY
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: EQUAL
71856: PUSH
71857: LD_VAR 0 2
71861: PUSH
71862: LD_VAR 0 1
71866: PPUSH
71867: CALL_OW 437
71871: PUSH
71872: LD_INT 1
71874: ARRAY
71875: PUSH
71876: LD_INT 2
71878: ARRAY
71879: EQUAL
71880: AND
71881: PUSH
71882: LD_VAR 0 3
71886: PUSH
71887: LD_VAR 0 1
71891: PPUSH
71892: CALL_OW 437
71896: PUSH
71897: LD_INT 1
71899: ARRAY
71900: PUSH
71901: LD_INT 3
71903: ARRAY
71904: EQUAL
71905: AND
71906: IFFALSE 71916
// result := true ;
71908: LD_ADDR_VAR 0 4
71912: PUSH
71913: LD_INT 1
71915: ST_TO_ADDR
// end ; end ;
71916: LD_VAR 0 4
71920: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71921: LD_INT 0
71923: PPUSH
71924: PPUSH
71925: PPUSH
71926: PPUSH
// if not unit or not area then
71927: LD_VAR 0 1
71931: NOT
71932: PUSH
71933: LD_VAR 0 2
71937: NOT
71938: OR
71939: IFFALSE 71943
// exit ;
71941: GO 72107
// tmp := AreaToList ( area , i ) ;
71943: LD_ADDR_VAR 0 6
71947: PUSH
71948: LD_VAR 0 2
71952: PPUSH
71953: LD_VAR 0 5
71957: PPUSH
71958: CALL_OW 517
71962: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71963: LD_ADDR_VAR 0 5
71967: PUSH
71968: DOUBLE
71969: LD_INT 1
71971: DEC
71972: ST_TO_ADDR
71973: LD_VAR 0 6
71977: PUSH
71978: LD_INT 1
71980: ARRAY
71981: PUSH
71982: FOR_TO
71983: IFFALSE 72105
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71985: LD_ADDR_VAR 0 7
71989: PUSH
71990: LD_VAR 0 6
71994: PUSH
71995: LD_INT 1
71997: ARRAY
71998: PUSH
71999: LD_VAR 0 5
72003: ARRAY
72004: PUSH
72005: LD_VAR 0 6
72009: PUSH
72010: LD_INT 2
72012: ARRAY
72013: PUSH
72014: LD_VAR 0 5
72018: ARRAY
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72024: LD_VAR 0 7
72028: PUSH
72029: LD_INT 1
72031: ARRAY
72032: PPUSH
72033: LD_VAR 0 7
72037: PUSH
72038: LD_INT 2
72040: ARRAY
72041: PPUSH
72042: CALL_OW 428
72046: PUSH
72047: LD_INT 0
72049: EQUAL
72050: IFFALSE 72103
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72052: LD_VAR 0 1
72056: PPUSH
72057: LD_VAR 0 7
72061: PUSH
72062: LD_INT 1
72064: ARRAY
72065: PPUSH
72066: LD_VAR 0 7
72070: PUSH
72071: LD_INT 2
72073: ARRAY
72074: PPUSH
72075: LD_VAR 0 3
72079: PPUSH
72080: CALL_OW 48
// result := IsPlaced ( unit ) ;
72084: LD_ADDR_VAR 0 4
72088: PUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 305
72098: ST_TO_ADDR
// exit ;
72099: POP
72100: POP
72101: GO 72107
// end ; end ;
72103: GO 71982
72105: POP
72106: POP
// end ;
72107: LD_VAR 0 4
72111: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72112: LD_INT 0
72114: PPUSH
72115: PPUSH
72116: PPUSH
// if not side or side > 8 then
72117: LD_VAR 0 1
72121: NOT
72122: PUSH
72123: LD_VAR 0 1
72127: PUSH
72128: LD_INT 8
72130: GREATER
72131: OR
72132: IFFALSE 72136
// exit ;
72134: GO 72323
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72136: LD_ADDR_VAR 0 4
72140: PUSH
72141: LD_INT 22
72143: PUSH
72144: LD_VAR 0 1
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 21
72155: PUSH
72156: LD_INT 3
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PPUSH
72167: CALL_OW 69
72171: ST_TO_ADDR
// if not tmp then
72172: LD_VAR 0 4
72176: NOT
72177: IFFALSE 72181
// exit ;
72179: GO 72323
// enable_addtolog := true ;
72181: LD_ADDR_OWVAR 81
72185: PUSH
72186: LD_INT 1
72188: ST_TO_ADDR
// AddToLog ( [ ) ;
72189: LD_STRING [
72191: PPUSH
72192: CALL_OW 561
// for i in tmp do
72196: LD_ADDR_VAR 0 3
72200: PUSH
72201: LD_VAR 0 4
72205: PUSH
72206: FOR_IN
72207: IFFALSE 72314
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72209: LD_STRING [
72211: PUSH
72212: LD_VAR 0 3
72216: PPUSH
72217: CALL_OW 266
72221: STR
72222: PUSH
72223: LD_STRING , 
72225: STR
72226: PUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: CALL_OW 250
72236: STR
72237: PUSH
72238: LD_STRING , 
72240: STR
72241: PUSH
72242: LD_VAR 0 3
72246: PPUSH
72247: CALL_OW 251
72251: STR
72252: PUSH
72253: LD_STRING , 
72255: STR
72256: PUSH
72257: LD_VAR 0 3
72261: PPUSH
72262: CALL_OW 254
72266: STR
72267: PUSH
72268: LD_STRING , 
72270: STR
72271: PUSH
72272: LD_VAR 0 3
72276: PPUSH
72277: LD_INT 1
72279: PPUSH
72280: CALL_OW 268
72284: STR
72285: PUSH
72286: LD_STRING , 
72288: STR
72289: PUSH
72290: LD_VAR 0 3
72294: PPUSH
72295: LD_INT 2
72297: PPUSH
72298: CALL_OW 268
72302: STR
72303: PUSH
72304: LD_STRING ],
72306: STR
72307: PPUSH
72308: CALL_OW 561
// end ;
72312: GO 72206
72314: POP
72315: POP
// AddToLog ( ]; ) ;
72316: LD_STRING ];
72318: PPUSH
72319: CALL_OW 561
// end ;
72323: LD_VAR 0 2
72327: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72328: LD_INT 0
72330: PPUSH
72331: PPUSH
72332: PPUSH
72333: PPUSH
72334: PPUSH
// if not area or not rate or not max then
72335: LD_VAR 0 1
72339: NOT
72340: PUSH
72341: LD_VAR 0 2
72345: NOT
72346: OR
72347: PUSH
72348: LD_VAR 0 4
72352: NOT
72353: OR
72354: IFFALSE 72358
// exit ;
72356: GO 72550
// while 1 do
72358: LD_INT 1
72360: IFFALSE 72550
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72362: LD_ADDR_VAR 0 9
72366: PUSH
72367: LD_VAR 0 1
72371: PPUSH
72372: LD_INT 1
72374: PPUSH
72375: CALL_OW 287
72379: PUSH
72380: LD_INT 10
72382: MUL
72383: ST_TO_ADDR
// r := rate / 10 ;
72384: LD_ADDR_VAR 0 7
72388: PUSH
72389: LD_VAR 0 2
72393: PUSH
72394: LD_INT 10
72396: DIVREAL
72397: ST_TO_ADDR
// time := 1 1$00 ;
72398: LD_ADDR_VAR 0 8
72402: PUSH
72403: LD_INT 2100
72405: ST_TO_ADDR
// if amount < min then
72406: LD_VAR 0 9
72410: PUSH
72411: LD_VAR 0 3
72415: LESS
72416: IFFALSE 72434
// r := r * 2 else
72418: LD_ADDR_VAR 0 7
72422: PUSH
72423: LD_VAR 0 7
72427: PUSH
72428: LD_INT 2
72430: MUL
72431: ST_TO_ADDR
72432: GO 72460
// if amount > max then
72434: LD_VAR 0 9
72438: PUSH
72439: LD_VAR 0 4
72443: GREATER
72444: IFFALSE 72460
// r := r / 2 ;
72446: LD_ADDR_VAR 0 7
72450: PUSH
72451: LD_VAR 0 7
72455: PUSH
72456: LD_INT 2
72458: DIVREAL
72459: ST_TO_ADDR
// time := time / r ;
72460: LD_ADDR_VAR 0 8
72464: PUSH
72465: LD_VAR 0 8
72469: PUSH
72470: LD_VAR 0 7
72474: DIVREAL
72475: ST_TO_ADDR
// if time < 0 then
72476: LD_VAR 0 8
72480: PUSH
72481: LD_INT 0
72483: LESS
72484: IFFALSE 72501
// time := time * - 1 ;
72486: LD_ADDR_VAR 0 8
72490: PUSH
72491: LD_VAR 0 8
72495: PUSH
72496: LD_INT 1
72498: NEG
72499: MUL
72500: ST_TO_ADDR
// wait ( time ) ;
72501: LD_VAR 0 8
72505: PPUSH
72506: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72510: LD_INT 35
72512: PPUSH
72513: LD_INT 875
72515: PPUSH
72516: CALL_OW 12
72520: PPUSH
72521: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72525: LD_INT 1
72527: PPUSH
72528: LD_INT 5
72530: PPUSH
72531: CALL_OW 12
72535: PPUSH
72536: LD_VAR 0 1
72540: PPUSH
72541: LD_INT 1
72543: PPUSH
72544: CALL_OW 55
// end ;
72548: GO 72358
// end ;
72550: LD_VAR 0 5
72554: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
72559: PPUSH
72560: PPUSH
72561: PPUSH
72562: PPUSH
72563: PPUSH
72564: PPUSH
// if not turrets or not factories then
72565: LD_VAR 0 1
72569: NOT
72570: PUSH
72571: LD_VAR 0 2
72575: NOT
72576: OR
72577: IFFALSE 72581
// exit ;
72579: GO 72888
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72581: LD_ADDR_VAR 0 10
72585: PUSH
72586: LD_INT 5
72588: PUSH
72589: LD_INT 6
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 2
72598: PUSH
72599: LD_INT 4
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 3
72608: PUSH
72609: LD_INT 5
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 24
72623: PUSH
72624: LD_INT 25
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 23
72633: PUSH
72634: LD_INT 27
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 42
72647: PUSH
72648: LD_INT 43
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 44
72657: PUSH
72658: LD_INT 46
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 45
72667: PUSH
72668: LD_INT 47
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: LIST
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: LIST
72684: ST_TO_ADDR
// result := [ ] ;
72685: LD_ADDR_VAR 0 3
72689: PUSH
72690: EMPTY
72691: ST_TO_ADDR
// for i in turrets do
72692: LD_ADDR_VAR 0 4
72696: PUSH
72697: LD_VAR 0 1
72701: PUSH
72702: FOR_IN
72703: IFFALSE 72886
// begin nat := GetNation ( i ) ;
72705: LD_ADDR_VAR 0 7
72709: PUSH
72710: LD_VAR 0 4
72714: PPUSH
72715: CALL_OW 248
72719: ST_TO_ADDR
// weapon := 0 ;
72720: LD_ADDR_VAR 0 8
72724: PUSH
72725: LD_INT 0
72727: ST_TO_ADDR
// if not nat then
72728: LD_VAR 0 7
72732: NOT
72733: IFFALSE 72737
// continue ;
72735: GO 72702
// for j in list [ nat ] do
72737: LD_ADDR_VAR 0 5
72741: PUSH
72742: LD_VAR 0 10
72746: PUSH
72747: LD_VAR 0 7
72751: ARRAY
72752: PUSH
72753: FOR_IN
72754: IFFALSE 72795
// if GetBWeapon ( i ) = j [ 1 ] then
72756: LD_VAR 0 4
72760: PPUSH
72761: CALL_OW 269
72765: PUSH
72766: LD_VAR 0 5
72770: PUSH
72771: LD_INT 1
72773: ARRAY
72774: EQUAL
72775: IFFALSE 72793
// begin weapon := j [ 2 ] ;
72777: LD_ADDR_VAR 0 8
72781: PUSH
72782: LD_VAR 0 5
72786: PUSH
72787: LD_INT 2
72789: ARRAY
72790: ST_TO_ADDR
// break ;
72791: GO 72795
// end ;
72793: GO 72753
72795: POP
72796: POP
// if not weapon then
72797: LD_VAR 0 8
72801: NOT
72802: IFFALSE 72806
// continue ;
72804: GO 72702
// for k in factories do
72806: LD_ADDR_VAR 0 6
72810: PUSH
72811: LD_VAR 0 2
72815: PUSH
72816: FOR_IN
72817: IFFALSE 72882
// begin weapons := AvailableWeaponList ( k ) ;
72819: LD_ADDR_VAR 0 9
72823: PUSH
72824: LD_VAR 0 6
72828: PPUSH
72829: CALL_OW 478
72833: ST_TO_ADDR
// if not weapons then
72834: LD_VAR 0 9
72838: NOT
72839: IFFALSE 72843
// continue ;
72841: GO 72816
// if weapon in weapons then
72843: LD_VAR 0 8
72847: PUSH
72848: LD_VAR 0 9
72852: IN
72853: IFFALSE 72880
// begin result := [ i , weapon ] ;
72855: LD_ADDR_VAR 0 3
72859: PUSH
72860: LD_VAR 0 4
72864: PUSH
72865: LD_VAR 0 8
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: ST_TO_ADDR
// exit ;
72874: POP
72875: POP
72876: POP
72877: POP
72878: GO 72888
// end ; end ;
72880: GO 72816
72882: POP
72883: POP
// end ;
72884: GO 72702
72886: POP
72887: POP
// end ;
72888: LD_VAR 0 3
72892: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72893: LD_INT 0
72895: PPUSH
// if not side or side > 8 then
72896: LD_VAR 0 3
72900: NOT
72901: PUSH
72902: LD_VAR 0 3
72906: PUSH
72907: LD_INT 8
72909: GREATER
72910: OR
72911: IFFALSE 72915
// exit ;
72913: GO 72974
// if not range then
72915: LD_VAR 0 4
72919: NOT
72920: IFFALSE 72931
// range := - 12 ;
72922: LD_ADDR_VAR 0 4
72926: PUSH
72927: LD_INT 12
72929: NEG
72930: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72931: LD_VAR 0 1
72935: PPUSH
72936: LD_VAR 0 2
72940: PPUSH
72941: LD_VAR 0 3
72945: PPUSH
72946: LD_VAR 0 4
72950: PPUSH
72951: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72955: LD_VAR 0 1
72959: PPUSH
72960: LD_VAR 0 2
72964: PPUSH
72965: LD_VAR 0 3
72969: PPUSH
72970: CALL_OW 331
// end ;
72974: LD_VAR 0 5
72978: RET
// export function Video ( mode ) ; begin
72979: LD_INT 0
72981: PPUSH
// ingame_video = mode ;
72982: LD_ADDR_OWVAR 52
72986: PUSH
72987: LD_VAR 0 1
72991: ST_TO_ADDR
// interface_hidden = mode ;
72992: LD_ADDR_OWVAR 54
72996: PUSH
72997: LD_VAR 0 1
73001: ST_TO_ADDR
// end ;
73002: LD_VAR 0 2
73006: RET
// export function Join ( array , element ) ; begin
73007: LD_INT 0
73009: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73010: LD_ADDR_VAR 0 3
73014: PUSH
73015: LD_VAR 0 1
73019: PPUSH
73020: LD_VAR 0 1
73024: PUSH
73025: LD_INT 1
73027: PLUS
73028: PPUSH
73029: LD_VAR 0 2
73033: PPUSH
73034: CALL_OW 1
73038: ST_TO_ADDR
// end ;
73039: LD_VAR 0 3
73043: RET
// export function JoinUnion ( array , element ) ; begin
73044: LD_INT 0
73046: PPUSH
// result := array union element ;
73047: LD_ADDR_VAR 0 3
73051: PUSH
73052: LD_VAR 0 1
73056: PUSH
73057: LD_VAR 0 2
73061: UNION
73062: ST_TO_ADDR
// end ;
73063: LD_VAR 0 3
73067: RET
// export function GetBehemoths ( side ) ; begin
73068: LD_INT 0
73070: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_INT 22
73078: PUSH
73079: LD_VAR 0 1
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 31
73090: PUSH
73091: LD_INT 25
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PPUSH
73102: CALL_OW 69
73106: ST_TO_ADDR
// end ;
73107: LD_VAR 0 2
73111: RET
// export function Shuffle ( array ) ; var i , index ; begin
73112: LD_INT 0
73114: PPUSH
73115: PPUSH
73116: PPUSH
// result := [ ] ;
73117: LD_ADDR_VAR 0 2
73121: PUSH
73122: EMPTY
73123: ST_TO_ADDR
// if not array then
73124: LD_VAR 0 1
73128: NOT
73129: IFFALSE 73133
// exit ;
73131: GO 73232
// Randomize ;
73133: CALL_OW 10
// for i = array downto 1 do
73137: LD_ADDR_VAR 0 3
73141: PUSH
73142: DOUBLE
73143: LD_VAR 0 1
73147: INC
73148: ST_TO_ADDR
73149: LD_INT 1
73151: PUSH
73152: FOR_DOWNTO
73153: IFFALSE 73230
// begin index := rand ( 1 , array ) ;
73155: LD_ADDR_VAR 0 4
73159: PUSH
73160: LD_INT 1
73162: PPUSH
73163: LD_VAR 0 1
73167: PPUSH
73168: CALL_OW 12
73172: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73173: LD_ADDR_VAR 0 2
73177: PUSH
73178: LD_VAR 0 2
73182: PPUSH
73183: LD_VAR 0 2
73187: PUSH
73188: LD_INT 1
73190: PLUS
73191: PPUSH
73192: LD_VAR 0 1
73196: PUSH
73197: LD_VAR 0 4
73201: ARRAY
73202: PPUSH
73203: CALL_OW 2
73207: ST_TO_ADDR
// array := Delete ( array , index ) ;
73208: LD_ADDR_VAR 0 1
73212: PUSH
73213: LD_VAR 0 1
73217: PPUSH
73218: LD_VAR 0 4
73222: PPUSH
73223: CALL_OW 3
73227: ST_TO_ADDR
// end ;
73228: GO 73152
73230: POP
73231: POP
// end ;
73232: LD_VAR 0 2
73236: RET
// export function GetBaseMaterials ( base ) ; begin
73237: LD_INT 0
73239: PPUSH
// result := [ 0 , 0 , 0 ] ;
73240: LD_ADDR_VAR 0 2
73244: PUSH
73245: LD_INT 0
73247: PUSH
73248: LD_INT 0
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: ST_TO_ADDR
// if not base then
73259: LD_VAR 0 1
73263: NOT
73264: IFFALSE 73268
// exit ;
73266: GO 73317
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73268: LD_ADDR_VAR 0 2
73272: PUSH
73273: LD_VAR 0 1
73277: PPUSH
73278: LD_INT 1
73280: PPUSH
73281: CALL_OW 275
73285: PUSH
73286: LD_VAR 0 1
73290: PPUSH
73291: LD_INT 2
73293: PPUSH
73294: CALL_OW 275
73298: PUSH
73299: LD_VAR 0 1
73303: PPUSH
73304: LD_INT 3
73306: PPUSH
73307: CALL_OW 275
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: ST_TO_ADDR
// end ;
73317: LD_VAR 0 2
73321: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73322: LD_INT 0
73324: PPUSH
73325: PPUSH
// result := array ;
73326: LD_ADDR_VAR 0 3
73330: PUSH
73331: LD_VAR 0 1
73335: ST_TO_ADDR
// if size > 0 then
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 0
73343: GREATER
73344: IFFALSE 73390
// for i := array downto size do
73346: LD_ADDR_VAR 0 4
73350: PUSH
73351: DOUBLE
73352: LD_VAR 0 1
73356: INC
73357: ST_TO_ADDR
73358: LD_VAR 0 2
73362: PUSH
73363: FOR_DOWNTO
73364: IFFALSE 73388
// result := Delete ( result , result ) ;
73366: LD_ADDR_VAR 0 3
73370: PUSH
73371: LD_VAR 0 3
73375: PPUSH
73376: LD_VAR 0 3
73380: PPUSH
73381: CALL_OW 3
73385: ST_TO_ADDR
73386: GO 73363
73388: POP
73389: POP
// end ;
73390: LD_VAR 0 3
73394: RET
// export function ComExit ( unit ) ; var tmp ; begin
73395: LD_INT 0
73397: PPUSH
73398: PPUSH
// if not IsInUnit ( unit ) then
73399: LD_VAR 0 1
73403: PPUSH
73404: CALL_OW 310
73408: NOT
73409: IFFALSE 73413
// exit ;
73411: GO 73473
// tmp := IsInUnit ( unit ) ;
73413: LD_ADDR_VAR 0 3
73417: PUSH
73418: LD_VAR 0 1
73422: PPUSH
73423: CALL_OW 310
73427: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73428: LD_VAR 0 3
73432: PPUSH
73433: CALL_OW 247
73437: PUSH
73438: LD_INT 2
73440: EQUAL
73441: IFFALSE 73454
// ComExitVehicle ( unit ) else
73443: LD_VAR 0 1
73447: PPUSH
73448: CALL_OW 121
73452: GO 73463
// ComExitBuilding ( unit ) ;
73454: LD_VAR 0 1
73458: PPUSH
73459: CALL_OW 122
// result := tmp ;
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_VAR 0 3
73472: ST_TO_ADDR
// end ;
73473: LD_VAR 0 2
73477: RET
// export function ComExitAll ( units ) ; var i ; begin
73478: LD_INT 0
73480: PPUSH
73481: PPUSH
// if not units then
73482: LD_VAR 0 1
73486: NOT
73487: IFFALSE 73491
// exit ;
73489: GO 73517
// for i in units do
73491: LD_ADDR_VAR 0 3
73495: PUSH
73496: LD_VAR 0 1
73500: PUSH
73501: FOR_IN
73502: IFFALSE 73515
// ComExit ( i ) ;
73504: LD_VAR 0 3
73508: PPUSH
73509: CALL 73395 0 1
73513: GO 73501
73515: POP
73516: POP
// end ;
73517: LD_VAR 0 2
73521: RET
// export function ResetHc ; begin
73522: LD_INT 0
73524: PPUSH
// InitHc ;
73525: CALL_OW 19
// hc_importance := 0 ;
73529: LD_ADDR_OWVAR 32
73533: PUSH
73534: LD_INT 0
73536: ST_TO_ADDR
// end ;
73537: LD_VAR 0 1
73541: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73542: LD_INT 0
73544: PPUSH
73545: PPUSH
73546: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73547: LD_ADDR_VAR 0 6
73551: PUSH
73552: LD_VAR 0 1
73556: PUSH
73557: LD_VAR 0 3
73561: PLUS
73562: PUSH
73563: LD_INT 2
73565: DIV
73566: ST_TO_ADDR
// if _x < 0 then
73567: LD_VAR 0 6
73571: PUSH
73572: LD_INT 0
73574: LESS
73575: IFFALSE 73592
// _x := _x * - 1 ;
73577: LD_ADDR_VAR 0 6
73581: PUSH
73582: LD_VAR 0 6
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: MUL
73591: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73592: LD_ADDR_VAR 0 7
73596: PUSH
73597: LD_VAR 0 2
73601: PUSH
73602: LD_VAR 0 4
73606: PLUS
73607: PUSH
73608: LD_INT 2
73610: DIV
73611: ST_TO_ADDR
// if _y < 0 then
73612: LD_VAR 0 7
73616: PUSH
73617: LD_INT 0
73619: LESS
73620: IFFALSE 73637
// _y := _y * - 1 ;
73622: LD_ADDR_VAR 0 7
73626: PUSH
73627: LD_VAR 0 7
73631: PUSH
73632: LD_INT 1
73634: NEG
73635: MUL
73636: ST_TO_ADDR
// result := [ _x , _y ] ;
73637: LD_ADDR_VAR 0 5
73641: PUSH
73642: LD_VAR 0 6
73646: PUSH
73647: LD_VAR 0 7
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: ST_TO_ADDR
// end ;
73656: LD_VAR 0 5
73660: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73661: LD_INT 0
73663: PPUSH
73664: PPUSH
73665: PPUSH
73666: PPUSH
// task := GetTaskList ( unit ) ;
73667: LD_ADDR_VAR 0 7
73671: PUSH
73672: LD_VAR 0 1
73676: PPUSH
73677: CALL_OW 437
73681: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73682: LD_VAR 0 7
73686: NOT
73687: PUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: LD_VAR 0 2
73697: PPUSH
73698: CALL_OW 308
73702: NOT
73703: AND
73704: IFFALSE 73708
// exit ;
73706: GO 73826
// if IsInArea ( unit , area ) then
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_VAR 0 2
73717: PPUSH
73718: CALL_OW 308
73722: IFFALSE 73740
// begin ComMoveToArea ( unit , goAway ) ;
73724: LD_VAR 0 1
73728: PPUSH
73729: LD_VAR 0 3
73733: PPUSH
73734: CALL_OW 113
// exit ;
73738: GO 73826
// end ; if task [ 1 ] [ 1 ] <> M then
73740: LD_VAR 0 7
73744: PUSH
73745: LD_INT 1
73747: ARRAY
73748: PUSH
73749: LD_INT 1
73751: ARRAY
73752: PUSH
73753: LD_STRING M
73755: NONEQUAL
73756: IFFALSE 73760
// exit ;
73758: GO 73826
// x := task [ 1 ] [ 2 ] ;
73760: LD_ADDR_VAR 0 5
73764: PUSH
73765: LD_VAR 0 7
73769: PUSH
73770: LD_INT 1
73772: ARRAY
73773: PUSH
73774: LD_INT 2
73776: ARRAY
73777: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73778: LD_ADDR_VAR 0 6
73782: PUSH
73783: LD_VAR 0 7
73787: PUSH
73788: LD_INT 1
73790: ARRAY
73791: PUSH
73792: LD_INT 3
73794: ARRAY
73795: ST_TO_ADDR
// if InArea ( x , y , area ) then
73796: LD_VAR 0 5
73800: PPUSH
73801: LD_VAR 0 6
73805: PPUSH
73806: LD_VAR 0 2
73810: PPUSH
73811: CALL_OW 309
73815: IFFALSE 73826
// ComStop ( unit ) ;
73817: LD_VAR 0 1
73821: PPUSH
73822: CALL_OW 141
// end ;
73826: LD_VAR 0 4
73830: RET
// export function Abs ( value ) ; begin
73831: LD_INT 0
73833: PPUSH
// result := value ;
73834: LD_ADDR_VAR 0 2
73838: PUSH
73839: LD_VAR 0 1
73843: ST_TO_ADDR
// if value < 0 then
73844: LD_VAR 0 1
73848: PUSH
73849: LD_INT 0
73851: LESS
73852: IFFALSE 73869
// result := value * - 1 ;
73854: LD_ADDR_VAR 0 2
73858: PUSH
73859: LD_VAR 0 1
73863: PUSH
73864: LD_INT 1
73866: NEG
73867: MUL
73868: ST_TO_ADDR
// end ;
73869: LD_VAR 0 2
73873: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73874: LD_INT 0
73876: PPUSH
73877: PPUSH
73878: PPUSH
73879: PPUSH
73880: PPUSH
73881: PPUSH
73882: PPUSH
73883: PPUSH
// if not unit or not building then
73884: LD_VAR 0 1
73888: NOT
73889: PUSH
73890: LD_VAR 0 2
73894: NOT
73895: OR
73896: IFFALSE 73900
// exit ;
73898: GO 74126
// x := GetX ( building ) ;
73900: LD_ADDR_VAR 0 4
73904: PUSH
73905: LD_VAR 0 2
73909: PPUSH
73910: CALL_OW 250
73914: ST_TO_ADDR
// y := GetY ( building ) ;
73915: LD_ADDR_VAR 0 6
73919: PUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: CALL_OW 251
73929: ST_TO_ADDR
// d := GetDir ( building ) ;
73930: LD_ADDR_VAR 0 8
73934: PUSH
73935: LD_VAR 0 2
73939: PPUSH
73940: CALL_OW 254
73944: ST_TO_ADDR
// r := 4 ;
73945: LD_ADDR_VAR 0 9
73949: PUSH
73950: LD_INT 4
73952: ST_TO_ADDR
// for i := 1 to 5 do
73953: LD_ADDR_VAR 0 10
73957: PUSH
73958: DOUBLE
73959: LD_INT 1
73961: DEC
73962: ST_TO_ADDR
73963: LD_INT 5
73965: PUSH
73966: FOR_TO
73967: IFFALSE 74124
// begin _x := ShiftX ( x , d , r + i ) ;
73969: LD_ADDR_VAR 0 5
73973: PUSH
73974: LD_VAR 0 4
73978: PPUSH
73979: LD_VAR 0 8
73983: PPUSH
73984: LD_VAR 0 9
73988: PUSH
73989: LD_VAR 0 10
73993: PLUS
73994: PPUSH
73995: CALL_OW 272
73999: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74000: LD_ADDR_VAR 0 7
74004: PUSH
74005: LD_VAR 0 6
74009: PPUSH
74010: LD_VAR 0 8
74014: PPUSH
74015: LD_VAR 0 9
74019: PUSH
74020: LD_VAR 0 10
74024: PLUS
74025: PPUSH
74026: CALL_OW 273
74030: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74031: LD_VAR 0 5
74035: PPUSH
74036: LD_VAR 0 7
74040: PPUSH
74041: CALL_OW 488
74045: PUSH
74046: LD_VAR 0 5
74050: PPUSH
74051: LD_VAR 0 7
74055: PPUSH
74056: CALL_OW 428
74060: PPUSH
74061: CALL_OW 247
74065: PUSH
74066: LD_INT 3
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: IN
74076: NOT
74077: AND
74078: IFFALSE 74122
// begin ComMoveXY ( unit , _x , _y ) ;
74080: LD_VAR 0 1
74084: PPUSH
74085: LD_VAR 0 5
74089: PPUSH
74090: LD_VAR 0 7
74094: PPUSH
74095: CALL_OW 111
// result := [ _x , _y ] ;
74099: LD_ADDR_VAR 0 3
74103: PUSH
74104: LD_VAR 0 5
74108: PUSH
74109: LD_VAR 0 7
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: ST_TO_ADDR
// exit ;
74118: POP
74119: POP
74120: GO 74126
// end ; end ;
74122: GO 73966
74124: POP
74125: POP
// end ;
74126: LD_VAR 0 3
74130: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74131: LD_INT 0
74133: PPUSH
74134: PPUSH
74135: PPUSH
// result := 0 ;
74136: LD_ADDR_VAR 0 3
74140: PUSH
74141: LD_INT 0
74143: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74144: LD_VAR 0 1
74148: PUSH
74149: LD_INT 0
74151: LESS
74152: PUSH
74153: LD_VAR 0 1
74157: PUSH
74158: LD_INT 8
74160: GREATER
74161: OR
74162: PUSH
74163: LD_VAR 0 2
74167: PUSH
74168: LD_INT 0
74170: LESS
74171: OR
74172: PUSH
74173: LD_VAR 0 2
74177: PUSH
74178: LD_INT 8
74180: GREATER
74181: OR
74182: IFFALSE 74186
// exit ;
74184: GO 74261
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74186: LD_ADDR_VAR 0 4
74190: PUSH
74191: LD_INT 22
74193: PUSH
74194: LD_VAR 0 2
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: PPUSH
74203: CALL_OW 69
74207: PUSH
74208: FOR_IN
74209: IFFALSE 74259
// begin un := UnitShoot ( i ) ;
74211: LD_ADDR_VAR 0 5
74215: PUSH
74216: LD_VAR 0 4
74220: PPUSH
74221: CALL_OW 504
74225: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74226: LD_VAR 0 5
74230: PPUSH
74231: CALL_OW 255
74235: PUSH
74236: LD_VAR 0 1
74240: EQUAL
74241: IFFALSE 74257
// begin result := un ;
74243: LD_ADDR_VAR 0 3
74247: PUSH
74248: LD_VAR 0 5
74252: ST_TO_ADDR
// exit ;
74253: POP
74254: POP
74255: GO 74261
// end ; end ;
74257: GO 74208
74259: POP
74260: POP
// end ;
74261: LD_VAR 0 3
74265: RET
// export function GetCargoBay ( units ) ; begin
74266: LD_INT 0
74268: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74269: LD_ADDR_VAR 0 2
74273: PUSH
74274: LD_VAR 0 1
74278: PPUSH
74279: LD_INT 2
74281: PUSH
74282: LD_INT 34
74284: PUSH
74285: LD_INT 12
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 34
74294: PUSH
74295: LD_INT 51
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 34
74304: PUSH
74305: LD_INT 32
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 34
74314: PUSH
74315: LD_EXP 60
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: PPUSH
74331: CALL_OW 72
74335: ST_TO_ADDR
// end ;
74336: LD_VAR 0 2
74340: RET
// export function Negate ( value ) ; begin
74341: LD_INT 0
74343: PPUSH
// result := not value ;
74344: LD_ADDR_VAR 0 2
74348: PUSH
74349: LD_VAR 0 1
74353: NOT
74354: ST_TO_ADDR
// end ;
74355: LD_VAR 0 2
74359: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74360: LD_INT 0
74362: PPUSH
// if x1 = x2 then
74363: LD_VAR 0 1
74367: PUSH
74368: LD_VAR 0 3
74372: EQUAL
74373: IFFALSE 74407
// begin if y1 > y2 then
74375: LD_VAR 0 2
74379: PUSH
74380: LD_VAR 0 4
74384: GREATER
74385: IFFALSE 74397
// result := 0 else
74387: LD_ADDR_VAR 0 5
74391: PUSH
74392: LD_INT 0
74394: ST_TO_ADDR
74395: GO 74405
// result := 3 ;
74397: LD_ADDR_VAR 0 5
74401: PUSH
74402: LD_INT 3
74404: ST_TO_ADDR
// exit ;
74405: GO 74493
// end ; if y1 = y2 then
74407: LD_VAR 0 2
74411: PUSH
74412: LD_VAR 0 4
74416: EQUAL
74417: IFFALSE 74451
// begin if x1 > x2 then
74419: LD_VAR 0 1
74423: PUSH
74424: LD_VAR 0 3
74428: GREATER
74429: IFFALSE 74441
// result := 1 else
74431: LD_ADDR_VAR 0 5
74435: PUSH
74436: LD_INT 1
74438: ST_TO_ADDR
74439: GO 74449
// result := 4 ;
74441: LD_ADDR_VAR 0 5
74445: PUSH
74446: LD_INT 4
74448: ST_TO_ADDR
// exit ;
74449: GO 74493
// end ; if x1 > x2 and y1 > y2 then
74451: LD_VAR 0 1
74455: PUSH
74456: LD_VAR 0 3
74460: GREATER
74461: PUSH
74462: LD_VAR 0 2
74466: PUSH
74467: LD_VAR 0 4
74471: GREATER
74472: AND
74473: IFFALSE 74485
// result := 2 else
74475: LD_ADDR_VAR 0 5
74479: PUSH
74480: LD_INT 2
74482: ST_TO_ADDR
74483: GO 74493
// result := 5 ;
74485: LD_ADDR_VAR 0 5
74489: PUSH
74490: LD_INT 5
74492: ST_TO_ADDR
// end ;
74493: LD_VAR 0 5
74497: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74498: LD_INT 0
74500: PPUSH
74501: PPUSH
// if not driver or not IsInUnit ( driver ) then
74502: LD_VAR 0 1
74506: NOT
74507: PUSH
74508: LD_VAR 0 1
74512: PPUSH
74513: CALL_OW 310
74517: NOT
74518: OR
74519: IFFALSE 74523
// exit ;
74521: GO 74613
// vehicle := IsInUnit ( driver ) ;
74523: LD_ADDR_VAR 0 3
74527: PUSH
74528: LD_VAR 0 1
74532: PPUSH
74533: CALL_OW 310
74537: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74538: LD_VAR 0 1
74542: PPUSH
74543: LD_STRING \
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: LD_INT 0
74554: PUSH
74555: LD_INT 0
74557: PUSH
74558: LD_INT 0
74560: PUSH
74561: LD_INT 0
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: PUSH
74573: LD_STRING E
74575: PUSH
74576: LD_INT 0
74578: PUSH
74579: LD_INT 0
74581: PUSH
74582: LD_VAR 0 3
74586: PUSH
74587: LD_INT 0
74589: PUSH
74590: LD_INT 0
74592: PUSH
74593: LD_INT 0
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PPUSH
74609: CALL_OW 446
// end ;
74613: LD_VAR 0 2
74617: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74618: LD_INT 0
74620: PPUSH
74621: PPUSH
// if not driver or not IsInUnit ( driver ) then
74622: LD_VAR 0 1
74626: NOT
74627: PUSH
74628: LD_VAR 0 1
74632: PPUSH
74633: CALL_OW 310
74637: NOT
74638: OR
74639: IFFALSE 74643
// exit ;
74641: GO 74733
// vehicle := IsInUnit ( driver ) ;
74643: LD_ADDR_VAR 0 3
74647: PUSH
74648: LD_VAR 0 1
74652: PPUSH
74653: CALL_OW 310
74657: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74658: LD_VAR 0 1
74662: PPUSH
74663: LD_STRING \
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: LD_INT 0
74674: PUSH
74675: LD_INT 0
74677: PUSH
74678: LD_INT 0
74680: PUSH
74681: LD_INT 0
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: PUSH
74693: LD_STRING E
74695: PUSH
74696: LD_INT 0
74698: PUSH
74699: LD_INT 0
74701: PUSH
74702: LD_VAR 0 3
74706: PUSH
74707: LD_INT 0
74709: PUSH
74710: LD_INT 0
74712: PUSH
74713: LD_INT 0
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PPUSH
74729: CALL_OW 447
// end ;
74733: LD_VAR 0 2
74737: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74738: LD_INT 0
74740: PPUSH
74741: PPUSH
74742: PPUSH
// tmp := [ ] ;
74743: LD_ADDR_VAR 0 5
74747: PUSH
74748: EMPTY
74749: ST_TO_ADDR
// for i in units do
74750: LD_ADDR_VAR 0 4
74754: PUSH
74755: LD_VAR 0 1
74759: PUSH
74760: FOR_IN
74761: IFFALSE 74799
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74763: LD_ADDR_VAR 0 5
74767: PUSH
74768: LD_VAR 0 5
74772: PPUSH
74773: LD_VAR 0 5
74777: PUSH
74778: LD_INT 1
74780: PLUS
74781: PPUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: CALL_OW 256
74791: PPUSH
74792: CALL_OW 2
74796: ST_TO_ADDR
74797: GO 74760
74799: POP
74800: POP
// if not tmp then
74801: LD_VAR 0 5
74805: NOT
74806: IFFALSE 74810
// exit ;
74808: GO 74858
// if asc then
74810: LD_VAR 0 2
74814: IFFALSE 74838
// result := SortListByListAsc ( units , tmp ) else
74816: LD_ADDR_VAR 0 3
74820: PUSH
74821: LD_VAR 0 1
74825: PPUSH
74826: LD_VAR 0 5
74830: PPUSH
74831: CALL_OW 76
74835: ST_TO_ADDR
74836: GO 74858
// result := SortListByListDesc ( units , tmp ) ;
74838: LD_ADDR_VAR 0 3
74842: PUSH
74843: LD_VAR 0 1
74847: PPUSH
74848: LD_VAR 0 5
74852: PPUSH
74853: CALL_OW 77
74857: ST_TO_ADDR
// end ;
74858: LD_VAR 0 3
74862: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74863: LD_INT 0
74865: PPUSH
74866: PPUSH
// task := GetTaskList ( mech ) ;
74867: LD_ADDR_VAR 0 4
74871: PUSH
74872: LD_VAR 0 1
74876: PPUSH
74877: CALL_OW 437
74881: ST_TO_ADDR
// if not task then
74882: LD_VAR 0 4
74886: NOT
74887: IFFALSE 74891
// exit ;
74889: GO 74933
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74891: LD_ADDR_VAR 0 3
74895: PUSH
74896: LD_VAR 0 4
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PUSH
74905: LD_INT 1
74907: ARRAY
74908: PUSH
74909: LD_STRING r
74911: EQUAL
74912: PUSH
74913: LD_VAR 0 4
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_INT 4
74924: ARRAY
74925: PUSH
74926: LD_VAR 0 2
74930: EQUAL
74931: AND
74932: ST_TO_ADDR
// end ;
74933: LD_VAR 0 3
74937: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74938: LD_INT 0
74940: PPUSH
// SetDir ( unit , d ) ;
74941: LD_VAR 0 1
74945: PPUSH
74946: LD_VAR 0 4
74950: PPUSH
74951: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74955: LD_VAR 0 1
74959: PPUSH
74960: LD_VAR 0 2
74964: PPUSH
74965: LD_VAR 0 3
74969: PPUSH
74970: LD_VAR 0 5
74974: PPUSH
74975: CALL_OW 48
// end ;
74979: LD_VAR 0 6
74983: RET
// export function ToNaturalNumber ( number ) ; begin
74984: LD_INT 0
74986: PPUSH
// result := number div 1 ;
74987: LD_ADDR_VAR 0 2
74991: PUSH
74992: LD_VAR 0 1
74996: PUSH
74997: LD_INT 1
74999: DIV
75000: ST_TO_ADDR
// if number < 0 then
75001: LD_VAR 0 1
75005: PUSH
75006: LD_INT 0
75008: LESS
75009: IFFALSE 75019
// result := 0 ;
75011: LD_ADDR_VAR 0 2
75015: PUSH
75016: LD_INT 0
75018: ST_TO_ADDR
// end ;
75019: LD_VAR 0 2
75023: RET
// export function SortByClass ( units , class ) ; var un ; begin
75024: LD_INT 0
75026: PPUSH
75027: PPUSH
// if not units or not class then
75028: LD_VAR 0 1
75032: NOT
75033: PUSH
75034: LD_VAR 0 2
75038: NOT
75039: OR
75040: IFFALSE 75044
// exit ;
75042: GO 75139
// result := [ ] ;
75044: LD_ADDR_VAR 0 3
75048: PUSH
75049: EMPTY
75050: ST_TO_ADDR
// for un in units do
75051: LD_ADDR_VAR 0 4
75055: PUSH
75056: LD_VAR 0 1
75060: PUSH
75061: FOR_IN
75062: IFFALSE 75137
// if GetClass ( un ) = class then
75064: LD_VAR 0 4
75068: PPUSH
75069: CALL_OW 257
75073: PUSH
75074: LD_VAR 0 2
75078: EQUAL
75079: IFFALSE 75106
// result := Insert ( result , 1 , un ) else
75081: LD_ADDR_VAR 0 3
75085: PUSH
75086: LD_VAR 0 3
75090: PPUSH
75091: LD_INT 1
75093: PPUSH
75094: LD_VAR 0 4
75098: PPUSH
75099: CALL_OW 2
75103: ST_TO_ADDR
75104: GO 75135
// result := Replace ( result , result + 1 , un ) ;
75106: LD_ADDR_VAR 0 3
75110: PUSH
75111: LD_VAR 0 3
75115: PPUSH
75116: LD_VAR 0 3
75120: PUSH
75121: LD_INT 1
75123: PLUS
75124: PPUSH
75125: LD_VAR 0 4
75129: PPUSH
75130: CALL_OW 1
75134: ST_TO_ADDR
75135: GO 75061
75137: POP
75138: POP
// end ;
75139: LD_VAR 0 3
75143: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75144: LD_INT 0
75146: PPUSH
75147: PPUSH
75148: PPUSH
75149: PPUSH
75150: PPUSH
75151: PPUSH
75152: PPUSH
// result := [ ] ;
75153: LD_ADDR_VAR 0 4
75157: PUSH
75158: EMPTY
75159: ST_TO_ADDR
// if x - r < 0 then
75160: LD_VAR 0 1
75164: PUSH
75165: LD_VAR 0 3
75169: MINUS
75170: PUSH
75171: LD_INT 0
75173: LESS
75174: IFFALSE 75186
// min_x := 0 else
75176: LD_ADDR_VAR 0 8
75180: PUSH
75181: LD_INT 0
75183: ST_TO_ADDR
75184: GO 75202
// min_x := x - r ;
75186: LD_ADDR_VAR 0 8
75190: PUSH
75191: LD_VAR 0 1
75195: PUSH
75196: LD_VAR 0 3
75200: MINUS
75201: ST_TO_ADDR
// if y - r < 0 then
75202: LD_VAR 0 2
75206: PUSH
75207: LD_VAR 0 3
75211: MINUS
75212: PUSH
75213: LD_INT 0
75215: LESS
75216: IFFALSE 75228
// min_y := 0 else
75218: LD_ADDR_VAR 0 7
75222: PUSH
75223: LD_INT 0
75225: ST_TO_ADDR
75226: GO 75244
// min_y := y - r ;
75228: LD_ADDR_VAR 0 7
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: LD_VAR 0 3
75242: MINUS
75243: ST_TO_ADDR
// max_x := x + r ;
75244: LD_ADDR_VAR 0 9
75248: PUSH
75249: LD_VAR 0 1
75253: PUSH
75254: LD_VAR 0 3
75258: PLUS
75259: ST_TO_ADDR
// max_y := y + r ;
75260: LD_ADDR_VAR 0 10
75264: PUSH
75265: LD_VAR 0 2
75269: PUSH
75270: LD_VAR 0 3
75274: PLUS
75275: ST_TO_ADDR
// for _x = min_x to max_x do
75276: LD_ADDR_VAR 0 5
75280: PUSH
75281: DOUBLE
75282: LD_VAR 0 8
75286: DEC
75287: ST_TO_ADDR
75288: LD_VAR 0 9
75292: PUSH
75293: FOR_TO
75294: IFFALSE 75395
// for _y = min_y to max_y do
75296: LD_ADDR_VAR 0 6
75300: PUSH
75301: DOUBLE
75302: LD_VAR 0 7
75306: DEC
75307: ST_TO_ADDR
75308: LD_VAR 0 10
75312: PUSH
75313: FOR_TO
75314: IFFALSE 75391
// begin if not ValidHex ( _x , _y ) then
75316: LD_VAR 0 5
75320: PPUSH
75321: LD_VAR 0 6
75325: PPUSH
75326: CALL_OW 488
75330: NOT
75331: IFFALSE 75335
// continue ;
75333: GO 75313
// if GetResourceTypeXY ( _x , _y ) then
75335: LD_VAR 0 5
75339: PPUSH
75340: LD_VAR 0 6
75344: PPUSH
75345: CALL_OW 283
75349: IFFALSE 75389
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75351: LD_ADDR_VAR 0 4
75355: PUSH
75356: LD_VAR 0 4
75360: PPUSH
75361: LD_VAR 0 4
75365: PUSH
75366: LD_INT 1
75368: PLUS
75369: PPUSH
75370: LD_VAR 0 5
75374: PUSH
75375: LD_VAR 0 6
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PPUSH
75384: CALL_OW 1
75388: ST_TO_ADDR
// end ;
75389: GO 75313
75391: POP
75392: POP
75393: GO 75293
75395: POP
75396: POP
// end ;
75397: LD_VAR 0 4
75401: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75402: LD_INT 0
75404: PPUSH
75405: PPUSH
75406: PPUSH
75407: PPUSH
75408: PPUSH
75409: PPUSH
75410: PPUSH
75411: PPUSH
// if not units then
75412: LD_VAR 0 1
75416: NOT
75417: IFFALSE 75421
// exit ;
75419: GO 75846
// result := UnitFilter ( units , [ f_ok ] ) ;
75421: LD_ADDR_VAR 0 3
75425: PUSH
75426: LD_VAR 0 1
75430: PPUSH
75431: LD_INT 50
75433: PUSH
75434: EMPTY
75435: LIST
75436: PPUSH
75437: CALL_OW 72
75441: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75442: LD_ADDR_VAR 0 8
75446: PUSH
75447: LD_VAR 0 1
75451: PUSH
75452: LD_INT 1
75454: ARRAY
75455: PPUSH
75456: CALL_OW 255
75460: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75461: LD_ADDR_VAR 0 10
75465: PUSH
75466: LD_INT 29
75468: PUSH
75469: LD_EXP 63
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: ST_TO_ADDR
// if not result then
75478: LD_VAR 0 3
75482: NOT
75483: IFFALSE 75487
// exit ;
75485: GO 75846
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75487: LD_ADDR_VAR 0 5
75491: PUSH
75492: LD_INT 81
75494: PUSH
75495: LD_VAR 0 8
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PPUSH
75504: CALL_OW 69
75508: ST_TO_ADDR
// for i in result do
75509: LD_ADDR_VAR 0 4
75513: PUSH
75514: LD_VAR 0 3
75518: PUSH
75519: FOR_IN
75520: IFFALSE 75844
// begin tag := GetTag ( i ) + 1 ;
75522: LD_ADDR_VAR 0 9
75526: PUSH
75527: LD_VAR 0 4
75531: PPUSH
75532: CALL_OW 110
75536: PUSH
75537: LD_INT 1
75539: PLUS
75540: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75541: LD_ADDR_VAR 0 7
75545: PUSH
75546: LD_VAR 0 4
75550: PPUSH
75551: CALL_OW 250
75555: PPUSH
75556: LD_VAR 0 4
75560: PPUSH
75561: CALL_OW 251
75565: PPUSH
75566: LD_INT 6
75568: PPUSH
75569: CALL 75144 0 3
75573: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75574: LD_VAR 0 7
75578: PUSH
75579: LD_VAR 0 4
75583: PPUSH
75584: CALL_OW 264
75588: PUSH
75589: LD_VAR 0 10
75593: IN
75594: NOT
75595: AND
75596: IFFALSE 75635
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75598: LD_VAR 0 4
75602: PPUSH
75603: LD_VAR 0 7
75607: PUSH
75608: LD_INT 1
75610: ARRAY
75611: PUSH
75612: LD_INT 1
75614: ARRAY
75615: PPUSH
75616: LD_VAR 0 7
75620: PUSH
75621: LD_INT 1
75623: ARRAY
75624: PUSH
75625: LD_INT 2
75627: ARRAY
75628: PPUSH
75629: CALL_OW 116
75633: GO 75842
// if path > tag then
75635: LD_VAR 0 2
75639: PUSH
75640: LD_VAR 0 9
75644: GREATER
75645: IFFALSE 75812
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75647: LD_ADDR_VAR 0 6
75651: PUSH
75652: LD_VAR 0 5
75656: PPUSH
75657: LD_INT 91
75659: PUSH
75660: LD_VAR 0 4
75664: PUSH
75665: LD_INT 12
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: LIST
75672: PPUSH
75673: CALL_OW 72
75677: ST_TO_ADDR
// if nearEnemy then
75678: LD_VAR 0 6
75682: IFFALSE 75710
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75684: LD_VAR 0 4
75688: PPUSH
75689: LD_VAR 0 6
75693: PPUSH
75694: LD_VAR 0 4
75698: PPUSH
75699: CALL_OW 74
75703: PPUSH
75704: CALL_OW 115
75708: GO 75810
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75710: LD_VAR 0 4
75714: PPUSH
75715: LD_VAR 0 2
75719: PUSH
75720: LD_VAR 0 9
75724: ARRAY
75725: PUSH
75726: LD_INT 1
75728: ARRAY
75729: PPUSH
75730: LD_VAR 0 2
75734: PUSH
75735: LD_VAR 0 9
75739: ARRAY
75740: PUSH
75741: LD_INT 2
75743: ARRAY
75744: PPUSH
75745: CALL_OW 297
75749: PUSH
75750: LD_INT 6
75752: GREATER
75753: IFFALSE 75796
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75755: LD_VAR 0 4
75759: PPUSH
75760: LD_VAR 0 2
75764: PUSH
75765: LD_VAR 0 9
75769: ARRAY
75770: PUSH
75771: LD_INT 1
75773: ARRAY
75774: PPUSH
75775: LD_VAR 0 2
75779: PUSH
75780: LD_VAR 0 9
75784: ARRAY
75785: PUSH
75786: LD_INT 2
75788: ARRAY
75789: PPUSH
75790: CALL_OW 114
75794: GO 75810
// SetTag ( i , tag ) ;
75796: LD_VAR 0 4
75800: PPUSH
75801: LD_VAR 0 9
75805: PPUSH
75806: CALL_OW 109
// end else
75810: GO 75842
// if enemy then
75812: LD_VAR 0 5
75816: IFFALSE 75842
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75818: LD_VAR 0 4
75822: PPUSH
75823: LD_VAR 0 5
75827: PPUSH
75828: LD_VAR 0 4
75832: PPUSH
75833: CALL_OW 74
75837: PPUSH
75838: CALL_OW 115
// end ;
75842: GO 75519
75844: POP
75845: POP
// end ; end_of_file
75846: LD_VAR 0 3
75850: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75851: LD_VAR 0 1
75855: PUSH
75856: LD_INT 200
75858: DOUBLE
75859: GREATEREQUAL
75860: IFFALSE 75868
75862: LD_INT 299
75864: DOUBLE
75865: LESSEQUAL
75866: IFTRUE 75870
75868: GO 75902
75870: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75871: LD_VAR 0 1
75875: PPUSH
75876: LD_VAR 0 2
75880: PPUSH
75881: LD_VAR 0 3
75885: PPUSH
75886: LD_VAR 0 4
75890: PPUSH
75891: LD_VAR 0 5
75895: PPUSH
75896: CALL 32387 0 5
75900: GO 75979
75902: LD_INT 300
75904: DOUBLE
75905: GREATEREQUAL
75906: IFFALSE 75914
75908: LD_INT 399
75910: DOUBLE
75911: LESSEQUAL
75912: IFTRUE 75916
75914: GO 75978
75916: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 2
75926: PPUSH
75927: LD_VAR 0 3
75931: PPUSH
75932: LD_VAR 0 4
75936: PPUSH
75937: LD_VAR 0 5
75941: PPUSH
75942: LD_VAR 0 6
75946: PPUSH
75947: LD_VAR 0 7
75951: PPUSH
75952: LD_VAR 0 8
75956: PPUSH
75957: LD_VAR 0 9
75961: PPUSH
75962: LD_VAR 0 10
75966: PPUSH
75967: LD_VAR 0 11
75971: PPUSH
75972: CALL 30285 0 11
75976: GO 75979
75978: POP
// end ;
75979: PPOPN 11
75981: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_VAR 0 2
75991: PPUSH
75992: LD_VAR 0 3
75996: PPUSH
75997: LD_VAR 0 4
76001: PPUSH
76002: LD_VAR 0 5
76006: PPUSH
76007: CALL 32379 0 5
// end ; end_of_file
76011: PPOPN 5
76013: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76014: LD_VAR 0 1
76018: PPUSH
76019: LD_VAR 0 2
76023: PPUSH
76024: LD_VAR 0 3
76028: PPUSH
76029: LD_VAR 0 4
76033: PPUSH
76034: LD_VAR 0 5
76038: PPUSH
76039: LD_VAR 0 6
76043: PPUSH
76044: CALL 18480 0 6
// end ;
76048: PPOPN 6
76050: END
