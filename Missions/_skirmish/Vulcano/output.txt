// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3824 0 0
// PrepareLegion ;
  27: CALL 8105 0 0
// Action ;
  31: CALL 11613 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17044 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , vulcano ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING vulcano
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35600 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2889
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_INT 28
2801: EQUAL
2802: OR
2803: IFFALSE 2889
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2805: LD_ADDR_EXP 32
2809: PUSH
2810: LD_EXP 32
2814: PUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 266
2824: ADD
2825: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2826: LD_ADDR_EXP 32
2830: PUSH
2831: LD_EXP 32
2835: PUSH
2836: LD_VAR 0 1
2840: PPUSH
2841: CALL_OW 250
2845: ADD
2846: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2847: LD_ADDR_EXP 32
2851: PUSH
2852: LD_EXP 32
2856: PUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: CALL_OW 251
2866: ADD
2867: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2868: LD_ADDR_EXP 32
2872: PUSH
2873: LD_EXP 32
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 254
2887: ADD
2888: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2889: LD_VAR 0 1
2893: PUSH
2894: LD_INT 22
2896: PUSH
2897: LD_INT 8
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 21
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 69
2922: IN
2923: IFFALSE 3067
// begin if GetBType ( un ) = b_barracks then
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 266
2934: PUSH
2935: LD_INT 5
2937: EQUAL
2938: IFFALSE 2956
// legion_blist := legion_blist ^ b_armoury else
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PUSH
2950: LD_INT 4
2952: ADD
2953: ST_TO_ADDR
2954: GO 3004
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 266
2965: PUSH
2966: LD_INT 1
2968: PUSH
2969: LD_INT 6
2971: PUSH
2972: LD_INT 8
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: IN
2980: NOT
2981: IFFALSE 3004
// legion_blist := legion_blist ^ GetBType ( un ) ;
2983: LD_ADDR_EXP 40
2987: PUSH
2988: LD_EXP 40
2992: PUSH
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 266
3002: ADD
3003: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3004: LD_ADDR_EXP 40
3008: PUSH
3009: LD_EXP 40
3013: PUSH
3014: LD_VAR 0 1
3018: PPUSH
3019: CALL_OW 250
3023: ADD
3024: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3025: LD_ADDR_EXP 40
3029: PUSH
3030: LD_EXP 40
3034: PUSH
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 251
3044: ADD
3045: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3046: LD_ADDR_EXP 40
3050: PUSH
3051: LD_EXP 40
3055: PUSH
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 254
3065: ADD
3066: ST_TO_ADDR
// end ; if un in legion_force then
3067: LD_VAR 0 1
3071: PUSH
3072: LD_EXP 37
3076: IN
3077: IFFALSE 3095
// legion_force := legion_force diff un ;
3079: LD_ADDR_EXP 37
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_VAR 0 1
3093: DIFF
3094: ST_TO_ADDR
// if un in ru_force then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_EXP 29
3104: IN
3105: IFFALSE 3123
// ru_force := ru_force diff un ;
3107: LD_ADDR_EXP 29
3111: PUSH
3112: LD_EXP 29
3116: PUSH
3117: LD_VAR 0 1
3121: DIFF
3122: ST_TO_ADDR
// if un in al_force then
3123: LD_VAR 0 1
3127: PUSH
3128: LD_EXP 44
3132: IN
3133: IFFALSE 3151
// al_force := al_force diff un ;
3135: LD_ADDR_EXP 44
3139: PUSH
3140: LD_EXP 44
3144: PUSH
3145: LD_VAR 0 1
3149: DIFF
3150: ST_TO_ADDR
// end ;
3151: PPOPN 1
3153: END
// on BuildingComplete ( b ) do var i ;
3154: LD_INT 0
3156: PPUSH
// begin if GetSide ( b ) = 8 then
3157: LD_VAR 0 1
3161: PPUSH
3162: CALL_OW 255
3166: PUSH
3167: LD_INT 8
3169: EQUAL
3170: IFFALSE 3210
// for i = 1 to 4 do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 4
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3208
// legion_blist := Delete ( legion_blist , 1 ) ;
3188: LD_ADDR_EXP 40
3192: PUSH
3193: LD_EXP 40
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: CALL_OW 3
3205: ST_TO_ADDR
3206: GO 3185
3208: POP
3209: POP
// if GetSide ( b ) = 3 then
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 255
3219: PUSH
3220: LD_INT 3
3222: EQUAL
3223: IFFALSE 3263
// for i = 1 to 4 do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_INT 4
3237: PUSH
3238: FOR_TO
3239: IFFALSE 3261
// ru_blist := Delete ( ru_blist , 1 ) ;
3241: LD_ADDR_EXP 32
3245: PUSH
3246: LD_EXP 32
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL_OW 3
3258: ST_TO_ADDR
3259: GO 3238
3261: POP
3262: POP
// end ;
3263: PPOPN 2
3265: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL 35720 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 264
3289: PUSH
3290: LD_INT 51
3292: PUSH
3293: LD_INT 48
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: IN
3300: NOT
3301: IFFALSE 3349
// begin if GetSide ( veh ) = 3 then
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 255
3312: PUSH
3313: LD_INT 3
3315: EQUAL
3316: IFFALSE 3349
// begin ComMoveXY ( veh , 149 , 8 ) ;
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_INT 149
3325: PPUSH
3326: LD_INT 8
3328: PPUSH
3329: CALL_OW 111
// ru_force := ru_force ^ veh ;
3333: LD_ADDR_EXP 29
3337: PUSH
3338: LD_EXP 29
3342: PUSH
3343: LD_VAR 0 1
3347: ADD
3348: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 264
3358: PUSH
3359: LD_INT 32
3361: PUSH
3362: LD_INT 31
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: IN
3369: NOT
3370: IFFALSE 3403
// begin if GetSide ( veh ) = 8 then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: IFFALSE 3403
// legion_force := legion_force ^ veh ;
3387: LD_ADDR_EXP 37
3391: PUSH
3392: LD_EXP 37
3396: PUSH
3397: LD_VAR 0 1
3401: ADD
3402: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 255
3412: PUSH
3413: LD_INT 3
3415: EQUAL
3416: PUSH
3417: LD_EXP 31
3421: NOT
3422: AND
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 264
3433: PUSH
3434: LD_INT 51
3436: EQUAL
3437: AND
3438: IFFALSE 3450
// ru_cargo := veh ;
3440: LD_ADDR_EXP 31
3444: PUSH
3445: LD_VAR 0 1
3449: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 255
3459: PUSH
3460: LD_INT 7
3462: EQUAL
3463: PUSH
3464: LD_OWVAR 2
3468: PUSH
3469: LD_INT 7
3471: NONEQUAL
3472: AND
3473: IFFALSE 3491
// al_force := al_force ^ veh ;
3475: LD_ADDR_EXP 44
3479: PUSH
3480: LD_EXP 44
3484: PUSH
3485: LD_VAR 0 1
3489: ADD
3490: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3491: LD_VAR 0 1
3495: PPUSH
3496: CALL_OW 255
3500: PUSH
3501: LD_OWVAR 2
3505: EQUAL
3506: IFFALSE 3522
// veh_counter := veh_counter + 1 ;
3508: LD_ADDR_EXP 18
3512: PUSH
3513: LD_EXP 18
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// end ;
3522: PPOPN 2
3524: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 255
3534: PUSH
3535: LD_OWVAR 2
3539: NONEQUAL
3540: IFFALSE 3556
// sib_contamin_counter := sib_contamin_counter + 1 ;
3542: LD_ADDR_EXP 20
3546: PUSH
3547: LD_EXP 20
3551: PUSH
3552: LD_INT 1
3554: PLUS
3555: ST_TO_ADDR
// end ;
3556: PPOPN 3
3558: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3559: LD_VAR 0 2
3563: PPUSH
3564: CALL_OW 255
3568: PUSH
3569: LD_OWVAR 2
3573: EQUAL
3574: IFFALSE 3590
// tech_counter := tech_counter + 1 ;
3576: LD_ADDR_EXP 19
3580: PUSH
3581: LD_EXP 19
3585: PUSH
3586: LD_INT 1
3588: PLUS
3589: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3590: LD_VAR 0 1
3594: PUSH
3595: LD_INT 53
3597: EQUAL
3598: PUSH
3599: LD_OWVAR 2
3603: PUSH
3604: LD_INT 1
3606: EQUAL
3607: AND
3608: IFFALSE 3623
// SetTech ( 80 , 1 , state_researched ) ;
3610: LD_INT 80
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 322
// end ;
3623: PPOPN 2
3625: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3626: LD_VAR 0 1
3630: PPUSH
3631: CALL_OW 255
3635: PUSH
3636: LD_INT 8
3638: EQUAL
3639: PUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 263
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: AND
3654: IFFALSE 3665
// ComAutodestruct ( un ) ;
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 73770 0 1
// end ;
3665: PPOPN 1
3667: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3668: LD_VAR 0 1
3672: PUSH
3673: LD_EXP 21
3677: DOUBLE
3678: EQUAL
3679: IFTRUE 3683
3681: GO 3690
3683: POP
// LegionAttack ( ) ; event_alliance_attack :
3684: CALL 11403 0 0
3688: GO 3725
3690: LD_EXP 23
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3700
3698: GO 3707
3700: POP
// AllianceAttack ( ) ; event_russian_attack :
3701: CALL 18952 0 0
3705: GO 3725
3707: LD_EXP 22
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3724
3717: POP
// RussianAttack ( ) ; end ;
3718: CALL 7629 0 0
3722: GO 3725
3724: POP
// end ;
3725: PPOPN 1
3727: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3728: LD_INT 25
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 9
3745: LESS
3746: PUSH
3747: LD_OWVAR 1
3751: PUSH
3752: LD_INT 105000
3754: LESS
3755: AND
3756: IFFALSE 3789
3758: GO 3760
3760: DISABLE
// begin enable ;
3761: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3762: LD_INT 8
3764: PUSH
3765: LD_INT 25
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: PUSH
3780: LD_INT 0
3782: PLUS
3783: MINUS
3784: PPUSH
3785: CALL 2000 0 1
// end ;
3789: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 3
3804: PPUSH
3805: CALL 35696 0 3
// end ;
3809: PPOPN 3
3811: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL 35704 0 1
// end ; end_of_file
3821: PPOPN 1
3823: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// uc_side := 3 ;
3837: LD_ADDR_OWVAR 20
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// uc_nation := nation_russian ;
3845: LD_ADDR_OWVAR 21
3849: PUSH
3850: LD_INT 3
3852: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 30
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_INT 3
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 30
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PPUSH
3920: CALL_OW 69
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 34
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 30
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 69
4000: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4001: LD_ADDR_VAR 0 7
4005: PUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 30
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: ST_TO_ADDR
// ru_blist := [ ] ;
4039: LD_ADDR_EXP 32
4043: PUSH
4044: EMPTY
4045: ST_TO_ADDR
// ru_vlist := [ ] ;
4046: LD_ADDR_EXP 33
4050: PUSH
4051: EMPTY
4052: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4053: LD_ADDR_EXP 36
4057: PUSH
4058: LD_INT 183
4060: PUSH
4061: LD_INT 62
4063: PUSH
4064: LD_INT 147
4066: PUSH
4067: LD_INT 44
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4076: LD_INT 30
4078: PUSH
4079: LD_INT 34
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_EXP 36
4099: PUSH
4100: LD_INT 1
4102: ARRAY
4103: PPUSH
4104: LD_EXP 36
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4117: LD_ADDR_EXP 34
4121: PUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 6
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: LD_OWVAR 67
4140: ARRAY
4141: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4142: LD_VAR 0 4
4146: PPUSH
4147: CALL_OW 274
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 3000
4157: PPUSH
4158: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4162: LD_VAR 0 4
4166: PPUSH
4167: CALL_OW 274
4171: PPUSH
4172: LD_INT 2
4174: PPUSH
4175: LD_INT 300
4177: PPUSH
4178: CALL_OW 277
// hc_gallery :=  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// hc_name :=  ;
4190: LD_ADDR_OWVAR 26
4194: PUSH
4195: LD_STRING 
4197: ST_TO_ADDR
// hc_importance := 0 ;
4198: LD_ADDR_OWVAR 32
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4206: LD_ADDR_EXP 30
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 6
4216: PUSH
4217: LD_INT 7
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: PUSH
4225: LD_OWVAR 67
4229: ARRAY
4230: ST_TO_ADDR
// for i = 1 to 6 do
4231: LD_ADDR_VAR 0 2
4235: PUSH
4236: DOUBLE
4237: LD_INT 1
4239: DEC
4240: ST_TO_ADDR
4241: LD_INT 6
4243: PUSH
4244: FOR_TO
4245: IFFALSE 4403
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4247: LD_INT 0
4249: PPUSH
4250: LD_INT 9
4252: PPUSH
4253: LD_EXP 30
4257: PPUSH
4258: CALL_OW 380
// un := CreateHuman ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_VAR 0 7
4281: PPUSH
4282: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 4
4291: PPUSH
4292: LD_EXP 30
4296: PPUSH
4297: CALL_OW 380
// un := CreateHuman ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: CALL_OW 44
4310: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 24
4318: PPUSH
4319: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_EXP 30
4333: PPUSH
4334: CALL_OW 380
// un := CreateHuman ;
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_INT 2
4367: PPUSH
4368: LD_EXP 30
4372: PPUSH
4373: CALL_OW 380
// un := CreateHuman ;
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: CALL_OW 44
4386: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 52
// end ;
4401: GO 4244
4403: POP
4404: POP
// if Difficulty > 1 then
4405: LD_OWVAR 67
4409: PUSH
4410: LD_INT 1
4412: GREATER
4413: IFFALSE 4446
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 3
4422: PPUSH
4423: LD_INT 160
4425: PPUSH
4426: LD_INT 36
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: CALL 81723 0 4
4436: ST_TO_ADDR
// ComHold ( un ) ;
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 140
// end ; russian_prepared := true ;
4446: LD_ADDR_EXP 2
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4454: LD_VAR 0 5
4458: PPUSH
4459: LD_INT 21
4461: PPUSH
4462: LD_INT 3
4464: PPUSH
4465: LD_INT 3
4467: PPUSH
4468: LD_INT 51
4470: PPUSH
4471: CALL_OW 125
// end ;
4475: LD_VAR 0 1
4479: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: PUSH
4495: LD_INT 0
4497: GREATER
4498: PUSH
4499: LD_EXP 2
4503: AND
4504: IFFALSE 6654
4506: GO 4508
4508: DISABLE
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
// begin enable ;
4527: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4528: LD_ADDR_VAR 0 1
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 30
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PUSH
4562: LD_INT 1
4564: ARRAY
4565: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4566: LD_ADDR_VAR 0 2
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: PUSH
4600: LD_INT 1
4602: ARRAY
4603: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 3
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 30
4621: PUSH
4622: LD_INT 34
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 69
4675: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4676: LD_ADDR_VAR 0 8
4680: PUSH
4681: LD_INT 22
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PPUSH
4705: CALL_OW 69
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 3
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PPUSH
4743: CALL_OW 69
4747: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4748: LD_ADDR_VAR 0 6
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 3
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4782: LD_ADDR_VAR 0 7
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4816: LD_ADDR_VAR 0 9
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_INT 25
4828: PUSH
4829: LD_INT 2
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 72
4840: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4841: LD_ADDR_VAR 0 10
4845: PUSH
4846: LD_VAR 0 7
4850: PPUSH
4851: LD_INT 25
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4866: LD_ADDR_VAR 0 11
4870: PUSH
4871: LD_VAR 0 7
4875: PPUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 72
4890: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4891: LD_INT 22
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 34
4903: PUSH
4904: LD_INT 51
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: PUSH
4920: LD_INT 0
4922: GREATER
4923: PUSH
4924: LD_EXP 31
4928: PUSH
4929: LD_INT 0
4931: EQUAL
4932: AND
4933: IFFALSE 4973
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4935: LD_ADDR_EXP 31
4939: PUSH
4940: LD_INT 22
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 34
4952: PUSH
4953: LD_INT 51
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: ST_TO_ADDR
// if ru_cargo then
4973: LD_EXP 31
4977: IFFALSE 5317
// begin if IsInArea ( ru_cargo , ru_base ) then
4979: LD_EXP 31
4983: PPUSH
4984: LD_INT 9
4986: PPUSH
4987: CALL_OW 308
4991: IFFALSE 5070
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4993: LD_EXP 31
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 289
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5027
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5011: LD_EXP 31
5015: PPUSH
5016: LD_VAR 0 3
5020: PPUSH
5021: CALL_OW 120
5025: GO 5068
// if not HasTask ( ru_cargo ) then
5027: LD_EXP 31
5031: PPUSH
5032: CALL_OW 314
5036: NOT
5037: IFFALSE 5068
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5039: LD_EXP 31
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 250
5053: PPUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 251
5063: PPUSH
5064: CALL_OW 111
// end else
5068: GO 5317
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5070: LD_EXP 31
5074: PPUSH
5075: CALL_OW 314
5079: NOT
5080: PUSH
5081: LD_EXP 31
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 289
5093: PUSH
5094: LD_INT 100
5096: LESS
5097: AND
5098: PUSH
5099: LD_EXP 31
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: CALL_OW 308
5111: NOT
5112: AND
5113: IFFALSE 5190
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5115: LD_ADDR_VAR 0 15
5119: PUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 435
5127: ST_TO_ADDR
// if cr then
5128: LD_VAR 0 15
5132: IFFALSE 5163
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5134: LD_EXP 31
5138: PPUSH
5139: LD_VAR 0 15
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PPUSH
5148: LD_VAR 0 15
5152: PUSH
5153: LD_INT 2
5155: ARRAY
5156: PPUSH
5157: CALL_OW 117
5161: GO 5190
// if not IsInArea ( ru_cargo , ru_crates ) then
5163: LD_EXP 31
5167: PPUSH
5168: LD_INT 11
5170: PPUSH
5171: CALL_OW 308
5175: NOT
5176: IFFALSE 5190
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5178: LD_EXP 31
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5190: LD_EXP 31
5194: PPUSH
5195: CALL_OW 314
5199: NOT
5200: PUSH
5201: LD_EXP 31
5205: PPUSH
5206: LD_INT 10
5208: PPUSH
5209: CALL_OW 308
5213: NOT
5214: AND
5215: PUSH
5216: LD_EXP 31
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: CALL_OW 289
5228: PUSH
5229: LD_INT 100
5231: EQUAL
5232: PUSH
5233: LD_OWVAR 2
5237: PPUSH
5238: LD_EXP 31
5242: PPUSH
5243: CALL_OW 292
5247: OR
5248: AND
5249: IFFALSE 5263
// ComMoveToArea ( ru_cargo , cargoa ) ;
5251: LD_EXP 31
5255: PPUSH
5256: LD_INT 10
5258: PPUSH
5259: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5263: LD_EXP 31
5267: PPUSH
5268: LD_INT 10
5270: PPUSH
5271: CALL_OW 308
5275: PUSH
5276: LD_VAR 0 8
5280: AND
5281: IFFALSE 5317
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_INT 139
5309: PPUSH
5310: LD_INT 24
5312: PPUSH
5313: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5317: LD_EXP 31
5321: PUSH
5322: LD_INT 0
5324: EQUAL
5325: PUSH
5326: LD_VAR 0 2
5330: AND
5331: PUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 461
5341: PUSH
5342: LD_INT 2
5344: EQUAL
5345: AND
5346: IFFALSE 5369
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5348: LD_VAR 0 2
5352: PPUSH
5353: LD_INT 21
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: LD_INT 51
5364: PPUSH
5365: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 0
5381: GREATER
5382: AND
5383: IFFALSE 5483
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 461
5394: PUSH
5395: LD_INT 2
5397: EQUAL
5398: IFFALSE 5483
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 33
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_EXP 33
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: LD_EXP 33
5427: PUSH
5428: LD_INT 3
5430: ARRAY
5431: PPUSH
5432: LD_EXP 33
5436: PUSH
5437: LD_INT 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 125
// for i = 1 to 4 do
5445: LD_ADDR_VAR 0 12
5449: PUSH
5450: DOUBLE
5451: LD_INT 1
5453: DEC
5454: ST_TO_ADDR
5455: LD_INT 4
5457: PUSH
5458: FOR_TO
5459: IFFALSE 5481
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5461: LD_ADDR_EXP 33
5465: PUSH
5466: LD_EXP 33
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: CALL_OW 3
5478: ST_TO_ADDR
5479: GO 5458
5481: POP
5482: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5483: LD_INT 24
5485: PPUSH
5486: CALL_OW 461
5490: PUSH
5491: LD_INT 2
5493: EQUAL
5494: PUSH
5495: LD_EXP 4
5499: AND
5500: IFFALSE 5528
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5502: LD_INT 25
5504: PPUSH
5505: LD_INT 3
5507: PPUSH
5508: CALL_OW 321
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5528
// ComResearch ( ru_lab , tech_sibfiss ) ;
5518: LD_INT 24
5520: PPUSH
5521: LD_INT 25
5523: PPUSH
5524: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5528: LD_INT 25
5530: PPUSH
5531: LD_INT 3
5533: PPUSH
5534: CALL_OW 321
5538: PUSH
5539: LD_INT 2
5541: EQUAL
5542: PUSH
5543: LD_OWVAR 1
5547: PUSH
5548: LD_INT 10500
5550: MOD
5551: PUSH
5552: LD_INT 0
5554: EQUAL
5555: AND
5556: IFFALSE 5594
// if BuildingStatus ( ru_factory ) = bs_idle then
5558: LD_VAR 0 2
5562: PPUSH
5563: CALL_OW 461
5567: PUSH
5568: LD_INT 2
5570: EQUAL
5571: IFFALSE 5594
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 3
5586: PPUSH
5587: LD_INT 48
5589: PPUSH
5590: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 34
5606: PUSH
5607: LD_INT 48
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: IFFALSE 6000
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5628: LD_ADDR_VAR 0 16
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 34
5645: PUSH
5646: LD_INT 48
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5666: LD_VAR 0 16
5670: PPUSH
5671: LD_INT 9
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5696
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5680: LD_VAR 0 16
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 120
5694: GO 6000
// if not HasTask ( sib_bomb ) then
5696: LD_VAR 0 16
5700: PPUSH
5701: CALL_OW 314
5705: NOT
5706: IFFALSE 6000
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5708: LD_INT 22
5710: PUSH
5711: LD_OWVAR 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 30
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 69
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: CALL_OW 256
5747: PUSH
5748: LD_INT 250
5750: GREATER
5751: IFFALSE 5844
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5753: LD_VAR 0 16
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 250
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 251
5837: PPUSH
5838: CALL_OW 116
5842: GO 6000
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5844: LD_INT 22
5846: PUSH
5847: LD_OWVAR 2
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PUSH
5875: LD_INT 0
5877: GREATER
5878: IFFALSE 5971
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5880: LD_VAR 0 16
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 250
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 251
5964: PPUSH
5965: CALL_OW 116
5969: GO 6000
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5971: LD_VAR 0 16
5975: PPUSH
5976: LD_EXP 11
5980: PPUSH
5981: CALL_OW 250
5985: PPUSH
5986: LD_EXP 11
5990: PPUSH
5991: CALL_OW 251
5995: PPUSH
5996: CALL_OW 116
// end ; if ru_can_attack then
6000: LD_EXP 3
6004: IFFALSE 6152
// if ru_time > 0 0$00 then
6006: LD_EXP 35
6010: PUSH
6011: LD_INT 0
6013: GREATER
6014: IFFALSE 6032
// ru_time := ru_time - 0 0$03 else
6016: LD_ADDR_EXP 35
6020: PUSH
6021: LD_EXP 35
6025: PUSH
6026: LD_INT 105
6028: MINUS
6029: ST_TO_ADDR
6030: GO 6152
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6032: LD_ADDR_EXP 35
6036: PUSH
6037: LD_INT 20265
6039: PPUSH
6040: LD_INT 30765
6042: PPUSH
6043: CALL_OW 12
6047: ST_TO_ADDR
// for i = 1 to ru_amount do
6048: LD_ADDR_VAR 0 12
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_EXP 34
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6150
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6066: LD_ADDR_EXP 33
6070: PUSH
6071: LD_EXP 33
6075: PUSH
6076: LD_INT 23
6078: ADD
6079: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6080: LD_ADDR_EXP 33
6084: PUSH
6085: LD_EXP 33
6089: PUSH
6090: LD_INT 3
6092: ADD
6093: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6094: LD_ADDR_EXP 33
6098: PUSH
6099: LD_EXP 33
6103: PUSH
6104: LD_INT 3
6106: ADD
6107: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6108: LD_ADDR_EXP 33
6112: PUSH
6113: LD_EXP 33
6117: PUSH
6118: LD_INT 46
6120: PUSH
6121: LD_INT 45
6123: PUSH
6124: LD_INT 47
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 14
6145: ARRAY
6146: ADD
6147: ST_TO_ADDR
// end ;
6148: GO 6063
6150: POP
6151: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 0
6174: GREATER
6175: IFFALSE 6223
// if BuildingStatus ( ru_factory ) = bs_idle then
6177: LD_VAR 0 2
6181: PPUSH
6182: CALL_OW 461
6186: PUSH
6187: LD_INT 2
6189: EQUAL
6190: IFFALSE 6223
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_INT 47
6218: PPUSH
6219: CALL_OW 148
// if ru_force >= ru_amount then
6223: LD_EXP 29
6227: PUSH
6228: LD_EXP 34
6232: GREATEREQUAL
6233: IFFALSE 6244
// RaiseSailEvent ( event_russian_attack ) ;
6235: LD_EXP 22
6239: PPUSH
6240: CALL_OW 427
// if ru_engs > 0 then
6244: LD_VAR 0 9
6248: PUSH
6249: LD_INT 0
6251: GREATER
6252: IFFALSE 6654
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 24
6264: PUSH
6265: LD_INT 1000
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 72
6280: PUSH
6281: LD_INT 0
6283: GREATER
6284: IFFALSE 6439
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6286: LD_ADDR_VAR 0 14
6290: PUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_INT 3
6298: PUSH
6299: LD_INT 24
6301: PUSH
6302: LD_INT 1000
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 72
6317: ST_TO_ADDR
// for i = 1 to ru_engs do
6318: LD_ADDR_VAR 0 12
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 9
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6435
// begin if IsInUnit ( ru_engs [ i ] ) then
6336: LD_VAR 0 9
6340: PUSH
6341: LD_VAR 0 12
6345: ARRAY
6346: PPUSH
6347: CALL_OW 310
6351: IFFALSE 6370
// ComExitBuilding ( ru_engs [ i ] ) else
6353: LD_VAR 0 9
6357: PUSH
6358: LD_VAR 0 12
6362: ARRAY
6363: PPUSH
6364: CALL_OW 122
6368: GO 6433
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6370: LD_VAR 0 9
6374: PUSH
6375: LD_VAR 0 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 314
6385: NOT
6386: PUSH
6387: LD_VAR 0 9
6391: PUSH
6392: LD_VAR 0 12
6396: ARRAY
6397: PPUSH
6398: CALL_OW 256
6402: PUSH
6403: LD_INT 600
6405: GREATER
6406: AND
6407: IFFALSE 6433
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6409: LD_VAR 0 9
6413: PUSH
6414: LD_VAR 0 12
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 14
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: CALL_OW 130
// end ;
6433: GO 6333
6435: POP
6436: POP
// end else
6437: GO 6654
// begin if ru_blist = 0 then
6439: LD_EXP 32
6443: PUSH
6444: LD_INT 0
6446: EQUAL
6447: IFFALSE 6529
// begin for i = 1 to ru_engs do
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_VAR 0 9
6463: PUSH
6464: FOR_TO
6465: IFFALSE 6525
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 12
6476: ARRAY
6477: PPUSH
6478: CALL_OW 314
6482: NOT
6483: PUSH
6484: LD_VAR 0 9
6488: PUSH
6489: LD_VAR 0 12
6493: ARRAY
6494: PPUSH
6495: CALL_OW 310
6499: NOT
6500: AND
6501: IFFALSE 6523
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6503: LD_VAR 0 9
6507: PUSH
6508: LD_VAR 0 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 120
6523: GO 6464
6525: POP
6526: POP
// end else
6527: GO 6654
// begin for i = 1 to ru_engs do
6529: LD_ADDR_VAR 0 12
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 9
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6652
// begin if IsInUnit ( ru_engs [ i ] ) then
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: CALL_OW 310
6562: IFFALSE 6581
// ComExitBuilding ( ru_engs [ i ] ) else
6564: LD_VAR 0 9
6568: PUSH
6569: LD_VAR 0 12
6573: ARRAY
6574: PPUSH
6575: CALL_OW 122
6579: GO 6650
// if not HasTask ( ru_engs [ i ] ) then
6581: LD_VAR 0 9
6585: PUSH
6586: LD_VAR 0 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 314
6596: NOT
6597: IFFALSE 6650
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6599: LD_VAR 0 9
6603: PUSH
6604: LD_VAR 0 12
6608: ARRAY
6609: PPUSH
6610: LD_EXP 32
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_EXP 32
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: PPUSH
6628: LD_EXP 32
6632: PUSH
6633: LD_INT 3
6635: ARRAY
6636: PPUSH
6637: LD_EXP 32
6641: PUSH
6642: LD_INT 4
6644: ARRAY
6645: PPUSH
6646: CALL_OW 145
// end ;
6650: GO 6544
6652: POP
6653: POP
// end ; end ; end ; end ;
6654: PPOPN 16
6656: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6657: LD_EXP 2
6661: PUSH
6662: LD_INT 11
6664: PPUSH
6665: CALL_OW 435
6669: PUSH
6670: LD_INT 10
6672: LESS
6673: AND
6674: IFFALSE 6737
6676: GO 6678
6678: DISABLE
// begin enable ;
6679: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 11
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6701: LD_INT 1505
6703: PPUSH
6704: LD_INT 2100
6706: PPUSH
6707: CALL_OW 12
6711: PPUSH
6712: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 5
6721: PPUSH
6722: CALL_OW 12
6726: PPUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 55
// end ;
6737: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6738: LD_EXP 4
6742: NOT
6743: IFFALSE 6858
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// begin enable ;
6752: ENABLE
// i := Rand ( 0 , 100 ) ;
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 100
6763: PPUSH
6764: CALL_OW 12
6768: ST_TO_ADDR
// case your_side of 1 :
6769: LD_OWVAR 2
6773: PUSH
6774: LD_INT 1
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6793
6782: POP
// tmp := 10 ; 2 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 10
6790: ST_TO_ADDR
6791: GO 6832
6793: LD_INT 2
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// tmp := 0 ; 7 :
6802: LD_ADDR_VAR 0 2
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
6810: GO 6832
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// tmp := 15 ; end ;
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_INT 15
6828: ST_TO_ADDR
6829: GO 6832
6831: POP
// if i < chance_to_bomb + tmp then
6832: LD_VAR 0 1
6836: PUSH
6837: LD_EXP 5
6841: PUSH
6842: LD_VAR 0 2
6846: PLUS
6847: LESS
6848: IFFALSE 6858
// ru_sib_bomb := true ;
6850: LD_ADDR_EXP 4
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// end ;
6858: PPOPN 2
6860: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6861: LD_INT 22
6863: PUSH
6864: LD_OWVAR 2
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 34
6875: PUSH
6876: LD_INT 8
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: IFFALSE 6904
6893: GO 6895
6895: DISABLE
// begin ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6905: LD_INT 22
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 34
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: IFFALSE 7032
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
// begin enable ;
6941: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 2
6962: PPUSH
6963: CALL_OW 12
6967: ARRAY
6968: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6969: LD_INT 22
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 30
6981: PUSH
6982: LD_INT 34
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 69
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_EXP 36
7006: PUSH
7007: LD_VAR 0 1
7011: ARRAY
7012: PPUSH
7013: LD_EXP 36
7017: PUSH
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 1
7025: PLUS
7026: ARRAY
7027: PPUSH
7028: CALL_OW 243
// end ;
7032: PPOPN 1
7034: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7035: LD_OWVAR 1
7039: PUSH
7040: LD_INT 58800
7042: PUSH
7043: LD_INT 52500
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_OWVAR 67
7054: PUSH
7055: LD_INT 1
7057: MINUS
7058: ARRAY
7059: GREATEREQUAL
7060: PUSH
7061: LD_OWVAR 67
7065: PUSH
7066: LD_INT 1
7068: GREATER
7069: AND
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: AND
7086: IFFALSE 7508
7088: GO 7090
7090: DISABLE
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// begin enable ;
7098: ENABLE
// if tick > 60 60$00 then
7099: LD_OWVAR 1
7103: PUSH
7104: LD_INT 126000
7106: GREATER
7107: IFFALSE 7110
// disable ;
7109: DISABLE
// tmp := [ ] ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: EMPTY
7116: ST_TO_ADDR
// for i := 1 to 8 do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: DOUBLE
7123: LD_INT 1
7125: DEC
7126: ST_TO_ADDR
7127: LD_INT 8
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7290
// begin uc_side := 6 ;
7133: LD_ADDR_OWVAR 20
7137: PUSH
7138: LD_INT 6
7140: ST_TO_ADDR
// uc_nation := 3 ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_INT 3
7148: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7149: LD_ADDR_OWVAR 37
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 23
7159: PUSH
7160: LD_INT 24
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: LD_INT 3
7175: MOD
7176: PUSH
7177: LD_INT 1
7179: PLUS
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine_siberite ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_INT 3
7189: ST_TO_ADDR
// vc_control := control_computer ;
7190: LD_ADDR_OWVAR 38
7194: PUSH
7195: LD_INT 3
7197: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7198: LD_ADDR_OWVAR 40
7202: PUSH
7203: LD_INT 45
7205: PUSH
7206: LD_INT 93
7208: PUSH
7209: LD_INT 47
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_INT 2
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7253: LD_VAR 0 2
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: LD_VAR 0 2
7282: PPUSH
7283: CALL 78258 0 2
7287: ST_TO_ADDR
// end ;
7288: GO 7130
7290: POP
7291: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7292: LD_INT 22
7294: PUSH
7295: LD_OWVAR 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 92
7306: PUSH
7307: LD_INT 58
7309: PUSH
7310: LD_INT 15
7312: PUSH
7313: LD_INT 18
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_INT 1
7333: GREATER
7334: IFFALSE 7346
// p := 2 else
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_INT 2
7343: ST_TO_ADDR
7344: GO 7354
// p := 1 ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// case p of 1 :
7354: LD_VAR 0 4
7358: PUSH
7359: LD_INT 1
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7432
7367: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_INT 29
7375: PUSH
7376: LD_INT 29
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 49
7385: PUSH
7386: LD_INT 70
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 49
7395: PUSH
7396: LD_INT 70
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 61
7405: PUSH
7406: LD_INT 110
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 74
7415: PUSH
7416: LD_INT 129
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
7430: GO 7484
7432: LD_INT 2
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7483
7440: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_INT 24
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 39
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 52
7468: PUSH
7469: LD_INT 27
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 7484
7483: POP
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 80862 0 2
7505: NOT
7506: IFFALSE 7484
// end ;
7508: PPOPN 5
7510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 30
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: IFFALSE 7626
7541: GO 7543
7543: DISABLE
7544: LD_INT 0
7546: PPUSH
// begin enable ;
7547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 30
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 274
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 6000
7601: PPUSH
7602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 274
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: LD_INT 600
7621: PPUSH
7622: CALL_OW 276
// end ;
7626: PPOPN 1
7628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
// units := ru_force ;
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_EXP 29
7646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 30
7664: PUSH
7665: LD_INT 34
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// ru_force := [ ] ;
7681: LD_ADDR_EXP 29
7685: PUSH
7686: EMPTY
7687: ST_TO_ADDR
// if not teleport then
7688: LD_VAR 0 6
7692: NOT
7693: IFFALSE 7735
// begin for i in units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 3
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 150
7715: PPUSH
7716: LD_INT 65
7718: PPUSH
7719: LD_INT 12
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 483
7729: GO 7705
7731: POP
7732: POP
// end else
7733: GO 7830
// begin repeat for i = 1 to units do
7735: LD_ADDR_VAR 0 5
7739: PUSH
7740: DOUBLE
7741: LD_INT 1
7743: DEC
7744: ST_TO_ADDR
7745: LD_VAR 0 3
7749: PUSH
7750: FOR_TO
7751: IFFALSE 7799
// if IsInArea ( units [ i ] , ru_base ) then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_VAR 0 5
7762: ARRAY
7763: PPUSH
7764: LD_INT 9
7766: PPUSH
7767: CALL_OW 308
7771: IFFALSE 7797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7773: LD_VAR 0 3
7777: PUSH
7778: LD_VAR 0 5
7782: ARRAY
7783: PPUSH
7784: LD_VAR 0 6
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: CALL_OW 120
7797: GO 7750
7799: POP
7800: POP
// wait ( 0 0$10 ) ;
7801: LD_INT 350
7803: PPUSH
7804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7808: LD_VAR 0 3
7812: PPUSH
7813: LD_INT 95
7815: PUSH
7816: LD_INT 9
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: NOT
7828: IFFALSE 7735
// end ; p := rand ( 1 , 2 ) ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 1
7837: PPUSH
7838: LD_INT 2
7840: PPUSH
7841: CALL_OW 12
7845: ST_TO_ADDR
// case p of 1 :
7846: LD_VAR 0 4
7850: PUSH
7851: LD_INT 1
7853: DOUBLE
7854: EQUAL
7855: IFTRUE 7859
7857: GO 7913
7859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_INT 159
7867: PUSH
7868: LD_INT 71
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 152
7877: PUSH
7878: LD_INT 99
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 107
7887: PUSH
7888: LD_INT 119
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 104
7897: PUSH
7898: LD_INT 127
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 7976
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7975
7921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_INT 116
7929: PUSH
7930: LD_INT 36
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 91
7939: PUSH
7940: LD_INT 52
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 53
7949: PUSH
7950: LD_INT 67
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 58
7959: PUSH
7960: LD_INT 107
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7976: LD_INT 22
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: PUSH
7991: LD_VAR 0 4
7995: PUSH
7996: LD_INT 1
7998: GREATER
7999: AND
8000: IFFALSE 8031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8002: LD_ADDR_VAR 0 2
8006: PUSH
8007: LD_INT 116
8009: PUSH
8010: LD_INT 36
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 91
8019: PUSH
8020: LD_INT 52
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8031: LD_INT 35
8033: PPUSH
8034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_VAR 0 2
8047: PPUSH
8048: CALL 80862 0 2
8052: NOT
8053: IFFALSE 8031
// end ; end_of_file
8055: LD_VAR 0 1
8059: RET
// export function RemoveLegion ; var i ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8064: LD_ADDR_VAR 0 2
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 8
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8098
// RemoveUnit ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 64
8096: GO 8084
8098: POP
8099: POP
// end ;
8100: LD_VAR 0 1
8104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
8114: PPUSH
8115: PPUSH
8116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 8
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 30
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8155: LD_ADDR_VAR 0 8
8159: PUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 30
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 6
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 30
8223: PUSH
8224: LD_INT 8
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8249: LD_ADDR_VAR 0 10
8253: PUSH
8254: LD_INT 22
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 32
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// uc_side := 8 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 8
8290: ST_TO_ADDR
// uc_nation := nation_arabian ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 2
8298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 38
8303: PUSH
8304: LD_INT 5
8306: PUSH
8307: LD_INT 6
8309: PUSH
8310: LD_INT 7
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// legion_blist := [ ] ;
8324: LD_ADDR_EXP 40
8328: PUSH
8329: EMPTY
8330: ST_TO_ADDR
// legion_vlist := [ ] ;
8331: LD_ADDR_EXP 41
8335: PUSH
8336: EMPTY
8337: ST_TO_ADDR
// legion_force := [ ] ;
8338: LD_ADDR_EXP 37
8342: PUSH
8343: EMPTY
8344: ST_TO_ADDR
// legion_enemy := - 1 ;
8345: LD_ADDR_EXP 42
8349: PUSH
8350: LD_INT 1
8352: NEG
8353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8354: LD_VAR 0 6
8358: PPUSH
8359: CALL_OW 274
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: LD_INT 10000
8369: PPUSH
8370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8374: LD_VAR 0 6
8378: PPUSH
8379: CALL_OW 274
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: LD_INT 1000
8389: PPUSH
8390: CALL_OW 277
// for i = 1 to l_towers do
8394: LD_ADDR_VAR 0 3
8398: PUSH
8399: DOUBLE
8400: LD_INT 1
8402: DEC
8403: ST_TO_ADDR
8404: LD_VAR 0 10
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8412: LD_INT 0
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_EXP 38
8422: PPUSH
8423: CALL_OW 380
// un := CreateHuman ;
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 10
8446: PUSH
8447: LD_VAR 0 3
8451: ARRAY
8452: PPUSH
8453: CALL_OW 52
// end ;
8457: GO 8409
8459: POP
8460: POP
// for i = 1 to 4 do
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_INT 4
8473: PUSH
8474: FOR_TO
8475: IFFALSE 8568
// for p = 1 to 2 do
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: DOUBLE
8483: LD_INT 1
8485: DEC
8486: ST_TO_ADDR
8487: LD_INT 2
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8493: LD_INT 0
8495: PPUSH
8496: LD_INT 8
8498: PPUSH
8499: LD_EXP 38
8503: PPUSH
8504: CALL_OW 380
// un := CreateHuman ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: CALL_OW 44
8517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8518: LD_VAR 0 2
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 30
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PUSH
8552: LD_VAR 0 7
8556: ARRAY
8557: PPUSH
8558: CALL_OW 52
// end ;
8562: GO 8490
8564: POP
8565: POP
8566: GO 8474
8568: POP
8569: POP
// for i = 1 to 4 do
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 4
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8586: LD_INT 0
8588: PPUSH
8589: LD_INT 4
8591: PPUSH
8592: LD_EXP 38
8596: PPUSH
8597: CALL_OW 380
// un := CreateHuman ;
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: CALL_OW 44
8610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: CALL_OW 52
// end ;
8625: GO 8583
8627: POP
8628: POP
// for i = 1 to 4 do
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: DOUBLE
8635: LD_INT 1
8637: DEC
8638: ST_TO_ADDR
8639: LD_INT 4
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8645: LD_INT 0
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: LD_EXP 38
8655: PPUSH
8656: CALL_OW 380
// un := CreateHuman ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: CALL_OW 44
8669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 8
8679: PPUSH
8680: CALL_OW 52
// end ;
8684: GO 8642
8686: POP
8687: POP
// for i = 1 to 3 do
8688: LD_ADDR_VAR 0 3
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 3
8700: PUSH
8701: FOR_TO
8702: IFFALSE 8745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8704: LD_INT 0
8706: PPUSH
8707: LD_INT 2
8709: PPUSH
8710: LD_EXP 38
8714: PPUSH
8715: CALL_OW 380
// un := CreateHuman ;
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: CALL_OW 44
8728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: CALL_OW 52
// end ;
8743: GO 8701
8745: POP
8746: POP
// for i = 1 to 3 do
8747: LD_ADDR_VAR 0 3
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 3
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8871
// begin vc_chassis := ar_half_tracked ;
8763: LD_ADDR_OWVAR 37
8767: PUSH
8768: LD_INT 14
8770: ST_TO_ADDR
// vc_engine := engine_siberite ;
8771: LD_ADDR_OWVAR 39
8775: PUSH
8776: LD_INT 3
8778: ST_TO_ADDR
// vc_control := control_manual ;
8779: LD_ADDR_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8787: LD_ADDR_OWVAR 40
8791: PUSH
8792: LD_INT 31
8794: ST_TO_ADDR
// veh := CreateVehicle ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: CALL_OW 45
8804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8805: LD_VAR 0 5
8809: PPUSH
8810: LD_INT 212
8812: PPUSH
8813: LD_INT 135
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 0
8821: PPUSH
8822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8826: LD_INT 0
8828: PPUSH
8829: LD_INT 3
8831: PPUSH
8832: LD_EXP 38
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: PPUSH
8841: CALL_OW 380
// un := CreateHuman ;
8845: LD_ADDR_VAR 0 2
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_VAR 0 5
8864: PPUSH
8865: CALL_OW 52
// end ;
8869: GO 8760
8871: POP
8872: POP
// PrepareSoldier ( false , 8 ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 8
8878: PPUSH
8879: CALL_OW 381
// hc_class := class_sniper ;
8883: LD_ADDR_OWVAR 28
8887: PUSH
8888: LD_INT 5
8890: ST_TO_ADDR
// un := CreateHuman ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: CALL_OW 44
8900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_INT 4
8908: PPUSH
8909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8913: LD_VAR 0 2
8917: PPUSH
8918: LD_INT 136
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 428
8928: PPUSH
8929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8933: LD_INT 198
8935: PPUSH
8936: LD_INT 94
8938: PPUSH
8939: LD_INT 8
8941: PPUSH
8942: LD_INT 10
8944: PPUSH
8945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8949: LD_INT 167
8951: PPUSH
8952: LD_INT 130
8954: PPUSH
8955: LD_INT 8
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_INT 24
8972: PPUSH
8973: LD_INT 0
8975: PPUSH
8976: CALL_OW 517
8980: ST_TO_ADDR
// legion_mines := [ ] ;
8981: LD_ADDR_EXP 39
8985: PUSH
8986: EMPTY
8987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8988: LD_ADDR_VAR 0 3
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 1
9005: ARRAY
9006: PUSH
9007: FOR_TO
9008: IFFALSE 9110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9010: LD_VAR 0 4
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 2
9032: ARRAY
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PPUSH
9040: LD_INT 8
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9050: LD_ADDR_EXP 39
9054: PUSH
9055: LD_EXP 39
9059: PPUSH
9060: LD_EXP 39
9064: PUSH
9065: LD_INT 1
9067: PLUS
9068: PPUSH
9069: LD_VAR 0 4
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 4
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 3
9097: ARRAY
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// end ;
9108: GO 9007
9110: POP
9111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9112: LD_ADDR_EXP 41
9116: PUSH
9117: LD_INT 13
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: ST_TO_ADDR
// end ;
9135: LD_VAR 0 1
9139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9140: LD_EXP 39
9144: PUSH
9145: LD_INT 24
9147: PPUSH
9148: LD_INT 22
9150: PUSH
9151: LD_OWVAR 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 70
9164: AND
9165: IFFALSE 9332
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin enable ;
9174: ENABLE
// for i := legion_mines downto 1 do
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: DOUBLE
9181: LD_EXP 39
9185: INC
9186: ST_TO_ADDR
9187: LD_INT 1
9189: PUSH
9190: FOR_DOWNTO
9191: IFFALSE 9330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: LD_EXP 39
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PUSH
9209: LD_INT 1
9211: ARRAY
9212: PPUSH
9213: LD_EXP 39
9217: PUSH
9218: LD_VAR 0 1
9222: ARRAY
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: CALL_OW 428
9232: ST_TO_ADDR
// if un then
9233: LD_VAR 0 2
9237: IFFALSE 9328
// if GetSide ( un ) = legion_enemy then
9239: LD_VAR 0 2
9243: PPUSH
9244: CALL_OW 255
9248: PUSH
9249: LD_EXP 42
9253: EQUAL
9254: IFFALSE 9328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9256: LD_EXP 39
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_EXP 39
9275: PUSH
9276: LD_VAR 0 1
9280: ARRAY
9281: PUSH
9282: LD_INT 2
9284: ARRAY
9285: PPUSH
9286: LD_INT 8
9288: PPUSH
9289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9293: LD_ADDR_EXP 39
9297: PUSH
9298: LD_EXP 39
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 3
9312: ST_TO_ADDR
// if not mine_vulc then
9313: LD_EXP 13
9317: NOT
9318: IFFALSE 9328
// mine_vulc := true ;
9320: LD_ADDR_EXP 13
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// end ; end ;
9328: GO 9190
9330: POP
9331: POP
// end ;
9332: PPOPN 2
9334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9335: LD_OWVAR 1
9339: PUSH
9340: LD_INT 52500
9342: PUSH
9343: LD_INT 46200
9345: PUSH
9346: LD_INT 42000
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_OWVAR 67
9358: ARRAY
9359: GREATEREQUAL
9360: IFFALSE 9538
9362: GO 9364
9364: DISABLE
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 469
9381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9382: LD_VAR 0 1
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PUSH
9391: LD_INT 112
9393: EQUAL
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: LD_INT 2
9402: ARRAY
9403: PUSH
9404: LD_INT 67
9406: EQUAL
9407: AND
9408: IFFALSE 9538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 8
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 69
9443: ST_TO_ADDR
// if not un then
9444: LD_VAR 0 2
9448: NOT
9449: IFFALSE 9453
// exit ;
9451: GO 9538
// un := un [ 1 ] ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: ST_TO_ADDR
// if IsInUnit ( un ) then
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 310
9476: IFFALSE 9487
// ComExitBuilding ( un ) ;
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 1
9499: ARRAY
9500: PPUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 2
9508: ARRAY
9509: PPUSH
9510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_INT 207
9521: PPUSH
9522: LD_INT 123
9524: PPUSH
9525: CALL_OW 171
// AddComUnload ( un ) ;
9529: LD_VAR 0 2
9533: PPUSH
9534: CALL_OW 219
// end ; end ;
9538: PPOPN 2
9540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9541: LD_INT 22
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 11145
9561: GO 9563
9563: DISABLE
9564: LD_INT 0
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin enable ;
9583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9584: LD_ADDR_VAR 0 8
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 8
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 30
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9622: LD_ADDR_VAR 0 9
9626: PUSH
9627: LD_INT 22
9629: PUSH
9630: LD_INT 8
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 30
9639: PUSH
9640: LD_INT 3
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9660: LD_ADDR_VAR 0 10
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_INT 8
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 6
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 8
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 32
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9750: LD_ADDR_VAR 0 16
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 8
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 25
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9784: LD_ADDR_VAR 0 15
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 8
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9818: LD_ADDR_VAR 0 14
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9852: LD_ADDR_VAR 0 13
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 8
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// if l_eng then
9886: LD_VAR 0 16
9890: IFFALSE 10308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9892: LD_ADDR_VAR 0 5
9896: PUSH
9897: LD_INT 25
9899: PPUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PPUSH
9924: CALL_OW 70
9928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9929: LD_VAR 0 5
9933: PPUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 1000
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: LD_INT 0
9958: GREATER
9959: IFFALSE 10093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_VAR 0 5
9970: PPUSH
9971: LD_INT 3
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 1000
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 72
9992: ST_TO_ADDR
// for i = 1 to l_eng do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 16
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10089
// if IsInUnit ( l_eng [ i ] ) then
10011: LD_VAR 0 16
10015: PUSH
10016: LD_VAR 0 2
10020: ARRAY
10021: PPUSH
10022: CALL_OW 310
10026: IFFALSE 10045
// ComExitBuilding ( l_eng [ i ] ) else
10028: LD_VAR 0 16
10032: PUSH
10033: LD_VAR 0 2
10037: ARRAY
10038: PPUSH
10039: CALL_OW 122
10043: GO 10087
// if not HasTask ( l_eng [ i ] ) then
10045: LD_VAR 0 16
10049: PUSH
10050: LD_VAR 0 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 314
10060: NOT
10061: IFFALSE 10087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10063: LD_VAR 0 16
10067: PUSH
10068: LD_VAR 0 2
10072: ARRAY
10073: PPUSH
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 130
10087: GO 10008
10089: POP
10090: POP
// end else
10091: GO 10308
// begin if legion_blist > 0 then
10093: LD_EXP 40
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10230
// begin for i = 1 to l_eng do
10103: LD_ADDR_VAR 0 2
10107: PUSH
10108: DOUBLE
10109: LD_INT 1
10111: DEC
10112: ST_TO_ADDR
10113: LD_VAR 0 16
10117: PUSH
10118: FOR_TO
10119: IFFALSE 10226
// if IsInUnit ( l_eng [ i ] ) then
10121: LD_VAR 0 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 310
10136: IFFALSE 10155
// ComExitBuilding ( l_eng [ i ] ) else
10138: LD_VAR 0 16
10142: PUSH
10143: LD_VAR 0 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 122
10153: GO 10224
// if not HasTask ( l_eng [ i ] ) then
10155: LD_VAR 0 16
10159: PUSH
10160: LD_VAR 0 2
10164: ARRAY
10165: PPUSH
10166: CALL_OW 314
10170: NOT
10171: IFFALSE 10224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10173: LD_VAR 0 16
10177: PUSH
10178: LD_VAR 0 2
10182: ARRAY
10183: PPUSH
10184: LD_EXP 40
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_EXP 40
10197: PUSH
10198: LD_INT 2
10200: ARRAY
10201: PPUSH
10202: LD_EXP 40
10206: PUSH
10207: LD_INT 3
10209: ARRAY
10210: PPUSH
10211: LD_EXP 40
10215: PUSH
10216: LD_INT 4
10218: ARRAY
10219: PPUSH
10220: CALL_OW 145
10224: GO 10118
10226: POP
10227: POP
// end else
10228: GO 10308
// for i = 1 to l_eng do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 16
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10248: LD_VAR 0 16
10252: PUSH
10253: LD_VAR 0 2
10257: ARRAY
10258: PPUSH
10259: CALL_OW 310
10263: NOT
10264: PUSH
10265: LD_VAR 0 16
10269: PUSH
10270: LD_VAR 0 2
10274: ARRAY
10275: PPUSH
10276: CALL_OW 314
10280: NOT
10281: AND
10282: IFFALSE 10304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10284: LD_VAR 0 16
10288: PUSH
10289: LD_VAR 0 2
10293: ARRAY
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: CALL_OW 120
10304: GO 10245
10306: POP
10307: POP
// end ; end ; if l_factory then
10308: LD_VAR 0 9
10312: IFFALSE 10712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10314: LD_INT 22
10316: PUSH
10317: LD_INT 8
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 33
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 61
10339: PUSH
10340: EMPTY
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PUSH
10357: LD_INT 0
10359: GREATER
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 31
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: LD_INT 0
10392: GREATER
10393: AND
10394: IFFALSE 10514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 8
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 33
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 61
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_INT 22
10445: PUSH
10446: LD_INT 8
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: PUSH
10472: LD_INT 1
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 31
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10514: LD_EXP 41
10518: PUSH
10519: LD_INT 0
10521: GREATER
10522: PUSH
10523: LD_VAR 0 9
10527: PPUSH
10528: CALL_OW 461
10532: PUSH
10533: LD_INT 2
10535: EQUAL
10536: AND
10537: IFFALSE 10622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10539: LD_VAR 0 9
10543: PPUSH
10544: LD_EXP 41
10548: PUSH
10549: LD_INT 1
10551: ARRAY
10552: PPUSH
10553: LD_EXP 41
10557: PUSH
10558: LD_INT 2
10560: ARRAY
10561: PPUSH
10562: LD_EXP 41
10566: PUSH
10567: LD_INT 3
10569: ARRAY
10570: PPUSH
10571: LD_EXP 41
10575: PUSH
10576: LD_INT 4
10578: ARRAY
10579: PPUSH
10580: CALL_OW 125
// for i = 1 to 4 do
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_INT 4
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10600: LD_ADDR_EXP 41
10604: PUSH
10605: LD_EXP 41
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 3
10617: ST_TO_ADDR
10618: GO 10597
10620: POP
10621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 0
10644: GREATER
10645: PUSH
10646: LD_VAR 0 9
10650: PPUSH
10651: CALL_OW 461
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10662: LD_VAR 0 11
10666: PPUSH
10667: LD_INT 35
10669: PUSH
10670: LD_INT 0
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: PUSH
10682: LD_INT 1
10684: ARRAY
10685: PPUSH
10686: LD_INT 28
10688: PUSH
10689: LD_INT 27
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: CALL_OW 12
10706: ARRAY
10707: PPUSH
10708: CALL_OW 148
// end ; if legion_enemy > 0 then
10712: LD_EXP 42
10716: PUSH
10717: LD_INT 0
10719: GREATER
10720: IFFALSE 11003
// begin if tick mod 11 11$00 = 0 then
10722: LD_OWVAR 1
10726: PUSH
10727: LD_INT 23100
10729: MOD
10730: PUSH
10731: LD_INT 0
10733: EQUAL
10734: IFFALSE 10984
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10736: LD_ADDR_EXP 41
10740: PUSH
10741: LD_EXP 41
10745: PUSH
10746: LD_INT 13
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: ADD
10760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10761: LD_ADDR_EXP 41
10765: PUSH
10766: LD_EXP 41
10770: PUSH
10771: LD_INT 28
10773: PUSH
10774: LD_INT 27
10776: PUSH
10777: LD_INT 29
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 3
10790: PPUSH
10791: CALL_OW 12
10795: ARRAY
10796: ADD
10797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10798: LD_ADDR_EXP 41
10802: PUSH
10803: LD_EXP 41
10807: PUSH
10808: LD_INT 13
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: ADD
10822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10823: LD_ADDR_EXP 41
10827: PUSH
10828: LD_EXP 41
10832: PUSH
10833: LD_INT 28
10835: PUSH
10836: LD_INT 27
10838: PUSH
10839: LD_INT 29
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 12
10857: ARRAY
10858: ADD
10859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10860: LD_ADDR_EXP 41
10864: PUSH
10865: LD_EXP 41
10869: PUSH
10870: LD_INT 13
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ADD
10884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10885: LD_ADDR_EXP 41
10889: PUSH
10890: LD_EXP 41
10894: PUSH
10895: LD_INT 28
10897: PUSH
10898: LD_INT 92
10900: PUSH
10901: LD_INT 29
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 12
10919: ARRAY
10920: ADD
10921: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10922: LD_ADDR_EXP 41
10926: PUSH
10927: LD_EXP 41
10931: PUSH
10932: LD_INT 13
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: ADD
10946: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10947: LD_ADDR_EXP 41
10951: PUSH
10952: LD_EXP 41
10956: PUSH
10957: LD_INT 28
10959: PUSH
10960: LD_INT 27
10962: PUSH
10963: LD_INT 29
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 3
10976: PPUSH
10977: CALL_OW 12
10981: ARRAY
10982: ADD
10983: ST_TO_ADDR
// end ; if legion_force >= 8 then
10984: LD_EXP 37
10988: PUSH
10989: LD_INT 8
10991: GREATEREQUAL
10992: IFFALSE 11003
// RaiseSailEvent ( event_legion_attack ) ;
10994: LD_EXP 21
10998: PPUSH
10999: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11003: LD_INT 22
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11145
// begin if l_cargo = false then
11033: LD_VAR 0 17
11037: PUSH
11038: LD_INT 0
11040: EQUAL
11041: IFFALSE 11077
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11043: LD_ADDR_VAR 0 17
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 8
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 32
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// if l_cargo then
11077: LD_VAR 0 17
11081: IFFALSE 11145
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11083: LD_ADDR_VAR 0 7
11087: PUSH
11088: LD_INT 14
11090: PPUSH
11091: CALL_OW 435
11095: ST_TO_ADDR
// if cr > 0 then
11096: LD_VAR 0 7
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11145
// if not HasTask ( l_cargo ) then
11106: LD_VAR 0 17
11110: PPUSH
11111: CALL_OW 314
11115: NOT
11116: IFFALSE 11145
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11118: LD_VAR 0 17
11122: PPUSH
11123: LD_VAR 0 7
11127: PUSH
11128: LD_INT 1
11130: ARRAY
11131: PPUSH
11132: LD_VAR 0 7
11136: PUSH
11137: LD_INT 2
11139: ARRAY
11140: PPUSH
11141: CALL_OW 117
// end ; end ; end ;
11145: PPOPN 17
11147: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11148: LD_OWVAR 67
11152: PUSH
11153: LD_INT 1
11155: GREATER
11156: IFFALSE 11361
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11167: LD_INT 35
11169: PPUSH
11170: LD_INT 12635
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 8
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// p := 1 ;
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11224: LD_ADDR_VAR 0 3
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 139
11234: PUSH
11235: LD_INT 69
11237: PUSH
11238: LD_INT 13
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
// for i = 1 to 2 do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_INT 2
11259: PUSH
11260: FOR_TO
11261: IFFALSE 11359
// begin if IsInUnit ( sci [ i ] ) then
11263: LD_VAR 0 2
11267: PUSH
11268: LD_VAR 0 1
11272: ARRAY
11273: PPUSH
11274: CALL_OW 310
11278: IFFALSE 11295
// ComExitBuilding ( sci [ i ] ) ;
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 122
// Wait ( 0 0$03 ) ;
11295: LD_INT 105
11297: PPUSH
11298: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11302: LD_VAR 0 2
11306: PUSH
11307: LD_VAR 0 1
11311: ARRAY
11312: PPUSH
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 4
11322: ARRAY
11323: PPUSH
11324: LD_VAR 0 3
11328: PUSH
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: ARRAY
11338: PPUSH
11339: CALL_OW 158
// p := p + 2 ;
11343: LD_ADDR_VAR 0 4
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 2
11355: PLUS
11356: ST_TO_ADDR
// end ;
11357: GO 11260
11359: POP
11360: POP
// end ;
11361: PPOPN 4
11363: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11364: LD_INT 14
11366: PPUSH
11367: CALL_OW 435
11371: PUSH
11372: LD_INT 20
11374: LESS
11375: IFFALSE 11402
11377: GO 11379
11379: DISABLE
// begin enable ;
11380: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 5
11386: PPUSH
11387: CALL_OW 12
11391: PPUSH
11392: LD_INT 14
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 55
// end ;
11402: END
// export function LegionAttack ( ) ; var path , units ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
// units := legion_force ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_EXP 37
11417: ST_TO_ADDR
// legion_force := [ ] ;
11418: LD_ADDR_EXP 37
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// case legion_enemy of 1 :
11425: LD_EXP 42
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11481
11438: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_INT 174
11446: PUSH
11447: LD_INT 135
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 153
11456: PUSH
11457: LD_INT 146
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 118
11466: PUSH
11467: LD_INT 122
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 11584
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11532
11489: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 164
11497: PUSH
11498: LD_INT 73
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 130
11507: PUSH
11508: LD_INT 48
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 96
11517: PUSH
11518: LD_INT 48
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 11584
11532: LD_INT 7
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11583
11540: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11541: LD_ADDR_VAR 0 2
11545: PUSH
11546: LD_INT 174
11548: PUSH
11549: LD_INT 135
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 153
11558: PUSH
11559: LD_INT 146
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 118
11568: PUSH
11569: LD_INT 122
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: ST_TO_ADDR
11581: GO 11584
11583: POP
// repeat wait ( 0 0$1 ) ;
11584: LD_INT 35
11586: PPUSH
11587: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_VAR 0 2
11600: PPUSH
11601: CALL 80862 0 2
11605: NOT
11606: IFFALSE 11584
// end ; end_of_file
11608: LD_VAR 0 1
11612: RET
// export function Action ; var un , gamemode , speaker ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
// if debug then
11619: LD_EXP 15
11623: IFFALSE 11650
// begin Difficulty := 2 ;
11625: LD_ADDR_OWVAR 67
11629: PUSH
11630: LD_INT 2
11632: ST_TO_ADDR
// gamemode := 3 ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 3
11640: ST_TO_ADDR
// FogOff ( 7 ) ;
11641: LD_INT 7
11643: PPUSH
11644: CALL_OW 344
// end else
11648: GO 11676
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11650: LD_ADDR_OWVAR 67
11654: PUSH
11655: LD_INT 0
11657: PPUSH
11658: CALL_OW 426
11662: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 426
11675: ST_TO_ADDR
// end ; if gamemode = 1 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: EQUAL
11684: IFFALSE 11708
// begin your_side := 1 ;
11686: LD_ADDR_OWVAR 2
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// legion_enemy := 1 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// PrepareAmerican ;
11702: CALL 261 0 0
// end else
11706: GO 11760
// if gamemode = 2 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 2
11715: EQUAL
11716: IFFALSE 11740
// begin your_side := 2 ;
11718: LD_ADDR_OWVAR 2
11722: PUSH
11723: LD_INT 2
11725: ST_TO_ADDR
// legion_enemy := 2 ;
11726: LD_ADDR_EXP 42
11730: PUSH
11731: LD_INT 2
11733: ST_TO_ADDR
// PrepareArabian ;
11734: CALL 19086 0 0
// end else
11738: GO 11760
// begin your_side := 7 ;
11740: LD_ADDR_OWVAR 2
11744: PUSH
11745: LD_INT 7
11747: ST_TO_ADDR
// legion_enemy := 7 ;
11748: LD_ADDR_EXP 42
11752: PUSH
11753: LD_INT 7
11755: ST_TO_ADDR
// PrepareAlliance ;
11756: CALL 16230 0 0
// end ; if your_side = 1 then
11760: LD_OWVAR 2
11764: PUSH
11765: LD_INT 1
11767: EQUAL
11768: IFFALSE 12352
// begin Query ( QVul4 ) ;
11770: LD_STRING QVul4
11772: PPUSH
11773: CALL_OW 97
// InGameOn ;
11777: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11781: LD_INT 8
11783: PPUSH
11784: LD_INT 5
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: LD_INT 12
11792: PPUSH
11793: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11797: LD_INT 8
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11810: LD_INT 98
11812: PPUSH
11813: LD_INT 148
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 2
11821: PPUSH
11822: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11826: LD_INT 98
11828: PPUSH
11829: LD_INT 148
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11839: LD_INT 8
11841: PPUSH
11842: LD_INT 5
11844: PPUSH
11845: CALL_OW 86
// uc_side := 4 ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_INT 4
11856: ST_TO_ADDR
// uc_nation := 1 ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// hc_importance := 0 ;
11865: LD_ADDR_OWVAR 32
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// hc_name :=  ;
11873: LD_ADDR_OWVAR 26
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 3
11886: PPUSH
11887: LD_EXP 26
11891: PPUSH
11892: CALL_OW 380
// un := CreateHuman ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: CALL_OW 44
11905: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: LD_INT 19
11913: PPUSH
11914: LD_INT 23
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL_OW 48
// hc_name := Stuart Carey ;
11924: LD_ADDR_OWVAR 26
11928: PUSH
11929: LD_STRING Stuart Carey
11931: ST_TO_ADDR
// hc_class := 1 ;
11932: LD_ADDR_OWVAR 28
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_gallery := vulcano ;
11940: LD_ADDR_OWVAR 33
11944: PUSH
11945: LD_STRING vulcano
11947: ST_TO_ADDR
// hc_face_number := 1 ;
11948: LD_ADDR_OWVAR 34
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// us_guy := CreateHuman ;
11956: LD_ADDR_EXP 27
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// InitHc ;
11966: CALL_OW 19
// if rand ( 0 , 1 ) then
11970: LD_INT 0
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 12
11980: IFFALSE 11997
// PrepareHuman ( sex_male , 3 , 6 ) else
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 3
11987: PPUSH
11988: LD_INT 6
11990: PPUSH
11991: CALL_OW 380
11995: GO 12010
// PrepareHuman ( sex_female , 4 , 8 ) ;
11997: LD_INT 2
11999: PPUSH
12000: LD_INT 4
12002: PPUSH
12003: LD_INT 8
12005: PPUSH
12006: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_INT 12
12017: PPUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12025: LD_EXP 24
12029: PPUSH
12030: LD_VAR 0 2
12034: PPUSH
12035: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12039: LD_INT 105
12041: PPUSH
12042: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12046: LD_INT 4
12048: PPUSH
12049: LD_EXP 24
12053: PPUSH
12054: CALL_OW 292
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 12
12066: PPUSH
12067: LD_INT 10
12069: PPUSH
12070: CALL_OW 307
12074: OR
12075: IFFALSE 12039
// ComTurnUnit ( un , us_commander ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: LD_EXP 24
12086: PPUSH
12087: CALL_OW 119
// if GetSex ( un ) = sex_male then
12091: LD_VAR 0 2
12095: PPUSH
12096: CALL_OW 258
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: IFFALSE 12187
// begin Say ( un , VD-un1 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un1
12113: PPUSH
12114: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12118: LD_EXP 24
12122: PPUSH
12123: LD_STRING VDc-1
12125: PPUSH
12126: CALL_OW 88
// Say ( un , VD-un2 ) ;
12130: LD_VAR 0 2
12134: PPUSH
12135: LD_STRING VD-un2
12137: PPUSH
12138: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12142: LD_EXP 24
12146: PPUSH
12147: LD_STRING VDc-2
12149: PPUSH
12150: CALL_OW 88
// Say ( un , VD-un3 ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_STRING VD-un3
12161: PPUSH
12162: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12166: LD_INT 7
12168: PPUSH
12169: CALL_OW 67
// Say ( un , VD-un4 ) ;
12173: LD_VAR 0 2
12177: PPUSH
12178: LD_STRING VD-un4
12180: PPUSH
12181: CALL_OW 88
// end else
12185: GO 12266
// begin Say ( un , VD-unf1 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf1
12194: PPUSH
12195: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12199: LD_EXP 24
12203: PPUSH
12204: LD_STRING VDc-1
12206: PPUSH
12207: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12211: LD_VAR 0 2
12215: PPUSH
12216: LD_STRING VD-unf2
12218: PPUSH
12219: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12223: LD_EXP 24
12227: PPUSH
12228: LD_STRING VDc-2
12230: PPUSH
12231: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_STRING VD-unf3
12242: PPUSH
12243: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12247: LD_INT 7
12249: PPUSH
12250: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12254: LD_VAR 0 2
12258: PPUSH
12259: LD_STRING VD-unf4
12261: PPUSH
12262: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12266: LD_VAR 0 2
12270: PPUSH
12271: LD_INT 2
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12281: LD_EXP 24
12285: PPUSH
12286: LD_STRING VDc-3
12288: PPUSH
12289: CALL_OW 88
// InGameOff ;
12293: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12297: LD_STRING CVulc1
12299: PPUSH
12300: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12304: LD_INT 35
12306: PPUSH
12307: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12311: LD_VAR 0 2
12315: PPUSH
12316: CALL_OW 250
12320: PUSH
12321: LD_INT 2
12323: EQUAL
12324: PUSH
12325: LD_VAR 0 2
12329: PPUSH
12330: CALL_OW 251
12334: PUSH
12335: LD_INT 2
12337: EQUAL
12338: AND
12339: IFFALSE 12304
// RemoveUnit ( un ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: CALL_OW 64
// end else
12350: GO 12729
// if your_side = 2 then
12352: LD_OWVAR 2
12356: PUSH
12357: LD_INT 2
12359: EQUAL
12360: IFFALSE 12576
// begin CenterNowOnUnits ( player_commander ) ;
12362: LD_EXP 11
12366: PPUSH
12367: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 21
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 69
12404: PUSH
12405: LD_EXP 57
12409: DIFF
12410: ST_TO_ADDR
// if speaker then
12411: LD_VAR 0 4
12415: IFFALSE 12567
// begin InGameOn ;
12417: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12421: LD_EXP 57
12425: PPUSH
12426: LD_STRING VSd-1
12428: PPUSH
12429: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12433: LD_VAR 0 4
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PPUSH
12442: CALL_OW 258
12446: PUSH
12447: LD_INT 1
12449: EQUAL
12450: IFFALSE 12470
// Say ( speaker [ 1 ] , VAd-1 ) else
12452: LD_VAR 0 4
12456: PUSH
12457: LD_INT 1
12459: ARRAY
12460: PPUSH
12461: LD_STRING VAd-1
12463: PPUSH
12464: CALL_OW 88
12468: GO 12486
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12470: LD_VAR 0 4
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_STRING VAfd-1
12481: PPUSH
12482: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12486: LD_EXP 57
12490: PPUSH
12491: LD_STRING VSd-2
12493: PPUSH
12494: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12498: LD_VAR 0 4
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: CALL_OW 258
12511: PUSH
12512: LD_INT 1
12514: EQUAL
12515: IFFALSE 12535
// Say ( speaker [ 1 ] , VAd-2 ) else
12517: LD_VAR 0 4
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_STRING VAd-2
12528: PPUSH
12529: CALL_OW 88
12533: GO 12551
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12535: LD_VAR 0 4
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: PPUSH
12544: LD_STRING VAfd-2
12546: PPUSH
12547: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12551: LD_EXP 57
12555: PPUSH
12556: LD_STRING VSd-3
12558: PPUSH
12559: CALL_OW 88
// InGameOff ;
12563: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12567: LD_STRING CVulc5
12569: PPUSH
12570: CALL_OW 337
// end else
12574: GO 12729
// if your_side = 7 then
12576: LD_OWVAR 2
12580: PUSH
12581: LD_INT 7
12583: EQUAL
12584: IFFALSE 12729
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12586: LD_ADDR_VAR 0 4
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: PUSH
12620: LD_EXP 43
12624: DIFF
12625: ST_TO_ADDR
// if speaker then
12626: LD_VAR 0 4
12630: IFFALSE 12722
// begin CenterNowOnUnits ( al_commander ) ;
12632: LD_EXP 43
12636: PPUSH
12637: CALL_OW 87
// InGameOn ;
12641: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12645: LD_EXP 43
12649: PPUSH
12650: LD_STRING VPd-1
12652: PPUSH
12653: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12657: LD_VAR 0 4
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: CALL_OW 258
12670: IFFALSE 12690
// Say ( speaker [ 1 ] , VPpd-1 ) else
12672: LD_VAR 0 4
12676: PUSH
12677: LD_INT 1
12679: ARRAY
12680: PPUSH
12681: LD_STRING VPpd-1
12683: PPUSH
12684: CALL_OW 88
12688: GO 12706
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12690: LD_VAR 0 4
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_STRING VPpdf-1
12701: PPUSH
12702: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12706: LD_EXP 43
12710: PPUSH
12711: LD_STRING VPd-2
12713: PPUSH
12714: CALL_OW 88
// InGameOff ;
12718: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12722: LD_STRING CVulc7
12724: PPUSH
12725: CALL_OW 337
// end ; SaveForQuickRestart ;
12729: CALL_OW 22
// end ;
12733: LD_VAR 0 1
12737: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12738: LD_INT 22
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 30
12750: PUSH
12751: LD_INT 3
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PPUSH
12762: CALL_OW 69
12766: IFFALSE 12810
12768: GO 12770
12770: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12771: LD_STRING CVulc6
12773: PPUSH
12774: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12778: LD_INT 52500
12780: PUSH
12781: LD_INT 47250
12783: PUSH
12784: LD_INT 42000
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_OWVAR 67
12796: ARRAY
12797: PPUSH
12798: CALL_OW 67
// ru_can_attack := true ;
12802: LD_ADDR_EXP 3
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// end ;
12810: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12811: LD_INT 50
12813: PPUSH
12814: CALL_OW 255
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 2
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: OR
12870: IFFALSE 13104
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12878: LD_STRING CVulc2
12880: PPUSH
12881: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12885: LD_ADDR_VAR 0 1
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: PUSH
12919: LD_EXP 24
12923: DIFF
12924: ST_TO_ADDR
// DialogueOn ;
12925: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12929: LD_INT 10
12931: PPUSH
12932: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 258
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: IFFALSE 12973
// Say ( speaker [ 1 ] , VDb-1 ) else
12955: LD_VAR 0 1
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: LD_STRING VDb-1
12966: PPUSH
12967: CALL_OW 88
12971: GO 12989
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: LD_STRING VDbf-1
12984: PPUSH
12985: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12989: LD_INT 10
12991: PPUSH
12992: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12996: LD_VAR 0 1
13000: PUSH
13001: LD_INT 1
13003: ARRAY
13004: PPUSH
13005: CALL_OW 258
13009: PUSH
13010: LD_INT 1
13012: EQUAL
13013: IFFALSE 13033
// Say ( speaker [ 1 ] , VDb-2 ) else
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 1
13022: ARRAY
13023: PPUSH
13024: LD_STRING VDb-2
13026: PPUSH
13027: CALL_OW 88
13031: GO 13049
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: LD_STRING VDbf-2
13044: PPUSH
13045: CALL_OW 88
// DWait ( 0 0$01 ) ;
13049: LD_INT 35
13051: PPUSH
13052: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13056: LD_EXP 24
13060: PPUSH
13061: LD_STRING VDb-com1
13063: PPUSH
13064: CALL_OW 88
// DialogueOff ;
13068: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13072: LD_INT 44100
13074: PUSH
13075: LD_INT 36750
13077: PUSH
13078: LD_INT 31500
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 67
// ru_can_attack := true ;
13096: LD_ADDR_EXP 3
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// end ;
13104: PPOPN 1
13106: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13107: LD_INT 22
13109: PUSH
13110: LD_INT 7
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 30
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: IFFALSE 13172
13137: GO 13139
13139: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13140: LD_INT 42000
13142: PUSH
13143: LD_INT 34650
13145: PUSH
13146: LD_INT 29400
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_OWVAR 67
13158: ARRAY
13159: PPUSH
13160: CALL_OW 67
// ru_can_attack := true ;
13164: LD_ADDR_EXP 3
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// end ;
13172: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13173: LD_INT 58
13175: PPUSH
13176: CALL_OW 255
13180: PUSH
13181: LD_INT 1
13183: EQUAL
13184: IFFALSE 13391
13186: GO 13188
13188: DISABLE
13189: LD_INT 0
13191: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 1
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 25
13209: PUSH
13210: LD_INT 2
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// DialogueOn ;
13226: CALL_OW 6
// if speaker then
13230: LD_VAR 0 1
13234: IFFALSE 13289
// if GetSex ( speaker [ 1 ] ) = sex_male then
13236: LD_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( speaker [ 1 ] , VDe-1 ) else
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING VDe-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( speaker [ 1 ] , VDef-1 ) ;
13273: LD_VAR 0 1
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING VDef-1
13284: PPUSH
13285: CALL_OW 88
// case Query ( SibNote ) of 1 :
13289: LD_STRING SibNote
13291: PPUSH
13292: CALL_OW 97
13296: PUSH
13297: LD_INT 1
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13308
13305: POP
// ; end ;
13306: GO 13309
13308: POP
// if speaker then
13309: LD_VAR 0 1
13313: IFFALSE 13368
// if GetSex ( speaker [ 1 ] ) = sex_male then
13315: LD_VAR 0 1
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: CALL_OW 258
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: IFFALSE 13352
// Say ( speaker [ 1 ] , VDe-2 ) else
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: LD_STRING VDe-2
13345: PPUSH
13346: CALL_OW 88
13350: GO 13368
// Say ( speaker [ 1 ] , VDef-2 ) ;
13352: LD_VAR 0 1
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: LD_STRING VDef-2
13363: PPUSH
13364: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13368: LD_EXP 24
13372: PPUSH
13373: LD_STRING VDc-4
13375: PPUSH
13376: CALL_OW 88
// DialogueOff ;
13380: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13384: LD_STRING CVulc3
13386: PPUSH
13387: CALL_OW 337
// end ;
13391: PPOPN 1
13393: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13394: LD_OWVAR 2
13398: PUSH
13399: LD_INT 1
13401: EQUAL
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: PUSH
13432: LD_INT 0
13434: GREATER
13435: AND
13436: IFFALSE 13882
13438: GO 13440
13440: DISABLE
13441: LD_INT 0
13443: PPUSH
13444: PPUSH
13445: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13446: LD_INT 245
13448: PPUSH
13449: LD_INT 1295
13451: PPUSH
13452: CALL_OW 12
13456: PPUSH
13457: CALL_OW 67
// DialogueOn ;
13461: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13465: LD_EXP 27
13469: PPUSH
13470: LD_STRING VDG-1
13472: PPUSH
13473: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13477: LD_EXP 24
13481: PPUSH
13482: LD_STRING VDc-5
13484: PPUSH
13485: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13489: LD_EXP 27
13493: PPUSH
13494: LD_STRING VDG-2
13496: PPUSH
13497: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13501: LD_EXP 24
13505: PPUSH
13506: LD_STRING VDc-6
13508: PPUSH
13509: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13513: LD_EXP 24
13517: PPUSH
13518: LD_STRING VDc-6a
13520: PPUSH
13521: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13525: LD_EXP 27
13529: PPUSH
13530: LD_STRING VDG-3
13532: PPUSH
13533: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13537: LD_EXP 24
13541: PPUSH
13542: LD_STRING VDc-7
13544: PPUSH
13545: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13549: LD_EXP 27
13553: PPUSH
13554: LD_STRING VDG-4
13556: PPUSH
13557: CALL_OW 94
// DialogueOff ;
13561: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13565: LD_STRING CVulc4
13567: PPUSH
13568: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13572: LD_INT 18900
13574: PUSH
13575: LD_INT 21000
13577: PUSH
13578: LD_INT 23100
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: LD_OWVAR 67
13590: ARRAY
13591: PPUSH
13592: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13596: LD_ADDR_VAR 0 1
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 6
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: LD_OWVAR 67
13624: ARRAY
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13871
// begin uc_side := 1 ;
13629: LD_ADDR_OWVAR 20
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// uc_nation := 1 ;
13637: LD_ADDR_OWVAR 21
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13645: LD_INT 0
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: LD_INT 4
13653: PPUSH
13654: CALL_OW 12
13658: PPUSH
13659: LD_EXP 26
13663: PPUSH
13664: CALL_OW 380
// un := CreateHuman ;
13668: LD_ADDR_VAR 0 2
13672: PUSH
13673: CALL_OW 44
13677: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_INT 2
13685: PPUSH
13686: CALL_OW 233
// if GetClass ( un ) = 3 then
13690: LD_VAR 0 2
13694: PPUSH
13695: CALL_OW 257
13699: PUSH
13700: LD_INT 3
13702: EQUAL
13703: IFFALSE 13854
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13705: LD_ADDR_OWVAR 37
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 2
13727: MOD
13728: ARRAY
13729: ST_TO_ADDR
// vc_engine := engine_combustion ;
13730: LD_ADDR_OWVAR 39
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// vc_control := control_manual ;
13738: LD_ADDR_OWVAR 38
13742: PUSH
13743: LD_INT 1
13745: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13746: LD_ADDR_OWVAR 40
13750: PUSH
13751: LD_INT 9
13753: PUSH
13754: LD_INT 9
13756: PUSH
13757: LD_INT 5
13759: PUSH
13760: LD_INT 11
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 4
13774: PPUSH
13775: CALL_OW 12
13779: ARRAY
13780: ST_TO_ADDR
// veh := CreateVehicle ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: CALL_OW 45
13790: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 2
13798: PPUSH
13799: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 77
13810: PPUSH
13811: LD_INT 88
13813: PPUSH
13814: CALL_OW 12
13818: PPUSH
13819: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 0
13833: PPUSH
13834: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: CALL_OW 52
// end else
13852: GO 13869
// PlaceUnitArea ( un , start_north , false ) ;
13854: LD_VAR 0 2
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13626
13871: POP
13872: POP
// CenterNowOnUnits ( un ) ;
13873: LD_VAR 0 2
13877: PPUSH
13878: CALL_OW 87
// end ;
13882: PPOPN 3
13884: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13885: LD_INT 21
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 70
13904: IFFALSE 14225
13906: GO 13908
13908: DISABLE
13909: LD_INT 0
13911: PPUSH
13912: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13913: LD_ADDR_VAR 0 2
13917: PUSH
13918: LD_INT 22
13920: PUSH
13921: LD_OWVAR 2
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 25
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PPUSH
13984: CALL_OW 69
13988: PUSH
13989: LD_EXP 11
13993: DIFF
13994: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: LD_INT 112
14007: PPUSH
14008: LD_INT 67
14010: PPUSH
14011: CALL_OW 73
14015: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 255
14025: PUSH
14026: LD_INT 7
14028: EQUAL
14029: IFFALSE 14072
// if GetSex ( un ) = sex_male then
14031: LD_VAR 0 1
14035: PPUSH
14036: CALL_OW 258
14040: PUSH
14041: LD_INT 1
14043: EQUAL
14044: IFFALSE 14060
// Say ( un , VD-find-al ) else
14046: LD_VAR 0 1
14050: PPUSH
14051: LD_STRING VD-find-al
14053: PPUSH
14054: CALL_OW 88
14058: GO 14072
// Say ( un , VD-find-al-f ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_STRING VD-find-al-f
14067: PPUSH
14068: CALL_OW 88
// if GetSide ( un ) = 2 then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 255
14081: PUSH
14082: LD_INT 2
14084: EQUAL
14085: IFFALSE 14128
// if GetSex ( un ) = sex_male then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 258
14096: PUSH
14097: LD_INT 1
14099: EQUAL
14100: IFFALSE 14116
// Say ( un , VD-find-ar ) else
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_STRING VD-find-ar
14109: PPUSH
14110: CALL_OW 88
14114: GO 14128
// Say ( un , VD-find-ar-f ) ;
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-ar-f
14123: PPUSH
14124: CALL_OW 88
// if GetSide ( un ) = 1 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 255
14137: PUSH
14138: LD_INT 1
14140: EQUAL
14141: IFFALSE 14208
// begin if GetSex ( un ) = sex_male then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 258
14152: PUSH
14153: LD_INT 1
14155: EQUAL
14156: IFFALSE 14184
// begin Say ( un , VD-find-us ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_STRING VD-find-us
14165: PPUSH
14166: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: LD_STRING VD-find-us2
14177: PPUSH
14178: CALL_OW 88
// end else
14182: GO 14208
// begin Say ( un , VD-find-us-f ) ;
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_STRING VD-find-us-f
14191: PPUSH
14192: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_STRING VD-find-us2-f
14203: PPUSH
14204: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14208: LD_INT 10
14210: PPUSH
14211: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14215: LD_INT 112
14217: PPUSH
14218: LD_INT 67
14220: PPUSH
14221: CALL_OW 86
// end ;
14225: PPOPN 2
14227: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14228: LD_EXP 8
14232: IFFALSE 14734
14234: GO 14236
14236: DISABLE
14237: LD_INT 0
14239: PPUSH
// begin if your_side = 1 then
14240: LD_OWVAR 2
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14429
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: PUSH
14284: LD_EXP 24
14288: DIFF
14289: ST_TO_ADDR
// if not speaker then
14290: LD_VAR 0 1
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PPUSH
14308: CALL_OW 258
14312: PUSH
14313: LD_INT 1
14315: EQUAL
14316: IFFALSE 14336
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14318: LD_VAR 0 1
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: LD_STRING VD-us-sci-art-1
14329: PPUSH
14330: CALL_OW 88
14334: GO 14352
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: LD_STRING VD-us-fsci-art-1
14347: PPUSH
14348: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14352: LD_EXP 24
14356: PPUSH
14357: LD_STRING VDc-art1
14359: PPUSH
14360: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14364: LD_VAR 0 1
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: CALL_OW 258
14377: PUSH
14378: LD_INT 1
14380: EQUAL
14381: IFFALSE 14401
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: LD_STRING VD-us-sci-art-2
14394: PPUSH
14395: CALL_OW 88
14399: GO 14417
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14401: LD_VAR 0 1
14405: PUSH
14406: LD_INT 1
14408: ARRAY
14409: PPUSH
14410: LD_STRING VD-us-fsci-art-2
14412: PPUSH
14413: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14417: LD_EXP 24
14421: PPUSH
14422: LD_STRING VDc-art2
14424: PPUSH
14425: CALL_OW 88
// end ; if your_side = 2 then
14429: LD_OWVAR 2
14433: PUSH
14434: LD_INT 2
14436: EQUAL
14437: IFFALSE 14541
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 25
14456: PUSH
14457: LD_INT 4
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: PUSH
14473: LD_EXP 57
14477: DIFF
14478: ST_TO_ADDR
// if not speaker then
14479: LD_VAR 0 1
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14488: LD_VAR 0 1
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: CALL_OW 258
14501: PUSH
14502: LD_INT 1
14504: EQUAL
14505: IFFALSE 14525
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_STRING VD-ar-sci-art-1
14518: PPUSH
14519: CALL_OW 88
14523: GO 14541
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14525: LD_VAR 0 1
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_STRING VD-ar-fsci-art-1
14536: PPUSH
14537: CALL_OW 88
// end ; if your_side = 7 then
14541: LD_OWVAR 2
14545: PUSH
14546: LD_INT 7
14548: EQUAL
14549: IFFALSE 14734
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_INT 22
14558: PUSH
14559: LD_INT 7
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 25
14568: PUSH
14569: LD_INT 4
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: PUSH
14585: LD_EXP 43
14589: DIFF
14590: ST_TO_ADDR
// if speaker then
14591: LD_VAR 0 1
14595: IFFALSE 14727
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14597: LD_VAR 0 1
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: CALL_OW 258
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: IFFALSE 14634
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: LD_STRING VD-al-sci-art-1
14627: PPUSH
14628: CALL_OW 88
14632: GO 14650
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_STRING VD-al-fsci-art-1
14645: PPUSH
14646: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14650: LD_EXP 43
14654: PPUSH
14655: LD_STRING VPd-art-1
14657: PPUSH
14658: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14662: LD_VAR 0 1
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 258
14675: PUSH
14676: LD_INT 1
14678: EQUAL
14679: IFFALSE 14699
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14681: LD_VAR 0 1
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: LD_STRING VD-al-sci-art-2
14692: PPUSH
14693: CALL_OW 88
14697: GO 14715
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14699: LD_VAR 0 1
14703: PUSH
14704: LD_INT 1
14706: ARRAY
14707: PPUSH
14708: LD_STRING VD-al-fsci-art-2
14710: PPUSH
14711: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14715: LD_EXP 43
14719: PPUSH
14720: LD_STRING VPd-art-2
14722: PPUSH
14723: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14727: LD_STRING CVulc7out
14729: PPUSH
14730: CALL_OW 337
// end ; end ;
14734: PPOPN 1
14736: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14737: LD_INT 22
14739: PUSH
14740: LD_OWVAR 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 101
14751: PUSH
14752: LD_INT 8
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: IFFALSE 14910
14769: GO 14771
14771: DISABLE
14772: LD_INT 0
14774: PPUSH
// begin if your_side = 1 then
14775: LD_OWVAR 2
14779: PUSH
14780: LD_INT 1
14782: EQUAL
14783: IFFALSE 14866
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14785: LD_ADDR_VAR 0 1
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: LD_EXP 24
14809: DIFF
14810: ST_TO_ADDR
// if speaker then
14811: LD_VAR 0 1
14815: IFFALSE 14866
// if GetSex ( speaker [ 1 ] ) then
14817: LD_VAR 0 1
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: CALL_OW 258
14830: IFFALSE 14850
// Say ( speaker [ 1 ] , VD-legion-us ) else
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_STRING VD-legion-us
14843: PPUSH
14844: CALL_OW 88
14848: GO 14866
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14850: LD_VAR 0 1
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_STRING VD-legion-us-f
14861: PPUSH
14862: CALL_OW 88
// end ; if your_side = 2 then
14866: LD_OWVAR 2
14870: PUSH
14871: LD_INT 2
14873: EQUAL
14874: IFFALSE 14888
// Say ( ar_commander , VD-legion-ar ) ;
14876: LD_EXP 57
14880: PPUSH
14881: LD_STRING VD-legion-ar
14883: PPUSH
14884: CALL_OW 88
// if your_side = 7 then
14888: LD_OWVAR 2
14892: PUSH
14893: LD_INT 7
14895: EQUAL
14896: IFFALSE 14910
// Say ( al_commander , VD-legion-al ) ;
14898: LD_EXP 43
14902: PPUSH
14903: LD_STRING VD-legion-al
14905: PPUSH
14906: CALL_OW 88
// end ;
14910: PPOPN 1
14912: END
// every 0 0$01 trigger mine_vulc do
14913: LD_EXP 13
14917: IFFALSE 14934
14919: GO 14921
14921: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14922: LD_EXP 11
14926: PPUSH
14927: LD_STRING VD-vulc-mines
14929: PPUSH
14930: CALL_OW 88
// end ;
14934: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: PUSH
14950: LD_INT 0
14952: EQUAL
14953: PUSH
14954: LD_OWVAR 2
14958: PUSH
14959: LD_INT 2
14961: NONEQUAL
14962: AND
14963: IFFALSE 14972
14965: GO 14967
14967: DISABLE
// Win ;
14968: CALL 15029 0 0
14972: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14973: LD_INT 2
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 8
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: PUSH
15006: LD_INT 0
15008: EQUAL
15009: PUSH
15010: LD_OWVAR 2
15014: PUSH
15015: LD_INT 2
15017: EQUAL
15018: AND
15019: IFFALSE 15028
15021: GO 15023
15023: DISABLE
// Win ;
15024: CALL 15029 0 0
15028: END
// function Win ; var points ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// case Query ( VulcWin ) of 1 :
15033: LD_STRING VulcWin
15035: PPUSH
15036: CALL_OW 97
15040: PUSH
15041: LD_INT 1
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15052
15049: POP
// ; end ;
15050: GO 15053
15052: POP
// if medal_enabled then
15053: LD_EXP 14
15057: IFFALSE 15071
// AddMedal ( vulc_1 , 1 ) else
15059: LD_STRING vulc_1
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 101
15069: GO 15082
// AddMedal ( vulc_1 , - 1 ) ;
15071: LD_STRING vulc_1
15073: PPUSH
15074: LD_INT 1
15076: NEG
15077: PPUSH
15078: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15082: LD_INT 22
15084: PUSH
15085: LD_INT 8
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: LD_INT 0
15099: EQUAL
15100: IFFALSE 15114
// AddMedal ( vulc_2 , 1 ) else
15102: LD_STRING vulc_2
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: CALL_OW 101
15112: GO 15125
// AddMedal ( vulc_2 , - 1 ) ;
15114: LD_STRING vulc_2
15116: PPUSH
15117: LD_INT 1
15119: NEG
15120: PPUSH
15121: CALL_OW 101
// points := CalculateCommanderPoints ;
15125: LD_ADDR_VAR 0 2
15129: PUSH
15130: CALL 2376 0 0
15134: ST_TO_ADDR
// if points >= 2000 then
15135: LD_VAR 0 2
15139: PUSH
15140: LD_INT 2000
15142: GREATEREQUAL
15143: IFFALSE 15157
// AddMedal ( vulc_3 , 2 ) else
15145: LD_STRING vulc_3
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 101
15155: GO 15190
// if points >= 0 then
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 0
15164: GREATEREQUAL
15165: IFFALSE 15179
// AddMedal ( vulc_3 , 1 ) else
15167: LD_STRING vulc_3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 101
15177: GO 15190
// AddMedal ( vulc_3 , - 1 ) ;
15179: LD_STRING vulc_3
15181: PPUSH
15182: LD_INT 1
15184: NEG
15185: PPUSH
15186: CALL_OW 101
// GiveMedals ( MAIN ) ;
15190: LD_STRING MAIN
15192: PPUSH
15193: CALL_OW 102
// YouWin ;
15197: CALL_OW 103
// end ; end_of_file
15201: LD_VAR 0 1
15205: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15206: LD_INT 13
15208: PPUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 70
15223: IFFALSE 15283
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
15231: PPUSH
// begin enable ;
15232: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_INT 13
15240: PPUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 70
15255: PUSH
15256: FOR_IN
15257: IFFALSE 15281
// if GetLives ( i ) then
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 256
15268: IFFALSE 15279
// KillUnit ( i ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 66
15279: GO 15256
15281: POP
15282: POP
// end ;
15283: PPOPN 2
15285: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 255
15295: PUSH
15296: LD_OWVAR 2
15300: EQUAL
15301: IFFALSE 15311
// player_res_art := true ;
15303: LD_ADDR_EXP 6
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// end ;
15311: PPOPN 1
15313: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 8
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 30
15351: PUSH
15352: LD_INT 11
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: LD_EXP 6
15378: AND
15379: IFFALSE 15736
15381: GO 15383
15383: DISABLE
15384: LD_INT 0
15386: PPUSH
15387: PPUSH
// begin enable ;
15388: ENABLE
// xy := FindArtifact ( 1 ) ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 469
15401: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 8
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 7
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 30
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: PPUSH
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: LD_VAR 0 1
15480: PUSH
15481: LD_INT 2
15483: ARRAY
15484: PPUSH
15485: CALL_OW 73
15489: ST_TO_ADDR
// if player_artifact_ready = false then
15490: LD_EXP 8
15494: PUSH
15495: LD_INT 0
15497: EQUAL
15498: IFFALSE 15612
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 297
15527: PUSH
15528: LD_INT 6
15530: LESS
15531: IFFALSE 15592
// begin if BuildingStatus ( lab ) = bs_idle then
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 461
15542: PUSH
15543: LD_INT 2
15545: EQUAL
15546: IFFALSE 15570
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15548: LD_OWVAR 2
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: LD_INT 2
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 468
15568: GO 15590
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15570: LD_OWVAR 2
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: CALL_OW 468
// end else
15590: GO 15612
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15592: LD_OWVAR 2
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 468
// if player_artifact_ready then
15612: LD_EXP 8
15616: IFFALSE 15736
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15618: LD_VAR 0 2
15622: PPUSH
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PPUSH
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 2
15639: ARRAY
15640: PPUSH
15641: CALL_OW 297
15645: PUSH
15646: LD_INT 6
15648: LESS
15649: IFFALSE 15714
// begin if BuildingStatus ( lab ) = bs_idle then
15651: LD_VAR 0 2
15655: PPUSH
15656: CALL_OW 461
15660: PUSH
15661: LD_INT 2
15663: EQUAL
15664: IFFALSE 15690
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 4
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
15688: GO 15712
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15690: LD_OWVAR 2
15694: PPUSH
15695: LD_EXP 9
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 2
15707: PPUSH
15708: CALL_OW 468
// end else
15712: GO 15736
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_EXP 9
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_VAR 0 2
15731: PPUSH
15732: CALL_OW 468
// end ;
15736: PPOPN 2
15738: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15739: LD_INT 0
15741: PPUSH
15742: PPUSH
15743: PPUSH
15744: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15745: LD_ADDR_VAR 0 5
15749: PUSH
15750: LD_INT 1
15752: PPUSH
15753: CALL_OW 469
15757: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15758: LD_ADDR_VAR 0 7
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_OWVAR 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 11
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PPUSH
15807: CALL_OW 69
15811: PPUSH
15812: LD_VAR 0 5
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_INT 2
15828: ARRAY
15829: PPUSH
15830: CALL_OW 73
15834: ST_TO_ADDR
// if icon = art_exp_left then
15835: LD_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: EQUAL
15843: IFFALSE 15896
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15845: LD_VAR 0 7
15849: PPUSH
15850: LD_EXP 10
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15862: LD_VAR 0 7
15866: PPUSH
15867: LD_EXP 7
15871: PPUSH
15872: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 0
15886: PPUSH
15887: LD_VAR 0 7
15891: PPUSH
15892: CALL_OW 468
// end ; if icon = art_icon then
15896: LD_VAR 0 2
15900: PUSH
15901: LD_EXP 9
15905: EQUAL
15906: IFFALSE 16139
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: IN
15928: IFFALSE 16139
// begin side := GetSide ( cr1 ) ;
15930: LD_ADDR_VAR 0 8
15934: PUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: CALL_OW 255
15944: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15945: LD_INT 22
15947: PUSH
15948: LD_VAR 0 8
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 28
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: PUSH
15976: LD_INT 0
15978: GREATER
15979: IFFALSE 16139
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_VAR 0 8
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 26
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 27
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: PUSH
16046: FOR_IN
16047: IFFALSE 16060
// KillUnit ( i ) ;
16049: LD_VAR 0 6
16053: PPUSH
16054: CALL_OW 66
16058: GO 16046
16060: POP
16061: POP
// medal_enabled := true ;
16062: LD_ADDR_EXP 14
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// player_res_art := false ;
16070: LD_ADDR_EXP 6
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16078: LD_OWVAR 2
16082: PPUSH
16083: LD_EXP 9
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_VAR 0 7
16095: PPUSH
16096: CALL_OW 468
// wait ( time_to_reuse ) ;
16100: LD_EXP 12
16104: PPUSH
16105: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16109: LD_OWVAR 2
16113: PPUSH
16114: LD_EXP 9
16118: PPUSH
16119: LD_INT 4
16121: PPUSH
16122: LD_VAR 0 7
16126: PPUSH
16127: CALL_OW 468
// player_res_art := true ;
16131: LD_ADDR_EXP 6
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// end ; end ; end ; end ;
16139: PPOPN 8
16141: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 255
16151: PUSH
16152: LD_OWVAR 2
16156: EQUAL
16157: IFFALSE 16194
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// player_artifact_ready := true ;
16179: LD_ADDR_EXP 8
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16187: LD_STRING ArtVulcano
16189: PPUSH
16190: CALL_OW 339
// end ; end ;
16194: PPOPN 1
16196: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16197: LD_ADDR_EXP 7
16201: PUSH
16202: LD_VAR 0 2
16206: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16207: LD_OWVAR 2
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 468
// end ; end_of_file end_of_file
16227: PPOPN 2
16229: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16237: LD_ADDR_EXP 45
16241: PUSH
16242: LD_INT 7
16244: PUSH
16245: LD_INT 6
16247: PUSH
16248: LD_INT 5
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: LD_OWVAR 67
16260: ARRAY
16261: ST_TO_ADDR
// al_force := [ ] ;
16262: LD_ADDR_EXP 44
16266: PUSH
16267: EMPTY
16268: ST_TO_ADDR
// RemoveAlliance ;
16269: CALL 16962 0 0
// ResetFog ;
16273: CALL_OW 335
// your_side := 7 ;
16277: LD_ADDR_OWVAR 2
16281: PUSH
16282: LD_INT 7
16284: ST_TO_ADDR
// uc_side := 7 ;
16285: LD_ADDR_OWVAR 20
16289: PUSH
16290: LD_INT 7
16292: ST_TO_ADDR
// hc_gallery :=  ;
16293: LD_ADDR_OWVAR 33
16297: PUSH
16298: LD_STRING 
16300: ST_TO_ADDR
// hc_name :=  ;
16301: LD_ADDR_OWVAR 26
16305: PUSH
16306: LD_STRING 
16308: ST_TO_ADDR
// hc_importance := 0 ;
16309: LD_ADDR_OWVAR 32
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// for i = 1 to 17 do
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: DOUBLE
16323: LD_INT 1
16325: DEC
16326: ST_TO_ADDR
16327: LD_INT 17
16329: PUSH
16330: FOR_TO
16331: IFFALSE 16411
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16333: LD_ADDR_OWVAR 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_INT 2
16353: PPUSH
16354: CALL_OW 12
16358: ARRAY
16359: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16360: LD_INT 0
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: LD_INT 4
16368: PPUSH
16369: CALL_OW 12
16373: PPUSH
16374: LD_EXP 45
16378: PPUSH
16379: CALL_OW 380
// un := CreateHuman ;
16383: LD_ADDR_VAR 0 4
16387: PUSH
16388: CALL_OW 44
16392: ST_TO_ADDR
// al_force := al_force ^ un ;
16393: LD_ADDR_EXP 44
16397: PUSH
16398: LD_EXP 44
16402: PUSH
16403: LD_VAR 0 4
16407: ADD
16408: ST_TO_ADDR
// end ;
16409: GO 16330
16411: POP
16412: POP
// hc_importance := 100 ;
16413: LD_ADDR_OWVAR 32
16417: PUSH
16418: LD_INT 100
16420: ST_TO_ADDR
// uc_nation := 3 ;
16421: LD_ADDR_OWVAR 21
16425: PUSH
16426: LD_INT 3
16428: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: LD_EXP 45
16439: PPUSH
16440: CALL_OW 380
// hc_gallery := skirmish ;
16444: LD_ADDR_OWVAR 33
16448: PUSH
16449: LD_STRING skirmish
16451: ST_TO_ADDR
// hc_face_number := 8 ;
16452: LD_ADDR_OWVAR 34
16456: PUSH
16457: LD_INT 8
16459: ST_TO_ADDR
// hc_name := Trofim Petya ;
16460: LD_ADDR_OWVAR 26
16464: PUSH
16465: LD_STRING Trofim Petya
16467: ST_TO_ADDR
// al_commander := CreateHuman ;
16468: LD_ADDR_EXP 43
16472: PUSH
16473: CALL_OW 44
16477: ST_TO_ADDR
// player_commander := al_commander ;
16478: LD_ADDR_EXP 11
16482: PUSH
16483: LD_EXP 43
16487: ST_TO_ADDR
// hc_importance := 0 ;
16488: LD_ADDR_OWVAR 32
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// hc_gallery :=  ;
16496: LD_ADDR_OWVAR 33
16500: PUSH
16501: LD_STRING 
16503: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16504: LD_ADDR_VAR 0 5
16508: PUSH
16509: LD_STRING text
16511: PPUSH
16512: LD_INT 9
16514: PUSH
16515: LD_INT 9
16517: PUSH
16518: LD_INT 8
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: LD_OWVAR 67
16530: ARRAY
16531: PPUSH
16532: LD_INT 9
16534: PUSH
16535: LD_INT 9
16537: PUSH
16538: LD_INT 8
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: LD_OWVAR 67
16550: ARRAY
16551: PPUSH
16552: LD_INT -5
16554: PUSH
16555: LD_EXP 43
16559: PUSH
16560: LD_INT -3
16562: PUSH
16563: LD_INT -2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_EXP 44
16576: ADD
16577: PPUSH
16578: LD_INT 1
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 9
16606: PUSH
16607: LD_INT 5
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 42
16622: ST_TO_ADDR
// team := team ^ al_commander ;
16623: LD_ADDR_VAR 0 5
16627: PUSH
16628: LD_VAR 0 5
16632: PUSH
16633: LD_EXP 43
16637: ADD
16638: ST_TO_ADDR
// for i = 1 to team do
16639: LD_ADDR_VAR 0 2
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 5
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16955
// begin if GetClass ( team [ i ] ) = class_mechanic then
16657: LD_VAR 0 5
16661: PUSH
16662: LD_VAR 0 2
16666: ARRAY
16667: PPUSH
16668: CALL_OW 257
16672: PUSH
16673: LD_INT 3
16675: EQUAL
16676: IFFALSE 16932
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16678: LD_ADDR_OWVAR 21
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 2
16698: PPUSH
16699: CALL_OW 12
16703: ARRAY
16704: ST_TO_ADDR
// if uc_nation = 1 then
16705: LD_OWVAR 21
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: IFFALSE 16797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16715: LD_ADDR_OWVAR 37
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 4
16725: PUSH
16726: LD_INT 5
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 3
16741: MOD
16742: PUSH
16743: LD_INT 1
16745: PLUS
16746: ARRAY
16747: ST_TO_ADDR
// vc_engine := engine_siberite ;
16748: LD_ADDR_OWVAR 39
16752: PUSH
16753: LD_INT 3
16755: ST_TO_ADDR
// vc_control := control_manual ;
16756: LD_ADDR_OWVAR 38
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16764: LD_ADDR_OWVAR 40
16768: PUSH
16769: LD_INT 4
16771: PUSH
16772: LD_INT 5
16774: PUSH
16775: LD_INT 9
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 12
16793: ARRAY
16794: ST_TO_ADDR
// end else
16795: GO 16873
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16797: LD_ADDR_OWVAR 37
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_INT 2
16819: MOD
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: ARRAY
16825: ST_TO_ADDR
// vc_engine := engine_siberite ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// vc_control := control_manual ;
16834: LD_ADDR_OWVAR 38
16838: PUSH
16839: LD_INT 1
16841: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 44
16849: PUSH
16850: LD_INT 45
16852: PUSH
16853: LD_INT 43
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_INT 3
16866: PPUSH
16867: CALL_OW 12
16871: ARRAY
16872: ST_TO_ADDR
// end ; un := CreateVehicle ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: CALL_OW 45
16882: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16883: LD_VAR 0 4
16887: PPUSH
16888: LD_INT 5
16890: PPUSH
16891: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16895: LD_VAR 0 4
16899: PPUSH
16900: LD_INT 15
16902: PPUSH
16903: LD_INT 0
16905: PPUSH
16906: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16910: LD_VAR 0 5
16914: PUSH
16915: LD_VAR 0 2
16919: ARRAY
16920: PPUSH
16921: LD_VAR 0 4
16925: PPUSH
16926: CALL_OW 52
// end else
16930: GO 16953
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16932: LD_VAR 0 5
16936: PUSH
16937: LD_VAR 0 2
16941: ARRAY
16942: PPUSH
16943: LD_INT 15
16945: PPUSH
16946: LD_INT 0
16948: PPUSH
16949: CALL_OW 49
// end ;
16953: GO 16654
16955: POP
16956: POP
// end ;
16957: LD_VAR 0 1
16961: RET
// export function RemoveAlliance ; var i ; begin
16962: LD_INT 0
16964: PPUSH
16965: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16966: LD_INT 22
16968: PUSH
16969: LD_INT 7
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PPUSH
16999: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 7
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: PUSH
17023: FOR_IN
17024: IFFALSE 17037
// RemoveUnit ( i ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: CALL_OW 64
17035: GO 17023
17037: POP
17038: POP
// end ;
17039: LD_VAR 0 1
17043: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17050: LD_INT 31
17052: PPUSH
17053: LD_INT 7
17055: PPUSH
17056: LD_INT 2
17058: PPUSH
17059: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17063: LD_INT 32
17065: PPUSH
17066: LD_INT 7
17068: PPUSH
17069: LD_INT 2
17071: PPUSH
17072: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17076: LD_INT 59
17078: PPUSH
17079: LD_INT 7
17081: PPUSH
17082: LD_INT 2
17084: PPUSH
17085: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17089: LD_ADDR_EXP 45
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: LD_INT 6
17099: PUSH
17100: LD_INT 7
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: LD_OWVAR 67
17112: ARRAY
17113: ST_TO_ADDR
// al_force := [ ] ;
17114: LD_ADDR_EXP 44
17118: PUSH
17119: EMPTY
17120: ST_TO_ADDR
// al_vehs := [ ] ;
17121: LD_ADDR_EXP 50
17125: PUSH
17126: EMPTY
17127: ST_TO_ADDR
// uc_side := 7 ;
17128: LD_ADDR_OWVAR 20
17132: PUSH
17133: LD_INT 7
17135: ST_TO_ADDR
// uc_nation := 1 ;
17136: LD_ADDR_OWVAR 21
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// bc_type := b_oil_mine ;
17144: LD_ADDR_OWVAR 42
17148: PUSH
17149: LD_INT 29
17151: ST_TO_ADDR
// b := CreateBuilding ;
17152: LD_ADDR_VAR 0 4
17156: PUSH
17157: CALL_OW 46
17161: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17162: LD_VAR 0 4
17166: PPUSH
17167: LD_INT 61
17169: PPUSH
17170: LD_INT 7
17172: PPUSH
17173: LD_INT 0
17175: PPUSH
17176: LD_INT 0
17178: PPUSH
17179: CALL_OW 50
// bc_type := b_siberite_mine ;
17183: LD_ADDR_OWVAR 42
17187: PUSH
17188: LD_INT 30
17190: ST_TO_ADDR
// b := CreateBuilding ;
17191: LD_ADDR_VAR 0 4
17195: PUSH
17196: CALL_OW 46
17200: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_INT 69
17208: PPUSH
17209: LD_INT 13
17211: PPUSH
17212: LD_INT 0
17214: PPUSH
17215: LD_INT 0
17217: PPUSH
17218: CALL_OW 50
// hc_gallery :=  ;
17222: LD_ADDR_OWVAR 33
17226: PUSH
17227: LD_STRING 
17229: ST_TO_ADDR
// hc_name :=  ;
17230: LD_ADDR_OWVAR 26
17234: PUSH
17235: LD_STRING 
17237: ST_TO_ADDR
// hc_importance := 0 ;
17238: LD_ADDR_OWVAR 32
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_INT 7
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 30
17263: PUSH
17264: LD_INT 32
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17351
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17283: LD_ADDR_OWVAR 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: CALL_OW 12
17308: ARRAY
17309: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17310: LD_INT 0
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_EXP 45
17320: PPUSH
17321: CALL_OW 380
// un := CreateHuman ;
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: CALL_OW 44
17334: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL_OW 52
// end ;
17349: GO 17280
17351: POP
17352: POP
// for i = 1 to 3 do
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 3
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17435
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17369: LD_ADDR_OWVAR 21
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 12
17394: ARRAY
17395: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17396: LD_INT 0
17398: PPUSH
17399: LD_INT 4
17401: PPUSH
17402: LD_EXP 45
17406: PPUSH
17407: CALL_OW 380
// un := CreateHuman ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: CALL_OW 44
17420: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 164
17428: PPUSH
17429: CALL_OW 52
// end ;
17433: GO 17366
17435: POP
17436: POP
// for i = 1 to 4 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_INT 1
17445: DEC
17446: ST_TO_ADDR
17447: LD_INT 4
17449: PUSH
17450: FOR_TO
17451: IFFALSE 17542
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17453: LD_ADDR_OWVAR 21
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_INT 2
17473: PPUSH
17474: CALL_OW 12
17478: ARRAY
17479: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17480: LD_INT 0
17482: PPUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 9
17488: PUSH
17489: LD_INT 9
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_INT 3
17502: PPUSH
17503: CALL_OW 12
17507: ARRAY
17508: PPUSH
17509: LD_EXP 45
17513: PPUSH
17514: CALL_OW 380
// un := CreateHuman ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: CALL_OW 44
17527: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 173
17535: PPUSH
17536: CALL_OW 52
// end ;
17540: GO 17450
17542: POP
17543: POP
// for i = 1 to 4 do
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: DOUBLE
17550: LD_INT 1
17552: DEC
17553: ST_TO_ADDR
17554: LD_INT 4
17556: PUSH
17557: FOR_TO
17558: IFFALSE 17656
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17560: LD_ADDR_OWVAR 21
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_INT 2
17580: PPUSH
17581: CALL_OW 12
17585: ARRAY
17586: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17587: LD_INT 0
17589: PPUSH
17590: LD_INT 3
17592: PPUSH
17593: LD_EXP 45
17597: PPUSH
17598: CALL_OW 380
// un := CreateHuman ;
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: CALL_OW 44
17611: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_INT 22
17619: PUSH
17620: LD_INT 7
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PUSH
17646: LD_INT 1
17648: ARRAY
17649: PPUSH
17650: CALL_OW 52
// end ;
17654: GO 17557
17656: POP
17657: POP
// for i = 1 to 4 do
17658: LD_ADDR_VAR 0 2
17662: PUSH
17663: DOUBLE
17664: LD_INT 1
17666: DEC
17667: ST_TO_ADDR
17668: LD_INT 4
17670: PUSH
17671: FOR_TO
17672: IFFALSE 17740
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17674: LD_ADDR_OWVAR 21
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 2
17694: PPUSH
17695: CALL_OW 12
17699: ARRAY
17700: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17701: LD_INT 0
17703: PPUSH
17704: LD_INT 2
17706: PPUSH
17707: LD_EXP 45
17711: PPUSH
17712: CALL_OW 380
// un := CreateHuman ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: CALL_OW 44
17725: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 162
17733: PPUSH
17734: CALL_OW 52
// end ;
17738: GO 17671
17740: POP
17741: POP
// uc_nation := 3 ;
17742: LD_ADDR_OWVAR 21
17746: PUSH
17747: LD_INT 3
17749: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_INT 21
17757: ST_TO_ADDR
// vc_engine := engine_siberite ;
17758: LD_ADDR_OWVAR 39
17762: PUSH
17763: LD_INT 3
17765: ST_TO_ADDR
// vc_control := control_computer ;
17766: LD_ADDR_OWVAR 38
17770: PUSH
17771: LD_INT 3
17773: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17774: LD_ADDR_OWVAR 40
17778: PUSH
17779: LD_INT 51
17781: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17782: CALL_OW 45
17786: PPUSH
17787: LD_INT 49
17789: PPUSH
17790: LD_INT 13
17792: PPUSH
17793: LD_INT 0
17795: PPUSH
17796: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17800: LD_ADDR_EXP 52
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 7
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 33
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: DOUBLE
17840: LD_INT 1
17842: DEC
17843: ST_TO_ADDR
17844: LD_INT 22
17846: PUSH
17847: LD_INT 7
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 33
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 35
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: PUSH
17887: FOR_TO
17888: IFFALSE 17948
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17890: LD_INT 22
17892: PUSH
17893: LD_INT 7
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 30
17902: PUSH
17903: LD_INT 33
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 35
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PUSH
17933: LD_VAR 0 2
17937: ARRAY
17938: PPUSH
17939: LD_INT 49
17941: PPUSH
17942: CALL_OW 208
17946: GO 17887
17948: POP
17949: POP
// end ;
17950: LD_VAR 0 1
17954: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17955: LD_OWVAR 2
17959: PUSH
17960: LD_INT 1
17962: EQUAL
17963: IFFALSE 18949
17965: GO 17967
17967: DISABLE
17968: LD_INT 0
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
// begin enable ;
17974: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_INT 7
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18009: LD_ADDR_EXP 54
18013: PUSH
18014: LD_INT 164
18016: PUSH
18017: LD_INT 197
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18024: LD_ADDR_EXP 53
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 7
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 30
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18062: LD_ADDR_EXP 55
18066: PUSH
18067: LD_INT 22
18069: PUSH
18070: LD_INT 7
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL_OW 69
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18100: LD_INT 22
18102: PUSH
18103: LD_INT 7
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 34
18112: PUSH
18113: LD_INT 51
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: IFFALSE 18168
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18130: LD_ADDR_EXP 51
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 7
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 34
18147: PUSH
18148: LD_INT 51
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PUSH
18164: LD_INT 1
18166: ARRAY
18167: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18168: LD_ADDR_EXP 47
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 7
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 9
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18202: LD_ADDR_EXP 46
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_INT 7
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18236: LD_ADDR_EXP 48
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 7
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 25
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PPUSH
18265: CALL_OW 69
18269: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18270: LD_ADDR_EXP 49
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_INT 7
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 25
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 69
18303: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18304: LD_EXP 51
18308: PPUSH
18309: CALL_OW 314
18313: NOT
18314: PUSH
18315: LD_EXP 51
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 289
18327: PUSH
18328: LD_INT 100
18330: LESS
18331: AND
18332: IFFALSE 18380
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18334: LD_ADDR_VAR 0 4
18338: PUSH
18339: LD_INT 12
18341: PPUSH
18342: CALL_OW 435
18346: ST_TO_ADDR
// if cr then
18347: LD_VAR 0 4
18351: IFFALSE 18380
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18353: LD_EXP 51
18357: PPUSH
18358: LD_VAR 0 4
18362: PUSH
18363: LD_INT 1
18365: ARRAY
18366: PPUSH
18367: LD_VAR 0 4
18371: PUSH
18372: LD_INT 2
18374: ARRAY
18375: PPUSH
18376: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18380: LD_EXP 56
18384: PPUSH
18385: LD_INT 3
18387: PUSH
18388: LD_INT 24
18390: PUSH
18391: LD_INT 1000
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 72
18406: IFFALSE 18536
// begin if al_eng then
18408: LD_EXP 46
18412: IFFALSE 18534
// for i = 1 to al_eng do
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: DOUBLE
18420: LD_INT 1
18422: DEC
18423: ST_TO_ADDR
18424: LD_EXP 46
18428: PUSH
18429: FOR_TO
18430: IFFALSE 18532
// if IsInUnit ( al_eng [ i ] ) then
18432: LD_EXP 46
18436: PUSH
18437: LD_VAR 0 1
18441: ARRAY
18442: PPUSH
18443: CALL_OW 310
18447: IFFALSE 18466
// ComExitBuilding ( al_eng [ i ] ) else
18449: LD_EXP 46
18453: PUSH
18454: LD_VAR 0 1
18458: ARRAY
18459: PPUSH
18460: CALL_OW 122
18464: GO 18530
// if not HasTask ( al_eng [ i ] ) then
18466: LD_EXP 46
18470: PUSH
18471: LD_VAR 0 1
18475: ARRAY
18476: PPUSH
18477: CALL_OW 314
18481: NOT
18482: IFFALSE 18530
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18484: LD_EXP 46
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: LD_EXP 56
18499: PPUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 24
18505: PUSH
18506: LD_INT 1000
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 72
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 130
18530: GO 18429
18532: POP
18533: POP
// end else
18534: GO 18618
// if al_eng then
18536: LD_EXP 46
18540: IFFALSE 18618
// if not IsInUnit ( al_eng [ 1 ] ) then
18542: LD_EXP 46
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: PPUSH
18551: CALL_OW 310
18555: NOT
18556: IFFALSE 18618
// for i = 1 to al_eng do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: DOUBLE
18564: LD_INT 1
18566: DEC
18567: ST_TO_ADDR
18568: LD_EXP 46
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18616
// if not IsInUnit ( al_eng [ i ] ) then
18576: LD_EXP 46
18580: PUSH
18581: LD_VAR 0 1
18585: ARRAY
18586: PPUSH
18587: CALL_OW 310
18591: NOT
18592: IFFALSE 18614
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18594: LD_EXP 46
18598: PUSH
18599: LD_VAR 0 1
18603: ARRAY
18604: PPUSH
18605: LD_EXP 53
18609: PPUSH
18610: CALL_OW 120
18614: GO 18573
18616: POP
18617: POP
// if al_vehs then
18618: LD_EXP 50
18622: IFFALSE 18722
// if BuildingStatus ( al_fac ) = bs_idle then
18624: LD_EXP 55
18628: PPUSH
18629: CALL_OW 461
18633: PUSH
18634: LD_INT 2
18636: EQUAL
18637: IFFALSE 18722
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18639: LD_EXP 55
18643: PPUSH
18644: LD_EXP 50
18648: PUSH
18649: LD_INT 1
18651: ARRAY
18652: PPUSH
18653: LD_EXP 50
18657: PUSH
18658: LD_INT 2
18660: ARRAY
18661: PPUSH
18662: LD_EXP 50
18666: PUSH
18667: LD_INT 3
18669: ARRAY
18670: PPUSH
18671: LD_EXP 50
18675: PUSH
18676: LD_INT 4
18678: ARRAY
18679: PPUSH
18680: CALL_OW 125
// for i = 1 to 4 do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: DOUBLE
18690: LD_INT 1
18692: DEC
18693: ST_TO_ADDR
18694: LD_INT 4
18696: PUSH
18697: FOR_TO
18698: IFFALSE 18720
// al_vehs := Delete ( al_vehs , 1 ) ;
18700: LD_ADDR_EXP 50
18704: PUSH
18705: LD_EXP 50
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 3
18717: ST_TO_ADDR
18718: GO 18697
18720: POP
18721: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18722: LD_EXP 44
18726: PUSH
18727: LD_INT 0
18729: EQUAL
18730: PUSH
18731: LD_OWVAR 1
18735: PUSH
18736: LD_INT 23100
18738: MOD
18739: PUSH
18740: LD_INT 0
18742: EQUAL
18743: AND
18744: IFFALSE 18858
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18746: LD_ADDR_VAR 0 1
18750: PUSH
18751: DOUBLE
18752: LD_INT 1
18754: DEC
18755: ST_TO_ADDR
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: PUSH
18770: LD_OWVAR 67
18774: ARRAY
18775: PUSH
18776: FOR_TO
18777: IFFALSE 18856
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18779: LD_ADDR_EXP 50
18783: PUSH
18784: LD_EXP 50
18788: PUSH
18789: LD_INT 23
18791: ADD
18792: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18793: LD_ADDR_EXP 50
18797: PUSH
18798: LD_EXP 50
18802: PUSH
18803: LD_INT 1
18805: ADD
18806: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18807: LD_ADDR_EXP 50
18811: PUSH
18812: LD_EXP 50
18816: PUSH
18817: LD_INT 3
18819: ADD
18820: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18821: LD_ADDR_EXP 50
18825: PUSH
18826: LD_EXP 50
18830: PUSH
18831: LD_INT 46
18833: PUSH
18834: LD_INT 47
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PPUSH
18844: LD_INT 2
18846: PPUSH
18847: CALL_OW 12
18851: ARRAY
18852: ADD
18853: ST_TO_ADDR
// end ;
18854: GO 18776
18856: POP
18857: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18858: LD_INT 22
18860: PUSH
18861: LD_INT 7
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 34
18870: PUSH
18871: LD_INT 51
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: PUSH
18887: LD_INT 0
18889: EQUAL
18890: IFFALSE 18913
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18892: LD_EXP 55
18896: PPUSH
18897: LD_INT 21
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: LD_INT 51
18908: PPUSH
18909: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18913: LD_EXP 44
18917: PUSH
18918: LD_INT 6
18920: PUSH
18921: LD_INT 7
18923: PUSH
18924: LD_INT 8
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: LD_OWVAR 67
18936: ARRAY
18937: GREATEREQUAL
18938: IFFALSE 18949
// RaiseSailEvent ( event_alliance_attack ) ;
18940: LD_EXP 23
18944: PPUSH
18945: CALL_OW 427
// end ;
18949: PPOPN 4
18951: END
// export function AllianceAttack ( ) ; var path , units ; begin
18952: LD_INT 0
18954: PPUSH
18955: PPUSH
18956: PPUSH
// units := al_force ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_EXP 44
18966: ST_TO_ADDR
// al_force := [ ] ;
18967: LD_ADDR_EXP 44
18971: PUSH
18972: EMPTY
18973: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18974: LD_INT 0
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 12
18984: IFFALSE 19028
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: LD_INT 49
18993: PUSH
18994: LD_INT 53
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 52
19003: PUSH
19004: LD_INT 90
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 63
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 19057
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_INT 89
19035: PUSH
19036: LD_INT 52
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 143
19045: PUSH
19046: LD_INT 50
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19057: LD_INT 35
19059: PPUSH
19060: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 2
19073: PPUSH
19074: CALL 80862 0 2
19078: NOT
19079: IFFALSE 19057
// end ; end_of_file
19081: LD_VAR 0 1
19085: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19086: LD_INT 0
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19093: LD_ADDR_EXP 59
19097: PUSH
19098: LD_INT 9
19100: PUSH
19101: LD_INT 8
19103: PUSH
19104: LD_INT 7
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: PUSH
19112: LD_OWVAR 67
19116: ARRAY
19117: ST_TO_ADDR
// ar_force := [ ] ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// RemoveAlliance ;
19125: CALL 16962 0 0
// RemoveEnvironmentArea ( evn ) ;
19129: LD_INT 17
19131: PPUSH
19132: CALL_OW 355
// your_side := 2 ;
19136: LD_ADDR_OWVAR 2
19140: PUSH
19141: LD_INT 2
19143: ST_TO_ADDR
// uc_side := 2 ;
19144: LD_ADDR_OWVAR 20
19148: PUSH
19149: LD_INT 2
19151: ST_TO_ADDR
// uc_nation := nation_arabian ;
19152: LD_ADDR_OWVAR 21
19156: PUSH
19157: LD_INT 2
19159: ST_TO_ADDR
// hc_gallery :=  ;
19160: LD_ADDR_OWVAR 33
19164: PUSH
19165: LD_STRING 
19167: ST_TO_ADDR
// hc_name :=  ;
19168: LD_ADDR_OWVAR 26
19172: PUSH
19173: LD_STRING 
19175: ST_TO_ADDR
// hc_importance := 0 ;
19176: LD_ADDR_OWVAR 32
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// for i = 1 to 20 do
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: DOUBLE
19190: LD_INT 1
19192: DEC
19193: ST_TO_ADDR
19194: LD_INT 20
19196: PUSH
19197: FOR_TO
19198: IFFALSE 19263
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19200: LD_INT 0
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 4
19208: PPUSH
19209: CALL_OW 12
19213: PPUSH
19214: LD_EXP 59
19218: PPUSH
19219: CALL_OW 380
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19233: LD_VAR 0 4
19237: PPUSH
19238: LD_INT 2
19240: PPUSH
19241: CALL_OW 233
// ar_force := ar_force ^ un ;
19245: LD_ADDR_EXP 58
19249: PUSH
19250: LD_EXP 58
19254: PUSH
19255: LD_VAR 0 4
19259: ADD
19260: ST_TO_ADDR
// end ;
19261: GO 19197
19263: POP
19264: POP
// hc_importance := 100 ;
19265: LD_ADDR_OWVAR 32
19269: PUSH
19270: LD_INT 100
19272: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19273: LD_INT 1
19275: PPUSH
19276: LD_INT 11
19278: PPUSH
19279: LD_EXP 59
19283: PPUSH
19284: CALL_OW 380
// hc_gallery := skirmish ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING skirmish
19295: ST_TO_ADDR
// hc_face_number := 9 ;
19296: LD_ADDR_OWVAR 34
19300: PUSH
19301: LD_INT 9
19303: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19304: LD_ADDR_OWVAR 26
19308: PUSH
19309: LD_STRING Muhammad Mustaffi
19311: ST_TO_ADDR
// ar_commander := CreateHuman ;
19312: LD_ADDR_EXP 57
19316: PUSH
19317: CALL_OW 44
19321: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19322: LD_EXP 57
19326: PPUSH
19327: LD_INT 2
19329: PPUSH
19330: CALL_OW 233
// player_commander := ar_commander ;
19334: LD_ADDR_EXP 11
19338: PUSH
19339: LD_EXP 57
19343: ST_TO_ADDR
// hc_importance := 0 ;
19344: LD_ADDR_OWVAR 32
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// hc_gallery :=  ;
19352: LD_ADDR_OWVAR 33
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19360: LD_ADDR_VAR 0 5
19364: PUSH
19365: LD_STRING text
19367: PPUSH
19368: LD_INT 14
19370: PUSH
19371: LD_INT 13
19373: PUSH
19374: LD_INT 12
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: LD_OWVAR 67
19386: ARRAY
19387: PPUSH
19388: LD_INT 14
19390: PUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 12
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_OWVAR 67
19406: ARRAY
19407: PPUSH
19408: LD_INT -6
19410: PUSH
19411: LD_EXP 57
19415: PUSH
19416: LD_INT -2
19418: PUSH
19419: LD_INT -3
19421: PUSH
19422: LD_INT -5
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: PUSH
19432: LD_EXP 58
19436: ADD
19437: PPUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 4
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 8
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 42
19478: ST_TO_ADDR
// team := team ^ ar_commander ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_VAR 0 5
19488: PUSH
19489: LD_EXP 57
19493: ADD
19494: ST_TO_ADDR
// for i = 1 to 4 do
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: DOUBLE
19501: LD_INT 1
19503: DEC
19504: ST_TO_ADDR
19505: LD_INT 4
19507: PUSH
19508: FOR_TO
19509: IFFALSE 19609
// begin vc_chassis := ar_medium_trike ;
19511: LD_ADDR_OWVAR 37
19515: PUSH
19516: LD_INT 13
19518: ST_TO_ADDR
// vc_engine := engine_siberite ;
19519: LD_ADDR_OWVAR 39
19523: PUSH
19524: LD_INT 3
19526: ST_TO_ADDR
// vc_control := control_manual ;
19527: LD_ADDR_OWVAR 38
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19535: LD_ADDR_OWVAR 40
19539: PUSH
19540: LD_INT 27
19542: PUSH
19543: LD_INT 32
19545: PUSH
19546: LD_INT 88
19548: PUSH
19549: LD_INT 27
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: LD_VAR 0 2
19562: ARRAY
19563: ST_TO_ADDR
// un := CreateVehicle ;
19564: LD_ADDR_VAR 0 4
19568: PUSH
19569: CALL_OW 45
19573: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19574: LD_VAR 0 4
19578: PPUSH
19579: LD_INT 2
19581: PPUSH
19582: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19586: LD_VAR 0 4
19590: PPUSH
19591: LD_INT 54
19593: PPUSH
19594: LD_INT 15
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 50
// end ;
19607: GO 19508
19609: POP
19610: POP
// for i = 1 to team do
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: DOUBLE
19617: LD_INT 1
19619: DEC
19620: ST_TO_ADDR
19621: LD_VAR 0 5
19625: PUSH
19626: FOR_TO
19627: IFFALSE 19724
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19629: LD_INT 22
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 58
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: IFFALSE 19701
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19655: LD_VAR 0 5
19659: PUSH
19660: LD_VAR 0 2
19664: ARRAY
19665: PPUSH
19666: LD_INT 22
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 58
19678: PUSH
19679: EMPTY
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PPUSH
19695: CALL_OW 52
19699: GO 19722
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19701: LD_VAR 0 5
19705: PUSH
19706: LD_VAR 0 2
19710: ARRAY
19711: PPUSH
19712: LD_INT 16
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: CALL_OW 49
// end ;
19722: GO 19626
19724: POP
19725: POP
// uc_side := 0 ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// uc_nation := 0 ;
19734: LD_ADDR_OWVAR 21
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// vc_chassis := 31 ;
19742: LD_ADDR_OWVAR 37
19746: PUSH
19747: LD_INT 31
19749: ST_TO_ADDR
// vc_control := control_rider ;
19750: LD_ADDR_OWVAR 38
19754: PUSH
19755: LD_INT 4
19757: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19758: CALL_OW 45
19762: PPUSH
19763: LD_INT 96
19765: PPUSH
19766: LD_INT 20
19768: PPUSH
19769: LD_INT 0
19771: PPUSH
19772: CALL_OW 48
// end ; end_of_file end_of_file
19776: LD_VAR 0 1
19780: RET
// export globalGameSaveCounter ; every 0 0$1 do
19781: GO 19783
19783: DISABLE
// begin enable ;
19784: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19785: LD_STRING updateTimer(
19787: PUSH
19788: LD_OWVAR 1
19792: STR
19793: PUSH
19794: LD_STRING );
19796: STR
19797: PPUSH
19798: CALL_OW 559
// end ;
19802: END
// every 0 0$1 do
19803: GO 19805
19805: DISABLE
// begin globalGameSaveCounter := 0 ;
19806: LD_ADDR_EXP 60
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19814: LD_STRING setGameSaveCounter(0)
19816: PPUSH
19817: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19821: LD_STRING initStreamRollete();
19823: PPUSH
19824: CALL_OW 559
// InitStreamMode ;
19828: CALL 21171 0 0
// DefineStreamItems ( false ) ;
19832: LD_INT 0
19834: PPUSH
19835: CALL 21635 0 1
// end ;
19839: END
// export function SOS_MapStart ( ) ; begin
19840: LD_INT 0
19842: PPUSH
// if streamModeActive then
19843: LD_EXP 61
19847: IFFALSE 19856
// DefineStreamItems ( true ) ;
19849: LD_INT 1
19851: PPUSH
19852: CALL 21635 0 1
// UpdateLuaVariables ( ) ;
19856: CALL 19873 0 0
// UpdateFactoryWaypoints ( ) ;
19860: CALL 34504 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19864: CALL 34761 0 0
// end ;
19868: LD_VAR 0 1
19872: RET
// function UpdateLuaVariables ( ) ; begin
19873: LD_INT 0
19875: PPUSH
// if globalGameSaveCounter then
19876: LD_EXP 60
19880: IFFALSE 19914
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19882: LD_ADDR_EXP 60
19886: PUSH
19887: LD_EXP 60
19891: PPUSH
19892: CALL 79619 0 1
19896: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19897: LD_STRING setGameSaveCounter(
19899: PUSH
19900: LD_EXP 60
19904: STR
19905: PUSH
19906: LD_STRING )
19908: STR
19909: PPUSH
19910: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19914: LD_STRING setGameDifficulty(
19916: PUSH
19917: LD_OWVAR 67
19921: STR
19922: PUSH
19923: LD_STRING )
19925: STR
19926: PPUSH
19927: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19931: LD_STRING displayDifficulty(
19933: PUSH
19934: LD_OWVAR 67
19938: STR
19939: PUSH
19940: LD_STRING )
19942: STR
19943: PPUSH
19944: CALL_OW 559
// end ;
19948: LD_VAR 0 1
19952: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19953: LD_INT 0
19955: PPUSH
// if p2 = stream_mode then
19956: LD_VAR 0 2
19960: PUSH
19961: LD_INT 100
19963: EQUAL
19964: IFFALSE 20967
// begin if not StreamModeActive then
19966: LD_EXP 61
19970: NOT
19971: IFFALSE 19981
// StreamModeActive := true ;
19973: LD_ADDR_EXP 61
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 0 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 0
19988: EQUAL
19989: IFFALSE 19995
// InitStreamMode ;
19991: CALL 21171 0 0
// if p3 = 1 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: IFFALSE 20013
// sRocket := true ;
20005: LD_ADDR_EXP 66
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 2 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 2
20020: EQUAL
20021: IFFALSE 20031
// sSpeed := true ;
20023: LD_ADDR_EXP 65
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 3 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 3
20038: EQUAL
20039: IFFALSE 20049
// sEngine := true ;
20041: LD_ADDR_EXP 67
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 4 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 4
20056: EQUAL
20057: IFFALSE 20067
// sSpec := true ;
20059: LD_ADDR_EXP 64
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 5 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 5
20074: EQUAL
20075: IFFALSE 20085
// sLevel := true ;
20077: LD_ADDR_EXP 68
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 6 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 6
20092: EQUAL
20093: IFFALSE 20103
// sArmoury := true ;
20095: LD_ADDR_EXP 69
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 7 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 7
20110: EQUAL
20111: IFFALSE 20121
// sRadar := true ;
20113: LD_ADDR_EXP 70
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 8 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 8
20128: EQUAL
20129: IFFALSE 20139
// sBunker := true ;
20131: LD_ADDR_EXP 71
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 9 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 9
20146: EQUAL
20147: IFFALSE 20157
// sHack := true ;
20149: LD_ADDR_EXP 72
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 10 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 10
20164: EQUAL
20165: IFFALSE 20175
// sFire := true ;
20167: LD_ADDR_EXP 73
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 11 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 11
20182: EQUAL
20183: IFFALSE 20193
// sRefresh := true ;
20185: LD_ADDR_EXP 74
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 12 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 12
20200: EQUAL
20201: IFFALSE 20211
// sExp := true ;
20203: LD_ADDR_EXP 75
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 13 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 13
20218: EQUAL
20219: IFFALSE 20229
// sDepot := true ;
20221: LD_ADDR_EXP 76
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 14 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 14
20236: EQUAL
20237: IFFALSE 20247
// sFlag := true ;
20239: LD_ADDR_EXP 77
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 15 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 15
20254: EQUAL
20255: IFFALSE 20265
// sKamikadze := true ;
20257: LD_ADDR_EXP 85
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 16 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 16
20272: EQUAL
20273: IFFALSE 20283
// sTroll := true ;
20275: LD_ADDR_EXP 86
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 17 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 17
20290: EQUAL
20291: IFFALSE 20301
// sSlow := true ;
20293: LD_ADDR_EXP 87
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 18 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 18
20308: EQUAL
20309: IFFALSE 20319
// sLack := true ;
20311: LD_ADDR_EXP 88
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 19 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 19
20326: EQUAL
20327: IFFALSE 20337
// sTank := true ;
20329: LD_ADDR_EXP 90
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 20 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 20
20344: EQUAL
20345: IFFALSE 20355
// sRemote := true ;
20347: LD_ADDR_EXP 91
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 21 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 21
20362: EQUAL
20363: IFFALSE 20373
// sPowell := true ;
20365: LD_ADDR_EXP 92
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 22 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 22
20380: EQUAL
20381: IFFALSE 20391
// sTeleport := true ;
20383: LD_ADDR_EXP 95
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 23 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 23
20398: EQUAL
20399: IFFALSE 20409
// sOilTower := true ;
20401: LD_ADDR_EXP 97
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 24 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 24
20416: EQUAL
20417: IFFALSE 20427
// sShovel := true ;
20419: LD_ADDR_EXP 98
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 25 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 25
20434: EQUAL
20435: IFFALSE 20445
// sSheik := true ;
20437: LD_ADDR_EXP 99
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 26 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 26
20452: EQUAL
20453: IFFALSE 20463
// sEarthquake := true ;
20455: LD_ADDR_EXP 101
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 27 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 27
20470: EQUAL
20471: IFFALSE 20481
// sAI := true ;
20473: LD_ADDR_EXP 102
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 28 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 28
20488: EQUAL
20489: IFFALSE 20499
// sCargo := true ;
20491: LD_ADDR_EXP 105
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 29 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 29
20506: EQUAL
20507: IFFALSE 20517
// sDLaser := true ;
20509: LD_ADDR_EXP 106
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 30 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 30
20524: EQUAL
20525: IFFALSE 20535
// sExchange := true ;
20527: LD_ADDR_EXP 107
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 31 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 31
20542: EQUAL
20543: IFFALSE 20553
// sFac := true ;
20545: LD_ADDR_EXP 108
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 32 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 32
20560: EQUAL
20561: IFFALSE 20571
// sPower := true ;
20563: LD_ADDR_EXP 109
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 33 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 33
20578: EQUAL
20579: IFFALSE 20589
// sRandom := true ;
20581: LD_ADDR_EXP 110
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 34 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 34
20596: EQUAL
20597: IFFALSE 20607
// sShield := true ;
20599: LD_ADDR_EXP 111
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 35 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 35
20614: EQUAL
20615: IFFALSE 20625
// sTime := true ;
20617: LD_ADDR_EXP 112
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 36 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 36
20632: EQUAL
20633: IFFALSE 20643
// sTools := true ;
20635: LD_ADDR_EXP 113
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 101 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 101
20650: EQUAL
20651: IFFALSE 20661
// sSold := true ;
20653: LD_ADDR_EXP 78
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 102 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 102
20668: EQUAL
20669: IFFALSE 20679
// sDiff := true ;
20671: LD_ADDR_EXP 79
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 103 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 103
20686: EQUAL
20687: IFFALSE 20697
// sFog := true ;
20689: LD_ADDR_EXP 82
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// if p3 = 104 then
20697: LD_VAR 0 3
20701: PUSH
20702: LD_INT 104
20704: EQUAL
20705: IFFALSE 20715
// sReset := true ;
20707: LD_ADDR_EXP 83
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// if p3 = 105 then
20715: LD_VAR 0 3
20719: PUSH
20720: LD_INT 105
20722: EQUAL
20723: IFFALSE 20733
// sSun := true ;
20725: LD_ADDR_EXP 84
20729: PUSH
20730: LD_INT 1
20732: ST_TO_ADDR
// if p3 = 106 then
20733: LD_VAR 0 3
20737: PUSH
20738: LD_INT 106
20740: EQUAL
20741: IFFALSE 20751
// sTiger := true ;
20743: LD_ADDR_EXP 80
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// if p3 = 107 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 107
20758: EQUAL
20759: IFFALSE 20769
// sBomb := true ;
20761: LD_ADDR_EXP 81
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 108 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 108
20776: EQUAL
20777: IFFALSE 20787
// sWound := true ;
20779: LD_ADDR_EXP 89
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 109 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 109
20794: EQUAL
20795: IFFALSE 20805
// sBetray := true ;
20797: LD_ADDR_EXP 93
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// if p3 = 110 then
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 110
20812: EQUAL
20813: IFFALSE 20823
// sContamin := true ;
20815: LD_ADDR_EXP 94
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// if p3 = 111 then
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 111
20830: EQUAL
20831: IFFALSE 20841
// sOil := true ;
20833: LD_ADDR_EXP 96
20837: PUSH
20838: LD_INT 1
20840: ST_TO_ADDR
// if p3 = 112 then
20841: LD_VAR 0 3
20845: PUSH
20846: LD_INT 112
20848: EQUAL
20849: IFFALSE 20859
// sStu := true ;
20851: LD_ADDR_EXP 100
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// if p3 = 113 then
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 113
20866: EQUAL
20867: IFFALSE 20877
// sBazooka := true ;
20869: LD_ADDR_EXP 103
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if p3 = 114 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_INT 114
20884: EQUAL
20885: IFFALSE 20895
// sMortar := true ;
20887: LD_ADDR_EXP 104
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// if p3 = 115 then
20895: LD_VAR 0 3
20899: PUSH
20900: LD_INT 115
20902: EQUAL
20903: IFFALSE 20913
// sRanger := true ;
20905: LD_ADDR_EXP 114
20909: PUSH
20910: LD_INT 1
20912: ST_TO_ADDR
// if p3 = 116 then
20913: LD_VAR 0 3
20917: PUSH
20918: LD_INT 116
20920: EQUAL
20921: IFFALSE 20931
// sComputer := true ;
20923: LD_ADDR_EXP 115
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// if p3 = 117 then
20931: LD_VAR 0 3
20935: PUSH
20936: LD_INT 117
20938: EQUAL
20939: IFFALSE 20949
// s30 := true ;
20941: LD_ADDR_EXP 116
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// if p3 = 118 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_INT 118
20956: EQUAL
20957: IFFALSE 20967
// s60 := true ;
20959: LD_ADDR_EXP 117
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
// end ; if p2 = hack_mode then
20967: LD_VAR 0 2
20971: PUSH
20972: LD_INT 101
20974: EQUAL
20975: IFFALSE 21103
// begin case p3 of 1 :
20977: LD_VAR 0 3
20981: PUSH
20982: LD_INT 1
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 20997
20990: POP
// hHackUnlimitedResources ; 2 :
20991: CALL 33250 0 0
20995: GO 21103
20997: LD_INT 2
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21012
21005: POP
// hHackSetLevel10 ; 3 :
21006: CALL 33383 0 0
21010: GO 21103
21012: LD_INT 3
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21027
21020: POP
// hHackSetLevel10YourUnits ; 4 :
21021: CALL 33468 0 0
21025: GO 21103
21027: LD_INT 4
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21042
21035: POP
// hHackInvincible ; 5 :
21036: CALL 33916 0 0
21040: GO 21103
21042: LD_INT 5
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21057
21050: POP
// hHackInvisible ; 6 :
21051: CALL 34027 0 0
21055: GO 21103
21057: LD_INT 6
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21072
21065: POP
// hHackChangeYourSide ; 7 :
21066: CALL 34084 0 0
21070: GO 21103
21072: LD_INT 7
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21087
21080: POP
// hHackChangeUnitSide ; 8 :
21081: CALL 34126 0 0
21085: GO 21103
21087: LD_INT 8
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21102
21095: POP
// hHackFog ; end ;
21096: CALL 34227 0 0
21100: GO 21103
21102: POP
// end ; if p2 = game_save_mode then
21103: LD_VAR 0 2
21107: PUSH
21108: LD_INT 102
21110: EQUAL
21111: IFFALSE 21166
// begin if p3 = 1 then
21113: LD_VAR 0 3
21117: PUSH
21118: LD_INT 1
21120: EQUAL
21121: IFFALSE 21133
// globalGameSaveCounter := p4 ;
21123: LD_ADDR_EXP 60
21127: PUSH
21128: LD_VAR 0 4
21132: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 2
21140: EQUAL
21141: PUSH
21142: LD_EXP 60
21146: AND
21147: IFFALSE 21166
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21149: LD_STRING setGameSaveCounter(
21151: PUSH
21152: LD_EXP 60
21156: STR
21157: PUSH
21158: LD_STRING )
21160: STR
21161: PPUSH
21162: CALL_OW 559
// end ; end ;
21166: LD_VAR 0 7
21170: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21171: LD_INT 0
21173: PPUSH
// streamModeActive := false ;
21174: LD_ADDR_EXP 61
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// normalCounter := 36 ;
21182: LD_ADDR_EXP 62
21186: PUSH
21187: LD_INT 36
21189: ST_TO_ADDR
// hardcoreCounter := 18 ;
21190: LD_ADDR_EXP 63
21194: PUSH
21195: LD_INT 18
21197: ST_TO_ADDR
// sRocket := false ;
21198: LD_ADDR_EXP 66
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sSpeed := false ;
21206: LD_ADDR_EXP 65
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sEngine := false ;
21214: LD_ADDR_EXP 67
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sSpec := false ;
21222: LD_ADDR_EXP 64
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sLevel := false ;
21230: LD_ADDR_EXP 68
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sArmoury := false ;
21238: LD_ADDR_EXP 69
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sRadar := false ;
21246: LD_ADDR_EXP 70
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sBunker := false ;
21254: LD_ADDR_EXP 71
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sHack := false ;
21262: LD_ADDR_EXP 72
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sFire := false ;
21270: LD_ADDR_EXP 73
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sRefresh := false ;
21278: LD_ADDR_EXP 74
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sExp := false ;
21286: LD_ADDR_EXP 75
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sDepot := false ;
21294: LD_ADDR_EXP 76
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sFlag := false ;
21302: LD_ADDR_EXP 77
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sKamikadze := false ;
21310: LD_ADDR_EXP 85
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sTroll := false ;
21318: LD_ADDR_EXP 86
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sSlow := false ;
21326: LD_ADDR_EXP 87
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sLack := false ;
21334: LD_ADDR_EXP 88
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sTank := false ;
21342: LD_ADDR_EXP 90
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sRemote := false ;
21350: LD_ADDR_EXP 91
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sPowell := false ;
21358: LD_ADDR_EXP 92
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sTeleport := false ;
21366: LD_ADDR_EXP 95
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sOilTower := false ;
21374: LD_ADDR_EXP 97
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sShovel := false ;
21382: LD_ADDR_EXP 98
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sSheik := false ;
21390: LD_ADDR_EXP 99
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sEarthquake := false ;
21398: LD_ADDR_EXP 101
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sAI := false ;
21406: LD_ADDR_EXP 102
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sCargo := false ;
21414: LD_ADDR_EXP 105
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sDLaser := false ;
21422: LD_ADDR_EXP 106
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sExchange := false ;
21430: LD_ADDR_EXP 107
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sFac := false ;
21438: LD_ADDR_EXP 108
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sPower := false ;
21446: LD_ADDR_EXP 109
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sRandom := false ;
21454: LD_ADDR_EXP 110
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sShield := false ;
21462: LD_ADDR_EXP 111
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sTime := false ;
21470: LD_ADDR_EXP 112
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sTools := false ;
21478: LD_ADDR_EXP 113
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sSold := false ;
21486: LD_ADDR_EXP 78
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sDiff := false ;
21494: LD_ADDR_EXP 79
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sFog := false ;
21502: LD_ADDR_EXP 82
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sReset := false ;
21510: LD_ADDR_EXP 83
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sSun := false ;
21518: LD_ADDR_EXP 84
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sTiger := false ;
21526: LD_ADDR_EXP 80
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sBomb := false ;
21534: LD_ADDR_EXP 81
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sWound := false ;
21542: LD_ADDR_EXP 89
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sBetray := false ;
21550: LD_ADDR_EXP 93
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sContamin := false ;
21558: LD_ADDR_EXP 94
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sOil := false ;
21566: LD_ADDR_EXP 96
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sStu := false ;
21574: LD_ADDR_EXP 100
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sBazooka := false ;
21582: LD_ADDR_EXP 103
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sMortar := false ;
21590: LD_ADDR_EXP 104
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sRanger := false ;
21598: LD_ADDR_EXP 114
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sComputer := false ;
21606: LD_ADDR_EXP 115
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// s30 := false ;
21614: LD_ADDR_EXP 116
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// s60 := false ;
21622: LD_ADDR_EXP 117
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// end ;
21630: LD_VAR 0 1
21634: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
// result := [ ] ;
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: EMPTY
21650: ST_TO_ADDR
// if campaign_id = 1 then
21651: LD_OWVAR 69
21655: PUSH
21656: LD_INT 1
21658: EQUAL
21659: IFFALSE 24825
// begin case mission_number of 1 :
21661: LD_OWVAR 70
21665: PUSH
21666: LD_INT 1
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21750
21674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 4
21685: PUSH
21686: LD_INT 11
21688: PUSH
21689: LD_INT 12
21691: PUSH
21692: LD_INT 15
21694: PUSH
21695: LD_INT 16
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_INT 23
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 101
21720: PUSH
21721: LD_INT 102
21723: PUSH
21724: LD_INT 106
21726: PUSH
21727: LD_INT 116
21729: PUSH
21730: LD_INT 117
21732: PUSH
21733: LD_INT 118
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: ST_TO_ADDR
21748: GO 24823
21750: LD_INT 2
21752: DOUBLE
21753: EQUAL
21754: IFTRUE 21758
21756: GO 21842
21758: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21759: LD_ADDR_VAR 0 2
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 4
21769: PUSH
21770: LD_INT 11
21772: PUSH
21773: LD_INT 12
21775: PUSH
21776: LD_INT 15
21778: PUSH
21779: LD_INT 16
21781: PUSH
21782: LD_INT 22
21784: PUSH
21785: LD_INT 23
21787: PUSH
21788: LD_INT 26
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 101
21804: PUSH
21805: LD_INT 102
21807: PUSH
21808: LD_INT 105
21810: PUSH
21811: LD_INT 106
21813: PUSH
21814: LD_INT 108
21816: PUSH
21817: LD_INT 116
21819: PUSH
21820: LD_INT 117
21822: PUSH
21823: LD_INT 118
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: ST_TO_ADDR
21840: GO 24823
21842: LD_INT 3
21844: DOUBLE
21845: EQUAL
21846: IFTRUE 21850
21848: GO 21938
21850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 4
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: LD_INT 11
21867: PUSH
21868: LD_INT 12
21870: PUSH
21871: LD_INT 15
21873: PUSH
21874: LD_INT 16
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 26
21882: PUSH
21883: LD_INT 36
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 101
21900: PUSH
21901: LD_INT 102
21903: PUSH
21904: LD_INT 105
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 108
21912: PUSH
21913: LD_INT 116
21915: PUSH
21916: LD_INT 117
21918: PUSH
21919: LD_INT 118
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: ST_TO_ADDR
21936: GO 24823
21938: LD_INT 4
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 22042
21946: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: LD_INT 4
21957: PUSH
21958: LD_INT 5
21960: PUSH
21961: LD_INT 8
21963: PUSH
21964: LD_INT 11
21966: PUSH
21967: LD_INT 12
21969: PUSH
21970: LD_INT 15
21972: PUSH
21973: LD_INT 16
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 101
22004: PUSH
22005: LD_INT 102
22007: PUSH
22008: LD_INT 105
22010: PUSH
22011: LD_INT 106
22013: PUSH
22014: LD_INT 108
22016: PUSH
22017: LD_INT 116
22019: PUSH
22020: LD_INT 117
22022: PUSH
22023: LD_INT 118
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 24823
22042: LD_INT 5
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22162
22050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 4
22061: PUSH
22062: LD_INT 5
22064: PUSH
22065: LD_INT 6
22067: PUSH
22068: LD_INT 8
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 23
22088: PUSH
22089: LD_INT 25
22091: PUSH
22092: LD_INT 26
22094: PUSH
22095: LD_INT 36
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 101
22116: PUSH
22117: LD_INT 102
22119: PUSH
22120: LD_INT 105
22122: PUSH
22123: LD_INT 106
22125: PUSH
22126: LD_INT 108
22128: PUSH
22129: LD_INT 109
22131: PUSH
22132: LD_INT 112
22134: PUSH
22135: LD_INT 116
22137: PUSH
22138: LD_INT 117
22140: PUSH
22141: LD_INT 118
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: ST_TO_ADDR
22160: GO 24823
22162: LD_INT 6
22164: DOUBLE
22165: EQUAL
22166: IFTRUE 22170
22168: GO 22302
22170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22171: LD_ADDR_VAR 0 2
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 4
22181: PUSH
22182: LD_INT 5
22184: PUSH
22185: LD_INT 6
22187: PUSH
22188: LD_INT 8
22190: PUSH
22191: LD_INT 11
22193: PUSH
22194: LD_INT 12
22196: PUSH
22197: LD_INT 15
22199: PUSH
22200: LD_INT 16
22202: PUSH
22203: LD_INT 20
22205: PUSH
22206: LD_INT 21
22208: PUSH
22209: LD_INT 22
22211: PUSH
22212: LD_INT 23
22214: PUSH
22215: LD_INT 25
22217: PUSH
22218: LD_INT 26
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 31
22226: PUSH
22227: LD_INT 32
22229: PUSH
22230: LD_INT 36
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 101
22256: PUSH
22257: LD_INT 102
22259: PUSH
22260: LD_INT 105
22262: PUSH
22263: LD_INT 106
22265: PUSH
22266: LD_INT 108
22268: PUSH
22269: LD_INT 109
22271: PUSH
22272: LD_INT 112
22274: PUSH
22275: LD_INT 116
22277: PUSH
22278: LD_INT 117
22280: PUSH
22281: LD_INT 118
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 24823
22302: LD_INT 7
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22422
22310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 7
22327: PUSH
22328: LD_INT 11
22330: PUSH
22331: LD_INT 12
22333: PUSH
22334: LD_INT 15
22336: PUSH
22337: LD_INT 16
22339: PUSH
22340: LD_INT 20
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 22
22348: PUSH
22349: LD_INT 23
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 101
22376: PUSH
22377: LD_INT 102
22379: PUSH
22380: LD_INT 103
22382: PUSH
22383: LD_INT 105
22385: PUSH
22386: LD_INT 106
22388: PUSH
22389: LD_INT 108
22391: PUSH
22392: LD_INT 112
22394: PUSH
22395: LD_INT 116
22397: PUSH
22398: LD_INT 117
22400: PUSH
22401: LD_INT 118
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: ST_TO_ADDR
22420: GO 24823
22422: LD_INT 8
22424: DOUBLE
22425: EQUAL
22426: IFTRUE 22430
22428: GO 22570
22430: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 4
22441: PUSH
22442: LD_INT 5
22444: PUSH
22445: LD_INT 6
22447: PUSH
22448: LD_INT 7
22450: PUSH
22451: LD_INT 8
22453: PUSH
22454: LD_INT 11
22456: PUSH
22457: LD_INT 12
22459: PUSH
22460: LD_INT 15
22462: PUSH
22463: LD_INT 16
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 25
22480: PUSH
22481: LD_INT 26
22483: PUSH
22484: LD_INT 30
22486: PUSH
22487: LD_INT 31
22489: PUSH
22490: LD_INT 32
22492: PUSH
22493: LD_INT 36
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 101
22520: PUSH
22521: LD_INT 102
22523: PUSH
22524: LD_INT 103
22526: PUSH
22527: LD_INT 105
22529: PUSH
22530: LD_INT 106
22532: PUSH
22533: LD_INT 108
22535: PUSH
22536: LD_INT 109
22538: PUSH
22539: LD_INT 112
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: ST_TO_ADDR
22568: GO 24823
22570: LD_INT 9
22572: DOUBLE
22573: EQUAL
22574: IFTRUE 22578
22576: GO 22726
22578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 4
22589: PUSH
22590: LD_INT 5
22592: PUSH
22593: LD_INT 6
22595: PUSH
22596: LD_INT 7
22598: PUSH
22599: LD_INT 8
22601: PUSH
22602: LD_INT 11
22604: PUSH
22605: LD_INT 12
22607: PUSH
22608: LD_INT 15
22610: PUSH
22611: LD_INT 16
22613: PUSH
22614: LD_INT 20
22616: PUSH
22617: LD_INT 21
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_INT 23
22625: PUSH
22626: LD_INT 25
22628: PUSH
22629: LD_INT 26
22631: PUSH
22632: LD_INT 28
22634: PUSH
22635: LD_INT 30
22637: PUSH
22638: LD_INT 31
22640: PUSH
22641: LD_INT 32
22643: PUSH
22644: LD_INT 36
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 101
22672: PUSH
22673: LD_INT 102
22675: PUSH
22676: LD_INT 103
22678: PUSH
22679: LD_INT 105
22681: PUSH
22682: LD_INT 106
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 112
22693: PUSH
22694: LD_INT 114
22696: PUSH
22697: LD_INT 116
22699: PUSH
22700: LD_INT 117
22702: PUSH
22703: LD_INT 118
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: ST_TO_ADDR
22724: GO 24823
22726: LD_INT 10
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22930
22734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22735: LD_ADDR_VAR 0 2
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: LD_INT 4
22745: PUSH
22746: LD_INT 5
22748: PUSH
22749: LD_INT 6
22751: PUSH
22752: LD_INT 7
22754: PUSH
22755: LD_INT 8
22757: PUSH
22758: LD_INT 9
22760: PUSH
22761: LD_INT 10
22763: PUSH
22764: LD_INT 11
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 13
22772: PUSH
22773: LD_INT 14
22775: PUSH
22776: LD_INT 15
22778: PUSH
22779: LD_INT 16
22781: PUSH
22782: LD_INT 17
22784: PUSH
22785: LD_INT 18
22787: PUSH
22788: LD_INT 19
22790: PUSH
22791: LD_INT 20
22793: PUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 22
22799: PUSH
22800: LD_INT 23
22802: PUSH
22803: LD_INT 24
22805: PUSH
22806: LD_INT 25
22808: PUSH
22809: LD_INT 26
22811: PUSH
22812: LD_INT 28
22814: PUSH
22815: LD_INT 30
22817: PUSH
22818: LD_INT 31
22820: PUSH
22821: LD_INT 32
22823: PUSH
22824: LD_INT 36
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 101
22860: PUSH
22861: LD_INT 102
22863: PUSH
22864: LD_INT 103
22866: PUSH
22867: LD_INT 104
22869: PUSH
22870: LD_INT 105
22872: PUSH
22873: LD_INT 106
22875: PUSH
22876: LD_INT 107
22878: PUSH
22879: LD_INT 108
22881: PUSH
22882: LD_INT 109
22884: PUSH
22885: LD_INT 110
22887: PUSH
22888: LD_INT 111
22890: PUSH
22891: LD_INT 112
22893: PUSH
22894: LD_INT 114
22896: PUSH
22897: LD_INT 116
22899: PUSH
22900: LD_INT 117
22902: PUSH
22903: LD_INT 118
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: ST_TO_ADDR
22928: GO 24823
22930: LD_INT 11
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 23142
22938: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 4
22952: PUSH
22953: LD_INT 5
22955: PUSH
22956: LD_INT 6
22958: PUSH
22959: LD_INT 7
22961: PUSH
22962: LD_INT 8
22964: PUSH
22965: LD_INT 9
22967: PUSH
22968: LD_INT 10
22970: PUSH
22971: LD_INT 11
22973: PUSH
22974: LD_INT 12
22976: PUSH
22977: LD_INT 13
22979: PUSH
22980: LD_INT 14
22982: PUSH
22983: LD_INT 15
22985: PUSH
22986: LD_INT 16
22988: PUSH
22989: LD_INT 17
22991: PUSH
22992: LD_INT 18
22994: PUSH
22995: LD_INT 19
22997: PUSH
22998: LD_INT 20
23000: PUSH
23001: LD_INT 21
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_INT 23
23009: PUSH
23010: LD_INT 24
23012: PUSH
23013: LD_INT 25
23015: PUSH
23016: LD_INT 26
23018: PUSH
23019: LD_INT 28
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 31
23027: PUSH
23028: LD_INT 32
23030: PUSH
23031: LD_INT 34
23033: PUSH
23034: LD_INT 36
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 101
23072: PUSH
23073: LD_INT 102
23075: PUSH
23076: LD_INT 103
23078: PUSH
23079: LD_INT 104
23081: PUSH
23082: LD_INT 105
23084: PUSH
23085: LD_INT 106
23087: PUSH
23088: LD_INT 107
23090: PUSH
23091: LD_INT 108
23093: PUSH
23094: LD_INT 109
23096: PUSH
23097: LD_INT 110
23099: PUSH
23100: LD_INT 111
23102: PUSH
23103: LD_INT 112
23105: PUSH
23106: LD_INT 114
23108: PUSH
23109: LD_INT 116
23111: PUSH
23112: LD_INT 117
23114: PUSH
23115: LD_INT 118
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: ST_TO_ADDR
23140: GO 24823
23142: LD_INT 12
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23370
23150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: LD_INT 4
23167: PUSH
23168: LD_INT 5
23170: PUSH
23171: LD_INT 6
23173: PUSH
23174: LD_INT 7
23176: PUSH
23177: LD_INT 8
23179: PUSH
23180: LD_INT 9
23182: PUSH
23183: LD_INT 10
23185: PUSH
23186: LD_INT 11
23188: PUSH
23189: LD_INT 12
23191: PUSH
23192: LD_INT 13
23194: PUSH
23195: LD_INT 14
23197: PUSH
23198: LD_INT 15
23200: PUSH
23201: LD_INT 16
23203: PUSH
23204: LD_INT 17
23206: PUSH
23207: LD_INT 18
23209: PUSH
23210: LD_INT 19
23212: PUSH
23213: LD_INT 20
23215: PUSH
23216: LD_INT 21
23218: PUSH
23219: LD_INT 22
23221: PUSH
23222: LD_INT 23
23224: PUSH
23225: LD_INT 24
23227: PUSH
23228: LD_INT 25
23230: PUSH
23231: LD_INT 26
23233: PUSH
23234: LD_INT 27
23236: PUSH
23237: LD_INT 28
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 31
23245: PUSH
23246: LD_INT 32
23248: PUSH
23249: LD_INT 33
23251: PUSH
23252: LD_INT 34
23254: PUSH
23255: LD_INT 36
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 101
23296: PUSH
23297: LD_INT 102
23299: PUSH
23300: LD_INT 103
23302: PUSH
23303: LD_INT 104
23305: PUSH
23306: LD_INT 105
23308: PUSH
23309: LD_INT 106
23311: PUSH
23312: LD_INT 107
23314: PUSH
23315: LD_INT 108
23317: PUSH
23318: LD_INT 109
23320: PUSH
23321: LD_INT 110
23323: PUSH
23324: LD_INT 111
23326: PUSH
23327: LD_INT 112
23329: PUSH
23330: LD_INT 113
23332: PUSH
23333: LD_INT 114
23335: PUSH
23336: LD_INT 116
23338: PUSH
23339: LD_INT 117
23341: PUSH
23342: LD_INT 118
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: ST_TO_ADDR
23368: GO 24823
23370: LD_INT 13
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23586
23378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23379: LD_ADDR_VAR 0 2
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 3
23392: PUSH
23393: LD_INT 4
23395: PUSH
23396: LD_INT 5
23398: PUSH
23399: LD_INT 8
23401: PUSH
23402: LD_INT 9
23404: PUSH
23405: LD_INT 10
23407: PUSH
23408: LD_INT 11
23410: PUSH
23411: LD_INT 12
23413: PUSH
23414: LD_INT 14
23416: PUSH
23417: LD_INT 15
23419: PUSH
23420: LD_INT 16
23422: PUSH
23423: LD_INT 17
23425: PUSH
23426: LD_INT 18
23428: PUSH
23429: LD_INT 19
23431: PUSH
23432: LD_INT 20
23434: PUSH
23435: LD_INT 21
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_INT 23
23443: PUSH
23444: LD_INT 24
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 26
23452: PUSH
23453: LD_INT 27
23455: PUSH
23456: LD_INT 28
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 31
23464: PUSH
23465: LD_INT 32
23467: PUSH
23468: LD_INT 33
23470: PUSH
23471: LD_INT 34
23473: PUSH
23474: LD_INT 36
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 101
23512: PUSH
23513: LD_INT 102
23515: PUSH
23516: LD_INT 103
23518: PUSH
23519: LD_INT 104
23521: PUSH
23522: LD_INT 105
23524: PUSH
23525: LD_INT 106
23527: PUSH
23528: LD_INT 107
23530: PUSH
23531: LD_INT 108
23533: PUSH
23534: LD_INT 109
23536: PUSH
23537: LD_INT 110
23539: PUSH
23540: LD_INT 111
23542: PUSH
23543: LD_INT 112
23545: PUSH
23546: LD_INT 113
23548: PUSH
23549: LD_INT 114
23551: PUSH
23552: LD_INT 116
23554: PUSH
23555: LD_INT 117
23557: PUSH
23558: LD_INT 118
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: ST_TO_ADDR
23584: GO 24823
23586: LD_INT 14
23588: DOUBLE
23589: EQUAL
23590: IFTRUE 23594
23592: GO 23818
23594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23595: LD_ADDR_VAR 0 2
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: LD_INT 4
23611: PUSH
23612: LD_INT 5
23614: PUSH
23615: LD_INT 6
23617: PUSH
23618: LD_INT 7
23620: PUSH
23621: LD_INT 8
23623: PUSH
23624: LD_INT 9
23626: PUSH
23627: LD_INT 10
23629: PUSH
23630: LD_INT 11
23632: PUSH
23633: LD_INT 12
23635: PUSH
23636: LD_INT 13
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 17
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: LD_INT 19
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: LD_INT 25
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 27
23680: PUSH
23681: LD_INT 28
23683: PUSH
23684: LD_INT 29
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 31
23692: PUSH
23693: LD_INT 32
23695: PUSH
23696: LD_INT 33
23698: PUSH
23699: LD_INT 34
23701: PUSH
23702: LD_INT 36
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 101
23744: PUSH
23745: LD_INT 102
23747: PUSH
23748: LD_INT 103
23750: PUSH
23751: LD_INT 104
23753: PUSH
23754: LD_INT 105
23756: PUSH
23757: LD_INT 106
23759: PUSH
23760: LD_INT 107
23762: PUSH
23763: LD_INT 108
23765: PUSH
23766: LD_INT 109
23768: PUSH
23769: LD_INT 110
23771: PUSH
23772: LD_INT 111
23774: PUSH
23775: LD_INT 112
23777: PUSH
23778: LD_INT 113
23780: PUSH
23781: LD_INT 114
23783: PUSH
23784: LD_INT 116
23786: PUSH
23787: LD_INT 117
23789: PUSH
23790: LD_INT 118
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: ST_TO_ADDR
23816: GO 24823
23818: LD_INT 15
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 24050
23826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23827: LD_ADDR_VAR 0 2
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 3
23840: PUSH
23841: LD_INT 4
23843: PUSH
23844: LD_INT 5
23846: PUSH
23847: LD_INT 6
23849: PUSH
23850: LD_INT 7
23852: PUSH
23853: LD_INT 8
23855: PUSH
23856: LD_INT 9
23858: PUSH
23859: LD_INT 10
23861: PUSH
23862: LD_INT 11
23864: PUSH
23865: LD_INT 12
23867: PUSH
23868: LD_INT 13
23870: PUSH
23871: LD_INT 14
23873: PUSH
23874: LD_INT 15
23876: PUSH
23877: LD_INT 16
23879: PUSH
23880: LD_INT 17
23882: PUSH
23883: LD_INT 18
23885: PUSH
23886: LD_INT 19
23888: PUSH
23889: LD_INT 20
23891: PUSH
23892: LD_INT 21
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_INT 23
23900: PUSH
23901: LD_INT 24
23903: PUSH
23904: LD_INT 25
23906: PUSH
23907: LD_INT 26
23909: PUSH
23910: LD_INT 27
23912: PUSH
23913: LD_INT 28
23915: PUSH
23916: LD_INT 29
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 31
23924: PUSH
23925: LD_INT 32
23927: PUSH
23928: LD_INT 33
23930: PUSH
23931: LD_INT 34
23933: PUSH
23934: LD_INT 36
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 101
23976: PUSH
23977: LD_INT 102
23979: PUSH
23980: LD_INT 103
23982: PUSH
23983: LD_INT 104
23985: PUSH
23986: LD_INT 105
23988: PUSH
23989: LD_INT 106
23991: PUSH
23992: LD_INT 107
23994: PUSH
23995: LD_INT 108
23997: PUSH
23998: LD_INT 109
24000: PUSH
24001: LD_INT 110
24003: PUSH
24004: LD_INT 111
24006: PUSH
24007: LD_INT 112
24009: PUSH
24010: LD_INT 113
24012: PUSH
24013: LD_INT 114
24015: PUSH
24016: LD_INT 116
24018: PUSH
24019: LD_INT 117
24021: PUSH
24022: LD_INT 118
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24823
24050: LD_INT 16
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24194
24058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 4
24069: PUSH
24070: LD_INT 5
24072: PUSH
24073: LD_INT 7
24075: PUSH
24076: LD_INT 11
24078: PUSH
24079: LD_INT 12
24081: PUSH
24082: LD_INT 15
24084: PUSH
24085: LD_INT 16
24087: PUSH
24088: LD_INT 20
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 23
24099: PUSH
24100: LD_INT 25
24102: PUSH
24103: LD_INT 26
24105: PUSH
24106: LD_INT 30
24108: PUSH
24109: LD_INT 31
24111: PUSH
24112: LD_INT 32
24114: PUSH
24115: LD_INT 33
24117: PUSH
24118: LD_INT 34
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 101
24144: PUSH
24145: LD_INT 102
24147: PUSH
24148: LD_INT 103
24150: PUSH
24151: LD_INT 106
24153: PUSH
24154: LD_INT 108
24156: PUSH
24157: LD_INT 112
24159: PUSH
24160: LD_INT 113
24162: PUSH
24163: LD_INT 114
24165: PUSH
24166: LD_INT 116
24168: PUSH
24169: LD_INT 117
24171: PUSH
24172: LD_INT 118
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: ST_TO_ADDR
24192: GO 24823
24194: LD_INT 17
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24426
24202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24203: LD_ADDR_VAR 0 2
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 4
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: LD_INT 6
24225: PUSH
24226: LD_INT 7
24228: PUSH
24229: LD_INT 8
24231: PUSH
24232: LD_INT 9
24234: PUSH
24235: LD_INT 10
24237: PUSH
24238: LD_INT 11
24240: PUSH
24241: LD_INT 12
24243: PUSH
24244: LD_INT 13
24246: PUSH
24247: LD_INT 14
24249: PUSH
24250: LD_INT 15
24252: PUSH
24253: LD_INT 16
24255: PUSH
24256: LD_INT 17
24258: PUSH
24259: LD_INT 18
24261: PUSH
24262: LD_INT 19
24264: PUSH
24265: LD_INT 20
24267: PUSH
24268: LD_INT 21
24270: PUSH
24271: LD_INT 22
24273: PUSH
24274: LD_INT 23
24276: PUSH
24277: LD_INT 24
24279: PUSH
24280: LD_INT 25
24282: PUSH
24283: LD_INT 26
24285: PUSH
24286: LD_INT 27
24288: PUSH
24289: LD_INT 28
24291: PUSH
24292: LD_INT 29
24294: PUSH
24295: LD_INT 30
24297: PUSH
24298: LD_INT 31
24300: PUSH
24301: LD_INT 32
24303: PUSH
24304: LD_INT 33
24306: PUSH
24307: LD_INT 34
24309: PUSH
24310: LD_INT 36
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 101
24352: PUSH
24353: LD_INT 102
24355: PUSH
24356: LD_INT 103
24358: PUSH
24359: LD_INT 104
24361: PUSH
24362: LD_INT 105
24364: PUSH
24365: LD_INT 106
24367: PUSH
24368: LD_INT 107
24370: PUSH
24371: LD_INT 108
24373: PUSH
24374: LD_INT 109
24376: PUSH
24377: LD_INT 110
24379: PUSH
24380: LD_INT 111
24382: PUSH
24383: LD_INT 112
24385: PUSH
24386: LD_INT 113
24388: PUSH
24389: LD_INT 114
24391: PUSH
24392: LD_INT 116
24394: PUSH
24395: LD_INT 117
24397: PUSH
24398: LD_INT 118
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
24424: GO 24823
24426: LD_INT 18
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24582
24434: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 5
24448: PUSH
24449: LD_INT 7
24451: PUSH
24452: LD_INT 11
24454: PUSH
24455: LD_INT 12
24457: PUSH
24458: LD_INT 15
24460: PUSH
24461: LD_INT 16
24463: PUSH
24464: LD_INT 20
24466: PUSH
24467: LD_INT 21
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 23
24475: PUSH
24476: LD_INT 25
24478: PUSH
24479: LD_INT 26
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: LD_INT 31
24487: PUSH
24488: LD_INT 32
24490: PUSH
24491: LD_INT 33
24493: PUSH
24494: LD_INT 34
24496: PUSH
24497: LD_INT 35
24499: PUSH
24500: LD_INT 36
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 101
24528: PUSH
24529: LD_INT 102
24531: PUSH
24532: LD_INT 103
24534: PUSH
24535: LD_INT 106
24537: PUSH
24538: LD_INT 108
24540: PUSH
24541: LD_INT 112
24543: PUSH
24544: LD_INT 113
24546: PUSH
24547: LD_INT 114
24549: PUSH
24550: LD_INT 115
24552: PUSH
24553: LD_INT 116
24555: PUSH
24556: LD_INT 117
24558: PUSH
24559: LD_INT 118
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: ST_TO_ADDR
24580: GO 24823
24582: LD_INT 19
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24822
24590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: LD_INT 6
24613: PUSH
24614: LD_INT 7
24616: PUSH
24617: LD_INT 8
24619: PUSH
24620: LD_INT 9
24622: PUSH
24623: LD_INT 10
24625: PUSH
24626: LD_INT 11
24628: PUSH
24629: LD_INT 12
24631: PUSH
24632: LD_INT 13
24634: PUSH
24635: LD_INT 14
24637: PUSH
24638: LD_INT 15
24640: PUSH
24641: LD_INT 16
24643: PUSH
24644: LD_INT 17
24646: PUSH
24647: LD_INT 18
24649: PUSH
24650: LD_INT 19
24652: PUSH
24653: LD_INT 20
24655: PUSH
24656: LD_INT 21
24658: PUSH
24659: LD_INT 22
24661: PUSH
24662: LD_INT 23
24664: PUSH
24665: LD_INT 24
24667: PUSH
24668: LD_INT 25
24670: PUSH
24671: LD_INT 26
24673: PUSH
24674: LD_INT 27
24676: PUSH
24677: LD_INT 28
24679: PUSH
24680: LD_INT 29
24682: PUSH
24683: LD_INT 30
24685: PUSH
24686: LD_INT 31
24688: PUSH
24689: LD_INT 32
24691: PUSH
24692: LD_INT 33
24694: PUSH
24695: LD_INT 34
24697: PUSH
24698: LD_INT 35
24700: PUSH
24701: LD_INT 36
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 101
24744: PUSH
24745: LD_INT 102
24747: PUSH
24748: LD_INT 103
24750: PUSH
24751: LD_INT 104
24753: PUSH
24754: LD_INT 105
24756: PUSH
24757: LD_INT 106
24759: PUSH
24760: LD_INT 107
24762: PUSH
24763: LD_INT 108
24765: PUSH
24766: LD_INT 109
24768: PUSH
24769: LD_INT 110
24771: PUSH
24772: LD_INT 111
24774: PUSH
24775: LD_INT 112
24777: PUSH
24778: LD_INT 113
24780: PUSH
24781: LD_INT 114
24783: PUSH
24784: LD_INT 115
24786: PUSH
24787: LD_INT 116
24789: PUSH
24790: LD_INT 117
24792: PUSH
24793: LD_INT 118
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 24823
24822: POP
// end else
24823: GO 25054
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: LD_INT 4
24841: PUSH
24842: LD_INT 5
24844: PUSH
24845: LD_INT 6
24847: PUSH
24848: LD_INT 7
24850: PUSH
24851: LD_INT 8
24853: PUSH
24854: LD_INT 9
24856: PUSH
24857: LD_INT 10
24859: PUSH
24860: LD_INT 11
24862: PUSH
24863: LD_INT 12
24865: PUSH
24866: LD_INT 13
24868: PUSH
24869: LD_INT 14
24871: PUSH
24872: LD_INT 15
24874: PUSH
24875: LD_INT 16
24877: PUSH
24878: LD_INT 17
24880: PUSH
24881: LD_INT 18
24883: PUSH
24884: LD_INT 19
24886: PUSH
24887: LD_INT 20
24889: PUSH
24890: LD_INT 21
24892: PUSH
24893: LD_INT 22
24895: PUSH
24896: LD_INT 23
24898: PUSH
24899: LD_INT 24
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 26
24907: PUSH
24908: LD_INT 27
24910: PUSH
24911: LD_INT 28
24913: PUSH
24914: LD_INT 29
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 31
24922: PUSH
24923: LD_INT 32
24925: PUSH
24926: LD_INT 33
24928: PUSH
24929: LD_INT 34
24931: PUSH
24932: LD_INT 35
24934: PUSH
24935: LD_INT 36
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 101
24978: PUSH
24979: LD_INT 102
24981: PUSH
24982: LD_INT 103
24984: PUSH
24985: LD_INT 104
24987: PUSH
24988: LD_INT 105
24990: PUSH
24991: LD_INT 106
24993: PUSH
24994: LD_INT 107
24996: PUSH
24997: LD_INT 108
24999: PUSH
25000: LD_INT 109
25002: PUSH
25003: LD_INT 110
25005: PUSH
25006: LD_INT 111
25008: PUSH
25009: LD_INT 112
25011: PUSH
25012: LD_INT 113
25014: PUSH
25015: LD_INT 114
25017: PUSH
25018: LD_INT 115
25020: PUSH
25021: LD_INT 116
25023: PUSH
25024: LD_INT 117
25026: PUSH
25027: LD_INT 118
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// if result then
25054: LD_VAR 0 2
25058: IFFALSE 25844
// begin normal :=  ;
25060: LD_ADDR_VAR 0 5
25064: PUSH
25065: LD_STRING 
25067: ST_TO_ADDR
// hardcore :=  ;
25068: LD_ADDR_VAR 0 6
25072: PUSH
25073: LD_STRING 
25075: ST_TO_ADDR
// active :=  ;
25076: LD_ADDR_VAR 0 7
25080: PUSH
25081: LD_STRING 
25083: ST_TO_ADDR
// for i = 1 to normalCounter do
25084: LD_ADDR_VAR 0 8
25088: PUSH
25089: DOUBLE
25090: LD_INT 1
25092: DEC
25093: ST_TO_ADDR
25094: LD_EXP 62
25098: PUSH
25099: FOR_TO
25100: IFFALSE 25201
// begin tmp := 0 ;
25102: LD_ADDR_VAR 0 3
25106: PUSH
25107: LD_STRING 0
25109: ST_TO_ADDR
// if result [ 1 ] then
25110: LD_VAR 0 2
25114: PUSH
25115: LD_INT 1
25117: ARRAY
25118: IFFALSE 25183
// if result [ 1 ] [ 1 ] = i then
25120: LD_VAR 0 2
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PUSH
25133: LD_VAR 0 8
25137: EQUAL
25138: IFFALSE 25183
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: LD_VAR 0 2
25157: PUSH
25158: LD_INT 1
25160: ARRAY
25161: PPUSH
25162: LD_INT 1
25164: PPUSH
25165: CALL_OW 3
25169: PPUSH
25170: CALL_OW 1
25174: ST_TO_ADDR
// tmp := 1 ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_STRING 1
25182: ST_TO_ADDR
// end ; normal := normal & tmp ;
25183: LD_ADDR_VAR 0 5
25187: PUSH
25188: LD_VAR 0 5
25192: PUSH
25193: LD_VAR 0 3
25197: STR
25198: ST_TO_ADDR
// end ;
25199: GO 25099
25201: POP
25202: POP
// for i = 1 to hardcoreCounter do
25203: LD_ADDR_VAR 0 8
25207: PUSH
25208: DOUBLE
25209: LD_INT 1
25211: DEC
25212: ST_TO_ADDR
25213: LD_EXP 63
25217: PUSH
25218: FOR_TO
25219: IFFALSE 25324
// begin tmp := 0 ;
25221: LD_ADDR_VAR 0 3
25225: PUSH
25226: LD_STRING 0
25228: ST_TO_ADDR
// if result [ 2 ] then
25229: LD_VAR 0 2
25233: PUSH
25234: LD_INT 2
25236: ARRAY
25237: IFFALSE 25306
// if result [ 2 ] [ 1 ] = 100 + i then
25239: LD_VAR 0 2
25243: PUSH
25244: LD_INT 2
25246: ARRAY
25247: PUSH
25248: LD_INT 1
25250: ARRAY
25251: PUSH
25252: LD_INT 100
25254: PUSH
25255: LD_VAR 0 8
25259: PLUS
25260: EQUAL
25261: IFFALSE 25306
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 2
25272: PPUSH
25273: LD_INT 2
25275: PPUSH
25276: LD_VAR 0 2
25280: PUSH
25281: LD_INT 2
25283: ARRAY
25284: PPUSH
25285: LD_INT 1
25287: PPUSH
25288: CALL_OW 3
25292: PPUSH
25293: CALL_OW 1
25297: ST_TO_ADDR
// tmp := 1 ;
25298: LD_ADDR_VAR 0 3
25302: PUSH
25303: LD_STRING 1
25305: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25306: LD_ADDR_VAR 0 6
25310: PUSH
25311: LD_VAR 0 6
25315: PUSH
25316: LD_VAR 0 3
25320: STR
25321: ST_TO_ADDR
// end ;
25322: GO 25218
25324: POP
25325: POP
// if isGameLoad then
25326: LD_VAR 0 1
25330: IFFALSE 25805
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25332: LD_ADDR_VAR 0 4
25336: PUSH
25337: LD_EXP 66
25341: PUSH
25342: LD_EXP 65
25346: PUSH
25347: LD_EXP 67
25351: PUSH
25352: LD_EXP 64
25356: PUSH
25357: LD_EXP 68
25361: PUSH
25362: LD_EXP 69
25366: PUSH
25367: LD_EXP 70
25371: PUSH
25372: LD_EXP 71
25376: PUSH
25377: LD_EXP 72
25381: PUSH
25382: LD_EXP 73
25386: PUSH
25387: LD_EXP 74
25391: PUSH
25392: LD_EXP 75
25396: PUSH
25397: LD_EXP 76
25401: PUSH
25402: LD_EXP 77
25406: PUSH
25407: LD_EXP 85
25411: PUSH
25412: LD_EXP 86
25416: PUSH
25417: LD_EXP 87
25421: PUSH
25422: LD_EXP 88
25426: PUSH
25427: LD_EXP 90
25431: PUSH
25432: LD_EXP 91
25436: PUSH
25437: LD_EXP 92
25441: PUSH
25442: LD_EXP 95
25446: PUSH
25447: LD_EXP 97
25451: PUSH
25452: LD_EXP 98
25456: PUSH
25457: LD_EXP 99
25461: PUSH
25462: LD_EXP 101
25466: PUSH
25467: LD_EXP 102
25471: PUSH
25472: LD_EXP 105
25476: PUSH
25477: LD_EXP 106
25481: PUSH
25482: LD_EXP 107
25486: PUSH
25487: LD_EXP 108
25491: PUSH
25492: LD_EXP 109
25496: PUSH
25497: LD_EXP 110
25501: PUSH
25502: LD_EXP 111
25506: PUSH
25507: LD_EXP 112
25511: PUSH
25512: LD_EXP 113
25516: PUSH
25517: LD_EXP 78
25521: PUSH
25522: LD_EXP 79
25526: PUSH
25527: LD_EXP 82
25531: PUSH
25532: LD_EXP 83
25536: PUSH
25537: LD_EXP 84
25541: PUSH
25542: LD_EXP 80
25546: PUSH
25547: LD_EXP 81
25551: PUSH
25552: LD_EXP 89
25556: PUSH
25557: LD_EXP 93
25561: PUSH
25562: LD_EXP 94
25566: PUSH
25567: LD_EXP 96
25571: PUSH
25572: LD_EXP 100
25576: PUSH
25577: LD_EXP 103
25581: PUSH
25582: LD_EXP 104
25586: PUSH
25587: LD_EXP 114
25591: PUSH
25592: LD_EXP 115
25596: PUSH
25597: LD_EXP 116
25601: PUSH
25602: LD_EXP 117
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
// tmp :=  ;
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_STRING 
25670: ST_TO_ADDR
// for i = 1 to normalCounter do
25671: LD_ADDR_VAR 0 8
25675: PUSH
25676: DOUBLE
25677: LD_INT 1
25679: DEC
25680: ST_TO_ADDR
25681: LD_EXP 62
25685: PUSH
25686: FOR_TO
25687: IFFALSE 25723
// begin if flags [ i ] then
25689: LD_VAR 0 4
25693: PUSH
25694: LD_VAR 0 8
25698: ARRAY
25699: IFFALSE 25721
// tmp := tmp & i & ; ;
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_VAR 0 3
25710: PUSH
25711: LD_VAR 0 8
25715: STR
25716: PUSH
25717: LD_STRING ;
25719: STR
25720: ST_TO_ADDR
// end ;
25721: GO 25686
25723: POP
25724: POP
// for i = 1 to hardcoreCounter do
25725: LD_ADDR_VAR 0 8
25729: PUSH
25730: DOUBLE
25731: LD_INT 1
25733: DEC
25734: ST_TO_ADDR
25735: LD_EXP 63
25739: PUSH
25740: FOR_TO
25741: IFFALSE 25787
// begin if flags [ normalCounter + i ] then
25743: LD_VAR 0 4
25747: PUSH
25748: LD_EXP 62
25752: PUSH
25753: LD_VAR 0 8
25757: PLUS
25758: ARRAY
25759: IFFALSE 25785
// tmp := tmp & ( 100 + i ) & ; ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_VAR 0 3
25770: PUSH
25771: LD_INT 100
25773: PUSH
25774: LD_VAR 0 8
25778: PLUS
25779: STR
25780: PUSH
25781: LD_STRING ;
25783: STR
25784: ST_TO_ADDR
// end ;
25785: GO 25740
25787: POP
25788: POP
// if tmp then
25789: LD_VAR 0 3
25793: IFFALSE 25805
// active := tmp ;
25795: LD_ADDR_VAR 0 7
25799: PUSH
25800: LD_VAR 0 3
25804: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25805: LD_STRING getStreamItemsFromMission("
25807: PUSH
25808: LD_VAR 0 5
25812: STR
25813: PUSH
25814: LD_STRING ","
25816: STR
25817: PUSH
25818: LD_VAR 0 6
25822: STR
25823: PUSH
25824: LD_STRING ","
25826: STR
25827: PUSH
25828: LD_VAR 0 7
25832: STR
25833: PUSH
25834: LD_STRING ")
25836: STR
25837: PPUSH
25838: CALL_OW 559
// end else
25842: GO 25851
// ToLua ( getStreamItemsFromMission("","","") ) ;
25844: LD_STRING getStreamItemsFromMission("","","")
25846: PPUSH
25847: CALL_OW 559
// end ;
25851: LD_VAR 0 2
25855: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25856: LD_EXP 61
25860: PUSH
25861: LD_EXP 66
25865: AND
25866: IFFALSE 25990
25868: GO 25870
25870: DISABLE
25871: LD_INT 0
25873: PPUSH
25874: PPUSH
// begin enable ;
25875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25876: LD_ADDR_VAR 0 2
25880: PUSH
25881: LD_INT 22
25883: PUSH
25884: LD_OWVAR 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 7
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 45
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 28
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 34
25928: PUSH
25929: LD_INT 47
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25993: LD_EXP 61
25997: PUSH
25998: LD_EXP 67
26002: AND
26003: IFFALSE 26087
26005: GO 26007
26007: DISABLE
26008: LD_INT 0
26010: PPUSH
26011: PPUSH
// begin enable ;
26012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26013: LD_ADDR_VAR 0 2
26017: PUSH
26018: LD_INT 22
26020: PUSH
26021: LD_OWVAR 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 32
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 69
26048: ST_TO_ADDR
// if not tmp then
26049: LD_VAR 0 2
26053: NOT
26054: IFFALSE 26058
// exit ;
26056: GO 26087
// for i in tmp do
26058: LD_ADDR_VAR 0 1
26062: PUSH
26063: LD_VAR 0 2
26067: PUSH
26068: FOR_IN
26069: IFFALSE 26085
// begin SetLives ( i , 0 ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 0
26078: PPUSH
26079: CALL_OW 234
// end ;
26083: GO 26068
26085: POP
26086: POP
// end ;
26087: PPOPN 2
26089: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26090: LD_EXP 61
26094: PUSH
26095: LD_EXP 64
26099: AND
26100: IFFALSE 26193
26102: GO 26104
26104: DISABLE
26105: LD_INT 0
26107: PPUSH
// begin enable ;
26108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26109: LD_ADDR_VAR 0 1
26113: PUSH
26114: LD_INT 22
26116: PUSH
26117: LD_OWVAR 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 5
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 9
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 25
26151: PUSH
26152: LD_INT 8
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26191
// begin SetClass ( i , 1 ) ;
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: CALL_OW 336
// end ;
26189: GO 26174
26191: POP
26192: POP
// end ;
26193: PPOPN 1
26195: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26196: LD_EXP 61
26200: PUSH
26201: LD_EXP 65
26205: AND
26206: PUSH
26207: LD_OWVAR 65
26211: PUSH
26212: LD_INT 7
26214: LESS
26215: AND
26216: IFFALSE 26230
26218: GO 26220
26220: DISABLE
// begin enable ;
26221: ENABLE
// game_speed := 7 ;
26222: LD_ADDR_OWVAR 65
26226: PUSH
26227: LD_INT 7
26229: ST_TO_ADDR
// end ;
26230: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26231: LD_EXP 61
26235: PUSH
26236: LD_EXP 68
26240: AND
26241: IFFALSE 26443
26243: GO 26245
26245: DISABLE
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
26250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 81
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 3
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26443
// if tmp > 5 then
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 5
26303: GREATER
26304: IFFALSE 26316
// k := 5 else
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_INT 5
26313: ST_TO_ADDR
26314: GO 26326
// k := tmp ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 3
26325: ST_TO_ADDR
// for i := 1 to k do
26326: LD_ADDR_VAR 0 1
26330: PUSH
26331: DOUBLE
26332: LD_INT 1
26334: DEC
26335: ST_TO_ADDR
26336: LD_VAR 0 2
26340: PUSH
26341: FOR_TO
26342: IFFALSE 26441
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 1
26353: ARRAY
26354: PPUSH
26355: LD_VAR 0 1
26359: PUSH
26360: LD_INT 4
26362: MOD
26363: PUSH
26364: LD_INT 1
26366: PLUS
26367: PPUSH
26368: CALL_OW 259
26372: PUSH
26373: LD_INT 10
26375: LESS
26376: IFFALSE 26439
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26378: LD_VAR 0 3
26382: PUSH
26383: LD_VAR 0 1
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 1
26393: PUSH
26394: LD_INT 4
26396: MOD
26397: PUSH
26398: LD_INT 1
26400: PLUS
26401: PPUSH
26402: LD_VAR 0 3
26406: PUSH
26407: LD_VAR 0 1
26411: ARRAY
26412: PPUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 4
26420: MOD
26421: PUSH
26422: LD_INT 1
26424: PLUS
26425: PPUSH
26426: CALL_OW 259
26430: PUSH
26431: LD_INT 1
26433: PLUS
26434: PPUSH
26435: CALL_OW 237
26439: GO 26341
26441: POP
26442: POP
// end ;
26443: PPOPN 3
26445: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26446: LD_EXP 61
26450: PUSH
26451: LD_EXP 69
26455: AND
26456: IFFALSE 26476
26458: GO 26460
26460: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26461: LD_INT 4
26463: PPUSH
26464: LD_OWVAR 2
26468: PPUSH
26469: LD_INT 0
26471: PPUSH
26472: CALL_OW 324
26476: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26477: LD_EXP 61
26481: PUSH
26482: LD_EXP 98
26486: AND
26487: IFFALSE 26507
26489: GO 26491
26491: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26492: LD_INT 19
26494: PPUSH
26495: LD_OWVAR 2
26499: PPUSH
26500: LD_INT 0
26502: PPUSH
26503: CALL_OW 324
26507: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26508: LD_EXP 61
26512: PUSH
26513: LD_EXP 70
26517: AND
26518: IFFALSE 26620
26520: GO 26522
26522: DISABLE
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
// begin enable ;
26527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_INT 22
26535: PUSH
26536: LD_OWVAR 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 34
26550: PUSH
26551: LD_INT 11
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 34
26560: PUSH
26561: LD_INT 30
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 69
26581: ST_TO_ADDR
// if not tmp then
26582: LD_VAR 0 2
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26620
// for i in tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26618
// begin SetLives ( i , 0 ) ;
26604: LD_VAR 0 1
26608: PPUSH
26609: LD_INT 0
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: GO 26601
26618: POP
26619: POP
// end ;
26620: PPOPN 2
26622: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26623: LD_EXP 61
26627: PUSH
26628: LD_EXP 71
26632: AND
26633: IFFALSE 26653
26635: GO 26637
26637: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26638: LD_INT 32
26640: PPUSH
26641: LD_OWVAR 2
26645: PPUSH
26646: LD_INT 0
26648: PPUSH
26649: CALL_OW 324
26653: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26654: LD_EXP 61
26658: PUSH
26659: LD_EXP 72
26663: AND
26664: IFFALSE 26845
26666: GO 26668
26668: DISABLE
26669: LD_INT 0
26671: PPUSH
26672: PPUSH
26673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_INT 22
26681: PUSH
26682: LD_OWVAR 2
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 33
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 69
26709: ST_TO_ADDR
// if not tmp then
26710: LD_VAR 0 2
26714: NOT
26715: IFFALSE 26719
// exit ;
26717: GO 26845
// side := 0 ;
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_INT 0
26726: ST_TO_ADDR
// for i := 1 to 8 do
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: DOUBLE
26733: LD_INT 1
26735: DEC
26736: ST_TO_ADDR
26737: LD_INT 8
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26743: LD_OWVAR 2
26747: PUSH
26748: LD_VAR 0 1
26752: NONEQUAL
26753: PUSH
26754: LD_OWVAR 2
26758: PPUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 81
26768: PUSH
26769: LD_INT 2
26771: EQUAL
26772: AND
26773: IFFALSE 26787
// begin side := i ;
26775: LD_ADDR_VAR 0 3
26779: PUSH
26780: LD_VAR 0 1
26784: ST_TO_ADDR
// break ;
26785: GO 26789
// end ;
26787: GO 26740
26789: POP
26790: POP
// if not side then
26791: LD_VAR 0 3
26795: NOT
26796: IFFALSE 26800
// exit ;
26798: GO 26845
// for i := 1 to tmp do
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: DOUBLE
26806: LD_INT 1
26808: DEC
26809: ST_TO_ADDR
26810: LD_VAR 0 2
26814: PUSH
26815: FOR_TO
26816: IFFALSE 26843
// if Prob ( 60 ) then
26818: LD_INT 60
26820: PPUSH
26821: CALL_OW 13
26825: IFFALSE 26841
// SetSide ( i , side ) ;
26827: LD_VAR 0 1
26831: PPUSH
26832: LD_VAR 0 3
26836: PPUSH
26837: CALL_OW 235
26841: GO 26815
26843: POP
26844: POP
// end ;
26845: PPOPN 3
26847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26848: LD_EXP 61
26852: PUSH
26853: LD_EXP 74
26857: AND
26858: IFFALSE 26977
26860: GO 26862
26862: DISABLE
26863: LD_INT 0
26865: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26866: LD_ADDR_VAR 0 1
26870: PUSH
26871: LD_INT 22
26873: PUSH
26874: LD_OWVAR 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 21
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: LD_INT 23
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 69
26919: PUSH
26920: FOR_IN
26921: IFFALSE 26975
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 257
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 4
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: IN
26951: IFFALSE 26973
// SetClass ( un , rand ( 1 , 4 ) ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: LD_INT 4
26963: PPUSH
26964: CALL_OW 12
26968: PPUSH
26969: CALL_OW 336
26973: GO 26920
26975: POP
26976: POP
// end ;
26977: PPOPN 1
26979: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26980: LD_EXP 61
26984: PUSH
26985: LD_EXP 73
26989: AND
26990: IFFALSE 27069
26992: GO 26994
26994: DISABLE
26995: LD_INT 0
26997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26998: LD_ADDR_VAR 0 1
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 21
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 69
27033: ST_TO_ADDR
// if not tmp then
27034: LD_VAR 0 1
27038: NOT
27039: IFFALSE 27043
// exit ;
27041: GO 27069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27043: LD_VAR 0 1
27047: PUSH
27048: LD_INT 1
27050: PPUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 12
27060: ARRAY
27061: PPUSH
27062: LD_INT 100
27064: PPUSH
27065: CALL_OW 234
// end ;
27069: PPOPN 1
27071: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27072: LD_EXP 61
27076: PUSH
27077: LD_EXP 75
27081: AND
27082: IFFALSE 27180
27084: GO 27086
27086: DISABLE
27087: LD_INT 0
27089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27090: LD_ADDR_VAR 0 1
27094: PUSH
27095: LD_INT 22
27097: PUSH
27098: LD_OWVAR 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 21
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: ST_TO_ADDR
// if not tmp then
27126: LD_VAR 0 1
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27180
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27135: LD_VAR 0 1
27139: PUSH
27140: LD_INT 1
27142: PPUSH
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 12
27152: ARRAY
27153: PPUSH
27154: LD_INT 1
27156: PPUSH
27157: LD_INT 4
27159: PPUSH
27160: CALL_OW 12
27164: PPUSH
27165: LD_INT 3000
27167: PPUSH
27168: LD_INT 9000
27170: PPUSH
27171: CALL_OW 12
27175: PPUSH
27176: CALL_OW 492
// end ;
27180: PPOPN 1
27182: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27183: LD_EXP 61
27187: PUSH
27188: LD_EXP 76
27192: AND
27193: IFFALSE 27213
27195: GO 27197
27197: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27198: LD_INT 1
27200: PPUSH
27201: LD_OWVAR 2
27205: PPUSH
27206: LD_INT 0
27208: PPUSH
27209: CALL_OW 324
27213: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27214: LD_EXP 61
27218: PUSH
27219: LD_EXP 77
27223: AND
27224: IFFALSE 27307
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27233: LD_ADDR_VAR 0 2
27237: PUSH
27238: LD_INT 22
27240: PUSH
27241: LD_OWVAR 2
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 21
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 69
27268: ST_TO_ADDR
// if not tmp then
27269: LD_VAR 0 2
27273: NOT
27274: IFFALSE 27278
// exit ;
27276: GO 27307
// for i in tmp do
27278: LD_ADDR_VAR 0 1
27282: PUSH
27283: LD_VAR 0 2
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27305
// SetBLevel ( i , 10 ) ;
27291: LD_VAR 0 1
27295: PPUSH
27296: LD_INT 10
27298: PPUSH
27299: CALL_OW 241
27303: GO 27288
27305: POP
27306: POP
// end ;
27307: PPOPN 2
27309: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27310: LD_EXP 61
27314: PUSH
27315: LD_EXP 78
27319: AND
27320: IFFALSE 27431
27322: GO 27324
27324: DISABLE
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
27329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 25
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 69
27365: ST_TO_ADDR
// if not tmp then
27366: LD_VAR 0 3
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27431
// un := tmp [ rand ( 1 , tmp ) ] ;
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_INT 1
27387: PPUSH
27388: LD_VAR 0 3
27392: PPUSH
27393: CALL_OW 12
27397: ARRAY
27398: ST_TO_ADDR
// if Crawls ( un ) then
27399: LD_VAR 0 2
27403: PPUSH
27404: CALL_OW 318
27408: IFFALSE 27419
// ComWalk ( un ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_INT 5
27426: PPUSH
27427: CALL_OW 336
// end ;
27431: PPOPN 3
27433: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27434: LD_EXP 61
27438: PUSH
27439: LD_EXP 79
27443: AND
27444: PUSH
27445: LD_OWVAR 67
27449: PUSH
27450: LD_INT 4
27452: LESS
27453: AND
27454: IFFALSE 27473
27456: GO 27458
27458: DISABLE
// begin Difficulty := Difficulty + 1 ;
27459: LD_ADDR_OWVAR 67
27463: PUSH
27464: LD_OWVAR 67
27468: PUSH
27469: LD_INT 1
27471: PLUS
27472: ST_TO_ADDR
// end ;
27473: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27474: LD_EXP 61
27478: PUSH
27479: LD_EXP 80
27483: AND
27484: IFFALSE 27587
27486: GO 27488
27488: DISABLE
27489: LD_INT 0
27491: PPUSH
// begin for i := 1 to 5 do
27492: LD_ADDR_VAR 0 1
27496: PUSH
27497: DOUBLE
27498: LD_INT 1
27500: DEC
27501: ST_TO_ADDR
27502: LD_INT 5
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27585
// begin uc_nation := nation_nature ;
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// uc_side := 0 ;
27516: LD_ADDR_OWVAR 20
27520: PUSH
27521: LD_INT 0
27523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27524: LD_ADDR_OWVAR 29
27528: PUSH
27529: LD_INT 12
27531: PUSH
27532: LD_INT 12
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
// hc_agressivity := 20 ;
27539: LD_ADDR_OWVAR 35
27543: PUSH
27544: LD_INT 20
27546: ST_TO_ADDR
// hc_class := class_tiger ;
27547: LD_ADDR_OWVAR 28
27551: PUSH
27552: LD_INT 14
27554: ST_TO_ADDR
// hc_gallery :=  ;
27555: LD_ADDR_OWVAR 33
27559: PUSH
27560: LD_STRING 
27562: ST_TO_ADDR
// hc_name :=  ;
27563: LD_ADDR_OWVAR 26
27567: PUSH
27568: LD_STRING 
27570: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27571: CALL_OW 44
27575: PPUSH
27576: LD_INT 0
27578: PPUSH
27579: CALL_OW 51
// end ;
27583: GO 27505
27585: POP
27586: POP
// end ;
27587: PPOPN 1
27589: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27590: LD_EXP 61
27594: PUSH
27595: LD_EXP 81
27599: AND
27600: IFFALSE 27609
27602: GO 27604
27604: DISABLE
// StreamSibBomb ;
27605: CALL 27610 0 0
27609: END
// export function StreamSibBomb ; var i , x , y ; begin
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// result := false ;
27616: LD_ADDR_VAR 0 1
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
// for i := 1 to 16 do
27624: LD_ADDR_VAR 0 2
27628: PUSH
27629: DOUBLE
27630: LD_INT 1
27632: DEC
27633: ST_TO_ADDR
27634: LD_INT 16
27636: PUSH
27637: FOR_TO
27638: IFFALSE 27837
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_INT 10
27647: PUSH
27648: LD_INT 20
27650: PUSH
27651: LD_INT 30
27653: PUSH
27654: LD_INT 40
27656: PUSH
27657: LD_INT 50
27659: PUSH
27660: LD_INT 60
27662: PUSH
27663: LD_INT 70
27665: PUSH
27666: LD_INT 80
27668: PUSH
27669: LD_INT 90
27671: PUSH
27672: LD_INT 100
27674: PUSH
27675: LD_INT 110
27677: PUSH
27678: LD_INT 120
27680: PUSH
27681: LD_INT 130
27683: PUSH
27684: LD_INT 140
27686: PUSH
27687: LD_INT 150
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: PPUSH
27710: LD_INT 15
27712: PPUSH
27713: CALL_OW 12
27717: ARRAY
27718: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27719: LD_ADDR_VAR 0 4
27723: PUSH
27724: LD_INT 10
27726: PUSH
27727: LD_INT 20
27729: PUSH
27730: LD_INT 30
27732: PUSH
27733: LD_INT 40
27735: PUSH
27736: LD_INT 50
27738: PUSH
27739: LD_INT 60
27741: PUSH
27742: LD_INT 70
27744: PUSH
27745: LD_INT 80
27747: PUSH
27748: LD_INT 90
27750: PUSH
27751: LD_INT 100
27753: PUSH
27754: LD_INT 110
27756: PUSH
27757: LD_INT 120
27759: PUSH
27760: LD_INT 130
27762: PUSH
27763: LD_INT 140
27765: PUSH
27766: LD_INT 150
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PPUSH
27789: LD_INT 15
27791: PPUSH
27792: CALL_OW 12
27796: ARRAY
27797: ST_TO_ADDR
// if ValidHex ( x , y ) then
27798: LD_VAR 0 3
27802: PPUSH
27803: LD_VAR 0 4
27807: PPUSH
27808: CALL_OW 488
27812: IFFALSE 27835
// begin result := [ x , y ] ;
27814: LD_ADDR_VAR 0 1
27818: PUSH
27819: LD_VAR 0 3
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: ST_TO_ADDR
// break ;
27833: GO 27837
// end ; end ;
27835: GO 27637
27837: POP
27838: POP
// if result then
27839: LD_VAR 0 1
27843: IFFALSE 27903
// begin ToLua ( playSibBomb() ) ;
27845: LD_STRING playSibBomb()
27847: PPUSH
27848: CALL_OW 559
// wait ( 0 0$14 ) ;
27852: LD_INT 490
27854: PPUSH
27855: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27859: LD_VAR 0 1
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PPUSH
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PPUSH
27877: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27881: LD_VAR 0 1
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 1
27894: PUSH
27895: LD_INT 2
27897: ARRAY
27898: PPUSH
27899: CALL_OW 429
// end ; end ;
27903: LD_VAR 0 1
27907: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27908: LD_EXP 61
27912: PUSH
27913: LD_EXP 83
27917: AND
27918: IFFALSE 27930
27920: GO 27922
27922: DISABLE
// YouLost (  ) ;
27923: LD_STRING 
27925: PPUSH
27926: CALL_OW 104
27930: END
// every 0 0$1 trigger StreamModeActive and sFog do
27931: LD_EXP 61
27935: PUSH
27936: LD_EXP 82
27940: AND
27941: IFFALSE 27955
27943: GO 27945
27945: DISABLE
// FogOff ( your_side ) ;
27946: LD_OWVAR 2
27950: PPUSH
27951: CALL_OW 344
27955: END
// every 0 0$1 trigger StreamModeActive and sSun do
27956: LD_EXP 61
27960: PUSH
27961: LD_EXP 84
27965: AND
27966: IFFALSE 27994
27968: GO 27970
27970: DISABLE
// begin solar_recharge_percent := 0 ;
27971: LD_ADDR_OWVAR 79
27975: PUSH
27976: LD_INT 0
27978: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27979: LD_INT 10500
27981: PPUSH
27982: CALL_OW 67
// solar_recharge_percent := 100 ;
27986: LD_ADDR_OWVAR 79
27990: PUSH
27991: LD_INT 100
27993: ST_TO_ADDR
// end ;
27994: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27995: LD_EXP 61
27999: PUSH
28000: LD_EXP 85
28004: AND
28005: IFFALSE 28244
28007: GO 28009
28009: DISABLE
28010: LD_INT 0
28012: PPUSH
28013: PPUSH
28014: PPUSH
// begin tmp := [ ] ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: EMPTY
28021: ST_TO_ADDR
// for i := 1 to 6 do
28022: LD_ADDR_VAR 0 1
28026: PUSH
28027: DOUBLE
28028: LD_INT 1
28030: DEC
28031: ST_TO_ADDR
28032: LD_INT 6
28034: PUSH
28035: FOR_TO
28036: IFFALSE 28141
// begin uc_nation := nation_nature ;
28038: LD_ADDR_OWVAR 21
28042: PUSH
28043: LD_INT 0
28045: ST_TO_ADDR
// uc_side := 0 ;
28046: LD_ADDR_OWVAR 20
28050: PUSH
28051: LD_INT 0
28053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28054: LD_ADDR_OWVAR 29
28058: PUSH
28059: LD_INT 12
28061: PUSH
28062: LD_INT 12
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// hc_agressivity := 20 ;
28069: LD_ADDR_OWVAR 35
28073: PUSH
28074: LD_INT 20
28076: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28077: LD_ADDR_OWVAR 28
28081: PUSH
28082: LD_INT 17
28084: ST_TO_ADDR
// hc_gallery :=  ;
28085: LD_ADDR_OWVAR 33
28089: PUSH
28090: LD_STRING 
28092: ST_TO_ADDR
// hc_name :=  ;
28093: LD_ADDR_OWVAR 26
28097: PUSH
28098: LD_STRING 
28100: ST_TO_ADDR
// un := CreateHuman ;
28101: LD_ADDR_VAR 0 2
28105: PUSH
28106: CALL_OW 44
28110: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28111: LD_VAR 0 2
28115: PPUSH
28116: LD_INT 1
28118: PPUSH
28119: CALL_OW 51
// tmp := tmp ^ un ;
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 2
28137: ADD
28138: ST_TO_ADDR
// end ;
28139: GO 28035
28141: POP
28142: POP
// repeat wait ( 0 0$1 ) ;
28143: LD_INT 35
28145: PPUSH
28146: CALL_OW 67
// for un in tmp do
28150: LD_ADDR_VAR 0 2
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: FOR_IN
28161: IFFALSE 28235
// begin if IsDead ( un ) then
28163: LD_VAR 0 2
28167: PPUSH
28168: CALL_OW 301
28172: IFFALSE 28192
// begin tmp := tmp diff un ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_VAR 0 3
28183: PUSH
28184: LD_VAR 0 2
28188: DIFF
28189: ST_TO_ADDR
// continue ;
28190: GO 28160
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28192: LD_VAR 0 2
28196: PPUSH
28197: LD_INT 3
28199: PUSH
28200: LD_INT 22
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PPUSH
28214: CALL_OW 69
28218: PPUSH
28219: LD_VAR 0 2
28223: PPUSH
28224: CALL_OW 74
28228: PPUSH
28229: CALL_OW 115
// end ;
28233: GO 28160
28235: POP
28236: POP
// until not tmp ;
28237: LD_VAR 0 3
28241: NOT
28242: IFFALSE 28143
// end ;
28244: PPOPN 3
28246: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28247: LD_EXP 61
28251: PUSH
28252: LD_EXP 86
28256: AND
28257: IFFALSE 28311
28259: GO 28261
28261: DISABLE
// begin ToLua ( displayTroll(); ) ;
28262: LD_STRING displayTroll();
28264: PPUSH
28265: CALL_OW 559
// wait ( 3 3$00 ) ;
28269: LD_INT 6300
28271: PPUSH
28272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28276: LD_STRING hideTroll();
28278: PPUSH
28279: CALL_OW 559
// wait ( 1 1$00 ) ;
28283: LD_INT 2100
28285: PPUSH
28286: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28290: LD_STRING displayTroll();
28292: PPUSH
28293: CALL_OW 559
// wait ( 1 1$00 ) ;
28297: LD_INT 2100
28299: PPUSH
28300: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28304: LD_STRING hideTroll();
28306: PPUSH
28307: CALL_OW 559
// end ;
28311: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28312: LD_EXP 61
28316: PUSH
28317: LD_EXP 87
28321: AND
28322: IFFALSE 28385
28324: GO 28326
28326: DISABLE
28327: LD_INT 0
28329: PPUSH
// begin p := 0 ;
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_INT 0
28337: ST_TO_ADDR
// repeat game_speed := 1 ;
28338: LD_ADDR_OWVAR 65
28342: PUSH
28343: LD_INT 1
28345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28346: LD_INT 35
28348: PPUSH
28349: CALL_OW 67
// p := p + 1 ;
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 1
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: ST_TO_ADDR
// until p >= 60 ;
28367: LD_VAR 0 1
28371: PUSH
28372: LD_INT 60
28374: GREATEREQUAL
28375: IFFALSE 28338
// game_speed := 4 ;
28377: LD_ADDR_OWVAR 65
28381: PUSH
28382: LD_INT 4
28384: ST_TO_ADDR
// end ;
28385: PPOPN 1
28387: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28388: LD_EXP 61
28392: PUSH
28393: LD_EXP 88
28397: AND
28398: IFFALSE 28544
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
28406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_OWVAR 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 30
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PPUSH
28456: CALL_OW 69
28460: ST_TO_ADDR
// if not depot then
28461: LD_VAR 0 1
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 28544
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_VAR 0 1
28479: PUSH
28480: LD_INT 1
28482: PPUSH
28483: LD_VAR 0 1
28487: PPUSH
28488: CALL_OW 12
28492: ARRAY
28493: PPUSH
28494: CALL_OW 274
28498: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28499: LD_VAR 0 2
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: LD_INT 0
28509: PPUSH
28510: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_INT 2
28521: PPUSH
28522: LD_INT 0
28524: PPUSH
28525: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_INT 3
28536: PPUSH
28537: LD_INT 0
28539: PPUSH
28540: CALL_OW 277
// end ;
28544: PPOPN 2
28546: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28547: LD_EXP 61
28551: PUSH
28552: LD_EXP 89
28556: AND
28557: IFFALSE 28654
28559: GO 28561
28561: DISABLE
28562: LD_INT 0
28564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 69
28618: ST_TO_ADDR
// if not tmp then
28619: LD_VAR 0 1
28623: NOT
28624: IFFALSE 28628
// exit ;
28626: GO 28654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28628: LD_VAR 0 1
28632: PUSH
28633: LD_INT 1
28635: PPUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 12
28645: ARRAY
28646: PPUSH
28647: LD_INT 200
28649: PPUSH
28650: CALL_OW 234
// end ;
28654: PPOPN 1
28656: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28657: LD_EXP 61
28661: PUSH
28662: LD_EXP 90
28666: AND
28667: IFFALSE 28746
28669: GO 28671
28671: DISABLE
28672: LD_INT 0
28674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28675: LD_ADDR_VAR 0 1
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_OWVAR 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PPUSH
28706: CALL_OW 69
28710: ST_TO_ADDR
// if not tmp then
28711: LD_VAR 0 1
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28720: LD_VAR 0 1
28724: PUSH
28725: LD_INT 1
28727: PPUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 12
28737: ARRAY
28738: PPUSH
28739: LD_INT 60
28741: PPUSH
28742: CALL_OW 234
// end ;
28746: PPOPN 1
28748: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28749: LD_EXP 61
28753: PUSH
28754: LD_EXP 91
28758: AND
28759: IFFALSE 28858
28761: GO 28763
28763: DISABLE
28764: LD_INT 0
28766: PPUSH
28767: PPUSH
// begin enable ;
28768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28769: LD_ADDR_VAR 0 1
28773: PUSH
28774: LD_INT 22
28776: PUSH
28777: LD_OWVAR 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 61
28788: PUSH
28789: EMPTY
28790: LIST
28791: PUSH
28792: LD_INT 33
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: PPUSH
28807: CALL_OW 69
28811: ST_TO_ADDR
// if not tmp then
28812: LD_VAR 0 1
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 28858
// for i in tmp do
28821: LD_ADDR_VAR 0 2
28825: PUSH
28826: LD_VAR 0 1
28830: PUSH
28831: FOR_IN
28832: IFFALSE 28856
// if IsControledBy ( i ) then
28834: LD_VAR 0 2
28838: PPUSH
28839: CALL_OW 312
28843: IFFALSE 28854
// ComUnlink ( i ) ;
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL_OW 136
28854: GO 28831
28856: POP
28857: POP
// end ;
28858: PPOPN 2
28860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28861: LD_EXP 61
28865: PUSH
28866: LD_EXP 92
28870: AND
28871: IFFALSE 29011
28873: GO 28875
28875: DISABLE
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
// begin ToLua ( displayPowell(); ) ;
28880: LD_STRING displayPowell();
28882: PPUSH
28883: CALL_OW 559
// uc_side := 0 ;
28887: LD_ADDR_OWVAR 20
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// uc_nation := 2 ;
28895: LD_ADDR_OWVAR 21
28899: PUSH
28900: LD_INT 2
28902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28903: LD_ADDR_OWVAR 37
28907: PUSH
28908: LD_INT 14
28910: ST_TO_ADDR
// vc_engine := engine_siberite ;
28911: LD_ADDR_OWVAR 39
28915: PUSH
28916: LD_INT 3
28918: ST_TO_ADDR
// vc_control := control_apeman ;
28919: LD_ADDR_OWVAR 38
28923: PUSH
28924: LD_INT 5
28926: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28927: LD_ADDR_OWVAR 40
28931: PUSH
28932: LD_INT 29
28934: ST_TO_ADDR
// un := CreateVehicle ;
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: CALL_OW 45
28944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28945: LD_VAR 0 2
28949: PPUSH
28950: LD_INT 1
28952: PPUSH
28953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28957: LD_INT 35
28959: PPUSH
28960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_INT 22
28971: PUSH
28972: LD_OWVAR 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: PPUSH
28986: LD_VAR 0 2
28990: PPUSH
28991: CALL_OW 74
28995: PPUSH
28996: CALL_OW 115
// until IsDead ( un ) ;
29000: LD_VAR 0 2
29004: PPUSH
29005: CALL_OW 301
29009: IFFALSE 28957
// end ;
29011: PPOPN 2
29013: END
// every 0 0$1 trigger StreamModeActive and sStu do
29014: LD_EXP 61
29018: PUSH
29019: LD_EXP 100
29023: AND
29024: IFFALSE 29040
29026: GO 29028
29028: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29029: LD_STRING displayStucuk();
29031: PPUSH
29032: CALL_OW 559
// ResetFog ;
29036: CALL_OW 335
// end ;
29040: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29041: LD_EXP 61
29045: PUSH
29046: LD_EXP 93
29050: AND
29051: IFFALSE 29192
29053: GO 29055
29055: DISABLE
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29060: LD_ADDR_VAR 0 2
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 2
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29192
// un := tmp [ rand ( 1 , tmp ) ] ;
29105: LD_ADDR_VAR 0 1
29109: PUSH
29110: LD_VAR 0 2
29114: PUSH
29115: LD_INT 1
29117: PPUSH
29118: LD_VAR 0 2
29122: PPUSH
29123: CALL_OW 12
29127: ARRAY
29128: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29129: LD_VAR 0 1
29133: PPUSH
29134: LD_INT 0
29136: PPUSH
29137: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29141: LD_VAR 0 1
29145: PPUSH
29146: LD_OWVAR 3
29150: PUSH
29151: LD_VAR 0 1
29155: DIFF
29156: PPUSH
29157: LD_VAR 0 1
29161: PPUSH
29162: CALL_OW 74
29166: PPUSH
29167: CALL_OW 115
// wait ( 0 0$20 ) ;
29171: LD_INT 700
29173: PPUSH
29174: CALL_OW 67
// SetSide ( un , your_side ) ;
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_OWVAR 2
29187: PPUSH
29188: CALL_OW 235
// end ;
29192: PPOPN 2
29194: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29195: LD_EXP 61
29199: PUSH
29200: LD_EXP 94
29204: AND
29205: IFFALSE 29311
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 30
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 69
29266: ST_TO_ADDR
// if not depot then
29267: LD_VAR 0 1
29271: NOT
29272: IFFALSE 29276
// exit ;
29274: GO 29311
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29276: LD_VAR 0 1
29280: PUSH
29281: LD_INT 1
29283: ARRAY
29284: PPUSH
29285: CALL_OW 250
29289: PPUSH
29290: LD_VAR 0 1
29294: PUSH
29295: LD_INT 1
29297: ARRAY
29298: PPUSH
29299: CALL_OW 251
29303: PPUSH
29304: LD_INT 70
29306: PPUSH
29307: CALL_OW 495
// end ;
29311: PPOPN 1
29313: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29314: LD_EXP 61
29318: PUSH
29319: LD_EXP 95
29323: AND
29324: IFFALSE 29535
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29336: LD_ADDR_VAR 0 5
29340: PUSH
29341: LD_INT 22
29343: PUSH
29344: LD_OWVAR 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 21
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ST_TO_ADDR
// if not tmp then
29372: LD_VAR 0 5
29376: NOT
29377: IFFALSE 29381
// exit ;
29379: GO 29535
// for i in tmp do
29381: LD_ADDR_VAR 0 1
29385: PUSH
29386: LD_VAR 0 5
29390: PUSH
29391: FOR_IN
29392: IFFALSE 29533
// begin d := rand ( 0 , 5 ) ;
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: LD_INT 0
29401: PPUSH
29402: LD_INT 5
29404: PPUSH
29405: CALL_OW 12
29409: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29410: LD_ADDR_VAR 0 2
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 250
29424: PPUSH
29425: LD_VAR 0 4
29429: PPUSH
29430: LD_INT 3
29432: PPUSH
29433: LD_INT 12
29435: PPUSH
29436: CALL_OW 12
29440: PPUSH
29441: CALL_OW 272
29445: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29446: LD_ADDR_VAR 0 3
29450: PUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 251
29460: PPUSH
29461: LD_VAR 0 4
29465: PPUSH
29466: LD_INT 3
29468: PPUSH
29469: LD_INT 12
29471: PPUSH
29472: CALL_OW 12
29476: PPUSH
29477: CALL_OW 273
29481: ST_TO_ADDR
// if ValidHex ( x , y ) then
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 3
29491: PPUSH
29492: CALL_OW 488
29496: IFFALSE 29531
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: LD_INT 3
29515: PPUSH
29516: LD_INT 6
29518: PPUSH
29519: CALL_OW 12
29523: PPUSH
29524: LD_INT 1
29526: PPUSH
29527: CALL_OW 483
// end ;
29531: GO 29391
29533: POP
29534: POP
// end ;
29535: PPOPN 5
29537: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29538: LD_EXP 61
29542: PUSH
29543: LD_EXP 96
29547: AND
29548: IFFALSE 29642
29550: GO 29552
29552: DISABLE
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29557: LD_ADDR_VAR 0 2
29561: PUSH
29562: LD_INT 22
29564: PUSH
29565: LD_OWVAR 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 32
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 21
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 69
29603: ST_TO_ADDR
// if not tmp then
29604: LD_VAR 0 2
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29642
// for i in tmp do
29613: LD_ADDR_VAR 0 1
29617: PUSH
29618: LD_VAR 0 2
29622: PUSH
29623: FOR_IN
29624: IFFALSE 29640
// SetFuel ( i , 0 ) ;
29626: LD_VAR 0 1
29630: PPUSH
29631: LD_INT 0
29633: PPUSH
29634: CALL_OW 240
29638: GO 29623
29640: POP
29641: POP
// end ;
29642: PPOPN 2
29644: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29645: LD_EXP 61
29649: PUSH
29650: LD_EXP 97
29654: AND
29655: IFFALSE 29721
29657: GO 29659
29659: DISABLE
29660: LD_INT 0
29662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29663: LD_ADDR_VAR 0 1
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 30
29682: PUSH
29683: LD_INT 29
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 69
29698: ST_TO_ADDR
// if not tmp then
29699: LD_VAR 0 1
29703: NOT
29704: IFFALSE 29708
// exit ;
29706: GO 29721
// DestroyUnit ( tmp [ 1 ] ) ;
29708: LD_VAR 0 1
29712: PUSH
29713: LD_INT 1
29715: ARRAY
29716: PPUSH
29717: CALL_OW 65
// end ;
29721: PPOPN 1
29723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29724: LD_EXP 61
29728: PUSH
29729: LD_EXP 99
29733: AND
29734: IFFALSE 29863
29736: GO 29738
29738: DISABLE
29739: LD_INT 0
29741: PPUSH
// begin uc_side := 0 ;
29742: LD_ADDR_OWVAR 20
29746: PUSH
29747: LD_INT 0
29749: ST_TO_ADDR
// uc_nation := nation_arabian ;
29750: LD_ADDR_OWVAR 21
29754: PUSH
29755: LD_INT 2
29757: ST_TO_ADDR
// hc_gallery :=  ;
29758: LD_ADDR_OWVAR 33
29762: PUSH
29763: LD_STRING 
29765: ST_TO_ADDR
// hc_name :=  ;
29766: LD_ADDR_OWVAR 26
29770: PUSH
29771: LD_STRING 
29773: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29774: LD_INT 1
29776: PPUSH
29777: LD_INT 11
29779: PPUSH
29780: LD_INT 10
29782: PPUSH
29783: CALL_OW 380
// un := CreateHuman ;
29787: LD_ADDR_VAR 0 1
29791: PUSH
29792: CALL_OW 44
29796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29797: LD_VAR 0 1
29801: PPUSH
29802: LD_INT 1
29804: PPUSH
29805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29809: LD_INT 35
29811: PPUSH
29812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29816: LD_VAR 0 1
29820: PPUSH
29821: LD_INT 22
29823: PUSH
29824: LD_OWVAR 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL_OW 69
29837: PPUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 74
29847: PPUSH
29848: CALL_OW 115
// until IsDead ( un ) ;
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 301
29861: IFFALSE 29809
// end ;
29863: PPOPN 1
29865: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29866: LD_EXP 61
29870: PUSH
29871: LD_EXP 101
29875: AND
29876: IFFALSE 29888
29878: GO 29880
29880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29881: LD_STRING earthquake(getX(game), 0, 32)
29883: PPUSH
29884: CALL_OW 559
29888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29889: LD_EXP 61
29893: PUSH
29894: LD_EXP 102
29898: AND
29899: IFFALSE 29990
29901: GO 29903
29903: DISABLE
29904: LD_INT 0
29906: PPUSH
// begin enable ;
29907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29908: LD_ADDR_VAR 0 1
29912: PUSH
29913: LD_INT 22
29915: PUSH
29916: LD_OWVAR 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 21
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 33
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 1
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 29990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29964: LD_VAR 0 1
29968: PUSH
29969: LD_INT 1
29971: PPUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 12
29981: ARRAY
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: CALL_OW 234
// end ;
29990: PPOPN 1
29992: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29993: LD_EXP 61
29997: PUSH
29998: LD_EXP 103
30002: AND
30003: IFFALSE 30144
30005: GO 30007
30007: DISABLE
30008: LD_INT 0
30010: PPUSH
30011: PPUSH
30012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 22
30020: PUSH
30021: LD_OWVAR 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 25
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PPUSH
30044: CALL_OW 69
30048: ST_TO_ADDR
// if not tmp then
30049: LD_VAR 0 3
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30144
// un := tmp [ rand ( 1 , tmp ) ] ;
30058: LD_ADDR_VAR 0 2
30062: PUSH
30063: LD_VAR 0 3
30067: PUSH
30068: LD_INT 1
30070: PPUSH
30071: LD_VAR 0 3
30075: PPUSH
30076: CALL_OW 12
30080: ARRAY
30081: ST_TO_ADDR
// if Crawls ( un ) then
30082: LD_VAR 0 2
30086: PPUSH
30087: CALL_OW 318
30091: IFFALSE 30102
// ComWalk ( un ) ;
30093: LD_VAR 0 2
30097: PPUSH
30098: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30102: LD_VAR 0 2
30106: PPUSH
30107: LD_INT 9
30109: PPUSH
30110: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30114: LD_INT 28
30116: PPUSH
30117: LD_OWVAR 2
30121: PPUSH
30122: LD_INT 2
30124: PPUSH
30125: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30129: LD_INT 29
30131: PPUSH
30132: LD_OWVAR 2
30136: PPUSH
30137: LD_INT 2
30139: PPUSH
30140: CALL_OW 322
// end ;
30144: PPOPN 3
30146: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30147: LD_EXP 61
30151: PUSH
30152: LD_EXP 104
30156: AND
30157: IFFALSE 30268
30159: GO 30161
30161: DISABLE
30162: LD_INT 0
30164: PPUSH
30165: PPUSH
30166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 22
30174: PUSH
30175: LD_OWVAR 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 25
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PPUSH
30198: CALL_OW 69
30202: ST_TO_ADDR
// if not tmp then
30203: LD_VAR 0 3
30207: NOT
30208: IFFALSE 30212
// exit ;
30210: GO 30268
// un := tmp [ rand ( 1 , tmp ) ] ;
30212: LD_ADDR_VAR 0 2
30216: PUSH
30217: LD_VAR 0 3
30221: PUSH
30222: LD_INT 1
30224: PPUSH
30225: LD_VAR 0 3
30229: PPUSH
30230: CALL_OW 12
30234: ARRAY
30235: ST_TO_ADDR
// if Crawls ( un ) then
30236: LD_VAR 0 2
30240: PPUSH
30241: CALL_OW 318
30245: IFFALSE 30256
// ComWalk ( un ) ;
30247: LD_VAR 0 2
30251: PPUSH
30252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30256: LD_VAR 0 2
30260: PPUSH
30261: LD_INT 8
30263: PPUSH
30264: CALL_OW 336
// end ;
30268: PPOPN 3
30270: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30271: LD_EXP 61
30275: PUSH
30276: LD_EXP 105
30280: AND
30281: IFFALSE 30425
30283: GO 30285
30285: DISABLE
30286: LD_INT 0
30288: PPUSH
30289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30290: LD_ADDR_VAR 0 2
30294: PUSH
30295: LD_INT 22
30297: PUSH
30298: LD_OWVAR 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 21
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 34
30322: PUSH
30323: LD_INT 12
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 51
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 34
30342: PUSH
30343: LD_INT 32
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 2
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30425
// for i in tmp do
30375: LD_ADDR_VAR 0 1
30379: PUSH
30380: LD_VAR 0 2
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30423
// if GetCargo ( i , mat_artifact ) = 0 then
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_INT 4
30395: PPUSH
30396: CALL_OW 289
30400: PUSH
30401: LD_INT 0
30403: EQUAL
30404: IFFALSE 30421
// SetCargo ( i , mat_siberit , 100 ) ;
30406: LD_VAR 0 1
30410: PPUSH
30411: LD_INT 3
30413: PPUSH
30414: LD_INT 100
30416: PPUSH
30417: CALL_OW 290
30421: GO 30385
30423: POP
30424: POP
// end ;
30425: PPOPN 2
30427: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30428: LD_EXP 61
30432: PUSH
30433: LD_EXP 106
30437: AND
30438: IFFALSE 30621
30440: GO 30442
30442: DISABLE
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ST_TO_ADDR
// if not tmp then
30469: LD_VAR 0 2
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30621
// for i := 1 to 2 do
30478: LD_ADDR_VAR 0 1
30482: PUSH
30483: DOUBLE
30484: LD_INT 1
30486: DEC
30487: ST_TO_ADDR
30488: LD_INT 2
30490: PUSH
30491: FOR_TO
30492: IFFALSE 30619
// begin uc_side := your_side ;
30494: LD_ADDR_OWVAR 20
30498: PUSH
30499: LD_OWVAR 2
30503: ST_TO_ADDR
// uc_nation := nation_american ;
30504: LD_ADDR_OWVAR 21
30508: PUSH
30509: LD_INT 1
30511: ST_TO_ADDR
// vc_chassis := us_morphling ;
30512: LD_ADDR_OWVAR 37
30516: PUSH
30517: LD_INT 5
30519: ST_TO_ADDR
// vc_engine := engine_siberite ;
30520: LD_ADDR_OWVAR 39
30524: PUSH
30525: LD_INT 3
30527: ST_TO_ADDR
// vc_control := control_computer ;
30528: LD_ADDR_OWVAR 38
30532: PUSH
30533: LD_INT 3
30535: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30536: LD_ADDR_OWVAR 40
30540: PUSH
30541: LD_INT 10
30543: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30544: LD_VAR 0 2
30548: PUSH
30549: LD_INT 1
30551: ARRAY
30552: PPUSH
30553: CALL_OW 310
30557: NOT
30558: IFFALSE 30605
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30560: CALL_OW 45
30564: PPUSH
30565: LD_VAR 0 2
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: CALL_OW 250
30578: PPUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: CALL_OW 251
30592: PPUSH
30593: LD_INT 12
30595: PPUSH
30596: LD_INT 1
30598: PPUSH
30599: CALL_OW 50
30603: GO 30617
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30605: CALL_OW 45
30609: PPUSH
30610: LD_INT 1
30612: PPUSH
30613: CALL_OW 51
// end ;
30617: GO 30491
30619: POP
30620: POP
// end ;
30621: PPOPN 2
30623: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30624: LD_EXP 61
30628: PUSH
30629: LD_EXP 107
30633: AND
30634: IFFALSE 30856
30636: GO 30638
30638: DISABLE
30639: LD_INT 0
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30647: LD_ADDR_VAR 0 6
30651: PUSH
30652: LD_INT 22
30654: PUSH
30655: LD_OWVAR 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 21
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 23
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: PPUSH
30696: CALL_OW 69
30700: ST_TO_ADDR
// if not tmp then
30701: LD_VAR 0 6
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 30856
// s1 := rand ( 1 , 4 ) ;
30710: LD_ADDR_VAR 0 2
30714: PUSH
30715: LD_INT 1
30717: PPUSH
30718: LD_INT 4
30720: PPUSH
30721: CALL_OW 12
30725: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30726: LD_ADDR_VAR 0 4
30730: PUSH
30731: LD_VAR 0 6
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 2
30744: PPUSH
30745: CALL_OW 259
30749: ST_TO_ADDR
// if s1 = 1 then
30750: LD_VAR 0 2
30754: PUSH
30755: LD_INT 1
30757: EQUAL
30758: IFFALSE 30778
// s2 := rand ( 2 , 4 ) else
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 2
30767: PPUSH
30768: LD_INT 4
30770: PPUSH
30771: CALL_OW 12
30775: ST_TO_ADDR
30776: GO 30786
// s2 := 1 ;
30778: LD_ADDR_VAR 0 3
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30786: LD_ADDR_VAR 0 5
30790: PUSH
30791: LD_VAR 0 6
30795: PUSH
30796: LD_INT 1
30798: ARRAY
30799: PPUSH
30800: LD_VAR 0 3
30804: PPUSH
30805: CALL_OW 259
30809: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30810: LD_VAR 0 6
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: PPUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: LD_VAR 0 5
30828: PPUSH
30829: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30833: LD_VAR 0 6
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_VAR 0 3
30846: PPUSH
30847: LD_VAR 0 4
30851: PPUSH
30852: CALL_OW 237
// end ;
30856: PPOPN 6
30858: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30859: LD_EXP 61
30863: PUSH
30864: LD_EXP 108
30868: AND
30869: IFFALSE 30948
30871: GO 30873
30873: DISABLE
30874: LD_INT 0
30876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30877: LD_ADDR_VAR 0 1
30881: PUSH
30882: LD_INT 22
30884: PUSH
30885: LD_OWVAR 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 69
30912: ST_TO_ADDR
// if not tmp then
30913: LD_VAR 0 1
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 30948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30922: LD_VAR 0 1
30926: PUSH
30927: LD_INT 1
30929: PPUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 12
30939: ARRAY
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 234
// end ;
30948: PPOPN 1
30950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30951: LD_EXP 61
30955: PUSH
30956: LD_EXP 109
30960: AND
30961: IFFALSE 31073
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_INT 22
30977: PUSH
30978: LD_OWVAR 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 27
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 26
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 30
31012: PUSH
31013: LD_INT 28
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PPUSH
31030: CALL_OW 69
31034: ST_TO_ADDR
// if not tmp then
31035: LD_VAR 0 2
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31073
// for i in tmp do
31044: LD_ADDR_VAR 0 1
31048: PUSH
31049: LD_VAR 0 2
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31071
// SetLives ( i , 1 ) ;
31057: LD_VAR 0 1
31061: PPUSH
31062: LD_INT 1
31064: PPUSH
31065: CALL_OW 234
31069: GO 31054
31071: POP
31072: POP
// end ;
31073: PPOPN 2
31075: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31076: LD_EXP 61
31080: PUSH
31081: LD_EXP 110
31085: AND
31086: IFFALSE 31373
31088: GO 31090
31090: DISABLE
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
// begin i := rand ( 1 , 7 ) ;
31096: LD_ADDR_VAR 0 1
31100: PUSH
31101: LD_INT 1
31103: PPUSH
31104: LD_INT 7
31106: PPUSH
31107: CALL_OW 12
31111: ST_TO_ADDR
// case i of 1 :
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 1
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31135
31125: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31126: LD_STRING earthquake(getX(game), 0, 32)
31128: PPUSH
31129: CALL_OW 559
31133: GO 31373
31135: LD_INT 2
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31157
31143: POP
// begin ToLua ( displayStucuk(); ) ;
31144: LD_STRING displayStucuk();
31146: PPUSH
31147: CALL_OW 559
// ResetFog ;
31151: CALL_OW 335
// end ; 3 :
31155: GO 31373
31157: LD_INT 3
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31269
31165: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31166: LD_ADDR_VAR 0 2
31170: PUSH
31171: LD_INT 22
31173: PUSH
31174: LD_OWVAR 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 25
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PPUSH
31197: CALL_OW 69
31201: ST_TO_ADDR
// if not tmp then
31202: LD_VAR 0 2
31206: NOT
31207: IFFALSE 31211
// exit ;
31209: GO 31373
// un := tmp [ rand ( 1 , tmp ) ] ;
31211: LD_ADDR_VAR 0 3
31215: PUSH
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 1
31223: PPUSH
31224: LD_VAR 0 2
31228: PPUSH
31229: CALL_OW 12
31233: ARRAY
31234: ST_TO_ADDR
// if Crawls ( un ) then
31235: LD_VAR 0 3
31239: PPUSH
31240: CALL_OW 318
31244: IFFALSE 31255
// ComWalk ( un ) ;
31246: LD_VAR 0 3
31250: PPUSH
31251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31255: LD_VAR 0 3
31259: PPUSH
31260: LD_INT 8
31262: PPUSH
31263: CALL_OW 336
// end ; 4 :
31267: GO 31373
31269: LD_INT 4
31271: DOUBLE
31272: EQUAL
31273: IFTRUE 31277
31275: GO 31351
31277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_OWVAR 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: LD_INT 29
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PPUSH
31309: CALL_OW 69
31313: ST_TO_ADDR
// if not tmp then
31314: LD_VAR 0 2
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 31373
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31323: LD_VAR 0 2
31327: PUSH
31328: LD_INT 1
31330: ARRAY
31331: PPUSH
31332: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31336: LD_VAR 0 2
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: PPUSH
31345: CALL_OW 65
// end ; 5 .. 7 :
31349: GO 31373
31351: LD_INT 5
31353: DOUBLE
31354: GREATEREQUAL
31355: IFFALSE 31363
31357: LD_INT 7
31359: DOUBLE
31360: LESSEQUAL
31361: IFTRUE 31365
31363: GO 31372
31365: POP
// StreamSibBomb ; end ;
31366: CALL 27610 0 0
31370: GO 31373
31372: POP
// end ;
31373: PPOPN 3
31375: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31376: LD_EXP 61
31380: PUSH
31381: LD_EXP 111
31385: AND
31386: IFFALSE 31542
31388: GO 31390
31390: DISABLE
31391: LD_INT 0
31393: PPUSH
31394: PPUSH
31395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31396: LD_ADDR_VAR 0 2
31400: PUSH
31401: LD_INT 81
31403: PUSH
31404: LD_OWVAR 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 21
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PPUSH
31445: CALL_OW 69
31449: ST_TO_ADDR
// if not tmp then
31450: LD_VAR 0 2
31454: NOT
31455: IFFALSE 31459
// exit ;
31457: GO 31542
// p := 0 ;
31459: LD_ADDR_VAR 0 3
31463: PUSH
31464: LD_INT 0
31466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31467: LD_INT 35
31469: PPUSH
31470: CALL_OW 67
// p := p + 1 ;
31474: LD_ADDR_VAR 0 3
31478: PUSH
31479: LD_VAR 0 3
31483: PUSH
31484: LD_INT 1
31486: PLUS
31487: ST_TO_ADDR
// for i in tmp do
31488: LD_ADDR_VAR 0 1
31492: PUSH
31493: LD_VAR 0 2
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31530
// if GetLives ( i ) < 1000 then
31501: LD_VAR 0 1
31505: PPUSH
31506: CALL_OW 256
31510: PUSH
31511: LD_INT 1000
31513: LESS
31514: IFFALSE 31528
// SetLives ( i , 1000 ) ;
31516: LD_VAR 0 1
31520: PPUSH
31521: LD_INT 1000
31523: PPUSH
31524: CALL_OW 234
31528: GO 31498
31530: POP
31531: POP
// until p > 20 ;
31532: LD_VAR 0 3
31536: PUSH
31537: LD_INT 20
31539: GREATER
31540: IFFALSE 31467
// end ;
31542: PPOPN 3
31544: END
// every 0 0$1 trigger StreamModeActive and sTime do
31545: LD_EXP 61
31549: PUSH
31550: LD_EXP 112
31554: AND
31555: IFFALSE 31590
31557: GO 31559
31559: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31560: LD_INT 28
31562: PPUSH
31563: LD_OWVAR 2
31567: PPUSH
31568: LD_INT 2
31570: PPUSH
31571: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31575: LD_INT 30
31577: PPUSH
31578: LD_OWVAR 2
31582: PPUSH
31583: LD_INT 2
31585: PPUSH
31586: CALL_OW 322
// end ;
31590: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31591: LD_EXP 61
31595: PUSH
31596: LD_EXP 113
31600: AND
31601: IFFALSE 31722
31603: GO 31605
31605: DISABLE
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31610: LD_ADDR_VAR 0 2
31614: PUSH
31615: LD_INT 22
31617: PUSH
31618: LD_OWVAR 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 21
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 23
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: PPUSH
31659: CALL_OW 69
31663: ST_TO_ADDR
// if not tmp then
31664: LD_VAR 0 2
31668: NOT
31669: IFFALSE 31673
// exit ;
31671: GO 31722
// for i in tmp do
31673: LD_ADDR_VAR 0 1
31677: PUSH
31678: LD_VAR 0 2
31682: PUSH
31683: FOR_IN
31684: IFFALSE 31720
// begin if Crawls ( i ) then
31686: LD_VAR 0 1
31690: PPUSH
31691: CALL_OW 318
31695: IFFALSE 31706
// ComWalk ( i ) ;
31697: LD_VAR 0 1
31701: PPUSH
31702: CALL_OW 138
// SetClass ( i , 2 ) ;
31706: LD_VAR 0 1
31710: PPUSH
31711: LD_INT 2
31713: PPUSH
31714: CALL_OW 336
// end ;
31718: GO 31683
31720: POP
31721: POP
// end ;
31722: PPOPN 2
31724: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31725: LD_EXP 61
31729: PUSH
31730: LD_EXP 114
31734: AND
31735: IFFALSE 32023
31737: GO 31739
31739: DISABLE
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
31744: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31745: LD_OWVAR 2
31749: PPUSH
31750: LD_INT 9
31752: PPUSH
31753: LD_INT 1
31755: PPUSH
31756: LD_INT 1
31758: PPUSH
31759: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31763: LD_INT 9
31765: PPUSH
31766: LD_OWVAR 2
31770: PPUSH
31771: CALL_OW 343
// uc_side := 9 ;
31775: LD_ADDR_OWVAR 20
31779: PUSH
31780: LD_INT 9
31782: ST_TO_ADDR
// uc_nation := 2 ;
31783: LD_ADDR_OWVAR 21
31787: PUSH
31788: LD_INT 2
31790: ST_TO_ADDR
// hc_name := Dark Warrior ;
31791: LD_ADDR_OWVAR 26
31795: PUSH
31796: LD_STRING Dark Warrior
31798: ST_TO_ADDR
// hc_gallery :=  ;
31799: LD_ADDR_OWVAR 33
31803: PUSH
31804: LD_STRING 
31806: ST_TO_ADDR
// hc_noskilllimit := true ;
31807: LD_ADDR_OWVAR 76
31811: PUSH
31812: LD_INT 1
31814: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31815: LD_ADDR_OWVAR 31
31819: PUSH
31820: LD_INT 30
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 30
31828: PUSH
31829: LD_INT 30
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// un := CreateHuman ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: CALL_OW 44
31847: ST_TO_ADDR
// hc_noskilllimit := false ;
31848: LD_ADDR_OWVAR 76
31852: PUSH
31853: LD_INT 0
31855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31856: LD_VAR 0 3
31860: PPUSH
31861: LD_INT 1
31863: PPUSH
31864: CALL_OW 51
// ToLua ( playRanger() ) ;
31868: LD_STRING playRanger()
31870: PPUSH
31871: CALL_OW 559
// p := 0 ;
31875: LD_ADDR_VAR 0 2
31879: PUSH
31880: LD_INT 0
31882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31883: LD_INT 35
31885: PPUSH
31886: CALL_OW 67
// p := p + 1 ;
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_VAR 0 2
31899: PUSH
31900: LD_INT 1
31902: PLUS
31903: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31904: LD_VAR 0 3
31908: PPUSH
31909: CALL_OW 256
31913: PUSH
31914: LD_INT 1000
31916: LESS
31917: IFFALSE 31931
// SetLives ( un , 1000 ) ;
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_INT 1000
31926: PPUSH
31927: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31931: LD_VAR 0 3
31935: PPUSH
31936: LD_INT 81
31938: PUSH
31939: LD_OWVAR 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 91
31950: PUSH
31951: LD_VAR 0 3
31955: PUSH
31956: LD_INT 30
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PPUSH
31968: CALL_OW 69
31972: PPUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: CALL_OW 74
31982: PPUSH
31983: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31987: LD_VAR 0 2
31991: PUSH
31992: LD_INT 80
31994: GREATER
31995: PUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: CALL_OW 301
32005: OR
32006: IFFALSE 31883
// if un then
32008: LD_VAR 0 3
32012: IFFALSE 32023
// RemoveUnit ( un ) ;
32014: LD_VAR 0 3
32018: PPUSH
32019: CALL_OW 64
// end ;
32023: PPOPN 3
32025: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32026: LD_EXP 115
32030: IFFALSE 32146
32032: GO 32034
32034: DISABLE
32035: LD_INT 0
32037: PPUSH
32038: PPUSH
32039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32040: LD_ADDR_VAR 0 2
32044: PUSH
32045: LD_INT 81
32047: PUSH
32048: LD_OWVAR 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 21
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PPUSH
32071: CALL_OW 69
32075: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32076: LD_STRING playComputer()
32078: PPUSH
32079: CALL_OW 559
// if not tmp then
32083: LD_VAR 0 2
32087: NOT
32088: IFFALSE 32092
// exit ;
32090: GO 32146
// for i in tmp do
32092: LD_ADDR_VAR 0 1
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: FOR_IN
32103: IFFALSE 32144
// for j := 1 to 4 do
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: DOUBLE
32111: LD_INT 1
32113: DEC
32114: ST_TO_ADDR
32115: LD_INT 4
32117: PUSH
32118: FOR_TO
32119: IFFALSE 32140
// SetSkill ( i , j , 10 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: LD_INT 10
32133: PPUSH
32134: CALL_OW 237
32138: GO 32118
32140: POP
32141: POP
32142: GO 32102
32144: POP
32145: POP
// end ;
32146: PPOPN 3
32148: END
// every 0 0$1 trigger s30 do var i , tmp ;
32149: LD_EXP 116
32153: IFFALSE 32222
32155: GO 32157
32157: DISABLE
32158: LD_INT 0
32160: PPUSH
32161: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32162: LD_ADDR_VAR 0 2
32166: PUSH
32167: LD_INT 22
32169: PUSH
32170: LD_OWVAR 2
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 69
32183: ST_TO_ADDR
// if not tmp then
32184: LD_VAR 0 2
32188: NOT
32189: IFFALSE 32193
// exit ;
32191: GO 32222
// for i in tmp do
32193: LD_ADDR_VAR 0 1
32197: PUSH
32198: LD_VAR 0 2
32202: PUSH
32203: FOR_IN
32204: IFFALSE 32220
// SetLives ( i , 300 ) ;
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_INT 300
32213: PPUSH
32214: CALL_OW 234
32218: GO 32203
32220: POP
32221: POP
// end ;
32222: PPOPN 2
32224: END
// every 0 0$1 trigger s60 do var i , tmp ;
32225: LD_EXP 117
32229: IFFALSE 32298
32231: GO 32233
32233: DISABLE
32234: LD_INT 0
32236: PPUSH
32237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32238: LD_ADDR_VAR 0 2
32242: PUSH
32243: LD_INT 22
32245: PUSH
32246: LD_OWVAR 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PPUSH
32255: CALL_OW 69
32259: ST_TO_ADDR
// if not tmp then
32260: LD_VAR 0 2
32264: NOT
32265: IFFALSE 32269
// exit ;
32267: GO 32298
// for i in tmp do
32269: LD_ADDR_VAR 0 1
32273: PUSH
32274: LD_VAR 0 2
32278: PUSH
32279: FOR_IN
32280: IFFALSE 32296
// SetLives ( i , 600 ) ;
32282: LD_VAR 0 1
32286: PPUSH
32287: LD_INT 600
32289: PPUSH
32290: CALL_OW 234
32294: GO 32279
32296: POP
32297: POP
// end ;
32298: PPOPN 2
32300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32301: LD_INT 0
32303: PPUSH
// case cmd of 301 :
32304: LD_VAR 0 1
32308: PUSH
32309: LD_INT 301
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32349
32317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 4
32337: PPUSH
32338: LD_VAR 0 5
32342: PPUSH
32343: CALL 33558 0 5
32347: GO 32470
32349: LD_INT 302
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32394
32357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32358: LD_VAR 0 6
32362: PPUSH
32363: LD_VAR 0 7
32367: PPUSH
32368: LD_VAR 0 8
32372: PPUSH
32373: LD_VAR 0 9
32377: PPUSH
32378: LD_VAR 0 4
32382: PPUSH
32383: LD_VAR 0 5
32387: PPUSH
32388: CALL 33649 0 6
32392: GO 32470
32394: LD_INT 303
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32439
32402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32403: LD_VAR 0 6
32407: PPUSH
32408: LD_VAR 0 7
32412: PPUSH
32413: LD_VAR 0 8
32417: PPUSH
32418: LD_VAR 0 9
32422: PPUSH
32423: LD_VAR 0 4
32427: PPUSH
32428: LD_VAR 0 5
32432: PPUSH
32433: CALL 32475 0 6
32437: GO 32470
32439: LD_INT 304
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32469
32447: POP
// hHackTeleport ( unit , x , y ) ; end ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 4
32457: PPUSH
32458: LD_VAR 0 5
32462: PPUSH
32463: CALL 34242 0 3
32467: GO 32470
32469: POP
// end ;
32470: LD_VAR 0 12
32474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32475: LD_INT 0
32477: PPUSH
32478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32479: LD_VAR 0 1
32483: PUSH
32484: LD_INT 1
32486: LESS
32487: PUSH
32488: LD_VAR 0 1
32492: PUSH
32493: LD_INT 3
32495: GREATER
32496: OR
32497: PUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_VAR 0 6
32507: PPUSH
32508: CALL_OW 428
32512: OR
32513: IFFALSE 32517
// exit ;
32515: GO 33245
// uc_side := your_side ;
32517: LD_ADDR_OWVAR 20
32521: PUSH
32522: LD_OWVAR 2
32526: ST_TO_ADDR
// uc_nation := nation ;
32527: LD_ADDR_OWVAR 21
32531: PUSH
32532: LD_VAR 0 1
32536: ST_TO_ADDR
// bc_level = 1 ;
32537: LD_ADDR_OWVAR 43
32541: PUSH
32542: LD_INT 1
32544: ST_TO_ADDR
// case btype of 1 :
32545: LD_VAR 0 2
32549: PUSH
32550: LD_INT 1
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32569
32558: POP
// bc_type := b_depot ; 2 :
32559: LD_ADDR_OWVAR 42
32563: PUSH
32564: LD_INT 0
32566: ST_TO_ADDR
32567: GO 33189
32569: LD_INT 2
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32588
32577: POP
// bc_type := b_warehouse ; 3 :
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 1
32585: ST_TO_ADDR
32586: GO 33189
32588: LD_INT 3
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32607
32596: POP
// bc_type := b_lab ; 4 .. 9 :
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 6
32604: ST_TO_ADDR
32605: GO 33189
32607: LD_INT 4
32609: DOUBLE
32610: GREATEREQUAL
32611: IFFALSE 32619
32613: LD_INT 9
32615: DOUBLE
32616: LESSEQUAL
32617: IFTRUE 32621
32619: GO 32681
32621: POP
// begin bc_type := b_lab_half ;
32622: LD_ADDR_OWVAR 42
32626: PUSH
32627: LD_INT 7
32629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32630: LD_ADDR_OWVAR 44
32634: PUSH
32635: LD_INT 10
32637: PUSH
32638: LD_INT 11
32640: PUSH
32641: LD_INT 12
32643: PUSH
32644: LD_INT 15
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: LD_INT 13
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: LD_INT 3
32668: MINUS
32669: ARRAY
32670: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32671: LD_ADDR_OWVAR 45
32675: PUSH
32676: LD_INT 9
32678: ST_TO_ADDR
// end ; 10 .. 13 :
32679: GO 33189
32681: LD_INT 10
32683: DOUBLE
32684: GREATEREQUAL
32685: IFFALSE 32693
32687: LD_INT 13
32689: DOUBLE
32690: LESSEQUAL
32691: IFTRUE 32695
32693: GO 32772
32695: POP
// begin bc_type := b_lab_full ;
32696: LD_ADDR_OWVAR 42
32700: PUSH
32701: LD_INT 8
32703: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32704: LD_ADDR_OWVAR 44
32708: PUSH
32709: LD_INT 10
32711: PUSH
32712: LD_INT 12
32714: PUSH
32715: LD_INT 14
32717: PUSH
32718: LD_INT 13
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: PUSH
32727: LD_VAR 0 2
32731: PUSH
32732: LD_INT 9
32734: MINUS
32735: ARRAY
32736: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32737: LD_ADDR_OWVAR 45
32741: PUSH
32742: LD_INT 11
32744: PUSH
32745: LD_INT 15
32747: PUSH
32748: LD_INT 12
32750: PUSH
32751: LD_INT 15
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: PUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_INT 9
32767: MINUS
32768: ARRAY
32769: ST_TO_ADDR
// end ; 14 :
32770: GO 33189
32772: LD_INT 14
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32791
32780: POP
// bc_type := b_workshop ; 15 :
32781: LD_ADDR_OWVAR 42
32785: PUSH
32786: LD_INT 2
32788: ST_TO_ADDR
32789: GO 33189
32791: LD_INT 15
32793: DOUBLE
32794: EQUAL
32795: IFTRUE 32799
32797: GO 32810
32799: POP
// bc_type := b_factory ; 16 :
32800: LD_ADDR_OWVAR 42
32804: PUSH
32805: LD_INT 3
32807: ST_TO_ADDR
32808: GO 33189
32810: LD_INT 16
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32829
32818: POP
// bc_type := b_ext_gun ; 17 :
32819: LD_ADDR_OWVAR 42
32823: PUSH
32824: LD_INT 17
32826: ST_TO_ADDR
32827: GO 33189
32829: LD_INT 17
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32865
32837: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32838: LD_ADDR_OWVAR 42
32842: PUSH
32843: LD_INT 19
32845: PUSH
32846: LD_INT 23
32848: PUSH
32849: LD_INT 19
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PUSH
32857: LD_VAR 0 1
32861: ARRAY
32862: ST_TO_ADDR
32863: GO 33189
32865: LD_INT 18
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32884
32873: POP
// bc_type := b_ext_radar ; 19 :
32874: LD_ADDR_OWVAR 42
32878: PUSH
32879: LD_INT 20
32881: ST_TO_ADDR
32882: GO 33189
32884: LD_INT 19
32886: DOUBLE
32887: EQUAL
32888: IFTRUE 32892
32890: GO 32903
32892: POP
// bc_type := b_ext_radio ; 20 :
32893: LD_ADDR_OWVAR 42
32897: PUSH
32898: LD_INT 22
32900: ST_TO_ADDR
32901: GO 33189
32903: LD_INT 20
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32922
32911: POP
// bc_type := b_ext_siberium ; 21 :
32912: LD_ADDR_OWVAR 42
32916: PUSH
32917: LD_INT 21
32919: ST_TO_ADDR
32920: GO 33189
32922: LD_INT 21
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32941
32930: POP
// bc_type := b_ext_computer ; 22 :
32931: LD_ADDR_OWVAR 42
32935: PUSH
32936: LD_INT 24
32938: ST_TO_ADDR
32939: GO 33189
32941: LD_INT 22
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32960
32949: POP
// bc_type := b_ext_track ; 23 :
32950: LD_ADDR_OWVAR 42
32954: PUSH
32955: LD_INT 16
32957: ST_TO_ADDR
32958: GO 33189
32960: LD_INT 23
32962: DOUBLE
32963: EQUAL
32964: IFTRUE 32968
32966: GO 32979
32968: POP
// bc_type := b_ext_laser ; 24 :
32969: LD_ADDR_OWVAR 42
32973: PUSH
32974: LD_INT 25
32976: ST_TO_ADDR
32977: GO 33189
32979: LD_INT 24
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 32998
32987: POP
// bc_type := b_control_tower ; 25 :
32988: LD_ADDR_OWVAR 42
32992: PUSH
32993: LD_INT 36
32995: ST_TO_ADDR
32996: GO 33189
32998: LD_INT 25
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33017
33006: POP
// bc_type := b_breastwork ; 26 :
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 31
33014: ST_TO_ADDR
33015: GO 33189
33017: LD_INT 26
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33025
33023: GO 33036
33025: POP
// bc_type := b_bunker ; 27 :
33026: LD_ADDR_OWVAR 42
33030: PUSH
33031: LD_INT 32
33033: ST_TO_ADDR
33034: GO 33189
33036: LD_INT 27
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33055
33044: POP
// bc_type := b_turret ; 28 :
33045: LD_ADDR_OWVAR 42
33049: PUSH
33050: LD_INT 33
33052: ST_TO_ADDR
33053: GO 33189
33055: LD_INT 28
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33074
33063: POP
// bc_type := b_armoury ; 29 :
33064: LD_ADDR_OWVAR 42
33068: PUSH
33069: LD_INT 4
33071: ST_TO_ADDR
33072: GO 33189
33074: LD_INT 29
33076: DOUBLE
33077: EQUAL
33078: IFTRUE 33082
33080: GO 33093
33082: POP
// bc_type := b_barracks ; 30 :
33083: LD_ADDR_OWVAR 42
33087: PUSH
33088: LD_INT 5
33090: ST_TO_ADDR
33091: GO 33189
33093: LD_INT 30
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33101
33099: GO 33112
33101: POP
// bc_type := b_solar_power ; 31 :
33102: LD_ADDR_OWVAR 42
33106: PUSH
33107: LD_INT 27
33109: ST_TO_ADDR
33110: GO 33189
33112: LD_INT 31
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33131
33120: POP
// bc_type := b_oil_power ; 32 :
33121: LD_ADDR_OWVAR 42
33125: PUSH
33126: LD_INT 26
33128: ST_TO_ADDR
33129: GO 33189
33131: LD_INT 32
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33150
33139: POP
// bc_type := b_siberite_power ; 33 :
33140: LD_ADDR_OWVAR 42
33144: PUSH
33145: LD_INT 28
33147: ST_TO_ADDR
33148: GO 33189
33150: LD_INT 33
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33169
33158: POP
// bc_type := b_oil_mine ; 34 :
33159: LD_ADDR_OWVAR 42
33163: PUSH
33164: LD_INT 29
33166: ST_TO_ADDR
33167: GO 33189
33169: LD_INT 34
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33188
33177: POP
// bc_type := b_siberite_mine ; end ;
33178: LD_ADDR_OWVAR 42
33182: PUSH
33183: LD_INT 30
33185: ST_TO_ADDR
33186: GO 33189
33188: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33189: LD_ADDR_VAR 0 8
33193: PUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: LD_VAR 0 6
33203: PPUSH
33204: LD_VAR 0 3
33208: PPUSH
33209: CALL_OW 47
33213: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33214: LD_OWVAR 42
33218: PUSH
33219: LD_INT 32
33221: PUSH
33222: LD_INT 33
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: IN
33229: IFFALSE 33245
// PlaceWeaponTurret ( b , weapon ) ;
33231: LD_VAR 0 8
33235: PPUSH
33236: LD_VAR 0 4
33240: PPUSH
33241: CALL_OW 431
// end ;
33245: LD_VAR 0 7
33249: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33256: LD_ADDR_VAR 0 4
33260: PUSH
33261: LD_INT 22
33263: PUSH
33264: LD_OWVAR 2
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 30
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 30
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PPUSH
33305: CALL_OW 69
33309: ST_TO_ADDR
// if not tmp then
33310: LD_VAR 0 4
33314: NOT
33315: IFFALSE 33319
// exit ;
33317: GO 33378
// for i in tmp do
33319: LD_ADDR_VAR 0 2
33323: PUSH
33324: LD_VAR 0 4
33328: PUSH
33329: FOR_IN
33330: IFFALSE 33376
// for j = 1 to 3 do
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: DOUBLE
33338: LD_INT 1
33340: DEC
33341: ST_TO_ADDR
33342: LD_INT 3
33344: PUSH
33345: FOR_TO
33346: IFFALSE 33372
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33348: LD_VAR 0 2
33352: PPUSH
33353: CALL_OW 274
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_INT 99999
33365: PPUSH
33366: CALL_OW 277
33370: GO 33345
33372: POP
33373: POP
33374: GO 33329
33376: POP
33377: POP
// end ;
33378: LD_VAR 0 1
33382: RET
// export function hHackSetLevel10 ; var i , j ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 21
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PPUSH
33403: CALL_OW 69
33407: PUSH
33408: FOR_IN
33409: IFFALSE 33461
// if IsSelected ( i ) then
33411: LD_VAR 0 2
33415: PPUSH
33416: CALL_OW 306
33420: IFFALSE 33459
// begin for j := 1 to 4 do
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: DOUBLE
33428: LD_INT 1
33430: DEC
33431: ST_TO_ADDR
33432: LD_INT 4
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33457
// SetSkill ( i , j , 10 ) ;
33438: LD_VAR 0 2
33442: PPUSH
33443: LD_VAR 0 3
33447: PPUSH
33448: LD_INT 10
33450: PPUSH
33451: CALL_OW 237
33455: GO 33435
33457: POP
33458: POP
// end ;
33459: GO 33408
33461: POP
33462: POP
// end ;
33463: LD_VAR 0 1
33467: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33473: LD_ADDR_VAR 0 2
33477: PUSH
33478: LD_INT 22
33480: PUSH
33481: LD_OWVAR 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 21
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 69
33508: PUSH
33509: FOR_IN
33510: IFFALSE 33551
// begin for j := 1 to 4 do
33512: LD_ADDR_VAR 0 3
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_INT 4
33524: PUSH
33525: FOR_TO
33526: IFFALSE 33547
// SetSkill ( i , j , 10 ) ;
33528: LD_VAR 0 2
33532: PPUSH
33533: LD_VAR 0 3
33537: PPUSH
33538: LD_INT 10
33540: PPUSH
33541: CALL_OW 237
33545: GO 33525
33547: POP
33548: POP
// end ;
33549: GO 33509
33551: POP
33552: POP
// end ;
33553: LD_VAR 0 1
33557: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33558: LD_INT 0
33560: PPUSH
// uc_side := your_side ;
33561: LD_ADDR_OWVAR 20
33565: PUSH
33566: LD_OWVAR 2
33570: ST_TO_ADDR
// uc_nation := nation ;
33571: LD_ADDR_OWVAR 21
33575: PUSH
33576: LD_VAR 0 1
33580: ST_TO_ADDR
// InitHc ;
33581: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33585: LD_INT 0
33587: PPUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: LD_VAR 0 3
33597: PPUSH
33598: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33602: LD_VAR 0 4
33606: PPUSH
33607: LD_VAR 0 5
33611: PPUSH
33612: CALL_OW 428
33616: PUSH
33617: LD_INT 0
33619: EQUAL
33620: IFFALSE 33644
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33622: CALL_OW 44
33626: PPUSH
33627: LD_VAR 0 4
33631: PPUSH
33632: LD_VAR 0 5
33636: PPUSH
33637: LD_INT 1
33639: PPUSH
33640: CALL_OW 48
// end ;
33644: LD_VAR 0 6
33648: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
// uc_side := your_side ;
33653: LD_ADDR_OWVAR 20
33657: PUSH
33658: LD_OWVAR 2
33662: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33663: LD_VAR 0 1
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: LD_INT 5
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: IN
33690: IFFALSE 33702
// uc_nation := nation_american else
33692: LD_ADDR_OWVAR 21
33696: PUSH
33697: LD_INT 1
33699: ST_TO_ADDR
33700: GO 33745
// if chassis in [ 11 , 12 , 13 , 14 ] then
33702: LD_VAR 0 1
33706: PUSH
33707: LD_INT 11
33709: PUSH
33710: LD_INT 12
33712: PUSH
33713: LD_INT 13
33715: PUSH
33716: LD_INT 14
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: IN
33725: IFFALSE 33737
// uc_nation := nation_arabian else
33727: LD_ADDR_OWVAR 21
33731: PUSH
33732: LD_INT 2
33734: ST_TO_ADDR
33735: GO 33745
// uc_nation := nation_russian ;
33737: LD_ADDR_OWVAR 21
33741: PUSH
33742: LD_INT 3
33744: ST_TO_ADDR
// vc_chassis := chassis ;
33745: LD_ADDR_OWVAR 37
33749: PUSH
33750: LD_VAR 0 1
33754: ST_TO_ADDR
// vc_engine := engine ;
33755: LD_ADDR_OWVAR 39
33759: PUSH
33760: LD_VAR 0 2
33764: ST_TO_ADDR
// vc_control := control ;
33765: LD_ADDR_OWVAR 38
33769: PUSH
33770: LD_VAR 0 3
33774: ST_TO_ADDR
// vc_weapon := weapon ;
33775: LD_ADDR_OWVAR 40
33779: PUSH
33780: LD_VAR 0 4
33784: ST_TO_ADDR
// un := CreateVehicle ;
33785: LD_ADDR_VAR 0 8
33789: PUSH
33790: CALL_OW 45
33794: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_INT 0
33802: PPUSH
33803: LD_INT 5
33805: PPUSH
33806: CALL_OW 12
33810: PPUSH
33811: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33815: LD_VAR 0 8
33819: PPUSH
33820: LD_VAR 0 5
33824: PPUSH
33825: LD_VAR 0 6
33829: PPUSH
33830: LD_INT 1
33832: PPUSH
33833: CALL_OW 48
// end ;
33837: LD_VAR 0 7
33841: RET
// export hInvincible ; every 1 do
33842: GO 33844
33844: DISABLE
// hInvincible := [ ] ;
33845: LD_ADDR_EXP 118
33849: PUSH
33850: EMPTY
33851: ST_TO_ADDR
33852: END
// every 10 do var i ;
33853: GO 33855
33855: DISABLE
33856: LD_INT 0
33858: PPUSH
// begin enable ;
33859: ENABLE
// if not hInvincible then
33860: LD_EXP 118
33864: NOT
33865: IFFALSE 33869
// exit ;
33867: GO 33913
// for i in hInvincible do
33869: LD_ADDR_VAR 0 1
33873: PUSH
33874: LD_EXP 118
33878: PUSH
33879: FOR_IN
33880: IFFALSE 33911
// if GetLives ( i ) < 1000 then
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 256
33891: PUSH
33892: LD_INT 1000
33894: LESS
33895: IFFALSE 33909
// SetLives ( i , 1000 ) ;
33897: LD_VAR 0 1
33901: PPUSH
33902: LD_INT 1000
33904: PPUSH
33905: CALL_OW 234
33909: GO 33879
33911: POP
33912: POP
// end ;
33913: PPOPN 1
33915: END
// export function hHackInvincible ; var i ; begin
33916: LD_INT 0
33918: PPUSH
33919: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 21
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 21
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: PPUSH
33953: CALL_OW 69
33957: PUSH
33958: FOR_IN
33959: IFFALSE 34020
// if IsSelected ( i ) then
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL_OW 306
33970: IFFALSE 34018
// begin if i in hInvincible then
33972: LD_VAR 0 2
33976: PUSH
33977: LD_EXP 118
33981: IN
33982: IFFALSE 34002
// hInvincible := hInvincible diff i else
33984: LD_ADDR_EXP 118
33988: PUSH
33989: LD_EXP 118
33993: PUSH
33994: LD_VAR 0 2
33998: DIFF
33999: ST_TO_ADDR
34000: GO 34018
// hInvincible := hInvincible union i ;
34002: LD_ADDR_EXP 118
34006: PUSH
34007: LD_EXP 118
34011: PUSH
34012: LD_VAR 0 2
34016: UNION
34017: ST_TO_ADDR
// end ;
34018: GO 33958
34020: POP
34021: POP
// end ;
34022: LD_VAR 0 1
34026: RET
// export function hHackInvisible ; var i , j ; begin
34027: LD_INT 0
34029: PPUSH
34030: PPUSH
34031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34032: LD_ADDR_VAR 0 2
34036: PUSH
34037: LD_INT 21
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PPUSH
34047: CALL_OW 69
34051: PUSH
34052: FOR_IN
34053: IFFALSE 34077
// if IsSelected ( i ) then
34055: LD_VAR 0 2
34059: PPUSH
34060: CALL_OW 306
34064: IFFALSE 34075
// ComForceInvisible ( i ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 496
34075: GO 34052
34077: POP
34078: POP
// end ;
34079: LD_VAR 0 1
34083: RET
// export function hHackChangeYourSide ; begin
34084: LD_INT 0
34086: PPUSH
// if your_side = 8 then
34087: LD_OWVAR 2
34091: PUSH
34092: LD_INT 8
34094: EQUAL
34095: IFFALSE 34107
// your_side := 0 else
34097: LD_ADDR_OWVAR 2
34101: PUSH
34102: LD_INT 0
34104: ST_TO_ADDR
34105: GO 34121
// your_side := your_side + 1 ;
34107: LD_ADDR_OWVAR 2
34111: PUSH
34112: LD_OWVAR 2
34116: PUSH
34117: LD_INT 1
34119: PLUS
34120: ST_TO_ADDR
// end ;
34121: LD_VAR 0 1
34125: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34126: LD_INT 0
34128: PPUSH
34129: PPUSH
34130: PPUSH
// for i in all_units do
34131: LD_ADDR_VAR 0 2
34135: PUSH
34136: LD_OWVAR 3
34140: PUSH
34141: FOR_IN
34142: IFFALSE 34220
// if IsSelected ( i ) then
34144: LD_VAR 0 2
34148: PPUSH
34149: CALL_OW 306
34153: IFFALSE 34218
// begin j := GetSide ( i ) ;
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_VAR 0 2
34164: PPUSH
34165: CALL_OW 255
34169: ST_TO_ADDR
// if j = 8 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 8
34177: EQUAL
34178: IFFALSE 34190
// j := 0 else
34180: LD_ADDR_VAR 0 3
34184: PUSH
34185: LD_INT 0
34187: ST_TO_ADDR
34188: GO 34204
// j := j + 1 ;
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: LD_VAR 0 3
34199: PUSH
34200: LD_INT 1
34202: PLUS
34203: ST_TO_ADDR
// SetSide ( i , j ) ;
34204: LD_VAR 0 2
34208: PPUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 235
// end ;
34218: GO 34141
34220: POP
34221: POP
// end ;
34222: LD_VAR 0 1
34226: RET
// export function hHackFog ; begin
34227: LD_INT 0
34229: PPUSH
// FogOff ( true ) ;
34230: LD_INT 1
34232: PPUSH
34233: CALL_OW 344
// end ;
34237: LD_VAR 0 1
34241: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34242: LD_INT 0
34244: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_VAR 0 2
34254: PPUSH
34255: LD_VAR 0 3
34259: PPUSH
34260: LD_INT 1
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: CALL_OW 483
// CenterOnXY ( x , y ) ;
34270: LD_VAR 0 2
34274: PPUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: CALL_OW 84
// end ;
34284: LD_VAR 0 4
34288: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34289: LD_INT 0
34291: PPUSH
34292: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34293: LD_VAR 0 1
34297: NOT
34298: PUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: CALL_OW 488
34313: NOT
34314: OR
34315: PUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL_OW 266
34325: PUSH
34326: LD_INT 3
34328: NONEQUAL
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 247
34339: PUSH
34340: LD_INT 1
34342: EQUAL
34343: NOT
34344: AND
34345: OR
34346: IFFALSE 34350
// exit ;
34348: GO 34499
// if GetType ( factory ) = unit_human then
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 247
34359: PUSH
34360: LD_INT 1
34362: EQUAL
34363: IFFALSE 34380
// factory := IsInUnit ( factory ) ;
34365: LD_ADDR_VAR 0 1
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 310
34379: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34380: LD_VAR 0 1
34384: PPUSH
34385: CALL_OW 266
34389: PUSH
34390: LD_INT 3
34392: NONEQUAL
34393: IFFALSE 34397
// exit ;
34395: GO 34499
// if HexInfo ( x , y ) = factory then
34397: LD_VAR 0 2
34401: PPUSH
34402: LD_VAR 0 3
34406: PPUSH
34407: CALL_OW 428
34411: PUSH
34412: LD_VAR 0 1
34416: EQUAL
34417: IFFALSE 34444
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34419: LD_ADDR_EXP 119
34423: PUSH
34424: LD_EXP 119
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_INT 0
34436: PPUSH
34437: CALL_OW 1
34441: ST_TO_ADDR
34442: GO 34495
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34444: LD_ADDR_EXP 119
34448: PUSH
34449: LD_EXP 119
34453: PPUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: CALL_OW 255
34468: PUSH
34469: LD_VAR 0 1
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_VAR 0 3
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 1
34494: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34495: CALL 34504 0 0
// end ;
34499: LD_VAR 0 4
34503: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34504: LD_INT 0
34506: PPUSH
34507: PPUSH
34508: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34509: LD_STRING resetFactoryWaypoint();
34511: PPUSH
34512: CALL_OW 559
// if factoryWaypoints then
34516: LD_EXP 119
34520: IFFALSE 34646
// begin list := PrepareArray ( factoryWaypoints ) ;
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_EXP 119
34531: PPUSH
34532: CALL 82020 0 1
34536: ST_TO_ADDR
// for i := 1 to list do
34537: LD_ADDR_VAR 0 2
34541: PUSH
34542: DOUBLE
34543: LD_INT 1
34545: DEC
34546: ST_TO_ADDR
34547: LD_VAR 0 3
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34644
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34555: LD_STRING setFactoryWaypointXY(
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PUSH
34569: LD_INT 1
34571: ARRAY
34572: STR
34573: PUSH
34574: LD_STRING ,
34576: STR
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: LD_VAR 0 2
34587: ARRAY
34588: PUSH
34589: LD_INT 2
34591: ARRAY
34592: STR
34593: PUSH
34594: LD_STRING ,
34596: STR
34597: PUSH
34598: LD_VAR 0 3
34602: PUSH
34603: LD_VAR 0 2
34607: ARRAY
34608: PUSH
34609: LD_INT 3
34611: ARRAY
34612: STR
34613: PUSH
34614: LD_STRING ,
34616: STR
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: LD_VAR 0 2
34627: ARRAY
34628: PUSH
34629: LD_INT 4
34631: ARRAY
34632: STR
34633: PUSH
34634: LD_STRING )
34636: STR
34637: PPUSH
34638: CALL_OW 559
34642: GO 34552
34644: POP
34645: POP
// end ; end ;
34646: LD_VAR 0 1
34650: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34651: LD_INT 0
34653: PPUSH
// if HexInfo ( x , y ) = warehouse then
34654: LD_VAR 0 2
34658: PPUSH
34659: LD_VAR 0 3
34663: PPUSH
34664: CALL_OW 428
34668: PUSH
34669: LD_VAR 0 1
34673: EQUAL
34674: IFFALSE 34701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34676: LD_ADDR_EXP 120
34680: PUSH
34681: LD_EXP 120
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_INT 0
34693: PPUSH
34694: CALL_OW 1
34698: ST_TO_ADDR
34699: GO 34752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34701: LD_ADDR_EXP 120
34705: PUSH
34706: LD_EXP 120
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 255
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_VAR 0 2
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: PPUSH
34747: CALL_OW 1
34751: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34752: CALL 34761 0 0
// end ;
34756: LD_VAR 0 4
34760: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34761: LD_INT 0
34763: PPUSH
34764: PPUSH
34765: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34766: LD_STRING resetWarehouseGatheringPoints();
34768: PPUSH
34769: CALL_OW 559
// if warehouseGatheringPoints then
34773: LD_EXP 120
34777: IFFALSE 34903
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34779: LD_ADDR_VAR 0 3
34783: PUSH
34784: LD_EXP 120
34788: PPUSH
34789: CALL 82020 0 1
34793: ST_TO_ADDR
// for i := 1 to list do
34794: LD_ADDR_VAR 0 2
34798: PUSH
34799: DOUBLE
34800: LD_INT 1
34802: DEC
34803: ST_TO_ADDR
34804: LD_VAR 0 3
34808: PUSH
34809: FOR_TO
34810: IFFALSE 34901
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34812: LD_STRING setWarehouseGatheringPointXY(
34814: PUSH
34815: LD_VAR 0 3
34819: PUSH
34820: LD_VAR 0 2
34824: ARRAY
34825: PUSH
34826: LD_INT 1
34828: ARRAY
34829: STR
34830: PUSH
34831: LD_STRING ,
34833: STR
34834: PUSH
34835: LD_VAR 0 3
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PUSH
34846: LD_INT 2
34848: ARRAY
34849: STR
34850: PUSH
34851: LD_STRING ,
34853: STR
34854: PUSH
34855: LD_VAR 0 3
34859: PUSH
34860: LD_VAR 0 2
34864: ARRAY
34865: PUSH
34866: LD_INT 3
34868: ARRAY
34869: STR
34870: PUSH
34871: LD_STRING ,
34873: STR
34874: PUSH
34875: LD_VAR 0 3
34879: PUSH
34880: LD_VAR 0 2
34884: ARRAY
34885: PUSH
34886: LD_INT 4
34888: ARRAY
34889: STR
34890: PUSH
34891: LD_STRING )
34893: STR
34894: PPUSH
34895: CALL_OW 559
34899: GO 34809
34901: POP
34902: POP
// end ; end ;
34903: LD_VAR 0 1
34907: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34908: LD_EXP 120
34912: IFFALSE 35597
34914: GO 34916
34916: DISABLE
34917: LD_INT 0
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
// begin enable ;
34928: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_EXP 120
34938: PPUSH
34939: CALL 82020 0 1
34943: ST_TO_ADDR
// if not list then
34944: LD_VAR 0 3
34948: NOT
34949: IFFALSE 34953
// exit ;
34951: GO 35597
// for i := 1 to list do
34953: LD_ADDR_VAR 0 1
34957: PUSH
34958: DOUBLE
34959: LD_INT 1
34961: DEC
34962: ST_TO_ADDR
34963: LD_VAR 0 3
34967: PUSH
34968: FOR_TO
34969: IFFALSE 35595
// begin depot := list [ i ] [ 2 ] ;
34971: LD_ADDR_VAR 0 8
34975: PUSH
34976: LD_VAR 0 3
34980: PUSH
34981: LD_VAR 0 1
34985: ARRAY
34986: PUSH
34987: LD_INT 2
34989: ARRAY
34990: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34991: LD_ADDR_VAR 0 5
34995: PUSH
34996: LD_VAR 0 3
35000: PUSH
35001: LD_VAR 0 1
35005: ARRAY
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35011: LD_VAR 0 8
35015: PPUSH
35016: CALL_OW 301
35020: PUSH
35021: LD_VAR 0 5
35025: PUSH
35026: LD_VAR 0 8
35030: PPUSH
35031: CALL_OW 255
35035: NONEQUAL
35036: OR
35037: IFFALSE 35066
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35039: LD_ADDR_EXP 120
35043: PUSH
35044: LD_EXP 120
35048: PPUSH
35049: LD_VAR 0 8
35053: PPUSH
35054: LD_INT 0
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
// exit ;
35062: POP
35063: POP
35064: GO 35597
// end ; x := list [ i ] [ 3 ] ;
35066: LD_ADDR_VAR 0 6
35070: PUSH
35071: LD_VAR 0 3
35075: PUSH
35076: LD_VAR 0 1
35080: ARRAY
35081: PUSH
35082: LD_INT 3
35084: ARRAY
35085: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35086: LD_ADDR_VAR 0 7
35090: PUSH
35091: LD_VAR 0 3
35095: PUSH
35096: LD_VAR 0 1
35100: ARRAY
35101: PUSH
35102: LD_INT 4
35104: ARRAY
35105: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35106: LD_ADDR_VAR 0 9
35110: PUSH
35111: LD_VAR 0 6
35115: PPUSH
35116: LD_VAR 0 7
35120: PPUSH
35121: LD_INT 16
35123: PPUSH
35124: CALL 80604 0 3
35128: ST_TO_ADDR
// if not cratesNearbyPoint then
35129: LD_VAR 0 9
35133: NOT
35134: IFFALSE 35140
// exit ;
35136: POP
35137: POP
35138: GO 35597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35140: LD_ADDR_VAR 0 4
35144: PUSH
35145: LD_INT 22
35147: PUSH
35148: LD_VAR 0 5
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: LD_INT 60
35162: PUSH
35163: EMPTY
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 91
35172: PUSH
35173: LD_VAR 0 8
35177: PUSH
35178: LD_INT 6
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 25
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 25
35201: PUSH
35202: LD_INT 16
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: PPUSH
35220: CALL_OW 69
35224: PUSH
35225: LD_VAR 0 8
35229: PPUSH
35230: CALL_OW 313
35234: PPUSH
35235: LD_INT 3
35237: PUSH
35238: LD_INT 60
35240: PUSH
35241: EMPTY
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 25
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 25
35263: PUSH
35264: LD_INT 16
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PPUSH
35280: CALL_OW 72
35284: UNION
35285: ST_TO_ADDR
// if tmp then
35286: LD_VAR 0 4
35290: IFFALSE 35370
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: LD_VAR 0 4
35301: PPUSH
35302: LD_INT 3
35304: PPUSH
35305: CALL 78573 0 2
35309: ST_TO_ADDR
// for j in tmp do
35310: LD_ADDR_VAR 0 2
35314: PUSH
35315: LD_VAR 0 4
35319: PUSH
35320: FOR_IN
35321: IFFALSE 35364
// begin if IsInUnit ( j ) then
35323: LD_VAR 0 2
35327: PPUSH
35328: CALL_OW 310
35332: IFFALSE 35343
// ComExit ( j ) ;
35334: LD_VAR 0 2
35338: PPUSH
35339: CALL 78656 0 1
// AddComCollect ( j , x , y ) ;
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 6
35352: PPUSH
35353: LD_VAR 0 7
35357: PPUSH
35358: CALL_OW 177
// end ;
35362: GO 35320
35364: POP
35365: POP
// exit ;
35366: POP
35367: POP
35368: GO 35597
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35370: LD_ADDR_VAR 0 4
35374: PUSH
35375: LD_INT 22
35377: PUSH
35378: LD_VAR 0 5
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 91
35389: PUSH
35390: LD_VAR 0 8
35394: PUSH
35395: LD_INT 8
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 34
35408: PUSH
35409: LD_INT 12
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 34
35418: PUSH
35419: LD_INT 51
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 34
35428: PUSH
35429: LD_INT 32
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 34
35438: PUSH
35439: LD_INT 89
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: PPUSH
35458: CALL_OW 69
35462: ST_TO_ADDR
// if tmp then
35463: LD_VAR 0 4
35467: IFFALSE 35593
// begin for j in tmp do
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_VAR 0 4
35478: PUSH
35479: FOR_IN
35480: IFFALSE 35591
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35482: LD_VAR 0 2
35486: PPUSH
35487: CALL_OW 262
35491: PUSH
35492: LD_INT 3
35494: EQUAL
35495: PUSH
35496: LD_VAR 0 2
35500: PPUSH
35501: CALL_OW 261
35505: PUSH
35506: LD_INT 20
35508: GREATER
35509: OR
35510: PUSH
35511: LD_VAR 0 2
35515: PPUSH
35516: CALL_OW 314
35520: NOT
35521: AND
35522: PUSH
35523: LD_VAR 0 2
35527: PPUSH
35528: CALL_OW 263
35532: PUSH
35533: LD_INT 1
35535: NONEQUAL
35536: PUSH
35537: LD_VAR 0 2
35541: PPUSH
35542: CALL_OW 311
35546: OR
35547: AND
35548: IFFALSE 35589
// begin ComCollect ( j , x , y ) ;
35550: LD_VAR 0 2
35554: PPUSH
35555: LD_VAR 0 6
35559: PPUSH
35560: LD_VAR 0 7
35564: PPUSH
35565: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 8
35578: PPUSH
35579: CALL_OW 172
// exit ;
35583: POP
35584: POP
35585: POP
35586: POP
35587: GO 35597
// end ;
35589: GO 35479
35591: POP
35592: POP
// end ; end ;
35593: GO 34968
35595: POP
35596: POP
// end ; end_of_file
35597: PPOPN 9
35599: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35606: LD_VAR 0 1
35610: PPUSH
35611: CALL_OW 264
35615: PUSH
35616: LD_INT 91
35618: EQUAL
35619: IFFALSE 35691
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35621: LD_INT 68
35623: PPUSH
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 255
35633: PPUSH
35634: CALL_OW 321
35638: PUSH
35639: LD_INT 2
35641: EQUAL
35642: IFFALSE 35654
// eff := 70 else
35644: LD_ADDR_VAR 0 4
35648: PUSH
35649: LD_INT 70
35651: ST_TO_ADDR
35652: GO 35662
// eff := 30 ;
35654: LD_ADDR_VAR 0 4
35658: PUSH
35659: LD_INT 30
35661: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL_OW 250
35671: PPUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: CALL_OW 251
35681: PPUSH
35682: LD_VAR 0 4
35686: PPUSH
35687: CALL_OW 495
// end ; end ;
35691: LD_VAR 0 2
35695: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35696: LD_INT 0
35698: PPUSH
// end ;
35699: LD_VAR 0 4
35703: RET
// export function SOS_Command ( cmd ) ; begin
35704: LD_INT 0
35706: PPUSH
// end ;
35707: LD_VAR 0 2
35711: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35712: LD_INT 0
35714: PPUSH
// end ;
35715: LD_VAR 0 6
35719: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver ; begin
35720: LD_INT 0
35722: PPUSH
35723: PPUSH
35724: PPUSH
// if not vehicle or not factory then
35725: LD_VAR 0 1
35729: NOT
35730: PUSH
35731: LD_VAR 0 2
35735: NOT
35736: OR
35737: IFFALSE 35741
// exit ;
35739: GO 36044
// if factoryWaypoints >= factory then
35741: LD_EXP 119
35745: PUSH
35746: LD_VAR 0 2
35750: GREATEREQUAL
35751: IFFALSE 36044
// if factoryWaypoints [ factory ] then
35753: LD_EXP 119
35757: PUSH
35758: LD_VAR 0 2
35762: ARRAY
35763: IFFALSE 36044
// begin if GetControl ( vehicle ) = control_manual then
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 263
35774: PUSH
35775: LD_INT 1
35777: EQUAL
35778: IFFALSE 35931
// begin driver := IsDrivenBy ( vehicle ) ;
35780: LD_ADDR_VAR 0 5
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 311
35794: ST_TO_ADDR
// tag := GetTag ( driver ) ;
35795: LD_ADDR_VAR 0 4
35799: PUSH
35800: LD_VAR 0 5
35804: PPUSH
35805: CALL_OW 110
35809: ST_TO_ADDR
// if tag = tDriver then
35810: LD_VAR 0 4
35814: PUSH
35815: LD_INT 501
35817: EQUAL
35818: IFFALSE 35822
// exit ;
35820: GO 36044
// if not HasTask ( driver ) then
35822: LD_VAR 0 5
35826: PPUSH
35827: CALL_OW 314
35831: NOT
35832: IFFALSE 35929
// begin SetTag ( driver , tDriver ) ;
35834: LD_VAR 0 5
35838: PPUSH
35839: LD_INT 501
35841: PPUSH
35842: CALL_OW 109
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35846: LD_VAR 0 5
35850: PPUSH
35851: LD_EXP 119
35855: PUSH
35856: LD_VAR 0 2
35860: ARRAY
35861: PUSH
35862: LD_INT 3
35864: ARRAY
35865: PPUSH
35866: LD_EXP 119
35870: PUSH
35871: LD_VAR 0 2
35875: ARRAY
35876: PUSH
35877: LD_INT 4
35879: ARRAY
35880: PPUSH
35881: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35885: LD_VAR 0 5
35889: PPUSH
35890: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35894: LD_VAR 0 5
35898: PPUSH
35899: LD_VAR 0 2
35903: PPUSH
35904: CALL_OW 180
// wait ( 0 0$1 ) ;
35908: LD_INT 35
35910: PPUSH
35911: CALL_OW 67
// SetTag ( driver , tag ) ;
35915: LD_VAR 0 5
35919: PPUSH
35920: LD_VAR 0 4
35924: PPUSH
35925: CALL_OW 109
// end ; end else
35929: GO 36044
// if GetControl ( vehicle ) = control_remote then
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 263
35940: PUSH
35941: LD_INT 2
35943: EQUAL
35944: IFFALSE 36005
// begin wait ( 0 0$2 ) ;
35946: LD_INT 70
35948: PPUSH
35949: CALL_OW 67
// if Connect ( vehicle ) then
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL 48875 0 1
35962: IFFALSE 36003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_EXP 119
35973: PUSH
35974: LD_VAR 0 2
35978: ARRAY
35979: PUSH
35980: LD_INT 3
35982: ARRAY
35983: PPUSH
35984: LD_EXP 119
35988: PUSH
35989: LD_VAR 0 2
35993: ARRAY
35994: PUSH
35995: LD_INT 4
35997: ARRAY
35998: PPUSH
35999: CALL_OW 171
// end else
36003: GO 36044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36005: LD_VAR 0 1
36009: PPUSH
36010: LD_EXP 119
36014: PUSH
36015: LD_VAR 0 2
36019: ARRAY
36020: PUSH
36021: LD_INT 3
36023: ARRAY
36024: PPUSH
36025: LD_EXP 119
36029: PUSH
36030: LD_VAR 0 2
36034: ARRAY
36035: PUSH
36036: LD_INT 4
36038: ARRAY
36039: PPUSH
36040: CALL_OW 171
// end ; end ;
36044: LD_VAR 0 3
36048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36049: LD_INT 0
36051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 250
36059: EQUAL
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: CALL_OW 264
36070: PUSH
36071: LD_INT 81
36073: EQUAL
36074: AND
36075: IFFALSE 36096
// MinerPlaceMine ( unit , x , y ) ;
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 4
36086: PPUSH
36087: LD_VAR 0 5
36091: PPUSH
36092: CALL 39086 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36096: LD_VAR 0 1
36100: PUSH
36101: LD_INT 251
36103: EQUAL
36104: PUSH
36105: LD_VAR 0 2
36109: PPUSH
36110: CALL_OW 264
36114: PUSH
36115: LD_INT 81
36117: EQUAL
36118: AND
36119: IFFALSE 36140
// MinerDetonateMine ( unit , x , y ) ;
36121: LD_VAR 0 2
36125: PPUSH
36126: LD_VAR 0 4
36130: PPUSH
36131: LD_VAR 0 5
36135: PPUSH
36136: CALL 39361 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36140: LD_VAR 0 1
36144: PUSH
36145: LD_INT 252
36147: EQUAL
36148: PUSH
36149: LD_VAR 0 2
36153: PPUSH
36154: CALL_OW 264
36158: PUSH
36159: LD_INT 81
36161: EQUAL
36162: AND
36163: IFFALSE 36184
// MinerCreateMinefield ( unit , x , y ) ;
36165: LD_VAR 0 2
36169: PPUSH
36170: LD_VAR 0 4
36174: PPUSH
36175: LD_VAR 0 5
36179: PPUSH
36180: CALL 39778 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36184: LD_VAR 0 1
36188: PUSH
36189: LD_INT 253
36191: EQUAL
36192: PUSH
36193: LD_VAR 0 2
36197: PPUSH
36198: CALL_OW 257
36202: PUSH
36203: LD_INT 5
36205: EQUAL
36206: AND
36207: IFFALSE 36228
// ComBinocular ( unit , x , y ) ;
36209: LD_VAR 0 2
36213: PPUSH
36214: LD_VAR 0 4
36218: PPUSH
36219: LD_VAR 0 5
36223: PPUSH
36224: CALL 40147 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36228: LD_VAR 0 1
36232: PUSH
36233: LD_INT 254
36235: EQUAL
36236: PUSH
36237: LD_VAR 0 2
36241: PPUSH
36242: CALL_OW 264
36246: PUSH
36247: LD_INT 99
36249: EQUAL
36250: AND
36251: PUSH
36252: LD_VAR 0 3
36256: PPUSH
36257: CALL_OW 263
36261: PUSH
36262: LD_INT 3
36264: EQUAL
36265: AND
36266: IFFALSE 36282
// HackDestroyVehicle ( unit , selectedUnit ) ;
36268: LD_VAR 0 2
36272: PPUSH
36273: LD_VAR 0 3
36277: PPUSH
36278: CALL 38450 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36282: LD_VAR 0 1
36286: PUSH
36287: LD_INT 255
36289: EQUAL
36290: PUSH
36291: LD_VAR 0 2
36295: PPUSH
36296: CALL_OW 264
36300: PUSH
36301: LD_INT 14
36303: PUSH
36304: LD_INT 53
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: IN
36311: AND
36312: PUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: CALL_OW 488
36327: AND
36328: IFFALSE 36352
// CutTreeXYR ( unit , x , y , 12 ) ;
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 4
36339: PPUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: LD_INT 12
36347: PPUSH
36348: CALL 36447 0 4
// if cmd = 256 then
36352: LD_VAR 0 1
36356: PUSH
36357: LD_INT 256
36359: EQUAL
36360: IFFALSE 36381
// SetFactoryWaypoint ( unit , x , y ) ;
36362: LD_VAR 0 2
36366: PPUSH
36367: LD_VAR 0 4
36371: PPUSH
36372: LD_VAR 0 5
36376: PPUSH
36377: CALL 34289 0 3
// if cmd = 257 then
36381: LD_VAR 0 1
36385: PUSH
36386: LD_INT 257
36388: EQUAL
36389: IFFALSE 36410
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36391: LD_VAR 0 2
36395: PPUSH
36396: LD_VAR 0 4
36400: PPUSH
36401: LD_VAR 0 5
36405: PPUSH
36406: CALL 34651 0 3
// if cmd = 258 then
36410: LD_VAR 0 1
36414: PUSH
36415: LD_INT 258
36417: EQUAL
36418: IFFALSE 36442
// BurnTreeXYR ( unit , x , y , 8 ) ;
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 4
36429: PPUSH
36430: LD_VAR 0 5
36434: PPUSH
36435: LD_INT 8
36437: PPUSH
36438: CALL 36841 0 4
// end ;
36442: LD_VAR 0 6
36446: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36447: LD_INT 0
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL_OW 302
36467: NOT
36468: PUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: LD_VAR 0 3
36478: PPUSH
36479: CALL_OW 488
36483: NOT
36484: OR
36485: PUSH
36486: LD_VAR 0 4
36490: NOT
36491: OR
36492: IFFALSE 36496
// exit ;
36494: GO 36836
// list := [ ] ;
36496: LD_ADDR_VAR 0 13
36500: PUSH
36501: EMPTY
36502: ST_TO_ADDR
// if x - r < 0 then
36503: LD_VAR 0 2
36507: PUSH
36508: LD_VAR 0 4
36512: MINUS
36513: PUSH
36514: LD_INT 0
36516: LESS
36517: IFFALSE 36529
// min_x := 0 else
36519: LD_ADDR_VAR 0 7
36523: PUSH
36524: LD_INT 0
36526: ST_TO_ADDR
36527: GO 36545
// min_x := x - r ;
36529: LD_ADDR_VAR 0 7
36533: PUSH
36534: LD_VAR 0 2
36538: PUSH
36539: LD_VAR 0 4
36543: MINUS
36544: ST_TO_ADDR
// if y - r < 0 then
36545: LD_VAR 0 3
36549: PUSH
36550: LD_VAR 0 4
36554: MINUS
36555: PUSH
36556: LD_INT 0
36558: LESS
36559: IFFALSE 36571
// min_y := 0 else
36561: LD_ADDR_VAR 0 8
36565: PUSH
36566: LD_INT 0
36568: ST_TO_ADDR
36569: GO 36587
// min_y := y - r ;
36571: LD_ADDR_VAR 0 8
36575: PUSH
36576: LD_VAR 0 3
36580: PUSH
36581: LD_VAR 0 4
36585: MINUS
36586: ST_TO_ADDR
// max_x := x + r ;
36587: LD_ADDR_VAR 0 9
36591: PUSH
36592: LD_VAR 0 2
36596: PUSH
36597: LD_VAR 0 4
36601: PLUS
36602: ST_TO_ADDR
// max_y := y + r ;
36603: LD_ADDR_VAR 0 10
36607: PUSH
36608: LD_VAR 0 3
36612: PUSH
36613: LD_VAR 0 4
36617: PLUS
36618: ST_TO_ADDR
// for _x = min_x to max_x do
36619: LD_ADDR_VAR 0 11
36623: PUSH
36624: DOUBLE
36625: LD_VAR 0 7
36629: DEC
36630: ST_TO_ADDR
36631: LD_VAR 0 9
36635: PUSH
36636: FOR_TO
36637: IFFALSE 36754
// for _y = min_y to max_y do
36639: LD_ADDR_VAR 0 12
36643: PUSH
36644: DOUBLE
36645: LD_VAR 0 8
36649: DEC
36650: ST_TO_ADDR
36651: LD_VAR 0 10
36655: PUSH
36656: FOR_TO
36657: IFFALSE 36750
// begin if not ValidHex ( _x , _y ) then
36659: LD_VAR 0 11
36663: PPUSH
36664: LD_VAR 0 12
36668: PPUSH
36669: CALL_OW 488
36673: NOT
36674: IFFALSE 36678
// continue ;
36676: GO 36656
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36678: LD_VAR 0 11
36682: PPUSH
36683: LD_VAR 0 12
36687: PPUSH
36688: CALL_OW 351
36692: PUSH
36693: LD_VAR 0 11
36697: PPUSH
36698: LD_VAR 0 12
36702: PPUSH
36703: CALL_OW 554
36707: AND
36708: IFFALSE 36748
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36710: LD_ADDR_VAR 0 13
36714: PUSH
36715: LD_VAR 0 13
36719: PPUSH
36720: LD_VAR 0 13
36724: PUSH
36725: LD_INT 1
36727: PLUS
36728: PPUSH
36729: LD_VAR 0 11
36733: PUSH
36734: LD_VAR 0 12
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PPUSH
36743: CALL_OW 2
36747: ST_TO_ADDR
// end ;
36748: GO 36656
36750: POP
36751: POP
36752: GO 36636
36754: POP
36755: POP
// if not list then
36756: LD_VAR 0 13
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 36836
// for i in list do
36765: LD_ADDR_VAR 0 6
36769: PUSH
36770: LD_VAR 0 13
36774: PUSH
36775: FOR_IN
36776: IFFALSE 36834
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36778: LD_VAR 0 1
36782: PPUSH
36783: LD_STRING M
36785: PUSH
36786: LD_VAR 0 6
36790: PUSH
36791: LD_INT 1
36793: ARRAY
36794: PUSH
36795: LD_VAR 0 6
36799: PUSH
36800: LD_INT 2
36802: ARRAY
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: PUSH
36825: EMPTY
36826: LIST
36827: PPUSH
36828: CALL_OW 447
36832: GO 36775
36834: POP
36835: POP
// end ;
36836: LD_VAR 0 5
36840: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36841: LD_INT 0
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 302
36862: NOT
36863: PUSH
36864: LD_VAR 0 2
36868: PPUSH
36869: LD_VAR 0 3
36873: PPUSH
36874: CALL_OW 488
36878: NOT
36879: OR
36880: PUSH
36881: LD_VAR 0 4
36885: NOT
36886: OR
36887: IFFALSE 36891
// exit ;
36889: GO 37404
// list := [ ] ;
36891: LD_ADDR_VAR 0 13
36895: PUSH
36896: EMPTY
36897: ST_TO_ADDR
// if x - r < 0 then
36898: LD_VAR 0 2
36902: PUSH
36903: LD_VAR 0 4
36907: MINUS
36908: PUSH
36909: LD_INT 0
36911: LESS
36912: IFFALSE 36924
// min_x := 0 else
36914: LD_ADDR_VAR 0 7
36918: PUSH
36919: LD_INT 0
36921: ST_TO_ADDR
36922: GO 36940
// min_x := x - r ;
36924: LD_ADDR_VAR 0 7
36928: PUSH
36929: LD_VAR 0 2
36933: PUSH
36934: LD_VAR 0 4
36938: MINUS
36939: ST_TO_ADDR
// if y - r < 0 then
36940: LD_VAR 0 3
36944: PUSH
36945: LD_VAR 0 4
36949: MINUS
36950: PUSH
36951: LD_INT 0
36953: LESS
36954: IFFALSE 36966
// min_y := 0 else
36956: LD_ADDR_VAR 0 8
36960: PUSH
36961: LD_INT 0
36963: ST_TO_ADDR
36964: GO 36982
// min_y := y - r ;
36966: LD_ADDR_VAR 0 8
36970: PUSH
36971: LD_VAR 0 3
36975: PUSH
36976: LD_VAR 0 4
36980: MINUS
36981: ST_TO_ADDR
// max_x := x + r ;
36982: LD_ADDR_VAR 0 9
36986: PUSH
36987: LD_VAR 0 2
36991: PUSH
36992: LD_VAR 0 4
36996: PLUS
36997: ST_TO_ADDR
// max_y := y + r ;
36998: LD_ADDR_VAR 0 10
37002: PUSH
37003: LD_VAR 0 3
37007: PUSH
37008: LD_VAR 0 4
37012: PLUS
37013: ST_TO_ADDR
// for _x = min_x to max_x do
37014: LD_ADDR_VAR 0 11
37018: PUSH
37019: DOUBLE
37020: LD_VAR 0 7
37024: DEC
37025: ST_TO_ADDR
37026: LD_VAR 0 9
37030: PUSH
37031: FOR_TO
37032: IFFALSE 37149
// for _y = min_y to max_y do
37034: LD_ADDR_VAR 0 12
37038: PUSH
37039: DOUBLE
37040: LD_VAR 0 8
37044: DEC
37045: ST_TO_ADDR
37046: LD_VAR 0 10
37050: PUSH
37051: FOR_TO
37052: IFFALSE 37145
// begin if not ValidHex ( _x , _y ) then
37054: LD_VAR 0 11
37058: PPUSH
37059: LD_VAR 0 12
37063: PPUSH
37064: CALL_OW 488
37068: NOT
37069: IFFALSE 37073
// continue ;
37071: GO 37051
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37073: LD_VAR 0 11
37077: PPUSH
37078: LD_VAR 0 12
37082: PPUSH
37083: CALL_OW 351
37087: PUSH
37088: LD_VAR 0 11
37092: PPUSH
37093: LD_VAR 0 12
37097: PPUSH
37098: CALL_OW 554
37102: AND
37103: IFFALSE 37143
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37105: LD_ADDR_VAR 0 13
37109: PUSH
37110: LD_VAR 0 13
37114: PPUSH
37115: LD_VAR 0 13
37119: PUSH
37120: LD_INT 1
37122: PLUS
37123: PPUSH
37124: LD_VAR 0 11
37128: PUSH
37129: LD_VAR 0 12
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PPUSH
37138: CALL_OW 2
37142: ST_TO_ADDR
// end ;
37143: GO 37051
37145: POP
37146: POP
37147: GO 37031
37149: POP
37150: POP
// if not list then
37151: LD_VAR 0 13
37155: NOT
37156: IFFALSE 37160
// exit ;
37158: GO 37404
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37160: LD_ADDR_VAR 0 13
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_VAR 0 13
37174: PPUSH
37175: LD_INT 1
37177: PPUSH
37178: LD_INT 1
37180: PPUSH
37181: CALL 46017 0 4
37185: ST_TO_ADDR
// ComStop ( flame ) ;
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 141
// for i in list do
37195: LD_ADDR_VAR 0 6
37199: PUSH
37200: LD_VAR 0 13
37204: PUSH
37205: FOR_IN
37206: IFFALSE 37237
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37208: LD_VAR 0 1
37212: PPUSH
37213: LD_VAR 0 6
37217: PUSH
37218: LD_INT 1
37220: ARRAY
37221: PPUSH
37222: LD_VAR 0 6
37226: PUSH
37227: LD_INT 2
37229: ARRAY
37230: PPUSH
37231: CALL_OW 176
37235: GO 37205
37237: POP
37238: POP
// repeat wait ( 0 0$1 ) ;
37239: LD_INT 35
37241: PPUSH
37242: CALL_OW 67
// task := GetTaskList ( flame ) ;
37246: LD_ADDR_VAR 0 14
37250: PUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 437
37260: ST_TO_ADDR
// if not task then
37261: LD_VAR 0 14
37265: NOT
37266: IFFALSE 37270
// exit ;
37268: GO 37404
// if task [ 1 ] [ 1 ] <> | then
37270: LD_VAR 0 14
37274: PUSH
37275: LD_INT 1
37277: ARRAY
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: PUSH
37283: LD_STRING |
37285: NONEQUAL
37286: IFFALSE 37290
// exit ;
37288: GO 37404
// _x := task [ 1 ] [ 2 ] ;
37290: LD_ADDR_VAR 0 11
37294: PUSH
37295: LD_VAR 0 14
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: PUSH
37304: LD_INT 2
37306: ARRAY
37307: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37308: LD_ADDR_VAR 0 12
37312: PUSH
37313: LD_VAR 0 14
37317: PUSH
37318: LD_INT 1
37320: ARRAY
37321: PUSH
37322: LD_INT 3
37324: ARRAY
37325: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37326: LD_VAR 0 11
37330: PPUSH
37331: LD_VAR 0 12
37335: PPUSH
37336: CALL_OW 351
37340: NOT
37341: PUSH
37342: LD_VAR 0 11
37346: PPUSH
37347: LD_VAR 0 12
37351: PPUSH
37352: CALL_OW 554
37356: NOT
37357: OR
37358: IFFALSE 37392
// begin task := Delete ( task , 1 ) ;
37360: LD_ADDR_VAR 0 14
37364: PUSH
37365: LD_VAR 0 14
37369: PPUSH
37370: LD_INT 1
37372: PPUSH
37373: CALL_OW 3
37377: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37378: LD_VAR 0 1
37382: PPUSH
37383: LD_VAR 0 14
37387: PPUSH
37388: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 314
37401: NOT
37402: IFFALSE 37239
// end ;
37404: LD_VAR 0 5
37408: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37409: LD_EXP 122
37413: NOT
37414: IFFALSE 37464
37416: GO 37418
37418: DISABLE
// begin initHack := true ;
37419: LD_ADDR_EXP 122
37423: PUSH
37424: LD_INT 1
37426: ST_TO_ADDR
// hackTanks := [ ] ;
37427: LD_ADDR_EXP 123
37431: PUSH
37432: EMPTY
37433: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37434: LD_ADDR_EXP 124
37438: PUSH
37439: EMPTY
37440: ST_TO_ADDR
// hackLimit := 3 ;
37441: LD_ADDR_EXP 125
37445: PUSH
37446: LD_INT 3
37448: ST_TO_ADDR
// hackDist := 12 ;
37449: LD_ADDR_EXP 126
37453: PUSH
37454: LD_INT 12
37456: ST_TO_ADDR
// hackCounter := [ ] ;
37457: LD_ADDR_EXP 127
37461: PUSH
37462: EMPTY
37463: ST_TO_ADDR
// end ;
37464: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37465: LD_EXP 122
37469: PUSH
37470: LD_INT 34
37472: PUSH
37473: LD_INT 99
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PPUSH
37480: CALL_OW 69
37484: AND
37485: IFFALSE 37738
37487: GO 37489
37489: DISABLE
37490: LD_INT 0
37492: PPUSH
37493: PPUSH
// begin enable ;
37494: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37495: LD_ADDR_VAR 0 1
37499: PUSH
37500: LD_INT 34
37502: PUSH
37503: LD_INT 99
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL_OW 69
37514: PUSH
37515: FOR_IN
37516: IFFALSE 37736
// begin if not i in hackTanks then
37518: LD_VAR 0 1
37522: PUSH
37523: LD_EXP 123
37527: IN
37528: NOT
37529: IFFALSE 37612
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37531: LD_ADDR_EXP 123
37535: PUSH
37536: LD_EXP 123
37540: PPUSH
37541: LD_EXP 123
37545: PUSH
37546: LD_INT 1
37548: PLUS
37549: PPUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 1
37559: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37560: LD_ADDR_EXP 124
37564: PUSH
37565: LD_EXP 124
37569: PPUSH
37570: LD_EXP 124
37574: PUSH
37575: LD_INT 1
37577: PLUS
37578: PPUSH
37579: EMPTY
37580: PPUSH
37581: CALL_OW 1
37585: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37586: LD_ADDR_EXP 127
37590: PUSH
37591: LD_EXP 127
37595: PPUSH
37596: LD_EXP 127
37600: PUSH
37601: LD_INT 1
37603: PLUS
37604: PPUSH
37605: EMPTY
37606: PPUSH
37607: CALL_OW 1
37611: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 302
37621: NOT
37622: IFFALSE 37635
// begin HackUnlinkAll ( i ) ;
37624: LD_VAR 0 1
37628: PPUSH
37629: CALL 37741 0 1
// continue ;
37633: GO 37515
// end ; HackCheckCapturedStatus ( i ) ;
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL 38184 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37644: LD_ADDR_VAR 0 2
37648: PUSH
37649: LD_INT 81
37651: PUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 255
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 33
37668: PUSH
37669: LD_INT 3
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 91
37678: PUSH
37679: LD_VAR 0 1
37683: PUSH
37684: LD_EXP 126
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 50
37696: PUSH
37697: EMPTY
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: PPUSH
37706: CALL_OW 69
37710: ST_TO_ADDR
// if not tmp then
37711: LD_VAR 0 2
37715: NOT
37716: IFFALSE 37720
// continue ;
37718: GO 37515
// HackLink ( i , tmp ) ;
37720: LD_VAR 0 1
37724: PPUSH
37725: LD_VAR 0 2
37729: PPUSH
37730: CALL 37877 0 2
// end ;
37734: GO 37515
37736: POP
37737: POP
// end ;
37738: PPOPN 2
37740: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37741: LD_INT 0
37743: PPUSH
37744: PPUSH
37745: PPUSH
// if not hack in hackTanks then
37746: LD_VAR 0 1
37750: PUSH
37751: LD_EXP 123
37755: IN
37756: NOT
37757: IFFALSE 37761
// exit ;
37759: GO 37872
// index := GetElementIndex ( hackTanks , hack ) ;
37761: LD_ADDR_VAR 0 4
37765: PUSH
37766: LD_EXP 123
37770: PPUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL 45314 0 2
37780: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37781: LD_EXP 124
37785: PUSH
37786: LD_VAR 0 4
37790: ARRAY
37791: IFFALSE 37872
// begin for i in hackTanksCaptured [ index ] do
37793: LD_ADDR_VAR 0 3
37797: PUSH
37798: LD_EXP 124
37802: PUSH
37803: LD_VAR 0 4
37807: ARRAY
37808: PUSH
37809: FOR_IN
37810: IFFALSE 37836
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37812: LD_VAR 0 3
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 3
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PPUSH
37830: CALL_OW 235
37834: GO 37809
37836: POP
37837: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37838: LD_ADDR_EXP 124
37842: PUSH
37843: LD_EXP 124
37847: PPUSH
37848: LD_VAR 0 4
37852: PPUSH
37853: EMPTY
37854: PPUSH
37855: CALL_OW 1
37859: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37860: LD_VAR 0 1
37864: PPUSH
37865: LD_INT 0
37867: PPUSH
37868: CALL_OW 505
// end ; end ;
37872: LD_VAR 0 2
37876: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37877: LD_INT 0
37879: PPUSH
37880: PPUSH
37881: PPUSH
// if not hack in hackTanks or not vehicles then
37882: LD_VAR 0 1
37886: PUSH
37887: LD_EXP 123
37891: IN
37892: NOT
37893: PUSH
37894: LD_VAR 0 2
37898: NOT
37899: OR
37900: IFFALSE 37904
// exit ;
37902: GO 38179
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37904: LD_ADDR_VAR 0 2
37908: PUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_INT 1
37921: PPUSH
37922: LD_INT 1
37924: PPUSH
37925: CALL 45964 0 4
37929: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_EXP 123
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL 45314 0 2
37949: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37950: LD_EXP 124
37954: PUSH
37955: LD_VAR 0 5
37959: ARRAY
37960: PUSH
37961: LD_EXP 125
37965: LESS
37966: IFFALSE 38155
// begin for i := 1 to vehicles do
37968: LD_ADDR_VAR 0 4
37972: PUSH
37973: DOUBLE
37974: LD_INT 1
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 2
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38153
// begin if hackTanksCaptured [ index ] = hackLimit then
37986: LD_EXP 124
37990: PUSH
37991: LD_VAR 0 5
37995: ARRAY
37996: PUSH
37997: LD_EXP 125
38001: EQUAL
38002: IFFALSE 38006
// break ;
38004: GO 38153
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38006: LD_ADDR_EXP 127
38010: PUSH
38011: LD_EXP 127
38015: PPUSH
38016: LD_VAR 0 5
38020: PPUSH
38021: LD_EXP 127
38025: PUSH
38026: LD_VAR 0 5
38030: ARRAY
38031: PUSH
38032: LD_INT 1
38034: PLUS
38035: PPUSH
38036: CALL_OW 1
38040: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38041: LD_ADDR_EXP 124
38045: PUSH
38046: LD_EXP 124
38050: PPUSH
38051: LD_VAR 0 5
38055: PUSH
38056: LD_EXP 124
38060: PUSH
38061: LD_VAR 0 5
38065: ARRAY
38066: PUSH
38067: LD_INT 1
38069: PLUS
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PPUSH
38075: LD_VAR 0 2
38079: PUSH
38080: LD_VAR 0 4
38084: ARRAY
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_VAR 0 4
38095: ARRAY
38096: PPUSH
38097: CALL_OW 255
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PPUSH
38106: CALL 45529 0 3
38110: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38111: LD_VAR 0 2
38115: PUSH
38116: LD_VAR 0 4
38120: ARRAY
38121: PPUSH
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 255
38131: PPUSH
38132: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38136: LD_VAR 0 2
38140: PUSH
38141: LD_VAR 0 4
38145: ARRAY
38146: PPUSH
38147: CALL_OW 141
// end ;
38151: GO 37983
38153: POP
38154: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38155: LD_VAR 0 1
38159: PPUSH
38160: LD_EXP 124
38164: PUSH
38165: LD_VAR 0 5
38169: ARRAY
38170: PUSH
38171: LD_INT 0
38173: PLUS
38174: PPUSH
38175: CALL_OW 505
// end ;
38179: LD_VAR 0 3
38183: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38184: LD_INT 0
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
// if not hack in hackTanks then
38190: LD_VAR 0 1
38194: PUSH
38195: LD_EXP 123
38199: IN
38200: NOT
38201: IFFALSE 38205
// exit ;
38203: GO 38445
// index := GetElementIndex ( hackTanks , hack ) ;
38205: LD_ADDR_VAR 0 4
38209: PUSH
38210: LD_EXP 123
38214: PPUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL 45314 0 2
38224: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: DOUBLE
38231: LD_EXP 124
38235: PUSH
38236: LD_VAR 0 4
38240: ARRAY
38241: INC
38242: ST_TO_ADDR
38243: LD_INT 1
38245: PUSH
38246: FOR_DOWNTO
38247: IFFALSE 38419
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_EXP 124
38258: PUSH
38259: LD_VAR 0 4
38263: ARRAY
38264: PUSH
38265: LD_VAR 0 3
38269: ARRAY
38270: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38271: LD_VAR 0 5
38275: PUSH
38276: LD_INT 1
38278: ARRAY
38279: PPUSH
38280: CALL_OW 302
38284: NOT
38285: PUSH
38286: LD_VAR 0 5
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PPUSH
38295: CALL_OW 255
38299: PUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 255
38309: NONEQUAL
38310: OR
38311: IFFALSE 38417
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38313: LD_VAR 0 5
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: PPUSH
38322: CALL_OW 305
38326: PUSH
38327: LD_VAR 0 5
38331: PUSH
38332: LD_INT 1
38334: ARRAY
38335: PPUSH
38336: CALL_OW 255
38340: PUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: CALL_OW 255
38350: EQUAL
38351: AND
38352: IFFALSE 38376
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38354: LD_VAR 0 5
38358: PUSH
38359: LD_INT 1
38361: ARRAY
38362: PPUSH
38363: LD_VAR 0 5
38367: PUSH
38368: LD_INT 2
38370: ARRAY
38371: PPUSH
38372: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38376: LD_ADDR_EXP 124
38380: PUSH
38381: LD_EXP 124
38385: PPUSH
38386: LD_VAR 0 4
38390: PPUSH
38391: LD_EXP 124
38395: PUSH
38396: LD_VAR 0 4
38400: ARRAY
38401: PPUSH
38402: LD_VAR 0 3
38406: PPUSH
38407: CALL_OW 3
38411: PPUSH
38412: CALL_OW 1
38416: ST_TO_ADDR
// end ; end ;
38417: GO 38246
38419: POP
38420: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38421: LD_VAR 0 1
38425: PPUSH
38426: LD_EXP 124
38430: PUSH
38431: LD_VAR 0 4
38435: ARRAY
38436: PUSH
38437: LD_INT 0
38439: PLUS
38440: PPUSH
38441: CALL_OW 505
// end ;
38445: LD_VAR 0 2
38449: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
// if not hack in hackTanks then
38456: LD_VAR 0 1
38460: PUSH
38461: LD_EXP 123
38465: IN
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 38556
// index := GetElementIndex ( hackTanks , hack ) ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_EXP 123
38480: PPUSH
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL 45314 0 2
38490: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38491: LD_ADDR_VAR 0 4
38495: PUSH
38496: DOUBLE
38497: LD_INT 1
38499: DEC
38500: ST_TO_ADDR
38501: LD_EXP 124
38505: PUSH
38506: LD_VAR 0 5
38510: ARRAY
38511: PUSH
38512: FOR_TO
38513: IFFALSE 38554
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38515: LD_EXP 124
38519: PUSH
38520: LD_VAR 0 5
38524: ARRAY
38525: PUSH
38526: LD_VAR 0 4
38530: ARRAY
38531: PUSH
38532: LD_INT 1
38534: ARRAY
38535: PUSH
38536: LD_VAR 0 2
38540: EQUAL
38541: IFFALSE 38552
// KillUnit ( vehicle ) ;
38543: LD_VAR 0 2
38547: PPUSH
38548: CALL_OW 66
38552: GO 38512
38554: POP
38555: POP
// end ;
38556: LD_VAR 0 3
38560: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38561: LD_EXP 128
38565: NOT
38566: IFFALSE 38601
38568: GO 38570
38570: DISABLE
// begin initMiner := true ;
38571: LD_ADDR_EXP 128
38575: PUSH
38576: LD_INT 1
38578: ST_TO_ADDR
// minersList := [ ] ;
38579: LD_ADDR_EXP 129
38583: PUSH
38584: EMPTY
38585: ST_TO_ADDR
// minerMinesList := [ ] ;
38586: LD_ADDR_EXP 130
38590: PUSH
38591: EMPTY
38592: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38593: LD_ADDR_EXP 131
38597: PUSH
38598: LD_INT 5
38600: ST_TO_ADDR
// end ;
38601: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38602: LD_EXP 128
38606: PUSH
38607: LD_INT 34
38609: PUSH
38610: LD_INT 81
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL_OW 69
38621: AND
38622: IFFALSE 39083
38624: GO 38626
38626: DISABLE
38627: LD_INT 0
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
// begin enable ;
38633: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38634: LD_ADDR_VAR 0 1
38638: PUSH
38639: LD_INT 34
38641: PUSH
38642: LD_INT 81
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PPUSH
38649: CALL_OW 69
38653: PUSH
38654: FOR_IN
38655: IFFALSE 38727
// begin if not i in minersList then
38657: LD_VAR 0 1
38661: PUSH
38662: LD_EXP 129
38666: IN
38667: NOT
38668: IFFALSE 38725
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38670: LD_ADDR_EXP 129
38674: PUSH
38675: LD_EXP 129
38679: PPUSH
38680: LD_EXP 129
38684: PUSH
38685: LD_INT 1
38687: PLUS
38688: PPUSH
38689: LD_VAR 0 1
38693: PPUSH
38694: CALL_OW 1
38698: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38699: LD_ADDR_EXP 130
38703: PUSH
38704: LD_EXP 130
38708: PPUSH
38709: LD_EXP 130
38713: PUSH
38714: LD_INT 1
38716: PLUS
38717: PPUSH
38718: EMPTY
38719: PPUSH
38720: CALL_OW 1
38724: ST_TO_ADDR
// end end ;
38725: GO 38654
38727: POP
38728: POP
// for i := minerMinesList downto 1 do
38729: LD_ADDR_VAR 0 1
38733: PUSH
38734: DOUBLE
38735: LD_EXP 130
38739: INC
38740: ST_TO_ADDR
38741: LD_INT 1
38743: PUSH
38744: FOR_DOWNTO
38745: IFFALSE 39081
// begin if IsLive ( minersList [ i ] ) then
38747: LD_EXP 129
38751: PUSH
38752: LD_VAR 0 1
38756: ARRAY
38757: PPUSH
38758: CALL_OW 300
38762: IFFALSE 38790
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38764: LD_EXP 129
38768: PUSH
38769: LD_VAR 0 1
38773: ARRAY
38774: PPUSH
38775: LD_EXP 130
38779: PUSH
38780: LD_VAR 0 1
38784: ARRAY
38785: PPUSH
38786: CALL_OW 505
// if not minerMinesList [ i ] then
38790: LD_EXP 130
38794: PUSH
38795: LD_VAR 0 1
38799: ARRAY
38800: NOT
38801: IFFALSE 38805
// continue ;
38803: GO 38744
// for j := minerMinesList [ i ] downto 1 do
38805: LD_ADDR_VAR 0 2
38809: PUSH
38810: DOUBLE
38811: LD_EXP 130
38815: PUSH
38816: LD_VAR 0 1
38820: ARRAY
38821: INC
38822: ST_TO_ADDR
38823: LD_INT 1
38825: PUSH
38826: FOR_DOWNTO
38827: IFFALSE 39077
// begin side := GetSide ( minersList [ i ] ) ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_EXP 129
38838: PUSH
38839: LD_VAR 0 1
38843: ARRAY
38844: PPUSH
38845: CALL_OW 255
38849: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38850: LD_ADDR_VAR 0 4
38854: PUSH
38855: LD_EXP 130
38859: PUSH
38860: LD_VAR 0 1
38864: ARRAY
38865: PUSH
38866: LD_VAR 0 2
38870: ARRAY
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: PPUSH
38876: LD_EXP 130
38880: PUSH
38881: LD_VAR 0 1
38885: ARRAY
38886: PUSH
38887: LD_VAR 0 2
38891: ARRAY
38892: PUSH
38893: LD_INT 2
38895: ARRAY
38896: PPUSH
38897: CALL_OW 428
38901: ST_TO_ADDR
// if not tmp then
38902: LD_VAR 0 4
38906: NOT
38907: IFFALSE 38911
// continue ;
38909: GO 38826
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38911: LD_VAR 0 4
38915: PUSH
38916: LD_INT 81
38918: PUSH
38919: LD_VAR 0 3
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PPUSH
38928: CALL_OW 69
38932: IN
38933: PUSH
38934: LD_EXP 130
38938: PUSH
38939: LD_VAR 0 1
38943: ARRAY
38944: PUSH
38945: LD_VAR 0 2
38949: ARRAY
38950: PUSH
38951: LD_INT 1
38953: ARRAY
38954: PPUSH
38955: LD_EXP 130
38959: PUSH
38960: LD_VAR 0 1
38964: ARRAY
38965: PUSH
38966: LD_VAR 0 2
38970: ARRAY
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: PPUSH
38976: CALL_OW 458
38980: AND
38981: IFFALSE 39075
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38983: LD_EXP 130
38987: PUSH
38988: LD_VAR 0 1
38992: ARRAY
38993: PUSH
38994: LD_VAR 0 2
38998: ARRAY
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: PPUSH
39004: LD_EXP 130
39008: PUSH
39009: LD_VAR 0 1
39013: ARRAY
39014: PUSH
39015: LD_VAR 0 2
39019: ARRAY
39020: PUSH
39021: LD_INT 2
39023: ARRAY
39024: PPUSH
39025: LD_VAR 0 3
39029: PPUSH
39030: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39034: LD_ADDR_EXP 130
39038: PUSH
39039: LD_EXP 130
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: LD_EXP 130
39053: PUSH
39054: LD_VAR 0 1
39058: ARRAY
39059: PPUSH
39060: LD_VAR 0 2
39064: PPUSH
39065: CALL_OW 3
39069: PPUSH
39070: CALL_OW 1
39074: ST_TO_ADDR
// end ; end ;
39075: GO 38826
39077: POP
39078: POP
// end ;
39079: GO 38744
39081: POP
39082: POP
// end ;
39083: PPOPN 4
39085: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39086: LD_INT 0
39088: PPUSH
39089: PPUSH
// result := false ;
39090: LD_ADDR_VAR 0 4
39094: PUSH
39095: LD_INT 0
39097: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 264
39107: PUSH
39108: LD_INT 81
39110: EQUAL
39111: NOT
39112: IFFALSE 39116
// exit ;
39114: GO 39356
// index := GetElementIndex ( minersList , unit ) ;
39116: LD_ADDR_VAR 0 5
39120: PUSH
39121: LD_EXP 129
39125: PPUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL 45314 0 2
39135: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39136: LD_EXP 130
39140: PUSH
39141: LD_VAR 0 5
39145: ARRAY
39146: PUSH
39147: LD_EXP 131
39151: GREATEREQUAL
39152: IFFALSE 39156
// exit ;
39154: GO 39356
// ComMoveXY ( unit , x , y ) ;
39156: LD_VAR 0 1
39160: PPUSH
39161: LD_VAR 0 2
39165: PPUSH
39166: LD_VAR 0 3
39170: PPUSH
39171: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39175: LD_INT 35
39177: PPUSH
39178: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39182: LD_VAR 0 1
39186: PPUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 3
39196: PPUSH
39197: CALL 77055 0 3
39201: NOT
39202: PUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 314
39212: AND
39213: IFFALSE 39217
// exit ;
39215: GO 39356
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39217: LD_VAR 0 2
39221: PPUSH
39222: LD_VAR 0 3
39226: PPUSH
39227: CALL_OW 428
39231: PUSH
39232: LD_VAR 0 1
39236: EQUAL
39237: PUSH
39238: LD_VAR 0 1
39242: PPUSH
39243: CALL_OW 314
39247: NOT
39248: AND
39249: IFFALSE 39175
// PlaySoundXY ( x , y , PlantMine ) ;
39251: LD_VAR 0 2
39255: PPUSH
39256: LD_VAR 0 3
39260: PPUSH
39261: LD_STRING PlantMine
39263: PPUSH
39264: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39268: LD_VAR 0 2
39272: PPUSH
39273: LD_VAR 0 3
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 255
39287: PPUSH
39288: LD_INT 0
39290: PPUSH
39291: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39295: LD_ADDR_EXP 130
39299: PUSH
39300: LD_EXP 130
39304: PPUSH
39305: LD_VAR 0 5
39309: PUSH
39310: LD_EXP 130
39314: PUSH
39315: LD_VAR 0 5
39319: ARRAY
39320: PUSH
39321: LD_INT 1
39323: PLUS
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PPUSH
39329: LD_VAR 0 2
39333: PUSH
39334: LD_VAR 0 3
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PPUSH
39343: CALL 45529 0 3
39347: ST_TO_ADDR
// result := true ;
39348: LD_ADDR_VAR 0 4
39352: PUSH
39353: LD_INT 1
39355: ST_TO_ADDR
// end ;
39356: LD_VAR 0 4
39360: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39361: LD_INT 0
39363: PPUSH
39364: PPUSH
39365: PPUSH
// if not unit in minersList then
39366: LD_VAR 0 1
39370: PUSH
39371: LD_EXP 129
39375: IN
39376: NOT
39377: IFFALSE 39381
// exit ;
39379: GO 39773
// index := GetElementIndex ( minersList , unit ) ;
39381: LD_ADDR_VAR 0 6
39385: PUSH
39386: LD_EXP 129
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL 45314 0 2
39400: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39401: LD_ADDR_VAR 0 5
39405: PUSH
39406: DOUBLE
39407: LD_EXP 130
39411: PUSH
39412: LD_VAR 0 6
39416: ARRAY
39417: INC
39418: ST_TO_ADDR
39419: LD_INT 1
39421: PUSH
39422: FOR_DOWNTO
39423: IFFALSE 39584
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39425: LD_EXP 130
39429: PUSH
39430: LD_VAR 0 6
39434: ARRAY
39435: PUSH
39436: LD_VAR 0 5
39440: ARRAY
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PUSH
39446: LD_VAR 0 2
39450: EQUAL
39451: PUSH
39452: LD_EXP 130
39456: PUSH
39457: LD_VAR 0 6
39461: ARRAY
39462: PUSH
39463: LD_VAR 0 5
39467: ARRAY
39468: PUSH
39469: LD_INT 2
39471: ARRAY
39472: PUSH
39473: LD_VAR 0 3
39477: EQUAL
39478: AND
39479: IFFALSE 39582
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39481: LD_EXP 130
39485: PUSH
39486: LD_VAR 0 6
39490: ARRAY
39491: PUSH
39492: LD_VAR 0 5
39496: ARRAY
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PPUSH
39502: LD_EXP 130
39506: PUSH
39507: LD_VAR 0 6
39511: ARRAY
39512: PUSH
39513: LD_VAR 0 5
39517: ARRAY
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 255
39532: PPUSH
39533: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39537: LD_ADDR_EXP 130
39541: PUSH
39542: LD_EXP 130
39546: PPUSH
39547: LD_VAR 0 6
39551: PPUSH
39552: LD_EXP 130
39556: PUSH
39557: LD_VAR 0 6
39561: ARRAY
39562: PPUSH
39563: LD_VAR 0 5
39567: PPUSH
39568: CALL_OW 3
39572: PPUSH
39573: CALL_OW 1
39577: ST_TO_ADDR
// exit ;
39578: POP
39579: POP
39580: GO 39773
// end ; end ;
39582: GO 39422
39584: POP
39585: POP
// for i := minerMinesList [ index ] downto 1 do
39586: LD_ADDR_VAR 0 5
39590: PUSH
39591: DOUBLE
39592: LD_EXP 130
39596: PUSH
39597: LD_VAR 0 6
39601: ARRAY
39602: INC
39603: ST_TO_ADDR
39604: LD_INT 1
39606: PUSH
39607: FOR_DOWNTO
39608: IFFALSE 39771
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39610: LD_EXP 130
39614: PUSH
39615: LD_VAR 0 6
39619: ARRAY
39620: PUSH
39621: LD_VAR 0 5
39625: ARRAY
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: LD_EXP 130
39635: PUSH
39636: LD_VAR 0 6
39640: ARRAY
39641: PUSH
39642: LD_VAR 0 5
39646: ARRAY
39647: PUSH
39648: LD_INT 2
39650: ARRAY
39651: PPUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: LD_VAR 0 3
39661: PPUSH
39662: CALL_OW 298
39666: PUSH
39667: LD_INT 6
39669: LESS
39670: IFFALSE 39769
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39672: LD_EXP 130
39676: PUSH
39677: LD_VAR 0 6
39681: ARRAY
39682: PUSH
39683: LD_VAR 0 5
39687: ARRAY
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PPUSH
39693: LD_EXP 130
39697: PUSH
39698: LD_VAR 0 6
39702: ARRAY
39703: PUSH
39704: LD_VAR 0 5
39708: ARRAY
39709: PUSH
39710: LD_INT 2
39712: ARRAY
39713: PPUSH
39714: LD_VAR 0 1
39718: PPUSH
39719: CALL_OW 255
39723: PPUSH
39724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39728: LD_ADDR_EXP 130
39732: PUSH
39733: LD_EXP 130
39737: PPUSH
39738: LD_VAR 0 6
39742: PPUSH
39743: LD_EXP 130
39747: PUSH
39748: LD_VAR 0 6
39752: ARRAY
39753: PPUSH
39754: LD_VAR 0 5
39758: PPUSH
39759: CALL_OW 3
39763: PPUSH
39764: CALL_OW 1
39768: ST_TO_ADDR
// end ; end ;
39769: GO 39607
39771: POP
39772: POP
// end ;
39773: LD_VAR 0 4
39777: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39778: LD_INT 0
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 264
39798: PUSH
39799: LD_INT 81
39801: EQUAL
39802: NOT
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_EXP 129
39813: IN
39814: NOT
39815: OR
39816: IFFALSE 39820
// exit ;
39818: GO 40142
// index := GetElementIndex ( minersList , unit ) ;
39820: LD_ADDR_VAR 0 6
39824: PUSH
39825: LD_EXP 129
39829: PPUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL 45314 0 2
39839: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39840: LD_ADDR_VAR 0 8
39844: PUSH
39845: LD_EXP 131
39849: PUSH
39850: LD_EXP 130
39854: PUSH
39855: LD_VAR 0 6
39859: ARRAY
39860: MINUS
39861: ST_TO_ADDR
// if not minesFreeAmount then
39862: LD_VAR 0 8
39866: NOT
39867: IFFALSE 39871
// exit ;
39869: GO 40142
// tmp := [ ] ;
39871: LD_ADDR_VAR 0 7
39875: PUSH
39876: EMPTY
39877: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39878: LD_ADDR_VAR 0 5
39882: PUSH
39883: DOUBLE
39884: LD_INT 1
39886: DEC
39887: ST_TO_ADDR
39888: LD_VAR 0 8
39892: PUSH
39893: FOR_TO
39894: IFFALSE 40089
// begin _d := rand ( 0 , 5 ) ;
39896: LD_ADDR_VAR 0 11
39900: PUSH
39901: LD_INT 0
39903: PPUSH
39904: LD_INT 5
39906: PPUSH
39907: CALL_OW 12
39911: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39912: LD_ADDR_VAR 0 12
39916: PUSH
39917: LD_INT 2
39919: PPUSH
39920: LD_INT 6
39922: PPUSH
39923: CALL_OW 12
39927: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39928: LD_ADDR_VAR 0 9
39932: PUSH
39933: LD_VAR 0 2
39937: PPUSH
39938: LD_VAR 0 11
39942: PPUSH
39943: LD_VAR 0 12
39947: PPUSH
39948: CALL_OW 272
39952: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39953: LD_ADDR_VAR 0 10
39957: PUSH
39958: LD_VAR 0 3
39962: PPUSH
39963: LD_VAR 0 11
39967: PPUSH
39968: LD_VAR 0 12
39972: PPUSH
39973: CALL_OW 273
39977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39978: LD_VAR 0 9
39982: PPUSH
39983: LD_VAR 0 10
39987: PPUSH
39988: CALL_OW 488
39992: PUSH
39993: LD_VAR 0 9
39997: PUSH
39998: LD_VAR 0 10
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 7
40011: IN
40012: NOT
40013: AND
40014: PUSH
40015: LD_VAR 0 9
40019: PPUSH
40020: LD_VAR 0 10
40024: PPUSH
40025: CALL_OW 458
40029: NOT
40030: AND
40031: IFFALSE 40073
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40033: LD_ADDR_VAR 0 7
40037: PUSH
40038: LD_VAR 0 7
40042: PPUSH
40043: LD_VAR 0 7
40047: PUSH
40048: LD_INT 1
40050: PLUS
40051: PPUSH
40052: LD_VAR 0 9
40056: PUSH
40057: LD_VAR 0 10
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 1
40070: ST_TO_ADDR
40071: GO 40087
// i := i - 1 ;
40073: LD_ADDR_VAR 0 5
40077: PUSH
40078: LD_VAR 0 5
40082: PUSH
40083: LD_INT 1
40085: MINUS
40086: ST_TO_ADDR
// end ;
40087: GO 39893
40089: POP
40090: POP
// for i in tmp do
40091: LD_ADDR_VAR 0 5
40095: PUSH
40096: LD_VAR 0 7
40100: PUSH
40101: FOR_IN
40102: IFFALSE 40140
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40104: LD_VAR 0 1
40108: PPUSH
40109: LD_VAR 0 5
40113: PUSH
40114: LD_INT 1
40116: ARRAY
40117: PPUSH
40118: LD_VAR 0 5
40122: PUSH
40123: LD_INT 2
40125: ARRAY
40126: PPUSH
40127: CALL 39086 0 3
40131: NOT
40132: IFFALSE 40138
// exit ;
40134: POP
40135: POP
40136: GO 40142
40138: GO 40101
40140: POP
40141: POP
// end ;
40142: LD_VAR 0 4
40146: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
// if not GetClass ( unit ) = class_sniper then
40156: LD_VAR 0 1
40160: PPUSH
40161: CALL_OW 257
40165: PUSH
40166: LD_INT 5
40168: EQUAL
40169: NOT
40170: IFFALSE 40174
// exit ;
40172: GO 40562
// dist := 8 ;
40174: LD_ADDR_VAR 0 5
40178: PUSH
40179: LD_INT 8
40181: ST_TO_ADDR
// viewRange := 12 ;
40182: LD_ADDR_VAR 0 7
40186: PUSH
40187: LD_INT 12
40189: ST_TO_ADDR
// side := GetSide ( unit ) ;
40190: LD_ADDR_VAR 0 6
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 255
40204: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40205: LD_INT 61
40207: PPUSH
40208: LD_VAR 0 6
40212: PPUSH
40213: CALL_OW 321
40217: PUSH
40218: LD_INT 2
40220: EQUAL
40221: IFFALSE 40231
// viewRange := 16 ;
40223: LD_ADDR_VAR 0 7
40227: PUSH
40228: LD_INT 16
40230: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40231: LD_VAR 0 1
40235: PPUSH
40236: LD_VAR 0 2
40240: PPUSH
40241: LD_VAR 0 3
40245: PPUSH
40246: CALL_OW 297
40250: PUSH
40251: LD_VAR 0 5
40255: GREATER
40256: IFFALSE 40335
// begin ComMoveXY ( unit , x , y ) ;
40258: LD_VAR 0 1
40262: PPUSH
40263: LD_VAR 0 2
40267: PPUSH
40268: LD_VAR 0 3
40272: PPUSH
40273: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40277: LD_INT 35
40279: PPUSH
40280: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40284: LD_VAR 0 1
40288: PPUSH
40289: LD_VAR 0 2
40293: PPUSH
40294: LD_VAR 0 3
40298: PPUSH
40299: CALL 77055 0 3
40303: NOT
40304: IFFALSE 40308
// exit ;
40306: GO 40562
// until GetDistUnitXY ( unit , x , y ) < dist ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 2
40317: PPUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: CALL_OW 297
40327: PUSH
40328: LD_VAR 0 5
40332: LESS
40333: IFFALSE 40277
// end ; ComTurnXY ( unit , x , y ) ;
40335: LD_VAR 0 1
40339: PPUSH
40340: LD_VAR 0 2
40344: PPUSH
40345: LD_VAR 0 3
40349: PPUSH
40350: CALL_OW 118
// wait ( 5 ) ;
40354: LD_INT 5
40356: PPUSH
40357: CALL_OW 67
// _d := GetDir ( unit ) ;
40361: LD_ADDR_VAR 0 10
40365: PUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 254
40375: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40376: LD_ADDR_VAR 0 8
40380: PUSH
40381: LD_VAR 0 1
40385: PPUSH
40386: CALL_OW 250
40390: PPUSH
40391: LD_VAR 0 10
40395: PPUSH
40396: LD_VAR 0 5
40400: PPUSH
40401: CALL_OW 272
40405: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40406: LD_ADDR_VAR 0 9
40410: PUSH
40411: LD_VAR 0 1
40415: PPUSH
40416: CALL_OW 251
40420: PPUSH
40421: LD_VAR 0 10
40425: PPUSH
40426: LD_VAR 0 5
40430: PPUSH
40431: CALL_OW 273
40435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40436: LD_VAR 0 8
40440: PPUSH
40441: LD_VAR 0 9
40445: PPUSH
40446: CALL_OW 488
40450: NOT
40451: IFFALSE 40455
// exit ;
40453: GO 40562
// ComAnimCustom ( unit , 1 ) ;
40455: LD_VAR 0 1
40459: PPUSH
40460: LD_INT 1
40462: PPUSH
40463: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40467: LD_VAR 0 8
40471: PPUSH
40472: LD_VAR 0 9
40476: PPUSH
40477: LD_VAR 0 6
40481: PPUSH
40482: LD_VAR 0 7
40486: PPUSH
40487: CALL_OW 330
// repeat wait ( 1 ) ;
40491: LD_INT 1
40493: PPUSH
40494: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 316
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 314
40517: OR
40518: PUSH
40519: LD_VAR 0 1
40523: PPUSH
40524: CALL_OW 302
40528: NOT
40529: OR
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 301
40540: OR
40541: IFFALSE 40491
// RemoveSeeing ( _x , _y , side ) ;
40543: LD_VAR 0 8
40547: PPUSH
40548: LD_VAR 0 9
40552: PPUSH
40553: LD_VAR 0 6
40557: PPUSH
40558: CALL_OW 331
// end ; end_of_file
40562: LD_VAR 0 4
40566: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40567: LD_INT 0
40569: PPUSH
40570: PPUSH
// if exist_mode then
40571: LD_VAR 0 2
40575: IFFALSE 40600
// unit := CreateCharacter ( prefix & ident ) else
40577: LD_ADDR_VAR 0 5
40581: PUSH
40582: LD_VAR 0 3
40586: PUSH
40587: LD_VAR 0 1
40591: STR
40592: PPUSH
40593: CALL_OW 34
40597: ST_TO_ADDR
40598: GO 40615
// unit := NewCharacter ( ident ) ;
40600: LD_ADDR_VAR 0 5
40604: PUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 25
40614: ST_TO_ADDR
// result := unit ;
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: LD_VAR 0 5
40624: ST_TO_ADDR
// end ;
40625: LD_VAR 0 4
40629: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40630: LD_INT 0
40632: PPUSH
40633: PPUSH
// if not side or not nation then
40634: LD_VAR 0 1
40638: NOT
40639: PUSH
40640: LD_VAR 0 2
40644: NOT
40645: OR
40646: IFFALSE 40650
// exit ;
40648: GO 41418
// case nation of nation_american :
40650: LD_VAR 0 2
40654: PUSH
40655: LD_INT 1
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40877
40663: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40664: LD_ADDR_VAR 0 4
40668: PUSH
40669: LD_INT 35
40671: PUSH
40672: LD_INT 45
40674: PUSH
40675: LD_INT 46
40677: PUSH
40678: LD_INT 47
40680: PUSH
40681: LD_INT 82
40683: PUSH
40684: LD_INT 83
40686: PUSH
40687: LD_INT 84
40689: PUSH
40690: LD_INT 85
40692: PUSH
40693: LD_INT 86
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 6
40704: PUSH
40705: LD_INT 15
40707: PUSH
40708: LD_INT 16
40710: PUSH
40711: LD_INT 7
40713: PUSH
40714: LD_INT 12
40716: PUSH
40717: LD_INT 13
40719: PUSH
40720: LD_INT 10
40722: PUSH
40723: LD_INT 14
40725: PUSH
40726: LD_INT 20
40728: PUSH
40729: LD_INT 21
40731: PUSH
40732: LD_INT 22
40734: PUSH
40735: LD_INT 25
40737: PUSH
40738: LD_INT 32
40740: PUSH
40741: LD_INT 27
40743: PUSH
40744: LD_INT 36
40746: PUSH
40747: LD_INT 69
40749: PUSH
40750: LD_INT 39
40752: PUSH
40753: LD_INT 34
40755: PUSH
40756: LD_INT 40
40758: PUSH
40759: LD_INT 48
40761: PUSH
40762: LD_INT 49
40764: PUSH
40765: LD_INT 50
40767: PUSH
40768: LD_INT 51
40770: PUSH
40771: LD_INT 52
40773: PUSH
40774: LD_INT 53
40776: PUSH
40777: LD_INT 54
40779: PUSH
40780: LD_INT 55
40782: PUSH
40783: LD_INT 56
40785: PUSH
40786: LD_INT 57
40788: PUSH
40789: LD_INT 58
40791: PUSH
40792: LD_INT 59
40794: PUSH
40795: LD_INT 60
40797: PUSH
40798: LD_INT 61
40800: PUSH
40801: LD_INT 62
40803: PUSH
40804: LD_INT 80
40806: PUSH
40807: LD_INT 82
40809: PUSH
40810: LD_INT 83
40812: PUSH
40813: LD_INT 84
40815: PUSH
40816: LD_INT 85
40818: PUSH
40819: LD_INT 86
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
40875: GO 41342
40877: LD_INT 2
40879: DOUBLE
40880: EQUAL
40881: IFTRUE 40885
40883: GO 41111
40885: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40886: LD_ADDR_VAR 0 4
40890: PUSH
40891: LD_INT 35
40893: PUSH
40894: LD_INT 45
40896: PUSH
40897: LD_INT 46
40899: PUSH
40900: LD_INT 47
40902: PUSH
40903: LD_INT 82
40905: PUSH
40906: LD_INT 83
40908: PUSH
40909: LD_INT 84
40911: PUSH
40912: LD_INT 85
40914: PUSH
40915: LD_INT 87
40917: PUSH
40918: LD_INT 70
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 11
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: LD_INT 4
40932: PUSH
40933: LD_INT 5
40935: PUSH
40936: LD_INT 6
40938: PUSH
40939: LD_INT 15
40941: PUSH
40942: LD_INT 18
40944: PUSH
40945: LD_INT 7
40947: PUSH
40948: LD_INT 17
40950: PUSH
40951: LD_INT 8
40953: PUSH
40954: LD_INT 20
40956: PUSH
40957: LD_INT 21
40959: PUSH
40960: LD_INT 22
40962: PUSH
40963: LD_INT 72
40965: PUSH
40966: LD_INT 26
40968: PUSH
40969: LD_INT 69
40971: PUSH
40972: LD_INT 39
40974: PUSH
40975: LD_INT 40
40977: PUSH
40978: LD_INT 41
40980: PUSH
40981: LD_INT 42
40983: PUSH
40984: LD_INT 43
40986: PUSH
40987: LD_INT 48
40989: PUSH
40990: LD_INT 49
40992: PUSH
40993: LD_INT 50
40995: PUSH
40996: LD_INT 51
40998: PUSH
40999: LD_INT 52
41001: PUSH
41002: LD_INT 53
41004: PUSH
41005: LD_INT 54
41007: PUSH
41008: LD_INT 55
41010: PUSH
41011: LD_INT 56
41013: PUSH
41014: LD_INT 60
41016: PUSH
41017: LD_INT 61
41019: PUSH
41020: LD_INT 62
41022: PUSH
41023: LD_INT 66
41025: PUSH
41026: LD_INT 67
41028: PUSH
41029: LD_INT 68
41031: PUSH
41032: LD_INT 81
41034: PUSH
41035: LD_INT 82
41037: PUSH
41038: LD_INT 83
41040: PUSH
41041: LD_INT 84
41043: PUSH
41044: LD_INT 85
41046: PUSH
41047: LD_INT 87
41049: PUSH
41050: LD_INT 88
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
41109: GO 41342
41111: LD_INT 3
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41119
41117: GO 41341
41119: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41120: LD_ADDR_VAR 0 4
41124: PUSH
41125: LD_INT 46
41127: PUSH
41128: LD_INT 47
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 82
41139: PUSH
41140: LD_INT 83
41142: PUSH
41143: LD_INT 84
41145: PUSH
41146: LD_INT 85
41148: PUSH
41149: LD_INT 86
41151: PUSH
41152: LD_INT 11
41154: PUSH
41155: LD_INT 9
41157: PUSH
41158: LD_INT 20
41160: PUSH
41161: LD_INT 19
41163: PUSH
41164: LD_INT 21
41166: PUSH
41167: LD_INT 24
41169: PUSH
41170: LD_INT 22
41172: PUSH
41173: LD_INT 25
41175: PUSH
41176: LD_INT 28
41178: PUSH
41179: LD_INT 29
41181: PUSH
41182: LD_INT 30
41184: PUSH
41185: LD_INT 31
41187: PUSH
41188: LD_INT 37
41190: PUSH
41191: LD_INT 38
41193: PUSH
41194: LD_INT 32
41196: PUSH
41197: LD_INT 27
41199: PUSH
41200: LD_INT 33
41202: PUSH
41203: LD_INT 69
41205: PUSH
41206: LD_INT 39
41208: PUSH
41209: LD_INT 34
41211: PUSH
41212: LD_INT 40
41214: PUSH
41215: LD_INT 71
41217: PUSH
41218: LD_INT 23
41220: PUSH
41221: LD_INT 44
41223: PUSH
41224: LD_INT 48
41226: PUSH
41227: LD_INT 49
41229: PUSH
41230: LD_INT 50
41232: PUSH
41233: LD_INT 51
41235: PUSH
41236: LD_INT 52
41238: PUSH
41239: LD_INT 53
41241: PUSH
41242: LD_INT 54
41244: PUSH
41245: LD_INT 55
41247: PUSH
41248: LD_INT 56
41250: PUSH
41251: LD_INT 57
41253: PUSH
41254: LD_INT 58
41256: PUSH
41257: LD_INT 59
41259: PUSH
41260: LD_INT 63
41262: PUSH
41263: LD_INT 64
41265: PUSH
41266: LD_INT 65
41268: PUSH
41269: LD_INT 82
41271: PUSH
41272: LD_INT 83
41274: PUSH
41275: LD_INT 84
41277: PUSH
41278: LD_INT 85
41280: PUSH
41281: LD_INT 86
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: ST_TO_ADDR
41339: GO 41342
41341: POP
// if state > - 1 and state < 3 then
41342: LD_VAR 0 3
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: GREATER
41351: PUSH
41352: LD_VAR 0 3
41356: PUSH
41357: LD_INT 3
41359: LESS
41360: AND
41361: IFFALSE 41418
// for i in result do
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 4
41372: PUSH
41373: FOR_IN
41374: IFFALSE 41416
// if GetTech ( i , side ) <> state then
41376: LD_VAR 0 5
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 321
41390: PUSH
41391: LD_VAR 0 3
41395: NONEQUAL
41396: IFFALSE 41414
// result := result diff i ;
41398: LD_ADDR_VAR 0 4
41402: PUSH
41403: LD_VAR 0 4
41407: PUSH
41408: LD_VAR 0 5
41412: DIFF
41413: ST_TO_ADDR
41414: GO 41373
41416: POP
41417: POP
// end ;
41418: LD_VAR 0 4
41422: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
41427: PPUSH
// result := true ;
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_INT 1
41435: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41436: LD_ADDR_VAR 0 5
41440: PUSH
41441: LD_VAR 0 2
41445: PPUSH
41446: CALL_OW 480
41450: ST_TO_ADDR
// if not tmp then
41451: LD_VAR 0 5
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 41509
// for i in tmp do
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: LD_VAR 0 5
41469: PUSH
41470: FOR_IN
41471: IFFALSE 41507
// if GetTech ( i , side ) <> state_researched then
41473: LD_VAR 0 4
41477: PPUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 321
41487: PUSH
41488: LD_INT 2
41490: NONEQUAL
41491: IFFALSE 41505
// begin result := false ;
41493: LD_ADDR_VAR 0 3
41497: PUSH
41498: LD_INT 0
41500: ST_TO_ADDR
// exit ;
41501: POP
41502: POP
41503: GO 41509
// end ;
41505: GO 41470
41507: POP
41508: POP
// end ;
41509: LD_VAR 0 3
41513: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41529: LD_VAR 0 1
41533: NOT
41534: PUSH
41535: LD_VAR 0 1
41539: PPUSH
41540: CALL_OW 257
41544: PUSH
41545: LD_INT 9
41547: NONEQUAL
41548: OR
41549: IFFALSE 41553
// exit ;
41551: GO 42126
// side := GetSide ( unit ) ;
41553: LD_ADDR_VAR 0 9
41557: PUSH
41558: LD_VAR 0 1
41562: PPUSH
41563: CALL_OW 255
41567: ST_TO_ADDR
// tech_space := tech_spacanom ;
41568: LD_ADDR_VAR 0 12
41572: PUSH
41573: LD_INT 29
41575: ST_TO_ADDR
// tech_time := tech_taurad ;
41576: LD_ADDR_VAR 0 13
41580: PUSH
41581: LD_INT 28
41583: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41584: LD_ADDR_VAR 0 11
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 310
41598: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41599: LD_VAR 0 11
41603: PPUSH
41604: CALL_OW 247
41608: PUSH
41609: LD_INT 2
41611: EQUAL
41612: IFFALSE 41616
// exit ;
41614: GO 42126
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41616: LD_ADDR_VAR 0 8
41620: PUSH
41621: LD_INT 81
41623: PUSH
41624: LD_VAR 0 9
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 3
41635: PUSH
41636: LD_INT 21
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PPUSH
41654: CALL_OW 69
41658: ST_TO_ADDR
// if not tmp then
41659: LD_VAR 0 8
41663: NOT
41664: IFFALSE 41668
// exit ;
41666: GO 42126
// if in_unit then
41668: LD_VAR 0 11
41672: IFFALSE 41696
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41674: LD_ADDR_VAR 0 10
41678: PUSH
41679: LD_VAR 0 8
41683: PPUSH
41684: LD_VAR 0 11
41688: PPUSH
41689: CALL_OW 74
41693: ST_TO_ADDR
41694: GO 41716
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41696: LD_ADDR_VAR 0 10
41700: PUSH
41701: LD_VAR 0 8
41705: PPUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 74
41715: ST_TO_ADDR
// if not enemy then
41716: LD_VAR 0 10
41720: NOT
41721: IFFALSE 41725
// exit ;
41723: GO 42126
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41725: LD_VAR 0 11
41729: PUSH
41730: LD_VAR 0 11
41734: PPUSH
41735: LD_VAR 0 10
41739: PPUSH
41740: CALL_OW 296
41744: PUSH
41745: LD_INT 13
41747: GREATER
41748: AND
41749: PUSH
41750: LD_VAR 0 1
41754: PPUSH
41755: LD_VAR 0 10
41759: PPUSH
41760: CALL_OW 296
41764: PUSH
41765: LD_INT 12
41767: GREATER
41768: OR
41769: IFFALSE 41773
// exit ;
41771: GO 42126
// missile := [ 1 ] ;
41773: LD_ADDR_VAR 0 14
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41784: LD_VAR 0 9
41788: PPUSH
41789: LD_VAR 0 12
41793: PPUSH
41794: CALL_OW 325
41798: IFFALSE 41827
// missile := Replace ( missile , missile + 1 , 2 ) ;
41800: LD_ADDR_VAR 0 14
41804: PUSH
41805: LD_VAR 0 14
41809: PPUSH
41810: LD_VAR 0 14
41814: PUSH
41815: LD_INT 1
41817: PLUS
41818: PPUSH
41819: LD_INT 2
41821: PPUSH
41822: CALL_OW 1
41826: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41827: LD_VAR 0 9
41831: PPUSH
41832: LD_VAR 0 13
41836: PPUSH
41837: CALL_OW 325
41841: PUSH
41842: LD_VAR 0 10
41846: PPUSH
41847: CALL_OW 255
41851: PPUSH
41852: LD_VAR 0 13
41856: PPUSH
41857: CALL_OW 325
41861: NOT
41862: AND
41863: IFFALSE 41892
// missile := Replace ( missile , missile + 1 , 3 ) ;
41865: LD_ADDR_VAR 0 14
41869: PUSH
41870: LD_VAR 0 14
41874: PPUSH
41875: LD_VAR 0 14
41879: PUSH
41880: LD_INT 1
41882: PLUS
41883: PPUSH
41884: LD_INT 3
41886: PPUSH
41887: CALL_OW 1
41891: ST_TO_ADDR
// if missile < 2 then
41892: LD_VAR 0 14
41896: PUSH
41897: LD_INT 2
41899: LESS
41900: IFFALSE 41904
// exit ;
41902: GO 42126
// x := GetX ( enemy ) ;
41904: LD_ADDR_VAR 0 4
41908: PUSH
41909: LD_VAR 0 10
41913: PPUSH
41914: CALL_OW 250
41918: ST_TO_ADDR
// y := GetY ( enemy ) ;
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_VAR 0 10
41928: PPUSH
41929: CALL_OW 251
41933: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41934: LD_ADDR_VAR 0 6
41938: PUSH
41939: LD_VAR 0 4
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PPUSH
41948: LD_INT 1
41950: PPUSH
41951: CALL_OW 12
41955: PLUS
41956: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41957: LD_ADDR_VAR 0 7
41961: PUSH
41962: LD_VAR 0 5
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PPUSH
41971: LD_INT 1
41973: PPUSH
41974: CALL_OW 12
41978: PLUS
41979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41980: LD_VAR 0 6
41984: PPUSH
41985: LD_VAR 0 7
41989: PPUSH
41990: CALL_OW 488
41994: NOT
41995: IFFALSE 42017
// begin _x := x ;
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: LD_VAR 0 4
42006: ST_TO_ADDR
// _y := y ;
42007: LD_ADDR_VAR 0 7
42011: PUSH
42012: LD_VAR 0 5
42016: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42017: LD_ADDR_VAR 0 3
42021: PUSH
42022: LD_INT 1
42024: PPUSH
42025: LD_VAR 0 14
42029: PPUSH
42030: CALL_OW 12
42034: ST_TO_ADDR
// case i of 1 :
42035: LD_VAR 0 3
42039: PUSH
42040: LD_INT 1
42042: DOUBLE
42043: EQUAL
42044: IFTRUE 42048
42046: GO 42065
42048: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42049: LD_VAR 0 1
42053: PPUSH
42054: LD_VAR 0 10
42058: PPUSH
42059: CALL_OW 115
42063: GO 42126
42065: LD_INT 2
42067: DOUBLE
42068: EQUAL
42069: IFTRUE 42073
42071: GO 42095
42073: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42074: LD_VAR 0 1
42078: PPUSH
42079: LD_VAR 0 6
42083: PPUSH
42084: LD_VAR 0 7
42088: PPUSH
42089: CALL_OW 153
42093: GO 42126
42095: LD_INT 3
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42103
42101: GO 42125
42103: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42104: LD_VAR 0 1
42108: PPUSH
42109: LD_VAR 0 6
42113: PPUSH
42114: LD_VAR 0 7
42118: PPUSH
42119: CALL_OW 154
42123: GO 42126
42125: POP
// end ;
42126: LD_VAR 0 2
42130: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
// if not unit or not building then
42139: LD_VAR 0 1
42143: NOT
42144: PUSH
42145: LD_VAR 0 2
42149: NOT
42150: OR
42151: IFFALSE 42155
// exit ;
42153: GO 42313
// x := GetX ( building ) ;
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: LD_VAR 0 2
42164: PPUSH
42165: CALL_OW 250
42169: ST_TO_ADDR
// y := GetY ( building ) ;
42170: LD_ADDR_VAR 0 6
42174: PUSH
42175: LD_VAR 0 2
42179: PPUSH
42180: CALL_OW 251
42184: ST_TO_ADDR
// for i = 0 to 5 do
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: DOUBLE
42191: LD_INT 0
42193: DEC
42194: ST_TO_ADDR
42195: LD_INT 5
42197: PUSH
42198: FOR_TO
42199: IFFALSE 42311
// begin _x := ShiftX ( x , i , 3 ) ;
42201: LD_ADDR_VAR 0 7
42205: PUSH
42206: LD_VAR 0 5
42210: PPUSH
42211: LD_VAR 0 4
42215: PPUSH
42216: LD_INT 3
42218: PPUSH
42219: CALL_OW 272
42223: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42224: LD_ADDR_VAR 0 8
42228: PUSH
42229: LD_VAR 0 6
42233: PPUSH
42234: LD_VAR 0 4
42238: PPUSH
42239: LD_INT 3
42241: PPUSH
42242: CALL_OW 273
42246: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42247: LD_VAR 0 7
42251: PPUSH
42252: LD_VAR 0 8
42256: PPUSH
42257: CALL_OW 488
42261: NOT
42262: IFFALSE 42266
// continue ;
42264: GO 42198
// if HexInfo ( _x , _y ) = 0 then
42266: LD_VAR 0 7
42270: PPUSH
42271: LD_VAR 0 8
42275: PPUSH
42276: CALL_OW 428
42280: PUSH
42281: LD_INT 0
42283: EQUAL
42284: IFFALSE 42309
// begin ComMoveXY ( unit , _x , _y ) ;
42286: LD_VAR 0 1
42290: PPUSH
42291: LD_VAR 0 7
42295: PPUSH
42296: LD_VAR 0 8
42300: PPUSH
42301: CALL_OW 111
// exit ;
42305: POP
42306: POP
42307: GO 42313
// end ; end ;
42309: GO 42198
42311: POP
42312: POP
// end ;
42313: LD_VAR 0 3
42317: RET
// export function ScanBase ( side , base_area ) ; begin
42318: LD_INT 0
42320: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_VAR 0 2
42330: PPUSH
42331: LD_INT 81
42333: PUSH
42334: LD_VAR 0 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PPUSH
42343: CALL_OW 70
42347: ST_TO_ADDR
// end ;
42348: LD_VAR 0 3
42352: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42353: LD_INT 0
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
// result := false ;
42359: LD_ADDR_VAR 0 2
42363: PUSH
42364: LD_INT 0
42366: ST_TO_ADDR
// side := GetSide ( unit ) ;
42367: LD_ADDR_VAR 0 3
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 255
42381: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42382: LD_ADDR_VAR 0 4
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 248
42396: ST_TO_ADDR
// case nat of 1 :
42397: LD_VAR 0 4
42401: PUSH
42402: LD_INT 1
42404: DOUBLE
42405: EQUAL
42406: IFTRUE 42410
42408: GO 42421
42410: POP
// tech := tech_lassight ; 2 :
42411: LD_ADDR_VAR 0 5
42415: PUSH
42416: LD_INT 12
42418: ST_TO_ADDR
42419: GO 42460
42421: LD_INT 2
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42440
42429: POP
// tech := tech_mortar ; 3 :
42430: LD_ADDR_VAR 0 5
42434: PUSH
42435: LD_INT 41
42437: ST_TO_ADDR
42438: GO 42460
42440: LD_INT 3
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42459
42448: POP
// tech := tech_bazooka ; end ;
42449: LD_ADDR_VAR 0 5
42453: PUSH
42454: LD_INT 44
42456: ST_TO_ADDR
42457: GO 42460
42459: POP
// if Researched ( side , tech ) then
42460: LD_VAR 0 3
42464: PPUSH
42465: LD_VAR 0 5
42469: PPUSH
42470: CALL_OW 325
42474: IFFALSE 42501
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42476: LD_ADDR_VAR 0 2
42480: PUSH
42481: LD_INT 5
42483: PUSH
42484: LD_INT 8
42486: PUSH
42487: LD_INT 9
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: PUSH
42495: LD_VAR 0 4
42499: ARRAY
42500: ST_TO_ADDR
// end ;
42501: LD_VAR 0 2
42505: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42506: LD_INT 0
42508: PPUSH
42509: PPUSH
42510: PPUSH
// if not mines then
42511: LD_VAR 0 2
42515: NOT
42516: IFFALSE 42520
// exit ;
42518: GO 42664
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_INT 81
42527: PUSH
42528: LD_VAR 0 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 21
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PPUSH
42558: CALL_OW 69
42562: ST_TO_ADDR
// for i in mines do
42563: LD_ADDR_VAR 0 4
42567: PUSH
42568: LD_VAR 0 2
42572: PUSH
42573: FOR_IN
42574: IFFALSE 42662
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42576: LD_VAR 0 4
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PPUSH
42585: LD_VAR 0 4
42589: PUSH
42590: LD_INT 2
42592: ARRAY
42593: PPUSH
42594: CALL_OW 458
42598: NOT
42599: IFFALSE 42603
// continue ;
42601: GO 42573
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42603: LD_VAR 0 4
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: PPUSH
42612: LD_VAR 0 4
42616: PUSH
42617: LD_INT 2
42619: ARRAY
42620: PPUSH
42621: CALL_OW 428
42625: PUSH
42626: LD_VAR 0 5
42630: IN
42631: IFFALSE 42660
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42633: LD_VAR 0 4
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: LD_VAR 0 4
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: PPUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: CALL_OW 456
// end ;
42660: GO 42573
42662: POP
42663: POP
// end ;
42664: LD_VAR 0 3
42668: RET
// export function Count ( array ) ; begin
42669: LD_INT 0
42671: PPUSH
// result := array + 0 ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_VAR 0 1
42681: PUSH
42682: LD_INT 0
42684: PLUS
42685: ST_TO_ADDR
// end ;
42686: LD_VAR 0 2
42690: RET
// export function IsEmpty ( building ) ; begin
42691: LD_INT 0
42693: PPUSH
// if not building then
42694: LD_VAR 0 1
42698: NOT
42699: IFFALSE 42703
// exit ;
42701: GO 42746
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42703: LD_ADDR_VAR 0 2
42707: PUSH
42708: LD_VAR 0 1
42712: PUSH
42713: LD_INT 22
42715: PUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 255
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 58
42732: PUSH
42733: EMPTY
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PPUSH
42740: CALL_OW 69
42744: IN
42745: ST_TO_ADDR
// end ;
42746: LD_VAR 0 2
42750: RET
// export function IsNotFull ( building ) ; var places ; begin
42751: LD_INT 0
42753: PPUSH
42754: PPUSH
// if not building then
42755: LD_VAR 0 1
42759: NOT
42760: IFFALSE 42764
// exit ;
42762: GO 42792
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42764: LD_ADDR_VAR 0 2
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 62
42779: PUSH
42780: EMPTY
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PPUSH
42787: CALL_OW 72
42791: ST_TO_ADDR
// end ;
42792: LD_VAR 0 2
42796: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42797: LD_INT 0
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
// tmp := [ ] ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: EMPTY
42809: ST_TO_ADDR
// list := [ ] ;
42810: LD_ADDR_VAR 0 5
42814: PUSH
42815: EMPTY
42816: ST_TO_ADDR
// for i = 16 to 25 do
42817: LD_ADDR_VAR 0 4
42821: PUSH
42822: DOUBLE
42823: LD_INT 16
42825: DEC
42826: ST_TO_ADDR
42827: LD_INT 25
42829: PUSH
42830: FOR_TO
42831: IFFALSE 42904
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_VAR 0 3
42842: PUSH
42843: LD_INT 22
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 255
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 91
42862: PUSH
42863: LD_VAR 0 1
42867: PUSH
42868: LD_INT 6
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: LD_VAR 0 4
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: PPUSH
42896: CALL_OW 69
42900: ADD
42901: ST_TO_ADDR
42902: GO 42830
42904: POP
42905: POP
// for i = 1 to tmp do
42906: LD_ADDR_VAR 0 4
42910: PUSH
42911: DOUBLE
42912: LD_INT 1
42914: DEC
42915: ST_TO_ADDR
42916: LD_VAR 0 3
42920: PUSH
42921: FOR_TO
42922: IFFALSE 43010
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42924: LD_ADDR_VAR 0 5
42928: PUSH
42929: LD_VAR 0 5
42933: PUSH
42934: LD_VAR 0 3
42938: PUSH
42939: LD_VAR 0 4
42943: ARRAY
42944: PPUSH
42945: CALL_OW 266
42949: PUSH
42950: LD_VAR 0 3
42954: PUSH
42955: LD_VAR 0 4
42959: ARRAY
42960: PPUSH
42961: CALL_OW 250
42965: PUSH
42966: LD_VAR 0 3
42970: PUSH
42971: LD_VAR 0 4
42975: ARRAY
42976: PPUSH
42977: CALL_OW 251
42981: PUSH
42982: LD_VAR 0 3
42986: PUSH
42987: LD_VAR 0 4
42991: ARRAY
42992: PPUSH
42993: CALL_OW 254
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: ADD
43007: ST_TO_ADDR
43008: GO 42921
43010: POP
43011: POP
// result := list ;
43012: LD_ADDR_VAR 0 2
43016: PUSH
43017: LD_VAR 0 5
43021: ST_TO_ADDR
// end ;
43022: LD_VAR 0 2
43026: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43027: LD_INT 0
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
// if not factory then
43036: LD_VAR 0 1
43040: NOT
43041: IFFALSE 43045
// exit ;
43043: GO 43638
// if control = control_apeman then
43045: LD_VAR 0 4
43049: PUSH
43050: LD_INT 5
43052: EQUAL
43053: IFFALSE 43162
// begin tmp := UnitsInside ( factory ) ;
43055: LD_ADDR_VAR 0 8
43059: PUSH
43060: LD_VAR 0 1
43064: PPUSH
43065: CALL_OW 313
43069: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43070: LD_VAR 0 8
43074: PPUSH
43075: LD_INT 25
43077: PUSH
43078: LD_INT 12
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PPUSH
43085: CALL_OW 72
43089: NOT
43090: IFFALSE 43100
// control := control_manual ;
43092: LD_ADDR_VAR 0 4
43096: PUSH
43097: LD_INT 1
43099: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43100: LD_ADDR_VAR 0 8
43104: PUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: CALL 42797 0 1
43114: ST_TO_ADDR
// if tmp then
43115: LD_VAR 0 8
43119: IFFALSE 43162
// begin for i in tmp do
43121: LD_ADDR_VAR 0 7
43125: PUSH
43126: LD_VAR 0 8
43130: PUSH
43131: FOR_IN
43132: IFFALSE 43160
// if i [ 1 ] = b_ext_radio then
43134: LD_VAR 0 7
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: PUSH
43143: LD_INT 22
43145: EQUAL
43146: IFFALSE 43158
// begin control := control_remote ;
43148: LD_ADDR_VAR 0 4
43152: PUSH
43153: LD_INT 2
43155: ST_TO_ADDR
// break ;
43156: GO 43160
// end ;
43158: GO 43131
43160: POP
43161: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43162: LD_VAR 0 1
43166: PPUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: LD_VAR 0 3
43176: PPUSH
43177: LD_VAR 0 4
43181: PPUSH
43182: LD_VAR 0 5
43186: PPUSH
43187: CALL_OW 448
43191: IFFALSE 43226
// begin result := [ chassis , engine , control , weapon ] ;
43193: LD_ADDR_VAR 0 6
43197: PUSH
43198: LD_VAR 0 2
43202: PUSH
43203: LD_VAR 0 3
43207: PUSH
43208: LD_VAR 0 4
43212: PUSH
43213: LD_VAR 0 5
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// exit ;
43224: GO 43638
// end ; _chassis := AvailableChassisList ( factory ) ;
43226: LD_ADDR_VAR 0 9
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: CALL_OW 475
43240: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43241: LD_ADDR_VAR 0 11
43245: PUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 476
43255: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43256: LD_ADDR_VAR 0 12
43260: PUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: CALL_OW 477
43270: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43271: LD_ADDR_VAR 0 10
43275: PUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: CALL_OW 478
43285: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43286: LD_VAR 0 9
43290: NOT
43291: PUSH
43292: LD_VAR 0 11
43296: NOT
43297: OR
43298: PUSH
43299: LD_VAR 0 12
43303: NOT
43304: OR
43305: PUSH
43306: LD_VAR 0 10
43310: NOT
43311: OR
43312: IFFALSE 43347
// begin result := [ chassis , engine , control , weapon ] ;
43314: LD_ADDR_VAR 0 6
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: LD_VAR 0 3
43328: PUSH
43329: LD_VAR 0 4
43333: PUSH
43334: LD_VAR 0 5
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// exit ;
43345: GO 43638
// end ; if not chassis in _chassis then
43347: LD_VAR 0 2
43351: PUSH
43352: LD_VAR 0 9
43356: IN
43357: NOT
43358: IFFALSE 43384
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43360: LD_ADDR_VAR 0 2
43364: PUSH
43365: LD_VAR 0 9
43369: PUSH
43370: LD_INT 1
43372: PPUSH
43373: LD_VAR 0 9
43377: PPUSH
43378: CALL_OW 12
43382: ARRAY
43383: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43384: LD_VAR 0 2
43388: PPUSH
43389: LD_VAR 0 3
43393: PPUSH
43394: CALL 43643 0 2
43398: NOT
43399: IFFALSE 43458
// repeat engine := _engine [ 1 ] ;
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_VAR 0 11
43410: PUSH
43411: LD_INT 1
43413: ARRAY
43414: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43415: LD_ADDR_VAR 0 11
43419: PUSH
43420: LD_VAR 0 11
43424: PPUSH
43425: LD_INT 1
43427: PPUSH
43428: CALL_OW 3
43432: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43433: LD_VAR 0 2
43437: PPUSH
43438: LD_VAR 0 3
43442: PPUSH
43443: CALL 43643 0 2
43447: PUSH
43448: LD_VAR 0 11
43452: PUSH
43453: EMPTY
43454: EQUAL
43455: OR
43456: IFFALSE 43401
// if not control in _control then
43458: LD_VAR 0 4
43462: PUSH
43463: LD_VAR 0 12
43467: IN
43468: NOT
43469: IFFALSE 43495
// control := _control [ rand ( 1 , _control ) ] ;
43471: LD_ADDR_VAR 0 4
43475: PUSH
43476: LD_VAR 0 12
43480: PUSH
43481: LD_INT 1
43483: PPUSH
43484: LD_VAR 0 12
43488: PPUSH
43489: CALL_OW 12
43493: ARRAY
43494: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43495: LD_VAR 0 2
43499: PPUSH
43500: LD_VAR 0 5
43504: PPUSH
43505: CALL 43863 0 2
43509: NOT
43510: IFFALSE 43569
// repeat weapon := _weapon [ 1 ] ;
43512: LD_ADDR_VAR 0 5
43516: PUSH
43517: LD_VAR 0 10
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43526: LD_ADDR_VAR 0 10
43530: PUSH
43531: LD_VAR 0 10
43535: PPUSH
43536: LD_INT 1
43538: PPUSH
43539: CALL_OW 3
43543: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43544: LD_VAR 0 2
43548: PPUSH
43549: LD_VAR 0 5
43553: PPUSH
43554: CALL 43863 0 2
43558: PUSH
43559: LD_VAR 0 10
43563: PUSH
43564: EMPTY
43565: EQUAL
43566: OR
43567: IFFALSE 43512
// result := [ ] ;
43569: LD_ADDR_VAR 0 6
43573: PUSH
43574: EMPTY
43575: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43576: LD_VAR 0 1
43580: PPUSH
43581: LD_VAR 0 2
43585: PPUSH
43586: LD_VAR 0 3
43590: PPUSH
43591: LD_VAR 0 4
43595: PPUSH
43596: LD_VAR 0 5
43600: PPUSH
43601: CALL_OW 448
43605: IFFALSE 43638
// result := [ chassis , engine , control , weapon ] ;
43607: LD_ADDR_VAR 0 6
43611: PUSH
43612: LD_VAR 0 2
43616: PUSH
43617: LD_VAR 0 3
43621: PUSH
43622: LD_VAR 0 4
43626: PUSH
43627: LD_VAR 0 5
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// end ;
43638: LD_VAR 0 6
43642: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43643: LD_INT 0
43645: PPUSH
// if not chassis or not engine then
43646: LD_VAR 0 1
43650: NOT
43651: PUSH
43652: LD_VAR 0 2
43656: NOT
43657: OR
43658: IFFALSE 43662
// exit ;
43660: GO 43858
// case engine of engine_solar :
43662: LD_VAR 0 2
43666: PUSH
43667: LD_INT 2
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43675
43673: GO 43713
43675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43676: LD_ADDR_VAR 0 3
43680: PUSH
43681: LD_INT 11
43683: PUSH
43684: LD_INT 12
43686: PUSH
43687: LD_INT 13
43689: PUSH
43690: LD_INT 14
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
43711: GO 43842
43713: LD_INT 1
43715: DOUBLE
43716: EQUAL
43717: IFTRUE 43721
43719: GO 43783
43721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43722: LD_ADDR_VAR 0 3
43726: PUSH
43727: LD_INT 11
43729: PUSH
43730: LD_INT 12
43732: PUSH
43733: LD_INT 13
43735: PUSH
43736: LD_INT 14
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 4
43750: PUSH
43751: LD_INT 5
43753: PUSH
43754: LD_INT 21
43756: PUSH
43757: LD_INT 23
43759: PUSH
43760: LD_INT 22
43762: PUSH
43763: LD_INT 24
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
43781: GO 43842
43783: LD_INT 3
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43791
43789: GO 43841
43791: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43792: LD_ADDR_VAR 0 3
43796: PUSH
43797: LD_INT 13
43799: PUSH
43800: LD_INT 14
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: LD_INT 4
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: LD_INT 21
43817: PUSH
43818: LD_INT 22
43820: PUSH
43821: LD_INT 23
43823: PUSH
43824: LD_INT 24
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
43839: GO 43842
43841: POP
// result := ( chassis in result ) ;
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: LD_VAR 0 3
43856: IN
43857: ST_TO_ADDR
// end ;
43858: LD_VAR 0 3
43862: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43863: LD_INT 0
43865: PPUSH
// if not chassis or not weapon then
43866: LD_VAR 0 1
43870: NOT
43871: PUSH
43872: LD_VAR 0 2
43876: NOT
43877: OR
43878: IFFALSE 43882
// exit ;
43880: GO 44942
// case weapon of us_machine_gun :
43882: LD_VAR 0 2
43886: PUSH
43887: LD_INT 2
43889: DOUBLE
43890: EQUAL
43891: IFTRUE 43895
43893: GO 43925
43895: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43896: LD_ADDR_VAR 0 3
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: LD_INT 4
43912: PUSH
43913: LD_INT 5
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
43923: GO 44926
43925: LD_INT 3
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43963
43933: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
43961: GO 44926
43963: LD_INT 11
43965: DOUBLE
43966: EQUAL
43967: IFTRUE 43971
43969: GO 44001
43971: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43972: LD_ADDR_VAR 0 3
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: LD_INT 4
43988: PUSH
43989: LD_INT 5
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
43999: GO 44926
44001: LD_INT 4
44003: DOUBLE
44004: EQUAL
44005: IFTRUE 44009
44007: GO 44035
44009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 4
44023: PUSH
44024: LD_INT 5
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: ST_TO_ADDR
44033: GO 44926
44035: LD_INT 5
44037: DOUBLE
44038: EQUAL
44039: IFTRUE 44043
44041: GO 44069
44043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44044: LD_ADDR_VAR 0 3
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: LD_INT 4
44057: PUSH
44058: LD_INT 5
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
44067: GO 44926
44069: LD_INT 9
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44103
44077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 4
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
44101: GO 44926
44103: LD_INT 7
44105: DOUBLE
44106: EQUAL
44107: IFTRUE 44111
44109: GO 44137
44111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44112: LD_ADDR_VAR 0 3
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 4
44125: PUSH
44126: LD_INT 5
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
44135: GO 44926
44137: LD_INT 12
44139: DOUBLE
44140: EQUAL
44141: IFTRUE 44145
44143: GO 44171
44145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44146: LD_ADDR_VAR 0 3
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 4
44159: PUSH
44160: LD_INT 5
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
44169: GO 44926
44171: LD_INT 13
44173: DOUBLE
44174: EQUAL
44175: IFTRUE 44179
44177: GO 44205
44179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: LD_INT 4
44193: PUSH
44194: LD_INT 5
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: ST_TO_ADDR
44203: GO 44926
44205: LD_INT 14
44207: DOUBLE
44208: EQUAL
44209: IFTRUE 44213
44211: GO 44231
44213: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_INT 4
44221: PUSH
44222: LD_INT 5
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: ST_TO_ADDR
44229: GO 44926
44231: LD_INT 6
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44257
44239: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44240: LD_ADDR_VAR 0 3
44244: PUSH
44245: LD_INT 4
44247: PUSH
44248: LD_INT 5
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: ST_TO_ADDR
44255: GO 44926
44257: LD_INT 10
44259: DOUBLE
44260: EQUAL
44261: IFTRUE 44265
44263: GO 44283
44265: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44266: LD_ADDR_VAR 0 3
44270: PUSH
44271: LD_INT 4
44273: PUSH
44274: LD_INT 5
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: ST_TO_ADDR
44281: GO 44926
44283: LD_INT 22
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44317
44291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 11
44299: PUSH
44300: LD_INT 12
44302: PUSH
44303: LD_INT 13
44305: PUSH
44306: LD_INT 14
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
44315: GO 44926
44317: LD_INT 23
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44351
44325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 11
44333: PUSH
44334: LD_INT 12
44336: PUSH
44337: LD_INT 13
44339: PUSH
44340: LD_INT 14
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
44349: GO 44926
44351: LD_INT 24
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44385
44359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44360: LD_ADDR_VAR 0 3
44364: PUSH
44365: LD_INT 11
44367: PUSH
44368: LD_INT 12
44370: PUSH
44371: LD_INT 13
44373: PUSH
44374: LD_INT 14
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
44383: GO 44926
44385: LD_INT 30
44387: DOUBLE
44388: EQUAL
44389: IFTRUE 44393
44391: GO 44419
44393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_INT 11
44401: PUSH
44402: LD_INT 12
44404: PUSH
44405: LD_INT 13
44407: PUSH
44408: LD_INT 14
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
44417: GO 44926
44419: LD_INT 25
44421: DOUBLE
44422: EQUAL
44423: IFTRUE 44427
44425: GO 44445
44427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_INT 13
44435: PUSH
44436: LD_INT 14
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: ST_TO_ADDR
44443: GO 44926
44445: LD_INT 27
44447: DOUBLE
44448: EQUAL
44449: IFTRUE 44453
44451: GO 44471
44453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_INT 13
44461: PUSH
44462: LD_INT 14
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: ST_TO_ADDR
44469: GO 44926
44471: LD_INT 92
44473: DOUBLE
44474: EQUAL
44475: IFTRUE 44479
44477: GO 44505
44479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44480: LD_ADDR_VAR 0 3
44484: PUSH
44485: LD_INT 11
44487: PUSH
44488: LD_INT 12
44490: PUSH
44491: LD_INT 13
44493: PUSH
44494: LD_INT 14
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: ST_TO_ADDR
44503: GO 44926
44505: LD_INT 28
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 44531
44513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_INT 13
44521: PUSH
44522: LD_INT 14
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: ST_TO_ADDR
44529: GO 44926
44531: LD_INT 29
44533: DOUBLE
44534: EQUAL
44535: IFTRUE 44539
44537: GO 44557
44539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44540: LD_ADDR_VAR 0 3
44544: PUSH
44545: LD_INT 13
44547: PUSH
44548: LD_INT 14
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: ST_TO_ADDR
44555: GO 44926
44557: LD_INT 31
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 44583
44565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: LD_INT 13
44573: PUSH
44574: LD_INT 14
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: ST_TO_ADDR
44581: GO 44926
44583: LD_INT 26
44585: DOUBLE
44586: EQUAL
44587: IFTRUE 44591
44589: GO 44609
44591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44592: LD_ADDR_VAR 0 3
44596: PUSH
44597: LD_INT 13
44599: PUSH
44600: LD_INT 14
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: ST_TO_ADDR
44607: GO 44926
44609: LD_INT 42
44611: DOUBLE
44612: EQUAL
44613: IFTRUE 44617
44615: GO 44643
44617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: LD_INT 21
44625: PUSH
44626: LD_INT 22
44628: PUSH
44629: LD_INT 23
44631: PUSH
44632: LD_INT 24
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
44641: GO 44926
44643: LD_INT 43
44645: DOUBLE
44646: EQUAL
44647: IFTRUE 44651
44649: GO 44677
44651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44652: LD_ADDR_VAR 0 3
44656: PUSH
44657: LD_INT 21
44659: PUSH
44660: LD_INT 22
44662: PUSH
44663: LD_INT 23
44665: PUSH
44666: LD_INT 24
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
44675: GO 44926
44677: LD_INT 44
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44711
44685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 21
44693: PUSH
44694: LD_INT 22
44696: PUSH
44697: LD_INT 23
44699: PUSH
44700: LD_INT 24
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: ST_TO_ADDR
44709: GO 44926
44711: LD_INT 45
44713: DOUBLE
44714: EQUAL
44715: IFTRUE 44719
44717: GO 44745
44719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44720: LD_ADDR_VAR 0 3
44724: PUSH
44725: LD_INT 21
44727: PUSH
44728: LD_INT 22
44730: PUSH
44731: LD_INT 23
44733: PUSH
44734: LD_INT 24
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
44743: GO 44926
44745: LD_INT 49
44747: DOUBLE
44748: EQUAL
44749: IFTRUE 44753
44751: GO 44779
44753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44754: LD_ADDR_VAR 0 3
44758: PUSH
44759: LD_INT 21
44761: PUSH
44762: LD_INT 22
44764: PUSH
44765: LD_INT 23
44767: PUSH
44768: LD_INT 24
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
44777: GO 44926
44779: LD_INT 51
44781: DOUBLE
44782: EQUAL
44783: IFTRUE 44787
44785: GO 44813
44787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_INT 21
44795: PUSH
44796: LD_INT 22
44798: PUSH
44799: LD_INT 23
44801: PUSH
44802: LD_INT 24
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
44811: GO 44926
44813: LD_INT 52
44815: DOUBLE
44816: EQUAL
44817: IFTRUE 44821
44819: GO 44847
44821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44822: LD_ADDR_VAR 0 3
44826: PUSH
44827: LD_INT 21
44829: PUSH
44830: LD_INT 22
44832: PUSH
44833: LD_INT 23
44835: PUSH
44836: LD_INT 24
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
44845: GO 44926
44847: LD_INT 53
44849: DOUBLE
44850: EQUAL
44851: IFTRUE 44855
44853: GO 44873
44855: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44856: LD_ADDR_VAR 0 3
44860: PUSH
44861: LD_INT 23
44863: PUSH
44864: LD_INT 24
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: ST_TO_ADDR
44871: GO 44926
44873: LD_INT 46
44875: DOUBLE
44876: EQUAL
44877: IFTRUE 44881
44879: GO 44899
44881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: LD_INT 23
44889: PUSH
44890: LD_INT 24
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: ST_TO_ADDR
44897: GO 44926
44899: LD_INT 47
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44925
44907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_INT 23
44915: PUSH
44916: LD_INT 24
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: ST_TO_ADDR
44923: GO 44926
44925: POP
// result := ( chassis in result ) ;
44926: LD_ADDR_VAR 0 3
44930: PUSH
44931: LD_VAR 0 1
44935: PUSH
44936: LD_VAR 0 3
44940: IN
44941: ST_TO_ADDR
// end ;
44942: LD_VAR 0 3
44946: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44947: LD_INT 0
44949: PPUSH
44950: PPUSH
44951: PPUSH
44952: PPUSH
44953: PPUSH
44954: PPUSH
44955: PPUSH
// result := array ;
44956: LD_ADDR_VAR 0 5
44960: PUSH
44961: LD_VAR 0 1
44965: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44966: LD_VAR 0 1
44970: NOT
44971: PUSH
44972: LD_VAR 0 2
44976: NOT
44977: OR
44978: PUSH
44979: LD_VAR 0 3
44983: NOT
44984: OR
44985: PUSH
44986: LD_VAR 0 2
44990: PUSH
44991: LD_VAR 0 1
44995: GREATER
44996: OR
44997: PUSH
44998: LD_VAR 0 3
45002: PUSH
45003: LD_VAR 0 1
45007: GREATER
45008: OR
45009: IFFALSE 45013
// exit ;
45011: GO 45309
// if direction then
45013: LD_VAR 0 4
45017: IFFALSE 45081
// begin d := 1 ;
45019: LD_ADDR_VAR 0 9
45023: PUSH
45024: LD_INT 1
45026: ST_TO_ADDR
// if i_from > i_to then
45027: LD_VAR 0 2
45031: PUSH
45032: LD_VAR 0 3
45036: GREATER
45037: IFFALSE 45063
// length := ( array - i_from ) + i_to else
45039: LD_ADDR_VAR 0 11
45043: PUSH
45044: LD_VAR 0 1
45048: PUSH
45049: LD_VAR 0 2
45053: MINUS
45054: PUSH
45055: LD_VAR 0 3
45059: PLUS
45060: ST_TO_ADDR
45061: GO 45079
// length := i_to - i_from ;
45063: LD_ADDR_VAR 0 11
45067: PUSH
45068: LD_VAR 0 3
45072: PUSH
45073: LD_VAR 0 2
45077: MINUS
45078: ST_TO_ADDR
// end else
45079: GO 45142
// begin d := - 1 ;
45081: LD_ADDR_VAR 0 9
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: ST_TO_ADDR
// if i_from > i_to then
45090: LD_VAR 0 2
45094: PUSH
45095: LD_VAR 0 3
45099: GREATER
45100: IFFALSE 45120
// length := i_from - i_to else
45102: LD_ADDR_VAR 0 11
45106: PUSH
45107: LD_VAR 0 2
45111: PUSH
45112: LD_VAR 0 3
45116: MINUS
45117: ST_TO_ADDR
45118: GO 45142
// length := ( array - i_to ) + i_from ;
45120: LD_ADDR_VAR 0 11
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: LD_VAR 0 3
45134: MINUS
45135: PUSH
45136: LD_VAR 0 2
45140: PLUS
45141: ST_TO_ADDR
// end ; if not length then
45142: LD_VAR 0 11
45146: NOT
45147: IFFALSE 45151
// exit ;
45149: GO 45309
// tmp := array ;
45151: LD_ADDR_VAR 0 10
45155: PUSH
45156: LD_VAR 0 1
45160: ST_TO_ADDR
// for i = 1 to length do
45161: LD_ADDR_VAR 0 6
45165: PUSH
45166: DOUBLE
45167: LD_INT 1
45169: DEC
45170: ST_TO_ADDR
45171: LD_VAR 0 11
45175: PUSH
45176: FOR_TO
45177: IFFALSE 45297
// begin for j = 1 to array do
45179: LD_ADDR_VAR 0 7
45183: PUSH
45184: DOUBLE
45185: LD_INT 1
45187: DEC
45188: ST_TO_ADDR
45189: LD_VAR 0 1
45193: PUSH
45194: FOR_TO
45195: IFFALSE 45283
// begin k := j + d ;
45197: LD_ADDR_VAR 0 8
45201: PUSH
45202: LD_VAR 0 7
45206: PUSH
45207: LD_VAR 0 9
45211: PLUS
45212: ST_TO_ADDR
// if k > array then
45213: LD_VAR 0 8
45217: PUSH
45218: LD_VAR 0 1
45222: GREATER
45223: IFFALSE 45233
// k := 1 ;
45225: LD_ADDR_VAR 0 8
45229: PUSH
45230: LD_INT 1
45232: ST_TO_ADDR
// if not k then
45233: LD_VAR 0 8
45237: NOT
45238: IFFALSE 45250
// k := array ;
45240: LD_ADDR_VAR 0 8
45244: PUSH
45245: LD_VAR 0 1
45249: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45250: LD_ADDR_VAR 0 10
45254: PUSH
45255: LD_VAR 0 10
45259: PPUSH
45260: LD_VAR 0 8
45264: PPUSH
45265: LD_VAR 0 1
45269: PUSH
45270: LD_VAR 0 7
45274: ARRAY
45275: PPUSH
45276: CALL_OW 1
45280: ST_TO_ADDR
// end ;
45281: GO 45194
45283: POP
45284: POP
// array := tmp ;
45285: LD_ADDR_VAR 0 1
45289: PUSH
45290: LD_VAR 0 10
45294: ST_TO_ADDR
// end ;
45295: GO 45176
45297: POP
45298: POP
// result := array ;
45299: LD_ADDR_VAR 0 5
45303: PUSH
45304: LD_VAR 0 1
45308: ST_TO_ADDR
// end ;
45309: LD_VAR 0 5
45313: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45314: LD_INT 0
45316: PPUSH
45317: PPUSH
// result := 0 ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_INT 0
45325: ST_TO_ADDR
// if not array or not value in array then
45326: LD_VAR 0 1
45330: NOT
45331: PUSH
45332: LD_VAR 0 2
45336: PUSH
45337: LD_VAR 0 1
45341: IN
45342: NOT
45343: OR
45344: IFFALSE 45348
// exit ;
45346: GO 45402
// for i = 1 to array do
45348: LD_ADDR_VAR 0 4
45352: PUSH
45353: DOUBLE
45354: LD_INT 1
45356: DEC
45357: ST_TO_ADDR
45358: LD_VAR 0 1
45362: PUSH
45363: FOR_TO
45364: IFFALSE 45400
// if value = array [ i ] then
45366: LD_VAR 0 2
45370: PUSH
45371: LD_VAR 0 1
45375: PUSH
45376: LD_VAR 0 4
45380: ARRAY
45381: EQUAL
45382: IFFALSE 45398
// begin result := i ;
45384: LD_ADDR_VAR 0 3
45388: PUSH
45389: LD_VAR 0 4
45393: ST_TO_ADDR
// exit ;
45394: POP
45395: POP
45396: GO 45402
// end ;
45398: GO 45363
45400: POP
45401: POP
// end ;
45402: LD_VAR 0 3
45406: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45407: LD_INT 0
45409: PPUSH
// vc_chassis := chassis ;
45410: LD_ADDR_OWVAR 37
45414: PUSH
45415: LD_VAR 0 1
45419: ST_TO_ADDR
// vc_engine := engine ;
45420: LD_ADDR_OWVAR 39
45424: PUSH
45425: LD_VAR 0 2
45429: ST_TO_ADDR
// vc_control := control ;
45430: LD_ADDR_OWVAR 38
45434: PUSH
45435: LD_VAR 0 3
45439: ST_TO_ADDR
// vc_weapon := weapon ;
45440: LD_ADDR_OWVAR 40
45444: PUSH
45445: LD_VAR 0 4
45449: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45450: LD_ADDR_OWVAR 41
45454: PUSH
45455: LD_VAR 0 5
45459: ST_TO_ADDR
// end ;
45460: LD_VAR 0 6
45464: RET
// export function WantPlant ( unit ) ; var task ; begin
45465: LD_INT 0
45467: PPUSH
45468: PPUSH
// result := false ;
45469: LD_ADDR_VAR 0 2
45473: PUSH
45474: LD_INT 0
45476: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_VAR 0 1
45486: PPUSH
45487: CALL_OW 437
45491: ST_TO_ADDR
// if task then
45492: LD_VAR 0 3
45496: IFFALSE 45524
// if task [ 1 ] [ 1 ] = p then
45498: LD_VAR 0 3
45502: PUSH
45503: LD_INT 1
45505: ARRAY
45506: PUSH
45507: LD_INT 1
45509: ARRAY
45510: PUSH
45511: LD_STRING p
45513: EQUAL
45514: IFFALSE 45524
// result := true ;
45516: LD_ADDR_VAR 0 2
45520: PUSH
45521: LD_INT 1
45523: ST_TO_ADDR
// end ;
45524: LD_VAR 0 2
45528: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45529: LD_INT 0
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
// if pos < 1 then
45535: LD_VAR 0 2
45539: PUSH
45540: LD_INT 1
45542: LESS
45543: IFFALSE 45547
// exit ;
45545: GO 45850
// if pos = 1 then
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 1
45554: EQUAL
45555: IFFALSE 45588
// result := Replace ( arr , pos [ 1 ] , value ) else
45557: LD_ADDR_VAR 0 4
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: LD_VAR 0 2
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: PPUSH
45576: LD_VAR 0 3
45580: PPUSH
45581: CALL_OW 1
45585: ST_TO_ADDR
45586: GO 45850
// begin tmp := arr ;
45588: LD_ADDR_VAR 0 6
45592: PUSH
45593: LD_VAR 0 1
45597: ST_TO_ADDR
// s_arr := [ tmp ] ;
45598: LD_ADDR_VAR 0 7
45602: PUSH
45603: LD_VAR 0 6
45607: PUSH
45608: EMPTY
45609: LIST
45610: ST_TO_ADDR
// for i = 1 to pos - 1 do
45611: LD_ADDR_VAR 0 5
45615: PUSH
45616: DOUBLE
45617: LD_INT 1
45619: DEC
45620: ST_TO_ADDR
45621: LD_VAR 0 2
45625: PUSH
45626: LD_INT 1
45628: MINUS
45629: PUSH
45630: FOR_TO
45631: IFFALSE 45676
// begin tmp := tmp [ pos [ i ] ] ;
45633: LD_ADDR_VAR 0 6
45637: PUSH
45638: LD_VAR 0 6
45642: PUSH
45643: LD_VAR 0 2
45647: PUSH
45648: LD_VAR 0 5
45652: ARRAY
45653: ARRAY
45654: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45655: LD_ADDR_VAR 0 7
45659: PUSH
45660: LD_VAR 0 7
45664: PUSH
45665: LD_VAR 0 6
45669: PUSH
45670: EMPTY
45671: LIST
45672: ADD
45673: ST_TO_ADDR
// end ;
45674: GO 45630
45676: POP
45677: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45678: LD_ADDR_VAR 0 6
45682: PUSH
45683: LD_VAR 0 6
45687: PPUSH
45688: LD_VAR 0 2
45692: PUSH
45693: LD_VAR 0 2
45697: ARRAY
45698: PPUSH
45699: LD_VAR 0 3
45703: PPUSH
45704: CALL_OW 1
45708: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45709: LD_ADDR_VAR 0 7
45713: PUSH
45714: LD_VAR 0 7
45718: PPUSH
45719: LD_VAR 0 7
45723: PPUSH
45724: LD_VAR 0 6
45728: PPUSH
45729: CALL_OW 1
45733: ST_TO_ADDR
// for i = s_arr downto 2 do
45734: LD_ADDR_VAR 0 5
45738: PUSH
45739: DOUBLE
45740: LD_VAR 0 7
45744: INC
45745: ST_TO_ADDR
45746: LD_INT 2
45748: PUSH
45749: FOR_DOWNTO
45750: IFFALSE 45834
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45752: LD_ADDR_VAR 0 6
45756: PUSH
45757: LD_VAR 0 7
45761: PUSH
45762: LD_VAR 0 5
45766: PUSH
45767: LD_INT 1
45769: MINUS
45770: ARRAY
45771: PPUSH
45772: LD_VAR 0 2
45776: PUSH
45777: LD_VAR 0 5
45781: PUSH
45782: LD_INT 1
45784: MINUS
45785: ARRAY
45786: PPUSH
45787: LD_VAR 0 7
45791: PUSH
45792: LD_VAR 0 5
45796: ARRAY
45797: PPUSH
45798: CALL_OW 1
45802: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45803: LD_ADDR_VAR 0 7
45807: PUSH
45808: LD_VAR 0 7
45812: PPUSH
45813: LD_VAR 0 5
45817: PUSH
45818: LD_INT 1
45820: MINUS
45821: PPUSH
45822: LD_VAR 0 6
45826: PPUSH
45827: CALL_OW 1
45831: ST_TO_ADDR
// end ;
45832: GO 45749
45834: POP
45835: POP
// result := s_arr [ 1 ] ;
45836: LD_ADDR_VAR 0 4
45840: PUSH
45841: LD_VAR 0 7
45845: PUSH
45846: LD_INT 1
45848: ARRAY
45849: ST_TO_ADDR
// end ; end ;
45850: LD_VAR 0 4
45854: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45855: LD_INT 0
45857: PPUSH
45858: PPUSH
// if not list then
45859: LD_VAR 0 1
45863: NOT
45864: IFFALSE 45868
// exit ;
45866: GO 45959
// i := list [ pos1 ] ;
45868: LD_ADDR_VAR 0 5
45872: PUSH
45873: LD_VAR 0 1
45877: PUSH
45878: LD_VAR 0 2
45882: ARRAY
45883: ST_TO_ADDR
// if not i then
45884: LD_VAR 0 5
45888: NOT
45889: IFFALSE 45893
// exit ;
45891: GO 45959
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45893: LD_ADDR_VAR 0 1
45897: PUSH
45898: LD_VAR 0 1
45902: PPUSH
45903: LD_VAR 0 2
45907: PPUSH
45908: LD_VAR 0 1
45912: PUSH
45913: LD_VAR 0 3
45917: ARRAY
45918: PPUSH
45919: CALL_OW 1
45923: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45924: LD_ADDR_VAR 0 1
45928: PUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: LD_VAR 0 3
45938: PPUSH
45939: LD_VAR 0 5
45943: PPUSH
45944: CALL_OW 1
45948: ST_TO_ADDR
// result := list ;
45949: LD_ADDR_VAR 0 4
45953: PUSH
45954: LD_VAR 0 1
45958: ST_TO_ADDR
// end ;
45959: LD_VAR 0 4
45963: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45964: LD_INT 0
45966: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45967: LD_ADDR_VAR 0 5
45971: PUSH
45972: LD_VAR 0 1
45976: PPUSH
45977: CALL_OW 250
45981: PPUSH
45982: LD_VAR 0 1
45986: PPUSH
45987: CALL_OW 251
45991: PPUSH
45992: LD_VAR 0 2
45996: PPUSH
45997: LD_VAR 0 3
46001: PPUSH
46002: LD_VAR 0 4
46006: PPUSH
46007: CALL 46385 0 5
46011: ST_TO_ADDR
// end ;
46012: LD_VAR 0 5
46016: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46017: LD_INT 0
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
// if not list or not unit then
46023: LD_VAR 0 2
46027: NOT
46028: PUSH
46029: LD_VAR 0 1
46033: NOT
46034: OR
46035: IFFALSE 46039
// exit ;
46037: GO 46380
// result := [ ] ;
46039: LD_ADDR_VAR 0 5
46043: PUSH
46044: EMPTY
46045: ST_TO_ADDR
// for i in list do
46046: LD_ADDR_VAR 0 6
46050: PUSH
46051: LD_VAR 0 2
46055: PUSH
46056: FOR_IN
46057: IFFALSE 46275
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46059: LD_ADDR_VAR 0 8
46063: PUSH
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_VAR 0 6
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PPUSH
46078: LD_VAR 0 6
46082: PUSH
46083: LD_INT 2
46085: ARRAY
46086: PPUSH
46087: CALL_OW 297
46091: ST_TO_ADDR
// if not Count ( result ) then
46092: LD_VAR 0 5
46096: PPUSH
46097: CALL 42669 0 1
46101: NOT
46102: IFFALSE 46135
// begin result := Join ( result , [ i , tmp ] ) ;
46104: LD_ADDR_VAR 0 5
46108: PUSH
46109: LD_VAR 0 5
46113: PPUSH
46114: LD_VAR 0 6
46118: PUSH
46119: LD_VAR 0 8
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PPUSH
46128: CALL 78258 0 2
46132: ST_TO_ADDR
// continue ;
46133: GO 46056
// end ; if result [ result ] [ 2 ] <= tmp then
46135: LD_VAR 0 5
46139: PUSH
46140: LD_VAR 0 5
46144: ARRAY
46145: PUSH
46146: LD_INT 2
46148: ARRAY
46149: PUSH
46150: LD_VAR 0 8
46154: LESSEQUAL
46155: IFFALSE 46188
// result := Join ( result , [ i , tmp ] ) else
46157: LD_ADDR_VAR 0 5
46161: PUSH
46162: LD_VAR 0 5
46166: PPUSH
46167: LD_VAR 0 6
46171: PUSH
46172: LD_VAR 0 8
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PPUSH
46181: CALL 78258 0 2
46185: ST_TO_ADDR
46186: GO 46273
// begin for j := 1 to Count ( result ) do
46188: LD_ADDR_VAR 0 7
46192: PUSH
46193: DOUBLE
46194: LD_INT 1
46196: DEC
46197: ST_TO_ADDR
46198: LD_VAR 0 5
46202: PPUSH
46203: CALL 42669 0 1
46207: PUSH
46208: FOR_TO
46209: IFFALSE 46271
// begin if tmp < result [ j ] [ 2 ] then
46211: LD_VAR 0 8
46215: PUSH
46216: LD_VAR 0 5
46220: PUSH
46221: LD_VAR 0 7
46225: ARRAY
46226: PUSH
46227: LD_INT 2
46229: ARRAY
46230: LESS
46231: IFFALSE 46269
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46233: LD_ADDR_VAR 0 5
46237: PUSH
46238: LD_VAR 0 5
46242: PPUSH
46243: LD_VAR 0 7
46247: PPUSH
46248: LD_VAR 0 6
46252: PUSH
46253: LD_VAR 0 8
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PPUSH
46262: CALL_OW 2
46266: ST_TO_ADDR
// break ;
46267: GO 46271
// end ; end ;
46269: GO 46208
46271: POP
46272: POP
// end ; end ;
46273: GO 46056
46275: POP
46276: POP
// if result and not asc then
46277: LD_VAR 0 5
46281: PUSH
46282: LD_VAR 0 3
46286: NOT
46287: AND
46288: IFFALSE 46305
// result := ReverseArray ( result ) ;
46290: LD_ADDR_VAR 0 5
46294: PUSH
46295: LD_VAR 0 5
46299: PPUSH
46300: CALL 73545 0 1
46304: ST_TO_ADDR
// tmp := [ ] ;
46305: LD_ADDR_VAR 0 8
46309: PUSH
46310: EMPTY
46311: ST_TO_ADDR
// if mode then
46312: LD_VAR 0 4
46316: IFFALSE 46380
// begin for i := 1 to result do
46318: LD_ADDR_VAR 0 6
46322: PUSH
46323: DOUBLE
46324: LD_INT 1
46326: DEC
46327: ST_TO_ADDR
46328: LD_VAR 0 5
46332: PUSH
46333: FOR_TO
46334: IFFALSE 46368
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46336: LD_ADDR_VAR 0 8
46340: PUSH
46341: LD_VAR 0 8
46345: PPUSH
46346: LD_VAR 0 5
46350: PUSH
46351: LD_VAR 0 6
46355: ARRAY
46356: PUSH
46357: LD_INT 1
46359: ARRAY
46360: PPUSH
46361: CALL 78258 0 2
46365: ST_TO_ADDR
46366: GO 46333
46368: POP
46369: POP
// result := tmp ;
46370: LD_ADDR_VAR 0 5
46374: PUSH
46375: LD_VAR 0 8
46379: ST_TO_ADDR
// end ; end ;
46380: LD_VAR 0 5
46384: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46385: LD_INT 0
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
// if not list then
46391: LD_VAR 0 3
46395: NOT
46396: IFFALSE 46400
// exit ;
46398: GO 46788
// result := [ ] ;
46400: LD_ADDR_VAR 0 6
46404: PUSH
46405: EMPTY
46406: ST_TO_ADDR
// for i in list do
46407: LD_ADDR_VAR 0 7
46411: PUSH
46412: LD_VAR 0 3
46416: PUSH
46417: FOR_IN
46418: IFFALSE 46620
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46420: LD_ADDR_VAR 0 9
46424: PUSH
46425: LD_VAR 0 7
46429: PPUSH
46430: LD_VAR 0 1
46434: PPUSH
46435: LD_VAR 0 2
46439: PPUSH
46440: CALL_OW 297
46444: ST_TO_ADDR
// if not result then
46445: LD_VAR 0 6
46449: NOT
46450: IFFALSE 46476
// result := [ [ i , tmp ] ] else
46452: LD_ADDR_VAR 0 6
46456: PUSH
46457: LD_VAR 0 7
46461: PUSH
46462: LD_VAR 0 9
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: ST_TO_ADDR
46474: GO 46618
// begin if result [ result ] [ 2 ] < tmp then
46476: LD_VAR 0 6
46480: PUSH
46481: LD_VAR 0 6
46485: ARRAY
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PUSH
46491: LD_VAR 0 9
46495: LESS
46496: IFFALSE 46538
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46498: LD_ADDR_VAR 0 6
46502: PUSH
46503: LD_VAR 0 6
46507: PPUSH
46508: LD_VAR 0 6
46512: PUSH
46513: LD_INT 1
46515: PLUS
46516: PPUSH
46517: LD_VAR 0 7
46521: PUSH
46522: LD_VAR 0 9
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PPUSH
46531: CALL_OW 2
46535: ST_TO_ADDR
46536: GO 46618
// for j = 1 to result do
46538: LD_ADDR_VAR 0 8
46542: PUSH
46543: DOUBLE
46544: LD_INT 1
46546: DEC
46547: ST_TO_ADDR
46548: LD_VAR 0 6
46552: PUSH
46553: FOR_TO
46554: IFFALSE 46616
// begin if tmp < result [ j ] [ 2 ] then
46556: LD_VAR 0 9
46560: PUSH
46561: LD_VAR 0 6
46565: PUSH
46566: LD_VAR 0 8
46570: ARRAY
46571: PUSH
46572: LD_INT 2
46574: ARRAY
46575: LESS
46576: IFFALSE 46614
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46578: LD_ADDR_VAR 0 6
46582: PUSH
46583: LD_VAR 0 6
46587: PPUSH
46588: LD_VAR 0 8
46592: PPUSH
46593: LD_VAR 0 7
46597: PUSH
46598: LD_VAR 0 9
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PPUSH
46607: CALL_OW 2
46611: ST_TO_ADDR
// break ;
46612: GO 46616
// end ; end ;
46614: GO 46553
46616: POP
46617: POP
// end ; end ;
46618: GO 46417
46620: POP
46621: POP
// if result and not asc then
46622: LD_VAR 0 6
46626: PUSH
46627: LD_VAR 0 4
46631: NOT
46632: AND
46633: IFFALSE 46708
// begin tmp := result ;
46635: LD_ADDR_VAR 0 9
46639: PUSH
46640: LD_VAR 0 6
46644: ST_TO_ADDR
// for i = tmp downto 1 do
46645: LD_ADDR_VAR 0 7
46649: PUSH
46650: DOUBLE
46651: LD_VAR 0 9
46655: INC
46656: ST_TO_ADDR
46657: LD_INT 1
46659: PUSH
46660: FOR_DOWNTO
46661: IFFALSE 46706
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46663: LD_ADDR_VAR 0 6
46667: PUSH
46668: LD_VAR 0 6
46672: PPUSH
46673: LD_VAR 0 9
46677: PUSH
46678: LD_VAR 0 7
46682: MINUS
46683: PUSH
46684: LD_INT 1
46686: PLUS
46687: PPUSH
46688: LD_VAR 0 9
46692: PUSH
46693: LD_VAR 0 7
46697: ARRAY
46698: PPUSH
46699: CALL_OW 1
46703: ST_TO_ADDR
46704: GO 46660
46706: POP
46707: POP
// end ; tmp := [ ] ;
46708: LD_ADDR_VAR 0 9
46712: PUSH
46713: EMPTY
46714: ST_TO_ADDR
// if mode then
46715: LD_VAR 0 5
46719: IFFALSE 46788
// begin for i = 1 to result do
46721: LD_ADDR_VAR 0 7
46725: PUSH
46726: DOUBLE
46727: LD_INT 1
46729: DEC
46730: ST_TO_ADDR
46731: LD_VAR 0 6
46735: PUSH
46736: FOR_TO
46737: IFFALSE 46776
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46739: LD_ADDR_VAR 0 9
46743: PUSH
46744: LD_VAR 0 9
46748: PPUSH
46749: LD_VAR 0 7
46753: PPUSH
46754: LD_VAR 0 6
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: CALL_OW 1
46773: ST_TO_ADDR
46774: GO 46736
46776: POP
46777: POP
// result := tmp ;
46778: LD_ADDR_VAR 0 6
46782: PUSH
46783: LD_VAR 0 9
46787: ST_TO_ADDR
// end ; end ;
46788: LD_VAR 0 6
46792: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46793: LD_INT 0
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46801: LD_ADDR_VAR 0 5
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// if not x or not y then
46823: LD_VAR 0 2
46827: NOT
46828: PUSH
46829: LD_VAR 0 3
46833: NOT
46834: OR
46835: IFFALSE 46839
// exit ;
46837: GO 48489
// if not range then
46839: LD_VAR 0 4
46843: NOT
46844: IFFALSE 46854
// range := 10 ;
46846: LD_ADDR_VAR 0 4
46850: PUSH
46851: LD_INT 10
46853: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46854: LD_ADDR_VAR 0 8
46858: PUSH
46859: LD_INT 81
46861: PUSH
46862: LD_VAR 0 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 92
46873: PUSH
46874: LD_VAR 0 2
46878: PUSH
46879: LD_VAR 0 3
46883: PUSH
46884: LD_VAR 0 4
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: LD_INT 21
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: PPUSH
46917: CALL_OW 69
46921: ST_TO_ADDR
// if not tmp then
46922: LD_VAR 0 8
46926: NOT
46927: IFFALSE 46931
// exit ;
46929: GO 48489
// for i in tmp do
46931: LD_ADDR_VAR 0 6
46935: PUSH
46936: LD_VAR 0 8
46940: PUSH
46941: FOR_IN
46942: IFFALSE 48464
// begin points := [ 0 , 0 , 0 ] ;
46944: LD_ADDR_VAR 0 9
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// bpoints := 1 ;
46963: LD_ADDR_VAR 0 10
46967: PUSH
46968: LD_INT 1
46970: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46971: LD_VAR 0 6
46975: PPUSH
46976: CALL_OW 247
46980: PUSH
46981: LD_INT 1
46983: DOUBLE
46984: EQUAL
46985: IFTRUE 46989
46987: GO 47567
46989: POP
// begin if GetClass ( i ) = 1 then
46990: LD_VAR 0 6
46994: PPUSH
46995: CALL_OW 257
46999: PUSH
47000: LD_INT 1
47002: EQUAL
47003: IFFALSE 47024
// points := [ 10 , 5 , 3 ] ;
47005: LD_ADDR_VAR 0 9
47009: PUSH
47010: LD_INT 10
47012: PUSH
47013: LD_INT 5
47015: PUSH
47016: LD_INT 3
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47024: LD_VAR 0 6
47028: PPUSH
47029: CALL_OW 257
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: IN
47048: IFFALSE 47069
// points := [ 3 , 2 , 1 ] ;
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47069: LD_VAR 0 6
47073: PPUSH
47074: CALL_OW 257
47078: PUSH
47079: LD_INT 5
47081: EQUAL
47082: IFFALSE 47103
// points := [ 130 , 5 , 2 ] ;
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: LD_INT 130
47091: PUSH
47092: LD_INT 5
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47103: LD_VAR 0 6
47107: PPUSH
47108: CALL_OW 257
47112: PUSH
47113: LD_INT 8
47115: EQUAL
47116: IFFALSE 47137
// points := [ 35 , 35 , 30 ] ;
47118: LD_ADDR_VAR 0 9
47122: PUSH
47123: LD_INT 35
47125: PUSH
47126: LD_INT 35
47128: PUSH
47129: LD_INT 30
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47137: LD_VAR 0 6
47141: PPUSH
47142: CALL_OW 257
47146: PUSH
47147: LD_INT 9
47149: EQUAL
47150: IFFALSE 47171
// points := [ 20 , 55 , 40 ] ;
47152: LD_ADDR_VAR 0 9
47156: PUSH
47157: LD_INT 20
47159: PUSH
47160: LD_INT 55
47162: PUSH
47163: LD_INT 40
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47171: LD_VAR 0 6
47175: PPUSH
47176: CALL_OW 257
47180: PUSH
47181: LD_INT 12
47183: PUSH
47184: LD_INT 16
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: IN
47191: IFFALSE 47212
// points := [ 5 , 3 , 2 ] ;
47193: LD_ADDR_VAR 0 9
47197: PUSH
47198: LD_INT 5
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47212: LD_VAR 0 6
47216: PPUSH
47217: CALL_OW 257
47221: PUSH
47222: LD_INT 17
47224: EQUAL
47225: IFFALSE 47246
// points := [ 100 , 50 , 75 ] ;
47227: LD_ADDR_VAR 0 9
47231: PUSH
47232: LD_INT 100
47234: PUSH
47235: LD_INT 50
47237: PUSH
47238: LD_INT 75
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47246: LD_VAR 0 6
47250: PPUSH
47251: CALL_OW 257
47255: PUSH
47256: LD_INT 15
47258: EQUAL
47259: IFFALSE 47280
// points := [ 10 , 5 , 3 ] ;
47261: LD_ADDR_VAR 0 9
47265: PUSH
47266: LD_INT 10
47268: PUSH
47269: LD_INT 5
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47280: LD_VAR 0 6
47284: PPUSH
47285: CALL_OW 257
47289: PUSH
47290: LD_INT 14
47292: EQUAL
47293: IFFALSE 47314
// points := [ 10 , 0 , 0 ] ;
47295: LD_ADDR_VAR 0 9
47299: PUSH
47300: LD_INT 10
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47314: LD_VAR 0 6
47318: PPUSH
47319: CALL_OW 257
47323: PUSH
47324: LD_INT 11
47326: EQUAL
47327: IFFALSE 47348
// points := [ 30 , 10 , 5 ] ;
47329: LD_ADDR_VAR 0 9
47333: PUSH
47334: LD_INT 30
47336: PUSH
47337: LD_INT 10
47339: PUSH
47340: LD_INT 5
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47348: LD_VAR 0 1
47352: PPUSH
47353: LD_INT 5
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: IFFALSE 47381
// bpoints := bpoints * 1.8 ;
47366: LD_ADDR_VAR 0 10
47370: PUSH
47371: LD_VAR 0 10
47375: PUSH
47376: LD_REAL  1.80000000000000E+0000
47379: MUL
47380: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47381: LD_VAR 0 6
47385: PPUSH
47386: CALL_OW 257
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 4
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: IN
47409: PUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: LD_INT 51
47417: PPUSH
47418: CALL_OW 321
47422: PUSH
47423: LD_INT 2
47425: EQUAL
47426: AND
47427: IFFALSE 47444
// bpoints := bpoints * 1.2 ;
47429: LD_ADDR_VAR 0 10
47433: PUSH
47434: LD_VAR 0 10
47438: PUSH
47439: LD_REAL  1.20000000000000E+0000
47442: MUL
47443: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47444: LD_VAR 0 6
47448: PPUSH
47449: CALL_OW 257
47453: PUSH
47454: LD_INT 5
47456: PUSH
47457: LD_INT 7
47459: PUSH
47460: LD_INT 9
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: IN
47468: PUSH
47469: LD_VAR 0 1
47473: PPUSH
47474: LD_INT 52
47476: PPUSH
47477: CALL_OW 321
47481: PUSH
47482: LD_INT 2
47484: EQUAL
47485: AND
47486: IFFALSE 47503
// bpoints := bpoints * 1.5 ;
47488: LD_ADDR_VAR 0 10
47492: PUSH
47493: LD_VAR 0 10
47497: PUSH
47498: LD_REAL  1.50000000000000E+0000
47501: MUL
47502: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47503: LD_VAR 0 1
47507: PPUSH
47508: LD_INT 66
47510: PPUSH
47511: CALL_OW 321
47515: PUSH
47516: LD_INT 2
47518: EQUAL
47519: IFFALSE 47536
// bpoints := bpoints * 1.1 ;
47521: LD_ADDR_VAR 0 10
47525: PUSH
47526: LD_VAR 0 10
47530: PUSH
47531: LD_REAL  1.10000000000000E+0000
47534: MUL
47535: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47536: LD_ADDR_VAR 0 10
47540: PUSH
47541: LD_VAR 0 10
47545: PUSH
47546: LD_VAR 0 6
47550: PPUSH
47551: LD_INT 1
47553: PPUSH
47554: CALL_OW 259
47558: PUSH
47559: LD_REAL  1.15000000000000E+0000
47562: MUL
47563: MUL
47564: ST_TO_ADDR
// end ; unit_vehicle :
47565: GO 48393
47567: LD_INT 2
47569: DOUBLE
47570: EQUAL
47571: IFTRUE 47575
47573: GO 48381
47575: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47576: LD_VAR 0 6
47580: PPUSH
47581: CALL_OW 264
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 42
47591: PUSH
47592: LD_INT 24
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: IN
47600: IFFALSE 47621
// points := [ 25 , 5 , 3 ] ;
47602: LD_ADDR_VAR 0 9
47606: PUSH
47607: LD_INT 25
47609: PUSH
47610: LD_INT 5
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47621: LD_VAR 0 6
47625: PPUSH
47626: CALL_OW 264
47630: PUSH
47631: LD_INT 4
47633: PUSH
47634: LD_INT 43
47636: PUSH
47637: LD_INT 25
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: IN
47645: IFFALSE 47666
// points := [ 40 , 15 , 5 ] ;
47647: LD_ADDR_VAR 0 9
47651: PUSH
47652: LD_INT 40
47654: PUSH
47655: LD_INT 15
47657: PUSH
47658: LD_INT 5
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47666: LD_VAR 0 6
47670: PPUSH
47671: CALL_OW 264
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: LD_INT 23
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: IN
47686: IFFALSE 47707
// points := [ 7 , 25 , 8 ] ;
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_INT 7
47695: PUSH
47696: LD_INT 25
47698: PUSH
47699: LD_INT 8
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47707: LD_VAR 0 6
47711: PPUSH
47712: CALL_OW 264
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: LD_INT 27
47722: PUSH
47723: LD_INT 44
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: IN
47731: IFFALSE 47752
// points := [ 14 , 50 , 16 ] ;
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: LD_INT 14
47740: PUSH
47741: LD_INT 50
47743: PUSH
47744: LD_INT 16
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47752: LD_VAR 0 6
47756: PPUSH
47757: CALL_OW 264
47761: PUSH
47762: LD_INT 6
47764: PUSH
47765: LD_INT 46
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: IN
47772: IFFALSE 47793
// points := [ 32 , 120 , 70 ] ;
47774: LD_ADDR_VAR 0 9
47778: PUSH
47779: LD_INT 32
47781: PUSH
47782: LD_INT 120
47784: PUSH
47785: LD_INT 70
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47793: LD_VAR 0 6
47797: PPUSH
47798: CALL_OW 264
47802: PUSH
47803: LD_INT 7
47805: PUSH
47806: LD_INT 28
47808: PUSH
47809: LD_INT 45
47811: PUSH
47812: LD_INT 92
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: IN
47821: IFFALSE 47842
// points := [ 35 , 20 , 45 ] ;
47823: LD_ADDR_VAR 0 9
47827: PUSH
47828: LD_INT 35
47830: PUSH
47831: LD_INT 20
47833: PUSH
47834: LD_INT 45
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47842: LD_VAR 0 6
47846: PPUSH
47847: CALL_OW 264
47851: PUSH
47852: LD_INT 47
47854: PUSH
47855: EMPTY
47856: LIST
47857: IN
47858: IFFALSE 47879
// points := [ 67 , 45 , 75 ] ;
47860: LD_ADDR_VAR 0 9
47864: PUSH
47865: LD_INT 67
47867: PUSH
47868: LD_INT 45
47870: PUSH
47871: LD_INT 75
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47879: LD_VAR 0 6
47883: PPUSH
47884: CALL_OW 264
47888: PUSH
47889: LD_INT 26
47891: PUSH
47892: EMPTY
47893: LIST
47894: IN
47895: IFFALSE 47916
// points := [ 120 , 30 , 80 ] ;
47897: LD_ADDR_VAR 0 9
47901: PUSH
47902: LD_INT 120
47904: PUSH
47905: LD_INT 30
47907: PUSH
47908: LD_INT 80
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47916: LD_VAR 0 6
47920: PPUSH
47921: CALL_OW 264
47925: PUSH
47926: LD_INT 22
47928: PUSH
47929: EMPTY
47930: LIST
47931: IN
47932: IFFALSE 47953
// points := [ 40 , 1 , 1 ] ;
47934: LD_ADDR_VAR 0 9
47938: PUSH
47939: LD_INT 40
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47953: LD_VAR 0 6
47957: PPUSH
47958: CALL_OW 264
47962: PUSH
47963: LD_INT 29
47965: PUSH
47966: EMPTY
47967: LIST
47968: IN
47969: IFFALSE 47990
// points := [ 70 , 200 , 400 ] ;
47971: LD_ADDR_VAR 0 9
47975: PUSH
47976: LD_INT 70
47978: PUSH
47979: LD_INT 200
47981: PUSH
47982: LD_INT 400
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47990: LD_VAR 0 6
47994: PPUSH
47995: CALL_OW 264
47999: PUSH
48000: LD_INT 14
48002: PUSH
48003: LD_INT 53
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: IN
48010: IFFALSE 48031
// points := [ 40 , 10 , 20 ] ;
48012: LD_ADDR_VAR 0 9
48016: PUSH
48017: LD_INT 40
48019: PUSH
48020: LD_INT 10
48022: PUSH
48023: LD_INT 20
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48031: LD_VAR 0 6
48035: PPUSH
48036: CALL_OW 264
48040: PUSH
48041: LD_INT 9
48043: PUSH
48044: EMPTY
48045: LIST
48046: IN
48047: IFFALSE 48068
// points := [ 5 , 70 , 20 ] ;
48049: LD_ADDR_VAR 0 9
48053: PUSH
48054: LD_INT 5
48056: PUSH
48057: LD_INT 70
48059: PUSH
48060: LD_INT 20
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48068: LD_VAR 0 6
48072: PPUSH
48073: CALL_OW 264
48077: PUSH
48078: LD_INT 10
48080: PUSH
48081: EMPTY
48082: LIST
48083: IN
48084: IFFALSE 48105
// points := [ 35 , 110 , 70 ] ;
48086: LD_ADDR_VAR 0 9
48090: PUSH
48091: LD_INT 35
48093: PUSH
48094: LD_INT 110
48096: PUSH
48097: LD_INT 70
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48105: LD_VAR 0 6
48109: PPUSH
48110: CALL_OW 265
48114: PUSH
48115: LD_INT 25
48117: EQUAL
48118: IFFALSE 48139
// points := [ 80 , 65 , 100 ] ;
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_INT 80
48127: PUSH
48128: LD_INT 65
48130: PUSH
48131: LD_INT 100
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48139: LD_VAR 0 6
48143: PPUSH
48144: CALL_OW 263
48148: PUSH
48149: LD_INT 1
48151: EQUAL
48152: IFFALSE 48187
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48154: LD_ADDR_VAR 0 10
48158: PUSH
48159: LD_VAR 0 10
48163: PUSH
48164: LD_VAR 0 6
48168: PPUSH
48169: CALL_OW 311
48173: PPUSH
48174: LD_INT 3
48176: PPUSH
48177: CALL_OW 259
48181: PUSH
48182: LD_INT 4
48184: MUL
48185: MUL
48186: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48187: LD_VAR 0 6
48191: PPUSH
48192: CALL_OW 263
48196: PUSH
48197: LD_INT 2
48199: EQUAL
48200: IFFALSE 48251
// begin j := IsControledBy ( i ) ;
48202: LD_ADDR_VAR 0 7
48206: PUSH
48207: LD_VAR 0 6
48211: PPUSH
48212: CALL_OW 312
48216: ST_TO_ADDR
// if j then
48217: LD_VAR 0 7
48221: IFFALSE 48251
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48223: LD_ADDR_VAR 0 10
48227: PUSH
48228: LD_VAR 0 10
48232: PUSH
48233: LD_VAR 0 7
48237: PPUSH
48238: LD_INT 3
48240: PPUSH
48241: CALL_OW 259
48245: PUSH
48246: LD_INT 3
48248: MUL
48249: MUL
48250: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48251: LD_VAR 0 6
48255: PPUSH
48256: CALL_OW 264
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: LD_INT 6
48266: PUSH
48267: LD_INT 46
48269: PUSH
48270: LD_INT 44
48272: PUSH
48273: LD_INT 47
48275: PUSH
48276: LD_INT 45
48278: PUSH
48279: LD_INT 28
48281: PUSH
48282: LD_INT 7
48284: PUSH
48285: LD_INT 27
48287: PUSH
48288: LD_INT 29
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: IN
48303: PUSH
48304: LD_VAR 0 1
48308: PPUSH
48309: LD_INT 52
48311: PPUSH
48312: CALL_OW 321
48316: PUSH
48317: LD_INT 2
48319: EQUAL
48320: AND
48321: IFFALSE 48338
// bpoints := bpoints * 1.2 ;
48323: LD_ADDR_VAR 0 10
48327: PUSH
48328: LD_VAR 0 10
48332: PUSH
48333: LD_REAL  1.20000000000000E+0000
48336: MUL
48337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48338: LD_VAR 0 6
48342: PPUSH
48343: CALL_OW 264
48347: PUSH
48348: LD_INT 6
48350: PUSH
48351: LD_INT 46
48353: PUSH
48354: LD_INT 47
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: IN
48362: IFFALSE 48379
// bpoints := bpoints * 1.2 ;
48364: LD_ADDR_VAR 0 10
48368: PUSH
48369: LD_VAR 0 10
48373: PUSH
48374: LD_REAL  1.20000000000000E+0000
48377: MUL
48378: ST_TO_ADDR
// end ; unit_building :
48379: GO 48393
48381: LD_INT 3
48383: DOUBLE
48384: EQUAL
48385: IFTRUE 48389
48387: GO 48392
48389: POP
// ; end ;
48390: GO 48393
48392: POP
// for j = 1 to 3 do
48393: LD_ADDR_VAR 0 7
48397: PUSH
48398: DOUBLE
48399: LD_INT 1
48401: DEC
48402: ST_TO_ADDR
48403: LD_INT 3
48405: PUSH
48406: FOR_TO
48407: IFFALSE 48460
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48409: LD_ADDR_VAR 0 5
48413: PUSH
48414: LD_VAR 0 5
48418: PPUSH
48419: LD_VAR 0 7
48423: PPUSH
48424: LD_VAR 0 5
48428: PUSH
48429: LD_VAR 0 7
48433: ARRAY
48434: PUSH
48435: LD_VAR 0 9
48439: PUSH
48440: LD_VAR 0 7
48444: ARRAY
48445: PUSH
48446: LD_VAR 0 10
48450: MUL
48451: PLUS
48452: PPUSH
48453: CALL_OW 1
48457: ST_TO_ADDR
48458: GO 48406
48460: POP
48461: POP
// end ;
48462: GO 46941
48464: POP
48465: POP
// result := Replace ( result , 4 , tmp ) ;
48466: LD_ADDR_VAR 0 5
48470: PUSH
48471: LD_VAR 0 5
48475: PPUSH
48476: LD_INT 4
48478: PPUSH
48479: LD_VAR 0 8
48483: PPUSH
48484: CALL_OW 1
48488: ST_TO_ADDR
// end ;
48489: LD_VAR 0 5
48493: RET
// export function DangerAtRange ( unit , range ) ; begin
48494: LD_INT 0
48496: PPUSH
// if not unit then
48497: LD_VAR 0 1
48501: NOT
48502: IFFALSE 48506
// exit ;
48504: GO 48551
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48506: LD_ADDR_VAR 0 3
48510: PUSH
48511: LD_VAR 0 1
48515: PPUSH
48516: CALL_OW 255
48520: PPUSH
48521: LD_VAR 0 1
48525: PPUSH
48526: CALL_OW 250
48530: PPUSH
48531: LD_VAR 0 1
48535: PPUSH
48536: CALL_OW 251
48540: PPUSH
48541: LD_VAR 0 2
48545: PPUSH
48546: CALL 46793 0 4
48550: ST_TO_ADDR
// end ;
48551: LD_VAR 0 3
48555: RET
// export function DangerInArea ( side , area ) ; begin
48556: LD_INT 0
48558: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48559: LD_ADDR_VAR 0 3
48563: PUSH
48564: LD_VAR 0 2
48568: PPUSH
48569: LD_INT 81
48571: PUSH
48572: LD_VAR 0 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PPUSH
48581: CALL_OW 70
48585: ST_TO_ADDR
// end ;
48586: LD_VAR 0 3
48590: RET
// export function IsExtension ( b ) ; begin
48591: LD_INT 0
48593: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48594: LD_ADDR_VAR 0 2
48598: PUSH
48599: LD_VAR 0 1
48603: PUSH
48604: LD_INT 23
48606: PUSH
48607: LD_INT 20
48609: PUSH
48610: LD_INT 22
48612: PUSH
48613: LD_INT 17
48615: PUSH
48616: LD_INT 24
48618: PUSH
48619: LD_INT 21
48621: PUSH
48622: LD_INT 19
48624: PUSH
48625: LD_INT 16
48627: PUSH
48628: LD_INT 25
48630: PUSH
48631: LD_INT 18
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: IN
48646: ST_TO_ADDR
// end ;
48647: LD_VAR 0 2
48651: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48652: LD_INT 0
48654: PPUSH
48655: PPUSH
48656: PPUSH
// result := [ ] ;
48657: LD_ADDR_VAR 0 4
48661: PUSH
48662: EMPTY
48663: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_VAR 0 2
48673: PPUSH
48674: LD_INT 21
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PPUSH
48684: CALL_OW 70
48688: ST_TO_ADDR
// if not tmp then
48689: LD_VAR 0 5
48693: NOT
48694: IFFALSE 48698
// exit ;
48696: GO 48762
// if checkLink then
48698: LD_VAR 0 3
48702: IFFALSE 48752
// begin for i in tmp do
48704: LD_ADDR_VAR 0 6
48708: PUSH
48709: LD_VAR 0 5
48713: PUSH
48714: FOR_IN
48715: IFFALSE 48750
// if GetBase ( i ) <> base then
48717: LD_VAR 0 6
48721: PPUSH
48722: CALL_OW 274
48726: PUSH
48727: LD_VAR 0 1
48731: NONEQUAL
48732: IFFALSE 48748
// ComLinkToBase ( base , i ) ;
48734: LD_VAR 0 1
48738: PPUSH
48739: LD_VAR 0 6
48743: PPUSH
48744: CALL_OW 169
48748: GO 48714
48750: POP
48751: POP
// end ; result := tmp ;
48752: LD_ADDR_VAR 0 4
48756: PUSH
48757: LD_VAR 0 5
48761: ST_TO_ADDR
// end ;
48762: LD_VAR 0 4
48766: RET
// export function ComComplete ( units , b ) ; var i ; begin
48767: LD_INT 0
48769: PPUSH
48770: PPUSH
// if not units then
48771: LD_VAR 0 1
48775: NOT
48776: IFFALSE 48780
// exit ;
48778: GO 48870
// for i in units do
48780: LD_ADDR_VAR 0 4
48784: PUSH
48785: LD_VAR 0 1
48789: PUSH
48790: FOR_IN
48791: IFFALSE 48868
// if BuildingStatus ( b ) = bs_build then
48793: LD_VAR 0 2
48797: PPUSH
48798: CALL_OW 461
48802: PUSH
48803: LD_INT 1
48805: EQUAL
48806: IFFALSE 48866
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48808: LD_VAR 0 4
48812: PPUSH
48813: LD_STRING h
48815: PUSH
48816: LD_VAR 0 2
48820: PPUSH
48821: CALL_OW 250
48825: PUSH
48826: LD_VAR 0 2
48830: PPUSH
48831: CALL_OW 251
48835: PUSH
48836: LD_VAR 0 2
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: PPUSH
48862: CALL_OW 446
48866: GO 48790
48868: POP
48869: POP
// end ;
48870: LD_VAR 0 3
48874: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48875: LD_INT 0
48877: PPUSH
48878: PPUSH
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48883: LD_VAR 0 1
48887: NOT
48888: PUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: CALL_OW 263
48898: PUSH
48899: LD_INT 2
48901: NONEQUAL
48902: OR
48903: IFFALSE 48907
// exit ;
48905: GO 49223
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48907: LD_ADDR_VAR 0 6
48911: PUSH
48912: LD_INT 22
48914: PUSH
48915: LD_VAR 0 1
48919: PPUSH
48920: CALL_OW 255
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 30
48934: PUSH
48935: LD_INT 36
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 34
48944: PUSH
48945: LD_INT 31
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PPUSH
48961: CALL_OW 69
48965: ST_TO_ADDR
// if not tmp then
48966: LD_VAR 0 6
48970: NOT
48971: IFFALSE 48975
// exit ;
48973: GO 49223
// result := [ ] ;
48975: LD_ADDR_VAR 0 2
48979: PUSH
48980: EMPTY
48981: ST_TO_ADDR
// for i in tmp do
48982: LD_ADDR_VAR 0 3
48986: PUSH
48987: LD_VAR 0 6
48991: PUSH
48992: FOR_IN
48993: IFFALSE 49064
// begin t := UnitsInside ( i ) ;
48995: LD_ADDR_VAR 0 4
48999: PUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: CALL_OW 313
49009: ST_TO_ADDR
// if t then
49010: LD_VAR 0 4
49014: IFFALSE 49062
// for j in t do
49016: LD_ADDR_VAR 0 7
49020: PUSH
49021: LD_VAR 0 4
49025: PUSH
49026: FOR_IN
49027: IFFALSE 49060
// result := Replace ( result , result + 1 , j ) ;
49029: LD_ADDR_VAR 0 2
49033: PUSH
49034: LD_VAR 0 2
49038: PPUSH
49039: LD_VAR 0 2
49043: PUSH
49044: LD_INT 1
49046: PLUS
49047: PPUSH
49048: LD_VAR 0 7
49052: PPUSH
49053: CALL_OW 1
49057: ST_TO_ADDR
49058: GO 49026
49060: POP
49061: POP
// end ;
49062: GO 48992
49064: POP
49065: POP
// if not result then
49066: LD_VAR 0 2
49070: NOT
49071: IFFALSE 49075
// exit ;
49073: GO 49223
// mech := result [ 1 ] ;
49075: LD_ADDR_VAR 0 5
49079: PUSH
49080: LD_VAR 0 2
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: ST_TO_ADDR
// if result > 1 then
49089: LD_VAR 0 2
49093: PUSH
49094: LD_INT 1
49096: GREATER
49097: IFFALSE 49209
// begin for i = 2 to result do
49099: LD_ADDR_VAR 0 3
49103: PUSH
49104: DOUBLE
49105: LD_INT 2
49107: DEC
49108: ST_TO_ADDR
49109: LD_VAR 0 2
49113: PUSH
49114: FOR_TO
49115: IFFALSE 49207
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49117: LD_ADDR_VAR 0 4
49121: PUSH
49122: LD_VAR 0 2
49126: PUSH
49127: LD_VAR 0 3
49131: ARRAY
49132: PPUSH
49133: LD_INT 3
49135: PPUSH
49136: CALL_OW 259
49140: PUSH
49141: LD_VAR 0 2
49145: PUSH
49146: LD_VAR 0 3
49150: ARRAY
49151: PPUSH
49152: CALL_OW 432
49156: MINUS
49157: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49158: LD_VAR 0 4
49162: PUSH
49163: LD_VAR 0 5
49167: PPUSH
49168: LD_INT 3
49170: PPUSH
49171: CALL_OW 259
49175: PUSH
49176: LD_VAR 0 5
49180: PPUSH
49181: CALL_OW 432
49185: MINUS
49186: GREATEREQUAL
49187: IFFALSE 49205
// mech := result [ i ] ;
49189: LD_ADDR_VAR 0 5
49193: PUSH
49194: LD_VAR 0 2
49198: PUSH
49199: LD_VAR 0 3
49203: ARRAY
49204: ST_TO_ADDR
// end ;
49205: GO 49114
49207: POP
49208: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49209: LD_VAR 0 1
49213: PPUSH
49214: LD_VAR 0 5
49218: PPUSH
49219: CALL_OW 135
// end ;
49223: LD_VAR 0 2
49227: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49228: LD_INT 0
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
// result := [ ] ;
49243: LD_ADDR_VAR 0 7
49247: PUSH
49248: EMPTY
49249: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49250: LD_VAR 0 1
49254: PPUSH
49255: CALL_OW 266
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: IN
49270: NOT
49271: IFFALSE 49275
// exit ;
49273: GO 50909
// if name then
49275: LD_VAR 0 3
49279: IFFALSE 49295
// SetBName ( base_dep , name ) ;
49281: LD_VAR 0 1
49285: PPUSH
49286: LD_VAR 0 3
49290: PPUSH
49291: CALL_OW 500
// base := GetBase ( base_dep ) ;
49295: LD_ADDR_VAR 0 15
49299: PUSH
49300: LD_VAR 0 1
49304: PPUSH
49305: CALL_OW 274
49309: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49310: LD_ADDR_VAR 0 16
49314: PUSH
49315: LD_VAR 0 1
49319: PPUSH
49320: CALL_OW 255
49324: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49325: LD_ADDR_VAR 0 17
49329: PUSH
49330: LD_VAR 0 1
49334: PPUSH
49335: CALL_OW 248
49339: ST_TO_ADDR
// if sources then
49340: LD_VAR 0 5
49344: IFFALSE 49391
// for i = 1 to 3 do
49346: LD_ADDR_VAR 0 8
49350: PUSH
49351: DOUBLE
49352: LD_INT 1
49354: DEC
49355: ST_TO_ADDR
49356: LD_INT 3
49358: PUSH
49359: FOR_TO
49360: IFFALSE 49389
// AddResourceType ( base , i , sources [ i ] ) ;
49362: LD_VAR 0 15
49366: PPUSH
49367: LD_VAR 0 8
49371: PPUSH
49372: LD_VAR 0 5
49376: PUSH
49377: LD_VAR 0 8
49381: ARRAY
49382: PPUSH
49383: CALL_OW 276
49387: GO 49359
49389: POP
49390: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49391: LD_ADDR_VAR 0 18
49395: PUSH
49396: LD_VAR 0 15
49400: PPUSH
49401: LD_VAR 0 2
49405: PPUSH
49406: LD_INT 1
49408: PPUSH
49409: CALL 48652 0 3
49413: ST_TO_ADDR
// InitHc ;
49414: CALL_OW 19
// InitUc ;
49418: CALL_OW 18
// uc_side := side ;
49422: LD_ADDR_OWVAR 20
49426: PUSH
49427: LD_VAR 0 16
49431: ST_TO_ADDR
// uc_nation := nation ;
49432: LD_ADDR_OWVAR 21
49436: PUSH
49437: LD_VAR 0 17
49441: ST_TO_ADDR
// if buildings then
49442: LD_VAR 0 18
49446: IFFALSE 50768
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49448: LD_ADDR_VAR 0 19
49452: PUSH
49453: LD_VAR 0 18
49457: PPUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 30
49463: PUSH
49464: LD_INT 29
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 30
49473: PUSH
49474: LD_INT 30
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: PPUSH
49486: CALL_OW 72
49490: ST_TO_ADDR
// if tmp then
49491: LD_VAR 0 19
49495: IFFALSE 49543
// for i in tmp do
49497: LD_ADDR_VAR 0 8
49501: PUSH
49502: LD_VAR 0 19
49506: PUSH
49507: FOR_IN
49508: IFFALSE 49541
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49510: LD_VAR 0 8
49514: PPUSH
49515: CALL_OW 250
49519: PPUSH
49520: LD_VAR 0 8
49524: PPUSH
49525: CALL_OW 251
49529: PPUSH
49530: LD_VAR 0 16
49534: PPUSH
49535: CALL_OW 441
49539: GO 49507
49541: POP
49542: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49543: LD_VAR 0 18
49547: PPUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 30
49553: PUSH
49554: LD_INT 32
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 30
49563: PUSH
49564: LD_INT 33
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: PPUSH
49576: CALL_OW 72
49580: IFFALSE 49668
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49582: LD_ADDR_VAR 0 8
49586: PUSH
49587: LD_VAR 0 18
49591: PPUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 30
49597: PUSH
49598: LD_INT 32
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 30
49607: PUSH
49608: LD_INT 33
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: PPUSH
49620: CALL_OW 72
49624: PUSH
49625: FOR_IN
49626: IFFALSE 49666
// begin if not GetBWeapon ( i ) then
49628: LD_VAR 0 8
49632: PPUSH
49633: CALL_OW 269
49637: NOT
49638: IFFALSE 49664
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49640: LD_VAR 0 8
49644: PPUSH
49645: LD_VAR 0 8
49649: PPUSH
49650: LD_VAR 0 2
49654: PPUSH
49655: CALL 50914 0 2
49659: PPUSH
49660: CALL_OW 431
// end ;
49664: GO 49625
49666: POP
49667: POP
// end ; for i = 1 to personel do
49668: LD_ADDR_VAR 0 8
49672: PUSH
49673: DOUBLE
49674: LD_INT 1
49676: DEC
49677: ST_TO_ADDR
49678: LD_VAR 0 6
49682: PUSH
49683: FOR_TO
49684: IFFALSE 50748
// begin if i > 4 then
49686: LD_VAR 0 8
49690: PUSH
49691: LD_INT 4
49693: GREATER
49694: IFFALSE 49698
// break ;
49696: GO 50748
// case i of 1 :
49698: LD_VAR 0 8
49702: PUSH
49703: LD_INT 1
49705: DOUBLE
49706: EQUAL
49707: IFTRUE 49711
49709: GO 49791
49711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49712: LD_ADDR_VAR 0 12
49716: PUSH
49717: LD_VAR 0 18
49721: PPUSH
49722: LD_INT 22
49724: PUSH
49725: LD_VAR 0 16
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 58
49736: PUSH
49737: EMPTY
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 30
49745: PUSH
49746: LD_INT 32
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 30
49755: PUSH
49756: LD_INT 4
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 30
49765: PUSH
49766: LD_INT 5
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: PPUSH
49784: CALL_OW 72
49788: ST_TO_ADDR
49789: GO 50013
49791: LD_INT 2
49793: DOUBLE
49794: EQUAL
49795: IFTRUE 49799
49797: GO 49861
49799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49800: LD_ADDR_VAR 0 12
49804: PUSH
49805: LD_VAR 0 18
49809: PPUSH
49810: LD_INT 22
49812: PUSH
49813: LD_VAR 0 16
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 30
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 30
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PPUSH
49854: CALL_OW 72
49858: ST_TO_ADDR
49859: GO 50013
49861: LD_INT 3
49863: DOUBLE
49864: EQUAL
49865: IFTRUE 49869
49867: GO 49931
49869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49870: LD_ADDR_VAR 0 12
49874: PUSH
49875: LD_VAR 0 18
49879: PPUSH
49880: LD_INT 22
49882: PUSH
49883: LD_VAR 0 16
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 30
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 30
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PPUSH
49924: CALL_OW 72
49928: ST_TO_ADDR
49929: GO 50013
49931: LD_INT 4
49933: DOUBLE
49934: EQUAL
49935: IFTRUE 49939
49937: GO 50012
49939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49940: LD_ADDR_VAR 0 12
49944: PUSH
49945: LD_VAR 0 18
49949: PPUSH
49950: LD_INT 22
49952: PUSH
49953: LD_VAR 0 16
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 30
49967: PUSH
49968: LD_INT 6
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 30
49977: PUSH
49978: LD_INT 7
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 30
49987: PUSH
49988: LD_INT 8
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PPUSH
50005: CALL_OW 72
50009: ST_TO_ADDR
50010: GO 50013
50012: POP
// if i = 1 then
50013: LD_VAR 0 8
50017: PUSH
50018: LD_INT 1
50020: EQUAL
50021: IFFALSE 50132
// begin tmp := [ ] ;
50023: LD_ADDR_VAR 0 19
50027: PUSH
50028: EMPTY
50029: ST_TO_ADDR
// for j in f do
50030: LD_ADDR_VAR 0 9
50034: PUSH
50035: LD_VAR 0 12
50039: PUSH
50040: FOR_IN
50041: IFFALSE 50114
// if GetBType ( j ) = b_bunker then
50043: LD_VAR 0 9
50047: PPUSH
50048: CALL_OW 266
50052: PUSH
50053: LD_INT 32
50055: EQUAL
50056: IFFALSE 50083
// tmp := Insert ( tmp , 1 , j ) else
50058: LD_ADDR_VAR 0 19
50062: PUSH
50063: LD_VAR 0 19
50067: PPUSH
50068: LD_INT 1
50070: PPUSH
50071: LD_VAR 0 9
50075: PPUSH
50076: CALL_OW 2
50080: ST_TO_ADDR
50081: GO 50112
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50083: LD_ADDR_VAR 0 19
50087: PUSH
50088: LD_VAR 0 19
50092: PPUSH
50093: LD_VAR 0 19
50097: PUSH
50098: LD_INT 1
50100: PLUS
50101: PPUSH
50102: LD_VAR 0 9
50106: PPUSH
50107: CALL_OW 2
50111: ST_TO_ADDR
50112: GO 50040
50114: POP
50115: POP
// if tmp then
50116: LD_VAR 0 19
50120: IFFALSE 50132
// f := tmp ;
50122: LD_ADDR_VAR 0 12
50126: PUSH
50127: LD_VAR 0 19
50131: ST_TO_ADDR
// end ; x := personel [ i ] ;
50132: LD_ADDR_VAR 0 13
50136: PUSH
50137: LD_VAR 0 6
50141: PUSH
50142: LD_VAR 0 8
50146: ARRAY
50147: ST_TO_ADDR
// if x = - 1 then
50148: LD_VAR 0 13
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: EQUAL
50157: IFFALSE 50366
// begin for j in f do
50159: LD_ADDR_VAR 0 9
50163: PUSH
50164: LD_VAR 0 12
50168: PUSH
50169: FOR_IN
50170: IFFALSE 50362
// repeat InitHc ;
50172: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50176: LD_VAR 0 9
50180: PPUSH
50181: CALL_OW 266
50185: PUSH
50186: LD_INT 5
50188: EQUAL
50189: IFFALSE 50259
// begin if UnitsInside ( j ) < 3 then
50191: LD_VAR 0 9
50195: PPUSH
50196: CALL_OW 313
50200: PUSH
50201: LD_INT 3
50203: LESS
50204: IFFALSE 50240
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50206: LD_INT 0
50208: PPUSH
50209: LD_INT 5
50211: PUSH
50212: LD_INT 8
50214: PUSH
50215: LD_INT 9
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: PUSH
50223: LD_VAR 0 17
50227: ARRAY
50228: PPUSH
50229: LD_VAR 0 4
50233: PPUSH
50234: CALL_OW 380
50238: GO 50257
// PrepareHuman ( false , i , skill ) ;
50240: LD_INT 0
50242: PPUSH
50243: LD_VAR 0 8
50247: PPUSH
50248: LD_VAR 0 4
50252: PPUSH
50253: CALL_OW 380
// end else
50257: GO 50276
// PrepareHuman ( false , i , skill ) ;
50259: LD_INT 0
50261: PPUSH
50262: LD_VAR 0 8
50266: PPUSH
50267: LD_VAR 0 4
50271: PPUSH
50272: CALL_OW 380
// un := CreateHuman ;
50276: LD_ADDR_VAR 0 14
50280: PUSH
50281: CALL_OW 44
50285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50286: LD_ADDR_VAR 0 7
50290: PUSH
50291: LD_VAR 0 7
50295: PPUSH
50296: LD_INT 1
50298: PPUSH
50299: LD_VAR 0 14
50303: PPUSH
50304: CALL_OW 2
50308: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50309: LD_VAR 0 14
50313: PPUSH
50314: LD_VAR 0 9
50318: PPUSH
50319: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50323: LD_VAR 0 9
50327: PPUSH
50328: CALL_OW 313
50332: PUSH
50333: LD_INT 6
50335: EQUAL
50336: PUSH
50337: LD_VAR 0 9
50341: PPUSH
50342: CALL_OW 266
50346: PUSH
50347: LD_INT 32
50349: PUSH
50350: LD_INT 31
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: IN
50357: OR
50358: IFFALSE 50172
50360: GO 50169
50362: POP
50363: POP
// end else
50364: GO 50746
// for j = 1 to x do
50366: LD_ADDR_VAR 0 9
50370: PUSH
50371: DOUBLE
50372: LD_INT 1
50374: DEC
50375: ST_TO_ADDR
50376: LD_VAR 0 13
50380: PUSH
50381: FOR_TO
50382: IFFALSE 50744
// begin InitHc ;
50384: CALL_OW 19
// if not f then
50388: LD_VAR 0 12
50392: NOT
50393: IFFALSE 50482
// begin PrepareHuman ( false , i , skill ) ;
50395: LD_INT 0
50397: PPUSH
50398: LD_VAR 0 8
50402: PPUSH
50403: LD_VAR 0 4
50407: PPUSH
50408: CALL_OW 380
// un := CreateHuman ;
50412: LD_ADDR_VAR 0 14
50416: PUSH
50417: CALL_OW 44
50421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50422: LD_ADDR_VAR 0 7
50426: PUSH
50427: LD_VAR 0 7
50431: PPUSH
50432: LD_INT 1
50434: PPUSH
50435: LD_VAR 0 14
50439: PPUSH
50440: CALL_OW 2
50444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50445: LD_VAR 0 14
50449: PPUSH
50450: LD_VAR 0 1
50454: PPUSH
50455: CALL_OW 250
50459: PPUSH
50460: LD_VAR 0 1
50464: PPUSH
50465: CALL_OW 251
50469: PPUSH
50470: LD_INT 10
50472: PPUSH
50473: LD_INT 0
50475: PPUSH
50476: CALL_OW 50
// continue ;
50480: GO 50381
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50482: LD_VAR 0 12
50486: PUSH
50487: LD_INT 1
50489: ARRAY
50490: PPUSH
50491: CALL_OW 313
50495: PUSH
50496: LD_VAR 0 12
50500: PUSH
50501: LD_INT 1
50503: ARRAY
50504: PPUSH
50505: CALL_OW 266
50509: PUSH
50510: LD_INT 32
50512: PUSH
50513: LD_INT 31
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: IN
50520: AND
50521: PUSH
50522: LD_VAR 0 12
50526: PUSH
50527: LD_INT 1
50529: ARRAY
50530: PPUSH
50531: CALL_OW 313
50535: PUSH
50536: LD_INT 6
50538: EQUAL
50539: OR
50540: IFFALSE 50560
// f := Delete ( f , 1 ) ;
50542: LD_ADDR_VAR 0 12
50546: PUSH
50547: LD_VAR 0 12
50551: PPUSH
50552: LD_INT 1
50554: PPUSH
50555: CALL_OW 3
50559: ST_TO_ADDR
// if not f then
50560: LD_VAR 0 12
50564: NOT
50565: IFFALSE 50583
// begin x := x + 2 ;
50567: LD_ADDR_VAR 0 13
50571: PUSH
50572: LD_VAR 0 13
50576: PUSH
50577: LD_INT 2
50579: PLUS
50580: ST_TO_ADDR
// continue ;
50581: GO 50381
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50583: LD_VAR 0 12
50587: PUSH
50588: LD_INT 1
50590: ARRAY
50591: PPUSH
50592: CALL_OW 266
50596: PUSH
50597: LD_INT 5
50599: EQUAL
50600: IFFALSE 50674
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50602: LD_VAR 0 12
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PPUSH
50611: CALL_OW 313
50615: PUSH
50616: LD_INT 3
50618: LESS
50619: IFFALSE 50655
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50621: LD_INT 0
50623: PPUSH
50624: LD_INT 5
50626: PUSH
50627: LD_INT 8
50629: PUSH
50630: LD_INT 9
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: PUSH
50638: LD_VAR 0 17
50642: ARRAY
50643: PPUSH
50644: LD_VAR 0 4
50648: PPUSH
50649: CALL_OW 380
50653: GO 50672
// PrepareHuman ( false , i , skill ) ;
50655: LD_INT 0
50657: PPUSH
50658: LD_VAR 0 8
50662: PPUSH
50663: LD_VAR 0 4
50667: PPUSH
50668: CALL_OW 380
// end else
50672: GO 50691
// PrepareHuman ( false , i , skill ) ;
50674: LD_INT 0
50676: PPUSH
50677: LD_VAR 0 8
50681: PPUSH
50682: LD_VAR 0 4
50686: PPUSH
50687: CALL_OW 380
// un := CreateHuman ;
50691: LD_ADDR_VAR 0 14
50695: PUSH
50696: CALL_OW 44
50700: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50701: LD_ADDR_VAR 0 7
50705: PUSH
50706: LD_VAR 0 7
50710: PPUSH
50711: LD_INT 1
50713: PPUSH
50714: LD_VAR 0 14
50718: PPUSH
50719: CALL_OW 2
50723: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50724: LD_VAR 0 14
50728: PPUSH
50729: LD_VAR 0 12
50733: PUSH
50734: LD_INT 1
50736: ARRAY
50737: PPUSH
50738: CALL_OW 52
// end ;
50742: GO 50381
50744: POP
50745: POP
// end ;
50746: GO 49683
50748: POP
50749: POP
// result := result ^ buildings ;
50750: LD_ADDR_VAR 0 7
50754: PUSH
50755: LD_VAR 0 7
50759: PUSH
50760: LD_VAR 0 18
50764: ADD
50765: ST_TO_ADDR
// end else
50766: GO 50909
// begin for i = 1 to personel do
50768: LD_ADDR_VAR 0 8
50772: PUSH
50773: DOUBLE
50774: LD_INT 1
50776: DEC
50777: ST_TO_ADDR
50778: LD_VAR 0 6
50782: PUSH
50783: FOR_TO
50784: IFFALSE 50907
// begin if i > 4 then
50786: LD_VAR 0 8
50790: PUSH
50791: LD_INT 4
50793: GREATER
50794: IFFALSE 50798
// break ;
50796: GO 50907
// x := personel [ i ] ;
50798: LD_ADDR_VAR 0 13
50802: PUSH
50803: LD_VAR 0 6
50807: PUSH
50808: LD_VAR 0 8
50812: ARRAY
50813: ST_TO_ADDR
// if x = - 1 then
50814: LD_VAR 0 13
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: EQUAL
50823: IFFALSE 50827
// continue ;
50825: GO 50783
// PrepareHuman ( false , i , skill ) ;
50827: LD_INT 0
50829: PPUSH
50830: LD_VAR 0 8
50834: PPUSH
50835: LD_VAR 0 4
50839: PPUSH
50840: CALL_OW 380
// un := CreateHuman ;
50844: LD_ADDR_VAR 0 14
50848: PUSH
50849: CALL_OW 44
50853: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50854: LD_VAR 0 14
50858: PPUSH
50859: LD_VAR 0 1
50863: PPUSH
50864: CALL_OW 250
50868: PPUSH
50869: LD_VAR 0 1
50873: PPUSH
50874: CALL_OW 251
50878: PPUSH
50879: LD_INT 10
50881: PPUSH
50882: LD_INT 0
50884: PPUSH
50885: CALL_OW 50
// result := result ^ un ;
50889: LD_ADDR_VAR 0 7
50893: PUSH
50894: LD_VAR 0 7
50898: PUSH
50899: LD_VAR 0 14
50903: ADD
50904: ST_TO_ADDR
// end ;
50905: GO 50783
50907: POP
50908: POP
// end ; end ;
50909: LD_VAR 0 7
50913: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50914: LD_INT 0
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
50925: PPUSH
50926: PPUSH
50927: PPUSH
50928: PPUSH
50929: PPUSH
50930: PPUSH
50931: PPUSH
// result := false ;
50932: LD_ADDR_VAR 0 3
50936: PUSH
50937: LD_INT 0
50939: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50940: LD_VAR 0 1
50944: NOT
50945: PUSH
50946: LD_VAR 0 1
50950: PPUSH
50951: CALL_OW 266
50955: PUSH
50956: LD_INT 32
50958: PUSH
50959: LD_INT 33
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: IN
50966: NOT
50967: OR
50968: IFFALSE 50972
// exit ;
50970: GO 52081
// nat := GetNation ( tower ) ;
50972: LD_ADDR_VAR 0 12
50976: PUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 248
50986: ST_TO_ADDR
// side := GetSide ( tower ) ;
50987: LD_ADDR_VAR 0 16
50991: PUSH
50992: LD_VAR 0 1
50996: PPUSH
50997: CALL_OW 255
51001: ST_TO_ADDR
// x := GetX ( tower ) ;
51002: LD_ADDR_VAR 0 10
51006: PUSH
51007: LD_VAR 0 1
51011: PPUSH
51012: CALL_OW 250
51016: ST_TO_ADDR
// y := GetY ( tower ) ;
51017: LD_ADDR_VAR 0 11
51021: PUSH
51022: LD_VAR 0 1
51026: PPUSH
51027: CALL_OW 251
51031: ST_TO_ADDR
// if not x or not y then
51032: LD_VAR 0 10
51036: NOT
51037: PUSH
51038: LD_VAR 0 11
51042: NOT
51043: OR
51044: IFFALSE 51048
// exit ;
51046: GO 52081
// weapon := 0 ;
51048: LD_ADDR_VAR 0 18
51052: PUSH
51053: LD_INT 0
51055: ST_TO_ADDR
// fac_list := [ ] ;
51056: LD_ADDR_VAR 0 17
51060: PUSH
51061: EMPTY
51062: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51063: LD_ADDR_VAR 0 6
51067: PUSH
51068: LD_VAR 0 1
51072: PPUSH
51073: CALL_OW 274
51077: PPUSH
51078: LD_VAR 0 2
51082: PPUSH
51083: LD_INT 0
51085: PPUSH
51086: CALL 48652 0 3
51090: PPUSH
51091: LD_INT 30
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PPUSH
51101: CALL_OW 72
51105: ST_TO_ADDR
// if not factories then
51106: LD_VAR 0 6
51110: NOT
51111: IFFALSE 51115
// exit ;
51113: GO 52081
// for i in factories do
51115: LD_ADDR_VAR 0 8
51119: PUSH
51120: LD_VAR 0 6
51124: PUSH
51125: FOR_IN
51126: IFFALSE 51151
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51128: LD_ADDR_VAR 0 17
51132: PUSH
51133: LD_VAR 0 17
51137: PUSH
51138: LD_VAR 0 8
51142: PPUSH
51143: CALL_OW 478
51147: UNION
51148: ST_TO_ADDR
51149: GO 51125
51151: POP
51152: POP
// if not fac_list then
51153: LD_VAR 0 17
51157: NOT
51158: IFFALSE 51162
// exit ;
51160: GO 52081
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51162: LD_ADDR_VAR 0 5
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: LD_INT 5
51172: PUSH
51173: LD_INT 9
51175: PUSH
51176: LD_INT 10
51178: PUSH
51179: LD_INT 6
51181: PUSH
51182: LD_INT 7
51184: PUSH
51185: LD_INT 11
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 27
51199: PUSH
51200: LD_INT 28
51202: PUSH
51203: LD_INT 26
51205: PUSH
51206: LD_INT 30
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 43
51217: PUSH
51218: LD_INT 44
51220: PUSH
51221: LD_INT 46
51223: PUSH
51224: LD_INT 45
51226: PUSH
51227: LD_INT 47
51229: PUSH
51230: LD_INT 49
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: PUSH
51246: LD_VAR 0 12
51250: ARRAY
51251: ST_TO_ADDR
// list := list isect fac_list ;
51252: LD_ADDR_VAR 0 5
51256: PUSH
51257: LD_VAR 0 5
51261: PUSH
51262: LD_VAR 0 17
51266: ISECT
51267: ST_TO_ADDR
// if not list then
51268: LD_VAR 0 5
51272: NOT
51273: IFFALSE 51277
// exit ;
51275: GO 52081
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51277: LD_VAR 0 12
51281: PUSH
51282: LD_INT 3
51284: EQUAL
51285: PUSH
51286: LD_INT 49
51288: PUSH
51289: LD_VAR 0 5
51293: IN
51294: AND
51295: PUSH
51296: LD_INT 31
51298: PPUSH
51299: LD_VAR 0 16
51303: PPUSH
51304: CALL_OW 321
51308: PUSH
51309: LD_INT 2
51311: EQUAL
51312: AND
51313: IFFALSE 51373
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51315: LD_INT 22
51317: PUSH
51318: LD_VAR 0 16
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 35
51329: PUSH
51330: LD_INT 49
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 91
51339: PUSH
51340: LD_VAR 0 1
51344: PUSH
51345: LD_INT 10
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: PPUSH
51358: CALL_OW 69
51362: NOT
51363: IFFALSE 51373
// weapon := ru_time_lapser ;
51365: LD_ADDR_VAR 0 18
51369: PUSH
51370: LD_INT 49
51372: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51373: LD_VAR 0 12
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: IN
51388: PUSH
51389: LD_INT 11
51391: PUSH
51392: LD_VAR 0 5
51396: IN
51397: PUSH
51398: LD_INT 30
51400: PUSH
51401: LD_VAR 0 5
51405: IN
51406: OR
51407: AND
51408: PUSH
51409: LD_INT 6
51411: PPUSH
51412: LD_VAR 0 16
51416: PPUSH
51417: CALL_OW 321
51421: PUSH
51422: LD_INT 2
51424: EQUAL
51425: AND
51426: IFFALSE 51591
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51428: LD_INT 22
51430: PUSH
51431: LD_VAR 0 16
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 35
51445: PUSH
51446: LD_INT 11
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 35
51455: PUSH
51456: LD_INT 30
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 91
51470: PUSH
51471: LD_VAR 0 1
51475: PUSH
51476: LD_INT 18
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: PPUSH
51489: CALL_OW 69
51493: NOT
51494: PUSH
51495: LD_INT 22
51497: PUSH
51498: LD_VAR 0 16
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 30
51512: PUSH
51513: LD_INT 32
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 30
51522: PUSH
51523: LD_INT 33
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 91
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_INT 12
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: PPUSH
51559: CALL_OW 69
51563: PUSH
51564: LD_INT 2
51566: GREATER
51567: AND
51568: IFFALSE 51591
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51570: LD_ADDR_VAR 0 18
51574: PUSH
51575: LD_INT 11
51577: PUSH
51578: LD_INT 30
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_VAR 0 12
51589: ARRAY
51590: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51591: LD_VAR 0 18
51595: NOT
51596: PUSH
51597: LD_INT 40
51599: PPUSH
51600: LD_VAR 0 16
51604: PPUSH
51605: CALL_OW 321
51609: PUSH
51610: LD_INT 2
51612: EQUAL
51613: AND
51614: PUSH
51615: LD_INT 7
51617: PUSH
51618: LD_VAR 0 5
51622: IN
51623: PUSH
51624: LD_INT 28
51626: PUSH
51627: LD_VAR 0 5
51631: IN
51632: OR
51633: PUSH
51634: LD_INT 45
51636: PUSH
51637: LD_VAR 0 5
51641: IN
51642: OR
51643: AND
51644: IFFALSE 51898
// begin hex := GetHexInfo ( x , y ) ;
51646: LD_ADDR_VAR 0 4
51650: PUSH
51651: LD_VAR 0 10
51655: PPUSH
51656: LD_VAR 0 11
51660: PPUSH
51661: CALL_OW 546
51665: ST_TO_ADDR
// if hex [ 1 ] then
51666: LD_VAR 0 4
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: IFFALSE 51678
// exit ;
51676: GO 52081
// height := hex [ 2 ] ;
51678: LD_ADDR_VAR 0 15
51682: PUSH
51683: LD_VAR 0 4
51687: PUSH
51688: LD_INT 2
51690: ARRAY
51691: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51692: LD_ADDR_VAR 0 14
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 5
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// for i in tmp do
51715: LD_ADDR_VAR 0 8
51719: PUSH
51720: LD_VAR 0 14
51724: PUSH
51725: FOR_IN
51726: IFFALSE 51896
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51728: LD_ADDR_VAR 0 9
51732: PUSH
51733: LD_VAR 0 10
51737: PPUSH
51738: LD_VAR 0 8
51742: PPUSH
51743: LD_INT 5
51745: PPUSH
51746: CALL_OW 272
51750: PUSH
51751: LD_VAR 0 11
51755: PPUSH
51756: LD_VAR 0 8
51760: PPUSH
51761: LD_INT 5
51763: PPUSH
51764: CALL_OW 273
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51773: LD_VAR 0 9
51777: PUSH
51778: LD_INT 1
51780: ARRAY
51781: PPUSH
51782: LD_VAR 0 9
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: CALL_OW 488
51795: IFFALSE 51894
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51797: LD_ADDR_VAR 0 4
51801: PUSH
51802: LD_VAR 0 9
51806: PUSH
51807: LD_INT 1
51809: ARRAY
51810: PPUSH
51811: LD_VAR 0 9
51815: PUSH
51816: LD_INT 2
51818: ARRAY
51819: PPUSH
51820: CALL_OW 546
51824: ST_TO_ADDR
// if hex [ 1 ] then
51825: LD_VAR 0 4
51829: PUSH
51830: LD_INT 1
51832: ARRAY
51833: IFFALSE 51837
// continue ;
51835: GO 51725
// h := hex [ 2 ] ;
51837: LD_ADDR_VAR 0 13
51841: PUSH
51842: LD_VAR 0 4
51846: PUSH
51847: LD_INT 2
51849: ARRAY
51850: ST_TO_ADDR
// if h + 7 < height then
51851: LD_VAR 0 13
51855: PUSH
51856: LD_INT 7
51858: PLUS
51859: PUSH
51860: LD_VAR 0 15
51864: LESS
51865: IFFALSE 51894
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51867: LD_ADDR_VAR 0 18
51871: PUSH
51872: LD_INT 7
51874: PUSH
51875: LD_INT 28
51877: PUSH
51878: LD_INT 45
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: LD_VAR 0 12
51890: ARRAY
51891: ST_TO_ADDR
// break ;
51892: GO 51896
// end ; end ; end ;
51894: GO 51725
51896: POP
51897: POP
// end ; if not weapon then
51898: LD_VAR 0 18
51902: NOT
51903: IFFALSE 51963
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51905: LD_ADDR_VAR 0 5
51909: PUSH
51910: LD_VAR 0 5
51914: PUSH
51915: LD_INT 11
51917: PUSH
51918: LD_INT 30
51920: PUSH
51921: LD_INT 49
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: DIFF
51929: ST_TO_ADDR
// if not list then
51930: LD_VAR 0 5
51934: NOT
51935: IFFALSE 51939
// exit ;
51937: GO 52081
// weapon := list [ rand ( 1 , list ) ] ;
51939: LD_ADDR_VAR 0 18
51943: PUSH
51944: LD_VAR 0 5
51948: PUSH
51949: LD_INT 1
51951: PPUSH
51952: LD_VAR 0 5
51956: PPUSH
51957: CALL_OW 12
51961: ARRAY
51962: ST_TO_ADDR
// end ; if weapon then
51963: LD_VAR 0 18
51967: IFFALSE 52081
// begin tmp := CostOfWeapon ( weapon ) ;
51969: LD_ADDR_VAR 0 14
51973: PUSH
51974: LD_VAR 0 18
51978: PPUSH
51979: CALL_OW 451
51983: ST_TO_ADDR
// j := GetBase ( tower ) ;
51984: LD_ADDR_VAR 0 9
51988: PUSH
51989: LD_VAR 0 1
51993: PPUSH
51994: CALL_OW 274
51998: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51999: LD_VAR 0 9
52003: PPUSH
52004: LD_INT 1
52006: PPUSH
52007: CALL_OW 275
52011: PUSH
52012: LD_VAR 0 14
52016: PUSH
52017: LD_INT 1
52019: ARRAY
52020: GREATEREQUAL
52021: PUSH
52022: LD_VAR 0 9
52026: PPUSH
52027: LD_INT 2
52029: PPUSH
52030: CALL_OW 275
52034: PUSH
52035: LD_VAR 0 14
52039: PUSH
52040: LD_INT 2
52042: ARRAY
52043: GREATEREQUAL
52044: AND
52045: PUSH
52046: LD_VAR 0 9
52050: PPUSH
52051: LD_INT 3
52053: PPUSH
52054: CALL_OW 275
52058: PUSH
52059: LD_VAR 0 14
52063: PUSH
52064: LD_INT 3
52066: ARRAY
52067: GREATEREQUAL
52068: AND
52069: IFFALSE 52081
// result := weapon ;
52071: LD_ADDR_VAR 0 3
52075: PUSH
52076: LD_VAR 0 18
52080: ST_TO_ADDR
// end ; end ;
52081: LD_VAR 0 3
52085: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52086: LD_INT 0
52088: PPUSH
52089: PPUSH
// result := true ;
52090: LD_ADDR_VAR 0 3
52094: PUSH
52095: LD_INT 1
52097: ST_TO_ADDR
// if array1 = array2 then
52098: LD_VAR 0 1
52102: PUSH
52103: LD_VAR 0 2
52107: EQUAL
52108: IFFALSE 52168
// begin for i = 1 to array1 do
52110: LD_ADDR_VAR 0 4
52114: PUSH
52115: DOUBLE
52116: LD_INT 1
52118: DEC
52119: ST_TO_ADDR
52120: LD_VAR 0 1
52124: PUSH
52125: FOR_TO
52126: IFFALSE 52164
// if array1 [ i ] <> array2 [ i ] then
52128: LD_VAR 0 1
52132: PUSH
52133: LD_VAR 0 4
52137: ARRAY
52138: PUSH
52139: LD_VAR 0 2
52143: PUSH
52144: LD_VAR 0 4
52148: ARRAY
52149: NONEQUAL
52150: IFFALSE 52162
// begin result := false ;
52152: LD_ADDR_VAR 0 3
52156: PUSH
52157: LD_INT 0
52159: ST_TO_ADDR
// break ;
52160: GO 52164
// end ;
52162: GO 52125
52164: POP
52165: POP
// end else
52166: GO 52176
// result := false ;
52168: LD_ADDR_VAR 0 3
52172: PUSH
52173: LD_INT 0
52175: ST_TO_ADDR
// end ;
52176: LD_VAR 0 3
52180: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52181: LD_INT 0
52183: PPUSH
52184: PPUSH
// if not array1 or not array2 then
52185: LD_VAR 0 1
52189: NOT
52190: PUSH
52191: LD_VAR 0 2
52195: NOT
52196: OR
52197: IFFALSE 52201
// exit ;
52199: GO 52265
// result := true ;
52201: LD_ADDR_VAR 0 3
52205: PUSH
52206: LD_INT 1
52208: ST_TO_ADDR
// for i = 1 to array1 do
52209: LD_ADDR_VAR 0 4
52213: PUSH
52214: DOUBLE
52215: LD_INT 1
52217: DEC
52218: ST_TO_ADDR
52219: LD_VAR 0 1
52223: PUSH
52224: FOR_TO
52225: IFFALSE 52263
// if array1 [ i ] <> array2 [ i ] then
52227: LD_VAR 0 1
52231: PUSH
52232: LD_VAR 0 4
52236: ARRAY
52237: PUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_VAR 0 4
52247: ARRAY
52248: NONEQUAL
52249: IFFALSE 52261
// begin result := false ;
52251: LD_ADDR_VAR 0 3
52255: PUSH
52256: LD_INT 0
52258: ST_TO_ADDR
// break ;
52259: GO 52263
// end ;
52261: GO 52224
52263: POP
52264: POP
// end ;
52265: LD_VAR 0 3
52269: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52270: LD_INT 0
52272: PPUSH
52273: PPUSH
52274: PPUSH
// pom := GetBase ( fac ) ;
52275: LD_ADDR_VAR 0 5
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 274
52289: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52290: LD_ADDR_VAR 0 4
52294: PUSH
52295: LD_VAR 0 2
52299: PUSH
52300: LD_INT 1
52302: ARRAY
52303: PPUSH
52304: LD_VAR 0 2
52308: PUSH
52309: LD_INT 2
52311: ARRAY
52312: PPUSH
52313: LD_VAR 0 2
52317: PUSH
52318: LD_INT 3
52320: ARRAY
52321: PPUSH
52322: LD_VAR 0 2
52326: PUSH
52327: LD_INT 4
52329: ARRAY
52330: PPUSH
52331: CALL_OW 449
52335: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52336: LD_ADDR_VAR 0 3
52340: PUSH
52341: LD_VAR 0 5
52345: PPUSH
52346: LD_INT 1
52348: PPUSH
52349: CALL_OW 275
52353: PUSH
52354: LD_VAR 0 4
52358: PUSH
52359: LD_INT 1
52361: ARRAY
52362: GREATEREQUAL
52363: PUSH
52364: LD_VAR 0 5
52368: PPUSH
52369: LD_INT 2
52371: PPUSH
52372: CALL_OW 275
52376: PUSH
52377: LD_VAR 0 4
52381: PUSH
52382: LD_INT 2
52384: ARRAY
52385: GREATEREQUAL
52386: AND
52387: PUSH
52388: LD_VAR 0 5
52392: PPUSH
52393: LD_INT 3
52395: PPUSH
52396: CALL_OW 275
52400: PUSH
52401: LD_VAR 0 4
52405: PUSH
52406: LD_INT 3
52408: ARRAY
52409: GREATEREQUAL
52410: AND
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 3
52416: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52417: LD_INT 0
52419: PPUSH
52420: PPUSH
52421: PPUSH
52422: PPUSH
// pom := GetBase ( building ) ;
52423: LD_ADDR_VAR 0 3
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 274
52437: ST_TO_ADDR
// if not pom then
52438: LD_VAR 0 3
52442: NOT
52443: IFFALSE 52447
// exit ;
52445: GO 52617
// btype := GetBType ( building ) ;
52447: LD_ADDR_VAR 0 5
52451: PUSH
52452: LD_VAR 0 1
52456: PPUSH
52457: CALL_OW 266
52461: ST_TO_ADDR
// if btype = b_armoury then
52462: LD_VAR 0 5
52466: PUSH
52467: LD_INT 4
52469: EQUAL
52470: IFFALSE 52480
// btype := b_barracks ;
52472: LD_ADDR_VAR 0 5
52476: PUSH
52477: LD_INT 5
52479: ST_TO_ADDR
// if btype = b_depot then
52480: LD_VAR 0 5
52484: PUSH
52485: LD_INT 0
52487: EQUAL
52488: IFFALSE 52498
// btype := b_warehouse ;
52490: LD_ADDR_VAR 0 5
52494: PUSH
52495: LD_INT 1
52497: ST_TO_ADDR
// if btype = b_workshop then
52498: LD_VAR 0 5
52502: PUSH
52503: LD_INT 2
52505: EQUAL
52506: IFFALSE 52516
// btype := b_factory ;
52508: LD_ADDR_VAR 0 5
52512: PUSH
52513: LD_INT 3
52515: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52516: LD_ADDR_VAR 0 4
52520: PUSH
52521: LD_VAR 0 5
52525: PPUSH
52526: LD_VAR 0 1
52530: PPUSH
52531: CALL_OW 248
52535: PPUSH
52536: CALL_OW 450
52540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52541: LD_ADDR_VAR 0 2
52545: PUSH
52546: LD_VAR 0 3
52550: PPUSH
52551: LD_INT 1
52553: PPUSH
52554: CALL_OW 275
52558: PUSH
52559: LD_VAR 0 4
52563: PUSH
52564: LD_INT 1
52566: ARRAY
52567: GREATEREQUAL
52568: PUSH
52569: LD_VAR 0 3
52573: PPUSH
52574: LD_INT 2
52576: PPUSH
52577: CALL_OW 275
52581: PUSH
52582: LD_VAR 0 4
52586: PUSH
52587: LD_INT 2
52589: ARRAY
52590: GREATEREQUAL
52591: AND
52592: PUSH
52593: LD_VAR 0 3
52597: PPUSH
52598: LD_INT 3
52600: PPUSH
52601: CALL_OW 275
52605: PUSH
52606: LD_VAR 0 4
52610: PUSH
52611: LD_INT 3
52613: ARRAY
52614: GREATEREQUAL
52615: AND
52616: ST_TO_ADDR
// end ;
52617: LD_VAR 0 2
52621: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52622: LD_INT 0
52624: PPUSH
52625: PPUSH
52626: PPUSH
// pom := GetBase ( building ) ;
52627: LD_ADDR_VAR 0 4
52631: PUSH
52632: LD_VAR 0 1
52636: PPUSH
52637: CALL_OW 274
52641: ST_TO_ADDR
// if not pom then
52642: LD_VAR 0 4
52646: NOT
52647: IFFALSE 52651
// exit ;
52649: GO 52752
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52651: LD_ADDR_VAR 0 5
52655: PUSH
52656: LD_VAR 0 2
52660: PPUSH
52661: LD_VAR 0 1
52665: PPUSH
52666: CALL_OW 248
52670: PPUSH
52671: CALL_OW 450
52675: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52676: LD_ADDR_VAR 0 3
52680: PUSH
52681: LD_VAR 0 4
52685: PPUSH
52686: LD_INT 1
52688: PPUSH
52689: CALL_OW 275
52693: PUSH
52694: LD_VAR 0 5
52698: PUSH
52699: LD_INT 1
52701: ARRAY
52702: GREATEREQUAL
52703: PUSH
52704: LD_VAR 0 4
52708: PPUSH
52709: LD_INT 2
52711: PPUSH
52712: CALL_OW 275
52716: PUSH
52717: LD_VAR 0 5
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: GREATEREQUAL
52726: AND
52727: PUSH
52728: LD_VAR 0 4
52732: PPUSH
52733: LD_INT 3
52735: PPUSH
52736: CALL_OW 275
52740: PUSH
52741: LD_VAR 0 5
52745: PUSH
52746: LD_INT 3
52748: ARRAY
52749: GREATEREQUAL
52750: AND
52751: ST_TO_ADDR
// end ;
52752: LD_VAR 0 3
52756: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52757: LD_INT 0
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
// result := false ;
52770: LD_ADDR_VAR 0 8
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52778: LD_VAR 0 5
52782: NOT
52783: PUSH
52784: LD_VAR 0 1
52788: NOT
52789: OR
52790: PUSH
52791: LD_VAR 0 2
52795: NOT
52796: OR
52797: PUSH
52798: LD_VAR 0 3
52802: NOT
52803: OR
52804: IFFALSE 52808
// exit ;
52806: GO 53622
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52808: LD_ADDR_VAR 0 14
52812: PUSH
52813: LD_VAR 0 1
52817: PPUSH
52818: LD_VAR 0 2
52822: PPUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_VAR 0 4
52832: PPUSH
52833: LD_VAR 0 5
52837: PUSH
52838: LD_INT 1
52840: ARRAY
52841: PPUSH
52842: CALL_OW 248
52846: PPUSH
52847: LD_INT 0
52849: PPUSH
52850: CALL 54875 0 6
52854: ST_TO_ADDR
// if not hexes then
52855: LD_VAR 0 14
52859: NOT
52860: IFFALSE 52864
// exit ;
52862: GO 53622
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52864: LD_ADDR_VAR 0 17
52868: PUSH
52869: LD_VAR 0 5
52873: PPUSH
52874: LD_INT 22
52876: PUSH
52877: LD_VAR 0 13
52881: PPUSH
52882: CALL_OW 255
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 30
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 30
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PPUSH
52923: CALL_OW 72
52927: ST_TO_ADDR
// for i = 1 to hexes do
52928: LD_ADDR_VAR 0 9
52932: PUSH
52933: DOUBLE
52934: LD_INT 1
52936: DEC
52937: ST_TO_ADDR
52938: LD_VAR 0 14
52942: PUSH
52943: FOR_TO
52944: IFFALSE 53620
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52946: LD_ADDR_VAR 0 13
52950: PUSH
52951: LD_VAR 0 14
52955: PUSH
52956: LD_VAR 0 9
52960: ARRAY
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: PPUSH
52966: LD_VAR 0 14
52970: PUSH
52971: LD_VAR 0 9
52975: ARRAY
52976: PUSH
52977: LD_INT 2
52979: ARRAY
52980: PPUSH
52981: CALL_OW 428
52985: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52986: LD_VAR 0 14
52990: PUSH
52991: LD_VAR 0 9
52995: ARRAY
52996: PUSH
52997: LD_INT 1
52999: ARRAY
53000: PPUSH
53001: LD_VAR 0 14
53005: PUSH
53006: LD_VAR 0 9
53010: ARRAY
53011: PUSH
53012: LD_INT 2
53014: ARRAY
53015: PPUSH
53016: CALL_OW 351
53020: PUSH
53021: LD_VAR 0 14
53025: PUSH
53026: LD_VAR 0 9
53030: ARRAY
53031: PUSH
53032: LD_INT 1
53034: ARRAY
53035: PPUSH
53036: LD_VAR 0 14
53040: PUSH
53041: LD_VAR 0 9
53045: ARRAY
53046: PUSH
53047: LD_INT 2
53049: ARRAY
53050: PPUSH
53051: CALL_OW 488
53055: NOT
53056: OR
53057: PUSH
53058: LD_VAR 0 13
53062: PPUSH
53063: CALL_OW 247
53067: PUSH
53068: LD_INT 3
53070: EQUAL
53071: OR
53072: IFFALSE 53078
// exit ;
53074: POP
53075: POP
53076: GO 53622
// if not tmp then
53078: LD_VAR 0 13
53082: NOT
53083: IFFALSE 53087
// continue ;
53085: GO 52943
// result := true ;
53087: LD_ADDR_VAR 0 8
53091: PUSH
53092: LD_INT 1
53094: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53095: LD_VAR 0 6
53099: PUSH
53100: LD_VAR 0 13
53104: PPUSH
53105: CALL_OW 247
53109: PUSH
53110: LD_INT 2
53112: EQUAL
53113: AND
53114: PUSH
53115: LD_VAR 0 13
53119: PPUSH
53120: CALL_OW 263
53124: PUSH
53125: LD_INT 1
53127: EQUAL
53128: AND
53129: IFFALSE 53293
// begin if IsDrivenBy ( tmp ) then
53131: LD_VAR 0 13
53135: PPUSH
53136: CALL_OW 311
53140: IFFALSE 53144
// continue ;
53142: GO 52943
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53144: LD_VAR 0 6
53148: PPUSH
53149: LD_INT 3
53151: PUSH
53152: LD_INT 60
53154: PUSH
53155: EMPTY
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 55
53167: PUSH
53168: EMPTY
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PPUSH
53179: CALL_OW 72
53183: IFFALSE 53291
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53185: LD_ADDR_VAR 0 18
53189: PUSH
53190: LD_VAR 0 6
53194: PPUSH
53195: LD_INT 3
53197: PUSH
53198: LD_INT 60
53200: PUSH
53201: EMPTY
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 55
53213: PUSH
53214: EMPTY
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PPUSH
53225: CALL_OW 72
53229: PUSH
53230: LD_INT 1
53232: ARRAY
53233: ST_TO_ADDR
// if IsInUnit ( driver ) then
53234: LD_VAR 0 18
53238: PPUSH
53239: CALL_OW 310
53243: IFFALSE 53254
// ComExit ( driver ) ;
53245: LD_VAR 0 18
53249: PPUSH
53250: CALL 78656 0 1
// AddComEnterUnit ( driver , tmp ) ;
53254: LD_VAR 0 18
53258: PPUSH
53259: LD_VAR 0 13
53263: PPUSH
53264: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53268: LD_VAR 0 18
53272: PPUSH
53273: LD_VAR 0 7
53277: PPUSH
53278: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53282: LD_VAR 0 18
53286: PPUSH
53287: CALL_OW 181
// end ; continue ;
53291: GO 52943
// end ; if not cleaners or not tmp in cleaners then
53293: LD_VAR 0 6
53297: NOT
53298: PUSH
53299: LD_VAR 0 13
53303: PUSH
53304: LD_VAR 0 6
53308: IN
53309: NOT
53310: OR
53311: IFFALSE 53618
// begin if dep then
53313: LD_VAR 0 17
53317: IFFALSE 53453
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53319: LD_ADDR_VAR 0 16
53323: PUSH
53324: LD_VAR 0 17
53328: PUSH
53329: LD_INT 1
53331: ARRAY
53332: PPUSH
53333: CALL_OW 250
53337: PPUSH
53338: LD_VAR 0 17
53342: PUSH
53343: LD_INT 1
53345: ARRAY
53346: PPUSH
53347: CALL_OW 254
53351: PPUSH
53352: LD_INT 5
53354: PPUSH
53355: CALL_OW 272
53359: PUSH
53360: LD_VAR 0 17
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: PPUSH
53369: CALL_OW 251
53373: PPUSH
53374: LD_VAR 0 17
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: PPUSH
53383: CALL_OW 254
53387: PPUSH
53388: LD_INT 5
53390: PPUSH
53391: CALL_OW 273
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53400: LD_VAR 0 16
53404: PUSH
53405: LD_INT 1
53407: ARRAY
53408: PPUSH
53409: LD_VAR 0 16
53413: PUSH
53414: LD_INT 2
53416: ARRAY
53417: PPUSH
53418: CALL_OW 488
53422: IFFALSE 53453
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53424: LD_VAR 0 13
53428: PPUSH
53429: LD_VAR 0 16
53433: PUSH
53434: LD_INT 1
53436: ARRAY
53437: PPUSH
53438: LD_VAR 0 16
53442: PUSH
53443: LD_INT 2
53445: ARRAY
53446: PPUSH
53447: CALL_OW 111
// continue ;
53451: GO 52943
// end ; end ; r := GetDir ( tmp ) ;
53453: LD_ADDR_VAR 0 15
53457: PUSH
53458: LD_VAR 0 13
53462: PPUSH
53463: CALL_OW 254
53467: ST_TO_ADDR
// if r = 5 then
53468: LD_VAR 0 15
53472: PUSH
53473: LD_INT 5
53475: EQUAL
53476: IFFALSE 53486
// r := 0 ;
53478: LD_ADDR_VAR 0 15
53482: PUSH
53483: LD_INT 0
53485: ST_TO_ADDR
// for j = r to 5 do
53486: LD_ADDR_VAR 0 10
53490: PUSH
53491: DOUBLE
53492: LD_VAR 0 15
53496: DEC
53497: ST_TO_ADDR
53498: LD_INT 5
53500: PUSH
53501: FOR_TO
53502: IFFALSE 53616
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53504: LD_ADDR_VAR 0 11
53508: PUSH
53509: LD_VAR 0 13
53513: PPUSH
53514: CALL_OW 250
53518: PPUSH
53519: LD_VAR 0 10
53523: PPUSH
53524: LD_INT 2
53526: PPUSH
53527: CALL_OW 272
53531: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53532: LD_ADDR_VAR 0 12
53536: PUSH
53537: LD_VAR 0 13
53541: PPUSH
53542: CALL_OW 251
53546: PPUSH
53547: LD_VAR 0 10
53551: PPUSH
53552: LD_INT 2
53554: PPUSH
53555: CALL_OW 273
53559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53560: LD_VAR 0 11
53564: PPUSH
53565: LD_VAR 0 12
53569: PPUSH
53570: CALL_OW 488
53574: PUSH
53575: LD_VAR 0 11
53579: PPUSH
53580: LD_VAR 0 12
53584: PPUSH
53585: CALL_OW 428
53589: NOT
53590: AND
53591: IFFALSE 53614
// begin ComMoveXY ( tmp , _x , _y ) ;
53593: LD_VAR 0 13
53597: PPUSH
53598: LD_VAR 0 11
53602: PPUSH
53603: LD_VAR 0 12
53607: PPUSH
53608: CALL_OW 111
// break ;
53612: GO 53616
// end ; end ;
53614: GO 53501
53616: POP
53617: POP
// end ; end ;
53618: GO 52943
53620: POP
53621: POP
// end ;
53622: LD_VAR 0 8
53626: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53627: LD_INT 0
53629: PPUSH
// result := true ;
53630: LD_ADDR_VAR 0 3
53634: PUSH
53635: LD_INT 1
53637: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 24
53645: DOUBLE
53646: EQUAL
53647: IFTRUE 53657
53649: LD_INT 33
53651: DOUBLE
53652: EQUAL
53653: IFTRUE 53657
53655: GO 53682
53657: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53658: LD_ADDR_VAR 0 3
53662: PUSH
53663: LD_INT 32
53665: PPUSH
53666: LD_VAR 0 1
53670: PPUSH
53671: CALL_OW 321
53675: PUSH
53676: LD_INT 2
53678: EQUAL
53679: ST_TO_ADDR
53680: GO 53998
53682: LD_INT 20
53684: DOUBLE
53685: EQUAL
53686: IFTRUE 53690
53688: GO 53715
53690: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53691: LD_ADDR_VAR 0 3
53695: PUSH
53696: LD_INT 6
53698: PPUSH
53699: LD_VAR 0 1
53703: PPUSH
53704: CALL_OW 321
53708: PUSH
53709: LD_INT 2
53711: EQUAL
53712: ST_TO_ADDR
53713: GO 53998
53715: LD_INT 22
53717: DOUBLE
53718: EQUAL
53719: IFTRUE 53729
53721: LD_INT 36
53723: DOUBLE
53724: EQUAL
53725: IFTRUE 53729
53727: GO 53754
53729: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53730: LD_ADDR_VAR 0 3
53734: PUSH
53735: LD_INT 15
53737: PPUSH
53738: LD_VAR 0 1
53742: PPUSH
53743: CALL_OW 321
53747: PUSH
53748: LD_INT 2
53750: EQUAL
53751: ST_TO_ADDR
53752: GO 53998
53754: LD_INT 30
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53762
53760: GO 53787
53762: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53763: LD_ADDR_VAR 0 3
53767: PUSH
53768: LD_INT 20
53770: PPUSH
53771: LD_VAR 0 1
53775: PPUSH
53776: CALL_OW 321
53780: PUSH
53781: LD_INT 2
53783: EQUAL
53784: ST_TO_ADDR
53785: GO 53998
53787: LD_INT 28
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53801
53793: LD_INT 21
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53826
53801: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 21
53809: PPUSH
53810: LD_VAR 0 1
53814: PPUSH
53815: CALL_OW 321
53819: PUSH
53820: LD_INT 2
53822: EQUAL
53823: ST_TO_ADDR
53824: GO 53998
53826: LD_INT 16
53828: DOUBLE
53829: EQUAL
53830: IFTRUE 53834
53832: GO 53859
53834: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53835: LD_ADDR_VAR 0 3
53839: PUSH
53840: LD_INT 84
53842: PPUSH
53843: LD_VAR 0 1
53847: PPUSH
53848: CALL_OW 321
53852: PUSH
53853: LD_INT 2
53855: EQUAL
53856: ST_TO_ADDR
53857: GO 53998
53859: LD_INT 19
53861: DOUBLE
53862: EQUAL
53863: IFTRUE 53873
53865: LD_INT 23
53867: DOUBLE
53868: EQUAL
53869: IFTRUE 53873
53871: GO 53898
53873: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_INT 83
53881: PPUSH
53882: LD_VAR 0 1
53886: PPUSH
53887: CALL_OW 321
53891: PUSH
53892: LD_INT 2
53894: EQUAL
53895: ST_TO_ADDR
53896: GO 53998
53898: LD_INT 17
53900: DOUBLE
53901: EQUAL
53902: IFTRUE 53906
53904: GO 53931
53906: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53907: LD_ADDR_VAR 0 3
53911: PUSH
53912: LD_INT 39
53914: PPUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 321
53924: PUSH
53925: LD_INT 2
53927: EQUAL
53928: ST_TO_ADDR
53929: GO 53998
53931: LD_INT 18
53933: DOUBLE
53934: EQUAL
53935: IFTRUE 53939
53937: GO 53964
53939: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53940: LD_ADDR_VAR 0 3
53944: PUSH
53945: LD_INT 40
53947: PPUSH
53948: LD_VAR 0 1
53952: PPUSH
53953: CALL_OW 321
53957: PUSH
53958: LD_INT 2
53960: EQUAL
53961: ST_TO_ADDR
53962: GO 53998
53964: LD_INT 27
53966: DOUBLE
53967: EQUAL
53968: IFTRUE 53972
53970: GO 53997
53972: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53973: LD_ADDR_VAR 0 3
53977: PUSH
53978: LD_INT 35
53980: PPUSH
53981: LD_VAR 0 1
53985: PPUSH
53986: CALL_OW 321
53990: PUSH
53991: LD_INT 2
53993: EQUAL
53994: ST_TO_ADDR
53995: GO 53998
53997: POP
// end ;
53998: LD_VAR 0 3
54002: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54003: LD_INT 0
54005: PPUSH
54006: PPUSH
54007: PPUSH
54008: PPUSH
54009: PPUSH
54010: PPUSH
54011: PPUSH
54012: PPUSH
54013: PPUSH
54014: PPUSH
54015: PPUSH
// result := false ;
54016: LD_ADDR_VAR 0 6
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// if btype = b_depot then
54024: LD_VAR 0 2
54028: PUSH
54029: LD_INT 0
54031: EQUAL
54032: IFFALSE 54044
// begin result := true ;
54034: LD_ADDR_VAR 0 6
54038: PUSH
54039: LD_INT 1
54041: ST_TO_ADDR
// exit ;
54042: GO 54870
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54044: LD_VAR 0 1
54048: NOT
54049: PUSH
54050: LD_VAR 0 1
54054: PPUSH
54055: CALL_OW 266
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: IN
54070: NOT
54071: OR
54072: PUSH
54073: LD_VAR 0 2
54077: NOT
54078: OR
54079: PUSH
54080: LD_VAR 0 5
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: LD_INT 5
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: IN
54111: NOT
54112: OR
54113: PUSH
54114: LD_VAR 0 3
54118: PPUSH
54119: LD_VAR 0 4
54123: PPUSH
54124: CALL_OW 488
54128: NOT
54129: OR
54130: IFFALSE 54134
// exit ;
54132: GO 54870
// side := GetSide ( depot ) ;
54134: LD_ADDR_VAR 0 9
54138: PUSH
54139: LD_VAR 0 1
54143: PPUSH
54144: CALL_OW 255
54148: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54149: LD_VAR 0 9
54153: PPUSH
54154: LD_VAR 0 2
54158: PPUSH
54159: CALL 53627 0 2
54163: NOT
54164: IFFALSE 54168
// exit ;
54166: GO 54870
// pom := GetBase ( depot ) ;
54168: LD_ADDR_VAR 0 10
54172: PUSH
54173: LD_VAR 0 1
54177: PPUSH
54178: CALL_OW 274
54182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54183: LD_ADDR_VAR 0 11
54187: PUSH
54188: LD_VAR 0 2
54192: PPUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: CALL_OW 248
54202: PPUSH
54203: CALL_OW 450
54207: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54208: LD_VAR 0 10
54212: PPUSH
54213: LD_INT 1
54215: PPUSH
54216: CALL_OW 275
54220: PUSH
54221: LD_VAR 0 11
54225: PUSH
54226: LD_INT 1
54228: ARRAY
54229: GREATEREQUAL
54230: PUSH
54231: LD_VAR 0 10
54235: PPUSH
54236: LD_INT 2
54238: PPUSH
54239: CALL_OW 275
54243: PUSH
54244: LD_VAR 0 11
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: GREATEREQUAL
54253: AND
54254: PUSH
54255: LD_VAR 0 10
54259: PPUSH
54260: LD_INT 3
54262: PPUSH
54263: CALL_OW 275
54267: PUSH
54268: LD_VAR 0 11
54272: PUSH
54273: LD_INT 3
54275: ARRAY
54276: GREATEREQUAL
54277: AND
54278: NOT
54279: IFFALSE 54283
// exit ;
54281: GO 54870
// if GetBType ( depot ) = b_depot then
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 266
54292: PUSH
54293: LD_INT 0
54295: EQUAL
54296: IFFALSE 54308
// dist := 28 else
54298: LD_ADDR_VAR 0 14
54302: PUSH
54303: LD_INT 28
54305: ST_TO_ADDR
54306: GO 54316
// dist := 36 ;
54308: LD_ADDR_VAR 0 14
54312: PUSH
54313: LD_INT 36
54315: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54316: LD_VAR 0 1
54320: PPUSH
54321: LD_VAR 0 3
54325: PPUSH
54326: LD_VAR 0 4
54330: PPUSH
54331: CALL_OW 297
54335: PUSH
54336: LD_VAR 0 14
54340: GREATER
54341: IFFALSE 54345
// exit ;
54343: GO 54870
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54345: LD_ADDR_VAR 0 12
54349: PUSH
54350: LD_VAR 0 2
54354: PPUSH
54355: LD_VAR 0 3
54359: PPUSH
54360: LD_VAR 0 4
54364: PPUSH
54365: LD_VAR 0 5
54369: PPUSH
54370: LD_VAR 0 1
54374: PPUSH
54375: CALL_OW 248
54379: PPUSH
54380: LD_INT 0
54382: PPUSH
54383: CALL 54875 0 6
54387: ST_TO_ADDR
// if not hexes then
54388: LD_VAR 0 12
54392: NOT
54393: IFFALSE 54397
// exit ;
54395: GO 54870
// hex := GetHexInfo ( x , y ) ;
54397: LD_ADDR_VAR 0 15
54401: PUSH
54402: LD_VAR 0 3
54406: PPUSH
54407: LD_VAR 0 4
54411: PPUSH
54412: CALL_OW 546
54416: ST_TO_ADDR
// if hex [ 1 ] then
54417: LD_VAR 0 15
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: IFFALSE 54429
// exit ;
54427: GO 54870
// height := hex [ 2 ] ;
54429: LD_ADDR_VAR 0 13
54433: PUSH
54434: LD_VAR 0 15
54438: PUSH
54439: LD_INT 2
54441: ARRAY
54442: ST_TO_ADDR
// for i = 1 to hexes do
54443: LD_ADDR_VAR 0 7
54447: PUSH
54448: DOUBLE
54449: LD_INT 1
54451: DEC
54452: ST_TO_ADDR
54453: LD_VAR 0 12
54457: PUSH
54458: FOR_TO
54459: IFFALSE 54789
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54461: LD_VAR 0 12
54465: PUSH
54466: LD_VAR 0 7
54470: ARRAY
54471: PUSH
54472: LD_INT 1
54474: ARRAY
54475: PPUSH
54476: LD_VAR 0 12
54480: PUSH
54481: LD_VAR 0 7
54485: ARRAY
54486: PUSH
54487: LD_INT 2
54489: ARRAY
54490: PPUSH
54491: CALL_OW 488
54495: NOT
54496: PUSH
54497: LD_VAR 0 12
54501: PUSH
54502: LD_VAR 0 7
54506: ARRAY
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: PPUSH
54512: LD_VAR 0 12
54516: PUSH
54517: LD_VAR 0 7
54521: ARRAY
54522: PUSH
54523: LD_INT 2
54525: ARRAY
54526: PPUSH
54527: CALL_OW 428
54531: PUSH
54532: LD_INT 0
54534: GREATER
54535: OR
54536: PUSH
54537: LD_VAR 0 12
54541: PUSH
54542: LD_VAR 0 7
54546: ARRAY
54547: PUSH
54548: LD_INT 1
54550: ARRAY
54551: PPUSH
54552: LD_VAR 0 12
54556: PUSH
54557: LD_VAR 0 7
54561: ARRAY
54562: PUSH
54563: LD_INT 2
54565: ARRAY
54566: PPUSH
54567: CALL_OW 351
54571: OR
54572: IFFALSE 54578
// exit ;
54574: POP
54575: POP
54576: GO 54870
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54578: LD_ADDR_VAR 0 8
54582: PUSH
54583: LD_VAR 0 12
54587: PUSH
54588: LD_VAR 0 7
54592: ARRAY
54593: PUSH
54594: LD_INT 1
54596: ARRAY
54597: PPUSH
54598: LD_VAR 0 12
54602: PUSH
54603: LD_VAR 0 7
54607: ARRAY
54608: PUSH
54609: LD_INT 2
54611: ARRAY
54612: PPUSH
54613: CALL_OW 546
54617: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54618: LD_VAR 0 8
54622: PUSH
54623: LD_INT 1
54625: ARRAY
54626: PUSH
54627: LD_VAR 0 8
54631: PUSH
54632: LD_INT 2
54634: ARRAY
54635: PUSH
54636: LD_VAR 0 13
54640: PUSH
54641: LD_INT 2
54643: PLUS
54644: GREATER
54645: OR
54646: PUSH
54647: LD_VAR 0 8
54651: PUSH
54652: LD_INT 2
54654: ARRAY
54655: PUSH
54656: LD_VAR 0 13
54660: PUSH
54661: LD_INT 2
54663: MINUS
54664: LESS
54665: OR
54666: PUSH
54667: LD_VAR 0 8
54671: PUSH
54672: LD_INT 3
54674: ARRAY
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 8
54681: PUSH
54682: LD_INT 9
54684: PUSH
54685: LD_INT 10
54687: PUSH
54688: LD_INT 11
54690: PUSH
54691: LD_INT 12
54693: PUSH
54694: LD_INT 13
54696: PUSH
54697: LD_INT 16
54699: PUSH
54700: LD_INT 17
54702: PUSH
54703: LD_INT 18
54705: PUSH
54706: LD_INT 19
54708: PUSH
54709: LD_INT 20
54711: PUSH
54712: LD_INT 21
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: IN
54730: NOT
54731: OR
54732: PUSH
54733: LD_VAR 0 8
54737: PUSH
54738: LD_INT 5
54740: ARRAY
54741: NOT
54742: OR
54743: PUSH
54744: LD_VAR 0 8
54748: PUSH
54749: LD_INT 6
54751: ARRAY
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 7
54761: PUSH
54762: LD_INT 9
54764: PUSH
54765: LD_INT 10
54767: PUSH
54768: LD_INT 11
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: IN
54779: NOT
54780: OR
54781: IFFALSE 54787
// exit ;
54783: POP
54784: POP
54785: GO 54870
// end ;
54787: GO 54458
54789: POP
54790: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54791: LD_VAR 0 9
54795: PPUSH
54796: LD_VAR 0 3
54800: PPUSH
54801: LD_VAR 0 4
54805: PPUSH
54806: LD_INT 20
54808: PPUSH
54809: CALL 46793 0 4
54813: PUSH
54814: LD_INT 4
54816: ARRAY
54817: IFFALSE 54821
// exit ;
54819: GO 54870
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54821: LD_VAR 0 2
54825: PUSH
54826: LD_INT 29
54828: PUSH
54829: LD_INT 30
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: IN
54836: PUSH
54837: LD_VAR 0 3
54841: PPUSH
54842: LD_VAR 0 4
54846: PPUSH
54847: LD_VAR 0 9
54851: PPUSH
54852: CALL_OW 440
54856: NOT
54857: AND
54858: IFFALSE 54862
// exit ;
54860: GO 54870
// result := true ;
54862: LD_ADDR_VAR 0 6
54866: PUSH
54867: LD_INT 1
54869: ST_TO_ADDR
// end ;
54870: LD_VAR 0 6
54874: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54875: LD_INT 0
54877: PPUSH
54878: PPUSH
54879: PPUSH
54880: PPUSH
54881: PPUSH
54882: PPUSH
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
54903: PPUSH
54904: PPUSH
54905: PPUSH
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
54915: PPUSH
54916: PPUSH
54917: PPUSH
54918: PPUSH
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
54924: PPUSH
54925: PPUSH
54926: PPUSH
54927: PPUSH
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
// result = [ ] ;
54935: LD_ADDR_VAR 0 7
54939: PUSH
54940: EMPTY
54941: ST_TO_ADDR
// temp_list = [ ] ;
54942: LD_ADDR_VAR 0 9
54946: PUSH
54947: EMPTY
54948: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54949: LD_VAR 0 4
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 4
54968: PUSH
54969: LD_INT 5
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: IN
54980: NOT
54981: PUSH
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: IN
54997: PUSH
54998: LD_VAR 0 5
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: IN
55017: NOT
55018: AND
55019: OR
55020: IFFALSE 55024
// exit ;
55022: GO 73415
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 6
55031: PUSH
55032: LD_INT 7
55034: PUSH
55035: LD_INT 8
55037: PUSH
55038: LD_INT 13
55040: PUSH
55041: LD_INT 12
55043: PUSH
55044: LD_INT 15
55046: PUSH
55047: LD_INT 11
55049: PUSH
55050: LD_INT 14
55052: PUSH
55053: LD_INT 10
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: IN
55067: IFFALSE 55077
// btype = b_lab ;
55069: LD_ADDR_VAR 0 1
55073: PUSH
55074: LD_INT 6
55076: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55077: LD_VAR 0 6
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: IN
55096: NOT
55097: PUSH
55098: LD_VAR 0 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: LD_INT 6
55117: PUSH
55118: LD_INT 36
55120: PUSH
55121: LD_INT 4
55123: PUSH
55124: LD_INT 5
55126: PUSH
55127: LD_INT 31
55129: PUSH
55130: LD_INT 32
55132: PUSH
55133: LD_INT 33
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: IN
55149: NOT
55150: PUSH
55151: LD_VAR 0 6
55155: PUSH
55156: LD_INT 1
55158: EQUAL
55159: AND
55160: OR
55161: PUSH
55162: LD_VAR 0 1
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: IN
55177: NOT
55178: PUSH
55179: LD_VAR 0 6
55183: PUSH
55184: LD_INT 2
55186: EQUAL
55187: AND
55188: OR
55189: IFFALSE 55199
// mode = 0 ;
55191: LD_ADDR_VAR 0 6
55195: PUSH
55196: LD_INT 0
55198: ST_TO_ADDR
// case mode of 0 :
55199: LD_VAR 0 6
55203: PUSH
55204: LD_INT 0
55206: DOUBLE
55207: EQUAL
55208: IFTRUE 55212
55210: GO 66665
55212: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55213: LD_ADDR_VAR 0 11
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55406: LD_ADDR_VAR 0 12
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55602: LD_ADDR_VAR 0 13
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55801: LD_ADDR_VAR 0 14
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55997: LD_ADDR_VAR 0 15
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56190: LD_ADDR_VAR 0 16
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 3
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56383: LD_ADDR_VAR 0 17
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56613: LD_ADDR_VAR 0 18
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56843: LD_ADDR_VAR 0 19
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57073: LD_ADDR_VAR 0 20
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57303: LD_ADDR_VAR 0 21
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57533: LD_ADDR_VAR 0 22
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57763: LD_ADDR_VAR 0 23
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58043: LD_ADDR_VAR 0 24
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58319: LD_ADDR_VAR 0 25
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58593: LD_ADDR_VAR 0 26
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58869: LD_ADDR_VAR 0 27
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59149: LD_ADDR_VAR 0 28
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 3
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59431: LD_ADDR_VAR 0 29
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59710: LD_ADDR_VAR 0 30
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59988: LD_ADDR_VAR 0 31
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60266: LD_ADDR_VAR 0 32
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60544: LD_ADDR_VAR 0 33
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60823: LD_ADDR_VAR 0 34
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61103: LD_ADDR_VAR 0 35
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61215: LD_ADDR_VAR 0 36
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61327: LD_ADDR_VAR 0 37
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61439: LD_ADDR_VAR 0 38
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61551: LD_ADDR_VAR 0 39
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61663: LD_ADDR_VAR 0 40
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61775: LD_ADDR_VAR 0 41
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 2
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 3
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62125: LD_ADDR_VAR 0 42
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62475: LD_ADDR_VAR 0 43
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 3
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62823: LD_ADDR_VAR 0 44
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 3
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63173: LD_ADDR_VAR 0 45
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: NEG
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 3
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: LD_INT 3
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 3
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: NEG
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63523: LD_ADDR_VAR 0 46
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63871: LD_ADDR_VAR 0 47
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64022: LD_ADDR_VAR 0 48
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64169: LD_ADDR_VAR 0 49
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64313: LD_ADDR_VAR 0 50
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64457: LD_ADDR_VAR 0 51
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64604: LD_ADDR_VAR 0 52
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64755: LD_ADDR_VAR 0 53
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 2
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64985: LD_ADDR_VAR 0 54
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65215: LD_ADDR_VAR 0 55
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65445: LD_ADDR_VAR 0 56
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65675: LD_ADDR_VAR 0 57
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 1
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65905: LD_ADDR_VAR 0 58
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 1
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: LD_INT 2
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66135: LD_ADDR_VAR 0 59
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 1
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66223: LD_ADDR_VAR 0 60
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66311: LD_ADDR_VAR 0 61
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66399: LD_ADDR_VAR 0 62
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66487: LD_ADDR_VAR 0 63
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66575: LD_ADDR_VAR 0 64
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// end ; 1 :
66663: GO 72560
66665: LD_INT 1
66667: DOUBLE
66668: EQUAL
66669: IFTRUE 66673
66671: GO 69296
66673: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66674: LD_ADDR_VAR 0 11
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66718: LD_ADDR_VAR 0 12
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66759: LD_ADDR_VAR 0 13
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66799: LD_ADDR_VAR 0 14
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66840: LD_ADDR_VAR 0 15
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66884: LD_ADDR_VAR 0 16
66888: PUSH
66889: LD_INT 2
66891: NEG
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: NEG
66904: PUSH
66905: LD_INT 2
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: LD_INT 3
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: LIST
66929: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66930: LD_ADDR_VAR 0 17
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: LD_INT 2
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66974: LD_ADDR_VAR 0 18
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67015: LD_ADDR_VAR 0 19
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: LD_INT 3
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67055: LD_ADDR_VAR 0 20
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 3
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67096: LD_ADDR_VAR 0 21
67100: PUSH
67101: LD_INT 2
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: LIST
67139: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67140: LD_ADDR_VAR 0 22
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67186: LD_ADDR_VAR 0 23
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: LD_INT 3
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: LD_INT 4
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67230: LD_ADDR_VAR 0 24
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 1
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: LIST
67270: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67271: LD_ADDR_VAR 0 25
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: LD_INT 4
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67311: LD_ADDR_VAR 0 26
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67352: LD_ADDR_VAR 0 27
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: NEG
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67396: LD_ADDR_VAR 0 28
67400: PUSH
67401: LD_INT 3
67403: NEG
67404: PUSH
67405: LD_INT 3
67407: NEG
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: LD_INT 4
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 4
67427: NEG
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67442: LD_ADDR_VAR 0 29
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: LD_INT 3
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: LD_INT 5
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: LD_INT 5
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: PUSH
67541: LD_INT 4
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: LD_INT 6
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 6
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: LD_INT 5
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67597: LD_ADDR_VAR 0 30
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 3
67625: PUSH
67626: LD_INT 1
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 5
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 5
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 6
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 6
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67740: LD_ADDR_VAR 0 31
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: LD_INT 4
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 5
67807: PUSH
67808: LD_INT 4
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 5
67817: PUSH
67818: LD_INT 5
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 4
67827: PUSH
67828: LD_INT 5
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 6
67837: PUSH
67838: LD_INT 5
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 6
67847: PUSH
67848: LD_INT 6
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 5
67857: PUSH
67858: LD_INT 6
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67879: LD_ADDR_VAR 0 32
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 4
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 5
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: LD_INT 6
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 6
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68022: LD_ADDR_VAR 0 33
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: LD_INT 1
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 4
68085: NEG
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: LD_INT 1
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 5
68108: NEG
68109: PUSH
68110: LD_INT 0
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 5
68119: NEG
68120: PUSH
68121: LD_INT 1
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 5
68131: NEG
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 6
68142: NEG
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 6
68153: NEG
68154: PUSH
68155: LD_INT 1
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68177: LD_ADDR_VAR 0 34
68181: PUSH
68182: LD_INT 2
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: NEG
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 3
68220: NEG
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 4
68232: NEG
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: LD_INT 4
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 4
68256: NEG
68257: PUSH
68258: LD_INT 5
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 5
68268: NEG
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 5
68280: NEG
68281: PUSH
68282: LD_INT 5
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: LD_INT 6
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 6
68304: NEG
68305: PUSH
68306: LD_INT 5
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 6
68316: NEG
68317: PUSH
68318: LD_INT 6
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68340: LD_ADDR_VAR 0 41
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: LD_INT 2
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68384: LD_ADDR_VAR 0 42
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 3
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68425: LD_ADDR_VAR 0 43
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 2
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 2
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68465: LD_ADDR_VAR 0 44
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: LD_INT 3
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: LIST
68505: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68506: LD_ADDR_VAR 0 45
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 3
68535: NEG
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68550: LD_ADDR_VAR 0 46
68554: PUSH
68555: LD_INT 2
68557: NEG
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: LD_INT 3
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68596: LD_ADDR_VAR 0 47
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: LD_INT 3
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68629: LD_ADDR_VAR 0 48
68633: PUSH
68634: LD_INT 1
68636: PUSH
68637: LD_INT 2
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68660: LD_ADDR_VAR 0 49
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68689: LD_ADDR_VAR 0 50
68693: PUSH
68694: LD_INT 2
68696: PUSH
68697: LD_INT 3
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68718: LD_ADDR_VAR 0 51
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: LD_INT 2
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 2
68736: NEG
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68749: LD_ADDR_VAR 0 52
68753: PUSH
68754: LD_INT 3
68756: NEG
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: LD_INT 2
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68782: LD_ADDR_VAR 0 53
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 3
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68826: LD_ADDR_VAR 0 54
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68867: LD_ADDR_VAR 0 55
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68907: LD_ADDR_VAR 0 56
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68948: LD_ADDR_VAR 0 57
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68992: LD_ADDR_VAR 0 58
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69038: LD_ADDR_VAR 0 59
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: LD_INT 1
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: LIST
69081: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69082: LD_ADDR_VAR 0 60
69086: PUSH
69087: LD_INT 1
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69123: LD_ADDR_VAR 0 61
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 2
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 2
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69163: LD_ADDR_VAR 0 62
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: LD_INT 2
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: LD_INT 2
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: LIST
69203: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69204: LD_ADDR_VAR 0 63
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 2
69222: NEG
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 2
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: LIST
69247: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69248: LD_ADDR_VAR 0 64
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: LD_INT 2
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// end ; 2 :
69294: GO 72560
69296: LD_INT 2
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69304
69302: GO 72559
69304: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69305: LD_ADDR_VAR 0 29
69309: PUSH
69310: LD_INT 4
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 4
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 5
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 5
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 4
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 3
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 5
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 4
69435: PUSH
69436: LD_INT 4
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: LD_INT 4
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 2
69455: PUSH
69456: LD_INT 3
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 2
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: PUSH
69476: LD_INT 2
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 2
69485: PUSH
69486: LD_INT 4
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 0
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 1
69515: PUSH
69516: LD_INT 4
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: LD_INT 5
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: NEG
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 2
69567: PUSH
69568: LD_INT 5
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 3
69599: NEG
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: NEG
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: LD_INT 1
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 4
69667: NEG
69668: PUSH
69669: LD_INT 2
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: NEG
69691: PUSH
69692: LD_INT 4
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 4
69702: NEG
69703: PUSH
69704: LD_INT 5
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 4
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 3
69726: NEG
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 4
69738: NEG
69739: PUSH
69740: LD_INT 3
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 5
69750: NEG
69751: PUSH
69752: LD_INT 4
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 5
69762: NEG
69763: PUSH
69764: LD_INT 5
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 3
69774: NEG
69775: PUSH
69776: LD_INT 5
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 5
69786: NEG
69787: PUSH
69788: LD_INT 3
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69843: LD_ADDR_VAR 0 30
69847: PUSH
69848: LD_INT 4
69850: PUSH
69851: LD_INT 4
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 4
69860: PUSH
69861: LD_INT 3
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 5
69870: PUSH
69871: LD_INT 4
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 5
69880: PUSH
69881: LD_INT 5
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 4
69890: PUSH
69891: LD_INT 5
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: LD_INT 3
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 5
69920: PUSH
69921: LD_INT 3
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: PUSH
69931: LD_INT 5
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: LD_INT 3
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: LD_INT 2
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 1
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: LD_INT 4
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: LD_INT 2
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 2
70022: NEG
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 4
70044: NEG
70045: PUSH
70046: LD_INT 1
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: NEG
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: NEG
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 4
70078: NEG
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 5
70089: NEG
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 5
70100: NEG
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 5
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 2
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: LD_INT 3
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: LD_INT 4
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: LD_INT 3
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: LD_INT 2
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: LD_INT 2
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 4
70195: NEG
70196: PUSH
70197: LD_INT 3
70199: NEG
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 4
70207: NEG
70208: PUSH
70209: LD_INT 4
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: NEG
70220: PUSH
70221: LD_INT 4
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 4
70231: NEG
70232: PUSH
70233: LD_INT 2
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: LD_INT 4
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 5
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: LD_INT 4
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_INT 3
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: LD_INT 4
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 5
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 2
70322: PUSH
70323: LD_INT 3
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 2
70333: NEG
70334: PUSH
70335: LD_INT 5
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70390: LD_ADDR_VAR 0 31
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: LD_INT 4
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: PUSH
70418: LD_INT 4
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: LD_INT 5
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: LD_INT 4
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 1
70458: NEG
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 5
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: NEG
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 3
70501: NEG
70502: PUSH
70503: LD_INT 1
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 2
70524: NEG
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 3
70535: NEG
70536: PUSH
70537: LD_INT 1
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: NEG
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 4
70557: NEG
70558: PUSH
70559: LD_INT 1
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 4
70569: NEG
70570: PUSH
70571: LD_INT 2
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 2
70581: NEG
70582: PUSH
70583: LD_INT 2
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 4
70592: NEG
70593: PUSH
70594: LD_INT 4
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 4
70604: NEG
70605: PUSH
70606: LD_INT 5
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: LD_INT 4
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: LD_INT 3
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 4
70640: NEG
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 5
70652: NEG
70653: PUSH
70654: LD_INT 4
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 5
70664: NEG
70665: PUSH
70666: LD_INT 5
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: NEG
70677: PUSH
70678: LD_INT 5
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 5
70688: NEG
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: LD_INT 3
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: LD_INT 4
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: PUSH
70734: LD_INT 2
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 2
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 1
70767: NEG
70768: PUSH
70769: LD_INT 4
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 2
70779: PUSH
70780: LD_INT 2
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: LD_INT 4
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 4
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: LD_INT 1
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 5
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 5
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 4
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 3
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 3
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 5
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70940: LD_ADDR_VAR 0 32
70944: PUSH
70945: LD_INT 4
70947: NEG
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: NEG
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 4
70992: NEG
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 5
71003: NEG
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: NEG
71015: PUSH
71016: LD_INT 1
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 5
71026: NEG
71027: PUSH
71028: LD_INT 2
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 3
71049: NEG
71050: PUSH
71051: LD_INT 3
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 3
71061: NEG
71062: PUSH
71063: LD_INT 4
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 2
71073: NEG
71074: PUSH
71075: LD_INT 3
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: LD_INT 2
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: NEG
71098: PUSH
71099: LD_INT 2
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 4
71109: NEG
71110: PUSH
71111: LD_INT 3
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 4
71121: NEG
71122: PUSH
71123: LD_INT 4
71125: NEG
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 2
71133: NEG
71134: PUSH
71135: LD_INT 4
71137: NEG
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 4
71145: NEG
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: LD_INT 4
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 5
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: LD_INT 4
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 1
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 0
71201: PUSH
71202: LD_INT 3
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 1
71212: NEG
71213: PUSH
71214: LD_INT 4
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 1
71224: NEG
71225: PUSH
71226: LD_INT 5
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 3
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 2
71247: NEG
71248: PUSH
71249: LD_INT 5
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 4
71290: PUSH
71291: LD_INT 1
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 3
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 2
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: LD_INT 2
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 4
71342: PUSH
71343: LD_INT 2
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 4
71352: PUSH
71353: LD_INT 4
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 4
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 5
71372: PUSH
71373: LD_INT 4
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 5
71382: PUSH
71383: LD_INT 5
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 4
71392: PUSH
71393: LD_INT 5
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 3
71402: PUSH
71403: LD_INT 4
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 5
71422: PUSH
71423: LD_INT 3
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: PUSH
71433: LD_INT 5
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71487: LD_ADDR_VAR 0 33
71491: PUSH
71492: LD_INT 4
71494: NEG
71495: PUSH
71496: LD_INT 4
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 4
71506: NEG
71507: PUSH
71508: LD_INT 5
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 3
71518: NEG
71519: PUSH
71520: LD_INT 4
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 3
71530: NEG
71531: PUSH
71532: LD_INT 3
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 4
71542: NEG
71543: PUSH
71544: LD_INT 3
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 5
71554: NEG
71555: PUSH
71556: LD_INT 4
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 5
71566: NEG
71567: PUSH
71568: LD_INT 5
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: LD_INT 5
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 5
71590: NEG
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 0
71602: PUSH
71603: LD_INT 3
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 0
71613: PUSH
71614: LD_INT 4
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: LD_INT 3
71627: NEG
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 1
71635: PUSH
71636: LD_INT 2
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: LD_INT 2
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: NEG
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 4
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 2
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 2
71692: NEG
71693: PUSH
71694: LD_INT 4
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 4
71704: PUSH
71705: LD_INT 0
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 4
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 5
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 5
71735: PUSH
71736: LD_INT 1
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 4
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 3
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: LD_INT 1
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: LD_INT 2
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 5
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 3
71797: PUSH
71798: LD_INT 3
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 3
71807: PUSH
71808: LD_INT 2
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 4
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 4
71827: PUSH
71828: LD_INT 4
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 3
71837: PUSH
71838: LD_INT 4
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 2
71847: PUSH
71848: LD_INT 3
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 2
71857: PUSH
71858: LD_INT 2
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: LD_INT 2
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: LD_INT 4
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 0
71887: PUSH
71888: LD_INT 4
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 3
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 1
71907: PUSH
71908: LD_INT 4
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 1
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: LD_INT 5
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 1
71937: NEG
71938: PUSH
71939: LD_INT 4
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 1
71948: NEG
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 2
71959: PUSH
71960: LD_INT 5
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 2
71969: NEG
71970: PUSH
71971: LD_INT 3
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72025: LD_ADDR_VAR 0 34
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 4
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: LD_INT 5
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: PUSH
72066: LD_INT 3
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 3
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 1
72087: NEG
72088: PUSH
72089: LD_INT 4
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 1
72099: NEG
72100: PUSH
72101: LD_INT 5
72103: NEG
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: LD_INT 3
72114: NEG
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 5
72126: NEG
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 3
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 3
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 4
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 4
72165: PUSH
72166: LD_INT 1
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 3
72175: PUSH
72176: LD_INT 1
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 2
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: LD_INT 1
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 2
72206: PUSH
72207: LD_INT 2
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 4
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 4
72227: PUSH
72228: LD_INT 4
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 4
72237: PUSH
72238: LD_INT 3
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 5
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 5
72257: PUSH
72258: LD_INT 5
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 4
72267: PUSH
72268: LD_INT 5
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: LD_INT 4
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 3
72287: PUSH
72288: LD_INT 3
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 5
72297: PUSH
72298: LD_INT 3
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 3
72307: PUSH
72308: LD_INT 5
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: LD_INT 2
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: LD_INT 3
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 1
72347: PUSH
72348: LD_INT 4
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 4
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 1
72367: NEG
72368: PUSH
72369: LD_INT 3
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 1
72378: NEG
72379: PUSH
72380: LD_INT 2
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 2
72389: PUSH
72390: LD_INT 4
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 2
72399: NEG
72400: PUSH
72401: LD_INT 2
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 4
72410: NEG
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 4
72421: NEG
72422: PUSH
72423: LD_INT 1
72425: NEG
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 3
72433: NEG
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 3
72444: NEG
72445: PUSH
72446: LD_INT 1
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 4
72455: NEG
72456: PUSH
72457: LD_INT 1
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 5
72466: NEG
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 5
72477: NEG
72478: PUSH
72479: LD_INT 1
72481: NEG
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 5
72489: NEG
72490: PUSH
72491: LD_INT 2
72493: NEG
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 3
72501: NEG
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: ST_TO_ADDR
// end ; end ;
72557: GO 72560
72559: POP
// case btype of b_depot , b_warehouse :
72560: LD_VAR 0 1
72564: PUSH
72565: LD_INT 0
72567: DOUBLE
72568: EQUAL
72569: IFTRUE 72579
72571: LD_INT 1
72573: DOUBLE
72574: EQUAL
72575: IFTRUE 72579
72577: GO 72780
72579: POP
// case nation of nation_american :
72580: LD_VAR 0 5
72584: PUSH
72585: LD_INT 1
72587: DOUBLE
72588: EQUAL
72589: IFTRUE 72593
72591: GO 72649
72593: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72594: LD_ADDR_VAR 0 9
72598: PUSH
72599: LD_VAR 0 11
72603: PUSH
72604: LD_VAR 0 12
72608: PUSH
72609: LD_VAR 0 13
72613: PUSH
72614: LD_VAR 0 14
72618: PUSH
72619: LD_VAR 0 15
72623: PUSH
72624: LD_VAR 0 16
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: PUSH
72637: LD_VAR 0 4
72641: PUSH
72642: LD_INT 1
72644: PLUS
72645: ARRAY
72646: ST_TO_ADDR
72647: GO 72778
72649: LD_INT 2
72651: DOUBLE
72652: EQUAL
72653: IFTRUE 72657
72655: GO 72713
72657: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72658: LD_ADDR_VAR 0 9
72662: PUSH
72663: LD_VAR 0 17
72667: PUSH
72668: LD_VAR 0 18
72672: PUSH
72673: LD_VAR 0 19
72677: PUSH
72678: LD_VAR 0 20
72682: PUSH
72683: LD_VAR 0 21
72687: PUSH
72688: LD_VAR 0 22
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: PUSH
72701: LD_VAR 0 4
72705: PUSH
72706: LD_INT 1
72708: PLUS
72709: ARRAY
72710: ST_TO_ADDR
72711: GO 72778
72713: LD_INT 3
72715: DOUBLE
72716: EQUAL
72717: IFTRUE 72721
72719: GO 72777
72721: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72722: LD_ADDR_VAR 0 9
72726: PUSH
72727: LD_VAR 0 23
72731: PUSH
72732: LD_VAR 0 24
72736: PUSH
72737: LD_VAR 0 25
72741: PUSH
72742: LD_VAR 0 26
72746: PUSH
72747: LD_VAR 0 27
72751: PUSH
72752: LD_VAR 0 28
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: PUSH
72765: LD_VAR 0 4
72769: PUSH
72770: LD_INT 1
72772: PLUS
72773: ARRAY
72774: ST_TO_ADDR
72775: GO 72778
72777: POP
72778: GO 73333
72780: LD_INT 2
72782: DOUBLE
72783: EQUAL
72784: IFTRUE 72794
72786: LD_INT 3
72788: DOUBLE
72789: EQUAL
72790: IFTRUE 72794
72792: GO 72850
72794: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72795: LD_ADDR_VAR 0 9
72799: PUSH
72800: LD_VAR 0 29
72804: PUSH
72805: LD_VAR 0 30
72809: PUSH
72810: LD_VAR 0 31
72814: PUSH
72815: LD_VAR 0 32
72819: PUSH
72820: LD_VAR 0 33
72824: PUSH
72825: LD_VAR 0 34
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: PUSH
72838: LD_VAR 0 4
72842: PUSH
72843: LD_INT 1
72845: PLUS
72846: ARRAY
72847: ST_TO_ADDR
72848: GO 73333
72850: LD_INT 16
72852: DOUBLE
72853: EQUAL
72854: IFTRUE 72912
72856: LD_INT 17
72858: DOUBLE
72859: EQUAL
72860: IFTRUE 72912
72862: LD_INT 18
72864: DOUBLE
72865: EQUAL
72866: IFTRUE 72912
72868: LD_INT 19
72870: DOUBLE
72871: EQUAL
72872: IFTRUE 72912
72874: LD_INT 22
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72912
72880: LD_INT 20
72882: DOUBLE
72883: EQUAL
72884: IFTRUE 72912
72886: LD_INT 21
72888: DOUBLE
72889: EQUAL
72890: IFTRUE 72912
72892: LD_INT 23
72894: DOUBLE
72895: EQUAL
72896: IFTRUE 72912
72898: LD_INT 24
72900: DOUBLE
72901: EQUAL
72902: IFTRUE 72912
72904: LD_INT 25
72906: DOUBLE
72907: EQUAL
72908: IFTRUE 72912
72910: GO 72968
72912: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72913: LD_ADDR_VAR 0 9
72917: PUSH
72918: LD_VAR 0 35
72922: PUSH
72923: LD_VAR 0 36
72927: PUSH
72928: LD_VAR 0 37
72932: PUSH
72933: LD_VAR 0 38
72937: PUSH
72938: LD_VAR 0 39
72942: PUSH
72943: LD_VAR 0 40
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: PUSH
72956: LD_VAR 0 4
72960: PUSH
72961: LD_INT 1
72963: PLUS
72964: ARRAY
72965: ST_TO_ADDR
72966: GO 73333
72968: LD_INT 6
72970: DOUBLE
72971: EQUAL
72972: IFTRUE 73024
72974: LD_INT 7
72976: DOUBLE
72977: EQUAL
72978: IFTRUE 73024
72980: LD_INT 8
72982: DOUBLE
72983: EQUAL
72984: IFTRUE 73024
72986: LD_INT 13
72988: DOUBLE
72989: EQUAL
72990: IFTRUE 73024
72992: LD_INT 12
72994: DOUBLE
72995: EQUAL
72996: IFTRUE 73024
72998: LD_INT 15
73000: DOUBLE
73001: EQUAL
73002: IFTRUE 73024
73004: LD_INT 11
73006: DOUBLE
73007: EQUAL
73008: IFTRUE 73024
73010: LD_INT 14
73012: DOUBLE
73013: EQUAL
73014: IFTRUE 73024
73016: LD_INT 10
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73024
73022: GO 73080
73024: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73025: LD_ADDR_VAR 0 9
73029: PUSH
73030: LD_VAR 0 41
73034: PUSH
73035: LD_VAR 0 42
73039: PUSH
73040: LD_VAR 0 43
73044: PUSH
73045: LD_VAR 0 44
73049: PUSH
73050: LD_VAR 0 45
73054: PUSH
73055: LD_VAR 0 46
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: PUSH
73068: LD_VAR 0 4
73072: PUSH
73073: LD_INT 1
73075: PLUS
73076: ARRAY
73077: ST_TO_ADDR
73078: GO 73333
73080: LD_INT 36
73082: DOUBLE
73083: EQUAL
73084: IFTRUE 73088
73086: GO 73144
73088: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73089: LD_ADDR_VAR 0 9
73093: PUSH
73094: LD_VAR 0 47
73098: PUSH
73099: LD_VAR 0 48
73103: PUSH
73104: LD_VAR 0 49
73108: PUSH
73109: LD_VAR 0 50
73113: PUSH
73114: LD_VAR 0 51
73118: PUSH
73119: LD_VAR 0 52
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: PUSH
73132: LD_VAR 0 4
73136: PUSH
73137: LD_INT 1
73139: PLUS
73140: ARRAY
73141: ST_TO_ADDR
73142: GO 73333
73144: LD_INT 4
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73170
73150: LD_INT 5
73152: DOUBLE
73153: EQUAL
73154: IFTRUE 73170
73156: LD_INT 34
73158: DOUBLE
73159: EQUAL
73160: IFTRUE 73170
73162: LD_INT 37
73164: DOUBLE
73165: EQUAL
73166: IFTRUE 73170
73168: GO 73226
73170: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73171: LD_ADDR_VAR 0 9
73175: PUSH
73176: LD_VAR 0 53
73180: PUSH
73181: LD_VAR 0 54
73185: PUSH
73186: LD_VAR 0 55
73190: PUSH
73191: LD_VAR 0 56
73195: PUSH
73196: LD_VAR 0 57
73200: PUSH
73201: LD_VAR 0 58
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: PUSH
73214: LD_VAR 0 4
73218: PUSH
73219: LD_INT 1
73221: PLUS
73222: ARRAY
73223: ST_TO_ADDR
73224: GO 73333
73226: LD_INT 31
73228: DOUBLE
73229: EQUAL
73230: IFTRUE 73276
73232: LD_INT 32
73234: DOUBLE
73235: EQUAL
73236: IFTRUE 73276
73238: LD_INT 33
73240: DOUBLE
73241: EQUAL
73242: IFTRUE 73276
73244: LD_INT 27
73246: DOUBLE
73247: EQUAL
73248: IFTRUE 73276
73250: LD_INT 26
73252: DOUBLE
73253: EQUAL
73254: IFTRUE 73276
73256: LD_INT 28
73258: DOUBLE
73259: EQUAL
73260: IFTRUE 73276
73262: LD_INT 29
73264: DOUBLE
73265: EQUAL
73266: IFTRUE 73276
73268: LD_INT 30
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73276
73274: GO 73332
73276: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73277: LD_ADDR_VAR 0 9
73281: PUSH
73282: LD_VAR 0 59
73286: PUSH
73287: LD_VAR 0 60
73291: PUSH
73292: LD_VAR 0 61
73296: PUSH
73297: LD_VAR 0 62
73301: PUSH
73302: LD_VAR 0 63
73306: PUSH
73307: LD_VAR 0 64
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: PUSH
73320: LD_VAR 0 4
73324: PUSH
73325: LD_INT 1
73327: PLUS
73328: ARRAY
73329: ST_TO_ADDR
73330: GO 73333
73332: POP
// temp_list2 = [ ] ;
73333: LD_ADDR_VAR 0 10
73337: PUSH
73338: EMPTY
73339: ST_TO_ADDR
// for i in temp_list do
73340: LD_ADDR_VAR 0 8
73344: PUSH
73345: LD_VAR 0 9
73349: PUSH
73350: FOR_IN
73351: IFFALSE 73403
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73353: LD_ADDR_VAR 0 10
73357: PUSH
73358: LD_VAR 0 10
73362: PUSH
73363: LD_VAR 0 8
73367: PUSH
73368: LD_INT 1
73370: ARRAY
73371: PUSH
73372: LD_VAR 0 2
73376: PLUS
73377: PUSH
73378: LD_VAR 0 8
73382: PUSH
73383: LD_INT 2
73385: ARRAY
73386: PUSH
73387: LD_VAR 0 3
73391: PLUS
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: EMPTY
73398: LIST
73399: ADD
73400: ST_TO_ADDR
73401: GO 73350
73403: POP
73404: POP
// result = temp_list2 ;
73405: LD_ADDR_VAR 0 7
73409: PUSH
73410: LD_VAR 0 10
73414: ST_TO_ADDR
// end ;
73415: LD_VAR 0 7
73419: RET
// export function EnemyInRange ( unit , dist ) ; begin
73420: LD_INT 0
73422: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73423: LD_ADDR_VAR 0 3
73427: PUSH
73428: LD_VAR 0 1
73432: PPUSH
73433: CALL_OW 255
73437: PPUSH
73438: LD_VAR 0 1
73442: PPUSH
73443: CALL_OW 250
73447: PPUSH
73448: LD_VAR 0 1
73452: PPUSH
73453: CALL_OW 251
73457: PPUSH
73458: LD_VAR 0 2
73462: PPUSH
73463: CALL 46793 0 4
73467: PUSH
73468: LD_INT 4
73470: ARRAY
73471: ST_TO_ADDR
// end ;
73472: LD_VAR 0 3
73476: RET
// export function PlayerSeeMe ( unit ) ; begin
73477: LD_INT 0
73479: PPUSH
// result := See ( your_side , unit ) ;
73480: LD_ADDR_VAR 0 2
73484: PUSH
73485: LD_OWVAR 2
73489: PPUSH
73490: LD_VAR 0 1
73494: PPUSH
73495: CALL_OW 292
73499: ST_TO_ADDR
// end ;
73500: LD_VAR 0 2
73504: RET
// export function ReverseDir ( unit ) ; begin
73505: LD_INT 0
73507: PPUSH
// if not unit then
73508: LD_VAR 0 1
73512: NOT
73513: IFFALSE 73517
// exit ;
73515: GO 73540
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73517: LD_ADDR_VAR 0 2
73521: PUSH
73522: LD_VAR 0 1
73526: PPUSH
73527: CALL_OW 254
73531: PUSH
73532: LD_INT 3
73534: PLUS
73535: PUSH
73536: LD_INT 6
73538: MOD
73539: ST_TO_ADDR
// end ;
73540: LD_VAR 0 2
73544: RET
// export function ReverseArray ( array ) ; var i ; begin
73545: LD_INT 0
73547: PPUSH
73548: PPUSH
// if not array then
73549: LD_VAR 0 1
73553: NOT
73554: IFFALSE 73558
// exit ;
73556: GO 73613
// result := [ ] ;
73558: LD_ADDR_VAR 0 2
73562: PUSH
73563: EMPTY
73564: ST_TO_ADDR
// for i := array downto 1 do
73565: LD_ADDR_VAR 0 3
73569: PUSH
73570: DOUBLE
73571: LD_VAR 0 1
73575: INC
73576: ST_TO_ADDR
73577: LD_INT 1
73579: PUSH
73580: FOR_DOWNTO
73581: IFFALSE 73611
// result := Join ( result , array [ i ] ) ;
73583: LD_ADDR_VAR 0 2
73587: PUSH
73588: LD_VAR 0 2
73592: PPUSH
73593: LD_VAR 0 1
73597: PUSH
73598: LD_VAR 0 3
73602: ARRAY
73603: PPUSH
73604: CALL 78258 0 2
73608: ST_TO_ADDR
73609: GO 73580
73611: POP
73612: POP
// end ;
73613: LD_VAR 0 2
73617: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73618: LD_INT 0
73620: PPUSH
73621: PPUSH
73622: PPUSH
73623: PPUSH
73624: PPUSH
73625: PPUSH
// if not unit or not hexes then
73626: LD_VAR 0 1
73630: NOT
73631: PUSH
73632: LD_VAR 0 2
73636: NOT
73637: OR
73638: IFFALSE 73642
// exit ;
73640: GO 73765
// dist := 9999 ;
73642: LD_ADDR_VAR 0 5
73646: PUSH
73647: LD_INT 9999
73649: ST_TO_ADDR
// for i = 1 to hexes do
73650: LD_ADDR_VAR 0 4
73654: PUSH
73655: DOUBLE
73656: LD_INT 1
73658: DEC
73659: ST_TO_ADDR
73660: LD_VAR 0 2
73664: PUSH
73665: FOR_TO
73666: IFFALSE 73753
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73668: LD_ADDR_VAR 0 6
73672: PUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: LD_VAR 0 2
73682: PUSH
73683: LD_VAR 0 4
73687: ARRAY
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PPUSH
73693: LD_VAR 0 2
73697: PUSH
73698: LD_VAR 0 4
73702: ARRAY
73703: PUSH
73704: LD_INT 2
73706: ARRAY
73707: PPUSH
73708: CALL_OW 297
73712: ST_TO_ADDR
// if tdist < dist then
73713: LD_VAR 0 6
73717: PUSH
73718: LD_VAR 0 5
73722: LESS
73723: IFFALSE 73751
// begin hex := hexes [ i ] ;
73725: LD_ADDR_VAR 0 8
73729: PUSH
73730: LD_VAR 0 2
73734: PUSH
73735: LD_VAR 0 4
73739: ARRAY
73740: ST_TO_ADDR
// dist := tdist ;
73741: LD_ADDR_VAR 0 5
73745: PUSH
73746: LD_VAR 0 6
73750: ST_TO_ADDR
// end ; end ;
73751: GO 73665
73753: POP
73754: POP
// result := hex ;
73755: LD_ADDR_VAR 0 3
73759: PUSH
73760: LD_VAR 0 8
73764: ST_TO_ADDR
// end ;
73765: LD_VAR 0 3
73769: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73770: LD_INT 0
73772: PPUSH
73773: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73774: LD_VAR 0 1
73778: NOT
73779: PUSH
73780: LD_VAR 0 1
73784: PUSH
73785: LD_INT 21
73787: PUSH
73788: LD_INT 2
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 23
73797: PUSH
73798: LD_INT 2
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PPUSH
73809: CALL_OW 69
73813: IN
73814: NOT
73815: OR
73816: IFFALSE 73820
// exit ;
73818: GO 73867
// for i = 1 to 3 do
73820: LD_ADDR_VAR 0 3
73824: PUSH
73825: DOUBLE
73826: LD_INT 1
73828: DEC
73829: ST_TO_ADDR
73830: LD_INT 3
73832: PUSH
73833: FOR_TO
73834: IFFALSE 73865
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73836: LD_VAR 0 1
73840: PPUSH
73841: CALL_OW 250
73845: PPUSH
73846: LD_VAR 0 1
73850: PPUSH
73851: CALL_OW 251
73855: PPUSH
73856: LD_INT 1
73858: PPUSH
73859: CALL_OW 453
73863: GO 73833
73865: POP
73866: POP
// end ;
73867: LD_VAR 0 2
73871: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73872: LD_INT 0
73874: PPUSH
73875: PPUSH
73876: PPUSH
73877: PPUSH
73878: PPUSH
73879: PPUSH
// if not unit or not enemy_unit then
73880: LD_VAR 0 1
73884: NOT
73885: PUSH
73886: LD_VAR 0 2
73890: NOT
73891: OR
73892: IFFALSE 73896
// exit ;
73894: GO 74363
// if GetLives ( i ) < 250 then
73896: LD_VAR 0 4
73900: PPUSH
73901: CALL_OW 256
73905: PUSH
73906: LD_INT 250
73908: LESS
73909: IFFALSE 73922
// begin ComAutodestruct ( i ) ;
73911: LD_VAR 0 4
73915: PPUSH
73916: CALL 73770 0 1
// exit ;
73920: GO 74363
// end ; x := GetX ( enemy_unit ) ;
73922: LD_ADDR_VAR 0 7
73926: PUSH
73927: LD_VAR 0 2
73931: PPUSH
73932: CALL_OW 250
73936: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73937: LD_ADDR_VAR 0 8
73941: PUSH
73942: LD_VAR 0 2
73946: PPUSH
73947: CALL_OW 251
73951: ST_TO_ADDR
// if not x or not y then
73952: LD_VAR 0 7
73956: NOT
73957: PUSH
73958: LD_VAR 0 8
73962: NOT
73963: OR
73964: IFFALSE 73968
// exit ;
73966: GO 74363
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73968: LD_ADDR_VAR 0 6
73972: PUSH
73973: LD_VAR 0 7
73977: PPUSH
73978: LD_INT 0
73980: PPUSH
73981: LD_INT 4
73983: PPUSH
73984: CALL_OW 272
73988: PUSH
73989: LD_VAR 0 8
73993: PPUSH
73994: LD_INT 0
73996: PPUSH
73997: LD_INT 4
73999: PPUSH
74000: CALL_OW 273
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_VAR 0 7
74013: PPUSH
74014: LD_INT 1
74016: PPUSH
74017: LD_INT 4
74019: PPUSH
74020: CALL_OW 272
74024: PUSH
74025: LD_VAR 0 8
74029: PPUSH
74030: LD_INT 1
74032: PPUSH
74033: LD_INT 4
74035: PPUSH
74036: CALL_OW 273
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_VAR 0 7
74049: PPUSH
74050: LD_INT 2
74052: PPUSH
74053: LD_INT 4
74055: PPUSH
74056: CALL_OW 272
74060: PUSH
74061: LD_VAR 0 8
74065: PPUSH
74066: LD_INT 2
74068: PPUSH
74069: LD_INT 4
74071: PPUSH
74072: CALL_OW 273
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_VAR 0 7
74085: PPUSH
74086: LD_INT 3
74088: PPUSH
74089: LD_INT 4
74091: PPUSH
74092: CALL_OW 272
74096: PUSH
74097: LD_VAR 0 8
74101: PPUSH
74102: LD_INT 3
74104: PPUSH
74105: LD_INT 4
74107: PPUSH
74108: CALL_OW 273
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_VAR 0 7
74121: PPUSH
74122: LD_INT 4
74124: PPUSH
74125: LD_INT 4
74127: PPUSH
74128: CALL_OW 272
74132: PUSH
74133: LD_VAR 0 8
74137: PPUSH
74138: LD_INT 4
74140: PPUSH
74141: LD_INT 4
74143: PPUSH
74144: CALL_OW 273
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_VAR 0 7
74157: PPUSH
74158: LD_INT 5
74160: PPUSH
74161: LD_INT 4
74163: PPUSH
74164: CALL_OW 272
74168: PUSH
74169: LD_VAR 0 8
74173: PPUSH
74174: LD_INT 5
74176: PPUSH
74177: LD_INT 4
74179: PPUSH
74180: CALL_OW 273
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: ST_TO_ADDR
// for i = tmp downto 1 do
74197: LD_ADDR_VAR 0 4
74201: PUSH
74202: DOUBLE
74203: LD_VAR 0 6
74207: INC
74208: ST_TO_ADDR
74209: LD_INT 1
74211: PUSH
74212: FOR_DOWNTO
74213: IFFALSE 74314
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74215: LD_VAR 0 6
74219: PUSH
74220: LD_VAR 0 4
74224: ARRAY
74225: PUSH
74226: LD_INT 1
74228: ARRAY
74229: PPUSH
74230: LD_VAR 0 6
74234: PUSH
74235: LD_VAR 0 4
74239: ARRAY
74240: PUSH
74241: LD_INT 2
74243: ARRAY
74244: PPUSH
74245: CALL_OW 488
74249: NOT
74250: PUSH
74251: LD_VAR 0 6
74255: PUSH
74256: LD_VAR 0 4
74260: ARRAY
74261: PUSH
74262: LD_INT 1
74264: ARRAY
74265: PPUSH
74266: LD_VAR 0 6
74270: PUSH
74271: LD_VAR 0 4
74275: ARRAY
74276: PUSH
74277: LD_INT 2
74279: ARRAY
74280: PPUSH
74281: CALL_OW 428
74285: PUSH
74286: LD_INT 0
74288: NONEQUAL
74289: OR
74290: IFFALSE 74312
// tmp := Delete ( tmp , i ) ;
74292: LD_ADDR_VAR 0 6
74296: PUSH
74297: LD_VAR 0 6
74301: PPUSH
74302: LD_VAR 0 4
74306: PPUSH
74307: CALL_OW 3
74311: ST_TO_ADDR
74312: GO 74212
74314: POP
74315: POP
// j := GetClosestHex ( unit , tmp ) ;
74316: LD_ADDR_VAR 0 5
74320: PUSH
74321: LD_VAR 0 1
74325: PPUSH
74326: LD_VAR 0 6
74330: PPUSH
74331: CALL 73618 0 2
74335: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74336: LD_VAR 0 1
74340: PPUSH
74341: LD_VAR 0 5
74345: PUSH
74346: LD_INT 1
74348: ARRAY
74349: PPUSH
74350: LD_VAR 0 5
74354: PUSH
74355: LD_INT 2
74357: ARRAY
74358: PPUSH
74359: CALL_OW 111
// end ;
74363: LD_VAR 0 3
74367: RET
// export function PrepareApemanSoldier ( ) ; begin
74368: LD_INT 0
74370: PPUSH
// uc_nation := 0 ;
74371: LD_ADDR_OWVAR 21
74375: PUSH
74376: LD_INT 0
74378: ST_TO_ADDR
// hc_sex := sex_male ;
74379: LD_ADDR_OWVAR 27
74383: PUSH
74384: LD_INT 1
74386: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74387: LD_ADDR_OWVAR 28
74391: PUSH
74392: LD_INT 15
74394: ST_TO_ADDR
// hc_gallery :=  ;
74395: LD_ADDR_OWVAR 33
74399: PUSH
74400: LD_STRING 
74402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74403: LD_ADDR_OWVAR 31
74407: PUSH
74408: LD_INT 0
74410: PPUSH
74411: LD_INT 3
74413: PPUSH
74414: CALL_OW 12
74418: PUSH
74419: LD_INT 0
74421: PPUSH
74422: LD_INT 3
74424: PPUSH
74425: CALL_OW 12
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: LD_INT 0
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: ST_TO_ADDR
// end ;
74442: LD_VAR 0 1
74446: RET
// export function PrepareApemanEngineer ( ) ; begin
74447: LD_INT 0
74449: PPUSH
// uc_nation := 0 ;
74450: LD_ADDR_OWVAR 21
74454: PUSH
74455: LD_INT 0
74457: ST_TO_ADDR
// hc_sex := sex_male ;
74458: LD_ADDR_OWVAR 27
74462: PUSH
74463: LD_INT 1
74465: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74466: LD_ADDR_OWVAR 28
74470: PUSH
74471: LD_INT 16
74473: ST_TO_ADDR
// hc_gallery :=  ;
74474: LD_ADDR_OWVAR 33
74478: PUSH
74479: LD_STRING 
74481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74482: LD_ADDR_OWVAR 31
74486: PUSH
74487: LD_INT 0
74489: PPUSH
74490: LD_INT 3
74492: PPUSH
74493: CALL_OW 12
74497: PUSH
74498: LD_INT 0
74500: PPUSH
74501: LD_INT 3
74503: PPUSH
74504: CALL_OW 12
74508: PUSH
74509: LD_INT 0
74511: PUSH
74512: LD_INT 0
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: ST_TO_ADDR
// end ;
74521: LD_VAR 0 1
74525: RET
// export function PrepareApeman ( agressivity ) ; begin
74526: LD_INT 0
74528: PPUSH
// uc_side := 0 ;
74529: LD_ADDR_OWVAR 20
74533: PUSH
74534: LD_INT 0
74536: ST_TO_ADDR
// uc_nation := 0 ;
74537: LD_ADDR_OWVAR 21
74541: PUSH
74542: LD_INT 0
74544: ST_TO_ADDR
// hc_sex := sex_male ;
74545: LD_ADDR_OWVAR 27
74549: PUSH
74550: LD_INT 1
74552: ST_TO_ADDR
// hc_class := class_apeman ;
74553: LD_ADDR_OWVAR 28
74557: PUSH
74558: LD_INT 12
74560: ST_TO_ADDR
// hc_gallery :=  ;
74561: LD_ADDR_OWVAR 33
74565: PUSH
74566: LD_STRING 
74568: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74569: LD_ADDR_OWVAR 35
74573: PUSH
74574: LD_VAR 0 1
74578: NEG
74579: PPUSH
74580: LD_VAR 0 1
74584: PPUSH
74585: CALL_OW 12
74589: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74590: LD_ADDR_OWVAR 31
74594: PUSH
74595: LD_INT 0
74597: PPUSH
74598: LD_INT 3
74600: PPUSH
74601: CALL_OW 12
74605: PUSH
74606: LD_INT 0
74608: PPUSH
74609: LD_INT 3
74611: PPUSH
74612: CALL_OW 12
74616: PUSH
74617: LD_INT 0
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: ST_TO_ADDR
// end ;
74629: LD_VAR 0 2
74633: RET
// export function PrepareTiger ( agressivity ) ; begin
74634: LD_INT 0
74636: PPUSH
// uc_side := 0 ;
74637: LD_ADDR_OWVAR 20
74641: PUSH
74642: LD_INT 0
74644: ST_TO_ADDR
// uc_nation := 0 ;
74645: LD_ADDR_OWVAR 21
74649: PUSH
74650: LD_INT 0
74652: ST_TO_ADDR
// hc_class := class_tiger ;
74653: LD_ADDR_OWVAR 28
74657: PUSH
74658: LD_INT 14
74660: ST_TO_ADDR
// hc_gallery :=  ;
74661: LD_ADDR_OWVAR 33
74665: PUSH
74666: LD_STRING 
74668: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74669: LD_ADDR_OWVAR 35
74673: PUSH
74674: LD_VAR 0 1
74678: NEG
74679: PPUSH
74680: LD_VAR 0 1
74684: PPUSH
74685: CALL_OW 12
74689: ST_TO_ADDR
// end ;
74690: LD_VAR 0 2
74694: RET
// export function PrepareEnchidna ( ) ; begin
74695: LD_INT 0
74697: PPUSH
// uc_side := 0 ;
74698: LD_ADDR_OWVAR 20
74702: PUSH
74703: LD_INT 0
74705: ST_TO_ADDR
// uc_nation := 0 ;
74706: LD_ADDR_OWVAR 21
74710: PUSH
74711: LD_INT 0
74713: ST_TO_ADDR
// hc_class := class_baggie ;
74714: LD_ADDR_OWVAR 28
74718: PUSH
74719: LD_INT 13
74721: ST_TO_ADDR
// hc_gallery :=  ;
74722: LD_ADDR_OWVAR 33
74726: PUSH
74727: LD_STRING 
74729: ST_TO_ADDR
// end ;
74730: LD_VAR 0 1
74734: RET
// export function PrepareFrog ( ) ; begin
74735: LD_INT 0
74737: PPUSH
// uc_side := 0 ;
74738: LD_ADDR_OWVAR 20
74742: PUSH
74743: LD_INT 0
74745: ST_TO_ADDR
// uc_nation := 0 ;
74746: LD_ADDR_OWVAR 21
74750: PUSH
74751: LD_INT 0
74753: ST_TO_ADDR
// hc_class := class_frog ;
74754: LD_ADDR_OWVAR 28
74758: PUSH
74759: LD_INT 19
74761: ST_TO_ADDR
// hc_gallery :=  ;
74762: LD_ADDR_OWVAR 33
74766: PUSH
74767: LD_STRING 
74769: ST_TO_ADDR
// end ;
74770: LD_VAR 0 1
74774: RET
// export function PrepareFish ( ) ; begin
74775: LD_INT 0
74777: PPUSH
// uc_side := 0 ;
74778: LD_ADDR_OWVAR 20
74782: PUSH
74783: LD_INT 0
74785: ST_TO_ADDR
// uc_nation := 0 ;
74786: LD_ADDR_OWVAR 21
74790: PUSH
74791: LD_INT 0
74793: ST_TO_ADDR
// hc_class := class_fish ;
74794: LD_ADDR_OWVAR 28
74798: PUSH
74799: LD_INT 20
74801: ST_TO_ADDR
// hc_gallery :=  ;
74802: LD_ADDR_OWVAR 33
74806: PUSH
74807: LD_STRING 
74809: ST_TO_ADDR
// end ;
74810: LD_VAR 0 1
74814: RET
// export function PrepareBird ( ) ; begin
74815: LD_INT 0
74817: PPUSH
// uc_side := 0 ;
74818: LD_ADDR_OWVAR 20
74822: PUSH
74823: LD_INT 0
74825: ST_TO_ADDR
// uc_nation := 0 ;
74826: LD_ADDR_OWVAR 21
74830: PUSH
74831: LD_INT 0
74833: ST_TO_ADDR
// hc_class := class_phororhacos ;
74834: LD_ADDR_OWVAR 28
74838: PUSH
74839: LD_INT 18
74841: ST_TO_ADDR
// hc_gallery :=  ;
74842: LD_ADDR_OWVAR 33
74846: PUSH
74847: LD_STRING 
74849: ST_TO_ADDR
// end ;
74850: LD_VAR 0 1
74854: RET
// export function PrepareHorse ( ) ; begin
74855: LD_INT 0
74857: PPUSH
// uc_side := 0 ;
74858: LD_ADDR_OWVAR 20
74862: PUSH
74863: LD_INT 0
74865: ST_TO_ADDR
// uc_nation := 0 ;
74866: LD_ADDR_OWVAR 21
74870: PUSH
74871: LD_INT 0
74873: ST_TO_ADDR
// hc_class := class_horse ;
74874: LD_ADDR_OWVAR 28
74878: PUSH
74879: LD_INT 21
74881: ST_TO_ADDR
// hc_gallery :=  ;
74882: LD_ADDR_OWVAR 33
74886: PUSH
74887: LD_STRING 
74889: ST_TO_ADDR
// end ;
74890: LD_VAR 0 1
74894: RET
// export function PrepareMastodont ( ) ; begin
74895: LD_INT 0
74897: PPUSH
// uc_side := 0 ;
74898: LD_ADDR_OWVAR 20
74902: PUSH
74903: LD_INT 0
74905: ST_TO_ADDR
// uc_nation := 0 ;
74906: LD_ADDR_OWVAR 21
74910: PUSH
74911: LD_INT 0
74913: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74914: LD_ADDR_OWVAR 37
74918: PUSH
74919: LD_INT 31
74921: ST_TO_ADDR
// vc_control := control_rider ;
74922: LD_ADDR_OWVAR 38
74926: PUSH
74927: LD_INT 4
74929: ST_TO_ADDR
// end ;
74930: LD_VAR 0 1
74934: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74935: LD_INT 0
74937: PPUSH
74938: PPUSH
74939: PPUSH
// uc_side = 0 ;
74940: LD_ADDR_OWVAR 20
74944: PUSH
74945: LD_INT 0
74947: ST_TO_ADDR
// uc_nation = 0 ;
74948: LD_ADDR_OWVAR 21
74952: PUSH
74953: LD_INT 0
74955: ST_TO_ADDR
// InitHc_All ( ) ;
74956: CALL_OW 584
// InitVc ;
74960: CALL_OW 20
// if mastodonts then
74964: LD_VAR 0 6
74968: IFFALSE 75035
// for i = 1 to mastodonts do
74970: LD_ADDR_VAR 0 11
74974: PUSH
74975: DOUBLE
74976: LD_INT 1
74978: DEC
74979: ST_TO_ADDR
74980: LD_VAR 0 6
74984: PUSH
74985: FOR_TO
74986: IFFALSE 75033
// begin vc_chassis := 31 ;
74988: LD_ADDR_OWVAR 37
74992: PUSH
74993: LD_INT 31
74995: ST_TO_ADDR
// vc_control := control_rider ;
74996: LD_ADDR_OWVAR 38
75000: PUSH
75001: LD_INT 4
75003: ST_TO_ADDR
// animal := CreateVehicle ;
75004: LD_ADDR_VAR 0 12
75008: PUSH
75009: CALL_OW 45
75013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75014: LD_VAR 0 12
75018: PPUSH
75019: LD_VAR 0 8
75023: PPUSH
75024: LD_INT 0
75026: PPUSH
75027: CALL 77163 0 3
// end ;
75031: GO 74985
75033: POP
75034: POP
// if horses then
75035: LD_VAR 0 5
75039: IFFALSE 75106
// for i = 1 to horses do
75041: LD_ADDR_VAR 0 11
75045: PUSH
75046: DOUBLE
75047: LD_INT 1
75049: DEC
75050: ST_TO_ADDR
75051: LD_VAR 0 5
75055: PUSH
75056: FOR_TO
75057: IFFALSE 75104
// begin hc_class := 21 ;
75059: LD_ADDR_OWVAR 28
75063: PUSH
75064: LD_INT 21
75066: ST_TO_ADDR
// hc_gallery :=  ;
75067: LD_ADDR_OWVAR 33
75071: PUSH
75072: LD_STRING 
75074: ST_TO_ADDR
// animal := CreateHuman ;
75075: LD_ADDR_VAR 0 12
75079: PUSH
75080: CALL_OW 44
75084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75085: LD_VAR 0 12
75089: PPUSH
75090: LD_VAR 0 8
75094: PPUSH
75095: LD_INT 0
75097: PPUSH
75098: CALL 77163 0 3
// end ;
75102: GO 75056
75104: POP
75105: POP
// if birds then
75106: LD_VAR 0 1
75110: IFFALSE 75177
// for i = 1 to birds do
75112: LD_ADDR_VAR 0 11
75116: PUSH
75117: DOUBLE
75118: LD_INT 1
75120: DEC
75121: ST_TO_ADDR
75122: LD_VAR 0 1
75126: PUSH
75127: FOR_TO
75128: IFFALSE 75175
// begin hc_class := 18 ;
75130: LD_ADDR_OWVAR 28
75134: PUSH
75135: LD_INT 18
75137: ST_TO_ADDR
// hc_gallery =  ;
75138: LD_ADDR_OWVAR 33
75142: PUSH
75143: LD_STRING 
75145: ST_TO_ADDR
// animal := CreateHuman ;
75146: LD_ADDR_VAR 0 12
75150: PUSH
75151: CALL_OW 44
75155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75156: LD_VAR 0 12
75160: PPUSH
75161: LD_VAR 0 8
75165: PPUSH
75166: LD_INT 0
75168: PPUSH
75169: CALL 77163 0 3
// end ;
75173: GO 75127
75175: POP
75176: POP
// if tigers then
75177: LD_VAR 0 2
75181: IFFALSE 75265
// for i = 1 to tigers do
75183: LD_ADDR_VAR 0 11
75187: PUSH
75188: DOUBLE
75189: LD_INT 1
75191: DEC
75192: ST_TO_ADDR
75193: LD_VAR 0 2
75197: PUSH
75198: FOR_TO
75199: IFFALSE 75263
// begin hc_class = class_tiger ;
75201: LD_ADDR_OWVAR 28
75205: PUSH
75206: LD_INT 14
75208: ST_TO_ADDR
// hc_gallery =  ;
75209: LD_ADDR_OWVAR 33
75213: PUSH
75214: LD_STRING 
75216: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75217: LD_ADDR_OWVAR 35
75221: PUSH
75222: LD_INT 7
75224: NEG
75225: PPUSH
75226: LD_INT 7
75228: PPUSH
75229: CALL_OW 12
75233: ST_TO_ADDR
// animal := CreateHuman ;
75234: LD_ADDR_VAR 0 12
75238: PUSH
75239: CALL_OW 44
75243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75244: LD_VAR 0 12
75248: PPUSH
75249: LD_VAR 0 8
75253: PPUSH
75254: LD_INT 0
75256: PPUSH
75257: CALL 77163 0 3
// end ;
75261: GO 75198
75263: POP
75264: POP
// if apemans then
75265: LD_VAR 0 3
75269: IFFALSE 75392
// for i = 1 to apemans do
75271: LD_ADDR_VAR 0 11
75275: PUSH
75276: DOUBLE
75277: LD_INT 1
75279: DEC
75280: ST_TO_ADDR
75281: LD_VAR 0 3
75285: PUSH
75286: FOR_TO
75287: IFFALSE 75390
// begin hc_class = class_apeman ;
75289: LD_ADDR_OWVAR 28
75293: PUSH
75294: LD_INT 12
75296: ST_TO_ADDR
// hc_gallery =  ;
75297: LD_ADDR_OWVAR 33
75301: PUSH
75302: LD_STRING 
75304: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75305: LD_ADDR_OWVAR 35
75309: PUSH
75310: LD_INT 2
75312: NEG
75313: PPUSH
75314: LD_INT 2
75316: PPUSH
75317: CALL_OW 12
75321: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75322: LD_ADDR_OWVAR 31
75326: PUSH
75327: LD_INT 1
75329: PPUSH
75330: LD_INT 3
75332: PPUSH
75333: CALL_OW 12
75337: PUSH
75338: LD_INT 1
75340: PPUSH
75341: LD_INT 3
75343: PPUSH
75344: CALL_OW 12
75348: PUSH
75349: LD_INT 0
75351: PUSH
75352: LD_INT 0
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: ST_TO_ADDR
// animal := CreateHuman ;
75361: LD_ADDR_VAR 0 12
75365: PUSH
75366: CALL_OW 44
75370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75371: LD_VAR 0 12
75375: PPUSH
75376: LD_VAR 0 8
75380: PPUSH
75381: LD_INT 0
75383: PPUSH
75384: CALL 77163 0 3
// end ;
75388: GO 75286
75390: POP
75391: POP
// if enchidnas then
75392: LD_VAR 0 4
75396: IFFALSE 75463
// for i = 1 to enchidnas do
75398: LD_ADDR_VAR 0 11
75402: PUSH
75403: DOUBLE
75404: LD_INT 1
75406: DEC
75407: ST_TO_ADDR
75408: LD_VAR 0 4
75412: PUSH
75413: FOR_TO
75414: IFFALSE 75461
// begin hc_class = 13 ;
75416: LD_ADDR_OWVAR 28
75420: PUSH
75421: LD_INT 13
75423: ST_TO_ADDR
// hc_gallery =  ;
75424: LD_ADDR_OWVAR 33
75428: PUSH
75429: LD_STRING 
75431: ST_TO_ADDR
// animal := CreateHuman ;
75432: LD_ADDR_VAR 0 12
75436: PUSH
75437: CALL_OW 44
75441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75442: LD_VAR 0 12
75446: PPUSH
75447: LD_VAR 0 8
75451: PPUSH
75452: LD_INT 0
75454: PPUSH
75455: CALL 77163 0 3
// end ;
75459: GO 75413
75461: POP
75462: POP
// if fishes then
75463: LD_VAR 0 7
75467: IFFALSE 75534
// for i = 1 to fishes do
75469: LD_ADDR_VAR 0 11
75473: PUSH
75474: DOUBLE
75475: LD_INT 1
75477: DEC
75478: ST_TO_ADDR
75479: LD_VAR 0 7
75483: PUSH
75484: FOR_TO
75485: IFFALSE 75532
// begin hc_class = 20 ;
75487: LD_ADDR_OWVAR 28
75491: PUSH
75492: LD_INT 20
75494: ST_TO_ADDR
// hc_gallery =  ;
75495: LD_ADDR_OWVAR 33
75499: PUSH
75500: LD_STRING 
75502: ST_TO_ADDR
// animal := CreateHuman ;
75503: LD_ADDR_VAR 0 12
75507: PUSH
75508: CALL_OW 44
75512: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75513: LD_VAR 0 12
75517: PPUSH
75518: LD_VAR 0 9
75522: PPUSH
75523: LD_INT 0
75525: PPUSH
75526: CALL 77163 0 3
// end ;
75530: GO 75484
75532: POP
75533: POP
// end ;
75534: LD_VAR 0 10
75538: RET
// export function WantHeal ( sci , unit ) ; begin
75539: LD_INT 0
75541: PPUSH
// if GetTaskList ( sci ) > 0 then
75542: LD_VAR 0 1
75546: PPUSH
75547: CALL_OW 437
75551: PUSH
75552: LD_INT 0
75554: GREATER
75555: IFFALSE 75625
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75557: LD_VAR 0 1
75561: PPUSH
75562: CALL_OW 437
75566: PUSH
75567: LD_INT 1
75569: ARRAY
75570: PUSH
75571: LD_INT 1
75573: ARRAY
75574: PUSH
75575: LD_STRING l
75577: EQUAL
75578: PUSH
75579: LD_VAR 0 1
75583: PPUSH
75584: CALL_OW 437
75588: PUSH
75589: LD_INT 1
75591: ARRAY
75592: PUSH
75593: LD_INT 4
75595: ARRAY
75596: PUSH
75597: LD_VAR 0 2
75601: EQUAL
75602: AND
75603: IFFALSE 75615
// result := true else
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: LD_INT 1
75612: ST_TO_ADDR
75613: GO 75623
// result := false ;
75615: LD_ADDR_VAR 0 3
75619: PUSH
75620: LD_INT 0
75622: ST_TO_ADDR
// end else
75623: GO 75633
// result := false ;
75625: LD_ADDR_VAR 0 3
75629: PUSH
75630: LD_INT 0
75632: ST_TO_ADDR
// end ;
75633: LD_VAR 0 3
75637: RET
// export function HealTarget ( sci ) ; begin
75638: LD_INT 0
75640: PPUSH
// if not sci then
75641: LD_VAR 0 1
75645: NOT
75646: IFFALSE 75650
// exit ;
75648: GO 75715
// result := 0 ;
75650: LD_ADDR_VAR 0 2
75654: PUSH
75655: LD_INT 0
75657: ST_TO_ADDR
// if GetTaskList ( sci ) then
75658: LD_VAR 0 1
75662: PPUSH
75663: CALL_OW 437
75667: IFFALSE 75715
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75669: LD_VAR 0 1
75673: PPUSH
75674: CALL_OW 437
75678: PUSH
75679: LD_INT 1
75681: ARRAY
75682: PUSH
75683: LD_INT 1
75685: ARRAY
75686: PUSH
75687: LD_STRING l
75689: EQUAL
75690: IFFALSE 75715
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75692: LD_ADDR_VAR 0 2
75696: PUSH
75697: LD_VAR 0 1
75701: PPUSH
75702: CALL_OW 437
75706: PUSH
75707: LD_INT 1
75709: ARRAY
75710: PUSH
75711: LD_INT 4
75713: ARRAY
75714: ST_TO_ADDR
// end ;
75715: LD_VAR 0 2
75719: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75720: LD_INT 0
75722: PPUSH
75723: PPUSH
75724: PPUSH
75725: PPUSH
// if not base_units then
75726: LD_VAR 0 1
75730: NOT
75731: IFFALSE 75735
// exit ;
75733: GO 75822
// result := false ;
75735: LD_ADDR_VAR 0 2
75739: PUSH
75740: LD_INT 0
75742: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75743: LD_ADDR_VAR 0 5
75747: PUSH
75748: LD_VAR 0 1
75752: PPUSH
75753: LD_INT 21
75755: PUSH
75756: LD_INT 3
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PPUSH
75763: CALL_OW 72
75767: ST_TO_ADDR
// if not tmp then
75768: LD_VAR 0 5
75772: NOT
75773: IFFALSE 75777
// exit ;
75775: GO 75822
// for i in tmp do
75777: LD_ADDR_VAR 0 3
75781: PUSH
75782: LD_VAR 0 5
75786: PUSH
75787: FOR_IN
75788: IFFALSE 75820
// begin result := EnemyInRange ( i , 22 ) ;
75790: LD_ADDR_VAR 0 2
75794: PUSH
75795: LD_VAR 0 3
75799: PPUSH
75800: LD_INT 22
75802: PPUSH
75803: CALL 73420 0 2
75807: ST_TO_ADDR
// if result then
75808: LD_VAR 0 2
75812: IFFALSE 75818
// exit ;
75814: POP
75815: POP
75816: GO 75822
// end ;
75818: GO 75787
75820: POP
75821: POP
// end ;
75822: LD_VAR 0 2
75826: RET
// export function FilterByTag ( units , tag ) ; begin
75827: LD_INT 0
75829: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75830: LD_ADDR_VAR 0 3
75834: PUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: LD_INT 120
75842: PUSH
75843: LD_VAR 0 2
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PPUSH
75852: CALL_OW 72
75856: ST_TO_ADDR
// end ;
75857: LD_VAR 0 3
75861: RET
// export function IsDriver ( un ) ; begin
75862: LD_INT 0
75864: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75865: LD_ADDR_VAR 0 2
75869: PUSH
75870: LD_VAR 0 1
75874: PUSH
75875: LD_INT 55
75877: PUSH
75878: EMPTY
75879: LIST
75880: PPUSH
75881: CALL_OW 69
75885: IN
75886: ST_TO_ADDR
// end ;
75887: LD_VAR 0 2
75891: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75892: LD_INT 0
75894: PPUSH
75895: PPUSH
// list := [ ] ;
75896: LD_ADDR_VAR 0 5
75900: PUSH
75901: EMPTY
75902: ST_TO_ADDR
// case d of 0 :
75903: LD_VAR 0 3
75907: PUSH
75908: LD_INT 0
75910: DOUBLE
75911: EQUAL
75912: IFTRUE 75916
75914: GO 76049
75916: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75917: LD_ADDR_VAR 0 5
75921: PUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_INT 4
75929: MINUS
75930: PUSH
75931: LD_VAR 0 2
75935: PUSH
75936: LD_INT 4
75938: MINUS
75939: PUSH
75940: LD_INT 2
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: LIST
75947: PUSH
75948: LD_VAR 0 1
75952: PUSH
75953: LD_INT 3
75955: MINUS
75956: PUSH
75957: LD_VAR 0 2
75961: PUSH
75962: LD_INT 1
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: PUSH
75970: LD_VAR 0 1
75974: PUSH
75975: LD_INT 4
75977: PLUS
75978: PUSH
75979: LD_VAR 0 2
75983: PUSH
75984: LD_INT 4
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: LIST
75991: PUSH
75992: LD_VAR 0 1
75996: PUSH
75997: LD_INT 3
75999: PLUS
76000: PUSH
76001: LD_VAR 0 2
76005: PUSH
76006: LD_INT 3
76008: PLUS
76009: PUSH
76010: LD_INT 5
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: LIST
76017: PUSH
76018: LD_VAR 0 1
76022: PUSH
76023: LD_VAR 0 2
76027: PUSH
76028: LD_INT 4
76030: PLUS
76031: PUSH
76032: LD_INT 0
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: LIST
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: ST_TO_ADDR
// end ; 1 :
76047: GO 76747
76049: LD_INT 1
76051: DOUBLE
76052: EQUAL
76053: IFTRUE 76057
76055: GO 76190
76057: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76058: LD_ADDR_VAR 0 5
76062: PUSH
76063: LD_VAR 0 1
76067: PUSH
76068: LD_VAR 0 2
76072: PUSH
76073: LD_INT 4
76075: MINUS
76076: PUSH
76077: LD_INT 3
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: LIST
76084: PUSH
76085: LD_VAR 0 1
76089: PUSH
76090: LD_INT 3
76092: MINUS
76093: PUSH
76094: LD_VAR 0 2
76098: PUSH
76099: LD_INT 3
76101: MINUS
76102: PUSH
76103: LD_INT 2
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: LIST
76110: PUSH
76111: LD_VAR 0 1
76115: PUSH
76116: LD_INT 4
76118: MINUS
76119: PUSH
76120: LD_VAR 0 2
76124: PUSH
76125: LD_INT 1
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: LIST
76132: PUSH
76133: LD_VAR 0 1
76137: PUSH
76138: LD_VAR 0 2
76142: PUSH
76143: LD_INT 3
76145: PLUS
76146: PUSH
76147: LD_INT 0
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: LIST
76154: PUSH
76155: LD_VAR 0 1
76159: PUSH
76160: LD_INT 4
76162: PLUS
76163: PUSH
76164: LD_VAR 0 2
76168: PUSH
76169: LD_INT 4
76171: PLUS
76172: PUSH
76173: LD_INT 5
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: LIST
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: ST_TO_ADDR
// end ; 2 :
76188: GO 76747
76190: LD_INT 2
76192: DOUBLE
76193: EQUAL
76194: IFTRUE 76198
76196: GO 76327
76198: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76199: LD_ADDR_VAR 0 5
76203: PUSH
76204: LD_VAR 0 1
76208: PUSH
76209: LD_VAR 0 2
76213: PUSH
76214: LD_INT 3
76216: MINUS
76217: PUSH
76218: LD_INT 3
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: LIST
76225: PUSH
76226: LD_VAR 0 1
76230: PUSH
76231: LD_INT 4
76233: PLUS
76234: PUSH
76235: LD_VAR 0 2
76239: PUSH
76240: LD_INT 4
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: LIST
76247: PUSH
76248: LD_VAR 0 1
76252: PUSH
76253: LD_VAR 0 2
76257: PUSH
76258: LD_INT 4
76260: PLUS
76261: PUSH
76262: LD_INT 0
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: LIST
76269: PUSH
76270: LD_VAR 0 1
76274: PUSH
76275: LD_INT 3
76277: MINUS
76278: PUSH
76279: LD_VAR 0 2
76283: PUSH
76284: LD_INT 1
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: LIST
76291: PUSH
76292: LD_VAR 0 1
76296: PUSH
76297: LD_INT 4
76299: MINUS
76300: PUSH
76301: LD_VAR 0 2
76305: PUSH
76306: LD_INT 4
76308: MINUS
76309: PUSH
76310: LD_INT 2
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: LIST
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: ST_TO_ADDR
// end ; 3 :
76325: GO 76747
76327: LD_INT 3
76329: DOUBLE
76330: EQUAL
76331: IFTRUE 76335
76333: GO 76468
76335: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76336: LD_ADDR_VAR 0 5
76340: PUSH
76341: LD_VAR 0 1
76345: PUSH
76346: LD_INT 3
76348: PLUS
76349: PUSH
76350: LD_VAR 0 2
76354: PUSH
76355: LD_INT 4
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: LIST
76362: PUSH
76363: LD_VAR 0 1
76367: PUSH
76368: LD_INT 4
76370: PLUS
76371: PUSH
76372: LD_VAR 0 2
76376: PUSH
76377: LD_INT 4
76379: PLUS
76380: PUSH
76381: LD_INT 5
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: PUSH
76389: LD_VAR 0 1
76393: PUSH
76394: LD_INT 4
76396: MINUS
76397: PUSH
76398: LD_VAR 0 2
76402: PUSH
76403: LD_INT 1
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: LIST
76410: PUSH
76411: LD_VAR 0 1
76415: PUSH
76416: LD_VAR 0 2
76420: PUSH
76421: LD_INT 4
76423: MINUS
76424: PUSH
76425: LD_INT 3
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: LIST
76432: PUSH
76433: LD_VAR 0 1
76437: PUSH
76438: LD_INT 3
76440: MINUS
76441: PUSH
76442: LD_VAR 0 2
76446: PUSH
76447: LD_INT 3
76449: MINUS
76450: PUSH
76451: LD_INT 2
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: LIST
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: ST_TO_ADDR
// end ; 4 :
76466: GO 76747
76468: LD_INT 4
76470: DOUBLE
76471: EQUAL
76472: IFTRUE 76476
76474: GO 76609
76476: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76477: LD_ADDR_VAR 0 5
76481: PUSH
76482: LD_VAR 0 1
76486: PUSH
76487: LD_VAR 0 2
76491: PUSH
76492: LD_INT 4
76494: PLUS
76495: PUSH
76496: LD_INT 0
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: LIST
76503: PUSH
76504: LD_VAR 0 1
76508: PUSH
76509: LD_INT 3
76511: PLUS
76512: PUSH
76513: LD_VAR 0 2
76517: PUSH
76518: LD_INT 3
76520: PLUS
76521: PUSH
76522: LD_INT 5
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: LIST
76529: PUSH
76530: LD_VAR 0 1
76534: PUSH
76535: LD_INT 4
76537: PLUS
76538: PUSH
76539: LD_VAR 0 2
76543: PUSH
76544: LD_INT 4
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: LIST
76551: PUSH
76552: LD_VAR 0 1
76556: PUSH
76557: LD_VAR 0 2
76561: PUSH
76562: LD_INT 3
76564: MINUS
76565: PUSH
76566: LD_INT 3
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: LIST
76573: PUSH
76574: LD_VAR 0 1
76578: PUSH
76579: LD_INT 4
76581: MINUS
76582: PUSH
76583: LD_VAR 0 2
76587: PUSH
76588: LD_INT 4
76590: MINUS
76591: PUSH
76592: LD_INT 2
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: LIST
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: ST_TO_ADDR
// end ; 5 :
76607: GO 76747
76609: LD_INT 5
76611: DOUBLE
76612: EQUAL
76613: IFTRUE 76617
76615: GO 76746
76617: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76618: LD_ADDR_VAR 0 5
76622: PUSH
76623: LD_VAR 0 1
76627: PUSH
76628: LD_INT 4
76630: MINUS
76631: PUSH
76632: LD_VAR 0 2
76636: PUSH
76637: LD_INT 1
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: LIST
76644: PUSH
76645: LD_VAR 0 1
76649: PUSH
76650: LD_VAR 0 2
76654: PUSH
76655: LD_INT 4
76657: MINUS
76658: PUSH
76659: LD_INT 3
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: LIST
76666: PUSH
76667: LD_VAR 0 1
76671: PUSH
76672: LD_INT 4
76674: PLUS
76675: PUSH
76676: LD_VAR 0 2
76680: PUSH
76681: LD_INT 4
76683: PLUS
76684: PUSH
76685: LD_INT 5
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: LIST
76692: PUSH
76693: LD_VAR 0 1
76697: PUSH
76698: LD_INT 3
76700: PLUS
76701: PUSH
76702: LD_VAR 0 2
76706: PUSH
76707: LD_INT 4
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: LIST
76714: PUSH
76715: LD_VAR 0 1
76719: PUSH
76720: LD_VAR 0 2
76724: PUSH
76725: LD_INT 3
76727: PLUS
76728: PUSH
76729: LD_INT 0
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: LIST
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: ST_TO_ADDR
// end ; end ;
76744: GO 76747
76746: POP
// result := list ;
76747: LD_ADDR_VAR 0 4
76751: PUSH
76752: LD_VAR 0 5
76756: ST_TO_ADDR
// end ;
76757: LD_VAR 0 4
76761: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76762: LD_INT 0
76764: PPUSH
76765: PPUSH
76766: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76767: LD_VAR 0 1
76771: NOT
76772: PUSH
76773: LD_VAR 0 2
76777: PUSH
76778: LD_INT 1
76780: PUSH
76781: LD_INT 2
76783: PUSH
76784: LD_INT 3
76786: PUSH
76787: LD_INT 4
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: IN
76796: NOT
76797: OR
76798: IFFALSE 76802
// exit ;
76800: GO 76885
// tmp := [ ] ;
76802: LD_ADDR_VAR 0 5
76806: PUSH
76807: EMPTY
76808: ST_TO_ADDR
// for i in units do
76809: LD_ADDR_VAR 0 4
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: FOR_IN
76820: IFFALSE 76854
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76822: LD_ADDR_VAR 0 5
76826: PUSH
76827: LD_VAR 0 5
76831: PPUSH
76832: LD_VAR 0 4
76836: PPUSH
76837: LD_VAR 0 2
76841: PPUSH
76842: CALL_OW 259
76846: PPUSH
76847: CALL 78258 0 2
76851: ST_TO_ADDR
76852: GO 76819
76854: POP
76855: POP
// if not tmp then
76856: LD_VAR 0 5
76860: NOT
76861: IFFALSE 76865
// exit ;
76863: GO 76885
// result := SortListByListDesc ( units , tmp ) ;
76865: LD_ADDR_VAR 0 3
76869: PUSH
76870: LD_VAR 0 1
76874: PPUSH
76875: LD_VAR 0 5
76879: PPUSH
76880: CALL_OW 77
76884: ST_TO_ADDR
// end ;
76885: LD_VAR 0 3
76889: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76890: LD_INT 0
76892: PPUSH
76893: PPUSH
76894: PPUSH
// result := false ;
76895: LD_ADDR_VAR 0 3
76899: PUSH
76900: LD_INT 0
76902: ST_TO_ADDR
// if not building then
76903: LD_VAR 0 2
76907: NOT
76908: IFFALSE 76912
// exit ;
76910: GO 77050
// x := GetX ( building ) ;
76912: LD_ADDR_VAR 0 4
76916: PUSH
76917: LD_VAR 0 2
76921: PPUSH
76922: CALL_OW 250
76926: ST_TO_ADDR
// y := GetY ( building ) ;
76927: LD_ADDR_VAR 0 5
76931: PUSH
76932: LD_VAR 0 2
76936: PPUSH
76937: CALL_OW 251
76941: ST_TO_ADDR
// if not x or not y then
76942: LD_VAR 0 4
76946: NOT
76947: PUSH
76948: LD_VAR 0 5
76952: NOT
76953: OR
76954: IFFALSE 76958
// exit ;
76956: GO 77050
// if GetTaskList ( unit ) then
76958: LD_VAR 0 1
76962: PPUSH
76963: CALL_OW 437
76967: IFFALSE 77050
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76969: LD_STRING e
76971: PUSH
76972: LD_VAR 0 1
76976: PPUSH
76977: CALL_OW 437
76981: PUSH
76982: LD_INT 1
76984: ARRAY
76985: PUSH
76986: LD_INT 1
76988: ARRAY
76989: EQUAL
76990: PUSH
76991: LD_VAR 0 4
76995: PUSH
76996: LD_VAR 0 1
77000: PPUSH
77001: CALL_OW 437
77005: PUSH
77006: LD_INT 1
77008: ARRAY
77009: PUSH
77010: LD_INT 2
77012: ARRAY
77013: EQUAL
77014: AND
77015: PUSH
77016: LD_VAR 0 5
77020: PUSH
77021: LD_VAR 0 1
77025: PPUSH
77026: CALL_OW 437
77030: PUSH
77031: LD_INT 1
77033: ARRAY
77034: PUSH
77035: LD_INT 3
77037: ARRAY
77038: EQUAL
77039: AND
77040: IFFALSE 77050
// result := true end ;
77042: LD_ADDR_VAR 0 3
77046: PUSH
77047: LD_INT 1
77049: ST_TO_ADDR
// end ;
77050: LD_VAR 0 3
77054: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77055: LD_INT 0
77057: PPUSH
// result := false ;
77058: LD_ADDR_VAR 0 4
77062: PUSH
77063: LD_INT 0
77065: ST_TO_ADDR
// if GetTaskList ( unit ) then
77066: LD_VAR 0 1
77070: PPUSH
77071: CALL_OW 437
77075: IFFALSE 77158
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77077: LD_STRING M
77079: PUSH
77080: LD_VAR 0 1
77084: PPUSH
77085: CALL_OW 437
77089: PUSH
77090: LD_INT 1
77092: ARRAY
77093: PUSH
77094: LD_INT 1
77096: ARRAY
77097: EQUAL
77098: PUSH
77099: LD_VAR 0 2
77103: PUSH
77104: LD_VAR 0 1
77108: PPUSH
77109: CALL_OW 437
77113: PUSH
77114: LD_INT 1
77116: ARRAY
77117: PUSH
77118: LD_INT 2
77120: ARRAY
77121: EQUAL
77122: AND
77123: PUSH
77124: LD_VAR 0 3
77128: PUSH
77129: LD_VAR 0 1
77133: PPUSH
77134: CALL_OW 437
77138: PUSH
77139: LD_INT 1
77141: ARRAY
77142: PUSH
77143: LD_INT 3
77145: ARRAY
77146: EQUAL
77147: AND
77148: IFFALSE 77158
// result := true ;
77150: LD_ADDR_VAR 0 4
77154: PUSH
77155: LD_INT 1
77157: ST_TO_ADDR
// end ; end ;
77158: LD_VAR 0 4
77162: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77163: LD_INT 0
77165: PPUSH
77166: PPUSH
77167: PPUSH
77168: PPUSH
// if not unit or not area then
77169: LD_VAR 0 1
77173: NOT
77174: PUSH
77175: LD_VAR 0 2
77179: NOT
77180: OR
77181: IFFALSE 77185
// exit ;
77183: GO 77361
// tmp := AreaToList ( area , i ) ;
77185: LD_ADDR_VAR 0 6
77189: PUSH
77190: LD_VAR 0 2
77194: PPUSH
77195: LD_VAR 0 5
77199: PPUSH
77200: CALL_OW 517
77204: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77205: LD_ADDR_VAR 0 5
77209: PUSH
77210: DOUBLE
77211: LD_INT 1
77213: DEC
77214: ST_TO_ADDR
77215: LD_VAR 0 6
77219: PUSH
77220: LD_INT 1
77222: ARRAY
77223: PUSH
77224: FOR_TO
77225: IFFALSE 77359
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77227: LD_ADDR_VAR 0 7
77231: PUSH
77232: LD_VAR 0 6
77236: PUSH
77237: LD_INT 1
77239: ARRAY
77240: PUSH
77241: LD_VAR 0 5
77245: ARRAY
77246: PUSH
77247: LD_VAR 0 6
77251: PUSH
77252: LD_INT 2
77254: ARRAY
77255: PUSH
77256: LD_VAR 0 5
77260: ARRAY
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77266: LD_INT 92
77268: PUSH
77269: LD_VAR 0 7
77273: PUSH
77274: LD_INT 1
77276: ARRAY
77277: PUSH
77278: LD_VAR 0 7
77282: PUSH
77283: LD_INT 2
77285: ARRAY
77286: PUSH
77287: LD_INT 2
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: PPUSH
77296: CALL_OW 69
77300: PUSH
77301: LD_INT 0
77303: EQUAL
77304: IFFALSE 77357
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77306: LD_VAR 0 1
77310: PPUSH
77311: LD_VAR 0 7
77315: PUSH
77316: LD_INT 1
77318: ARRAY
77319: PPUSH
77320: LD_VAR 0 7
77324: PUSH
77325: LD_INT 2
77327: ARRAY
77328: PPUSH
77329: LD_VAR 0 3
77333: PPUSH
77334: CALL_OW 48
// result := IsPlaced ( unit ) ;
77338: LD_ADDR_VAR 0 4
77342: PUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: CALL_OW 305
77352: ST_TO_ADDR
// exit ;
77353: POP
77354: POP
77355: GO 77361
// end ; end ;
77357: GO 77224
77359: POP
77360: POP
// end ;
77361: LD_VAR 0 4
77365: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
77370: PPUSH
// if not side or side > 8 then
77371: LD_VAR 0 1
77375: NOT
77376: PUSH
77377: LD_VAR 0 1
77381: PUSH
77382: LD_INT 8
77384: GREATER
77385: OR
77386: IFFALSE 77390
// exit ;
77388: GO 77577
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77390: LD_ADDR_VAR 0 4
77394: PUSH
77395: LD_INT 22
77397: PUSH
77398: LD_VAR 0 1
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 21
77409: PUSH
77410: LD_INT 3
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PPUSH
77421: CALL_OW 69
77425: ST_TO_ADDR
// if not tmp then
77426: LD_VAR 0 4
77430: NOT
77431: IFFALSE 77435
// exit ;
77433: GO 77577
// enable_addtolog := true ;
77435: LD_ADDR_OWVAR 81
77439: PUSH
77440: LD_INT 1
77442: ST_TO_ADDR
// AddToLog ( [ ) ;
77443: LD_STRING [
77445: PPUSH
77446: CALL_OW 561
// for i in tmp do
77450: LD_ADDR_VAR 0 3
77454: PUSH
77455: LD_VAR 0 4
77459: PUSH
77460: FOR_IN
77461: IFFALSE 77568
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77463: LD_STRING [
77465: PUSH
77466: LD_VAR 0 3
77470: PPUSH
77471: CALL_OW 266
77475: STR
77476: PUSH
77477: LD_STRING , 
77479: STR
77480: PUSH
77481: LD_VAR 0 3
77485: PPUSH
77486: CALL_OW 250
77490: STR
77491: PUSH
77492: LD_STRING , 
77494: STR
77495: PUSH
77496: LD_VAR 0 3
77500: PPUSH
77501: CALL_OW 251
77505: STR
77506: PUSH
77507: LD_STRING , 
77509: STR
77510: PUSH
77511: LD_VAR 0 3
77515: PPUSH
77516: CALL_OW 254
77520: STR
77521: PUSH
77522: LD_STRING , 
77524: STR
77525: PUSH
77526: LD_VAR 0 3
77530: PPUSH
77531: LD_INT 1
77533: PPUSH
77534: CALL_OW 268
77538: STR
77539: PUSH
77540: LD_STRING , 
77542: STR
77543: PUSH
77544: LD_VAR 0 3
77548: PPUSH
77549: LD_INT 2
77551: PPUSH
77552: CALL_OW 268
77556: STR
77557: PUSH
77558: LD_STRING ],
77560: STR
77561: PPUSH
77562: CALL_OW 561
// end ;
77566: GO 77460
77568: POP
77569: POP
// AddToLog ( ]; ) ;
77570: LD_STRING ];
77572: PPUSH
77573: CALL_OW 561
// end ;
77577: LD_VAR 0 2
77581: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77582: LD_INT 0
77584: PPUSH
77585: PPUSH
77586: PPUSH
77587: PPUSH
77588: PPUSH
// if not area or not rate or not max then
77589: LD_VAR 0 1
77593: NOT
77594: PUSH
77595: LD_VAR 0 2
77599: NOT
77600: OR
77601: PUSH
77602: LD_VAR 0 4
77606: NOT
77607: OR
77608: IFFALSE 77612
// exit ;
77610: GO 77801
// while 1 do
77612: LD_INT 1
77614: IFFALSE 77801
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77616: LD_ADDR_VAR 0 9
77620: PUSH
77621: LD_VAR 0 1
77625: PPUSH
77626: LD_INT 1
77628: PPUSH
77629: CALL_OW 287
77633: PUSH
77634: LD_INT 10
77636: MUL
77637: ST_TO_ADDR
// r := rate / 10 ;
77638: LD_ADDR_VAR 0 7
77642: PUSH
77643: LD_VAR 0 2
77647: PUSH
77648: LD_INT 10
77650: DIVREAL
77651: ST_TO_ADDR
// time := 1 1$00 ;
77652: LD_ADDR_VAR 0 8
77656: PUSH
77657: LD_INT 2100
77659: ST_TO_ADDR
// if amount < min then
77660: LD_VAR 0 9
77664: PUSH
77665: LD_VAR 0 3
77669: LESS
77670: IFFALSE 77688
// r := r * 2 else
77672: LD_ADDR_VAR 0 7
77676: PUSH
77677: LD_VAR 0 7
77681: PUSH
77682: LD_INT 2
77684: MUL
77685: ST_TO_ADDR
77686: GO 77714
// if amount > max then
77688: LD_VAR 0 9
77692: PUSH
77693: LD_VAR 0 4
77697: GREATER
77698: IFFALSE 77714
// r := r / 2 ;
77700: LD_ADDR_VAR 0 7
77704: PUSH
77705: LD_VAR 0 7
77709: PUSH
77710: LD_INT 2
77712: DIVREAL
77713: ST_TO_ADDR
// time := time / r ;
77714: LD_ADDR_VAR 0 8
77718: PUSH
77719: LD_VAR 0 8
77723: PUSH
77724: LD_VAR 0 7
77728: DIVREAL
77729: ST_TO_ADDR
// if time < 0 then
77730: LD_VAR 0 8
77734: PUSH
77735: LD_INT 0
77737: LESS
77738: IFFALSE 77755
// time := time * - 1 ;
77740: LD_ADDR_VAR 0 8
77744: PUSH
77745: LD_VAR 0 8
77749: PUSH
77750: LD_INT 1
77752: NEG
77753: MUL
77754: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77755: LD_VAR 0 8
77759: PUSH
77760: LD_INT 35
77762: PPUSH
77763: LD_INT 875
77765: PPUSH
77766: CALL_OW 12
77770: PLUS
77771: PPUSH
77772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77776: LD_INT 1
77778: PPUSH
77779: LD_INT 5
77781: PPUSH
77782: CALL_OW 12
77786: PPUSH
77787: LD_VAR 0 1
77791: PPUSH
77792: LD_INT 1
77794: PPUSH
77795: CALL_OW 55
// end ;
77799: GO 77612
// end ;
77801: LD_VAR 0 5
77805: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77806: LD_INT 0
77808: PPUSH
77809: PPUSH
77810: PPUSH
77811: PPUSH
77812: PPUSH
77813: PPUSH
77814: PPUSH
77815: PPUSH
// if not turrets or not factories then
77816: LD_VAR 0 1
77820: NOT
77821: PUSH
77822: LD_VAR 0 2
77826: NOT
77827: OR
77828: IFFALSE 77832
// exit ;
77830: GO 78139
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77832: LD_ADDR_VAR 0 10
77836: PUSH
77837: LD_INT 5
77839: PUSH
77840: LD_INT 6
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: LD_INT 2
77849: PUSH
77850: LD_INT 4
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 3
77859: PUSH
77860: LD_INT 5
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: LIST
77871: PUSH
77872: LD_INT 24
77874: PUSH
77875: LD_INT 25
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 23
77884: PUSH
77885: LD_INT 27
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 42
77898: PUSH
77899: LD_INT 43
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 44
77908: PUSH
77909: LD_INT 46
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: LD_INT 45
77918: PUSH
77919: LD_INT 47
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: LIST
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: LIST
77935: ST_TO_ADDR
// result := [ ] ;
77936: LD_ADDR_VAR 0 3
77940: PUSH
77941: EMPTY
77942: ST_TO_ADDR
// for i in turrets do
77943: LD_ADDR_VAR 0 4
77947: PUSH
77948: LD_VAR 0 1
77952: PUSH
77953: FOR_IN
77954: IFFALSE 78137
// begin nat := GetNation ( i ) ;
77956: LD_ADDR_VAR 0 7
77960: PUSH
77961: LD_VAR 0 4
77965: PPUSH
77966: CALL_OW 248
77970: ST_TO_ADDR
// weapon := 0 ;
77971: LD_ADDR_VAR 0 8
77975: PUSH
77976: LD_INT 0
77978: ST_TO_ADDR
// if not nat then
77979: LD_VAR 0 7
77983: NOT
77984: IFFALSE 77988
// continue ;
77986: GO 77953
// for j in list [ nat ] do
77988: LD_ADDR_VAR 0 5
77992: PUSH
77993: LD_VAR 0 10
77997: PUSH
77998: LD_VAR 0 7
78002: ARRAY
78003: PUSH
78004: FOR_IN
78005: IFFALSE 78046
// if GetBWeapon ( i ) = j [ 1 ] then
78007: LD_VAR 0 4
78011: PPUSH
78012: CALL_OW 269
78016: PUSH
78017: LD_VAR 0 5
78021: PUSH
78022: LD_INT 1
78024: ARRAY
78025: EQUAL
78026: IFFALSE 78044
// begin weapon := j [ 2 ] ;
78028: LD_ADDR_VAR 0 8
78032: PUSH
78033: LD_VAR 0 5
78037: PUSH
78038: LD_INT 2
78040: ARRAY
78041: ST_TO_ADDR
// break ;
78042: GO 78046
// end ;
78044: GO 78004
78046: POP
78047: POP
// if not weapon then
78048: LD_VAR 0 8
78052: NOT
78053: IFFALSE 78057
// continue ;
78055: GO 77953
// for k in factories do
78057: LD_ADDR_VAR 0 6
78061: PUSH
78062: LD_VAR 0 2
78066: PUSH
78067: FOR_IN
78068: IFFALSE 78133
// begin weapons := AvailableWeaponList ( k ) ;
78070: LD_ADDR_VAR 0 9
78074: PUSH
78075: LD_VAR 0 6
78079: PPUSH
78080: CALL_OW 478
78084: ST_TO_ADDR
// if not weapons then
78085: LD_VAR 0 9
78089: NOT
78090: IFFALSE 78094
// continue ;
78092: GO 78067
// if weapon in weapons then
78094: LD_VAR 0 8
78098: PUSH
78099: LD_VAR 0 9
78103: IN
78104: IFFALSE 78131
// begin result := [ i , weapon ] ;
78106: LD_ADDR_VAR 0 3
78110: PUSH
78111: LD_VAR 0 4
78115: PUSH
78116: LD_VAR 0 8
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: ST_TO_ADDR
// exit ;
78125: POP
78126: POP
78127: POP
78128: POP
78129: GO 78139
// end ; end ;
78131: GO 78067
78133: POP
78134: POP
// end ;
78135: GO 77953
78137: POP
78138: POP
// end ;
78139: LD_VAR 0 3
78143: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78144: LD_INT 0
78146: PPUSH
// if not side or side > 8 then
78147: LD_VAR 0 3
78151: NOT
78152: PUSH
78153: LD_VAR 0 3
78157: PUSH
78158: LD_INT 8
78160: GREATER
78161: OR
78162: IFFALSE 78166
// exit ;
78164: GO 78225
// if not range then
78166: LD_VAR 0 4
78170: NOT
78171: IFFALSE 78182
// range := - 12 ;
78173: LD_ADDR_VAR 0 4
78177: PUSH
78178: LD_INT 12
78180: NEG
78181: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78182: LD_VAR 0 1
78186: PPUSH
78187: LD_VAR 0 2
78191: PPUSH
78192: LD_VAR 0 3
78196: PPUSH
78197: LD_VAR 0 4
78201: PPUSH
78202: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78206: LD_VAR 0 1
78210: PPUSH
78211: LD_VAR 0 2
78215: PPUSH
78216: LD_VAR 0 3
78220: PPUSH
78221: CALL_OW 331
// end ;
78225: LD_VAR 0 5
78229: RET
// export function Video ( mode ) ; begin
78230: LD_INT 0
78232: PPUSH
// ingame_video = mode ;
78233: LD_ADDR_OWVAR 52
78237: PUSH
78238: LD_VAR 0 1
78242: ST_TO_ADDR
// interface_hidden = mode ;
78243: LD_ADDR_OWVAR 54
78247: PUSH
78248: LD_VAR 0 1
78252: ST_TO_ADDR
// end ;
78253: LD_VAR 0 2
78257: RET
// export function Join ( array , element ) ; begin
78258: LD_INT 0
78260: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78261: LD_ADDR_VAR 0 3
78265: PUSH
78266: LD_VAR 0 1
78270: PPUSH
78271: LD_VAR 0 1
78275: PUSH
78276: LD_INT 1
78278: PLUS
78279: PPUSH
78280: LD_VAR 0 2
78284: PPUSH
78285: CALL_OW 1
78289: ST_TO_ADDR
// end ;
78290: LD_VAR 0 3
78294: RET
// export function JoinUnion ( array , element ) ; begin
78295: LD_INT 0
78297: PPUSH
// result := array union element ;
78298: LD_ADDR_VAR 0 3
78302: PUSH
78303: LD_VAR 0 1
78307: PUSH
78308: LD_VAR 0 2
78312: UNION
78313: ST_TO_ADDR
// end ;
78314: LD_VAR 0 3
78318: RET
// export function GetBehemoths ( side ) ; begin
78319: LD_INT 0
78321: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78322: LD_ADDR_VAR 0 2
78326: PUSH
78327: LD_INT 22
78329: PUSH
78330: LD_VAR 0 1
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: PUSH
78339: LD_INT 31
78341: PUSH
78342: LD_INT 25
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PPUSH
78353: CALL_OW 69
78357: ST_TO_ADDR
// end ;
78358: LD_VAR 0 2
78362: RET
// export function Shuffle ( array ) ; var i , index ; begin
78363: LD_INT 0
78365: PPUSH
78366: PPUSH
78367: PPUSH
// result := [ ] ;
78368: LD_ADDR_VAR 0 2
78372: PUSH
78373: EMPTY
78374: ST_TO_ADDR
// if not array then
78375: LD_VAR 0 1
78379: NOT
78380: IFFALSE 78384
// exit ;
78382: GO 78483
// Randomize ;
78384: CALL_OW 10
// for i = array downto 1 do
78388: LD_ADDR_VAR 0 3
78392: PUSH
78393: DOUBLE
78394: LD_VAR 0 1
78398: INC
78399: ST_TO_ADDR
78400: LD_INT 1
78402: PUSH
78403: FOR_DOWNTO
78404: IFFALSE 78481
// begin index := rand ( 1 , array ) ;
78406: LD_ADDR_VAR 0 4
78410: PUSH
78411: LD_INT 1
78413: PPUSH
78414: LD_VAR 0 1
78418: PPUSH
78419: CALL_OW 12
78423: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78424: LD_ADDR_VAR 0 2
78428: PUSH
78429: LD_VAR 0 2
78433: PPUSH
78434: LD_VAR 0 2
78438: PUSH
78439: LD_INT 1
78441: PLUS
78442: PPUSH
78443: LD_VAR 0 1
78447: PUSH
78448: LD_VAR 0 4
78452: ARRAY
78453: PPUSH
78454: CALL_OW 2
78458: ST_TO_ADDR
// array := Delete ( array , index ) ;
78459: LD_ADDR_VAR 0 1
78463: PUSH
78464: LD_VAR 0 1
78468: PPUSH
78469: LD_VAR 0 4
78473: PPUSH
78474: CALL_OW 3
78478: ST_TO_ADDR
// end ;
78479: GO 78403
78481: POP
78482: POP
// end ;
78483: LD_VAR 0 2
78487: RET
// export function GetBaseMaterials ( base ) ; begin
78488: LD_INT 0
78490: PPUSH
// result := [ 0 , 0 , 0 ] ;
78491: LD_ADDR_VAR 0 2
78495: PUSH
78496: LD_INT 0
78498: PUSH
78499: LD_INT 0
78501: PUSH
78502: LD_INT 0
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: LIST
78509: ST_TO_ADDR
// if not base then
78510: LD_VAR 0 1
78514: NOT
78515: IFFALSE 78519
// exit ;
78517: GO 78568
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78519: LD_ADDR_VAR 0 2
78523: PUSH
78524: LD_VAR 0 1
78528: PPUSH
78529: LD_INT 1
78531: PPUSH
78532: CALL_OW 275
78536: PUSH
78537: LD_VAR 0 1
78541: PPUSH
78542: LD_INT 2
78544: PPUSH
78545: CALL_OW 275
78549: PUSH
78550: LD_VAR 0 1
78554: PPUSH
78555: LD_INT 3
78557: PPUSH
78558: CALL_OW 275
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: LIST
78567: ST_TO_ADDR
// end ;
78568: LD_VAR 0 2
78572: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78573: LD_INT 0
78575: PPUSH
78576: PPUSH
// result := array ;
78577: LD_ADDR_VAR 0 3
78581: PUSH
78582: LD_VAR 0 1
78586: ST_TO_ADDR
// if size >= result then
78587: LD_VAR 0 2
78591: PUSH
78592: LD_VAR 0 3
78596: GREATEREQUAL
78597: IFFALSE 78601
// exit ;
78599: GO 78651
// if size then
78601: LD_VAR 0 2
78605: IFFALSE 78651
// for i := array downto size do
78607: LD_ADDR_VAR 0 4
78611: PUSH
78612: DOUBLE
78613: LD_VAR 0 1
78617: INC
78618: ST_TO_ADDR
78619: LD_VAR 0 2
78623: PUSH
78624: FOR_DOWNTO
78625: IFFALSE 78649
// result := Delete ( result , result ) ;
78627: LD_ADDR_VAR 0 3
78631: PUSH
78632: LD_VAR 0 3
78636: PPUSH
78637: LD_VAR 0 3
78641: PPUSH
78642: CALL_OW 3
78646: ST_TO_ADDR
78647: GO 78624
78649: POP
78650: POP
// end ;
78651: LD_VAR 0 3
78655: RET
// export function ComExit ( unit ) ; var tmp ; begin
78656: LD_INT 0
78658: PPUSH
78659: PPUSH
// if not IsInUnit ( unit ) then
78660: LD_VAR 0 1
78664: PPUSH
78665: CALL_OW 310
78669: NOT
78670: IFFALSE 78674
// exit ;
78672: GO 78734
// tmp := IsInUnit ( unit ) ;
78674: LD_ADDR_VAR 0 3
78678: PUSH
78679: LD_VAR 0 1
78683: PPUSH
78684: CALL_OW 310
78688: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78689: LD_VAR 0 3
78693: PPUSH
78694: CALL_OW 247
78698: PUSH
78699: LD_INT 2
78701: EQUAL
78702: IFFALSE 78715
// ComExitVehicle ( unit ) else
78704: LD_VAR 0 1
78708: PPUSH
78709: CALL_OW 121
78713: GO 78724
// ComExitBuilding ( unit ) ;
78715: LD_VAR 0 1
78719: PPUSH
78720: CALL_OW 122
// result := tmp ;
78724: LD_ADDR_VAR 0 2
78728: PUSH
78729: LD_VAR 0 3
78733: ST_TO_ADDR
// end ;
78734: LD_VAR 0 2
78738: RET
// export function ComExitAll ( units ) ; var i ; begin
78739: LD_INT 0
78741: PPUSH
78742: PPUSH
// if not units then
78743: LD_VAR 0 1
78747: NOT
78748: IFFALSE 78752
// exit ;
78750: GO 78778
// for i in units do
78752: LD_ADDR_VAR 0 3
78756: PUSH
78757: LD_VAR 0 1
78761: PUSH
78762: FOR_IN
78763: IFFALSE 78776
// ComExit ( i ) ;
78765: LD_VAR 0 3
78769: PPUSH
78770: CALL 78656 0 1
78774: GO 78762
78776: POP
78777: POP
// end ;
78778: LD_VAR 0 2
78782: RET
// export function ResetHc ; begin
78783: LD_INT 0
78785: PPUSH
// InitHc ;
78786: CALL_OW 19
// hc_importance := 0 ;
78790: LD_ADDR_OWVAR 32
78794: PUSH
78795: LD_INT 0
78797: ST_TO_ADDR
// end ;
78798: LD_VAR 0 1
78802: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78803: LD_INT 0
78805: PPUSH
78806: PPUSH
78807: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78808: LD_ADDR_VAR 0 6
78812: PUSH
78813: LD_VAR 0 1
78817: PUSH
78818: LD_VAR 0 3
78822: PLUS
78823: PUSH
78824: LD_INT 2
78826: DIV
78827: ST_TO_ADDR
// if _x < 0 then
78828: LD_VAR 0 6
78832: PUSH
78833: LD_INT 0
78835: LESS
78836: IFFALSE 78853
// _x := _x * - 1 ;
78838: LD_ADDR_VAR 0 6
78842: PUSH
78843: LD_VAR 0 6
78847: PUSH
78848: LD_INT 1
78850: NEG
78851: MUL
78852: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78853: LD_ADDR_VAR 0 7
78857: PUSH
78858: LD_VAR 0 2
78862: PUSH
78863: LD_VAR 0 4
78867: PLUS
78868: PUSH
78869: LD_INT 2
78871: DIV
78872: ST_TO_ADDR
// if _y < 0 then
78873: LD_VAR 0 7
78877: PUSH
78878: LD_INT 0
78880: LESS
78881: IFFALSE 78898
// _y := _y * - 1 ;
78883: LD_ADDR_VAR 0 7
78887: PUSH
78888: LD_VAR 0 7
78892: PUSH
78893: LD_INT 1
78895: NEG
78896: MUL
78897: ST_TO_ADDR
// result := [ _x , _y ] ;
78898: LD_ADDR_VAR 0 5
78902: PUSH
78903: LD_VAR 0 6
78907: PUSH
78908: LD_VAR 0 7
78912: PUSH
78913: EMPTY
78914: LIST
78915: LIST
78916: ST_TO_ADDR
// end ;
78917: LD_VAR 0 5
78921: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78922: LD_INT 0
78924: PPUSH
78925: PPUSH
78926: PPUSH
78927: PPUSH
// task := GetTaskList ( unit ) ;
78928: LD_ADDR_VAR 0 7
78932: PUSH
78933: LD_VAR 0 1
78937: PPUSH
78938: CALL_OW 437
78942: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78943: LD_VAR 0 7
78947: NOT
78948: PUSH
78949: LD_VAR 0 1
78953: PPUSH
78954: LD_VAR 0 2
78958: PPUSH
78959: CALL_OW 308
78963: NOT
78964: AND
78965: IFFALSE 78969
// exit ;
78967: GO 79087
// if IsInArea ( unit , area ) then
78969: LD_VAR 0 1
78973: PPUSH
78974: LD_VAR 0 2
78978: PPUSH
78979: CALL_OW 308
78983: IFFALSE 79001
// begin ComMoveToArea ( unit , goAway ) ;
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_VAR 0 3
78994: PPUSH
78995: CALL_OW 113
// exit ;
78999: GO 79087
// end ; if task [ 1 ] [ 1 ] <> M then
79001: LD_VAR 0 7
79005: PUSH
79006: LD_INT 1
79008: ARRAY
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PUSH
79014: LD_STRING M
79016: NONEQUAL
79017: IFFALSE 79021
// exit ;
79019: GO 79087
// x := task [ 1 ] [ 2 ] ;
79021: LD_ADDR_VAR 0 5
79025: PUSH
79026: LD_VAR 0 7
79030: PUSH
79031: LD_INT 1
79033: ARRAY
79034: PUSH
79035: LD_INT 2
79037: ARRAY
79038: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79039: LD_ADDR_VAR 0 6
79043: PUSH
79044: LD_VAR 0 7
79048: PUSH
79049: LD_INT 1
79051: ARRAY
79052: PUSH
79053: LD_INT 3
79055: ARRAY
79056: ST_TO_ADDR
// if InArea ( x , y , area ) then
79057: LD_VAR 0 5
79061: PPUSH
79062: LD_VAR 0 6
79066: PPUSH
79067: LD_VAR 0 2
79071: PPUSH
79072: CALL_OW 309
79076: IFFALSE 79087
// ComStop ( unit ) ;
79078: LD_VAR 0 1
79082: PPUSH
79083: CALL_OW 141
// end ;
79087: LD_VAR 0 4
79091: RET
// export function Abs ( value ) ; begin
79092: LD_INT 0
79094: PPUSH
// result := value ;
79095: LD_ADDR_VAR 0 2
79099: PUSH
79100: LD_VAR 0 1
79104: ST_TO_ADDR
// if value < 0 then
79105: LD_VAR 0 1
79109: PUSH
79110: LD_INT 0
79112: LESS
79113: IFFALSE 79130
// result := value * - 1 ;
79115: LD_ADDR_VAR 0 2
79119: PUSH
79120: LD_VAR 0 1
79124: PUSH
79125: LD_INT 1
79127: NEG
79128: MUL
79129: ST_TO_ADDR
// end ;
79130: LD_VAR 0 2
79134: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79135: LD_INT 0
79137: PPUSH
79138: PPUSH
79139: PPUSH
79140: PPUSH
79141: PPUSH
79142: PPUSH
79143: PPUSH
79144: PPUSH
// if not unit or not building then
79145: LD_VAR 0 1
79149: NOT
79150: PUSH
79151: LD_VAR 0 2
79155: NOT
79156: OR
79157: IFFALSE 79161
// exit ;
79159: GO 79387
// x := GetX ( building ) ;
79161: LD_ADDR_VAR 0 4
79165: PUSH
79166: LD_VAR 0 2
79170: PPUSH
79171: CALL_OW 250
79175: ST_TO_ADDR
// y := GetY ( building ) ;
79176: LD_ADDR_VAR 0 6
79180: PUSH
79181: LD_VAR 0 2
79185: PPUSH
79186: CALL_OW 251
79190: ST_TO_ADDR
// d := GetDir ( building ) ;
79191: LD_ADDR_VAR 0 8
79195: PUSH
79196: LD_VAR 0 2
79200: PPUSH
79201: CALL_OW 254
79205: ST_TO_ADDR
// r := 4 ;
79206: LD_ADDR_VAR 0 9
79210: PUSH
79211: LD_INT 4
79213: ST_TO_ADDR
// for i := 1 to 5 do
79214: LD_ADDR_VAR 0 10
79218: PUSH
79219: DOUBLE
79220: LD_INT 1
79222: DEC
79223: ST_TO_ADDR
79224: LD_INT 5
79226: PUSH
79227: FOR_TO
79228: IFFALSE 79385
// begin _x := ShiftX ( x , d , r + i ) ;
79230: LD_ADDR_VAR 0 5
79234: PUSH
79235: LD_VAR 0 4
79239: PPUSH
79240: LD_VAR 0 8
79244: PPUSH
79245: LD_VAR 0 9
79249: PUSH
79250: LD_VAR 0 10
79254: PLUS
79255: PPUSH
79256: CALL_OW 272
79260: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79261: LD_ADDR_VAR 0 7
79265: PUSH
79266: LD_VAR 0 6
79270: PPUSH
79271: LD_VAR 0 8
79275: PPUSH
79276: LD_VAR 0 9
79280: PUSH
79281: LD_VAR 0 10
79285: PLUS
79286: PPUSH
79287: CALL_OW 273
79291: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79292: LD_VAR 0 5
79296: PPUSH
79297: LD_VAR 0 7
79301: PPUSH
79302: CALL_OW 488
79306: PUSH
79307: LD_VAR 0 5
79311: PPUSH
79312: LD_VAR 0 7
79316: PPUSH
79317: CALL_OW 428
79321: PPUSH
79322: CALL_OW 247
79326: PUSH
79327: LD_INT 3
79329: PUSH
79330: LD_INT 2
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: IN
79337: NOT
79338: AND
79339: IFFALSE 79383
// begin ComMoveXY ( unit , _x , _y ) ;
79341: LD_VAR 0 1
79345: PPUSH
79346: LD_VAR 0 5
79350: PPUSH
79351: LD_VAR 0 7
79355: PPUSH
79356: CALL_OW 111
// result := [ _x , _y ] ;
79360: LD_ADDR_VAR 0 3
79364: PUSH
79365: LD_VAR 0 5
79369: PUSH
79370: LD_VAR 0 7
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: ST_TO_ADDR
// exit ;
79379: POP
79380: POP
79381: GO 79387
// end ; end ;
79383: GO 79227
79385: POP
79386: POP
// end ;
79387: LD_VAR 0 3
79391: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79392: LD_INT 0
79394: PPUSH
79395: PPUSH
79396: PPUSH
// result := 0 ;
79397: LD_ADDR_VAR 0 3
79401: PUSH
79402: LD_INT 0
79404: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79405: LD_VAR 0 1
79409: PUSH
79410: LD_INT 0
79412: LESS
79413: PUSH
79414: LD_VAR 0 1
79418: PUSH
79419: LD_INT 8
79421: GREATER
79422: OR
79423: PUSH
79424: LD_VAR 0 2
79428: PUSH
79429: LD_INT 0
79431: LESS
79432: OR
79433: PUSH
79434: LD_VAR 0 2
79438: PUSH
79439: LD_INT 8
79441: GREATER
79442: OR
79443: IFFALSE 79447
// exit ;
79445: GO 79522
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79447: LD_ADDR_VAR 0 4
79451: PUSH
79452: LD_INT 22
79454: PUSH
79455: LD_VAR 0 2
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: PPUSH
79464: CALL_OW 69
79468: PUSH
79469: FOR_IN
79470: IFFALSE 79520
// begin un := UnitShoot ( i ) ;
79472: LD_ADDR_VAR 0 5
79476: PUSH
79477: LD_VAR 0 4
79481: PPUSH
79482: CALL_OW 504
79486: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79487: LD_VAR 0 5
79491: PPUSH
79492: CALL_OW 255
79496: PUSH
79497: LD_VAR 0 1
79501: EQUAL
79502: IFFALSE 79518
// begin result := un ;
79504: LD_ADDR_VAR 0 3
79508: PUSH
79509: LD_VAR 0 5
79513: ST_TO_ADDR
// exit ;
79514: POP
79515: POP
79516: GO 79522
// end ; end ;
79518: GO 79469
79520: POP
79521: POP
// end ;
79522: LD_VAR 0 3
79526: RET
// export function GetCargoBay ( units ) ; begin
79527: LD_INT 0
79529: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79530: LD_ADDR_VAR 0 2
79534: PUSH
79535: LD_VAR 0 1
79539: PPUSH
79540: LD_INT 2
79542: PUSH
79543: LD_INT 34
79545: PUSH
79546: LD_INT 12
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 34
79555: PUSH
79556: LD_INT 51
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 34
79565: PUSH
79566: LD_INT 32
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PUSH
79573: LD_INT 34
79575: PUSH
79576: LD_INT 89
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: PPUSH
79590: CALL_OW 72
79594: ST_TO_ADDR
// end ;
79595: LD_VAR 0 2
79599: RET
// export function Negate ( value ) ; begin
79600: LD_INT 0
79602: PPUSH
// result := not value ;
79603: LD_ADDR_VAR 0 2
79607: PUSH
79608: LD_VAR 0 1
79612: NOT
79613: ST_TO_ADDR
// end ;
79614: LD_VAR 0 2
79618: RET
// export function Inc ( value ) ; begin
79619: LD_INT 0
79621: PPUSH
// result := value + 1 ;
79622: LD_ADDR_VAR 0 2
79626: PUSH
79627: LD_VAR 0 1
79631: PUSH
79632: LD_INT 1
79634: PLUS
79635: ST_TO_ADDR
// end ;
79636: LD_VAR 0 2
79640: RET
// export function Dec ( value ) ; begin
79641: LD_INT 0
79643: PPUSH
// result := value - 1 ;
79644: LD_ADDR_VAR 0 2
79648: PUSH
79649: LD_VAR 0 1
79653: PUSH
79654: LD_INT 1
79656: MINUS
79657: ST_TO_ADDR
// end ;
79658: LD_VAR 0 2
79662: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79663: LD_INT 0
79665: PPUSH
79666: PPUSH
79667: PPUSH
79668: PPUSH
79669: PPUSH
79670: PPUSH
79671: PPUSH
79672: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79673: LD_VAR 0 1
79677: PPUSH
79678: LD_VAR 0 2
79682: PPUSH
79683: CALL_OW 488
79687: NOT
79688: PUSH
79689: LD_VAR 0 3
79693: PPUSH
79694: LD_VAR 0 4
79698: PPUSH
79699: CALL_OW 488
79703: NOT
79704: OR
79705: IFFALSE 79718
// begin result := - 1 ;
79707: LD_ADDR_VAR 0 5
79711: PUSH
79712: LD_INT 1
79714: NEG
79715: ST_TO_ADDR
// exit ;
79716: GO 79953
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79718: LD_ADDR_VAR 0 12
79722: PUSH
79723: LD_VAR 0 1
79727: PPUSH
79728: LD_VAR 0 2
79732: PPUSH
79733: LD_VAR 0 3
79737: PPUSH
79738: LD_VAR 0 4
79742: PPUSH
79743: CALL 78803 0 4
79747: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79748: LD_ADDR_VAR 0 11
79752: PUSH
79753: LD_VAR 0 1
79757: PPUSH
79758: LD_VAR 0 2
79762: PPUSH
79763: LD_VAR 0 12
79767: PUSH
79768: LD_INT 1
79770: ARRAY
79771: PPUSH
79772: LD_VAR 0 12
79776: PUSH
79777: LD_INT 2
79779: ARRAY
79780: PPUSH
79781: CALL_OW 298
79785: ST_TO_ADDR
// distance := 9999 ;
79786: LD_ADDR_VAR 0 10
79790: PUSH
79791: LD_INT 9999
79793: ST_TO_ADDR
// for i := 0 to 5 do
79794: LD_ADDR_VAR 0 6
79798: PUSH
79799: DOUBLE
79800: LD_INT 0
79802: DEC
79803: ST_TO_ADDR
79804: LD_INT 5
79806: PUSH
79807: FOR_TO
79808: IFFALSE 79951
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79810: LD_ADDR_VAR 0 7
79814: PUSH
79815: LD_VAR 0 1
79819: PPUSH
79820: LD_VAR 0 6
79824: PPUSH
79825: LD_VAR 0 11
79829: PPUSH
79830: CALL_OW 272
79834: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79835: LD_ADDR_VAR 0 8
79839: PUSH
79840: LD_VAR 0 2
79844: PPUSH
79845: LD_VAR 0 6
79849: PPUSH
79850: LD_VAR 0 11
79854: PPUSH
79855: CALL_OW 273
79859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79860: LD_VAR 0 7
79864: PPUSH
79865: LD_VAR 0 8
79869: PPUSH
79870: CALL_OW 488
79874: NOT
79875: IFFALSE 79879
// continue ;
79877: GO 79807
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79879: LD_ADDR_VAR 0 9
79883: PUSH
79884: LD_VAR 0 12
79888: PUSH
79889: LD_INT 1
79891: ARRAY
79892: PPUSH
79893: LD_VAR 0 12
79897: PUSH
79898: LD_INT 2
79900: ARRAY
79901: PPUSH
79902: LD_VAR 0 7
79906: PPUSH
79907: LD_VAR 0 8
79911: PPUSH
79912: CALL_OW 298
79916: ST_TO_ADDR
// if tmp < distance then
79917: LD_VAR 0 9
79921: PUSH
79922: LD_VAR 0 10
79926: LESS
79927: IFFALSE 79949
// begin result := i ;
79929: LD_ADDR_VAR 0 5
79933: PUSH
79934: LD_VAR 0 6
79938: ST_TO_ADDR
// distance := tmp ;
79939: LD_ADDR_VAR 0 10
79943: PUSH
79944: LD_VAR 0 9
79948: ST_TO_ADDR
// end ; end ;
79949: GO 79807
79951: POP
79952: POP
// end ;
79953: LD_VAR 0 5
79957: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79958: LD_INT 0
79960: PPUSH
79961: PPUSH
// if not driver or not IsInUnit ( driver ) then
79962: LD_VAR 0 1
79966: NOT
79967: PUSH
79968: LD_VAR 0 1
79972: PPUSH
79973: CALL_OW 310
79977: NOT
79978: OR
79979: IFFALSE 79983
// exit ;
79981: GO 80073
// vehicle := IsInUnit ( driver ) ;
79983: LD_ADDR_VAR 0 3
79987: PUSH
79988: LD_VAR 0 1
79992: PPUSH
79993: CALL_OW 310
79997: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79998: LD_VAR 0 1
80002: PPUSH
80003: LD_STRING \
80005: PUSH
80006: LD_INT 0
80008: PUSH
80009: LD_INT 0
80011: PUSH
80012: LD_INT 0
80014: PUSH
80015: LD_INT 0
80017: PUSH
80018: LD_INT 0
80020: PUSH
80021: LD_INT 0
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: PUSH
80033: LD_STRING E
80035: PUSH
80036: LD_INT 0
80038: PUSH
80039: LD_INT 0
80041: PUSH
80042: LD_VAR 0 3
80046: PUSH
80047: LD_INT 0
80049: PUSH
80050: LD_INT 0
80052: PUSH
80053: LD_INT 0
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: LIST
80060: LIST
80061: LIST
80062: LIST
80063: LIST
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PPUSH
80069: CALL_OW 446
// end ;
80073: LD_VAR 0 2
80077: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80078: LD_INT 0
80080: PPUSH
80081: PPUSH
// if not driver or not IsInUnit ( driver ) then
80082: LD_VAR 0 1
80086: NOT
80087: PUSH
80088: LD_VAR 0 1
80092: PPUSH
80093: CALL_OW 310
80097: NOT
80098: OR
80099: IFFALSE 80103
// exit ;
80101: GO 80193
// vehicle := IsInUnit ( driver ) ;
80103: LD_ADDR_VAR 0 3
80107: PUSH
80108: LD_VAR 0 1
80112: PPUSH
80113: CALL_OW 310
80117: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80118: LD_VAR 0 1
80122: PPUSH
80123: LD_STRING \
80125: PUSH
80126: LD_INT 0
80128: PUSH
80129: LD_INT 0
80131: PUSH
80132: LD_INT 0
80134: PUSH
80135: LD_INT 0
80137: PUSH
80138: LD_INT 0
80140: PUSH
80141: LD_INT 0
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: PUSH
80153: LD_STRING E
80155: PUSH
80156: LD_INT 0
80158: PUSH
80159: LD_INT 0
80161: PUSH
80162: LD_VAR 0 3
80166: PUSH
80167: LD_INT 0
80169: PUSH
80170: LD_INT 0
80172: PUSH
80173: LD_INT 0
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PPUSH
80189: CALL_OW 447
// end ;
80193: LD_VAR 0 2
80197: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80198: LD_INT 0
80200: PPUSH
80201: PPUSH
80202: PPUSH
// tmp := [ ] ;
80203: LD_ADDR_VAR 0 5
80207: PUSH
80208: EMPTY
80209: ST_TO_ADDR
// for i in units do
80210: LD_ADDR_VAR 0 4
80214: PUSH
80215: LD_VAR 0 1
80219: PUSH
80220: FOR_IN
80221: IFFALSE 80259
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80223: LD_ADDR_VAR 0 5
80227: PUSH
80228: LD_VAR 0 5
80232: PPUSH
80233: LD_VAR 0 5
80237: PUSH
80238: LD_INT 1
80240: PLUS
80241: PPUSH
80242: LD_VAR 0 4
80246: PPUSH
80247: CALL_OW 256
80251: PPUSH
80252: CALL_OW 2
80256: ST_TO_ADDR
80257: GO 80220
80259: POP
80260: POP
// if not tmp then
80261: LD_VAR 0 5
80265: NOT
80266: IFFALSE 80270
// exit ;
80268: GO 80318
// if asc then
80270: LD_VAR 0 2
80274: IFFALSE 80298
// result := SortListByListAsc ( units , tmp ) else
80276: LD_ADDR_VAR 0 3
80280: PUSH
80281: LD_VAR 0 1
80285: PPUSH
80286: LD_VAR 0 5
80290: PPUSH
80291: CALL_OW 76
80295: ST_TO_ADDR
80296: GO 80318
// result := SortListByListDesc ( units , tmp ) ;
80298: LD_ADDR_VAR 0 3
80302: PUSH
80303: LD_VAR 0 1
80307: PPUSH
80308: LD_VAR 0 5
80312: PPUSH
80313: CALL_OW 77
80317: ST_TO_ADDR
// end ;
80318: LD_VAR 0 3
80322: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80323: LD_INT 0
80325: PPUSH
80326: PPUSH
// task := GetTaskList ( mech ) ;
80327: LD_ADDR_VAR 0 4
80331: PUSH
80332: LD_VAR 0 1
80336: PPUSH
80337: CALL_OW 437
80341: ST_TO_ADDR
// if not task then
80342: LD_VAR 0 4
80346: NOT
80347: IFFALSE 80351
// exit ;
80349: GO 80393
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80351: LD_ADDR_VAR 0 3
80355: PUSH
80356: LD_VAR 0 4
80360: PUSH
80361: LD_INT 1
80363: ARRAY
80364: PUSH
80365: LD_INT 1
80367: ARRAY
80368: PUSH
80369: LD_STRING r
80371: EQUAL
80372: PUSH
80373: LD_VAR 0 4
80377: PUSH
80378: LD_INT 1
80380: ARRAY
80381: PUSH
80382: LD_INT 4
80384: ARRAY
80385: PUSH
80386: LD_VAR 0 2
80390: EQUAL
80391: AND
80392: ST_TO_ADDR
// end ;
80393: LD_VAR 0 3
80397: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80398: LD_INT 0
80400: PPUSH
// SetDir ( unit , d ) ;
80401: LD_VAR 0 1
80405: PPUSH
80406: LD_VAR 0 4
80410: PPUSH
80411: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80415: LD_VAR 0 1
80419: PPUSH
80420: LD_VAR 0 2
80424: PPUSH
80425: LD_VAR 0 3
80429: PPUSH
80430: LD_VAR 0 5
80434: PPUSH
80435: CALL_OW 48
// end ;
80439: LD_VAR 0 6
80443: RET
// export function ToNaturalNumber ( number ) ; begin
80444: LD_INT 0
80446: PPUSH
// result := number div 1 ;
80447: LD_ADDR_VAR 0 2
80451: PUSH
80452: LD_VAR 0 1
80456: PUSH
80457: LD_INT 1
80459: DIV
80460: ST_TO_ADDR
// if number < 0 then
80461: LD_VAR 0 1
80465: PUSH
80466: LD_INT 0
80468: LESS
80469: IFFALSE 80479
// result := 0 ;
80471: LD_ADDR_VAR 0 2
80475: PUSH
80476: LD_INT 0
80478: ST_TO_ADDR
// end ;
80479: LD_VAR 0 2
80483: RET
// export function SortByClass ( units , class ) ; var un ; begin
80484: LD_INT 0
80486: PPUSH
80487: PPUSH
// if not units or not class then
80488: LD_VAR 0 1
80492: NOT
80493: PUSH
80494: LD_VAR 0 2
80498: NOT
80499: OR
80500: IFFALSE 80504
// exit ;
80502: GO 80599
// result := [ ] ;
80504: LD_ADDR_VAR 0 3
80508: PUSH
80509: EMPTY
80510: ST_TO_ADDR
// for un in units do
80511: LD_ADDR_VAR 0 4
80515: PUSH
80516: LD_VAR 0 1
80520: PUSH
80521: FOR_IN
80522: IFFALSE 80597
// if GetClass ( un ) = class then
80524: LD_VAR 0 4
80528: PPUSH
80529: CALL_OW 257
80533: PUSH
80534: LD_VAR 0 2
80538: EQUAL
80539: IFFALSE 80566
// result := Insert ( result , 1 , un ) else
80541: LD_ADDR_VAR 0 3
80545: PUSH
80546: LD_VAR 0 3
80550: PPUSH
80551: LD_INT 1
80553: PPUSH
80554: LD_VAR 0 4
80558: PPUSH
80559: CALL_OW 2
80563: ST_TO_ADDR
80564: GO 80595
// result := Replace ( result , result + 1 , un ) ;
80566: LD_ADDR_VAR 0 3
80570: PUSH
80571: LD_VAR 0 3
80575: PPUSH
80576: LD_VAR 0 3
80580: PUSH
80581: LD_INT 1
80583: PLUS
80584: PPUSH
80585: LD_VAR 0 4
80589: PPUSH
80590: CALL_OW 1
80594: ST_TO_ADDR
80595: GO 80521
80597: POP
80598: POP
// end ;
80599: LD_VAR 0 3
80603: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80604: LD_INT 0
80606: PPUSH
80607: PPUSH
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
// result := [ ] ;
80613: LD_ADDR_VAR 0 4
80617: PUSH
80618: EMPTY
80619: ST_TO_ADDR
// if x - r < 0 then
80620: LD_VAR 0 1
80624: PUSH
80625: LD_VAR 0 3
80629: MINUS
80630: PUSH
80631: LD_INT 0
80633: LESS
80634: IFFALSE 80646
// min_x := 0 else
80636: LD_ADDR_VAR 0 8
80640: PUSH
80641: LD_INT 0
80643: ST_TO_ADDR
80644: GO 80662
// min_x := x - r ;
80646: LD_ADDR_VAR 0 8
80650: PUSH
80651: LD_VAR 0 1
80655: PUSH
80656: LD_VAR 0 3
80660: MINUS
80661: ST_TO_ADDR
// if y - r < 0 then
80662: LD_VAR 0 2
80666: PUSH
80667: LD_VAR 0 3
80671: MINUS
80672: PUSH
80673: LD_INT 0
80675: LESS
80676: IFFALSE 80688
// min_y := 0 else
80678: LD_ADDR_VAR 0 7
80682: PUSH
80683: LD_INT 0
80685: ST_TO_ADDR
80686: GO 80704
// min_y := y - r ;
80688: LD_ADDR_VAR 0 7
80692: PUSH
80693: LD_VAR 0 2
80697: PUSH
80698: LD_VAR 0 3
80702: MINUS
80703: ST_TO_ADDR
// max_x := x + r ;
80704: LD_ADDR_VAR 0 9
80708: PUSH
80709: LD_VAR 0 1
80713: PUSH
80714: LD_VAR 0 3
80718: PLUS
80719: ST_TO_ADDR
// max_y := y + r ;
80720: LD_ADDR_VAR 0 10
80724: PUSH
80725: LD_VAR 0 2
80729: PUSH
80730: LD_VAR 0 3
80734: PLUS
80735: ST_TO_ADDR
// for _x = min_x to max_x do
80736: LD_ADDR_VAR 0 5
80740: PUSH
80741: DOUBLE
80742: LD_VAR 0 8
80746: DEC
80747: ST_TO_ADDR
80748: LD_VAR 0 9
80752: PUSH
80753: FOR_TO
80754: IFFALSE 80855
// for _y = min_y to max_y do
80756: LD_ADDR_VAR 0 6
80760: PUSH
80761: DOUBLE
80762: LD_VAR 0 7
80766: DEC
80767: ST_TO_ADDR
80768: LD_VAR 0 10
80772: PUSH
80773: FOR_TO
80774: IFFALSE 80851
// begin if not ValidHex ( _x , _y ) then
80776: LD_VAR 0 5
80780: PPUSH
80781: LD_VAR 0 6
80785: PPUSH
80786: CALL_OW 488
80790: NOT
80791: IFFALSE 80795
// continue ;
80793: GO 80773
// if GetResourceTypeXY ( _x , _y ) then
80795: LD_VAR 0 5
80799: PPUSH
80800: LD_VAR 0 6
80804: PPUSH
80805: CALL_OW 283
80809: IFFALSE 80849
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80811: LD_ADDR_VAR 0 4
80815: PUSH
80816: LD_VAR 0 4
80820: PPUSH
80821: LD_VAR 0 4
80825: PUSH
80826: LD_INT 1
80828: PLUS
80829: PPUSH
80830: LD_VAR 0 5
80834: PUSH
80835: LD_VAR 0 6
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PPUSH
80844: CALL_OW 1
80848: ST_TO_ADDR
// end ;
80849: GO 80773
80851: POP
80852: POP
80853: GO 80753
80855: POP
80856: POP
// end ;
80857: LD_VAR 0 4
80861: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80862: LD_INT 0
80864: PPUSH
80865: PPUSH
80866: PPUSH
80867: PPUSH
80868: PPUSH
80869: PPUSH
80870: PPUSH
80871: PPUSH
// if not units then
80872: LD_VAR 0 1
80876: NOT
80877: IFFALSE 80881
// exit ;
80879: GO 81409
// result := UnitFilter ( units , [ f_ok ] ) ;
80881: LD_ADDR_VAR 0 3
80885: PUSH
80886: LD_VAR 0 1
80890: PPUSH
80891: LD_INT 50
80893: PUSH
80894: EMPTY
80895: LIST
80896: PPUSH
80897: CALL_OW 72
80901: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80902: LD_ADDR_VAR 0 8
80906: PUSH
80907: LD_VAR 0 1
80911: PUSH
80912: LD_INT 1
80914: ARRAY
80915: PPUSH
80916: CALL_OW 255
80920: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80921: LD_ADDR_VAR 0 10
80925: PUSH
80926: LD_INT 29
80928: PUSH
80929: LD_INT 91
80931: PUSH
80932: LD_INT 49
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: LIST
80939: ST_TO_ADDR
// if not result then
80940: LD_VAR 0 3
80944: NOT
80945: IFFALSE 80949
// exit ;
80947: GO 81409
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80949: LD_ADDR_VAR 0 5
80953: PUSH
80954: LD_INT 81
80956: PUSH
80957: LD_VAR 0 8
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PPUSH
80966: CALL_OW 69
80970: ST_TO_ADDR
// for i in result do
80971: LD_ADDR_VAR 0 4
80975: PUSH
80976: LD_VAR 0 3
80980: PUSH
80981: FOR_IN
80982: IFFALSE 81407
// begin tag := GetTag ( i ) + 1 ;
80984: LD_ADDR_VAR 0 9
80988: PUSH
80989: LD_VAR 0 4
80993: PPUSH
80994: CALL_OW 110
80998: PUSH
80999: LD_INT 1
81001: PLUS
81002: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81003: LD_ADDR_VAR 0 7
81007: PUSH
81008: LD_VAR 0 4
81012: PPUSH
81013: CALL_OW 250
81017: PPUSH
81018: LD_VAR 0 4
81022: PPUSH
81023: CALL_OW 251
81027: PPUSH
81028: LD_INT 4
81030: PPUSH
81031: CALL 80604 0 3
81035: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81036: LD_VAR 0 4
81040: PPUSH
81041: CALL_OW 247
81045: PUSH
81046: LD_INT 2
81048: EQUAL
81049: PUSH
81050: LD_VAR 0 7
81054: PUSH
81055: LD_INT 2
81057: GREATER
81058: AND
81059: PUSH
81060: LD_VAR 0 4
81064: PPUSH
81065: CALL_OW 264
81069: PUSH
81070: LD_VAR 0 10
81074: IN
81075: NOT
81076: AND
81077: IFFALSE 81116
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81079: LD_VAR 0 4
81083: PPUSH
81084: LD_VAR 0 7
81088: PUSH
81089: LD_INT 1
81091: ARRAY
81092: PUSH
81093: LD_INT 1
81095: ARRAY
81096: PPUSH
81097: LD_VAR 0 7
81101: PUSH
81102: LD_INT 1
81104: ARRAY
81105: PUSH
81106: LD_INT 2
81108: ARRAY
81109: PPUSH
81110: CALL_OW 116
81114: GO 81405
// if path > tag then
81116: LD_VAR 0 2
81120: PUSH
81121: LD_VAR 0 9
81125: GREATER
81126: IFFALSE 81334
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81128: LD_ADDR_VAR 0 6
81132: PUSH
81133: LD_VAR 0 5
81137: PPUSH
81138: LD_INT 91
81140: PUSH
81141: LD_VAR 0 4
81145: PUSH
81146: LD_INT 8
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: LIST
81153: PPUSH
81154: CALL_OW 72
81158: ST_TO_ADDR
// if nearEnemy then
81159: LD_VAR 0 6
81163: IFFALSE 81232
// begin if GetWeapon ( i ) = ru_time_lapser then
81165: LD_VAR 0 4
81169: PPUSH
81170: CALL_OW 264
81174: PUSH
81175: LD_INT 49
81177: EQUAL
81178: IFFALSE 81206
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81180: LD_VAR 0 4
81184: PPUSH
81185: LD_VAR 0 6
81189: PPUSH
81190: LD_VAR 0 4
81194: PPUSH
81195: CALL_OW 74
81199: PPUSH
81200: CALL_OW 112
81204: GO 81230
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81206: LD_VAR 0 4
81210: PPUSH
81211: LD_VAR 0 6
81215: PPUSH
81216: LD_VAR 0 4
81220: PPUSH
81221: CALL_OW 74
81225: PPUSH
81226: CALL 82480 0 2
// end else
81230: GO 81332
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81232: LD_VAR 0 4
81236: PPUSH
81237: LD_VAR 0 2
81241: PUSH
81242: LD_VAR 0 9
81246: ARRAY
81247: PUSH
81248: LD_INT 1
81250: ARRAY
81251: PPUSH
81252: LD_VAR 0 2
81256: PUSH
81257: LD_VAR 0 9
81261: ARRAY
81262: PUSH
81263: LD_INT 2
81265: ARRAY
81266: PPUSH
81267: CALL_OW 297
81271: PUSH
81272: LD_INT 6
81274: GREATER
81275: IFFALSE 81318
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81277: LD_VAR 0 4
81281: PPUSH
81282: LD_VAR 0 2
81286: PUSH
81287: LD_VAR 0 9
81291: ARRAY
81292: PUSH
81293: LD_INT 1
81295: ARRAY
81296: PPUSH
81297: LD_VAR 0 2
81301: PUSH
81302: LD_VAR 0 9
81306: ARRAY
81307: PUSH
81308: LD_INT 2
81310: ARRAY
81311: PPUSH
81312: CALL_OW 114
81316: GO 81332
// SetTag ( i , tag ) ;
81318: LD_VAR 0 4
81322: PPUSH
81323: LD_VAR 0 9
81327: PPUSH
81328: CALL_OW 109
// end else
81332: GO 81405
// if enemy then
81334: LD_VAR 0 5
81338: IFFALSE 81405
// begin if GetWeapon ( i ) = ru_time_lapser then
81340: LD_VAR 0 4
81344: PPUSH
81345: CALL_OW 264
81349: PUSH
81350: LD_INT 49
81352: EQUAL
81353: IFFALSE 81381
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81355: LD_VAR 0 4
81359: PPUSH
81360: LD_VAR 0 5
81364: PPUSH
81365: LD_VAR 0 4
81369: PPUSH
81370: CALL_OW 74
81374: PPUSH
81375: CALL_OW 112
81379: GO 81405
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81381: LD_VAR 0 4
81385: PPUSH
81386: LD_VAR 0 5
81390: PPUSH
81391: LD_VAR 0 4
81395: PPUSH
81396: CALL_OW 74
81400: PPUSH
81401: CALL 82480 0 2
// end ; end ;
81405: GO 80981
81407: POP
81408: POP
// end ;
81409: LD_VAR 0 3
81413: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81414: LD_INT 0
81416: PPUSH
81417: PPUSH
81418: PPUSH
// if not unit or IsInUnit ( unit ) then
81419: LD_VAR 0 1
81423: NOT
81424: PUSH
81425: LD_VAR 0 1
81429: PPUSH
81430: CALL_OW 310
81434: OR
81435: IFFALSE 81439
// exit ;
81437: GO 81530
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81439: LD_ADDR_VAR 0 4
81443: PUSH
81444: LD_VAR 0 1
81448: PPUSH
81449: CALL_OW 250
81453: PPUSH
81454: LD_VAR 0 2
81458: PPUSH
81459: LD_INT 1
81461: PPUSH
81462: CALL_OW 272
81466: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81467: LD_ADDR_VAR 0 5
81471: PUSH
81472: LD_VAR 0 1
81476: PPUSH
81477: CALL_OW 251
81481: PPUSH
81482: LD_VAR 0 2
81486: PPUSH
81487: LD_INT 1
81489: PPUSH
81490: CALL_OW 273
81494: ST_TO_ADDR
// if ValidHex ( x , y ) then
81495: LD_VAR 0 4
81499: PPUSH
81500: LD_VAR 0 5
81504: PPUSH
81505: CALL_OW 488
81509: IFFALSE 81530
// ComTurnXY ( unit , x , y ) ;
81511: LD_VAR 0 1
81515: PPUSH
81516: LD_VAR 0 4
81520: PPUSH
81521: LD_VAR 0 5
81525: PPUSH
81526: CALL_OW 118
// end ;
81530: LD_VAR 0 3
81534: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81535: LD_INT 0
81537: PPUSH
81538: PPUSH
// result := false ;
81539: LD_ADDR_VAR 0 3
81543: PUSH
81544: LD_INT 0
81546: ST_TO_ADDR
// if not units then
81547: LD_VAR 0 2
81551: NOT
81552: IFFALSE 81556
// exit ;
81554: GO 81601
// for i in units do
81556: LD_ADDR_VAR 0 4
81560: PUSH
81561: LD_VAR 0 2
81565: PUSH
81566: FOR_IN
81567: IFFALSE 81599
// if See ( side , i ) then
81569: LD_VAR 0 1
81573: PPUSH
81574: LD_VAR 0 4
81578: PPUSH
81579: CALL_OW 292
81583: IFFALSE 81597
// begin result := true ;
81585: LD_ADDR_VAR 0 3
81589: PUSH
81590: LD_INT 1
81592: ST_TO_ADDR
// exit ;
81593: POP
81594: POP
81595: GO 81601
// end ;
81597: GO 81566
81599: POP
81600: POP
// end ;
81601: LD_VAR 0 3
81605: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81606: LD_INT 0
81608: PPUSH
81609: PPUSH
81610: PPUSH
81611: PPUSH
// if not unit or not points then
81612: LD_VAR 0 1
81616: NOT
81617: PUSH
81618: LD_VAR 0 2
81622: NOT
81623: OR
81624: IFFALSE 81628
// exit ;
81626: GO 81718
// dist := 99999 ;
81628: LD_ADDR_VAR 0 5
81632: PUSH
81633: LD_INT 99999
81635: ST_TO_ADDR
// for i in points do
81636: LD_ADDR_VAR 0 4
81640: PUSH
81641: LD_VAR 0 2
81645: PUSH
81646: FOR_IN
81647: IFFALSE 81716
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81649: LD_ADDR_VAR 0 6
81653: PUSH
81654: LD_VAR 0 1
81658: PPUSH
81659: LD_VAR 0 4
81663: PUSH
81664: LD_INT 1
81666: ARRAY
81667: PPUSH
81668: LD_VAR 0 4
81672: PUSH
81673: LD_INT 2
81675: ARRAY
81676: PPUSH
81677: CALL_OW 297
81681: ST_TO_ADDR
// if tmpDist < dist then
81682: LD_VAR 0 6
81686: PUSH
81687: LD_VAR 0 5
81691: LESS
81692: IFFALSE 81714
// begin result := i ;
81694: LD_ADDR_VAR 0 3
81698: PUSH
81699: LD_VAR 0 4
81703: ST_TO_ADDR
// dist := tmpDist ;
81704: LD_ADDR_VAR 0 5
81708: PUSH
81709: LD_VAR 0 6
81713: ST_TO_ADDR
// end ; end ;
81714: GO 81646
81716: POP
81717: POP
// end ;
81718: LD_VAR 0 3
81722: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81723: LD_INT 0
81725: PPUSH
// uc_side := side ;
81726: LD_ADDR_OWVAR 20
81730: PUSH
81731: LD_VAR 0 1
81735: ST_TO_ADDR
// uc_nation := 3 ;
81736: LD_ADDR_OWVAR 21
81740: PUSH
81741: LD_INT 3
81743: ST_TO_ADDR
// vc_chassis := 25 ;
81744: LD_ADDR_OWVAR 37
81748: PUSH
81749: LD_INT 25
81751: ST_TO_ADDR
// vc_engine := engine_siberite ;
81752: LD_ADDR_OWVAR 39
81756: PUSH
81757: LD_INT 3
81759: ST_TO_ADDR
// vc_control := control_computer ;
81760: LD_ADDR_OWVAR 38
81764: PUSH
81765: LD_INT 3
81767: ST_TO_ADDR
// vc_weapon := 59 ;
81768: LD_ADDR_OWVAR 40
81772: PUSH
81773: LD_INT 59
81775: ST_TO_ADDR
// result := CreateVehicle ;
81776: LD_ADDR_VAR 0 5
81780: PUSH
81781: CALL_OW 45
81785: ST_TO_ADDR
// SetDir ( result , d ) ;
81786: LD_VAR 0 5
81790: PPUSH
81791: LD_VAR 0 4
81795: PPUSH
81796: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81800: LD_VAR 0 5
81804: PPUSH
81805: LD_VAR 0 2
81809: PPUSH
81810: LD_VAR 0 3
81814: PPUSH
81815: LD_INT 0
81817: PPUSH
81818: CALL_OW 48
// end ;
81822: LD_VAR 0 5
81826: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81827: LD_INT 0
81829: PPUSH
81830: PPUSH
81831: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81832: LD_ADDR_VAR 0 2
81836: PUSH
81837: LD_INT 0
81839: PUSH
81840: LD_INT 0
81842: PUSH
81843: LD_INT 0
81845: PUSH
81846: LD_INT 0
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81855: LD_VAR 0 1
81859: NOT
81860: PUSH
81861: LD_VAR 0 1
81865: PPUSH
81866: CALL_OW 264
81870: PUSH
81871: LD_INT 12
81873: PUSH
81874: LD_INT 51
81876: PUSH
81877: LD_INT 32
81879: PUSH
81880: LD_INT 89
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: IN
81889: NOT
81890: OR
81891: IFFALSE 81895
// exit ;
81893: GO 81993
// for i := 1 to 3 do
81895: LD_ADDR_VAR 0 3
81899: PUSH
81900: DOUBLE
81901: LD_INT 1
81903: DEC
81904: ST_TO_ADDR
81905: LD_INT 3
81907: PUSH
81908: FOR_TO
81909: IFFALSE 81991
// begin tmp := GetCargo ( cargo , i ) ;
81911: LD_ADDR_VAR 0 4
81915: PUSH
81916: LD_VAR 0 1
81920: PPUSH
81921: LD_VAR 0 3
81925: PPUSH
81926: CALL_OW 289
81930: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81931: LD_ADDR_VAR 0 2
81935: PUSH
81936: LD_VAR 0 2
81940: PPUSH
81941: LD_VAR 0 3
81945: PPUSH
81946: LD_VAR 0 4
81950: PPUSH
81951: CALL_OW 1
81955: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81956: LD_ADDR_VAR 0 2
81960: PUSH
81961: LD_VAR 0 2
81965: PPUSH
81966: LD_INT 4
81968: PPUSH
81969: LD_VAR 0 2
81973: PUSH
81974: LD_INT 4
81976: ARRAY
81977: PUSH
81978: LD_VAR 0 4
81982: PLUS
81983: PPUSH
81984: CALL_OW 1
81988: ST_TO_ADDR
// end ;
81989: GO 81908
81991: POP
81992: POP
// end ;
81993: LD_VAR 0 2
81997: RET
// export function Length ( array ) ; begin
81998: LD_INT 0
82000: PPUSH
// result := array + 0 ;
82001: LD_ADDR_VAR 0 2
82005: PUSH
82006: LD_VAR 0 1
82010: PUSH
82011: LD_INT 0
82013: PLUS
82014: ST_TO_ADDR
// end ;
82015: LD_VAR 0 2
82019: RET
// export function PrepareArray ( array ) ; begin
82020: LD_INT 0
82022: PPUSH
// result := array diff 0 ;
82023: LD_ADDR_VAR 0 2
82027: PUSH
82028: LD_VAR 0 1
82032: PUSH
82033: LD_INT 0
82035: DIFF
82036: ST_TO_ADDR
// if not result [ 1 ] then
82037: LD_VAR 0 2
82041: PUSH
82042: LD_INT 1
82044: ARRAY
82045: NOT
82046: IFFALSE 82066
// result := Delete ( result , 1 ) ;
82048: LD_ADDR_VAR 0 2
82052: PUSH
82053: LD_VAR 0 2
82057: PPUSH
82058: LD_INT 1
82060: PPUSH
82061: CALL_OW 3
82065: ST_TO_ADDR
// end ;
82066: LD_VAR 0 2
82070: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82071: LD_INT 0
82073: PPUSH
82074: PPUSH
82075: PPUSH
82076: PPUSH
// sibRocketRange := 25 ;
82077: LD_ADDR_VAR 0 6
82081: PUSH
82082: LD_INT 25
82084: ST_TO_ADDR
// result := false ;
82085: LD_ADDR_VAR 0 4
82089: PUSH
82090: LD_INT 0
82092: ST_TO_ADDR
// for i := 0 to 5 do
82093: LD_ADDR_VAR 0 5
82097: PUSH
82098: DOUBLE
82099: LD_INT 0
82101: DEC
82102: ST_TO_ADDR
82103: LD_INT 5
82105: PUSH
82106: FOR_TO
82107: IFFALSE 82174
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82109: LD_VAR 0 1
82113: PPUSH
82114: LD_VAR 0 5
82118: PPUSH
82119: LD_VAR 0 6
82123: PPUSH
82124: CALL_OW 272
82128: PPUSH
82129: LD_VAR 0 2
82133: PPUSH
82134: LD_VAR 0 5
82138: PPUSH
82139: LD_VAR 0 6
82143: PPUSH
82144: CALL_OW 273
82148: PPUSH
82149: LD_VAR 0 3
82153: PPUSH
82154: CALL_OW 309
82158: IFFALSE 82172
// begin result := true ;
82160: LD_ADDR_VAR 0 4
82164: PUSH
82165: LD_INT 1
82167: ST_TO_ADDR
// exit ;
82168: POP
82169: POP
82170: GO 82176
// end ;
82172: GO 82106
82174: POP
82175: POP
// end ;
82176: LD_VAR 0 4
82180: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82181: LD_INT 0
82183: PPUSH
82184: PPUSH
82185: PPUSH
// if btype = b_depot then
82186: LD_VAR 0 2
82190: PUSH
82191: LD_INT 0
82193: EQUAL
82194: IFFALSE 82206
// begin result := true ;
82196: LD_ADDR_VAR 0 3
82200: PUSH
82201: LD_INT 1
82203: ST_TO_ADDR
// exit ;
82204: GO 82322
// end ; pom := GetBase ( depot ) ;
82206: LD_ADDR_VAR 0 4
82210: PUSH
82211: LD_VAR 0 1
82215: PPUSH
82216: CALL_OW 274
82220: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82221: LD_ADDR_VAR 0 5
82225: PUSH
82226: LD_VAR 0 2
82230: PPUSH
82231: LD_VAR 0 1
82235: PPUSH
82236: CALL_OW 248
82240: PPUSH
82241: CALL_OW 450
82245: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82246: LD_ADDR_VAR 0 3
82250: PUSH
82251: LD_VAR 0 4
82255: PPUSH
82256: LD_INT 1
82258: PPUSH
82259: CALL_OW 275
82263: PUSH
82264: LD_VAR 0 5
82268: PUSH
82269: LD_INT 1
82271: ARRAY
82272: GREATEREQUAL
82273: PUSH
82274: LD_VAR 0 4
82278: PPUSH
82279: LD_INT 2
82281: PPUSH
82282: CALL_OW 275
82286: PUSH
82287: LD_VAR 0 5
82291: PUSH
82292: LD_INT 2
82294: ARRAY
82295: GREATEREQUAL
82296: AND
82297: PUSH
82298: LD_VAR 0 4
82302: PPUSH
82303: LD_INT 3
82305: PPUSH
82306: CALL_OW 275
82310: PUSH
82311: LD_VAR 0 5
82315: PUSH
82316: LD_INT 3
82318: ARRAY
82319: GREATEREQUAL
82320: AND
82321: ST_TO_ADDR
// end ;
82322: LD_VAR 0 3
82326: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82327: LD_INT 0
82329: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82330: LD_VAR 0 1
82334: PPUSH
82335: LD_VAR 0 2
82339: PPUSH
82340: LD_INT 0
82342: PPUSH
82343: LD_INT 0
82345: PPUSH
82346: LD_INT 1
82348: PPUSH
82349: LD_INT 0
82351: PPUSH
82352: CALL_OW 587
// end ;
82356: LD_VAR 0 3
82360: RET
// export function CenterOnNow ( unit ) ; begin
82361: LD_INT 0
82363: PPUSH
// result := IsInUnit ( unit ) ;
82364: LD_ADDR_VAR 0 2
82368: PUSH
82369: LD_VAR 0 1
82373: PPUSH
82374: CALL_OW 310
82378: ST_TO_ADDR
// if not result then
82379: LD_VAR 0 2
82383: NOT
82384: IFFALSE 82396
// result := unit ;
82386: LD_ADDR_VAR 0 2
82390: PUSH
82391: LD_VAR 0 1
82395: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82396: LD_VAR 0 1
82400: PPUSH
82401: CALL_OW 87
// end ;
82405: LD_VAR 0 2
82409: RET
// export function ComMoveHex ( unit , hex ) ; begin
82410: LD_INT 0
82412: PPUSH
// if not hex then
82413: LD_VAR 0 2
82417: NOT
82418: IFFALSE 82422
// exit ;
82420: GO 82475
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82422: LD_VAR 0 2
82426: PUSH
82427: LD_INT 1
82429: ARRAY
82430: PPUSH
82431: LD_VAR 0 2
82435: PUSH
82436: LD_INT 2
82438: ARRAY
82439: PPUSH
82440: CALL_OW 428
82444: IFFALSE 82448
// exit ;
82446: GO 82475
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82448: LD_VAR 0 1
82452: PPUSH
82453: LD_VAR 0 2
82457: PUSH
82458: LD_INT 1
82460: ARRAY
82461: PPUSH
82462: LD_VAR 0 2
82466: PUSH
82467: LD_INT 2
82469: ARRAY
82470: PPUSH
82471: CALL_OW 111
// end ;
82475: LD_VAR 0 3
82479: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82480: LD_INT 0
82482: PPUSH
82483: PPUSH
82484: PPUSH
// if not unit or not enemy then
82485: LD_VAR 0 1
82489: NOT
82490: PUSH
82491: LD_VAR 0 2
82495: NOT
82496: OR
82497: IFFALSE 82501
// exit ;
82499: GO 82625
// x := GetX ( enemy ) ;
82501: LD_ADDR_VAR 0 4
82505: PUSH
82506: LD_VAR 0 2
82510: PPUSH
82511: CALL_OW 250
82515: ST_TO_ADDR
// y := GetY ( enemy ) ;
82516: LD_ADDR_VAR 0 5
82520: PUSH
82521: LD_VAR 0 2
82525: PPUSH
82526: CALL_OW 251
82530: ST_TO_ADDR
// if ValidHex ( x , y ) then
82531: LD_VAR 0 4
82535: PPUSH
82536: LD_VAR 0 5
82540: PPUSH
82541: CALL_OW 488
82545: IFFALSE 82625
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82547: LD_VAR 0 2
82551: PPUSH
82552: CALL_OW 247
82556: PUSH
82557: LD_INT 3
82559: PUSH
82560: LD_INT 2
82562: PUSH
82563: EMPTY
82564: LIST
82565: LIST
82566: IN
82567: PUSH
82568: LD_VAR 0 1
82572: PPUSH
82573: CALL_OW 255
82577: PPUSH
82578: LD_VAR 0 2
82582: PPUSH
82583: CALL_OW 292
82587: OR
82588: IFFALSE 82606
// ComAttackUnit ( unit , enemy ) else
82590: LD_VAR 0 1
82594: PPUSH
82595: LD_VAR 0 2
82599: PPUSH
82600: CALL_OW 115
82604: GO 82625
// ComAgressiveMove ( unit , x , y ) ;
82606: LD_VAR 0 1
82610: PPUSH
82611: LD_VAR 0 4
82615: PPUSH
82616: LD_VAR 0 5
82620: PPUSH
82621: CALL_OW 114
// end ;
82625: LD_VAR 0 3
82629: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82630: LD_INT 0
82632: PPUSH
82633: PPUSH
82634: PPUSH
// list := AreaToList ( area , 0 ) ;
82635: LD_ADDR_VAR 0 5
82639: PUSH
82640: LD_VAR 0 1
82644: PPUSH
82645: LD_INT 0
82647: PPUSH
82648: CALL_OW 517
82652: ST_TO_ADDR
// if not list then
82653: LD_VAR 0 5
82657: NOT
82658: IFFALSE 82662
// exit ;
82660: GO 82792
// if all then
82662: LD_VAR 0 2
82666: IFFALSE 82754
// begin for i := 1 to list [ 1 ] do
82668: LD_ADDR_VAR 0 4
82672: PUSH
82673: DOUBLE
82674: LD_INT 1
82676: DEC
82677: ST_TO_ADDR
82678: LD_VAR 0 5
82682: PUSH
82683: LD_INT 1
82685: ARRAY
82686: PUSH
82687: FOR_TO
82688: IFFALSE 82750
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82690: LD_ADDR_VAR 0 3
82694: PUSH
82695: LD_VAR 0 3
82699: PPUSH
82700: LD_VAR 0 3
82704: PUSH
82705: LD_INT 1
82707: PLUS
82708: PPUSH
82709: LD_VAR 0 5
82713: PUSH
82714: LD_INT 1
82716: ARRAY
82717: PUSH
82718: LD_VAR 0 4
82722: ARRAY
82723: PUSH
82724: LD_VAR 0 5
82728: PUSH
82729: LD_INT 2
82731: ARRAY
82732: PUSH
82733: LD_VAR 0 4
82737: ARRAY
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: PPUSH
82743: CALL_OW 1
82747: ST_TO_ADDR
82748: GO 82687
82750: POP
82751: POP
// exit ;
82752: GO 82792
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82754: LD_ADDR_VAR 0 3
82758: PUSH
82759: LD_VAR 0 5
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: PUSH
82768: LD_INT 1
82770: ARRAY
82771: PUSH
82772: LD_VAR 0 5
82776: PUSH
82777: LD_INT 2
82779: ARRAY
82780: PUSH
82781: LD_INT 1
82783: ARRAY
82784: PUSH
82785: EMPTY
82786: LIST
82787: LIST
82788: PUSH
82789: EMPTY
82790: LIST
82791: ST_TO_ADDR
// end ;
82792: LD_VAR 0 3
82796: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82797: LD_INT 0
82799: PPUSH
82800: PPUSH
// list := AreaToList ( area , 0 ) ;
82801: LD_ADDR_VAR 0 4
82805: PUSH
82806: LD_VAR 0 1
82810: PPUSH
82811: LD_INT 0
82813: PPUSH
82814: CALL_OW 517
82818: ST_TO_ADDR
// if not list then
82819: LD_VAR 0 4
82823: NOT
82824: IFFALSE 82828
// exit ;
82826: GO 82869
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82828: LD_ADDR_VAR 0 3
82832: PUSH
82833: LD_VAR 0 4
82837: PUSH
82838: LD_INT 1
82840: ARRAY
82841: PUSH
82842: LD_INT 1
82844: ARRAY
82845: PUSH
82846: LD_VAR 0 4
82850: PUSH
82851: LD_INT 2
82853: ARRAY
82854: PUSH
82855: LD_INT 1
82857: ARRAY
82858: PUSH
82859: LD_VAR 0 2
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: LIST
82868: ST_TO_ADDR
// end ;
82869: LD_VAR 0 3
82873: RET
// export function First ( array ) ; begin
82874: LD_INT 0
82876: PPUSH
// if not array then
82877: LD_VAR 0 1
82881: NOT
82882: IFFALSE 82886
// exit ;
82884: GO 82900
// result := array [ 1 ] ;
82886: LD_ADDR_VAR 0 2
82890: PUSH
82891: LD_VAR 0 1
82895: PUSH
82896: LD_INT 1
82898: ARRAY
82899: ST_TO_ADDR
// end ;
82900: LD_VAR 0 2
82904: RET
// export function Last ( array ) ; begin
82905: LD_INT 0
82907: PPUSH
// if not array then
82908: LD_VAR 0 1
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 82933
// result := array [ array ] ;
82917: LD_ADDR_VAR 0 2
82921: PUSH
82922: LD_VAR 0 1
82926: PUSH
82927: LD_VAR 0 1
82931: ARRAY
82932: ST_TO_ADDR
// end ;
82933: LD_VAR 0 2
82937: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82938: LD_INT 0
82940: PPUSH
82941: PPUSH
// result := [ ] ;
82942: LD_ADDR_VAR 0 5
82946: PUSH
82947: EMPTY
82948: ST_TO_ADDR
// if not array then
82949: LD_VAR 0 1
82953: NOT
82954: IFFALSE 82958
// exit ;
82956: GO 83070
// for i := 1 to array do
82958: LD_ADDR_VAR 0 6
82962: PUSH
82963: DOUBLE
82964: LD_INT 1
82966: DEC
82967: ST_TO_ADDR
82968: LD_VAR 0 1
82972: PUSH
82973: FOR_TO
82974: IFFALSE 83068
// if array [ i ] [ index ] = value then
82976: LD_VAR 0 1
82980: PUSH
82981: LD_VAR 0 6
82985: ARRAY
82986: PUSH
82987: LD_VAR 0 2
82991: ARRAY
82992: PUSH
82993: LD_VAR 0 3
82997: EQUAL
82998: IFFALSE 83066
// begin if indexColumn then
83000: LD_VAR 0 4
83004: IFFALSE 83040
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83006: LD_ADDR_VAR 0 5
83010: PUSH
83011: LD_VAR 0 5
83015: PPUSH
83016: LD_VAR 0 1
83020: PUSH
83021: LD_VAR 0 6
83025: ARRAY
83026: PUSH
83027: LD_VAR 0 4
83031: ARRAY
83032: PPUSH
83033: CALL 78258 0 2
83037: ST_TO_ADDR
83038: GO 83066
// result := Join ( result , array [ i ] ) ;
83040: LD_ADDR_VAR 0 5
83044: PUSH
83045: LD_VAR 0 5
83049: PPUSH
83050: LD_VAR 0 1
83054: PUSH
83055: LD_VAR 0 6
83059: ARRAY
83060: PPUSH
83061: CALL 78258 0 2
83065: ST_TO_ADDR
// end ;
83066: GO 82973
83068: POP
83069: POP
// end ;
83070: LD_VAR 0 5
83074: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83075: LD_INT 0
83077: PPUSH
// if not vehicles or not parkingPoint then
83078: LD_VAR 0 1
83082: NOT
83083: PUSH
83084: LD_VAR 0 2
83088: NOT
83089: OR
83090: IFFALSE 83094
// exit ;
83092: GO 83192
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83094: LD_ADDR_VAR 0 1
83098: PUSH
83099: LD_VAR 0 1
83103: PPUSH
83104: LD_INT 50
83106: PUSH
83107: EMPTY
83108: LIST
83109: PUSH
83110: LD_INT 3
83112: PUSH
83113: LD_INT 92
83115: PUSH
83116: LD_VAR 0 2
83120: PUSH
83121: LD_INT 1
83123: ARRAY
83124: PUSH
83125: LD_VAR 0 2
83129: PUSH
83130: LD_INT 2
83132: ARRAY
83133: PUSH
83134: LD_INT 8
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: LIST
83141: LIST
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: PPUSH
83151: CALL_OW 72
83155: ST_TO_ADDR
// if not vehicles then
83156: LD_VAR 0 1
83160: NOT
83161: IFFALSE 83165
// exit ;
83163: GO 83192
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83165: LD_VAR 0 1
83169: PPUSH
83170: LD_VAR 0 2
83174: PUSH
83175: LD_INT 1
83177: ARRAY
83178: PPUSH
83179: LD_VAR 0 2
83183: PUSH
83184: LD_INT 2
83186: ARRAY
83187: PPUSH
83188: CALL_OW 111
// end ;
83192: LD_VAR 0 3
83196: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83197: LD_INT 0
83199: PPUSH
83200: PPUSH
83201: PPUSH
// if not side or not area then
83202: LD_VAR 0 1
83206: NOT
83207: PUSH
83208: LD_VAR 0 2
83212: NOT
83213: OR
83214: IFFALSE 83218
// exit ;
83216: GO 83337
// tmp := AreaToList ( area , 0 ) ;
83218: LD_ADDR_VAR 0 5
83222: PUSH
83223: LD_VAR 0 2
83227: PPUSH
83228: LD_INT 0
83230: PPUSH
83231: CALL_OW 517
83235: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83236: LD_ADDR_VAR 0 4
83240: PUSH
83241: DOUBLE
83242: LD_INT 1
83244: DEC
83245: ST_TO_ADDR
83246: LD_VAR 0 5
83250: PUSH
83251: LD_INT 1
83253: ARRAY
83254: PUSH
83255: FOR_TO
83256: IFFALSE 83335
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83258: LD_VAR 0 5
83262: PUSH
83263: LD_INT 1
83265: ARRAY
83266: PUSH
83267: LD_VAR 0 4
83271: ARRAY
83272: PPUSH
83273: LD_VAR 0 5
83277: PUSH
83278: LD_INT 2
83280: ARRAY
83281: PUSH
83282: LD_VAR 0 4
83286: ARRAY
83287: PPUSH
83288: CALL_OW 351
83292: IFFALSE 83333
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83294: LD_VAR 0 5
83298: PUSH
83299: LD_INT 1
83301: ARRAY
83302: PUSH
83303: LD_VAR 0 4
83307: ARRAY
83308: PPUSH
83309: LD_VAR 0 5
83313: PUSH
83314: LD_INT 2
83316: ARRAY
83317: PUSH
83318: LD_VAR 0 4
83322: ARRAY
83323: PPUSH
83324: LD_VAR 0 1
83328: PPUSH
83329: CALL_OW 244
// end ;
83333: GO 83255
83335: POP
83336: POP
// end ; end_of_file
83337: LD_VAR 0 3
83341: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83342: LD_VAR 0 1
83346: PUSH
83347: LD_INT 200
83349: DOUBLE
83350: GREATEREQUAL
83351: IFFALSE 83359
83353: LD_INT 299
83355: DOUBLE
83356: LESSEQUAL
83357: IFTRUE 83361
83359: GO 83393
83361: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83362: LD_VAR 0 1
83366: PPUSH
83367: LD_VAR 0 2
83371: PPUSH
83372: LD_VAR 0 3
83376: PPUSH
83377: LD_VAR 0 4
83381: PPUSH
83382: LD_VAR 0 5
83386: PPUSH
83387: CALL 36049 0 5
83391: GO 83470
83393: LD_INT 300
83395: DOUBLE
83396: GREATEREQUAL
83397: IFFALSE 83405
83399: LD_INT 399
83401: DOUBLE
83402: LESSEQUAL
83403: IFTRUE 83407
83405: GO 83469
83407: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83408: LD_VAR 0 1
83412: PPUSH
83413: LD_VAR 0 2
83417: PPUSH
83418: LD_VAR 0 3
83422: PPUSH
83423: LD_VAR 0 4
83427: PPUSH
83428: LD_VAR 0 5
83432: PPUSH
83433: LD_VAR 0 6
83437: PPUSH
83438: LD_VAR 0 7
83442: PPUSH
83443: LD_VAR 0 8
83447: PPUSH
83448: LD_VAR 0 9
83452: PPUSH
83453: LD_VAR 0 10
83457: PPUSH
83458: LD_VAR 0 11
83462: PPUSH
83463: CALL 32301 0 11
83467: GO 83470
83469: POP
// end ;
83470: PPOPN 11
83472: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83473: LD_VAR 0 1
83477: PPUSH
83478: LD_VAR 0 2
83482: PPUSH
83483: LD_VAR 0 3
83487: PPUSH
83488: LD_VAR 0 4
83492: PPUSH
83493: LD_VAR 0 5
83497: PPUSH
83498: CALL 35712 0 5
// end ; end_of_file
83502: PPOPN 5
83504: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83505: LD_VAR 0 1
83509: PPUSH
83510: LD_VAR 0 2
83514: PPUSH
83515: LD_VAR 0 3
83519: PPUSH
83520: LD_VAR 0 4
83524: PPUSH
83525: LD_VAR 0 5
83529: PPUSH
83530: LD_VAR 0 6
83534: PPUSH
83535: CALL 19953 0 6
// end ;
83539: PPOPN 6
83541: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83542: LD_INT 0
83544: PPUSH
// begin if not units then
83545: LD_VAR 0 1
83549: NOT
83550: IFFALSE 83554
// exit ;
83552: GO 83554
// end ;
83554: PPOPN 7
83556: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83557: CALL 19840 0 0
// end ;
83561: PPOPN 1
83563: END
