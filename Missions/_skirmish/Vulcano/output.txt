// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 18312 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 924 0 0
// PrepareRussian ;
  27: CALL 3341 0 0
// PrepareLegion ;
  31: CALL 7105 0 0
// Action ;
  35: CALL 10615 0 0
// InitArt ;
  39: CALL 245 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 15
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// base_captured := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// russian_prepared := false ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_can_attack := false ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// ru_sib_bomb := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 10
  97: PUSH
  98: LD_INT 25
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: PUSH
 106: LD_OWVAR 67
 110: ARRAY
 111: ST_TO_ADDR
// player_res_art := false ;
 112: LD_ADDR_EXP 6
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_artifact_ready := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// art_icon := art_use_atom ;
 128: LD_ADDR_EXP 9
 132: PUSH
 133: LD_INT 7
 135: ST_TO_ADDR
// time_res_art := 600 ;
 136: LD_ADDR_EXP 10
 140: PUSH
 141: LD_INT 600
 143: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 144: LD_ADDR_EXP 12
 148: PUSH
 149: LD_INT 21000
 151: ST_TO_ADDR
// mine_vulc := false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// medal_enabled := false ;
 160: LD_ADDR_EXP 14
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dead_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// kill_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// veh_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// tech_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 200: LD_ADDR_EXP 20
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_progress := 0 ;
 208: LD_ADDR_EXP 7
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// event_legion_attack := 1 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// event_russian_attack := 2 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// event_alliance_attack := 3 ;
 232: LD_ADDR_EXP 23
 236: PUSH
 237: LD_INT 3
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// function InitArt ; begin
 245: LD_INT 0
 247: PPUSH
// SetArtifactRes ( your_side , true ) ;
 248: LD_OWVAR 2
 252: PPUSH
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 467
// end ; end_of_file
 260: LD_VAR 0 1
 264: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
 271: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 6
 282: PUSH
 283: LD_INT 5
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_OWVAR 67
 295: ARRAY
 296: ST_TO_ADDR
// us_force := [ ] ;
 297: LD_ADDR_EXP 25
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 304: LD_INT 17
 306: PPUSH
 307: CALL_OW 355
// PrepareAllianceAI ( ) ;
 311: CALL 15613 0 0
// uc_side := 1 ;
 315: LD_ADDR_OWVAR 20
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// uc_nation := nation_american ;
 323: LD_ADDR_OWVAR 21
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// hc_gallery :=  ;
 331: LD_ADDR_OWVAR 33
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_name :=  ;
 339: LD_ADDR_OWVAR 26
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// hc_importance := 0 ;
 347: LD_ADDR_OWVAR 32
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// for i = 1 to 11 do
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: DOUBLE
 361: LD_INT 1
 363: DEC
 364: ST_TO_ADDR
 365: LD_INT 11
 367: PUSH
 368: FOR_TO
 369: IFFALSE 422
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 371: LD_INT 0
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 12
 384: PPUSH
 385: LD_EXP 26
 389: PPUSH
 390: CALL_OW 380
// un := CreateHuman ;
 394: LD_ADDR_VAR 0 4
 398: PUSH
 399: CALL_OW 44
 403: ST_TO_ADDR
// us_force := us_force ^ un ;
 404: LD_ADDR_EXP 25
 408: PUSH
 409: LD_EXP 25
 413: PUSH
 414: LD_VAR 0 4
 418: ADD
 419: ST_TO_ADDR
// end ;
 420: GO 368
 422: POP
 423: POP
// hc_importance := 100 ;
 424: LD_ADDR_OWVAR 32
 428: PUSH
 429: LD_INT 100
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_EXP 26
 442: PPUSH
 443: CALL_OW 380
// us_commander := CreateHuman ;
 447: LD_ADDR_EXP 24
 451: PUSH
 452: CALL_OW 44
 456: ST_TO_ADDR
// player_commander := us_commander ;
 457: LD_ADDR_EXP 11
 461: PUSH
 462: LD_EXP 24
 466: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 467: LD_ADDR_VAR 0 5
 471: PUSH
 472: LD_STRING text
 474: PPUSH
 475: LD_INT 6
 477: PUSH
 478: LD_INT 5
 480: PUSH
 481: LD_INT 4
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 5
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: PPUSH
 515: LD_INT -5
 517: PUSH
 518: LD_EXP 24
 522: PUSH
 523: LD_INT -3
 525: PUSH
 526: LD_INT -2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_EXP 25
 539: ADD
 540: PPUSH
 541: LD_INT 1
 543: PUSH
 544: LD_INT 3
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: PUSH
 567: LD_INT 5
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 1
 575: NEG
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: PPUSH
 595: CALL_OW 42
 599: ST_TO_ADDR
// team := team ^ us_commander ;
 600: LD_ADDR_VAR 0 5
 604: PUSH
 605: LD_VAR 0 5
 609: PUSH
 610: LD_EXP 24
 614: ADD
 615: ST_TO_ADDR
// for i = 1 to team do
 616: LD_ADDR_VAR 0 2
 620: PUSH
 621: DOUBLE
 622: LD_INT 1
 624: DEC
 625: ST_TO_ADDR
 626: LD_VAR 0 5
 630: PUSH
 631: FOR_TO
 632: IFFALSE 657
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 634: LD_VAR 0 5
 638: PUSH
 639: LD_VAR 0 2
 643: ARRAY
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 49
 655: GO 631
 657: POP
 658: POP
// end ;
 659: LD_VAR 0 1
 663: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 664: LD_OWVAR 1
 668: PUSH
 669: LD_INT 73500
 671: LESS
 672: IFFALSE 699
 674: GO 676
 676: DISABLE
// begin enable ;
 677: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 678: LD_INT 1
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: PPUSH
 689: LD_INT 23
 691: PPUSH
 692: LD_INT 1
 694: PPUSH
 695: CALL_OW 55
// end ;
 699: END
// every 1 1$10 do var time , p , l ;
 700: GO 702
 702: DISABLE
 703: LD_INT 0
 705: PPUSH
 706: PPUSH
 707: PPUSH
// begin time := 0 0$44 ;
 708: LD_ADDR_VAR 0 1
 712: PUSH
 713: LD_INT 1540
 715: ST_TO_ADDR
// l := 0 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 724: LD_VAR 0 1
 728: PPUSH
 729: CALL_OW 67
// l := l + 1 ;
 733: LD_ADDR_VAR 0 3
 737: PUSH
 738: LD_VAR 0 3
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 747: LD_INT 12
 749: PPUSH
 750: CALL_OW 435
 754: PUSH
 755: LD_INT 20
 757: LESS
 758: IFFALSE 817
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 12
 770: PPUSH
 771: LD_INT 12
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 781: LD_INT 1365
 783: PPUSH
 784: LD_INT 1680
 786: PPUSH
 787: CALL_OW 12
 791: PPUSH
 792: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: LD_INT 12
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 817: LD_ADDR_VAR 0 2
 821: PUSH
 822: LD_INT 0
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL_OW 12
 832: ST_TO_ADDR
// if p then
 833: LD_VAR 0 2
 837: IFFALSE 872
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
 839: LD_INT 315
 841: PPUSH
 842: LD_INT 700
 844: PPUSH
 845: CALL_OW 12
 849: PPUSH
 850: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 4
 859: PPUSH
 860: CALL_OW 12
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 872: LD_VAR 0 3
 876: PUSH
 877: LD_INT 15
 879: PUSH
 880: LD_INT 13
 882: PUSH
 883: LD_INT 11
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_OWVAR 67
 895: ARRAY
 896: MOD
 897: PUSH
 898: LD_INT 0
 900: EQUAL
 901: IFFALSE 917
// time := time + 2 2$00 ;
 903: LD_ADDR_VAR 0 1
 907: PUSH
 908: LD_VAR 0 1
 912: PUSH
 913: LD_INT 4200
 915: PLUS
 916: ST_TO_ADDR
// end until false ;
 917: LD_INT 0
 919: IFFALSE 724
// end ; end_of_file
 921: PPOPN 3
 923: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 924: LD_INT 0
 926: PPUSH
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 933: LD_ADDR_VAR 0 3
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 4
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: LD_INT 470
 974: PUSH
 975: LD_INT 370
 977: PUSH
 978: LD_INT 290
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: PUSH
 986: LD_OWVAR 67
 990: ARRAY
 991: ST_TO_ADDR
// case Difficulty of 2 :
 992: LD_OWVAR 67
 996: PUSH
 997: LD_INT 2
 999: DOUBLE
1000: EQUAL
1001: IFTRUE 1005
1003: GO 1036
1005: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 30
1013: PUSH
1014: LD_INT 32
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 72
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 65
// end ; 3 :
1034: GO 1112
1036: LD_INT 3
1038: DOUBLE
1039: EQUAL
1040: IFTRUE 1044
1042: GO 1111
1044: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1045: LD_VAR 0 3
1049: PPUSH
1050: LD_INT 30
1052: PUSH
1053: LD_INT 32
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 72
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1073: LD_VAR 0 3
1077: PPUSH
1078: LD_INT 30
1080: PUSH
1081: LD_INT 27
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 72
1092: PUSH
1093: LD_INT 1
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 12
1103: ARRAY
1104: PPUSH
1105: CALL_OW 65
// end ; end ;
1109: GO 1112
1111: POP
// for i = 1 to filter do
1112: LD_ADDR_VAR 0 2
1116: PUSH
1117: DOUBLE
1118: LD_INT 1
1120: DEC
1121: ST_TO_ADDR
1122: LD_VAR 0 3
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1165
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1130: LD_VAR 0 3
1134: PUSH
1135: LD_VAR 0 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 4
1145: PUSH
1146: LD_INT 29
1148: NEG
1149: PPUSH
1150: LD_INT 29
1152: PPUSH
1153: CALL_OW 12
1157: PLUS
1158: PPUSH
1159: CALL_OW 234
1163: GO 1127
1165: POP
1166: POP
// SetBName ( us_depot , Vulcano1 ) ;
1167: LD_INT 50
1169: PPUSH
1170: LD_STRING Vulcano1
1172: PPUSH
1173: CALL_OW 500
// hc_importance := 0 ;
1177: LD_ADDR_OWVAR 32
1181: PUSH
1182: LD_INT 0
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := nation_russian ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// russian_in_base := [ ] ;
1201: LD_ADDR_VAR 0 7
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 6
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_INT 7
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_OWVAR 67
1236: ARRAY
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1320
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1241: LD_INT 0
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: LD_INT 4
1249: PUSH
1250: LD_INT 5
1252: PUSH
1253: LD_INT 6
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: PUSH
1261: LD_OWVAR 67
1265: ARRAY
1266: PPUSH
1267: CALL_OW 380
// un := CreateHuman ;
1271: LD_ADDR_VAR 0 5
1275: PUSH
1276: CALL_OW 44
1280: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1281: LD_ADDR_VAR 0 7
1285: PUSH
1286: LD_VAR 0 7
1290: PUSH
1291: LD_VAR 0 5
1295: ADD
1296: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1297: LD_VAR 0 5
1301: PPUSH
1302: LD_INT 94
1304: PPUSH
1305: LD_INT 145
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 50
// end ;
1318: GO 1238
1320: POP
1321: POP
// end ;
1322: LD_VAR 0 1
1326: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1327: LD_INT 50
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 1703 0 2
1337: PUSH
1338: LD_INT 40
1340: LESS
1341: IFFALSE 1538
1343: GO 1345
1345: DISABLE
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
// begin uc_side := 4 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 4
1357: ST_TO_ADDR
// uc_nation := nation_american ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// hc_importance := 0 ;
1366: LD_ADDR_OWVAR 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// for i = 1 to 7 do
1374: LD_ADDR_VAR 0 1
1378: PUSH
1379: DOUBLE
1380: LD_INT 1
1382: DEC
1383: ST_TO_ADDR
1384: LD_INT 7
1386: PUSH
1387: FOR_TO
1388: IFFALSE 1452
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1390: LD_INT 0
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: CALL_OW 12
1403: PPUSH
1404: LD_EXP 26
1408: PPUSH
1409: CALL_OW 380
// un := CreateHuman ;
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: CALL_OW 44
1422: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1423: LD_VAR 0 2
1427: PPUSH
1428: LD_INT 7
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// SetLives ( un , 10 ) ;
1438: LD_VAR 0 2
1442: PPUSH
1443: LD_INT 10
1445: PPUSH
1446: CALL_OW 234
// end ;
1450: GO 1387
1452: POP
1453: POP
// for i = 1 to 5 do
1454: LD_ADDR_VAR 0 1
1458: PUSH
1459: DOUBLE
1460: LD_INT 1
1462: DEC
1463: ST_TO_ADDR
1464: LD_INT 5
1466: PUSH
1467: FOR_TO
1468: IFFALSE 1536
// begin PrepareHuman ( false , 4 , us_skill ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 4
1475: PPUSH
1476: LD_EXP 26
1480: PPUSH
1481: CALL_OW 380
// SetDir ( un , 1 ) ;
1485: LD_VAR 0 2
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL_OW 233
// un := CreateHuman ;
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: CALL_OW 44
1506: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1507: LD_VAR 0 2
1511: PPUSH
1512: LD_INT 22
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 49
// SetLives ( un , 10 ) ;
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 10
1529: PPUSH
1530: CALL_OW 234
// end ;
1534: GO 1467
1536: POP
1537: POP
// end ; end_of_file
1538: PPOPN 2
1540: END
// export function PrepareApeman ( n ) ; var un , i ; begin
1541: LD_INT 0
1543: PPUSH
1544: PPUSH
1545: PPUSH
// for i = 1 to n do
1546: LD_ADDR_VAR 0 4
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 1
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1696
// begin uc_side := 0 ;
1564: LD_ADDR_OWVAR 20
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// uc_nation := 0 ;
1572: LD_ADDR_OWVAR 21
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// hc_class := class_apeman ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_INT 12
1587: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1588: LD_ADDR_OWVAR 31
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: LD_INT 0
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: LD_INT 0
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: ST_TO_ADDR
// hc_name :=  ;
1611: LD_ADDR_OWVAR 26
1615: PUSH
1616: LD_STRING 
1618: ST_TO_ADDR
// hc_gallery :=  ;
1619: LD_ADDR_OWVAR 33
1623: PUSH
1624: LD_STRING 
1626: ST_TO_ADDR
// hc_importance := 0 ;
1627: LD_ADDR_OWVAR 32
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// un := CreateHuman ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 44
1644: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 19
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1679: LD_INT 1155
1681: PPUSH
1682: LD_INT 5355
1684: PPUSH
1685: CALL_OW 12
1689: PPUSH
1690: CALL_OW 67
// end ;
1694: GO 1561
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 2
1702: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1708: LD_ADDR_VAR 0 4
1712: PUSH
1713: LD_INT 22
1715: PUSH
1716: LD_VAR 0 2
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PPUSH
1730: LD_VAR 0 1
1734: PPUSH
1735: CALL_OW 74
1739: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1740: LD_ADDR_VAR 0 5
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: LD_VAR 0 4
1754: PPUSH
1755: CALL_OW 296
1759: ST_TO_ADDR
// if dist >= 9999 then
1760: LD_VAR 0 5
1764: PUSH
1765: LD_INT 9999
1767: GREATEREQUAL
1768: IFFALSE 1781
// result := - 1 else
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: LD_INT 1
1777: NEG
1778: ST_TO_ADDR
1779: GO 1791
// result := dist ;
1781: LD_ADDR_VAR 0 3
1785: PUSH
1786: LD_VAR 0 5
1790: ST_TO_ADDR
// end ;
1791: LD_VAR 0 3
1795: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
1796: LD_INT 0
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// tmp := 9999 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 9999
1809: ST_TO_ADDR
// for i = 1 to plist do
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: DOUBLE
1816: LD_INT 1
1818: DEC
1819: ST_TO_ADDR
1820: LD_VAR 0 1
1824: PUSH
1825: FOR_TO
1826: IFFALSE 1900
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
1828: LD_VAR 0 1
1832: PUSH
1833: LD_VAR 0 4
1837: ARRAY
1838: PPUSH
1839: LD_VAR 0 2
1843: PPUSH
1844: CALL 1703 0 2
1848: PUSH
1849: LD_VAR 0 5
1853: LESS
1854: IFFALSE 1898
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
1856: LD_ADDR_VAR 0 5
1860: PUSH
1861: LD_VAR 0 1
1865: PUSH
1866: LD_VAR 0 4
1870: ARRAY
1871: PPUSH
1872: LD_VAR 0 2
1876: PPUSH
1877: CALL 1703 0 2
1881: ST_TO_ADDR
// unit := plist [ i ] ;
1882: LD_ADDR_VAR 0 6
1886: PUSH
1887: LD_VAR 0 1
1891: PUSH
1892: LD_VAR 0 4
1896: ARRAY
1897: ST_TO_ADDR
// end ;
1898: GO 1825
1900: POP
1901: POP
// result := unit ;
1902: LD_ADDR_VAR 0 3
1906: PUSH
1907: LD_VAR 0 6
1911: ST_TO_ADDR
// end ;
1912: LD_VAR 0 3
1916: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
1917: LD_INT 0
1919: PPUSH
1920: PPUSH
1921: PPUSH
1922: PPUSH
1923: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 2500
1934: PUSH
1935: LD_INT 5000
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_OWVAR 67
1947: ARRAY
1948: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: LD_VAR 0 2
1958: PUSH
1959: LD_INT 1
1961: NEG
1962: PUSH
1963: LD_INT 22
1965: PUSH
1966: LD_OWVAR 2
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 3
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: MUL
1994: PUSH
1995: LD_INT 30
1997: MUL
1998: PLUS
1999: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2000: LD_ADDR_VAR 0 2
2004: PUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_EXP 17
2014: PUSH
2015: LD_INT 10
2017: MUL
2018: PLUS
2019: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_VAR 0 2
2029: PUSH
2030: LD_INT 1
2032: NEG
2033: PUSH
2034: LD_EXP 17
2038: MUL
2039: PUSH
2040: LD_INT 20
2042: MUL
2043: PLUS
2044: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 1
2057: NEG
2058: PUSH
2059: LD_OWVAR 1
2063: PUSH
2064: LD_INT 35
2066: DIVREAL
2067: PUSH
2068: LD_INT 60
2070: DIVREAL
2071: MUL
2072: PUSH
2073: LD_INT 25
2075: MUL
2076: PLUS
2077: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_EXP 19
2092: PUSH
2093: LD_INT 15
2095: MUL
2096: PLUS
2097: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2098: LD_ADDR_VAR 0 2
2102: PUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 1
2110: NEG
2111: PUSH
2112: LD_EXP 20
2116: MUL
2117: PUSH
2118: LD_INT 1000
2120: MUL
2121: PLUS
2122: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2123: LD_ADDR_VAR 0 2
2127: PUSH
2128: LD_VAR 0 2
2132: PUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 5
2140: MUL
2141: PLUS
2142: ST_TO_ADDR
// result := points ;
2143: LD_ADDR_VAR 0 1
2147: PUSH
2148: LD_VAR 0 2
2152: ST_TO_ADDR
// end ; end_of_file
2153: LD_VAR 0 1
2157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2158: LD_VAR 0 1
2162: PPUSH
2163: CALL 32809 0 1
// if un = ru_cargo then
2167: LD_VAR 0 1
2171: PUSH
2172: LD_EXP 30
2176: EQUAL
2177: IFFALSE 2187
// ru_cargo := 0 ;
2179: LD_ADDR_EXP 30
2183: PUSH
2184: LD_INT 0
2186: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2187: LD_VAR 0 1
2191: PPUSH
2192: CALL_OW 255
2196: PUSH
2197: LD_OWVAR 2
2201: EQUAL
2202: IFFALSE 2218
// dead_counter := dead_counter + 1 ;
2204: LD_ADDR_EXP 16
2208: PUSH
2209: LD_EXP 16
2213: PUSH
2214: LD_INT 1
2216: PLUS
2217: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2218: LD_VAR 0 1
2222: PPUSH
2223: CALL_OW 255
2227: PUSH
2228: LD_INT 81
2230: PUSH
2231: LD_OWVAR 2
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: IN
2245: IFFALSE 2261
// kill_counter := kill_counter + 1 ;
2247: LD_ADDR_EXP 17
2251: PUSH
2252: LD_EXP 17
2256: PUSH
2257: LD_INT 1
2259: PLUS
2260: ST_TO_ADDR
// if un = player_commander then
2261: LD_VAR 0 1
2265: PUSH
2266: LD_EXP 11
2270: EQUAL
2271: IFFALSE 2280
// YouLost ( vulcano-lost ) ;
2273: LD_STRING vulcano-lost
2275: PPUSH
2276: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2280: LD_VAR 0 1
2284: PUSH
2285: LD_INT 22
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 21
2297: PUSH
2298: LD_INT 3
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 69
2313: IN
2314: IFFALSE 2430
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2316: LD_VAR 0 1
2320: PPUSH
2321: CALL_OW 266
2325: PUSH
2326: LD_INT 33
2328: EQUAL
2329: PUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 266
2339: PUSH
2340: LD_INT 28
2342: EQUAL
2343: OR
2344: IFFALSE 2430
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2346: LD_ADDR_EXP 31
2350: PUSH
2351: LD_EXP 31
2355: PUSH
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 266
2365: ADD
2366: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2367: LD_ADDR_EXP 31
2371: PUSH
2372: LD_EXP 31
2376: PUSH
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL_OW 250
2386: ADD
2387: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2388: LD_ADDR_EXP 31
2392: PUSH
2393: LD_EXP 31
2397: PUSH
2398: LD_VAR 0 1
2402: PPUSH
2403: CALL_OW 251
2407: ADD
2408: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2409: LD_ADDR_EXP 31
2413: PUSH
2414: LD_EXP 31
2418: PUSH
2419: LD_VAR 0 1
2423: PPUSH
2424: CALL_OW 254
2428: ADD
2429: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2430: LD_VAR 0 1
2434: PUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 8
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: IN
2464: IFFALSE 2608
// begin if GetBType ( un ) = b_barracks then
2466: LD_VAR 0 1
2470: PPUSH
2471: CALL_OW 266
2475: PUSH
2476: LD_INT 5
2478: EQUAL
2479: IFFALSE 2497
// legion_blist := legion_blist ^ b_armoury else
2481: LD_ADDR_EXP 39
2485: PUSH
2486: LD_EXP 39
2490: PUSH
2491: LD_INT 4
2493: ADD
2494: ST_TO_ADDR
2495: GO 2545
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2497: LD_VAR 0 1
2501: PPUSH
2502: CALL_OW 266
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 6
2512: PUSH
2513: LD_INT 8
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: IN
2521: NOT
2522: IFFALSE 2545
// legion_blist := legion_blist ^ GetBType ( un ) ;
2524: LD_ADDR_EXP 39
2528: PUSH
2529: LD_EXP 39
2533: PUSH
2534: LD_VAR 0 1
2538: PPUSH
2539: CALL_OW 266
2543: ADD
2544: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2545: LD_ADDR_EXP 39
2549: PUSH
2550: LD_EXP 39
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: ADD
2565: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2566: LD_ADDR_EXP 39
2570: PUSH
2571: LD_EXP 39
2575: PUSH
2576: LD_VAR 0 1
2580: PPUSH
2581: CALL_OW 251
2585: ADD
2586: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2587: LD_ADDR_EXP 39
2591: PUSH
2592: LD_EXP 39
2596: PUSH
2597: LD_VAR 0 1
2601: PPUSH
2602: CALL_OW 254
2606: ADD
2607: ST_TO_ADDR
// end ; if un in legion_force then
2608: LD_VAR 0 1
2612: PUSH
2613: LD_EXP 36
2617: IN
2618: IFFALSE 2636
// legion_force := legion_force diff un ;
2620: LD_ADDR_EXP 36
2624: PUSH
2625: LD_EXP 36
2629: PUSH
2630: LD_VAR 0 1
2634: DIFF
2635: ST_TO_ADDR
// if un in ru_force then
2636: LD_VAR 0 1
2640: PUSH
2641: LD_EXP 28
2645: IN
2646: IFFALSE 2664
// ru_force := ru_force diff un ;
2648: LD_ADDR_EXP 28
2652: PUSH
2653: LD_EXP 28
2657: PUSH
2658: LD_VAR 0 1
2662: DIFF
2663: ST_TO_ADDR
// if un in al_force then
2664: LD_VAR 0 1
2668: PUSH
2669: LD_EXP 43
2673: IN
2674: IFFALSE 2692
// al_force := al_force diff un ;
2676: LD_ADDR_EXP 43
2680: PUSH
2681: LD_EXP 43
2685: PUSH
2686: LD_VAR 0 1
2690: DIFF
2691: ST_TO_ADDR
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do var i ;
2695: LD_INT 0
2697: PPUSH
// begin if GetSide ( b ) = 8 then
2698: LD_VAR 0 1
2702: PPUSH
2703: CALL_OW 255
2707: PUSH
2708: LD_INT 8
2710: EQUAL
2711: IFFALSE 2751
// for i = 1 to 4 do
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: DOUBLE
2719: LD_INT 1
2721: DEC
2722: ST_TO_ADDR
2723: LD_INT 4
2725: PUSH
2726: FOR_TO
2727: IFFALSE 2749
// legion_blist := Delete ( legion_blist , 1 ) ;
2729: LD_ADDR_EXP 39
2733: PUSH
2734: LD_EXP 39
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 3
2746: ST_TO_ADDR
2747: GO 2726
2749: POP
2750: POP
// if GetSide ( b ) = 3 then
2751: LD_VAR 0 1
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 3
2763: EQUAL
2764: IFFALSE 2804
// for i = 1 to 4 do
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: DOUBLE
2772: LD_INT 1
2774: DEC
2775: ST_TO_ADDR
2776: LD_INT 4
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2802
// ru_blist := Delete ( ru_blist , 1 ) ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_EXP 31
2791: PPUSH
2792: LD_INT 1
2794: PPUSH
2795: CALL_OW 3
2799: ST_TO_ADDR
2800: GO 2779
2802: POP
2803: POP
// end ;
2804: PPOPN 2
2806: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL_OW 264
2816: PUSH
2817: LD_INT 51
2819: PUSH
2820: LD_INT 48
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: IN
2827: NOT
2828: IFFALSE 2876
// begin if GetSide ( veh ) = 3 then
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL_OW 255
2839: PUSH
2840: LD_INT 3
2842: EQUAL
2843: IFFALSE 2876
// begin ComMoveXY ( veh , 149 , 8 ) ;
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_INT 149
2852: PPUSH
2853: LD_INT 8
2855: PPUSH
2856: CALL_OW 111
// ru_force := ru_force ^ veh ;
2860: LD_ADDR_EXP 28
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_VAR 0 1
2874: ADD
2875: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
2876: LD_VAR 0 1
2880: PPUSH
2881: CALL_OW 264
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 31
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: IN
2896: NOT
2897: IFFALSE 2930
// begin if GetSide ( veh ) = 8 then
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL_OW 255
2908: PUSH
2909: LD_INT 8
2911: EQUAL
2912: IFFALSE 2930
// legion_force := legion_force ^ veh ;
2914: LD_ADDR_EXP 36
2918: PUSH
2919: LD_EXP 36
2923: PUSH
2924: LD_VAR 0 1
2928: ADD
2929: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 255
2939: PUSH
2940: LD_INT 3
2942: EQUAL
2943: PUSH
2944: LD_EXP 30
2948: NOT
2949: AND
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: CALL_OW 264
2960: PUSH
2961: LD_INT 51
2963: EQUAL
2964: AND
2965: IFFALSE 2977
// ru_cargo := veh ;
2967: LD_ADDR_EXP 30
2971: PUSH
2972: LD_VAR 0 1
2976: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
2977: LD_VAR 0 1
2981: PPUSH
2982: CALL_OW 255
2986: PUSH
2987: LD_INT 7
2989: EQUAL
2990: PUSH
2991: LD_OWVAR 2
2995: PUSH
2996: LD_INT 7
2998: NONEQUAL
2999: AND
3000: IFFALSE 3018
// al_force := al_force ^ veh ;
3002: LD_ADDR_EXP 43
3006: PUSH
3007: LD_EXP 43
3011: PUSH
3012: LD_VAR 0 1
3016: ADD
3017: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_OWVAR 2
3032: EQUAL
3033: IFFALSE 3049
// veh_counter := veh_counter + 1 ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: LD_EXP 18
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ST_TO_ADDR
// end ;
3049: PPOPN 2
3051: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3052: LD_VAR 0 1
3056: PPUSH
3057: CALL_OW 255
3061: PUSH
3062: LD_OWVAR 2
3066: NONEQUAL
3067: IFFALSE 3083
// sib_contamin_counter := sib_contamin_counter + 1 ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_INT 1
3081: PLUS
3082: ST_TO_ADDR
// end ;
3083: PPOPN 3
3085: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3086: LD_VAR 0 2
3090: PPUSH
3091: CALL_OW 255
3095: PUSH
3096: LD_OWVAR 2
3100: EQUAL
3101: IFFALSE 3117
// tech_counter := tech_counter + 1 ;
3103: LD_ADDR_EXP 19
3107: PUSH
3108: LD_EXP 19
3112: PUSH
3113: LD_INT 1
3115: PLUS
3116: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3117: LD_VAR 0 1
3121: PUSH
3122: LD_INT 53
3124: EQUAL
3125: PUSH
3126: LD_OWVAR 2
3130: PUSH
3131: LD_INT 1
3133: EQUAL
3134: AND
3135: IFFALSE 3150
// SetTech ( 80 , 1 , state_researched ) ;
3137: LD_INT 80
3139: PPUSH
3140: LD_INT 1
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 322
// end ;
3150: PPOPN 2
3152: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 255
3162: PUSH
3163: LD_INT 8
3165: EQUAL
3166: PUSH
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 263
3176: PUSH
3177: LD_INT 2
3179: EQUAL
3180: AND
3181: IFFALSE 3192
// ComAutodestruct ( un ) ;
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL 70229 0 1
// end ;
3192: PPOPN 1
3194: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3195: LD_VAR 0 1
3199: PUSH
3200: LD_EXP 21
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3217
3210: POP
// LegionAttack ( ) ; event_alliance_attack :
3211: CALL 10405 0 0
3215: GO 3252
3217: LD_EXP 23
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3234
3227: POP
// AllianceAttack ( ) ; event_russian_attack :
3228: CALL 17521 0 0
3232: GO 3252
3234: LD_EXP 22
3238: DOUBLE
3239: EQUAL
3240: IFTRUE 3244
3242: GO 3251
3244: POP
// RussianAttack ( ) ; end ;
3245: CALL 6629 0 0
3249: GO 3252
3251: POP
// end ;
3252: PPOPN 1
3254: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3255: LD_INT 25
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PPUSH
3265: CALL_OW 69
3269: PUSH
3270: LD_INT 9
3272: LESS
3273: IFFALSE 3306
3275: GO 3277
3277: DISABLE
// begin enable ;
3278: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3279: LD_INT 8
3281: PUSH
3282: LD_INT 25
3284: PUSH
3285: LD_INT 12
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 69
3296: PUSH
3297: LD_INT 0
3299: PLUS
3300: MINUS
3301: PPUSH
3302: CALL 1541 0 1
// end ;
3306: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3307: LD_VAR 0 1
3311: PPUSH
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_VAR 0 3
3321: PPUSH
3322: CALL 32907 0 3
// end ;
3326: PPOPN 3
3328: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 32915 0 1
// end ; end_of_file
3338: PPOPN 1
3340: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
3347: PPUSH
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// uc_side := 3 ;
3354: LD_ADDR_OWVAR 20
3358: PUSH
3359: LD_INT 3
3361: ST_TO_ADDR
// uc_nation := nation_russian ;
3362: LD_ADDR_OWVAR 21
3366: PUSH
3367: LD_INT 3
3369: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PUSH
3404: LD_INT 1
3406: ARRAY
3407: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3408: LD_ADDR_VAR 0 5
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 3
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PPUSH
3437: CALL_OW 69
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3446: LD_ADDR_VAR 0 6
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 34
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3484: LD_ADDR_VAR 0 8
3488: PUSH
3489: LD_INT 22
3491: PUSH
3492: LD_INT 3
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 33
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3518: LD_ADDR_VAR 0 7
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 30
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: ST_TO_ADDR
// ru_blist := [ ] ;
3556: LD_ADDR_EXP 31
3560: PUSH
3561: EMPTY
3562: ST_TO_ADDR
// ru_vlist := [ ] ;
3563: LD_ADDR_EXP 32
3567: PUSH
3568: EMPTY
3569: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3570: LD_ADDR_EXP 35
3574: PUSH
3575: LD_INT 183
3577: PUSH
3578: LD_INT 62
3580: PUSH
3581: LD_INT 147
3583: PUSH
3584: LD_INT 44
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3593: LD_INT 30
3595: PUSH
3596: LD_INT 34
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_EXP 35
3616: PUSH
3617: LD_INT 1
3619: ARRAY
3620: PPUSH
3621: LD_EXP 35
3625: PUSH
3626: LD_INT 2
3628: ARRAY
3629: PPUSH
3630: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3634: LD_ADDR_EXP 33
3638: PUSH
3639: LD_INT 4
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: LD_INT 6
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: LD_OWVAR 67
3657: ARRAY
3658: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: CALL_OW 274
3668: PPUSH
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 3000
3674: PPUSH
3675: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: LD_INT 300
3694: PPUSH
3695: CALL_OW 277
// hc_gallery :=  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name :=  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_importance := 0 ;
3715: LD_ADDR_OWVAR 32
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3723: LD_ADDR_EXP 29
3727: PUSH
3728: LD_INT 5
3730: PUSH
3731: LD_INT 6
3733: PUSH
3734: LD_INT 7
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: LD_OWVAR 67
3746: ARRAY
3747: ST_TO_ADDR
// for i = 1 to 6 do
3748: LD_ADDR_VAR 0 2
3752: PUSH
3753: DOUBLE
3754: LD_INT 1
3756: DEC
3757: ST_TO_ADDR
3758: LD_INT 6
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3920
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3764: LD_INT 0
3766: PPUSH
3767: LD_INT 9
3769: PPUSH
3770: LD_EXP 29
3774: PPUSH
3775: CALL_OW 380
// un := CreateHuman ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: CALL_OW 44
3788: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3789: LD_VAR 0 3
3793: PPUSH
3794: LD_VAR 0 7
3798: PPUSH
3799: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3803: LD_INT 0
3805: PPUSH
3806: LD_INT 4
3808: PPUSH
3809: LD_EXP 29
3813: PPUSH
3814: CALL_OW 380
// un := CreateHuman ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: CALL_OW 44
3827: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3828: LD_VAR 0 3
3832: PPUSH
3833: LD_INT 24
3835: PPUSH
3836: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_INT 3
3845: PPUSH
3846: LD_EXP 29
3850: PPUSH
3851: CALL_OW 380
// un := CreateHuman ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: CALL_OW 44
3864: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
3865: LD_VAR 0 3
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
3879: LD_INT 0
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: LD_EXP 29
3889: PPUSH
3890: CALL_OW 380
// un := CreateHuman ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 44
3903: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: CALL_OW 52
// end ;
3918: GO 3761
3920: POP
3921: POP
// russian_prepared := true ;
3922: LD_ADDR_EXP 2
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: LD_INT 3
3943: PPUSH
3944: LD_INT 51
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: LD_VAR 0 1
3955: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
3956: LD_INT 22
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 69
3970: PUSH
3971: LD_INT 0
3973: GREATER
3974: PUSH
3975: LD_EXP 2
3979: AND
3980: IFFALSE 6130
3982: GO 3984
3984: DISABLE
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
// begin enable ;
4003: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4004: LD_ADDR_VAR 0 1
4008: PUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 30
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 69
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_INT 22
4049: PUSH
4050: LD_INT 3
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: LD_INT 1
4078: ARRAY
4079: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4080: LD_ADDR_VAR 0 3
4084: PUSH
4085: LD_INT 22
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 30
4097: PUSH
4098: LD_INT 34
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_INT 22
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 30
4135: PUSH
4136: LD_INT 33
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 22
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 30
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_INT 22
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 21
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4224: LD_ADDR_VAR 0 6
4228: PUSH
4229: LD_INT 22
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 21
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PPUSH
4253: CALL_OW 69
4257: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4258: LD_ADDR_VAR 0 7
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 21
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PPUSH
4287: CALL_OW 69
4291: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4292: LD_ADDR_VAR 0 9
4296: PUSH
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 25
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 72
4316: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4317: LD_ADDR_VAR 0 10
4321: PUSH
4322: LD_VAR 0 7
4326: PPUSH
4327: LD_INT 25
4329: PUSH
4330: LD_INT 3
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 72
4341: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4342: LD_ADDR_VAR 0 11
4346: PUSH
4347: LD_VAR 0 7
4351: PPUSH
4352: LD_INT 25
4354: PUSH
4355: LD_INT 4
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PPUSH
4362: CALL_OW 72
4366: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4367: LD_INT 22
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 51
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 69
4395: PUSH
4396: LD_INT 0
4398: GREATER
4399: PUSH
4400: LD_EXP 30
4404: PUSH
4405: LD_INT 0
4407: EQUAL
4408: AND
4409: IFFALSE 4449
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4411: LD_ADDR_EXP 30
4415: PUSH
4416: LD_INT 22
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 34
4428: PUSH
4429: LD_INT 51
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: ST_TO_ADDR
// if ru_cargo then
4449: LD_EXP 30
4453: IFFALSE 4793
// begin if IsInArea ( ru_cargo , ru_base ) then
4455: LD_EXP 30
4459: PPUSH
4460: LD_INT 9
4462: PPUSH
4463: CALL_OW 308
4467: IFFALSE 4546
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4469: LD_EXP 30
4473: PPUSH
4474: LD_INT 1
4476: PPUSH
4477: CALL_OW 289
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: IFFALSE 4503
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4487: LD_EXP 30
4491: PPUSH
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 120
4501: GO 4544
// if not HasTask ( ru_cargo ) then
4503: LD_EXP 30
4507: PPUSH
4508: CALL_OW 314
4512: NOT
4513: IFFALSE 4544
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4515: LD_EXP 30
4519: PPUSH
4520: LD_VAR 0 1
4524: PPUSH
4525: CALL_OW 250
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 251
4539: PPUSH
4540: CALL_OW 111
// end else
4544: GO 4793
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4546: LD_EXP 30
4550: PPUSH
4551: CALL_OW 314
4555: NOT
4556: PUSH
4557: LD_EXP 30
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 289
4569: PUSH
4570: LD_INT 100
4572: LESS
4573: AND
4574: PUSH
4575: LD_EXP 30
4579: PPUSH
4580: LD_INT 10
4582: PPUSH
4583: CALL_OW 308
4587: NOT
4588: AND
4589: IFFALSE 4666
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4591: LD_ADDR_VAR 0 15
4595: PUSH
4596: LD_INT 11
4598: PPUSH
4599: CALL_OW 435
4603: ST_TO_ADDR
// if cr then
4604: LD_VAR 0 15
4608: IFFALSE 4639
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4610: LD_EXP 30
4614: PPUSH
4615: LD_VAR 0 15
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: LD_VAR 0 15
4628: PUSH
4629: LD_INT 2
4631: ARRAY
4632: PPUSH
4633: CALL_OW 117
4637: GO 4666
// if not IsInArea ( ru_cargo , ru_crates ) then
4639: LD_EXP 30
4643: PPUSH
4644: LD_INT 11
4646: PPUSH
4647: CALL_OW 308
4651: NOT
4652: IFFALSE 4666
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4654: LD_EXP 30
4658: PPUSH
4659: LD_INT 11
4661: PPUSH
4662: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
4666: LD_EXP 30
4670: PPUSH
4671: CALL_OW 314
4675: NOT
4676: PUSH
4677: LD_EXP 30
4681: PPUSH
4682: LD_INT 10
4684: PPUSH
4685: CALL_OW 308
4689: NOT
4690: AND
4691: PUSH
4692: LD_EXP 30
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 289
4704: PUSH
4705: LD_INT 100
4707: EQUAL
4708: PUSH
4709: LD_OWVAR 2
4713: PPUSH
4714: LD_EXP 30
4718: PPUSH
4719: CALL_OW 292
4723: OR
4724: AND
4725: IFFALSE 4739
// ComMoveToArea ( ru_cargo , cargoa ) ;
4727: LD_EXP 30
4731: PPUSH
4732: LD_INT 10
4734: PPUSH
4735: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4739: LD_EXP 30
4743: PPUSH
4744: LD_INT 10
4746: PPUSH
4747: CALL_OW 308
4751: PUSH
4752: LD_VAR 0 8
4756: AND
4757: IFFALSE 4793
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4759: LD_VAR 0 7
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 9
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: LD_INT 139
4785: PPUSH
4786: LD_INT 24
4788: PPUSH
4789: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4793: LD_EXP 30
4797: PUSH
4798: LD_INT 0
4800: EQUAL
4801: PUSH
4802: LD_VAR 0 2
4806: AND
4807: PUSH
4808: LD_VAR 0 2
4812: PPUSH
4813: CALL_OW 461
4817: PUSH
4818: LD_INT 2
4820: EQUAL
4821: AND
4822: IFFALSE 4845
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 21
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 51
4840: PPUSH
4841: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
4845: LD_VAR 0 2
4849: PUSH
4850: LD_EXP 32
4854: PUSH
4855: LD_INT 0
4857: GREATER
4858: AND
4859: IFFALSE 4959
// begin if BuildingStatus ( ru_factory ) = bs_idle then
4861: LD_VAR 0 2
4865: PPUSH
4866: CALL_OW 461
4870: PUSH
4871: LD_INT 2
4873: EQUAL
4874: IFFALSE 4959
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
4876: LD_VAR 0 2
4880: PPUSH
4881: LD_EXP 32
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: PPUSH
4890: LD_EXP 32
4894: PUSH
4895: LD_INT 2
4897: ARRAY
4898: PPUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_INT 3
4906: ARRAY
4907: PPUSH
4908: LD_EXP 32
4912: PUSH
4913: LD_INT 4
4915: ARRAY
4916: PPUSH
4917: CALL_OW 125
// for i = 1 to 4 do
4921: LD_ADDR_VAR 0 12
4925: PUSH
4926: DOUBLE
4927: LD_INT 1
4929: DEC
4930: ST_TO_ADDR
4931: LD_INT 4
4933: PUSH
4934: FOR_TO
4935: IFFALSE 4957
// ru_vlist := Delete ( ru_vlist , 1 ) ;
4937: LD_ADDR_EXP 32
4941: PUSH
4942: LD_EXP 32
4946: PPUSH
4947: LD_INT 1
4949: PPUSH
4950: CALL_OW 3
4954: ST_TO_ADDR
4955: GO 4934
4957: POP
4958: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
4959: LD_INT 24
4961: PPUSH
4962: CALL_OW 461
4966: PUSH
4967: LD_INT 2
4969: EQUAL
4970: PUSH
4971: LD_EXP 4
4975: AND
4976: IFFALSE 5004
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
4978: LD_INT 25
4980: PPUSH
4981: LD_INT 3
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: IFFALSE 5004
// ComResearch ( ru_lab , tech_sibfiss ) ;
4994: LD_INT 24
4996: PPUSH
4997: LD_INT 25
4999: PPUSH
5000: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5004: LD_INT 25
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: CALL_OW 321
5014: PUSH
5015: LD_INT 2
5017: EQUAL
5018: PUSH
5019: LD_OWVAR 1
5023: PUSH
5024: LD_INT 10500
5026: MOD
5027: PUSH
5028: LD_INT 0
5030: EQUAL
5031: AND
5032: IFFALSE 5070
// if BuildingStatus ( ru_factory ) = bs_idle then
5034: LD_VAR 0 2
5038: PPUSH
5039: CALL_OW 461
5043: PUSH
5044: LD_INT 2
5046: EQUAL
5047: IFFALSE 5070
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_INT 23
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 3
5062: PPUSH
5063: LD_INT 48
5065: PPUSH
5066: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5070: LD_INT 22
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 34
5082: PUSH
5083: LD_INT 48
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 69
5098: PUSH
5099: LD_INT 0
5101: GREATER
5102: IFFALSE 5476
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5104: LD_ADDR_VAR 0 16
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 34
5121: PUSH
5122: LD_INT 48
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5142: LD_VAR 0 16
5146: PPUSH
5147: LD_INT 9
5149: PPUSH
5150: CALL_OW 308
5154: IFFALSE 5172
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5156: LD_VAR 0 16
5160: PPUSH
5161: LD_VAR 0 3
5165: PPUSH
5166: CALL_OW 120
5170: GO 5476
// if not HasTask ( sib_bomb ) then
5172: LD_VAR 0 16
5176: PPUSH
5177: CALL_OW 314
5181: NOT
5182: IFFALSE 5476
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5184: LD_INT 22
5186: PUSH
5187: LD_OWVAR 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 30
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: CALL_OW 256
5223: PUSH
5224: LD_INT 250
5226: GREATER
5227: IFFALSE 5320
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5229: LD_VAR 0 16
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_OWVAR 2
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 30
5248: PUSH
5249: LD_INT 1
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PPUSH
5260: CALL_OW 69
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: CALL_OW 250
5273: PPUSH
5274: LD_INT 22
5276: PUSH
5277: LD_OWVAR 2
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 1
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_INT 1
5307: ARRAY
5308: PPUSH
5309: CALL_OW 251
5313: PPUSH
5314: CALL_OW 116
5318: GO 5476
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5320: LD_INT 22
5322: PUSH
5323: LD_OWVAR 2
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: PUSH
5351: LD_INT 0
5353: GREATER
5354: IFFALSE 5447
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5356: LD_VAR 0 16
5360: PPUSH
5361: LD_INT 22
5363: PUSH
5364: LD_OWVAR 2
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: CALL_OW 250
5400: PPUSH
5401: LD_INT 22
5403: PUSH
5404: LD_OWVAR 2
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 21
5415: PUSH
5416: LD_INT 3
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: CALL_OW 251
5440: PPUSH
5441: CALL_OW 116
5445: GO 5476
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5447: LD_VAR 0 16
5451: PPUSH
5452: LD_EXP 11
5456: PPUSH
5457: CALL_OW 250
5461: PPUSH
5462: LD_EXP 11
5466: PPUSH
5467: CALL_OW 251
5471: PPUSH
5472: CALL_OW 116
// end ; if ru_can_attack then
5476: LD_EXP 3
5480: IFFALSE 5628
// if ru_time > 0 0$00 then
5482: LD_EXP 34
5486: PUSH
5487: LD_INT 0
5489: GREATER
5490: IFFALSE 5508
// ru_time := ru_time - 0 0$03 else
5492: LD_ADDR_EXP 34
5496: PUSH
5497: LD_EXP 34
5501: PUSH
5502: LD_INT 105
5504: MINUS
5505: ST_TO_ADDR
5506: GO 5628
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5508: LD_ADDR_EXP 34
5512: PUSH
5513: LD_INT 20265
5515: PPUSH
5516: LD_INT 30765
5518: PPUSH
5519: CALL_OW 12
5523: ST_TO_ADDR
// for i = 1 to ru_amount do
5524: LD_ADDR_VAR 0 12
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 33
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5626
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5542: LD_ADDR_EXP 32
5546: PUSH
5547: LD_EXP 32
5551: PUSH
5552: LD_INT 23
5554: ADD
5555: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5556: LD_ADDR_EXP 32
5560: PUSH
5561: LD_EXP 32
5565: PUSH
5566: LD_INT 3
5568: ADD
5569: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5570: LD_ADDR_EXP 32
5574: PUSH
5575: LD_EXP 32
5579: PUSH
5580: LD_INT 3
5582: ADD
5583: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5584: LD_ADDR_EXP 32
5588: PUSH
5589: LD_EXP 32
5593: PUSH
5594: LD_INT 46
5596: PUSH
5597: LD_INT 45
5599: PUSH
5600: LD_INT 47
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_INT 3
5616: PPUSH
5617: CALL_OW 14
5621: ARRAY
5622: ADD
5623: ST_TO_ADDR
// end ;
5624: GO 5539
5626: POP
5627: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5628: LD_VAR 0 4
5632: PPUSH
5633: LD_INT 35
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 72
5647: PUSH
5648: LD_INT 0
5650: GREATER
5651: IFFALSE 5699
// if BuildingStatus ( ru_factory ) = bs_idle then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 461
5662: PUSH
5663: LD_INT 2
5665: EQUAL
5666: IFFALSE 5699
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5668: LD_VAR 0 4
5672: PPUSH
5673: LD_INT 35
5675: PUSH
5676: LD_INT 0
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 72
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_INT 47
5694: PPUSH
5695: CALL_OW 148
// if ru_force >= ru_amount then
5699: LD_EXP 28
5703: PUSH
5704: LD_EXP 33
5708: GREATEREQUAL
5709: IFFALSE 5720
// RaiseSailEvent ( event_russian_attack ) ;
5711: LD_EXP 22
5715: PPUSH
5716: CALL_OW 427
// if ru_engs > 0 then
5720: LD_VAR 0 9
5724: PUSH
5725: LD_INT 0
5727: GREATER
5728: IFFALSE 6130
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 3
5737: PUSH
5738: LD_INT 24
5740: PUSH
5741: LD_INT 1000
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 72
5756: PUSH
5757: LD_INT 0
5759: GREATER
5760: IFFALSE 5915
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
5762: LD_ADDR_VAR 0 14
5766: PUSH
5767: LD_VAR 0 5
5771: PPUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: LD_INT 1000
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 72
5793: ST_TO_ADDR
// for i = 1 to ru_engs do
5794: LD_ADDR_VAR 0 12
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_VAR 0 9
5808: PUSH
5809: FOR_TO
5810: IFFALSE 5911
// begin if IsInUnit ( ru_engs [ i ] ) then
5812: LD_VAR 0 9
5816: PUSH
5817: LD_VAR 0 12
5821: ARRAY
5822: PPUSH
5823: CALL_OW 310
5827: IFFALSE 5846
// ComExitBuilding ( ru_engs [ i ] ) else
5829: LD_VAR 0 9
5833: PUSH
5834: LD_VAR 0 12
5838: ARRAY
5839: PPUSH
5840: CALL_OW 122
5844: GO 5909
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
5846: LD_VAR 0 9
5850: PUSH
5851: LD_VAR 0 12
5855: ARRAY
5856: PPUSH
5857: CALL_OW 314
5861: NOT
5862: PUSH
5863: LD_VAR 0 9
5867: PUSH
5868: LD_VAR 0 12
5872: ARRAY
5873: PPUSH
5874: CALL_OW 256
5878: PUSH
5879: LD_INT 600
5881: GREATER
5882: AND
5883: IFFALSE 5909
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
5885: LD_VAR 0 9
5889: PUSH
5890: LD_VAR 0 12
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 14
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: CALL_OW 130
// end ;
5909: GO 5809
5911: POP
5912: POP
// end else
5913: GO 6130
// begin if ru_blist = 0 then
5915: LD_EXP 31
5919: PUSH
5920: LD_INT 0
5922: EQUAL
5923: IFFALSE 6005
// begin for i = 1 to ru_engs do
5925: LD_ADDR_VAR 0 12
5929: PUSH
5930: DOUBLE
5931: LD_INT 1
5933: DEC
5934: ST_TO_ADDR
5935: LD_VAR 0 9
5939: PUSH
5940: FOR_TO
5941: IFFALSE 6001
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
5943: LD_VAR 0 9
5947: PUSH
5948: LD_VAR 0 12
5952: ARRAY
5953: PPUSH
5954: CALL_OW 314
5958: NOT
5959: PUSH
5960: LD_VAR 0 9
5964: PUSH
5965: LD_VAR 0 12
5969: ARRAY
5970: PPUSH
5971: CALL_OW 310
5975: NOT
5976: AND
5977: IFFALSE 5999
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
5979: LD_VAR 0 9
5983: PUSH
5984: LD_VAR 0 12
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 120
5999: GO 5940
6001: POP
6002: POP
// end else
6003: GO 6130
// begin for i = 1 to ru_engs do
6005: LD_ADDR_VAR 0 12
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_VAR 0 9
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6128
// begin if IsInUnit ( ru_engs [ i ] ) then
6023: LD_VAR 0 9
6027: PUSH
6028: LD_VAR 0 12
6032: ARRAY
6033: PPUSH
6034: CALL_OW 310
6038: IFFALSE 6057
// ComExitBuilding ( ru_engs [ i ] ) else
6040: LD_VAR 0 9
6044: PUSH
6045: LD_VAR 0 12
6049: ARRAY
6050: PPUSH
6051: CALL_OW 122
6055: GO 6126
// if not HasTask ( ru_engs [ i ] ) then
6057: LD_VAR 0 9
6061: PUSH
6062: LD_VAR 0 12
6066: ARRAY
6067: PPUSH
6068: CALL_OW 314
6072: NOT
6073: IFFALSE 6126
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6075: LD_VAR 0 9
6079: PUSH
6080: LD_VAR 0 12
6084: ARRAY
6085: PPUSH
6086: LD_EXP 31
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_EXP 31
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: LD_EXP 31
6108: PUSH
6109: LD_INT 3
6111: ARRAY
6112: PPUSH
6113: LD_EXP 31
6117: PUSH
6118: LD_INT 4
6120: ARRAY
6121: PPUSH
6122: CALL_OW 145
// end ;
6126: GO 6020
6128: POP
6129: POP
// end ; end ; end ; end ;
6130: PPOPN 16
6132: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6133: LD_EXP 2
6137: PUSH
6138: LD_INT 11
6140: PPUSH
6141: CALL_OW 435
6145: PUSH
6146: LD_INT 10
6148: LESS
6149: AND
6150: IFFALSE 6213
6152: GO 6154
6154: DISABLE
// begin enable ;
6155: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6156: LD_INT 1
6158: PPUSH
6159: LD_INT 5
6161: PPUSH
6162: CALL_OW 12
6166: PPUSH
6167: LD_INT 11
6169: PPUSH
6170: LD_INT 1
6172: PPUSH
6173: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6177: LD_INT 1505
6179: PPUSH
6180: LD_INT 2100
6182: PPUSH
6183: CALL_OW 12
6187: PPUSH
6188: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6192: LD_INT 1
6194: PPUSH
6195: LD_INT 5
6197: PPUSH
6198: CALL_OW 12
6202: PPUSH
6203: LD_INT 11
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 55
// end ;
6213: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6214: LD_EXP 4
6218: NOT
6219: IFFALSE 6334
6221: GO 6223
6223: DISABLE
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// begin enable ;
6228: ENABLE
// i := Rand ( 0 , 100 ) ;
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 100
6239: PPUSH
6240: CALL_OW 12
6244: ST_TO_ADDR
// case your_side of 1 :
6245: LD_OWVAR 2
6249: PUSH
6250: LD_INT 1
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6269
6258: POP
// tmp := 10 ; 2 :
6259: LD_ADDR_VAR 0 2
6263: PUSH
6264: LD_INT 10
6266: ST_TO_ADDR
6267: GO 6308
6269: LD_INT 2
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6288
6277: POP
// tmp := 0 ; 7 :
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
6286: GO 6308
6288: LD_INT 7
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6296
6294: GO 6307
6296: POP
// tmp := 15 ; end ;
6297: LD_ADDR_VAR 0 2
6301: PUSH
6302: LD_INT 15
6304: ST_TO_ADDR
6305: GO 6308
6307: POP
// if i < chance_to_bomb + tmp then
6308: LD_VAR 0 1
6312: PUSH
6313: LD_EXP 5
6317: PUSH
6318: LD_VAR 0 2
6322: PLUS
6323: LESS
6324: IFFALSE 6334
// ru_sib_bomb := true ;
6326: LD_ADDR_EXP 4
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// end ;
6334: PPOPN 2
6336: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6337: LD_INT 22
6339: PUSH
6340: LD_OWVAR 2
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 34
6351: PUSH
6352: LD_INT 8
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 69
6367: IFFALSE 6380
6369: GO 6371
6371: DISABLE
// begin ru_sib_bomb := true ;
6372: LD_ADDR_EXP 4
6376: PUSH
6377: LD_INT 1
6379: ST_TO_ADDR
// end ;
6380: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6381: LD_INT 22
6383: PUSH
6384: LD_INT 3
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 34
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 69
6409: IFFALSE 6508
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
// begin enable ;
6417: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6418: LD_ADDR_VAR 0 1
6422: PUSH
6423: LD_INT 1
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL_OW 12
6443: ARRAY
6444: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6445: LD_INT 22
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 30
6457: PUSH
6458: LD_INT 34
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_EXP 35
6482: PUSH
6483: LD_VAR 0 1
6487: ARRAY
6488: PPUSH
6489: LD_EXP 35
6493: PUSH
6494: LD_VAR 0 1
6498: PUSH
6499: LD_INT 1
6501: PLUS
6502: ARRAY
6503: PPUSH
6504: CALL_OW 243
// end ;
6508: PPOPN 1
6510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: IFFALSE 6626
6541: GO 6543
6543: DISABLE
6544: LD_INT 0
6546: PPUSH
// begin enable ;
6547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 30
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 69
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 274
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 6000
6601: PPUSH
6602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
6606: LD_VAR 0 1
6610: PPUSH
6611: CALL_OW 274
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 600
6621: PPUSH
6622: CALL_OW 276
// end ;
6626: PPOPN 1
6628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
6629: LD_INT 0
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
// units := ru_force ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_EXP 28
6646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_INT 3
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 30
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: ST_TO_ADDR
// ru_force := [ ] ;
6681: LD_ADDR_EXP 28
6685: PUSH
6686: EMPTY
6687: ST_TO_ADDR
// if not teleport then
6688: LD_VAR 0 6
6692: NOT
6693: IFFALSE 6735
// begin for i in units do
6695: LD_ADDR_VAR 0 5
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: FOR_IN
6706: IFFALSE 6731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
6708: LD_VAR 0 5
6712: PPUSH
6713: LD_INT 150
6715: PPUSH
6716: LD_INT 65
6718: PPUSH
6719: LD_INT 12
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 483
6729: GO 6705
6731: POP
6732: POP
// end else
6733: GO 6830
// begin repeat for i = 1 to units do
6735: LD_ADDR_VAR 0 5
6739: PUSH
6740: DOUBLE
6741: LD_INT 1
6743: DEC
6744: ST_TO_ADDR
6745: LD_VAR 0 3
6749: PUSH
6750: FOR_TO
6751: IFFALSE 6799
// if IsInArea ( units [ i ] , ru_base ) then
6753: LD_VAR 0 3
6757: PUSH
6758: LD_VAR 0 5
6762: ARRAY
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 308
6771: IFFALSE 6797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
6773: LD_VAR 0 3
6777: PUSH
6778: LD_VAR 0 5
6782: ARRAY
6783: PPUSH
6784: LD_VAR 0 6
6788: PUSH
6789: LD_INT 1
6791: ARRAY
6792: PPUSH
6793: CALL_OW 120
6797: GO 6750
6799: POP
6800: POP
// wait ( 0 0$10 ) ;
6801: LD_INT 350
6803: PPUSH
6804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 95
6815: PUSH
6816: LD_INT 9
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: NOT
6828: IFFALSE 6735
// end ; p := rand ( 1 , 2 ) ;
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 2
6840: PPUSH
6841: CALL_OW 12
6845: ST_TO_ADDR
// case p of 1 :
6846: LD_VAR 0 4
6850: PUSH
6851: LD_INT 1
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6913
6859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_INT 159
6867: PUSH
6868: LD_INT 71
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 152
6877: PUSH
6878: LD_INT 99
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 107
6887: PUSH
6888: LD_INT 119
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 104
6897: PUSH
6898: LD_INT 127
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 6976
6913: LD_INT 2
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6975
6921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_INT 116
6929: PUSH
6930: LD_INT 36
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 52
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 53
6949: PUSH
6950: LD_INT 67
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 58
6959: PUSH
6960: LD_INT 107
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
6973: GO 6976
6975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
6976: LD_INT 22
6978: PUSH
6979: LD_INT 7
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_INT 1
6998: GREATER
6999: AND
7000: IFFALSE 7031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7002: LD_ADDR_VAR 0 2
7006: PUSH
7007: LD_INT 116
7009: PUSH
7010: LD_INT 36
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 91
7019: PUSH
7020: LD_INT 52
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7031: LD_INT 35
7033: PPUSH
7034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7038: LD_VAR 0 3
7042: PPUSH
7043: LD_VAR 0 2
7047: PPUSH
7048: CALL 76782 0 2
7052: NOT
7053: IFFALSE 7031
// end ; end_of_file
7055: LD_VAR 0 1
7059: RET
// export function RemoveLegion ; var i ; begin
7060: LD_INT 0
7062: PPUSH
7063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7064: LD_ADDR_VAR 0 2
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 8
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PPUSH
7079: CALL_OW 69
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7098
// RemoveUnit ( i ) ;
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 64
7096: GO 7084
7098: POP
7099: POP
// end ;
7100: LD_VAR 0 1
7104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7105: LD_INT 0
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7117: LD_ADDR_VAR 0 6
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 8
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 30
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 69
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7155: LD_ADDR_VAR 0 8
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 8
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 30
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7193: LD_ADDR_VAR 0 9
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 8
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 6
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 30
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7249: LD_ADDR_VAR 0 10
7253: PUSH
7254: LD_INT 22
7256: PUSH
7257: LD_INT 8
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 32
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: ST_TO_ADDR
// uc_side := 8 ;
7283: LD_ADDR_OWVAR 20
7287: PUSH
7288: LD_INT 8
7290: ST_TO_ADDR
// uc_nation := nation_arabian ;
7291: LD_ADDR_OWVAR 21
7295: PUSH
7296: LD_INT 2
7298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7299: LD_ADDR_EXP 37
7303: PUSH
7304: LD_INT 5
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: LD_INT 7
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: LD_OWVAR 67
7322: ARRAY
7323: ST_TO_ADDR
// legion_blist := [ ] ;
7324: LD_ADDR_EXP 39
7328: PUSH
7329: EMPTY
7330: ST_TO_ADDR
// legion_vlist := [ ] ;
7331: LD_ADDR_EXP 40
7335: PUSH
7336: EMPTY
7337: ST_TO_ADDR
// legion_force := [ ] ;
7338: LD_ADDR_EXP 36
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// legion_enemy := - 1 ;
7345: LD_ADDR_EXP 41
7349: PUSH
7350: LD_INT 1
7352: NEG
7353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7354: LD_VAR 0 6
7358: PPUSH
7359: CALL_OW 274
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 10000
7369: PPUSH
7370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7374: LD_VAR 0 6
7378: PPUSH
7379: CALL_OW 274
7383: PPUSH
7384: LD_INT 3
7386: PPUSH
7387: LD_INT 1000
7389: PPUSH
7390: CALL_OW 277
// for i = 1 to l_towers do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: DOUBLE
7400: LD_INT 1
7402: DEC
7403: ST_TO_ADDR
7404: LD_VAR 0 10
7408: PUSH
7409: FOR_TO
7410: IFFALSE 7459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7412: LD_INT 0
7414: PPUSH
7415: LD_INT 1
7417: PPUSH
7418: LD_EXP 37
7422: PPUSH
7423: CALL_OW 380
// un := CreateHuman ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: CALL_OW 44
7436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7437: LD_VAR 0 2
7441: PPUSH
7442: LD_VAR 0 10
7446: PUSH
7447: LD_VAR 0 3
7451: ARRAY
7452: PPUSH
7453: CALL_OW 52
// end ;
7457: GO 7409
7459: POP
7460: POP
// for i = 1 to 4 do
7461: LD_ADDR_VAR 0 3
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_INT 4
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7568
// for p = 1 to 2 do
7477: LD_ADDR_VAR 0 7
7481: PUSH
7482: DOUBLE
7483: LD_INT 1
7485: DEC
7486: ST_TO_ADDR
7487: LD_INT 2
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7493: LD_INT 0
7495: PPUSH
7496: LD_INT 8
7498: PPUSH
7499: LD_EXP 37
7503: PPUSH
7504: CALL_OW 380
// un := CreateHuman ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: CALL_OW 44
7517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 30
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: PUSH
7552: LD_VAR 0 7
7556: ARRAY
7557: PPUSH
7558: CALL_OW 52
// end ;
7562: GO 7490
7564: POP
7565: POP
7566: GO 7474
7568: POP
7569: POP
// for i = 1 to 4 do
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: DOUBLE
7576: LD_INT 1
7578: DEC
7579: ST_TO_ADDR
7580: LD_INT 4
7582: PUSH
7583: FOR_TO
7584: IFFALSE 7627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7586: LD_INT 0
7588: PPUSH
7589: LD_INT 4
7591: PPUSH
7592: LD_EXP 37
7596: PPUSH
7597: CALL_OW 380
// un := CreateHuman ;
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: CALL_OW 44
7610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7611: LD_VAR 0 2
7615: PPUSH
7616: LD_VAR 0 9
7620: PPUSH
7621: CALL_OW 52
// end ;
7625: GO 7583
7627: POP
7628: POP
// for i = 1 to 4 do
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_INT 4
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_INT 3
7650: PPUSH
7651: LD_EXP 37
7655: PPUSH
7656: CALL_OW 380
// un := CreateHuman ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 8
7679: PPUSH
7680: CALL_OW 52
// end ;
7684: GO 7642
7686: POP
7687: POP
// for i = 1 to 3 do
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: DOUBLE
7694: LD_INT 1
7696: DEC
7697: ST_TO_ADDR
7698: LD_INT 3
7700: PUSH
7701: FOR_TO
7702: IFFALSE 7745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7704: LD_INT 0
7706: PPUSH
7707: LD_INT 2
7709: PPUSH
7710: LD_EXP 37
7714: PPUSH
7715: CALL_OW 380
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7729: LD_VAR 0 2
7733: PPUSH
7734: LD_VAR 0 6
7738: PPUSH
7739: CALL_OW 52
// end ;
7743: GO 7701
7745: POP
7746: POP
// for i = 1 to 3 do
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: DOUBLE
7753: LD_INT 1
7755: DEC
7756: ST_TO_ADDR
7757: LD_INT 3
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7871
// begin vc_chassis := ar_half_tracked ;
7763: LD_ADDR_OWVAR 37
7767: PUSH
7768: LD_INT 14
7770: ST_TO_ADDR
// vc_engine := engine_siberite ;
7771: LD_ADDR_OWVAR 39
7775: PUSH
7776: LD_INT 3
7778: ST_TO_ADDR
// vc_control := control_manual ;
7779: LD_ADDR_OWVAR 38
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7787: LD_ADDR_OWVAR 40
7791: PUSH
7792: LD_INT 31
7794: ST_TO_ADDR
// veh := CreateVehicle ;
7795: LD_ADDR_VAR 0 5
7799: PUSH
7800: CALL_OW 45
7804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
7805: LD_VAR 0 5
7809: PPUSH
7810: LD_INT 212
7812: PPUSH
7813: LD_INT 135
7815: PPUSH
7816: LD_INT 5
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7826: LD_INT 0
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_EXP 37
7836: PUSH
7837: LD_INT 1
7839: PLUS
7840: PPUSH
7841: CALL_OW 380
// un := CreateHuman ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: CALL_OW 44
7854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7855: LD_VAR 0 2
7859: PPUSH
7860: LD_VAR 0 5
7864: PPUSH
7865: CALL_OW 52
// end ;
7869: GO 7760
7871: POP
7872: POP
// PrepareSoldier ( false , 8 ) ;
7873: LD_INT 0
7875: PPUSH
7876: LD_INT 8
7878: PPUSH
7879: CALL_OW 381
// hc_class := class_sniper ;
7883: LD_ADDR_OWVAR 28
7887: PUSH
7888: LD_INT 5
7890: ST_TO_ADDR
// un := CreateHuman ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: CALL_OW 44
7900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7901: LD_VAR 0 2
7905: PPUSH
7906: LD_INT 4
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
7913: LD_VAR 0 2
7917: PPUSH
7918: LD_INT 136
7920: PPUSH
7921: LD_INT 92
7923: PPUSH
7924: CALL_OW 428
7928: PPUSH
7929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
7933: LD_INT 198
7935: PPUSH
7936: LD_INT 94
7938: PPUSH
7939: LD_INT 8
7941: PPUSH
7942: LD_INT 10
7944: PPUSH
7945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
7949: LD_INT 167
7951: PPUSH
7952: LD_INT 130
7954: PPUSH
7955: LD_INT 8
7957: PPUSH
7958: LD_INT 10
7960: PPUSH
7961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
7965: LD_ADDR_VAR 0 4
7969: PUSH
7970: LD_INT 24
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: CALL_OW 517
7980: ST_TO_ADDR
// legion_mines := [ ] ;
7981: LD_ADDR_EXP 38
7985: PUSH
7986: EMPTY
7987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: DOUBLE
7994: LD_INT 1
7996: DEC
7997: ST_TO_ADDR
7998: LD_VAR 0 4
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PUSH
8019: LD_VAR 0 3
8023: ARRAY
8024: PPUSH
8025: LD_VAR 0 4
8029: PUSH
8030: LD_INT 2
8032: ARRAY
8033: PUSH
8034: LD_VAR 0 3
8038: ARRAY
8039: PPUSH
8040: LD_INT 8
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8050: LD_ADDR_EXP 38
8054: PUSH
8055: LD_EXP 38
8059: PPUSH
8060: LD_EXP 38
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PUSH
8078: LD_VAR 0 3
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PUSH
8093: LD_VAR 0 3
8097: ARRAY
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// end ;
8108: GO 8007
8110: POP
8111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8112: LD_ADDR_EXP 40
8116: PUSH
8117: LD_INT 13
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 32
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 1
8139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
8140: LD_EXP 38
8144: PUSH
8145: LD_INT 24
8147: PPUSH
8148: LD_INT 22
8150: PUSH
8151: LD_OWVAR 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 70
8164: AND
8165: IFFALSE 8332
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// begin enable ;
8174: ENABLE
// for i := legion_mines downto 1 do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: DOUBLE
8181: LD_EXP 38
8185: INC
8186: ST_TO_ADDR
8187: LD_INT 1
8189: PUSH
8190: FOR_DOWNTO
8191: IFFALSE 8330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_EXP 38
8202: PUSH
8203: LD_VAR 0 1
8207: ARRAY
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_EXP 38
8217: PUSH
8218: LD_VAR 0 1
8222: ARRAY
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 428
8232: ST_TO_ADDR
// if un then
8233: LD_VAR 0 2
8237: IFFALSE 8328
// if GetSide ( un ) = legion_enemy then
8239: LD_VAR 0 2
8243: PPUSH
8244: CALL_OW 255
8248: PUSH
8249: LD_EXP 41
8253: EQUAL
8254: IFFALSE 8328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
8256: LD_EXP 38
8260: PUSH
8261: LD_VAR 0 1
8265: ARRAY
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_EXP 38
8275: PUSH
8276: LD_VAR 0 1
8280: ARRAY
8281: PUSH
8282: LD_INT 2
8284: ARRAY
8285: PPUSH
8286: LD_INT 8
8288: PPUSH
8289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
8293: LD_ADDR_EXP 38
8297: PUSH
8298: LD_EXP 38
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 3
8312: ST_TO_ADDR
// if not mine_vulc then
8313: LD_EXP 13
8317: NOT
8318: IFFALSE 8328
// mine_vulc := true ;
8320: LD_ADDR_EXP 13
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// end ; end ;
8328: GO 8190
8330: POP
8331: POP
// end ;
8332: PPOPN 2
8334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8335: LD_OWVAR 1
8339: PUSH
8340: LD_INT 52500
8342: PUSH
8343: LD_INT 46200
8345: PUSH
8346: LD_INT 42000
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: GREATEREQUAL
8360: IFFALSE 8538
8362: GO 8364
8364: DISABLE
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: LD_INT 1
8376: PPUSH
8377: CALL_OW 469
8381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8382: LD_VAR 0 1
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: PUSH
8391: LD_INT 112
8393: EQUAL
8394: PUSH
8395: LD_VAR 0 1
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PUSH
8404: LD_INT 67
8406: EQUAL
8407: AND
8408: IFFALSE 8538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 8
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not un then
8444: LD_VAR 0 2
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8538
// un := un [ 1 ] ;
8453: LD_ADDR_VAR 0 2
8457: PUSH
8458: LD_VAR 0 2
8462: PUSH
8463: LD_INT 1
8465: ARRAY
8466: ST_TO_ADDR
// if IsInUnit ( un ) then
8467: LD_VAR 0 2
8471: PPUSH
8472: CALL_OW 310
8476: IFFALSE 8487
// ComExitBuilding ( un ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_VAR 0 1
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 1
8505: PUSH
8506: LD_INT 2
8508: ARRAY
8509: PPUSH
8510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_INT 207
8521: PPUSH
8522: LD_INT 123
8524: PPUSH
8525: CALL_OW 171
// AddComUnload ( un ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: CALL_OW 219
// end ; end ;
8538: PPOPN 2
8540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8541: LD_INT 22
8543: PUSH
8544: LD_INT 8
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 69
8555: PUSH
8556: LD_INT 0
8558: GREATER
8559: IFFALSE 10147
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
// begin enable ;
8583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8584: LD_ADDR_VAR 0 8
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 30
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 8
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 1
8658: ARRAY
8659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_INT 22
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 30
8680: PUSH
8681: LD_INT 6
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 30
8690: PUSH
8691: LD_INT 8
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8716: LD_ADDR_VAR 0 11
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 30
8733: PUSH
8734: LD_INT 32
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8750: LD_ADDR_VAR 0 16
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_INT 8
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 69
8783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8784: LD_ADDR_VAR 0 15
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 8
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8818: LD_ADDR_VAR 0 14
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 8
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8852: LD_ADDR_VAR 0 13
8856: PUSH
8857: LD_INT 22
8859: PUSH
8860: LD_INT 8
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 25
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PPUSH
8881: CALL_OW 69
8885: ST_TO_ADDR
// if l_eng then
8886: LD_VAR 0 16
8890: IFFALSE 9308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_INT 25
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 70
8928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8929: LD_VAR 0 5
8933: PPUSH
8934: LD_INT 3
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 1000
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 72
8955: PUSH
8956: LD_INT 0
8958: GREATER
8959: IFFALSE 9093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 5
8970: PPUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 24
8976: PUSH
8977: LD_INT 1000
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 72
8992: ST_TO_ADDR
// for i = 1 to l_eng do
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: DOUBLE
8999: LD_INT 1
9001: DEC
9002: ST_TO_ADDR
9003: LD_VAR 0 16
9007: PUSH
9008: FOR_TO
9009: IFFALSE 9089
// if IsInUnit ( l_eng [ i ] ) then
9011: LD_VAR 0 16
9015: PUSH
9016: LD_VAR 0 2
9020: ARRAY
9021: PPUSH
9022: CALL_OW 310
9026: IFFALSE 9045
// ComExitBuilding ( l_eng [ i ] ) else
9028: LD_VAR 0 16
9032: PUSH
9033: LD_VAR 0 2
9037: ARRAY
9038: PPUSH
9039: CALL_OW 122
9043: GO 9087
// if not HasTask ( l_eng [ i ] ) then
9045: LD_VAR 0 16
9049: PUSH
9050: LD_VAR 0 2
9054: ARRAY
9055: PPUSH
9056: CALL_OW 314
9060: NOT
9061: IFFALSE 9087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9063: LD_VAR 0 16
9067: PUSH
9068: LD_VAR 0 2
9072: ARRAY
9073: PPUSH
9074: LD_VAR 0 3
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PPUSH
9083: CALL_OW 130
9087: GO 9008
9089: POP
9090: POP
// end else
9091: GO 9308
// begin if legion_blist > 0 then
9093: LD_EXP 39
9097: PUSH
9098: LD_INT 0
9100: GREATER
9101: IFFALSE 9230
// begin for i = 1 to l_eng do
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: DOUBLE
9109: LD_INT 1
9111: DEC
9112: ST_TO_ADDR
9113: LD_VAR 0 16
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9226
// if IsInUnit ( l_eng [ i ] ) then
9121: LD_VAR 0 16
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: PPUSH
9132: CALL_OW 310
9136: IFFALSE 9155
// ComExitBuilding ( l_eng [ i ] ) else
9138: LD_VAR 0 16
9142: PUSH
9143: LD_VAR 0 2
9147: ARRAY
9148: PPUSH
9149: CALL_OW 122
9153: GO 9224
// if not HasTask ( l_eng [ i ] ) then
9155: LD_VAR 0 16
9159: PUSH
9160: LD_VAR 0 2
9164: ARRAY
9165: PPUSH
9166: CALL_OW 314
9170: NOT
9171: IFFALSE 9224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9173: LD_VAR 0 16
9177: PUSH
9178: LD_VAR 0 2
9182: ARRAY
9183: PPUSH
9184: LD_EXP 39
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: LD_EXP 39
9197: PUSH
9198: LD_INT 2
9200: ARRAY
9201: PPUSH
9202: LD_EXP 39
9206: PUSH
9207: LD_INT 3
9209: ARRAY
9210: PPUSH
9211: LD_EXP 39
9215: PUSH
9216: LD_INT 4
9218: ARRAY
9219: PPUSH
9220: CALL_OW 145
9224: GO 9118
9226: POP
9227: POP
// end else
9228: GO 9308
// for i = 1 to l_eng do
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: DOUBLE
9236: LD_INT 1
9238: DEC
9239: ST_TO_ADDR
9240: LD_VAR 0 16
9244: PUSH
9245: FOR_TO
9246: IFFALSE 9306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9248: LD_VAR 0 16
9252: PUSH
9253: LD_VAR 0 2
9257: ARRAY
9258: PPUSH
9259: CALL_OW 310
9263: NOT
9264: PUSH
9265: LD_VAR 0 16
9269: PUSH
9270: LD_VAR 0 2
9274: ARRAY
9275: PPUSH
9276: CALL_OW 314
9280: NOT
9281: AND
9282: IFFALSE 9304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9284: LD_VAR 0 16
9288: PUSH
9289: LD_VAR 0 2
9293: ARRAY
9294: PPUSH
9295: LD_VAR 0 8
9299: PPUSH
9300: CALL_OW 120
9304: GO 9245
9306: POP
9307: POP
// end ; end ; if l_factory then
9308: LD_VAR 0 9
9312: IFFALSE 9712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9314: LD_INT 22
9316: PUSH
9317: LD_INT 8
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 2
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: LD_INT 61
9339: PUSH
9340: EMPTY
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_INT 0
9359: GREATER
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 8
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 34
9373: PUSH
9374: LD_INT 31
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: PUSH
9390: LD_INT 0
9392: GREATER
9393: AND
9394: IFFALSE 9514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9396: LD_INT 22
9398: PUSH
9399: LD_INT 8
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 33
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: LD_INT 61
9421: PUSH
9422: EMPTY
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 8
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 34
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 34
9487: PUSH
9488: LD_INT 31
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PPUSH
9504: CALL_OW 12
9508: ARRAY
9509: PPUSH
9510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9514: LD_EXP 40
9518: PUSH
9519: LD_INT 0
9521: GREATER
9522: PUSH
9523: LD_VAR 0 9
9527: PPUSH
9528: CALL_OW 461
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: AND
9537: IFFALSE 9622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9539: LD_VAR 0 9
9543: PPUSH
9544: LD_EXP 40
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: LD_EXP 40
9557: PUSH
9558: LD_INT 2
9560: ARRAY
9561: PPUSH
9562: LD_EXP 40
9566: PUSH
9567: LD_INT 3
9569: ARRAY
9570: PPUSH
9571: LD_EXP 40
9575: PUSH
9576: LD_INT 4
9578: ARRAY
9579: PPUSH
9580: CALL_OW 125
// for i = 1 to 4 do
9584: LD_ADDR_VAR 0 2
9588: PUSH
9589: DOUBLE
9590: LD_INT 1
9592: DEC
9593: ST_TO_ADDR
9594: LD_INT 4
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9600: LD_ADDR_EXP 40
9604: PUSH
9605: LD_EXP 40
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 3
9617: ST_TO_ADDR
9618: GO 9597
9620: POP
9621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9622: LD_VAR 0 11
9626: PPUSH
9627: LD_INT 35
9629: PUSH
9630: LD_INT 0
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 72
9641: PUSH
9642: LD_INT 0
9644: GREATER
9645: PUSH
9646: LD_VAR 0 9
9650: PPUSH
9651: CALL_OW 461
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: AND
9660: IFFALSE 9712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9662: LD_VAR 0 11
9666: PPUSH
9667: LD_INT 35
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_INT 1
9684: ARRAY
9685: PPUSH
9686: LD_INT 28
9688: PUSH
9689: LD_INT 27
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 1
9698: PPUSH
9699: LD_INT 2
9701: PPUSH
9702: CALL_OW 12
9706: ARRAY
9707: PPUSH
9708: CALL_OW 148
// end ; if legion_enemy > 0 then
9712: LD_EXP 41
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: IFFALSE 10005
// begin if tick mod 11 11$00 = 0 then
9722: LD_OWVAR 1
9726: PUSH
9727: LD_INT 23100
9729: MOD
9730: PUSH
9731: LD_INT 0
9733: EQUAL
9734: IFFALSE 9986
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9736: LD_ADDR_EXP 40
9740: PUSH
9741: LD_EXP 40
9745: PUSH
9746: LD_INT 13
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: LD_INT 2
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: ADD
9760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9761: LD_ADDR_EXP 40
9765: PUSH
9766: LD_EXP 40
9770: PUSH
9771: LD_INT 28
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 29
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 3
9790: PPUSH
9791: CALL_OW 12
9795: ARRAY
9796: ADD
9797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9798: LD_ADDR_EXP 40
9802: PUSH
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 13
9810: PUSH
9811: LD_INT 1
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: ADD
9822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9823: LD_ADDR_EXP 40
9827: PUSH
9828: LD_EXP 40
9832: PUSH
9833: LD_INT 28
9835: PUSH
9836: LD_INT 27
9838: PUSH
9839: LD_INT 29
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_INT 3
9852: PPUSH
9853: CALL_OW 12
9857: ARRAY
9858: ADD
9859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9860: LD_ADDR_EXP 40
9864: PUSH
9865: LD_EXP 40
9869: PUSH
9870: LD_INT 13
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: ADD
9884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9885: LD_ADDR_EXP 40
9889: PUSH
9890: LD_EXP 40
9894: PUSH
9895: LD_INT 28
9897: PUSH
9898: LD_EXP 64
9902: PUSH
9903: LD_INT 29
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 1
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: CALL_OW 12
9921: ARRAY
9922: ADD
9923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9924: LD_ADDR_EXP 40
9928: PUSH
9929: LD_EXP 40
9933: PUSH
9934: LD_INT 13
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ADD
9948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9949: LD_ADDR_EXP 40
9953: PUSH
9954: LD_EXP 40
9958: PUSH
9959: LD_INT 28
9961: PUSH
9962: LD_INT 27
9964: PUSH
9965: LD_INT 29
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_INT 3
9978: PPUSH
9979: CALL_OW 12
9983: ARRAY
9984: ADD
9985: ST_TO_ADDR
// end ; if legion_force >= 8 then
9986: LD_EXP 36
9990: PUSH
9991: LD_INT 8
9993: GREATEREQUAL
9994: IFFALSE 10005
// RaiseSailEvent ( event_legion_attack ) ;
9996: LD_EXP 21
10000: PPUSH
10001: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10005: LD_INT 22
10007: PUSH
10008: LD_INT 8
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 34
10017: PUSH
10018: LD_INT 32
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 69
10033: IFFALSE 10147
// begin if l_cargo = false then
10035: LD_VAR 0 17
10039: PUSH
10040: LD_INT 0
10042: EQUAL
10043: IFFALSE 10079
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10045: LD_ADDR_VAR 0 17
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 32
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 69
10078: ST_TO_ADDR
// if l_cargo then
10079: LD_VAR 0 17
10083: IFFALSE 10147
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10085: LD_ADDR_VAR 0 7
10089: PUSH
10090: LD_INT 14
10092: PPUSH
10093: CALL_OW 435
10097: ST_TO_ADDR
// if cr > 0 then
10098: LD_VAR 0 7
10102: PUSH
10103: LD_INT 0
10105: GREATER
10106: IFFALSE 10147
// if not HasTask ( l_cargo ) then
10108: LD_VAR 0 17
10112: PPUSH
10113: CALL_OW 314
10117: NOT
10118: IFFALSE 10147
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10120: LD_VAR 0 17
10124: PPUSH
10125: LD_VAR 0 7
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 7
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: PPUSH
10143: CALL_OW 117
// end ; end ; end ;
10147: PPOPN 17
10149: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10150: LD_OWVAR 67
10154: PUSH
10155: LD_INT 1
10157: GREATER
10158: IFFALSE 10363
10160: GO 10162
10162: DISABLE
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
10167: PPUSH
10168: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10169: LD_INT 35
10171: PPUSH
10172: LD_INT 12635
10174: PPUSH
10175: CALL_OW 12
10179: PPUSH
10180: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 8
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 25
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL_OW 69
10217: ST_TO_ADDR
// p := 1 ;
10218: LD_ADDR_VAR 0 4
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10226: LD_ADDR_VAR 0 3
10230: PUSH
10231: LD_INT 116
10233: PUSH
10234: LD_INT 139
10236: PUSH
10237: LD_INT 69
10239: PUSH
10240: LD_INT 13
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
// for i = 1 to 2 do
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_INT 2
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10361
// begin if IsInUnit ( sci [ i ] ) then
10265: LD_VAR 0 2
10269: PUSH
10270: LD_VAR 0 1
10274: ARRAY
10275: PPUSH
10276: CALL_OW 310
10280: IFFALSE 10297
// ComExitBuilding ( sci [ i ] ) ;
10282: LD_VAR 0 2
10286: PUSH
10287: LD_VAR 0 1
10291: ARRAY
10292: PPUSH
10293: CALL_OW 122
// Wait ( 0 0$03 ) ;
10297: LD_INT 105
10299: PPUSH
10300: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10304: LD_VAR 0 2
10308: PUSH
10309: LD_VAR 0 1
10313: ARRAY
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 4
10324: ARRAY
10325: PPUSH
10326: LD_VAR 0 3
10330: PUSH
10331: LD_VAR 0 4
10335: PUSH
10336: LD_INT 1
10338: PLUS
10339: ARRAY
10340: PPUSH
10341: CALL_OW 158
// p := p + 2 ;
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: LD_VAR 0 4
10354: PUSH
10355: LD_INT 2
10357: PLUS
10358: ST_TO_ADDR
// end ;
10359: GO 10262
10361: POP
10362: POP
// end ;
10363: PPOPN 4
10365: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10366: LD_INT 14
10368: PPUSH
10369: CALL_OW 435
10373: PUSH
10374: LD_INT 20
10376: LESS
10377: IFFALSE 10404
10379: GO 10381
10381: DISABLE
// begin enable ;
10382: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 5
10388: PPUSH
10389: CALL_OW 12
10393: PPUSH
10394: LD_INT 14
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 55
// end ;
10404: END
// export function LegionAttack ( ) ; var path , units ; begin
10405: LD_INT 0
10407: PPUSH
10408: PPUSH
10409: PPUSH
// units := legion_force ;
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: LD_EXP 36
10419: ST_TO_ADDR
// legion_force := [ ] ;
10420: LD_ADDR_EXP 36
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// case legion_enemy of 1 :
10427: LD_EXP 41
10431: PUSH
10432: LD_INT 1
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10483
10440: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_INT 174
10448: PUSH
10449: LD_INT 135
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 153
10458: PUSH
10459: LD_INT 146
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 118
10468: PUSH
10469: LD_INT 122
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: ST_TO_ADDR
10481: GO 10586
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10534
10491: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
10492: LD_ADDR_VAR 0 2
10496: PUSH
10497: LD_INT 164
10499: PUSH
10500: LD_INT 73
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 130
10509: PUSH
10510: LD_INT 48
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 96
10519: PUSH
10520: LD_INT 48
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 10586
10534: LD_INT 7
10536: DOUBLE
10537: EQUAL
10538: IFTRUE 10542
10540: GO 10585
10542: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 174
10550: PUSH
10551: LD_INT 135
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 153
10560: PUSH
10561: LD_INT 146
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: LD_INT 122
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: ST_TO_ADDR
10583: GO 10586
10585: POP
// repeat wait ( 0 0$1 ) ;
10586: LD_INT 35
10588: PPUSH
10589: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL 76782 0 2
10607: NOT
10608: IFFALSE 10586
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// export function Action ; var un , gamemode , speaker ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
// if debug then
10621: LD_EXP 15
10625: IFFALSE 10652
// begin Difficulty := 2 ;
10627: LD_ADDR_OWVAR 67
10631: PUSH
10632: LD_INT 2
10634: ST_TO_ADDR
// gamemode := 3 ;
10635: LD_ADDR_VAR 0 3
10639: PUSH
10640: LD_INT 3
10642: ST_TO_ADDR
// FogOff ( 7 ) ;
10643: LD_INT 7
10645: PPUSH
10646: CALL_OW 344
// end else
10650: GO 10678
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
10652: LD_ADDR_OWVAR 67
10656: PUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 426
10664: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 426
10677: ST_TO_ADDR
// end ; if gamemode = 1 then
10678: LD_VAR 0 3
10682: PUSH
10683: LD_INT 1
10685: EQUAL
10686: IFFALSE 10710
// begin your_side := 1 ;
10688: LD_ADDR_OWVAR 2
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// legion_enemy := 1 ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// PrepareAmerican ;
10704: CALL 265 0 0
// end else
10708: GO 10762
// if gamemode = 2 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10742
// begin your_side := 2 ;
10720: LD_ADDR_OWVAR 2
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// legion_enemy := 2 ;
10728: LD_ADDR_EXP 41
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// PrepareArabian ;
10736: CALL 17655 0 0
// end else
10740: GO 10762
// begin your_side := 7 ;
10742: LD_ADDR_OWVAR 2
10746: PUSH
10747: LD_INT 7
10749: ST_TO_ADDR
// legion_enemy := 7 ;
10750: LD_ADDR_EXP 41
10754: PUSH
10755: LD_INT 7
10757: ST_TO_ADDR
// PrepareAlliance ;
10758: CALL 15114 0 0
// end ; if your_side = 1 then
10762: LD_OWVAR 2
10766: PUSH
10767: LD_INT 1
10769: EQUAL
10770: IFFALSE 11248
// begin case Query ( QVul4 ) of 1 :
10772: LD_STRING QVul4
10774: PPUSH
10775: CALL_OW 97
10779: PUSH
10780: LD_INT 1
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10791
10788: POP
// ; end ;
10789: GO 10792
10791: POP
// InGameOn ;
10792: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10796: LD_INT 8
10798: PPUSH
10799: LD_INT 5
10801: PPUSH
10802: CALL_OW 86
// uc_side := 4 ;
10806: LD_ADDR_OWVAR 20
10810: PUSH
10811: LD_INT 4
10813: ST_TO_ADDR
// uc_nation := 1 ;
10814: LD_ADDR_OWVAR 21
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// hc_importance := 0 ;
10822: LD_ADDR_OWVAR 32
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 3
10835: PPUSH
10836: LD_EXP 26
10840: PPUSH
10841: CALL_OW 380
// un := CreateHuman ;
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: CALL_OW 44
10854: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10855: LD_VAR 0 2
10859: PPUSH
10860: LD_INT 12
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// hc_name := Stuart Carey ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING Stuart Carey
10880: ST_TO_ADDR
// hc_class := 1 ;
10881: LD_ADDR_OWVAR 28
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// hc_gallery := vulcano ;
10889: LD_ADDR_OWVAR 33
10893: PUSH
10894: LD_STRING vulcano
10896: ST_TO_ADDR
// hc_face_number := 1 ;
10897: LD_ADDR_OWVAR 34
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// us_guy := CreateHuman ;
10905: LD_ADDR_EXP 27
10909: PUSH
10910: CALL_OW 44
10914: ST_TO_ADDR
// InitHc ;
10915: CALL_OW 19
// if rand ( 0 , 1 ) then
10919: LD_INT 0
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 12
10929: IFFALSE 10946
// PrepareHuman ( sex_male , 3 , 6 ) else
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: LD_INT 6
10939: PPUSH
10940: CALL_OW 380
10944: GO 10959
// PrepareHuman ( sex_female , 4 , 8 ) ;
10946: LD_INT 2
10948: PPUSH
10949: LD_INT 4
10951: PPUSH
10952: LD_INT 8
10954: PPUSH
10955: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
10959: LD_VAR 0 2
10963: PPUSH
10964: LD_EXP 24
10968: PPUSH
10969: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
10973: LD_EXP 24
10977: PPUSH
10978: LD_VAR 0 2
10982: PPUSH
10983: CALL_OW 119
// if GetSex ( un ) = sex_male then
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 258
10996: PUSH
10997: LD_INT 1
10999: EQUAL
11000: IFFALSE 11083
// begin Say ( un , VD-un1 ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_STRING VD-un1
11009: PPUSH
11010: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11014: LD_EXP 24
11018: PPUSH
11019: LD_STRING VDc-1
11021: PPUSH
11022: CALL_OW 88
// Say ( un , VD-un2 ) ;
11026: LD_VAR 0 2
11030: PPUSH
11031: LD_STRING VD-un2
11033: PPUSH
11034: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11038: LD_EXP 24
11042: PPUSH
11043: LD_STRING VDc-2
11045: PPUSH
11046: CALL_OW 88
// Say ( un , VD-un3 ) ;
11050: LD_VAR 0 2
11054: PPUSH
11055: LD_STRING VD-un3
11057: PPUSH
11058: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11062: LD_INT 7
11064: PPUSH
11065: CALL_OW 67
// Say ( un , VD-un4 ) ;
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_STRING VD-un4
11076: PPUSH
11077: CALL_OW 88
// end else
11081: GO 11162
// begin Say ( un , VD-unf1 ) ;
11083: LD_VAR 0 2
11087: PPUSH
11088: LD_STRING VD-unf1
11090: PPUSH
11091: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11095: LD_EXP 24
11099: PPUSH
11100: LD_STRING VDc-1
11102: PPUSH
11103: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11107: LD_VAR 0 2
11111: PPUSH
11112: LD_STRING VD-unf2
11114: PPUSH
11115: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11119: LD_EXP 24
11123: PPUSH
11124: LD_STRING VDc-2
11126: PPUSH
11127: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_STRING VD-unf3
11138: PPUSH
11139: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11143: LD_INT 7
11145: PPUSH
11146: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11150: LD_VAR 0 2
11154: PPUSH
11155: LD_STRING VD-unf4
11157: PPUSH
11158: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: LD_INT 2
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11177: LD_EXP 24
11181: PPUSH
11182: LD_STRING VDc-3
11184: PPUSH
11185: CALL_OW 88
// InGameOff ;
11189: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11193: LD_STRING CVulc1
11195: PPUSH
11196: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11200: LD_INT 35
11202: PPUSH
11203: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 250
11216: PUSH
11217: LD_INT 2
11219: EQUAL
11220: PUSH
11221: LD_VAR 0 2
11225: PPUSH
11226: CALL_OW 251
11230: PUSH
11231: LD_INT 2
11233: EQUAL
11234: AND
11235: IFFALSE 11200
// RemoveUnit ( un ) ;
11237: LD_VAR 0 2
11241: PPUSH
11242: CALL_OW 64
// end else
11246: GO 11625
// if your_side = 2 then
11248: LD_OWVAR 2
11252: PUSH
11253: LD_INT 2
11255: EQUAL
11256: IFFALSE 11472
// begin CenterNowOnUnits ( player_commander ) ;
11258: LD_EXP 11
11262: PPUSH
11263: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11267: LD_ADDR_VAR 0 4
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_INT 2
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 69
11300: PUSH
11301: LD_EXP 56
11305: DIFF
11306: ST_TO_ADDR
// if speaker then
11307: LD_VAR 0 4
11311: IFFALSE 11463
// begin InGameOn ;
11313: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11317: LD_EXP 56
11321: PPUSH
11322: LD_STRING VSd-1
11324: PPUSH
11325: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 258
11342: PUSH
11343: LD_INT 1
11345: EQUAL
11346: IFFALSE 11366
// Say ( speaker [ 1 ] , VAd-1 ) else
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PPUSH
11357: LD_STRING VAd-1
11359: PPUSH
11360: CALL_OW 88
11364: GO 11382
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11366: LD_VAR 0 4
11370: PUSH
11371: LD_INT 1
11373: ARRAY
11374: PPUSH
11375: LD_STRING VAfd-1
11377: PPUSH
11378: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11382: LD_EXP 56
11386: PPUSH
11387: LD_STRING VSd-2
11389: PPUSH
11390: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11394: LD_VAR 0 4
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 258
11407: PUSH
11408: LD_INT 1
11410: EQUAL
11411: IFFALSE 11431
// Say ( speaker [ 1 ] , VAd-2 ) else
11413: LD_VAR 0 4
11417: PUSH
11418: LD_INT 1
11420: ARRAY
11421: PPUSH
11422: LD_STRING VAd-2
11424: PPUSH
11425: CALL_OW 88
11429: GO 11447
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11431: LD_VAR 0 4
11435: PUSH
11436: LD_INT 1
11438: ARRAY
11439: PPUSH
11440: LD_STRING VAfd-2
11442: PPUSH
11443: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11447: LD_EXP 56
11451: PPUSH
11452: LD_STRING VSd-3
11454: PPUSH
11455: CALL_OW 88
// InGameOff ;
11459: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11463: LD_STRING CVulc5
11465: PPUSH
11466: CALL_OW 337
// end else
11470: GO 11625
// if your_side = 7 then
11472: LD_OWVAR 2
11476: PUSH
11477: LD_INT 7
11479: EQUAL
11480: IFFALSE 11625
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11482: LD_ADDR_VAR 0 4
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_INT 7
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: PUSH
11516: LD_EXP 42
11520: DIFF
11521: ST_TO_ADDR
// if speaker then
11522: LD_VAR 0 4
11526: IFFALSE 11618
// begin CenterNowOnUnits ( al_commander ) ;
11528: LD_EXP 42
11532: PPUSH
11533: CALL_OW 87
// InGameOn ;
11537: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11541: LD_EXP 42
11545: PPUSH
11546: LD_STRING VPd-1
11548: PPUSH
11549: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11553: LD_VAR 0 4
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: CALL_OW 258
11566: IFFALSE 11586
// Say ( speaker [ 1 ] , VPpd-1 ) else
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PPUSH
11577: LD_STRING VPpd-1
11579: PPUSH
11580: CALL_OW 88
11584: GO 11602
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11586: LD_VAR 0 4
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: LD_STRING VPpdf-1
11597: PPUSH
11598: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11602: LD_EXP 42
11606: PPUSH
11607: LD_STRING VPd-2
11609: PPUSH
11610: CALL_OW 88
// InGameOff ;
11614: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11618: LD_STRING CVulc7
11620: PPUSH
11621: CALL_OW 337
// end ; SaveForQuickRestart ;
11625: CALL_OW 22
// end ;
11629: LD_VAR 0 1
11633: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: IFFALSE 11706
11664: GO 11666
11666: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11667: LD_STRING CVulc6
11669: PPUSH
11670: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11674: LD_INT 52500
11676: PUSH
11677: LD_INT 47250
11679: PUSH
11680: LD_INT 42000
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_OWVAR 67
11692: ARRAY
11693: PPUSH
11694: CALL_OW 67
// ru_can_attack := true ;
11698: LD_ADDR_EXP 3
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// end ;
11706: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11707: LD_INT 50
11709: PPUSH
11710: CALL_OW 255
11714: PUSH
11715: LD_INT 1
11717: EQUAL
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: LD_INT 3
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 30
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: OR
11766: IFFALSE 12000
11768: GO 11770
11770: DISABLE
11771: LD_INT 0
11773: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11774: LD_STRING CVulc2
11776: PPUSH
11777: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: PUSH
11815: LD_EXP 24
11819: DIFF
11820: ST_TO_ADDR
// DialogueOn ;
11821: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11825: LD_INT 10
11827: PPUSH
11828: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11832: LD_VAR 0 1
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: CALL_OW 258
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 11869
// Say ( speaker [ 1 ] , VDb-1 ) else
11851: LD_VAR 0 1
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: PPUSH
11860: LD_STRING VDb-1
11862: PPUSH
11863: CALL_OW 88
11867: GO 11885
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11869: LD_VAR 0 1
11873: PUSH
11874: LD_INT 1
11876: ARRAY
11877: PPUSH
11878: LD_STRING VDbf-1
11880: PPUSH
11881: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11885: LD_INT 10
11887: PPUSH
11888: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: CALL_OW 258
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: IFFALSE 11929
// Say ( speaker [ 1 ] , VDb-2 ) else
11911: LD_VAR 0 1
11915: PUSH
11916: LD_INT 1
11918: ARRAY
11919: PPUSH
11920: LD_STRING VDb-2
11922: PPUSH
11923: CALL_OW 88
11927: GO 11945
// Say ( speaker [ 1 ] , VDbf-2 ) ;
11929: LD_VAR 0 1
11933: PUSH
11934: LD_INT 1
11936: ARRAY
11937: PPUSH
11938: LD_STRING VDbf-2
11940: PPUSH
11941: CALL_OW 88
// DWait ( 0 0$01 ) ;
11945: LD_INT 35
11947: PPUSH
11948: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
11952: LD_EXP 24
11956: PPUSH
11957: LD_STRING VDb-com1
11959: PPUSH
11960: CALL_OW 88
// DialogueOff ;
11964: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
11968: LD_INT 44100
11970: PUSH
11971: LD_INT 36750
11973: PUSH
11974: LD_INT 31500
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_OWVAR 67
11986: ARRAY
11987: PPUSH
11988: CALL_OW 67
// ru_can_attack := true ;
11992: LD_ADDR_EXP 3
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// end ;
12000: PPOPN 1
12002: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12003: LD_INT 22
12005: PUSH
12006: LD_INT 7
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 30
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: IFFALSE 12068
12033: GO 12035
12035: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12036: LD_INT 42000
12038: PUSH
12039: LD_INT 34650
12041: PUSH
12042: LD_INT 29400
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_OWVAR 67
12054: ARRAY
12055: PPUSH
12056: CALL_OW 67
// ru_can_attack := true ;
12060: LD_ADDR_EXP 3
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// end ;
12068: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12069: LD_INT 58
12071: PPUSH
12072: CALL_OW 255
12076: PUSH
12077: LD_INT 1
12079: EQUAL
12080: IFFALSE 12287
12082: GO 12084
12084: DISABLE
12085: LD_INT 0
12087: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 25
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// DialogueOn ;
12122: CALL_OW 6
// if speaker then
12126: LD_VAR 0 1
12130: IFFALSE 12185
// if GetSex ( speaker [ 1 ] ) = sex_male then
12132: LD_VAR 0 1
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 258
12145: PUSH
12146: LD_INT 1
12148: EQUAL
12149: IFFALSE 12169
// Say ( speaker [ 1 ] , VDe-1 ) else
12151: LD_VAR 0 1
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: LD_STRING VDe-1
12162: PPUSH
12163: CALL_OW 88
12167: GO 12185
// Say ( speaker [ 1 ] , VDef-1 ) ;
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: LD_STRING VDef-1
12180: PPUSH
12181: CALL_OW 88
// case Query ( SibNote ) of 1 :
12185: LD_STRING SibNote
12187: PPUSH
12188: CALL_OW 97
12192: PUSH
12193: LD_INT 1
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12204
12201: POP
// ; end ;
12202: GO 12205
12204: POP
// if speaker then
12205: LD_VAR 0 1
12209: IFFALSE 12264
// if GetSex ( speaker [ 1 ] ) = sex_male then
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 258
12224: PUSH
12225: LD_INT 1
12227: EQUAL
12228: IFFALSE 12248
// Say ( speaker [ 1 ] , VDe-2 ) else
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_STRING VDe-2
12241: PPUSH
12242: CALL_OW 88
12246: GO 12264
// Say ( speaker [ 1 ] , VDef-2 ) ;
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING VDef-2
12259: PPUSH
12260: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12264: LD_EXP 24
12268: PPUSH
12269: LD_STRING VDc-4
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12280: LD_STRING CVulc3
12282: PPUSH
12283: CALL_OW 337
// end ;
12287: PPOPN 1
12289: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12290: LD_OWVAR 2
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: PUSH
12299: LD_INT 22
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: PUSH
12328: LD_INT 0
12330: GREATER
12331: AND
12332: IFFALSE 12766
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12342: LD_INT 245
12344: PPUSH
12345: LD_INT 1295
12347: PPUSH
12348: CALL_OW 12
12352: PPUSH
12353: CALL_OW 67
// DialogueOn ;
12357: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12361: LD_EXP 27
12365: PPUSH
12366: LD_STRING VDG-1
12368: PPUSH
12369: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12373: LD_EXP 24
12377: PPUSH
12378: LD_STRING VDc-5
12380: PPUSH
12381: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12385: LD_EXP 27
12389: PPUSH
12390: LD_STRING VDG-2
12392: PPUSH
12393: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12397: LD_EXP 24
12401: PPUSH
12402: LD_STRING VDc-6
12404: PPUSH
12405: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12409: LD_EXP 27
12413: PPUSH
12414: LD_STRING VDG-3
12416: PPUSH
12417: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12421: LD_EXP 24
12425: PPUSH
12426: LD_STRING VDc-7
12428: PPUSH
12429: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12433: LD_EXP 27
12437: PPUSH
12438: LD_STRING VDG-4
12440: PPUSH
12441: CALL_OW 94
// DialogueOff ;
12445: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12449: LD_STRING CVulc4
12451: PPUSH
12452: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12456: LD_INT 18900
12458: PUSH
12459: LD_INT 21000
12461: PUSH
12462: LD_INT 23100
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_OWVAR 67
12474: ARRAY
12475: PPUSH
12476: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12480: LD_ADDR_VAR 0 1
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_INT 4
12492: PUSH
12493: LD_INT 5
12495: PUSH
12496: LD_INT 6
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_OWVAR 67
12508: ARRAY
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12755
// begin uc_side := 1 ;
12513: LD_ADDR_OWVAR 20
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// uc_nation := 1 ;
12521: LD_ADDR_OWVAR 21
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12529: LD_INT 0
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_INT 4
12537: PPUSH
12538: CALL_OW 12
12542: PPUSH
12543: LD_EXP 26
12547: PPUSH
12548: CALL_OW 380
// un := CreateHuman ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: CALL_OW 44
12561: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12562: LD_VAR 0 2
12566: PPUSH
12567: LD_INT 2
12569: PPUSH
12570: CALL_OW 233
// if GetClass ( un ) = 3 then
12574: LD_VAR 0 2
12578: PPUSH
12579: CALL_OW 257
12583: PUSH
12584: LD_INT 3
12586: EQUAL
12587: IFFALSE 12738
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12589: LD_ADDR_OWVAR 37
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: MOD
12612: ARRAY
12613: ST_TO_ADDR
// vc_engine := engine_combustion ;
12614: LD_ADDR_OWVAR 39
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// vc_control := control_manual ;
12622: LD_ADDR_OWVAR 38
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12630: LD_ADDR_OWVAR 40
12634: PUSH
12635: LD_INT 9
12637: PUSH
12638: LD_INT 9
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: LD_INT 11
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 4
12658: PPUSH
12659: CALL_OW 12
12663: ARRAY
12664: ST_TO_ADDR
// veh := CreateVehicle ;
12665: LD_ADDR_VAR 0 3
12669: PUSH
12670: CALL_OW 45
12674: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 77
12694: PPUSH
12695: LD_INT 88
12697: PPUSH
12698: CALL_OW 12
12702: PPUSH
12703: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_INT 0
12717: PPUSH
12718: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: CALL_OW 52
// end else
12736: GO 12753
// PlaceUnitArea ( un , start_north , false ) ;
12738: LD_VAR 0 2
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 49
// end ;
12753: GO 12510
12755: POP
12756: POP
// CenterNowOnUnits ( un ) ;
12757: LD_VAR 0 2
12761: PPUSH
12762: CALL_OW 87
// end ;
12766: PPOPN 3
12768: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12769: LD_INT 21
12771: PPUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 70
12788: IFFALSE 13109
12790: GO 12792
12792: DISABLE
12793: LD_INT 0
12795: PPUSH
12796: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12797: LD_ADDR_VAR 0 2
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_OWVAR 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 4
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_EXP 11
12877: DIFF
12878: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12879: LD_ADDR_VAR 0 1
12883: PUSH
12884: LD_VAR 0 2
12888: PPUSH
12889: LD_INT 112
12891: PPUSH
12892: LD_INT 67
12894: PPUSH
12895: CALL_OW 73
12899: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12900: LD_VAR 0 1
12904: PPUSH
12905: CALL_OW 255
12909: PUSH
12910: LD_INT 7
12912: EQUAL
12913: IFFALSE 12956
// if GetSex ( un ) = sex_male then
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 258
12924: PUSH
12925: LD_INT 1
12927: EQUAL
12928: IFFALSE 12944
// Say ( un , VD-find-al ) else
12930: LD_VAR 0 1
12934: PPUSH
12935: LD_STRING VD-find-al
12937: PPUSH
12938: CALL_OW 88
12942: GO 12956
// Say ( un , VD-find-al-f ) ;
12944: LD_VAR 0 1
12948: PPUSH
12949: LD_STRING VD-find-al-f
12951: PPUSH
12952: CALL_OW 88
// if GetSide ( un ) = 2 then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 255
12965: PUSH
12966: LD_INT 2
12968: EQUAL
12969: IFFALSE 13012
// if GetSex ( un ) = sex_male then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 258
12980: PUSH
12981: LD_INT 1
12983: EQUAL
12984: IFFALSE 13000
// Say ( un , VD-find-ar ) else
12986: LD_VAR 0 1
12990: PPUSH
12991: LD_STRING VD-find-ar
12993: PPUSH
12994: CALL_OW 88
12998: GO 13012
// Say ( un , VD-find-ar-f ) ;
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_STRING VD-find-ar-f
13007: PPUSH
13008: CALL_OW 88
// if GetSide ( un ) = 1 then
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 255
13021: PUSH
13022: LD_INT 1
13024: EQUAL
13025: IFFALSE 13092
// begin if GetSex ( un ) = sex_male then
13027: LD_VAR 0 1
13031: PPUSH
13032: CALL_OW 258
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13068
// begin Say ( un , VD-find-us ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_STRING VD-find-us
13049: PPUSH
13050: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13054: LD_VAR 0 1
13058: PPUSH
13059: LD_STRING VD-find-us2
13061: PPUSH
13062: CALL_OW 88
// end else
13066: GO 13092
// begin Say ( un , VD-find-us-f ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_STRING VD-find-us-f
13075: PPUSH
13076: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13080: LD_VAR 0 1
13084: PPUSH
13085: LD_STRING VD-find-us2-f
13087: PPUSH
13088: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13092: LD_INT 10
13094: PPUSH
13095: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13099: LD_INT 112
13101: PPUSH
13102: LD_INT 67
13104: PPUSH
13105: CALL_OW 86
// end ;
13109: PPOPN 2
13111: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13112: LD_EXP 8
13116: IFFALSE 13618
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
// begin if your_side = 1 then
13124: LD_OWVAR 2
13128: PUSH
13129: LD_INT 1
13131: EQUAL
13132: IFFALSE 13313
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 4
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PPUSH
13163: CALL_OW 69
13167: PUSH
13168: LD_EXP 24
13172: DIFF
13173: ST_TO_ADDR
// if not speaker then
13174: LD_VAR 0 1
13178: NOT
13179: IFFALSE 13183
// exit ;
13181: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13183: LD_VAR 0 1
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 258
13196: PUSH
13197: LD_INT 1
13199: EQUAL
13200: IFFALSE 13220
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13202: LD_VAR 0 1
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_STRING VD-us-sci-art-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13236
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_STRING VD-us-fsci-art-1
13231: PPUSH
13232: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13236: LD_EXP 24
13240: PPUSH
13241: LD_STRING VDc-art1
13243: PPUSH
13244: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 258
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13285
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: LD_STRING VD-us-sci-art-2
13278: PPUSH
13279: CALL_OW 88
13283: GO 13301
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13285: LD_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: ARRAY
13293: PPUSH
13294: LD_STRING VD-us-fsci-art-2
13296: PPUSH
13297: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13301: LD_EXP 24
13305: PPUSH
13306: LD_STRING VDc-art2
13308: PPUSH
13309: CALL_OW 88
// end ; if your_side = 2 then
13313: LD_OWVAR 2
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13425
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13323: LD_ADDR_VAR 0 1
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 4
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: PUSH
13357: LD_EXP 56
13361: DIFF
13362: ST_TO_ADDR
// if not speaker then
13363: LD_VAR 0 1
13367: NOT
13368: IFFALSE 13372
// exit ;
13370: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13372: LD_VAR 0 1
13376: PUSH
13377: LD_INT 1
13379: ARRAY
13380: PPUSH
13381: CALL_OW 258
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: IFFALSE 13409
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: LD_STRING VD-ar-sci-art-1
13402: PPUSH
13403: CALL_OW 88
13407: GO 13425
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13409: LD_VAR 0 1
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_STRING VD-ar-fsci-art-1
13420: PPUSH
13421: CALL_OW 88
// end ; if your_side = 7 then
13425: LD_OWVAR 2
13429: PUSH
13430: LD_INT 7
13432: EQUAL
13433: IFFALSE 13618
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 7
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 25
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: LD_EXP 42
13473: DIFF
13474: ST_TO_ADDR
// if speaker then
13475: LD_VAR 0 1
13479: IFFALSE 13611
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: CALL_OW 258
13494: PUSH
13495: LD_INT 1
13497: EQUAL
13498: IFFALSE 13518
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13500: LD_VAR 0 1
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_STRING VD-al-sci-art-1
13511: PPUSH
13512: CALL_OW 88
13516: GO 13534
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13518: LD_VAR 0 1
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: LD_STRING VD-al-fsci-art-1
13529: PPUSH
13530: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13534: LD_EXP 42
13538: PPUSH
13539: LD_STRING VPd-art-1
13541: PPUSH
13542: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13546: LD_VAR 0 1
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: CALL_OW 258
13559: PUSH
13560: LD_INT 1
13562: EQUAL
13563: IFFALSE 13583
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13565: LD_VAR 0 1
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_STRING VD-al-sci-art-2
13576: PPUSH
13577: CALL_OW 88
13581: GO 13599
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_STRING VD-al-fsci-art-2
13594: PPUSH
13595: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13599: LD_EXP 42
13603: PPUSH
13604: LD_STRING VPd-art-2
13606: PPUSH
13607: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13611: LD_STRING CVulc7out
13613: PPUSH
13614: CALL_OW 337
// end ; end ;
13618: PPOPN 1
13620: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
13621: LD_INT 22
13623: PUSH
13624: LD_OWVAR 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 101
13635: PUSH
13636: LD_INT 8
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: IFFALSE 13794
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin if your_side = 1 then
13659: LD_OWVAR 2
13663: PUSH
13664: LD_INT 1
13666: EQUAL
13667: IFFALSE 13750
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13669: LD_ADDR_VAR 0 1
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 69
13688: PUSH
13689: LD_EXP 24
13693: DIFF
13694: ST_TO_ADDR
// if speaker then
13695: LD_VAR 0 1
13699: IFFALSE 13750
// if GetSex ( speaker [ 1 ] ) then
13701: LD_VAR 0 1
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: CALL_OW 258
13714: IFFALSE 13734
// Say ( speaker [ 1 ] , VD-legion-us ) else
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PPUSH
13725: LD_STRING VD-legion-us
13727: PPUSH
13728: CALL_OW 88
13732: GO 13750
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13734: LD_VAR 0 1
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: LD_STRING VD-legion-us-f
13745: PPUSH
13746: CALL_OW 88
// end ; if your_side = 2 then
13750: LD_OWVAR 2
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: IFFALSE 13772
// Say ( ar_commander , VD-legion-ar ) ;
13760: LD_EXP 56
13764: PPUSH
13765: LD_STRING VD-legion-ar
13767: PPUSH
13768: CALL_OW 88
// if your_side = 7 then
13772: LD_OWVAR 2
13776: PUSH
13777: LD_INT 7
13779: EQUAL
13780: IFFALSE 13794
// Say ( al_commander , VD-legion-al ) ;
13782: LD_EXP 42
13786: PPUSH
13787: LD_STRING VD-legion-al
13789: PPUSH
13790: CALL_OW 88
// end ;
13794: PPOPN 1
13796: END
// every 0 0$01 trigger mine_vulc do
13797: LD_EXP 13
13801: IFFALSE 13818
13803: GO 13805
13805: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING VD-vulc-mines
13813: PPUSH
13814: CALL_OW 88
// end ;
13818: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
13819: LD_INT 22
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: PUSH
13834: LD_INT 0
13836: EQUAL
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: LD_INT 2
13845: NONEQUAL
13846: AND
13847: IFFALSE 13856
13849: GO 13851
13851: DISABLE
// Win ;
13852: CALL 13913 0 0
13856: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
13857: LD_INT 2
13859: PUSH
13860: LD_INT 22
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: PUSH
13890: LD_INT 0
13892: EQUAL
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: LD_INT 2
13901: EQUAL
13902: AND
13903: IFFALSE 13912
13905: GO 13907
13907: DISABLE
// Win ;
13908: CALL 13913 0 0
13912: END
// function Win ; var points ; begin
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
// case Query ( VulcWin ) of 1 :
13917: LD_STRING VulcWin
13919: PPUSH
13920: CALL_OW 97
13924: PUSH
13925: LD_INT 1
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13936
13933: POP
// ; end ;
13934: GO 13937
13936: POP
// if medal_enabled then
13937: LD_EXP 14
13941: IFFALSE 13955
// AddMedal ( vulc_1 , 1 ) else
13943: LD_STRING vulc_1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 101
13953: GO 13966
// AddMedal ( vulc_1 , - 1 ) ;
13955: LD_STRING vulc_1
13957: PPUSH
13958: LD_INT 1
13960: NEG
13961: PPUSH
13962: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
13966: LD_INT 22
13968: PUSH
13969: LD_INT 8
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_INT 0
13983: EQUAL
13984: IFFALSE 13998
// AddMedal ( vulc_2 , 1 ) else
13986: LD_STRING vulc_2
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 101
13996: GO 14009
// AddMedal ( vulc_2 , - 1 ) ;
13998: LD_STRING vulc_2
14000: PPUSH
14001: LD_INT 1
14003: NEG
14004: PPUSH
14005: CALL_OW 101
// points := CalculateCommanderPoints ;
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: CALL 1917 0 0
14018: ST_TO_ADDR
// if points >= 2000 then
14019: LD_VAR 0 2
14023: PUSH
14024: LD_INT 2000
14026: GREATEREQUAL
14027: IFFALSE 14041
// AddMedal ( vulc_3 , 2 ) else
14029: LD_STRING vulc_3
14031: PPUSH
14032: LD_INT 2
14034: PPUSH
14035: CALL_OW 101
14039: GO 14074
// if points >= 0 then
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 0
14048: GREATEREQUAL
14049: IFFALSE 14063
// AddMedal ( vulc_3 , 1 ) else
14051: LD_STRING vulc_3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 101
14061: GO 14074
// AddMedal ( vulc_3 , - 1 ) ;
14063: LD_STRING vulc_3
14065: PPUSH
14066: LD_INT 1
14068: NEG
14069: PPUSH
14070: CALL_OW 101
// GiveMedals ( MAIN ) ;
14074: LD_STRING MAIN
14076: PPUSH
14077: CALL_OW 102
// YouWin ;
14081: CALL_OW 103
// end ; end_of_file
14085: LD_VAR 0 1
14089: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
14090: LD_INT 13
14092: PPUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: IFFALSE 14167
14109: GO 14111
14111: DISABLE
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
// begin enable ;
14116: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: LD_INT 13
14124: PPUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 70
14139: PUSH
14140: FOR_IN
14141: IFFALSE 14165
// if GetLives ( i ) then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 256
14152: IFFALSE 14163
// KillUnit ( i ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 66
14163: GO 14140
14165: POP
14166: POP
// end ;
14167: PPOPN 2
14169: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 255
14179: PUSH
14180: LD_OWVAR 2
14184: EQUAL
14185: IFFALSE 14195
// player_res_art := true ;
14187: LD_ADDR_EXP 6
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// end ;
14195: PPOPN 1
14197: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14198: LD_INT 22
14200: PUSH
14201: LD_OWVAR 2
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 7
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 30
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: PUSH
14258: LD_EXP 6
14262: AND
14263: IFFALSE 14620
14265: GO 14267
14267: DISABLE
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
// begin enable ;
14272: ENABLE
// xy := FindArtifact ( 1 ) ;
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 469
14285: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_OWVAR 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 8
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 30
14318: PUSH
14319: LD_INT 7
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 30
14328: PUSH
14329: LD_INT 11
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: PPUSH
14351: LD_VAR 0 1
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: PPUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 2
14367: ARRAY
14368: PPUSH
14369: CALL_OW 73
14373: ST_TO_ADDR
// if player_artifact_ready = false then
14374: LD_EXP 8
14378: PUSH
14379: LD_INT 0
14381: EQUAL
14382: IFFALSE 14496
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: PPUSH
14407: CALL_OW 297
14411: PUSH
14412: LD_INT 6
14414: LESS
14415: IFFALSE 14476
// begin if BuildingStatus ( lab ) = bs_idle then
14417: LD_VAR 0 2
14421: PPUSH
14422: CALL_OW 461
14426: PUSH
14427: LD_INT 2
14429: EQUAL
14430: IFFALSE 14454
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14432: LD_OWVAR 2
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 468
14452: GO 14474
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14454: LD_OWVAR 2
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL_OW 468
// end else
14474: GO 14496
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14476: LD_OWVAR 2
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: LD_INT 1
14486: PPUSH
14487: LD_VAR 0 2
14491: PPUSH
14492: CALL_OW 468
// if player_artifact_ready then
14496: LD_EXP 8
14500: IFFALSE 14620
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 1
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: CALL_OW 297
14529: PUSH
14530: LD_INT 6
14532: LESS
14533: IFFALSE 14598
// begin if BuildingStatus ( lab ) = bs_idle then
14535: LD_VAR 0 2
14539: PPUSH
14540: CALL_OW 461
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: IFFALSE 14574
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
14550: LD_OWVAR 2
14554: PPUSH
14555: LD_EXP 9
14559: PPUSH
14560: LD_INT 4
14562: PPUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: CALL_OW 468
14572: GO 14596
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14574: LD_OWVAR 2
14578: PPUSH
14579: LD_EXP 9
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL_OW 468
// end else
14596: GO 14620
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14598: LD_OWVAR 2
14602: PPUSH
14603: LD_EXP 9
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_VAR 0 2
14615: PPUSH
14616: CALL_OW 468
// end ;
14620: PPOPN 2
14622: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
// begin xy := FindArtifact ( 1 ) ;
14629: LD_ADDR_VAR 0 5
14633: PUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 469
14641: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14642: LD_ADDR_VAR 0 7
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 8
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 30
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: PPUSH
14696: LD_VAR 0 5
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: LD_VAR 0 5
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PPUSH
14714: CALL_OW 73
14718: ST_TO_ADDR
// if icon = art_exp_left then
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 1
14726: EQUAL
14727: IFFALSE 14780
// begin SetSpecResearch ( lab , time_res_art , true ) ;
14729: LD_VAR 0 7
14733: PPUSH
14734: LD_EXP 10
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
14746: LD_VAR 0 7
14750: PPUSH
14751: LD_EXP 7
14755: PPUSH
14756: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
14760: LD_OWVAR 2
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: LD_VAR 0 7
14775: PPUSH
14776: CALL_OW 468
// end ; if icon = art_icon then
14780: LD_VAR 0 2
14784: PUSH
14785: LD_EXP 9
14789: EQUAL
14790: IFFALSE 15001
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
14792: LD_VAR 0 3
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: IN
14812: IFFALSE 15001
// begin side := GetSide ( cr1 ) ;
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: CALL_OW 255
14828: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
14829: LD_INT 22
14831: PUSH
14832: LD_VAR 0 8
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 30
14843: PUSH
14844: LD_INT 28
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 0
14862: GREATER
14863: IFFALSE 15001
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
14865: LD_ADDR_VAR 0 6
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_VAR 0 8
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 26
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 27
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 28
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14944
// KillUnit ( i ) ;
14933: LD_VAR 0 6
14937: PPUSH
14938: CALL_OW 66
14942: GO 14930
14944: POP
14945: POP
// player_res_art := false ;
14946: LD_ADDR_EXP 6
14950: PUSH
14951: LD_INT 0
14953: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14954: LD_OWVAR 2
14958: PPUSH
14959: LD_EXP 9
14963: PPUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_VAR 0 7
14971: PPUSH
14972: CALL_OW 468
// wait ( time_to_reuse ) ;
14976: LD_EXP 12
14980: PPUSH
14981: CALL_OW 67
// player_res_art := true ;
14985: LD_ADDR_EXP 6
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// medal_enabled := true ;
14993: LD_ADDR_EXP 14
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// end ; end ; end ; end ;
15001: PPOPN 8
15003: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 255
15013: PUSH
15014: LD_OWVAR 2
15018: EQUAL
15019: IFFALSE 15056
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15021: LD_OWVAR 2
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: LD_VAR 0 1
15036: PPUSH
15037: CALL_OW 468
// player_artifact_ready := true ;
15041: LD_ADDR_EXP 8
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15049: LD_STRING ArtVulcano
15051: PPUSH
15052: CALL_OW 339
// end ; end ;
15056: PPOPN 1
15058: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15059: LD_ADDR_EXP 7
15063: PUSH
15064: LD_VAR 0 2
15068: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15069: LD_OWVAR 2
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_INT 2
15079: PPUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 468
// end ; end_of_file
15089: PPOPN 2
15091: END
// every 0 0$01 do
15092: GO 15094
15094: DISABLE
// begin enable ;
15095: ENABLE
// Display_Strings := [ #tick , tick ] ;
15096: LD_ADDR_OWVAR 47
15100: PUSH
15101: LD_STRING #tick
15103: PUSH
15104: LD_OWVAR 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: ST_TO_ADDR
// end ; end_of_file
15113: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15114: LD_INT 0
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15121: LD_ADDR_EXP 44
15125: PUSH
15126: LD_INT 7
15128: PUSH
15129: LD_INT 6
15131: PUSH
15132: LD_INT 5
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: LD_OWVAR 67
15144: ARRAY
15145: ST_TO_ADDR
// al_force := [ ] ;
15146: LD_ADDR_EXP 43
15150: PUSH
15151: EMPTY
15152: ST_TO_ADDR
// RemoveAlliance ;
15153: CALL 15531 0 0
// ResetFog ;
15157: CALL_OW 335
// your_side := 7 ;
15161: LD_ADDR_OWVAR 2
15165: PUSH
15166: LD_INT 7
15168: ST_TO_ADDR
// uc_side := 7 ;
15169: LD_ADDR_OWVAR 20
15173: PUSH
15174: LD_INT 7
15176: ST_TO_ADDR
// hc_gallery :=  ;
15177: LD_ADDR_OWVAR 33
15181: PUSH
15182: LD_STRING 
15184: ST_TO_ADDR
// hc_name :=  ;
15185: LD_ADDR_OWVAR 26
15189: PUSH
15190: LD_STRING 
15192: ST_TO_ADDR
// hc_importance := 0 ;
15193: LD_ADDR_OWVAR 32
15197: PUSH
15198: LD_INT 0
15200: ST_TO_ADDR
// for i = 1 to 17 do
15201: LD_ADDR_VAR 0 2
15205: PUSH
15206: DOUBLE
15207: LD_INT 1
15209: DEC
15210: ST_TO_ADDR
15211: LD_INT 17
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15295
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15217: LD_ADDR_OWVAR 21
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: LD_INT 3
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_INT 2
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15244: LD_INT 0
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_INT 4
15252: PPUSH
15253: CALL_OW 12
15257: PPUSH
15258: LD_EXP 44
15262: PPUSH
15263: CALL_OW 380
// un := CreateHuman ;
15267: LD_ADDR_VAR 0 4
15271: PUSH
15272: CALL_OW 44
15276: ST_TO_ADDR
// al_force := al_force ^ un ;
15277: LD_ADDR_EXP 43
15281: PUSH
15282: LD_EXP 43
15286: PUSH
15287: LD_VAR 0 4
15291: ADD
15292: ST_TO_ADDR
// end ;
15293: GO 15214
15295: POP
15296: POP
// hc_importance := 100 ;
15297: LD_ADDR_OWVAR 32
15301: PUSH
15302: LD_INT 100
15304: ST_TO_ADDR
// uc_nation := 1 ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: LD_EXP 44
15323: PPUSH
15324: CALL_OW 380
// al_commander := CreateHuman ;
15328: LD_ADDR_EXP 42
15332: PUSH
15333: CALL_OW 44
15337: ST_TO_ADDR
// player_commander := al_commander ;
15338: LD_ADDR_EXP 11
15342: PUSH
15343: LD_EXP 42
15347: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_STRING text
15355: PPUSH
15356: LD_INT 9
15358: PUSH
15359: LD_INT 9
15361: PUSH
15362: LD_INT 8
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_OWVAR 67
15374: ARRAY
15375: PPUSH
15376: LD_INT 9
15378: PUSH
15379: LD_INT 9
15381: PUSH
15382: LD_INT 8
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_OWVAR 67
15394: ARRAY
15395: PPUSH
15396: LD_INT -5
15398: PUSH
15399: LD_EXP 42
15403: PUSH
15404: LD_INT -3
15406: PUSH
15407: LD_INT -2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_EXP 43
15420: ADD
15421: PPUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 4
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 9
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 42
15466: ST_TO_ADDR
// team := team ^ al_commander ;
15467: LD_ADDR_VAR 0 5
15471: PUSH
15472: LD_VAR 0 5
15476: PUSH
15477: LD_EXP 42
15481: ADD
15482: ST_TO_ADDR
// for i = 1 to team do
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: DOUBLE
15489: LD_INT 1
15491: DEC
15492: ST_TO_ADDR
15493: LD_VAR 0 5
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15524
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15501: LD_VAR 0 5
15505: PUSH
15506: LD_VAR 0 2
15510: ARRAY
15511: PPUSH
15512: LD_INT 15
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: CALL_OW 49
15522: GO 15498
15524: POP
15525: POP
// end ;
15526: LD_VAR 0 1
15530: RET
// export function RemoveAlliance ; var i ; begin
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
15535: LD_INT 22
15537: PUSH
15538: LD_INT 7
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 7
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: PUSH
15592: FOR_IN
15593: IFFALSE 15606
// RemoveUnit ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 64
15604: GO 15592
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
15619: LD_INT 31
15621: PPUSH
15622: LD_INT 7
15624: PPUSH
15625: LD_INT 2
15627: PPUSH
15628: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
15632: LD_INT 32
15634: PPUSH
15635: LD_INT 7
15637: PPUSH
15638: LD_INT 2
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
15645: LD_INT 59
15647: PPUSH
15648: LD_INT 7
15650: PPUSH
15651: LD_INT 2
15653: PPUSH
15654: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
15658: LD_ADDR_EXP 44
15662: PUSH
15663: LD_INT 5
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: LD_INT 7
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: LD_OWVAR 67
15681: ARRAY
15682: ST_TO_ADDR
// al_force := [ ] ;
15683: LD_ADDR_EXP 43
15687: PUSH
15688: EMPTY
15689: ST_TO_ADDR
// al_vehs := [ ] ;
15690: LD_ADDR_EXP 49
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// uc_side := 7 ;
15697: LD_ADDR_OWVAR 20
15701: PUSH
15702: LD_INT 7
15704: ST_TO_ADDR
// uc_nation := 1 ;
15705: LD_ADDR_OWVAR 21
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// bc_type := b_oil_mine ;
15713: LD_ADDR_OWVAR 42
15717: PUSH
15718: LD_INT 29
15720: ST_TO_ADDR
// b := CreateBuilding ;
15721: LD_ADDR_VAR 0 4
15725: PUSH
15726: CALL_OW 46
15730: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_INT 61
15738: PPUSH
15739: LD_INT 7
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: LD_INT 0
15747: PPUSH
15748: CALL_OW 50
// bc_type := b_siberite_mine ;
15752: LD_ADDR_OWVAR 42
15756: PUSH
15757: LD_INT 30
15759: ST_TO_ADDR
// b := CreateBuilding ;
15760: LD_ADDR_VAR 0 4
15764: PUSH
15765: CALL_OW 46
15769: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
15770: LD_VAR 0 4
15774: PPUSH
15775: LD_INT 69
15777: PPUSH
15778: LD_INT 13
15780: PPUSH
15781: LD_INT 0
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 50
// hc_gallery :=  ;
15791: LD_ADDR_OWVAR 33
15795: PUSH
15796: LD_STRING 
15798: ST_TO_ADDR
// hc_name :=  ;
15799: LD_ADDR_OWVAR 26
15803: PUSH
15804: LD_STRING 
15806: ST_TO_ADDR
// hc_importance := 0 ;
15807: LD_ADDR_OWVAR 32
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 30
15832: PUSH
15833: LD_INT 32
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15920
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15852: LD_ADDR_OWVAR 21
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 2
15872: PPUSH
15873: CALL_OW 12
15877: ARRAY
15878: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
15879: LD_INT 0
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: LD_EXP 44
15889: PPUSH
15890: CALL_OW 380
// un := CreateHuman ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: CALL_OW 44
15903: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 52
// end ;
15918: GO 15849
15920: POP
15921: POP
// for i = 1 to 3 do
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_INT 3
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16004
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15938: LD_ADDR_OWVAR 21
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: PPUSH
15956: LD_INT 2
15958: PPUSH
15959: CALL_OW 12
15963: ARRAY
15964: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
15965: LD_INT 0
15967: PPUSH
15968: LD_INT 4
15970: PPUSH
15971: LD_EXP 44
15975: PPUSH
15976: CALL_OW 380
// un := CreateHuman ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: CALL_OW 44
15989: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 164
15997: PPUSH
15998: CALL_OW 52
// end ;
16002: GO 15935
16004: POP
16005: POP
// for i = 1 to 4 do
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_INT 4
16018: PUSH
16019: FOR_TO
16020: IFFALSE 16111
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16022: LD_ADDR_OWVAR 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PPUSH
16040: LD_INT 2
16042: PPUSH
16043: CALL_OW 12
16047: ARRAY
16048: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16049: LD_INT 0
16051: PPUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 9
16057: PUSH
16058: LD_INT 9
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: PPUSH
16069: LD_INT 3
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: PPUSH
16078: LD_EXP 44
16082: PPUSH
16083: CALL_OW 380
// un := CreateHuman ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: CALL_OW 44
16096: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 173
16104: PPUSH
16105: CALL_OW 52
// end ;
16109: GO 16019
16111: POP
16112: POP
// for i = 1 to 4 do
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: DOUBLE
16119: LD_INT 1
16121: DEC
16122: ST_TO_ADDR
16123: LD_INT 4
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16225
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16129: LD_ADDR_OWVAR 21
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_INT 2
16149: PPUSH
16150: CALL_OW 12
16154: ARRAY
16155: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 3
16161: PPUSH
16162: LD_EXP 44
16166: PPUSH
16167: CALL_OW 380
// un := CreateHuman ;
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: CALL_OW 44
16180: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 22
16188: PUSH
16189: LD_INT 7
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 30
16198: PUSH
16199: LD_INT 3
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: CALL_OW 52
// end ;
16223: GO 16126
16225: POP
16226: POP
// for i = 1 to 4 do
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: DOUBLE
16233: LD_INT 1
16235: DEC
16236: ST_TO_ADDR
16237: LD_INT 4
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16309
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16243: LD_ADDR_OWVAR 21
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_INT 2
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16270: LD_INT 0
16272: PPUSH
16273: LD_INT 2
16275: PPUSH
16276: LD_EXP 44
16280: PPUSH
16281: CALL_OW 380
// un := CreateHuman ;
16285: LD_ADDR_VAR 0 3
16289: PUSH
16290: CALL_OW 44
16294: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 162
16302: PPUSH
16303: CALL_OW 52
// end ;
16307: GO 16240
16309: POP
16310: POP
// uc_nation := 3 ;
16311: LD_ADDR_OWVAR 21
16315: PUSH
16316: LD_INT 3
16318: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16319: LD_ADDR_OWVAR 37
16323: PUSH
16324: LD_INT 21
16326: ST_TO_ADDR
// vc_engine := engine_siberite ;
16327: LD_ADDR_OWVAR 39
16331: PUSH
16332: LD_INT 3
16334: ST_TO_ADDR
// vc_control := control_computer ;
16335: LD_ADDR_OWVAR 38
16339: PUSH
16340: LD_INT 3
16342: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16343: LD_ADDR_OWVAR 40
16347: PUSH
16348: LD_INT 51
16350: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16351: CALL_OW 45
16355: PPUSH
16356: LD_INT 49
16358: PPUSH
16359: LD_INT 13
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16369: LD_ADDR_EXP 51
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 30
16386: PUSH
16387: LD_INT 33
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_INT 22
16415: PUSH
16416: LD_INT 7
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 30
16425: PUSH
16426: LD_INT 33
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 35
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16517
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16459: LD_INT 22
16461: PUSH
16462: LD_INT 7
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 33
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 35
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_VAR 0 2
16506: ARRAY
16507: PPUSH
16508: LD_INT 49
16510: PPUSH
16511: CALL_OW 208
16515: GO 16456
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 1
16523: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
16524: LD_OWVAR 2
16528: PUSH
16529: LD_INT 1
16531: EQUAL
16532: IFFALSE 17518
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
// begin enable ;
16543: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
16544: LD_ADDR_EXP 55
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 7
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 3
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
16578: LD_ADDR_EXP 53
16582: PUSH
16583: LD_INT 164
16585: PUSH
16586: LD_INT 197
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
16593: LD_ADDR_EXP 52
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_INT 7
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 30
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
16631: LD_ADDR_EXP 54
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_INT 7
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 69
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
16669: LD_INT 22
16671: PUSH
16672: LD_INT 7
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 34
16681: PUSH
16682: LD_INT 51
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: IFFALSE 16737
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
16699: LD_ADDR_EXP 50
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 7
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 34
16716: PUSH
16717: LD_INT 51
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
16737: LD_ADDR_EXP 46
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_INT 7
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 25
16754: PUSH
16755: LD_INT 9
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PPUSH
16766: CALL_OW 69
16770: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
16771: LD_ADDR_EXP 45
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_INT 7
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 25
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
16805: LD_ADDR_EXP 47
16809: PUSH
16810: LD_INT 22
16812: PUSH
16813: LD_INT 7
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
16839: LD_ADDR_EXP 48
16843: PUSH
16844: LD_INT 22
16846: PUSH
16847: LD_INT 7
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 25
16856: PUSH
16857: LD_INT 4
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PPUSH
16868: CALL_OW 69
16872: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
16873: LD_EXP 50
16877: PPUSH
16878: CALL_OW 314
16882: NOT
16883: PUSH
16884: LD_EXP 50
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 289
16896: PUSH
16897: LD_INT 100
16899: LESS
16900: AND
16901: IFFALSE 16949
// begin cr := GetListOfCratesInArea ( us_crates ) ;
16903: LD_ADDR_VAR 0 4
16907: PUSH
16908: LD_INT 12
16910: PPUSH
16911: CALL_OW 435
16915: ST_TO_ADDR
// if cr then
16916: LD_VAR 0 4
16920: IFFALSE 16949
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
16922: LD_EXP 50
16926: PPUSH
16927: LD_VAR 0 4
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_VAR 0 4
16940: PUSH
16941: LD_INT 2
16943: ARRAY
16944: PPUSH
16945: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
16949: LD_EXP 55
16953: PPUSH
16954: LD_INT 3
16956: PUSH
16957: LD_INT 24
16959: PUSH
16960: LD_INT 1000
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 72
16975: IFFALSE 17105
// begin if al_eng then
16977: LD_EXP 45
16981: IFFALSE 17103
// for i = 1 to al_eng do
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: DOUBLE
16989: LD_INT 1
16991: DEC
16992: ST_TO_ADDR
16993: LD_EXP 45
16997: PUSH
16998: FOR_TO
16999: IFFALSE 17101
// if IsInUnit ( al_eng [ i ] ) then
17001: LD_EXP 45
17005: PUSH
17006: LD_VAR 0 1
17010: ARRAY
17011: PPUSH
17012: CALL_OW 310
17016: IFFALSE 17035
// ComExitBuilding ( al_eng [ i ] ) else
17018: LD_EXP 45
17022: PUSH
17023: LD_VAR 0 1
17027: ARRAY
17028: PPUSH
17029: CALL_OW 122
17033: GO 17099
// if not HasTask ( al_eng [ i ] ) then
17035: LD_EXP 45
17039: PUSH
17040: LD_VAR 0 1
17044: ARRAY
17045: PPUSH
17046: CALL_OW 314
17050: NOT
17051: IFFALSE 17099
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17053: LD_EXP 45
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PPUSH
17064: LD_EXP 55
17068: PPUSH
17069: LD_INT 3
17071: PUSH
17072: LD_INT 24
17074: PUSH
17075: LD_INT 1000
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 72
17090: PUSH
17091: LD_INT 1
17093: ARRAY
17094: PPUSH
17095: CALL_OW 130
17099: GO 16998
17101: POP
17102: POP
// end else
17103: GO 17187
// if al_eng then
17105: LD_EXP 45
17109: IFFALSE 17187
// if not IsInUnit ( al_eng [ 1 ] ) then
17111: LD_EXP 45
17115: PUSH
17116: LD_INT 1
17118: ARRAY
17119: PPUSH
17120: CALL_OW 310
17124: NOT
17125: IFFALSE 17187
// for i = 1 to al_eng do
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 45
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17185
// if not IsInUnit ( al_eng [ i ] ) then
17145: LD_EXP 45
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PPUSH
17156: CALL_OW 310
17160: NOT
17161: IFFALSE 17183
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17163: LD_EXP 45
17167: PUSH
17168: LD_VAR 0 1
17172: ARRAY
17173: PPUSH
17174: LD_EXP 52
17178: PPUSH
17179: CALL_OW 120
17183: GO 17142
17185: POP
17186: POP
// if al_vehs then
17187: LD_EXP 49
17191: IFFALSE 17291
// if BuildingStatus ( al_fac ) = bs_idle then
17193: LD_EXP 54
17197: PPUSH
17198: CALL_OW 461
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: IFFALSE 17291
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17208: LD_EXP 54
17212: PPUSH
17213: LD_EXP 49
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PPUSH
17222: LD_EXP 49
17226: PUSH
17227: LD_INT 2
17229: ARRAY
17230: PPUSH
17231: LD_EXP 49
17235: PUSH
17236: LD_INT 3
17238: ARRAY
17239: PPUSH
17240: LD_EXP 49
17244: PUSH
17245: LD_INT 4
17247: ARRAY
17248: PPUSH
17249: CALL_OW 125
// for i = 1 to 4 do
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: DOUBLE
17259: LD_INT 1
17261: DEC
17262: ST_TO_ADDR
17263: LD_INT 4
17265: PUSH
17266: FOR_TO
17267: IFFALSE 17289
// al_vehs := Delete ( al_vehs , 1 ) ;
17269: LD_ADDR_EXP 49
17273: PUSH
17274: LD_EXP 49
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 3
17286: ST_TO_ADDR
17287: GO 17266
17289: POP
17290: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17291: LD_EXP 43
17295: PUSH
17296: LD_INT 0
17298: EQUAL
17299: PUSH
17300: LD_OWVAR 1
17304: PUSH
17305: LD_INT 23100
17307: MOD
17308: PUSH
17309: LD_INT 0
17311: EQUAL
17312: AND
17313: IFFALSE 17427
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: DOUBLE
17321: LD_INT 1
17323: DEC
17324: ST_TO_ADDR
17325: LD_INT 6
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 8
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PUSH
17339: LD_OWVAR 67
17343: ARRAY
17344: PUSH
17345: FOR_TO
17346: IFFALSE 17425
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17348: LD_ADDR_EXP 49
17352: PUSH
17353: LD_EXP 49
17357: PUSH
17358: LD_INT 23
17360: ADD
17361: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17362: LD_ADDR_EXP 49
17366: PUSH
17367: LD_EXP 49
17371: PUSH
17372: LD_INT 1
17374: ADD
17375: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17376: LD_ADDR_EXP 49
17380: PUSH
17381: LD_EXP 49
17385: PUSH
17386: LD_INT 3
17388: ADD
17389: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17390: LD_ADDR_EXP 49
17394: PUSH
17395: LD_EXP 49
17399: PUSH
17400: LD_INT 46
17402: PUSH
17403: LD_INT 47
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: CALL_OW 12
17420: ARRAY
17421: ADD
17422: ST_TO_ADDR
// end ;
17423: GO 17345
17425: POP
17426: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17427: LD_INT 22
17429: PUSH
17430: LD_INT 7
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 34
17439: PUSH
17440: LD_INT 51
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: PUSH
17456: LD_INT 0
17458: EQUAL
17459: IFFALSE 17482
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17461: LD_EXP 54
17465: PPUSH
17466: LD_INT 21
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 3
17474: PPUSH
17475: LD_INT 51
17477: PPUSH
17478: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
17482: LD_EXP 43
17486: PUSH
17487: LD_INT 6
17489: PUSH
17490: LD_INT 7
17492: PUSH
17493: LD_INT 8
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_OWVAR 67
17505: ARRAY
17506: GREATEREQUAL
17507: IFFALSE 17518
// RaiseSailEvent ( event_alliance_attack ) ;
17509: LD_EXP 23
17513: PPUSH
17514: CALL_OW 427
// end ;
17518: PPOPN 4
17520: END
// export function AllianceAttack ( ) ; var path , units ; begin
17521: LD_INT 0
17523: PPUSH
17524: PPUSH
17525: PPUSH
// units := al_force ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_EXP 43
17535: ST_TO_ADDR
// al_force := [ ] ;
17536: LD_ADDR_EXP 43
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// if rand ( 0 , 1 ) then
17543: LD_INT 0
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 12
17553: IFFALSE 17597
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_INT 49
17562: PUSH
17563: LD_INT 53
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 52
17572: PUSH
17573: LD_INT 90
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 63
17582: PUSH
17583: LD_INT 114
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: ST_TO_ADDR
17595: GO 17626
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 89
17604: PUSH
17605: LD_INT 52
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 143
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17626: LD_INT 35
17628: PPUSH
17629: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL 76782 0 2
17647: NOT
17648: IFFALSE 17626
// end ; end_of_file
17650: LD_VAR 0 1
17654: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
17662: LD_ADDR_EXP 58
17666: PUSH
17667: LD_INT 9
17669: PUSH
17670: LD_INT 8
17672: PUSH
17673: LD_INT 7
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_OWVAR 67
17685: ARRAY
17686: ST_TO_ADDR
// ar_force := [ ] ;
17687: LD_ADDR_EXP 57
17691: PUSH
17692: EMPTY
17693: ST_TO_ADDR
// RemoveAlliance ;
17694: CALL 15531 0 0
// RemoveEnvironmentArea ( evn ) ;
17698: LD_INT 17
17700: PPUSH
17701: CALL_OW 355
// your_side := 2 ;
17705: LD_ADDR_OWVAR 2
17709: PUSH
17710: LD_INT 2
17712: ST_TO_ADDR
// uc_side := 2 ;
17713: LD_ADDR_OWVAR 20
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// uc_nation := nation_arabian ;
17721: LD_ADDR_OWVAR 21
17725: PUSH
17726: LD_INT 2
17728: ST_TO_ADDR
// hc_gallery :=  ;
17729: LD_ADDR_OWVAR 33
17733: PUSH
17734: LD_STRING 
17736: ST_TO_ADDR
// hc_name :=  ;
17737: LD_ADDR_OWVAR 26
17741: PUSH
17742: LD_STRING 
17744: ST_TO_ADDR
// hc_importance := 0 ;
17745: LD_ADDR_OWVAR 32
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// for i = 1 to 20 do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: DOUBLE
17759: LD_INT 1
17761: DEC
17762: ST_TO_ADDR
17763: LD_INT 20
17765: PUSH
17766: FOR_TO
17767: IFFALSE 17832
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
17769: LD_INT 0
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 4
17777: PPUSH
17778: CALL_OW 12
17782: PPUSH
17783: LD_EXP 58
17787: PPUSH
17788: CALL_OW 380
// un := CreateHuman ;
17792: LD_ADDR_VAR 0 4
17796: PUSH
17797: CALL_OW 44
17801: ST_TO_ADDR
// SetDir ( un , 2 ) ;
17802: LD_VAR 0 4
17806: PPUSH
17807: LD_INT 2
17809: PPUSH
17810: CALL_OW 233
// ar_force := ar_force ^ un ;
17814: LD_ADDR_EXP 57
17818: PUSH
17819: LD_EXP 57
17823: PUSH
17824: LD_VAR 0 4
17828: ADD
17829: ST_TO_ADDR
// end ;
17830: GO 17766
17832: POP
17833: POP
// hc_importance := 100 ;
17834: LD_ADDR_OWVAR 32
17838: PUSH
17839: LD_INT 100
17841: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 11
17847: PPUSH
17848: LD_EXP 58
17852: PPUSH
17853: CALL_OW 380
// ar_commander := CreateHuman ;
17857: LD_ADDR_EXP 56
17861: PUSH
17862: CALL_OW 44
17866: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
17867: LD_EXP 56
17871: PPUSH
17872: LD_INT 2
17874: PPUSH
17875: CALL_OW 233
// player_commander := ar_commander ;
17879: LD_ADDR_EXP 11
17883: PUSH
17884: LD_EXP 56
17888: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
17889: LD_ADDR_VAR 0 5
17893: PUSH
17894: LD_STRING text
17896: PPUSH
17897: LD_INT 14
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: LD_INT 12
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: LD_OWVAR 67
17915: ARRAY
17916: PPUSH
17917: LD_INT 14
17919: PUSH
17920: LD_INT 13
17922: PUSH
17923: LD_INT 12
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: LD_OWVAR 67
17935: ARRAY
17936: PPUSH
17937: LD_INT -6
17939: PUSH
17940: LD_EXP 56
17944: PUSH
17945: LD_INT -2
17947: PUSH
17948: LD_INT -3
17950: PUSH
17951: LD_INT -5
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: LD_EXP 57
17965: ADD
17966: PPUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 4
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 8
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 42
18007: ST_TO_ADDR
// team := team ^ ar_commander ;
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: LD_VAR 0 5
18017: PUSH
18018: LD_EXP 56
18022: ADD
18023: ST_TO_ADDR
// for i = 1 to 4 do
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_INT 4
18036: PUSH
18037: FOR_TO
18038: IFFALSE 18140
// begin vc_chassis := ar_medium_trike ;
18040: LD_ADDR_OWVAR 37
18044: PUSH
18045: LD_INT 13
18047: ST_TO_ADDR
// vc_engine := engine_siberite ;
18048: LD_ADDR_OWVAR 39
18052: PUSH
18053: LD_INT 3
18055: ST_TO_ADDR
// vc_control := control_manual ;
18056: LD_ADDR_OWVAR 38
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
18064: LD_ADDR_OWVAR 40
18068: PUSH
18069: LD_INT 27
18071: PUSH
18072: LD_INT 32
18074: PUSH
18075: LD_EXP 65
18079: PUSH
18080: LD_INT 27
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: LD_VAR 0 2
18093: ARRAY
18094: ST_TO_ADDR
// un := CreateVehicle ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: CALL_OW 45
18104: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18105: LD_VAR 0 4
18109: PPUSH
18110: LD_INT 2
18112: PPUSH
18113: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
18117: LD_VAR 0 4
18121: PPUSH
18122: LD_INT 54
18124: PPUSH
18125: LD_INT 15
18127: PPUSH
18128: LD_INT 6
18130: PPUSH
18131: LD_INT 0
18133: PPUSH
18134: CALL_OW 50
// end ;
18138: GO 18037
18140: POP
18141: POP
// for i = 1 to team do
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: DOUBLE
18148: LD_INT 1
18150: DEC
18151: ST_TO_ADDR
18152: LD_VAR 0 5
18156: PUSH
18157: FOR_TO
18158: IFFALSE 18255
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
18160: LD_INT 22
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 58
18172: PUSH
18173: EMPTY
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: IFFALSE 18232
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
18186: LD_VAR 0 5
18190: PUSH
18191: LD_VAR 0 2
18195: ARRAY
18196: PPUSH
18197: LD_INT 22
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 58
18209: PUSH
18210: EMPTY
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PPUSH
18217: CALL_OW 69
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PPUSH
18226: CALL_OW 52
18230: GO 18253
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18232: LD_VAR 0 5
18236: PUSH
18237: LD_VAR 0 2
18241: ARRAY
18242: PPUSH
18243: LD_INT 16
18245: PPUSH
18246: LD_INT 0
18248: PPUSH
18249: CALL_OW 49
// end ;
18253: GO 18157
18255: POP
18256: POP
// uc_side := 0 ;
18257: LD_ADDR_OWVAR 20
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// uc_nation := 0 ;
18265: LD_ADDR_OWVAR 21
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// vc_chassis := 31 ;
18273: LD_ADDR_OWVAR 37
18277: PUSH
18278: LD_INT 31
18280: ST_TO_ADDR
// vc_control := control_rider ;
18281: LD_ADDR_OWVAR 38
18285: PUSH
18286: LD_INT 4
18288: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18289: CALL_OW 45
18293: PPUSH
18294: LD_INT 96
18296: PPUSH
18297: LD_INT 20
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 48
// end ; end_of_file
18307: LD_VAR 0 1
18311: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18312: LD_INT 0
18314: PPUSH
// ar_miner := 81 ;
18315: LD_ADDR_EXP 66
18319: PUSH
18320: LD_INT 81
18322: ST_TO_ADDR
// ar_crane := 88 ;
18323: LD_ADDR_EXP 65
18327: PUSH
18328: LD_INT 88
18330: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18331: LD_ADDR_EXP 60
18335: PUSH
18336: LD_INT 89
18338: ST_TO_ADDR
// us_hack := 99 ;
18339: LD_ADDR_EXP 61
18343: PUSH
18344: LD_INT 99
18346: ST_TO_ADDR
// us_artillery := 97 ;
18347: LD_ADDR_EXP 62
18351: PUSH
18352: LD_INT 97
18354: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18355: LD_ADDR_EXP 63
18359: PUSH
18360: LD_INT 91
18362: ST_TO_ADDR
// ar_mortar := 92 ;
18363: LD_ADDR_EXP 64
18367: PUSH
18368: LD_INT 92
18370: ST_TO_ADDR
// ru_radar := 98 ;
18371: LD_ADDR_EXP 59
18375: PUSH
18376: LD_INT 98
18378: ST_TO_ADDR
// tech_Artillery := 80 ;
18379: LD_ADDR_EXP 67
18383: PUSH
18384: LD_INT 80
18386: ST_TO_ADDR
// tech_RadMat := 81 ;
18387: LD_ADDR_EXP 68
18391: PUSH
18392: LD_INT 81
18394: ST_TO_ADDR
// tech_BasicTools := 82 ;
18395: LD_ADDR_EXP 69
18399: PUSH
18400: LD_INT 82
18402: ST_TO_ADDR
// tech_Cargo := 83 ;
18403: LD_ADDR_EXP 70
18407: PUSH
18408: LD_INT 83
18410: ST_TO_ADDR
// tech_Track := 84 ;
18411: LD_ADDR_EXP 71
18415: PUSH
18416: LD_INT 84
18418: ST_TO_ADDR
// tech_Crane := 85 ;
18419: LD_ADDR_EXP 72
18423: PUSH
18424: LD_INT 85
18426: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18427: LD_ADDR_EXP 73
18431: PUSH
18432: LD_INT 86
18434: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18435: LD_ADDR_EXP 74
18439: PUSH
18440: LD_INT 87
18442: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18443: LD_ADDR_EXP 75
18447: PUSH
18448: LD_INT 88
18450: ST_TO_ADDR
// class_mastodont := 31 ;
18451: LD_ADDR_EXP 76
18455: PUSH
18456: LD_INT 31
18458: ST_TO_ADDR
// class_horse := 21 ;
18459: LD_ADDR_EXP 77
18463: PUSH
18464: LD_INT 21
18466: ST_TO_ADDR
// end ;
18467: LD_VAR 0 1
18471: RET
// every 1 do
18472: GO 18474
18474: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18475: CALL 18312 0 0
18479: END
// every 0 0$1 do
18480: GO 18482
18482: DISABLE
// begin enable ;
18483: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18484: LD_STRING updateTimer(
18486: PUSH
18487: LD_OWVAR 1
18491: STR
18492: PUSH
18493: LD_STRING );
18495: STR
18496: PPUSH
18497: CALL_OW 559
// end ;
18501: END
// on MapStart ( p ) do begin if streamModeActive then
18502: LD_EXP 78
18506: IFFALSE 18515
// DefineStreamItems ( true ) ;
18508: LD_INT 1
18510: PPUSH
18511: CALL 20163 0 1
// UpdateFactoryWaypoints ( ) ;
18515: CALL 33747 0 0
// end ;
18519: PPOPN 1
18521: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18522: LD_INT 0
18524: PPUSH
// if p2 = 100 then
18525: LD_VAR 0 2
18529: PUSH
18530: LD_INT 100
18532: EQUAL
18533: IFFALSE 19536
// begin if not StreamModeActive then
18535: LD_EXP 78
18539: NOT
18540: IFFALSE 18550
// StreamModeActive := true ;
18542: LD_ADDR_EXP 78
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// if p3 = 0 then
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 0
18557: EQUAL
18558: IFFALSE 18564
// InitStreamMode ;
18560: CALL 19699 0 0
// if p3 = 1 then
18564: LD_VAR 0 3
18568: PUSH
18569: LD_INT 1
18571: EQUAL
18572: IFFALSE 18582
// sRocket := true ;
18574: LD_ADDR_EXP 83
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
// if p3 = 2 then
18582: LD_VAR 0 3
18586: PUSH
18587: LD_INT 2
18589: EQUAL
18590: IFFALSE 18600
// sSpeed := true ;
18592: LD_ADDR_EXP 82
18596: PUSH
18597: LD_INT 1
18599: ST_TO_ADDR
// if p3 = 3 then
18600: LD_VAR 0 3
18604: PUSH
18605: LD_INT 3
18607: EQUAL
18608: IFFALSE 18618
// sEngine := true ;
18610: LD_ADDR_EXP 84
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// if p3 = 4 then
18618: LD_VAR 0 3
18622: PUSH
18623: LD_INT 4
18625: EQUAL
18626: IFFALSE 18636
// sSpec := true ;
18628: LD_ADDR_EXP 81
18632: PUSH
18633: LD_INT 1
18635: ST_TO_ADDR
// if p3 = 5 then
18636: LD_VAR 0 3
18640: PUSH
18641: LD_INT 5
18643: EQUAL
18644: IFFALSE 18654
// sLevel := true ;
18646: LD_ADDR_EXP 85
18650: PUSH
18651: LD_INT 1
18653: ST_TO_ADDR
// if p3 = 6 then
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 6
18661: EQUAL
18662: IFFALSE 18672
// sArmoury := true ;
18664: LD_ADDR_EXP 86
18668: PUSH
18669: LD_INT 1
18671: ST_TO_ADDR
// if p3 = 7 then
18672: LD_VAR 0 3
18676: PUSH
18677: LD_INT 7
18679: EQUAL
18680: IFFALSE 18690
// sRadar := true ;
18682: LD_ADDR_EXP 87
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// if p3 = 8 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 8
18697: EQUAL
18698: IFFALSE 18708
// sBunker := true ;
18700: LD_ADDR_EXP 88
18704: PUSH
18705: LD_INT 1
18707: ST_TO_ADDR
// if p3 = 9 then
18708: LD_VAR 0 3
18712: PUSH
18713: LD_INT 9
18715: EQUAL
18716: IFFALSE 18726
// sHack := true ;
18718: LD_ADDR_EXP 89
18722: PUSH
18723: LD_INT 1
18725: ST_TO_ADDR
// if p3 = 10 then
18726: LD_VAR 0 3
18730: PUSH
18731: LD_INT 10
18733: EQUAL
18734: IFFALSE 18744
// sFire := true ;
18736: LD_ADDR_EXP 90
18740: PUSH
18741: LD_INT 1
18743: ST_TO_ADDR
// if p3 = 11 then
18744: LD_VAR 0 3
18748: PUSH
18749: LD_INT 11
18751: EQUAL
18752: IFFALSE 18762
// sRefresh := true ;
18754: LD_ADDR_EXP 91
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if p3 = 12 then
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 12
18769: EQUAL
18770: IFFALSE 18780
// sExp := true ;
18772: LD_ADDR_EXP 92
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// if p3 = 13 then
18780: LD_VAR 0 3
18784: PUSH
18785: LD_INT 13
18787: EQUAL
18788: IFFALSE 18798
// sDepot := true ;
18790: LD_ADDR_EXP 93
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// if p3 = 14 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_INT 14
18805: EQUAL
18806: IFFALSE 18816
// sFlag := true ;
18808: LD_ADDR_EXP 94
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// if p3 = 15 then
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 15
18823: EQUAL
18824: IFFALSE 18834
// sKamikadze := true ;
18826: LD_ADDR_EXP 102
18830: PUSH
18831: LD_INT 1
18833: ST_TO_ADDR
// if p3 = 16 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 16
18841: EQUAL
18842: IFFALSE 18852
// sTroll := true ;
18844: LD_ADDR_EXP 103
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 17 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 17
18859: EQUAL
18860: IFFALSE 18870
// sSlow := true ;
18862: LD_ADDR_EXP 104
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// if p3 = 18 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 18
18877: EQUAL
18878: IFFALSE 18888
// sLack := true ;
18880: LD_ADDR_EXP 105
18884: PUSH
18885: LD_INT 1
18887: ST_TO_ADDR
// if p3 = 19 then
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 19
18895: EQUAL
18896: IFFALSE 18906
// sTank := true ;
18898: LD_ADDR_EXP 107
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// if p3 = 20 then
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 20
18913: EQUAL
18914: IFFALSE 18924
// sRemote := true ;
18916: LD_ADDR_EXP 108
18920: PUSH
18921: LD_INT 1
18923: ST_TO_ADDR
// if p3 = 21 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 21
18931: EQUAL
18932: IFFALSE 18942
// sPowell := true ;
18934: LD_ADDR_EXP 109
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// if p3 = 22 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 22
18949: EQUAL
18950: IFFALSE 18960
// sTeleport := true ;
18952: LD_ADDR_EXP 112
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 23 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 23
18967: EQUAL
18968: IFFALSE 18978
// sOilTower := true ;
18970: LD_ADDR_EXP 114
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 24 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 24
18985: EQUAL
18986: IFFALSE 18996
// sShovel := true ;
18988: LD_ADDR_EXP 115
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 25 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 25
19003: EQUAL
19004: IFFALSE 19014
// sSheik := true ;
19006: LD_ADDR_EXP 116
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 26 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 26
19021: EQUAL
19022: IFFALSE 19032
// sEarthquake := true ;
19024: LD_ADDR_EXP 118
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 27 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 27
19039: EQUAL
19040: IFFALSE 19050
// sAI := true ;
19042: LD_ADDR_EXP 119
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 28 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 28
19057: EQUAL
19058: IFFALSE 19068
// sCargo := true ;
19060: LD_ADDR_EXP 122
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 29 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 29
19075: EQUAL
19076: IFFALSE 19086
// sDLaser := true ;
19078: LD_ADDR_EXP 123
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 30 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 30
19093: EQUAL
19094: IFFALSE 19104
// sExchange := true ;
19096: LD_ADDR_EXP 124
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 31 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 31
19111: EQUAL
19112: IFFALSE 19122
// sFac := true ;
19114: LD_ADDR_EXP 125
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 32 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 32
19129: EQUAL
19130: IFFALSE 19140
// sPower := true ;
19132: LD_ADDR_EXP 126
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 33 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 33
19147: EQUAL
19148: IFFALSE 19158
// sRandom := true ;
19150: LD_ADDR_EXP 127
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 34 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 34
19165: EQUAL
19166: IFFALSE 19176
// sShield := true ;
19168: LD_ADDR_EXP 128
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 35 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 35
19183: EQUAL
19184: IFFALSE 19194
// sTime := true ;
19186: LD_ADDR_EXP 129
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 36 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 36
19201: EQUAL
19202: IFFALSE 19212
// sTools := true ;
19204: LD_ADDR_EXP 130
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 101 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 101
19219: EQUAL
19220: IFFALSE 19230
// sSold := true ;
19222: LD_ADDR_EXP 95
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 102 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 102
19237: EQUAL
19238: IFFALSE 19248
// sDiff := true ;
19240: LD_ADDR_EXP 96
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 103 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 103
19255: EQUAL
19256: IFFALSE 19266
// sFog := true ;
19258: LD_ADDR_EXP 99
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 104 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 104
19273: EQUAL
19274: IFFALSE 19284
// sReset := true ;
19276: LD_ADDR_EXP 100
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 105 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 105
19291: EQUAL
19292: IFFALSE 19302
// sSun := true ;
19294: LD_ADDR_EXP 101
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 106 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 106
19309: EQUAL
19310: IFFALSE 19320
// sTiger := true ;
19312: LD_ADDR_EXP 97
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 107 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 107
19327: EQUAL
19328: IFFALSE 19338
// sBomb := true ;
19330: LD_ADDR_EXP 98
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 108 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 108
19345: EQUAL
19346: IFFALSE 19356
// sWound := true ;
19348: LD_ADDR_EXP 106
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 109 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 109
19363: EQUAL
19364: IFFALSE 19374
// sBetray := true ;
19366: LD_ADDR_EXP 110
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 110 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 110
19381: EQUAL
19382: IFFALSE 19392
// sContamin := true ;
19384: LD_ADDR_EXP 111
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 111 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 111
19399: EQUAL
19400: IFFALSE 19410
// sOil := true ;
19402: LD_ADDR_EXP 113
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 112 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 112
19417: EQUAL
19418: IFFALSE 19428
// sStu := true ;
19420: LD_ADDR_EXP 117
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 113 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 113
19435: EQUAL
19436: IFFALSE 19446
// sBazooka := true ;
19438: LD_ADDR_EXP 120
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 114 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 114
19453: EQUAL
19454: IFFALSE 19464
// sMortar := true ;
19456: LD_ADDR_EXP 121
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 115 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 115
19471: EQUAL
19472: IFFALSE 19482
// sRanger := true ;
19474: LD_ADDR_EXP 131
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 116 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 116
19489: EQUAL
19490: IFFALSE 19500
// sComputer := true ;
19492: LD_ADDR_EXP 132
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 117 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 117
19507: EQUAL
19508: IFFALSE 19518
// s30 := true ;
19510: LD_ADDR_EXP 133
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 118 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 118
19525: EQUAL
19526: IFFALSE 19536
// s60 := true ;
19528: LD_ADDR_EXP 134
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// end ; if p2 = 101 then
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 101
19543: EQUAL
19544: IFFALSE 19672
// begin case p3 of 1 :
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 1
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19566
19559: POP
// hHackUnlimitedResources ; 2 :
19560: CALL 31770 0 0
19564: GO 19672
19566: LD_INT 2
19568: DOUBLE
19569: EQUAL
19570: IFTRUE 19574
19572: GO 19581
19574: POP
// hHackSetLevel10 ; 3 :
19575: CALL 31903 0 0
19579: GO 19672
19581: LD_INT 3
19583: DOUBLE
19584: EQUAL
19585: IFTRUE 19589
19587: GO 19596
19589: POP
// hHackSetLevel10YourUnits ; 4 :
19590: CALL 31988 0 0
19594: GO 19672
19596: LD_INT 4
19598: DOUBLE
19599: EQUAL
19600: IFTRUE 19604
19602: GO 19611
19604: POP
// hHackInvincible ; 5 :
19605: CALL 32436 0 0
19609: GO 19672
19611: LD_INT 5
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19626
19619: POP
// hHackInvisible ; 6 :
19620: CALL 32547 0 0
19624: GO 19672
19626: LD_INT 6
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19641
19634: POP
// hHackChangeYourSide ; 7 :
19635: CALL 32604 0 0
19639: GO 19672
19641: LD_INT 7
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19656
19649: POP
// hHackChangeUnitSide ; 8 :
19650: CALL 32646 0 0
19654: GO 19672
19656: LD_INT 8
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19671
19664: POP
// hHackFog ; end ;
19665: CALL 32747 0 0
19669: GO 19672
19671: POP
// end ; end ;
19672: LD_VAR 0 7
19676: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19677: GO 19679
19679: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19680: LD_STRING initStreamRollete();
19682: PPUSH
19683: CALL_OW 559
// InitStreamMode ;
19687: CALL 19699 0 0
// DefineStreamItems ( false ) ;
19691: LD_INT 0
19693: PPUSH
19694: CALL 20163 0 1
// end ;
19698: END
// function InitStreamMode ; begin
19699: LD_INT 0
19701: PPUSH
// streamModeActive := false ;
19702: LD_ADDR_EXP 78
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// normalCounter := 36 ;
19710: LD_ADDR_EXP 79
19714: PUSH
19715: LD_INT 36
19717: ST_TO_ADDR
// hardcoreCounter := 18 ;
19718: LD_ADDR_EXP 80
19722: PUSH
19723: LD_INT 18
19725: ST_TO_ADDR
// sRocket := false ;
19726: LD_ADDR_EXP 83
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// sSpeed := false ;
19734: LD_ADDR_EXP 82
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// sEngine := false ;
19742: LD_ADDR_EXP 84
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// sSpec := false ;
19750: LD_ADDR_EXP 81
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// sLevel := false ;
19758: LD_ADDR_EXP 85
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// sArmoury := false ;
19766: LD_ADDR_EXP 86
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// sRadar := false ;
19774: LD_ADDR_EXP 87
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// sBunker := false ;
19782: LD_ADDR_EXP 88
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// sHack := false ;
19790: LD_ADDR_EXP 89
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// sFire := false ;
19798: LD_ADDR_EXP 90
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// sRefresh := false ;
19806: LD_ADDR_EXP 91
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// sExp := false ;
19814: LD_ADDR_EXP 92
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// sDepot := false ;
19822: LD_ADDR_EXP 93
19826: PUSH
19827: LD_INT 0
19829: ST_TO_ADDR
// sFlag := false ;
19830: LD_ADDR_EXP 94
19834: PUSH
19835: LD_INT 0
19837: ST_TO_ADDR
// sKamikadze := false ;
19838: LD_ADDR_EXP 102
19842: PUSH
19843: LD_INT 0
19845: ST_TO_ADDR
// sTroll := false ;
19846: LD_ADDR_EXP 103
19850: PUSH
19851: LD_INT 0
19853: ST_TO_ADDR
// sSlow := false ;
19854: LD_ADDR_EXP 104
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// sLack := false ;
19862: LD_ADDR_EXP 105
19866: PUSH
19867: LD_INT 0
19869: ST_TO_ADDR
// sTank := false ;
19870: LD_ADDR_EXP 107
19874: PUSH
19875: LD_INT 0
19877: ST_TO_ADDR
// sRemote := false ;
19878: LD_ADDR_EXP 108
19882: PUSH
19883: LD_INT 0
19885: ST_TO_ADDR
// sPowell := false ;
19886: LD_ADDR_EXP 109
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// sTeleport := false ;
19894: LD_ADDR_EXP 112
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// sOilTower := false ;
19902: LD_ADDR_EXP 114
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// sShovel := false ;
19910: LD_ADDR_EXP 115
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// sSheik := false ;
19918: LD_ADDR_EXP 116
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sEarthquake := false ;
19926: LD_ADDR_EXP 118
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sAI := false ;
19934: LD_ADDR_EXP 119
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sCargo := false ;
19942: LD_ADDR_EXP 122
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sDLaser := false ;
19950: LD_ADDR_EXP 123
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sExchange := false ;
19958: LD_ADDR_EXP 124
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sFac := false ;
19966: LD_ADDR_EXP 125
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sPower := false ;
19974: LD_ADDR_EXP 126
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sRandom := false ;
19982: LD_ADDR_EXP 127
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sShield := false ;
19990: LD_ADDR_EXP 128
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sTime := false ;
19998: LD_ADDR_EXP 129
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sTools := false ;
20006: LD_ADDR_EXP 130
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sSold := false ;
20014: LD_ADDR_EXP 95
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sDiff := false ;
20022: LD_ADDR_EXP 96
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sFog := false ;
20030: LD_ADDR_EXP 99
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sReset := false ;
20038: LD_ADDR_EXP 100
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sSun := false ;
20046: LD_ADDR_EXP 101
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sTiger := false ;
20054: LD_ADDR_EXP 97
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sBomb := false ;
20062: LD_ADDR_EXP 98
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sWound := false ;
20070: LD_ADDR_EXP 106
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sBetray := false ;
20078: LD_ADDR_EXP 110
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sContamin := false ;
20086: LD_ADDR_EXP 111
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sOil := false ;
20094: LD_ADDR_EXP 113
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sStu := false ;
20102: LD_ADDR_EXP 117
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sBazooka := false ;
20110: LD_ADDR_EXP 120
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sMortar := false ;
20118: LD_ADDR_EXP 121
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sRanger := false ;
20126: LD_ADDR_EXP 131
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sComputer := false ;
20134: LD_ADDR_EXP 132
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// s30 := false ;
20142: LD_ADDR_EXP 133
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// s60 := false ;
20150: LD_ADDR_EXP 134
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// end ;
20158: LD_VAR 0 1
20162: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20163: LD_INT 0
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
// result := [ ] ;
20172: LD_ADDR_VAR 0 2
20176: PUSH
20177: EMPTY
20178: ST_TO_ADDR
// if campaign_id = 1 then
20179: LD_OWVAR 69
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 23353
// begin case mission_number of 1 :
20189: LD_OWVAR 70
20193: PUSH
20194: LD_INT 1
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20278
20202: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20203: LD_ADDR_VAR 0 2
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: LD_INT 11
20216: PUSH
20217: LD_INT 12
20219: PUSH
20220: LD_INT 15
20222: PUSH
20223: LD_INT 16
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_INT 23
20231: PUSH
20232: LD_INT 26
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 101
20248: PUSH
20249: LD_INT 102
20251: PUSH
20252: LD_INT 106
20254: PUSH
20255: LD_INT 116
20257: PUSH
20258: LD_INT 117
20260: PUSH
20261: LD_INT 118
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: ST_TO_ADDR
20276: GO 23351
20278: LD_INT 2
20280: DOUBLE
20281: EQUAL
20282: IFTRUE 20286
20284: GO 20370
20286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20287: LD_ADDR_VAR 0 2
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 4
20297: PUSH
20298: LD_INT 11
20300: PUSH
20301: LD_INT 12
20303: PUSH
20304: LD_INT 15
20306: PUSH
20307: LD_INT 16
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_INT 23
20315: PUSH
20316: LD_INT 26
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 101
20332: PUSH
20333: LD_INT 102
20335: PUSH
20336: LD_INT 105
20338: PUSH
20339: LD_INT 106
20341: PUSH
20342: LD_INT 108
20344: PUSH
20345: LD_INT 116
20347: PUSH
20348: LD_INT 117
20350: PUSH
20351: LD_INT 118
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: ST_TO_ADDR
20368: GO 23351
20370: LD_INT 3
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20466
20378: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20379: LD_ADDR_VAR 0 2
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: LD_INT 4
20389: PUSH
20390: LD_INT 5
20392: PUSH
20393: LD_INT 11
20395: PUSH
20396: LD_INT 12
20398: PUSH
20399: LD_INT 15
20401: PUSH
20402: LD_INT 16
20404: PUSH
20405: LD_INT 22
20407: PUSH
20408: LD_INT 26
20410: PUSH
20411: LD_INT 36
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 101
20428: PUSH
20429: LD_INT 102
20431: PUSH
20432: LD_INT 105
20434: PUSH
20435: LD_INT 106
20437: PUSH
20438: LD_INT 108
20440: PUSH
20441: LD_INT 116
20443: PUSH
20444: LD_INT 117
20446: PUSH
20447: LD_INT 118
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: ST_TO_ADDR
20464: GO 23351
20466: LD_INT 4
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20570
20474: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20475: LD_ADDR_VAR 0 2
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: LD_INT 8
20491: PUSH
20492: LD_INT 11
20494: PUSH
20495: LD_INT 12
20497: PUSH
20498: LD_INT 15
20500: PUSH
20501: LD_INT 16
20503: PUSH
20504: LD_INT 22
20506: PUSH
20507: LD_INT 23
20509: PUSH
20510: LD_INT 26
20512: PUSH
20513: LD_INT 36
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 101
20532: PUSH
20533: LD_INT 102
20535: PUSH
20536: LD_INT 105
20538: PUSH
20539: LD_INT 106
20541: PUSH
20542: LD_INT 108
20544: PUSH
20545: LD_INT 116
20547: PUSH
20548: LD_INT 117
20550: PUSH
20551: LD_INT 118
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 23351
20570: LD_INT 5
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20690
20578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20579: LD_ADDR_VAR 0 2
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 4
20589: PUSH
20590: LD_INT 5
20592: PUSH
20593: LD_INT 6
20595: PUSH
20596: LD_INT 8
20598: PUSH
20599: LD_INT 11
20601: PUSH
20602: LD_INT 12
20604: PUSH
20605: LD_INT 15
20607: PUSH
20608: LD_INT 16
20610: PUSH
20611: LD_INT 22
20613: PUSH
20614: LD_INT 23
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 26
20622: PUSH
20623: LD_INT 36
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 101
20644: PUSH
20645: LD_INT 102
20647: PUSH
20648: LD_INT 105
20650: PUSH
20651: LD_INT 106
20653: PUSH
20654: LD_INT 108
20656: PUSH
20657: LD_INT 109
20659: PUSH
20660: LD_INT 112
20662: PUSH
20663: LD_INT 116
20665: PUSH
20666: LD_INT 117
20668: PUSH
20669: LD_INT 118
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: ST_TO_ADDR
20688: GO 23351
20690: LD_INT 6
20692: DOUBLE
20693: EQUAL
20694: IFTRUE 20698
20696: GO 20830
20698: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 2
20706: PUSH
20707: LD_INT 4
20709: PUSH
20710: LD_INT 5
20712: PUSH
20713: LD_INT 6
20715: PUSH
20716: LD_INT 8
20718: PUSH
20719: LD_INT 11
20721: PUSH
20722: LD_INT 12
20724: PUSH
20725: LD_INT 15
20727: PUSH
20728: LD_INT 16
20730: PUSH
20731: LD_INT 20
20733: PUSH
20734: LD_INT 21
20736: PUSH
20737: LD_INT 22
20739: PUSH
20740: LD_INT 23
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 26
20748: PUSH
20749: LD_INT 30
20751: PUSH
20752: LD_INT 31
20754: PUSH
20755: LD_INT 32
20757: PUSH
20758: LD_INT 36
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 101
20784: PUSH
20785: LD_INT 102
20787: PUSH
20788: LD_INT 105
20790: PUSH
20791: LD_INT 106
20793: PUSH
20794: LD_INT 108
20796: PUSH
20797: LD_INT 109
20799: PUSH
20800: LD_INT 112
20802: PUSH
20803: LD_INT 116
20805: PUSH
20806: LD_INT 117
20808: PUSH
20809: LD_INT 118
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: ST_TO_ADDR
20828: GO 23351
20830: LD_INT 7
20832: DOUBLE
20833: EQUAL
20834: IFTRUE 20838
20836: GO 20950
20838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: LD_INT 4
20849: PUSH
20850: LD_INT 5
20852: PUSH
20853: LD_INT 7
20855: PUSH
20856: LD_INT 11
20858: PUSH
20859: LD_INT 12
20861: PUSH
20862: LD_INT 15
20864: PUSH
20865: LD_INT 16
20867: PUSH
20868: LD_INT 20
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 25
20882: PUSH
20883: LD_INT 26
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 101
20904: PUSH
20905: LD_INT 102
20907: PUSH
20908: LD_INT 103
20910: PUSH
20911: LD_INT 105
20913: PUSH
20914: LD_INT 106
20916: PUSH
20917: LD_INT 108
20919: PUSH
20920: LD_INT 112
20922: PUSH
20923: LD_INT 116
20925: PUSH
20926: LD_INT 117
20928: PUSH
20929: LD_INT 118
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: ST_TO_ADDR
20948: GO 23351
20950: LD_INT 8
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21098
20958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20959: LD_ADDR_VAR 0 2
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 7
20978: PUSH
20979: LD_INT 8
20981: PUSH
20982: LD_INT 11
20984: PUSH
20985: LD_INT 12
20987: PUSH
20988: LD_INT 15
20990: PUSH
20991: LD_INT 16
20993: PUSH
20994: LD_INT 20
20996: PUSH
20997: LD_INT 21
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_INT 23
21005: PUSH
21006: LD_INT 25
21008: PUSH
21009: LD_INT 26
21011: PUSH
21012: LD_INT 30
21014: PUSH
21015: LD_INT 31
21017: PUSH
21018: LD_INT 32
21020: PUSH
21021: LD_INT 36
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 101
21048: PUSH
21049: LD_INT 102
21051: PUSH
21052: LD_INT 103
21054: PUSH
21055: LD_INT 105
21057: PUSH
21058: LD_INT 106
21060: PUSH
21061: LD_INT 108
21063: PUSH
21064: LD_INT 109
21066: PUSH
21067: LD_INT 112
21069: PUSH
21070: LD_INT 116
21072: PUSH
21073: LD_INT 117
21075: PUSH
21076: LD_INT 118
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: ST_TO_ADDR
21096: GO 23351
21098: LD_INT 9
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21254
21106: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21107: LD_ADDR_VAR 0 2
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 4
21117: PUSH
21118: LD_INT 5
21120: PUSH
21121: LD_INT 6
21123: PUSH
21124: LD_INT 7
21126: PUSH
21127: LD_INT 8
21129: PUSH
21130: LD_INT 11
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 20
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_INT 23
21153: PUSH
21154: LD_INT 25
21156: PUSH
21157: LD_INT 26
21159: PUSH
21160: LD_INT 28
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 31
21168: PUSH
21169: LD_INT 32
21171: PUSH
21172: LD_INT 36
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 101
21200: PUSH
21201: LD_INT 102
21203: PUSH
21204: LD_INT 103
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 114
21224: PUSH
21225: LD_INT 116
21227: PUSH
21228: LD_INT 117
21230: PUSH
21231: LD_INT 118
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: ST_TO_ADDR
21252: GO 23351
21254: LD_INT 10
21256: DOUBLE
21257: EQUAL
21258: IFTRUE 21262
21260: GO 21458
21262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: LD_INT 4
21273: PUSH
21274: LD_INT 5
21276: PUSH
21277: LD_INT 6
21279: PUSH
21280: LD_INT 7
21282: PUSH
21283: LD_INT 8
21285: PUSH
21286: LD_INT 9
21288: PUSH
21289: LD_INT 10
21291: PUSH
21292: LD_INT 11
21294: PUSH
21295: LD_INT 12
21297: PUSH
21298: LD_INT 13
21300: PUSH
21301: LD_INT 14
21303: PUSH
21304: LD_INT 15
21306: PUSH
21307: LD_INT 16
21309: PUSH
21310: LD_INT 17
21312: PUSH
21313: LD_INT 18
21315: PUSH
21316: LD_INT 19
21318: PUSH
21319: LD_INT 20
21321: PUSH
21322: LD_INT 21
21324: PUSH
21325: LD_INT 22
21327: PUSH
21328: LD_INT 23
21330: PUSH
21331: LD_INT 24
21333: PUSH
21334: LD_INT 25
21336: PUSH
21337: LD_INT 26
21339: PUSH
21340: LD_INT 28
21342: PUSH
21343: LD_INT 30
21345: PUSH
21346: LD_INT 31
21348: PUSH
21349: LD_INT 32
21351: PUSH
21352: LD_INT 36
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 101
21388: PUSH
21389: LD_INT 102
21391: PUSH
21392: LD_INT 103
21394: PUSH
21395: LD_INT 104
21397: PUSH
21398: LD_INT 105
21400: PUSH
21401: LD_INT 106
21403: PUSH
21404: LD_INT 107
21406: PUSH
21407: LD_INT 108
21409: PUSH
21410: LD_INT 109
21412: PUSH
21413: LD_INT 110
21415: PUSH
21416: LD_INT 111
21418: PUSH
21419: LD_INT 112
21421: PUSH
21422: LD_INT 114
21424: PUSH
21425: LD_INT 116
21427: PUSH
21428: LD_INT 117
21430: PUSH
21431: LD_INT 118
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 23351
21458: LD_INT 11
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21670
21466: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21467: LD_ADDR_VAR 0 2
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: LD_INT 4
21480: PUSH
21481: LD_INT 5
21483: PUSH
21484: LD_INT 6
21486: PUSH
21487: LD_INT 7
21489: PUSH
21490: LD_INT 8
21492: PUSH
21493: LD_INT 9
21495: PUSH
21496: LD_INT 10
21498: PUSH
21499: LD_INT 11
21501: PUSH
21502: LD_INT 12
21504: PUSH
21505: LD_INT 13
21507: PUSH
21508: LD_INT 14
21510: PUSH
21511: LD_INT 15
21513: PUSH
21514: LD_INT 16
21516: PUSH
21517: LD_INT 17
21519: PUSH
21520: LD_INT 18
21522: PUSH
21523: LD_INT 19
21525: PUSH
21526: LD_INT 20
21528: PUSH
21529: LD_INT 21
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_INT 23
21537: PUSH
21538: LD_INT 24
21540: PUSH
21541: LD_INT 25
21543: PUSH
21544: LD_INT 26
21546: PUSH
21547: LD_INT 28
21549: PUSH
21550: LD_INT 30
21552: PUSH
21553: LD_INT 31
21555: PUSH
21556: LD_INT 32
21558: PUSH
21559: LD_INT 34
21561: PUSH
21562: LD_INT 36
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 101
21600: PUSH
21601: LD_INT 102
21603: PUSH
21604: LD_INT 103
21606: PUSH
21607: LD_INT 104
21609: PUSH
21610: LD_INT 105
21612: PUSH
21613: LD_INT 106
21615: PUSH
21616: LD_INT 107
21618: PUSH
21619: LD_INT 108
21621: PUSH
21622: LD_INT 109
21624: PUSH
21625: LD_INT 110
21627: PUSH
21628: LD_INT 111
21630: PUSH
21631: LD_INT 112
21633: PUSH
21634: LD_INT 114
21636: PUSH
21637: LD_INT 116
21639: PUSH
21640: LD_INT 117
21642: PUSH
21643: LD_INT 118
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: ST_TO_ADDR
21668: GO 23351
21670: LD_INT 12
21672: DOUBLE
21673: EQUAL
21674: IFTRUE 21678
21676: GO 21898
21678: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: LD_INT 4
21695: PUSH
21696: LD_INT 5
21698: PUSH
21699: LD_INT 6
21701: PUSH
21702: LD_INT 7
21704: PUSH
21705: LD_INT 8
21707: PUSH
21708: LD_INT 9
21710: PUSH
21711: LD_INT 10
21713: PUSH
21714: LD_INT 11
21716: PUSH
21717: LD_INT 12
21719: PUSH
21720: LD_INT 13
21722: PUSH
21723: LD_INT 14
21725: PUSH
21726: LD_INT 15
21728: PUSH
21729: LD_INT 16
21731: PUSH
21732: LD_INT 17
21734: PUSH
21735: LD_INT 18
21737: PUSH
21738: LD_INT 19
21740: PUSH
21741: LD_INT 20
21743: PUSH
21744: LD_INT 21
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 23
21752: PUSH
21753: LD_INT 24
21755: PUSH
21756: LD_INT 25
21758: PUSH
21759: LD_INT 26
21761: PUSH
21762: LD_INT 27
21764: PUSH
21765: LD_INT 28
21767: PUSH
21768: LD_INT 30
21770: PUSH
21771: LD_INT 31
21773: PUSH
21774: LD_INT 32
21776: PUSH
21777: LD_INT 33
21779: PUSH
21780: LD_INT 34
21782: PUSH
21783: LD_INT 36
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 101
21824: PUSH
21825: LD_INT 102
21827: PUSH
21828: LD_INT 103
21830: PUSH
21831: LD_INT 104
21833: PUSH
21834: LD_INT 105
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 107
21842: PUSH
21843: LD_INT 108
21845: PUSH
21846: LD_INT 109
21848: PUSH
21849: LD_INT 110
21851: PUSH
21852: LD_INT 111
21854: PUSH
21855: LD_INT 112
21857: PUSH
21858: LD_INT 113
21860: PUSH
21861: LD_INT 114
21863: PUSH
21864: LD_INT 116
21866: PUSH
21867: LD_INT 117
21869: PUSH
21870: LD_INT 118
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: ST_TO_ADDR
21896: GO 23351
21898: LD_INT 13
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 22114
21906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21907: LD_ADDR_VAR 0 2
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: LD_INT 3
21920: PUSH
21921: LD_INT 4
21923: PUSH
21924: LD_INT 5
21926: PUSH
21927: LD_INT 8
21929: PUSH
21930: LD_INT 9
21932: PUSH
21933: LD_INT 10
21935: PUSH
21936: LD_INT 11
21938: PUSH
21939: LD_INT 12
21941: PUSH
21942: LD_INT 14
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 17
21953: PUSH
21954: LD_INT 18
21956: PUSH
21957: LD_INT 19
21959: PUSH
21960: LD_INT 20
21962: PUSH
21963: LD_INT 21
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_INT 23
21971: PUSH
21972: LD_INT 24
21974: PUSH
21975: LD_INT 25
21977: PUSH
21978: LD_INT 26
21980: PUSH
21981: LD_INT 27
21983: PUSH
21984: LD_INT 28
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 31
21992: PUSH
21993: LD_INT 32
21995: PUSH
21996: LD_INT 33
21998: PUSH
21999: LD_INT 34
22001: PUSH
22002: LD_INT 36
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 101
22040: PUSH
22041: LD_INT 102
22043: PUSH
22044: LD_INT 103
22046: PUSH
22047: LD_INT 104
22049: PUSH
22050: LD_INT 105
22052: PUSH
22053: LD_INT 106
22055: PUSH
22056: LD_INT 107
22058: PUSH
22059: LD_INT 108
22061: PUSH
22062: LD_INT 109
22064: PUSH
22065: LD_INT 110
22067: PUSH
22068: LD_INT 111
22070: PUSH
22071: LD_INT 112
22073: PUSH
22074: LD_INT 113
22076: PUSH
22077: LD_INT 114
22079: PUSH
22080: LD_INT 116
22082: PUSH
22083: LD_INT 117
22085: PUSH
22086: LD_INT 118
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: ST_TO_ADDR
22112: GO 23351
22114: LD_INT 14
22116: DOUBLE
22117: EQUAL
22118: IFTRUE 22122
22120: GO 22346
22122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: LD_INT 4
22139: PUSH
22140: LD_INT 5
22142: PUSH
22143: LD_INT 6
22145: PUSH
22146: LD_INT 7
22148: PUSH
22149: LD_INT 8
22151: PUSH
22152: LD_INT 9
22154: PUSH
22155: LD_INT 10
22157: PUSH
22158: LD_INT 11
22160: PUSH
22161: LD_INT 12
22163: PUSH
22164: LD_INT 13
22166: PUSH
22167: LD_INT 14
22169: PUSH
22170: LD_INT 15
22172: PUSH
22173: LD_INT 16
22175: PUSH
22176: LD_INT 17
22178: PUSH
22179: LD_INT 18
22181: PUSH
22182: LD_INT 19
22184: PUSH
22185: LD_INT 20
22187: PUSH
22188: LD_INT 21
22190: PUSH
22191: LD_INT 22
22193: PUSH
22194: LD_INT 23
22196: PUSH
22197: LD_INT 24
22199: PUSH
22200: LD_INT 25
22202: PUSH
22203: LD_INT 26
22205: PUSH
22206: LD_INT 27
22208: PUSH
22209: LD_INT 28
22211: PUSH
22212: LD_INT 29
22214: PUSH
22215: LD_INT 30
22217: PUSH
22218: LD_INT 31
22220: PUSH
22221: LD_INT 32
22223: PUSH
22224: LD_INT 33
22226: PUSH
22227: LD_INT 34
22229: PUSH
22230: LD_INT 36
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 101
22272: PUSH
22273: LD_INT 102
22275: PUSH
22276: LD_INT 103
22278: PUSH
22279: LD_INT 104
22281: PUSH
22282: LD_INT 105
22284: PUSH
22285: LD_INT 106
22287: PUSH
22288: LD_INT 107
22290: PUSH
22291: LD_INT 108
22293: PUSH
22294: LD_INT 109
22296: PUSH
22297: LD_INT 110
22299: PUSH
22300: LD_INT 111
22302: PUSH
22303: LD_INT 112
22305: PUSH
22306: LD_INT 113
22308: PUSH
22309: LD_INT 114
22311: PUSH
22312: LD_INT 116
22314: PUSH
22315: LD_INT 117
22317: PUSH
22318: LD_INT 118
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: ST_TO_ADDR
22344: GO 23351
22346: LD_INT 15
22348: DOUBLE
22349: EQUAL
22350: IFTRUE 22354
22352: GO 22578
22354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: LD_INT 4
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 6
22377: PUSH
22378: LD_INT 7
22380: PUSH
22381: LD_INT 8
22383: PUSH
22384: LD_INT 9
22386: PUSH
22387: LD_INT 10
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 13
22398: PUSH
22399: LD_INT 14
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 17
22410: PUSH
22411: LD_INT 18
22413: PUSH
22414: LD_INT 19
22416: PUSH
22417: LD_INT 20
22419: PUSH
22420: LD_INT 21
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_INT 23
22428: PUSH
22429: LD_INT 24
22431: PUSH
22432: LD_INT 25
22434: PUSH
22435: LD_INT 26
22437: PUSH
22438: LD_INT 27
22440: PUSH
22441: LD_INT 28
22443: PUSH
22444: LD_INT 29
22446: PUSH
22447: LD_INT 30
22449: PUSH
22450: LD_INT 31
22452: PUSH
22453: LD_INT 32
22455: PUSH
22456: LD_INT 33
22458: PUSH
22459: LD_INT 34
22461: PUSH
22462: LD_INT 36
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 101
22504: PUSH
22505: LD_INT 102
22507: PUSH
22508: LD_INT 103
22510: PUSH
22511: LD_INT 104
22513: PUSH
22514: LD_INT 105
22516: PUSH
22517: LD_INT 106
22519: PUSH
22520: LD_INT 107
22522: PUSH
22523: LD_INT 108
22525: PUSH
22526: LD_INT 109
22528: PUSH
22529: LD_INT 110
22531: PUSH
22532: LD_INT 111
22534: PUSH
22535: LD_INT 112
22537: PUSH
22538: LD_INT 113
22540: PUSH
22541: LD_INT 114
22543: PUSH
22544: LD_INT 116
22546: PUSH
22547: LD_INT 117
22549: PUSH
22550: LD_INT 118
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: ST_TO_ADDR
22576: GO 23351
22578: LD_INT 16
22580: DOUBLE
22581: EQUAL
22582: IFTRUE 22586
22584: GO 22722
22586: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22587: LD_ADDR_VAR 0 2
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 4
22597: PUSH
22598: LD_INT 5
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 11
22606: PUSH
22607: LD_INT 12
22609: PUSH
22610: LD_INT 15
22612: PUSH
22613: LD_INT 16
22615: PUSH
22616: LD_INT 20
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 22
22624: PUSH
22625: LD_INT 23
22627: PUSH
22628: LD_INT 25
22630: PUSH
22631: LD_INT 26
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 31
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: LD_INT 33
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 101
22672: PUSH
22673: LD_INT 102
22675: PUSH
22676: LD_INT 103
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 108
22684: PUSH
22685: LD_INT 112
22687: PUSH
22688: LD_INT 113
22690: PUSH
22691: LD_INT 114
22693: PUSH
22694: LD_INT 116
22696: PUSH
22697: LD_INT 117
22699: PUSH
22700: LD_INT 118
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: ST_TO_ADDR
22720: GO 23351
22722: LD_INT 17
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22954
22730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22731: LD_ADDR_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 3
22744: PUSH
22745: LD_INT 4
22747: PUSH
22748: LD_INT 5
22750: PUSH
22751: LD_INT 6
22753: PUSH
22754: LD_INT 7
22756: PUSH
22757: LD_INT 8
22759: PUSH
22760: LD_INT 9
22762: PUSH
22763: LD_INT 10
22765: PUSH
22766: LD_INT 11
22768: PUSH
22769: LD_INT 12
22771: PUSH
22772: LD_INT 13
22774: PUSH
22775: LD_INT 14
22777: PUSH
22778: LD_INT 15
22780: PUSH
22781: LD_INT 16
22783: PUSH
22784: LD_INT 17
22786: PUSH
22787: LD_INT 18
22789: PUSH
22790: LD_INT 19
22792: PUSH
22793: LD_INT 20
22795: PUSH
22796: LD_INT 21
22798: PUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 23
22804: PUSH
22805: LD_INT 24
22807: PUSH
22808: LD_INT 25
22810: PUSH
22811: LD_INT 26
22813: PUSH
22814: LD_INT 27
22816: PUSH
22817: LD_INT 28
22819: PUSH
22820: LD_INT 29
22822: PUSH
22823: LD_INT 30
22825: PUSH
22826: LD_INT 31
22828: PUSH
22829: LD_INT 32
22831: PUSH
22832: LD_INT 33
22834: PUSH
22835: LD_INT 34
22837: PUSH
22838: LD_INT 36
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 101
22880: PUSH
22881: LD_INT 102
22883: PUSH
22884: LD_INT 103
22886: PUSH
22887: LD_INT 104
22889: PUSH
22890: LD_INT 105
22892: PUSH
22893: LD_INT 106
22895: PUSH
22896: LD_INT 107
22898: PUSH
22899: LD_INT 108
22901: PUSH
22902: LD_INT 109
22904: PUSH
22905: LD_INT 110
22907: PUSH
22908: LD_INT 111
22910: PUSH
22911: LD_INT 112
22913: PUSH
22914: LD_INT 113
22916: PUSH
22917: LD_INT 114
22919: PUSH
22920: LD_INT 116
22922: PUSH
22923: LD_INT 117
22925: PUSH
22926: LD_INT 118
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: ST_TO_ADDR
22952: GO 23351
22954: LD_INT 18
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 23110
22962: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 4
22973: PUSH
22974: LD_INT 5
22976: PUSH
22977: LD_INT 7
22979: PUSH
22980: LD_INT 11
22982: PUSH
22983: LD_INT 12
22985: PUSH
22986: LD_INT 15
22988: PUSH
22989: LD_INT 16
22991: PUSH
22992: LD_INT 20
22994: PUSH
22995: LD_INT 21
22997: PUSH
22998: LD_INT 22
23000: PUSH
23001: LD_INT 23
23003: PUSH
23004: LD_INT 25
23006: PUSH
23007: LD_INT 26
23009: PUSH
23010: LD_INT 30
23012: PUSH
23013: LD_INT 31
23015: PUSH
23016: LD_INT 32
23018: PUSH
23019: LD_INT 33
23021: PUSH
23022: LD_INT 34
23024: PUSH
23025: LD_INT 35
23027: PUSH
23028: LD_INT 36
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 101
23056: PUSH
23057: LD_INT 102
23059: PUSH
23060: LD_INT 103
23062: PUSH
23063: LD_INT 106
23065: PUSH
23066: LD_INT 108
23068: PUSH
23069: LD_INT 112
23071: PUSH
23072: LD_INT 113
23074: PUSH
23075: LD_INT 114
23077: PUSH
23078: LD_INT 115
23080: PUSH
23081: LD_INT 116
23083: PUSH
23084: LD_INT 117
23086: PUSH
23087: LD_INT 118
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: ST_TO_ADDR
23108: GO 23351
23110: LD_INT 19
23112: DOUBLE
23113: EQUAL
23114: IFTRUE 23118
23116: GO 23350
23118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23119: LD_ADDR_VAR 0 2
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 9
23150: PUSH
23151: LD_INT 10
23153: PUSH
23154: LD_INT 11
23156: PUSH
23157: LD_INT 12
23159: PUSH
23160: LD_INT 13
23162: PUSH
23163: LD_INT 14
23165: PUSH
23166: LD_INT 15
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 17
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: LD_INT 19
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 24
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 27
23204: PUSH
23205: LD_INT 28
23207: PUSH
23208: LD_INT 29
23210: PUSH
23211: LD_INT 30
23213: PUSH
23214: LD_INT 31
23216: PUSH
23217: LD_INT 32
23219: PUSH
23220: LD_INT 33
23222: PUSH
23223: LD_INT 34
23225: PUSH
23226: LD_INT 35
23228: PUSH
23229: LD_INT 36
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 101
23272: PUSH
23273: LD_INT 102
23275: PUSH
23276: LD_INT 103
23278: PUSH
23279: LD_INT 104
23281: PUSH
23282: LD_INT 105
23284: PUSH
23285: LD_INT 106
23287: PUSH
23288: LD_INT 107
23290: PUSH
23291: LD_INT 108
23293: PUSH
23294: LD_INT 109
23296: PUSH
23297: LD_INT 110
23299: PUSH
23300: LD_INT 111
23302: PUSH
23303: LD_INT 112
23305: PUSH
23306: LD_INT 113
23308: PUSH
23309: LD_INT 114
23311: PUSH
23312: LD_INT 115
23314: PUSH
23315: LD_INT 116
23317: PUSH
23318: LD_INT 117
23320: PUSH
23321: LD_INT 118
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: ST_TO_ADDR
23348: GO 23351
23350: POP
// end else
23351: GO 23582
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: LD_INT 3
23366: PUSH
23367: LD_INT 4
23369: PUSH
23370: LD_INT 5
23372: PUSH
23373: LD_INT 6
23375: PUSH
23376: LD_INT 7
23378: PUSH
23379: LD_INT 8
23381: PUSH
23382: LD_INT 9
23384: PUSH
23385: LD_INT 10
23387: PUSH
23388: LD_INT 11
23390: PUSH
23391: LD_INT 12
23393: PUSH
23394: LD_INT 13
23396: PUSH
23397: LD_INT 14
23399: PUSH
23400: LD_INT 15
23402: PUSH
23403: LD_INT 16
23405: PUSH
23406: LD_INT 17
23408: PUSH
23409: LD_INT 18
23411: PUSH
23412: LD_INT 19
23414: PUSH
23415: LD_INT 20
23417: PUSH
23418: LD_INT 21
23420: PUSH
23421: LD_INT 22
23423: PUSH
23424: LD_INT 23
23426: PUSH
23427: LD_INT 24
23429: PUSH
23430: LD_INT 25
23432: PUSH
23433: LD_INT 26
23435: PUSH
23436: LD_INT 27
23438: PUSH
23439: LD_INT 28
23441: PUSH
23442: LD_INT 29
23444: PUSH
23445: LD_INT 30
23447: PUSH
23448: LD_INT 31
23450: PUSH
23451: LD_INT 32
23453: PUSH
23454: LD_INT 33
23456: PUSH
23457: LD_INT 34
23459: PUSH
23460: LD_INT 35
23462: PUSH
23463: LD_INT 36
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 101
23506: PUSH
23507: LD_INT 102
23509: PUSH
23510: LD_INT 103
23512: PUSH
23513: LD_INT 104
23515: PUSH
23516: LD_INT 105
23518: PUSH
23519: LD_INT 106
23521: PUSH
23522: LD_INT 107
23524: PUSH
23525: LD_INT 108
23527: PUSH
23528: LD_INT 109
23530: PUSH
23531: LD_INT 110
23533: PUSH
23534: LD_INT 111
23536: PUSH
23537: LD_INT 112
23539: PUSH
23540: LD_INT 113
23542: PUSH
23543: LD_INT 114
23545: PUSH
23546: LD_INT 115
23548: PUSH
23549: LD_INT 116
23551: PUSH
23552: LD_INT 117
23554: PUSH
23555: LD_INT 118
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// if result then
23582: LD_VAR 0 2
23586: IFFALSE 24372
// begin normal :=  ;
23588: LD_ADDR_VAR 0 5
23592: PUSH
23593: LD_STRING 
23595: ST_TO_ADDR
// hardcore :=  ;
23596: LD_ADDR_VAR 0 6
23600: PUSH
23601: LD_STRING 
23603: ST_TO_ADDR
// active :=  ;
23604: LD_ADDR_VAR 0 7
23608: PUSH
23609: LD_STRING 
23611: ST_TO_ADDR
// for i = 1 to normalCounter do
23612: LD_ADDR_VAR 0 8
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_EXP 79
23626: PUSH
23627: FOR_TO
23628: IFFALSE 23729
// begin tmp := 0 ;
23630: LD_ADDR_VAR 0 3
23634: PUSH
23635: LD_STRING 0
23637: ST_TO_ADDR
// if result [ 1 ] then
23638: LD_VAR 0 2
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: IFFALSE 23711
// if result [ 1 ] [ 1 ] = i then
23648: LD_VAR 0 2
23652: PUSH
23653: LD_INT 1
23655: ARRAY
23656: PUSH
23657: LD_INT 1
23659: ARRAY
23660: PUSH
23661: LD_VAR 0 8
23665: EQUAL
23666: IFFALSE 23711
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23668: LD_ADDR_VAR 0 2
23672: PUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: LD_INT 1
23680: PPUSH
23681: LD_VAR 0 2
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PPUSH
23690: LD_INT 1
23692: PPUSH
23693: CALL_OW 3
23697: PPUSH
23698: CALL_OW 1
23702: ST_TO_ADDR
// tmp := 1 ;
23703: LD_ADDR_VAR 0 3
23707: PUSH
23708: LD_STRING 1
23710: ST_TO_ADDR
// end ; normal := normal & tmp ;
23711: LD_ADDR_VAR 0 5
23715: PUSH
23716: LD_VAR 0 5
23720: PUSH
23721: LD_VAR 0 3
23725: STR
23726: ST_TO_ADDR
// end ;
23727: GO 23627
23729: POP
23730: POP
// for i = 1 to hardcoreCounter do
23731: LD_ADDR_VAR 0 8
23735: PUSH
23736: DOUBLE
23737: LD_INT 1
23739: DEC
23740: ST_TO_ADDR
23741: LD_EXP 80
23745: PUSH
23746: FOR_TO
23747: IFFALSE 23852
// begin tmp := 0 ;
23749: LD_ADDR_VAR 0 3
23753: PUSH
23754: LD_STRING 0
23756: ST_TO_ADDR
// if result [ 2 ] then
23757: LD_VAR 0 2
23761: PUSH
23762: LD_INT 2
23764: ARRAY
23765: IFFALSE 23834
// if result [ 2 ] [ 1 ] = 100 + i then
23767: LD_VAR 0 2
23771: PUSH
23772: LD_INT 2
23774: ARRAY
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PUSH
23780: LD_INT 100
23782: PUSH
23783: LD_VAR 0 8
23787: PLUS
23788: EQUAL
23789: IFFALSE 23834
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_VAR 0 2
23800: PPUSH
23801: LD_INT 2
23803: PPUSH
23804: LD_VAR 0 2
23808: PUSH
23809: LD_INT 2
23811: ARRAY
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL_OW 3
23820: PPUSH
23821: CALL_OW 1
23825: ST_TO_ADDR
// tmp := 1 ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: LD_STRING 1
23833: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23834: LD_ADDR_VAR 0 6
23838: PUSH
23839: LD_VAR 0 6
23843: PUSH
23844: LD_VAR 0 3
23848: STR
23849: ST_TO_ADDR
// end ;
23850: GO 23746
23852: POP
23853: POP
// if isGameLoad then
23854: LD_VAR 0 1
23858: IFFALSE 24333
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23860: LD_ADDR_VAR 0 4
23864: PUSH
23865: LD_EXP 83
23869: PUSH
23870: LD_EXP 82
23874: PUSH
23875: LD_EXP 84
23879: PUSH
23880: LD_EXP 81
23884: PUSH
23885: LD_EXP 85
23889: PUSH
23890: LD_EXP 86
23894: PUSH
23895: LD_EXP 87
23899: PUSH
23900: LD_EXP 88
23904: PUSH
23905: LD_EXP 89
23909: PUSH
23910: LD_EXP 90
23914: PUSH
23915: LD_EXP 91
23919: PUSH
23920: LD_EXP 92
23924: PUSH
23925: LD_EXP 93
23929: PUSH
23930: LD_EXP 94
23934: PUSH
23935: LD_EXP 102
23939: PUSH
23940: LD_EXP 103
23944: PUSH
23945: LD_EXP 104
23949: PUSH
23950: LD_EXP 105
23954: PUSH
23955: LD_EXP 107
23959: PUSH
23960: LD_EXP 108
23964: PUSH
23965: LD_EXP 109
23969: PUSH
23970: LD_EXP 112
23974: PUSH
23975: LD_EXP 114
23979: PUSH
23980: LD_EXP 115
23984: PUSH
23985: LD_EXP 116
23989: PUSH
23990: LD_EXP 118
23994: PUSH
23995: LD_EXP 119
23999: PUSH
24000: LD_EXP 122
24004: PUSH
24005: LD_EXP 123
24009: PUSH
24010: LD_EXP 124
24014: PUSH
24015: LD_EXP 125
24019: PUSH
24020: LD_EXP 126
24024: PUSH
24025: LD_EXP 127
24029: PUSH
24030: LD_EXP 128
24034: PUSH
24035: LD_EXP 129
24039: PUSH
24040: LD_EXP 130
24044: PUSH
24045: LD_EXP 95
24049: PUSH
24050: LD_EXP 96
24054: PUSH
24055: LD_EXP 99
24059: PUSH
24060: LD_EXP 100
24064: PUSH
24065: LD_EXP 101
24069: PUSH
24070: LD_EXP 97
24074: PUSH
24075: LD_EXP 98
24079: PUSH
24080: LD_EXP 106
24084: PUSH
24085: LD_EXP 110
24089: PUSH
24090: LD_EXP 111
24094: PUSH
24095: LD_EXP 113
24099: PUSH
24100: LD_EXP 117
24104: PUSH
24105: LD_EXP 120
24109: PUSH
24110: LD_EXP 121
24114: PUSH
24115: LD_EXP 131
24119: PUSH
24120: LD_EXP 132
24124: PUSH
24125: LD_EXP 133
24129: PUSH
24130: LD_EXP 134
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: ST_TO_ADDR
// tmp :=  ;
24191: LD_ADDR_VAR 0 3
24195: PUSH
24196: LD_STRING 
24198: ST_TO_ADDR
// for i = 1 to normalCounter do
24199: LD_ADDR_VAR 0 8
24203: PUSH
24204: DOUBLE
24205: LD_INT 1
24207: DEC
24208: ST_TO_ADDR
24209: LD_EXP 79
24213: PUSH
24214: FOR_TO
24215: IFFALSE 24251
// begin if flags [ i ] then
24217: LD_VAR 0 4
24221: PUSH
24222: LD_VAR 0 8
24226: ARRAY
24227: IFFALSE 24249
// tmp := tmp & i & ; ;
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_VAR 0 3
24238: PUSH
24239: LD_VAR 0 8
24243: STR
24244: PUSH
24245: LD_STRING ;
24247: STR
24248: ST_TO_ADDR
// end ;
24249: GO 24214
24251: POP
24252: POP
// for i = 1 to hardcoreCounter do
24253: LD_ADDR_VAR 0 8
24257: PUSH
24258: DOUBLE
24259: LD_INT 1
24261: DEC
24262: ST_TO_ADDR
24263: LD_EXP 80
24267: PUSH
24268: FOR_TO
24269: IFFALSE 24315
// begin if flags [ normalCounter + i ] then
24271: LD_VAR 0 4
24275: PUSH
24276: LD_EXP 79
24280: PUSH
24281: LD_VAR 0 8
24285: PLUS
24286: ARRAY
24287: IFFALSE 24313
// tmp := tmp & ( 100 + i ) & ; ;
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_VAR 0 3
24298: PUSH
24299: LD_INT 100
24301: PUSH
24302: LD_VAR 0 8
24306: PLUS
24307: STR
24308: PUSH
24309: LD_STRING ;
24311: STR
24312: ST_TO_ADDR
// end ;
24313: GO 24268
24315: POP
24316: POP
// if tmp then
24317: LD_VAR 0 3
24321: IFFALSE 24333
// active := tmp ;
24323: LD_ADDR_VAR 0 7
24327: PUSH
24328: LD_VAR 0 3
24332: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24333: LD_STRING getStreamItemsFromMission("
24335: PUSH
24336: LD_VAR 0 5
24340: STR
24341: PUSH
24342: LD_STRING ","
24344: STR
24345: PUSH
24346: LD_VAR 0 6
24350: STR
24351: PUSH
24352: LD_STRING ","
24354: STR
24355: PUSH
24356: LD_VAR 0 7
24360: STR
24361: PUSH
24362: LD_STRING ")
24364: STR
24365: PPUSH
24366: CALL_OW 559
// end else
24370: GO 24379
// ToLua ( getStreamItemsFromMission("","","") ) ;
24372: LD_STRING getStreamItemsFromMission("","","")
24374: PPUSH
24375: CALL_OW 559
// end ;
24379: LD_VAR 0 2
24383: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24384: LD_EXP 78
24388: PUSH
24389: LD_EXP 83
24393: AND
24394: IFFALSE 24518
24396: GO 24398
24398: DISABLE
24399: LD_INT 0
24401: PPUSH
24402: PPUSH
// begin enable ;
24403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_INT 22
24411: PUSH
24412: LD_OWVAR 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 2
24423: PUSH
24424: LD_INT 34
24426: PUSH
24427: LD_INT 7
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 34
24436: PUSH
24437: LD_INT 45
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 34
24446: PUSH
24447: LD_INT 28
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: LD_INT 47
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: ST_TO_ADDR
// if not tmp then
24480: LD_VAR 0 2
24484: NOT
24485: IFFALSE 24489
// exit ;
24487: GO 24518
// for i in tmp do
24489: LD_ADDR_VAR 0 1
24493: PUSH
24494: LD_VAR 0 2
24498: PUSH
24499: FOR_IN
24500: IFFALSE 24516
// begin SetLives ( i , 0 ) ;
24502: LD_VAR 0 1
24506: PPUSH
24507: LD_INT 0
24509: PPUSH
24510: CALL_OW 234
// end ;
24514: GO 24499
24516: POP
24517: POP
// end ;
24518: PPOPN 2
24520: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24521: LD_EXP 78
24525: PUSH
24526: LD_EXP 84
24530: AND
24531: IFFALSE 24615
24533: GO 24535
24535: DISABLE
24536: LD_INT 0
24538: PPUSH
24539: PPUSH
// begin enable ;
24540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24541: LD_ADDR_VAR 0 2
24545: PUSH
24546: LD_INT 22
24548: PUSH
24549: LD_OWVAR 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 32
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: ST_TO_ADDR
// if not tmp then
24577: LD_VAR 0 2
24581: NOT
24582: IFFALSE 24586
// exit ;
24584: GO 24615
// for i in tmp do
24586: LD_ADDR_VAR 0 1
24590: PUSH
24591: LD_VAR 0 2
24595: PUSH
24596: FOR_IN
24597: IFFALSE 24613
// begin SetLives ( i , 0 ) ;
24599: LD_VAR 0 1
24603: PPUSH
24604: LD_INT 0
24606: PPUSH
24607: CALL_OW 234
// end ;
24611: GO 24596
24613: POP
24614: POP
// end ;
24615: PPOPN 2
24617: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24618: LD_EXP 78
24622: PUSH
24623: LD_EXP 81
24627: AND
24628: IFFALSE 24721
24630: GO 24632
24632: DISABLE
24633: LD_INT 0
24635: PPUSH
// begin enable ;
24636: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24637: LD_ADDR_VAR 0 1
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_OWVAR 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: LD_INT 25
24659: PUSH
24660: LD_INT 5
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 25
24669: PUSH
24670: LD_INT 9
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 25
24679: PUSH
24680: LD_INT 8
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: PUSH
24702: FOR_IN
24703: IFFALSE 24719
// begin SetClass ( i , 1 ) ;
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 336
// end ;
24717: GO 24702
24719: POP
24720: POP
// end ;
24721: PPOPN 1
24723: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24724: LD_EXP 78
24728: PUSH
24729: LD_EXP 82
24733: AND
24734: PUSH
24735: LD_OWVAR 65
24739: PUSH
24740: LD_INT 7
24742: LESS
24743: AND
24744: IFFALSE 24758
24746: GO 24748
24748: DISABLE
// begin enable ;
24749: ENABLE
// game_speed := 7 ;
24750: LD_ADDR_OWVAR 65
24754: PUSH
24755: LD_INT 7
24757: ST_TO_ADDR
// end ;
24758: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24759: LD_EXP 78
24763: PUSH
24764: LD_EXP 85
24768: AND
24769: IFFALSE 24971
24771: GO 24773
24773: DISABLE
24774: LD_INT 0
24776: PPUSH
24777: PPUSH
24778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_INT 81
24786: PUSH
24787: LD_OWVAR 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 21
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: ST_TO_ADDR
// if not tmp then
24815: LD_VAR 0 3
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24971
// if tmp > 5 then
24824: LD_VAR 0 3
24828: PUSH
24829: LD_INT 5
24831: GREATER
24832: IFFALSE 24844
// k := 5 else
24834: LD_ADDR_VAR 0 2
24838: PUSH
24839: LD_INT 5
24841: ST_TO_ADDR
24842: GO 24854
// k := tmp ;
24844: LD_ADDR_VAR 0 2
24848: PUSH
24849: LD_VAR 0 3
24853: ST_TO_ADDR
// for i := 1 to k do
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: DOUBLE
24860: LD_INT 1
24862: DEC
24863: ST_TO_ADDR
24864: LD_VAR 0 2
24868: PUSH
24869: FOR_TO
24870: IFFALSE 24969
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24872: LD_VAR 0 3
24876: PUSH
24877: LD_VAR 0 1
24881: ARRAY
24882: PPUSH
24883: LD_VAR 0 1
24887: PUSH
24888: LD_INT 4
24890: MOD
24891: PUSH
24892: LD_INT 1
24894: PLUS
24895: PPUSH
24896: CALL_OW 259
24900: PUSH
24901: LD_INT 10
24903: LESS
24904: IFFALSE 24967
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24906: LD_VAR 0 3
24910: PUSH
24911: LD_VAR 0 1
24915: ARRAY
24916: PPUSH
24917: LD_VAR 0 1
24921: PUSH
24922: LD_INT 4
24924: MOD
24925: PUSH
24926: LD_INT 1
24928: PLUS
24929: PPUSH
24930: LD_VAR 0 3
24934: PUSH
24935: LD_VAR 0 1
24939: ARRAY
24940: PPUSH
24941: LD_VAR 0 1
24945: PUSH
24946: LD_INT 4
24948: MOD
24949: PUSH
24950: LD_INT 1
24952: PLUS
24953: PPUSH
24954: CALL_OW 259
24958: PUSH
24959: LD_INT 1
24961: PLUS
24962: PPUSH
24963: CALL_OW 237
24967: GO 24869
24969: POP
24970: POP
// end ;
24971: PPOPN 3
24973: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24974: LD_EXP 78
24978: PUSH
24979: LD_EXP 86
24983: AND
24984: IFFALSE 25004
24986: GO 24988
24988: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24989: LD_INT 4
24991: PPUSH
24992: LD_OWVAR 2
24996: PPUSH
24997: LD_INT 0
24999: PPUSH
25000: CALL_OW 324
25004: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25005: LD_EXP 78
25009: PUSH
25010: LD_EXP 115
25014: AND
25015: IFFALSE 25035
25017: GO 25019
25019: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25020: LD_INT 19
25022: PPUSH
25023: LD_OWVAR 2
25027: PPUSH
25028: LD_INT 0
25030: PPUSH
25031: CALL_OW 324
25035: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25036: LD_EXP 78
25040: PUSH
25041: LD_EXP 87
25045: AND
25046: IFFALSE 25148
25048: GO 25050
25050: DISABLE
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
// begin enable ;
25055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25056: LD_ADDR_VAR 0 2
25060: PUSH
25061: LD_INT 22
25063: PUSH
25064: LD_OWVAR 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 34
25078: PUSH
25079: LD_INT 11
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 34
25088: PUSH
25089: LD_INT 30
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PPUSH
25105: CALL_OW 69
25109: ST_TO_ADDR
// if not tmp then
25110: LD_VAR 0 2
25114: NOT
25115: IFFALSE 25119
// exit ;
25117: GO 25148
// for i in tmp do
25119: LD_ADDR_VAR 0 1
25123: PUSH
25124: LD_VAR 0 2
25128: PUSH
25129: FOR_IN
25130: IFFALSE 25146
// begin SetLives ( i , 0 ) ;
25132: LD_VAR 0 1
25136: PPUSH
25137: LD_INT 0
25139: PPUSH
25140: CALL_OW 234
// end ;
25144: GO 25129
25146: POP
25147: POP
// end ;
25148: PPOPN 2
25150: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25151: LD_EXP 78
25155: PUSH
25156: LD_EXP 88
25160: AND
25161: IFFALSE 25181
25163: GO 25165
25165: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25166: LD_INT 32
25168: PPUSH
25169: LD_OWVAR 2
25173: PPUSH
25174: LD_INT 0
25176: PPUSH
25177: CALL_OW 324
25181: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25182: LD_EXP 78
25186: PUSH
25187: LD_EXP 89
25191: AND
25192: IFFALSE 25373
25194: GO 25196
25196: DISABLE
25197: LD_INT 0
25199: PPUSH
25200: PPUSH
25201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25202: LD_ADDR_VAR 0 2
25206: PUSH
25207: LD_INT 22
25209: PUSH
25210: LD_OWVAR 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 33
25221: PUSH
25222: LD_INT 3
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PPUSH
25233: CALL_OW 69
25237: ST_TO_ADDR
// if not tmp then
25238: LD_VAR 0 2
25242: NOT
25243: IFFALSE 25247
// exit ;
25245: GO 25373
// side := 0 ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 0
25254: ST_TO_ADDR
// for i := 1 to 8 do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: DOUBLE
25261: LD_INT 1
25263: DEC
25264: ST_TO_ADDR
25265: LD_INT 8
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25317
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25271: LD_OWVAR 2
25275: PUSH
25276: LD_VAR 0 1
25280: NONEQUAL
25281: PUSH
25282: LD_OWVAR 2
25286: PPUSH
25287: LD_VAR 0 1
25291: PPUSH
25292: CALL_OW 81
25296: PUSH
25297: LD_INT 2
25299: EQUAL
25300: AND
25301: IFFALSE 25315
// begin side := i ;
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_VAR 0 1
25312: ST_TO_ADDR
// break ;
25313: GO 25317
// end ;
25315: GO 25268
25317: POP
25318: POP
// if not side then
25319: LD_VAR 0 3
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 25373
// for i := 1 to tmp do
25328: LD_ADDR_VAR 0 1
25332: PUSH
25333: DOUBLE
25334: LD_INT 1
25336: DEC
25337: ST_TO_ADDR
25338: LD_VAR 0 2
25342: PUSH
25343: FOR_TO
25344: IFFALSE 25371
// if Prob ( 60 ) then
25346: LD_INT 60
25348: PPUSH
25349: CALL_OW 13
25353: IFFALSE 25369
// SetSide ( i , side ) ;
25355: LD_VAR 0 1
25359: PPUSH
25360: LD_VAR 0 3
25364: PPUSH
25365: CALL_OW 235
25369: GO 25343
25371: POP
25372: POP
// end ;
25373: PPOPN 3
25375: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25376: LD_EXP 78
25380: PUSH
25381: LD_EXP 91
25385: AND
25386: IFFALSE 25505
25388: GO 25390
25390: DISABLE
25391: LD_INT 0
25393: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25394: LD_ADDR_VAR 0 1
25398: PUSH
25399: LD_INT 22
25401: PUSH
25402: LD_OWVAR 2
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 21
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: LD_INT 23
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: PPUSH
25443: CALL_OW 69
25447: PUSH
25448: FOR_IN
25449: IFFALSE 25503
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL_OW 257
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 3
25469: PUSH
25470: LD_INT 4
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: IN
25479: IFFALSE 25501
// SetClass ( un , rand ( 1 , 4 ) ) ;
25481: LD_VAR 0 1
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: LD_INT 4
25491: PPUSH
25492: CALL_OW 12
25496: PPUSH
25497: CALL_OW 336
25501: GO 25448
25503: POP
25504: POP
// end ;
25505: PPOPN 1
25507: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25508: LD_EXP 78
25512: PUSH
25513: LD_EXP 90
25517: AND
25518: IFFALSE 25597
25520: GO 25522
25522: DISABLE
25523: LD_INT 0
25525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25526: LD_ADDR_VAR 0 1
25530: PUSH
25531: LD_INT 22
25533: PUSH
25534: LD_OWVAR 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PPUSH
25557: CALL_OW 69
25561: ST_TO_ADDR
// if not tmp then
25562: LD_VAR 0 1
25566: NOT
25567: IFFALSE 25571
// exit ;
25569: GO 25597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25571: LD_VAR 0 1
25575: PUSH
25576: LD_INT 1
25578: PPUSH
25579: LD_VAR 0 1
25583: PPUSH
25584: CALL_OW 12
25588: ARRAY
25589: PPUSH
25590: LD_INT 100
25592: PPUSH
25593: CALL_OW 234
// end ;
25597: PPOPN 1
25599: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25600: LD_EXP 78
25604: PUSH
25605: LD_EXP 92
25609: AND
25610: IFFALSE 25708
25612: GO 25614
25614: DISABLE
25615: LD_INT 0
25617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25618: LD_ADDR_VAR 0 1
25622: PUSH
25623: LD_INT 22
25625: PUSH
25626: LD_OWVAR 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 21
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PPUSH
25649: CALL_OW 69
25653: ST_TO_ADDR
// if not tmp then
25654: LD_VAR 0 1
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25708
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25663: LD_VAR 0 1
25667: PUSH
25668: LD_INT 1
25670: PPUSH
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL_OW 12
25680: ARRAY
25681: PPUSH
25682: LD_INT 1
25684: PPUSH
25685: LD_INT 4
25687: PPUSH
25688: CALL_OW 12
25692: PPUSH
25693: LD_INT 3000
25695: PPUSH
25696: LD_INT 9000
25698: PPUSH
25699: CALL_OW 12
25703: PPUSH
25704: CALL_OW 492
// end ;
25708: PPOPN 1
25710: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25711: LD_EXP 78
25715: PUSH
25716: LD_EXP 93
25720: AND
25721: IFFALSE 25741
25723: GO 25725
25725: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25726: LD_INT 1
25728: PPUSH
25729: LD_OWVAR 2
25733: PPUSH
25734: LD_INT 0
25736: PPUSH
25737: CALL_OW 324
25741: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25742: LD_EXP 78
25746: PUSH
25747: LD_EXP 94
25751: AND
25752: IFFALSE 25835
25754: GO 25756
25756: DISABLE
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25761: LD_ADDR_VAR 0 2
25765: PUSH
25766: LD_INT 22
25768: PUSH
25769: LD_OWVAR 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 21
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PPUSH
25792: CALL_OW 69
25796: ST_TO_ADDR
// if not tmp then
25797: LD_VAR 0 2
25801: NOT
25802: IFFALSE 25806
// exit ;
25804: GO 25835
// for i in tmp do
25806: LD_ADDR_VAR 0 1
25810: PUSH
25811: LD_VAR 0 2
25815: PUSH
25816: FOR_IN
25817: IFFALSE 25833
// SetBLevel ( i , 10 ) ;
25819: LD_VAR 0 1
25823: PPUSH
25824: LD_INT 10
25826: PPUSH
25827: CALL_OW 241
25831: GO 25816
25833: POP
25834: POP
// end ;
25835: PPOPN 2
25837: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25838: LD_EXP 78
25842: PUSH
25843: LD_EXP 95
25847: AND
25848: IFFALSE 25959
25850: GO 25852
25852: DISABLE
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
25857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 22
25865: PUSH
25866: LD_OWVAR 2
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 25
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 69
25893: ST_TO_ADDR
// if not tmp then
25894: LD_VAR 0 3
25898: NOT
25899: IFFALSE 25903
// exit ;
25901: GO 25959
// un := tmp [ rand ( 1 , tmp ) ] ;
25903: LD_ADDR_VAR 0 2
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_INT 1
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: CALL_OW 12
25925: ARRAY
25926: ST_TO_ADDR
// if Crawls ( un ) then
25927: LD_VAR 0 2
25931: PPUSH
25932: CALL_OW 318
25936: IFFALSE 25947
// ComWalk ( un ) ;
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25947: LD_VAR 0 2
25951: PPUSH
25952: LD_INT 5
25954: PPUSH
25955: CALL_OW 336
// end ;
25959: PPOPN 3
25961: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25962: LD_EXP 78
25966: PUSH
25967: LD_EXP 96
25971: AND
25972: PUSH
25973: LD_OWVAR 67
25977: PUSH
25978: LD_INT 4
25980: LESS
25981: AND
25982: IFFALSE 26001
25984: GO 25986
25986: DISABLE
// begin Difficulty := Difficulty + 1 ;
25987: LD_ADDR_OWVAR 67
25991: PUSH
25992: LD_OWVAR 67
25996: PUSH
25997: LD_INT 1
25999: PLUS
26000: ST_TO_ADDR
// end ;
26001: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26002: LD_EXP 78
26006: PUSH
26007: LD_EXP 97
26011: AND
26012: IFFALSE 26115
26014: GO 26016
26016: DISABLE
26017: LD_INT 0
26019: PPUSH
// begin for i := 1 to 5 do
26020: LD_ADDR_VAR 0 1
26024: PUSH
26025: DOUBLE
26026: LD_INT 1
26028: DEC
26029: ST_TO_ADDR
26030: LD_INT 5
26032: PUSH
26033: FOR_TO
26034: IFFALSE 26113
// begin uc_nation := nation_nature ;
26036: LD_ADDR_OWVAR 21
26040: PUSH
26041: LD_INT 0
26043: ST_TO_ADDR
// uc_side := 0 ;
26044: LD_ADDR_OWVAR 20
26048: PUSH
26049: LD_INT 0
26051: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26052: LD_ADDR_OWVAR 29
26056: PUSH
26057: LD_INT 12
26059: PUSH
26060: LD_INT 12
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: ST_TO_ADDR
// hc_agressivity := 20 ;
26067: LD_ADDR_OWVAR 35
26071: PUSH
26072: LD_INT 20
26074: ST_TO_ADDR
// hc_class := class_tiger ;
26075: LD_ADDR_OWVAR 28
26079: PUSH
26080: LD_INT 14
26082: ST_TO_ADDR
// hc_gallery :=  ;
26083: LD_ADDR_OWVAR 33
26087: PUSH
26088: LD_STRING 
26090: ST_TO_ADDR
// hc_name :=  ;
26091: LD_ADDR_OWVAR 26
26095: PUSH
26096: LD_STRING 
26098: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26099: CALL_OW 44
26103: PPUSH
26104: LD_INT 0
26106: PPUSH
26107: CALL_OW 51
// end ;
26111: GO 26033
26113: POP
26114: POP
// end ;
26115: PPOPN 1
26117: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26118: LD_EXP 78
26122: PUSH
26123: LD_EXP 98
26127: AND
26128: IFFALSE 26137
26130: GO 26132
26132: DISABLE
// StreamSibBomb ;
26133: CALL 26138 0 0
26137: END
// export function StreamSibBomb ; var i , x , y ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
26143: PPUSH
// result := false ;
26144: LD_ADDR_VAR 0 1
26148: PUSH
26149: LD_INT 0
26151: ST_TO_ADDR
// for i := 1 to 16 do
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: DOUBLE
26158: LD_INT 1
26160: DEC
26161: ST_TO_ADDR
26162: LD_INT 16
26164: PUSH
26165: FOR_TO
26166: IFFALSE 26365
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 10
26175: PUSH
26176: LD_INT 20
26178: PUSH
26179: LD_INT 30
26181: PUSH
26182: LD_INT 40
26184: PUSH
26185: LD_INT 50
26187: PUSH
26188: LD_INT 60
26190: PUSH
26191: LD_INT 70
26193: PUSH
26194: LD_INT 80
26196: PUSH
26197: LD_INT 90
26199: PUSH
26200: LD_INT 100
26202: PUSH
26203: LD_INT 110
26205: PUSH
26206: LD_INT 120
26208: PUSH
26209: LD_INT 130
26211: PUSH
26212: LD_INT 140
26214: PUSH
26215: LD_INT 150
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PPUSH
26238: LD_INT 15
26240: PPUSH
26241: CALL_OW 12
26245: ARRAY
26246: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26247: LD_ADDR_VAR 0 4
26251: PUSH
26252: LD_INT 10
26254: PUSH
26255: LD_INT 20
26257: PUSH
26258: LD_INT 30
26260: PUSH
26261: LD_INT 40
26263: PUSH
26264: LD_INT 50
26266: PUSH
26267: LD_INT 60
26269: PUSH
26270: LD_INT 70
26272: PUSH
26273: LD_INT 80
26275: PUSH
26276: LD_INT 90
26278: PUSH
26279: LD_INT 100
26281: PUSH
26282: LD_INT 110
26284: PUSH
26285: LD_INT 120
26287: PUSH
26288: LD_INT 130
26290: PUSH
26291: LD_INT 140
26293: PUSH
26294: LD_INT 150
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: PPUSH
26317: LD_INT 15
26319: PPUSH
26320: CALL_OW 12
26324: ARRAY
26325: ST_TO_ADDR
// if ValidHex ( x , y ) then
26326: LD_VAR 0 3
26330: PPUSH
26331: LD_VAR 0 4
26335: PPUSH
26336: CALL_OW 488
26340: IFFALSE 26363
// begin result := [ x , y ] ;
26342: LD_ADDR_VAR 0 1
26346: PUSH
26347: LD_VAR 0 3
26351: PUSH
26352: LD_VAR 0 4
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: ST_TO_ADDR
// break ;
26361: GO 26365
// end ; end ;
26363: GO 26165
26365: POP
26366: POP
// if result then
26367: LD_VAR 0 1
26371: IFFALSE 26431
// begin ToLua ( playSibBomb() ) ;
26373: LD_STRING playSibBomb()
26375: PPUSH
26376: CALL_OW 559
// wait ( 0 0$14 ) ;
26380: LD_INT 490
26382: PPUSH
26383: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26387: LD_VAR 0 1
26391: PUSH
26392: LD_INT 1
26394: ARRAY
26395: PPUSH
26396: LD_VAR 0 1
26400: PUSH
26401: LD_INT 2
26403: ARRAY
26404: PPUSH
26405: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26409: LD_VAR 0 1
26413: PUSH
26414: LD_INT 1
26416: ARRAY
26417: PPUSH
26418: LD_VAR 0 1
26422: PUSH
26423: LD_INT 2
26425: ARRAY
26426: PPUSH
26427: CALL_OW 429
// end ; end ;
26431: LD_VAR 0 1
26435: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26436: LD_EXP 78
26440: PUSH
26441: LD_EXP 100
26445: AND
26446: IFFALSE 26458
26448: GO 26450
26450: DISABLE
// YouLost (  ) ;
26451: LD_STRING 
26453: PPUSH
26454: CALL_OW 104
26458: END
// every 0 0$1 trigger StreamModeActive and sFog do
26459: LD_EXP 78
26463: PUSH
26464: LD_EXP 99
26468: AND
26469: IFFALSE 26483
26471: GO 26473
26473: DISABLE
// FogOff ( your_side ) ;
26474: LD_OWVAR 2
26478: PPUSH
26479: CALL_OW 344
26483: END
// every 0 0$1 trigger StreamModeActive and sSun do
26484: LD_EXP 78
26488: PUSH
26489: LD_EXP 101
26493: AND
26494: IFFALSE 26522
26496: GO 26498
26498: DISABLE
// begin solar_recharge_percent := 0 ;
26499: LD_ADDR_OWVAR 79
26503: PUSH
26504: LD_INT 0
26506: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26507: LD_INT 10500
26509: PPUSH
26510: CALL_OW 67
// solar_recharge_percent := 100 ;
26514: LD_ADDR_OWVAR 79
26518: PUSH
26519: LD_INT 100
26521: ST_TO_ADDR
// end ;
26522: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26523: LD_EXP 78
26527: PUSH
26528: LD_EXP 102
26532: AND
26533: IFFALSE 26772
26535: GO 26537
26537: DISABLE
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
// begin tmp := [ ] ;
26543: LD_ADDR_VAR 0 3
26547: PUSH
26548: EMPTY
26549: ST_TO_ADDR
// for i := 1 to 6 do
26550: LD_ADDR_VAR 0 1
26554: PUSH
26555: DOUBLE
26556: LD_INT 1
26558: DEC
26559: ST_TO_ADDR
26560: LD_INT 6
26562: PUSH
26563: FOR_TO
26564: IFFALSE 26669
// begin uc_nation := nation_nature ;
26566: LD_ADDR_OWVAR 21
26570: PUSH
26571: LD_INT 0
26573: ST_TO_ADDR
// uc_side := 0 ;
26574: LD_ADDR_OWVAR 20
26578: PUSH
26579: LD_INT 0
26581: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26582: LD_ADDR_OWVAR 29
26586: PUSH
26587: LD_INT 12
26589: PUSH
26590: LD_INT 12
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// hc_agressivity := 20 ;
26597: LD_ADDR_OWVAR 35
26601: PUSH
26602: LD_INT 20
26604: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26605: LD_ADDR_OWVAR 28
26609: PUSH
26610: LD_INT 17
26612: ST_TO_ADDR
// hc_gallery :=  ;
26613: LD_ADDR_OWVAR 33
26617: PUSH
26618: LD_STRING 
26620: ST_TO_ADDR
// hc_name :=  ;
26621: LD_ADDR_OWVAR 26
26625: PUSH
26626: LD_STRING 
26628: ST_TO_ADDR
// un := CreateHuman ;
26629: LD_ADDR_VAR 0 2
26633: PUSH
26634: CALL_OW 44
26638: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26639: LD_VAR 0 2
26643: PPUSH
26644: LD_INT 1
26646: PPUSH
26647: CALL_OW 51
// tmp := tmp ^ un ;
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_VAR 0 3
26660: PUSH
26661: LD_VAR 0 2
26665: ADD
26666: ST_TO_ADDR
// end ;
26667: GO 26563
26669: POP
26670: POP
// repeat wait ( 0 0$1 ) ;
26671: LD_INT 35
26673: PPUSH
26674: CALL_OW 67
// for un in tmp do
26678: LD_ADDR_VAR 0 2
26682: PUSH
26683: LD_VAR 0 3
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26763
// begin if IsDead ( un ) then
26691: LD_VAR 0 2
26695: PPUSH
26696: CALL_OW 301
26700: IFFALSE 26720
// begin tmp := tmp diff un ;
26702: LD_ADDR_VAR 0 3
26706: PUSH
26707: LD_VAR 0 3
26711: PUSH
26712: LD_VAR 0 2
26716: DIFF
26717: ST_TO_ADDR
// continue ;
26718: GO 26688
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26720: LD_VAR 0 2
26724: PPUSH
26725: LD_INT 3
26727: PUSH
26728: LD_INT 22
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PPUSH
26742: CALL_OW 69
26746: PPUSH
26747: LD_VAR 0 2
26751: PPUSH
26752: CALL_OW 74
26756: PPUSH
26757: CALL_OW 115
// end ;
26761: GO 26688
26763: POP
26764: POP
// until not tmp ;
26765: LD_VAR 0 3
26769: NOT
26770: IFFALSE 26671
// end ;
26772: PPOPN 3
26774: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26775: LD_EXP 78
26779: PUSH
26780: LD_EXP 103
26784: AND
26785: IFFALSE 26839
26787: GO 26789
26789: DISABLE
// begin ToLua ( displayTroll(); ) ;
26790: LD_STRING displayTroll();
26792: PPUSH
26793: CALL_OW 559
// wait ( 3 3$00 ) ;
26797: LD_INT 6300
26799: PPUSH
26800: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26804: LD_STRING hideTroll();
26806: PPUSH
26807: CALL_OW 559
// wait ( 1 1$00 ) ;
26811: LD_INT 2100
26813: PPUSH
26814: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26818: LD_STRING displayTroll();
26820: PPUSH
26821: CALL_OW 559
// wait ( 1 1$00 ) ;
26825: LD_INT 2100
26827: PPUSH
26828: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26832: LD_STRING hideTroll();
26834: PPUSH
26835: CALL_OW 559
// end ;
26839: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26840: LD_EXP 78
26844: PUSH
26845: LD_EXP 104
26849: AND
26850: IFFALSE 26913
26852: GO 26854
26854: DISABLE
26855: LD_INT 0
26857: PPUSH
// begin p := 0 ;
26858: LD_ADDR_VAR 0 1
26862: PUSH
26863: LD_INT 0
26865: ST_TO_ADDR
// repeat game_speed := 1 ;
26866: LD_ADDR_OWVAR 65
26870: PUSH
26871: LD_INT 1
26873: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26874: LD_INT 35
26876: PPUSH
26877: CALL_OW 67
// p := p + 1 ;
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: LD_VAR 0 1
26890: PUSH
26891: LD_INT 1
26893: PLUS
26894: ST_TO_ADDR
// until p >= 60 ;
26895: LD_VAR 0 1
26899: PUSH
26900: LD_INT 60
26902: GREATEREQUAL
26903: IFFALSE 26866
// game_speed := 4 ;
26905: LD_ADDR_OWVAR 65
26909: PUSH
26910: LD_INT 4
26912: ST_TO_ADDR
// end ;
26913: PPOPN 1
26915: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26916: LD_EXP 78
26920: PUSH
26921: LD_EXP 105
26925: AND
26926: IFFALSE 27072
26928: GO 26930
26930: DISABLE
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26935: LD_ADDR_VAR 0 1
26939: PUSH
26940: LD_INT 22
26942: PUSH
26943: LD_OWVAR 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 30
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 30
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PPUSH
26984: CALL_OW 69
26988: ST_TO_ADDR
// if not depot then
26989: LD_VAR 0 1
26993: NOT
26994: IFFALSE 26998
// exit ;
26996: GO 27072
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26998: LD_ADDR_VAR 0 2
27002: PUSH
27003: LD_VAR 0 1
27007: PUSH
27008: LD_INT 1
27010: PPUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 12
27020: ARRAY
27021: PPUSH
27022: CALL_OW 274
27026: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27027: LD_VAR 0 2
27031: PPUSH
27032: LD_INT 1
27034: PPUSH
27035: LD_INT 0
27037: PPUSH
27038: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_INT 2
27049: PPUSH
27050: LD_INT 0
27052: PPUSH
27053: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27057: LD_VAR 0 2
27061: PPUSH
27062: LD_INT 3
27064: PPUSH
27065: LD_INT 0
27067: PPUSH
27068: CALL_OW 277
// end ;
27072: PPOPN 2
27074: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27075: LD_EXP 78
27079: PUSH
27080: LD_EXP 106
27084: AND
27085: IFFALSE 27182
27087: GO 27089
27089: DISABLE
27090: LD_INT 0
27092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27093: LD_ADDR_VAR 0 1
27097: PUSH
27098: LD_INT 22
27100: PUSH
27101: LD_OWVAR 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 21
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: LD_INT 23
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: PPUSH
27142: CALL_OW 69
27146: ST_TO_ADDR
// if not tmp then
27147: LD_VAR 0 1
27151: NOT
27152: IFFALSE 27156
// exit ;
27154: GO 27182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 1
27163: PPUSH
27164: LD_VAR 0 1
27168: PPUSH
27169: CALL_OW 12
27173: ARRAY
27174: PPUSH
27175: LD_INT 200
27177: PPUSH
27178: CALL_OW 234
// end ;
27182: PPOPN 1
27184: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27185: LD_EXP 78
27189: PUSH
27190: LD_EXP 107
27194: AND
27195: IFFALSE 27274
27197: GO 27199
27199: DISABLE
27200: LD_INT 0
27202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27203: LD_ADDR_VAR 0 1
27207: PUSH
27208: LD_INT 22
27210: PUSH
27211: LD_OWVAR 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 21
27222: PUSH
27223: LD_INT 2
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PPUSH
27234: CALL_OW 69
27238: ST_TO_ADDR
// if not tmp then
27239: LD_VAR 0 1
27243: NOT
27244: IFFALSE 27248
// exit ;
27246: GO 27274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27248: LD_VAR 0 1
27252: PUSH
27253: LD_INT 1
27255: PPUSH
27256: LD_VAR 0 1
27260: PPUSH
27261: CALL_OW 12
27265: ARRAY
27266: PPUSH
27267: LD_INT 60
27269: PPUSH
27270: CALL_OW 234
// end ;
27274: PPOPN 1
27276: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27277: LD_EXP 78
27281: PUSH
27282: LD_EXP 108
27286: AND
27287: IFFALSE 27386
27289: GO 27291
27291: DISABLE
27292: LD_INT 0
27294: PPUSH
27295: PPUSH
// begin enable ;
27296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27297: LD_ADDR_VAR 0 1
27301: PUSH
27302: LD_INT 22
27304: PUSH
27305: LD_OWVAR 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 61
27316: PUSH
27317: EMPTY
27318: LIST
27319: PUSH
27320: LD_INT 33
27322: PUSH
27323: LD_INT 2
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 69
27339: ST_TO_ADDR
// if not tmp then
27340: LD_VAR 0 1
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27386
// for i in tmp do
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 1
27358: PUSH
27359: FOR_IN
27360: IFFALSE 27384
// if IsControledBy ( i ) then
27362: LD_VAR 0 2
27366: PPUSH
27367: CALL_OW 312
27371: IFFALSE 27382
// ComUnlink ( i ) ;
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL_OW 136
27382: GO 27359
27384: POP
27385: POP
// end ;
27386: PPOPN 2
27388: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27389: LD_EXP 78
27393: PUSH
27394: LD_EXP 109
27398: AND
27399: IFFALSE 27539
27401: GO 27403
27403: DISABLE
27404: LD_INT 0
27406: PPUSH
27407: PPUSH
// begin ToLua ( displayPowell(); ) ;
27408: LD_STRING displayPowell();
27410: PPUSH
27411: CALL_OW 559
// uc_side := 0 ;
27415: LD_ADDR_OWVAR 20
27419: PUSH
27420: LD_INT 0
27422: ST_TO_ADDR
// uc_nation := 2 ;
27423: LD_ADDR_OWVAR 21
27427: PUSH
27428: LD_INT 2
27430: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27431: LD_ADDR_OWVAR 37
27435: PUSH
27436: LD_INT 14
27438: ST_TO_ADDR
// vc_engine := engine_siberite ;
27439: LD_ADDR_OWVAR 39
27443: PUSH
27444: LD_INT 3
27446: ST_TO_ADDR
// vc_control := control_apeman ;
27447: LD_ADDR_OWVAR 38
27451: PUSH
27452: LD_INT 5
27454: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27455: LD_ADDR_OWVAR 40
27459: PUSH
27460: LD_INT 29
27462: ST_TO_ADDR
// un := CreateVehicle ;
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: CALL_OW 45
27472: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_INT 1
27480: PPUSH
27481: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27485: LD_INT 35
27487: PPUSH
27488: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27492: LD_VAR 0 2
27496: PPUSH
27497: LD_INT 22
27499: PUSH
27500: LD_OWVAR 2
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PPUSH
27509: CALL_OW 69
27513: PPUSH
27514: LD_VAR 0 2
27518: PPUSH
27519: CALL_OW 74
27523: PPUSH
27524: CALL_OW 115
// until IsDead ( un ) ;
27528: LD_VAR 0 2
27532: PPUSH
27533: CALL_OW 301
27537: IFFALSE 27485
// end ;
27539: PPOPN 2
27541: END
// every 0 0$1 trigger StreamModeActive and sStu do
27542: LD_EXP 78
27546: PUSH
27547: LD_EXP 117
27551: AND
27552: IFFALSE 27568
27554: GO 27556
27556: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27557: LD_STRING displayStucuk();
27559: PPUSH
27560: CALL_OW 559
// ResetFog ;
27564: CALL_OW 335
// end ;
27568: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27569: LD_EXP 78
27573: PUSH
27574: LD_EXP 110
27578: AND
27579: IFFALSE 27720
27581: GO 27583
27583: DISABLE
27584: LD_INT 0
27586: PPUSH
27587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27588: LD_ADDR_VAR 0 2
27592: PUSH
27593: LD_INT 22
27595: PUSH
27596: LD_OWVAR 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 21
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PPUSH
27619: CALL_OW 69
27623: ST_TO_ADDR
// if not tmp then
27624: LD_VAR 0 2
27628: NOT
27629: IFFALSE 27633
// exit ;
27631: GO 27720
// un := tmp [ rand ( 1 , tmp ) ] ;
27633: LD_ADDR_VAR 0 1
27637: PUSH
27638: LD_VAR 0 2
27642: PUSH
27643: LD_INT 1
27645: PPUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: CALL_OW 12
27655: ARRAY
27656: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_INT 0
27664: PPUSH
27665: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27669: LD_VAR 0 1
27673: PPUSH
27674: LD_OWVAR 3
27678: PUSH
27679: LD_VAR 0 1
27683: DIFF
27684: PPUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 74
27694: PPUSH
27695: CALL_OW 115
// wait ( 0 0$20 ) ;
27699: LD_INT 700
27701: PPUSH
27702: CALL_OW 67
// SetSide ( un , your_side ) ;
27706: LD_VAR 0 1
27710: PPUSH
27711: LD_OWVAR 2
27715: PPUSH
27716: CALL_OW 235
// end ;
27720: PPOPN 2
27722: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27723: LD_EXP 78
27727: PUSH
27728: LD_EXP 111
27732: AND
27733: IFFALSE 27839
27735: GO 27737
27737: DISABLE
27738: LD_INT 0
27740: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27741: LD_ADDR_VAR 0 1
27745: PUSH
27746: LD_INT 22
27748: PUSH
27749: LD_OWVAR 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 30
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 30
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: ST_TO_ADDR
// if not depot then
27795: LD_VAR 0 1
27799: NOT
27800: IFFALSE 27804
// exit ;
27802: GO 27839
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27804: LD_VAR 0 1
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: PPUSH
27813: CALL_OW 250
27817: PPUSH
27818: LD_VAR 0 1
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: CALL_OW 251
27831: PPUSH
27832: LD_INT 70
27834: PPUSH
27835: CALL_OW 495
// end ;
27839: PPOPN 1
27841: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27842: LD_EXP 78
27846: PUSH
27847: LD_EXP 112
27851: AND
27852: IFFALSE 28063
27854: GO 27856
27856: DISABLE
27857: LD_INT 0
27859: PPUSH
27860: PPUSH
27861: PPUSH
27862: PPUSH
27863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27864: LD_ADDR_VAR 0 5
27868: PUSH
27869: LD_INT 22
27871: PUSH
27872: LD_OWVAR 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 21
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PPUSH
27895: CALL_OW 69
27899: ST_TO_ADDR
// if not tmp then
27900: LD_VAR 0 5
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 28063
// for i in tmp do
27909: LD_ADDR_VAR 0 1
27913: PUSH
27914: LD_VAR 0 5
27918: PUSH
27919: FOR_IN
27920: IFFALSE 28061
// begin d := rand ( 0 , 5 ) ;
27922: LD_ADDR_VAR 0 4
27926: PUSH
27927: LD_INT 0
27929: PPUSH
27930: LD_INT 5
27932: PPUSH
27933: CALL_OW 12
27937: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27938: LD_ADDR_VAR 0 2
27942: PUSH
27943: LD_VAR 0 1
27947: PPUSH
27948: CALL_OW 250
27952: PPUSH
27953: LD_VAR 0 4
27957: PPUSH
27958: LD_INT 3
27960: PPUSH
27961: LD_INT 12
27963: PPUSH
27964: CALL_OW 12
27968: PPUSH
27969: CALL_OW 272
27973: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 251
27988: PPUSH
27989: LD_VAR 0 4
27993: PPUSH
27994: LD_INT 3
27996: PPUSH
27997: LD_INT 12
27999: PPUSH
28000: CALL_OW 12
28004: PPUSH
28005: CALL_OW 273
28009: ST_TO_ADDR
// if ValidHex ( x , y ) then
28010: LD_VAR 0 2
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: CALL_OW 488
28024: IFFALSE 28059
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28026: LD_VAR 0 1
28030: PPUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: LD_VAR 0 3
28040: PPUSH
28041: LD_INT 3
28043: PPUSH
28044: LD_INT 6
28046: PPUSH
28047: CALL_OW 12
28051: PPUSH
28052: LD_INT 1
28054: PPUSH
28055: CALL_OW 483
// end ;
28059: GO 27919
28061: POP
28062: POP
// end ;
28063: PPOPN 5
28065: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28066: LD_EXP 78
28070: PUSH
28071: LD_EXP 113
28075: AND
28076: IFFALSE 28170
28078: GO 28080
28080: DISABLE
28081: LD_INT 0
28083: PPUSH
28084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28085: LD_ADDR_VAR 0 2
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_OWVAR 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 32
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 21
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: PPUSH
28127: CALL_OW 69
28131: ST_TO_ADDR
// if not tmp then
28132: LD_VAR 0 2
28136: NOT
28137: IFFALSE 28141
// exit ;
28139: GO 28170
// for i in tmp do
28141: LD_ADDR_VAR 0 1
28145: PUSH
28146: LD_VAR 0 2
28150: PUSH
28151: FOR_IN
28152: IFFALSE 28168
// SetFuel ( i , 0 ) ;
28154: LD_VAR 0 1
28158: PPUSH
28159: LD_INT 0
28161: PPUSH
28162: CALL_OW 240
28166: GO 28151
28168: POP
28169: POP
// end ;
28170: PPOPN 2
28172: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28173: LD_EXP 78
28177: PUSH
28178: LD_EXP 114
28182: AND
28183: IFFALSE 28249
28185: GO 28187
28187: DISABLE
28188: LD_INT 0
28190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28191: LD_ADDR_VAR 0 1
28195: PUSH
28196: LD_INT 22
28198: PUSH
28199: LD_OWVAR 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 30
28210: PUSH
28211: LD_INT 29
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL_OW 69
28226: ST_TO_ADDR
// if not tmp then
28227: LD_VAR 0 1
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28249
// DestroyUnit ( tmp [ 1 ] ) ;
28236: LD_VAR 0 1
28240: PUSH
28241: LD_INT 1
28243: ARRAY
28244: PPUSH
28245: CALL_OW 65
// end ;
28249: PPOPN 1
28251: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28252: LD_EXP 78
28256: PUSH
28257: LD_EXP 116
28261: AND
28262: IFFALSE 28391
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
// begin uc_side := 0 ;
28270: LD_ADDR_OWVAR 20
28274: PUSH
28275: LD_INT 0
28277: ST_TO_ADDR
// uc_nation := nation_arabian ;
28278: LD_ADDR_OWVAR 21
28282: PUSH
28283: LD_INT 2
28285: ST_TO_ADDR
// hc_gallery :=  ;
28286: LD_ADDR_OWVAR 33
28290: PUSH
28291: LD_STRING 
28293: ST_TO_ADDR
// hc_name :=  ;
28294: LD_ADDR_OWVAR 26
28298: PUSH
28299: LD_STRING 
28301: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28302: LD_INT 1
28304: PPUSH
28305: LD_INT 11
28307: PPUSH
28308: LD_INT 10
28310: PPUSH
28311: CALL_OW 380
// un := CreateHuman ;
28315: LD_ADDR_VAR 0 1
28319: PUSH
28320: CALL_OW 44
28324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_INT 1
28332: PPUSH
28333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28337: LD_INT 35
28339: PPUSH
28340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_INT 22
28351: PUSH
28352: LD_OWVAR 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: PPUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 74
28375: PPUSH
28376: CALL_OW 115
// until IsDead ( un ) ;
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 301
28389: IFFALSE 28337
// end ;
28391: PPOPN 1
28393: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28394: LD_EXP 78
28398: PUSH
28399: LD_EXP 118
28403: AND
28404: IFFALSE 28416
28406: GO 28408
28408: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28409: LD_STRING earthquake(getX(game), 0, 32)
28411: PPUSH
28412: CALL_OW 559
28416: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28417: LD_EXP 78
28421: PUSH
28422: LD_EXP 119
28426: AND
28427: IFFALSE 28518
28429: GO 28431
28431: DISABLE
28432: LD_INT 0
28434: PPUSH
// begin enable ;
28435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28436: LD_ADDR_VAR 0 1
28440: PUSH
28441: LD_INT 22
28443: PUSH
28444: LD_OWVAR 2
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 21
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 33
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PPUSH
28478: CALL_OW 69
28482: ST_TO_ADDR
// if not tmp then
28483: LD_VAR 0 1
28487: NOT
28488: IFFALSE 28492
// exit ;
28490: GO 28518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28492: LD_VAR 0 1
28496: PUSH
28497: LD_INT 1
28499: PPUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL_OW 12
28509: ARRAY
28510: PPUSH
28511: LD_INT 1
28513: PPUSH
28514: CALL_OW 234
// end ;
28518: PPOPN 1
28520: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28521: LD_EXP 78
28525: PUSH
28526: LD_EXP 120
28530: AND
28531: IFFALSE 28672
28533: GO 28535
28535: DISABLE
28536: LD_INT 0
28538: PPUSH
28539: PPUSH
28540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 22
28548: PUSH
28549: LD_OWVAR 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 25
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PPUSH
28572: CALL_OW 69
28576: ST_TO_ADDR
// if not tmp then
28577: LD_VAR 0 3
28581: NOT
28582: IFFALSE 28586
// exit ;
28584: GO 28672
// un := tmp [ rand ( 1 , tmp ) ] ;
28586: LD_ADDR_VAR 0 2
28590: PUSH
28591: LD_VAR 0 3
28595: PUSH
28596: LD_INT 1
28598: PPUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: CALL_OW 12
28608: ARRAY
28609: ST_TO_ADDR
// if Crawls ( un ) then
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL_OW 318
28619: IFFALSE 28630
// ComWalk ( un ) ;
28621: LD_VAR 0 2
28625: PPUSH
28626: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28630: LD_VAR 0 2
28634: PPUSH
28635: LD_INT 9
28637: PPUSH
28638: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28642: LD_INT 28
28644: PPUSH
28645: LD_OWVAR 2
28649: PPUSH
28650: LD_INT 2
28652: PPUSH
28653: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28657: LD_INT 29
28659: PPUSH
28660: LD_OWVAR 2
28664: PPUSH
28665: LD_INT 2
28667: PPUSH
28668: CALL_OW 322
// end ;
28672: PPOPN 3
28674: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28675: LD_EXP 78
28679: PUSH
28680: LD_EXP 121
28684: AND
28685: IFFALSE 28796
28687: GO 28689
28689: DISABLE
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
28694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28695: LD_ADDR_VAR 0 3
28699: PUSH
28700: LD_INT 22
28702: PUSH
28703: LD_OWVAR 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 25
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PPUSH
28726: CALL_OW 69
28730: ST_TO_ADDR
// if not tmp then
28731: LD_VAR 0 3
28735: NOT
28736: IFFALSE 28740
// exit ;
28738: GO 28796
// un := tmp [ rand ( 1 , tmp ) ] ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_VAR 0 3
28749: PUSH
28750: LD_INT 1
28752: PPUSH
28753: LD_VAR 0 3
28757: PPUSH
28758: CALL_OW 12
28762: ARRAY
28763: ST_TO_ADDR
// if Crawls ( un ) then
28764: LD_VAR 0 2
28768: PPUSH
28769: CALL_OW 318
28773: IFFALSE 28784
// ComWalk ( un ) ;
28775: LD_VAR 0 2
28779: PPUSH
28780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_INT 8
28791: PPUSH
28792: CALL_OW 336
// end ;
28796: PPOPN 3
28798: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28799: LD_EXP 78
28803: PUSH
28804: LD_EXP 122
28808: AND
28809: IFFALSE 28953
28811: GO 28813
28813: DISABLE
28814: LD_INT 0
28816: PPUSH
28817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28818: LD_ADDR_VAR 0 2
28822: PUSH
28823: LD_INT 22
28825: PUSH
28826: LD_OWVAR 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 21
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: LD_INT 34
28850: PUSH
28851: LD_INT 12
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 34
28860: PUSH
28861: LD_INT 51
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 34
28870: PUSH
28871: LD_INT 32
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: ST_TO_ADDR
// if not tmp then
28894: LD_VAR 0 2
28898: NOT
28899: IFFALSE 28903
// exit ;
28901: GO 28953
// for i in tmp do
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_VAR 0 2
28912: PUSH
28913: FOR_IN
28914: IFFALSE 28951
// if GetCargo ( i , mat_artifact ) = 0 then
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_INT 4
28923: PPUSH
28924: CALL_OW 289
28928: PUSH
28929: LD_INT 0
28931: EQUAL
28932: IFFALSE 28949
// SetCargo ( i , mat_siberit , 100 ) ;
28934: LD_VAR 0 1
28938: PPUSH
28939: LD_INT 3
28941: PPUSH
28942: LD_INT 100
28944: PPUSH
28945: CALL_OW 290
28949: GO 28913
28951: POP
28952: POP
// end ;
28953: PPOPN 2
28955: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28956: LD_EXP 78
28960: PUSH
28961: LD_EXP 123
28965: AND
28966: IFFALSE 29149
28968: GO 28970
28970: DISABLE
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PPUSH
28992: CALL_OW 69
28996: ST_TO_ADDR
// if not tmp then
28997: LD_VAR 0 2
29001: NOT
29002: IFFALSE 29006
// exit ;
29004: GO 29149
// for i := 1 to 2 do
29006: LD_ADDR_VAR 0 1
29010: PUSH
29011: DOUBLE
29012: LD_INT 1
29014: DEC
29015: ST_TO_ADDR
29016: LD_INT 2
29018: PUSH
29019: FOR_TO
29020: IFFALSE 29147
// begin uc_side := your_side ;
29022: LD_ADDR_OWVAR 20
29026: PUSH
29027: LD_OWVAR 2
29031: ST_TO_ADDR
// uc_nation := nation_american ;
29032: LD_ADDR_OWVAR 21
29036: PUSH
29037: LD_INT 1
29039: ST_TO_ADDR
// vc_chassis := us_morphling ;
29040: LD_ADDR_OWVAR 37
29044: PUSH
29045: LD_INT 5
29047: ST_TO_ADDR
// vc_engine := engine_siberite ;
29048: LD_ADDR_OWVAR 39
29052: PUSH
29053: LD_INT 3
29055: ST_TO_ADDR
// vc_control := control_computer ;
29056: LD_ADDR_OWVAR 38
29060: PUSH
29061: LD_INT 3
29063: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29064: LD_ADDR_OWVAR 40
29068: PUSH
29069: LD_INT 10
29071: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29072: LD_VAR 0 2
29076: PUSH
29077: LD_INT 1
29079: ARRAY
29080: PPUSH
29081: CALL_OW 310
29085: NOT
29086: IFFALSE 29133
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29088: CALL_OW 45
29092: PPUSH
29093: LD_VAR 0 2
29097: PUSH
29098: LD_INT 1
29100: ARRAY
29101: PPUSH
29102: CALL_OW 250
29106: PPUSH
29107: LD_VAR 0 2
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PPUSH
29116: CALL_OW 251
29120: PPUSH
29121: LD_INT 12
29123: PPUSH
29124: LD_INT 1
29126: PPUSH
29127: CALL_OW 50
29131: GO 29145
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29133: CALL_OW 45
29137: PPUSH
29138: LD_INT 1
29140: PPUSH
29141: CALL_OW 51
// end ;
29145: GO 29019
29147: POP
29148: POP
// end ;
29149: PPOPN 2
29151: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29152: LD_EXP 78
29156: PUSH
29157: LD_EXP 124
29161: AND
29162: IFFALSE 29384
29164: GO 29166
29166: DISABLE
29167: LD_INT 0
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29175: LD_ADDR_VAR 0 6
29179: PUSH
29180: LD_INT 22
29182: PUSH
29183: LD_OWVAR 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 21
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: LD_INT 23
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 69
29228: ST_TO_ADDR
// if not tmp then
29229: LD_VAR 0 6
29233: NOT
29234: IFFALSE 29238
// exit ;
29236: GO 29384
// s1 := rand ( 1 , 4 ) ;
29238: LD_ADDR_VAR 0 2
29242: PUSH
29243: LD_INT 1
29245: PPUSH
29246: LD_INT 4
29248: PPUSH
29249: CALL_OW 12
29253: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29254: LD_ADDR_VAR 0 4
29258: PUSH
29259: LD_VAR 0 6
29263: PUSH
29264: LD_INT 1
29266: ARRAY
29267: PPUSH
29268: LD_VAR 0 2
29272: PPUSH
29273: CALL_OW 259
29277: ST_TO_ADDR
// if s1 = 1 then
29278: LD_VAR 0 2
29282: PUSH
29283: LD_INT 1
29285: EQUAL
29286: IFFALSE 29306
// s2 := rand ( 2 , 4 ) else
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 2
29295: PPUSH
29296: LD_INT 4
29298: PPUSH
29299: CALL_OW 12
29303: ST_TO_ADDR
29304: GO 29314
// s2 := 1 ;
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_INT 1
29313: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29314: LD_ADDR_VAR 0 5
29318: PUSH
29319: LD_VAR 0 6
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 3
29332: PPUSH
29333: CALL_OW 259
29337: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29338: LD_VAR 0 6
29342: PUSH
29343: LD_INT 1
29345: ARRAY
29346: PPUSH
29347: LD_VAR 0 2
29351: PPUSH
29352: LD_VAR 0 5
29356: PPUSH
29357: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29361: LD_VAR 0 6
29365: PUSH
29366: LD_INT 1
29368: ARRAY
29369: PPUSH
29370: LD_VAR 0 3
29374: PPUSH
29375: LD_VAR 0 4
29379: PPUSH
29380: CALL_OW 237
// end ;
29384: PPOPN 6
29386: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29387: LD_EXP 78
29391: PUSH
29392: LD_EXP 125
29396: AND
29397: IFFALSE 29476
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29405: LD_ADDR_VAR 0 1
29409: PUSH
29410: LD_INT 22
29412: PUSH
29413: LD_OWVAR 2
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 30
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: ST_TO_ADDR
// if not tmp then
29441: LD_VAR 0 1
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL_OW 234
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29479: LD_EXP 78
29483: PUSH
29484: LD_EXP 126
29488: AND
29489: IFFALSE 29601
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: LD_INT 22
29505: PUSH
29506: LD_OWVAR 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 30
29520: PUSH
29521: LD_INT 27
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 30
29530: PUSH
29531: LD_INT 26
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 30
29540: PUSH
29541: LD_INT 28
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PPUSH
29558: CALL_OW 69
29562: ST_TO_ADDR
// if not tmp then
29563: LD_VAR 0 2
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 29601
// for i in tmp do
29572: LD_ADDR_VAR 0 1
29576: PUSH
29577: LD_VAR 0 2
29581: PUSH
29582: FOR_IN
29583: IFFALSE 29599
// SetLives ( i , 1 ) ;
29585: LD_VAR 0 1
29589: PPUSH
29590: LD_INT 1
29592: PPUSH
29593: CALL_OW 234
29597: GO 29582
29599: POP
29600: POP
// end ;
29601: PPOPN 2
29603: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29604: LD_EXP 78
29608: PUSH
29609: LD_EXP 127
29613: AND
29614: IFFALSE 29901
29616: GO 29618
29618: DISABLE
29619: LD_INT 0
29621: PPUSH
29622: PPUSH
29623: PPUSH
// begin i := rand ( 1 , 7 ) ;
29624: LD_ADDR_VAR 0 1
29628: PUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 7
29634: PPUSH
29635: CALL_OW 12
29639: ST_TO_ADDR
// case i of 1 :
29640: LD_VAR 0 1
29644: PUSH
29645: LD_INT 1
29647: DOUBLE
29648: EQUAL
29649: IFTRUE 29653
29651: GO 29663
29653: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29654: LD_STRING earthquake(getX(game), 0, 32)
29656: PPUSH
29657: CALL_OW 559
29661: GO 29901
29663: LD_INT 2
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29671
29669: GO 29685
29671: POP
// begin ToLua ( displayStucuk(); ) ;
29672: LD_STRING displayStucuk();
29674: PPUSH
29675: CALL_OW 559
// ResetFog ;
29679: CALL_OW 335
// end ; 3 :
29683: GO 29901
29685: LD_INT 3
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29797
29693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29694: LD_ADDR_VAR 0 2
29698: PUSH
29699: LD_INT 22
29701: PUSH
29702: LD_OWVAR 2
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 25
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 2
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29901
// un := tmp [ rand ( 1 , tmp ) ] ;
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: LD_INT 1
29751: PPUSH
29752: LD_VAR 0 2
29756: PPUSH
29757: CALL_OW 12
29761: ARRAY
29762: ST_TO_ADDR
// if Crawls ( un ) then
29763: LD_VAR 0 3
29767: PPUSH
29768: CALL_OW 318
29772: IFFALSE 29783
// ComWalk ( un ) ;
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29783: LD_VAR 0 3
29787: PPUSH
29788: LD_INT 8
29790: PPUSH
29791: CALL_OW 336
// end ; 4 :
29795: GO 29901
29797: LD_INT 4
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29879
29805: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29806: LD_ADDR_VAR 0 2
29810: PUSH
29811: LD_INT 22
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 30
29825: PUSH
29826: LD_INT 29
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 69
29841: ST_TO_ADDR
// if not tmp then
29842: LD_VAR 0 2
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29901
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29851: LD_VAR 0 2
29855: PUSH
29856: LD_INT 1
29858: ARRAY
29859: PPUSH
29860: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29864: LD_VAR 0 2
29868: PUSH
29869: LD_INT 1
29871: ARRAY
29872: PPUSH
29873: CALL_OW 65
// end ; 5 .. 7 :
29877: GO 29901
29879: LD_INT 5
29881: DOUBLE
29882: GREATEREQUAL
29883: IFFALSE 29891
29885: LD_INT 7
29887: DOUBLE
29888: LESSEQUAL
29889: IFTRUE 29893
29891: GO 29900
29893: POP
// StreamSibBomb ; end ;
29894: CALL 26138 0 0
29898: GO 29901
29900: POP
// end ;
29901: PPOPN 3
29903: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29904: LD_EXP 78
29908: PUSH
29909: LD_EXP 128
29913: AND
29914: IFFALSE 30070
29916: GO 29918
29918: DISABLE
29919: LD_INT 0
29921: PPUSH
29922: PPUSH
29923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29924: LD_ADDR_VAR 0 2
29928: PUSH
29929: LD_INT 81
29931: PUSH
29932: LD_OWVAR 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 21
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 21
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PPUSH
29973: CALL_OW 69
29977: ST_TO_ADDR
// if not tmp then
29978: LD_VAR 0 2
29982: NOT
29983: IFFALSE 29987
// exit ;
29985: GO 30070
// p := 0 ;
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 0
29994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29995: LD_INT 35
29997: PPUSH
29998: CALL_OW 67
// p := p + 1 ;
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_VAR 0 3
30011: PUSH
30012: LD_INT 1
30014: PLUS
30015: ST_TO_ADDR
// for i in tmp do
30016: LD_ADDR_VAR 0 1
30020: PUSH
30021: LD_VAR 0 2
30025: PUSH
30026: FOR_IN
30027: IFFALSE 30058
// if GetLives ( i ) < 1000 then
30029: LD_VAR 0 1
30033: PPUSH
30034: CALL_OW 256
30038: PUSH
30039: LD_INT 1000
30041: LESS
30042: IFFALSE 30056
// SetLives ( i , 1000 ) ;
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_INT 1000
30051: PPUSH
30052: CALL_OW 234
30056: GO 30026
30058: POP
30059: POP
// until p > 20 ;
30060: LD_VAR 0 3
30064: PUSH
30065: LD_INT 20
30067: GREATER
30068: IFFALSE 29995
// end ;
30070: PPOPN 3
30072: END
// every 0 0$1 trigger StreamModeActive and sTime do
30073: LD_EXP 78
30077: PUSH
30078: LD_EXP 129
30082: AND
30083: IFFALSE 30118
30085: GO 30087
30087: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30088: LD_INT 28
30090: PPUSH
30091: LD_OWVAR 2
30095: PPUSH
30096: LD_INT 2
30098: PPUSH
30099: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30103: LD_INT 30
30105: PPUSH
30106: LD_OWVAR 2
30110: PPUSH
30111: LD_INT 2
30113: PPUSH
30114: CALL_OW 322
// end ;
30118: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30119: LD_EXP 78
30123: PUSH
30124: LD_EXP 130
30128: AND
30129: IFFALSE 30250
30131: GO 30133
30133: DISABLE
30134: LD_INT 0
30136: PPUSH
30137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30138: LD_ADDR_VAR 0 2
30142: PUSH
30143: LD_INT 22
30145: PUSH
30146: LD_OWVAR 2
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 21
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: LD_INT 23
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PPUSH
30187: CALL_OW 69
30191: ST_TO_ADDR
// if not tmp then
30192: LD_VAR 0 2
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30250
// for i in tmp do
30201: LD_ADDR_VAR 0 1
30205: PUSH
30206: LD_VAR 0 2
30210: PUSH
30211: FOR_IN
30212: IFFALSE 30248
// begin if Crawls ( i ) then
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 318
30223: IFFALSE 30234
// ComWalk ( i ) ;
30225: LD_VAR 0 1
30229: PPUSH
30230: CALL_OW 138
// SetClass ( i , 2 ) ;
30234: LD_VAR 0 1
30238: PPUSH
30239: LD_INT 2
30241: PPUSH
30242: CALL_OW 336
// end ;
30246: GO 30211
30248: POP
30249: POP
// end ;
30250: PPOPN 2
30252: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30253: LD_EXP 78
30257: PUSH
30258: LD_EXP 131
30262: AND
30263: IFFALSE 30551
30265: GO 30267
30267: DISABLE
30268: LD_INT 0
30270: PPUSH
30271: PPUSH
30272: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30273: LD_OWVAR 2
30277: PPUSH
30278: LD_INT 9
30280: PPUSH
30281: LD_INT 1
30283: PPUSH
30284: LD_INT 1
30286: PPUSH
30287: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30291: LD_INT 9
30293: PPUSH
30294: LD_OWVAR 2
30298: PPUSH
30299: CALL_OW 343
// uc_side := 9 ;
30303: LD_ADDR_OWVAR 20
30307: PUSH
30308: LD_INT 9
30310: ST_TO_ADDR
// uc_nation := 2 ;
30311: LD_ADDR_OWVAR 21
30315: PUSH
30316: LD_INT 2
30318: ST_TO_ADDR
// hc_name := Dark Warrior ;
30319: LD_ADDR_OWVAR 26
30323: PUSH
30324: LD_STRING Dark Warrior
30326: ST_TO_ADDR
// hc_gallery :=  ;
30327: LD_ADDR_OWVAR 33
30331: PUSH
30332: LD_STRING 
30334: ST_TO_ADDR
// hc_noskilllimit := true ;
30335: LD_ADDR_OWVAR 76
30339: PUSH
30340: LD_INT 1
30342: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30343: LD_ADDR_OWVAR 31
30347: PUSH
30348: LD_INT 30
30350: PUSH
30351: LD_INT 30
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 30
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// un := CreateHuman ;
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: CALL_OW 44
30375: ST_TO_ADDR
// hc_noskilllimit := false ;
30376: LD_ADDR_OWVAR 76
30380: PUSH
30381: LD_INT 0
30383: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30384: LD_VAR 0 3
30388: PPUSH
30389: LD_INT 1
30391: PPUSH
30392: CALL_OW 51
// ToLua ( playRanger() ) ;
30396: LD_STRING playRanger()
30398: PPUSH
30399: CALL_OW 559
// p := 0 ;
30403: LD_ADDR_VAR 0 2
30407: PUSH
30408: LD_INT 0
30410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30411: LD_INT 35
30413: PPUSH
30414: CALL_OW 67
// p := p + 1 ;
30418: LD_ADDR_VAR 0 2
30422: PUSH
30423: LD_VAR 0 2
30427: PUSH
30428: LD_INT 1
30430: PLUS
30431: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30432: LD_VAR 0 3
30436: PPUSH
30437: CALL_OW 256
30441: PUSH
30442: LD_INT 1000
30444: LESS
30445: IFFALSE 30459
// SetLives ( un , 1000 ) ;
30447: LD_VAR 0 3
30451: PPUSH
30452: LD_INT 1000
30454: PPUSH
30455: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30459: LD_VAR 0 3
30463: PPUSH
30464: LD_INT 81
30466: PUSH
30467: LD_OWVAR 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 91
30478: PUSH
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 30
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: PPUSH
30501: LD_VAR 0 3
30505: PPUSH
30506: CALL_OW 74
30510: PPUSH
30511: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30515: LD_VAR 0 2
30519: PUSH
30520: LD_INT 80
30522: GREATER
30523: PUSH
30524: LD_VAR 0 3
30528: PPUSH
30529: CALL_OW 301
30533: OR
30534: IFFALSE 30411
// if un then
30536: LD_VAR 0 3
30540: IFFALSE 30551
// RemoveUnit ( un ) ;
30542: LD_VAR 0 3
30546: PPUSH
30547: CALL_OW 64
// end ;
30551: PPOPN 3
30553: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30554: LD_EXP 132
30558: IFFALSE 30674
30560: GO 30562
30562: DISABLE
30563: LD_INT 0
30565: PPUSH
30566: PPUSH
30567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30568: LD_ADDR_VAR 0 2
30572: PUSH
30573: LD_INT 81
30575: PUSH
30576: LD_OWVAR 2
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 21
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 69
30603: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30604: LD_STRING playComputer()
30606: PPUSH
30607: CALL_OW 559
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30674
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30672
// for j := 1 to 4 do
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: DOUBLE
30639: LD_INT 1
30641: DEC
30642: ST_TO_ADDR
30643: LD_INT 4
30645: PUSH
30646: FOR_TO
30647: IFFALSE 30668
// SetSkill ( i , j , 10 ) ;
30649: LD_VAR 0 1
30653: PPUSH
30654: LD_VAR 0 3
30658: PPUSH
30659: LD_INT 10
30661: PPUSH
30662: CALL_OW 237
30666: GO 30646
30668: POP
30669: POP
30670: GO 30630
30672: POP
30673: POP
// end ;
30674: PPOPN 3
30676: END
// every 0 0$1 trigger s30 do var i , tmp ;
30677: LD_EXP 133
30681: IFFALSE 30750
30683: GO 30685
30685: DISABLE
30686: LD_INT 0
30688: PPUSH
30689: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30690: LD_ADDR_VAR 0 2
30694: PUSH
30695: LD_INT 22
30697: PUSH
30698: LD_OWVAR 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PPUSH
30707: CALL_OW 69
30711: ST_TO_ADDR
// if not tmp then
30712: LD_VAR 0 2
30716: NOT
30717: IFFALSE 30721
// exit ;
30719: GO 30750
// for i in tmp do
30721: LD_ADDR_VAR 0 1
30725: PUSH
30726: LD_VAR 0 2
30730: PUSH
30731: FOR_IN
30732: IFFALSE 30748
// SetLives ( i , 300 ) ;
30734: LD_VAR 0 1
30738: PPUSH
30739: LD_INT 300
30741: PPUSH
30742: CALL_OW 234
30746: GO 30731
30748: POP
30749: POP
// end ;
30750: PPOPN 2
30752: END
// every 0 0$1 trigger s60 do var i , tmp ;
30753: LD_EXP 134
30757: IFFALSE 30826
30759: GO 30761
30761: DISABLE
30762: LD_INT 0
30764: PPUSH
30765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30766: LD_ADDR_VAR 0 2
30770: PUSH
30771: LD_INT 22
30773: PUSH
30774: LD_OWVAR 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PPUSH
30783: CALL_OW 69
30787: ST_TO_ADDR
// if not tmp then
30788: LD_VAR 0 2
30792: NOT
30793: IFFALSE 30797
// exit ;
30795: GO 30826
// for i in tmp do
30797: LD_ADDR_VAR 0 1
30801: PUSH
30802: LD_VAR 0 2
30806: PUSH
30807: FOR_IN
30808: IFFALSE 30824
// SetLives ( i , 600 ) ;
30810: LD_VAR 0 1
30814: PPUSH
30815: LD_INT 600
30817: PPUSH
30818: CALL_OW 234
30822: GO 30807
30824: POP
30825: POP
// end ;
30826: PPOPN 2
30828: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30829: LD_INT 0
30831: PPUSH
// case cmd of 301 :
30832: LD_VAR 0 1
30836: PUSH
30837: LD_INT 301
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30877
30845: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30846: LD_VAR 0 6
30850: PPUSH
30851: LD_VAR 0 7
30855: PPUSH
30856: LD_VAR 0 8
30860: PPUSH
30861: LD_VAR 0 4
30865: PPUSH
30866: LD_VAR 0 5
30870: PPUSH
30871: CALL 32078 0 5
30875: GO 30998
30877: LD_INT 302
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30885
30883: GO 30922
30885: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30886: LD_VAR 0 6
30890: PPUSH
30891: LD_VAR 0 7
30895: PPUSH
30896: LD_VAR 0 8
30900: PPUSH
30901: LD_VAR 0 9
30905: PPUSH
30906: LD_VAR 0 4
30910: PPUSH
30911: LD_VAR 0 5
30915: PPUSH
30916: CALL 32169 0 6
30920: GO 30998
30922: LD_INT 303
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30967
30930: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30931: LD_VAR 0 6
30935: PPUSH
30936: LD_VAR 0 7
30940: PPUSH
30941: LD_VAR 0 8
30945: PPUSH
30946: LD_VAR 0 9
30950: PPUSH
30951: LD_VAR 0 4
30955: PPUSH
30956: LD_VAR 0 5
30960: PPUSH
30961: CALL 31003 0 6
30965: GO 30998
30967: LD_INT 304
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 30997
30975: POP
// hHackTeleport ( unit , x , y ) ; end ;
30976: LD_VAR 0 2
30980: PPUSH
30981: LD_VAR 0 4
30985: PPUSH
30986: LD_VAR 0 5
30990: PPUSH
30991: CALL 32762 0 3
30995: GO 30998
30997: POP
// end ;
30998: LD_VAR 0 12
31002: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31003: LD_INT 0
31005: PPUSH
31006: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31007: LD_VAR 0 1
31011: PUSH
31012: LD_INT 1
31014: LESS
31015: PUSH
31016: LD_VAR 0 1
31020: PUSH
31021: LD_INT 3
31023: GREATER
31024: OR
31025: PUSH
31026: LD_VAR 0 5
31030: PPUSH
31031: LD_VAR 0 6
31035: PPUSH
31036: CALL_OW 428
31040: OR
31041: IFFALSE 31045
// exit ;
31043: GO 31765
// uc_side := your_side ;
31045: LD_ADDR_OWVAR 20
31049: PUSH
31050: LD_OWVAR 2
31054: ST_TO_ADDR
// uc_nation := nation ;
31055: LD_ADDR_OWVAR 21
31059: PUSH
31060: LD_VAR 0 1
31064: ST_TO_ADDR
// bc_level = 1 ;
31065: LD_ADDR_OWVAR 43
31069: PUSH
31070: LD_INT 1
31072: ST_TO_ADDR
// case btype of 1 :
31073: LD_VAR 0 2
31077: PUSH
31078: LD_INT 1
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31097
31086: POP
// bc_type := b_depot ; 2 :
31087: LD_ADDR_OWVAR 42
31091: PUSH
31092: LD_INT 0
31094: ST_TO_ADDR
31095: GO 31709
31097: LD_INT 2
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31116
31105: POP
// bc_type := b_warehouse ; 3 :
31106: LD_ADDR_OWVAR 42
31110: PUSH
31111: LD_INT 1
31113: ST_TO_ADDR
31114: GO 31709
31116: LD_INT 3
31118: DOUBLE
31119: EQUAL
31120: IFTRUE 31124
31122: GO 31135
31124: POP
// bc_type := b_lab ; 4 .. 9 :
31125: LD_ADDR_OWVAR 42
31129: PUSH
31130: LD_INT 6
31132: ST_TO_ADDR
31133: GO 31709
31135: LD_INT 4
31137: DOUBLE
31138: GREATEREQUAL
31139: IFFALSE 31147
31141: LD_INT 9
31143: DOUBLE
31144: LESSEQUAL
31145: IFTRUE 31149
31147: GO 31201
31149: POP
// begin bc_type := b_lab_half ;
31150: LD_ADDR_OWVAR 42
31154: PUSH
31155: LD_INT 7
31157: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31158: LD_ADDR_OWVAR 44
31162: PUSH
31163: LD_INT 10
31165: PUSH
31166: LD_INT 11
31168: PUSH
31169: LD_INT 12
31171: PUSH
31172: LD_INT 15
31174: PUSH
31175: LD_INT 14
31177: PUSH
31178: LD_INT 13
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: PUSH
31189: LD_VAR 0 2
31193: PUSH
31194: LD_INT 3
31196: MINUS
31197: ARRAY
31198: ST_TO_ADDR
// end ; 10 .. 13 :
31199: GO 31709
31201: LD_INT 10
31203: DOUBLE
31204: GREATEREQUAL
31205: IFFALSE 31213
31207: LD_INT 13
31209: DOUBLE
31210: LESSEQUAL
31211: IFTRUE 31215
31213: GO 31292
31215: POP
// begin bc_type := b_lab_full ;
31216: LD_ADDR_OWVAR 42
31220: PUSH
31221: LD_INT 8
31223: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31224: LD_ADDR_OWVAR 44
31228: PUSH
31229: LD_INT 10
31231: PUSH
31232: LD_INT 12
31234: PUSH
31235: LD_INT 14
31237: PUSH
31238: LD_INT 13
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: PUSH
31247: LD_VAR 0 2
31251: PUSH
31252: LD_INT 9
31254: MINUS
31255: ARRAY
31256: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31257: LD_ADDR_OWVAR 45
31261: PUSH
31262: LD_INT 11
31264: PUSH
31265: LD_INT 15
31267: PUSH
31268: LD_INT 12
31270: PUSH
31271: LD_INT 15
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: PUSH
31280: LD_VAR 0 2
31284: PUSH
31285: LD_INT 9
31287: MINUS
31288: ARRAY
31289: ST_TO_ADDR
// end ; 14 :
31290: GO 31709
31292: LD_INT 14
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31311
31300: POP
// bc_type := b_workshop ; 15 :
31301: LD_ADDR_OWVAR 42
31305: PUSH
31306: LD_INT 2
31308: ST_TO_ADDR
31309: GO 31709
31311: LD_INT 15
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31330
31319: POP
// bc_type := b_factory ; 16 :
31320: LD_ADDR_OWVAR 42
31324: PUSH
31325: LD_INT 3
31327: ST_TO_ADDR
31328: GO 31709
31330: LD_INT 16
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31349
31338: POP
// bc_type := b_ext_gun ; 17 :
31339: LD_ADDR_OWVAR 42
31343: PUSH
31344: LD_INT 17
31346: ST_TO_ADDR
31347: GO 31709
31349: LD_INT 17
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31385
31357: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31358: LD_ADDR_OWVAR 42
31362: PUSH
31363: LD_INT 19
31365: PUSH
31366: LD_INT 23
31368: PUSH
31369: LD_INT 19
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: PUSH
31377: LD_VAR 0 1
31381: ARRAY
31382: ST_TO_ADDR
31383: GO 31709
31385: LD_INT 18
31387: DOUBLE
31388: EQUAL
31389: IFTRUE 31393
31391: GO 31404
31393: POP
// bc_type := b_ext_radar ; 19 :
31394: LD_ADDR_OWVAR 42
31398: PUSH
31399: LD_INT 20
31401: ST_TO_ADDR
31402: GO 31709
31404: LD_INT 19
31406: DOUBLE
31407: EQUAL
31408: IFTRUE 31412
31410: GO 31423
31412: POP
// bc_type := b_ext_radio ; 20 :
31413: LD_ADDR_OWVAR 42
31417: PUSH
31418: LD_INT 22
31420: ST_TO_ADDR
31421: GO 31709
31423: LD_INT 20
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31442
31431: POP
// bc_type := b_ext_siberium ; 21 :
31432: LD_ADDR_OWVAR 42
31436: PUSH
31437: LD_INT 21
31439: ST_TO_ADDR
31440: GO 31709
31442: LD_INT 21
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31461
31450: POP
// bc_type := b_ext_computer ; 22 :
31451: LD_ADDR_OWVAR 42
31455: PUSH
31456: LD_INT 24
31458: ST_TO_ADDR
31459: GO 31709
31461: LD_INT 22
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31480
31469: POP
// bc_type := b_ext_track ; 23 :
31470: LD_ADDR_OWVAR 42
31474: PUSH
31475: LD_INT 16
31477: ST_TO_ADDR
31478: GO 31709
31480: LD_INT 23
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31499
31488: POP
// bc_type := b_ext_laser ; 24 :
31489: LD_ADDR_OWVAR 42
31493: PUSH
31494: LD_INT 25
31496: ST_TO_ADDR
31497: GO 31709
31499: LD_INT 24
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31518
31507: POP
// bc_type := b_control_tower ; 25 :
31508: LD_ADDR_OWVAR 42
31512: PUSH
31513: LD_INT 36
31515: ST_TO_ADDR
31516: GO 31709
31518: LD_INT 25
31520: DOUBLE
31521: EQUAL
31522: IFTRUE 31526
31524: GO 31537
31526: POP
// bc_type := b_breastwork ; 26 :
31527: LD_ADDR_OWVAR 42
31531: PUSH
31532: LD_INT 31
31534: ST_TO_ADDR
31535: GO 31709
31537: LD_INT 26
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 31556
31545: POP
// bc_type := b_bunker ; 27 :
31546: LD_ADDR_OWVAR 42
31550: PUSH
31551: LD_INT 32
31553: ST_TO_ADDR
31554: GO 31709
31556: LD_INT 27
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31575
31564: POP
// bc_type := b_turret ; 28 :
31565: LD_ADDR_OWVAR 42
31569: PUSH
31570: LD_INT 33
31572: ST_TO_ADDR
31573: GO 31709
31575: LD_INT 28
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31594
31583: POP
// bc_type := b_armoury ; 29 :
31584: LD_ADDR_OWVAR 42
31588: PUSH
31589: LD_INT 4
31591: ST_TO_ADDR
31592: GO 31709
31594: LD_INT 29
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31613
31602: POP
// bc_type := b_barracks ; 30 :
31603: LD_ADDR_OWVAR 42
31607: PUSH
31608: LD_INT 5
31610: ST_TO_ADDR
31611: GO 31709
31613: LD_INT 30
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31632
31621: POP
// bc_type := b_solar_power ; 31 :
31622: LD_ADDR_OWVAR 42
31626: PUSH
31627: LD_INT 27
31629: ST_TO_ADDR
31630: GO 31709
31632: LD_INT 31
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31651
31640: POP
// bc_type := b_oil_power ; 32 :
31641: LD_ADDR_OWVAR 42
31645: PUSH
31646: LD_INT 26
31648: ST_TO_ADDR
31649: GO 31709
31651: LD_INT 32
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31670
31659: POP
// bc_type := b_siberite_power ; 33 :
31660: LD_ADDR_OWVAR 42
31664: PUSH
31665: LD_INT 28
31667: ST_TO_ADDR
31668: GO 31709
31670: LD_INT 33
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31689
31678: POP
// bc_type := b_oil_mine ; 34 :
31679: LD_ADDR_OWVAR 42
31683: PUSH
31684: LD_INT 29
31686: ST_TO_ADDR
31687: GO 31709
31689: LD_INT 34
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31708
31697: POP
// bc_type := b_siberite_mine ; end ;
31698: LD_ADDR_OWVAR 42
31702: PUSH
31703: LD_INT 30
31705: ST_TO_ADDR
31706: GO 31709
31708: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31709: LD_ADDR_VAR 0 8
31713: PUSH
31714: LD_VAR 0 5
31718: PPUSH
31719: LD_VAR 0 6
31723: PPUSH
31724: LD_VAR 0 3
31728: PPUSH
31729: CALL_OW 47
31733: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31734: LD_OWVAR 42
31738: PUSH
31739: LD_INT 32
31741: PUSH
31742: LD_INT 33
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: IN
31749: IFFALSE 31765
// PlaceWeaponTurret ( b , weapon ) ;
31751: LD_VAR 0 8
31755: PPUSH
31756: LD_VAR 0 4
31760: PPUSH
31761: CALL_OW 431
// end ;
31765: LD_VAR 0 7
31769: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31770: LD_INT 0
31772: PPUSH
31773: PPUSH
31774: PPUSH
31775: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31776: LD_ADDR_VAR 0 4
31780: PUSH
31781: LD_INT 22
31783: PUSH
31784: LD_OWVAR 2
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: LD_INT 30
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PPUSH
31825: CALL_OW 69
31829: ST_TO_ADDR
// if not tmp then
31830: LD_VAR 0 4
31834: NOT
31835: IFFALSE 31839
// exit ;
31837: GO 31898
// for i in tmp do
31839: LD_ADDR_VAR 0 2
31843: PUSH
31844: LD_VAR 0 4
31848: PUSH
31849: FOR_IN
31850: IFFALSE 31896
// for j = 1 to 3 do
31852: LD_ADDR_VAR 0 3
31856: PUSH
31857: DOUBLE
31858: LD_INT 1
31860: DEC
31861: ST_TO_ADDR
31862: LD_INT 3
31864: PUSH
31865: FOR_TO
31866: IFFALSE 31892
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31868: LD_VAR 0 2
31872: PPUSH
31873: CALL_OW 274
31877: PPUSH
31878: LD_VAR 0 3
31882: PPUSH
31883: LD_INT 99999
31885: PPUSH
31886: CALL_OW 277
31890: GO 31865
31892: POP
31893: POP
31894: GO 31849
31896: POP
31897: POP
// end ;
31898: LD_VAR 0 1
31902: RET
// export function hHackSetLevel10 ; var i , j ; begin
31903: LD_INT 0
31905: PPUSH
31906: PPUSH
31907: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_INT 21
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PPUSH
31923: CALL_OW 69
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31981
// if IsSelected ( i ) then
31931: LD_VAR 0 2
31935: PPUSH
31936: CALL_OW 306
31940: IFFALSE 31979
// begin for j := 1 to 4 do
31942: LD_ADDR_VAR 0 3
31946: PUSH
31947: DOUBLE
31948: LD_INT 1
31950: DEC
31951: ST_TO_ADDR
31952: LD_INT 4
31954: PUSH
31955: FOR_TO
31956: IFFALSE 31977
// SetSkill ( i , j , 10 ) ;
31958: LD_VAR 0 2
31962: PPUSH
31963: LD_VAR 0 3
31967: PPUSH
31968: LD_INT 10
31970: PPUSH
31971: CALL_OW 237
31975: GO 31955
31977: POP
31978: POP
// end ;
31979: GO 31928
31981: POP
31982: POP
// end ;
31983: LD_VAR 0 1
31987: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31988: LD_INT 0
31990: PPUSH
31991: PPUSH
31992: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31993: LD_ADDR_VAR 0 2
31997: PUSH
31998: LD_INT 22
32000: PUSH
32001: LD_OWVAR 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 21
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PPUSH
32024: CALL_OW 69
32028: PUSH
32029: FOR_IN
32030: IFFALSE 32071
// begin for j := 1 to 4 do
32032: LD_ADDR_VAR 0 3
32036: PUSH
32037: DOUBLE
32038: LD_INT 1
32040: DEC
32041: ST_TO_ADDR
32042: LD_INT 4
32044: PUSH
32045: FOR_TO
32046: IFFALSE 32067
// SetSkill ( i , j , 10 ) ;
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_INT 10
32060: PPUSH
32061: CALL_OW 237
32065: GO 32045
32067: POP
32068: POP
// end ;
32069: GO 32029
32071: POP
32072: POP
// end ;
32073: LD_VAR 0 1
32077: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32078: LD_INT 0
32080: PPUSH
// uc_side := your_side ;
32081: LD_ADDR_OWVAR 20
32085: PUSH
32086: LD_OWVAR 2
32090: ST_TO_ADDR
// uc_nation := nation ;
32091: LD_ADDR_OWVAR 21
32095: PUSH
32096: LD_VAR 0 1
32100: ST_TO_ADDR
// InitHc ;
32101: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32105: LD_INT 0
32107: PPUSH
32108: LD_VAR 0 2
32112: PPUSH
32113: LD_VAR 0 3
32117: PPUSH
32118: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32122: LD_VAR 0 4
32126: PPUSH
32127: LD_VAR 0 5
32131: PPUSH
32132: CALL_OW 428
32136: PUSH
32137: LD_INT 0
32139: EQUAL
32140: IFFALSE 32164
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32142: CALL_OW 44
32146: PPUSH
32147: LD_VAR 0 4
32151: PPUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: LD_INT 1
32159: PPUSH
32160: CALL_OW 48
// end ;
32164: LD_VAR 0 6
32168: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
// uc_side := your_side ;
32173: LD_ADDR_OWVAR 20
32177: PUSH
32178: LD_OWVAR 2
32182: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32183: LD_VAR 0 1
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: LD_INT 3
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: IN
32210: IFFALSE 32222
// uc_nation := nation_american else
32212: LD_ADDR_OWVAR 21
32216: PUSH
32217: LD_INT 1
32219: ST_TO_ADDR
32220: GO 32265
// if chassis in [ 11 , 12 , 13 , 14 ] then
32222: LD_VAR 0 1
32226: PUSH
32227: LD_INT 11
32229: PUSH
32230: LD_INT 12
32232: PUSH
32233: LD_INT 13
32235: PUSH
32236: LD_INT 14
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: IN
32245: IFFALSE 32257
// uc_nation := nation_arabian else
32247: LD_ADDR_OWVAR 21
32251: PUSH
32252: LD_INT 2
32254: ST_TO_ADDR
32255: GO 32265
// uc_nation := nation_russian ;
32257: LD_ADDR_OWVAR 21
32261: PUSH
32262: LD_INT 3
32264: ST_TO_ADDR
// vc_chassis := chassis ;
32265: LD_ADDR_OWVAR 37
32269: PUSH
32270: LD_VAR 0 1
32274: ST_TO_ADDR
// vc_engine := engine ;
32275: LD_ADDR_OWVAR 39
32279: PUSH
32280: LD_VAR 0 2
32284: ST_TO_ADDR
// vc_control := control ;
32285: LD_ADDR_OWVAR 38
32289: PUSH
32290: LD_VAR 0 3
32294: ST_TO_ADDR
// vc_weapon := weapon ;
32295: LD_ADDR_OWVAR 40
32299: PUSH
32300: LD_VAR 0 4
32304: ST_TO_ADDR
// un := CreateVehicle ;
32305: LD_ADDR_VAR 0 8
32309: PUSH
32310: CALL_OW 45
32314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32315: LD_VAR 0 8
32319: PPUSH
32320: LD_INT 0
32322: PPUSH
32323: LD_INT 5
32325: PPUSH
32326: CALL_OW 12
32330: PPUSH
32331: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32335: LD_VAR 0 8
32339: PPUSH
32340: LD_VAR 0 5
32344: PPUSH
32345: LD_VAR 0 6
32349: PPUSH
32350: LD_INT 1
32352: PPUSH
32353: CALL_OW 48
// end ;
32357: LD_VAR 0 7
32361: RET
// export hInvincible ; every 1 do
32362: GO 32364
32364: DISABLE
// hInvincible := [ ] ;
32365: LD_ADDR_EXP 135
32369: PUSH
32370: EMPTY
32371: ST_TO_ADDR
32372: END
// every 10 do var i ;
32373: GO 32375
32375: DISABLE
32376: LD_INT 0
32378: PPUSH
// begin enable ;
32379: ENABLE
// if not hInvincible then
32380: LD_EXP 135
32384: NOT
32385: IFFALSE 32389
// exit ;
32387: GO 32433
// for i in hInvincible do
32389: LD_ADDR_VAR 0 1
32393: PUSH
32394: LD_EXP 135
32398: PUSH
32399: FOR_IN
32400: IFFALSE 32431
// if GetLives ( i ) < 1000 then
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 256
32411: PUSH
32412: LD_INT 1000
32414: LESS
32415: IFFALSE 32429
// SetLives ( i , 1000 ) ;
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_INT 1000
32424: PPUSH
32425: CALL_OW 234
32429: GO 32399
32431: POP
32432: POP
// end ;
32433: PPOPN 1
32435: END
// export function hHackInvincible ; var i ; begin
32436: LD_INT 0
32438: PPUSH
32439: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32440: LD_ADDR_VAR 0 2
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 21
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: PPUSH
32473: CALL_OW 69
32477: PUSH
32478: FOR_IN
32479: IFFALSE 32540
// if IsSelected ( i ) then
32481: LD_VAR 0 2
32485: PPUSH
32486: CALL_OW 306
32490: IFFALSE 32538
// begin if i in hInvincible then
32492: LD_VAR 0 2
32496: PUSH
32497: LD_EXP 135
32501: IN
32502: IFFALSE 32522
// hInvincible := hInvincible diff i else
32504: LD_ADDR_EXP 135
32508: PUSH
32509: LD_EXP 135
32513: PUSH
32514: LD_VAR 0 2
32518: DIFF
32519: ST_TO_ADDR
32520: GO 32538
// hInvincible := hInvincible union i ;
32522: LD_ADDR_EXP 135
32526: PUSH
32527: LD_EXP 135
32531: PUSH
32532: LD_VAR 0 2
32536: UNION
32537: ST_TO_ADDR
// end ;
32538: GO 32478
32540: POP
32541: POP
// end ;
32542: LD_VAR 0 1
32546: RET
// export function hHackInvisible ; var i , j ; begin
32547: LD_INT 0
32549: PPUSH
32550: PPUSH
32551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32552: LD_ADDR_VAR 0 2
32556: PUSH
32557: LD_INT 21
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PPUSH
32567: CALL_OW 69
32571: PUSH
32572: FOR_IN
32573: IFFALSE 32597
// if IsSelected ( i ) then
32575: LD_VAR 0 2
32579: PPUSH
32580: CALL_OW 306
32584: IFFALSE 32595
// ComForceInvisible ( i ) ;
32586: LD_VAR 0 2
32590: PPUSH
32591: CALL_OW 496
32595: GO 32572
32597: POP
32598: POP
// end ;
32599: LD_VAR 0 1
32603: RET
// export function hHackChangeYourSide ; begin
32604: LD_INT 0
32606: PPUSH
// if your_side = 8 then
32607: LD_OWVAR 2
32611: PUSH
32612: LD_INT 8
32614: EQUAL
32615: IFFALSE 32627
// your_side := 0 else
32617: LD_ADDR_OWVAR 2
32621: PUSH
32622: LD_INT 0
32624: ST_TO_ADDR
32625: GO 32641
// your_side := your_side + 1 ;
32627: LD_ADDR_OWVAR 2
32631: PUSH
32632: LD_OWVAR 2
32636: PUSH
32637: LD_INT 1
32639: PLUS
32640: ST_TO_ADDR
// end ;
32641: LD_VAR 0 1
32645: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
32650: PPUSH
// for i in all_units do
32651: LD_ADDR_VAR 0 2
32655: PUSH
32656: LD_OWVAR 3
32660: PUSH
32661: FOR_IN
32662: IFFALSE 32740
// if IsSelected ( i ) then
32664: LD_VAR 0 2
32668: PPUSH
32669: CALL_OW 306
32673: IFFALSE 32738
// begin j := GetSide ( i ) ;
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: LD_VAR 0 2
32684: PPUSH
32685: CALL_OW 255
32689: ST_TO_ADDR
// if j = 8 then
32690: LD_VAR 0 3
32694: PUSH
32695: LD_INT 8
32697: EQUAL
32698: IFFALSE 32710
// j := 0 else
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_INT 0
32707: ST_TO_ADDR
32708: GO 32724
// j := j + 1 ;
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: LD_VAR 0 3
32719: PUSH
32720: LD_INT 1
32722: PLUS
32723: ST_TO_ADDR
// SetSide ( i , j ) ;
32724: LD_VAR 0 2
32728: PPUSH
32729: LD_VAR 0 3
32733: PPUSH
32734: CALL_OW 235
// end ;
32738: GO 32661
32740: POP
32741: POP
// end ;
32742: LD_VAR 0 1
32746: RET
// export function hHackFog ; begin
32747: LD_INT 0
32749: PPUSH
// FogOff ( true ) ;
32750: LD_INT 1
32752: PPUSH
32753: CALL_OW 344
// end ;
32757: LD_VAR 0 1
32761: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32762: LD_INT 0
32764: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32765: LD_VAR 0 1
32769: PPUSH
32770: LD_VAR 0 2
32774: PPUSH
32775: LD_VAR 0 3
32779: PPUSH
32780: LD_INT 1
32782: PPUSH
32783: LD_INT 1
32785: PPUSH
32786: CALL_OW 483
// CenterOnXY ( x , y ) ;
32790: LD_VAR 0 2
32794: PPUSH
32795: LD_VAR 0 3
32799: PPUSH
32800: CALL_OW 84
// end ; end_of_file
32804: LD_VAR 0 4
32808: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32809: LD_INT 0
32811: PPUSH
32812: PPUSH
32813: PPUSH
32814: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 264
32824: PUSH
32825: LD_EXP 63
32829: EQUAL
32830: IFFALSE 32902
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32832: LD_INT 68
32834: PPUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 255
32844: PPUSH
32845: CALL_OW 321
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: IFFALSE 32865
// eff := 70 else
32855: LD_ADDR_VAR 0 4
32859: PUSH
32860: LD_INT 70
32862: ST_TO_ADDR
32863: GO 32873
// eff := 30 ;
32865: LD_ADDR_VAR 0 4
32869: PUSH
32870: LD_INT 30
32872: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 250
32882: PPUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 251
32892: PPUSH
32893: LD_VAR 0 4
32897: PPUSH
32898: CALL_OW 495
// end ; end ;
32902: LD_VAR 0 2
32906: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32907: LD_INT 0
32909: PPUSH
// end ;
32910: LD_VAR 0 4
32914: RET
// export function SOS_Command ( cmd ) ; begin
32915: LD_INT 0
32917: PPUSH
// end ;
32918: LD_VAR 0 2
32922: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32923: LD_INT 0
32925: PPUSH
// end ;
32926: LD_VAR 0 6
32930: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
// if not vehicle or not factory then
32935: LD_VAR 0 1
32939: NOT
32940: PUSH
32941: LD_VAR 0 2
32945: NOT
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33182
// if factoryWaypoints >= factory then
32951: LD_EXP 136
32955: PUSH
32956: LD_VAR 0 2
32960: GREATEREQUAL
32961: IFFALSE 33182
// if factoryWaypoints [ factory ] then
32963: LD_EXP 136
32967: PUSH
32968: LD_VAR 0 2
32972: ARRAY
32973: IFFALSE 33182
// begin if GetControl ( vehicle ) = control_manual then
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 263
32984: PUSH
32985: LD_INT 1
32987: EQUAL
32988: IFFALSE 33069
// begin driver := IsDrivenBy ( vehicle ) ;
32990: LD_ADDR_VAR 0 4
32994: PUSH
32995: LD_VAR 0 1
32999: PPUSH
33000: CALL_OW 311
33004: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33005: LD_VAR 0 4
33009: PPUSH
33010: LD_EXP 136
33014: PUSH
33015: LD_VAR 0 2
33019: ARRAY
33020: PUSH
33021: LD_INT 1
33023: ARRAY
33024: PPUSH
33025: LD_EXP 136
33029: PUSH
33030: LD_VAR 0 2
33034: ARRAY
33035: PUSH
33036: LD_INT 2
33038: ARRAY
33039: PPUSH
33040: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33044: LD_VAR 0 4
33048: PPUSH
33049: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33053: LD_VAR 0 4
33057: PPUSH
33058: LD_VAR 0 2
33062: PPUSH
33063: CALL_OW 180
// end else
33067: GO 33182
// if GetControl ( vehicle ) = control_remote then
33069: LD_VAR 0 1
33073: PPUSH
33074: CALL_OW 263
33078: PUSH
33079: LD_INT 2
33081: EQUAL
33082: IFFALSE 33143
// begin wait ( 0 0$2 ) ;
33084: LD_INT 70
33086: PPUSH
33087: CALL_OW 67
// if Connect ( vehicle ) then
33091: LD_VAR 0 1
33095: PPUSH
33096: CALL 45406 0 1
33100: IFFALSE 33141
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33102: LD_VAR 0 1
33106: PPUSH
33107: LD_EXP 136
33111: PUSH
33112: LD_VAR 0 2
33116: ARRAY
33117: PUSH
33118: LD_INT 1
33120: ARRAY
33121: PPUSH
33122: LD_EXP 136
33126: PUSH
33127: LD_VAR 0 2
33131: ARRAY
33132: PUSH
33133: LD_INT 2
33135: ARRAY
33136: PPUSH
33137: CALL_OW 171
// end else
33141: GO 33182
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33143: LD_VAR 0 1
33147: PPUSH
33148: LD_EXP 136
33152: PUSH
33153: LD_VAR 0 2
33157: ARRAY
33158: PUSH
33159: LD_INT 1
33161: ARRAY
33162: PPUSH
33163: LD_EXP 136
33167: PUSH
33168: LD_VAR 0 2
33172: ARRAY
33173: PUSH
33174: LD_INT 2
33176: ARRAY
33177: PPUSH
33178: CALL_OW 171
// end ; end ;
33182: LD_VAR 0 3
33186: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33187: LD_INT 0
33189: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33190: LD_VAR 0 1
33194: PUSH
33195: LD_INT 250
33197: EQUAL
33198: PUSH
33199: LD_VAR 0 2
33203: PPUSH
33204: CALL_OW 264
33208: PUSH
33209: LD_EXP 66
33213: EQUAL
33214: AND
33215: IFFALSE 33236
// MinerPlaceMine ( unit , x , y ) ;
33217: LD_VAR 0 2
33221: PPUSH
33222: LD_VAR 0 4
33226: PPUSH
33227: LD_VAR 0 5
33231: PPUSH
33232: CALL 35964 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33236: LD_VAR 0 1
33240: PUSH
33241: LD_INT 251
33243: EQUAL
33244: PUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: CALL_OW 264
33254: PUSH
33255: LD_EXP 66
33259: EQUAL
33260: AND
33261: IFFALSE 33282
// MinerDetonateMine ( unit , x , y ) ;
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_VAR 0 4
33272: PPUSH
33273: LD_VAR 0 5
33277: PPUSH
33278: CALL 36241 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33282: LD_VAR 0 1
33286: PUSH
33287: LD_INT 252
33289: EQUAL
33290: PUSH
33291: LD_VAR 0 2
33295: PPUSH
33296: CALL_OW 264
33300: PUSH
33301: LD_EXP 66
33305: EQUAL
33306: AND
33307: IFFALSE 33328
// MinerCreateMinefield ( unit , x , y ) ;
33309: LD_VAR 0 2
33313: PPUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: LD_VAR 0 5
33323: PPUSH
33324: CALL 36658 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33328: LD_VAR 0 1
33332: PUSH
33333: LD_INT 253
33335: EQUAL
33336: PUSH
33337: LD_VAR 0 2
33341: PPUSH
33342: CALL_OW 257
33346: PUSH
33347: LD_INT 5
33349: EQUAL
33350: AND
33351: IFFALSE 33372
// ComBinocular ( unit , x , y ) ;
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 4
33362: PPUSH
33363: LD_VAR 0 5
33367: PPUSH
33368: CALL 37029 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33372: LD_VAR 0 1
33376: PUSH
33377: LD_INT 254
33379: EQUAL
33380: PUSH
33381: LD_VAR 0 2
33385: PPUSH
33386: CALL_OW 264
33390: PUSH
33391: LD_EXP 61
33395: EQUAL
33396: AND
33397: PUSH
33398: LD_VAR 0 3
33402: PPUSH
33403: CALL_OW 263
33407: PUSH
33408: LD_INT 3
33410: EQUAL
33411: AND
33412: IFFALSE 33428
// HackDestroyVehicle ( unit , selectedUnit ) ;
33414: LD_VAR 0 2
33418: PPUSH
33419: LD_VAR 0 3
33423: PPUSH
33424: CALL 35324 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33428: LD_VAR 0 1
33432: PUSH
33433: LD_INT 255
33435: EQUAL
33436: PUSH
33437: LD_VAR 0 2
33441: PPUSH
33442: CALL_OW 264
33446: PUSH
33447: LD_INT 14
33449: PUSH
33450: LD_INT 53
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: IN
33457: AND
33458: PUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: LD_VAR 0 5
33468: PPUSH
33469: CALL_OW 488
33473: AND
33474: IFFALSE 33498
// CutTreeXYR ( unit , x , y , 12 ) ;
33476: LD_VAR 0 2
33480: PPUSH
33481: LD_VAR 0 4
33485: PPUSH
33486: LD_VAR 0 5
33490: PPUSH
33491: LD_INT 12
33493: PPUSH
33494: CALL 33890 0 4
// if cmd = 256 then
33498: LD_VAR 0 1
33502: PUSH
33503: LD_INT 256
33505: EQUAL
33506: IFFALSE 33527
// SetFactoryWaypoint ( unit , x , y ) ;
33508: LD_VAR 0 2
33512: PPUSH
33513: LD_VAR 0 4
33517: PPUSH
33518: LD_VAR 0 5
33522: PPUSH
33523: CALL 33532 0 3
// end ;
33527: LD_VAR 0 6
33531: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33532: LD_INT 0
33534: PPUSH
33535: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33536: LD_VAR 0 1
33540: NOT
33541: PUSH
33542: LD_VAR 0 2
33546: PPUSH
33547: LD_VAR 0 3
33551: PPUSH
33552: CALL_OW 488
33556: NOT
33557: OR
33558: PUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL_OW 266
33568: PUSH
33569: LD_INT 3
33571: NONEQUAL
33572: PUSH
33573: LD_VAR 0 1
33577: PPUSH
33578: CALL_OW 247
33582: PUSH
33583: LD_INT 1
33585: EQUAL
33586: NOT
33587: AND
33588: OR
33589: IFFALSE 33593
// exit ;
33591: GO 33742
// if GetType ( factory ) = unit_human then
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL_OW 247
33602: PUSH
33603: LD_INT 1
33605: EQUAL
33606: IFFALSE 33623
// factory := IsInUnit ( factory ) ;
33608: LD_ADDR_VAR 0 1
33612: PUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 310
33622: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 266
33632: PUSH
33633: LD_INT 3
33635: NONEQUAL
33636: IFFALSE 33640
// exit ;
33638: GO 33742
// if HexInfo ( x , y ) = factory then
33640: LD_VAR 0 2
33644: PPUSH
33645: LD_VAR 0 3
33649: PPUSH
33650: CALL_OW 428
33654: PUSH
33655: LD_VAR 0 1
33659: EQUAL
33660: IFFALSE 33687
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33662: LD_ADDR_EXP 136
33666: PUSH
33667: LD_EXP 136
33671: PPUSH
33672: LD_VAR 0 1
33676: PPUSH
33677: LD_INT 0
33679: PPUSH
33680: CALL_OW 1
33684: ST_TO_ADDR
33685: GO 33738
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33687: LD_ADDR_EXP 136
33691: PUSH
33692: LD_EXP 136
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL_OW 255
33711: PUSH
33712: LD_VAR 0 1
33716: PUSH
33717: LD_VAR 0 2
33721: PUSH
33722: LD_VAR 0 3
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: PPUSH
33733: CALL_OW 1
33737: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33738: CALL 33747 0 0
// end ;
33742: LD_VAR 0 4
33746: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33751: LD_STRING resetFactoryWaypoint();
33753: PPUSH
33754: CALL_OW 559
// if factoryWaypoints then
33758: LD_EXP 136
33762: IFFALSE 33885
// begin for i := 1 to factoryWaypoints do
33764: LD_ADDR_VAR 0 2
33768: PUSH
33769: DOUBLE
33770: LD_INT 1
33772: DEC
33773: ST_TO_ADDR
33774: LD_EXP 136
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33883
// if factoryWaypoints [ i ] then
33782: LD_EXP 136
33786: PUSH
33787: LD_VAR 0 2
33791: ARRAY
33792: IFFALSE 33881
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33794: LD_STRING setFactoryWaypointXY(
33796: PUSH
33797: LD_EXP 136
33801: PUSH
33802: LD_VAR 0 2
33806: ARRAY
33807: PUSH
33808: LD_INT 1
33810: ARRAY
33811: STR
33812: PUSH
33813: LD_STRING ,
33815: STR
33816: PUSH
33817: LD_EXP 136
33821: PUSH
33822: LD_VAR 0 2
33826: ARRAY
33827: PUSH
33828: LD_INT 2
33830: ARRAY
33831: STR
33832: PUSH
33833: LD_STRING ,
33835: STR
33836: PUSH
33837: LD_EXP 136
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: PUSH
33848: LD_INT 3
33850: ARRAY
33851: STR
33852: PUSH
33853: LD_STRING ,
33855: STR
33856: PUSH
33857: LD_EXP 136
33861: PUSH
33862: LD_VAR 0 2
33866: ARRAY
33867: PUSH
33868: LD_INT 4
33870: ARRAY
33871: STR
33872: PUSH
33873: LD_STRING )
33875: STR
33876: PPUSH
33877: CALL_OW 559
33881: GO 33779
33883: POP
33884: POP
// end ; end ;
33885: LD_VAR 0 1
33889: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33901: LD_VAR 0 1
33905: NOT
33906: PUSH
33907: LD_VAR 0 2
33911: PPUSH
33912: LD_VAR 0 3
33916: PPUSH
33917: CALL_OW 488
33921: NOT
33922: OR
33923: PUSH
33924: LD_VAR 0 4
33928: NOT
33929: OR
33930: IFFALSE 33934
// exit ;
33932: GO 34274
// list := [ ] ;
33934: LD_ADDR_VAR 0 13
33938: PUSH
33939: EMPTY
33940: ST_TO_ADDR
// if x - r < 0 then
33941: LD_VAR 0 2
33945: PUSH
33946: LD_VAR 0 4
33950: MINUS
33951: PUSH
33952: LD_INT 0
33954: LESS
33955: IFFALSE 33967
// min_x := 0 else
33957: LD_ADDR_VAR 0 7
33961: PUSH
33962: LD_INT 0
33964: ST_TO_ADDR
33965: GO 33983
// min_x := x - r ;
33967: LD_ADDR_VAR 0 7
33971: PUSH
33972: LD_VAR 0 2
33976: PUSH
33977: LD_VAR 0 4
33981: MINUS
33982: ST_TO_ADDR
// if y - r < 0 then
33983: LD_VAR 0 3
33987: PUSH
33988: LD_VAR 0 4
33992: MINUS
33993: PUSH
33994: LD_INT 0
33996: LESS
33997: IFFALSE 34009
// min_y := 0 else
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: LD_INT 0
34006: ST_TO_ADDR
34007: GO 34025
// min_y := y - r ;
34009: LD_ADDR_VAR 0 8
34013: PUSH
34014: LD_VAR 0 3
34018: PUSH
34019: LD_VAR 0 4
34023: MINUS
34024: ST_TO_ADDR
// max_x := x + r ;
34025: LD_ADDR_VAR 0 9
34029: PUSH
34030: LD_VAR 0 2
34034: PUSH
34035: LD_VAR 0 4
34039: PLUS
34040: ST_TO_ADDR
// max_y := y + r ;
34041: LD_ADDR_VAR 0 10
34045: PUSH
34046: LD_VAR 0 3
34050: PUSH
34051: LD_VAR 0 4
34055: PLUS
34056: ST_TO_ADDR
// for _x = min_x to max_x do
34057: LD_ADDR_VAR 0 11
34061: PUSH
34062: DOUBLE
34063: LD_VAR 0 7
34067: DEC
34068: ST_TO_ADDR
34069: LD_VAR 0 9
34073: PUSH
34074: FOR_TO
34075: IFFALSE 34192
// for _y = min_y to max_y do
34077: LD_ADDR_VAR 0 12
34081: PUSH
34082: DOUBLE
34083: LD_VAR 0 8
34087: DEC
34088: ST_TO_ADDR
34089: LD_VAR 0 10
34093: PUSH
34094: FOR_TO
34095: IFFALSE 34188
// begin if not ValidHex ( _x , _y ) then
34097: LD_VAR 0 11
34101: PPUSH
34102: LD_VAR 0 12
34106: PPUSH
34107: CALL_OW 488
34111: NOT
34112: IFFALSE 34116
// continue ;
34114: GO 34094
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34116: LD_VAR 0 11
34120: PPUSH
34121: LD_VAR 0 12
34125: PPUSH
34126: CALL_OW 351
34130: PUSH
34131: LD_VAR 0 11
34135: PPUSH
34136: LD_VAR 0 12
34140: PPUSH
34141: CALL_OW 554
34145: AND
34146: IFFALSE 34186
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34148: LD_ADDR_VAR 0 13
34152: PUSH
34153: LD_VAR 0 13
34157: PPUSH
34158: LD_VAR 0 13
34162: PUSH
34163: LD_INT 1
34165: PLUS
34166: PPUSH
34167: LD_VAR 0 11
34171: PUSH
34172: LD_VAR 0 12
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: CALL_OW 2
34185: ST_TO_ADDR
// end ;
34186: GO 34094
34188: POP
34189: POP
34190: GO 34074
34192: POP
34193: POP
// if not list then
34194: LD_VAR 0 13
34198: NOT
34199: IFFALSE 34203
// exit ;
34201: GO 34274
// for i in list do
34203: LD_ADDR_VAR 0 6
34207: PUSH
34208: LD_VAR 0 13
34212: PUSH
34213: FOR_IN
34214: IFFALSE 34272
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34216: LD_VAR 0 1
34220: PPUSH
34221: LD_STRING M
34223: PUSH
34224: LD_VAR 0 6
34228: PUSH
34229: LD_INT 1
34231: ARRAY
34232: PUSH
34233: LD_VAR 0 6
34237: PUSH
34238: LD_INT 2
34240: ARRAY
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: PUSH
34263: EMPTY
34264: LIST
34265: PPUSH
34266: CALL_OW 447
34270: GO 34213
34272: POP
34273: POP
// end ;
34274: LD_VAR 0 5
34278: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34279: LD_EXP 137
34283: NOT
34284: IFFALSE 34334
34286: GO 34288
34288: DISABLE
// begin initHack := true ;
34289: LD_ADDR_EXP 137
34293: PUSH
34294: LD_INT 1
34296: ST_TO_ADDR
// hackTanks := [ ] ;
34297: LD_ADDR_EXP 138
34301: PUSH
34302: EMPTY
34303: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34304: LD_ADDR_EXP 139
34308: PUSH
34309: EMPTY
34310: ST_TO_ADDR
// hackLimit := 3 ;
34311: LD_ADDR_EXP 140
34315: PUSH
34316: LD_INT 3
34318: ST_TO_ADDR
// hackDist := 12 ;
34319: LD_ADDR_EXP 141
34323: PUSH
34324: LD_INT 12
34326: ST_TO_ADDR
// hackCounter := [ ] ;
34327: LD_ADDR_EXP 142
34331: PUSH
34332: EMPTY
34333: ST_TO_ADDR
// end ;
34334: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34335: LD_EXP 137
34339: PUSH
34340: LD_INT 34
34342: PUSH
34343: LD_EXP 61
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 69
34356: AND
34357: IFFALSE 34612
34359: GO 34361
34361: DISABLE
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
// begin enable ;
34366: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34367: LD_ADDR_VAR 0 1
34371: PUSH
34372: LD_INT 34
34374: PUSH
34375: LD_EXP 61
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PPUSH
34384: CALL_OW 69
34388: PUSH
34389: FOR_IN
34390: IFFALSE 34610
// begin if not i in hackTanks then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_EXP 138
34401: IN
34402: NOT
34403: IFFALSE 34486
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34405: LD_ADDR_EXP 138
34409: PUSH
34410: LD_EXP 138
34414: PPUSH
34415: LD_EXP 138
34419: PUSH
34420: LD_INT 1
34422: PLUS
34423: PPUSH
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 1
34433: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34434: LD_ADDR_EXP 139
34438: PUSH
34439: LD_EXP 139
34443: PPUSH
34444: LD_EXP 139
34448: PUSH
34449: LD_INT 1
34451: PLUS
34452: PPUSH
34453: EMPTY
34454: PPUSH
34455: CALL_OW 1
34459: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34460: LD_ADDR_EXP 142
34464: PUSH
34465: LD_EXP 142
34469: PPUSH
34470: LD_EXP 142
34474: PUSH
34475: LD_INT 1
34477: PLUS
34478: PPUSH
34479: EMPTY
34480: PPUSH
34481: CALL_OW 1
34485: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 302
34495: NOT
34496: IFFALSE 34509
// begin HackUnlinkAll ( i ) ;
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL 34615 0 1
// continue ;
34507: GO 34389
// end ; HackCheckCapturedStatus ( i ) ;
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL 35058 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34518: LD_ADDR_VAR 0 2
34522: PUSH
34523: LD_INT 81
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 255
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 33
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 91
34552: PUSH
34553: LD_VAR 0 1
34557: PUSH
34558: LD_EXP 141
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 50
34570: PUSH
34571: EMPTY
34572: LIST
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: PPUSH
34580: CALL_OW 69
34584: ST_TO_ADDR
// if not tmp then
34585: LD_VAR 0 2
34589: NOT
34590: IFFALSE 34594
// continue ;
34592: GO 34389
// HackLink ( i , tmp ) ;
34594: LD_VAR 0 1
34598: PPUSH
34599: LD_VAR 0 2
34603: PPUSH
34604: CALL 34751 0 2
// end ;
34608: GO 34389
34610: POP
34611: POP
// end ;
34612: PPOPN 2
34614: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34615: LD_INT 0
34617: PPUSH
34618: PPUSH
34619: PPUSH
// if not hack in hackTanks then
34620: LD_VAR 0 1
34624: PUSH
34625: LD_EXP 138
34629: IN
34630: NOT
34631: IFFALSE 34635
// exit ;
34633: GO 34746
// index := GetElementIndex ( hackTanks , hack ) ;
34635: LD_ADDR_VAR 0 4
34639: PUSH
34640: LD_EXP 138
34644: PPUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: CALL 42220 0 2
34654: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34655: LD_EXP 139
34659: PUSH
34660: LD_VAR 0 4
34664: ARRAY
34665: IFFALSE 34746
// begin for i in hackTanksCaptured [ index ] do
34667: LD_ADDR_VAR 0 3
34671: PUSH
34672: LD_EXP 139
34676: PUSH
34677: LD_VAR 0 4
34681: ARRAY
34682: PUSH
34683: FOR_IN
34684: IFFALSE 34710
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34686: LD_VAR 0 3
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: PPUSH
34695: LD_VAR 0 3
34699: PUSH
34700: LD_INT 2
34702: ARRAY
34703: PPUSH
34704: CALL_OW 235
34708: GO 34683
34710: POP
34711: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34712: LD_ADDR_EXP 139
34716: PUSH
34717: LD_EXP 139
34721: PPUSH
34722: LD_VAR 0 4
34726: PPUSH
34727: EMPTY
34728: PPUSH
34729: CALL_OW 1
34733: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34734: LD_VAR 0 1
34738: PPUSH
34739: LD_INT 0
34741: PPUSH
34742: CALL_OW 505
// end ; end ;
34746: LD_VAR 0 2
34750: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
// if not hack in hackTanks or not vehicles then
34756: LD_VAR 0 1
34760: PUSH
34761: LD_EXP 138
34765: IN
34766: NOT
34767: PUSH
34768: LD_VAR 0 2
34772: NOT
34773: OR
34774: IFFALSE 34778
// exit ;
34776: GO 35053
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34778: LD_ADDR_VAR 0 2
34782: PUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: LD_INT 1
34795: PPUSH
34796: LD_INT 1
34798: PPUSH
34799: CALL 42870 0 4
34803: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34804: LD_ADDR_VAR 0 5
34808: PUSH
34809: LD_EXP 138
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL 42220 0 2
34823: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34824: LD_EXP 139
34828: PUSH
34829: LD_VAR 0 5
34833: ARRAY
34834: PUSH
34835: LD_EXP 140
34839: LESS
34840: IFFALSE 35029
// begin for i := 1 to vehicles do
34842: LD_ADDR_VAR 0 4
34846: PUSH
34847: DOUBLE
34848: LD_INT 1
34850: DEC
34851: ST_TO_ADDR
34852: LD_VAR 0 2
34856: PUSH
34857: FOR_TO
34858: IFFALSE 35027
// begin if hackTanksCaptured [ index ] = hackLimit then
34860: LD_EXP 139
34864: PUSH
34865: LD_VAR 0 5
34869: ARRAY
34870: PUSH
34871: LD_EXP 140
34875: EQUAL
34876: IFFALSE 34880
// break ;
34878: GO 35027
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34880: LD_ADDR_EXP 142
34884: PUSH
34885: LD_EXP 142
34889: PPUSH
34890: LD_VAR 0 5
34894: PPUSH
34895: LD_EXP 142
34899: PUSH
34900: LD_VAR 0 5
34904: ARRAY
34905: PUSH
34906: LD_INT 1
34908: PLUS
34909: PPUSH
34910: CALL_OW 1
34914: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34915: LD_ADDR_EXP 139
34919: PUSH
34920: LD_EXP 139
34924: PPUSH
34925: LD_VAR 0 5
34929: PUSH
34930: LD_EXP 139
34934: PUSH
34935: LD_VAR 0 5
34939: ARRAY
34940: PUSH
34941: LD_INT 1
34943: PLUS
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PPUSH
34949: LD_VAR 0 2
34953: PUSH
34954: LD_VAR 0 4
34958: ARRAY
34959: PUSH
34960: LD_VAR 0 2
34964: PUSH
34965: LD_VAR 0 4
34969: ARRAY
34970: PPUSH
34971: CALL_OW 255
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PPUSH
34980: CALL 42435 0 3
34984: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34985: LD_VAR 0 2
34989: PUSH
34990: LD_VAR 0 4
34994: ARRAY
34995: PPUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 255
35005: PPUSH
35006: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35010: LD_VAR 0 2
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: PPUSH
35021: CALL_OW 141
// end ;
35025: GO 34857
35027: POP
35028: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35029: LD_VAR 0 1
35033: PPUSH
35034: LD_EXP 139
35038: PUSH
35039: LD_VAR 0 5
35043: ARRAY
35044: PUSH
35045: LD_INT 0
35047: PLUS
35048: PPUSH
35049: CALL_OW 505
// end ;
35053: LD_VAR 0 3
35057: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35058: LD_INT 0
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
// if not hack in hackTanks then
35064: LD_VAR 0 1
35068: PUSH
35069: LD_EXP 138
35073: IN
35074: NOT
35075: IFFALSE 35079
// exit ;
35077: GO 35319
// index := GetElementIndex ( hackTanks , hack ) ;
35079: LD_ADDR_VAR 0 4
35083: PUSH
35084: LD_EXP 138
35088: PPUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL 42220 0 2
35098: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: DOUBLE
35105: LD_EXP 139
35109: PUSH
35110: LD_VAR 0 4
35114: ARRAY
35115: INC
35116: ST_TO_ADDR
35117: LD_INT 1
35119: PUSH
35120: FOR_DOWNTO
35121: IFFALSE 35293
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35123: LD_ADDR_VAR 0 5
35127: PUSH
35128: LD_EXP 139
35132: PUSH
35133: LD_VAR 0 4
35137: ARRAY
35138: PUSH
35139: LD_VAR 0 3
35143: ARRAY
35144: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35145: LD_VAR 0 5
35149: PUSH
35150: LD_INT 1
35152: ARRAY
35153: PPUSH
35154: CALL_OW 302
35158: NOT
35159: PUSH
35160: LD_VAR 0 5
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: PPUSH
35169: CALL_OW 255
35173: PUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: CALL_OW 255
35183: NONEQUAL
35184: OR
35185: IFFALSE 35291
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35187: LD_VAR 0 5
35191: PUSH
35192: LD_INT 1
35194: ARRAY
35195: PPUSH
35196: CALL_OW 305
35200: PUSH
35201: LD_VAR 0 5
35205: PUSH
35206: LD_INT 1
35208: ARRAY
35209: PPUSH
35210: CALL_OW 255
35214: PUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 255
35224: EQUAL
35225: AND
35226: IFFALSE 35250
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35228: LD_VAR 0 5
35232: PUSH
35233: LD_INT 1
35235: ARRAY
35236: PPUSH
35237: LD_VAR 0 5
35241: PUSH
35242: LD_INT 2
35244: ARRAY
35245: PPUSH
35246: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35250: LD_ADDR_EXP 139
35254: PUSH
35255: LD_EXP 139
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_EXP 139
35269: PUSH
35270: LD_VAR 0 4
35274: ARRAY
35275: PPUSH
35276: LD_VAR 0 3
35280: PPUSH
35281: CALL_OW 3
35285: PPUSH
35286: CALL_OW 1
35290: ST_TO_ADDR
// end ; end ;
35291: GO 35120
35293: POP
35294: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35295: LD_VAR 0 1
35299: PPUSH
35300: LD_EXP 139
35304: PUSH
35305: LD_VAR 0 4
35309: ARRAY
35310: PUSH
35311: LD_INT 0
35313: PLUS
35314: PPUSH
35315: CALL_OW 505
// end ;
35319: LD_VAR 0 2
35323: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35324: LD_INT 0
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
// if not hack in hackTanks then
35330: LD_VAR 0 1
35334: PUSH
35335: LD_EXP 138
35339: IN
35340: NOT
35341: IFFALSE 35345
// exit ;
35343: GO 35430
// index := GetElementIndex ( hackTanks , hack ) ;
35345: LD_ADDR_VAR 0 5
35349: PUSH
35350: LD_EXP 138
35354: PPUSH
35355: LD_VAR 0 1
35359: PPUSH
35360: CALL 42220 0 2
35364: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: DOUBLE
35371: LD_INT 1
35373: DEC
35374: ST_TO_ADDR
35375: LD_EXP 139
35379: PUSH
35380: LD_VAR 0 5
35384: ARRAY
35385: PUSH
35386: FOR_TO
35387: IFFALSE 35428
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35389: LD_EXP 139
35393: PUSH
35394: LD_VAR 0 5
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 4
35404: ARRAY
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PUSH
35410: LD_VAR 0 2
35414: EQUAL
35415: IFFALSE 35426
// KillUnit ( vehicle ) ;
35417: LD_VAR 0 2
35421: PPUSH
35422: CALL_OW 66
35426: GO 35386
35428: POP
35429: POP
// end ;
35430: LD_VAR 0 3
35434: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35435: LD_EXP 143
35439: NOT
35440: IFFALSE 35475
35442: GO 35444
35444: DISABLE
// begin initMiner := true ;
35445: LD_ADDR_EXP 143
35449: PUSH
35450: LD_INT 1
35452: ST_TO_ADDR
// minersList := [ ] ;
35453: LD_ADDR_EXP 144
35457: PUSH
35458: EMPTY
35459: ST_TO_ADDR
// minerMinesList := [ ] ;
35460: LD_ADDR_EXP 145
35464: PUSH
35465: EMPTY
35466: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35467: LD_ADDR_EXP 146
35471: PUSH
35472: LD_INT 5
35474: ST_TO_ADDR
// end ;
35475: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35476: LD_EXP 143
35480: PUSH
35481: LD_INT 34
35483: PUSH
35484: LD_EXP 66
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PPUSH
35493: CALL_OW 69
35497: AND
35498: IFFALSE 35961
35500: GO 35502
35502: DISABLE
35503: LD_INT 0
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
// begin enable ;
35509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35510: LD_ADDR_VAR 0 1
35514: PUSH
35515: LD_INT 34
35517: PUSH
35518: LD_EXP 66
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PPUSH
35527: CALL_OW 69
35531: PUSH
35532: FOR_IN
35533: IFFALSE 35605
// begin if not i in minersList then
35535: LD_VAR 0 1
35539: PUSH
35540: LD_EXP 144
35544: IN
35545: NOT
35546: IFFALSE 35603
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35548: LD_ADDR_EXP 144
35552: PUSH
35553: LD_EXP 144
35557: PPUSH
35558: LD_EXP 144
35562: PUSH
35563: LD_INT 1
35565: PLUS
35566: PPUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 1
35576: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35577: LD_ADDR_EXP 145
35581: PUSH
35582: LD_EXP 145
35586: PPUSH
35587: LD_EXP 145
35591: PUSH
35592: LD_INT 1
35594: PLUS
35595: PPUSH
35596: EMPTY
35597: PPUSH
35598: CALL_OW 1
35602: ST_TO_ADDR
// end end ;
35603: GO 35532
35605: POP
35606: POP
// for i := minerMinesList downto 1 do
35607: LD_ADDR_VAR 0 1
35611: PUSH
35612: DOUBLE
35613: LD_EXP 145
35617: INC
35618: ST_TO_ADDR
35619: LD_INT 1
35621: PUSH
35622: FOR_DOWNTO
35623: IFFALSE 35959
// begin if IsLive ( minersList [ i ] ) then
35625: LD_EXP 144
35629: PUSH
35630: LD_VAR 0 1
35634: ARRAY
35635: PPUSH
35636: CALL_OW 300
35640: IFFALSE 35668
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35642: LD_EXP 144
35646: PUSH
35647: LD_VAR 0 1
35651: ARRAY
35652: PPUSH
35653: LD_EXP 145
35657: PUSH
35658: LD_VAR 0 1
35662: ARRAY
35663: PPUSH
35664: CALL_OW 505
// if not minerMinesList [ i ] then
35668: LD_EXP 145
35672: PUSH
35673: LD_VAR 0 1
35677: ARRAY
35678: NOT
35679: IFFALSE 35683
// continue ;
35681: GO 35622
// for j := minerMinesList [ i ] downto 1 do
35683: LD_ADDR_VAR 0 2
35687: PUSH
35688: DOUBLE
35689: LD_EXP 145
35693: PUSH
35694: LD_VAR 0 1
35698: ARRAY
35699: INC
35700: ST_TO_ADDR
35701: LD_INT 1
35703: PUSH
35704: FOR_DOWNTO
35705: IFFALSE 35955
// begin side := GetSide ( minersList [ i ] ) ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_EXP 144
35716: PUSH
35717: LD_VAR 0 1
35721: ARRAY
35722: PPUSH
35723: CALL_OW 255
35727: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35728: LD_ADDR_VAR 0 4
35732: PUSH
35733: LD_EXP 145
35737: PUSH
35738: LD_VAR 0 1
35742: ARRAY
35743: PUSH
35744: LD_VAR 0 2
35748: ARRAY
35749: PUSH
35750: LD_INT 1
35752: ARRAY
35753: PPUSH
35754: LD_EXP 145
35758: PUSH
35759: LD_VAR 0 1
35763: ARRAY
35764: PUSH
35765: LD_VAR 0 2
35769: ARRAY
35770: PUSH
35771: LD_INT 2
35773: ARRAY
35774: PPUSH
35775: CALL_OW 428
35779: ST_TO_ADDR
// if not tmp then
35780: LD_VAR 0 4
35784: NOT
35785: IFFALSE 35789
// continue ;
35787: GO 35704
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35789: LD_VAR 0 4
35793: PUSH
35794: LD_INT 81
35796: PUSH
35797: LD_VAR 0 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PPUSH
35806: CALL_OW 69
35810: IN
35811: PUSH
35812: LD_EXP 145
35816: PUSH
35817: LD_VAR 0 1
35821: ARRAY
35822: PUSH
35823: LD_VAR 0 2
35827: ARRAY
35828: PUSH
35829: LD_INT 1
35831: ARRAY
35832: PPUSH
35833: LD_EXP 145
35837: PUSH
35838: LD_VAR 0 1
35842: ARRAY
35843: PUSH
35844: LD_VAR 0 2
35848: ARRAY
35849: PUSH
35850: LD_INT 2
35852: ARRAY
35853: PPUSH
35854: CALL_OW 458
35858: AND
35859: IFFALSE 35953
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35861: LD_EXP 145
35865: PUSH
35866: LD_VAR 0 1
35870: ARRAY
35871: PUSH
35872: LD_VAR 0 2
35876: ARRAY
35877: PUSH
35878: LD_INT 1
35880: ARRAY
35881: PPUSH
35882: LD_EXP 145
35886: PUSH
35887: LD_VAR 0 1
35891: ARRAY
35892: PUSH
35893: LD_VAR 0 2
35897: ARRAY
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: LD_VAR 0 3
35907: PPUSH
35908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35912: LD_ADDR_EXP 145
35916: PUSH
35917: LD_EXP 145
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: LD_EXP 145
35931: PUSH
35932: LD_VAR 0 1
35936: ARRAY
35937: PPUSH
35938: LD_VAR 0 2
35942: PPUSH
35943: CALL_OW 3
35947: PPUSH
35948: CALL_OW 1
35952: ST_TO_ADDR
// end ; end ;
35953: GO 35704
35955: POP
35956: POP
// end ;
35957: GO 35622
35959: POP
35960: POP
// end ;
35961: PPOPN 4
35963: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
// result := false ;
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_INT 0
35975: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35976: LD_VAR 0 1
35980: PPUSH
35981: CALL_OW 264
35985: PUSH
35986: LD_EXP 66
35990: EQUAL
35991: NOT
35992: IFFALSE 35996
// exit ;
35994: GO 36236
// index := GetElementIndex ( minersList , unit ) ;
35996: LD_ADDR_VAR 0 5
36000: PUSH
36001: LD_EXP 144
36005: PPUSH
36006: LD_VAR 0 1
36010: PPUSH
36011: CALL 42220 0 2
36015: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36016: LD_EXP 145
36020: PUSH
36021: LD_VAR 0 5
36025: ARRAY
36026: PUSH
36027: LD_EXP 146
36031: GREATEREQUAL
36032: IFFALSE 36036
// exit ;
36034: GO 36236
// ComMoveXY ( unit , x , y ) ;
36036: LD_VAR 0 1
36040: PPUSH
36041: LD_VAR 0 2
36045: PPUSH
36046: LD_VAR 0 3
36050: PPUSH
36051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36055: LD_INT 35
36057: PPUSH
36058: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36062: LD_VAR 0 1
36066: PPUSH
36067: LD_VAR 0 2
36071: PPUSH
36072: LD_VAR 0 3
36076: PPUSH
36077: CALL 72992 0 3
36081: NOT
36082: PUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 314
36092: AND
36093: IFFALSE 36097
// exit ;
36095: GO 36236
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36097: LD_VAR 0 2
36101: PPUSH
36102: LD_VAR 0 3
36106: PPUSH
36107: CALL_OW 428
36111: PUSH
36112: LD_VAR 0 1
36116: EQUAL
36117: PUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: CALL_OW 314
36127: NOT
36128: AND
36129: IFFALSE 36055
// PlaySoundXY ( x , y , PlantMine ) ;
36131: LD_VAR 0 2
36135: PPUSH
36136: LD_VAR 0 3
36140: PPUSH
36141: LD_STRING PlantMine
36143: PPUSH
36144: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36148: LD_VAR 0 2
36152: PPUSH
36153: LD_VAR 0 3
36157: PPUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 255
36167: PPUSH
36168: LD_INT 0
36170: PPUSH
36171: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36175: LD_ADDR_EXP 145
36179: PUSH
36180: LD_EXP 145
36184: PPUSH
36185: LD_VAR 0 5
36189: PUSH
36190: LD_EXP 145
36194: PUSH
36195: LD_VAR 0 5
36199: ARRAY
36200: PUSH
36201: LD_INT 1
36203: PLUS
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PPUSH
36209: LD_VAR 0 2
36213: PUSH
36214: LD_VAR 0 3
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PPUSH
36223: CALL 42435 0 3
36227: ST_TO_ADDR
// result := true ;
36228: LD_ADDR_VAR 0 4
36232: PUSH
36233: LD_INT 1
36235: ST_TO_ADDR
// end ;
36236: LD_VAR 0 4
36240: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36241: LD_INT 0
36243: PPUSH
36244: PPUSH
36245: PPUSH
// if not unit in minersList then
36246: LD_VAR 0 1
36250: PUSH
36251: LD_EXP 144
36255: IN
36256: NOT
36257: IFFALSE 36261
// exit ;
36259: GO 36653
// index := GetElementIndex ( minersList , unit ) ;
36261: LD_ADDR_VAR 0 6
36265: PUSH
36266: LD_EXP 144
36270: PPUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL 42220 0 2
36280: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36281: LD_ADDR_VAR 0 5
36285: PUSH
36286: DOUBLE
36287: LD_EXP 145
36291: PUSH
36292: LD_VAR 0 6
36296: ARRAY
36297: INC
36298: ST_TO_ADDR
36299: LD_INT 1
36301: PUSH
36302: FOR_DOWNTO
36303: IFFALSE 36464
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36305: LD_EXP 145
36309: PUSH
36310: LD_VAR 0 6
36314: ARRAY
36315: PUSH
36316: LD_VAR 0 5
36320: ARRAY
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PUSH
36326: LD_VAR 0 2
36330: EQUAL
36331: PUSH
36332: LD_EXP 145
36336: PUSH
36337: LD_VAR 0 6
36341: ARRAY
36342: PUSH
36343: LD_VAR 0 5
36347: ARRAY
36348: PUSH
36349: LD_INT 2
36351: ARRAY
36352: PUSH
36353: LD_VAR 0 3
36357: EQUAL
36358: AND
36359: IFFALSE 36462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36361: LD_EXP 145
36365: PUSH
36366: LD_VAR 0 6
36370: ARRAY
36371: PUSH
36372: LD_VAR 0 5
36376: ARRAY
36377: PUSH
36378: LD_INT 1
36380: ARRAY
36381: PPUSH
36382: LD_EXP 145
36386: PUSH
36387: LD_VAR 0 6
36391: ARRAY
36392: PUSH
36393: LD_VAR 0 5
36397: ARRAY
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: PPUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 255
36412: PPUSH
36413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36417: LD_ADDR_EXP 145
36421: PUSH
36422: LD_EXP 145
36426: PPUSH
36427: LD_VAR 0 6
36431: PPUSH
36432: LD_EXP 145
36436: PUSH
36437: LD_VAR 0 6
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 5
36447: PPUSH
36448: CALL_OW 3
36452: PPUSH
36453: CALL_OW 1
36457: ST_TO_ADDR
// exit ;
36458: POP
36459: POP
36460: GO 36653
// end ; end ;
36462: GO 36302
36464: POP
36465: POP
// for i := minerMinesList [ index ] downto 1 do
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: DOUBLE
36472: LD_EXP 145
36476: PUSH
36477: LD_VAR 0 6
36481: ARRAY
36482: INC
36483: ST_TO_ADDR
36484: LD_INT 1
36486: PUSH
36487: FOR_DOWNTO
36488: IFFALSE 36651
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36490: LD_EXP 145
36494: PUSH
36495: LD_VAR 0 6
36499: ARRAY
36500: PUSH
36501: LD_VAR 0 5
36505: ARRAY
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: LD_EXP 145
36515: PUSH
36516: LD_VAR 0 6
36520: ARRAY
36521: PUSH
36522: LD_VAR 0 5
36526: ARRAY
36527: PUSH
36528: LD_INT 2
36530: ARRAY
36531: PPUSH
36532: LD_VAR 0 2
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: CALL_OW 298
36546: PUSH
36547: LD_INT 6
36549: LESS
36550: IFFALSE 36649
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36552: LD_EXP 145
36556: PUSH
36557: LD_VAR 0 6
36561: ARRAY
36562: PUSH
36563: LD_VAR 0 5
36567: ARRAY
36568: PUSH
36569: LD_INT 1
36571: ARRAY
36572: PPUSH
36573: LD_EXP 145
36577: PUSH
36578: LD_VAR 0 6
36582: ARRAY
36583: PUSH
36584: LD_VAR 0 5
36588: ARRAY
36589: PUSH
36590: LD_INT 2
36592: ARRAY
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 255
36603: PPUSH
36604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36608: LD_ADDR_EXP 145
36612: PUSH
36613: LD_EXP 145
36617: PPUSH
36618: LD_VAR 0 6
36622: PPUSH
36623: LD_EXP 145
36627: PUSH
36628: LD_VAR 0 6
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 5
36638: PPUSH
36639: CALL_OW 3
36643: PPUSH
36644: CALL_OW 1
36648: ST_TO_ADDR
// end ; end ;
36649: GO 36487
36651: POP
36652: POP
// end ;
36653: LD_VAR 0 4
36657: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36658: LD_INT 0
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 264
36678: PUSH
36679: LD_EXP 66
36683: EQUAL
36684: NOT
36685: PUSH
36686: LD_VAR 0 1
36690: PUSH
36691: LD_EXP 144
36695: IN
36696: NOT
36697: OR
36698: IFFALSE 36702
// exit ;
36700: GO 37024
// index := GetElementIndex ( minersList , unit ) ;
36702: LD_ADDR_VAR 0 6
36706: PUSH
36707: LD_EXP 144
36711: PPUSH
36712: LD_VAR 0 1
36716: PPUSH
36717: CALL 42220 0 2
36721: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36722: LD_ADDR_VAR 0 8
36726: PUSH
36727: LD_EXP 146
36731: PUSH
36732: LD_EXP 145
36736: PUSH
36737: LD_VAR 0 6
36741: ARRAY
36742: MINUS
36743: ST_TO_ADDR
// if not minesFreeAmount then
36744: LD_VAR 0 8
36748: NOT
36749: IFFALSE 36753
// exit ;
36751: GO 37024
// tmp := [ ] ;
36753: LD_ADDR_VAR 0 7
36757: PUSH
36758: EMPTY
36759: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: DOUBLE
36766: LD_INT 1
36768: DEC
36769: ST_TO_ADDR
36770: LD_VAR 0 8
36774: PUSH
36775: FOR_TO
36776: IFFALSE 36971
// begin _d := rand ( 0 , 5 ) ;
36778: LD_ADDR_VAR 0 11
36782: PUSH
36783: LD_INT 0
36785: PPUSH
36786: LD_INT 5
36788: PPUSH
36789: CALL_OW 12
36793: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36794: LD_ADDR_VAR 0 12
36798: PUSH
36799: LD_INT 2
36801: PPUSH
36802: LD_INT 6
36804: PPUSH
36805: CALL_OW 12
36809: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_VAR 0 2
36819: PPUSH
36820: LD_VAR 0 11
36824: PPUSH
36825: LD_VAR 0 12
36829: PPUSH
36830: CALL_OW 272
36834: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36835: LD_ADDR_VAR 0 10
36839: PUSH
36840: LD_VAR 0 3
36844: PPUSH
36845: LD_VAR 0 11
36849: PPUSH
36850: LD_VAR 0 12
36854: PPUSH
36855: CALL_OW 273
36859: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36860: LD_VAR 0 9
36864: PPUSH
36865: LD_VAR 0 10
36869: PPUSH
36870: CALL_OW 488
36874: PUSH
36875: LD_VAR 0 9
36879: PUSH
36880: LD_VAR 0 10
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_VAR 0 7
36893: IN
36894: NOT
36895: AND
36896: PUSH
36897: LD_VAR 0 9
36901: PPUSH
36902: LD_VAR 0 10
36906: PPUSH
36907: CALL_OW 458
36911: NOT
36912: AND
36913: IFFALSE 36955
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36915: LD_ADDR_VAR 0 7
36919: PUSH
36920: LD_VAR 0 7
36924: PPUSH
36925: LD_VAR 0 7
36929: PUSH
36930: LD_INT 1
36932: PLUS
36933: PPUSH
36934: LD_VAR 0 9
36938: PUSH
36939: LD_VAR 0 10
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PPUSH
36948: CALL_OW 1
36952: ST_TO_ADDR
36953: GO 36969
// i := i - 1 ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_VAR 0 5
36964: PUSH
36965: LD_INT 1
36967: MINUS
36968: ST_TO_ADDR
// end ;
36969: GO 36775
36971: POP
36972: POP
// for i in tmp do
36973: LD_ADDR_VAR 0 5
36977: PUSH
36978: LD_VAR 0 7
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37022
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36986: LD_VAR 0 1
36990: PPUSH
36991: LD_VAR 0 5
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: PPUSH
37000: LD_VAR 0 5
37004: PUSH
37005: LD_INT 2
37007: ARRAY
37008: PPUSH
37009: CALL 35964 0 3
37013: NOT
37014: IFFALSE 37020
// exit ;
37016: POP
37017: POP
37018: GO 37024
37020: GO 36983
37022: POP
37023: POP
// end ;
37024: LD_VAR 0 4
37028: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37029: LD_INT 0
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
// if not GetClass ( unit ) = class_sniper then
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 257
37047: PUSH
37048: LD_INT 5
37050: EQUAL
37051: NOT
37052: IFFALSE 37056
// exit ;
37054: GO 37444
// dist := 8 ;
37056: LD_ADDR_VAR 0 5
37060: PUSH
37061: LD_INT 8
37063: ST_TO_ADDR
// viewRange := 12 ;
37064: LD_ADDR_VAR 0 7
37068: PUSH
37069: LD_INT 12
37071: ST_TO_ADDR
// side := GetSide ( unit ) ;
37072: LD_ADDR_VAR 0 6
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 255
37086: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37087: LD_INT 61
37089: PPUSH
37090: LD_VAR 0 6
37094: PPUSH
37095: CALL_OW 321
37099: PUSH
37100: LD_INT 2
37102: EQUAL
37103: IFFALSE 37113
// viewRange := 16 ;
37105: LD_ADDR_VAR 0 7
37109: PUSH
37110: LD_INT 16
37112: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37113: LD_VAR 0 1
37117: PPUSH
37118: LD_VAR 0 2
37122: PPUSH
37123: LD_VAR 0 3
37127: PPUSH
37128: CALL_OW 297
37132: PUSH
37133: LD_VAR 0 5
37137: GREATER
37138: IFFALSE 37217
// begin ComMoveXY ( unit , x , y ) ;
37140: LD_VAR 0 1
37144: PPUSH
37145: LD_VAR 0 2
37149: PPUSH
37150: LD_VAR 0 3
37154: PPUSH
37155: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37159: LD_INT 35
37161: PPUSH
37162: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37166: LD_VAR 0 1
37170: PPUSH
37171: LD_VAR 0 2
37175: PPUSH
37176: LD_VAR 0 3
37180: PPUSH
37181: CALL 72992 0 3
37185: NOT
37186: IFFALSE 37190
// exit ;
37188: GO 37444
// until GetDistUnitXY ( unit , x , y ) < dist ;
37190: LD_VAR 0 1
37194: PPUSH
37195: LD_VAR 0 2
37199: PPUSH
37200: LD_VAR 0 3
37204: PPUSH
37205: CALL_OW 297
37209: PUSH
37210: LD_VAR 0 5
37214: LESS
37215: IFFALSE 37159
// end ; ComTurnXY ( unit , x , y ) ;
37217: LD_VAR 0 1
37221: PPUSH
37222: LD_VAR 0 2
37226: PPUSH
37227: LD_VAR 0 3
37231: PPUSH
37232: CALL_OW 118
// wait ( 5 ) ;
37236: LD_INT 5
37238: PPUSH
37239: CALL_OW 67
// _d := GetDir ( unit ) ;
37243: LD_ADDR_VAR 0 10
37247: PUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 254
37257: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37258: LD_ADDR_VAR 0 8
37262: PUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: CALL_OW 250
37272: PPUSH
37273: LD_VAR 0 10
37277: PPUSH
37278: LD_VAR 0 5
37282: PPUSH
37283: CALL_OW 272
37287: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37288: LD_ADDR_VAR 0 9
37292: PUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 251
37302: PPUSH
37303: LD_VAR 0 10
37307: PPUSH
37308: LD_VAR 0 5
37312: PPUSH
37313: CALL_OW 273
37317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37318: LD_VAR 0 8
37322: PPUSH
37323: LD_VAR 0 9
37327: PPUSH
37328: CALL_OW 488
37332: NOT
37333: IFFALSE 37337
// exit ;
37335: GO 37444
// ComAnimCustom ( unit , 1 ) ;
37337: LD_VAR 0 1
37341: PPUSH
37342: LD_INT 1
37344: PPUSH
37345: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37349: LD_VAR 0 8
37353: PPUSH
37354: LD_VAR 0 9
37358: PPUSH
37359: LD_VAR 0 6
37363: PPUSH
37364: LD_VAR 0 7
37368: PPUSH
37369: CALL_OW 330
// repeat wait ( 1 ) ;
37373: LD_INT 1
37375: PPUSH
37376: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 316
37389: PUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 314
37399: OR
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 302
37410: NOT
37411: OR
37412: PUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 301
37422: OR
37423: IFFALSE 37373
// RemoveSeeing ( _x , _y , side ) ;
37425: LD_VAR 0 8
37429: PPUSH
37430: LD_VAR 0 9
37434: PPUSH
37435: LD_VAR 0 6
37439: PPUSH
37440: CALL_OW 331
// end ; end_of_file
37444: LD_VAR 0 4
37448: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37449: LD_INT 0
37451: PPUSH
37452: PPUSH
// if exist_mode then
37453: LD_VAR 0 2
37457: IFFALSE 37482
// unit := CreateCharacter ( prefix & ident ) else
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_VAR 0 3
37468: PUSH
37469: LD_VAR 0 1
37473: STR
37474: PPUSH
37475: CALL_OW 34
37479: ST_TO_ADDR
37480: GO 37497
// unit := NewCharacter ( ident ) ;
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 25
37496: ST_TO_ADDR
// result := unit ;
37497: LD_ADDR_VAR 0 4
37501: PUSH
37502: LD_VAR 0 5
37506: ST_TO_ADDR
// end ;
37507: LD_VAR 0 4
37511: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37512: LD_INT 0
37514: PPUSH
37515: PPUSH
// if not side or not nation then
37516: LD_VAR 0 1
37520: NOT
37521: PUSH
37522: LD_VAR 0 2
37526: NOT
37527: OR
37528: IFFALSE 37532
// exit ;
37530: GO 38300
// case nation of nation_american :
37532: LD_VAR 0 2
37536: PUSH
37537: LD_INT 1
37539: DOUBLE
37540: EQUAL
37541: IFTRUE 37545
37543: GO 37759
37545: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37546: LD_ADDR_VAR 0 4
37550: PUSH
37551: LD_INT 35
37553: PUSH
37554: LD_INT 45
37556: PUSH
37557: LD_INT 46
37559: PUSH
37560: LD_INT 47
37562: PUSH
37563: LD_INT 82
37565: PUSH
37566: LD_INT 83
37568: PUSH
37569: LD_INT 84
37571: PUSH
37572: LD_INT 85
37574: PUSH
37575: LD_INT 86
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 6
37586: PUSH
37587: LD_INT 15
37589: PUSH
37590: LD_INT 16
37592: PUSH
37593: LD_INT 7
37595: PUSH
37596: LD_INT 12
37598: PUSH
37599: LD_INT 13
37601: PUSH
37602: LD_INT 10
37604: PUSH
37605: LD_INT 14
37607: PUSH
37608: LD_INT 20
37610: PUSH
37611: LD_INT 21
37613: PUSH
37614: LD_INT 22
37616: PUSH
37617: LD_INT 25
37619: PUSH
37620: LD_INT 32
37622: PUSH
37623: LD_INT 27
37625: PUSH
37626: LD_INT 36
37628: PUSH
37629: LD_INT 69
37631: PUSH
37632: LD_INT 39
37634: PUSH
37635: LD_INT 34
37637: PUSH
37638: LD_INT 40
37640: PUSH
37641: LD_INT 48
37643: PUSH
37644: LD_INT 49
37646: PUSH
37647: LD_INT 50
37649: PUSH
37650: LD_INT 51
37652: PUSH
37653: LD_INT 52
37655: PUSH
37656: LD_INT 53
37658: PUSH
37659: LD_INT 54
37661: PUSH
37662: LD_INT 55
37664: PUSH
37665: LD_INT 56
37667: PUSH
37668: LD_INT 57
37670: PUSH
37671: LD_INT 58
37673: PUSH
37674: LD_INT 59
37676: PUSH
37677: LD_INT 60
37679: PUSH
37680: LD_INT 61
37682: PUSH
37683: LD_INT 62
37685: PUSH
37686: LD_INT 80
37688: PUSH
37689: LD_INT 82
37691: PUSH
37692: LD_INT 83
37694: PUSH
37695: LD_INT 84
37697: PUSH
37698: LD_INT 85
37700: PUSH
37701: LD_INT 86
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
37757: GO 38224
37759: LD_INT 2
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37767
37765: GO 37993
37767: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37768: LD_ADDR_VAR 0 4
37772: PUSH
37773: LD_INT 35
37775: PUSH
37776: LD_INT 45
37778: PUSH
37779: LD_INT 46
37781: PUSH
37782: LD_INT 47
37784: PUSH
37785: LD_INT 82
37787: PUSH
37788: LD_INT 83
37790: PUSH
37791: LD_INT 84
37793: PUSH
37794: LD_INT 85
37796: PUSH
37797: LD_INT 87
37799: PUSH
37800: LD_INT 70
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 11
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: LD_INT 4
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: LD_INT 6
37820: PUSH
37821: LD_INT 15
37823: PUSH
37824: LD_INT 18
37826: PUSH
37827: LD_INT 7
37829: PUSH
37830: LD_INT 17
37832: PUSH
37833: LD_INT 8
37835: PUSH
37836: LD_INT 20
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 22
37844: PUSH
37845: LD_INT 72
37847: PUSH
37848: LD_INT 26
37850: PUSH
37851: LD_INT 69
37853: PUSH
37854: LD_INT 39
37856: PUSH
37857: LD_INT 40
37859: PUSH
37860: LD_INT 41
37862: PUSH
37863: LD_INT 42
37865: PUSH
37866: LD_INT 43
37868: PUSH
37869: LD_INT 48
37871: PUSH
37872: LD_INT 49
37874: PUSH
37875: LD_INT 50
37877: PUSH
37878: LD_INT 51
37880: PUSH
37881: LD_INT 52
37883: PUSH
37884: LD_INT 53
37886: PUSH
37887: LD_INT 54
37889: PUSH
37890: LD_INT 55
37892: PUSH
37893: LD_INT 56
37895: PUSH
37896: LD_INT 60
37898: PUSH
37899: LD_INT 61
37901: PUSH
37902: LD_INT 62
37904: PUSH
37905: LD_INT 66
37907: PUSH
37908: LD_INT 67
37910: PUSH
37911: LD_INT 68
37913: PUSH
37914: LD_INT 81
37916: PUSH
37917: LD_INT 82
37919: PUSH
37920: LD_INT 83
37922: PUSH
37923: LD_INT 84
37925: PUSH
37926: LD_INT 85
37928: PUSH
37929: LD_INT 87
37931: PUSH
37932: LD_INT 88
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
37991: GO 38224
37993: LD_INT 3
37995: DOUBLE
37996: EQUAL
37997: IFTRUE 38001
37999: GO 38223
38001: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38002: LD_ADDR_VAR 0 4
38006: PUSH
38007: LD_INT 46
38009: PUSH
38010: LD_INT 47
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 82
38021: PUSH
38022: LD_INT 83
38024: PUSH
38025: LD_INT 84
38027: PUSH
38028: LD_INT 85
38030: PUSH
38031: LD_INT 86
38033: PUSH
38034: LD_INT 11
38036: PUSH
38037: LD_INT 9
38039: PUSH
38040: LD_INT 20
38042: PUSH
38043: LD_INT 19
38045: PUSH
38046: LD_INT 21
38048: PUSH
38049: LD_INT 24
38051: PUSH
38052: LD_INT 22
38054: PUSH
38055: LD_INT 25
38057: PUSH
38058: LD_INT 28
38060: PUSH
38061: LD_INT 29
38063: PUSH
38064: LD_INT 30
38066: PUSH
38067: LD_INT 31
38069: PUSH
38070: LD_INT 37
38072: PUSH
38073: LD_INT 38
38075: PUSH
38076: LD_INT 32
38078: PUSH
38079: LD_INT 27
38081: PUSH
38082: LD_INT 33
38084: PUSH
38085: LD_INT 69
38087: PUSH
38088: LD_INT 39
38090: PUSH
38091: LD_INT 34
38093: PUSH
38094: LD_INT 40
38096: PUSH
38097: LD_INT 71
38099: PUSH
38100: LD_INT 23
38102: PUSH
38103: LD_INT 44
38105: PUSH
38106: LD_INT 48
38108: PUSH
38109: LD_INT 49
38111: PUSH
38112: LD_INT 50
38114: PUSH
38115: LD_INT 51
38117: PUSH
38118: LD_INT 52
38120: PUSH
38121: LD_INT 53
38123: PUSH
38124: LD_INT 54
38126: PUSH
38127: LD_INT 55
38129: PUSH
38130: LD_INT 56
38132: PUSH
38133: LD_INT 57
38135: PUSH
38136: LD_INT 58
38138: PUSH
38139: LD_INT 59
38141: PUSH
38142: LD_INT 63
38144: PUSH
38145: LD_INT 64
38147: PUSH
38148: LD_INT 65
38150: PUSH
38151: LD_INT 82
38153: PUSH
38154: LD_INT 83
38156: PUSH
38157: LD_INT 84
38159: PUSH
38160: LD_INT 85
38162: PUSH
38163: LD_INT 86
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: ST_TO_ADDR
38221: GO 38224
38223: POP
// if state > - 1 and state < 3 then
38224: LD_VAR 0 3
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: GREATER
38233: PUSH
38234: LD_VAR 0 3
38238: PUSH
38239: LD_INT 3
38241: LESS
38242: AND
38243: IFFALSE 38300
// for i in result do
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_VAR 0 4
38254: PUSH
38255: FOR_IN
38256: IFFALSE 38298
// if GetTech ( i , side ) <> state then
38258: LD_VAR 0 5
38262: PPUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 321
38272: PUSH
38273: LD_VAR 0 3
38277: NONEQUAL
38278: IFFALSE 38296
// result := result diff i ;
38280: LD_ADDR_VAR 0 4
38284: PUSH
38285: LD_VAR 0 4
38289: PUSH
38290: LD_VAR 0 5
38294: DIFF
38295: ST_TO_ADDR
38296: GO 38255
38298: POP
38299: POP
// end ;
38300: LD_VAR 0 4
38304: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38305: LD_INT 0
38307: PPUSH
38308: PPUSH
38309: PPUSH
// result := true ;
38310: LD_ADDR_VAR 0 3
38314: PUSH
38315: LD_INT 1
38317: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38318: LD_ADDR_VAR 0 5
38322: PUSH
38323: LD_VAR 0 2
38327: PPUSH
38328: CALL_OW 480
38332: ST_TO_ADDR
// if not tmp then
38333: LD_VAR 0 5
38337: NOT
38338: IFFALSE 38342
// exit ;
38340: GO 38391
// for i in tmp do
38342: LD_ADDR_VAR 0 4
38346: PUSH
38347: LD_VAR 0 5
38351: PUSH
38352: FOR_IN
38353: IFFALSE 38389
// if GetTech ( i , side ) <> state_researched then
38355: LD_VAR 0 4
38359: PPUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 321
38369: PUSH
38370: LD_INT 2
38372: NONEQUAL
38373: IFFALSE 38387
// begin result := false ;
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: LD_INT 0
38382: ST_TO_ADDR
// exit ;
38383: POP
38384: POP
38385: GO 38391
// end ;
38387: GO 38352
38389: POP
38390: POP
// end ;
38391: LD_VAR 0 3
38395: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38396: LD_INT 0
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38411: LD_VAR 0 1
38415: NOT
38416: PUSH
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 257
38426: PUSH
38427: LD_INT 9
38429: NONEQUAL
38430: OR
38431: IFFALSE 38435
// exit ;
38433: GO 39008
// side := GetSide ( unit ) ;
38435: LD_ADDR_VAR 0 9
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 255
38449: ST_TO_ADDR
// tech_space := tech_spacanom ;
38450: LD_ADDR_VAR 0 12
38454: PUSH
38455: LD_INT 29
38457: ST_TO_ADDR
// tech_time := tech_taurad ;
38458: LD_ADDR_VAR 0 13
38462: PUSH
38463: LD_INT 28
38465: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38466: LD_ADDR_VAR 0 11
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 310
38480: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38481: LD_VAR 0 11
38485: PPUSH
38486: CALL_OW 247
38490: PUSH
38491: LD_INT 2
38493: EQUAL
38494: IFFALSE 38498
// exit ;
38496: GO 39008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38498: LD_ADDR_VAR 0 8
38502: PUSH
38503: LD_INT 81
38505: PUSH
38506: LD_VAR 0 9
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: LD_INT 21
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PPUSH
38536: CALL_OW 69
38540: ST_TO_ADDR
// if not tmp then
38541: LD_VAR 0 8
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 39008
// if in_unit then
38550: LD_VAR 0 11
38554: IFFALSE 38578
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38556: LD_ADDR_VAR 0 10
38560: PUSH
38561: LD_VAR 0 8
38565: PPUSH
38566: LD_VAR 0 11
38570: PPUSH
38571: CALL_OW 74
38575: ST_TO_ADDR
38576: GO 38598
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38578: LD_ADDR_VAR 0 10
38582: PUSH
38583: LD_VAR 0 8
38587: PPUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 74
38597: ST_TO_ADDR
// if not enemy then
38598: LD_VAR 0 10
38602: NOT
38603: IFFALSE 38607
// exit ;
38605: GO 39008
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38607: LD_VAR 0 11
38611: PUSH
38612: LD_VAR 0 11
38616: PPUSH
38617: LD_VAR 0 10
38621: PPUSH
38622: CALL_OW 296
38626: PUSH
38627: LD_INT 13
38629: GREATER
38630: AND
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_VAR 0 10
38641: PPUSH
38642: CALL_OW 296
38646: PUSH
38647: LD_INT 12
38649: GREATER
38650: OR
38651: IFFALSE 38655
// exit ;
38653: GO 39008
// missile := [ 1 ] ;
38655: LD_ADDR_VAR 0 14
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38666: LD_VAR 0 9
38670: PPUSH
38671: LD_VAR 0 12
38675: PPUSH
38676: CALL_OW 325
38680: IFFALSE 38709
// missile := Insert ( missile , missile + 1 , 2 ) ;
38682: LD_ADDR_VAR 0 14
38686: PUSH
38687: LD_VAR 0 14
38691: PPUSH
38692: LD_VAR 0 14
38696: PUSH
38697: LD_INT 1
38699: PLUS
38700: PPUSH
38701: LD_INT 2
38703: PPUSH
38704: CALL_OW 2
38708: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38709: LD_VAR 0 9
38713: PPUSH
38714: LD_VAR 0 13
38718: PPUSH
38719: CALL_OW 325
38723: PUSH
38724: LD_VAR 0 10
38728: PPUSH
38729: CALL_OW 255
38733: PPUSH
38734: LD_VAR 0 13
38738: PPUSH
38739: CALL_OW 325
38743: NOT
38744: AND
38745: IFFALSE 38774
// missile := Insert ( missile , missile + 1 , 3 ) ;
38747: LD_ADDR_VAR 0 14
38751: PUSH
38752: LD_VAR 0 14
38756: PPUSH
38757: LD_VAR 0 14
38761: PUSH
38762: LD_INT 1
38764: PLUS
38765: PPUSH
38766: LD_INT 3
38768: PPUSH
38769: CALL_OW 2
38773: ST_TO_ADDR
// if missile < 2 then
38774: LD_VAR 0 14
38778: PUSH
38779: LD_INT 2
38781: LESS
38782: IFFALSE 38786
// exit ;
38784: GO 39008
// x := GetX ( enemy ) ;
38786: LD_ADDR_VAR 0 4
38790: PUSH
38791: LD_VAR 0 10
38795: PPUSH
38796: CALL_OW 250
38800: ST_TO_ADDR
// y := GetY ( enemy ) ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 10
38810: PPUSH
38811: CALL_OW 251
38815: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38816: LD_ADDR_VAR 0 6
38820: PUSH
38821: LD_VAR 0 4
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PPUSH
38830: LD_INT 1
38832: PPUSH
38833: CALL_OW 12
38837: PLUS
38838: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38839: LD_ADDR_VAR 0 7
38843: PUSH
38844: LD_VAR 0 5
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PPUSH
38853: LD_INT 1
38855: PPUSH
38856: CALL_OW 12
38860: PLUS
38861: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38862: LD_VAR 0 6
38866: PPUSH
38867: LD_VAR 0 7
38871: PPUSH
38872: CALL_OW 488
38876: NOT
38877: IFFALSE 38899
// begin _x := x ;
38879: LD_ADDR_VAR 0 6
38883: PUSH
38884: LD_VAR 0 4
38888: ST_TO_ADDR
// _y := y ;
38889: LD_ADDR_VAR 0 7
38893: PUSH
38894: LD_VAR 0 5
38898: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_INT 1
38906: PPUSH
38907: LD_VAR 0 14
38911: PPUSH
38912: CALL_OW 12
38916: ST_TO_ADDR
// case i of 1 :
38917: LD_VAR 0 3
38921: PUSH
38922: LD_INT 1
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38930
38928: GO 38947
38930: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_VAR 0 10
38940: PPUSH
38941: CALL_OW 115
38945: GO 39008
38947: LD_INT 2
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38977
38955: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38956: LD_VAR 0 1
38960: PPUSH
38961: LD_VAR 0 6
38965: PPUSH
38966: LD_VAR 0 7
38970: PPUSH
38971: CALL_OW 153
38975: GO 39008
38977: LD_INT 3
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39007
38985: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38986: LD_VAR 0 1
38990: PPUSH
38991: LD_VAR 0 6
38995: PPUSH
38996: LD_VAR 0 7
39000: PPUSH
39001: CALL_OW 154
39005: GO 39008
39007: POP
// end ;
39008: LD_VAR 0 2
39012: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
// if not unit or not building then
39021: LD_VAR 0 1
39025: NOT
39026: PUSH
39027: LD_VAR 0 2
39031: NOT
39032: OR
39033: IFFALSE 39037
// exit ;
39035: GO 39195
// x := GetX ( building ) ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 2
39046: PPUSH
39047: CALL_OW 250
39051: ST_TO_ADDR
// y := GetY ( building ) ;
39052: LD_ADDR_VAR 0 6
39056: PUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: CALL_OW 251
39066: ST_TO_ADDR
// for i = 0 to 5 do
39067: LD_ADDR_VAR 0 4
39071: PUSH
39072: DOUBLE
39073: LD_INT 0
39075: DEC
39076: ST_TO_ADDR
39077: LD_INT 5
39079: PUSH
39080: FOR_TO
39081: IFFALSE 39193
// begin _x := ShiftX ( x , i , 3 ) ;
39083: LD_ADDR_VAR 0 7
39087: PUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: LD_VAR 0 4
39097: PPUSH
39098: LD_INT 3
39100: PPUSH
39101: CALL_OW 272
39105: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39106: LD_ADDR_VAR 0 8
39110: PUSH
39111: LD_VAR 0 6
39115: PPUSH
39116: LD_VAR 0 4
39120: PPUSH
39121: LD_INT 3
39123: PPUSH
39124: CALL_OW 273
39128: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39129: LD_VAR 0 7
39133: PPUSH
39134: LD_VAR 0 8
39138: PPUSH
39139: CALL_OW 488
39143: NOT
39144: IFFALSE 39148
// continue ;
39146: GO 39080
// if HexInfo ( _x , _y ) = 0 then
39148: LD_VAR 0 7
39152: PPUSH
39153: LD_VAR 0 8
39157: PPUSH
39158: CALL_OW 428
39162: PUSH
39163: LD_INT 0
39165: EQUAL
39166: IFFALSE 39191
// begin ComMoveXY ( unit , _x , _y ) ;
39168: LD_VAR 0 1
39172: PPUSH
39173: LD_VAR 0 7
39177: PPUSH
39178: LD_VAR 0 8
39182: PPUSH
39183: CALL_OW 111
// exit ;
39187: POP
39188: POP
39189: GO 39195
// end ; end ;
39191: GO 39080
39193: POP
39194: POP
// end ;
39195: LD_VAR 0 3
39199: RET
// export function ScanBase ( side , base_area ) ; begin
39200: LD_INT 0
39202: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_VAR 0 2
39212: PPUSH
39213: LD_INT 81
39215: PUSH
39216: LD_VAR 0 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PPUSH
39225: CALL_OW 70
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 3
39234: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39235: LD_INT 0
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
// result := false ;
39241: LD_ADDR_VAR 0 2
39245: PUSH
39246: LD_INT 0
39248: ST_TO_ADDR
// side := GetSide ( unit ) ;
39249: LD_ADDR_VAR 0 3
39253: PUSH
39254: LD_VAR 0 1
39258: PPUSH
39259: CALL_OW 255
39263: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39264: LD_ADDR_VAR 0 4
39268: PUSH
39269: LD_VAR 0 1
39273: PPUSH
39274: CALL_OW 248
39278: ST_TO_ADDR
// case nat of 1 :
39279: LD_VAR 0 4
39283: PUSH
39284: LD_INT 1
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39292
39290: GO 39303
39292: POP
// tech := tech_lassight ; 2 :
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_INT 12
39300: ST_TO_ADDR
39301: GO 39342
39303: LD_INT 2
39305: DOUBLE
39306: EQUAL
39307: IFTRUE 39311
39309: GO 39322
39311: POP
// tech := tech_mortar ; 3 :
39312: LD_ADDR_VAR 0 5
39316: PUSH
39317: LD_INT 41
39319: ST_TO_ADDR
39320: GO 39342
39322: LD_INT 3
39324: DOUBLE
39325: EQUAL
39326: IFTRUE 39330
39328: GO 39341
39330: POP
// tech := tech_bazooka ; end ;
39331: LD_ADDR_VAR 0 5
39335: PUSH
39336: LD_INT 44
39338: ST_TO_ADDR
39339: GO 39342
39341: POP
// if Researched ( side , tech ) then
39342: LD_VAR 0 3
39346: PPUSH
39347: LD_VAR 0 5
39351: PPUSH
39352: CALL_OW 325
39356: IFFALSE 39383
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39358: LD_ADDR_VAR 0 2
39362: PUSH
39363: LD_INT 5
39365: PUSH
39366: LD_INT 8
39368: PUSH
39369: LD_INT 9
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: PUSH
39377: LD_VAR 0 4
39381: ARRAY
39382: ST_TO_ADDR
// end ;
39383: LD_VAR 0 2
39387: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39388: LD_INT 0
39390: PPUSH
39391: PPUSH
39392: PPUSH
// if not mines then
39393: LD_VAR 0 2
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39546
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39402: LD_ADDR_VAR 0 5
39406: PUSH
39407: LD_INT 81
39409: PUSH
39410: LD_VAR 0 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 21
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 69
39444: ST_TO_ADDR
// for i in mines do
39445: LD_ADDR_VAR 0 4
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: FOR_IN
39456: IFFALSE 39544
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39458: LD_VAR 0 4
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: LD_VAR 0 4
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: CALL_OW 458
39480: NOT
39481: IFFALSE 39485
// continue ;
39483: GO 39455
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39485: LD_VAR 0 4
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: PPUSH
39494: LD_VAR 0 4
39498: PUSH
39499: LD_INT 2
39501: ARRAY
39502: PPUSH
39503: CALL_OW 428
39507: PUSH
39508: LD_VAR 0 5
39512: IN
39513: IFFALSE 39542
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39515: LD_VAR 0 4
39519: PUSH
39520: LD_INT 1
39522: ARRAY
39523: PPUSH
39524: LD_VAR 0 4
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: PPUSH
39533: LD_VAR 0 1
39537: PPUSH
39538: CALL_OW 456
// end ;
39542: GO 39455
39544: POP
39545: POP
// end ;
39546: LD_VAR 0 3
39550: RET
// export function Count ( array ) ; var i ; begin
39551: LD_INT 0
39553: PPUSH
39554: PPUSH
// result := 0 ;
39555: LD_ADDR_VAR 0 2
39559: PUSH
39560: LD_INT 0
39562: ST_TO_ADDR
// for i in array do
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_VAR 0 1
39572: PUSH
39573: FOR_IN
39574: IFFALSE 39598
// if i then
39576: LD_VAR 0 3
39580: IFFALSE 39596
// result := result + 1 ;
39582: LD_ADDR_VAR 0 2
39586: PUSH
39587: LD_VAR 0 2
39591: PUSH
39592: LD_INT 1
39594: PLUS
39595: ST_TO_ADDR
39596: GO 39573
39598: POP
39599: POP
// end ;
39600: LD_VAR 0 2
39604: RET
// export function IsEmpty ( building ) ; begin
39605: LD_INT 0
39607: PPUSH
// if not building then
39608: LD_VAR 0 1
39612: NOT
39613: IFFALSE 39617
// exit ;
39615: GO 39660
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39617: LD_ADDR_VAR 0 2
39621: PUSH
39622: LD_VAR 0 1
39626: PUSH
39627: LD_INT 22
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 255
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 58
39646: PUSH
39647: EMPTY
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PPUSH
39654: CALL_OW 69
39658: IN
39659: ST_TO_ADDR
// end ;
39660: LD_VAR 0 2
39664: RET
// export function IsNotFull ( building ) ; begin
39665: LD_INT 0
39667: PPUSH
// if not building then
39668: LD_VAR 0 1
39672: NOT
39673: IFFALSE 39677
// exit ;
39675: GO 39696
// result := UnitsInside ( building ) < 6 ;
39677: LD_ADDR_VAR 0 2
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 313
39691: PUSH
39692: LD_INT 6
39694: LESS
39695: ST_TO_ADDR
// end ;
39696: LD_VAR 0 2
39700: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39701: LD_INT 0
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
// tmp := [ ] ;
39707: LD_ADDR_VAR 0 3
39711: PUSH
39712: EMPTY
39713: ST_TO_ADDR
// list := [ ] ;
39714: LD_ADDR_VAR 0 5
39718: PUSH
39719: EMPTY
39720: ST_TO_ADDR
// for i = 16 to 25 do
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: DOUBLE
39727: LD_INT 16
39729: DEC
39730: ST_TO_ADDR
39731: LD_INT 25
39733: PUSH
39734: FOR_TO
39735: IFFALSE 39808
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39737: LD_ADDR_VAR 0 3
39741: PUSH
39742: LD_VAR 0 3
39746: PUSH
39747: LD_INT 22
39749: PUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 255
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 91
39766: PUSH
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 6
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 30
39782: PUSH
39783: LD_VAR 0 4
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PUSH
39797: EMPTY
39798: LIST
39799: PPUSH
39800: CALL_OW 69
39804: ADD
39805: ST_TO_ADDR
39806: GO 39734
39808: POP
39809: POP
// for i = 1 to tmp do
39810: LD_ADDR_VAR 0 4
39814: PUSH
39815: DOUBLE
39816: LD_INT 1
39818: DEC
39819: ST_TO_ADDR
39820: LD_VAR 0 3
39824: PUSH
39825: FOR_TO
39826: IFFALSE 39914
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39828: LD_ADDR_VAR 0 5
39832: PUSH
39833: LD_VAR 0 5
39837: PUSH
39838: LD_VAR 0 3
39842: PUSH
39843: LD_VAR 0 4
39847: ARRAY
39848: PPUSH
39849: CALL_OW 266
39853: PUSH
39854: LD_VAR 0 3
39858: PUSH
39859: LD_VAR 0 4
39863: ARRAY
39864: PPUSH
39865: CALL_OW 250
39869: PUSH
39870: LD_VAR 0 3
39874: PUSH
39875: LD_VAR 0 4
39879: ARRAY
39880: PPUSH
39881: CALL_OW 251
39885: PUSH
39886: LD_VAR 0 3
39890: PUSH
39891: LD_VAR 0 4
39895: ARRAY
39896: PPUSH
39897: CALL_OW 254
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: PUSH
39908: EMPTY
39909: LIST
39910: ADD
39911: ST_TO_ADDR
39912: GO 39825
39914: POP
39915: POP
// result := list ;
39916: LD_ADDR_VAR 0 2
39920: PUSH
39921: LD_VAR 0 5
39925: ST_TO_ADDR
// end ;
39926: LD_VAR 0 2
39930: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39931: LD_INT 0
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
// if not factory then
39940: LD_VAR 0 1
39944: NOT
39945: IFFALSE 39949
// exit ;
39947: GO 40542
// if control = control_apeman then
39949: LD_VAR 0 4
39953: PUSH
39954: LD_INT 5
39956: EQUAL
39957: IFFALSE 40066
// begin tmp := UnitsInside ( factory ) ;
39959: LD_ADDR_VAR 0 8
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 313
39973: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39974: LD_VAR 0 8
39978: PPUSH
39979: LD_INT 25
39981: PUSH
39982: LD_INT 12
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PPUSH
39989: CALL_OW 72
39993: NOT
39994: IFFALSE 40004
// control := control_manual ;
39996: LD_ADDR_VAR 0 4
40000: PUSH
40001: LD_INT 1
40003: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40004: LD_ADDR_VAR 0 8
40008: PUSH
40009: LD_VAR 0 1
40013: PPUSH
40014: CALL 39701 0 1
40018: ST_TO_ADDR
// if tmp then
40019: LD_VAR 0 8
40023: IFFALSE 40066
// begin for i in tmp do
40025: LD_ADDR_VAR 0 7
40029: PUSH
40030: LD_VAR 0 8
40034: PUSH
40035: FOR_IN
40036: IFFALSE 40064
// if i [ 1 ] = b_ext_radio then
40038: LD_VAR 0 7
40042: PUSH
40043: LD_INT 1
40045: ARRAY
40046: PUSH
40047: LD_INT 22
40049: EQUAL
40050: IFFALSE 40062
// begin control := control_remote ;
40052: LD_ADDR_VAR 0 4
40056: PUSH
40057: LD_INT 2
40059: ST_TO_ADDR
// break ;
40060: GO 40064
// end ;
40062: GO 40035
40064: POP
40065: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40066: LD_VAR 0 1
40070: PPUSH
40071: LD_VAR 0 2
40075: PPUSH
40076: LD_VAR 0 3
40080: PPUSH
40081: LD_VAR 0 4
40085: PPUSH
40086: LD_VAR 0 5
40090: PPUSH
40091: CALL_OW 448
40095: IFFALSE 40130
// begin result := [ chassis , engine , control , weapon ] ;
40097: LD_ADDR_VAR 0 6
40101: PUSH
40102: LD_VAR 0 2
40106: PUSH
40107: LD_VAR 0 3
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: LD_VAR 0 5
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: ST_TO_ADDR
// exit ;
40128: GO 40542
// end ; _chassis := AvailableChassisList ( factory ) ;
40130: LD_ADDR_VAR 0 9
40134: PUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 475
40144: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40145: LD_ADDR_VAR 0 11
40149: PUSH
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 476
40159: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40160: LD_ADDR_VAR 0 12
40164: PUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 477
40174: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40175: LD_ADDR_VAR 0 10
40179: PUSH
40180: LD_VAR 0 1
40184: PPUSH
40185: CALL_OW 478
40189: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40190: LD_VAR 0 9
40194: NOT
40195: PUSH
40196: LD_VAR 0 11
40200: NOT
40201: OR
40202: PUSH
40203: LD_VAR 0 12
40207: NOT
40208: OR
40209: PUSH
40210: LD_VAR 0 10
40214: NOT
40215: OR
40216: IFFALSE 40251
// begin result := [ chassis , engine , control , weapon ] ;
40218: LD_ADDR_VAR 0 6
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_VAR 0 3
40232: PUSH
40233: LD_VAR 0 4
40237: PUSH
40238: LD_VAR 0 5
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// exit ;
40249: GO 40542
// end ; if not chassis in _chassis then
40251: LD_VAR 0 2
40255: PUSH
40256: LD_VAR 0 9
40260: IN
40261: NOT
40262: IFFALSE 40288
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40264: LD_ADDR_VAR 0 2
40268: PUSH
40269: LD_VAR 0 9
40273: PUSH
40274: LD_INT 1
40276: PPUSH
40277: LD_VAR 0 9
40281: PPUSH
40282: CALL_OW 12
40286: ARRAY
40287: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40288: LD_VAR 0 2
40292: PPUSH
40293: LD_VAR 0 3
40297: PPUSH
40298: CALL 40547 0 2
40302: NOT
40303: IFFALSE 40362
// repeat engine := _engine [ 1 ] ;
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_VAR 0 11
40314: PUSH
40315: LD_INT 1
40317: ARRAY
40318: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40319: LD_ADDR_VAR 0 11
40323: PUSH
40324: LD_VAR 0 11
40328: PPUSH
40329: LD_INT 1
40331: PPUSH
40332: CALL_OW 3
40336: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40337: LD_VAR 0 2
40341: PPUSH
40342: LD_VAR 0 3
40346: PPUSH
40347: CALL 40547 0 2
40351: PUSH
40352: LD_VAR 0 11
40356: PUSH
40357: EMPTY
40358: EQUAL
40359: OR
40360: IFFALSE 40305
// if not control in _control then
40362: LD_VAR 0 4
40366: PUSH
40367: LD_VAR 0 12
40371: IN
40372: NOT
40373: IFFALSE 40399
// control := _control [ rand ( 1 , _control ) ] ;
40375: LD_ADDR_VAR 0 4
40379: PUSH
40380: LD_VAR 0 12
40384: PUSH
40385: LD_INT 1
40387: PPUSH
40388: LD_VAR 0 12
40392: PPUSH
40393: CALL_OW 12
40397: ARRAY
40398: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40399: LD_VAR 0 2
40403: PPUSH
40404: LD_VAR 0 5
40408: PPUSH
40409: CALL 40767 0 2
40413: NOT
40414: IFFALSE 40473
// repeat weapon := _weapon [ 1 ] ;
40416: LD_ADDR_VAR 0 5
40420: PUSH
40421: LD_VAR 0 10
40425: PUSH
40426: LD_INT 1
40428: ARRAY
40429: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40430: LD_ADDR_VAR 0 10
40434: PUSH
40435: LD_VAR 0 10
40439: PPUSH
40440: LD_INT 1
40442: PPUSH
40443: CALL_OW 3
40447: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40448: LD_VAR 0 2
40452: PPUSH
40453: LD_VAR 0 5
40457: PPUSH
40458: CALL 40767 0 2
40462: PUSH
40463: LD_VAR 0 10
40467: PUSH
40468: EMPTY
40469: EQUAL
40470: OR
40471: IFFALSE 40416
// result := [ ] ;
40473: LD_ADDR_VAR 0 6
40477: PUSH
40478: EMPTY
40479: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40480: LD_VAR 0 1
40484: PPUSH
40485: LD_VAR 0 2
40489: PPUSH
40490: LD_VAR 0 3
40494: PPUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: LD_VAR 0 5
40504: PPUSH
40505: CALL_OW 448
40509: IFFALSE 40542
// result := [ chassis , engine , control , weapon ] ;
40511: LD_ADDR_VAR 0 6
40515: PUSH
40516: LD_VAR 0 2
40520: PUSH
40521: LD_VAR 0 3
40525: PUSH
40526: LD_VAR 0 4
40530: PUSH
40531: LD_VAR 0 5
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: ST_TO_ADDR
// end ;
40542: LD_VAR 0 6
40546: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40547: LD_INT 0
40549: PPUSH
// if not chassis or not engine then
40550: LD_VAR 0 1
40554: NOT
40555: PUSH
40556: LD_VAR 0 2
40560: NOT
40561: OR
40562: IFFALSE 40566
// exit ;
40564: GO 40762
// case engine of engine_solar :
40566: LD_VAR 0 2
40570: PUSH
40571: LD_INT 2
40573: DOUBLE
40574: EQUAL
40575: IFTRUE 40579
40577: GO 40617
40579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40580: LD_ADDR_VAR 0 3
40584: PUSH
40585: LD_INT 11
40587: PUSH
40588: LD_INT 12
40590: PUSH
40591: LD_INT 13
40593: PUSH
40594: LD_INT 14
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 3
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
40615: GO 40746
40617: LD_INT 1
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40687
40625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 11
40633: PUSH
40634: LD_INT 12
40636: PUSH
40637: LD_INT 13
40639: PUSH
40640: LD_INT 14
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 4
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: LD_INT 21
40660: PUSH
40661: LD_INT 23
40663: PUSH
40664: LD_INT 22
40666: PUSH
40667: LD_INT 24
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
40685: GO 40746
40687: LD_INT 3
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40745
40695: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 13
40703: PUSH
40704: LD_INT 14
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 4
40715: PUSH
40716: LD_INT 5
40718: PUSH
40719: LD_INT 21
40721: PUSH
40722: LD_INT 22
40724: PUSH
40725: LD_INT 23
40727: PUSH
40728: LD_INT 24
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: ST_TO_ADDR
40743: GO 40746
40745: POP
// result := ( chassis in result ) ;
40746: LD_ADDR_VAR 0 3
40750: PUSH
40751: LD_VAR 0 1
40755: PUSH
40756: LD_VAR 0 3
40760: IN
40761: ST_TO_ADDR
// end ;
40762: LD_VAR 0 3
40766: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40767: LD_INT 0
40769: PPUSH
// if not chassis or not weapon then
40770: LD_VAR 0 1
40774: NOT
40775: PUSH
40776: LD_VAR 0 2
40780: NOT
40781: OR
40782: IFFALSE 40786
// exit ;
40784: GO 41848
// case weapon of us_machine_gun :
40786: LD_VAR 0 2
40790: PUSH
40791: LD_INT 2
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40829
40799: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 3
40813: PUSH
40814: LD_INT 4
40816: PUSH
40817: LD_INT 5
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: ST_TO_ADDR
40827: GO 41832
40829: LD_INT 3
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 40867
40837: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 3
40851: PUSH
40852: LD_INT 4
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
40865: GO 41832
40867: LD_INT 11
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40905
40875: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
40903: GO 41832
40905: LD_INT 4
40907: DOUBLE
40908: EQUAL
40909: IFTRUE 40913
40911: GO 40939
40913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40914: LD_ADDR_VAR 0 3
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 3
40924: PUSH
40925: LD_INT 4
40927: PUSH
40928: LD_INT 5
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: ST_TO_ADDR
40937: GO 41832
40939: LD_INT 5
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40973
40947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 4
40961: PUSH
40962: LD_INT 5
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: ST_TO_ADDR
40971: GO 41832
40973: LD_INT 9
40975: DOUBLE
40976: EQUAL
40977: IFTRUE 40981
40979: GO 41007
40981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 4
40995: PUSH
40996: LD_INT 5
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: ST_TO_ADDR
41005: GO 41832
41007: LD_INT 7
41009: DOUBLE
41010: EQUAL
41011: IFTRUE 41015
41013: GO 41041
41015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41016: LD_ADDR_VAR 0 3
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 3
41026: PUSH
41027: LD_INT 4
41029: PUSH
41030: LD_INT 5
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: ST_TO_ADDR
41039: GO 41832
41041: LD_INT 12
41043: DOUBLE
41044: EQUAL
41045: IFTRUE 41049
41047: GO 41075
41049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41050: LD_ADDR_VAR 0 3
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: LD_INT 5
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
41073: GO 41832
41075: LD_INT 13
41077: DOUBLE
41078: EQUAL
41079: IFTRUE 41083
41081: GO 41109
41083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 4
41097: PUSH
41098: LD_INT 5
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
41107: GO 41832
41109: LD_INT 14
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41117
41115: GO 41135
41117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41118: LD_ADDR_VAR 0 3
41122: PUSH
41123: LD_INT 4
41125: PUSH
41126: LD_INT 5
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: ST_TO_ADDR
41133: GO 41832
41135: LD_INT 6
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41161
41143: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_INT 4
41151: PUSH
41152: LD_INT 5
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: ST_TO_ADDR
41159: GO 41832
41161: LD_INT 10
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41187
41169: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41170: LD_ADDR_VAR 0 3
41174: PUSH
41175: LD_INT 4
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: ST_TO_ADDR
41185: GO 41832
41187: LD_INT 22
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41221
41195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41196: LD_ADDR_VAR 0 3
41200: PUSH
41201: LD_INT 11
41203: PUSH
41204: LD_INT 12
41206: PUSH
41207: LD_INT 13
41209: PUSH
41210: LD_INT 14
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
41219: GO 41832
41221: LD_INT 23
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41255
41229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_INT 11
41237: PUSH
41238: LD_INT 12
41240: PUSH
41241: LD_INT 13
41243: PUSH
41244: LD_INT 14
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
41253: GO 41832
41255: LD_INT 24
41257: DOUBLE
41258: EQUAL
41259: IFTRUE 41263
41261: GO 41289
41263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41264: LD_ADDR_VAR 0 3
41268: PUSH
41269: LD_INT 11
41271: PUSH
41272: LD_INT 12
41274: PUSH
41275: LD_INT 13
41277: PUSH
41278: LD_INT 14
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
41287: GO 41832
41289: LD_INT 30
41291: DOUBLE
41292: EQUAL
41293: IFTRUE 41297
41295: GO 41323
41297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41298: LD_ADDR_VAR 0 3
41302: PUSH
41303: LD_INT 11
41305: PUSH
41306: LD_INT 12
41308: PUSH
41309: LD_INT 13
41311: PUSH
41312: LD_INT 14
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: ST_TO_ADDR
41321: GO 41832
41323: LD_INT 25
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41331
41329: GO 41349
41331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 13
41339: PUSH
41340: LD_INT 14
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: ST_TO_ADDR
41347: GO 41832
41349: LD_INT 27
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41375
41357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_INT 13
41365: PUSH
41366: LD_INT 14
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: ST_TO_ADDR
41373: GO 41832
41375: LD_EXP 64
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41411
41385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 11
41393: PUSH
41394: LD_INT 12
41396: PUSH
41397: LD_INT 13
41399: PUSH
41400: LD_INT 14
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: ST_TO_ADDR
41409: GO 41832
41411: LD_INT 28
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41437
41419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 13
41427: PUSH
41428: LD_INT 14
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: ST_TO_ADDR
41435: GO 41832
41437: LD_INT 29
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41445
41443: GO 41463
41445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 13
41453: PUSH
41454: LD_INT 14
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: ST_TO_ADDR
41461: GO 41832
41463: LD_INT 31
41465: DOUBLE
41466: EQUAL
41467: IFTRUE 41471
41469: GO 41489
41471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41472: LD_ADDR_VAR 0 3
41476: PUSH
41477: LD_INT 13
41479: PUSH
41480: LD_INT 14
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: ST_TO_ADDR
41487: GO 41832
41489: LD_INT 26
41491: DOUBLE
41492: EQUAL
41493: IFTRUE 41497
41495: GO 41515
41497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: LD_INT 13
41505: PUSH
41506: LD_INT 14
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: ST_TO_ADDR
41513: GO 41832
41515: LD_INT 42
41517: DOUBLE
41518: EQUAL
41519: IFTRUE 41523
41521: GO 41549
41523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 21
41531: PUSH
41532: LD_INT 22
41534: PUSH
41535: LD_INT 23
41537: PUSH
41538: LD_INT 24
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
41547: GO 41832
41549: LD_INT 43
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41557
41555: GO 41583
41557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41558: LD_ADDR_VAR 0 3
41562: PUSH
41563: LD_INT 21
41565: PUSH
41566: LD_INT 22
41568: PUSH
41569: LD_INT 23
41571: PUSH
41572: LD_INT 24
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
41581: GO 41832
41583: LD_INT 44
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41591
41589: GO 41617
41591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_INT 21
41599: PUSH
41600: LD_INT 22
41602: PUSH
41603: LD_INT 23
41605: PUSH
41606: LD_INT 24
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: ST_TO_ADDR
41615: GO 41832
41617: LD_INT 45
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41651
41625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 21
41633: PUSH
41634: LD_INT 22
41636: PUSH
41637: LD_INT 23
41639: PUSH
41640: LD_INT 24
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: ST_TO_ADDR
41649: GO 41832
41651: LD_INT 49
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41685
41659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 21
41667: PUSH
41668: LD_INT 22
41670: PUSH
41671: LD_INT 23
41673: PUSH
41674: LD_INT 24
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
41683: GO 41832
41685: LD_INT 51
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 41719
41693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 21
41701: PUSH
41702: LD_INT 22
41704: PUSH
41705: LD_INT 23
41707: PUSH
41708: LD_INT 24
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: ST_TO_ADDR
41717: GO 41832
41719: LD_INT 52
41721: DOUBLE
41722: EQUAL
41723: IFTRUE 41727
41725: GO 41753
41727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41728: LD_ADDR_VAR 0 3
41732: PUSH
41733: LD_INT 21
41735: PUSH
41736: LD_INT 22
41738: PUSH
41739: LD_INT 23
41741: PUSH
41742: LD_INT 24
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: ST_TO_ADDR
41751: GO 41832
41753: LD_INT 53
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41779
41761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 23
41769: PUSH
41770: LD_INT 24
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: ST_TO_ADDR
41777: GO 41832
41779: LD_INT 46
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41787
41785: GO 41805
41787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_INT 23
41795: PUSH
41796: LD_INT 24
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: ST_TO_ADDR
41803: GO 41832
41805: LD_INT 47
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41831
41813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_INT 23
41821: PUSH
41822: LD_INT 24
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: ST_TO_ADDR
41829: GO 41832
41831: POP
// result := ( chassis in result ) ;
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_VAR 0 1
41841: PUSH
41842: LD_VAR 0 3
41846: IN
41847: ST_TO_ADDR
// end ;
41848: LD_VAR 0 3
41852: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41853: LD_INT 0
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
// result := array ;
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_VAR 0 1
41871: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41872: LD_VAR 0 1
41876: NOT
41877: PUSH
41878: LD_VAR 0 2
41882: NOT
41883: OR
41884: PUSH
41885: LD_VAR 0 3
41889: NOT
41890: OR
41891: PUSH
41892: LD_VAR 0 2
41896: PUSH
41897: LD_VAR 0 1
41901: GREATER
41902: OR
41903: PUSH
41904: LD_VAR 0 3
41908: PUSH
41909: LD_VAR 0 1
41913: GREATER
41914: OR
41915: IFFALSE 41919
// exit ;
41917: GO 42215
// if direction then
41919: LD_VAR 0 4
41923: IFFALSE 41987
// begin d := 1 ;
41925: LD_ADDR_VAR 0 9
41929: PUSH
41930: LD_INT 1
41932: ST_TO_ADDR
// if i_from > i_to then
41933: LD_VAR 0 2
41937: PUSH
41938: LD_VAR 0 3
41942: GREATER
41943: IFFALSE 41969
// length := ( array - i_from ) + i_to else
41945: LD_ADDR_VAR 0 11
41949: PUSH
41950: LD_VAR 0 1
41954: PUSH
41955: LD_VAR 0 2
41959: MINUS
41960: PUSH
41961: LD_VAR 0 3
41965: PLUS
41966: ST_TO_ADDR
41967: GO 41985
// length := i_to - i_from ;
41969: LD_ADDR_VAR 0 11
41973: PUSH
41974: LD_VAR 0 3
41978: PUSH
41979: LD_VAR 0 2
41983: MINUS
41984: ST_TO_ADDR
// end else
41985: GO 42048
// begin d := - 1 ;
41987: LD_ADDR_VAR 0 9
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: ST_TO_ADDR
// if i_from > i_to then
41996: LD_VAR 0 2
42000: PUSH
42001: LD_VAR 0 3
42005: GREATER
42006: IFFALSE 42026
// length := i_from - i_to else
42008: LD_ADDR_VAR 0 11
42012: PUSH
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 3
42022: MINUS
42023: ST_TO_ADDR
42024: GO 42048
// length := ( array - i_to ) + i_from ;
42026: LD_ADDR_VAR 0 11
42030: PUSH
42031: LD_VAR 0 1
42035: PUSH
42036: LD_VAR 0 3
42040: MINUS
42041: PUSH
42042: LD_VAR 0 2
42046: PLUS
42047: ST_TO_ADDR
// end ; if not length then
42048: LD_VAR 0 11
42052: NOT
42053: IFFALSE 42057
// exit ;
42055: GO 42215
// tmp := array ;
42057: LD_ADDR_VAR 0 10
42061: PUSH
42062: LD_VAR 0 1
42066: ST_TO_ADDR
// for i = 1 to length do
42067: LD_ADDR_VAR 0 6
42071: PUSH
42072: DOUBLE
42073: LD_INT 1
42075: DEC
42076: ST_TO_ADDR
42077: LD_VAR 0 11
42081: PUSH
42082: FOR_TO
42083: IFFALSE 42203
// begin for j = 1 to array do
42085: LD_ADDR_VAR 0 7
42089: PUSH
42090: DOUBLE
42091: LD_INT 1
42093: DEC
42094: ST_TO_ADDR
42095: LD_VAR 0 1
42099: PUSH
42100: FOR_TO
42101: IFFALSE 42189
// begin k := j + d ;
42103: LD_ADDR_VAR 0 8
42107: PUSH
42108: LD_VAR 0 7
42112: PUSH
42113: LD_VAR 0 9
42117: PLUS
42118: ST_TO_ADDR
// if k > array then
42119: LD_VAR 0 8
42123: PUSH
42124: LD_VAR 0 1
42128: GREATER
42129: IFFALSE 42139
// k := 1 ;
42131: LD_ADDR_VAR 0 8
42135: PUSH
42136: LD_INT 1
42138: ST_TO_ADDR
// if not k then
42139: LD_VAR 0 8
42143: NOT
42144: IFFALSE 42156
// k := array ;
42146: LD_ADDR_VAR 0 8
42150: PUSH
42151: LD_VAR 0 1
42155: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42156: LD_ADDR_VAR 0 10
42160: PUSH
42161: LD_VAR 0 10
42165: PPUSH
42166: LD_VAR 0 8
42170: PPUSH
42171: LD_VAR 0 1
42175: PUSH
42176: LD_VAR 0 7
42180: ARRAY
42181: PPUSH
42182: CALL_OW 1
42186: ST_TO_ADDR
// end ;
42187: GO 42100
42189: POP
42190: POP
// array := tmp ;
42191: LD_ADDR_VAR 0 1
42195: PUSH
42196: LD_VAR 0 10
42200: ST_TO_ADDR
// end ;
42201: GO 42082
42203: POP
42204: POP
// result := array ;
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_VAR 0 1
42214: ST_TO_ADDR
// end ;
42215: LD_VAR 0 5
42219: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42220: LD_INT 0
42222: PPUSH
42223: PPUSH
// result := 0 ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_INT 0
42231: ST_TO_ADDR
// if not array or not value in array then
42232: LD_VAR 0 1
42236: NOT
42237: PUSH
42238: LD_VAR 0 2
42242: PUSH
42243: LD_VAR 0 1
42247: IN
42248: NOT
42249: OR
42250: IFFALSE 42254
// exit ;
42252: GO 42308
// for i = 1 to array do
42254: LD_ADDR_VAR 0 4
42258: PUSH
42259: DOUBLE
42260: LD_INT 1
42262: DEC
42263: ST_TO_ADDR
42264: LD_VAR 0 1
42268: PUSH
42269: FOR_TO
42270: IFFALSE 42306
// if value = array [ i ] then
42272: LD_VAR 0 2
42276: PUSH
42277: LD_VAR 0 1
42281: PUSH
42282: LD_VAR 0 4
42286: ARRAY
42287: EQUAL
42288: IFFALSE 42304
// begin result := i ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_VAR 0 4
42299: ST_TO_ADDR
// exit ;
42300: POP
42301: POP
42302: GO 42308
// end ;
42304: GO 42269
42306: POP
42307: POP
// end ;
42308: LD_VAR 0 3
42312: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42313: LD_INT 0
42315: PPUSH
// vc_chassis := chassis ;
42316: LD_ADDR_OWVAR 37
42320: PUSH
42321: LD_VAR 0 1
42325: ST_TO_ADDR
// vc_engine := engine ;
42326: LD_ADDR_OWVAR 39
42330: PUSH
42331: LD_VAR 0 2
42335: ST_TO_ADDR
// vc_control := control ;
42336: LD_ADDR_OWVAR 38
42340: PUSH
42341: LD_VAR 0 3
42345: ST_TO_ADDR
// vc_weapon := weapon ;
42346: LD_ADDR_OWVAR 40
42350: PUSH
42351: LD_VAR 0 4
42355: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42356: LD_ADDR_OWVAR 41
42360: PUSH
42361: LD_VAR 0 5
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 6
42370: RET
// export function WantPlant ( unit ) ; var task ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
// result := false ;
42375: LD_ADDR_VAR 0 2
42379: PUSH
42380: LD_INT 0
42382: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42383: LD_ADDR_VAR 0 3
42387: PUSH
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 437
42397: ST_TO_ADDR
// if task then
42398: LD_VAR 0 3
42402: IFFALSE 42430
// if task [ 1 ] [ 1 ] = p then
42404: LD_VAR 0 3
42408: PUSH
42409: LD_INT 1
42411: ARRAY
42412: PUSH
42413: LD_INT 1
42415: ARRAY
42416: PUSH
42417: LD_STRING p
42419: EQUAL
42420: IFFALSE 42430
// result := true ;
42422: LD_ADDR_VAR 0 2
42426: PUSH
42427: LD_INT 1
42429: ST_TO_ADDR
// end ;
42430: LD_VAR 0 2
42434: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42435: LD_INT 0
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
// if pos < 1 then
42441: LD_VAR 0 2
42445: PUSH
42446: LD_INT 1
42448: LESS
42449: IFFALSE 42453
// exit ;
42451: GO 42756
// if pos = 1 then
42453: LD_VAR 0 2
42457: PUSH
42458: LD_INT 1
42460: EQUAL
42461: IFFALSE 42494
// result := Replace ( arr , pos [ 1 ] , value ) else
42463: LD_ADDR_VAR 0 4
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: LD_VAR 0 2
42477: PUSH
42478: LD_INT 1
42480: ARRAY
42481: PPUSH
42482: LD_VAR 0 3
42486: PPUSH
42487: CALL_OW 1
42491: ST_TO_ADDR
42492: GO 42756
// begin tmp := arr ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 1
42503: ST_TO_ADDR
// s_arr := [ tmp ] ;
42504: LD_ADDR_VAR 0 7
42508: PUSH
42509: LD_VAR 0 6
42513: PUSH
42514: EMPTY
42515: LIST
42516: ST_TO_ADDR
// for i = 1 to pos - 1 do
42517: LD_ADDR_VAR 0 5
42521: PUSH
42522: DOUBLE
42523: LD_INT 1
42525: DEC
42526: ST_TO_ADDR
42527: LD_VAR 0 2
42531: PUSH
42532: LD_INT 1
42534: MINUS
42535: PUSH
42536: FOR_TO
42537: IFFALSE 42582
// begin tmp := tmp [ pos [ i ] ] ;
42539: LD_ADDR_VAR 0 6
42543: PUSH
42544: LD_VAR 0 6
42548: PUSH
42549: LD_VAR 0 2
42553: PUSH
42554: LD_VAR 0 5
42558: ARRAY
42559: ARRAY
42560: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42561: LD_ADDR_VAR 0 7
42565: PUSH
42566: LD_VAR 0 7
42570: PUSH
42571: LD_VAR 0 6
42575: PUSH
42576: EMPTY
42577: LIST
42578: ADD
42579: ST_TO_ADDR
// end ;
42580: GO 42536
42582: POP
42583: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42584: LD_ADDR_VAR 0 6
42588: PUSH
42589: LD_VAR 0 6
42593: PPUSH
42594: LD_VAR 0 2
42598: PUSH
42599: LD_VAR 0 2
42603: ARRAY
42604: PPUSH
42605: LD_VAR 0 3
42609: PPUSH
42610: CALL_OW 1
42614: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42615: LD_ADDR_VAR 0 7
42619: PUSH
42620: LD_VAR 0 7
42624: PPUSH
42625: LD_VAR 0 7
42629: PPUSH
42630: LD_VAR 0 6
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
// for i = s_arr downto 2 do
42640: LD_ADDR_VAR 0 5
42644: PUSH
42645: DOUBLE
42646: LD_VAR 0 7
42650: INC
42651: ST_TO_ADDR
42652: LD_INT 2
42654: PUSH
42655: FOR_DOWNTO
42656: IFFALSE 42740
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42658: LD_ADDR_VAR 0 6
42662: PUSH
42663: LD_VAR 0 7
42667: PUSH
42668: LD_VAR 0 5
42672: PUSH
42673: LD_INT 1
42675: MINUS
42676: ARRAY
42677: PPUSH
42678: LD_VAR 0 2
42682: PUSH
42683: LD_VAR 0 5
42687: PUSH
42688: LD_INT 1
42690: MINUS
42691: ARRAY
42692: PPUSH
42693: LD_VAR 0 7
42697: PUSH
42698: LD_VAR 0 5
42702: ARRAY
42703: PPUSH
42704: CALL_OW 1
42708: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42709: LD_ADDR_VAR 0 7
42713: PUSH
42714: LD_VAR 0 7
42718: PPUSH
42719: LD_VAR 0 5
42723: PUSH
42724: LD_INT 1
42726: MINUS
42727: PPUSH
42728: LD_VAR 0 6
42732: PPUSH
42733: CALL_OW 1
42737: ST_TO_ADDR
// end ;
42738: GO 42655
42740: POP
42741: POP
// result := s_arr [ 1 ] ;
42742: LD_ADDR_VAR 0 4
42746: PUSH
42747: LD_VAR 0 7
42751: PUSH
42752: LD_INT 1
42754: ARRAY
42755: ST_TO_ADDR
// end ; end ;
42756: LD_VAR 0 4
42760: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42761: LD_INT 0
42763: PPUSH
42764: PPUSH
// if not list then
42765: LD_VAR 0 1
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 42865
// i := list [ pos1 ] ;
42774: LD_ADDR_VAR 0 5
42778: PUSH
42779: LD_VAR 0 1
42783: PUSH
42784: LD_VAR 0 2
42788: ARRAY
42789: ST_TO_ADDR
// if not i then
42790: LD_VAR 0 5
42794: NOT
42795: IFFALSE 42799
// exit ;
42797: GO 42865
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42799: LD_ADDR_VAR 0 1
42803: PUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: LD_VAR 0 1
42818: PUSH
42819: LD_VAR 0 3
42823: ARRAY
42824: PPUSH
42825: CALL_OW 1
42829: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42830: LD_ADDR_VAR 0 1
42834: PUSH
42835: LD_VAR 0 1
42839: PPUSH
42840: LD_VAR 0 3
42844: PPUSH
42845: LD_VAR 0 5
42849: PPUSH
42850: CALL_OW 1
42854: ST_TO_ADDR
// result := list ;
42855: LD_ADDR_VAR 0 4
42859: PUSH
42860: LD_VAR 0 1
42864: ST_TO_ADDR
// end ;
42865: LD_VAR 0 4
42869: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42870: LD_INT 0
42872: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42873: LD_ADDR_VAR 0 5
42877: PUSH
42878: LD_VAR 0 1
42882: PPUSH
42883: CALL_OW 250
42887: PPUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 251
42897: PPUSH
42898: LD_VAR 0 2
42902: PPUSH
42903: LD_VAR 0 3
42907: PPUSH
42908: LD_VAR 0 4
42912: PPUSH
42913: CALL 42923 0 5
42917: ST_TO_ADDR
// end ;
42918: LD_VAR 0 5
42922: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
// if not list then
42929: LD_VAR 0 3
42933: NOT
42934: IFFALSE 42938
// exit ;
42936: GO 43326
// result := [ ] ;
42938: LD_ADDR_VAR 0 6
42942: PUSH
42943: EMPTY
42944: ST_TO_ADDR
// for i in list do
42945: LD_ADDR_VAR 0 7
42949: PUSH
42950: LD_VAR 0 3
42954: PUSH
42955: FOR_IN
42956: IFFALSE 43158
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_VAR 0 7
42967: PPUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: LD_VAR 0 2
42977: PPUSH
42978: CALL_OW 297
42982: ST_TO_ADDR
// if not result then
42983: LD_VAR 0 6
42987: NOT
42988: IFFALSE 43014
// result := [ [ i , tmp ] ] else
42990: LD_ADDR_VAR 0 6
42994: PUSH
42995: LD_VAR 0 7
42999: PUSH
43000: LD_VAR 0 9
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: ST_TO_ADDR
43012: GO 43156
// begin if result [ result ] [ 2 ] < tmp then
43014: LD_VAR 0 6
43018: PUSH
43019: LD_VAR 0 6
43023: ARRAY
43024: PUSH
43025: LD_INT 2
43027: ARRAY
43028: PUSH
43029: LD_VAR 0 9
43033: LESS
43034: IFFALSE 43076
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43036: LD_ADDR_VAR 0 6
43040: PUSH
43041: LD_VAR 0 6
43045: PPUSH
43046: LD_VAR 0 6
43050: PUSH
43051: LD_INT 1
43053: PLUS
43054: PPUSH
43055: LD_VAR 0 7
43059: PUSH
43060: LD_VAR 0 9
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PPUSH
43069: CALL_OW 2
43073: ST_TO_ADDR
43074: GO 43156
// for j = 1 to result do
43076: LD_ADDR_VAR 0 8
43080: PUSH
43081: DOUBLE
43082: LD_INT 1
43084: DEC
43085: ST_TO_ADDR
43086: LD_VAR 0 6
43090: PUSH
43091: FOR_TO
43092: IFFALSE 43154
// begin if tmp < result [ j ] [ 2 ] then
43094: LD_VAR 0 9
43098: PUSH
43099: LD_VAR 0 6
43103: PUSH
43104: LD_VAR 0 8
43108: ARRAY
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: LESS
43114: IFFALSE 43152
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43116: LD_ADDR_VAR 0 6
43120: PUSH
43121: LD_VAR 0 6
43125: PPUSH
43126: LD_VAR 0 8
43130: PPUSH
43131: LD_VAR 0 7
43135: PUSH
43136: LD_VAR 0 9
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PPUSH
43145: CALL_OW 2
43149: ST_TO_ADDR
// break ;
43150: GO 43154
// end ; end ;
43152: GO 43091
43154: POP
43155: POP
// end ; end ;
43156: GO 42955
43158: POP
43159: POP
// if result and not asc then
43160: LD_VAR 0 6
43164: PUSH
43165: LD_VAR 0 4
43169: NOT
43170: AND
43171: IFFALSE 43246
// begin tmp := result ;
43173: LD_ADDR_VAR 0 9
43177: PUSH
43178: LD_VAR 0 6
43182: ST_TO_ADDR
// for i = tmp downto 1 do
43183: LD_ADDR_VAR 0 7
43187: PUSH
43188: DOUBLE
43189: LD_VAR 0 9
43193: INC
43194: ST_TO_ADDR
43195: LD_INT 1
43197: PUSH
43198: FOR_DOWNTO
43199: IFFALSE 43244
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43201: LD_ADDR_VAR 0 6
43205: PUSH
43206: LD_VAR 0 6
43210: PPUSH
43211: LD_VAR 0 9
43215: PUSH
43216: LD_VAR 0 7
43220: MINUS
43221: PUSH
43222: LD_INT 1
43224: PLUS
43225: PPUSH
43226: LD_VAR 0 9
43230: PUSH
43231: LD_VAR 0 7
43235: ARRAY
43236: PPUSH
43237: CALL_OW 1
43241: ST_TO_ADDR
43242: GO 43198
43244: POP
43245: POP
// end ; tmp := [ ] ;
43246: LD_ADDR_VAR 0 9
43250: PUSH
43251: EMPTY
43252: ST_TO_ADDR
// if mode then
43253: LD_VAR 0 5
43257: IFFALSE 43326
// begin for i = 1 to result do
43259: LD_ADDR_VAR 0 7
43263: PUSH
43264: DOUBLE
43265: LD_INT 1
43267: DEC
43268: ST_TO_ADDR
43269: LD_VAR 0 6
43273: PUSH
43274: FOR_TO
43275: IFFALSE 43314
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43277: LD_ADDR_VAR 0 9
43281: PUSH
43282: LD_VAR 0 9
43286: PPUSH
43287: LD_VAR 0 7
43291: PPUSH
43292: LD_VAR 0 6
43296: PUSH
43297: LD_VAR 0 7
43301: ARRAY
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: PPUSH
43307: CALL_OW 1
43311: ST_TO_ADDR
43312: GO 43274
43314: POP
43315: POP
// result := tmp ;
43316: LD_ADDR_VAR 0 6
43320: PUSH
43321: LD_VAR 0 9
43325: ST_TO_ADDR
// end ; end ;
43326: LD_VAR 0 6
43330: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43331: LD_INT 0
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43339: LD_ADDR_VAR 0 5
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: ST_TO_ADDR
// if not x or not y then
43361: LD_VAR 0 2
43365: NOT
43366: PUSH
43367: LD_VAR 0 3
43371: NOT
43372: OR
43373: IFFALSE 43377
// exit ;
43375: GO 45029
// if not range then
43377: LD_VAR 0 4
43381: NOT
43382: IFFALSE 43392
// range := 10 ;
43384: LD_ADDR_VAR 0 4
43388: PUSH
43389: LD_INT 10
43391: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43392: LD_ADDR_VAR 0 8
43396: PUSH
43397: LD_INT 81
43399: PUSH
43400: LD_VAR 0 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 92
43411: PUSH
43412: LD_VAR 0 2
43416: PUSH
43417: LD_VAR 0 3
43421: PUSH
43422: LD_VAR 0 4
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 21
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: PPUSH
43455: CALL_OW 69
43459: ST_TO_ADDR
// if not tmp then
43460: LD_VAR 0 8
43464: NOT
43465: IFFALSE 43469
// exit ;
43467: GO 45029
// for i in tmp do
43469: LD_ADDR_VAR 0 6
43473: PUSH
43474: LD_VAR 0 8
43478: PUSH
43479: FOR_IN
43480: IFFALSE 45004
// begin points := [ 0 , 0 , 0 ] ;
43482: LD_ADDR_VAR 0 9
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// bpoints := 1 ;
43501: LD_ADDR_VAR 0 10
43505: PUSH
43506: LD_INT 1
43508: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43509: LD_VAR 0 6
43513: PPUSH
43514: CALL_OW 247
43518: PUSH
43519: LD_INT 1
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43527
43525: GO 44105
43527: POP
// begin if GetClass ( i ) = 1 then
43528: LD_VAR 0 6
43532: PPUSH
43533: CALL_OW 257
43537: PUSH
43538: LD_INT 1
43540: EQUAL
43541: IFFALSE 43562
// points := [ 10 , 5 , 3 ] ;
43543: LD_ADDR_VAR 0 9
43547: PUSH
43548: LD_INT 10
43550: PUSH
43551: LD_INT 5
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43562: LD_VAR 0 6
43566: PPUSH
43567: CALL_OW 257
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: LD_INT 4
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: IN
43586: IFFALSE 43607
// points := [ 3 , 2 , 1 ] ;
43588: LD_ADDR_VAR 0 9
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43607: LD_VAR 0 6
43611: PPUSH
43612: CALL_OW 257
43616: PUSH
43617: LD_INT 5
43619: EQUAL
43620: IFFALSE 43641
// points := [ 130 , 5 , 2 ] ;
43622: LD_ADDR_VAR 0 9
43626: PUSH
43627: LD_INT 130
43629: PUSH
43630: LD_INT 5
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43641: LD_VAR 0 6
43645: PPUSH
43646: CALL_OW 257
43650: PUSH
43651: LD_INT 8
43653: EQUAL
43654: IFFALSE 43675
// points := [ 35 , 35 , 30 ] ;
43656: LD_ADDR_VAR 0 9
43660: PUSH
43661: LD_INT 35
43663: PUSH
43664: LD_INT 35
43666: PUSH
43667: LD_INT 30
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43675: LD_VAR 0 6
43679: PPUSH
43680: CALL_OW 257
43684: PUSH
43685: LD_INT 9
43687: EQUAL
43688: IFFALSE 43709
// points := [ 20 , 55 , 40 ] ;
43690: LD_ADDR_VAR 0 9
43694: PUSH
43695: LD_INT 20
43697: PUSH
43698: LD_INT 55
43700: PUSH
43701: LD_INT 40
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43709: LD_VAR 0 6
43713: PPUSH
43714: CALL_OW 257
43718: PUSH
43719: LD_INT 12
43721: PUSH
43722: LD_INT 16
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: IN
43729: IFFALSE 43750
// points := [ 5 , 3 , 2 ] ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_INT 5
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 257
43759: PUSH
43760: LD_INT 17
43762: EQUAL
43763: IFFALSE 43784
// points := [ 100 , 50 , 75 ] ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 100
43772: PUSH
43773: LD_INT 50
43775: PUSH
43776: LD_INT 75
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43784: LD_VAR 0 6
43788: PPUSH
43789: CALL_OW 257
43793: PUSH
43794: LD_INT 15
43796: EQUAL
43797: IFFALSE 43818
// points := [ 10 , 5 , 3 ] ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_INT 10
43806: PUSH
43807: LD_INT 5
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 257
43827: PUSH
43828: LD_INT 14
43830: EQUAL
43831: IFFALSE 43852
// points := [ 10 , 0 , 0 ] ;
43833: LD_ADDR_VAR 0 9
43837: PUSH
43838: LD_INT 10
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43852: LD_VAR 0 6
43856: PPUSH
43857: CALL_OW 257
43861: PUSH
43862: LD_INT 11
43864: EQUAL
43865: IFFALSE 43886
// points := [ 30 , 10 , 5 ] ;
43867: LD_ADDR_VAR 0 9
43871: PUSH
43872: LD_INT 30
43874: PUSH
43875: LD_INT 10
43877: PUSH
43878: LD_INT 5
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43886: LD_VAR 0 1
43890: PPUSH
43891: LD_INT 5
43893: PPUSH
43894: CALL_OW 321
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: IFFALSE 43919
// bpoints := bpoints * 1.8 ;
43904: LD_ADDR_VAR 0 10
43908: PUSH
43909: LD_VAR 0 10
43913: PUSH
43914: LD_REAL  1.80000000000000E+0000
43917: MUL
43918: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43919: LD_VAR 0 6
43923: PPUSH
43924: CALL_OW 257
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: LD_INT 4
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: IN
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: LD_INT 51
43955: PPUSH
43956: CALL_OW 321
43960: PUSH
43961: LD_INT 2
43963: EQUAL
43964: AND
43965: IFFALSE 43982
// bpoints := bpoints * 1.2 ;
43967: LD_ADDR_VAR 0 10
43971: PUSH
43972: LD_VAR 0 10
43976: PUSH
43977: LD_REAL  1.20000000000000E+0000
43980: MUL
43981: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43982: LD_VAR 0 6
43986: PPUSH
43987: CALL_OW 257
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: LD_INT 7
43997: PUSH
43998: LD_INT 9
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: IN
44006: PUSH
44007: LD_VAR 0 1
44011: PPUSH
44012: LD_INT 52
44014: PPUSH
44015: CALL_OW 321
44019: PUSH
44020: LD_INT 2
44022: EQUAL
44023: AND
44024: IFFALSE 44041
// bpoints := bpoints * 1.5 ;
44026: LD_ADDR_VAR 0 10
44030: PUSH
44031: LD_VAR 0 10
44035: PUSH
44036: LD_REAL  1.50000000000000E+0000
44039: MUL
44040: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44041: LD_VAR 0 1
44045: PPUSH
44046: LD_INT 66
44048: PPUSH
44049: CALL_OW 321
44053: PUSH
44054: LD_INT 2
44056: EQUAL
44057: IFFALSE 44074
// bpoints := bpoints * 1.1 ;
44059: LD_ADDR_VAR 0 10
44063: PUSH
44064: LD_VAR 0 10
44068: PUSH
44069: LD_REAL  1.10000000000000E+0000
44072: MUL
44073: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44074: LD_ADDR_VAR 0 10
44078: PUSH
44079: LD_VAR 0 10
44083: PUSH
44084: LD_VAR 0 6
44088: PPUSH
44089: LD_INT 1
44091: PPUSH
44092: CALL_OW 259
44096: PUSH
44097: LD_REAL  1.15000000000000E+0000
44100: MUL
44101: MUL
44102: ST_TO_ADDR
// end ; unit_vehicle :
44103: GO 44933
44105: LD_INT 2
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 44921
44113: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44114: LD_VAR 0 6
44118: PPUSH
44119: CALL_OW 264
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: LD_INT 42
44129: PUSH
44130: LD_INT 24
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: IN
44138: IFFALSE 44159
// points := [ 25 , 5 , 3 ] ;
44140: LD_ADDR_VAR 0 9
44144: PUSH
44145: LD_INT 25
44147: PUSH
44148: LD_INT 5
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44159: LD_VAR 0 6
44163: PPUSH
44164: CALL_OW 264
44168: PUSH
44169: LD_INT 4
44171: PUSH
44172: LD_INT 43
44174: PUSH
44175: LD_INT 25
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: IN
44183: IFFALSE 44204
// points := [ 40 , 15 , 5 ] ;
44185: LD_ADDR_VAR 0 9
44189: PUSH
44190: LD_INT 40
44192: PUSH
44193: LD_INT 15
44195: PUSH
44196: LD_INT 5
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44204: LD_VAR 0 6
44208: PPUSH
44209: CALL_OW 264
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: LD_INT 23
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: IN
44224: IFFALSE 44245
// points := [ 7 , 25 , 8 ] ;
44226: LD_ADDR_VAR 0 9
44230: PUSH
44231: LD_INT 7
44233: PUSH
44234: LD_INT 25
44236: PUSH
44237: LD_INT 8
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44245: LD_VAR 0 6
44249: PPUSH
44250: CALL_OW 264
44254: PUSH
44255: LD_INT 5
44257: PUSH
44258: LD_INT 27
44260: PUSH
44261: LD_INT 44
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: IN
44269: IFFALSE 44290
// points := [ 14 , 50 , 16 ] ;
44271: LD_ADDR_VAR 0 9
44275: PUSH
44276: LD_INT 14
44278: PUSH
44279: LD_INT 50
44281: PUSH
44282: LD_INT 16
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44290: LD_VAR 0 6
44294: PPUSH
44295: CALL_OW 264
44299: PUSH
44300: LD_INT 6
44302: PUSH
44303: LD_INT 46
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: IN
44310: IFFALSE 44331
// points := [ 32 , 120 , 70 ] ;
44312: LD_ADDR_VAR 0 9
44316: PUSH
44317: LD_INT 32
44319: PUSH
44320: LD_INT 120
44322: PUSH
44323: LD_INT 70
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44331: LD_VAR 0 6
44335: PPUSH
44336: CALL_OW 264
44340: PUSH
44341: LD_INT 7
44343: PUSH
44344: LD_INT 28
44346: PUSH
44347: LD_INT 45
44349: PUSH
44350: LD_EXP 64
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: IN
44361: IFFALSE 44382
// points := [ 35 , 20 , 45 ] ;
44363: LD_ADDR_VAR 0 9
44367: PUSH
44368: LD_INT 35
44370: PUSH
44371: LD_INT 20
44373: PUSH
44374: LD_INT 45
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44382: LD_VAR 0 6
44386: PPUSH
44387: CALL_OW 264
44391: PUSH
44392: LD_INT 47
44394: PUSH
44395: EMPTY
44396: LIST
44397: IN
44398: IFFALSE 44419
// points := [ 67 , 45 , 75 ] ;
44400: LD_ADDR_VAR 0 9
44404: PUSH
44405: LD_INT 67
44407: PUSH
44408: LD_INT 45
44410: PUSH
44411: LD_INT 75
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44419: LD_VAR 0 6
44423: PPUSH
44424: CALL_OW 264
44428: PUSH
44429: LD_INT 26
44431: PUSH
44432: EMPTY
44433: LIST
44434: IN
44435: IFFALSE 44456
// points := [ 120 , 30 , 80 ] ;
44437: LD_ADDR_VAR 0 9
44441: PUSH
44442: LD_INT 120
44444: PUSH
44445: LD_INT 30
44447: PUSH
44448: LD_INT 80
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44456: LD_VAR 0 6
44460: PPUSH
44461: CALL_OW 264
44465: PUSH
44466: LD_INT 22
44468: PUSH
44469: EMPTY
44470: LIST
44471: IN
44472: IFFALSE 44493
// points := [ 40 , 1 , 1 ] ;
44474: LD_ADDR_VAR 0 9
44478: PUSH
44479: LD_INT 40
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44493: LD_VAR 0 6
44497: PPUSH
44498: CALL_OW 264
44502: PUSH
44503: LD_INT 29
44505: PUSH
44506: EMPTY
44507: LIST
44508: IN
44509: IFFALSE 44530
// points := [ 70 , 200 , 400 ] ;
44511: LD_ADDR_VAR 0 9
44515: PUSH
44516: LD_INT 70
44518: PUSH
44519: LD_INT 200
44521: PUSH
44522: LD_INT 400
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44530: LD_VAR 0 6
44534: PPUSH
44535: CALL_OW 264
44539: PUSH
44540: LD_INT 14
44542: PUSH
44543: LD_INT 53
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: IN
44550: IFFALSE 44571
// points := [ 40 , 10 , 20 ] ;
44552: LD_ADDR_VAR 0 9
44556: PUSH
44557: LD_INT 40
44559: PUSH
44560: LD_INT 10
44562: PUSH
44563: LD_INT 20
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44571: LD_VAR 0 6
44575: PPUSH
44576: CALL_OW 264
44580: PUSH
44581: LD_INT 9
44583: PUSH
44584: EMPTY
44585: LIST
44586: IN
44587: IFFALSE 44608
// points := [ 5 , 70 , 20 ] ;
44589: LD_ADDR_VAR 0 9
44593: PUSH
44594: LD_INT 5
44596: PUSH
44597: LD_INT 70
44599: PUSH
44600: LD_INT 20
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 264
44617: PUSH
44618: LD_INT 10
44620: PUSH
44621: EMPTY
44622: LIST
44623: IN
44624: IFFALSE 44645
// points := [ 35 , 110 , 70 ] ;
44626: LD_ADDR_VAR 0 9
44630: PUSH
44631: LD_INT 35
44633: PUSH
44634: LD_INT 110
44636: PUSH
44637: LD_INT 70
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44645: LD_VAR 0 6
44649: PPUSH
44650: CALL_OW 265
44654: PUSH
44655: LD_INT 25
44657: EQUAL
44658: IFFALSE 44679
// points := [ 80 , 65 , 100 ] ;
44660: LD_ADDR_VAR 0 9
44664: PUSH
44665: LD_INT 80
44667: PUSH
44668: LD_INT 65
44670: PUSH
44671: LD_INT 100
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44679: LD_VAR 0 6
44683: PPUSH
44684: CALL_OW 263
44688: PUSH
44689: LD_INT 1
44691: EQUAL
44692: IFFALSE 44727
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44694: LD_ADDR_VAR 0 10
44698: PUSH
44699: LD_VAR 0 10
44703: PUSH
44704: LD_VAR 0 6
44708: PPUSH
44709: CALL_OW 311
44713: PPUSH
44714: LD_INT 3
44716: PPUSH
44717: CALL_OW 259
44721: PUSH
44722: LD_INT 4
44724: MUL
44725: MUL
44726: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44727: LD_VAR 0 6
44731: PPUSH
44732: CALL_OW 263
44736: PUSH
44737: LD_INT 2
44739: EQUAL
44740: IFFALSE 44791
// begin j := IsControledBy ( i ) ;
44742: LD_ADDR_VAR 0 7
44746: PUSH
44747: LD_VAR 0 6
44751: PPUSH
44752: CALL_OW 312
44756: ST_TO_ADDR
// if j then
44757: LD_VAR 0 7
44761: IFFALSE 44791
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44763: LD_ADDR_VAR 0 10
44767: PUSH
44768: LD_VAR 0 10
44772: PUSH
44773: LD_VAR 0 7
44777: PPUSH
44778: LD_INT 3
44780: PPUSH
44781: CALL_OW 259
44785: PUSH
44786: LD_INT 3
44788: MUL
44789: MUL
44790: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44791: LD_VAR 0 6
44795: PPUSH
44796: CALL_OW 264
44800: PUSH
44801: LD_INT 5
44803: PUSH
44804: LD_INT 6
44806: PUSH
44807: LD_INT 46
44809: PUSH
44810: LD_INT 44
44812: PUSH
44813: LD_INT 47
44815: PUSH
44816: LD_INT 45
44818: PUSH
44819: LD_INT 28
44821: PUSH
44822: LD_INT 7
44824: PUSH
44825: LD_INT 27
44827: PUSH
44828: LD_INT 29
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: IN
44843: PUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: LD_INT 52
44851: PPUSH
44852: CALL_OW 321
44856: PUSH
44857: LD_INT 2
44859: EQUAL
44860: AND
44861: IFFALSE 44878
// bpoints := bpoints * 1.2 ;
44863: LD_ADDR_VAR 0 10
44867: PUSH
44868: LD_VAR 0 10
44872: PUSH
44873: LD_REAL  1.20000000000000E+0000
44876: MUL
44877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44878: LD_VAR 0 6
44882: PPUSH
44883: CALL_OW 264
44887: PUSH
44888: LD_INT 6
44890: PUSH
44891: LD_INT 46
44893: PUSH
44894: LD_INT 47
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: IN
44902: IFFALSE 44919
// bpoints := bpoints * 1.2 ;
44904: LD_ADDR_VAR 0 10
44908: PUSH
44909: LD_VAR 0 10
44913: PUSH
44914: LD_REAL  1.20000000000000E+0000
44917: MUL
44918: ST_TO_ADDR
// end ; unit_building :
44919: GO 44933
44921: LD_INT 3
44923: DOUBLE
44924: EQUAL
44925: IFTRUE 44929
44927: GO 44932
44929: POP
// ; end ;
44930: GO 44933
44932: POP
// for j = 1 to 3 do
44933: LD_ADDR_VAR 0 7
44937: PUSH
44938: DOUBLE
44939: LD_INT 1
44941: DEC
44942: ST_TO_ADDR
44943: LD_INT 3
44945: PUSH
44946: FOR_TO
44947: IFFALSE 45000
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44949: LD_ADDR_VAR 0 5
44953: PUSH
44954: LD_VAR 0 5
44958: PPUSH
44959: LD_VAR 0 7
44963: PPUSH
44964: LD_VAR 0 5
44968: PUSH
44969: LD_VAR 0 7
44973: ARRAY
44974: PUSH
44975: LD_VAR 0 9
44979: PUSH
44980: LD_VAR 0 7
44984: ARRAY
44985: PUSH
44986: LD_VAR 0 10
44990: MUL
44991: PLUS
44992: PPUSH
44993: CALL_OW 1
44997: ST_TO_ADDR
44998: GO 44946
45000: POP
45001: POP
// end ;
45002: GO 43479
45004: POP
45005: POP
// result := Replace ( result , 4 , tmp ) ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 5
45015: PPUSH
45016: LD_INT 4
45018: PPUSH
45019: LD_VAR 0 8
45023: PPUSH
45024: CALL_OW 1
45028: ST_TO_ADDR
// end ;
45029: LD_VAR 0 5
45033: RET
// export function DangerAtRange ( unit , range ) ; begin
45034: LD_INT 0
45036: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_VAR 0 1
45046: PPUSH
45047: CALL_OW 255
45051: PPUSH
45052: LD_VAR 0 1
45056: PPUSH
45057: CALL_OW 250
45061: PPUSH
45062: LD_VAR 0 1
45066: PPUSH
45067: CALL_OW 251
45071: PPUSH
45072: LD_VAR 0 2
45076: PPUSH
45077: CALL 43331 0 4
45081: ST_TO_ADDR
// end ;
45082: LD_VAR 0 3
45086: RET
// export function DangerInArea ( side , area ) ; begin
45087: LD_INT 0
45089: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_VAR 0 2
45099: PPUSH
45100: LD_INT 81
45102: PUSH
45103: LD_VAR 0 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PPUSH
45112: CALL_OW 70
45116: ST_TO_ADDR
// end ;
45117: LD_VAR 0 3
45121: RET
// export function IsExtension ( b ) ; begin
45122: LD_INT 0
45124: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45125: LD_ADDR_VAR 0 2
45129: PUSH
45130: LD_VAR 0 1
45134: PUSH
45135: LD_INT 23
45137: PUSH
45138: LD_INT 20
45140: PUSH
45141: LD_INT 22
45143: PUSH
45144: LD_INT 17
45146: PUSH
45147: LD_INT 24
45149: PUSH
45150: LD_INT 21
45152: PUSH
45153: LD_INT 19
45155: PUSH
45156: LD_INT 16
45158: PUSH
45159: LD_INT 25
45161: PUSH
45162: LD_INT 18
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: IN
45177: ST_TO_ADDR
// end ;
45178: LD_VAR 0 2
45182: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45183: LD_INT 0
45185: PPUSH
45186: PPUSH
45187: PPUSH
// result := [ ] ;
45188: LD_ADDR_VAR 0 4
45192: PUSH
45193: EMPTY
45194: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45195: LD_ADDR_VAR 0 5
45199: PUSH
45200: LD_VAR 0 2
45204: PPUSH
45205: LD_INT 21
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PPUSH
45215: CALL_OW 70
45219: ST_TO_ADDR
// if not tmp then
45220: LD_VAR 0 5
45224: NOT
45225: IFFALSE 45229
// exit ;
45227: GO 45293
// if checkLink then
45229: LD_VAR 0 3
45233: IFFALSE 45283
// begin for i in tmp do
45235: LD_ADDR_VAR 0 6
45239: PUSH
45240: LD_VAR 0 5
45244: PUSH
45245: FOR_IN
45246: IFFALSE 45281
// if GetBase ( i ) <> base then
45248: LD_VAR 0 6
45252: PPUSH
45253: CALL_OW 274
45257: PUSH
45258: LD_VAR 0 1
45262: NONEQUAL
45263: IFFALSE 45279
// ComLinkToBase ( base , i ) ;
45265: LD_VAR 0 1
45269: PPUSH
45270: LD_VAR 0 6
45274: PPUSH
45275: CALL_OW 169
45279: GO 45245
45281: POP
45282: POP
// end ; result := tmp ;
45283: LD_ADDR_VAR 0 4
45287: PUSH
45288: LD_VAR 0 5
45292: ST_TO_ADDR
// end ;
45293: LD_VAR 0 4
45297: RET
// export function ComComplete ( units , b ) ; var i ; begin
45298: LD_INT 0
45300: PPUSH
45301: PPUSH
// if not units then
45302: LD_VAR 0 1
45306: NOT
45307: IFFALSE 45311
// exit ;
45309: GO 45401
// for i in units do
45311: LD_ADDR_VAR 0 4
45315: PUSH
45316: LD_VAR 0 1
45320: PUSH
45321: FOR_IN
45322: IFFALSE 45399
// if BuildingStatus ( b ) = bs_build then
45324: LD_VAR 0 2
45328: PPUSH
45329: CALL_OW 461
45333: PUSH
45334: LD_INT 1
45336: EQUAL
45337: IFFALSE 45397
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45339: LD_VAR 0 4
45343: PPUSH
45344: LD_STRING h
45346: PUSH
45347: LD_VAR 0 2
45351: PPUSH
45352: CALL_OW 250
45356: PUSH
45357: LD_VAR 0 2
45361: PPUSH
45362: CALL_OW 251
45366: PUSH
45367: LD_VAR 0 2
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: PPUSH
45393: CALL_OW 446
45397: GO 45321
45399: POP
45400: POP
// end ;
45401: LD_VAR 0 3
45405: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45406: LD_INT 0
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45414: LD_VAR 0 1
45418: NOT
45419: PUSH
45420: LD_VAR 0 1
45424: PPUSH
45425: CALL_OW 263
45429: PUSH
45430: LD_INT 2
45432: NONEQUAL
45433: OR
45434: IFFALSE 45438
// exit ;
45436: GO 45754
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45438: LD_ADDR_VAR 0 6
45442: PUSH
45443: LD_INT 22
45445: PUSH
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 255
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 30
45465: PUSH
45466: LD_INT 36
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 34
45475: PUSH
45476: LD_INT 31
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PPUSH
45492: CALL_OW 69
45496: ST_TO_ADDR
// if not tmp then
45497: LD_VAR 0 6
45501: NOT
45502: IFFALSE 45506
// exit ;
45504: GO 45754
// result := [ ] ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: EMPTY
45512: ST_TO_ADDR
// for i in tmp do
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_VAR 0 6
45522: PUSH
45523: FOR_IN
45524: IFFALSE 45595
// begin t := UnitsInside ( i ) ;
45526: LD_ADDR_VAR 0 4
45530: PUSH
45531: LD_VAR 0 3
45535: PPUSH
45536: CALL_OW 313
45540: ST_TO_ADDR
// if t then
45541: LD_VAR 0 4
45545: IFFALSE 45593
// for j in t do
45547: LD_ADDR_VAR 0 7
45551: PUSH
45552: LD_VAR 0 4
45556: PUSH
45557: FOR_IN
45558: IFFALSE 45591
// result := Replace ( result , result + 1 , j ) ;
45560: LD_ADDR_VAR 0 2
45564: PUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: LD_VAR 0 2
45574: PUSH
45575: LD_INT 1
45577: PLUS
45578: PPUSH
45579: LD_VAR 0 7
45583: PPUSH
45584: CALL_OW 1
45588: ST_TO_ADDR
45589: GO 45557
45591: POP
45592: POP
// end ;
45593: GO 45523
45595: POP
45596: POP
// if not result then
45597: LD_VAR 0 2
45601: NOT
45602: IFFALSE 45606
// exit ;
45604: GO 45754
// mech := result [ 1 ] ;
45606: LD_ADDR_VAR 0 5
45610: PUSH
45611: LD_VAR 0 2
45615: PUSH
45616: LD_INT 1
45618: ARRAY
45619: ST_TO_ADDR
// if result > 1 then
45620: LD_VAR 0 2
45624: PUSH
45625: LD_INT 1
45627: GREATER
45628: IFFALSE 45740
// begin for i = 2 to result do
45630: LD_ADDR_VAR 0 3
45634: PUSH
45635: DOUBLE
45636: LD_INT 2
45638: DEC
45639: ST_TO_ADDR
45640: LD_VAR 0 2
45644: PUSH
45645: FOR_TO
45646: IFFALSE 45738
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45648: LD_ADDR_VAR 0 4
45652: PUSH
45653: LD_VAR 0 2
45657: PUSH
45658: LD_VAR 0 3
45662: ARRAY
45663: PPUSH
45664: LD_INT 3
45666: PPUSH
45667: CALL_OW 259
45671: PUSH
45672: LD_VAR 0 2
45676: PUSH
45677: LD_VAR 0 3
45681: ARRAY
45682: PPUSH
45683: CALL_OW 432
45687: MINUS
45688: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45689: LD_VAR 0 4
45693: PUSH
45694: LD_VAR 0 5
45698: PPUSH
45699: LD_INT 3
45701: PPUSH
45702: CALL_OW 259
45706: PUSH
45707: LD_VAR 0 5
45711: PPUSH
45712: CALL_OW 432
45716: MINUS
45717: GREATEREQUAL
45718: IFFALSE 45736
// mech := result [ i ] ;
45720: LD_ADDR_VAR 0 5
45724: PUSH
45725: LD_VAR 0 2
45729: PUSH
45730: LD_VAR 0 3
45734: ARRAY
45735: ST_TO_ADDR
// end ;
45736: GO 45645
45738: POP
45739: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45740: LD_VAR 0 1
45744: PPUSH
45745: LD_VAR 0 5
45749: PPUSH
45750: CALL_OW 135
// end ;
45754: LD_VAR 0 2
45758: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45759: LD_INT 0
45761: PPUSH
45762: PPUSH
45763: PPUSH
45764: PPUSH
45765: PPUSH
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
45772: PPUSH
45773: PPUSH
// result := [ ] ;
45774: LD_ADDR_VAR 0 7
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45781: LD_VAR 0 1
45785: PPUSH
45786: CALL_OW 266
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: IN
45801: NOT
45802: IFFALSE 45806
// exit ;
45804: GO 47440
// if name then
45806: LD_VAR 0 3
45810: IFFALSE 45826
// SetBName ( base_dep , name ) ;
45812: LD_VAR 0 1
45816: PPUSH
45817: LD_VAR 0 3
45821: PPUSH
45822: CALL_OW 500
// base := GetBase ( base_dep ) ;
45826: LD_ADDR_VAR 0 15
45830: PUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: CALL_OW 274
45840: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45841: LD_ADDR_VAR 0 16
45845: PUSH
45846: LD_VAR 0 1
45850: PPUSH
45851: CALL_OW 255
45855: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45856: LD_ADDR_VAR 0 17
45860: PUSH
45861: LD_VAR 0 1
45865: PPUSH
45866: CALL_OW 248
45870: ST_TO_ADDR
// if sources then
45871: LD_VAR 0 5
45875: IFFALSE 45922
// for i = 1 to 3 do
45877: LD_ADDR_VAR 0 8
45881: PUSH
45882: DOUBLE
45883: LD_INT 1
45885: DEC
45886: ST_TO_ADDR
45887: LD_INT 3
45889: PUSH
45890: FOR_TO
45891: IFFALSE 45920
// AddResourceType ( base , i , sources [ i ] ) ;
45893: LD_VAR 0 15
45897: PPUSH
45898: LD_VAR 0 8
45902: PPUSH
45903: LD_VAR 0 5
45907: PUSH
45908: LD_VAR 0 8
45912: ARRAY
45913: PPUSH
45914: CALL_OW 276
45918: GO 45890
45920: POP
45921: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45922: LD_ADDR_VAR 0 18
45926: PUSH
45927: LD_VAR 0 15
45931: PPUSH
45932: LD_VAR 0 2
45936: PPUSH
45937: LD_INT 1
45939: PPUSH
45940: CALL 45183 0 3
45944: ST_TO_ADDR
// InitHc ;
45945: CALL_OW 19
// InitUc ;
45949: CALL_OW 18
// uc_side := side ;
45953: LD_ADDR_OWVAR 20
45957: PUSH
45958: LD_VAR 0 16
45962: ST_TO_ADDR
// uc_nation := nation ;
45963: LD_ADDR_OWVAR 21
45967: PUSH
45968: LD_VAR 0 17
45972: ST_TO_ADDR
// if buildings then
45973: LD_VAR 0 18
45977: IFFALSE 47299
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45979: LD_ADDR_VAR 0 19
45983: PUSH
45984: LD_VAR 0 18
45988: PPUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 30
45994: PUSH
45995: LD_INT 29
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 30
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: PPUSH
46017: CALL_OW 72
46021: ST_TO_ADDR
// if tmp then
46022: LD_VAR 0 19
46026: IFFALSE 46074
// for i in tmp do
46028: LD_ADDR_VAR 0 8
46032: PUSH
46033: LD_VAR 0 19
46037: PUSH
46038: FOR_IN
46039: IFFALSE 46072
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46041: LD_VAR 0 8
46045: PPUSH
46046: CALL_OW 250
46050: PPUSH
46051: LD_VAR 0 8
46055: PPUSH
46056: CALL_OW 251
46060: PPUSH
46061: LD_VAR 0 16
46065: PPUSH
46066: CALL_OW 441
46070: GO 46038
46072: POP
46073: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46074: LD_VAR 0 18
46078: PPUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 30
46084: PUSH
46085: LD_INT 32
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 30
46094: PUSH
46095: LD_INT 33
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: PPUSH
46107: CALL_OW 72
46111: IFFALSE 46199
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46113: LD_ADDR_VAR 0 8
46117: PUSH
46118: LD_VAR 0 18
46122: PPUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 30
46128: PUSH
46129: LD_INT 32
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 30
46138: PUSH
46139: LD_INT 33
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: PPUSH
46151: CALL_OW 72
46155: PUSH
46156: FOR_IN
46157: IFFALSE 46197
// begin if not GetBWeapon ( i ) then
46159: LD_VAR 0 8
46163: PPUSH
46164: CALL_OW 269
46168: NOT
46169: IFFALSE 46195
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46171: LD_VAR 0 8
46175: PPUSH
46176: LD_VAR 0 8
46180: PPUSH
46181: LD_VAR 0 2
46185: PPUSH
46186: CALL 47445 0 2
46190: PPUSH
46191: CALL_OW 431
// end ;
46195: GO 46156
46197: POP
46198: POP
// end ; for i = 1 to personel do
46199: LD_ADDR_VAR 0 8
46203: PUSH
46204: DOUBLE
46205: LD_INT 1
46207: DEC
46208: ST_TO_ADDR
46209: LD_VAR 0 6
46213: PUSH
46214: FOR_TO
46215: IFFALSE 47279
// begin if i > 4 then
46217: LD_VAR 0 8
46221: PUSH
46222: LD_INT 4
46224: GREATER
46225: IFFALSE 46229
// break ;
46227: GO 47279
// case i of 1 :
46229: LD_VAR 0 8
46233: PUSH
46234: LD_INT 1
46236: DOUBLE
46237: EQUAL
46238: IFTRUE 46242
46240: GO 46322
46242: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46243: LD_ADDR_VAR 0 12
46247: PUSH
46248: LD_VAR 0 18
46252: PPUSH
46253: LD_INT 22
46255: PUSH
46256: LD_VAR 0 16
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 58
46267: PUSH
46268: EMPTY
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 30
46276: PUSH
46277: LD_INT 32
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 30
46286: PUSH
46287: LD_INT 4
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 30
46296: PUSH
46297: LD_INT 5
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: PPUSH
46315: CALL_OW 72
46319: ST_TO_ADDR
46320: GO 46544
46322: LD_INT 2
46324: DOUBLE
46325: EQUAL
46326: IFTRUE 46330
46328: GO 46392
46330: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46331: LD_ADDR_VAR 0 12
46335: PUSH
46336: LD_VAR 0 18
46340: PPUSH
46341: LD_INT 22
46343: PUSH
46344: LD_VAR 0 16
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 30
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 30
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PPUSH
46385: CALL_OW 72
46389: ST_TO_ADDR
46390: GO 46544
46392: LD_INT 3
46394: DOUBLE
46395: EQUAL
46396: IFTRUE 46400
46398: GO 46462
46400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46401: LD_ADDR_VAR 0 12
46405: PUSH
46406: LD_VAR 0 18
46410: PPUSH
46411: LD_INT 22
46413: PUSH
46414: LD_VAR 0 16
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 30
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 30
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PPUSH
46455: CALL_OW 72
46459: ST_TO_ADDR
46460: GO 46544
46462: LD_INT 4
46464: DOUBLE
46465: EQUAL
46466: IFTRUE 46470
46468: GO 46543
46470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46471: LD_ADDR_VAR 0 12
46475: PUSH
46476: LD_VAR 0 18
46480: PPUSH
46481: LD_INT 22
46483: PUSH
46484: LD_VAR 0 16
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 30
46498: PUSH
46499: LD_INT 6
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 30
46508: PUSH
46509: LD_INT 7
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 30
46518: PUSH
46519: LD_INT 8
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PPUSH
46536: CALL_OW 72
46540: ST_TO_ADDR
46541: GO 46544
46543: POP
// if i = 1 then
46544: LD_VAR 0 8
46548: PUSH
46549: LD_INT 1
46551: EQUAL
46552: IFFALSE 46663
// begin tmp := [ ] ;
46554: LD_ADDR_VAR 0 19
46558: PUSH
46559: EMPTY
46560: ST_TO_ADDR
// for j in f do
46561: LD_ADDR_VAR 0 9
46565: PUSH
46566: LD_VAR 0 12
46570: PUSH
46571: FOR_IN
46572: IFFALSE 46645
// if GetBType ( j ) = b_bunker then
46574: LD_VAR 0 9
46578: PPUSH
46579: CALL_OW 266
46583: PUSH
46584: LD_INT 32
46586: EQUAL
46587: IFFALSE 46614
// tmp := Insert ( tmp , 1 , j ) else
46589: LD_ADDR_VAR 0 19
46593: PUSH
46594: LD_VAR 0 19
46598: PPUSH
46599: LD_INT 1
46601: PPUSH
46602: LD_VAR 0 9
46606: PPUSH
46607: CALL_OW 2
46611: ST_TO_ADDR
46612: GO 46643
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46614: LD_ADDR_VAR 0 19
46618: PUSH
46619: LD_VAR 0 19
46623: PPUSH
46624: LD_VAR 0 19
46628: PUSH
46629: LD_INT 1
46631: PLUS
46632: PPUSH
46633: LD_VAR 0 9
46637: PPUSH
46638: CALL_OW 2
46642: ST_TO_ADDR
46643: GO 46571
46645: POP
46646: POP
// if tmp then
46647: LD_VAR 0 19
46651: IFFALSE 46663
// f := tmp ;
46653: LD_ADDR_VAR 0 12
46657: PUSH
46658: LD_VAR 0 19
46662: ST_TO_ADDR
// end ; x := personel [ i ] ;
46663: LD_ADDR_VAR 0 13
46667: PUSH
46668: LD_VAR 0 6
46672: PUSH
46673: LD_VAR 0 8
46677: ARRAY
46678: ST_TO_ADDR
// if x = - 1 then
46679: LD_VAR 0 13
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: EQUAL
46688: IFFALSE 46897
// begin for j in f do
46690: LD_ADDR_VAR 0 9
46694: PUSH
46695: LD_VAR 0 12
46699: PUSH
46700: FOR_IN
46701: IFFALSE 46893
// repeat InitHc ;
46703: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46707: LD_VAR 0 9
46711: PPUSH
46712: CALL_OW 266
46716: PUSH
46717: LD_INT 5
46719: EQUAL
46720: IFFALSE 46790
// begin if UnitsInside ( j ) < 3 then
46722: LD_VAR 0 9
46726: PPUSH
46727: CALL_OW 313
46731: PUSH
46732: LD_INT 3
46734: LESS
46735: IFFALSE 46771
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46737: LD_INT 0
46739: PPUSH
46740: LD_INT 5
46742: PUSH
46743: LD_INT 8
46745: PUSH
46746: LD_INT 9
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: PUSH
46754: LD_VAR 0 17
46758: ARRAY
46759: PPUSH
46760: LD_VAR 0 4
46764: PPUSH
46765: CALL_OW 380
46769: GO 46788
// PrepareHuman ( false , i , skill ) ;
46771: LD_INT 0
46773: PPUSH
46774: LD_VAR 0 8
46778: PPUSH
46779: LD_VAR 0 4
46783: PPUSH
46784: CALL_OW 380
// end else
46788: GO 46807
// PrepareHuman ( false , i , skill ) ;
46790: LD_INT 0
46792: PPUSH
46793: LD_VAR 0 8
46797: PPUSH
46798: LD_VAR 0 4
46802: PPUSH
46803: CALL_OW 380
// un := CreateHuman ;
46807: LD_ADDR_VAR 0 14
46811: PUSH
46812: CALL_OW 44
46816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46817: LD_ADDR_VAR 0 7
46821: PUSH
46822: LD_VAR 0 7
46826: PPUSH
46827: LD_INT 1
46829: PPUSH
46830: LD_VAR 0 14
46834: PPUSH
46835: CALL_OW 2
46839: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46840: LD_VAR 0 14
46844: PPUSH
46845: LD_VAR 0 9
46849: PPUSH
46850: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46854: LD_VAR 0 9
46858: PPUSH
46859: CALL_OW 313
46863: PUSH
46864: LD_INT 6
46866: EQUAL
46867: PUSH
46868: LD_VAR 0 9
46872: PPUSH
46873: CALL_OW 266
46877: PUSH
46878: LD_INT 32
46880: PUSH
46881: LD_INT 31
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: IN
46888: OR
46889: IFFALSE 46703
46891: GO 46700
46893: POP
46894: POP
// end else
46895: GO 47277
// for j = 1 to x do
46897: LD_ADDR_VAR 0 9
46901: PUSH
46902: DOUBLE
46903: LD_INT 1
46905: DEC
46906: ST_TO_ADDR
46907: LD_VAR 0 13
46911: PUSH
46912: FOR_TO
46913: IFFALSE 47275
// begin InitHc ;
46915: CALL_OW 19
// if not f then
46919: LD_VAR 0 12
46923: NOT
46924: IFFALSE 47013
// begin PrepareHuman ( false , i , skill ) ;
46926: LD_INT 0
46928: PPUSH
46929: LD_VAR 0 8
46933: PPUSH
46934: LD_VAR 0 4
46938: PPUSH
46939: CALL_OW 380
// un := CreateHuman ;
46943: LD_ADDR_VAR 0 14
46947: PUSH
46948: CALL_OW 44
46952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46953: LD_ADDR_VAR 0 7
46957: PUSH
46958: LD_VAR 0 7
46962: PPUSH
46963: LD_INT 1
46965: PPUSH
46966: LD_VAR 0 14
46970: PPUSH
46971: CALL_OW 2
46975: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46976: LD_VAR 0 14
46980: PPUSH
46981: LD_VAR 0 1
46985: PPUSH
46986: CALL_OW 250
46990: PPUSH
46991: LD_VAR 0 1
46995: PPUSH
46996: CALL_OW 251
47000: PPUSH
47001: LD_INT 10
47003: PPUSH
47004: LD_INT 0
47006: PPUSH
47007: CALL_OW 50
// continue ;
47011: GO 46912
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47013: LD_VAR 0 12
47017: PUSH
47018: LD_INT 1
47020: ARRAY
47021: PPUSH
47022: CALL_OW 313
47026: PUSH
47027: LD_VAR 0 12
47031: PUSH
47032: LD_INT 1
47034: ARRAY
47035: PPUSH
47036: CALL_OW 266
47040: PUSH
47041: LD_INT 32
47043: PUSH
47044: LD_INT 31
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: IN
47051: AND
47052: PUSH
47053: LD_VAR 0 12
47057: PUSH
47058: LD_INT 1
47060: ARRAY
47061: PPUSH
47062: CALL_OW 313
47066: PUSH
47067: LD_INT 6
47069: EQUAL
47070: OR
47071: IFFALSE 47091
// f := Delete ( f , 1 ) ;
47073: LD_ADDR_VAR 0 12
47077: PUSH
47078: LD_VAR 0 12
47082: PPUSH
47083: LD_INT 1
47085: PPUSH
47086: CALL_OW 3
47090: ST_TO_ADDR
// if not f then
47091: LD_VAR 0 12
47095: NOT
47096: IFFALSE 47114
// begin x := x + 2 ;
47098: LD_ADDR_VAR 0 13
47102: PUSH
47103: LD_VAR 0 13
47107: PUSH
47108: LD_INT 2
47110: PLUS
47111: ST_TO_ADDR
// continue ;
47112: GO 46912
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47114: LD_VAR 0 12
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PPUSH
47123: CALL_OW 266
47127: PUSH
47128: LD_INT 5
47130: EQUAL
47131: IFFALSE 47205
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47133: LD_VAR 0 12
47137: PUSH
47138: LD_INT 1
47140: ARRAY
47141: PPUSH
47142: CALL_OW 313
47146: PUSH
47147: LD_INT 3
47149: LESS
47150: IFFALSE 47186
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47152: LD_INT 0
47154: PPUSH
47155: LD_INT 5
47157: PUSH
47158: LD_INT 8
47160: PUSH
47161: LD_INT 9
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 17
47173: ARRAY
47174: PPUSH
47175: LD_VAR 0 4
47179: PPUSH
47180: CALL_OW 380
47184: GO 47203
// PrepareHuman ( false , i , skill ) ;
47186: LD_INT 0
47188: PPUSH
47189: LD_VAR 0 8
47193: PPUSH
47194: LD_VAR 0 4
47198: PPUSH
47199: CALL_OW 380
// end else
47203: GO 47222
// PrepareHuman ( false , i , skill ) ;
47205: LD_INT 0
47207: PPUSH
47208: LD_VAR 0 8
47212: PPUSH
47213: LD_VAR 0 4
47217: PPUSH
47218: CALL_OW 380
// un := CreateHuman ;
47222: LD_ADDR_VAR 0 14
47226: PUSH
47227: CALL_OW 44
47231: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47232: LD_ADDR_VAR 0 7
47236: PUSH
47237: LD_VAR 0 7
47241: PPUSH
47242: LD_INT 1
47244: PPUSH
47245: LD_VAR 0 14
47249: PPUSH
47250: CALL_OW 2
47254: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47255: LD_VAR 0 14
47259: PPUSH
47260: LD_VAR 0 12
47264: PUSH
47265: LD_INT 1
47267: ARRAY
47268: PPUSH
47269: CALL_OW 52
// end ;
47273: GO 46912
47275: POP
47276: POP
// end ;
47277: GO 46214
47279: POP
47280: POP
// result := result ^ buildings ;
47281: LD_ADDR_VAR 0 7
47285: PUSH
47286: LD_VAR 0 7
47290: PUSH
47291: LD_VAR 0 18
47295: ADD
47296: ST_TO_ADDR
// end else
47297: GO 47440
// begin for i = 1 to personel do
47299: LD_ADDR_VAR 0 8
47303: PUSH
47304: DOUBLE
47305: LD_INT 1
47307: DEC
47308: ST_TO_ADDR
47309: LD_VAR 0 6
47313: PUSH
47314: FOR_TO
47315: IFFALSE 47438
// begin if i > 4 then
47317: LD_VAR 0 8
47321: PUSH
47322: LD_INT 4
47324: GREATER
47325: IFFALSE 47329
// break ;
47327: GO 47438
// x := personel [ i ] ;
47329: LD_ADDR_VAR 0 13
47333: PUSH
47334: LD_VAR 0 6
47338: PUSH
47339: LD_VAR 0 8
47343: ARRAY
47344: ST_TO_ADDR
// if x = - 1 then
47345: LD_VAR 0 13
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: EQUAL
47354: IFFALSE 47358
// continue ;
47356: GO 47314
// PrepareHuman ( false , i , skill ) ;
47358: LD_INT 0
47360: PPUSH
47361: LD_VAR 0 8
47365: PPUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: CALL_OW 380
// un := CreateHuman ;
47375: LD_ADDR_VAR 0 14
47379: PUSH
47380: CALL_OW 44
47384: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47385: LD_VAR 0 14
47389: PPUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 250
47399: PPUSH
47400: LD_VAR 0 1
47404: PPUSH
47405: CALL_OW 251
47409: PPUSH
47410: LD_INT 10
47412: PPUSH
47413: LD_INT 0
47415: PPUSH
47416: CALL_OW 50
// result := result ^ un ;
47420: LD_ADDR_VAR 0 7
47424: PUSH
47425: LD_VAR 0 7
47429: PUSH
47430: LD_VAR 0 14
47434: ADD
47435: ST_TO_ADDR
// end ;
47436: GO 47314
47438: POP
47439: POP
// end ; end ;
47440: LD_VAR 0 7
47444: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47445: LD_INT 0
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
// result := false ;
47463: LD_ADDR_VAR 0 3
47467: PUSH
47468: LD_INT 0
47470: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47471: LD_VAR 0 1
47475: NOT
47476: PUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: CALL_OW 266
47486: PUSH
47487: LD_INT 32
47489: PUSH
47490: LD_INT 33
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: IN
47497: NOT
47498: OR
47499: IFFALSE 47503
// exit ;
47501: GO 48612
// nat := GetNation ( tower ) ;
47503: LD_ADDR_VAR 0 12
47507: PUSH
47508: LD_VAR 0 1
47512: PPUSH
47513: CALL_OW 248
47517: ST_TO_ADDR
// side := GetSide ( tower ) ;
47518: LD_ADDR_VAR 0 16
47522: PUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 255
47532: ST_TO_ADDR
// x := GetX ( tower ) ;
47533: LD_ADDR_VAR 0 10
47537: PUSH
47538: LD_VAR 0 1
47542: PPUSH
47543: CALL_OW 250
47547: ST_TO_ADDR
// y := GetY ( tower ) ;
47548: LD_ADDR_VAR 0 11
47552: PUSH
47553: LD_VAR 0 1
47557: PPUSH
47558: CALL_OW 251
47562: ST_TO_ADDR
// if not x or not y then
47563: LD_VAR 0 10
47567: NOT
47568: PUSH
47569: LD_VAR 0 11
47573: NOT
47574: OR
47575: IFFALSE 47579
// exit ;
47577: GO 48612
// weapon := 0 ;
47579: LD_ADDR_VAR 0 18
47583: PUSH
47584: LD_INT 0
47586: ST_TO_ADDR
// fac_list := [ ] ;
47587: LD_ADDR_VAR 0 17
47591: PUSH
47592: EMPTY
47593: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47594: LD_ADDR_VAR 0 6
47598: PUSH
47599: LD_VAR 0 1
47603: PPUSH
47604: CALL_OW 274
47608: PPUSH
47609: LD_VAR 0 2
47613: PPUSH
47614: LD_INT 0
47616: PPUSH
47617: CALL 45183 0 3
47621: PPUSH
47622: LD_INT 30
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PPUSH
47632: CALL_OW 72
47636: ST_TO_ADDR
// if not factories then
47637: LD_VAR 0 6
47641: NOT
47642: IFFALSE 47646
// exit ;
47644: GO 48612
// for i in factories do
47646: LD_ADDR_VAR 0 8
47650: PUSH
47651: LD_VAR 0 6
47655: PUSH
47656: FOR_IN
47657: IFFALSE 47682
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47659: LD_ADDR_VAR 0 17
47663: PUSH
47664: LD_VAR 0 17
47668: PUSH
47669: LD_VAR 0 8
47673: PPUSH
47674: CALL_OW 478
47678: UNION
47679: ST_TO_ADDR
47680: GO 47656
47682: POP
47683: POP
// if not fac_list then
47684: LD_VAR 0 17
47688: NOT
47689: IFFALSE 47693
// exit ;
47691: GO 48612
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47693: LD_ADDR_VAR 0 5
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: LD_INT 9
47706: PUSH
47707: LD_INT 10
47709: PUSH
47710: LD_INT 6
47712: PUSH
47713: LD_INT 7
47715: PUSH
47716: LD_INT 11
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 27
47730: PUSH
47731: LD_INT 28
47733: PUSH
47734: LD_INT 26
47736: PUSH
47737: LD_INT 30
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 43
47748: PUSH
47749: LD_INT 44
47751: PUSH
47752: LD_INT 46
47754: PUSH
47755: LD_INT 45
47757: PUSH
47758: LD_INT 47
47760: PUSH
47761: LD_INT 49
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: PUSH
47777: LD_VAR 0 12
47781: ARRAY
47782: ST_TO_ADDR
// list := list isect fac_list ;
47783: LD_ADDR_VAR 0 5
47787: PUSH
47788: LD_VAR 0 5
47792: PUSH
47793: LD_VAR 0 17
47797: ISECT
47798: ST_TO_ADDR
// if not list then
47799: LD_VAR 0 5
47803: NOT
47804: IFFALSE 47808
// exit ;
47806: GO 48612
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47808: LD_VAR 0 12
47812: PUSH
47813: LD_INT 3
47815: EQUAL
47816: PUSH
47817: LD_INT 49
47819: PUSH
47820: LD_VAR 0 5
47824: IN
47825: AND
47826: PUSH
47827: LD_INT 31
47829: PPUSH
47830: LD_VAR 0 16
47834: PPUSH
47835: CALL_OW 321
47839: PUSH
47840: LD_INT 2
47842: EQUAL
47843: AND
47844: IFFALSE 47904
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47846: LD_INT 22
47848: PUSH
47849: LD_VAR 0 16
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 35
47860: PUSH
47861: LD_INT 49
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 91
47870: PUSH
47871: LD_VAR 0 1
47875: PUSH
47876: LD_INT 10
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: PPUSH
47889: CALL_OW 69
47893: NOT
47894: IFFALSE 47904
// weapon := ru_time_lapser ;
47896: LD_ADDR_VAR 0 18
47900: PUSH
47901: LD_INT 49
47903: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47904: LD_VAR 0 12
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: IN
47919: PUSH
47920: LD_INT 11
47922: PUSH
47923: LD_VAR 0 5
47927: IN
47928: PUSH
47929: LD_INT 30
47931: PUSH
47932: LD_VAR 0 5
47936: IN
47937: OR
47938: AND
47939: PUSH
47940: LD_INT 6
47942: PPUSH
47943: LD_VAR 0 16
47947: PPUSH
47948: CALL_OW 321
47952: PUSH
47953: LD_INT 2
47955: EQUAL
47956: AND
47957: IFFALSE 48122
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47959: LD_INT 22
47961: PUSH
47962: LD_VAR 0 16
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 35
47976: PUSH
47977: LD_INT 11
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 35
47986: PUSH
47987: LD_INT 30
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 91
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: LD_INT 18
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: PPUSH
48020: CALL_OW 69
48024: NOT
48025: PUSH
48026: LD_INT 22
48028: PUSH
48029: LD_VAR 0 16
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 30
48043: PUSH
48044: LD_INT 32
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 30
48053: PUSH
48054: LD_INT 33
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 91
48068: PUSH
48069: LD_VAR 0 1
48073: PUSH
48074: LD_INT 12
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: PPUSH
48090: CALL_OW 69
48094: PUSH
48095: LD_INT 2
48097: GREATER
48098: AND
48099: IFFALSE 48122
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48101: LD_ADDR_VAR 0 18
48105: PUSH
48106: LD_INT 11
48108: PUSH
48109: LD_INT 30
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_VAR 0 12
48120: ARRAY
48121: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48122: LD_VAR 0 18
48126: NOT
48127: PUSH
48128: LD_INT 40
48130: PPUSH
48131: LD_VAR 0 16
48135: PPUSH
48136: CALL_OW 321
48140: PUSH
48141: LD_INT 2
48143: EQUAL
48144: AND
48145: PUSH
48146: LD_INT 7
48148: PUSH
48149: LD_VAR 0 5
48153: IN
48154: PUSH
48155: LD_INT 28
48157: PUSH
48158: LD_VAR 0 5
48162: IN
48163: OR
48164: PUSH
48165: LD_INT 45
48167: PUSH
48168: LD_VAR 0 5
48172: IN
48173: OR
48174: AND
48175: IFFALSE 48429
// begin hex := GetHexInfo ( x , y ) ;
48177: LD_ADDR_VAR 0 4
48181: PUSH
48182: LD_VAR 0 10
48186: PPUSH
48187: LD_VAR 0 11
48191: PPUSH
48192: CALL_OW 546
48196: ST_TO_ADDR
// if hex [ 1 ] then
48197: LD_VAR 0 4
48201: PUSH
48202: LD_INT 1
48204: ARRAY
48205: IFFALSE 48209
// exit ;
48207: GO 48612
// height := hex [ 2 ] ;
48209: LD_ADDR_VAR 0 15
48213: PUSH
48214: LD_VAR 0 4
48218: PUSH
48219: LD_INT 2
48221: ARRAY
48222: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48223: LD_ADDR_VAR 0 14
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: LD_INT 5
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// for i in tmp do
48246: LD_ADDR_VAR 0 8
48250: PUSH
48251: LD_VAR 0 14
48255: PUSH
48256: FOR_IN
48257: IFFALSE 48427
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48259: LD_ADDR_VAR 0 9
48263: PUSH
48264: LD_VAR 0 10
48268: PPUSH
48269: LD_VAR 0 8
48273: PPUSH
48274: LD_INT 5
48276: PPUSH
48277: CALL_OW 272
48281: PUSH
48282: LD_VAR 0 11
48286: PPUSH
48287: LD_VAR 0 8
48291: PPUSH
48292: LD_INT 5
48294: PPUSH
48295: CALL_OW 273
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48304: LD_VAR 0 9
48308: PUSH
48309: LD_INT 1
48311: ARRAY
48312: PPUSH
48313: LD_VAR 0 9
48317: PUSH
48318: LD_INT 2
48320: ARRAY
48321: PPUSH
48322: CALL_OW 488
48326: IFFALSE 48425
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48328: LD_ADDR_VAR 0 4
48332: PUSH
48333: LD_VAR 0 9
48337: PUSH
48338: LD_INT 1
48340: ARRAY
48341: PPUSH
48342: LD_VAR 0 9
48346: PUSH
48347: LD_INT 2
48349: ARRAY
48350: PPUSH
48351: CALL_OW 546
48355: ST_TO_ADDR
// if hex [ 1 ] then
48356: LD_VAR 0 4
48360: PUSH
48361: LD_INT 1
48363: ARRAY
48364: IFFALSE 48368
// continue ;
48366: GO 48256
// h := hex [ 2 ] ;
48368: LD_ADDR_VAR 0 13
48372: PUSH
48373: LD_VAR 0 4
48377: PUSH
48378: LD_INT 2
48380: ARRAY
48381: ST_TO_ADDR
// if h + 7 < height then
48382: LD_VAR 0 13
48386: PUSH
48387: LD_INT 7
48389: PLUS
48390: PUSH
48391: LD_VAR 0 15
48395: LESS
48396: IFFALSE 48425
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48398: LD_ADDR_VAR 0 18
48402: PUSH
48403: LD_INT 7
48405: PUSH
48406: LD_INT 28
48408: PUSH
48409: LD_INT 45
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: PUSH
48417: LD_VAR 0 12
48421: ARRAY
48422: ST_TO_ADDR
// break ;
48423: GO 48427
// end ; end ; end ;
48425: GO 48256
48427: POP
48428: POP
// end ; if not weapon then
48429: LD_VAR 0 18
48433: NOT
48434: IFFALSE 48494
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48436: LD_ADDR_VAR 0 5
48440: PUSH
48441: LD_VAR 0 5
48445: PUSH
48446: LD_INT 11
48448: PUSH
48449: LD_INT 30
48451: PUSH
48452: LD_INT 49
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: DIFF
48460: ST_TO_ADDR
// if not list then
48461: LD_VAR 0 5
48465: NOT
48466: IFFALSE 48470
// exit ;
48468: GO 48612
// weapon := list [ rand ( 1 , list ) ] ;
48470: LD_ADDR_VAR 0 18
48474: PUSH
48475: LD_VAR 0 5
48479: PUSH
48480: LD_INT 1
48482: PPUSH
48483: LD_VAR 0 5
48487: PPUSH
48488: CALL_OW 12
48492: ARRAY
48493: ST_TO_ADDR
// end ; if weapon then
48494: LD_VAR 0 18
48498: IFFALSE 48612
// begin tmp := CostOfWeapon ( weapon ) ;
48500: LD_ADDR_VAR 0 14
48504: PUSH
48505: LD_VAR 0 18
48509: PPUSH
48510: CALL_OW 451
48514: ST_TO_ADDR
// j := GetBase ( tower ) ;
48515: LD_ADDR_VAR 0 9
48519: PUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 274
48529: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48530: LD_VAR 0 9
48534: PPUSH
48535: LD_INT 1
48537: PPUSH
48538: CALL_OW 275
48542: PUSH
48543: LD_VAR 0 14
48547: PUSH
48548: LD_INT 1
48550: ARRAY
48551: GREATEREQUAL
48552: PUSH
48553: LD_VAR 0 9
48557: PPUSH
48558: LD_INT 2
48560: PPUSH
48561: CALL_OW 275
48565: PUSH
48566: LD_VAR 0 14
48570: PUSH
48571: LD_INT 2
48573: ARRAY
48574: GREATEREQUAL
48575: AND
48576: PUSH
48577: LD_VAR 0 9
48581: PPUSH
48582: LD_INT 3
48584: PPUSH
48585: CALL_OW 275
48589: PUSH
48590: LD_VAR 0 14
48594: PUSH
48595: LD_INT 3
48597: ARRAY
48598: GREATEREQUAL
48599: AND
48600: IFFALSE 48612
// result := weapon ;
48602: LD_ADDR_VAR 0 3
48606: PUSH
48607: LD_VAR 0 18
48611: ST_TO_ADDR
// end ; end ;
48612: LD_VAR 0 3
48616: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48617: LD_INT 0
48619: PPUSH
48620: PPUSH
// result := true ;
48621: LD_ADDR_VAR 0 3
48625: PUSH
48626: LD_INT 1
48628: ST_TO_ADDR
// if array1 = array2 then
48629: LD_VAR 0 1
48633: PUSH
48634: LD_VAR 0 2
48638: EQUAL
48639: IFFALSE 48699
// begin for i = 1 to array1 do
48641: LD_ADDR_VAR 0 4
48645: PUSH
48646: DOUBLE
48647: LD_INT 1
48649: DEC
48650: ST_TO_ADDR
48651: LD_VAR 0 1
48655: PUSH
48656: FOR_TO
48657: IFFALSE 48695
// if array1 [ i ] <> array2 [ i ] then
48659: LD_VAR 0 1
48663: PUSH
48664: LD_VAR 0 4
48668: ARRAY
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_VAR 0 4
48679: ARRAY
48680: NONEQUAL
48681: IFFALSE 48693
// begin result := false ;
48683: LD_ADDR_VAR 0 3
48687: PUSH
48688: LD_INT 0
48690: ST_TO_ADDR
// break ;
48691: GO 48695
// end ;
48693: GO 48656
48695: POP
48696: POP
// end else
48697: GO 48707
// result := false ;
48699: LD_ADDR_VAR 0 3
48703: PUSH
48704: LD_INT 0
48706: ST_TO_ADDR
// end ;
48707: LD_VAR 0 3
48711: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48712: LD_INT 0
48714: PPUSH
48715: PPUSH
// if not array1 or not array2 then
48716: LD_VAR 0 1
48720: NOT
48721: PUSH
48722: LD_VAR 0 2
48726: NOT
48727: OR
48728: IFFALSE 48732
// exit ;
48730: GO 48796
// result := true ;
48732: LD_ADDR_VAR 0 3
48736: PUSH
48737: LD_INT 1
48739: ST_TO_ADDR
// for i = 1 to array1 do
48740: LD_ADDR_VAR 0 4
48744: PUSH
48745: DOUBLE
48746: LD_INT 1
48748: DEC
48749: ST_TO_ADDR
48750: LD_VAR 0 1
48754: PUSH
48755: FOR_TO
48756: IFFALSE 48794
// if array1 [ i ] <> array2 [ i ] then
48758: LD_VAR 0 1
48762: PUSH
48763: LD_VAR 0 4
48767: ARRAY
48768: PUSH
48769: LD_VAR 0 2
48773: PUSH
48774: LD_VAR 0 4
48778: ARRAY
48779: NONEQUAL
48780: IFFALSE 48792
// begin result := false ;
48782: LD_ADDR_VAR 0 3
48786: PUSH
48787: LD_INT 0
48789: ST_TO_ADDR
// break ;
48790: GO 48794
// end ;
48792: GO 48755
48794: POP
48795: POP
// end ;
48796: LD_VAR 0 3
48800: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48801: LD_INT 0
48803: PPUSH
48804: PPUSH
48805: PPUSH
// pom := GetBase ( fac ) ;
48806: LD_ADDR_VAR 0 5
48810: PUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL_OW 274
48820: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48821: LD_ADDR_VAR 0 4
48825: PUSH
48826: LD_VAR 0 2
48830: PUSH
48831: LD_INT 1
48833: ARRAY
48834: PPUSH
48835: LD_VAR 0 2
48839: PUSH
48840: LD_INT 2
48842: ARRAY
48843: PPUSH
48844: LD_VAR 0 2
48848: PUSH
48849: LD_INT 3
48851: ARRAY
48852: PPUSH
48853: LD_VAR 0 2
48857: PUSH
48858: LD_INT 4
48860: ARRAY
48861: PPUSH
48862: CALL_OW 449
48866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48867: LD_ADDR_VAR 0 3
48871: PUSH
48872: LD_VAR 0 5
48876: PPUSH
48877: LD_INT 1
48879: PPUSH
48880: CALL_OW 275
48884: PUSH
48885: LD_VAR 0 4
48889: PUSH
48890: LD_INT 1
48892: ARRAY
48893: GREATEREQUAL
48894: PUSH
48895: LD_VAR 0 5
48899: PPUSH
48900: LD_INT 2
48902: PPUSH
48903: CALL_OW 275
48907: PUSH
48908: LD_VAR 0 4
48912: PUSH
48913: LD_INT 2
48915: ARRAY
48916: GREATEREQUAL
48917: AND
48918: PUSH
48919: LD_VAR 0 5
48923: PPUSH
48924: LD_INT 3
48926: PPUSH
48927: CALL_OW 275
48931: PUSH
48932: LD_VAR 0 4
48936: PUSH
48937: LD_INT 3
48939: ARRAY
48940: GREATEREQUAL
48941: AND
48942: ST_TO_ADDR
// end ;
48943: LD_VAR 0 3
48947: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48948: LD_INT 0
48950: PPUSH
48951: PPUSH
48952: PPUSH
48953: PPUSH
// pom := GetBase ( building ) ;
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: CALL_OW 274
48968: ST_TO_ADDR
// if not pom then
48969: LD_VAR 0 3
48973: NOT
48974: IFFALSE 48978
// exit ;
48976: GO 49148
// btype := GetBType ( building ) ;
48978: LD_ADDR_VAR 0 5
48982: PUSH
48983: LD_VAR 0 1
48987: PPUSH
48988: CALL_OW 266
48992: ST_TO_ADDR
// if btype = b_armoury then
48993: LD_VAR 0 5
48997: PUSH
48998: LD_INT 4
49000: EQUAL
49001: IFFALSE 49011
// btype := b_barracks ;
49003: LD_ADDR_VAR 0 5
49007: PUSH
49008: LD_INT 5
49010: ST_TO_ADDR
// if btype = b_depot then
49011: LD_VAR 0 5
49015: PUSH
49016: LD_INT 0
49018: EQUAL
49019: IFFALSE 49029
// btype := b_warehouse ;
49021: LD_ADDR_VAR 0 5
49025: PUSH
49026: LD_INT 1
49028: ST_TO_ADDR
// if btype = b_workshop then
49029: LD_VAR 0 5
49033: PUSH
49034: LD_INT 2
49036: EQUAL
49037: IFFALSE 49047
// btype := b_factory ;
49039: LD_ADDR_VAR 0 5
49043: PUSH
49044: LD_INT 3
49046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49047: LD_ADDR_VAR 0 4
49051: PUSH
49052: LD_VAR 0 5
49056: PPUSH
49057: LD_VAR 0 1
49061: PPUSH
49062: CALL_OW 248
49066: PPUSH
49067: CALL_OW 450
49071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49072: LD_ADDR_VAR 0 2
49076: PUSH
49077: LD_VAR 0 3
49081: PPUSH
49082: LD_INT 1
49084: PPUSH
49085: CALL_OW 275
49089: PUSH
49090: LD_VAR 0 4
49094: PUSH
49095: LD_INT 1
49097: ARRAY
49098: GREATEREQUAL
49099: PUSH
49100: LD_VAR 0 3
49104: PPUSH
49105: LD_INT 2
49107: PPUSH
49108: CALL_OW 275
49112: PUSH
49113: LD_VAR 0 4
49117: PUSH
49118: LD_INT 2
49120: ARRAY
49121: GREATEREQUAL
49122: AND
49123: PUSH
49124: LD_VAR 0 3
49128: PPUSH
49129: LD_INT 3
49131: PPUSH
49132: CALL_OW 275
49136: PUSH
49137: LD_VAR 0 4
49141: PUSH
49142: LD_INT 3
49144: ARRAY
49145: GREATEREQUAL
49146: AND
49147: ST_TO_ADDR
// end ;
49148: LD_VAR 0 2
49152: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49153: LD_INT 0
49155: PPUSH
49156: PPUSH
49157: PPUSH
// pom := GetBase ( building ) ;
49158: LD_ADDR_VAR 0 4
49162: PUSH
49163: LD_VAR 0 1
49167: PPUSH
49168: CALL_OW 274
49172: ST_TO_ADDR
// if not pom then
49173: LD_VAR 0 4
49177: NOT
49178: IFFALSE 49182
// exit ;
49180: GO 49283
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49182: LD_ADDR_VAR 0 5
49186: PUSH
49187: LD_VAR 0 2
49191: PPUSH
49192: LD_VAR 0 1
49196: PPUSH
49197: CALL_OW 248
49201: PPUSH
49202: CALL_OW 450
49206: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49207: LD_ADDR_VAR 0 3
49211: PUSH
49212: LD_VAR 0 4
49216: PPUSH
49217: LD_INT 1
49219: PPUSH
49220: CALL_OW 275
49224: PUSH
49225: LD_VAR 0 5
49229: PUSH
49230: LD_INT 1
49232: ARRAY
49233: GREATEREQUAL
49234: PUSH
49235: LD_VAR 0 4
49239: PPUSH
49240: LD_INT 2
49242: PPUSH
49243: CALL_OW 275
49247: PUSH
49248: LD_VAR 0 5
49252: PUSH
49253: LD_INT 2
49255: ARRAY
49256: GREATEREQUAL
49257: AND
49258: PUSH
49259: LD_VAR 0 4
49263: PPUSH
49264: LD_INT 3
49266: PPUSH
49267: CALL_OW 275
49271: PUSH
49272: LD_VAR 0 5
49276: PUSH
49277: LD_INT 3
49279: ARRAY
49280: GREATEREQUAL
49281: AND
49282: ST_TO_ADDR
// end ;
49283: LD_VAR 0 3
49287: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49288: LD_INT 0
49290: PPUSH
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
// result := false ;
49301: LD_ADDR_VAR 0 8
49305: PUSH
49306: LD_INT 0
49308: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49309: LD_VAR 0 5
49313: NOT
49314: PUSH
49315: LD_VAR 0 1
49319: NOT
49320: OR
49321: PUSH
49322: LD_VAR 0 2
49326: NOT
49327: OR
49328: PUSH
49329: LD_VAR 0 3
49333: NOT
49334: OR
49335: IFFALSE 49339
// exit ;
49337: GO 50153
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49339: LD_ADDR_VAR 0 14
49343: PUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: LD_VAR 0 2
49353: PPUSH
49354: LD_VAR 0 3
49358: PPUSH
49359: LD_VAR 0 4
49363: PPUSH
49364: LD_VAR 0 5
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: PPUSH
49373: CALL_OW 248
49377: PPUSH
49378: LD_INT 0
49380: PPUSH
49381: CALL 51390 0 6
49385: ST_TO_ADDR
// if not hexes then
49386: LD_VAR 0 14
49390: NOT
49391: IFFALSE 49395
// exit ;
49393: GO 50153
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49395: LD_ADDR_VAR 0 17
49399: PUSH
49400: LD_VAR 0 5
49404: PPUSH
49405: LD_INT 22
49407: PUSH
49408: LD_VAR 0 13
49412: PPUSH
49413: CALL_OW 255
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 30
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 30
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PPUSH
49454: CALL_OW 72
49458: ST_TO_ADDR
// for i = 1 to hexes do
49459: LD_ADDR_VAR 0 9
49463: PUSH
49464: DOUBLE
49465: LD_INT 1
49467: DEC
49468: ST_TO_ADDR
49469: LD_VAR 0 14
49473: PUSH
49474: FOR_TO
49475: IFFALSE 50151
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49477: LD_ADDR_VAR 0 13
49481: PUSH
49482: LD_VAR 0 14
49486: PUSH
49487: LD_VAR 0 9
49491: ARRAY
49492: PUSH
49493: LD_INT 1
49495: ARRAY
49496: PPUSH
49497: LD_VAR 0 14
49501: PUSH
49502: LD_VAR 0 9
49506: ARRAY
49507: PUSH
49508: LD_INT 2
49510: ARRAY
49511: PPUSH
49512: CALL_OW 428
49516: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49517: LD_VAR 0 14
49521: PUSH
49522: LD_VAR 0 9
49526: ARRAY
49527: PUSH
49528: LD_INT 1
49530: ARRAY
49531: PPUSH
49532: LD_VAR 0 14
49536: PUSH
49537: LD_VAR 0 9
49541: ARRAY
49542: PUSH
49543: LD_INT 2
49545: ARRAY
49546: PPUSH
49547: CALL_OW 351
49551: PUSH
49552: LD_VAR 0 14
49556: PUSH
49557: LD_VAR 0 9
49561: ARRAY
49562: PUSH
49563: LD_INT 1
49565: ARRAY
49566: PPUSH
49567: LD_VAR 0 14
49571: PUSH
49572: LD_VAR 0 9
49576: ARRAY
49577: PUSH
49578: LD_INT 2
49580: ARRAY
49581: PPUSH
49582: CALL_OW 488
49586: NOT
49587: OR
49588: PUSH
49589: LD_VAR 0 13
49593: PPUSH
49594: CALL_OW 247
49598: PUSH
49599: LD_INT 3
49601: EQUAL
49602: OR
49603: IFFALSE 49609
// exit ;
49605: POP
49606: POP
49607: GO 50153
// if not tmp then
49609: LD_VAR 0 13
49613: NOT
49614: IFFALSE 49618
// continue ;
49616: GO 49474
// result := true ;
49618: LD_ADDR_VAR 0 8
49622: PUSH
49623: LD_INT 1
49625: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49626: LD_VAR 0 6
49630: PUSH
49631: LD_VAR 0 13
49635: PPUSH
49636: CALL_OW 247
49640: PUSH
49641: LD_INT 2
49643: EQUAL
49644: AND
49645: PUSH
49646: LD_VAR 0 13
49650: PPUSH
49651: CALL_OW 263
49655: PUSH
49656: LD_INT 1
49658: EQUAL
49659: AND
49660: IFFALSE 49824
// begin if IsDrivenBy ( tmp ) then
49662: LD_VAR 0 13
49666: PPUSH
49667: CALL_OW 311
49671: IFFALSE 49675
// continue ;
49673: GO 49474
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49675: LD_VAR 0 6
49679: PPUSH
49680: LD_INT 3
49682: PUSH
49683: LD_INT 60
49685: PUSH
49686: EMPTY
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 55
49698: PUSH
49699: EMPTY
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PPUSH
49710: CALL_OW 72
49714: IFFALSE 49822
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49716: LD_ADDR_VAR 0 18
49720: PUSH
49721: LD_VAR 0 6
49725: PPUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 60
49731: PUSH
49732: EMPTY
49733: LIST
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 55
49744: PUSH
49745: EMPTY
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PPUSH
49756: CALL_OW 72
49760: PUSH
49761: LD_INT 1
49763: ARRAY
49764: ST_TO_ADDR
// if IsInUnit ( driver ) then
49765: LD_VAR 0 18
49769: PPUSH
49770: CALL_OW 310
49774: IFFALSE 49785
// ComExit ( driver ) ;
49776: LD_VAR 0 18
49780: PPUSH
49781: CALL 74574 0 1
// AddComEnterUnit ( driver , tmp ) ;
49785: LD_VAR 0 18
49789: PPUSH
49790: LD_VAR 0 13
49794: PPUSH
49795: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49799: LD_VAR 0 18
49803: PPUSH
49804: LD_VAR 0 7
49808: PPUSH
49809: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49813: LD_VAR 0 18
49817: PPUSH
49818: CALL_OW 181
// end ; continue ;
49822: GO 49474
// end ; if not cleaners or not tmp in cleaners then
49824: LD_VAR 0 6
49828: NOT
49829: PUSH
49830: LD_VAR 0 13
49834: PUSH
49835: LD_VAR 0 6
49839: IN
49840: NOT
49841: OR
49842: IFFALSE 50149
// begin if dep then
49844: LD_VAR 0 17
49848: IFFALSE 49984
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49850: LD_ADDR_VAR 0 16
49854: PUSH
49855: LD_VAR 0 17
49859: PUSH
49860: LD_INT 1
49862: ARRAY
49863: PPUSH
49864: CALL_OW 250
49868: PPUSH
49869: LD_VAR 0 17
49873: PUSH
49874: LD_INT 1
49876: ARRAY
49877: PPUSH
49878: CALL_OW 254
49882: PPUSH
49883: LD_INT 5
49885: PPUSH
49886: CALL_OW 272
49890: PUSH
49891: LD_VAR 0 17
49895: PUSH
49896: LD_INT 1
49898: ARRAY
49899: PPUSH
49900: CALL_OW 251
49904: PPUSH
49905: LD_VAR 0 17
49909: PUSH
49910: LD_INT 1
49912: ARRAY
49913: PPUSH
49914: CALL_OW 254
49918: PPUSH
49919: LD_INT 5
49921: PPUSH
49922: CALL_OW 273
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49931: LD_VAR 0 16
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: PPUSH
49940: LD_VAR 0 16
49944: PUSH
49945: LD_INT 2
49947: ARRAY
49948: PPUSH
49949: CALL_OW 488
49953: IFFALSE 49984
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49955: LD_VAR 0 13
49959: PPUSH
49960: LD_VAR 0 16
49964: PUSH
49965: LD_INT 1
49967: ARRAY
49968: PPUSH
49969: LD_VAR 0 16
49973: PUSH
49974: LD_INT 2
49976: ARRAY
49977: PPUSH
49978: CALL_OW 111
// continue ;
49982: GO 49474
// end ; end ; r := GetDir ( tmp ) ;
49984: LD_ADDR_VAR 0 15
49988: PUSH
49989: LD_VAR 0 13
49993: PPUSH
49994: CALL_OW 254
49998: ST_TO_ADDR
// if r = 5 then
49999: LD_VAR 0 15
50003: PUSH
50004: LD_INT 5
50006: EQUAL
50007: IFFALSE 50017
// r := 0 ;
50009: LD_ADDR_VAR 0 15
50013: PUSH
50014: LD_INT 0
50016: ST_TO_ADDR
// for j = r to 5 do
50017: LD_ADDR_VAR 0 10
50021: PUSH
50022: DOUBLE
50023: LD_VAR 0 15
50027: DEC
50028: ST_TO_ADDR
50029: LD_INT 5
50031: PUSH
50032: FOR_TO
50033: IFFALSE 50147
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50035: LD_ADDR_VAR 0 11
50039: PUSH
50040: LD_VAR 0 13
50044: PPUSH
50045: CALL_OW 250
50049: PPUSH
50050: LD_VAR 0 10
50054: PPUSH
50055: LD_INT 2
50057: PPUSH
50058: CALL_OW 272
50062: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50063: LD_ADDR_VAR 0 12
50067: PUSH
50068: LD_VAR 0 13
50072: PPUSH
50073: CALL_OW 251
50077: PPUSH
50078: LD_VAR 0 10
50082: PPUSH
50083: LD_INT 2
50085: PPUSH
50086: CALL_OW 273
50090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50091: LD_VAR 0 11
50095: PPUSH
50096: LD_VAR 0 12
50100: PPUSH
50101: CALL_OW 488
50105: PUSH
50106: LD_VAR 0 11
50110: PPUSH
50111: LD_VAR 0 12
50115: PPUSH
50116: CALL_OW 428
50120: NOT
50121: AND
50122: IFFALSE 50145
// begin ComMoveXY ( tmp , _x , _y ) ;
50124: LD_VAR 0 13
50128: PPUSH
50129: LD_VAR 0 11
50133: PPUSH
50134: LD_VAR 0 12
50138: PPUSH
50139: CALL_OW 111
// break ;
50143: GO 50147
// end ; end ;
50145: GO 50032
50147: POP
50148: POP
// end ; end ;
50149: GO 49474
50151: POP
50152: POP
// end ;
50153: LD_VAR 0 8
50157: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50158: LD_INT 0
50160: PPUSH
// result := true ;
50161: LD_ADDR_VAR 0 3
50165: PUSH
50166: LD_INT 1
50168: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50169: LD_VAR 0 2
50173: PUSH
50174: LD_INT 24
50176: DOUBLE
50177: EQUAL
50178: IFTRUE 50188
50180: LD_INT 33
50182: DOUBLE
50183: EQUAL
50184: IFTRUE 50188
50186: GO 50213
50188: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50189: LD_ADDR_VAR 0 3
50193: PUSH
50194: LD_INT 32
50196: PPUSH
50197: LD_VAR 0 1
50201: PPUSH
50202: CALL_OW 321
50206: PUSH
50207: LD_INT 2
50209: EQUAL
50210: ST_TO_ADDR
50211: GO 50533
50213: LD_INT 20
50215: DOUBLE
50216: EQUAL
50217: IFTRUE 50221
50219: GO 50246
50221: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50222: LD_ADDR_VAR 0 3
50226: PUSH
50227: LD_INT 6
50229: PPUSH
50230: LD_VAR 0 1
50234: PPUSH
50235: CALL_OW 321
50239: PUSH
50240: LD_INT 2
50242: EQUAL
50243: ST_TO_ADDR
50244: GO 50533
50246: LD_INT 22
50248: DOUBLE
50249: EQUAL
50250: IFTRUE 50260
50252: LD_INT 36
50254: DOUBLE
50255: EQUAL
50256: IFTRUE 50260
50258: GO 50285
50260: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50261: LD_ADDR_VAR 0 3
50265: PUSH
50266: LD_INT 15
50268: PPUSH
50269: LD_VAR 0 1
50273: PPUSH
50274: CALL_OW 321
50278: PUSH
50279: LD_INT 2
50281: EQUAL
50282: ST_TO_ADDR
50283: GO 50533
50285: LD_INT 30
50287: DOUBLE
50288: EQUAL
50289: IFTRUE 50293
50291: GO 50318
50293: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50294: LD_ADDR_VAR 0 3
50298: PUSH
50299: LD_INT 20
50301: PPUSH
50302: LD_VAR 0 1
50306: PPUSH
50307: CALL_OW 321
50311: PUSH
50312: LD_INT 2
50314: EQUAL
50315: ST_TO_ADDR
50316: GO 50533
50318: LD_INT 28
50320: DOUBLE
50321: EQUAL
50322: IFTRUE 50332
50324: LD_INT 21
50326: DOUBLE
50327: EQUAL
50328: IFTRUE 50332
50330: GO 50357
50332: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50333: LD_ADDR_VAR 0 3
50337: PUSH
50338: LD_INT 21
50340: PPUSH
50341: LD_VAR 0 1
50345: PPUSH
50346: CALL_OW 321
50350: PUSH
50351: LD_INT 2
50353: EQUAL
50354: ST_TO_ADDR
50355: GO 50533
50357: LD_INT 16
50359: DOUBLE
50360: EQUAL
50361: IFTRUE 50365
50363: GO 50392
50365: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50366: LD_ADDR_VAR 0 3
50370: PUSH
50371: LD_EXP 71
50375: PPUSH
50376: LD_VAR 0 1
50380: PPUSH
50381: CALL_OW 321
50385: PUSH
50386: LD_INT 2
50388: EQUAL
50389: ST_TO_ADDR
50390: GO 50533
50392: LD_INT 19
50394: DOUBLE
50395: EQUAL
50396: IFTRUE 50406
50398: LD_INT 23
50400: DOUBLE
50401: EQUAL
50402: IFTRUE 50406
50404: GO 50433
50406: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50407: LD_ADDR_VAR 0 3
50411: PUSH
50412: LD_EXP 70
50416: PPUSH
50417: LD_VAR 0 1
50421: PPUSH
50422: CALL_OW 321
50426: PUSH
50427: LD_INT 2
50429: EQUAL
50430: ST_TO_ADDR
50431: GO 50533
50433: LD_INT 17
50435: DOUBLE
50436: EQUAL
50437: IFTRUE 50441
50439: GO 50466
50441: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50442: LD_ADDR_VAR 0 3
50446: PUSH
50447: LD_INT 39
50449: PPUSH
50450: LD_VAR 0 1
50454: PPUSH
50455: CALL_OW 321
50459: PUSH
50460: LD_INT 2
50462: EQUAL
50463: ST_TO_ADDR
50464: GO 50533
50466: LD_INT 18
50468: DOUBLE
50469: EQUAL
50470: IFTRUE 50474
50472: GO 50499
50474: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50475: LD_ADDR_VAR 0 3
50479: PUSH
50480: LD_INT 40
50482: PPUSH
50483: LD_VAR 0 1
50487: PPUSH
50488: CALL_OW 321
50492: PUSH
50493: LD_INT 2
50495: EQUAL
50496: ST_TO_ADDR
50497: GO 50533
50499: LD_INT 27
50501: DOUBLE
50502: EQUAL
50503: IFTRUE 50507
50505: GO 50532
50507: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50508: LD_ADDR_VAR 0 3
50512: PUSH
50513: LD_INT 35
50515: PPUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: CALL_OW 321
50525: PUSH
50526: LD_INT 2
50528: EQUAL
50529: ST_TO_ADDR
50530: GO 50533
50532: POP
// end ;
50533: LD_VAR 0 3
50537: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50538: LD_INT 0
50540: PPUSH
50541: PPUSH
50542: PPUSH
50543: PPUSH
50544: PPUSH
50545: PPUSH
50546: PPUSH
50547: PPUSH
50548: PPUSH
50549: PPUSH
50550: PPUSH
// result := false ;
50551: LD_ADDR_VAR 0 6
50555: PUSH
50556: LD_INT 0
50558: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50559: LD_VAR 0 1
50563: NOT
50564: PUSH
50565: LD_VAR 0 1
50569: PPUSH
50570: CALL_OW 266
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: IN
50585: NOT
50586: OR
50587: PUSH
50588: LD_VAR 0 2
50592: NOT
50593: OR
50594: PUSH
50595: LD_VAR 0 5
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 4
50614: PUSH
50615: LD_INT 5
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: IN
50626: NOT
50627: OR
50628: PUSH
50629: LD_VAR 0 3
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 488
50643: NOT
50644: OR
50645: IFFALSE 50649
// exit ;
50647: GO 51385
// side := GetSide ( depot ) ;
50649: LD_ADDR_VAR 0 9
50653: PUSH
50654: LD_VAR 0 1
50658: PPUSH
50659: CALL_OW 255
50663: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50664: LD_VAR 0 9
50668: PPUSH
50669: LD_VAR 0 2
50673: PPUSH
50674: CALL 50158 0 2
50678: NOT
50679: IFFALSE 50683
// exit ;
50681: GO 51385
// pom := GetBase ( depot ) ;
50683: LD_ADDR_VAR 0 10
50687: PUSH
50688: LD_VAR 0 1
50692: PPUSH
50693: CALL_OW 274
50697: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50698: LD_ADDR_VAR 0 11
50702: PUSH
50703: LD_VAR 0 2
50707: PPUSH
50708: LD_VAR 0 1
50712: PPUSH
50713: CALL_OW 248
50717: PPUSH
50718: CALL_OW 450
50722: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50723: LD_VAR 0 10
50727: PPUSH
50728: LD_INT 1
50730: PPUSH
50731: CALL_OW 275
50735: PUSH
50736: LD_VAR 0 11
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: GREATEREQUAL
50745: PUSH
50746: LD_VAR 0 10
50750: PPUSH
50751: LD_INT 2
50753: PPUSH
50754: CALL_OW 275
50758: PUSH
50759: LD_VAR 0 11
50763: PUSH
50764: LD_INT 2
50766: ARRAY
50767: GREATEREQUAL
50768: AND
50769: PUSH
50770: LD_VAR 0 10
50774: PPUSH
50775: LD_INT 3
50777: PPUSH
50778: CALL_OW 275
50782: PUSH
50783: LD_VAR 0 11
50787: PUSH
50788: LD_INT 3
50790: ARRAY
50791: GREATEREQUAL
50792: AND
50793: NOT
50794: IFFALSE 50798
// exit ;
50796: GO 51385
// if GetBType ( depot ) = b_depot then
50798: LD_VAR 0 1
50802: PPUSH
50803: CALL_OW 266
50807: PUSH
50808: LD_INT 0
50810: EQUAL
50811: IFFALSE 50823
// dist := 28 else
50813: LD_ADDR_VAR 0 14
50817: PUSH
50818: LD_INT 28
50820: ST_TO_ADDR
50821: GO 50831
// dist := 36 ;
50823: LD_ADDR_VAR 0 14
50827: PUSH
50828: LD_INT 36
50830: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50831: LD_VAR 0 1
50835: PPUSH
50836: LD_VAR 0 3
50840: PPUSH
50841: LD_VAR 0 4
50845: PPUSH
50846: CALL_OW 297
50850: PUSH
50851: LD_VAR 0 14
50855: GREATER
50856: IFFALSE 50860
// exit ;
50858: GO 51385
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50860: LD_ADDR_VAR 0 12
50864: PUSH
50865: LD_VAR 0 2
50869: PPUSH
50870: LD_VAR 0 3
50874: PPUSH
50875: LD_VAR 0 4
50879: PPUSH
50880: LD_VAR 0 5
50884: PPUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 248
50894: PPUSH
50895: LD_INT 0
50897: PPUSH
50898: CALL 51390 0 6
50902: ST_TO_ADDR
// if not hexes then
50903: LD_VAR 0 12
50907: NOT
50908: IFFALSE 50912
// exit ;
50910: GO 51385
// hex := GetHexInfo ( x , y ) ;
50912: LD_ADDR_VAR 0 15
50916: PUSH
50917: LD_VAR 0 3
50921: PPUSH
50922: LD_VAR 0 4
50926: PPUSH
50927: CALL_OW 546
50931: ST_TO_ADDR
// if hex [ 1 ] then
50932: LD_VAR 0 15
50936: PUSH
50937: LD_INT 1
50939: ARRAY
50940: IFFALSE 50944
// exit ;
50942: GO 51385
// height := hex [ 2 ] ;
50944: LD_ADDR_VAR 0 13
50948: PUSH
50949: LD_VAR 0 15
50953: PUSH
50954: LD_INT 2
50956: ARRAY
50957: ST_TO_ADDR
// for i = 1 to hexes do
50958: LD_ADDR_VAR 0 7
50962: PUSH
50963: DOUBLE
50964: LD_INT 1
50966: DEC
50967: ST_TO_ADDR
50968: LD_VAR 0 12
50972: PUSH
50973: FOR_TO
50974: IFFALSE 51304
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50976: LD_VAR 0 12
50980: PUSH
50981: LD_VAR 0 7
50985: ARRAY
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PPUSH
50991: LD_VAR 0 12
50995: PUSH
50996: LD_VAR 0 7
51000: ARRAY
51001: PUSH
51002: LD_INT 2
51004: ARRAY
51005: PPUSH
51006: CALL_OW 488
51010: NOT
51011: PUSH
51012: LD_VAR 0 12
51016: PUSH
51017: LD_VAR 0 7
51021: ARRAY
51022: PUSH
51023: LD_INT 1
51025: ARRAY
51026: PPUSH
51027: LD_VAR 0 12
51031: PUSH
51032: LD_VAR 0 7
51036: ARRAY
51037: PUSH
51038: LD_INT 2
51040: ARRAY
51041: PPUSH
51042: CALL_OW 428
51046: PUSH
51047: LD_INT 0
51049: GREATER
51050: OR
51051: PUSH
51052: LD_VAR 0 12
51056: PUSH
51057: LD_VAR 0 7
51061: ARRAY
51062: PUSH
51063: LD_INT 1
51065: ARRAY
51066: PPUSH
51067: LD_VAR 0 12
51071: PUSH
51072: LD_VAR 0 7
51076: ARRAY
51077: PUSH
51078: LD_INT 2
51080: ARRAY
51081: PPUSH
51082: CALL_OW 351
51086: OR
51087: IFFALSE 51093
// exit ;
51089: POP
51090: POP
51091: GO 51385
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51093: LD_ADDR_VAR 0 8
51097: PUSH
51098: LD_VAR 0 12
51102: PUSH
51103: LD_VAR 0 7
51107: ARRAY
51108: PUSH
51109: LD_INT 1
51111: ARRAY
51112: PPUSH
51113: LD_VAR 0 12
51117: PUSH
51118: LD_VAR 0 7
51122: ARRAY
51123: PUSH
51124: LD_INT 2
51126: ARRAY
51127: PPUSH
51128: CALL_OW 546
51132: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51133: LD_VAR 0 8
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PUSH
51142: LD_VAR 0 8
51146: PUSH
51147: LD_INT 2
51149: ARRAY
51150: PUSH
51151: LD_VAR 0 13
51155: PUSH
51156: LD_INT 2
51158: PLUS
51159: GREATER
51160: OR
51161: PUSH
51162: LD_VAR 0 8
51166: PUSH
51167: LD_INT 2
51169: ARRAY
51170: PUSH
51171: LD_VAR 0 13
51175: PUSH
51176: LD_INT 2
51178: MINUS
51179: LESS
51180: OR
51181: PUSH
51182: LD_VAR 0 8
51186: PUSH
51187: LD_INT 3
51189: ARRAY
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 8
51196: PUSH
51197: LD_INT 9
51199: PUSH
51200: LD_INT 10
51202: PUSH
51203: LD_INT 11
51205: PUSH
51206: LD_INT 12
51208: PUSH
51209: LD_INT 13
51211: PUSH
51212: LD_INT 16
51214: PUSH
51215: LD_INT 17
51217: PUSH
51218: LD_INT 18
51220: PUSH
51221: LD_INT 19
51223: PUSH
51224: LD_INT 20
51226: PUSH
51227: LD_INT 21
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: IN
51245: NOT
51246: OR
51247: PUSH
51248: LD_VAR 0 8
51252: PUSH
51253: LD_INT 5
51255: ARRAY
51256: NOT
51257: OR
51258: PUSH
51259: LD_VAR 0 8
51263: PUSH
51264: LD_INT 6
51266: ARRAY
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 7
51276: PUSH
51277: LD_INT 9
51279: PUSH
51280: LD_INT 10
51282: PUSH
51283: LD_INT 11
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: IN
51294: NOT
51295: OR
51296: IFFALSE 51302
// exit ;
51298: POP
51299: POP
51300: GO 51385
// end ;
51302: GO 50973
51304: POP
51305: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51306: LD_VAR 0 9
51310: PPUSH
51311: LD_VAR 0 3
51315: PPUSH
51316: LD_VAR 0 4
51320: PPUSH
51321: LD_INT 20
51323: PPUSH
51324: CALL 43331 0 4
51328: PUSH
51329: LD_INT 4
51331: ARRAY
51332: IFFALSE 51336
// exit ;
51334: GO 51385
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51336: LD_VAR 0 2
51340: PUSH
51341: LD_INT 29
51343: PUSH
51344: LD_INT 30
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: IN
51351: PUSH
51352: LD_VAR 0 3
51356: PPUSH
51357: LD_VAR 0 4
51361: PPUSH
51362: LD_VAR 0 9
51366: PPUSH
51367: CALL_OW 440
51371: NOT
51372: AND
51373: IFFALSE 51377
// exit ;
51375: GO 51385
// result := true ;
51377: LD_ADDR_VAR 0 6
51381: PUSH
51382: LD_INT 1
51384: ST_TO_ADDR
// end ;
51385: LD_VAR 0 6
51389: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51390: LD_INT 0
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
// result = [ ] ;
51450: LD_ADDR_VAR 0 7
51454: PUSH
51455: EMPTY
51456: ST_TO_ADDR
// temp_list = [ ] ;
51457: LD_ADDR_VAR 0 9
51461: PUSH
51462: EMPTY
51463: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51464: LD_VAR 0 4
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 4
51483: PUSH
51484: LD_INT 5
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: IN
51495: NOT
51496: PUSH
51497: LD_VAR 0 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: IN
51512: PUSH
51513: LD_VAR 0 5
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: IN
51532: NOT
51533: AND
51534: OR
51535: IFFALSE 51539
// exit ;
51537: GO 69930
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51539: LD_VAR 0 1
51543: PUSH
51544: LD_INT 6
51546: PUSH
51547: LD_INT 7
51549: PUSH
51550: LD_INT 8
51552: PUSH
51553: LD_INT 13
51555: PUSH
51556: LD_INT 12
51558: PUSH
51559: LD_INT 15
51561: PUSH
51562: LD_INT 11
51564: PUSH
51565: LD_INT 14
51567: PUSH
51568: LD_INT 10
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: IN
51582: IFFALSE 51592
// btype = b_lab ;
51584: LD_ADDR_VAR 0 1
51588: PUSH
51589: LD_INT 6
51591: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51592: LD_VAR 0 6
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: IN
51611: NOT
51612: PUSH
51613: LD_VAR 0 1
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: LD_INT 6
51632: PUSH
51633: LD_INT 36
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: LD_INT 5
51641: PUSH
51642: LD_INT 31
51644: PUSH
51645: LD_INT 32
51647: PUSH
51648: LD_INT 33
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: IN
51664: NOT
51665: PUSH
51666: LD_VAR 0 6
51670: PUSH
51671: LD_INT 1
51673: EQUAL
51674: AND
51675: OR
51676: PUSH
51677: LD_VAR 0 1
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: IN
51692: NOT
51693: PUSH
51694: LD_VAR 0 6
51698: PUSH
51699: LD_INT 2
51701: EQUAL
51702: AND
51703: OR
51704: IFFALSE 51714
// mode = 0 ;
51706: LD_ADDR_VAR 0 6
51710: PUSH
51711: LD_INT 0
51713: ST_TO_ADDR
// case mode of 0 :
51714: LD_VAR 0 6
51718: PUSH
51719: LD_INT 0
51721: DOUBLE
51722: EQUAL
51723: IFTRUE 51727
51725: GO 63180
51727: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51728: LD_ADDR_VAR 0 11
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51921: LD_ADDR_VAR 0 12
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52117: LD_ADDR_VAR 0 13
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52316: LD_ADDR_VAR 0 14
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52512: LD_ADDR_VAR 0 15
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52705: LD_ADDR_VAR 0 16
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52898: LD_ADDR_VAR 0 17
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53128: LD_ADDR_VAR 0 18
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53358: LD_ADDR_VAR 0 19
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53588: LD_ADDR_VAR 0 20
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53818: LD_ADDR_VAR 0 21
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54048: LD_ADDR_VAR 0 22
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54278: LD_ADDR_VAR 0 23
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54558: LD_ADDR_VAR 0 24
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54834: LD_ADDR_VAR 0 25
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55108: LD_ADDR_VAR 0 26
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55384: LD_ADDR_VAR 0 27
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55664: LD_ADDR_VAR 0 28
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55946: LD_ADDR_VAR 0 29
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56225: LD_ADDR_VAR 0 30
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56503: LD_ADDR_VAR 0 31
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56781: LD_ADDR_VAR 0 32
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57059: LD_ADDR_VAR 0 33
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57338: LD_ADDR_VAR 0 34
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57618: LD_ADDR_VAR 0 35
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57730: LD_ADDR_VAR 0 36
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57842: LD_ADDR_VAR 0 37
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57954: LD_ADDR_VAR 0 38
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58066: LD_ADDR_VAR 0 39
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58178: LD_ADDR_VAR 0 40
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58290: LD_ADDR_VAR 0 41
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 3
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58640: LD_ADDR_VAR 0 42
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58990: LD_ADDR_VAR 0 43
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59338: LD_ADDR_VAR 0 44
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59688: LD_ADDR_VAR 0 45
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60038: LD_ADDR_VAR 0 46
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60386: LD_ADDR_VAR 0 47
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60537: LD_ADDR_VAR 0 48
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60684: LD_ADDR_VAR 0 49
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60828: LD_ADDR_VAR 0 50
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60972: LD_ADDR_VAR 0 51
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61119: LD_ADDR_VAR 0 52
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: NEG
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61270: LD_ADDR_VAR 0 53
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61500: LD_ADDR_VAR 0 54
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61730: LD_ADDR_VAR 0 55
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61960: LD_ADDR_VAR 0 56
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62190: LD_ADDR_VAR 0 57
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62420: LD_ADDR_VAR 0 58
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62650: LD_ADDR_VAR 0 59
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62738: LD_ADDR_VAR 0 60
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62826: LD_ADDR_VAR 0 61
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62914: LD_ADDR_VAR 0 62
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63002: LD_ADDR_VAR 0 63
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63090: LD_ADDR_VAR 0 64
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: ST_TO_ADDR
// end ; 1 :
63178: GO 69075
63180: LD_INT 1
63182: DOUBLE
63183: EQUAL
63184: IFTRUE 63188
63186: GO 65811
63188: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63189: LD_ADDR_VAR 0 11
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: LD_INT 3
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63233: LD_ADDR_VAR 0 12
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 3
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63274: LD_ADDR_VAR 0 13
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: LD_INT 3
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 3
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63314: LD_ADDR_VAR 0 14
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63355: LD_ADDR_VAR 0 15
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: NEG
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63399: LD_ADDR_VAR 0 16
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63445: LD_ADDR_VAR 0 17
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 3
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63489: LD_ADDR_VAR 0 18
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: LIST
63529: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63530: LD_ADDR_VAR 0 19
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 3
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63570: LD_ADDR_VAR 0 20
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 3
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63611: LD_ADDR_VAR 0 21
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63655: LD_ADDR_VAR 0 22
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63701: LD_ADDR_VAR 0 23
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 4
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63745: LD_ADDR_VAR 0 24
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 4
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63786: LD_ADDR_VAR 0 25
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 4
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: LD_INT 4
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: LIST
63825: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63826: LD_ADDR_VAR 0 26
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63867: LD_ADDR_VAR 0 27
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63911: LD_ADDR_VAR 0 28
63915: PUSH
63916: LD_INT 3
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 4
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63957: LD_ADDR_VAR 0 29
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 3
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 4
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 4
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: LD_INT 5
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 5
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 4
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 6
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 6
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 5
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64112: LD_ADDR_VAR 0 30
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 4
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 4
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 4
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 5
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 5
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 5
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 6
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 6
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64255: LD_ADDR_VAR 0 31
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 2
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: PUSH
64303: LD_INT 4
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 5
64322: PUSH
64323: LD_INT 4
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 5
64332: PUSH
64333: LD_INT 5
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 4
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 6
64352: PUSH
64353: LD_INT 5
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 6
64362: PUSH
64363: LD_INT 6
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 5
64372: PUSH
64373: LD_INT 6
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64394: LD_ADDR_VAR 0 32
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 4
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 5
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 5
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: LD_INT 4
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: LD_INT 6
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 6
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: LD_INT 5
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64537: LD_ADDR_VAR 0 33
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 3
64555: NEG
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: NEG
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 4
64589: NEG
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 4
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: NEG
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 5
64623: NEG
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 5
64634: NEG
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 5
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 6
64657: NEG
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 6
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64692: LD_ADDR_VAR 0 34
64696: PUSH
64697: LD_INT 2
64699: NEG
64700: PUSH
64701: LD_INT 3
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: LD_INT 4
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 4
64747: NEG
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 4
64759: NEG
64760: PUSH
64761: LD_INT 4
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 4
64771: NEG
64772: PUSH
64773: LD_INT 5
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 5
64783: NEG
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 5
64795: NEG
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 5
64807: NEG
64808: PUSH
64809: LD_INT 6
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 6
64819: NEG
64820: PUSH
64821: LD_INT 5
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 6
64831: NEG
64832: PUSH
64833: LD_INT 6
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64855: LD_ADDR_VAR 0 41
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 3
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64899: LD_ADDR_VAR 0 42
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64940: LD_ADDR_VAR 0 43
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64980: LD_ADDR_VAR 0 44
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65021: LD_ADDR_VAR 0 45
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65065: LD_ADDR_VAR 0 46
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PUSH
65086: LD_INT 3
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 3
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65111: LD_ADDR_VAR 0 47
65115: PUSH
65116: LD_INT 2
65118: NEG
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65144: LD_ADDR_VAR 0 48
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65175: LD_ADDR_VAR 0 49
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65204: LD_ADDR_VAR 0 50
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65233: LD_ADDR_VAR 0 51
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 2
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65264: LD_ADDR_VAR 0 52
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: NEG
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65297: LD_ADDR_VAR 0 53
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65341: LD_ADDR_VAR 0 54
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65382: LD_ADDR_VAR 0 55
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65422: LD_ADDR_VAR 0 56
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65463: LD_ADDR_VAR 0 57
65467: PUSH
65468: LD_INT 2
65470: NEG
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65507: LD_ADDR_VAR 0 58
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: LD_INT 3
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 3
65526: NEG
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: NEG
65539: PUSH
65540: LD_INT 3
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65553: LD_ADDR_VAR 0 59
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65597: LD_ADDR_VAR 0 60
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65638: LD_ADDR_VAR 0 61
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65678: LD_ADDR_VAR 0 62
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65719: LD_ADDR_VAR 0 63
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65763: LD_ADDR_VAR 0 64
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// end ; 2 :
65809: GO 69075
65811: LD_INT 2
65813: DOUBLE
65814: EQUAL
65815: IFTRUE 65819
65817: GO 69074
65819: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65820: LD_ADDR_VAR 0 29
65824: PUSH
65825: LD_INT 4
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 5
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 5
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 3
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: LD_INT 2
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 5
65910: PUSH
65911: LD_INT 2
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 4
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 4
65950: PUSH
65951: LD_INT 4
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 4
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: LD_INT 4
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 4
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: LD_INT 4
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: LD_INT 5
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 5
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: LD_INT 5
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 3
66103: NEG
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 3
66114: NEG
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 2
66137: NEG
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 4
66159: NEG
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 4
66205: NEG
66206: PUSH
66207: LD_INT 4
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 4
66217: NEG
66218: PUSH
66219: LD_INT 5
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 3
66229: NEG
66230: PUSH
66231: LD_INT 4
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 4
66253: NEG
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 5
66265: NEG
66266: PUSH
66267: LD_INT 4
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 5
66277: NEG
66278: PUSH
66279: LD_INT 5
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 3
66289: NEG
66290: PUSH
66291: LD_INT 5
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 5
66301: NEG
66302: PUSH
66303: LD_INT 3
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66358: LD_ADDR_VAR 0 30
66362: PUSH
66363: LD_INT 4
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 5
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 4
66405: PUSH
66406: LD_INT 5
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 4
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 5
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 5
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 2
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 2
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 4
66559: NEG
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: NEG
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 5
66615: NEG
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 5
66627: NEG
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: LD_INT 3
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 3
66662: NEG
66663: PUSH
66664: LD_INT 4
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 3
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: NEG
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 4
66722: NEG
66723: PUSH
66724: LD_INT 4
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 2
66734: NEG
66735: PUSH
66736: LD_INT 4
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 4
66746: NEG
66747: PUSH
66748: LD_INT 2
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: LD_INT 4
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: LD_INT 5
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: LD_INT 4
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: LD_INT 3
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: LD_INT 5
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66905: LD_ADDR_VAR 0 31
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 4
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 4
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 5
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 4
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: LD_INT 5
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: NEG
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 2
67039: NEG
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 3
67050: NEG
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 4
67061: NEG
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 4
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 4
67107: NEG
67108: PUSH
67109: LD_INT 4
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: LD_INT 5
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: LD_INT 4
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: NEG
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: NEG
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 5
67167: NEG
67168: PUSH
67169: LD_INT 4
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 5
67179: NEG
67180: PUSH
67181: LD_INT 5
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 3
67191: NEG
67192: PUSH
67193: LD_INT 5
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 5
67203: NEG
67204: PUSH
67205: LD_INT 3
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 4
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 3
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: LD_INT 4
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 4
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 4
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 5
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 5
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 3
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 2
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 5
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67455: LD_ADDR_VAR 0 32
67459: PUSH
67460: LD_INT 4
67462: NEG
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 5
67518: NEG
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 5
67529: NEG
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 5
67541: NEG
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 3
67564: NEG
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: NEG
67589: PUSH
67590: LD_INT 3
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: LD_INT 2
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 4
67624: NEG
67625: PUSH
67626: LD_INT 3
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 4
67636: NEG
67637: PUSH
67638: LD_INT 4
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: NEG
67649: PUSH
67650: LD_INT 4
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 4
67660: NEG
67661: PUSH
67662: LD_INT 2
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 4
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 5
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: LD_INT 4
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 3
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 4
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 5
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 5
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 3
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 4
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 4
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 3
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 2
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 4
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 4
67867: PUSH
67868: LD_INT 4
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 5
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 5
67897: PUSH
67898: LD_INT 5
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: PUSH
67908: LD_INT 5
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 3
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 5
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 5
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68002: LD_ADDR_VAR 0 33
68006: PUSH
68007: LD_INT 4
68009: NEG
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 4
68021: NEG
68022: PUSH
68023: LD_INT 5
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: NEG
68046: PUSH
68047: LD_INT 3
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 4
68057: NEG
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 5
68069: NEG
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 5
68081: NEG
68082: PUSH
68083: LD_INT 5
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: LD_INT 5
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 5
68105: NEG
68106: PUSH
68107: LD_INT 3
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 3
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 4
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 2
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_INT 2
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 4
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: LD_INT 2
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: LD_INT 4
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 4
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 4
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 5
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 5
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 4
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 3
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 3
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 5
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: PUSH
68313: LD_INT 3
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 3
68322: PUSH
68323: LD_INT 2
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 4
68332: PUSH
68333: LD_INT 3
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: LD_INT 4
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 2
68362: PUSH
68363: LD_INT 3
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: PUSH
68393: LD_INT 4
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_INT 4
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 3
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: LD_INT 4
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 1
68432: PUSH
68433: LD_INT 5
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 5
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: LD_INT 4
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: LD_INT 3
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: LD_INT 5
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 2
68484: NEG
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68540: LD_ADDR_VAR 0 34
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_INT 5
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: PUSH
68570: LD_INT 4
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 1
68580: PUSH
68581: LD_INT 3
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 3
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: LD_INT 4
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 1
68614: NEG
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 3
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: LD_INT 5
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 4
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 4
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: LD_INT 0
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 2
68710: PUSH
68711: LD_INT 1
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: LD_INT 2
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 4
68742: PUSH
68743: LD_INT 4
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 4
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 5
68762: PUSH
68763: LD_INT 4
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 5
68772: PUSH
68773: LD_INT 5
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 4
68782: PUSH
68783: LD_INT 5
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: LD_INT 4
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 3
68802: PUSH
68803: LD_INT 3
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 5
68812: PUSH
68813: LD_INT 3
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 5
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: LD_INT 3
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 0
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 2
68904: PUSH
68905: LD_INT 4
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 2
68914: NEG
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: NEG
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 3
68948: NEG
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 3
68959: NEG
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 4
68970: NEG
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 5
68981: NEG
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 5
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: ST_TO_ADDR
// end ; end ;
69072: GO 69075
69074: POP
// case btype of b_depot , b_warehouse :
69075: LD_VAR 0 1
69079: PUSH
69080: LD_INT 0
69082: DOUBLE
69083: EQUAL
69084: IFTRUE 69094
69086: LD_INT 1
69088: DOUBLE
69089: EQUAL
69090: IFTRUE 69094
69092: GO 69295
69094: POP
// case nation of nation_american :
69095: LD_VAR 0 5
69099: PUSH
69100: LD_INT 1
69102: DOUBLE
69103: EQUAL
69104: IFTRUE 69108
69106: GO 69164
69108: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69109: LD_ADDR_VAR 0 9
69113: PUSH
69114: LD_VAR 0 11
69118: PUSH
69119: LD_VAR 0 12
69123: PUSH
69124: LD_VAR 0 13
69128: PUSH
69129: LD_VAR 0 14
69133: PUSH
69134: LD_VAR 0 15
69138: PUSH
69139: LD_VAR 0 16
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: PUSH
69152: LD_VAR 0 4
69156: PUSH
69157: LD_INT 1
69159: PLUS
69160: ARRAY
69161: ST_TO_ADDR
69162: GO 69293
69164: LD_INT 2
69166: DOUBLE
69167: EQUAL
69168: IFTRUE 69172
69170: GO 69228
69172: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69173: LD_ADDR_VAR 0 9
69177: PUSH
69178: LD_VAR 0 17
69182: PUSH
69183: LD_VAR 0 18
69187: PUSH
69188: LD_VAR 0 19
69192: PUSH
69193: LD_VAR 0 20
69197: PUSH
69198: LD_VAR 0 21
69202: PUSH
69203: LD_VAR 0 22
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: PUSH
69216: LD_VAR 0 4
69220: PUSH
69221: LD_INT 1
69223: PLUS
69224: ARRAY
69225: ST_TO_ADDR
69226: GO 69293
69228: LD_INT 3
69230: DOUBLE
69231: EQUAL
69232: IFTRUE 69236
69234: GO 69292
69236: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69237: LD_ADDR_VAR 0 9
69241: PUSH
69242: LD_VAR 0 23
69246: PUSH
69247: LD_VAR 0 24
69251: PUSH
69252: LD_VAR 0 25
69256: PUSH
69257: LD_VAR 0 26
69261: PUSH
69262: LD_VAR 0 27
69266: PUSH
69267: LD_VAR 0 28
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: PUSH
69280: LD_VAR 0 4
69284: PUSH
69285: LD_INT 1
69287: PLUS
69288: ARRAY
69289: ST_TO_ADDR
69290: GO 69293
69292: POP
69293: GO 69848
69295: LD_INT 2
69297: DOUBLE
69298: EQUAL
69299: IFTRUE 69309
69301: LD_INT 3
69303: DOUBLE
69304: EQUAL
69305: IFTRUE 69309
69307: GO 69365
69309: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69310: LD_ADDR_VAR 0 9
69314: PUSH
69315: LD_VAR 0 29
69319: PUSH
69320: LD_VAR 0 30
69324: PUSH
69325: LD_VAR 0 31
69329: PUSH
69330: LD_VAR 0 32
69334: PUSH
69335: LD_VAR 0 33
69339: PUSH
69340: LD_VAR 0 34
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: PUSH
69353: LD_VAR 0 4
69357: PUSH
69358: LD_INT 1
69360: PLUS
69361: ARRAY
69362: ST_TO_ADDR
69363: GO 69848
69365: LD_INT 16
69367: DOUBLE
69368: EQUAL
69369: IFTRUE 69427
69371: LD_INT 17
69373: DOUBLE
69374: EQUAL
69375: IFTRUE 69427
69377: LD_INT 18
69379: DOUBLE
69380: EQUAL
69381: IFTRUE 69427
69383: LD_INT 19
69385: DOUBLE
69386: EQUAL
69387: IFTRUE 69427
69389: LD_INT 22
69391: DOUBLE
69392: EQUAL
69393: IFTRUE 69427
69395: LD_INT 20
69397: DOUBLE
69398: EQUAL
69399: IFTRUE 69427
69401: LD_INT 21
69403: DOUBLE
69404: EQUAL
69405: IFTRUE 69427
69407: LD_INT 23
69409: DOUBLE
69410: EQUAL
69411: IFTRUE 69427
69413: LD_INT 24
69415: DOUBLE
69416: EQUAL
69417: IFTRUE 69427
69419: LD_INT 25
69421: DOUBLE
69422: EQUAL
69423: IFTRUE 69427
69425: GO 69483
69427: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69428: LD_ADDR_VAR 0 9
69432: PUSH
69433: LD_VAR 0 35
69437: PUSH
69438: LD_VAR 0 36
69442: PUSH
69443: LD_VAR 0 37
69447: PUSH
69448: LD_VAR 0 38
69452: PUSH
69453: LD_VAR 0 39
69457: PUSH
69458: LD_VAR 0 40
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: PUSH
69471: LD_VAR 0 4
69475: PUSH
69476: LD_INT 1
69478: PLUS
69479: ARRAY
69480: ST_TO_ADDR
69481: GO 69848
69483: LD_INT 6
69485: DOUBLE
69486: EQUAL
69487: IFTRUE 69539
69489: LD_INT 7
69491: DOUBLE
69492: EQUAL
69493: IFTRUE 69539
69495: LD_INT 8
69497: DOUBLE
69498: EQUAL
69499: IFTRUE 69539
69501: LD_INT 13
69503: DOUBLE
69504: EQUAL
69505: IFTRUE 69539
69507: LD_INT 12
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69539
69513: LD_INT 15
69515: DOUBLE
69516: EQUAL
69517: IFTRUE 69539
69519: LD_INT 11
69521: DOUBLE
69522: EQUAL
69523: IFTRUE 69539
69525: LD_INT 14
69527: DOUBLE
69528: EQUAL
69529: IFTRUE 69539
69531: LD_INT 10
69533: DOUBLE
69534: EQUAL
69535: IFTRUE 69539
69537: GO 69595
69539: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69540: LD_ADDR_VAR 0 9
69544: PUSH
69545: LD_VAR 0 41
69549: PUSH
69550: LD_VAR 0 42
69554: PUSH
69555: LD_VAR 0 43
69559: PUSH
69560: LD_VAR 0 44
69564: PUSH
69565: LD_VAR 0 45
69569: PUSH
69570: LD_VAR 0 46
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: PUSH
69583: LD_VAR 0 4
69587: PUSH
69588: LD_INT 1
69590: PLUS
69591: ARRAY
69592: ST_TO_ADDR
69593: GO 69848
69595: LD_INT 36
69597: DOUBLE
69598: EQUAL
69599: IFTRUE 69603
69601: GO 69659
69603: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69604: LD_ADDR_VAR 0 9
69608: PUSH
69609: LD_VAR 0 47
69613: PUSH
69614: LD_VAR 0 48
69618: PUSH
69619: LD_VAR 0 49
69623: PUSH
69624: LD_VAR 0 50
69628: PUSH
69629: LD_VAR 0 51
69633: PUSH
69634: LD_VAR 0 52
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: PUSH
69647: LD_VAR 0 4
69651: PUSH
69652: LD_INT 1
69654: PLUS
69655: ARRAY
69656: ST_TO_ADDR
69657: GO 69848
69659: LD_INT 4
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69685
69665: LD_INT 5
69667: DOUBLE
69668: EQUAL
69669: IFTRUE 69685
69671: LD_INT 34
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69685
69677: LD_INT 37
69679: DOUBLE
69680: EQUAL
69681: IFTRUE 69685
69683: GO 69741
69685: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69686: LD_ADDR_VAR 0 9
69690: PUSH
69691: LD_VAR 0 53
69695: PUSH
69696: LD_VAR 0 54
69700: PUSH
69701: LD_VAR 0 55
69705: PUSH
69706: LD_VAR 0 56
69710: PUSH
69711: LD_VAR 0 57
69715: PUSH
69716: LD_VAR 0 58
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: PUSH
69729: LD_VAR 0 4
69733: PUSH
69734: LD_INT 1
69736: PLUS
69737: ARRAY
69738: ST_TO_ADDR
69739: GO 69848
69741: LD_INT 31
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69791
69747: LD_INT 32
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69791
69753: LD_INT 33
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69791
69759: LD_INT 27
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69791
69765: LD_INT 26
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69791
69771: LD_INT 28
69773: DOUBLE
69774: EQUAL
69775: IFTRUE 69791
69777: LD_INT 29
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69791
69783: LD_INT 30
69785: DOUBLE
69786: EQUAL
69787: IFTRUE 69791
69789: GO 69847
69791: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69792: LD_ADDR_VAR 0 9
69796: PUSH
69797: LD_VAR 0 59
69801: PUSH
69802: LD_VAR 0 60
69806: PUSH
69807: LD_VAR 0 61
69811: PUSH
69812: LD_VAR 0 62
69816: PUSH
69817: LD_VAR 0 63
69821: PUSH
69822: LD_VAR 0 64
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: PUSH
69835: LD_VAR 0 4
69839: PUSH
69840: LD_INT 1
69842: PLUS
69843: ARRAY
69844: ST_TO_ADDR
69845: GO 69848
69847: POP
// temp_list2 = [ ] ;
69848: LD_ADDR_VAR 0 10
69852: PUSH
69853: EMPTY
69854: ST_TO_ADDR
// for i in temp_list do
69855: LD_ADDR_VAR 0 8
69859: PUSH
69860: LD_VAR 0 9
69864: PUSH
69865: FOR_IN
69866: IFFALSE 69918
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69868: LD_ADDR_VAR 0 10
69872: PUSH
69873: LD_VAR 0 10
69877: PUSH
69878: LD_VAR 0 8
69882: PUSH
69883: LD_INT 1
69885: ARRAY
69886: PUSH
69887: LD_VAR 0 2
69891: PLUS
69892: PUSH
69893: LD_VAR 0 8
69897: PUSH
69898: LD_INT 2
69900: ARRAY
69901: PUSH
69902: LD_VAR 0 3
69906: PLUS
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: EMPTY
69913: LIST
69914: ADD
69915: ST_TO_ADDR
69916: GO 69865
69918: POP
69919: POP
// result = temp_list2 ;
69920: LD_ADDR_VAR 0 7
69924: PUSH
69925: LD_VAR 0 10
69929: ST_TO_ADDR
// end ;
69930: LD_VAR 0 7
69934: RET
// export function EnemyInRange ( unit , dist ) ; begin
69935: LD_INT 0
69937: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69938: LD_ADDR_VAR 0 3
69942: PUSH
69943: LD_VAR 0 1
69947: PPUSH
69948: CALL_OW 255
69952: PPUSH
69953: LD_VAR 0 1
69957: PPUSH
69958: CALL_OW 250
69962: PPUSH
69963: LD_VAR 0 1
69967: PPUSH
69968: CALL_OW 251
69972: PPUSH
69973: LD_VAR 0 2
69977: PPUSH
69978: CALL 43331 0 4
69982: PUSH
69983: LD_INT 4
69985: ARRAY
69986: ST_TO_ADDR
// end ;
69987: LD_VAR 0 3
69991: RET
// export function PlayerSeeMe ( unit ) ; begin
69992: LD_INT 0
69994: PPUSH
// result := See ( your_side , unit ) ;
69995: LD_ADDR_VAR 0 2
69999: PUSH
70000: LD_OWVAR 2
70004: PPUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: CALL_OW 292
70014: ST_TO_ADDR
// end ;
70015: LD_VAR 0 2
70019: RET
// export function ReverseDir ( unit ) ; begin
70020: LD_INT 0
70022: PPUSH
// if not unit then
70023: LD_VAR 0 1
70027: NOT
70028: IFFALSE 70032
// exit ;
70030: GO 70055
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 254
70046: PUSH
70047: LD_INT 3
70049: PLUS
70050: PUSH
70051: LD_INT 6
70053: MOD
70054: ST_TO_ADDR
// end ;
70055: LD_VAR 0 2
70059: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70060: LD_INT 0
70062: PPUSH
70063: PPUSH
70064: PPUSH
70065: PPUSH
70066: PPUSH
// if not hexes then
70067: LD_VAR 0 2
70071: NOT
70072: IFFALSE 70076
// exit ;
70074: GO 70224
// dist := 9999 ;
70076: LD_ADDR_VAR 0 5
70080: PUSH
70081: LD_INT 9999
70083: ST_TO_ADDR
// for i = 1 to hexes do
70084: LD_ADDR_VAR 0 4
70088: PUSH
70089: DOUBLE
70090: LD_INT 1
70092: DEC
70093: ST_TO_ADDR
70094: LD_VAR 0 2
70098: PUSH
70099: FOR_TO
70100: IFFALSE 70212
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70102: LD_VAR 0 1
70106: PPUSH
70107: LD_VAR 0 2
70111: PUSH
70112: LD_VAR 0 4
70116: ARRAY
70117: PUSH
70118: LD_INT 1
70120: ARRAY
70121: PPUSH
70122: LD_VAR 0 2
70126: PUSH
70127: LD_VAR 0 4
70131: ARRAY
70132: PUSH
70133: LD_INT 2
70135: ARRAY
70136: PPUSH
70137: CALL_OW 297
70141: PUSH
70142: LD_VAR 0 5
70146: LESS
70147: IFFALSE 70210
// begin hex := hexes [ i ] ;
70149: LD_ADDR_VAR 0 7
70153: PUSH
70154: LD_VAR 0 2
70158: PUSH
70159: LD_VAR 0 4
70163: ARRAY
70164: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70165: LD_ADDR_VAR 0 5
70169: PUSH
70170: LD_VAR 0 1
70174: PPUSH
70175: LD_VAR 0 2
70179: PUSH
70180: LD_VAR 0 4
70184: ARRAY
70185: PUSH
70186: LD_INT 1
70188: ARRAY
70189: PPUSH
70190: LD_VAR 0 2
70194: PUSH
70195: LD_VAR 0 4
70199: ARRAY
70200: PUSH
70201: LD_INT 2
70203: ARRAY
70204: PPUSH
70205: CALL_OW 297
70209: ST_TO_ADDR
// end ; end ;
70210: GO 70099
70212: POP
70213: POP
// result := hex ;
70214: LD_ADDR_VAR 0 3
70218: PUSH
70219: LD_VAR 0 7
70223: ST_TO_ADDR
// end ;
70224: LD_VAR 0 3
70228: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70229: LD_INT 0
70231: PPUSH
70232: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70233: LD_VAR 0 1
70237: NOT
70238: PUSH
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 21
70246: PUSH
70247: LD_INT 2
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 23
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PPUSH
70268: CALL_OW 69
70272: IN
70273: NOT
70274: OR
70275: IFFALSE 70279
// exit ;
70277: GO 70326
// for i = 1 to 3 do
70279: LD_ADDR_VAR 0 3
70283: PUSH
70284: DOUBLE
70285: LD_INT 1
70287: DEC
70288: ST_TO_ADDR
70289: LD_INT 3
70291: PUSH
70292: FOR_TO
70293: IFFALSE 70324
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70295: LD_VAR 0 1
70299: PPUSH
70300: CALL_OW 250
70304: PPUSH
70305: LD_VAR 0 1
70309: PPUSH
70310: CALL_OW 251
70314: PPUSH
70315: LD_INT 1
70317: PPUSH
70318: CALL_OW 453
70322: GO 70292
70324: POP
70325: POP
// end ;
70326: LD_VAR 0 2
70330: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70331: LD_INT 0
70333: PPUSH
70334: PPUSH
70335: PPUSH
70336: PPUSH
70337: PPUSH
70338: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70339: LD_VAR 0 1
70343: NOT
70344: PUSH
70345: LD_VAR 0 2
70349: NOT
70350: OR
70351: PUSH
70352: LD_VAR 0 1
70356: PPUSH
70357: CALL_OW 314
70361: OR
70362: IFFALSE 70366
// exit ;
70364: GO 70807
// x := GetX ( enemy_unit ) ;
70366: LD_ADDR_VAR 0 7
70370: PUSH
70371: LD_VAR 0 2
70375: PPUSH
70376: CALL_OW 250
70380: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70381: LD_ADDR_VAR 0 8
70385: PUSH
70386: LD_VAR 0 2
70390: PPUSH
70391: CALL_OW 251
70395: ST_TO_ADDR
// if not x or not y then
70396: LD_VAR 0 7
70400: NOT
70401: PUSH
70402: LD_VAR 0 8
70406: NOT
70407: OR
70408: IFFALSE 70412
// exit ;
70410: GO 70807
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70412: LD_ADDR_VAR 0 6
70416: PUSH
70417: LD_VAR 0 7
70421: PPUSH
70422: LD_INT 0
70424: PPUSH
70425: LD_INT 4
70427: PPUSH
70428: CALL_OW 272
70432: PUSH
70433: LD_VAR 0 8
70437: PPUSH
70438: LD_INT 0
70440: PPUSH
70441: LD_INT 4
70443: PPUSH
70444: CALL_OW 273
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_VAR 0 7
70457: PPUSH
70458: LD_INT 1
70460: PPUSH
70461: LD_INT 4
70463: PPUSH
70464: CALL_OW 272
70468: PUSH
70469: LD_VAR 0 8
70473: PPUSH
70474: LD_INT 1
70476: PPUSH
70477: LD_INT 4
70479: PPUSH
70480: CALL_OW 273
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_VAR 0 7
70493: PPUSH
70494: LD_INT 2
70496: PPUSH
70497: LD_INT 4
70499: PPUSH
70500: CALL_OW 272
70504: PUSH
70505: LD_VAR 0 8
70509: PPUSH
70510: LD_INT 2
70512: PPUSH
70513: LD_INT 4
70515: PPUSH
70516: CALL_OW 273
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_VAR 0 7
70529: PPUSH
70530: LD_INT 3
70532: PPUSH
70533: LD_INT 4
70535: PPUSH
70536: CALL_OW 272
70540: PUSH
70541: LD_VAR 0 8
70545: PPUSH
70546: LD_INT 3
70548: PPUSH
70549: LD_INT 4
70551: PPUSH
70552: CALL_OW 273
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_VAR 0 7
70565: PPUSH
70566: LD_INT 4
70568: PPUSH
70569: LD_INT 4
70571: PPUSH
70572: CALL_OW 272
70576: PUSH
70577: LD_VAR 0 8
70581: PPUSH
70582: LD_INT 4
70584: PPUSH
70585: LD_INT 4
70587: PPUSH
70588: CALL_OW 273
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_VAR 0 7
70601: PPUSH
70602: LD_INT 5
70604: PPUSH
70605: LD_INT 4
70607: PPUSH
70608: CALL_OW 272
70612: PUSH
70613: LD_VAR 0 8
70617: PPUSH
70618: LD_INT 5
70620: PPUSH
70621: LD_INT 4
70623: PPUSH
70624: CALL_OW 273
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: ST_TO_ADDR
// for i = tmp downto 1 do
70641: LD_ADDR_VAR 0 4
70645: PUSH
70646: DOUBLE
70647: LD_VAR 0 6
70651: INC
70652: ST_TO_ADDR
70653: LD_INT 1
70655: PUSH
70656: FOR_DOWNTO
70657: IFFALSE 70758
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70659: LD_VAR 0 6
70663: PUSH
70664: LD_VAR 0 4
70668: ARRAY
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PPUSH
70674: LD_VAR 0 6
70678: PUSH
70679: LD_VAR 0 4
70683: ARRAY
70684: PUSH
70685: LD_INT 2
70687: ARRAY
70688: PPUSH
70689: CALL_OW 488
70693: NOT
70694: PUSH
70695: LD_VAR 0 6
70699: PUSH
70700: LD_VAR 0 4
70704: ARRAY
70705: PUSH
70706: LD_INT 1
70708: ARRAY
70709: PPUSH
70710: LD_VAR 0 6
70714: PUSH
70715: LD_VAR 0 4
70719: ARRAY
70720: PUSH
70721: LD_INT 2
70723: ARRAY
70724: PPUSH
70725: CALL_OW 428
70729: PUSH
70730: LD_INT 0
70732: NONEQUAL
70733: OR
70734: IFFALSE 70756
// tmp := Delete ( tmp , i ) ;
70736: LD_ADDR_VAR 0 6
70740: PUSH
70741: LD_VAR 0 6
70745: PPUSH
70746: LD_VAR 0 4
70750: PPUSH
70751: CALL_OW 3
70755: ST_TO_ADDR
70756: GO 70656
70758: POP
70759: POP
// j := GetClosestHex ( unit , tmp ) ;
70760: LD_ADDR_VAR 0 5
70764: PUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: LD_VAR 0 6
70774: PPUSH
70775: CALL 70060 0 2
70779: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70780: LD_VAR 0 1
70784: PPUSH
70785: LD_VAR 0 5
70789: PUSH
70790: LD_INT 1
70792: ARRAY
70793: PPUSH
70794: LD_VAR 0 5
70798: PUSH
70799: LD_INT 2
70801: ARRAY
70802: PPUSH
70803: CALL_OW 111
// end ;
70807: LD_VAR 0 3
70811: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70812: LD_INT 0
70814: PPUSH
70815: PPUSH
70816: PPUSH
// uc_side = 0 ;
70817: LD_ADDR_OWVAR 20
70821: PUSH
70822: LD_INT 0
70824: ST_TO_ADDR
// uc_nation = 0 ;
70825: LD_ADDR_OWVAR 21
70829: PUSH
70830: LD_INT 0
70832: ST_TO_ADDR
// InitHc_All ( ) ;
70833: CALL_OW 584
// InitVc ;
70837: CALL_OW 20
// if mastodonts then
70841: LD_VAR 0 6
70845: IFFALSE 70912
// for i = 1 to mastodonts do
70847: LD_ADDR_VAR 0 11
70851: PUSH
70852: DOUBLE
70853: LD_INT 1
70855: DEC
70856: ST_TO_ADDR
70857: LD_VAR 0 6
70861: PUSH
70862: FOR_TO
70863: IFFALSE 70910
// begin vc_chassis := 31 ;
70865: LD_ADDR_OWVAR 37
70869: PUSH
70870: LD_INT 31
70872: ST_TO_ADDR
// vc_control := control_rider ;
70873: LD_ADDR_OWVAR 38
70877: PUSH
70878: LD_INT 4
70880: ST_TO_ADDR
// animal := CreateVehicle ;
70881: LD_ADDR_VAR 0 12
70885: PUSH
70886: CALL_OW 45
70890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70891: LD_VAR 0 12
70895: PPUSH
70896: LD_VAR 0 8
70900: PPUSH
70901: LD_INT 0
70903: PPUSH
70904: CALL 73100 0 3
// end ;
70908: GO 70862
70910: POP
70911: POP
// if horses then
70912: LD_VAR 0 5
70916: IFFALSE 70983
// for i = 1 to horses do
70918: LD_ADDR_VAR 0 11
70922: PUSH
70923: DOUBLE
70924: LD_INT 1
70926: DEC
70927: ST_TO_ADDR
70928: LD_VAR 0 5
70932: PUSH
70933: FOR_TO
70934: IFFALSE 70981
// begin hc_class := 21 ;
70936: LD_ADDR_OWVAR 28
70940: PUSH
70941: LD_INT 21
70943: ST_TO_ADDR
// hc_gallery :=  ;
70944: LD_ADDR_OWVAR 33
70948: PUSH
70949: LD_STRING 
70951: ST_TO_ADDR
// animal := CreateHuman ;
70952: LD_ADDR_VAR 0 12
70956: PUSH
70957: CALL_OW 44
70961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70962: LD_VAR 0 12
70966: PPUSH
70967: LD_VAR 0 8
70971: PPUSH
70972: LD_INT 0
70974: PPUSH
70975: CALL 73100 0 3
// end ;
70979: GO 70933
70981: POP
70982: POP
// if birds then
70983: LD_VAR 0 1
70987: IFFALSE 71054
// for i = 1 to birds do
70989: LD_ADDR_VAR 0 11
70993: PUSH
70994: DOUBLE
70995: LD_INT 1
70997: DEC
70998: ST_TO_ADDR
70999: LD_VAR 0 1
71003: PUSH
71004: FOR_TO
71005: IFFALSE 71052
// begin hc_class = 18 ;
71007: LD_ADDR_OWVAR 28
71011: PUSH
71012: LD_INT 18
71014: ST_TO_ADDR
// hc_gallery =  ;
71015: LD_ADDR_OWVAR 33
71019: PUSH
71020: LD_STRING 
71022: ST_TO_ADDR
// animal := CreateHuman ;
71023: LD_ADDR_VAR 0 12
71027: PUSH
71028: CALL_OW 44
71032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71033: LD_VAR 0 12
71037: PPUSH
71038: LD_VAR 0 8
71042: PPUSH
71043: LD_INT 0
71045: PPUSH
71046: CALL 73100 0 3
// end ;
71050: GO 71004
71052: POP
71053: POP
// if tigers then
71054: LD_VAR 0 2
71058: IFFALSE 71142
// for i = 1 to tigers do
71060: LD_ADDR_VAR 0 11
71064: PUSH
71065: DOUBLE
71066: LD_INT 1
71068: DEC
71069: ST_TO_ADDR
71070: LD_VAR 0 2
71074: PUSH
71075: FOR_TO
71076: IFFALSE 71140
// begin hc_class = class_tiger ;
71078: LD_ADDR_OWVAR 28
71082: PUSH
71083: LD_INT 14
71085: ST_TO_ADDR
// hc_gallery =  ;
71086: LD_ADDR_OWVAR 33
71090: PUSH
71091: LD_STRING 
71093: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71094: LD_ADDR_OWVAR 35
71098: PUSH
71099: LD_INT 7
71101: NEG
71102: PPUSH
71103: LD_INT 7
71105: PPUSH
71106: CALL_OW 12
71110: ST_TO_ADDR
// animal := CreateHuman ;
71111: LD_ADDR_VAR 0 12
71115: PUSH
71116: CALL_OW 44
71120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71121: LD_VAR 0 12
71125: PPUSH
71126: LD_VAR 0 8
71130: PPUSH
71131: LD_INT 0
71133: PPUSH
71134: CALL 73100 0 3
// end ;
71138: GO 71075
71140: POP
71141: POP
// if apemans then
71142: LD_VAR 0 3
71146: IFFALSE 71269
// for i = 1 to apemans do
71148: LD_ADDR_VAR 0 11
71152: PUSH
71153: DOUBLE
71154: LD_INT 1
71156: DEC
71157: ST_TO_ADDR
71158: LD_VAR 0 3
71162: PUSH
71163: FOR_TO
71164: IFFALSE 71267
// begin hc_class = class_apeman ;
71166: LD_ADDR_OWVAR 28
71170: PUSH
71171: LD_INT 12
71173: ST_TO_ADDR
// hc_gallery =  ;
71174: LD_ADDR_OWVAR 33
71178: PUSH
71179: LD_STRING 
71181: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71182: LD_ADDR_OWVAR 35
71186: PUSH
71187: LD_INT 2
71189: NEG
71190: PPUSH
71191: LD_INT 2
71193: PPUSH
71194: CALL_OW 12
71198: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71199: LD_ADDR_OWVAR 31
71203: PUSH
71204: LD_INT 1
71206: PPUSH
71207: LD_INT 3
71209: PPUSH
71210: CALL_OW 12
71214: PUSH
71215: LD_INT 1
71217: PPUSH
71218: LD_INT 3
71220: PPUSH
71221: CALL_OW 12
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: ST_TO_ADDR
// animal := CreateHuman ;
71238: LD_ADDR_VAR 0 12
71242: PUSH
71243: CALL_OW 44
71247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71248: LD_VAR 0 12
71252: PPUSH
71253: LD_VAR 0 8
71257: PPUSH
71258: LD_INT 0
71260: PPUSH
71261: CALL 73100 0 3
// end ;
71265: GO 71163
71267: POP
71268: POP
// if enchidnas then
71269: LD_VAR 0 4
71273: IFFALSE 71340
// for i = 1 to enchidnas do
71275: LD_ADDR_VAR 0 11
71279: PUSH
71280: DOUBLE
71281: LD_INT 1
71283: DEC
71284: ST_TO_ADDR
71285: LD_VAR 0 4
71289: PUSH
71290: FOR_TO
71291: IFFALSE 71338
// begin hc_class = 13 ;
71293: LD_ADDR_OWVAR 28
71297: PUSH
71298: LD_INT 13
71300: ST_TO_ADDR
// hc_gallery =  ;
71301: LD_ADDR_OWVAR 33
71305: PUSH
71306: LD_STRING 
71308: ST_TO_ADDR
// animal := CreateHuman ;
71309: LD_ADDR_VAR 0 12
71313: PUSH
71314: CALL_OW 44
71318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71319: LD_VAR 0 12
71323: PPUSH
71324: LD_VAR 0 8
71328: PPUSH
71329: LD_INT 0
71331: PPUSH
71332: CALL 73100 0 3
// end ;
71336: GO 71290
71338: POP
71339: POP
// if fishes then
71340: LD_VAR 0 7
71344: IFFALSE 71411
// for i = 1 to fishes do
71346: LD_ADDR_VAR 0 11
71350: PUSH
71351: DOUBLE
71352: LD_INT 1
71354: DEC
71355: ST_TO_ADDR
71356: LD_VAR 0 7
71360: PUSH
71361: FOR_TO
71362: IFFALSE 71409
// begin hc_class = 20 ;
71364: LD_ADDR_OWVAR 28
71368: PUSH
71369: LD_INT 20
71371: ST_TO_ADDR
// hc_gallery =  ;
71372: LD_ADDR_OWVAR 33
71376: PUSH
71377: LD_STRING 
71379: ST_TO_ADDR
// animal := CreateHuman ;
71380: LD_ADDR_VAR 0 12
71384: PUSH
71385: CALL_OW 44
71389: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71390: LD_VAR 0 12
71394: PPUSH
71395: LD_VAR 0 9
71399: PPUSH
71400: LD_INT 0
71402: PPUSH
71403: CALL 73100 0 3
// end ;
71407: GO 71361
71409: POP
71410: POP
// end ;
71411: LD_VAR 0 10
71415: RET
// export function WantHeal ( sci , unit ) ; begin
71416: LD_INT 0
71418: PPUSH
// if GetTaskList ( sci ) > 0 then
71419: LD_VAR 0 1
71423: PPUSH
71424: CALL_OW 437
71428: PUSH
71429: LD_INT 0
71431: GREATER
71432: IFFALSE 71502
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71434: LD_VAR 0 1
71438: PPUSH
71439: CALL_OW 437
71443: PUSH
71444: LD_INT 1
71446: ARRAY
71447: PUSH
71448: LD_INT 1
71450: ARRAY
71451: PUSH
71452: LD_STRING l
71454: EQUAL
71455: PUSH
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 437
71465: PUSH
71466: LD_INT 1
71468: ARRAY
71469: PUSH
71470: LD_INT 4
71472: ARRAY
71473: PUSH
71474: LD_VAR 0 2
71478: EQUAL
71479: AND
71480: IFFALSE 71492
// result := true else
71482: LD_ADDR_VAR 0 3
71486: PUSH
71487: LD_INT 1
71489: ST_TO_ADDR
71490: GO 71500
// result := false ;
71492: LD_ADDR_VAR 0 3
71496: PUSH
71497: LD_INT 0
71499: ST_TO_ADDR
// end else
71500: GO 71510
// result := false ;
71502: LD_ADDR_VAR 0 3
71506: PUSH
71507: LD_INT 0
71509: ST_TO_ADDR
// end ;
71510: LD_VAR 0 3
71514: RET
// export function HealTarget ( sci ) ; begin
71515: LD_INT 0
71517: PPUSH
// if not sci then
71518: LD_VAR 0 1
71522: NOT
71523: IFFALSE 71527
// exit ;
71525: GO 71592
// result := 0 ;
71527: LD_ADDR_VAR 0 2
71531: PUSH
71532: LD_INT 0
71534: ST_TO_ADDR
// if GetTaskList ( sci ) then
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 437
71544: IFFALSE 71592
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71546: LD_VAR 0 1
71550: PPUSH
71551: CALL_OW 437
71555: PUSH
71556: LD_INT 1
71558: ARRAY
71559: PUSH
71560: LD_INT 1
71562: ARRAY
71563: PUSH
71564: LD_STRING l
71566: EQUAL
71567: IFFALSE 71592
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71569: LD_ADDR_VAR 0 2
71573: PUSH
71574: LD_VAR 0 1
71578: PPUSH
71579: CALL_OW 437
71583: PUSH
71584: LD_INT 1
71586: ARRAY
71587: PUSH
71588: LD_INT 4
71590: ARRAY
71591: ST_TO_ADDR
// end ;
71592: LD_VAR 0 2
71596: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71597: LD_INT 0
71599: PPUSH
71600: PPUSH
71601: PPUSH
71602: PPUSH
// if not base_units then
71603: LD_VAR 0 1
71607: NOT
71608: IFFALSE 71612
// exit ;
71610: GO 71699
// result := false ;
71612: LD_ADDR_VAR 0 2
71616: PUSH
71617: LD_INT 0
71619: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71620: LD_ADDR_VAR 0 5
71624: PUSH
71625: LD_VAR 0 1
71629: PPUSH
71630: LD_INT 21
71632: PUSH
71633: LD_INT 3
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PPUSH
71640: CALL_OW 72
71644: ST_TO_ADDR
// if not tmp then
71645: LD_VAR 0 5
71649: NOT
71650: IFFALSE 71654
// exit ;
71652: GO 71699
// for i in tmp do
71654: LD_ADDR_VAR 0 3
71658: PUSH
71659: LD_VAR 0 5
71663: PUSH
71664: FOR_IN
71665: IFFALSE 71697
// begin result := EnemyInRange ( i , 22 ) ;
71667: LD_ADDR_VAR 0 2
71671: PUSH
71672: LD_VAR 0 3
71676: PPUSH
71677: LD_INT 22
71679: PPUSH
71680: CALL 69935 0 2
71684: ST_TO_ADDR
// if result then
71685: LD_VAR 0 2
71689: IFFALSE 71695
// exit ;
71691: POP
71692: POP
71693: GO 71699
// end ;
71695: GO 71664
71697: POP
71698: POP
// end ;
71699: LD_VAR 0 2
71703: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71704: LD_INT 0
71706: PPUSH
71707: PPUSH
// if not units then
71708: LD_VAR 0 1
71712: NOT
71713: IFFALSE 71717
// exit ;
71715: GO 71787
// result := [ ] ;
71717: LD_ADDR_VAR 0 3
71721: PUSH
71722: EMPTY
71723: ST_TO_ADDR
// for i in units do
71724: LD_ADDR_VAR 0 4
71728: PUSH
71729: LD_VAR 0 1
71733: PUSH
71734: FOR_IN
71735: IFFALSE 71785
// if GetTag ( i ) = tag then
71737: LD_VAR 0 4
71741: PPUSH
71742: CALL_OW 110
71746: PUSH
71747: LD_VAR 0 2
71751: EQUAL
71752: IFFALSE 71783
// result := Replace ( result , result + 1 , i ) ;
71754: LD_ADDR_VAR 0 3
71758: PUSH
71759: LD_VAR 0 3
71763: PPUSH
71764: LD_VAR 0 3
71768: PUSH
71769: LD_INT 1
71771: PLUS
71772: PPUSH
71773: LD_VAR 0 4
71777: PPUSH
71778: CALL_OW 1
71782: ST_TO_ADDR
71783: GO 71734
71785: POP
71786: POP
// end ;
71787: LD_VAR 0 3
71791: RET
// export function IsDriver ( un ) ; begin
71792: LD_INT 0
71794: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71795: LD_ADDR_VAR 0 2
71799: PUSH
71800: LD_VAR 0 1
71804: PUSH
71805: LD_INT 55
71807: PUSH
71808: EMPTY
71809: LIST
71810: PPUSH
71811: CALL_OW 69
71815: IN
71816: ST_TO_ADDR
// end ;
71817: LD_VAR 0 2
71821: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71822: LD_INT 0
71824: PPUSH
71825: PPUSH
// list := [ ] ;
71826: LD_ADDR_VAR 0 5
71830: PUSH
71831: EMPTY
71832: ST_TO_ADDR
// case d of 0 :
71833: LD_VAR 0 3
71837: PUSH
71838: LD_INT 0
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71846
71844: GO 71979
71846: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71847: LD_ADDR_VAR 0 5
71851: PUSH
71852: LD_VAR 0 1
71856: PUSH
71857: LD_INT 4
71859: MINUS
71860: PUSH
71861: LD_VAR 0 2
71865: PUSH
71866: LD_INT 4
71868: MINUS
71869: PUSH
71870: LD_INT 2
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: PUSH
71878: LD_VAR 0 1
71882: PUSH
71883: LD_INT 3
71885: MINUS
71886: PUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: LIST
71899: PUSH
71900: LD_VAR 0 1
71904: PUSH
71905: LD_INT 4
71907: PLUS
71908: PUSH
71909: LD_VAR 0 2
71913: PUSH
71914: LD_INT 4
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: LIST
71921: PUSH
71922: LD_VAR 0 1
71926: PUSH
71927: LD_INT 3
71929: PLUS
71930: PUSH
71931: LD_VAR 0 2
71935: PUSH
71936: LD_INT 3
71938: PLUS
71939: PUSH
71940: LD_INT 5
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: LIST
71947: PUSH
71948: LD_VAR 0 1
71952: PUSH
71953: LD_VAR 0 2
71957: PUSH
71958: LD_INT 4
71960: PLUS
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: LIST
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// end ; 1 :
71977: GO 72677
71979: LD_INT 1
71981: DOUBLE
71982: EQUAL
71983: IFTRUE 71987
71985: GO 72120
71987: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71988: LD_ADDR_VAR 0 5
71992: PUSH
71993: LD_VAR 0 1
71997: PUSH
71998: LD_VAR 0 2
72002: PUSH
72003: LD_INT 4
72005: MINUS
72006: PUSH
72007: LD_INT 3
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: LIST
72014: PUSH
72015: LD_VAR 0 1
72019: PUSH
72020: LD_INT 3
72022: MINUS
72023: PUSH
72024: LD_VAR 0 2
72028: PUSH
72029: LD_INT 3
72031: MINUS
72032: PUSH
72033: LD_INT 2
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: LIST
72040: PUSH
72041: LD_VAR 0 1
72045: PUSH
72046: LD_INT 4
72048: MINUS
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: PUSH
72063: LD_VAR 0 1
72067: PUSH
72068: LD_VAR 0 2
72072: PUSH
72073: LD_INT 3
72075: PLUS
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: LIST
72084: PUSH
72085: LD_VAR 0 1
72089: PUSH
72090: LD_INT 4
72092: PLUS
72093: PUSH
72094: LD_VAR 0 2
72098: PUSH
72099: LD_INT 4
72101: PLUS
72102: PUSH
72103: LD_INT 5
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: LIST
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: ST_TO_ADDR
// end ; 2 :
72118: GO 72677
72120: LD_INT 2
72122: DOUBLE
72123: EQUAL
72124: IFTRUE 72128
72126: GO 72257
72128: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72129: LD_ADDR_VAR 0 5
72133: PUSH
72134: LD_VAR 0 1
72138: PUSH
72139: LD_VAR 0 2
72143: PUSH
72144: LD_INT 3
72146: MINUS
72147: PUSH
72148: LD_INT 3
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: LIST
72155: PUSH
72156: LD_VAR 0 1
72160: PUSH
72161: LD_INT 4
72163: PLUS
72164: PUSH
72165: LD_VAR 0 2
72169: PUSH
72170: LD_INT 4
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: LIST
72177: PUSH
72178: LD_VAR 0 1
72182: PUSH
72183: LD_VAR 0 2
72187: PUSH
72188: LD_INT 4
72190: PLUS
72191: PUSH
72192: LD_INT 0
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: LIST
72199: PUSH
72200: LD_VAR 0 1
72204: PUSH
72205: LD_INT 3
72207: MINUS
72208: PUSH
72209: LD_VAR 0 2
72213: PUSH
72214: LD_INT 1
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: LIST
72221: PUSH
72222: LD_VAR 0 1
72226: PUSH
72227: LD_INT 4
72229: MINUS
72230: PUSH
72231: LD_VAR 0 2
72235: PUSH
72236: LD_INT 4
72238: MINUS
72239: PUSH
72240: LD_INT 2
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: LIST
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: ST_TO_ADDR
// end ; 3 :
72255: GO 72677
72257: LD_INT 3
72259: DOUBLE
72260: EQUAL
72261: IFTRUE 72265
72263: GO 72398
72265: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_VAR 0 1
72275: PUSH
72276: LD_INT 3
72278: PLUS
72279: PUSH
72280: LD_VAR 0 2
72284: PUSH
72285: LD_INT 4
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: PUSH
72293: LD_VAR 0 1
72297: PUSH
72298: LD_INT 4
72300: PLUS
72301: PUSH
72302: LD_VAR 0 2
72306: PUSH
72307: LD_INT 4
72309: PLUS
72310: PUSH
72311: LD_INT 5
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: PUSH
72319: LD_VAR 0 1
72323: PUSH
72324: LD_INT 4
72326: MINUS
72327: PUSH
72328: LD_VAR 0 2
72332: PUSH
72333: LD_INT 1
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: LIST
72340: PUSH
72341: LD_VAR 0 1
72345: PUSH
72346: LD_VAR 0 2
72350: PUSH
72351: LD_INT 4
72353: MINUS
72354: PUSH
72355: LD_INT 3
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: LIST
72362: PUSH
72363: LD_VAR 0 1
72367: PUSH
72368: LD_INT 3
72370: MINUS
72371: PUSH
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 3
72379: MINUS
72380: PUSH
72381: LD_INT 2
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: ST_TO_ADDR
// end ; 4 :
72396: GO 72677
72398: LD_INT 4
72400: DOUBLE
72401: EQUAL
72402: IFTRUE 72406
72404: GO 72539
72406: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72407: LD_ADDR_VAR 0 5
72411: PUSH
72412: LD_VAR 0 1
72416: PUSH
72417: LD_VAR 0 2
72421: PUSH
72422: LD_INT 4
72424: PLUS
72425: PUSH
72426: LD_INT 0
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: PUSH
72434: LD_VAR 0 1
72438: PUSH
72439: LD_INT 3
72441: PLUS
72442: PUSH
72443: LD_VAR 0 2
72447: PUSH
72448: LD_INT 3
72450: PLUS
72451: PUSH
72452: LD_INT 5
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PUSH
72460: LD_VAR 0 1
72464: PUSH
72465: LD_INT 4
72467: PLUS
72468: PUSH
72469: LD_VAR 0 2
72473: PUSH
72474: LD_INT 4
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: PUSH
72482: LD_VAR 0 1
72486: PUSH
72487: LD_VAR 0 2
72491: PUSH
72492: LD_INT 3
72494: MINUS
72495: PUSH
72496: LD_INT 3
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_VAR 0 1
72508: PUSH
72509: LD_INT 4
72511: MINUS
72512: PUSH
72513: LD_VAR 0 2
72517: PUSH
72518: LD_INT 4
72520: MINUS
72521: PUSH
72522: LD_INT 2
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: ST_TO_ADDR
// end ; 5 :
72537: GO 72677
72539: LD_INT 5
72541: DOUBLE
72542: EQUAL
72543: IFTRUE 72547
72545: GO 72676
72547: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72548: LD_ADDR_VAR 0 5
72552: PUSH
72553: LD_VAR 0 1
72557: PUSH
72558: LD_INT 4
72560: MINUS
72561: PUSH
72562: LD_VAR 0 2
72566: PUSH
72567: LD_INT 1
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: PUSH
72575: LD_VAR 0 1
72579: PUSH
72580: LD_VAR 0 2
72584: PUSH
72585: LD_INT 4
72587: MINUS
72588: PUSH
72589: LD_INT 3
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: LIST
72596: PUSH
72597: LD_VAR 0 1
72601: PUSH
72602: LD_INT 4
72604: PLUS
72605: PUSH
72606: LD_VAR 0 2
72610: PUSH
72611: LD_INT 4
72613: PLUS
72614: PUSH
72615: LD_INT 5
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: LIST
72622: PUSH
72623: LD_VAR 0 1
72627: PUSH
72628: LD_INT 3
72630: PLUS
72631: PUSH
72632: LD_VAR 0 2
72636: PUSH
72637: LD_INT 4
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: PUSH
72645: LD_VAR 0 1
72649: PUSH
72650: LD_VAR 0 2
72654: PUSH
72655: LD_INT 3
72657: PLUS
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: ST_TO_ADDR
// end ; end ;
72674: GO 72677
72676: POP
// result := list ;
72677: LD_ADDR_VAR 0 4
72681: PUSH
72682: LD_VAR 0 5
72686: ST_TO_ADDR
// end ;
72687: LD_VAR 0 4
72691: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72692: LD_INT 0
72694: PPUSH
72695: PPUSH
72696: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72697: LD_VAR 0 1
72701: NOT
72702: PUSH
72703: LD_VAR 0 2
72707: PUSH
72708: LD_INT 1
72710: PUSH
72711: LD_INT 2
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: LD_INT 4
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: IN
72726: NOT
72727: OR
72728: IFFALSE 72732
// exit ;
72730: GO 72824
// tmp := [ ] ;
72732: LD_ADDR_VAR 0 5
72736: PUSH
72737: EMPTY
72738: ST_TO_ADDR
// for i in units do
72739: LD_ADDR_VAR 0 4
72743: PUSH
72744: LD_VAR 0 1
72748: PUSH
72749: FOR_IN
72750: IFFALSE 72793
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72752: LD_ADDR_VAR 0 5
72756: PUSH
72757: LD_VAR 0 5
72761: PPUSH
72762: LD_VAR 0 5
72766: PUSH
72767: LD_INT 1
72769: PLUS
72770: PPUSH
72771: LD_VAR 0 4
72775: PPUSH
72776: LD_VAR 0 2
72780: PPUSH
72781: CALL_OW 259
72785: PPUSH
72786: CALL_OW 2
72790: ST_TO_ADDR
72791: GO 72749
72793: POP
72794: POP
// if not tmp then
72795: LD_VAR 0 5
72799: NOT
72800: IFFALSE 72804
// exit ;
72802: GO 72824
// result := SortListByListDesc ( units , tmp ) ;
72804: LD_ADDR_VAR 0 3
72808: PUSH
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 5
72818: PPUSH
72819: CALL_OW 77
72823: ST_TO_ADDR
// end ;
72824: LD_VAR 0 3
72828: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72829: LD_INT 0
72831: PPUSH
72832: PPUSH
72833: PPUSH
// result := false ;
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_INT 0
72841: ST_TO_ADDR
// x := GetX ( building ) ;
72842: LD_ADDR_VAR 0 4
72846: PUSH
72847: LD_VAR 0 2
72851: PPUSH
72852: CALL_OW 250
72856: ST_TO_ADDR
// y := GetY ( building ) ;
72857: LD_ADDR_VAR 0 5
72861: PUSH
72862: LD_VAR 0 2
72866: PPUSH
72867: CALL_OW 251
72871: ST_TO_ADDR
// if not building or not x or not y then
72872: LD_VAR 0 2
72876: NOT
72877: PUSH
72878: LD_VAR 0 4
72882: NOT
72883: OR
72884: PUSH
72885: LD_VAR 0 5
72889: NOT
72890: OR
72891: IFFALSE 72895
// exit ;
72893: GO 72987
// if GetTaskList ( unit ) then
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 437
72904: IFFALSE 72987
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72906: LD_STRING e
72908: PUSH
72909: LD_VAR 0 1
72913: PPUSH
72914: CALL_OW 437
72918: PUSH
72919: LD_INT 1
72921: ARRAY
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: EQUAL
72927: PUSH
72928: LD_VAR 0 4
72932: PUSH
72933: LD_VAR 0 1
72937: PPUSH
72938: CALL_OW 437
72942: PUSH
72943: LD_INT 1
72945: ARRAY
72946: PUSH
72947: LD_INT 2
72949: ARRAY
72950: EQUAL
72951: AND
72952: PUSH
72953: LD_VAR 0 5
72957: PUSH
72958: LD_VAR 0 1
72962: PPUSH
72963: CALL_OW 437
72967: PUSH
72968: LD_INT 1
72970: ARRAY
72971: PUSH
72972: LD_INT 3
72974: ARRAY
72975: EQUAL
72976: AND
72977: IFFALSE 72987
// result := true end ;
72979: LD_ADDR_VAR 0 3
72983: PUSH
72984: LD_INT 1
72986: ST_TO_ADDR
// end ;
72987: LD_VAR 0 3
72991: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72992: LD_INT 0
72994: PPUSH
// result := false ;
72995: LD_ADDR_VAR 0 4
72999: PUSH
73000: LD_INT 0
73002: ST_TO_ADDR
// if GetTaskList ( unit ) then
73003: LD_VAR 0 1
73007: PPUSH
73008: CALL_OW 437
73012: IFFALSE 73095
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73014: LD_STRING M
73016: PUSH
73017: LD_VAR 0 1
73021: PPUSH
73022: CALL_OW 437
73026: PUSH
73027: LD_INT 1
73029: ARRAY
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: EQUAL
73035: PUSH
73036: LD_VAR 0 2
73040: PUSH
73041: LD_VAR 0 1
73045: PPUSH
73046: CALL_OW 437
73050: PUSH
73051: LD_INT 1
73053: ARRAY
73054: PUSH
73055: LD_INT 2
73057: ARRAY
73058: EQUAL
73059: AND
73060: PUSH
73061: LD_VAR 0 3
73065: PUSH
73066: LD_VAR 0 1
73070: PPUSH
73071: CALL_OW 437
73075: PUSH
73076: LD_INT 1
73078: ARRAY
73079: PUSH
73080: LD_INT 3
73082: ARRAY
73083: EQUAL
73084: AND
73085: IFFALSE 73095
// result := true ;
73087: LD_ADDR_VAR 0 4
73091: PUSH
73092: LD_INT 1
73094: ST_TO_ADDR
// end ; end ;
73095: LD_VAR 0 4
73099: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73100: LD_INT 0
73102: PPUSH
73103: PPUSH
73104: PPUSH
73105: PPUSH
// if not unit or not area then
73106: LD_VAR 0 1
73110: NOT
73111: PUSH
73112: LD_VAR 0 2
73116: NOT
73117: OR
73118: IFFALSE 73122
// exit ;
73120: GO 73286
// tmp := AreaToList ( area , i ) ;
73122: LD_ADDR_VAR 0 6
73126: PUSH
73127: LD_VAR 0 2
73131: PPUSH
73132: LD_VAR 0 5
73136: PPUSH
73137: CALL_OW 517
73141: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73142: LD_ADDR_VAR 0 5
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_VAR 0 6
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: PUSH
73161: FOR_TO
73162: IFFALSE 73284
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73164: LD_ADDR_VAR 0 7
73168: PUSH
73169: LD_VAR 0 6
73173: PUSH
73174: LD_INT 1
73176: ARRAY
73177: PUSH
73178: LD_VAR 0 5
73182: ARRAY
73183: PUSH
73184: LD_VAR 0 6
73188: PUSH
73189: LD_INT 2
73191: ARRAY
73192: PUSH
73193: LD_VAR 0 5
73197: ARRAY
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73203: LD_VAR 0 7
73207: PUSH
73208: LD_INT 1
73210: ARRAY
73211: PPUSH
73212: LD_VAR 0 7
73216: PUSH
73217: LD_INT 2
73219: ARRAY
73220: PPUSH
73221: CALL_OW 428
73225: PUSH
73226: LD_INT 0
73228: EQUAL
73229: IFFALSE 73282
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73231: LD_VAR 0 1
73235: PPUSH
73236: LD_VAR 0 7
73240: PUSH
73241: LD_INT 1
73243: ARRAY
73244: PPUSH
73245: LD_VAR 0 7
73249: PUSH
73250: LD_INT 2
73252: ARRAY
73253: PPUSH
73254: LD_VAR 0 3
73258: PPUSH
73259: CALL_OW 48
// result := IsPlaced ( unit ) ;
73263: LD_ADDR_VAR 0 4
73267: PUSH
73268: LD_VAR 0 1
73272: PPUSH
73273: CALL_OW 305
73277: ST_TO_ADDR
// exit ;
73278: POP
73279: POP
73280: GO 73286
// end ; end ;
73282: GO 73161
73284: POP
73285: POP
// end ;
73286: LD_VAR 0 4
73290: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73291: LD_INT 0
73293: PPUSH
73294: PPUSH
73295: PPUSH
// if not side or side > 8 then
73296: LD_VAR 0 1
73300: NOT
73301: PUSH
73302: LD_VAR 0 1
73306: PUSH
73307: LD_INT 8
73309: GREATER
73310: OR
73311: IFFALSE 73315
// exit ;
73313: GO 73502
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73315: LD_ADDR_VAR 0 4
73319: PUSH
73320: LD_INT 22
73322: PUSH
73323: LD_VAR 0 1
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 21
73334: PUSH
73335: LD_INT 3
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PPUSH
73346: CALL_OW 69
73350: ST_TO_ADDR
// if not tmp then
73351: LD_VAR 0 4
73355: NOT
73356: IFFALSE 73360
// exit ;
73358: GO 73502
// enable_addtolog := true ;
73360: LD_ADDR_OWVAR 81
73364: PUSH
73365: LD_INT 1
73367: ST_TO_ADDR
// AddToLog ( [ ) ;
73368: LD_STRING [
73370: PPUSH
73371: CALL_OW 561
// for i in tmp do
73375: LD_ADDR_VAR 0 3
73379: PUSH
73380: LD_VAR 0 4
73384: PUSH
73385: FOR_IN
73386: IFFALSE 73493
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73388: LD_STRING [
73390: PUSH
73391: LD_VAR 0 3
73395: PPUSH
73396: CALL_OW 266
73400: STR
73401: PUSH
73402: LD_STRING , 
73404: STR
73405: PUSH
73406: LD_VAR 0 3
73410: PPUSH
73411: CALL_OW 250
73415: STR
73416: PUSH
73417: LD_STRING , 
73419: STR
73420: PUSH
73421: LD_VAR 0 3
73425: PPUSH
73426: CALL_OW 251
73430: STR
73431: PUSH
73432: LD_STRING , 
73434: STR
73435: PUSH
73436: LD_VAR 0 3
73440: PPUSH
73441: CALL_OW 254
73445: STR
73446: PUSH
73447: LD_STRING , 
73449: STR
73450: PUSH
73451: LD_VAR 0 3
73455: PPUSH
73456: LD_INT 1
73458: PPUSH
73459: CALL_OW 268
73463: STR
73464: PUSH
73465: LD_STRING , 
73467: STR
73468: PUSH
73469: LD_VAR 0 3
73473: PPUSH
73474: LD_INT 2
73476: PPUSH
73477: CALL_OW 268
73481: STR
73482: PUSH
73483: LD_STRING ],
73485: STR
73486: PPUSH
73487: CALL_OW 561
// end ;
73491: GO 73385
73493: POP
73494: POP
// AddToLog ( ]; ) ;
73495: LD_STRING ];
73497: PPUSH
73498: CALL_OW 561
// end ;
73502: LD_VAR 0 2
73506: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73507: LD_INT 0
73509: PPUSH
73510: PPUSH
73511: PPUSH
73512: PPUSH
73513: PPUSH
// if not area or not rate or not max then
73514: LD_VAR 0 1
73518: NOT
73519: PUSH
73520: LD_VAR 0 2
73524: NOT
73525: OR
73526: PUSH
73527: LD_VAR 0 4
73531: NOT
73532: OR
73533: IFFALSE 73537
// exit ;
73535: GO 73729
// while 1 do
73537: LD_INT 1
73539: IFFALSE 73729
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73541: LD_ADDR_VAR 0 9
73545: PUSH
73546: LD_VAR 0 1
73550: PPUSH
73551: LD_INT 1
73553: PPUSH
73554: CALL_OW 287
73558: PUSH
73559: LD_INT 10
73561: MUL
73562: ST_TO_ADDR
// r := rate / 10 ;
73563: LD_ADDR_VAR 0 7
73567: PUSH
73568: LD_VAR 0 2
73572: PUSH
73573: LD_INT 10
73575: DIVREAL
73576: ST_TO_ADDR
// time := 1 1$00 ;
73577: LD_ADDR_VAR 0 8
73581: PUSH
73582: LD_INT 2100
73584: ST_TO_ADDR
// if amount < min then
73585: LD_VAR 0 9
73589: PUSH
73590: LD_VAR 0 3
73594: LESS
73595: IFFALSE 73613
// r := r * 2 else
73597: LD_ADDR_VAR 0 7
73601: PUSH
73602: LD_VAR 0 7
73606: PUSH
73607: LD_INT 2
73609: MUL
73610: ST_TO_ADDR
73611: GO 73639
// if amount > max then
73613: LD_VAR 0 9
73617: PUSH
73618: LD_VAR 0 4
73622: GREATER
73623: IFFALSE 73639
// r := r / 2 ;
73625: LD_ADDR_VAR 0 7
73629: PUSH
73630: LD_VAR 0 7
73634: PUSH
73635: LD_INT 2
73637: DIVREAL
73638: ST_TO_ADDR
// time := time / r ;
73639: LD_ADDR_VAR 0 8
73643: PUSH
73644: LD_VAR 0 8
73648: PUSH
73649: LD_VAR 0 7
73653: DIVREAL
73654: ST_TO_ADDR
// if time < 0 then
73655: LD_VAR 0 8
73659: PUSH
73660: LD_INT 0
73662: LESS
73663: IFFALSE 73680
// time := time * - 1 ;
73665: LD_ADDR_VAR 0 8
73669: PUSH
73670: LD_VAR 0 8
73674: PUSH
73675: LD_INT 1
73677: NEG
73678: MUL
73679: ST_TO_ADDR
// wait ( time ) ;
73680: LD_VAR 0 8
73684: PPUSH
73685: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73689: LD_INT 35
73691: PPUSH
73692: LD_INT 875
73694: PPUSH
73695: CALL_OW 12
73699: PPUSH
73700: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73704: LD_INT 1
73706: PPUSH
73707: LD_INT 5
73709: PPUSH
73710: CALL_OW 12
73714: PPUSH
73715: LD_VAR 0 1
73719: PPUSH
73720: LD_INT 1
73722: PPUSH
73723: CALL_OW 55
// end ;
73727: GO 73537
// end ;
73729: LD_VAR 0 5
73733: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73734: LD_INT 0
73736: PPUSH
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
// if not turrets or not factories then
73744: LD_VAR 0 1
73748: NOT
73749: PUSH
73750: LD_VAR 0 2
73754: NOT
73755: OR
73756: IFFALSE 73760
// exit ;
73758: GO 74067
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73760: LD_ADDR_VAR 0 10
73764: PUSH
73765: LD_INT 5
73767: PUSH
73768: LD_INT 6
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 2
73777: PUSH
73778: LD_INT 4
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 3
73787: PUSH
73788: LD_INT 5
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: LIST
73799: PUSH
73800: LD_INT 24
73802: PUSH
73803: LD_INT 25
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: LD_INT 23
73812: PUSH
73813: LD_INT 27
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 42
73826: PUSH
73827: LD_INT 43
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 44
73836: PUSH
73837: LD_INT 46
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 45
73846: PUSH
73847: LD_INT 47
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: LIST
73863: ST_TO_ADDR
// result := [ ] ;
73864: LD_ADDR_VAR 0 3
73868: PUSH
73869: EMPTY
73870: ST_TO_ADDR
// for i in turrets do
73871: LD_ADDR_VAR 0 4
73875: PUSH
73876: LD_VAR 0 1
73880: PUSH
73881: FOR_IN
73882: IFFALSE 74065
// begin nat := GetNation ( i ) ;
73884: LD_ADDR_VAR 0 7
73888: PUSH
73889: LD_VAR 0 4
73893: PPUSH
73894: CALL_OW 248
73898: ST_TO_ADDR
// weapon := 0 ;
73899: LD_ADDR_VAR 0 8
73903: PUSH
73904: LD_INT 0
73906: ST_TO_ADDR
// if not nat then
73907: LD_VAR 0 7
73911: NOT
73912: IFFALSE 73916
// continue ;
73914: GO 73881
// for j in list [ nat ] do
73916: LD_ADDR_VAR 0 5
73920: PUSH
73921: LD_VAR 0 10
73925: PUSH
73926: LD_VAR 0 7
73930: ARRAY
73931: PUSH
73932: FOR_IN
73933: IFFALSE 73974
// if GetBWeapon ( i ) = j [ 1 ] then
73935: LD_VAR 0 4
73939: PPUSH
73940: CALL_OW 269
73944: PUSH
73945: LD_VAR 0 5
73949: PUSH
73950: LD_INT 1
73952: ARRAY
73953: EQUAL
73954: IFFALSE 73972
// begin weapon := j [ 2 ] ;
73956: LD_ADDR_VAR 0 8
73960: PUSH
73961: LD_VAR 0 5
73965: PUSH
73966: LD_INT 2
73968: ARRAY
73969: ST_TO_ADDR
// break ;
73970: GO 73974
// end ;
73972: GO 73932
73974: POP
73975: POP
// if not weapon then
73976: LD_VAR 0 8
73980: NOT
73981: IFFALSE 73985
// continue ;
73983: GO 73881
// for k in factories do
73985: LD_ADDR_VAR 0 6
73989: PUSH
73990: LD_VAR 0 2
73994: PUSH
73995: FOR_IN
73996: IFFALSE 74061
// begin weapons := AvailableWeaponList ( k ) ;
73998: LD_ADDR_VAR 0 9
74002: PUSH
74003: LD_VAR 0 6
74007: PPUSH
74008: CALL_OW 478
74012: ST_TO_ADDR
// if not weapons then
74013: LD_VAR 0 9
74017: NOT
74018: IFFALSE 74022
// continue ;
74020: GO 73995
// if weapon in weapons then
74022: LD_VAR 0 8
74026: PUSH
74027: LD_VAR 0 9
74031: IN
74032: IFFALSE 74059
// begin result := [ i , weapon ] ;
74034: LD_ADDR_VAR 0 3
74038: PUSH
74039: LD_VAR 0 4
74043: PUSH
74044: LD_VAR 0 8
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: ST_TO_ADDR
// exit ;
74053: POP
74054: POP
74055: POP
74056: POP
74057: GO 74067
// end ; end ;
74059: GO 73995
74061: POP
74062: POP
// end ;
74063: GO 73881
74065: POP
74066: POP
// end ;
74067: LD_VAR 0 3
74071: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74072: LD_INT 0
74074: PPUSH
// if not side or side > 8 then
74075: LD_VAR 0 3
74079: NOT
74080: PUSH
74081: LD_VAR 0 3
74085: PUSH
74086: LD_INT 8
74088: GREATER
74089: OR
74090: IFFALSE 74094
// exit ;
74092: GO 74153
// if not range then
74094: LD_VAR 0 4
74098: NOT
74099: IFFALSE 74110
// range := - 12 ;
74101: LD_ADDR_VAR 0 4
74105: PUSH
74106: LD_INT 12
74108: NEG
74109: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74110: LD_VAR 0 1
74114: PPUSH
74115: LD_VAR 0 2
74119: PPUSH
74120: LD_VAR 0 3
74124: PPUSH
74125: LD_VAR 0 4
74129: PPUSH
74130: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74134: LD_VAR 0 1
74138: PPUSH
74139: LD_VAR 0 2
74143: PPUSH
74144: LD_VAR 0 3
74148: PPUSH
74149: CALL_OW 331
// end ;
74153: LD_VAR 0 5
74157: RET
// export function Video ( mode ) ; begin
74158: LD_INT 0
74160: PPUSH
// ingame_video = mode ;
74161: LD_ADDR_OWVAR 52
74165: PUSH
74166: LD_VAR 0 1
74170: ST_TO_ADDR
// interface_hidden = mode ;
74171: LD_ADDR_OWVAR 54
74175: PUSH
74176: LD_VAR 0 1
74180: ST_TO_ADDR
// end ;
74181: LD_VAR 0 2
74185: RET
// export function Join ( array , element ) ; begin
74186: LD_INT 0
74188: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74189: LD_ADDR_VAR 0 3
74193: PUSH
74194: LD_VAR 0 1
74198: PPUSH
74199: LD_VAR 0 1
74203: PUSH
74204: LD_INT 1
74206: PLUS
74207: PPUSH
74208: LD_VAR 0 2
74212: PPUSH
74213: CALL_OW 1
74217: ST_TO_ADDR
// end ;
74218: LD_VAR 0 3
74222: RET
// export function JoinUnion ( array , element ) ; begin
74223: LD_INT 0
74225: PPUSH
// result := array union element ;
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: LD_VAR 0 1
74235: PUSH
74236: LD_VAR 0 2
74240: UNION
74241: ST_TO_ADDR
// end ;
74242: LD_VAR 0 3
74246: RET
// export function GetBehemoths ( side ) ; begin
74247: LD_INT 0
74249: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74250: LD_ADDR_VAR 0 2
74254: PUSH
74255: LD_INT 22
74257: PUSH
74258: LD_VAR 0 1
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 31
74269: PUSH
74270: LD_INT 25
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PPUSH
74281: CALL_OW 69
74285: ST_TO_ADDR
// end ;
74286: LD_VAR 0 2
74290: RET
// export function Shuffle ( array ) ; var i , index ; begin
74291: LD_INT 0
74293: PPUSH
74294: PPUSH
74295: PPUSH
// result := [ ] ;
74296: LD_ADDR_VAR 0 2
74300: PUSH
74301: EMPTY
74302: ST_TO_ADDR
// if not array then
74303: LD_VAR 0 1
74307: NOT
74308: IFFALSE 74312
// exit ;
74310: GO 74411
// Randomize ;
74312: CALL_OW 10
// for i = array downto 1 do
74316: LD_ADDR_VAR 0 3
74320: PUSH
74321: DOUBLE
74322: LD_VAR 0 1
74326: INC
74327: ST_TO_ADDR
74328: LD_INT 1
74330: PUSH
74331: FOR_DOWNTO
74332: IFFALSE 74409
// begin index := rand ( 1 , array ) ;
74334: LD_ADDR_VAR 0 4
74338: PUSH
74339: LD_INT 1
74341: PPUSH
74342: LD_VAR 0 1
74346: PPUSH
74347: CALL_OW 12
74351: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74352: LD_ADDR_VAR 0 2
74356: PUSH
74357: LD_VAR 0 2
74361: PPUSH
74362: LD_VAR 0 2
74366: PUSH
74367: LD_INT 1
74369: PLUS
74370: PPUSH
74371: LD_VAR 0 1
74375: PUSH
74376: LD_VAR 0 4
74380: ARRAY
74381: PPUSH
74382: CALL_OW 2
74386: ST_TO_ADDR
// array := Delete ( array , index ) ;
74387: LD_ADDR_VAR 0 1
74391: PUSH
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_VAR 0 4
74401: PPUSH
74402: CALL_OW 3
74406: ST_TO_ADDR
// end ;
74407: GO 74331
74409: POP
74410: POP
// end ;
74411: LD_VAR 0 2
74415: RET
// export function GetBaseMaterials ( base ) ; begin
74416: LD_INT 0
74418: PPUSH
// result := [ 0 , 0 , 0 ] ;
74419: LD_ADDR_VAR 0 2
74423: PUSH
74424: LD_INT 0
74426: PUSH
74427: LD_INT 0
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: LIST
74437: ST_TO_ADDR
// if not base then
74438: LD_VAR 0 1
74442: NOT
74443: IFFALSE 74447
// exit ;
74445: GO 74496
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74447: LD_ADDR_VAR 0 2
74451: PUSH
74452: LD_VAR 0 1
74456: PPUSH
74457: LD_INT 1
74459: PPUSH
74460: CALL_OW 275
74464: PUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: LD_INT 2
74472: PPUSH
74473: CALL_OW 275
74477: PUSH
74478: LD_VAR 0 1
74482: PPUSH
74483: LD_INT 3
74485: PPUSH
74486: CALL_OW 275
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: ST_TO_ADDR
// end ;
74496: LD_VAR 0 2
74500: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74501: LD_INT 0
74503: PPUSH
74504: PPUSH
// result := array ;
74505: LD_ADDR_VAR 0 3
74509: PUSH
74510: LD_VAR 0 1
74514: ST_TO_ADDR
// if size > 0 then
74515: LD_VAR 0 2
74519: PUSH
74520: LD_INT 0
74522: GREATER
74523: IFFALSE 74569
// for i := array downto size do
74525: LD_ADDR_VAR 0 4
74529: PUSH
74530: DOUBLE
74531: LD_VAR 0 1
74535: INC
74536: ST_TO_ADDR
74537: LD_VAR 0 2
74541: PUSH
74542: FOR_DOWNTO
74543: IFFALSE 74567
// result := Delete ( result , result ) ;
74545: LD_ADDR_VAR 0 3
74549: PUSH
74550: LD_VAR 0 3
74554: PPUSH
74555: LD_VAR 0 3
74559: PPUSH
74560: CALL_OW 3
74564: ST_TO_ADDR
74565: GO 74542
74567: POP
74568: POP
// end ;
74569: LD_VAR 0 3
74573: RET
// export function ComExit ( unit ) ; var tmp ; begin
74574: LD_INT 0
74576: PPUSH
74577: PPUSH
// if not IsInUnit ( unit ) then
74578: LD_VAR 0 1
74582: PPUSH
74583: CALL_OW 310
74587: NOT
74588: IFFALSE 74592
// exit ;
74590: GO 74652
// tmp := IsInUnit ( unit ) ;
74592: LD_ADDR_VAR 0 3
74596: PUSH
74597: LD_VAR 0 1
74601: PPUSH
74602: CALL_OW 310
74606: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74607: LD_VAR 0 3
74611: PPUSH
74612: CALL_OW 247
74616: PUSH
74617: LD_INT 2
74619: EQUAL
74620: IFFALSE 74633
// ComExitVehicle ( unit ) else
74622: LD_VAR 0 1
74626: PPUSH
74627: CALL_OW 121
74631: GO 74642
// ComExitBuilding ( unit ) ;
74633: LD_VAR 0 1
74637: PPUSH
74638: CALL_OW 122
// result := tmp ;
74642: LD_ADDR_VAR 0 2
74646: PUSH
74647: LD_VAR 0 3
74651: ST_TO_ADDR
// end ;
74652: LD_VAR 0 2
74656: RET
// export function ComExitAll ( units ) ; var i ; begin
74657: LD_INT 0
74659: PPUSH
74660: PPUSH
// if not units then
74661: LD_VAR 0 1
74665: NOT
74666: IFFALSE 74670
// exit ;
74668: GO 74696
// for i in units do
74670: LD_ADDR_VAR 0 3
74674: PUSH
74675: LD_VAR 0 1
74679: PUSH
74680: FOR_IN
74681: IFFALSE 74694
// ComExit ( i ) ;
74683: LD_VAR 0 3
74687: PPUSH
74688: CALL 74574 0 1
74692: GO 74680
74694: POP
74695: POP
// end ;
74696: LD_VAR 0 2
74700: RET
// export function ResetHc ; begin
74701: LD_INT 0
74703: PPUSH
// InitHc ;
74704: CALL_OW 19
// hc_importance := 0 ;
74708: LD_ADDR_OWVAR 32
74712: PUSH
74713: LD_INT 0
74715: ST_TO_ADDR
// end ;
74716: LD_VAR 0 1
74720: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74721: LD_INT 0
74723: PPUSH
74724: PPUSH
74725: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74726: LD_ADDR_VAR 0 6
74730: PUSH
74731: LD_VAR 0 1
74735: PUSH
74736: LD_VAR 0 3
74740: PLUS
74741: PUSH
74742: LD_INT 2
74744: DIV
74745: ST_TO_ADDR
// if _x < 0 then
74746: LD_VAR 0 6
74750: PUSH
74751: LD_INT 0
74753: LESS
74754: IFFALSE 74771
// _x := _x * - 1 ;
74756: LD_ADDR_VAR 0 6
74760: PUSH
74761: LD_VAR 0 6
74765: PUSH
74766: LD_INT 1
74768: NEG
74769: MUL
74770: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74771: LD_ADDR_VAR 0 7
74775: PUSH
74776: LD_VAR 0 2
74780: PUSH
74781: LD_VAR 0 4
74785: PLUS
74786: PUSH
74787: LD_INT 2
74789: DIV
74790: ST_TO_ADDR
// if _y < 0 then
74791: LD_VAR 0 7
74795: PUSH
74796: LD_INT 0
74798: LESS
74799: IFFALSE 74816
// _y := _y * - 1 ;
74801: LD_ADDR_VAR 0 7
74805: PUSH
74806: LD_VAR 0 7
74810: PUSH
74811: LD_INT 1
74813: NEG
74814: MUL
74815: ST_TO_ADDR
// result := [ _x , _y ] ;
74816: LD_ADDR_VAR 0 5
74820: PUSH
74821: LD_VAR 0 6
74825: PUSH
74826: LD_VAR 0 7
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: ST_TO_ADDR
// end ;
74835: LD_VAR 0 5
74839: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74840: LD_INT 0
74842: PPUSH
74843: PPUSH
74844: PPUSH
74845: PPUSH
// task := GetTaskList ( unit ) ;
74846: LD_ADDR_VAR 0 7
74850: PUSH
74851: LD_VAR 0 1
74855: PPUSH
74856: CALL_OW 437
74860: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74861: LD_VAR 0 7
74865: NOT
74866: PUSH
74867: LD_VAR 0 1
74871: PPUSH
74872: LD_VAR 0 2
74876: PPUSH
74877: CALL_OW 308
74881: NOT
74882: AND
74883: IFFALSE 74887
// exit ;
74885: GO 75005
// if IsInArea ( unit , area ) then
74887: LD_VAR 0 1
74891: PPUSH
74892: LD_VAR 0 2
74896: PPUSH
74897: CALL_OW 308
74901: IFFALSE 74919
// begin ComMoveToArea ( unit , goAway ) ;
74903: LD_VAR 0 1
74907: PPUSH
74908: LD_VAR 0 3
74912: PPUSH
74913: CALL_OW 113
// exit ;
74917: GO 75005
// end ; if task [ 1 ] [ 1 ] <> M then
74919: LD_VAR 0 7
74923: PUSH
74924: LD_INT 1
74926: ARRAY
74927: PUSH
74928: LD_INT 1
74930: ARRAY
74931: PUSH
74932: LD_STRING M
74934: NONEQUAL
74935: IFFALSE 74939
// exit ;
74937: GO 75005
// x := task [ 1 ] [ 2 ] ;
74939: LD_ADDR_VAR 0 5
74943: PUSH
74944: LD_VAR 0 7
74948: PUSH
74949: LD_INT 1
74951: ARRAY
74952: PUSH
74953: LD_INT 2
74955: ARRAY
74956: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74957: LD_ADDR_VAR 0 6
74961: PUSH
74962: LD_VAR 0 7
74966: PUSH
74967: LD_INT 1
74969: ARRAY
74970: PUSH
74971: LD_INT 3
74973: ARRAY
74974: ST_TO_ADDR
// if InArea ( x , y , area ) then
74975: LD_VAR 0 5
74979: PPUSH
74980: LD_VAR 0 6
74984: PPUSH
74985: LD_VAR 0 2
74989: PPUSH
74990: CALL_OW 309
74994: IFFALSE 75005
// ComStop ( unit ) ;
74996: LD_VAR 0 1
75000: PPUSH
75001: CALL_OW 141
// end ;
75005: LD_VAR 0 4
75009: RET
// export function Abs ( value ) ; begin
75010: LD_INT 0
75012: PPUSH
// result := value ;
75013: LD_ADDR_VAR 0 2
75017: PUSH
75018: LD_VAR 0 1
75022: ST_TO_ADDR
// if value < 0 then
75023: LD_VAR 0 1
75027: PUSH
75028: LD_INT 0
75030: LESS
75031: IFFALSE 75048
// result := value * - 1 ;
75033: LD_ADDR_VAR 0 2
75037: PUSH
75038: LD_VAR 0 1
75042: PUSH
75043: LD_INT 1
75045: NEG
75046: MUL
75047: ST_TO_ADDR
// end ;
75048: LD_VAR 0 2
75052: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75053: LD_INT 0
75055: PPUSH
75056: PPUSH
75057: PPUSH
75058: PPUSH
75059: PPUSH
75060: PPUSH
75061: PPUSH
75062: PPUSH
// if not unit or not building then
75063: LD_VAR 0 1
75067: NOT
75068: PUSH
75069: LD_VAR 0 2
75073: NOT
75074: OR
75075: IFFALSE 75079
// exit ;
75077: GO 75305
// x := GetX ( building ) ;
75079: LD_ADDR_VAR 0 4
75083: PUSH
75084: LD_VAR 0 2
75088: PPUSH
75089: CALL_OW 250
75093: ST_TO_ADDR
// y := GetY ( building ) ;
75094: LD_ADDR_VAR 0 6
75098: PUSH
75099: LD_VAR 0 2
75103: PPUSH
75104: CALL_OW 251
75108: ST_TO_ADDR
// d := GetDir ( building ) ;
75109: LD_ADDR_VAR 0 8
75113: PUSH
75114: LD_VAR 0 2
75118: PPUSH
75119: CALL_OW 254
75123: ST_TO_ADDR
// r := 4 ;
75124: LD_ADDR_VAR 0 9
75128: PUSH
75129: LD_INT 4
75131: ST_TO_ADDR
// for i := 1 to 5 do
75132: LD_ADDR_VAR 0 10
75136: PUSH
75137: DOUBLE
75138: LD_INT 1
75140: DEC
75141: ST_TO_ADDR
75142: LD_INT 5
75144: PUSH
75145: FOR_TO
75146: IFFALSE 75303
// begin _x := ShiftX ( x , d , r + i ) ;
75148: LD_ADDR_VAR 0 5
75152: PUSH
75153: LD_VAR 0 4
75157: PPUSH
75158: LD_VAR 0 8
75162: PPUSH
75163: LD_VAR 0 9
75167: PUSH
75168: LD_VAR 0 10
75172: PLUS
75173: PPUSH
75174: CALL_OW 272
75178: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75179: LD_ADDR_VAR 0 7
75183: PUSH
75184: LD_VAR 0 6
75188: PPUSH
75189: LD_VAR 0 8
75193: PPUSH
75194: LD_VAR 0 9
75198: PUSH
75199: LD_VAR 0 10
75203: PLUS
75204: PPUSH
75205: CALL_OW 273
75209: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75210: LD_VAR 0 5
75214: PPUSH
75215: LD_VAR 0 7
75219: PPUSH
75220: CALL_OW 488
75224: PUSH
75225: LD_VAR 0 5
75229: PPUSH
75230: LD_VAR 0 7
75234: PPUSH
75235: CALL_OW 428
75239: PPUSH
75240: CALL_OW 247
75244: PUSH
75245: LD_INT 3
75247: PUSH
75248: LD_INT 2
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: IN
75255: NOT
75256: AND
75257: IFFALSE 75301
// begin ComMoveXY ( unit , _x , _y ) ;
75259: LD_VAR 0 1
75263: PPUSH
75264: LD_VAR 0 5
75268: PPUSH
75269: LD_VAR 0 7
75273: PPUSH
75274: CALL_OW 111
// result := [ _x , _y ] ;
75278: LD_ADDR_VAR 0 3
75282: PUSH
75283: LD_VAR 0 5
75287: PUSH
75288: LD_VAR 0 7
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: ST_TO_ADDR
// exit ;
75297: POP
75298: POP
75299: GO 75305
// end ; end ;
75301: GO 75145
75303: POP
75304: POP
// end ;
75305: LD_VAR 0 3
75309: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75310: LD_INT 0
75312: PPUSH
75313: PPUSH
75314: PPUSH
// result := 0 ;
75315: LD_ADDR_VAR 0 3
75319: PUSH
75320: LD_INT 0
75322: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75323: LD_VAR 0 1
75327: PUSH
75328: LD_INT 0
75330: LESS
75331: PUSH
75332: LD_VAR 0 1
75336: PUSH
75337: LD_INT 8
75339: GREATER
75340: OR
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 0
75349: LESS
75350: OR
75351: PUSH
75352: LD_VAR 0 2
75356: PUSH
75357: LD_INT 8
75359: GREATER
75360: OR
75361: IFFALSE 75365
// exit ;
75363: GO 75440
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75365: LD_ADDR_VAR 0 4
75369: PUSH
75370: LD_INT 22
75372: PUSH
75373: LD_VAR 0 2
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PPUSH
75382: CALL_OW 69
75386: PUSH
75387: FOR_IN
75388: IFFALSE 75438
// begin un := UnitShoot ( i ) ;
75390: LD_ADDR_VAR 0 5
75394: PUSH
75395: LD_VAR 0 4
75399: PPUSH
75400: CALL_OW 504
75404: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75405: LD_VAR 0 5
75409: PPUSH
75410: CALL_OW 255
75414: PUSH
75415: LD_VAR 0 1
75419: EQUAL
75420: IFFALSE 75436
// begin result := un ;
75422: LD_ADDR_VAR 0 3
75426: PUSH
75427: LD_VAR 0 5
75431: ST_TO_ADDR
// exit ;
75432: POP
75433: POP
75434: GO 75440
// end ; end ;
75436: GO 75387
75438: POP
75439: POP
// end ;
75440: LD_VAR 0 3
75444: RET
// export function GetCargoBay ( units ) ; begin
75445: LD_INT 0
75447: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75448: LD_ADDR_VAR 0 2
75452: PUSH
75453: LD_VAR 0 1
75457: PPUSH
75458: LD_INT 2
75460: PUSH
75461: LD_INT 34
75463: PUSH
75464: LD_INT 12
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 34
75473: PUSH
75474: LD_INT 51
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: LD_INT 34
75483: PUSH
75484: LD_INT 32
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: PUSH
75491: LD_INT 34
75493: PUSH
75494: LD_EXP 60
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: PPUSH
75510: CALL_OW 72
75514: ST_TO_ADDR
// end ;
75515: LD_VAR 0 2
75519: RET
// export function Negate ( value ) ; begin
75520: LD_INT 0
75522: PPUSH
// result := not value ;
75523: LD_ADDR_VAR 0 2
75527: PUSH
75528: LD_VAR 0 1
75532: NOT
75533: ST_TO_ADDR
// end ;
75534: LD_VAR 0 2
75538: RET
// export function Inc ( value ) ; begin
75539: LD_INT 0
75541: PPUSH
// result := value + 1 ;
75542: LD_ADDR_VAR 0 2
75546: PUSH
75547: LD_VAR 0 1
75551: PUSH
75552: LD_INT 1
75554: PLUS
75555: ST_TO_ADDR
// end ;
75556: LD_VAR 0 2
75560: RET
// export function Dec ( value ) ; begin
75561: LD_INT 0
75563: PPUSH
// result := value - 1 ;
75564: LD_ADDR_VAR 0 2
75568: PUSH
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 1
75576: MINUS
75577: ST_TO_ADDR
// end ;
75578: LD_VAR 0 2
75582: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75583: LD_INT 0
75585: PPUSH
75586: PPUSH
75587: PPUSH
75588: PPUSH
75589: PPUSH
75590: PPUSH
75591: PPUSH
75592: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75593: LD_VAR 0 1
75597: PPUSH
75598: LD_VAR 0 2
75602: PPUSH
75603: CALL_OW 488
75607: NOT
75608: PUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: LD_VAR 0 4
75618: PPUSH
75619: CALL_OW 488
75623: NOT
75624: OR
75625: IFFALSE 75638
// begin result := - 1 ;
75627: LD_ADDR_VAR 0 5
75631: PUSH
75632: LD_INT 1
75634: NEG
75635: ST_TO_ADDR
// exit ;
75636: GO 75873
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75638: LD_ADDR_VAR 0 12
75642: PUSH
75643: LD_VAR 0 1
75647: PPUSH
75648: LD_VAR 0 2
75652: PPUSH
75653: LD_VAR 0 3
75657: PPUSH
75658: LD_VAR 0 4
75662: PPUSH
75663: CALL 74721 0 4
75667: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75668: LD_ADDR_VAR 0 11
75672: PUSH
75673: LD_VAR 0 1
75677: PPUSH
75678: LD_VAR 0 2
75682: PPUSH
75683: LD_VAR 0 12
75687: PUSH
75688: LD_INT 1
75690: ARRAY
75691: PPUSH
75692: LD_VAR 0 12
75696: PUSH
75697: LD_INT 2
75699: ARRAY
75700: PPUSH
75701: CALL_OW 298
75705: ST_TO_ADDR
// distance := 9999 ;
75706: LD_ADDR_VAR 0 10
75710: PUSH
75711: LD_INT 9999
75713: ST_TO_ADDR
// for i := 0 to 5 do
75714: LD_ADDR_VAR 0 6
75718: PUSH
75719: DOUBLE
75720: LD_INT 0
75722: DEC
75723: ST_TO_ADDR
75724: LD_INT 5
75726: PUSH
75727: FOR_TO
75728: IFFALSE 75871
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75730: LD_ADDR_VAR 0 7
75734: PUSH
75735: LD_VAR 0 1
75739: PPUSH
75740: LD_VAR 0 6
75744: PPUSH
75745: LD_VAR 0 11
75749: PPUSH
75750: CALL_OW 272
75754: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75755: LD_ADDR_VAR 0 8
75759: PUSH
75760: LD_VAR 0 2
75764: PPUSH
75765: LD_VAR 0 6
75769: PPUSH
75770: LD_VAR 0 11
75774: PPUSH
75775: CALL_OW 273
75779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75780: LD_VAR 0 7
75784: PPUSH
75785: LD_VAR 0 8
75789: PPUSH
75790: CALL_OW 488
75794: NOT
75795: IFFALSE 75799
// continue ;
75797: GO 75727
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75799: LD_ADDR_VAR 0 9
75803: PUSH
75804: LD_VAR 0 12
75808: PUSH
75809: LD_INT 1
75811: ARRAY
75812: PPUSH
75813: LD_VAR 0 12
75817: PUSH
75818: LD_INT 2
75820: ARRAY
75821: PPUSH
75822: LD_VAR 0 7
75826: PPUSH
75827: LD_VAR 0 8
75831: PPUSH
75832: CALL_OW 298
75836: ST_TO_ADDR
// if tmp < distance then
75837: LD_VAR 0 9
75841: PUSH
75842: LD_VAR 0 10
75846: LESS
75847: IFFALSE 75869
// begin result := i ;
75849: LD_ADDR_VAR 0 5
75853: PUSH
75854: LD_VAR 0 6
75858: ST_TO_ADDR
// distance := tmp ;
75859: LD_ADDR_VAR 0 10
75863: PUSH
75864: LD_VAR 0 9
75868: ST_TO_ADDR
// end ; end ;
75869: GO 75727
75871: POP
75872: POP
// end ;
75873: LD_VAR 0 5
75877: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75878: LD_INT 0
75880: PPUSH
75881: PPUSH
// if not driver or not IsInUnit ( driver ) then
75882: LD_VAR 0 1
75886: NOT
75887: PUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: CALL_OW 310
75897: NOT
75898: OR
75899: IFFALSE 75903
// exit ;
75901: GO 75993
// vehicle := IsInUnit ( driver ) ;
75903: LD_ADDR_VAR 0 3
75907: PUSH
75908: LD_VAR 0 1
75912: PPUSH
75913: CALL_OW 310
75917: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75918: LD_VAR 0 1
75922: PPUSH
75923: LD_STRING \
75925: PUSH
75926: LD_INT 0
75928: PUSH
75929: LD_INT 0
75931: PUSH
75932: LD_INT 0
75934: PUSH
75935: LD_INT 0
75937: PUSH
75938: LD_INT 0
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: PUSH
75953: LD_STRING E
75955: PUSH
75956: LD_INT 0
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_VAR 0 3
75966: PUSH
75967: LD_INT 0
75969: PUSH
75970: LD_INT 0
75972: PUSH
75973: LD_INT 0
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PPUSH
75989: CALL_OW 446
// end ;
75993: LD_VAR 0 2
75997: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75998: LD_INT 0
76000: PPUSH
76001: PPUSH
// if not driver or not IsInUnit ( driver ) then
76002: LD_VAR 0 1
76006: NOT
76007: PUSH
76008: LD_VAR 0 1
76012: PPUSH
76013: CALL_OW 310
76017: NOT
76018: OR
76019: IFFALSE 76023
// exit ;
76021: GO 76113
// vehicle := IsInUnit ( driver ) ;
76023: LD_ADDR_VAR 0 3
76027: PUSH
76028: LD_VAR 0 1
76032: PPUSH
76033: CALL_OW 310
76037: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76038: LD_VAR 0 1
76042: PPUSH
76043: LD_STRING \
76045: PUSH
76046: LD_INT 0
76048: PUSH
76049: LD_INT 0
76051: PUSH
76052: LD_INT 0
76054: PUSH
76055: LD_INT 0
76057: PUSH
76058: LD_INT 0
76060: PUSH
76061: LD_INT 0
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: PUSH
76073: LD_STRING E
76075: PUSH
76076: LD_INT 0
76078: PUSH
76079: LD_INT 0
76081: PUSH
76082: LD_VAR 0 3
76086: PUSH
76087: LD_INT 0
76089: PUSH
76090: LD_INT 0
76092: PUSH
76093: LD_INT 0
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PPUSH
76109: CALL_OW 447
// end ;
76113: LD_VAR 0 2
76117: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76118: LD_INT 0
76120: PPUSH
76121: PPUSH
76122: PPUSH
// tmp := [ ] ;
76123: LD_ADDR_VAR 0 5
76127: PUSH
76128: EMPTY
76129: ST_TO_ADDR
// for i in units do
76130: LD_ADDR_VAR 0 4
76134: PUSH
76135: LD_VAR 0 1
76139: PUSH
76140: FOR_IN
76141: IFFALSE 76179
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76143: LD_ADDR_VAR 0 5
76147: PUSH
76148: LD_VAR 0 5
76152: PPUSH
76153: LD_VAR 0 5
76157: PUSH
76158: LD_INT 1
76160: PLUS
76161: PPUSH
76162: LD_VAR 0 4
76166: PPUSH
76167: CALL_OW 256
76171: PPUSH
76172: CALL_OW 2
76176: ST_TO_ADDR
76177: GO 76140
76179: POP
76180: POP
// if not tmp then
76181: LD_VAR 0 5
76185: NOT
76186: IFFALSE 76190
// exit ;
76188: GO 76238
// if asc then
76190: LD_VAR 0 2
76194: IFFALSE 76218
// result := SortListByListAsc ( units , tmp ) else
76196: LD_ADDR_VAR 0 3
76200: PUSH
76201: LD_VAR 0 1
76205: PPUSH
76206: LD_VAR 0 5
76210: PPUSH
76211: CALL_OW 76
76215: ST_TO_ADDR
76216: GO 76238
// result := SortListByListDesc ( units , tmp ) ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_VAR 0 1
76227: PPUSH
76228: LD_VAR 0 5
76232: PPUSH
76233: CALL_OW 77
76237: ST_TO_ADDR
// end ;
76238: LD_VAR 0 3
76242: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76243: LD_INT 0
76245: PPUSH
76246: PPUSH
// task := GetTaskList ( mech ) ;
76247: LD_ADDR_VAR 0 4
76251: PUSH
76252: LD_VAR 0 1
76256: PPUSH
76257: CALL_OW 437
76261: ST_TO_ADDR
// if not task then
76262: LD_VAR 0 4
76266: NOT
76267: IFFALSE 76271
// exit ;
76269: GO 76313
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76271: LD_ADDR_VAR 0 3
76275: PUSH
76276: LD_VAR 0 4
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: PUSH
76289: LD_STRING r
76291: EQUAL
76292: PUSH
76293: LD_VAR 0 4
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: PUSH
76302: LD_INT 4
76304: ARRAY
76305: PUSH
76306: LD_VAR 0 2
76310: EQUAL
76311: AND
76312: ST_TO_ADDR
// end ;
76313: LD_VAR 0 3
76317: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76318: LD_INT 0
76320: PPUSH
// SetDir ( unit , d ) ;
76321: LD_VAR 0 1
76325: PPUSH
76326: LD_VAR 0 4
76330: PPUSH
76331: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76335: LD_VAR 0 1
76339: PPUSH
76340: LD_VAR 0 2
76344: PPUSH
76345: LD_VAR 0 3
76349: PPUSH
76350: LD_VAR 0 5
76354: PPUSH
76355: CALL_OW 48
// end ;
76359: LD_VAR 0 6
76363: RET
// export function ToNaturalNumber ( number ) ; begin
76364: LD_INT 0
76366: PPUSH
// result := number div 1 ;
76367: LD_ADDR_VAR 0 2
76371: PUSH
76372: LD_VAR 0 1
76376: PUSH
76377: LD_INT 1
76379: DIV
76380: ST_TO_ADDR
// if number < 0 then
76381: LD_VAR 0 1
76385: PUSH
76386: LD_INT 0
76388: LESS
76389: IFFALSE 76399
// result := 0 ;
76391: LD_ADDR_VAR 0 2
76395: PUSH
76396: LD_INT 0
76398: ST_TO_ADDR
// end ;
76399: LD_VAR 0 2
76403: RET
// export function SortByClass ( units , class ) ; var un ; begin
76404: LD_INT 0
76406: PPUSH
76407: PPUSH
// if not units or not class then
76408: LD_VAR 0 1
76412: NOT
76413: PUSH
76414: LD_VAR 0 2
76418: NOT
76419: OR
76420: IFFALSE 76424
// exit ;
76422: GO 76519
// result := [ ] ;
76424: LD_ADDR_VAR 0 3
76428: PUSH
76429: EMPTY
76430: ST_TO_ADDR
// for un in units do
76431: LD_ADDR_VAR 0 4
76435: PUSH
76436: LD_VAR 0 1
76440: PUSH
76441: FOR_IN
76442: IFFALSE 76517
// if GetClass ( un ) = class then
76444: LD_VAR 0 4
76448: PPUSH
76449: CALL_OW 257
76453: PUSH
76454: LD_VAR 0 2
76458: EQUAL
76459: IFFALSE 76486
// result := Insert ( result , 1 , un ) else
76461: LD_ADDR_VAR 0 3
76465: PUSH
76466: LD_VAR 0 3
76470: PPUSH
76471: LD_INT 1
76473: PPUSH
76474: LD_VAR 0 4
76478: PPUSH
76479: CALL_OW 2
76483: ST_TO_ADDR
76484: GO 76515
// result := Replace ( result , result + 1 , un ) ;
76486: LD_ADDR_VAR 0 3
76490: PUSH
76491: LD_VAR 0 3
76495: PPUSH
76496: LD_VAR 0 3
76500: PUSH
76501: LD_INT 1
76503: PLUS
76504: PPUSH
76505: LD_VAR 0 4
76509: PPUSH
76510: CALL_OW 1
76514: ST_TO_ADDR
76515: GO 76441
76517: POP
76518: POP
// end ;
76519: LD_VAR 0 3
76523: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76524: LD_INT 0
76526: PPUSH
76527: PPUSH
76528: PPUSH
76529: PPUSH
76530: PPUSH
76531: PPUSH
76532: PPUSH
// result := [ ] ;
76533: LD_ADDR_VAR 0 4
76537: PUSH
76538: EMPTY
76539: ST_TO_ADDR
// if x - r < 0 then
76540: LD_VAR 0 1
76544: PUSH
76545: LD_VAR 0 3
76549: MINUS
76550: PUSH
76551: LD_INT 0
76553: LESS
76554: IFFALSE 76566
// min_x := 0 else
76556: LD_ADDR_VAR 0 8
76560: PUSH
76561: LD_INT 0
76563: ST_TO_ADDR
76564: GO 76582
// min_x := x - r ;
76566: LD_ADDR_VAR 0 8
76570: PUSH
76571: LD_VAR 0 1
76575: PUSH
76576: LD_VAR 0 3
76580: MINUS
76581: ST_TO_ADDR
// if y - r < 0 then
76582: LD_VAR 0 2
76586: PUSH
76587: LD_VAR 0 3
76591: MINUS
76592: PUSH
76593: LD_INT 0
76595: LESS
76596: IFFALSE 76608
// min_y := 0 else
76598: LD_ADDR_VAR 0 7
76602: PUSH
76603: LD_INT 0
76605: ST_TO_ADDR
76606: GO 76624
// min_y := y - r ;
76608: LD_ADDR_VAR 0 7
76612: PUSH
76613: LD_VAR 0 2
76617: PUSH
76618: LD_VAR 0 3
76622: MINUS
76623: ST_TO_ADDR
// max_x := x + r ;
76624: LD_ADDR_VAR 0 9
76628: PUSH
76629: LD_VAR 0 1
76633: PUSH
76634: LD_VAR 0 3
76638: PLUS
76639: ST_TO_ADDR
// max_y := y + r ;
76640: LD_ADDR_VAR 0 10
76644: PUSH
76645: LD_VAR 0 2
76649: PUSH
76650: LD_VAR 0 3
76654: PLUS
76655: ST_TO_ADDR
// for _x = min_x to max_x do
76656: LD_ADDR_VAR 0 5
76660: PUSH
76661: DOUBLE
76662: LD_VAR 0 8
76666: DEC
76667: ST_TO_ADDR
76668: LD_VAR 0 9
76672: PUSH
76673: FOR_TO
76674: IFFALSE 76775
// for _y = min_y to max_y do
76676: LD_ADDR_VAR 0 6
76680: PUSH
76681: DOUBLE
76682: LD_VAR 0 7
76686: DEC
76687: ST_TO_ADDR
76688: LD_VAR 0 10
76692: PUSH
76693: FOR_TO
76694: IFFALSE 76771
// begin if not ValidHex ( _x , _y ) then
76696: LD_VAR 0 5
76700: PPUSH
76701: LD_VAR 0 6
76705: PPUSH
76706: CALL_OW 488
76710: NOT
76711: IFFALSE 76715
// continue ;
76713: GO 76693
// if GetResourceTypeXY ( _x , _y ) then
76715: LD_VAR 0 5
76719: PPUSH
76720: LD_VAR 0 6
76724: PPUSH
76725: CALL_OW 283
76729: IFFALSE 76769
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76731: LD_ADDR_VAR 0 4
76735: PUSH
76736: LD_VAR 0 4
76740: PPUSH
76741: LD_VAR 0 4
76745: PUSH
76746: LD_INT 1
76748: PLUS
76749: PPUSH
76750: LD_VAR 0 5
76754: PUSH
76755: LD_VAR 0 6
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PPUSH
76764: CALL_OW 1
76768: ST_TO_ADDR
// end ;
76769: GO 76693
76771: POP
76772: POP
76773: GO 76673
76775: POP
76776: POP
// end ;
76777: LD_VAR 0 4
76781: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76782: LD_INT 0
76784: PPUSH
76785: PPUSH
76786: PPUSH
76787: PPUSH
76788: PPUSH
76789: PPUSH
76790: PPUSH
76791: PPUSH
// if not units then
76792: LD_VAR 0 1
76796: NOT
76797: IFFALSE 76801
// exit ;
76799: GO 77226
// result := UnitFilter ( units , [ f_ok ] ) ;
76801: LD_ADDR_VAR 0 3
76805: PUSH
76806: LD_VAR 0 1
76810: PPUSH
76811: LD_INT 50
76813: PUSH
76814: EMPTY
76815: LIST
76816: PPUSH
76817: CALL_OW 72
76821: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76822: LD_ADDR_VAR 0 8
76826: PUSH
76827: LD_VAR 0 1
76831: PUSH
76832: LD_INT 1
76834: ARRAY
76835: PPUSH
76836: CALL_OW 255
76840: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
76841: LD_ADDR_VAR 0 10
76845: PUSH
76846: LD_INT 29
76848: PUSH
76849: LD_EXP 63
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: ST_TO_ADDR
// if not result then
76858: LD_VAR 0 3
76862: NOT
76863: IFFALSE 76867
// exit ;
76865: GO 77226
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76867: LD_ADDR_VAR 0 5
76871: PUSH
76872: LD_INT 81
76874: PUSH
76875: LD_VAR 0 8
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PPUSH
76884: CALL_OW 69
76888: ST_TO_ADDR
// for i in result do
76889: LD_ADDR_VAR 0 4
76893: PUSH
76894: LD_VAR 0 3
76898: PUSH
76899: FOR_IN
76900: IFFALSE 77224
// begin tag := GetTag ( i ) + 1 ;
76902: LD_ADDR_VAR 0 9
76906: PUSH
76907: LD_VAR 0 4
76911: PPUSH
76912: CALL_OW 110
76916: PUSH
76917: LD_INT 1
76919: PLUS
76920: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76921: LD_ADDR_VAR 0 7
76925: PUSH
76926: LD_VAR 0 4
76930: PPUSH
76931: CALL_OW 250
76935: PPUSH
76936: LD_VAR 0 4
76940: PPUSH
76941: CALL_OW 251
76945: PPUSH
76946: LD_INT 6
76948: PPUSH
76949: CALL 76524 0 3
76953: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76954: LD_VAR 0 7
76958: PUSH
76959: LD_VAR 0 4
76963: PPUSH
76964: CALL_OW 264
76968: PUSH
76969: LD_VAR 0 10
76973: IN
76974: NOT
76975: AND
76976: IFFALSE 77015
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76978: LD_VAR 0 4
76982: PPUSH
76983: LD_VAR 0 7
76987: PUSH
76988: LD_INT 1
76990: ARRAY
76991: PUSH
76992: LD_INT 1
76994: ARRAY
76995: PPUSH
76996: LD_VAR 0 7
77000: PUSH
77001: LD_INT 1
77003: ARRAY
77004: PUSH
77005: LD_INT 2
77007: ARRAY
77008: PPUSH
77009: CALL_OW 116
77013: GO 77222
// if path > tag then
77015: LD_VAR 0 2
77019: PUSH
77020: LD_VAR 0 9
77024: GREATER
77025: IFFALSE 77192
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77027: LD_ADDR_VAR 0 6
77031: PUSH
77032: LD_VAR 0 5
77036: PPUSH
77037: LD_INT 91
77039: PUSH
77040: LD_VAR 0 4
77044: PUSH
77045: LD_INT 12
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: LIST
77052: PPUSH
77053: CALL_OW 72
77057: ST_TO_ADDR
// if nearEnemy then
77058: LD_VAR 0 6
77062: IFFALSE 77090
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_VAR 0 6
77073: PPUSH
77074: LD_VAR 0 4
77078: PPUSH
77079: CALL_OW 74
77083: PPUSH
77084: CALL_OW 115
77088: GO 77190
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77090: LD_VAR 0 4
77094: PPUSH
77095: LD_VAR 0 2
77099: PUSH
77100: LD_VAR 0 9
77104: ARRAY
77105: PUSH
77106: LD_INT 1
77108: ARRAY
77109: PPUSH
77110: LD_VAR 0 2
77114: PUSH
77115: LD_VAR 0 9
77119: ARRAY
77120: PUSH
77121: LD_INT 2
77123: ARRAY
77124: PPUSH
77125: CALL_OW 297
77129: PUSH
77130: LD_INT 6
77132: GREATER
77133: IFFALSE 77176
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77135: LD_VAR 0 4
77139: PPUSH
77140: LD_VAR 0 2
77144: PUSH
77145: LD_VAR 0 9
77149: ARRAY
77150: PUSH
77151: LD_INT 1
77153: ARRAY
77154: PPUSH
77155: LD_VAR 0 2
77159: PUSH
77160: LD_VAR 0 9
77164: ARRAY
77165: PUSH
77166: LD_INT 2
77168: ARRAY
77169: PPUSH
77170: CALL_OW 114
77174: GO 77190
// SetTag ( i , tag ) ;
77176: LD_VAR 0 4
77180: PPUSH
77181: LD_VAR 0 9
77185: PPUSH
77186: CALL_OW 109
// end else
77190: GO 77222
// if enemy then
77192: LD_VAR 0 5
77196: IFFALSE 77222
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77198: LD_VAR 0 4
77202: PPUSH
77203: LD_VAR 0 5
77207: PPUSH
77208: LD_VAR 0 4
77212: PPUSH
77213: CALL_OW 74
77217: PPUSH
77218: CALL_OW 115
// end ;
77222: GO 76899
77224: POP
77225: POP
// end ;
77226: LD_VAR 0 3
77230: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77231: LD_INT 0
77233: PPUSH
77234: PPUSH
77235: PPUSH
// if not unit or IsInUnit ( unit ) then
77236: LD_VAR 0 1
77240: NOT
77241: PUSH
77242: LD_VAR 0 1
77246: PPUSH
77247: CALL_OW 310
77251: OR
77252: IFFALSE 77256
// exit ;
77254: GO 77347
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77256: LD_ADDR_VAR 0 4
77260: PUSH
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL_OW 250
77270: PPUSH
77271: LD_VAR 0 2
77275: PPUSH
77276: LD_INT 1
77278: PPUSH
77279: CALL_OW 272
77283: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77284: LD_ADDR_VAR 0 5
77288: PUSH
77289: LD_VAR 0 1
77293: PPUSH
77294: CALL_OW 251
77298: PPUSH
77299: LD_VAR 0 2
77303: PPUSH
77304: LD_INT 1
77306: PPUSH
77307: CALL_OW 273
77311: ST_TO_ADDR
// if ValidHex ( x , y ) then
77312: LD_VAR 0 4
77316: PPUSH
77317: LD_VAR 0 5
77321: PPUSH
77322: CALL_OW 488
77326: IFFALSE 77347
// ComTurnXY ( unit , x , y ) ;
77328: LD_VAR 0 1
77332: PPUSH
77333: LD_VAR 0 4
77337: PPUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: CALL_OW 118
// end ;
77347: LD_VAR 0 3
77351: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77352: LD_INT 0
77354: PPUSH
77355: PPUSH
// result := false ;
77356: LD_ADDR_VAR 0 3
77360: PUSH
77361: LD_INT 0
77363: ST_TO_ADDR
// if not units then
77364: LD_VAR 0 2
77368: NOT
77369: IFFALSE 77373
// exit ;
77371: GO 77418
// for i in units do
77373: LD_ADDR_VAR 0 4
77377: PUSH
77378: LD_VAR 0 2
77382: PUSH
77383: FOR_IN
77384: IFFALSE 77416
// if See ( side , i ) then
77386: LD_VAR 0 1
77390: PPUSH
77391: LD_VAR 0 4
77395: PPUSH
77396: CALL_OW 292
77400: IFFALSE 77414
// begin result := true ;
77402: LD_ADDR_VAR 0 3
77406: PUSH
77407: LD_INT 1
77409: ST_TO_ADDR
// exit ;
77410: POP
77411: POP
77412: GO 77418
// end ;
77414: GO 77383
77416: POP
77417: POP
// end ;
77418: LD_VAR 0 3
77422: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77423: LD_INT 0
77425: PPUSH
77426: PPUSH
77427: PPUSH
77428: PPUSH
// if not unit or not points then
77429: LD_VAR 0 1
77433: NOT
77434: PUSH
77435: LD_VAR 0 2
77439: NOT
77440: OR
77441: IFFALSE 77445
// exit ;
77443: GO 77535
// dist := 99999 ;
77445: LD_ADDR_VAR 0 5
77449: PUSH
77450: LD_INT 99999
77452: ST_TO_ADDR
// for i in points do
77453: LD_ADDR_VAR 0 4
77457: PUSH
77458: LD_VAR 0 2
77462: PUSH
77463: FOR_IN
77464: IFFALSE 77533
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77466: LD_ADDR_VAR 0 6
77470: PUSH
77471: LD_VAR 0 1
77475: PPUSH
77476: LD_VAR 0 4
77480: PUSH
77481: LD_INT 1
77483: ARRAY
77484: PPUSH
77485: LD_VAR 0 4
77489: PUSH
77490: LD_INT 2
77492: ARRAY
77493: PPUSH
77494: CALL_OW 297
77498: ST_TO_ADDR
// if tmpDist < dist then
77499: LD_VAR 0 6
77503: PUSH
77504: LD_VAR 0 5
77508: LESS
77509: IFFALSE 77531
// begin result := i ;
77511: LD_ADDR_VAR 0 3
77515: PUSH
77516: LD_VAR 0 4
77520: ST_TO_ADDR
// dist := tmpDist ;
77521: LD_ADDR_VAR 0 5
77525: PUSH
77526: LD_VAR 0 6
77530: ST_TO_ADDR
// end ; end ;
77531: GO 77463
77533: POP
77534: POP
// end ; end_of_file
77535: LD_VAR 0 3
77539: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77540: LD_VAR 0 1
77544: PUSH
77545: LD_INT 200
77547: DOUBLE
77548: GREATEREQUAL
77549: IFFALSE 77557
77551: LD_INT 299
77553: DOUBLE
77554: LESSEQUAL
77555: IFTRUE 77559
77557: GO 77591
77559: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77560: LD_VAR 0 1
77564: PPUSH
77565: LD_VAR 0 2
77569: PPUSH
77570: LD_VAR 0 3
77574: PPUSH
77575: LD_VAR 0 4
77579: PPUSH
77580: LD_VAR 0 5
77584: PPUSH
77585: CALL 33187 0 5
77589: GO 77668
77591: LD_INT 300
77593: DOUBLE
77594: GREATEREQUAL
77595: IFFALSE 77603
77597: LD_INT 399
77599: DOUBLE
77600: LESSEQUAL
77601: IFTRUE 77605
77603: GO 77667
77605: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_VAR 0 2
77615: PPUSH
77616: LD_VAR 0 3
77620: PPUSH
77621: LD_VAR 0 4
77625: PPUSH
77626: LD_VAR 0 5
77630: PPUSH
77631: LD_VAR 0 6
77635: PPUSH
77636: LD_VAR 0 7
77640: PPUSH
77641: LD_VAR 0 8
77645: PPUSH
77646: LD_VAR 0 9
77650: PPUSH
77651: LD_VAR 0 10
77655: PPUSH
77656: LD_VAR 0 11
77660: PPUSH
77661: CALL 30829 0 11
77665: GO 77668
77667: POP
// end ;
77668: PPOPN 11
77670: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77671: LD_VAR 0 1
77675: PPUSH
77676: LD_VAR 0 2
77680: PPUSH
77681: LD_VAR 0 3
77685: PPUSH
77686: LD_VAR 0 4
77690: PPUSH
77691: LD_VAR 0 5
77695: PPUSH
77696: CALL 32923 0 5
// end ; end_of_file
77700: PPOPN 5
77702: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77703: LD_VAR 0 1
77707: PPUSH
77708: LD_VAR 0 2
77712: PPUSH
77713: LD_VAR 0 3
77717: PPUSH
77718: LD_VAR 0 4
77722: PPUSH
77723: LD_VAR 0 5
77727: PPUSH
77728: LD_VAR 0 6
77732: PPUSH
77733: CALL 18522 0 6
// end ;
77737: PPOPN 6
77739: END
