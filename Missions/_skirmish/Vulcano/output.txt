// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1102 0 0
// PrepareRussian ;
  23: CALL 3784 0 0
// PrepareLegion ;
  27: CALL 8065 0 0
// Action ;
  31: CALL 11573 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 16956 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// us_commander := CreateHuman ;
 443: LD_ADDR_EXP 24
 447: PUSH
 448: CALL_OW 44
 452: ST_TO_ADDR
// player_commander := us_commander ;
 453: LD_ADDR_EXP 11
 457: PUSH
 458: LD_EXP 24
 462: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_STRING text
 470: PPUSH
 471: LD_INT 7
 473: PUSH
 474: LD_INT 6
 476: PUSH
 477: LD_INT 5
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_OWVAR 67
 489: ARRAY
 490: PPUSH
 491: LD_INT 7
 493: PUSH
 494: LD_INT 6
 496: PUSH
 497: LD_INT 5
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: PPUSH
 511: LD_INT -5
 513: PUSH
 514: LD_EXP 24
 518: PUSH
 519: LD_INT -3
 521: PUSH
 522: LD_INT -2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_EXP 25
 535: ADD
 536: PPUSH
 537: LD_INT 1
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 4
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 5
 575: PUSH
 576: LD_INT 1
 578: NEG
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_OWVAR 67
 589: ARRAY
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 42
 602: ST_TO_ADDR
// team := team ^ us_commander ;
 603: LD_ADDR_VAR 0 5
 607: PUSH
 608: LD_VAR 0 5
 612: PUSH
 613: LD_EXP 24
 617: ADD
 618: ST_TO_ADDR
// for i = 1 to team do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_TO
 635: IFFALSE 835
// begin if GetClass ( team [ i ] ) = class_mechanic then
 637: LD_VAR 0 5
 641: PUSH
 642: LD_VAR 0 2
 646: ARRAY
 647: PPUSH
 648: CALL_OW 257
 652: PUSH
 653: LD_INT 3
 655: EQUAL
 656: IFFALSE 797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 658: LD_ADDR_OWVAR 37
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 3
 684: MOD
 685: PUSH
 686: LD_INT 1
 688: PLUS
 689: ARRAY
 690: ST_TO_ADDR
// vc_engine := engine_siberite ;
 691: LD_ADDR_OWVAR 39
 695: PUSH
 696: LD_INT 3
 698: ST_TO_ADDR
// vc_control := control_manual ;
 699: LD_ADDR_OWVAR 38
 703: PUSH
 704: LD_INT 1
 706: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 707: LD_ADDR_OWVAR 40
 711: PUSH
 712: LD_INT 4
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: LD_INT 9
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 3
 731: PPUSH
 732: CALL_OW 12
 736: ARRAY
 737: ST_TO_ADDR
// un := CreateVehicle ;
 738: LD_ADDR_VAR 0 4
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 748: LD_VAR 0 4
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 760: LD_VAR 0 4
 764: PPUSH
 765: LD_INT 1
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 775: LD_VAR 0 5
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PPUSH
 786: LD_VAR 0 4
 790: PPUSH
 791: CALL_OW 52
// end else
 795: GO 833
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 797: LD_VAR 0 5
 801: PUSH
 802: LD_VAR 0 2
 806: ARRAY
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// ComHold ( team [ i ] ) ;
 818: LD_VAR 0 5
 822: PUSH
 823: LD_VAR 0 2
 827: ARRAY
 828: PPUSH
 829: CALL_OW 140
// end ; end ;
 833: GO 634
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 1
 841: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 842: LD_OWVAR 1
 846: PUSH
 847: LD_INT 73500
 849: LESS
 850: IFFALSE 877
 852: GO 854
 854: DISABLE
// begin enable ;
 855: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 5
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: LD_INT 23
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 55
// end ;
 877: END
// every 1 1$10 do var time , p , l ;
 878: GO 880
 880: DISABLE
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// begin time := 0 0$44 ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_INT 1540
 893: ST_TO_ADDR
// l := 0 ;
 894: LD_ADDR_VAR 0 3
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: CALL_OW 67
// l := l + 1 ;
 911: LD_ADDR_VAR 0 3
 915: PUSH
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 925: LD_INT 12
 927: PPUSH
 928: CALL_OW 435
 932: PUSH
 933: LD_INT 20
 935: LESS
 936: IFFALSE 995
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 938: LD_INT 1
 940: PPUSH
 941: LD_INT 5
 943: PPUSH
 944: CALL_OW 12
 948: PPUSH
 949: LD_INT 12
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 959: LD_INT 1365
 961: PPUSH
 962: LD_INT 1680
 964: PPUSH
 965: CALL_OW 12
 969: PPUSH
 970: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 5
 979: PPUSH
 980: CALL_OW 12
 984: PPUSH
 985: LD_INT 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 12
1010: ST_TO_ADDR
// if p then
1011: LD_VAR 0 2
1015: IFFALSE 1050
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1017: LD_INT 315
1019: PPUSH
1020: LD_INT 700
1022: PPUSH
1023: CALL_OW 12
1027: PPUSH
1028: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: CALL_OW 12
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1050: LD_VAR 0 3
1054: PUSH
1055: LD_INT 15
1057: PUSH
1058: LD_INT 13
1060: PUSH
1061: LD_INT 11
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_OWVAR 67
1073: ARRAY
1074: MOD
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: IFFALSE 1095
// time := time + 2 2$00 ;
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_VAR 0 1
1090: PUSH
1091: LD_INT 4200
1093: PLUS
1094: ST_TO_ADDR
// end until false ;
1095: LD_INT 0
1097: IFFALSE 902
// end ; end_of_file
1099: PPOPN 3
1101: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_INT 22
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 21
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PPUSH
1139: CALL_OW 69
1143: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1144: LD_ADDR_VAR 0 4
1148: PUSH
1149: LD_INT 470
1151: PUSH
1152: LD_INT 370
1154: PUSH
1155: LD_INT 290
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_OWVAR 67
1167: ARRAY
1168: ST_TO_ADDR
// case Difficulty of 2 :
1169: LD_OWVAR 67
1173: PUSH
1174: LD_INT 2
1176: DOUBLE
1177: EQUAL
1178: IFTRUE 1182
1180: GO 1213
1182: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1183: LD_VAR 0 3
1187: PPUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 32
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 72
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 65
// end ; 3 :
1211: GO 1289
1213: LD_INT 3
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1288
1221: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1222: LD_VAR 0 3
1226: PPUSH
1227: LD_INT 30
1229: PUSH
1230: LD_INT 32
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1250: LD_VAR 0 3
1254: PPUSH
1255: LD_INT 30
1257: PUSH
1258: LD_INT 27
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 72
1269: PUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 12
1280: ARRAY
1281: PPUSH
1282: CALL_OW 65
// end ; end ;
1286: GO 1289
1288: POP
// for i = 1 to filter do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: DOUBLE
1295: LD_INT 1
1297: DEC
1298: ST_TO_ADDR
1299: LD_VAR 0 3
1303: PUSH
1304: FOR_TO
1305: IFFALSE 1342
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1307: LD_VAR 0 3
1311: PUSH
1312: LD_VAR 0 2
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 4
1322: PUSH
1323: LD_INT 29
1325: NEG
1326: PPUSH
1327: LD_INT 29
1329: PPUSH
1330: CALL_OW 12
1334: PLUS
1335: PPUSH
1336: CALL_OW 234
1340: GO 1304
1342: POP
1343: POP
// SetBName ( us_depot , Vulcano1 ) ;
1344: LD_INT 50
1346: PPUSH
1347: LD_STRING Vulcano1
1349: PPUSH
1350: CALL_OW 500
// hc_importance := 0 ;
1354: LD_ADDR_OWVAR 32
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_side := 3 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 3
1369: ST_TO_ADDR
// uc_nation := nation_russian ;
1370: LD_ADDR_OWVAR 21
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1378: LD_ADDR_OWVAR 37
1382: PUSH
1383: LD_INT 22
1385: ST_TO_ADDR
// vc_engine := engine_combustion ;
1386: LD_ADDR_OWVAR 39
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// vc_control := control_manual ;
1394: LD_ADDR_OWVAR 38
1398: PUSH
1399: LD_INT 1
1401: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1402: LD_ADDR_OWVAR 40
1406: PUSH
1407: LD_INT 51
1409: ST_TO_ADDR
// un := CreateVehicle ;
1410: LD_ADDR_VAR 0 5
1414: PUSH
1415: CALL_OW 45
1419: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1420: LD_VAR 0 5
1424: PPUSH
1425: LD_INT 97
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1438: LD_VAR 0 5
1442: PPUSH
1443: LD_INT 1
1445: PPUSH
1446: LD_INT 100
1448: PPUSH
1449: CALL_OW 290
// SetFuel ( un , 45 ) ;
1453: LD_VAR 0 5
1457: PPUSH
1458: LD_INT 45
1460: PPUSH
1461: CALL_OW 240
// un := CreateVehicle ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: CALL_OW 45
1474: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1475: LD_VAR 0 5
1479: PPUSH
1480: LD_INT 109
1482: PPUSH
1483: LD_INT 154
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 100
1503: PPUSH
1504: CALL_OW 290
// SetDir ( un , 1 ) ;
1508: LD_VAR 0 5
1512: PPUSH
1513: LD_INT 1
1515: PPUSH
1516: CALL_OW 233
// SetFuel ( un , 50 ) ;
1520: LD_VAR 0 5
1524: PPUSH
1525: LD_INT 50
1527: PPUSH
1528: CALL_OW 240
// russians_in_base := [ ] ;
1532: LD_ADDR_EXP 28
1536: PUSH
1537: EMPTY
1538: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: DOUBLE
1545: LD_INT 1
1547: DEC
1548: ST_TO_ADDR
1549: LD_INT 6
1551: PUSH
1552: LD_INT 6
1554: PUSH
1555: LD_INT 7
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_OWVAR 67
1567: ARRAY
1568: PUSH
1569: FOR_TO
1570: IFFALSE 1651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: LD_INT 6
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PPUSH
1598: CALL_OW 380
// un := CreateHuman ;
1602: LD_ADDR_VAR 0 5
1606: PUSH
1607: CALL_OW 44
1611: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1612: LD_ADDR_EXP 28
1616: PUSH
1617: LD_EXP 28
1621: PUSH
1622: LD_VAR 0 5
1626: ADD
1627: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1628: LD_VAR 0 5
1632: PPUSH
1633: LD_INT 94
1635: PPUSH
1636: LD_INT 145
1638: PPUSH
1639: LD_INT 10
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: CALL_OW 50
// end ;
1649: GO 1569
1651: POP
1652: POP
// end ;
1653: LD_VAR 0 1
1657: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1658: LD_EXP 28
1662: PPUSH
1663: LD_INT 101
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 72
1677: IFFALSE 1743
1679: GO 1681
1681: DISABLE
1682: LD_INT 0
1684: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1685: LD_ADDR_VAR 0 1
1689: PUSH
1690: LD_EXP 28
1694: PPUSH
1695: LD_INT 101
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 72
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1714: LD_EXP 28
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 250
1728: PPUSH
1729: LD_VAR 0 1
1733: PPUSH
1734: CALL_OW 251
1738: PPUSH
1739: CALL_OW 114
// end ;
1743: PPOPN 1
1745: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1746: LD_INT 50
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: CALL 2122 0 2
1756: PUSH
1757: LD_INT 40
1759: LESS
1760: IFFALSE 1957
1762: GO 1764
1764: DISABLE
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// begin uc_side := 4 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
// uc_nation := nation_american ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// hc_importance := 0 ;
1785: LD_ADDR_OWVAR 32
1789: PUSH
1790: LD_INT 0
1792: ST_TO_ADDR
// for i = 1 to 7 do
1793: LD_ADDR_VAR 0 1
1797: PUSH
1798: DOUBLE
1799: LD_INT 1
1801: DEC
1802: ST_TO_ADDR
1803: LD_INT 7
1805: PUSH
1806: FOR_TO
1807: IFFALSE 1871
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1809: LD_INT 0
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 3
1817: PPUSH
1818: CALL_OW 12
1822: PPUSH
1823: LD_EXP 26
1827: PPUSH
1828: CALL_OW 380
// un := CreateHuman ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 7
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetLives ( un , 10 ) ;
1857: LD_VAR 0 2
1861: PPUSH
1862: LD_INT 10
1864: PPUSH
1865: CALL_OW 234
// end ;
1869: GO 1806
1871: POP
1872: POP
// for i = 1 to 5 do
1873: LD_ADDR_VAR 0 1
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 5
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1955
// begin PrepareHuman ( false , 4 , us_skill ) ;
1889: LD_INT 0
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_EXP 26
1899: PPUSH
1900: CALL_OW 380
// SetDir ( un , 1 ) ;
1904: LD_VAR 0 2
1908: PPUSH
1909: LD_INT 1
1911: PPUSH
1912: CALL_OW 233
// un := CreateHuman ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 44
1925: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 22
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// SetLives ( un , 10 ) ;
1941: LD_VAR 0 2
1945: PPUSH
1946: LD_INT 10
1948: PPUSH
1949: CALL_OW 234
// end ;
1953: GO 1886
1955: POP
1956: POP
// end ; end_of_file
1957: PPOPN 2
1959: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
1960: LD_INT 0
1962: PPUSH
1963: PPUSH
1964: PPUSH
// for i = 1 to n do
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: DOUBLE
1971: LD_INT 1
1973: DEC
1974: ST_TO_ADDR
1975: LD_VAR 0 1
1979: PUSH
1980: FOR_TO
1981: IFFALSE 2115
// begin uc_side := 0 ;
1983: LD_ADDR_OWVAR 20
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// uc_nation := 0 ;
1991: LD_ADDR_OWVAR 21
1995: PUSH
1996: LD_INT 0
1998: ST_TO_ADDR
// hc_class := class_apeman ;
1999: LD_ADDR_OWVAR 28
2003: PUSH
2004: LD_INT 12
2006: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2007: LD_ADDR_OWVAR 31
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: ST_TO_ADDR
// hc_name :=  ;
2030: LD_ADDR_OWVAR 26
2034: PUSH
2035: LD_STRING 
2037: ST_TO_ADDR
// hc_gallery :=  ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING 
2045: ST_TO_ADDR
// hc_importance := 0 ;
2046: LD_ADDR_OWVAR 32
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// un := CreateHuman ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: CALL_OW 44
2063: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2064: LD_VAR 0 3
2068: PPUSH
2069: LD_INT 19
2071: PUSH
2072: LD_INT 20
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 1
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: CALL_OW 12
2089: ARRAY
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2098: LD_INT 1155
2100: PPUSH
2101: LD_INT 5355
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: CALL_OW 67
// end ;
2113: GO 1980
2115: POP
2116: POP
// end ;
2117: LD_VAR 0 2
2121: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 22
2134: PUSH
2135: LD_VAR 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PPUSH
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL_OW 74
2158: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 4
2173: PPUSH
2174: CALL_OW 296
2178: ST_TO_ADDR
// if dist >= 9999 then
2179: LD_VAR 0 5
2183: PUSH
2184: LD_INT 9999
2186: GREATEREQUAL
2187: IFFALSE 2200
// result := - 1 else
2189: LD_ADDR_VAR 0 3
2193: PUSH
2194: LD_INT 1
2196: NEG
2197: ST_TO_ADDR
2198: GO 2210
// result := dist ;
2200: LD_ADDR_VAR 0 3
2204: PUSH
2205: LD_VAR 0 5
2209: ST_TO_ADDR
// end ;
2210: LD_VAR 0 3
2214: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2215: LD_INT 0
2217: PPUSH
2218: PPUSH
2219: PPUSH
2220: PPUSH
// tmp := 9999 ;
2221: LD_ADDR_VAR 0 5
2225: PUSH
2226: LD_INT 9999
2228: ST_TO_ADDR
// for i = 1 to plist do
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_VAR 0 1
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2319
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2247: LD_VAR 0 1
2251: PUSH
2252: LD_VAR 0 4
2256: ARRAY
2257: PPUSH
2258: LD_VAR 0 2
2262: PPUSH
2263: CALL 2122 0 2
2267: PUSH
2268: LD_VAR 0 5
2272: LESS
2273: IFFALSE 2317
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2275: LD_ADDR_VAR 0 5
2279: PUSH
2280: LD_VAR 0 1
2284: PUSH
2285: LD_VAR 0 4
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: CALL 2122 0 2
2300: ST_TO_ADDR
// unit := plist [ i ] ;
2301: LD_ADDR_VAR 0 6
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 4
2315: ARRAY
2316: ST_TO_ADDR
// end ;
2317: GO 2244
2319: POP
2320: POP
// result := unit ;
2321: LD_ADDR_VAR 0 3
2325: PUSH
2326: LD_VAR 0 6
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2336: LD_INT 0
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
2342: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: LD_INT 1000
2350: PUSH
2351: LD_INT 2500
2353: PUSH
2354: LD_INT 5000
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_INT 1
2380: NEG
2381: PUSH
2382: LD_INT 22
2384: PUSH
2385: LD_OWVAR 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 21
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PPUSH
2408: CALL_OW 69
2412: MUL
2413: PUSH
2414: LD_INT 30
2416: MUL
2417: PLUS
2418: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PUSH
2429: LD_EXP 17
2433: PUSH
2434: LD_INT 10
2436: MUL
2437: PLUS
2438: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2439: LD_ADDR_VAR 0 2
2443: PUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 1
2451: NEG
2452: PUSH
2453: LD_EXP 17
2457: MUL
2458: PUSH
2459: LD_INT 20
2461: MUL
2462: PLUS
2463: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: LD_VAR 0 2
2473: PUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_OWVAR 1
2482: PUSH
2483: LD_INT 35
2485: DIVREAL
2486: PUSH
2487: LD_INT 60
2489: DIVREAL
2490: MUL
2491: PUSH
2492: LD_INT 25
2494: MUL
2495: PLUS
2496: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 15
2514: MUL
2515: PLUS
2516: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: LD_VAR 0 2
2526: PUSH
2527: LD_INT 1
2529: NEG
2530: PUSH
2531: LD_EXP 20
2535: MUL
2536: PUSH
2537: LD_INT 1000
2539: MUL
2540: PLUS
2541: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_EXP 18
2556: PUSH
2557: LD_INT 5
2559: MUL
2560: PLUS
2561: ST_TO_ADDR
// result := points ;
2562: LD_ADDR_VAR 0 1
2566: PUSH
2567: LD_VAR 0 2
2571: ST_TO_ADDR
// end ; end_of_file
2572: LD_VAR 0 1
2576: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 35302 0 1
// if un = ru_cargo then
2586: LD_VAR 0 1
2590: PUSH
2591: LD_EXP 31
2595: EQUAL
2596: IFFALSE 2606
// ru_cargo := 0 ;
2598: LD_ADDR_EXP 31
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2606: LD_VAR 0 1
2610: PPUSH
2611: CALL_OW 255
2615: PUSH
2616: LD_OWVAR 2
2620: EQUAL
2621: IFFALSE 2637
// dead_counter := dead_counter + 1 ;
2623: LD_ADDR_EXP 16
2627: PUSH
2628: LD_EXP 16
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2637: LD_VAR 0 1
2641: PPUSH
2642: CALL_OW 255
2646: PUSH
2647: LD_INT 81
2649: PUSH
2650: LD_OWVAR 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 69
2663: IN
2664: IFFALSE 2680
// kill_counter := kill_counter + 1 ;
2666: LD_ADDR_EXP 17
2670: PUSH
2671: LD_EXP 17
2675: PUSH
2676: LD_INT 1
2678: PLUS
2679: ST_TO_ADDR
// if un = player_commander then
2680: LD_VAR 0 1
2684: PUSH
2685: LD_EXP 11
2689: EQUAL
2690: IFFALSE 2699
// YouLost ( vulcano-lost ) ;
2692: LD_STRING vulcano-lost
2694: PPUSH
2695: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2699: LD_VAR 0 1
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 21
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: IN
2733: IFFALSE 2849
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2735: LD_VAR 0 1
2739: PPUSH
2740: CALL_OW 266
2744: PUSH
2745: LD_INT 33
2747: EQUAL
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 266
2758: PUSH
2759: LD_INT 28
2761: EQUAL
2762: OR
2763: IFFALSE 2849
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2765: LD_ADDR_EXP 32
2769: PUSH
2770: LD_EXP 32
2774: PUSH
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: ADD
2785: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2786: LD_ADDR_EXP 32
2790: PUSH
2791: LD_EXP 32
2795: PUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 250
2805: ADD
2806: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 251
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 254
2847: ADD
2848: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2849: LD_VAR 0 1
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 69
2882: IN
2883: IFFALSE 3027
// begin if GetBType ( un ) = b_barracks then
2885: LD_VAR 0 1
2889: PPUSH
2890: CALL_OW 266
2894: PUSH
2895: LD_INT 5
2897: EQUAL
2898: IFFALSE 2916
// legion_blist := legion_blist ^ b_armoury else
2900: LD_ADDR_EXP 40
2904: PUSH
2905: LD_EXP 40
2909: PUSH
2910: LD_INT 4
2912: ADD
2913: ST_TO_ADDR
2914: GO 2964
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2916: LD_VAR 0 1
2920: PPUSH
2921: CALL_OW 266
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 6
2931: PUSH
2932: LD_INT 8
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: IN
2940: NOT
2941: IFFALSE 2964
// legion_blist := legion_blist ^ GetBType ( un ) ;
2943: LD_ADDR_EXP 40
2947: PUSH
2948: LD_EXP 40
2952: PUSH
2953: LD_VAR 0 1
2957: PPUSH
2958: CALL_OW 266
2962: ADD
2963: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2964: LD_ADDR_EXP 40
2968: PUSH
2969: LD_EXP 40
2973: PUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 250
2983: ADD
2984: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 251
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 254
3025: ADD
3026: ST_TO_ADDR
// end ; if un in legion_force then
3027: LD_VAR 0 1
3031: PUSH
3032: LD_EXP 37
3036: IN
3037: IFFALSE 3055
// legion_force := legion_force diff un ;
3039: LD_ADDR_EXP 37
3043: PUSH
3044: LD_EXP 37
3048: PUSH
3049: LD_VAR 0 1
3053: DIFF
3054: ST_TO_ADDR
// if un in ru_force then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_EXP 29
3064: IN
3065: IFFALSE 3083
// ru_force := ru_force diff un ;
3067: LD_ADDR_EXP 29
3071: PUSH
3072: LD_EXP 29
3076: PUSH
3077: LD_VAR 0 1
3081: DIFF
3082: ST_TO_ADDR
// if un in al_force then
3083: LD_VAR 0 1
3087: PUSH
3088: LD_EXP 44
3092: IN
3093: IFFALSE 3111
// al_force := al_force diff un ;
3095: LD_ADDR_EXP 44
3099: PUSH
3100: LD_EXP 44
3104: PUSH
3105: LD_VAR 0 1
3109: DIFF
3110: ST_TO_ADDR
// end ;
3111: PPOPN 1
3113: END
// on BuildingComplete ( b ) do var i ;
3114: LD_INT 0
3116: PPUSH
// begin if GetSide ( b ) = 8 then
3117: LD_VAR 0 1
3121: PPUSH
3122: CALL_OW 255
3126: PUSH
3127: LD_INT 8
3129: EQUAL
3130: IFFALSE 3170
// for i = 1 to 4 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 4
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3168
// legion_blist := Delete ( legion_blist , 1 ) ;
3148: LD_ADDR_EXP 40
3152: PUSH
3153: LD_EXP 40
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: CALL_OW 3
3165: ST_TO_ADDR
3166: GO 3145
3168: POP
3169: POP
// if GetSide ( b ) = 3 then
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 255
3179: PUSH
3180: LD_INT 3
3182: EQUAL
3183: IFFALSE 3223
// for i = 1 to 4 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 4
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3221
// ru_blist := Delete ( ru_blist , 1 ) ;
3201: LD_ADDR_EXP 32
3205: PUSH
3206: LD_EXP 32
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 3
3218: ST_TO_ADDR
3219: GO 3198
3221: POP
3222: POP
// end ;
3223: PPOPN 2
3225: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3226: LD_VAR 0 1
3230: PPUSH
3231: LD_VAR 0 2
3235: PPUSH
3236: CALL 35422 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_INT 51
3252: PUSH
3253: LD_INT 48
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: IN
3260: NOT
3261: IFFALSE 3309
// begin if GetSide ( veh ) = 3 then
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 255
3272: PUSH
3273: LD_INT 3
3275: EQUAL
3276: IFFALSE 3309
// begin ComMoveXY ( veh , 149 , 8 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 149
3285: PPUSH
3286: LD_INT 8
3288: PPUSH
3289: CALL_OW 111
// ru_force := ru_force ^ veh ;
3293: LD_ADDR_EXP 29
3297: PUSH
3298: LD_EXP 29
3302: PUSH
3303: LD_VAR 0 1
3307: ADD
3308: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 264
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: LD_INT 31
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: IN
3329: NOT
3330: IFFALSE 3363
// begin if GetSide ( veh ) = 8 then
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 8
3344: EQUAL
3345: IFFALSE 3363
// legion_force := legion_force ^ veh ;
3347: LD_ADDR_EXP 37
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 1
3361: ADD
3362: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 255
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: PUSH
3377: LD_EXP 31
3381: NOT
3382: AND
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 264
3393: PUSH
3394: LD_INT 51
3396: EQUAL
3397: AND
3398: IFFALSE 3410
// ru_cargo := veh ;
3400: LD_ADDR_EXP 31
3404: PUSH
3405: LD_VAR 0 1
3409: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3410: LD_VAR 0 1
3414: PPUSH
3415: CALL_OW 255
3419: PUSH
3420: LD_INT 7
3422: EQUAL
3423: PUSH
3424: LD_OWVAR 2
3428: PUSH
3429: LD_INT 7
3431: NONEQUAL
3432: AND
3433: IFFALSE 3451
// al_force := al_force ^ veh ;
3435: LD_ADDR_EXP 44
3439: PUSH
3440: LD_EXP 44
3444: PUSH
3445: LD_VAR 0 1
3449: ADD
3450: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 255
3460: PUSH
3461: LD_OWVAR 2
3465: EQUAL
3466: IFFALSE 3482
// veh_counter := veh_counter + 1 ;
3468: LD_ADDR_EXP 18
3472: PUSH
3473: LD_EXP 18
3477: PUSH
3478: LD_INT 1
3480: PLUS
3481: ST_TO_ADDR
// end ;
3482: PPOPN 2
3484: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3485: LD_VAR 0 1
3489: PPUSH
3490: CALL_OW 255
3494: PUSH
3495: LD_OWVAR 2
3499: NONEQUAL
3500: IFFALSE 3516
// sib_contamin_counter := sib_contamin_counter + 1 ;
3502: LD_ADDR_EXP 20
3506: PUSH
3507: LD_EXP 20
3511: PUSH
3512: LD_INT 1
3514: PLUS
3515: ST_TO_ADDR
// end ;
3516: PPOPN 3
3518: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 255
3528: PUSH
3529: LD_OWVAR 2
3533: EQUAL
3534: IFFALSE 3550
// tech_counter := tech_counter + 1 ;
3536: LD_ADDR_EXP 19
3540: PUSH
3541: LD_EXP 19
3545: PUSH
3546: LD_INT 1
3548: PLUS
3549: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3550: LD_VAR 0 1
3554: PUSH
3555: LD_INT 53
3557: EQUAL
3558: PUSH
3559: LD_OWVAR 2
3563: PUSH
3564: LD_INT 1
3566: EQUAL
3567: AND
3568: IFFALSE 3583
// SetTech ( 80 , 1 , state_researched ) ;
3570: LD_INT 80
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 322
// end ;
3583: PPOPN 2
3585: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 255
3595: PUSH
3596: LD_INT 8
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 1
3604: PPUSH
3605: CALL_OW 263
3609: PUSH
3610: LD_INT 2
3612: EQUAL
3613: AND
3614: IFFALSE 3625
// ComAutodestruct ( un ) ;
3616: LD_VAR 0 1
3620: PPUSH
3621: CALL 72572 0 1
// end ;
3625: PPOPN 1
3627: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3628: LD_VAR 0 1
3632: PUSH
3633: LD_EXP 21
3637: DOUBLE
3638: EQUAL
3639: IFTRUE 3643
3641: GO 3650
3643: POP
// LegionAttack ( ) ; event_alliance_attack :
3644: CALL 11363 0 0
3648: GO 3685
3650: LD_EXP 23
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3667
3660: POP
// AllianceAttack ( ) ; event_russian_attack :
3661: CALL 18864 0 0
3665: GO 3685
3667: LD_EXP 22
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3684
3677: POP
// RussianAttack ( ) ; end ;
3678: CALL 7589 0 0
3682: GO 3685
3684: POP
// end ;
3685: PPOPN 1
3687: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3688: LD_INT 25
3690: PUSH
3691: LD_INT 12
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 69
3702: PUSH
3703: LD_INT 9
3705: LESS
3706: PUSH
3707: LD_OWVAR 1
3711: PUSH
3712: LD_INT 105000
3714: LESS
3715: AND
3716: IFFALSE 3749
3718: GO 3720
3720: DISABLE
// begin enable ;
3721: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3722: LD_INT 8
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: LD_INT 0
3742: PLUS
3743: MINUS
3744: PPUSH
3745: CALL 1960 0 1
// end ;
3749: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: LD_VAR 0 3
3764: PPUSH
3765: CALL 35398 0 3
// end ;
3769: PPOPN 3
3771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL 35406 0 1
// end ; end_of_file
3781: PPOPN 1
3783: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// uc_side := 3 ;
3797: LD_ADDR_OWVAR 20
3801: PUSH
3802: LD_INT 3
3804: ST_TO_ADDR
// uc_nation := nation_russian ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 3
3812: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 1
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3851: LD_ADDR_VAR 0 5
3855: PUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 30
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PPUSH
3880: CALL_OW 69
3884: PUSH
3885: LD_INT 1
3887: ARRAY
3888: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3889: LD_ADDR_VAR 0 6
3893: PUSH
3894: LD_INT 22
3896: PUSH
3897: LD_INT 3
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 34
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: PUSH
3923: LD_INT 1
3925: ARRAY
3926: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3927: LD_ADDR_VAR 0 8
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 30
3944: PUSH
3945: LD_INT 33
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 5
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 1
3997: ARRAY
3998: ST_TO_ADDR
// ru_blist := [ ] ;
3999: LD_ADDR_EXP 32
4003: PUSH
4004: EMPTY
4005: ST_TO_ADDR
// ru_vlist := [ ] ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: EMPTY
4012: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4013: LD_ADDR_EXP 36
4017: PUSH
4018: LD_INT 183
4020: PUSH
4021: LD_INT 62
4023: PUSH
4024: LD_INT 147
4026: PUSH
4027: LD_INT 44
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4036: LD_INT 30
4038: PUSH
4039: LD_INT 34
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 69
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_EXP 36
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 36
4068: PUSH
4069: LD_INT 2
4071: ARRAY
4072: PPUSH
4073: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4077: LD_ADDR_EXP 34
4081: PUSH
4082: LD_INT 4
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 6
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: CALL_OW 274
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3000
4117: PPUSH
4118: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4122: LD_VAR 0 4
4126: PPUSH
4127: CALL_OW 274
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: LD_INT 300
4137: PPUSH
4138: CALL_OW 277
// hc_gallery :=  ;
4142: LD_ADDR_OWVAR 33
4146: PUSH
4147: LD_STRING 
4149: ST_TO_ADDR
// hc_name :=  ;
4150: LD_ADDR_OWVAR 26
4154: PUSH
4155: LD_STRING 
4157: ST_TO_ADDR
// hc_importance := 0 ;
4158: LD_ADDR_OWVAR 32
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4166: LD_ADDR_EXP 30
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: LD_INT 7
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_OWVAR 67
4189: ARRAY
4190: ST_TO_ADDR
// for i = 1 to 6 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 6
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4363
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 9
4212: PPUSH
4213: LD_EXP 30
4217: PPUSH
4218: CALL_OW 380
// un := CreateHuman ;
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: CALL_OW 44
4231: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4232: LD_VAR 0 3
4236: PPUSH
4237: LD_VAR 0 7
4241: PPUSH
4242: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4246: LD_INT 0
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_EXP 30
4256: PPUSH
4257: CALL_OW 380
// un := CreateHuman ;
4261: LD_ADDR_VAR 0 3
4265: PUSH
4266: CALL_OW 44
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 24
4278: PPUSH
4279: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 3
4288: PPUSH
4289: LD_EXP 30
4293: PPUSH
4294: CALL_OW 380
// un := CreateHuman ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_VAR 0 5
4317: PPUSH
4318: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_EXP 30
4332: PPUSH
4333: CALL_OW 380
// un := CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: CALL_OW 52
// end ;
4361: GO 4204
4363: POP
4364: POP
// if Difficulty > 1 then
4365: LD_OWVAR 67
4369: PUSH
4370: LD_INT 1
4372: GREATER
4373: IFFALSE 4406
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 3
4382: PPUSH
4383: LD_INT 160
4385: PPUSH
4386: LD_INT 36
4388: PPUSH
4389: LD_INT 3
4391: PPUSH
4392: CALL 80501 0 4
4396: ST_TO_ADDR
// ComHold ( un ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: CALL_OW 140
// end ; russian_prepared := true ;
4406: LD_ADDR_EXP 2
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4414: LD_VAR 0 5
4418: PPUSH
4419: LD_INT 21
4421: PPUSH
4422: LD_INT 3
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 51
4430: PPUSH
4431: CALL_OW 125
// end ;
4435: LD_VAR 0 1
4439: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4440: LD_INT 22
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: PUSH
4455: LD_INT 0
4457: GREATER
4458: PUSH
4459: LD_EXP 2
4463: AND
4464: IFFALSE 6614
4466: GO 4468
4468: DISABLE
4469: LD_INT 0
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
// begin enable ;
4487: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 69
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 30
4581: PUSH
4582: LD_INT 34
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PUSH
4598: LD_INT 1
4600: ARRAY
4601: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 33
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 69
4635: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4636: LD_ADDR_VAR 0 8
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 5
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: PUSH
4670: LD_INT 1
4672: ARRAY
4673: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4674: LD_ADDR_VAR 0 5
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 3
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4708: LD_ADDR_VAR 0 6
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4742: LD_ADDR_VAR 0 7
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PPUSH
4771: CALL_OW 69
4775: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4776: LD_ADDR_VAR 0 9
4780: PUSH
4781: LD_VAR 0 7
4785: PPUSH
4786: LD_INT 25
4788: PUSH
4789: LD_INT 2
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4801: LD_ADDR_VAR 0 10
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: LD_INT 25
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 72
4825: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4826: LD_ADDR_VAR 0 11
4830: PUSH
4831: LD_VAR 0 7
4835: PPUSH
4836: LD_INT 25
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 72
4850: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 34
4863: PUSH
4864: LD_INT 51
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 31
4888: PUSH
4889: LD_INT 0
4891: EQUAL
4892: AND
4893: IFFALSE 4933
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4895: LD_ADDR_EXP 31
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 34
4912: PUSH
4913: LD_INT 51
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: ST_TO_ADDR
// if ru_cargo then
4933: LD_EXP 31
4937: IFFALSE 5277
// begin if IsInArea ( ru_cargo , ru_base ) then
4939: LD_EXP 31
4943: PPUSH
4944: LD_INT 9
4946: PPUSH
4947: CALL_OW 308
4951: IFFALSE 5030
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4953: LD_EXP 31
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 289
4965: PUSH
4966: LD_INT 0
4968: EQUAL
4969: IFFALSE 4987
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4971: LD_EXP 31
4975: PPUSH
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 120
4985: GO 5028
// if not HasTask ( ru_cargo ) then
4987: LD_EXP 31
4991: PPUSH
4992: CALL_OW 314
4996: NOT
4997: IFFALSE 5028
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4999: LD_EXP 31
5003: PPUSH
5004: LD_VAR 0 1
5008: PPUSH
5009: CALL_OW 250
5013: PPUSH
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 251
5023: PPUSH
5024: CALL_OW 111
// end else
5028: GO 5277
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5030: LD_EXP 31
5034: PPUSH
5035: CALL_OW 314
5039: NOT
5040: PUSH
5041: LD_EXP 31
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 289
5053: PUSH
5054: LD_INT 100
5056: LESS
5057: AND
5058: PUSH
5059: LD_EXP 31
5063: PPUSH
5064: LD_INT 10
5066: PPUSH
5067: CALL_OW 308
5071: NOT
5072: AND
5073: IFFALSE 5150
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5075: LD_ADDR_VAR 0 15
5079: PUSH
5080: LD_INT 11
5082: PPUSH
5083: CALL_OW 435
5087: ST_TO_ADDR
// if cr then
5088: LD_VAR 0 15
5092: IFFALSE 5123
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5094: LD_EXP 31
5098: PPUSH
5099: LD_VAR 0 15
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 15
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: CALL_OW 117
5121: GO 5150
// if not IsInArea ( ru_cargo , ru_crates ) then
5123: LD_EXP 31
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 308
5135: NOT
5136: IFFALSE 5150
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5138: LD_EXP 31
5142: PPUSH
5143: LD_INT 11
5145: PPUSH
5146: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5150: LD_EXP 31
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: PUSH
5161: LD_EXP 31
5165: PPUSH
5166: LD_INT 10
5168: PPUSH
5169: CALL_OW 308
5173: NOT
5174: AND
5175: PUSH
5176: LD_EXP 31
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 289
5188: PUSH
5189: LD_INT 100
5191: EQUAL
5192: PUSH
5193: LD_OWVAR 2
5197: PPUSH
5198: LD_EXP 31
5202: PPUSH
5203: CALL_OW 292
5207: OR
5208: AND
5209: IFFALSE 5223
// ComMoveToArea ( ru_cargo , cargoa ) ;
5211: LD_EXP 31
5215: PPUSH
5216: LD_INT 10
5218: PPUSH
5219: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5223: LD_EXP 31
5227: PPUSH
5228: LD_INT 10
5230: PPUSH
5231: CALL_OW 308
5235: PUSH
5236: LD_VAR 0 8
5240: AND
5241: IFFALSE 5277
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5243: LD_VAR 0 7
5247: PPUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 9
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 72
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_INT 139
5269: PPUSH
5270: LD_INT 24
5272: PPUSH
5273: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5277: LD_EXP 31
5281: PUSH
5282: LD_INT 0
5284: EQUAL
5285: PUSH
5286: LD_VAR 0 2
5290: AND
5291: PUSH
5292: LD_VAR 0 2
5296: PPUSH
5297: CALL_OW 461
5301: PUSH
5302: LD_INT 2
5304: EQUAL
5305: AND
5306: IFFALSE 5329
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 21
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 3
5321: PPUSH
5322: LD_INT 51
5324: PPUSH
5325: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_EXP 33
5338: PUSH
5339: LD_INT 0
5341: GREATER
5342: AND
5343: IFFALSE 5443
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 461
5354: PUSH
5355: LD_INT 2
5357: EQUAL
5358: IFFALSE 5443
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_EXP 33
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: LD_EXP 33
5387: PUSH
5388: LD_INT 3
5390: ARRAY
5391: PPUSH
5392: LD_EXP 33
5396: PUSH
5397: LD_INT 4
5399: ARRAY
5400: PPUSH
5401: CALL_OW 125
// for i = 1 to 4 do
5405: LD_ADDR_VAR 0 12
5409: PUSH
5410: DOUBLE
5411: LD_INT 1
5413: DEC
5414: ST_TO_ADDR
5415: LD_INT 4
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5441
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5421: LD_ADDR_EXP 33
5425: PUSH
5426: LD_EXP 33
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 3
5438: ST_TO_ADDR
5439: GO 5418
5441: POP
5442: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5443: LD_INT 24
5445: PPUSH
5446: CALL_OW 461
5450: PUSH
5451: LD_INT 2
5453: EQUAL
5454: PUSH
5455: LD_EXP 4
5459: AND
5460: IFFALSE 5488
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5462: LD_INT 25
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: CALL_OW 321
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: IFFALSE 5488
// ComResearch ( ru_lab , tech_sibfiss ) ;
5478: LD_INT 24
5480: PPUSH
5481: LD_INT 25
5483: PPUSH
5484: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5488: LD_INT 25
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: CALL_OW 321
5498: PUSH
5499: LD_INT 2
5501: EQUAL
5502: PUSH
5503: LD_OWVAR 1
5507: PUSH
5508: LD_INT 10500
5510: MOD
5511: PUSH
5512: LD_INT 0
5514: EQUAL
5515: AND
5516: IFFALSE 5554
// if BuildingStatus ( ru_factory ) = bs_idle then
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 461
5527: PUSH
5528: LD_INT 2
5530: EQUAL
5531: IFFALSE 5554
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5533: LD_VAR 0 2
5537: PPUSH
5538: LD_INT 23
5540: PPUSH
5541: LD_INT 3
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: LD_INT 48
5549: PPUSH
5550: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 34
5566: PUSH
5567: LD_INT 48
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 69
5582: PUSH
5583: LD_INT 0
5585: GREATER
5586: IFFALSE 5960
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5588: LD_ADDR_VAR 0 16
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 3
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 34
5605: PUSH
5606: LD_INT 48
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5626: LD_VAR 0 16
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: CALL_OW 308
5638: IFFALSE 5656
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5640: LD_VAR 0 16
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: CALL_OW 120
5654: GO 5960
// if not HasTask ( sib_bomb ) then
5656: LD_VAR 0 16
5660: PPUSH
5661: CALL_OW 314
5665: NOT
5666: IFFALSE 5960
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5668: LD_INT 22
5670: PUSH
5671: LD_OWVAR 2
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 30
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PPUSH
5703: CALL_OW 256
5707: PUSH
5708: LD_INT 250
5710: GREATER
5711: IFFALSE 5804
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5713: LD_VAR 0 16
5717: PPUSH
5718: LD_INT 22
5720: PUSH
5721: LD_OWVAR 2
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 30
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PPUSH
5753: CALL_OW 250
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 251
5797: PPUSH
5798: CALL_OW 116
5802: GO 5960
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5804: LD_INT 22
5806: PUSH
5807: LD_OWVAR 2
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 21
5818: PUSH
5819: LD_INT 3
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: PUSH
5835: LD_INT 0
5837: GREATER
5838: IFFALSE 5931
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5840: LD_VAR 0 16
5844: PPUSH
5845: LD_INT 22
5847: PUSH
5848: LD_OWVAR 2
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 21
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 69
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: CALL_OW 250
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 251
5924: PPUSH
5925: CALL_OW 116
5929: GO 5960
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5931: LD_VAR 0 16
5935: PPUSH
5936: LD_EXP 11
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 11
5950: PPUSH
5951: CALL_OW 251
5955: PPUSH
5956: CALL_OW 116
// end ; if ru_can_attack then
5960: LD_EXP 3
5964: IFFALSE 6112
// if ru_time > 0 0$00 then
5966: LD_EXP 35
5970: PUSH
5971: LD_INT 0
5973: GREATER
5974: IFFALSE 5992
// ru_time := ru_time - 0 0$03 else
5976: LD_ADDR_EXP 35
5980: PUSH
5981: LD_EXP 35
5985: PUSH
5986: LD_INT 105
5988: MINUS
5989: ST_TO_ADDR
5990: GO 6112
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5992: LD_ADDR_EXP 35
5996: PUSH
5997: LD_INT 20265
5999: PPUSH
6000: LD_INT 30765
6002: PPUSH
6003: CALL_OW 12
6007: ST_TO_ADDR
// for i = 1 to ru_amount do
6008: LD_ADDR_VAR 0 12
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_EXP 34
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6110
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6026: LD_ADDR_EXP 33
6030: PUSH
6031: LD_EXP 33
6035: PUSH
6036: LD_INT 23
6038: ADD
6039: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6040: LD_ADDR_EXP 33
6044: PUSH
6045: LD_EXP 33
6049: PUSH
6050: LD_INT 3
6052: ADD
6053: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6054: LD_ADDR_EXP 33
6058: PUSH
6059: LD_EXP 33
6063: PUSH
6064: LD_INT 3
6066: ADD
6067: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6068: LD_ADDR_EXP 33
6072: PUSH
6073: LD_EXP 33
6077: PUSH
6078: LD_INT 46
6080: PUSH
6081: LD_INT 45
6083: PUSH
6084: LD_INT 47
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 2
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 14
6105: ARRAY
6106: ADD
6107: ST_TO_ADDR
// end ;
6108: GO 6023
6110: POP
6111: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6112: LD_VAR 0 4
6116: PPUSH
6117: LD_INT 35
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 72
6131: PUSH
6132: LD_INT 0
6134: GREATER
6135: IFFALSE 6183
// if BuildingStatus ( ru_factory ) = bs_idle then
6137: LD_VAR 0 2
6141: PPUSH
6142: CALL_OW 461
6146: PUSH
6147: LD_INT 2
6149: EQUAL
6150: IFFALSE 6183
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 47
6178: PPUSH
6179: CALL_OW 148
// if ru_force >= ru_amount then
6183: LD_EXP 29
6187: PUSH
6188: LD_EXP 34
6192: GREATEREQUAL
6193: IFFALSE 6204
// RaiseSailEvent ( event_russian_attack ) ;
6195: LD_EXP 22
6199: PPUSH
6200: CALL_OW 427
// if ru_engs > 0 then
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 0
6211: GREATER
6212: IFFALSE 6614
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6214: LD_VAR 0 5
6218: PPUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: LD_INT 1000
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 0
6243: GREATER
6244: IFFALSE 6399
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6246: LD_ADDR_VAR 0 14
6250: PUSH
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: ST_TO_ADDR
// for i = 1 to ru_engs do
6278: LD_ADDR_VAR 0 12
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_VAR 0 9
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6395
// begin if IsInUnit ( ru_engs [ i ] ) then
6296: LD_VAR 0 9
6300: PUSH
6301: LD_VAR 0 12
6305: ARRAY
6306: PPUSH
6307: CALL_OW 310
6311: IFFALSE 6330
// ComExitBuilding ( ru_engs [ i ] ) else
6313: LD_VAR 0 9
6317: PUSH
6318: LD_VAR 0 12
6322: ARRAY
6323: PPUSH
6324: CALL_OW 122
6328: GO 6393
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6330: LD_VAR 0 9
6334: PUSH
6335: LD_VAR 0 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 314
6345: NOT
6346: PUSH
6347: LD_VAR 0 9
6351: PUSH
6352: LD_VAR 0 12
6356: ARRAY
6357: PPUSH
6358: CALL_OW 256
6362: PUSH
6363: LD_INT 600
6365: GREATER
6366: AND
6367: IFFALSE 6393
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6369: LD_VAR 0 9
6373: PUSH
6374: LD_VAR 0 12
6378: ARRAY
6379: PPUSH
6380: LD_VAR 0 14
6384: PUSH
6385: LD_INT 1
6387: ARRAY
6388: PPUSH
6389: CALL_OW 130
// end ;
6393: GO 6293
6395: POP
6396: POP
// end else
6397: GO 6614
// begin if ru_blist = 0 then
6399: LD_EXP 32
6403: PUSH
6404: LD_INT 0
6406: EQUAL
6407: IFFALSE 6489
// begin for i = 1 to ru_engs do
6409: LD_ADDR_VAR 0 12
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_VAR 0 9
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6485
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6427: LD_VAR 0 9
6431: PUSH
6432: LD_VAR 0 12
6436: ARRAY
6437: PPUSH
6438: CALL_OW 314
6442: NOT
6443: PUSH
6444: LD_VAR 0 9
6448: PUSH
6449: LD_VAR 0 12
6453: ARRAY
6454: PPUSH
6455: CALL_OW 310
6459: NOT
6460: AND
6461: IFFALSE 6483
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6463: LD_VAR 0 9
6467: PUSH
6468: LD_VAR 0 12
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 120
6483: GO 6424
6485: POP
6486: POP
// end else
6487: GO 6614
// begin for i = 1 to ru_engs do
6489: LD_ADDR_VAR 0 12
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_VAR 0 9
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6612
// begin if IsInUnit ( ru_engs [ i ] ) then
6507: LD_VAR 0 9
6511: PUSH
6512: LD_VAR 0 12
6516: ARRAY
6517: PPUSH
6518: CALL_OW 310
6522: IFFALSE 6541
// ComExitBuilding ( ru_engs [ i ] ) else
6524: LD_VAR 0 9
6528: PUSH
6529: LD_VAR 0 12
6533: ARRAY
6534: PPUSH
6535: CALL_OW 122
6539: GO 6610
// if not HasTask ( ru_engs [ i ] ) then
6541: LD_VAR 0 9
6545: PUSH
6546: LD_VAR 0 12
6550: ARRAY
6551: PPUSH
6552: CALL_OW 314
6556: NOT
6557: IFFALSE 6610
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6559: LD_VAR 0 9
6563: PUSH
6564: LD_VAR 0 12
6568: ARRAY
6569: PPUSH
6570: LD_EXP 32
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: LD_EXP 32
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: LD_EXP 32
6592: PUSH
6593: LD_INT 3
6595: ARRAY
6596: PPUSH
6597: LD_EXP 32
6601: PUSH
6602: LD_INT 4
6604: ARRAY
6605: PPUSH
6606: CALL_OW 145
// end ;
6610: GO 6504
6612: POP
6613: POP
// end ; end ; end ; end ;
6614: PPOPN 16
6616: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6617: LD_EXP 2
6621: PUSH
6622: LD_INT 11
6624: PPUSH
6625: CALL_OW 435
6629: PUSH
6630: LD_INT 10
6632: LESS
6633: AND
6634: IFFALSE 6697
6636: GO 6638
6638: DISABLE
// begin enable ;
6639: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: LD_INT 11
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6661: LD_INT 1505
6663: PPUSH
6664: LD_INT 2100
6666: PPUSH
6667: CALL_OW 12
6671: PPUSH
6672: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6676: LD_INT 1
6678: PPUSH
6679: LD_INT 5
6681: PPUSH
6682: CALL_OW 12
6686: PPUSH
6687: LD_INT 11
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 55
// end ;
6697: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6698: LD_EXP 4
6702: NOT
6703: IFFALSE 6818
6705: GO 6707
6707: DISABLE
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
// begin enable ;
6712: ENABLE
// i := Rand ( 0 , 100 ) ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 0
6720: PPUSH
6721: LD_INT 100
6723: PPUSH
6724: CALL_OW 12
6728: ST_TO_ADDR
// case your_side of 1 :
6729: LD_OWVAR 2
6733: PUSH
6734: LD_INT 1
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6753
6742: POP
// tmp := 10 ; 2 :
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_INT 10
6750: ST_TO_ADDR
6751: GO 6792
6753: LD_INT 2
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6772
6761: POP
// tmp := 0 ; 7 :
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
6770: GO 6792
6772: LD_INT 7
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6791
6780: POP
// tmp := 15 ; end ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_INT 15
6788: ST_TO_ADDR
6789: GO 6792
6791: POP
// if i < chance_to_bomb + tmp then
6792: LD_VAR 0 1
6796: PUSH
6797: LD_EXP 5
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: LESS
6808: IFFALSE 6818
// ru_sib_bomb := true ;
6810: LD_ADDR_EXP 4
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// end ;
6818: PPOPN 2
6820: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6821: LD_INT 22
6823: PUSH
6824: LD_OWVAR 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 34
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 69
6851: IFFALSE 6864
6853: GO 6855
6855: DISABLE
// begin ru_sib_bomb := true ;
6856: LD_ADDR_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end ;
6864: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6865: LD_INT 22
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 30
6877: PUSH
6878: LD_INT 34
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: IFFALSE 6992
6895: GO 6897
6897: DISABLE
6898: LD_INT 0
6900: PPUSH
// begin enable ;
6901: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 1
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 12
6927: ARRAY
6928: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6929: LD_INT 22
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 34
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: LD_INT 1
6960: ARRAY
6961: PPUSH
6962: LD_EXP 36
6966: PUSH
6967: LD_VAR 0 1
6971: ARRAY
6972: PPUSH
6973: LD_EXP 36
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 1
6985: PLUS
6986: ARRAY
6987: PPUSH
6988: CALL_OW 243
// end ;
6992: PPOPN 1
6994: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6995: LD_OWVAR 1
6999: PUSH
7000: LD_INT 58800
7002: PUSH
7003: LD_INT 52500
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_OWVAR 67
7014: PUSH
7015: LD_INT 1
7017: MINUS
7018: ARRAY
7019: GREATEREQUAL
7020: PUSH
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: GREATER
7029: AND
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: AND
7046: IFFALSE 7468
7048: GO 7050
7050: DISABLE
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// begin enable ;
7058: ENABLE
// if tick > 60 60$00 then
7059: LD_OWVAR 1
7063: PUSH
7064: LD_INT 126000
7066: GREATER
7067: IFFALSE 7070
// disable ;
7069: DISABLE
// tmp := [ ] ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: EMPTY
7076: ST_TO_ADDR
// for i := 1 to 8 do
7077: LD_ADDR_VAR 0 1
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_INT 8
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7250
// begin uc_side := 6 ;
7093: LD_ADDR_OWVAR 20
7097: PUSH
7098: LD_INT 6
7100: ST_TO_ADDR
// uc_nation := 3 ;
7101: LD_ADDR_OWVAR 21
7105: PUSH
7106: LD_INT 3
7108: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7109: LD_ADDR_OWVAR 37
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 23
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: LD_INT 3
7135: MOD
7136: PUSH
7137: LD_INT 1
7139: PLUS
7140: ARRAY
7141: ST_TO_ADDR
// vc_engine := engine_siberite ;
7142: LD_ADDR_OWVAR 39
7146: PUSH
7147: LD_INT 3
7149: ST_TO_ADDR
// vc_control := control_computer ;
7150: LD_ADDR_OWVAR 38
7154: PUSH
7155: LD_INT 3
7157: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7158: LD_ADDR_OWVAR 40
7162: PUSH
7163: LD_INT 45
7165: PUSH
7166: LD_INT 93
7168: PUSH
7169: LD_INT 47
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: LD_INT 3
7184: MOD
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ARRAY
7190: ST_TO_ADDR
// un := CreateVehicle ;
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: CALL_OW 45
7200: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: CALL 77040 0 2
7247: ST_TO_ADDR
// end ;
7248: GO 7090
7250: POP
7251: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7252: LD_INT 22
7254: PUSH
7255: LD_OWVAR 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 92
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: LD_INT 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_INT 1
7293: GREATER
7294: IFFALSE 7306
// p := 2 else
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_INT 2
7303: ST_TO_ADDR
7304: GO 7314
// p := 1 ;
7306: LD_ADDR_VAR 0 4
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// case p of 1 :
7314: LD_VAR 0 4
7318: PUSH
7319: LD_INT 1
7321: DOUBLE
7322: EQUAL
7323: IFTRUE 7327
7325: GO 7392
7327: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_INT 29
7335: PUSH
7336: LD_INT 29
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 49
7345: PUSH
7346: LD_INT 70
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 49
7355: PUSH
7356: LD_INT 70
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 61
7365: PUSH
7366: LD_INT 110
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 74
7375: PUSH
7376: LD_INT 129
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
7390: GO 7444
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7443
7400: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 23
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 49
7418: PUSH
7419: LD_INT 39
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 52
7428: PUSH
7429: LD_INT 27
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7444
7443: POP
// repeat wait ( 0 0$1 ) ;
7444: LD_INT 35
7446: PPUSH
7447: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7451: LD_VAR 0 3
7455: PPUSH
7456: LD_VAR 0 5
7460: PPUSH
7461: CALL 79644 0 2
7465: NOT
7466: IFFALSE 7444
// end ;
7468: PPOPN 5
7470: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 1
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: IFFALSE 7586
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin enable ;
7507: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 69
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 274
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 6000
7561: PPUSH
7562: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 274
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: LD_INT 600
7581: PPUSH
7582: CALL_OW 276
// end ;
7586: PPOPN 1
7588: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7589: LD_INT 0
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
// units := ru_force ;
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_EXP 29
7606: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7607: LD_ADDR_VAR 0 6
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 30
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: ST_TO_ADDR
// ru_force := [ ] ;
7641: LD_ADDR_EXP 29
7645: PUSH
7646: EMPTY
7647: ST_TO_ADDR
// if not teleport then
7648: LD_VAR 0 6
7652: NOT
7653: IFFALSE 7695
// begin for i in units do
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 3
7664: PUSH
7665: FOR_IN
7666: IFFALSE 7691
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7668: LD_VAR 0 5
7672: PPUSH
7673: LD_INT 150
7675: PPUSH
7676: LD_INT 65
7678: PPUSH
7679: LD_INT 12
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 483
7689: GO 7665
7691: POP
7692: POP
// end else
7693: GO 7790
// begin repeat for i = 1 to units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: DOUBLE
7701: LD_INT 1
7703: DEC
7704: ST_TO_ADDR
7705: LD_VAR 0 3
7709: PUSH
7710: FOR_TO
7711: IFFALSE 7759
// if IsInArea ( units [ i ] , ru_base ) then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_VAR 0 5
7722: ARRAY
7723: PPUSH
7724: LD_INT 9
7726: PPUSH
7727: CALL_OW 308
7731: IFFALSE 7757
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7733: LD_VAR 0 3
7737: PUSH
7738: LD_VAR 0 5
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 6
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: CALL_OW 120
7757: GO 7710
7759: POP
7760: POP
// wait ( 0 0$10 ) ;
7761: LD_INT 350
7763: PPUSH
7764: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7768: LD_VAR 0 3
7772: PPUSH
7773: LD_INT 95
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 72
7787: NOT
7788: IFFALSE 7695
// end ; p := rand ( 1 , 2 ) ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// case p of 1 :
7806: LD_VAR 0 4
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7873
7819: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_INT 159
7827: PUSH
7828: LD_INT 71
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 152
7837: PUSH
7838: LD_INT 99
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 119
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 104
7857: PUSH
7858: LD_INT 127
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 7936
7873: LD_INT 2
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7935
7881: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 36
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 91
7899: PUSH
7900: LD_INT 52
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 53
7909: PUSH
7910: LD_INT 67
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 58
7919: PUSH
7920: LD_INT 107
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 7936
7935: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7936: LD_INT 22
7938: PUSH
7939: LD_INT 7
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_INT 1
7958: GREATER
7959: AND
7960: IFFALSE 7991
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: LD_INT 116
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 91
7979: PUSH
7980: LD_INT 52
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7991: LD_INT 35
7993: PPUSH
7994: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7998: LD_VAR 0 3
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL 79644 0 2
8012: NOT
8013: IFFALSE 7991
// end ; end_of_file
8015: LD_VAR 0 1
8019: RET
// export function RemoveLegion ; var i ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8058
// RemoveUnit ( i ) ;
8047: LD_VAR 0 2
8051: PPUSH
8052: CALL_OW 64
8056: GO 8044
8058: POP
8059: POP
// end ;
8060: LD_VAR 0 1
8064: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8115: LD_ADDR_VAR 0 8
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 8
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8153: LD_ADDR_VAR 0 9
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 6
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 8
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8209: LD_ADDR_VAR 0 10
8213: PUSH
8214: LD_INT 22
8216: PUSH
8217: LD_INT 8
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 69
8242: ST_TO_ADDR
// uc_side := 8 ;
8243: LD_ADDR_OWVAR 20
8247: PUSH
8248: LD_INT 8
8250: ST_TO_ADDR
// uc_nation := nation_arabian ;
8251: LD_ADDR_OWVAR 21
8255: PUSH
8256: LD_INT 2
8258: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8259: LD_ADDR_EXP 38
8263: PUSH
8264: LD_INT 5
8266: PUSH
8267: LD_INT 6
8269: PUSH
8270: LD_INT 7
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: ST_TO_ADDR
// legion_blist := [ ] ;
8284: LD_ADDR_EXP 40
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// legion_vlist := [ ] ;
8291: LD_ADDR_EXP 41
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// legion_force := [ ] ;
8298: LD_ADDR_EXP 37
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// legion_enemy := - 1 ;
8305: LD_ADDR_EXP 42
8309: PUSH
8310: LD_INT 1
8312: NEG
8313: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8314: LD_VAR 0 6
8318: PPUSH
8319: CALL_OW 274
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_INT 10000
8329: PPUSH
8330: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 274
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: LD_INT 1000
8349: PPUSH
8350: CALL_OW 277
// for i = 1 to l_towers do
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_VAR 0 10
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8419
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: LD_EXP 38
8382: PPUSH
8383: CALL_OW 380
// un := CreateHuman ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 10
8406: PUSH
8407: LD_VAR 0 3
8411: ARRAY
8412: PPUSH
8413: CALL_OW 52
// end ;
8417: GO 8369
8419: POP
8420: POP
// for i = 1 to 4 do
8421: LD_ADDR_VAR 0 3
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_INT 4
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8528
// for p = 1 to 2 do
8437: LD_ADDR_VAR 0 7
8441: PUSH
8442: DOUBLE
8443: LD_INT 1
8445: DEC
8446: ST_TO_ADDR
8447: LD_INT 2
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8524
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8453: LD_INT 0
8455: PPUSH
8456: LD_INT 8
8458: PPUSH
8459: LD_EXP 38
8463: PPUSH
8464: CALL_OW 380
// un := CreateHuman ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: CALL_OW 44
8477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: PUSH
8512: LD_VAR 0 7
8516: ARRAY
8517: PPUSH
8518: CALL_OW 52
// end ;
8522: GO 8450
8524: POP
8525: POP
8526: GO 8434
8528: POP
8529: POP
// for i = 1 to 4 do
8530: LD_ADDR_VAR 0 3
8534: PUSH
8535: DOUBLE
8536: LD_INT 1
8538: DEC
8539: ST_TO_ADDR
8540: LD_INT 4
8542: PUSH
8543: FOR_TO
8544: IFFALSE 8587
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8546: LD_INT 0
8548: PPUSH
8549: LD_INT 4
8551: PPUSH
8552: LD_EXP 38
8556: PPUSH
8557: CALL_OW 380
// un := CreateHuman ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: CALL_OW 44
8570: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8571: LD_VAR 0 2
8575: PPUSH
8576: LD_VAR 0 9
8580: PPUSH
8581: CALL_OW 52
// end ;
8585: GO 8543
8587: POP
8588: POP
// for i = 1 to 4 do
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: DOUBLE
8595: LD_INT 1
8597: DEC
8598: ST_TO_ADDR
8599: LD_INT 4
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8646
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: LD_EXP 38
8615: PPUSH
8616: CALL_OW 380
// un := CreateHuman ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: CALL_OW 44
8629: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: LD_VAR 0 8
8639: PPUSH
8640: CALL_OW 52
// end ;
8644: GO 8602
8646: POP
8647: POP
// for i = 1 to 3 do
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_INT 3
8660: PUSH
8661: FOR_TO
8662: IFFALSE 8705
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8664: LD_INT 0
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: LD_EXP 38
8674: PPUSH
8675: CALL_OW 380
// un := CreateHuman ;
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: CALL_OW 44
8688: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 6
8698: PPUSH
8699: CALL_OW 52
// end ;
8703: GO 8661
8705: POP
8706: POP
// for i = 1 to 3 do
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: DOUBLE
8713: LD_INT 1
8715: DEC
8716: ST_TO_ADDR
8717: LD_INT 3
8719: PUSH
8720: FOR_TO
8721: IFFALSE 8831
// begin vc_chassis := ar_half_tracked ;
8723: LD_ADDR_OWVAR 37
8727: PUSH
8728: LD_INT 14
8730: ST_TO_ADDR
// vc_engine := engine_siberite ;
8731: LD_ADDR_OWVAR 39
8735: PUSH
8736: LD_INT 3
8738: ST_TO_ADDR
// vc_control := control_manual ;
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_INT 1
8746: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8747: LD_ADDR_OWVAR 40
8751: PUSH
8752: LD_INT 31
8754: ST_TO_ADDR
// veh := CreateVehicle ;
8755: LD_ADDR_VAR 0 5
8759: PUSH
8760: CALL_OW 45
8764: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 212
8772: PPUSH
8773: LD_INT 135
8775: PPUSH
8776: LD_INT 5
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8786: LD_INT 0
8788: PPUSH
8789: LD_INT 3
8791: PPUSH
8792: LD_EXP 38
8796: PUSH
8797: LD_INT 1
8799: PLUS
8800: PPUSH
8801: CALL_OW 380
// un := CreateHuman ;
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8815: LD_VAR 0 2
8819: PPUSH
8820: LD_VAR 0 5
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8720
8831: POP
8832: POP
// PrepareSoldier ( false , 8 ) ;
8833: LD_INT 0
8835: PPUSH
8836: LD_INT 8
8838: PPUSH
8839: CALL_OW 381
// hc_class := class_sniper ;
8843: LD_ADDR_OWVAR 28
8847: PUSH
8848: LD_INT 5
8850: ST_TO_ADDR
// un := CreateHuman ;
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: CALL_OW 44
8860: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 4
8868: PPUSH
8869: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 136
8880: PPUSH
8881: LD_INT 92
8883: PPUSH
8884: CALL_OW 428
8888: PPUSH
8889: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8893: LD_INT 198
8895: PPUSH
8896: LD_INT 94
8898: PPUSH
8899: LD_INT 8
8901: PPUSH
8902: LD_INT 10
8904: PPUSH
8905: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8909: LD_INT 167
8911: PPUSH
8912: LD_INT 130
8914: PPUSH
8915: LD_INT 8
8917: PPUSH
8918: LD_INT 10
8920: PPUSH
8921: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_INT 24
8932: PPUSH
8933: LD_INT 0
8935: PPUSH
8936: CALL_OW 517
8940: ST_TO_ADDR
// legion_mines := [ ] ;
8941: LD_ADDR_EXP 39
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: DOUBLE
8954: LD_INT 1
8956: DEC
8957: ST_TO_ADDR
8958: LD_VAR 0 4
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PUSH
8967: FOR_TO
8968: IFFALSE 9070
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8970: LD_VAR 0 4
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PUSH
8979: LD_VAR 0 3
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 4
8989: PUSH
8990: LD_INT 2
8992: ARRAY
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9010: LD_ADDR_EXP 39
9014: PUSH
9015: LD_EXP 39
9019: PPUSH
9020: LD_EXP 39
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: PPUSH
9029: LD_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 3
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 4
9048: PUSH
9049: LD_INT 2
9051: ARRAY
9052: PUSH
9053: LD_VAR 0 3
9057: ARRAY
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 1
9067: ST_TO_ADDR
// end ;
9068: GO 8967
9070: POP
9071: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9072: LD_ADDR_EXP 41
9076: PUSH
9077: LD_INT 13
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 1
9099: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9100: LD_EXP 39
9104: PUSH
9105: LD_INT 24
9107: PPUSH
9108: LD_INT 22
9110: PUSH
9111: LD_OWVAR 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 70
9124: AND
9125: IFFALSE 9292
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
// begin enable ;
9134: ENABLE
// for i := legion_mines downto 1 do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: DOUBLE
9141: LD_EXP 39
9145: INC
9146: ST_TO_ADDR
9147: LD_INT 1
9149: PUSH
9150: FOR_DOWNTO
9151: IFFALSE 9290
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_EXP 39
9162: PUSH
9163: LD_VAR 0 1
9167: ARRAY
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_EXP 39
9177: PUSH
9178: LD_VAR 0 1
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: CALL_OW 428
9192: ST_TO_ADDR
// if un then
9193: LD_VAR 0 2
9197: IFFALSE 9288
// if GetSide ( un ) = legion_enemy then
9199: LD_VAR 0 2
9203: PPUSH
9204: CALL_OW 255
9208: PUSH
9209: LD_EXP 42
9213: EQUAL
9214: IFFALSE 9288
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9216: LD_EXP 39
9220: PUSH
9221: LD_VAR 0 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_EXP 39
9235: PUSH
9236: LD_VAR 0 1
9240: ARRAY
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: PPUSH
9246: LD_INT 8
9248: PPUSH
9249: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9253: LD_ADDR_EXP 39
9257: PUSH
9258: LD_EXP 39
9262: PPUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 3
9272: ST_TO_ADDR
// if not mine_vulc then
9273: LD_EXP 13
9277: NOT
9278: IFFALSE 9288
// mine_vulc := true ;
9280: LD_ADDR_EXP 13
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// end ; end ;
9288: GO 9150
9290: POP
9291: POP
// end ;
9292: PPOPN 2
9294: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9295: LD_OWVAR 1
9299: PUSH
9300: LD_INT 52500
9302: PUSH
9303: LD_INT 46200
9305: PUSH
9306: LD_INT 42000
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_OWVAR 67
9318: ARRAY
9319: GREATEREQUAL
9320: IFFALSE 9498
9322: GO 9324
9324: DISABLE
9325: LD_INT 0
9327: PPUSH
9328: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9329: LD_ADDR_VAR 0 1
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 469
9341: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9342: LD_VAR 0 1
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PUSH
9351: LD_INT 112
9353: EQUAL
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PUSH
9364: LD_INT 67
9366: EQUAL
9367: AND
9368: IFFALSE 9498
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9370: LD_ADDR_VAR 0 2
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: ST_TO_ADDR
// if not un then
9404: LD_VAR 0 2
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9498
// un := un [ 1 ] ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_VAR 0 2
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: ST_TO_ADDR
// if IsInUnit ( un ) then
9427: LD_VAR 0 2
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExitBuilding ( un ) ;
9438: LD_VAR 0 2
9442: PPUSH
9443: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_VAR 0 1
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 1
9465: PUSH
9466: LD_INT 2
9468: ARRAY
9469: PPUSH
9470: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9474: LD_VAR 0 2
9478: PPUSH
9479: LD_INT 207
9481: PPUSH
9482: LD_INT 123
9484: PPUSH
9485: CALL_OW 171
// AddComUnload ( un ) ;
9489: LD_VAR 0 2
9493: PPUSH
9494: CALL_OW 219
// end ; end ;
9498: PPOPN 2
9500: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9501: LD_INT 22
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PPUSH
9511: CALL_OW 69
9515: PUSH
9516: LD_INT 0
9518: GREATER
9519: IFFALSE 11105
9521: GO 9523
9523: DISABLE
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
// begin enable ;
9543: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9544: LD_ADDR_VAR 0 8
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PUSH
9578: LD_INT 1
9580: ARRAY
9581: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9582: LD_ADDR_VAR 0 9
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 30
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9620: LD_ADDR_VAR 0 10
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 6
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 8
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9676: LD_ADDR_VAR 0 11
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 32
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9710: LD_ADDR_VAR 0 16
9714: PUSH
9715: LD_INT 22
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 69
9743: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9744: LD_ADDR_VAR 0 15
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 8
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9778: LD_ADDR_VAR 0 14
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9812: LD_ADDR_VAR 0 13
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PPUSH
9841: CALL_OW 69
9845: ST_TO_ADDR
// if l_eng then
9846: LD_VAR 0 16
9850: IFFALSE 10268
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9852: LD_ADDR_VAR 0 5
9856: PUSH
9857: LD_INT 25
9859: PPUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 8
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 70
9888: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9889: LD_VAR 0 5
9893: PPUSH
9894: LD_INT 3
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 1000
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10053
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: LD_VAR 0 5
9930: PPUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 24
9936: PUSH
9937: LD_INT 1000
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: ST_TO_ADDR
// for i = 1 to l_eng do
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: DOUBLE
9959: LD_INT 1
9961: DEC
9962: ST_TO_ADDR
9963: LD_VAR 0 16
9967: PUSH
9968: FOR_TO
9969: IFFALSE 10049
// if IsInUnit ( l_eng [ i ] ) then
9971: LD_VAR 0 16
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: PPUSH
9982: CALL_OW 310
9986: IFFALSE 10005
// ComExitBuilding ( l_eng [ i ] ) else
9988: LD_VAR 0 16
9992: PUSH
9993: LD_VAR 0 2
9997: ARRAY
9998: PPUSH
9999: CALL_OW 122
10003: GO 10047
// if not HasTask ( l_eng [ i ] ) then
10005: LD_VAR 0 16
10009: PUSH
10010: LD_VAR 0 2
10014: ARRAY
10015: PPUSH
10016: CALL_OW 314
10020: NOT
10021: IFFALSE 10047
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10023: LD_VAR 0 16
10027: PUSH
10028: LD_VAR 0 2
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 130
10047: GO 9968
10049: POP
10050: POP
// end else
10051: GO 10268
// begin if legion_blist > 0 then
10053: LD_EXP 40
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: IFFALSE 10190
// begin for i = 1 to l_eng do
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: DOUBLE
10069: LD_INT 1
10071: DEC
10072: ST_TO_ADDR
10073: LD_VAR 0 16
10077: PUSH
10078: FOR_TO
10079: IFFALSE 10186
// if IsInUnit ( l_eng [ i ] ) then
10081: LD_VAR 0 16
10085: PUSH
10086: LD_VAR 0 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 310
10096: IFFALSE 10115
// ComExitBuilding ( l_eng [ i ] ) else
10098: LD_VAR 0 16
10102: PUSH
10103: LD_VAR 0 2
10107: ARRAY
10108: PPUSH
10109: CALL_OW 122
10113: GO 10184
// if not HasTask ( l_eng [ i ] ) then
10115: LD_VAR 0 16
10119: PUSH
10120: LD_VAR 0 2
10124: ARRAY
10125: PPUSH
10126: CALL_OW 314
10130: NOT
10131: IFFALSE 10184
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10133: LD_VAR 0 16
10137: PUSH
10138: LD_VAR 0 2
10142: ARRAY
10143: PPUSH
10144: LD_EXP 40
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PPUSH
10153: LD_EXP 40
10157: PUSH
10158: LD_INT 2
10160: ARRAY
10161: PPUSH
10162: LD_EXP 40
10166: PUSH
10167: LD_INT 3
10169: ARRAY
10170: PPUSH
10171: LD_EXP 40
10175: PUSH
10176: LD_INT 4
10178: ARRAY
10179: PPUSH
10180: CALL_OW 145
10184: GO 10078
10186: POP
10187: POP
// end else
10188: GO 10268
// for i = 1 to l_eng do
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: DOUBLE
10196: LD_INT 1
10198: DEC
10199: ST_TO_ADDR
10200: LD_VAR 0 16
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10266
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10208: LD_VAR 0 16
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PPUSH
10219: CALL_OW 310
10223: NOT
10224: PUSH
10225: LD_VAR 0 16
10229: PUSH
10230: LD_VAR 0 2
10234: ARRAY
10235: PPUSH
10236: CALL_OW 314
10240: NOT
10241: AND
10242: IFFALSE 10264
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10244: LD_VAR 0 16
10248: PUSH
10249: LD_VAR 0 2
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: CALL_OW 120
10264: GO 10205
10266: POP
10267: POP
// end ; end ; if l_factory then
10268: LD_VAR 0 9
10272: IFFALSE 10672
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10274: LD_INT 22
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 33
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 61
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: GREATER
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PUSH
10350: LD_INT 0
10352: GREATER
10353: AND
10354: IFFALSE 10474
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10356: LD_INT 22
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 61
10381: PUSH
10382: EMPTY
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: PUSH
10399: LD_INT 1
10401: ARRAY
10402: PPUSH
10403: LD_INT 22
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 34
10415: PUSH
10416: LD_INT 31
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 69
10431: PUSH
10432: LD_INT 1
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 8
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 34
10447: PUSH
10448: LD_INT 31
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: PPUSH
10470: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10474: LD_EXP 41
10478: PUSH
10479: LD_INT 0
10481: GREATER
10482: PUSH
10483: LD_VAR 0 9
10487: PPUSH
10488: CALL_OW 461
10492: PUSH
10493: LD_INT 2
10495: EQUAL
10496: AND
10497: IFFALSE 10582
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10499: LD_VAR 0 9
10503: PPUSH
10504: LD_EXP 41
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PPUSH
10513: LD_EXP 41
10517: PUSH
10518: LD_INT 2
10520: ARRAY
10521: PPUSH
10522: LD_EXP 41
10526: PUSH
10527: LD_INT 3
10529: ARRAY
10530: PPUSH
10531: LD_EXP 41
10535: PUSH
10536: LD_INT 4
10538: ARRAY
10539: PPUSH
10540: CALL_OW 125
// for i = 1 to 4 do
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10580
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10560: LD_ADDR_EXP 41
10564: PUSH
10565: LD_EXP 41
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 3
10577: ST_TO_ADDR
10578: GO 10557
10580: POP
10581: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10582: LD_VAR 0 11
10586: PPUSH
10587: LD_INT 35
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 72
10601: PUSH
10602: LD_INT 0
10604: GREATER
10605: PUSH
10606: LD_VAR 0 9
10610: PPUSH
10611: CALL_OW 461
10615: PUSH
10616: LD_INT 2
10618: EQUAL
10619: AND
10620: IFFALSE 10672
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: LD_INT 28
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: PPUSH
10668: CALL_OW 148
// end ; if legion_enemy > 0 then
10672: LD_EXP 42
10676: PUSH
10677: LD_INT 0
10679: GREATER
10680: IFFALSE 10963
// begin if tick mod 11 11$00 = 0 then
10682: LD_OWVAR 1
10686: PUSH
10687: LD_INT 23100
10689: MOD
10690: PUSH
10691: LD_INT 0
10693: EQUAL
10694: IFFALSE 10944
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_EXP 41
10705: PUSH
10706: LD_INT 13
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ADD
10720: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_EXP 41
10730: PUSH
10731: LD_INT 28
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 29
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 12
10755: ARRAY
10756: ADD
10757: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10758: LD_ADDR_EXP 41
10762: PUSH
10763: LD_EXP 41
10767: PUSH
10768: LD_INT 13
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ADD
10782: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10783: LD_ADDR_EXP 41
10787: PUSH
10788: LD_EXP 41
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 27
10798: PUSH
10799: LD_INT 29
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 12
10817: ARRAY
10818: ADD
10819: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10820: LD_ADDR_EXP 41
10824: PUSH
10825: LD_EXP 41
10829: PUSH
10830: LD_INT 13
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: ADD
10844: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10845: LD_ADDR_EXP 41
10849: PUSH
10850: LD_EXP 41
10854: PUSH
10855: LD_INT 28
10857: PUSH
10858: LD_INT 92
10860: PUSH
10861: LD_INT 29
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: ADD
10881: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10882: LD_ADDR_EXP 41
10886: PUSH
10887: LD_EXP 41
10891: PUSH
10892: LD_INT 13
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: ADD
10906: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10907: LD_ADDR_EXP 41
10911: PUSH
10912: LD_EXP 41
10916: PUSH
10917: LD_INT 28
10919: PUSH
10920: LD_INT 27
10922: PUSH
10923: LD_INT 29
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ADD
10943: ST_TO_ADDR
// end ; if legion_force >= 8 then
10944: LD_EXP 37
10948: PUSH
10949: LD_INT 8
10951: GREATEREQUAL
10952: IFFALSE 10963
// RaiseSailEvent ( event_legion_attack ) ;
10954: LD_EXP 21
10958: PPUSH
10959: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10963: LD_INT 22
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: IFFALSE 11105
// begin if l_cargo = false then
10993: LD_VAR 0 17
10997: PUSH
10998: LD_INT 0
11000: EQUAL
11001: IFFALSE 11037
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11003: LD_ADDR_VAR 0 17
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 34
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: ST_TO_ADDR
// if l_cargo then
11037: LD_VAR 0 17
11041: IFFALSE 11105
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11043: LD_ADDR_VAR 0 7
11047: PUSH
11048: LD_INT 14
11050: PPUSH
11051: CALL_OW 435
11055: ST_TO_ADDR
// if cr > 0 then
11056: LD_VAR 0 7
11060: PUSH
11061: LD_INT 0
11063: GREATER
11064: IFFALSE 11105
// if not HasTask ( l_cargo ) then
11066: LD_VAR 0 17
11070: PPUSH
11071: CALL_OW 314
11075: NOT
11076: IFFALSE 11105
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11078: LD_VAR 0 17
11082: PPUSH
11083: LD_VAR 0 7
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 7
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 117
// end ; end ; end ;
11105: PPOPN 17
11107: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11108: LD_OWVAR 67
11112: PUSH
11113: LD_INT 1
11115: GREATER
11116: IFFALSE 11321
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11127: LD_INT 35
11129: PPUSH
11130: LD_INT 12635
11132: PPUSH
11133: CALL_OW 12
11137: PPUSH
11138: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: ST_TO_ADDR
// p := 1 ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_INT 116
11191: PUSH
11192: LD_INT 139
11194: PUSH
11195: LD_INT 69
11197: PUSH
11198: LD_INT 13
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// for i = 1 to 2 do
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: DOUBLE
11213: LD_INT 1
11215: DEC
11216: ST_TO_ADDR
11217: LD_INT 2
11219: PUSH
11220: FOR_TO
11221: IFFALSE 11319
// begin if IsInUnit ( sci [ i ] ) then
11223: LD_VAR 0 2
11227: PUSH
11228: LD_VAR 0 1
11232: ARRAY
11233: PPUSH
11234: CALL_OW 310
11238: IFFALSE 11255
// ComExitBuilding ( sci [ i ] ) ;
11240: LD_VAR 0 2
11244: PUSH
11245: LD_VAR 0 1
11249: ARRAY
11250: PPUSH
11251: CALL_OW 122
// Wait ( 0 0$03 ) ;
11255: LD_INT 105
11257: PPUSH
11258: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11262: LD_VAR 0 2
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PPUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_VAR 0 4
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 4
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: ARRAY
11298: PPUSH
11299: CALL_OW 158
// p := p + 2 ;
11303: LD_ADDR_VAR 0 4
11307: PUSH
11308: LD_VAR 0 4
11312: PUSH
11313: LD_INT 2
11315: PLUS
11316: ST_TO_ADDR
// end ;
11317: GO 11220
11319: POP
11320: POP
// end ;
11321: PPOPN 4
11323: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11324: LD_INT 14
11326: PPUSH
11327: CALL_OW 435
11331: PUSH
11332: LD_INT 20
11334: LESS
11335: IFFALSE 11362
11337: GO 11339
11339: DISABLE
// begin enable ;
11340: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: LD_INT 14
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 55
// end ;
11362: END
// export function LegionAttack ( ) ; var path , units ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
// units := legion_force ;
11368: LD_ADDR_VAR 0 3
11372: PUSH
11373: LD_EXP 37
11377: ST_TO_ADDR
// legion_force := [ ] ;
11378: LD_ADDR_EXP 37
11382: PUSH
11383: EMPTY
11384: ST_TO_ADDR
// case legion_enemy of 1 :
11385: LD_EXP 42
11389: PUSH
11390: LD_INT 1
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11441
11398: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 174
11406: PUSH
11407: LD_INT 135
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 153
11416: PUSH
11417: LD_INT 146
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: LD_INT 122
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
11439: GO 11544
11441: LD_INT 2
11443: DOUBLE
11444: EQUAL
11445: IFTRUE 11449
11447: GO 11492
11449: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_INT 164
11457: PUSH
11458: LD_INT 73
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 130
11467: PUSH
11468: LD_INT 48
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 96
11477: PUSH
11478: LD_INT 48
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11544
11492: LD_INT 7
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11543
11500: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 174
11508: PUSH
11509: LD_INT 135
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 153
11518: PUSH
11519: LD_INT 146
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 118
11528: PUSH
11529: LD_INT 122
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11544
11543: POP
// repeat wait ( 0 0$1 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL 79644 0 2
11565: NOT
11566: IFFALSE 11544
// end ; end_of_file
11568: LD_VAR 0 1
11572: RET
// export function Action ; var un , gamemode , speaker ; begin
11573: LD_INT 0
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// if debug then
11579: LD_EXP 15
11583: IFFALSE 11610
// begin Difficulty := 2 ;
11585: LD_ADDR_OWVAR 67
11589: PUSH
11590: LD_INT 2
11592: ST_TO_ADDR
// gamemode := 3 ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// FogOff ( 7 ) ;
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 344
// end else
11608: GO 11636
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11610: LD_ADDR_OWVAR 67
11614: PUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 426
11622: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 426
11635: ST_TO_ADDR
// end ; if gamemode = 1 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 1
11643: EQUAL
11644: IFFALSE 11668
// begin your_side := 1 ;
11646: LD_ADDR_OWVAR 2
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// legion_enemy := 1 ;
11654: LD_ADDR_EXP 42
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// PrepareAmerican ;
11662: CALL 261 0 0
// end else
11666: GO 11720
// if gamemode = 2 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 2
11675: EQUAL
11676: IFFALSE 11700
// begin your_side := 2 ;
11678: LD_ADDR_OWVAR 2
11682: PUSH
11683: LD_INT 2
11685: ST_TO_ADDR
// legion_enemy := 2 ;
11686: LD_ADDR_EXP 42
11690: PUSH
11691: LD_INT 2
11693: ST_TO_ADDR
// PrepareArabian ;
11694: CALL 18998 0 0
// end else
11698: GO 11720
// begin your_side := 7 ;
11700: LD_ADDR_OWVAR 2
11704: PUSH
11705: LD_INT 7
11707: ST_TO_ADDR
// legion_enemy := 7 ;
11708: LD_ADDR_EXP 42
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// PrepareAlliance ;
11716: CALL 16182 0 0
// end ; if your_side = 1 then
11720: LD_OWVAR 2
11724: PUSH
11725: LD_INT 1
11727: EQUAL
11728: IFFALSE 12304
// begin Query ( QVul4 ) ;
11730: LD_STRING QVul4
11732: PPUSH
11733: CALL_OW 97
// InGameOn ;
11737: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11741: LD_INT 8
11743: PPUSH
11744: LD_INT 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 12
11752: PPUSH
11753: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11757: LD_INT 8
11759: PPUSH
11760: LD_INT 5
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11770: LD_INT 98
11772: PPUSH
11773: LD_INT 148
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11786: LD_INT 98
11788: PPUSH
11789: LD_INT 148
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11799: LD_INT 8
11801: PPUSH
11802: LD_INT 5
11804: PPUSH
11805: CALL_OW 86
// uc_side := 4 ;
11809: LD_ADDR_OWVAR 20
11813: PUSH
11814: LD_INT 4
11816: ST_TO_ADDR
// uc_nation := 1 ;
11817: LD_ADDR_OWVAR 21
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// hc_importance := 0 ;
11825: LD_ADDR_OWVAR 32
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11833: LD_INT 1
11835: PPUSH
11836: LD_INT 3
11838: PPUSH
11839: LD_EXP 26
11843: PPUSH
11844: CALL_OW 380
// un := CreateHuman ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: CALL_OW 44
11857: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 19
11865: PPUSH
11866: LD_INT 23
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 48
// hc_name := Stuart Carey ;
11876: LD_ADDR_OWVAR 26
11880: PUSH
11881: LD_STRING Stuart Carey
11883: ST_TO_ADDR
// hc_class := 1 ;
11884: LD_ADDR_OWVAR 28
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// hc_gallery := vulcano ;
11892: LD_ADDR_OWVAR 33
11896: PUSH
11897: LD_STRING vulcano
11899: ST_TO_ADDR
// hc_face_number := 1 ;
11900: LD_ADDR_OWVAR 34
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// us_guy := CreateHuman ;
11908: LD_ADDR_EXP 27
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// InitHc ;
11918: CALL_OW 19
// if rand ( 0 , 1 ) then
11922: LD_INT 0
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 12
11932: IFFALSE 11949
// PrepareHuman ( sex_male , 3 , 6 ) else
11934: LD_INT 1
11936: PPUSH
11937: LD_INT 3
11939: PPUSH
11940: LD_INT 6
11942: PPUSH
11943: CALL_OW 380
11947: GO 11962
// PrepareHuman ( sex_female , 4 , 8 ) ;
11949: LD_INT 2
11951: PPUSH
11952: LD_INT 4
11954: PPUSH
11955: LD_INT 8
11957: PPUSH
11958: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_INT 12
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11977: LD_EXP 24
11981: PPUSH
11982: LD_VAR 0 2
11986: PPUSH
11987: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11991: LD_INT 105
11993: PPUSH
11994: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
11998: LD_INT 4
12000: PPUSH
12001: LD_EXP 24
12005: PPUSH
12006: CALL_OW 292
12010: PUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 12
12018: PPUSH
12019: LD_INT 10
12021: PPUSH
12022: CALL_OW 307
12026: OR
12027: IFFALSE 11991
// ComTurnUnit ( un , us_commander ) ;
12029: LD_VAR 0 2
12033: PPUSH
12034: LD_EXP 24
12038: PPUSH
12039: CALL_OW 119
// if GetSex ( un ) = sex_male then
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL_OW 258
12052: PUSH
12053: LD_INT 1
12055: EQUAL
12056: IFFALSE 12139
// begin Say ( un , VD-un1 ) ;
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_STRING VD-un1
12065: PPUSH
12066: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12070: LD_EXP 24
12074: PPUSH
12075: LD_STRING VDc-1
12077: PPUSH
12078: CALL_OW 88
// Say ( un , VD-un2 ) ;
12082: LD_VAR 0 2
12086: PPUSH
12087: LD_STRING VD-un2
12089: PPUSH
12090: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12094: LD_EXP 24
12098: PPUSH
12099: LD_STRING VDc-2
12101: PPUSH
12102: CALL_OW 88
// Say ( un , VD-un3 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un3
12113: PPUSH
12114: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12118: LD_INT 7
12120: PPUSH
12121: CALL_OW 67
// Say ( un , VD-un4 ) ;
12125: LD_VAR 0 2
12129: PPUSH
12130: LD_STRING VD-un4
12132: PPUSH
12133: CALL_OW 88
// end else
12137: GO 12218
// begin Say ( un , VD-unf1 ) ;
12139: LD_VAR 0 2
12143: PPUSH
12144: LD_STRING VD-unf1
12146: PPUSH
12147: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12151: LD_EXP 24
12155: PPUSH
12156: LD_STRING VDc-1
12158: PPUSH
12159: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_STRING VD-unf2
12170: PPUSH
12171: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12175: LD_EXP 24
12179: PPUSH
12180: LD_STRING VDc-2
12182: PPUSH
12183: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf3
12194: PPUSH
12195: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12199: LD_INT 7
12201: PPUSH
12202: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12206: LD_VAR 0 2
12210: PPUSH
12211: LD_STRING VD-unf4
12213: PPUSH
12214: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 2
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12233: LD_EXP 24
12237: PPUSH
12238: LD_STRING VDc-3
12240: PPUSH
12241: CALL_OW 88
// InGameOff ;
12245: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12249: LD_STRING CVulc1
12251: PPUSH
12252: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12256: LD_INT 35
12258: PPUSH
12259: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12263: LD_VAR 0 2
12267: PPUSH
12268: CALL_OW 250
12272: PUSH
12273: LD_INT 2
12275: EQUAL
12276: PUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 251
12286: PUSH
12287: LD_INT 2
12289: EQUAL
12290: AND
12291: IFFALSE 12256
// RemoveUnit ( un ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 64
// end else
12302: GO 12681
// if your_side = 2 then
12304: LD_OWVAR 2
12308: PUSH
12309: LD_INT 2
12311: EQUAL
12312: IFFALSE 12528
// begin CenterNowOnUnits ( player_commander ) ;
12314: LD_EXP 11
12318: PPUSH
12319: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12323: LD_ADDR_VAR 0 4
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: LD_EXP 57
12361: DIFF
12362: ST_TO_ADDR
// if speaker then
12363: LD_VAR 0 4
12367: IFFALSE 12519
// begin InGameOn ;
12369: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12373: LD_EXP 57
12377: PPUSH
12378: LD_STRING VSd-1
12380: PPUSH
12381: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12385: LD_VAR 0 4
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 258
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12422
// Say ( speaker [ 1 ] , VAd-1 ) else
12404: LD_VAR 0 4
12408: PUSH
12409: LD_INT 1
12411: ARRAY
12412: PPUSH
12413: LD_STRING VAd-1
12415: PPUSH
12416: CALL_OW 88
12420: GO 12438
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12422: LD_VAR 0 4
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: LD_STRING VAfd-1
12433: PPUSH
12434: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12438: LD_EXP 57
12442: PPUSH
12443: LD_STRING VSd-2
12445: PPUSH
12446: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12450: LD_VAR 0 4
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12487
// Say ( speaker [ 1 ] , VAd-2 ) else
12469: LD_VAR 0 4
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_STRING VAd-2
12480: PPUSH
12481: CALL_OW 88
12485: GO 12503
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12487: LD_VAR 0 4
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: LD_STRING VAfd-2
12498: PPUSH
12499: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12503: LD_EXP 57
12507: PPUSH
12508: LD_STRING VSd-3
12510: PPUSH
12511: CALL_OW 88
// InGameOff ;
12515: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12519: LD_STRING CVulc5
12521: PPUSH
12522: CALL_OW 337
// end else
12526: GO 12681
// if your_side = 7 then
12528: LD_OWVAR 2
12532: PUSH
12533: LD_INT 7
12535: EQUAL
12536: IFFALSE 12681
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12538: LD_ADDR_VAR 0 4
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: LD_INT 7
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: LD_EXP 43
12576: DIFF
12577: ST_TO_ADDR
// if speaker then
12578: LD_VAR 0 4
12582: IFFALSE 12674
// begin CenterNowOnUnits ( al_commander ) ;
12584: LD_EXP 43
12588: PPUSH
12589: CALL_OW 87
// InGameOn ;
12593: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12597: LD_EXP 43
12601: PPUSH
12602: LD_STRING VPd-1
12604: PPUSH
12605: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12609: LD_VAR 0 4
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 258
12622: IFFALSE 12642
// Say ( speaker [ 1 ] , VPpd-1 ) else
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: LD_STRING VPpd-1
12635: PPUSH
12636: CALL_OW 88
12640: GO 12658
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_STRING VPpdf-1
12653: PPUSH
12654: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12658: LD_EXP 43
12662: PPUSH
12663: LD_STRING VPd-2
12665: PPUSH
12666: CALL_OW 88
// InGameOff ;
12670: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12674: LD_STRING CVulc7
12676: PPUSH
12677: CALL_OW 337
// end ; SaveForQuickRestart ;
12681: CALL_OW 22
// end ;
12685: LD_VAR 0 1
12689: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: IFFALSE 12762
12720: GO 12722
12722: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12723: LD_STRING CVulc6
12725: PPUSH
12726: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12730: LD_INT 52500
12732: PUSH
12733: LD_INT 47250
12735: PUSH
12736: LD_INT 42000
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_OWVAR 67
12748: ARRAY
12749: PPUSH
12750: CALL_OW 67
// ru_can_attack := true ;
12754: LD_ADDR_EXP 3
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// end ;
12762: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12763: LD_INT 50
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: OR
12822: IFFALSE 13056
12824: GO 12826
12826: DISABLE
12827: LD_INT 0
12829: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12830: LD_STRING CVulc2
12832: PPUSH
12833: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: PUSH
12871: LD_EXP 24
12875: DIFF
12876: ST_TO_ADDR
// DialogueOn ;
12877: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12881: LD_INT 10
12883: PPUSH
12884: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: CALL_OW 258
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: IFFALSE 12925
// Say ( speaker [ 1 ] , VDb-1 ) else
12907: LD_VAR 0 1
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_STRING VDb-1
12918: PPUSH
12919: CALL_OW 88
12923: GO 12941
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_STRING VDbf-1
12936: PPUSH
12937: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12941: LD_INT 10
12943: PPUSH
12944: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: CALL_OW 258
12961: PUSH
12962: LD_INT 1
12964: EQUAL
12965: IFFALSE 12985
// Say ( speaker [ 1 ] , VDb-2 ) else
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_STRING VDb-2
12978: PPUSH
12979: CALL_OW 88
12983: GO 13001
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_STRING VDbf-2
12996: PPUSH
12997: CALL_OW 88
// DWait ( 0 0$01 ) ;
13001: LD_INT 35
13003: PPUSH
13004: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13008: LD_EXP 24
13012: PPUSH
13013: LD_STRING VDb-com1
13015: PPUSH
13016: CALL_OW 88
// DialogueOff ;
13020: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13024: LD_INT 44100
13026: PUSH
13027: LD_INT 36750
13029: PUSH
13030: LD_INT 31500
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: ARRAY
13043: PPUSH
13044: CALL_OW 67
// ru_can_attack := true ;
13048: LD_ADDR_EXP 3
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// end ;
13056: PPOPN 1
13058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13059: LD_INT 22
13061: PUSH
13062: LD_INT 7
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: IFFALSE 13124
13089: GO 13091
13091: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13092: LD_INT 42000
13094: PUSH
13095: LD_INT 34650
13097: PUSH
13098: LD_INT 29400
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_OWVAR 67
13110: ARRAY
13111: PPUSH
13112: CALL_OW 67
// ru_can_attack := true ;
13116: LD_ADDR_EXP 3
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// end ;
13124: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13125: LD_INT 58
13127: PPUSH
13128: CALL_OW 255
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13343
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// DialogueOn ;
13178: CALL_OW 6
// if speaker then
13182: LD_VAR 0 1
13186: IFFALSE 13241
// if GetSex ( speaker [ 1 ] ) = sex_male then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 258
13201: PUSH
13202: LD_INT 1
13204: EQUAL
13205: IFFALSE 13225
// Say ( speaker [ 1 ] , VDe-1 ) else
13207: LD_VAR 0 1
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: LD_STRING VDe-1
13218: PPUSH
13219: CALL_OW 88
13223: GO 13241
// Say ( speaker [ 1 ] , VDef-1 ) ;
13225: LD_VAR 0 1
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: PPUSH
13234: LD_STRING VDef-1
13236: PPUSH
13237: CALL_OW 88
// case Query ( SibNote ) of 1 :
13241: LD_STRING SibNote
13243: PPUSH
13244: CALL_OW 97
13248: PUSH
13249: LD_INT 1
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13260
13257: POP
// ; end ;
13258: GO 13261
13260: POP
// if speaker then
13261: LD_VAR 0 1
13265: IFFALSE 13320
// if GetSex ( speaker [ 1 ] ) = sex_male then
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 258
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13304
// Say ( speaker [ 1 ] , VDe-2 ) else
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_STRING VDe-2
13297: PPUSH
13298: CALL_OW 88
13302: GO 13320
// Say ( speaker [ 1 ] , VDef-2 ) ;
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: PPUSH
13313: LD_STRING VDef-2
13315: PPUSH
13316: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13320: LD_EXP 24
13324: PPUSH
13325: LD_STRING VDc-4
13327: PPUSH
13328: CALL_OW 88
// DialogueOff ;
13332: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13336: LD_STRING CVulc3
13338: PPUSH
13339: CALL_OW 337
// end ;
13343: PPOPN 1
13345: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13346: LD_OWVAR 2
13350: PUSH
13351: LD_INT 1
13353: EQUAL
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PUSH
13384: LD_INT 0
13386: GREATER
13387: AND
13388: IFFALSE 13834
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
13396: PPUSH
13397: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13398: LD_INT 245
13400: PPUSH
13401: LD_INT 1295
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: CALL_OW 67
// DialogueOn ;
13413: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13417: LD_EXP 27
13421: PPUSH
13422: LD_STRING VDG-1
13424: PPUSH
13425: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13429: LD_EXP 24
13433: PPUSH
13434: LD_STRING VDc-5
13436: PPUSH
13437: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13441: LD_EXP 27
13445: PPUSH
13446: LD_STRING VDG-2
13448: PPUSH
13449: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13453: LD_EXP 24
13457: PPUSH
13458: LD_STRING VDc-6
13460: PPUSH
13461: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13465: LD_EXP 24
13469: PPUSH
13470: LD_STRING VDc-6a
13472: PPUSH
13473: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13477: LD_EXP 27
13481: PPUSH
13482: LD_STRING VDG-3
13484: PPUSH
13485: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13489: LD_EXP 24
13493: PPUSH
13494: LD_STRING VDc-7
13496: PPUSH
13497: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13501: LD_EXP 27
13505: PPUSH
13506: LD_STRING VDG-4
13508: PPUSH
13509: CALL_OW 94
// DialogueOff ;
13513: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13517: LD_STRING CVulc4
13519: PPUSH
13520: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13524: LD_INT 18900
13526: PUSH
13527: LD_INT 21000
13529: PUSH
13530: LD_INT 23100
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_OWVAR 67
13542: ARRAY
13543: PPUSH
13544: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13548: LD_ADDR_VAR 0 1
13552: PUSH
13553: DOUBLE
13554: LD_INT 1
13556: DEC
13557: ST_TO_ADDR
13558: LD_INT 4
13560: PUSH
13561: LD_INT 5
13563: PUSH
13564: LD_INT 6
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_OWVAR 67
13576: ARRAY
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13823
// begin uc_side := 1 ;
13581: LD_ADDR_OWVAR 20
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// uc_nation := 1 ;
13589: LD_ADDR_OWVAR 21
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13597: LD_INT 0
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: LD_INT 4
13605: PPUSH
13606: CALL_OW 12
13610: PPUSH
13611: LD_EXP 26
13615: PPUSH
13616: CALL_OW 380
// un := CreateHuman ;
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: CALL_OW 44
13629: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_INT 2
13637: PPUSH
13638: CALL_OW 233
// if GetClass ( un ) = 3 then
13642: LD_VAR 0 2
13646: PPUSH
13647: CALL_OW 257
13651: PUSH
13652: LD_INT 3
13654: EQUAL
13655: IFFALSE 13806
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13657: LD_ADDR_OWVAR 37
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_VAR 0 1
13676: PUSH
13677: LD_INT 2
13679: MOD
13680: ARRAY
13681: ST_TO_ADDR
// vc_engine := engine_combustion ;
13682: LD_ADDR_OWVAR 39
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// vc_control := control_manual ;
13690: LD_ADDR_OWVAR 38
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13698: LD_ADDR_OWVAR 40
13702: PUSH
13703: LD_INT 9
13705: PUSH
13706: LD_INT 9
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 1
13723: PPUSH
13724: LD_INT 4
13726: PPUSH
13727: CALL_OW 12
13731: ARRAY
13732: ST_TO_ADDR
// veh := CreateVehicle ;
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: CALL_OW 45
13742: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 2
13750: PPUSH
13751: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 77
13762: PPUSH
13763: LD_INT 88
13765: PPUSH
13766: CALL_OW 12
13770: PPUSH
13771: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 0
13785: PPUSH
13786: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: CALL_OW 52
// end else
13804: GO 13821
// PlaceUnitArea ( un , start_north , false ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: LD_INT 0
13816: PPUSH
13817: CALL_OW 49
// end ;
13821: GO 13578
13823: POP
13824: POP
// CenterNowOnUnits ( un ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: CALL_OW 87
// end ;
13834: PPOPN 3
13836: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13837: LD_INT 21
13839: PPUSH
13840: LD_INT 22
13842: PUSH
13843: LD_OWVAR 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 70
13856: IFFALSE 14177
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_OWVAR 2
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 25
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 3
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 4
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: PUSH
13941: LD_EXP 11
13945: DIFF
13946: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_INT 112
13959: PPUSH
13960: LD_INT 67
13962: PPUSH
13963: CALL_OW 73
13967: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 255
13977: PUSH
13978: LD_INT 7
13980: EQUAL
13981: IFFALSE 14024
// if GetSex ( un ) = sex_male then
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 258
13992: PUSH
13993: LD_INT 1
13995: EQUAL
13996: IFFALSE 14012
// Say ( un , VD-find-al ) else
13998: LD_VAR 0 1
14002: PPUSH
14003: LD_STRING VD-find-al
14005: PPUSH
14006: CALL_OW 88
14010: GO 14024
// Say ( un , VD-find-al-f ) ;
14012: LD_VAR 0 1
14016: PPUSH
14017: LD_STRING VD-find-al-f
14019: PPUSH
14020: CALL_OW 88
// if GetSide ( un ) = 2 then
14024: LD_VAR 0 1
14028: PPUSH
14029: CALL_OW 255
14033: PUSH
14034: LD_INT 2
14036: EQUAL
14037: IFFALSE 14080
// if GetSex ( un ) = sex_male then
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 258
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: IFFALSE 14068
// Say ( un , VD-find-ar ) else
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_STRING VD-find-ar
14061: PPUSH
14062: CALL_OW 88
14066: GO 14080
// Say ( un , VD-find-ar-f ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_STRING VD-find-ar-f
14075: PPUSH
14076: CALL_OW 88
// if GetSide ( un ) = 1 then
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 255
14089: PUSH
14090: LD_INT 1
14092: EQUAL
14093: IFFALSE 14160
// begin if GetSex ( un ) = sex_male then
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 258
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 14136
// begin Say ( un , VD-find-us ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_STRING VD-find-us
14117: PPUSH
14118: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_STRING VD-find-us2
14129: PPUSH
14130: CALL_OW 88
// end else
14134: GO 14160
// begin Say ( un , VD-find-us-f ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_STRING VD-find-us-f
14143: PPUSH
14144: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_STRING VD-find-us2-f
14155: PPUSH
14156: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14160: LD_INT 10
14162: PPUSH
14163: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14167: LD_INT 112
14169: PPUSH
14170: LD_INT 67
14172: PPUSH
14173: CALL_OW 86
// end ;
14177: PPOPN 2
14179: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14180: LD_EXP 8
14184: IFFALSE 14686
14186: GO 14188
14188: DISABLE
14189: LD_INT 0
14191: PPUSH
// begin if your_side = 1 then
14192: LD_OWVAR 2
14196: PUSH
14197: LD_INT 1
14199: EQUAL
14200: IFFALSE 14381
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PUSH
14236: LD_EXP 24
14240: DIFF
14241: ST_TO_ADDR
// if not speaker then
14242: LD_VAR 0 1
14246: NOT
14247: IFFALSE 14251
// exit ;
14249: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14251: LD_VAR 0 1
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: CALL_OW 258
14264: PUSH
14265: LD_INT 1
14267: EQUAL
14268: IFFALSE 14288
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14270: LD_VAR 0 1
14274: PUSH
14275: LD_INT 1
14277: ARRAY
14278: PPUSH
14279: LD_STRING VD-us-sci-art-1
14281: PPUSH
14282: CALL_OW 88
14286: GO 14304
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14288: LD_VAR 0 1
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: LD_STRING VD-us-fsci-art-1
14299: PPUSH
14300: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14304: LD_EXP 24
14308: PPUSH
14309: LD_STRING VDc-art1
14311: PPUSH
14312: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14316: LD_VAR 0 1
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: CALL_OW 258
14329: PUSH
14330: LD_INT 1
14332: EQUAL
14333: IFFALSE 14353
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14335: LD_VAR 0 1
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: LD_STRING VD-us-sci-art-2
14346: PPUSH
14347: CALL_OW 88
14351: GO 14369
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_STRING VD-us-fsci-art-2
14364: PPUSH
14365: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14369: LD_EXP 24
14373: PPUSH
14374: LD_STRING VDc-art2
14376: PPUSH
14377: CALL_OW 88
// end ; if your_side = 2 then
14381: LD_OWVAR 2
14385: PUSH
14386: LD_INT 2
14388: EQUAL
14389: IFFALSE 14493
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14391: LD_ADDR_VAR 0 1
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 25
14408: PUSH
14409: LD_INT 4
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: PUSH
14425: LD_EXP 57
14429: DIFF
14430: ST_TO_ADDR
// if not speaker then
14431: LD_VAR 0 1
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: CALL_OW 258
14453: PUSH
14454: LD_INT 1
14456: EQUAL
14457: IFFALSE 14477
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14459: LD_VAR 0 1
14463: PUSH
14464: LD_INT 1
14466: ARRAY
14467: PPUSH
14468: LD_STRING VD-ar-sci-art-1
14470: PPUSH
14471: CALL_OW 88
14475: GO 14493
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: LD_STRING VD-ar-fsci-art-1
14488: PPUSH
14489: CALL_OW 88
// end ; if your_side = 7 then
14493: LD_OWVAR 2
14497: PUSH
14498: LD_INT 7
14500: EQUAL
14501: IFFALSE 14686
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 7
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: PUSH
14537: LD_EXP 43
14541: DIFF
14542: ST_TO_ADDR
// if speaker then
14543: LD_VAR 0 1
14547: IFFALSE 14679
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: CALL_OW 258
14562: PUSH
14563: LD_INT 1
14565: EQUAL
14566: IFFALSE 14586
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14568: LD_VAR 0 1
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: PPUSH
14577: LD_STRING VD-al-sci-art-1
14579: PPUSH
14580: CALL_OW 88
14584: GO 14602
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14586: LD_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: LD_STRING VD-al-fsci-art-1
14597: PPUSH
14598: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14602: LD_EXP 43
14606: PPUSH
14607: LD_STRING VPd-art-1
14609: PPUSH
14610: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: CALL_OW 258
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: IFFALSE 14651
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14633: LD_VAR 0 1
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PPUSH
14642: LD_STRING VD-al-sci-art-2
14644: PPUSH
14645: CALL_OW 88
14649: GO 14667
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: ARRAY
14659: PPUSH
14660: LD_STRING VD-al-fsci-art-2
14662: PPUSH
14663: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14667: LD_EXP 43
14671: PPUSH
14672: LD_STRING VPd-art-2
14674: PPUSH
14675: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14679: LD_STRING CVulc7out
14681: PPUSH
14682: CALL_OW 337
// end ; end ;
14686: PPOPN 1
14688: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 8
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: IFFALSE 14862
14721: GO 14723
14723: DISABLE
14724: LD_INT 0
14726: PPUSH
// begin if your_side = 1 then
14727: LD_OWVAR 2
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: IFFALSE 14818
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 69
14756: PUSH
14757: LD_EXP 24
14761: DIFF
14762: ST_TO_ADDR
// if speaker then
14763: LD_VAR 0 1
14767: IFFALSE 14818
// if GetSex ( speaker [ 1 ] ) then
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: CALL_OW 258
14782: IFFALSE 14802
// Say ( speaker [ 1 ] , VD-legion-us ) else
14784: LD_VAR 0 1
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: LD_STRING VD-legion-us
14795: PPUSH
14796: CALL_OW 88
14800: GO 14818
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: LD_STRING VD-legion-us-f
14813: PPUSH
14814: CALL_OW 88
// end ; if your_side = 2 then
14818: LD_OWVAR 2
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: IFFALSE 14840
// Say ( ar_commander , VD-legion-ar ) ;
14828: LD_EXP 57
14832: PPUSH
14833: LD_STRING VD-legion-ar
14835: PPUSH
14836: CALL_OW 88
// if your_side = 7 then
14840: LD_OWVAR 2
14844: PUSH
14845: LD_INT 7
14847: EQUAL
14848: IFFALSE 14862
// Say ( al_commander , VD-legion-al ) ;
14850: LD_EXP 43
14854: PPUSH
14855: LD_STRING VD-legion-al
14857: PPUSH
14858: CALL_OW 88
// end ;
14862: PPOPN 1
14864: END
// every 0 0$01 trigger mine_vulc do
14865: LD_EXP 13
14869: IFFALSE 14886
14871: GO 14873
14873: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14874: LD_EXP 11
14878: PPUSH
14879: LD_STRING VD-vulc-mines
14881: PPUSH
14882: CALL_OW 88
// end ;
14886: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14887: LD_INT 22
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_INT 0
14904: EQUAL
14905: PUSH
14906: LD_OWVAR 2
14910: PUSH
14911: LD_INT 2
14913: NONEQUAL
14914: AND
14915: IFFALSE 14924
14917: GO 14919
14919: DISABLE
// Win ;
14920: CALL 14981 0 0
14924: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14925: LD_INT 2
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 8
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: LD_INT 0
14960: EQUAL
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: LD_INT 2
14969: EQUAL
14970: AND
14971: IFFALSE 14980
14973: GO 14975
14975: DISABLE
// Win ;
14976: CALL 14981 0 0
14980: END
// function Win ; var points ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
// case Query ( VulcWin ) of 1 :
14985: LD_STRING VulcWin
14987: PPUSH
14988: CALL_OW 97
14992: PUSH
14993: LD_INT 1
14995: DOUBLE
14996: EQUAL
14997: IFTRUE 15001
14999: GO 15004
15001: POP
// ; end ;
15002: GO 15005
15004: POP
// if medal_enabled then
15005: LD_EXP 14
15009: IFFALSE 15023
// AddMedal ( vulc_1 , 1 ) else
15011: LD_STRING vulc_1
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 101
15021: GO 15034
// AddMedal ( vulc_1 , - 1 ) ;
15023: LD_STRING vulc_1
15025: PPUSH
15026: LD_INT 1
15028: NEG
15029: PPUSH
15030: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15034: LD_INT 22
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: IFFALSE 15066
// AddMedal ( vulc_2 , 1 ) else
15054: LD_STRING vulc_2
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 101
15064: GO 15077
// AddMedal ( vulc_2 , - 1 ) ;
15066: LD_STRING vulc_2
15068: PPUSH
15069: LD_INT 1
15071: NEG
15072: PPUSH
15073: CALL_OW 101
// points := CalculateCommanderPoints ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: CALL 2336 0 0
15086: ST_TO_ADDR
// if points >= 2000 then
15087: LD_VAR 0 2
15091: PUSH
15092: LD_INT 2000
15094: GREATEREQUAL
15095: IFFALSE 15109
// AddMedal ( vulc_3 , 2 ) else
15097: LD_STRING vulc_3
15099: PPUSH
15100: LD_INT 2
15102: PPUSH
15103: CALL_OW 101
15107: GO 15142
// if points >= 0 then
15109: LD_VAR 0 2
15113: PUSH
15114: LD_INT 0
15116: GREATEREQUAL
15117: IFFALSE 15131
// AddMedal ( vulc_3 , 1 ) else
15119: LD_STRING vulc_3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 101
15129: GO 15142
// AddMedal ( vulc_3 , - 1 ) ;
15131: LD_STRING vulc_3
15133: PPUSH
15134: LD_INT 1
15136: NEG
15137: PPUSH
15138: CALL_OW 101
// GiveMedals ( MAIN ) ;
15142: LD_STRING MAIN
15144: PPUSH
15145: CALL_OW 102
// YouWin ;
15149: CALL_OW 103
// end ; end_of_file
15153: LD_VAR 0 1
15157: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15158: LD_INT 13
15160: PPUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 70
15175: IFFALSE 15235
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
// begin enable ;
15184: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_INT 13
15192: PPUSH
15193: LD_INT 21
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 70
15207: PUSH
15208: FOR_IN
15209: IFFALSE 15233
// if GetLives ( i ) then
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 256
15220: IFFALSE 15231
// KillUnit ( i ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 66
15231: GO 15208
15233: POP
15234: POP
// end ;
15235: PPOPN 2
15237: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: PUSH
15248: LD_OWVAR 2
15252: EQUAL
15253: IFFALSE 15263
// player_res_art := true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// end ;
15263: PPOPN 1
15265: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15266: LD_INT 22
15268: PUSH
15269: LD_OWVAR 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 8
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 30
15303: PUSH
15304: LD_INT 11
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: PUSH
15326: LD_EXP 6
15330: AND
15331: IFFALSE 15688
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// xy := FindArtifact ( 1 ) ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 469
15353: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_OWVAR 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 30
15376: PUSH
15377: LD_INT 8
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 11
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PPUSH
15419: LD_VAR 0 1
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 1
15432: PUSH
15433: LD_INT 2
15435: ARRAY
15436: PPUSH
15437: CALL_OW 73
15441: ST_TO_ADDR
// if player_artifact_ready = false then
15442: LD_EXP 8
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: IFFALSE 15564
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15452: LD_VAR 0 2
15456: PPUSH
15457: LD_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: LD_VAR 0 1
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PPUSH
15475: CALL_OW 297
15479: PUSH
15480: LD_INT 6
15482: LESS
15483: IFFALSE 15544
// begin if BuildingStatus ( lab ) = bs_idle then
15485: LD_VAR 0 2
15489: PPUSH
15490: CALL_OW 461
15494: PUSH
15495: LD_INT 2
15497: EQUAL
15498: IFFALSE 15522
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15500: LD_OWVAR 2
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_INT 2
15510: PPUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: CALL_OW 468
15520: GO 15542
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15522: LD_OWVAR 2
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: LD_INT 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 468
// end else
15542: GO 15564
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15544: LD_OWVAR 2
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: LD_VAR 0 2
15559: PPUSH
15560: CALL_OW 468
// if player_artifact_ready then
15564: LD_EXP 8
15568: IFFALSE 15688
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 1
15579: PUSH
15580: LD_INT 1
15582: ARRAY
15583: PPUSH
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 297
15597: PUSH
15598: LD_INT 6
15600: LESS
15601: IFFALSE 15666
// begin if BuildingStatus ( lab ) = bs_idle then
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 461
15612: PUSH
15613: LD_INT 2
15615: EQUAL
15616: IFFALSE 15642
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_EXP 9
15627: PPUSH
15628: LD_INT 4
15630: PPUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: CALL_OW 468
15640: GO 15664
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15642: LD_OWVAR 2
15646: PPUSH
15647: LD_EXP 9
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: LD_VAR 0 2
15659: PPUSH
15660: CALL_OW 468
// end else
15664: GO 15688
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
// end ;
15688: PPOPN 2
15690: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15691: LD_INT 0
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15697: LD_ADDR_VAR 0 5
15701: PUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 469
15709: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15710: LD_ADDR_VAR 0 7
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_OWVAR 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 30
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: LD_INT 11
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: PPUSH
15764: LD_VAR 0 5
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_VAR 0 5
15777: PUSH
15778: LD_INT 2
15780: ARRAY
15781: PPUSH
15782: CALL_OW 73
15786: ST_TO_ADDR
// if icon = art_exp_left then
15787: LD_VAR 0 2
15791: PUSH
15792: LD_INT 1
15794: EQUAL
15795: IFFALSE 15848
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15797: LD_VAR 0 7
15801: PPUSH
15802: LD_EXP 10
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15814: LD_VAR 0 7
15818: PPUSH
15819: LD_EXP 7
15823: PPUSH
15824: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15828: LD_OWVAR 2
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_INT 0
15838: PPUSH
15839: LD_VAR 0 7
15843: PPUSH
15844: CALL_OW 468
// end ; if icon = art_icon then
15848: LD_VAR 0 2
15852: PUSH
15853: LD_EXP 9
15857: EQUAL
15858: IFFALSE 16091
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: IN
15880: IFFALSE 16091
// begin side := GetSide ( cr1 ) ;
15882: LD_ADDR_VAR 0 8
15886: PUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: CALL_OW 255
15896: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15897: LD_INT 22
15899: PUSH
15900: LD_VAR 0 8
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_INT 0
15930: GREATER
15931: IFFALSE 16091
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15933: LD_ADDR_VAR 0 6
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_VAR 0 8
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 26
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 27
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 30
15975: PUSH
15976: LD_INT 28
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16012
// KillUnit ( i ) ;
16001: LD_VAR 0 6
16005: PPUSH
16006: CALL_OW 66
16010: GO 15998
16012: POP
16013: POP
// medal_enabled := true ;
16014: LD_ADDR_EXP 14
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// player_res_art := false ;
16022: LD_ADDR_EXP 6
16026: PUSH
16027: LD_INT 0
16029: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16030: LD_OWVAR 2
16034: PPUSH
16035: LD_EXP 9
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: LD_VAR 0 7
16047: PPUSH
16048: CALL_OW 468
// wait ( time_to_reuse ) ;
16052: LD_EXP 12
16056: PPUSH
16057: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16061: LD_OWVAR 2
16065: PPUSH
16066: LD_EXP 9
16070: PPUSH
16071: LD_INT 4
16073: PPUSH
16074: LD_VAR 0 7
16078: PPUSH
16079: CALL_OW 468
// player_res_art := true ;
16083: LD_ADDR_EXP 6
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// end ; end ; end ; end ;
16091: PPOPN 8
16093: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 255
16103: PUSH
16104: LD_OWVAR 2
16108: EQUAL
16109: IFFALSE 16146
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16111: LD_OWVAR 2
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_INT 0
16121: PPUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 468
// player_artifact_ready := true ;
16131: LD_ADDR_EXP 8
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16139: LD_STRING ArtVulcano
16141: PPUSH
16142: CALL_OW 339
// end ; end ;
16146: PPOPN 1
16148: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16149: LD_ADDR_EXP 7
16153: PUSH
16154: LD_VAR 0 2
16158: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 2
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// end ; end_of_file end_of_file
16179: PPOPN 2
16181: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16182: LD_INT 0
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16189: LD_ADDR_EXP 45
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: LD_INT 6
16199: PUSH
16200: LD_INT 5
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: LD_OWVAR 67
16212: ARRAY
16213: ST_TO_ADDR
// al_force := [ ] ;
16214: LD_ADDR_EXP 44
16218: PUSH
16219: EMPTY
16220: ST_TO_ADDR
// RemoveAlliance ;
16221: CALL 16874 0 0
// ResetFog ;
16225: CALL_OW 335
// your_side := 7 ;
16229: LD_ADDR_OWVAR 2
16233: PUSH
16234: LD_INT 7
16236: ST_TO_ADDR
// uc_side := 7 ;
16237: LD_ADDR_OWVAR 20
16241: PUSH
16242: LD_INT 7
16244: ST_TO_ADDR
// hc_gallery :=  ;
16245: LD_ADDR_OWVAR 33
16249: PUSH
16250: LD_STRING 
16252: ST_TO_ADDR
// hc_name :=  ;
16253: LD_ADDR_OWVAR 26
16257: PUSH
16258: LD_STRING 
16260: ST_TO_ADDR
// hc_importance := 0 ;
16261: LD_ADDR_OWVAR 32
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// for i = 1 to 17 do
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: DOUBLE
16275: LD_INT 1
16277: DEC
16278: ST_TO_ADDR
16279: LD_INT 17
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16363
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16285: LD_ADDR_OWVAR 21
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PPUSH
16303: LD_INT 2
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16312: LD_INT 0
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: LD_INT 4
16320: PPUSH
16321: CALL_OW 12
16325: PPUSH
16326: LD_EXP 45
16330: PPUSH
16331: CALL_OW 380
// un := CreateHuman ;
16335: LD_ADDR_VAR 0 4
16339: PUSH
16340: CALL_OW 44
16344: ST_TO_ADDR
// al_force := al_force ^ un ;
16345: LD_ADDR_EXP 44
16349: PUSH
16350: LD_EXP 44
16354: PUSH
16355: LD_VAR 0 4
16359: ADD
16360: ST_TO_ADDR
// end ;
16361: GO 16282
16363: POP
16364: POP
// hc_importance := 100 ;
16365: LD_ADDR_OWVAR 32
16369: PUSH
16370: LD_INT 100
16372: ST_TO_ADDR
// uc_nation := 1 ;
16373: LD_ADDR_OWVAR 21
16377: PUSH
16378: LD_INT 1
16380: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16381: LD_INT 1
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: LD_EXP 45
16391: PPUSH
16392: CALL_OW 380
// al_commander := CreateHuman ;
16396: LD_ADDR_EXP 43
16400: PUSH
16401: CALL_OW 44
16405: ST_TO_ADDR
// player_commander := al_commander ;
16406: LD_ADDR_EXP 11
16410: PUSH
16411: LD_EXP 43
16415: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16416: LD_ADDR_VAR 0 5
16420: PUSH
16421: LD_STRING text
16423: PPUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 9
16429: PUSH
16430: LD_INT 8
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: LD_OWVAR 67
16442: ARRAY
16443: PPUSH
16444: LD_INT 9
16446: PUSH
16447: LD_INT 9
16449: PUSH
16450: LD_INT 8
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: LD_OWVAR 67
16462: ARRAY
16463: PPUSH
16464: LD_INT -5
16466: PUSH
16467: LD_EXP 43
16471: PUSH
16472: LD_INT -3
16474: PUSH
16475: LD_INT -2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: PUSH
16484: LD_EXP 44
16488: ADD
16489: PPUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 4
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 9
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 42
16534: ST_TO_ADDR
// team := team ^ al_commander ;
16535: LD_ADDR_VAR 0 5
16539: PUSH
16540: LD_VAR 0 5
16544: PUSH
16545: LD_EXP 43
16549: ADD
16550: ST_TO_ADDR
// for i = 1 to team do
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_VAR 0 5
16565: PUSH
16566: FOR_TO
16567: IFFALSE 16867
// begin if GetClass ( team [ i ] ) = class_mechanic then
16569: LD_VAR 0 5
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PPUSH
16580: CALL_OW 257
16584: PUSH
16585: LD_INT 3
16587: EQUAL
16588: IFFALSE 16844
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16590: LD_ADDR_OWVAR 21
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: LD_INT 3
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 2
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: ST_TO_ADDR
// if uc_nation = 1 then
16617: LD_OWVAR 21
16621: PUSH
16622: LD_INT 1
16624: EQUAL
16625: IFFALSE 16709
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16627: LD_ADDR_OWVAR 37
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: LD_VAR 0 2
16650: PUSH
16651: LD_INT 3
16653: MOD
16654: PUSH
16655: LD_INT 1
16657: PLUS
16658: ARRAY
16659: ST_TO_ADDR
// vc_engine := engine_siberite ;
16660: LD_ADDR_OWVAR 39
16664: PUSH
16665: LD_INT 3
16667: ST_TO_ADDR
// vc_control := control_manual ;
16668: LD_ADDR_OWVAR 38
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16676: LD_ADDR_OWVAR 40
16680: PUSH
16681: LD_INT 4
16683: PUSH
16684: LD_INT 5
16686: PUSH
16687: LD_INT 9
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: PPUSH
16698: LD_INT 3
16700: PPUSH
16701: CALL_OW 12
16705: ARRAY
16706: ST_TO_ADDR
// end else
16707: GO 16785
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16709: LD_ADDR_OWVAR 37
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_INT 2
16731: MOD
16732: PUSH
16733: LD_INT 1
16735: PLUS
16736: ARRAY
16737: ST_TO_ADDR
// vc_engine := engine_siberite ;
16738: LD_ADDR_OWVAR 39
16742: PUSH
16743: LD_INT 3
16745: ST_TO_ADDR
// vc_control := control_manual ;
16746: LD_ADDR_OWVAR 38
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16754: LD_ADDR_OWVAR 40
16758: PUSH
16759: LD_INT 44
16761: PUSH
16762: LD_INT 45
16764: PUSH
16765: LD_INT 43
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 3
16778: PPUSH
16779: CALL_OW 12
16783: ARRAY
16784: ST_TO_ADDR
// end ; un := CreateVehicle ;
16785: LD_ADDR_VAR 0 4
16789: PUSH
16790: CALL_OW 45
16794: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_INT 5
16802: PPUSH
16803: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16807: LD_VAR 0 4
16811: PPUSH
16812: LD_INT 15
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16822: LD_VAR 0 5
16826: PUSH
16827: LD_VAR 0 2
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 4
16837: PPUSH
16838: CALL_OW 52
// end else
16842: GO 16865
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16844: LD_VAR 0 5
16848: PUSH
16849: LD_VAR 0 2
16853: ARRAY
16854: PPUSH
16855: LD_INT 15
16857: PPUSH
16858: LD_INT 0
16860: PPUSH
16861: CALL_OW 49
// end ;
16865: GO 16566
16867: POP
16868: POP
// end ;
16869: LD_VAR 0 1
16873: RET
// export function RemoveAlliance ; var i ; begin
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16878: LD_INT 22
16880: PUSH
16881: LD_INT 7
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 30
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16915: LD_ADDR_VAR 0 2
16919: PUSH
16920: LD_INT 22
16922: PUSH
16923: LD_INT 7
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PPUSH
16930: CALL_OW 69
16934: PUSH
16935: FOR_IN
16936: IFFALSE 16949
// RemoveUnit ( i ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 64
16947: GO 16935
16949: POP
16950: POP
// end ;
16951: LD_VAR 0 1
16955: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16956: LD_INT 0
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16962: LD_INT 31
16964: PPUSH
16965: LD_INT 7
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16975: LD_INT 32
16977: PPUSH
16978: LD_INT 7
16980: PPUSH
16981: LD_INT 2
16983: PPUSH
16984: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16988: LD_INT 59
16990: PPUSH
16991: LD_INT 7
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17001: LD_ADDR_EXP 45
17005: PUSH
17006: LD_INT 5
17008: PUSH
17009: LD_INT 6
17011: PUSH
17012: LD_INT 7
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: LD_OWVAR 67
17024: ARRAY
17025: ST_TO_ADDR
// al_force := [ ] ;
17026: LD_ADDR_EXP 44
17030: PUSH
17031: EMPTY
17032: ST_TO_ADDR
// al_vehs := [ ] ;
17033: LD_ADDR_EXP 50
17037: PUSH
17038: EMPTY
17039: ST_TO_ADDR
// uc_side := 7 ;
17040: LD_ADDR_OWVAR 20
17044: PUSH
17045: LD_INT 7
17047: ST_TO_ADDR
// uc_nation := 1 ;
17048: LD_ADDR_OWVAR 21
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
// bc_type := b_oil_mine ;
17056: LD_ADDR_OWVAR 42
17060: PUSH
17061: LD_INT 29
17063: ST_TO_ADDR
// b := CreateBuilding ;
17064: LD_ADDR_VAR 0 4
17068: PUSH
17069: CALL_OW 46
17073: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17074: LD_VAR 0 4
17078: PPUSH
17079: LD_INT 61
17081: PPUSH
17082: LD_INT 7
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: LD_INT 0
17090: PPUSH
17091: CALL_OW 50
// bc_type := b_siberite_mine ;
17095: LD_ADDR_OWVAR 42
17099: PUSH
17100: LD_INT 30
17102: ST_TO_ADDR
// b := CreateBuilding ;
17103: LD_ADDR_VAR 0 4
17107: PUSH
17108: CALL_OW 46
17112: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_INT 69
17120: PPUSH
17121: LD_INT 13
17123: PPUSH
17124: LD_INT 0
17126: PPUSH
17127: LD_INT 0
17129: PPUSH
17130: CALL_OW 50
// hc_gallery :=  ;
17134: LD_ADDR_OWVAR 33
17138: PUSH
17139: LD_STRING 
17141: ST_TO_ADDR
// hc_name :=  ;
17142: LD_ADDR_OWVAR 26
17146: PUSH
17147: LD_STRING 
17149: ST_TO_ADDR
// hc_importance := 0 ;
17150: LD_ADDR_OWVAR 32
17154: PUSH
17155: LD_INT 0
17157: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17158: LD_ADDR_VAR 0 2
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 7
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 32
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: PUSH
17192: FOR_IN
17193: IFFALSE 17263
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17195: LD_ADDR_OWVAR 21
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_INT 2
17215: PPUSH
17216: CALL_OW 12
17220: ARRAY
17221: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17222: LD_INT 0
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: LD_EXP 45
17232: PPUSH
17233: CALL_OW 380
// un := CreateHuman ;
17237: LD_ADDR_VAR 0 3
17241: PUSH
17242: CALL_OW 44
17246: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 52
// end ;
17261: GO 17192
17263: POP
17264: POP
// for i = 1 to 3 do
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: DOUBLE
17271: LD_INT 1
17273: DEC
17274: ST_TO_ADDR
17275: LD_INT 3
17277: PUSH
17278: FOR_TO
17279: IFFALSE 17347
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17281: LD_ADDR_OWVAR 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17308: LD_INT 0
17310: PPUSH
17311: LD_INT 4
17313: PPUSH
17314: LD_EXP 45
17318: PPUSH
17319: CALL_OW 380
// un := CreateHuman ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: CALL_OW 44
17332: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 164
17340: PPUSH
17341: CALL_OW 52
// end ;
17345: GO 17278
17347: POP
17348: POP
// for i = 1 to 4 do
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: DOUBLE
17355: LD_INT 1
17357: DEC
17358: ST_TO_ADDR
17359: LD_INT 4
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17454
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17365: LD_ADDR_OWVAR 21
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PPUSH
17383: LD_INT 2
17385: PPUSH
17386: CALL_OW 12
17390: ARRAY
17391: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17392: LD_INT 0
17394: PPUSH
17395: LD_INT 5
17397: PUSH
17398: LD_INT 9
17400: PUSH
17401: LD_INT 9
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_INT 3
17414: PPUSH
17415: CALL_OW 12
17419: ARRAY
17420: PPUSH
17421: LD_EXP 45
17425: PPUSH
17426: CALL_OW 380
// un := CreateHuman ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: CALL_OW 44
17439: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 173
17447: PPUSH
17448: CALL_OW 52
// end ;
17452: GO 17362
17454: POP
17455: POP
// for i = 1 to 4 do
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: DOUBLE
17462: LD_INT 1
17464: DEC
17465: ST_TO_ADDR
17466: LD_INT 4
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17568
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17472: LD_ADDR_OWVAR 21
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 3
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_INT 2
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17499: LD_INT 0
17501: PPUSH
17502: LD_INT 3
17504: PPUSH
17505: LD_EXP 45
17509: PPUSH
17510: CALL_OW 380
// un := CreateHuman ;
17514: LD_ADDR_VAR 0 3
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17524: LD_VAR 0 3
17528: PPUSH
17529: LD_INT 22
17531: PUSH
17532: LD_INT 7
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: CALL_OW 52
// end ;
17566: GO 17469
17568: POP
17569: POP
// for i = 1 to 4 do
17570: LD_ADDR_VAR 0 2
17574: PUSH
17575: DOUBLE
17576: LD_INT 1
17578: DEC
17579: ST_TO_ADDR
17580: LD_INT 4
17582: PUSH
17583: FOR_TO
17584: IFFALSE 17652
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17586: LD_ADDR_OWVAR 21
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: LD_INT 3
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17613: LD_INT 0
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: LD_EXP 45
17623: PPUSH
17624: CALL_OW 380
// un := CreateHuman ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: CALL_OW 44
17637: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 162
17645: PPUSH
17646: CALL_OW 52
// end ;
17650: GO 17583
17652: POP
17653: POP
// uc_nation := 3 ;
17654: LD_ADDR_OWVAR 21
17658: PUSH
17659: LD_INT 3
17661: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17662: LD_ADDR_OWVAR 37
17666: PUSH
17667: LD_INT 21
17669: ST_TO_ADDR
// vc_engine := engine_siberite ;
17670: LD_ADDR_OWVAR 39
17674: PUSH
17675: LD_INT 3
17677: ST_TO_ADDR
// vc_control := control_computer ;
17678: LD_ADDR_OWVAR 38
17682: PUSH
17683: LD_INT 3
17685: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17686: LD_ADDR_OWVAR 40
17690: PUSH
17691: LD_INT 51
17693: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17694: CALL_OW 45
17698: PPUSH
17699: LD_INT 49
17701: PPUSH
17702: LD_INT 13
17704: PPUSH
17705: LD_INT 0
17707: PPUSH
17708: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17712: LD_ADDR_EXP 52
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_INT 7
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 30
17729: PUSH
17730: LD_INT 33
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17746: LD_ADDR_VAR 0 2
17750: PUSH
17751: DOUBLE
17752: LD_INT 1
17754: DEC
17755: ST_TO_ADDR
17756: LD_INT 22
17758: PUSH
17759: LD_INT 7
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 30
17768: PUSH
17769: LD_INT 33
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 35
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_TO
17800: IFFALSE 17860
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17802: LD_INT 22
17804: PUSH
17805: LD_INT 7
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: LD_INT 33
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 35
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: PUSH
17845: LD_VAR 0 2
17849: ARRAY
17850: PPUSH
17851: LD_INT 49
17853: PPUSH
17854: CALL_OW 208
17858: GO 17799
17860: POP
17861: POP
// end ;
17862: LD_VAR 0 1
17866: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17867: LD_OWVAR 2
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 18861
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
// begin enable ;
17886: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17887: LD_ADDR_EXP 56
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_INT 7
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 21
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17921: LD_ADDR_EXP 54
17925: PUSH
17926: LD_INT 164
17928: PUSH
17929: LD_INT 197
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17936: LD_ADDR_EXP 53
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_INT 7
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 69
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17974: LD_ADDR_EXP 55
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_INT 7
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18012: LD_INT 22
18014: PUSH
18015: LD_INT 7
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 34
18024: PUSH
18025: LD_INT 51
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: IFFALSE 18080
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18042: LD_ADDR_EXP 51
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_INT 7
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 34
18059: PUSH
18060: LD_INT 51
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18080: LD_ADDR_EXP 47
18084: PUSH
18085: LD_INT 22
18087: PUSH
18088: LD_INT 7
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18114: LD_ADDR_EXP 46
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 7
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 25
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18182: LD_ADDR_EXP 49
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18216: LD_EXP 51
18220: PPUSH
18221: CALL_OW 314
18225: NOT
18226: PUSH
18227: LD_EXP 51
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: CALL_OW 289
18239: PUSH
18240: LD_INT 100
18242: LESS
18243: AND
18244: IFFALSE 18292
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18246: LD_ADDR_VAR 0 4
18250: PUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 435
18258: ST_TO_ADDR
// if cr then
18259: LD_VAR 0 4
18263: IFFALSE 18292
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18265: LD_EXP 51
18269: PPUSH
18270: LD_VAR 0 4
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 4
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PPUSH
18288: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18292: LD_EXP 56
18296: PPUSH
18297: LD_INT 3
18299: PUSH
18300: LD_INT 24
18302: PUSH
18303: LD_INT 1000
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 72
18318: IFFALSE 18448
// begin if al_eng then
18320: LD_EXP 46
18324: IFFALSE 18446
// for i = 1 to al_eng do
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: DOUBLE
18332: LD_INT 1
18334: DEC
18335: ST_TO_ADDR
18336: LD_EXP 46
18340: PUSH
18341: FOR_TO
18342: IFFALSE 18444
// if IsInUnit ( al_eng [ i ] ) then
18344: LD_EXP 46
18348: PUSH
18349: LD_VAR 0 1
18353: ARRAY
18354: PPUSH
18355: CALL_OW 310
18359: IFFALSE 18378
// ComExitBuilding ( al_eng [ i ] ) else
18361: LD_EXP 46
18365: PUSH
18366: LD_VAR 0 1
18370: ARRAY
18371: PPUSH
18372: CALL_OW 122
18376: GO 18442
// if not HasTask ( al_eng [ i ] ) then
18378: LD_EXP 46
18382: PUSH
18383: LD_VAR 0 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 314
18393: NOT
18394: IFFALSE 18442
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18396: LD_EXP 46
18400: PUSH
18401: LD_VAR 0 1
18405: ARRAY
18406: PPUSH
18407: LD_EXP 56
18411: PPUSH
18412: LD_INT 3
18414: PUSH
18415: LD_INT 24
18417: PUSH
18418: LD_INT 1000
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 72
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 130
18442: GO 18341
18444: POP
18445: POP
// end else
18446: GO 18530
// if al_eng then
18448: LD_EXP 46
18452: IFFALSE 18530
// if not IsInUnit ( al_eng [ 1 ] ) then
18454: LD_EXP 46
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PPUSH
18463: CALL_OW 310
18467: NOT
18468: IFFALSE 18530
// for i = 1 to al_eng do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: DOUBLE
18476: LD_INT 1
18478: DEC
18479: ST_TO_ADDR
18480: LD_EXP 46
18484: PUSH
18485: FOR_TO
18486: IFFALSE 18528
// if not IsInUnit ( al_eng [ i ] ) then
18488: LD_EXP 46
18492: PUSH
18493: LD_VAR 0 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 310
18503: NOT
18504: IFFALSE 18526
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18506: LD_EXP 46
18510: PUSH
18511: LD_VAR 0 1
18515: ARRAY
18516: PPUSH
18517: LD_EXP 53
18521: PPUSH
18522: CALL_OW 120
18526: GO 18485
18528: POP
18529: POP
// if al_vehs then
18530: LD_EXP 50
18534: IFFALSE 18634
// if BuildingStatus ( al_fac ) = bs_idle then
18536: LD_EXP 55
18540: PPUSH
18541: CALL_OW 461
18545: PUSH
18546: LD_INT 2
18548: EQUAL
18549: IFFALSE 18634
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18551: LD_EXP 55
18555: PPUSH
18556: LD_EXP 50
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_EXP 50
18569: PUSH
18570: LD_INT 2
18572: ARRAY
18573: PPUSH
18574: LD_EXP 50
18578: PUSH
18579: LD_INT 3
18581: ARRAY
18582: PPUSH
18583: LD_EXP 50
18587: PUSH
18588: LD_INT 4
18590: ARRAY
18591: PPUSH
18592: CALL_OW 125
// for i = 1 to 4 do
18596: LD_ADDR_VAR 0 1
18600: PUSH
18601: DOUBLE
18602: LD_INT 1
18604: DEC
18605: ST_TO_ADDR
18606: LD_INT 4
18608: PUSH
18609: FOR_TO
18610: IFFALSE 18632
// al_vehs := Delete ( al_vehs , 1 ) ;
18612: LD_ADDR_EXP 50
18616: PUSH
18617: LD_EXP 50
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 3
18629: ST_TO_ADDR
18630: GO 18609
18632: POP
18633: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18634: LD_EXP 44
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: PUSH
18643: LD_OWVAR 1
18647: PUSH
18648: LD_INT 23100
18650: MOD
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: AND
18656: IFFALSE 18770
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: DOUBLE
18664: LD_INT 1
18666: DEC
18667: ST_TO_ADDR
18668: LD_INT 6
18670: PUSH
18671: LD_INT 7
18673: PUSH
18674: LD_INT 8
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18768
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18691: LD_ADDR_EXP 50
18695: PUSH
18696: LD_EXP 50
18700: PUSH
18701: LD_INT 23
18703: ADD
18704: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18705: LD_ADDR_EXP 50
18709: PUSH
18710: LD_EXP 50
18714: PUSH
18715: LD_INT 1
18717: ADD
18718: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18719: LD_ADDR_EXP 50
18723: PUSH
18724: LD_EXP 50
18728: PUSH
18729: LD_INT 3
18731: ADD
18732: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18733: LD_ADDR_EXP 50
18737: PUSH
18738: LD_EXP 50
18742: PUSH
18743: LD_INT 46
18745: PUSH
18746: LD_INT 47
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 2
18758: PPUSH
18759: CALL_OW 12
18763: ARRAY
18764: ADD
18765: ST_TO_ADDR
// end ;
18766: GO 18688
18768: POP
18769: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18770: LD_INT 22
18772: PUSH
18773: LD_INT 7
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 34
18782: PUSH
18783: LD_INT 51
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: PUSH
18799: LD_INT 0
18801: EQUAL
18802: IFFALSE 18825
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18804: LD_EXP 55
18808: PPUSH
18809: LD_INT 21
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: LD_INT 51
18820: PPUSH
18821: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18825: LD_EXP 44
18829: PUSH
18830: LD_INT 6
18832: PUSH
18833: LD_INT 7
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: LD_OWVAR 67
18848: ARRAY
18849: GREATEREQUAL
18850: IFFALSE 18861
// RaiseSailEvent ( event_alliance_attack ) ;
18852: LD_EXP 23
18856: PPUSH
18857: CALL_OW 427
// end ;
18861: PPOPN 4
18863: END
// export function AllianceAttack ( ) ; var path , units ; begin
18864: LD_INT 0
18866: PPUSH
18867: PPUSH
18868: PPUSH
// units := al_force ;
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_EXP 44
18878: ST_TO_ADDR
// al_force := [ ] ;
18879: LD_ADDR_EXP 44
18883: PUSH
18884: EMPTY
18885: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18886: LD_INT 0
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 12
18896: IFFALSE 18940
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_INT 49
18905: PUSH
18906: LD_INT 53
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 52
18915: PUSH
18916: LD_INT 90
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 63
18925: PUSH
18926: LD_INT 114
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 18969
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18940: LD_ADDR_VAR 0 2
18944: PUSH
18945: LD_INT 89
18947: PUSH
18948: LD_INT 52
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 143
18957: PUSH
18958: LD_INT 50
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18969: LD_INT 35
18971: PPUSH
18972: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL 79644 0 2
18990: NOT
18991: IFFALSE 18969
// end ; end_of_file
18993: LD_VAR 0 1
18997: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18998: LD_INT 0
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19005: LD_ADDR_EXP 59
19009: PUSH
19010: LD_INT 9
19012: PUSH
19013: LD_INT 8
19015: PUSH
19016: LD_INT 7
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_OWVAR 67
19028: ARRAY
19029: ST_TO_ADDR
// ar_force := [ ] ;
19030: LD_ADDR_EXP 58
19034: PUSH
19035: EMPTY
19036: ST_TO_ADDR
// RemoveAlliance ;
19037: CALL 16874 0 0
// RemoveEnvironmentArea ( evn ) ;
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 355
// your_side := 2 ;
19048: LD_ADDR_OWVAR 2
19052: PUSH
19053: LD_INT 2
19055: ST_TO_ADDR
// uc_side := 2 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 2
19063: ST_TO_ADDR
// uc_nation := nation_arabian ;
19064: LD_ADDR_OWVAR 21
19068: PUSH
19069: LD_INT 2
19071: ST_TO_ADDR
// hc_gallery :=  ;
19072: LD_ADDR_OWVAR 33
19076: PUSH
19077: LD_STRING 
19079: ST_TO_ADDR
// hc_name :=  ;
19080: LD_ADDR_OWVAR 26
19084: PUSH
19085: LD_STRING 
19087: ST_TO_ADDR
// hc_importance := 0 ;
19088: LD_ADDR_OWVAR 32
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// for i = 1 to 20 do
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: DOUBLE
19102: LD_INT 1
19104: DEC
19105: ST_TO_ADDR
19106: LD_INT 20
19108: PUSH
19109: FOR_TO
19110: IFFALSE 19175
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19112: LD_INT 0
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 4
19120: PPUSH
19121: CALL_OW 12
19125: PPUSH
19126: LD_EXP 59
19130: PPUSH
19131: CALL_OW 380
// un := CreateHuman ;
19135: LD_ADDR_VAR 0 4
19139: PUSH
19140: CALL_OW 44
19144: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19145: LD_VAR 0 4
19149: PPUSH
19150: LD_INT 2
19152: PPUSH
19153: CALL_OW 233
// ar_force := ar_force ^ un ;
19157: LD_ADDR_EXP 58
19161: PUSH
19162: LD_EXP 58
19166: PUSH
19167: LD_VAR 0 4
19171: ADD
19172: ST_TO_ADDR
// end ;
19173: GO 19109
19175: POP
19176: POP
// hc_importance := 100 ;
19177: LD_ADDR_OWVAR 32
19181: PUSH
19182: LD_INT 100
19184: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 11
19190: PPUSH
19191: LD_EXP 59
19195: PPUSH
19196: CALL_OW 380
// ar_commander := CreateHuman ;
19200: LD_ADDR_EXP 57
19204: PUSH
19205: CALL_OW 44
19209: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19210: LD_EXP 57
19214: PPUSH
19215: LD_INT 2
19217: PPUSH
19218: CALL_OW 233
// player_commander := ar_commander ;
19222: LD_ADDR_EXP 11
19226: PUSH
19227: LD_EXP 57
19231: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19232: LD_ADDR_VAR 0 5
19236: PUSH
19237: LD_STRING text
19239: PPUSH
19240: LD_INT 14
19242: PUSH
19243: LD_INT 13
19245: PUSH
19246: LD_INT 12
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 14
19262: PUSH
19263: LD_INT 13
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: LD_OWVAR 67
19278: ARRAY
19279: PPUSH
19280: LD_INT -6
19282: PUSH
19283: LD_EXP 57
19287: PUSH
19288: LD_INT -2
19290: PUSH
19291: LD_INT -3
19293: PUSH
19294: LD_INT -5
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_EXP 58
19308: ADD
19309: PPUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 3
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 4
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 8
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 42
19350: ST_TO_ADDR
// team := team ^ ar_commander ;
19351: LD_ADDR_VAR 0 5
19355: PUSH
19356: LD_VAR 0 5
19360: PUSH
19361: LD_EXP 57
19365: ADD
19366: ST_TO_ADDR
// for i = 1 to 4 do
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 4
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19481
// begin vc_chassis := ar_medium_trike ;
19383: LD_ADDR_OWVAR 37
19387: PUSH
19388: LD_INT 13
19390: ST_TO_ADDR
// vc_engine := engine_siberite ;
19391: LD_ADDR_OWVAR 39
19395: PUSH
19396: LD_INT 3
19398: ST_TO_ADDR
// vc_control := control_manual ;
19399: LD_ADDR_OWVAR 38
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19407: LD_ADDR_OWVAR 40
19411: PUSH
19412: LD_INT 27
19414: PUSH
19415: LD_INT 32
19417: PUSH
19418: LD_INT 88
19420: PUSH
19421: LD_INT 27
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_VAR 0 2
19434: ARRAY
19435: ST_TO_ADDR
// un := CreateVehicle ;
19436: LD_ADDR_VAR 0 4
19440: PUSH
19441: CALL_OW 45
19445: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19458: LD_VAR 0 4
19462: PPUSH
19463: LD_INT 54
19465: PPUSH
19466: LD_INT 15
19468: PPUSH
19469: LD_INT 6
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 50
// end ;
19479: GO 19380
19481: POP
19482: POP
// for i = 1 to team do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: DOUBLE
19489: LD_INT 1
19491: DEC
19492: ST_TO_ADDR
19493: LD_VAR 0 5
19497: PUSH
19498: FOR_TO
19499: IFFALSE 19596
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19501: LD_INT 22
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 58
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: IFFALSE 19573
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19527: LD_VAR 0 5
19531: PUSH
19532: LD_VAR 0 2
19536: ARRAY
19537: PPUSH
19538: LD_INT 22
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 58
19550: PUSH
19551: EMPTY
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: LD_INT 1
19565: ARRAY
19566: PPUSH
19567: CALL_OW 52
19571: GO 19594
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19573: LD_VAR 0 5
19577: PUSH
19578: LD_VAR 0 2
19582: ARRAY
19583: PPUSH
19584: LD_INT 16
19586: PPUSH
19587: LD_INT 0
19589: PPUSH
19590: CALL_OW 49
// end ;
19594: GO 19498
19596: POP
19597: POP
// uc_side := 0 ;
19598: LD_ADDR_OWVAR 20
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// uc_nation := 0 ;
19606: LD_ADDR_OWVAR 21
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// vc_chassis := 31 ;
19614: LD_ADDR_OWVAR 37
19618: PUSH
19619: LD_INT 31
19621: ST_TO_ADDR
// vc_control := control_rider ;
19622: LD_ADDR_OWVAR 38
19626: PUSH
19627: LD_INT 4
19629: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19630: CALL_OW 45
19634: PPUSH
19635: LD_INT 96
19637: PPUSH
19638: LD_INT 20
19640: PPUSH
19641: LD_INT 0
19643: PPUSH
19644: CALL_OW 48
// end ; end_of_file end_of_file
19648: LD_VAR 0 1
19652: RET
// every 0 0$1 do
19653: GO 19655
19655: DISABLE
// begin enable ;
19656: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19657: LD_STRING updateTimer(
19659: PUSH
19660: LD_OWVAR 1
19664: STR
19665: PUSH
19666: LD_STRING );
19668: STR
19669: PPUSH
19670: CALL_OW 559
// end ;
19674: END
// export function SOS_MapStart ( ) ; begin
19675: LD_INT 0
19677: PPUSH
// if streamModeActive then
19678: LD_EXP 60
19682: IFFALSE 19691
// DefineStreamItems ( true ) ;
19684: LD_INT 1
19686: PPUSH
19687: CALL 21345 0 1
// UpdateFactoryWaypoints ( ) ;
19691: CALL 34206 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19695: CALL 34463 0 0
// end ;
19699: LD_VAR 0 1
19703: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19704: LD_INT 0
19706: PPUSH
// if p2 = hack_mode then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_INT 100
19714: EQUAL
19715: IFFALSE 20718
// begin if not StreamModeActive then
19717: LD_EXP 60
19721: NOT
19722: IFFALSE 19732
// StreamModeActive := true ;
19724: LD_ADDR_EXP 60
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 0 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 0
19739: EQUAL
19740: IFFALSE 19746
// InitStreamMode ;
19742: CALL 20881 0 0
// if p3 = 1 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 1
19753: EQUAL
19754: IFFALSE 19764
// sRocket := true ;
19756: LD_ADDR_EXP 65
19760: PUSH
19761: LD_INT 1
19763: ST_TO_ADDR
// if p3 = 2 then
19764: LD_VAR 0 3
19768: PUSH
19769: LD_INT 2
19771: EQUAL
19772: IFFALSE 19782
// sSpeed := true ;
19774: LD_ADDR_EXP 64
19778: PUSH
19779: LD_INT 1
19781: ST_TO_ADDR
// if p3 = 3 then
19782: LD_VAR 0 3
19786: PUSH
19787: LD_INT 3
19789: EQUAL
19790: IFFALSE 19800
// sEngine := true ;
19792: LD_ADDR_EXP 66
19796: PUSH
19797: LD_INT 1
19799: ST_TO_ADDR
// if p3 = 4 then
19800: LD_VAR 0 3
19804: PUSH
19805: LD_INT 4
19807: EQUAL
19808: IFFALSE 19818
// sSpec := true ;
19810: LD_ADDR_EXP 63
19814: PUSH
19815: LD_INT 1
19817: ST_TO_ADDR
// if p3 = 5 then
19818: LD_VAR 0 3
19822: PUSH
19823: LD_INT 5
19825: EQUAL
19826: IFFALSE 19836
// sLevel := true ;
19828: LD_ADDR_EXP 67
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if p3 = 6 then
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 6
19843: EQUAL
19844: IFFALSE 19854
// sArmoury := true ;
19846: LD_ADDR_EXP 68
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// if p3 = 7 then
19854: LD_VAR 0 3
19858: PUSH
19859: LD_INT 7
19861: EQUAL
19862: IFFALSE 19872
// sRadar := true ;
19864: LD_ADDR_EXP 69
19868: PUSH
19869: LD_INT 1
19871: ST_TO_ADDR
// if p3 = 8 then
19872: LD_VAR 0 3
19876: PUSH
19877: LD_INT 8
19879: EQUAL
19880: IFFALSE 19890
// sBunker := true ;
19882: LD_ADDR_EXP 70
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
// if p3 = 9 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 9
19897: EQUAL
19898: IFFALSE 19908
// sHack := true ;
19900: LD_ADDR_EXP 71
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// if p3 = 10 then
19908: LD_VAR 0 3
19912: PUSH
19913: LD_INT 10
19915: EQUAL
19916: IFFALSE 19926
// sFire := true ;
19918: LD_ADDR_EXP 72
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if p3 = 11 then
19926: LD_VAR 0 3
19930: PUSH
19931: LD_INT 11
19933: EQUAL
19934: IFFALSE 19944
// sRefresh := true ;
19936: LD_ADDR_EXP 73
19940: PUSH
19941: LD_INT 1
19943: ST_TO_ADDR
// if p3 = 12 then
19944: LD_VAR 0 3
19948: PUSH
19949: LD_INT 12
19951: EQUAL
19952: IFFALSE 19962
// sExp := true ;
19954: LD_ADDR_EXP 74
19958: PUSH
19959: LD_INT 1
19961: ST_TO_ADDR
// if p3 = 13 then
19962: LD_VAR 0 3
19966: PUSH
19967: LD_INT 13
19969: EQUAL
19970: IFFALSE 19980
// sDepot := true ;
19972: LD_ADDR_EXP 75
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// if p3 = 14 then
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 14
19987: EQUAL
19988: IFFALSE 19998
// sFlag := true ;
19990: LD_ADDR_EXP 76
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// if p3 = 15 then
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 15
20005: EQUAL
20006: IFFALSE 20016
// sKamikadze := true ;
20008: LD_ADDR_EXP 84
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if p3 = 16 then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 16
20023: EQUAL
20024: IFFALSE 20034
// sTroll := true ;
20026: LD_ADDR_EXP 85
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// if p3 = 17 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 17
20041: EQUAL
20042: IFFALSE 20052
// sSlow := true ;
20044: LD_ADDR_EXP 86
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// if p3 = 18 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 18
20059: EQUAL
20060: IFFALSE 20070
// sLack := true ;
20062: LD_ADDR_EXP 87
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if p3 = 19 then
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 19
20077: EQUAL
20078: IFFALSE 20088
// sTank := true ;
20080: LD_ADDR_EXP 89
20084: PUSH
20085: LD_INT 1
20087: ST_TO_ADDR
// if p3 = 20 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 20
20095: EQUAL
20096: IFFALSE 20106
// sRemote := true ;
20098: LD_ADDR_EXP 90
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
// if p3 = 21 then
20106: LD_VAR 0 3
20110: PUSH
20111: LD_INT 21
20113: EQUAL
20114: IFFALSE 20124
// sPowell := true ;
20116: LD_ADDR_EXP 91
20120: PUSH
20121: LD_INT 1
20123: ST_TO_ADDR
// if p3 = 22 then
20124: LD_VAR 0 3
20128: PUSH
20129: LD_INT 22
20131: EQUAL
20132: IFFALSE 20142
// sTeleport := true ;
20134: LD_ADDR_EXP 94
20138: PUSH
20139: LD_INT 1
20141: ST_TO_ADDR
// if p3 = 23 then
20142: LD_VAR 0 3
20146: PUSH
20147: LD_INT 23
20149: EQUAL
20150: IFFALSE 20160
// sOilTower := true ;
20152: LD_ADDR_EXP 96
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if p3 = 24 then
20160: LD_VAR 0 3
20164: PUSH
20165: LD_INT 24
20167: EQUAL
20168: IFFALSE 20178
// sShovel := true ;
20170: LD_ADDR_EXP 97
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// if p3 = 25 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 25
20185: EQUAL
20186: IFFALSE 20196
// sSheik := true ;
20188: LD_ADDR_EXP 98
20192: PUSH
20193: LD_INT 1
20195: ST_TO_ADDR
// if p3 = 26 then
20196: LD_VAR 0 3
20200: PUSH
20201: LD_INT 26
20203: EQUAL
20204: IFFALSE 20214
// sEarthquake := true ;
20206: LD_ADDR_EXP 100
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// if p3 = 27 then
20214: LD_VAR 0 3
20218: PUSH
20219: LD_INT 27
20221: EQUAL
20222: IFFALSE 20232
// sAI := true ;
20224: LD_ADDR_EXP 101
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
// if p3 = 28 then
20232: LD_VAR 0 3
20236: PUSH
20237: LD_INT 28
20239: EQUAL
20240: IFFALSE 20250
// sCargo := true ;
20242: LD_ADDR_EXP 104
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// if p3 = 29 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 29
20257: EQUAL
20258: IFFALSE 20268
// sDLaser := true ;
20260: LD_ADDR_EXP 105
20264: PUSH
20265: LD_INT 1
20267: ST_TO_ADDR
// if p3 = 30 then
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 30
20275: EQUAL
20276: IFFALSE 20286
// sExchange := true ;
20278: LD_ADDR_EXP 106
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// if p3 = 31 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 31
20293: EQUAL
20294: IFFALSE 20304
// sFac := true ;
20296: LD_ADDR_EXP 107
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// if p3 = 32 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 32
20311: EQUAL
20312: IFFALSE 20322
// sPower := true ;
20314: LD_ADDR_EXP 108
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 33 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 33
20329: EQUAL
20330: IFFALSE 20340
// sRandom := true ;
20332: LD_ADDR_EXP 109
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 34 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 34
20347: EQUAL
20348: IFFALSE 20358
// sShield := true ;
20350: LD_ADDR_EXP 110
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 35 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 35
20365: EQUAL
20366: IFFALSE 20376
// sTime := true ;
20368: LD_ADDR_EXP 111
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 36 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 36
20383: EQUAL
20384: IFFALSE 20394
// sTools := true ;
20386: LD_ADDR_EXP 112
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// if p3 = 101 then
20394: LD_VAR 0 3
20398: PUSH
20399: LD_INT 101
20401: EQUAL
20402: IFFALSE 20412
// sSold := true ;
20404: LD_ADDR_EXP 77
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// if p3 = 102 then
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 102
20419: EQUAL
20420: IFFALSE 20430
// sDiff := true ;
20422: LD_ADDR_EXP 78
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// if p3 = 103 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 103
20437: EQUAL
20438: IFFALSE 20448
// sFog := true ;
20440: LD_ADDR_EXP 81
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// if p3 = 104 then
20448: LD_VAR 0 3
20452: PUSH
20453: LD_INT 104
20455: EQUAL
20456: IFFALSE 20466
// sReset := true ;
20458: LD_ADDR_EXP 82
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// if p3 = 105 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 105
20473: EQUAL
20474: IFFALSE 20484
// sSun := true ;
20476: LD_ADDR_EXP 83
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if p3 = 106 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 106
20491: EQUAL
20492: IFFALSE 20502
// sTiger := true ;
20494: LD_ADDR_EXP 79
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// if p3 = 107 then
20502: LD_VAR 0 3
20506: PUSH
20507: LD_INT 107
20509: EQUAL
20510: IFFALSE 20520
// sBomb := true ;
20512: LD_ADDR_EXP 80
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// if p3 = 108 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 108
20527: EQUAL
20528: IFFALSE 20538
// sWound := true ;
20530: LD_ADDR_EXP 88
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// if p3 = 109 then
20538: LD_VAR 0 3
20542: PUSH
20543: LD_INT 109
20545: EQUAL
20546: IFFALSE 20556
// sBetray := true ;
20548: LD_ADDR_EXP 92
20552: PUSH
20553: LD_INT 1
20555: ST_TO_ADDR
// if p3 = 110 then
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 110
20563: EQUAL
20564: IFFALSE 20574
// sContamin := true ;
20566: LD_ADDR_EXP 93
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
// if p3 = 111 then
20574: LD_VAR 0 3
20578: PUSH
20579: LD_INT 111
20581: EQUAL
20582: IFFALSE 20592
// sOil := true ;
20584: LD_ADDR_EXP 95
20588: PUSH
20589: LD_INT 1
20591: ST_TO_ADDR
// if p3 = 112 then
20592: LD_VAR 0 3
20596: PUSH
20597: LD_INT 112
20599: EQUAL
20600: IFFALSE 20610
// sStu := true ;
20602: LD_ADDR_EXP 99
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// if p3 = 113 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 113
20617: EQUAL
20618: IFFALSE 20628
// sBazooka := true ;
20620: LD_ADDR_EXP 102
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// if p3 = 114 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 114
20635: EQUAL
20636: IFFALSE 20646
// sMortar := true ;
20638: LD_ADDR_EXP 103
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// if p3 = 115 then
20646: LD_VAR 0 3
20650: PUSH
20651: LD_INT 115
20653: EQUAL
20654: IFFALSE 20664
// sRanger := true ;
20656: LD_ADDR_EXP 113
20660: PUSH
20661: LD_INT 1
20663: ST_TO_ADDR
// if p3 = 116 then
20664: LD_VAR 0 3
20668: PUSH
20669: LD_INT 116
20671: EQUAL
20672: IFFALSE 20682
// sComputer := true ;
20674: LD_ADDR_EXP 114
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// if p3 = 117 then
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 117
20689: EQUAL
20690: IFFALSE 20700
// s30 := true ;
20692: LD_ADDR_EXP 115
20696: PUSH
20697: LD_INT 1
20699: ST_TO_ADDR
// if p3 = 118 then
20700: LD_VAR 0 3
20704: PUSH
20705: LD_INT 118
20707: EQUAL
20708: IFFALSE 20718
// s60 := true ;
20710: LD_ADDR_EXP 116
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// end ; if p2 = stream_mode then
20718: LD_VAR 0 2
20722: PUSH
20723: LD_INT 101
20725: EQUAL
20726: IFFALSE 20854
// begin case p3 of 1 :
20728: LD_VAR 0 3
20732: PUSH
20733: LD_INT 1
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20748
20741: POP
// hHackUnlimitedResources ; 2 :
20742: CALL 32952 0 0
20746: GO 20854
20748: LD_INT 2
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20763
20756: POP
// hHackSetLevel10 ; 3 :
20757: CALL 33085 0 0
20761: GO 20854
20763: LD_INT 3
20765: DOUBLE
20766: EQUAL
20767: IFTRUE 20771
20769: GO 20778
20771: POP
// hHackSetLevel10YourUnits ; 4 :
20772: CALL 33170 0 0
20776: GO 20854
20778: LD_INT 4
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20793
20786: POP
// hHackInvincible ; 5 :
20787: CALL 33618 0 0
20791: GO 20854
20793: LD_INT 5
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20808
20801: POP
// hHackInvisible ; 6 :
20802: CALL 33729 0 0
20806: GO 20854
20808: LD_INT 6
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20823
20816: POP
// hHackChangeYourSide ; 7 :
20817: CALL 33786 0 0
20821: GO 20854
20823: LD_INT 7
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20838
20831: POP
// hHackChangeUnitSide ; 8 :
20832: CALL 33828 0 0
20836: GO 20854
20838: LD_INT 8
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20853
20846: POP
// hHackFog ; end ;
20847: CALL 33929 0 0
20851: GO 20854
20853: POP
// end ; end ;
20854: LD_VAR 0 7
20858: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20859: GO 20861
20861: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20862: LD_STRING initStreamRollete();
20864: PPUSH
20865: CALL_OW 559
// InitStreamMode ;
20869: CALL 20881 0 0
// DefineStreamItems ( false ) ;
20873: LD_INT 0
20875: PPUSH
20876: CALL 21345 0 1
// end ;
20880: END
// function InitStreamMode ; begin
20881: LD_INT 0
20883: PPUSH
// streamModeActive := false ;
20884: LD_ADDR_EXP 60
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// normalCounter := 36 ;
20892: LD_ADDR_EXP 61
20896: PUSH
20897: LD_INT 36
20899: ST_TO_ADDR
// hardcoreCounter := 18 ;
20900: LD_ADDR_EXP 62
20904: PUSH
20905: LD_INT 18
20907: ST_TO_ADDR
// sRocket := false ;
20908: LD_ADDR_EXP 65
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sSpeed := false ;
20916: LD_ADDR_EXP 64
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sEngine := false ;
20924: LD_ADDR_EXP 66
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sSpec := false ;
20932: LD_ADDR_EXP 63
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sLevel := false ;
20940: LD_ADDR_EXP 67
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sArmoury := false ;
20948: LD_ADDR_EXP 68
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sRadar := false ;
20956: LD_ADDR_EXP 69
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sBunker := false ;
20964: LD_ADDR_EXP 70
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sHack := false ;
20972: LD_ADDR_EXP 71
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sFire := false ;
20980: LD_ADDR_EXP 72
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sRefresh := false ;
20988: LD_ADDR_EXP 73
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sExp := false ;
20996: LD_ADDR_EXP 74
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sDepot := false ;
21004: LD_ADDR_EXP 75
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sFlag := false ;
21012: LD_ADDR_EXP 76
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sKamikadze := false ;
21020: LD_ADDR_EXP 84
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sTroll := false ;
21028: LD_ADDR_EXP 85
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sSlow := false ;
21036: LD_ADDR_EXP 86
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sLack := false ;
21044: LD_ADDR_EXP 87
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sTank := false ;
21052: LD_ADDR_EXP 89
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sRemote := false ;
21060: LD_ADDR_EXP 90
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sPowell := false ;
21068: LD_ADDR_EXP 91
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sTeleport := false ;
21076: LD_ADDR_EXP 94
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sOilTower := false ;
21084: LD_ADDR_EXP 96
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sShovel := false ;
21092: LD_ADDR_EXP 97
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sSheik := false ;
21100: LD_ADDR_EXP 98
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sEarthquake := false ;
21108: LD_ADDR_EXP 100
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sAI := false ;
21116: LD_ADDR_EXP 101
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sCargo := false ;
21124: LD_ADDR_EXP 104
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sDLaser := false ;
21132: LD_ADDR_EXP 105
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sExchange := false ;
21140: LD_ADDR_EXP 106
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sFac := false ;
21148: LD_ADDR_EXP 107
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sPower := false ;
21156: LD_ADDR_EXP 108
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sRandom := false ;
21164: LD_ADDR_EXP 109
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sShield := false ;
21172: LD_ADDR_EXP 110
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sTime := false ;
21180: LD_ADDR_EXP 111
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sTools := false ;
21188: LD_ADDR_EXP 112
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// sSold := false ;
21196: LD_ADDR_EXP 77
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// sDiff := false ;
21204: LD_ADDR_EXP 78
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// sFog := false ;
21212: LD_ADDR_EXP 81
21216: PUSH
21217: LD_INT 0
21219: ST_TO_ADDR
// sReset := false ;
21220: LD_ADDR_EXP 82
21224: PUSH
21225: LD_INT 0
21227: ST_TO_ADDR
// sSun := false ;
21228: LD_ADDR_EXP 83
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// sTiger := false ;
21236: LD_ADDR_EXP 79
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// sBomb := false ;
21244: LD_ADDR_EXP 80
21248: PUSH
21249: LD_INT 0
21251: ST_TO_ADDR
// sWound := false ;
21252: LD_ADDR_EXP 88
21256: PUSH
21257: LD_INT 0
21259: ST_TO_ADDR
// sBetray := false ;
21260: LD_ADDR_EXP 92
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// sContamin := false ;
21268: LD_ADDR_EXP 93
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// sOil := false ;
21276: LD_ADDR_EXP 95
21280: PUSH
21281: LD_INT 0
21283: ST_TO_ADDR
// sStu := false ;
21284: LD_ADDR_EXP 99
21288: PUSH
21289: LD_INT 0
21291: ST_TO_ADDR
// sBazooka := false ;
21292: LD_ADDR_EXP 102
21296: PUSH
21297: LD_INT 0
21299: ST_TO_ADDR
// sMortar := false ;
21300: LD_ADDR_EXP 103
21304: PUSH
21305: LD_INT 0
21307: ST_TO_ADDR
// sRanger := false ;
21308: LD_ADDR_EXP 113
21312: PUSH
21313: LD_INT 0
21315: ST_TO_ADDR
// sComputer := false ;
21316: LD_ADDR_EXP 114
21320: PUSH
21321: LD_INT 0
21323: ST_TO_ADDR
// s30 := false ;
21324: LD_ADDR_EXP 115
21328: PUSH
21329: LD_INT 0
21331: ST_TO_ADDR
// s60 := false ;
21332: LD_ADDR_EXP 116
21336: PUSH
21337: LD_INT 0
21339: ST_TO_ADDR
// end ;
21340: LD_VAR 0 1
21344: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21345: LD_INT 0
21347: PPUSH
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
// result := [ ] ;
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: EMPTY
21360: ST_TO_ADDR
// if campaign_id = 1 then
21361: LD_OWVAR 69
21365: PUSH
21366: LD_INT 1
21368: EQUAL
21369: IFFALSE 24535
// begin case mission_number of 1 :
21371: LD_OWVAR 70
21375: PUSH
21376: LD_INT 1
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21460
21384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21385: LD_ADDR_VAR 0 2
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: LD_INT 4
21395: PUSH
21396: LD_INT 11
21398: PUSH
21399: LD_INT 12
21401: PUSH
21402: LD_INT 15
21404: PUSH
21405: LD_INT 16
21407: PUSH
21408: LD_INT 22
21410: PUSH
21411: LD_INT 23
21413: PUSH
21414: LD_INT 26
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 101
21430: PUSH
21431: LD_INT 102
21433: PUSH
21434: LD_INT 106
21436: PUSH
21437: LD_INT 116
21439: PUSH
21440: LD_INT 117
21442: PUSH
21443: LD_INT 118
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: ST_TO_ADDR
21458: GO 24533
21460: LD_INT 2
21462: DOUBLE
21463: EQUAL
21464: IFTRUE 21468
21466: GO 21552
21468: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21469: LD_ADDR_VAR 0 2
21473: PUSH
21474: LD_INT 2
21476: PUSH
21477: LD_INT 4
21479: PUSH
21480: LD_INT 11
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: LD_INT 15
21488: PUSH
21489: LD_INT 16
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_INT 23
21497: PUSH
21498: LD_INT 26
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 101
21514: PUSH
21515: LD_INT 102
21517: PUSH
21518: LD_INT 105
21520: PUSH
21521: LD_INT 106
21523: PUSH
21524: LD_INT 108
21526: PUSH
21527: LD_INT 116
21529: PUSH
21530: LD_INT 117
21532: PUSH
21533: LD_INT 118
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: ST_TO_ADDR
21550: GO 24533
21552: LD_INT 3
21554: DOUBLE
21555: EQUAL
21556: IFTRUE 21560
21558: GO 21648
21560: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 4
21571: PUSH
21572: LD_INT 5
21574: PUSH
21575: LD_INT 11
21577: PUSH
21578: LD_INT 12
21580: PUSH
21581: LD_INT 15
21583: PUSH
21584: LD_INT 16
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_INT 26
21592: PUSH
21593: LD_INT 36
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 101
21610: PUSH
21611: LD_INT 102
21613: PUSH
21614: LD_INT 105
21616: PUSH
21617: LD_INT 106
21619: PUSH
21620: LD_INT 108
21622: PUSH
21623: LD_INT 116
21625: PUSH
21626: LD_INT 117
21628: PUSH
21629: LD_INT 118
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24533
21648: LD_INT 4
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21752
21656: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 8
21673: PUSH
21674: LD_INT 11
21676: PUSH
21677: LD_INT 12
21679: PUSH
21680: LD_INT 15
21682: PUSH
21683: LD_INT 16
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 36
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 101
21714: PUSH
21715: LD_INT 102
21717: PUSH
21718: LD_INT 105
21720: PUSH
21721: LD_INT 106
21723: PUSH
21724: LD_INT 108
21726: PUSH
21727: LD_INT 116
21729: PUSH
21730: LD_INT 117
21732: PUSH
21733: LD_INT 118
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: ST_TO_ADDR
21750: GO 24533
21752: LD_INT 5
21754: DOUBLE
21755: EQUAL
21756: IFTRUE 21760
21758: GO 21872
21760: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21761: LD_ADDR_VAR 0 2
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 4
21771: PUSH
21772: LD_INT 5
21774: PUSH
21775: LD_INT 6
21777: PUSH
21778: LD_INT 8
21780: PUSH
21781: LD_INT 11
21783: PUSH
21784: LD_INT 12
21786: PUSH
21787: LD_INT 15
21789: PUSH
21790: LD_INT 16
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_INT 23
21798: PUSH
21799: LD_INT 25
21801: PUSH
21802: LD_INT 26
21804: PUSH
21805: LD_INT 36
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 101
21826: PUSH
21827: LD_INT 102
21829: PUSH
21830: LD_INT 105
21832: PUSH
21833: LD_INT 106
21835: PUSH
21836: LD_INT 108
21838: PUSH
21839: LD_INT 109
21841: PUSH
21842: LD_INT 112
21844: PUSH
21845: LD_INT 116
21847: PUSH
21848: LD_INT 117
21850: PUSH
21851: LD_INT 118
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: ST_TO_ADDR
21870: GO 24533
21872: LD_INT 6
21874: DOUBLE
21875: EQUAL
21876: IFTRUE 21880
21878: GO 22012
21880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 4
21891: PUSH
21892: LD_INT 5
21894: PUSH
21895: LD_INT 6
21897: PUSH
21898: LD_INT 8
21900: PUSH
21901: LD_INT 11
21903: PUSH
21904: LD_INT 12
21906: PUSH
21907: LD_INT 15
21909: PUSH
21910: LD_INT 16
21912: PUSH
21913: LD_INT 20
21915: PUSH
21916: LD_INT 21
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 23
21924: PUSH
21925: LD_INT 25
21927: PUSH
21928: LD_INT 26
21930: PUSH
21931: LD_INT 30
21933: PUSH
21934: LD_INT 31
21936: PUSH
21937: LD_INT 32
21939: PUSH
21940: LD_INT 36
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 101
21966: PUSH
21967: LD_INT 102
21969: PUSH
21970: LD_INT 105
21972: PUSH
21973: LD_INT 106
21975: PUSH
21976: LD_INT 108
21978: PUSH
21979: LD_INT 109
21981: PUSH
21982: LD_INT 112
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: ST_TO_ADDR
22010: GO 24533
22012: LD_INT 7
22014: DOUBLE
22015: EQUAL
22016: IFTRUE 22020
22018: GO 22132
22020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22021: LD_ADDR_VAR 0 2
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 4
22031: PUSH
22032: LD_INT 5
22034: PUSH
22035: LD_INT 7
22037: PUSH
22038: LD_INT 11
22040: PUSH
22041: LD_INT 12
22043: PUSH
22044: LD_INT 15
22046: PUSH
22047: LD_INT 16
22049: PUSH
22050: LD_INT 20
22052: PUSH
22053: LD_INT 21
22055: PUSH
22056: LD_INT 22
22058: PUSH
22059: LD_INT 23
22061: PUSH
22062: LD_INT 25
22064: PUSH
22065: LD_INT 26
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 101
22086: PUSH
22087: LD_INT 102
22089: PUSH
22090: LD_INT 103
22092: PUSH
22093: LD_INT 105
22095: PUSH
22096: LD_INT 106
22098: PUSH
22099: LD_INT 108
22101: PUSH
22102: LD_INT 112
22104: PUSH
22105: LD_INT 116
22107: PUSH
22108: LD_INT 117
22110: PUSH
22111: LD_INT 118
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 24533
22132: LD_INT 8
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22280
22140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22141: LD_ADDR_VAR 0 2
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: LD_INT 5
22154: PUSH
22155: LD_INT 6
22157: PUSH
22158: LD_INT 7
22160: PUSH
22161: LD_INT 8
22163: PUSH
22164: LD_INT 11
22166: PUSH
22167: LD_INT 12
22169: PUSH
22170: LD_INT 15
22172: PUSH
22173: LD_INT 16
22175: PUSH
22176: LD_INT 20
22178: PUSH
22179: LD_INT 21
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_INT 23
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 26
22193: PUSH
22194: LD_INT 30
22196: PUSH
22197: LD_INT 31
22199: PUSH
22200: LD_INT 32
22202: PUSH
22203: LD_INT 36
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 101
22230: PUSH
22231: LD_INT 102
22233: PUSH
22234: LD_INT 103
22236: PUSH
22237: LD_INT 105
22239: PUSH
22240: LD_INT 106
22242: PUSH
22243: LD_INT 108
22245: PUSH
22246: LD_INT 109
22248: PUSH
22249: LD_INT 112
22251: PUSH
22252: LD_INT 116
22254: PUSH
22255: LD_INT 117
22257: PUSH
22258: LD_INT 118
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: ST_TO_ADDR
22278: GO 24533
22280: LD_INT 9
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22436
22288: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 4
22299: PUSH
22300: LD_INT 5
22302: PUSH
22303: LD_INT 6
22305: PUSH
22306: LD_INT 7
22308: PUSH
22309: LD_INT 8
22311: PUSH
22312: LD_INT 11
22314: PUSH
22315: LD_INT 12
22317: PUSH
22318: LD_INT 15
22320: PUSH
22321: LD_INT 16
22323: PUSH
22324: LD_INT 20
22326: PUSH
22327: LD_INT 21
22329: PUSH
22330: LD_INT 22
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 25
22338: PUSH
22339: LD_INT 26
22341: PUSH
22342: LD_INT 28
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 31
22350: PUSH
22351: LD_INT 32
22353: PUSH
22354: LD_INT 36
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 101
22382: PUSH
22383: LD_INT 102
22385: PUSH
22386: LD_INT 103
22388: PUSH
22389: LD_INT 105
22391: PUSH
22392: LD_INT 106
22394: PUSH
22395: LD_INT 108
22397: PUSH
22398: LD_INT 109
22400: PUSH
22401: LD_INT 112
22403: PUSH
22404: LD_INT 114
22406: PUSH
22407: LD_INT 116
22409: PUSH
22410: LD_INT 117
22412: PUSH
22413: LD_INT 118
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: ST_TO_ADDR
22434: GO 24533
22436: LD_INT 10
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22640
22444: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: LD_INT 6
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: LD_INT 8
22467: PUSH
22468: LD_INT 9
22470: PUSH
22471: LD_INT 10
22473: PUSH
22474: LD_INT 11
22476: PUSH
22477: LD_INT 12
22479: PUSH
22480: LD_INT 13
22482: PUSH
22483: LD_INT 14
22485: PUSH
22486: LD_INT 15
22488: PUSH
22489: LD_INT 16
22491: PUSH
22492: LD_INT 17
22494: PUSH
22495: LD_INT 18
22497: PUSH
22498: LD_INT 19
22500: PUSH
22501: LD_INT 20
22503: PUSH
22504: LD_INT 21
22506: PUSH
22507: LD_INT 22
22509: PUSH
22510: LD_INT 23
22512: PUSH
22513: LD_INT 24
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 26
22521: PUSH
22522: LD_INT 28
22524: PUSH
22525: LD_INT 30
22527: PUSH
22528: LD_INT 31
22530: PUSH
22531: LD_INT 32
22533: PUSH
22534: LD_INT 36
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 101
22570: PUSH
22571: LD_INT 102
22573: PUSH
22574: LD_INT 103
22576: PUSH
22577: LD_INT 104
22579: PUSH
22580: LD_INT 105
22582: PUSH
22583: LD_INT 106
22585: PUSH
22586: LD_INT 107
22588: PUSH
22589: LD_INT 108
22591: PUSH
22592: LD_INT 109
22594: PUSH
22595: LD_INT 110
22597: PUSH
22598: LD_INT 111
22600: PUSH
22601: LD_INT 112
22603: PUSH
22604: LD_INT 114
22606: PUSH
22607: LD_INT 116
22609: PUSH
22610: LD_INT 117
22612: PUSH
22613: LD_INT 118
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 24533
22640: LD_INT 11
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22852
22648: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 6
22668: PUSH
22669: LD_INT 7
22671: PUSH
22672: LD_INT 8
22674: PUSH
22675: LD_INT 9
22677: PUSH
22678: LD_INT 10
22680: PUSH
22681: LD_INT 11
22683: PUSH
22684: LD_INT 12
22686: PUSH
22687: LD_INT 13
22689: PUSH
22690: LD_INT 14
22692: PUSH
22693: LD_INT 15
22695: PUSH
22696: LD_INT 16
22698: PUSH
22699: LD_INT 17
22701: PUSH
22702: LD_INT 18
22704: PUSH
22705: LD_INT 19
22707: PUSH
22708: LD_INT 20
22710: PUSH
22711: LD_INT 21
22713: PUSH
22714: LD_INT 22
22716: PUSH
22717: LD_INT 23
22719: PUSH
22720: LD_INT 24
22722: PUSH
22723: LD_INT 25
22725: PUSH
22726: LD_INT 26
22728: PUSH
22729: LD_INT 28
22731: PUSH
22732: LD_INT 30
22734: PUSH
22735: LD_INT 31
22737: PUSH
22738: LD_INT 32
22740: PUSH
22741: LD_INT 34
22743: PUSH
22744: LD_INT 36
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 114
22818: PUSH
22819: LD_INT 116
22821: PUSH
22822: LD_INT 117
22824: PUSH
22825: LD_INT 118
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 24533
22852: LD_INT 12
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 23080
22860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: LD_INT 4
22877: PUSH
22878: LD_INT 5
22880: PUSH
22881: LD_INT 6
22883: PUSH
22884: LD_INT 7
22886: PUSH
22887: LD_INT 8
22889: PUSH
22890: LD_INT 9
22892: PUSH
22893: LD_INT 10
22895: PUSH
22896: LD_INT 11
22898: PUSH
22899: LD_INT 12
22901: PUSH
22902: LD_INT 13
22904: PUSH
22905: LD_INT 14
22907: PUSH
22908: LD_INT 15
22910: PUSH
22911: LD_INT 16
22913: PUSH
22914: LD_INT 17
22916: PUSH
22917: LD_INT 18
22919: PUSH
22920: LD_INT 19
22922: PUSH
22923: LD_INT 20
22925: PUSH
22926: LD_INT 21
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_INT 23
22934: PUSH
22935: LD_INT 24
22937: PUSH
22938: LD_INT 25
22940: PUSH
22941: LD_INT 26
22943: PUSH
22944: LD_INT 27
22946: PUSH
22947: LD_INT 28
22949: PUSH
22950: LD_INT 30
22952: PUSH
22953: LD_INT 31
22955: PUSH
22956: LD_INT 32
22958: PUSH
22959: LD_INT 33
22961: PUSH
22962: LD_INT 34
22964: PUSH
22965: LD_INT 36
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 101
23006: PUSH
23007: LD_INT 102
23009: PUSH
23010: LD_INT 103
23012: PUSH
23013: LD_INT 104
23015: PUSH
23016: LD_INT 105
23018: PUSH
23019: LD_INT 106
23021: PUSH
23022: LD_INT 107
23024: PUSH
23025: LD_INT 108
23027: PUSH
23028: LD_INT 109
23030: PUSH
23031: LD_INT 110
23033: PUSH
23034: LD_INT 111
23036: PUSH
23037: LD_INT 112
23039: PUSH
23040: LD_INT 113
23042: PUSH
23043: LD_INT 114
23045: PUSH
23046: LD_INT 116
23048: PUSH
23049: LD_INT 117
23051: PUSH
23052: LD_INT 118
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: ST_TO_ADDR
23078: GO 24533
23080: LD_INT 13
23082: DOUBLE
23083: EQUAL
23084: IFTRUE 23088
23086: GO 23296
23088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23089: LD_ADDR_VAR 0 2
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: LD_INT 3
23102: PUSH
23103: LD_INT 4
23105: PUSH
23106: LD_INT 5
23108: PUSH
23109: LD_INT 8
23111: PUSH
23112: LD_INT 9
23114: PUSH
23115: LD_INT 10
23117: PUSH
23118: LD_INT 11
23120: PUSH
23121: LD_INT 12
23123: PUSH
23124: LD_INT 14
23126: PUSH
23127: LD_INT 15
23129: PUSH
23130: LD_INT 16
23132: PUSH
23133: LD_INT 17
23135: PUSH
23136: LD_INT 18
23138: PUSH
23139: LD_INT 19
23141: PUSH
23142: LD_INT 20
23144: PUSH
23145: LD_INT 21
23147: PUSH
23148: LD_INT 22
23150: PUSH
23151: LD_INT 23
23153: PUSH
23154: LD_INT 24
23156: PUSH
23157: LD_INT 25
23159: PUSH
23160: LD_INT 26
23162: PUSH
23163: LD_INT 27
23165: PUSH
23166: LD_INT 28
23168: PUSH
23169: LD_INT 30
23171: PUSH
23172: LD_INT 31
23174: PUSH
23175: LD_INT 32
23177: PUSH
23178: LD_INT 33
23180: PUSH
23181: LD_INT 34
23183: PUSH
23184: LD_INT 36
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 101
23222: PUSH
23223: LD_INT 102
23225: PUSH
23226: LD_INT 103
23228: PUSH
23229: LD_INT 104
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 107
23240: PUSH
23241: LD_INT 108
23243: PUSH
23244: LD_INT 109
23246: PUSH
23247: LD_INT 110
23249: PUSH
23250: LD_INT 111
23252: PUSH
23253: LD_INT 112
23255: PUSH
23256: LD_INT 113
23258: PUSH
23259: LD_INT 114
23261: PUSH
23262: LD_INT 116
23264: PUSH
23265: LD_INT 117
23267: PUSH
23268: LD_INT 118
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 24533
23296: LD_INT 14
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23528
23304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23305: LD_ADDR_VAR 0 2
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 4
23321: PUSH
23322: LD_INT 5
23324: PUSH
23325: LD_INT 6
23327: PUSH
23328: LD_INT 7
23330: PUSH
23331: LD_INT 8
23333: PUSH
23334: LD_INT 9
23336: PUSH
23337: LD_INT 10
23339: PUSH
23340: LD_INT 11
23342: PUSH
23343: LD_INT 12
23345: PUSH
23346: LD_INT 13
23348: PUSH
23349: LD_INT 14
23351: PUSH
23352: LD_INT 15
23354: PUSH
23355: LD_INT 16
23357: PUSH
23358: LD_INT 17
23360: PUSH
23361: LD_INT 18
23363: PUSH
23364: LD_INT 19
23366: PUSH
23367: LD_INT 20
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 22
23375: PUSH
23376: LD_INT 23
23378: PUSH
23379: LD_INT 24
23381: PUSH
23382: LD_INT 25
23384: PUSH
23385: LD_INT 26
23387: PUSH
23388: LD_INT 27
23390: PUSH
23391: LD_INT 28
23393: PUSH
23394: LD_INT 29
23396: PUSH
23397: LD_INT 30
23399: PUSH
23400: LD_INT 31
23402: PUSH
23403: LD_INT 32
23405: PUSH
23406: LD_INT 33
23408: PUSH
23409: LD_INT 34
23411: PUSH
23412: LD_INT 36
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 101
23454: PUSH
23455: LD_INT 102
23457: PUSH
23458: LD_INT 103
23460: PUSH
23461: LD_INT 104
23463: PUSH
23464: LD_INT 105
23466: PUSH
23467: LD_INT 106
23469: PUSH
23470: LD_INT 107
23472: PUSH
23473: LD_INT 108
23475: PUSH
23476: LD_INT 109
23478: PUSH
23479: LD_INT 110
23481: PUSH
23482: LD_INT 111
23484: PUSH
23485: LD_INT 112
23487: PUSH
23488: LD_INT 113
23490: PUSH
23491: LD_INT 114
23493: PUSH
23494: LD_INT 116
23496: PUSH
23497: LD_INT 117
23499: PUSH
23500: LD_INT 118
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: ST_TO_ADDR
23526: GO 24533
23528: LD_INT 15
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23760
23536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: LD_INT 4
23553: PUSH
23554: LD_INT 5
23556: PUSH
23557: LD_INT 6
23559: PUSH
23560: LD_INT 7
23562: PUSH
23563: LD_INT 8
23565: PUSH
23566: LD_INT 9
23568: PUSH
23569: LD_INT 10
23571: PUSH
23572: LD_INT 11
23574: PUSH
23575: LD_INT 12
23577: PUSH
23578: LD_INT 13
23580: PUSH
23581: LD_INT 14
23583: PUSH
23584: LD_INT 15
23586: PUSH
23587: LD_INT 16
23589: PUSH
23590: LD_INT 17
23592: PUSH
23593: LD_INT 18
23595: PUSH
23596: LD_INT 19
23598: PUSH
23599: LD_INT 20
23601: PUSH
23602: LD_INT 21
23604: PUSH
23605: LD_INT 22
23607: PUSH
23608: LD_INT 23
23610: PUSH
23611: LD_INT 24
23613: PUSH
23614: LD_INT 25
23616: PUSH
23617: LD_INT 26
23619: PUSH
23620: LD_INT 27
23622: PUSH
23623: LD_INT 28
23625: PUSH
23626: LD_INT 29
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 31
23634: PUSH
23635: LD_INT 32
23637: PUSH
23638: LD_INT 33
23640: PUSH
23641: LD_INT 34
23643: PUSH
23644: LD_INT 36
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 101
23686: PUSH
23687: LD_INT 102
23689: PUSH
23690: LD_INT 103
23692: PUSH
23693: LD_INT 104
23695: PUSH
23696: LD_INT 105
23698: PUSH
23699: LD_INT 106
23701: PUSH
23702: LD_INT 107
23704: PUSH
23705: LD_INT 108
23707: PUSH
23708: LD_INT 109
23710: PUSH
23711: LD_INT 110
23713: PUSH
23714: LD_INT 111
23716: PUSH
23717: LD_INT 112
23719: PUSH
23720: LD_INT 113
23722: PUSH
23723: LD_INT 114
23725: PUSH
23726: LD_INT 116
23728: PUSH
23729: LD_INT 117
23731: PUSH
23732: LD_INT 118
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: ST_TO_ADDR
23758: GO 24533
23760: LD_INT 16
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23904
23768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23769: LD_ADDR_VAR 0 2
23773: PUSH
23774: LD_INT 2
23776: PUSH
23777: LD_INT 4
23779: PUSH
23780: LD_INT 5
23782: PUSH
23783: LD_INT 7
23785: PUSH
23786: LD_INT 11
23788: PUSH
23789: LD_INT 12
23791: PUSH
23792: LD_INT 15
23794: PUSH
23795: LD_INT 16
23797: PUSH
23798: LD_INT 20
23800: PUSH
23801: LD_INT 21
23803: PUSH
23804: LD_INT 22
23806: PUSH
23807: LD_INT 23
23809: PUSH
23810: LD_INT 25
23812: PUSH
23813: LD_INT 26
23815: PUSH
23816: LD_INT 30
23818: PUSH
23819: LD_INT 31
23821: PUSH
23822: LD_INT 32
23824: PUSH
23825: LD_INT 33
23827: PUSH
23828: LD_INT 34
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 101
23854: PUSH
23855: LD_INT 102
23857: PUSH
23858: LD_INT 103
23860: PUSH
23861: LD_INT 106
23863: PUSH
23864: LD_INT 108
23866: PUSH
23867: LD_INT 112
23869: PUSH
23870: LD_INT 113
23872: PUSH
23873: LD_INT 114
23875: PUSH
23876: LD_INT 116
23878: PUSH
23879: LD_INT 117
23881: PUSH
23882: LD_INT 118
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: ST_TO_ADDR
23902: GO 24533
23904: LD_INT 17
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 24136
23912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23913: LD_ADDR_VAR 0 2
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: LD_INT 3
23926: PUSH
23927: LD_INT 4
23929: PUSH
23930: LD_INT 5
23932: PUSH
23933: LD_INT 6
23935: PUSH
23936: LD_INT 7
23938: PUSH
23939: LD_INT 8
23941: PUSH
23942: LD_INT 9
23944: PUSH
23945: LD_INT 10
23947: PUSH
23948: LD_INT 11
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 13
23956: PUSH
23957: LD_INT 14
23959: PUSH
23960: LD_INT 15
23962: PUSH
23963: LD_INT 16
23965: PUSH
23966: LD_INT 17
23968: PUSH
23969: LD_INT 18
23971: PUSH
23972: LD_INT 19
23974: PUSH
23975: LD_INT 20
23977: PUSH
23978: LD_INT 21
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_INT 23
23986: PUSH
23987: LD_INT 24
23989: PUSH
23990: LD_INT 25
23992: PUSH
23993: LD_INT 26
23995: PUSH
23996: LD_INT 27
23998: PUSH
23999: LD_INT 28
24001: PUSH
24002: LD_INT 29
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 31
24010: PUSH
24011: LD_INT 32
24013: PUSH
24014: LD_INT 33
24016: PUSH
24017: LD_INT 34
24019: PUSH
24020: LD_INT 36
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 101
24062: PUSH
24063: LD_INT 102
24065: PUSH
24066: LD_INT 103
24068: PUSH
24069: LD_INT 104
24071: PUSH
24072: LD_INT 105
24074: PUSH
24075: LD_INT 106
24077: PUSH
24078: LD_INT 107
24080: PUSH
24081: LD_INT 108
24083: PUSH
24084: LD_INT 109
24086: PUSH
24087: LD_INT 110
24089: PUSH
24090: LD_INT 111
24092: PUSH
24093: LD_INT 112
24095: PUSH
24096: LD_INT 113
24098: PUSH
24099: LD_INT 114
24101: PUSH
24102: LD_INT 116
24104: PUSH
24105: LD_INT 117
24107: PUSH
24108: LD_INT 118
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: ST_TO_ADDR
24134: GO 24533
24136: LD_INT 18
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24292
24144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24145: LD_ADDR_VAR 0 2
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 4
24155: PUSH
24156: LD_INT 5
24158: PUSH
24159: LD_INT 7
24161: PUSH
24162: LD_INT 11
24164: PUSH
24165: LD_INT 12
24167: PUSH
24168: LD_INT 15
24170: PUSH
24171: LD_INT 16
24173: PUSH
24174: LD_INT 20
24176: PUSH
24177: LD_INT 21
24179: PUSH
24180: LD_INT 22
24182: PUSH
24183: LD_INT 23
24185: PUSH
24186: LD_INT 25
24188: PUSH
24189: LD_INT 26
24191: PUSH
24192: LD_INT 30
24194: PUSH
24195: LD_INT 31
24197: PUSH
24198: LD_INT 32
24200: PUSH
24201: LD_INT 33
24203: PUSH
24204: LD_INT 34
24206: PUSH
24207: LD_INT 35
24209: PUSH
24210: LD_INT 36
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 101
24238: PUSH
24239: LD_INT 102
24241: PUSH
24242: LD_INT 103
24244: PUSH
24245: LD_INT 106
24247: PUSH
24248: LD_INT 108
24250: PUSH
24251: LD_INT 112
24253: PUSH
24254: LD_INT 113
24256: PUSH
24257: LD_INT 114
24259: PUSH
24260: LD_INT 115
24262: PUSH
24263: LD_INT 116
24265: PUSH
24266: LD_INT 117
24268: PUSH
24269: LD_INT 118
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: ST_TO_ADDR
24290: GO 24533
24292: LD_INT 19
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24532
24300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24301: LD_ADDR_VAR 0 2
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 3
24314: PUSH
24315: LD_INT 4
24317: PUSH
24318: LD_INT 5
24320: PUSH
24321: LD_INT 6
24323: PUSH
24324: LD_INT 7
24326: PUSH
24327: LD_INT 8
24329: PUSH
24330: LD_INT 9
24332: PUSH
24333: LD_INT 10
24335: PUSH
24336: LD_INT 11
24338: PUSH
24339: LD_INT 12
24341: PUSH
24342: LD_INT 13
24344: PUSH
24345: LD_INT 14
24347: PUSH
24348: LD_INT 15
24350: PUSH
24351: LD_INT 16
24353: PUSH
24354: LD_INT 17
24356: PUSH
24357: LD_INT 18
24359: PUSH
24360: LD_INT 19
24362: PUSH
24363: LD_INT 20
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 23
24374: PUSH
24375: LD_INT 24
24377: PUSH
24378: LD_INT 25
24380: PUSH
24381: LD_INT 26
24383: PUSH
24384: LD_INT 27
24386: PUSH
24387: LD_INT 28
24389: PUSH
24390: LD_INT 29
24392: PUSH
24393: LD_INT 30
24395: PUSH
24396: LD_INT 31
24398: PUSH
24399: LD_INT 32
24401: PUSH
24402: LD_INT 33
24404: PUSH
24405: LD_INT 34
24407: PUSH
24408: LD_INT 35
24410: PUSH
24411: LD_INT 36
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 101
24454: PUSH
24455: LD_INT 102
24457: PUSH
24458: LD_INT 103
24460: PUSH
24461: LD_INT 104
24463: PUSH
24464: LD_INT 105
24466: PUSH
24467: LD_INT 106
24469: PUSH
24470: LD_INT 107
24472: PUSH
24473: LD_INT 108
24475: PUSH
24476: LD_INT 109
24478: PUSH
24479: LD_INT 110
24481: PUSH
24482: LD_INT 111
24484: PUSH
24485: LD_INT 112
24487: PUSH
24488: LD_INT 113
24490: PUSH
24491: LD_INT 114
24493: PUSH
24494: LD_INT 115
24496: PUSH
24497: LD_INT 116
24499: PUSH
24500: LD_INT 117
24502: PUSH
24503: LD_INT 118
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: ST_TO_ADDR
24530: GO 24533
24532: POP
// end else
24533: GO 24764
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24535: LD_ADDR_VAR 0 2
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: LD_INT 3
24548: PUSH
24549: LD_INT 4
24551: PUSH
24552: LD_INT 5
24554: PUSH
24555: LD_INT 6
24557: PUSH
24558: LD_INT 7
24560: PUSH
24561: LD_INT 8
24563: PUSH
24564: LD_INT 9
24566: PUSH
24567: LD_INT 10
24569: PUSH
24570: LD_INT 11
24572: PUSH
24573: LD_INT 12
24575: PUSH
24576: LD_INT 13
24578: PUSH
24579: LD_INT 14
24581: PUSH
24582: LD_INT 15
24584: PUSH
24585: LD_INT 16
24587: PUSH
24588: LD_INT 17
24590: PUSH
24591: LD_INT 18
24593: PUSH
24594: LD_INT 19
24596: PUSH
24597: LD_INT 20
24599: PUSH
24600: LD_INT 21
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_INT 23
24608: PUSH
24609: LD_INT 24
24611: PUSH
24612: LD_INT 25
24614: PUSH
24615: LD_INT 26
24617: PUSH
24618: LD_INT 27
24620: PUSH
24621: LD_INT 28
24623: PUSH
24624: LD_INT 29
24626: PUSH
24627: LD_INT 30
24629: PUSH
24630: LD_INT 31
24632: PUSH
24633: LD_INT 32
24635: PUSH
24636: LD_INT 33
24638: PUSH
24639: LD_INT 34
24641: PUSH
24642: LD_INT 35
24644: PUSH
24645: LD_INT 36
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 101
24688: PUSH
24689: LD_INT 102
24691: PUSH
24692: LD_INT 103
24694: PUSH
24695: LD_INT 104
24697: PUSH
24698: LD_INT 105
24700: PUSH
24701: LD_INT 106
24703: PUSH
24704: LD_INT 107
24706: PUSH
24707: LD_INT 108
24709: PUSH
24710: LD_INT 109
24712: PUSH
24713: LD_INT 110
24715: PUSH
24716: LD_INT 111
24718: PUSH
24719: LD_INT 112
24721: PUSH
24722: LD_INT 113
24724: PUSH
24725: LD_INT 114
24727: PUSH
24728: LD_INT 115
24730: PUSH
24731: LD_INT 116
24733: PUSH
24734: LD_INT 117
24736: PUSH
24737: LD_INT 118
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: ST_TO_ADDR
// if result then
24764: LD_VAR 0 2
24768: IFFALSE 25554
// begin normal :=  ;
24770: LD_ADDR_VAR 0 5
24774: PUSH
24775: LD_STRING 
24777: ST_TO_ADDR
// hardcore :=  ;
24778: LD_ADDR_VAR 0 6
24782: PUSH
24783: LD_STRING 
24785: ST_TO_ADDR
// active :=  ;
24786: LD_ADDR_VAR 0 7
24790: PUSH
24791: LD_STRING 
24793: ST_TO_ADDR
// for i = 1 to normalCounter do
24794: LD_ADDR_VAR 0 8
24798: PUSH
24799: DOUBLE
24800: LD_INT 1
24802: DEC
24803: ST_TO_ADDR
24804: LD_EXP 61
24808: PUSH
24809: FOR_TO
24810: IFFALSE 24911
// begin tmp := 0 ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_STRING 0
24819: ST_TO_ADDR
// if result [ 1 ] then
24820: LD_VAR 0 2
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: IFFALSE 24893
// if result [ 1 ] [ 1 ] = i then
24830: LD_VAR 0 2
24834: PUSH
24835: LD_INT 1
24837: ARRAY
24838: PUSH
24839: LD_INT 1
24841: ARRAY
24842: PUSH
24843: LD_VAR 0 8
24847: EQUAL
24848: IFFALSE 24893
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24850: LD_ADDR_VAR 0 2
24854: PUSH
24855: LD_VAR 0 2
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: LD_VAR 0 2
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: LD_INT 1
24874: PPUSH
24875: CALL_OW 3
24879: PPUSH
24880: CALL_OW 1
24884: ST_TO_ADDR
// tmp := 1 ;
24885: LD_ADDR_VAR 0 3
24889: PUSH
24890: LD_STRING 1
24892: ST_TO_ADDR
// end ; normal := normal & tmp ;
24893: LD_ADDR_VAR 0 5
24897: PUSH
24898: LD_VAR 0 5
24902: PUSH
24903: LD_VAR 0 3
24907: STR
24908: ST_TO_ADDR
// end ;
24909: GO 24809
24911: POP
24912: POP
// for i = 1 to hardcoreCounter do
24913: LD_ADDR_VAR 0 8
24917: PUSH
24918: DOUBLE
24919: LD_INT 1
24921: DEC
24922: ST_TO_ADDR
24923: LD_EXP 62
24927: PUSH
24928: FOR_TO
24929: IFFALSE 25034
// begin tmp := 0 ;
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_STRING 0
24938: ST_TO_ADDR
// if result [ 2 ] then
24939: LD_VAR 0 2
24943: PUSH
24944: LD_INT 2
24946: ARRAY
24947: IFFALSE 25016
// if result [ 2 ] [ 1 ] = 100 + i then
24949: LD_VAR 0 2
24953: PUSH
24954: LD_INT 2
24956: ARRAY
24957: PUSH
24958: LD_INT 1
24960: ARRAY
24961: PUSH
24962: LD_INT 100
24964: PUSH
24965: LD_VAR 0 8
24969: PLUS
24970: EQUAL
24971: IFFALSE 25016
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_VAR 0 2
24982: PPUSH
24983: LD_INT 2
24985: PPUSH
24986: LD_VAR 0 2
24990: PUSH
24991: LD_INT 2
24993: ARRAY
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 3
25002: PPUSH
25003: CALL_OW 1
25007: ST_TO_ADDR
// tmp := 1 ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_STRING 1
25015: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25016: LD_ADDR_VAR 0 6
25020: PUSH
25021: LD_VAR 0 6
25025: PUSH
25026: LD_VAR 0 3
25030: STR
25031: ST_TO_ADDR
// end ;
25032: GO 24928
25034: POP
25035: POP
// if isGameLoad then
25036: LD_VAR 0 1
25040: IFFALSE 25515
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25042: LD_ADDR_VAR 0 4
25046: PUSH
25047: LD_EXP 65
25051: PUSH
25052: LD_EXP 64
25056: PUSH
25057: LD_EXP 66
25061: PUSH
25062: LD_EXP 63
25066: PUSH
25067: LD_EXP 67
25071: PUSH
25072: LD_EXP 68
25076: PUSH
25077: LD_EXP 69
25081: PUSH
25082: LD_EXP 70
25086: PUSH
25087: LD_EXP 71
25091: PUSH
25092: LD_EXP 72
25096: PUSH
25097: LD_EXP 73
25101: PUSH
25102: LD_EXP 74
25106: PUSH
25107: LD_EXP 75
25111: PUSH
25112: LD_EXP 76
25116: PUSH
25117: LD_EXP 84
25121: PUSH
25122: LD_EXP 85
25126: PUSH
25127: LD_EXP 86
25131: PUSH
25132: LD_EXP 87
25136: PUSH
25137: LD_EXP 89
25141: PUSH
25142: LD_EXP 90
25146: PUSH
25147: LD_EXP 91
25151: PUSH
25152: LD_EXP 94
25156: PUSH
25157: LD_EXP 96
25161: PUSH
25162: LD_EXP 97
25166: PUSH
25167: LD_EXP 98
25171: PUSH
25172: LD_EXP 100
25176: PUSH
25177: LD_EXP 101
25181: PUSH
25182: LD_EXP 104
25186: PUSH
25187: LD_EXP 105
25191: PUSH
25192: LD_EXP 106
25196: PUSH
25197: LD_EXP 107
25201: PUSH
25202: LD_EXP 108
25206: PUSH
25207: LD_EXP 109
25211: PUSH
25212: LD_EXP 110
25216: PUSH
25217: LD_EXP 111
25221: PUSH
25222: LD_EXP 112
25226: PUSH
25227: LD_EXP 77
25231: PUSH
25232: LD_EXP 78
25236: PUSH
25237: LD_EXP 81
25241: PUSH
25242: LD_EXP 82
25246: PUSH
25247: LD_EXP 83
25251: PUSH
25252: LD_EXP 79
25256: PUSH
25257: LD_EXP 80
25261: PUSH
25262: LD_EXP 88
25266: PUSH
25267: LD_EXP 92
25271: PUSH
25272: LD_EXP 93
25276: PUSH
25277: LD_EXP 95
25281: PUSH
25282: LD_EXP 99
25286: PUSH
25287: LD_EXP 102
25291: PUSH
25292: LD_EXP 103
25296: PUSH
25297: LD_EXP 113
25301: PUSH
25302: LD_EXP 114
25306: PUSH
25307: LD_EXP 115
25311: PUSH
25312: LD_EXP 116
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// tmp :=  ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_STRING 
25380: ST_TO_ADDR
// for i = 1 to normalCounter do
25381: LD_ADDR_VAR 0 8
25385: PUSH
25386: DOUBLE
25387: LD_INT 1
25389: DEC
25390: ST_TO_ADDR
25391: LD_EXP 61
25395: PUSH
25396: FOR_TO
25397: IFFALSE 25433
// begin if flags [ i ] then
25399: LD_VAR 0 4
25403: PUSH
25404: LD_VAR 0 8
25408: ARRAY
25409: IFFALSE 25431
// tmp := tmp & i & ; ;
25411: LD_ADDR_VAR 0 3
25415: PUSH
25416: LD_VAR 0 3
25420: PUSH
25421: LD_VAR 0 8
25425: STR
25426: PUSH
25427: LD_STRING ;
25429: STR
25430: ST_TO_ADDR
// end ;
25431: GO 25396
25433: POP
25434: POP
// for i = 1 to hardcoreCounter do
25435: LD_ADDR_VAR 0 8
25439: PUSH
25440: DOUBLE
25441: LD_INT 1
25443: DEC
25444: ST_TO_ADDR
25445: LD_EXP 62
25449: PUSH
25450: FOR_TO
25451: IFFALSE 25497
// begin if flags [ normalCounter + i ] then
25453: LD_VAR 0 4
25457: PUSH
25458: LD_EXP 61
25462: PUSH
25463: LD_VAR 0 8
25467: PLUS
25468: ARRAY
25469: IFFALSE 25495
// tmp := tmp & ( 100 + i ) & ; ;
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_VAR 0 3
25480: PUSH
25481: LD_INT 100
25483: PUSH
25484: LD_VAR 0 8
25488: PLUS
25489: STR
25490: PUSH
25491: LD_STRING ;
25493: STR
25494: ST_TO_ADDR
// end ;
25495: GO 25450
25497: POP
25498: POP
// if tmp then
25499: LD_VAR 0 3
25503: IFFALSE 25515
// active := tmp ;
25505: LD_ADDR_VAR 0 7
25509: PUSH
25510: LD_VAR 0 3
25514: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25515: LD_STRING getStreamItemsFromMission("
25517: PUSH
25518: LD_VAR 0 5
25522: STR
25523: PUSH
25524: LD_STRING ","
25526: STR
25527: PUSH
25528: LD_VAR 0 6
25532: STR
25533: PUSH
25534: LD_STRING ","
25536: STR
25537: PUSH
25538: LD_VAR 0 7
25542: STR
25543: PUSH
25544: LD_STRING ")
25546: STR
25547: PPUSH
25548: CALL_OW 559
// end else
25552: GO 25561
// ToLua ( getStreamItemsFromMission("","","") ) ;
25554: LD_STRING getStreamItemsFromMission("","","")
25556: PPUSH
25557: CALL_OW 559
// end ;
25561: LD_VAR 0 2
25565: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25566: LD_EXP 60
25570: PUSH
25571: LD_EXP 65
25575: AND
25576: IFFALSE 25700
25578: GO 25580
25580: DISABLE
25581: LD_INT 0
25583: PPUSH
25584: PPUSH
// begin enable ;
25585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_INT 22
25593: PUSH
25594: LD_OWVAR 2
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 34
25608: PUSH
25609: LD_INT 7
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 34
25618: PUSH
25619: LD_INT 45
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 34
25628: PUSH
25629: LD_INT 28
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 34
25638: PUSH
25639: LD_INT 47
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL_OW 69
25661: ST_TO_ADDR
// if not tmp then
25662: LD_VAR 0 2
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25700
// for i in tmp do
25671: LD_ADDR_VAR 0 1
25675: PUSH
25676: LD_VAR 0 2
25680: PUSH
25681: FOR_IN
25682: IFFALSE 25698
// begin SetLives ( i , 0 ) ;
25684: LD_VAR 0 1
25688: PPUSH
25689: LD_INT 0
25691: PPUSH
25692: CALL_OW 234
// end ;
25696: GO 25681
25698: POP
25699: POP
// end ;
25700: PPOPN 2
25702: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25703: LD_EXP 60
25707: PUSH
25708: LD_EXP 66
25712: AND
25713: IFFALSE 25797
25715: GO 25717
25717: DISABLE
25718: LD_INT 0
25720: PPUSH
25721: PPUSH
// begin enable ;
25722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25723: LD_ADDR_VAR 0 2
25727: PUSH
25728: LD_INT 22
25730: PUSH
25731: LD_OWVAR 2
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 32
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 69
25758: ST_TO_ADDR
// if not tmp then
25759: LD_VAR 0 2
25763: NOT
25764: IFFALSE 25768
// exit ;
25766: GO 25797
// for i in tmp do
25768: LD_ADDR_VAR 0 1
25772: PUSH
25773: LD_VAR 0 2
25777: PUSH
25778: FOR_IN
25779: IFFALSE 25795
// begin SetLives ( i , 0 ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: LD_INT 0
25788: PPUSH
25789: CALL_OW 234
// end ;
25793: GO 25778
25795: POP
25796: POP
// end ;
25797: PPOPN 2
25799: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25800: LD_EXP 60
25804: PUSH
25805: LD_EXP 63
25809: AND
25810: IFFALSE 25903
25812: GO 25814
25814: DISABLE
25815: LD_INT 0
25817: PPUSH
// begin enable ;
25818: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25819: LD_ADDR_VAR 0 1
25823: PUSH
25824: LD_INT 22
25826: PUSH
25827: LD_OWVAR 2
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 5
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 25
25851: PUSH
25852: LD_INT 9
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 25
25861: PUSH
25862: LD_INT 8
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: PUSH
25884: FOR_IN
25885: IFFALSE 25901
// begin SetClass ( i , 1 ) ;
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 336
// end ;
25899: GO 25884
25901: POP
25902: POP
// end ;
25903: PPOPN 1
25905: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25906: LD_EXP 60
25910: PUSH
25911: LD_EXP 64
25915: AND
25916: PUSH
25917: LD_OWVAR 65
25921: PUSH
25922: LD_INT 7
25924: LESS
25925: AND
25926: IFFALSE 25940
25928: GO 25930
25930: DISABLE
// begin enable ;
25931: ENABLE
// game_speed := 7 ;
25932: LD_ADDR_OWVAR 65
25936: PUSH
25937: LD_INT 7
25939: ST_TO_ADDR
// end ;
25940: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25941: LD_EXP 60
25945: PUSH
25946: LD_EXP 67
25950: AND
25951: IFFALSE 26153
25953: GO 25955
25955: DISABLE
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25961: LD_ADDR_VAR 0 3
25965: PUSH
25966: LD_INT 81
25968: PUSH
25969: LD_OWVAR 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 21
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PPUSH
25992: CALL_OW 69
25996: ST_TO_ADDR
// if not tmp then
25997: LD_VAR 0 3
26001: NOT
26002: IFFALSE 26006
// exit ;
26004: GO 26153
// if tmp > 5 then
26006: LD_VAR 0 3
26010: PUSH
26011: LD_INT 5
26013: GREATER
26014: IFFALSE 26026
// k := 5 else
26016: LD_ADDR_VAR 0 2
26020: PUSH
26021: LD_INT 5
26023: ST_TO_ADDR
26024: GO 26036
// k := tmp ;
26026: LD_ADDR_VAR 0 2
26030: PUSH
26031: LD_VAR 0 3
26035: ST_TO_ADDR
// for i := 1 to k do
26036: LD_ADDR_VAR 0 1
26040: PUSH
26041: DOUBLE
26042: LD_INT 1
26044: DEC
26045: ST_TO_ADDR
26046: LD_VAR 0 2
26050: PUSH
26051: FOR_TO
26052: IFFALSE 26151
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26054: LD_VAR 0 3
26058: PUSH
26059: LD_VAR 0 1
26063: ARRAY
26064: PPUSH
26065: LD_VAR 0 1
26069: PUSH
26070: LD_INT 4
26072: MOD
26073: PUSH
26074: LD_INT 1
26076: PLUS
26077: PPUSH
26078: CALL_OW 259
26082: PUSH
26083: LD_INT 10
26085: LESS
26086: IFFALSE 26149
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26088: LD_VAR 0 3
26092: PUSH
26093: LD_VAR 0 1
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 1
26103: PUSH
26104: LD_INT 4
26106: MOD
26107: PUSH
26108: LD_INT 1
26110: PLUS
26111: PPUSH
26112: LD_VAR 0 3
26116: PUSH
26117: LD_VAR 0 1
26121: ARRAY
26122: PPUSH
26123: LD_VAR 0 1
26127: PUSH
26128: LD_INT 4
26130: MOD
26131: PUSH
26132: LD_INT 1
26134: PLUS
26135: PPUSH
26136: CALL_OW 259
26140: PUSH
26141: LD_INT 1
26143: PLUS
26144: PPUSH
26145: CALL_OW 237
26149: GO 26051
26151: POP
26152: POP
// end ;
26153: PPOPN 3
26155: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26156: LD_EXP 60
26160: PUSH
26161: LD_EXP 68
26165: AND
26166: IFFALSE 26186
26168: GO 26170
26170: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26171: LD_INT 4
26173: PPUSH
26174: LD_OWVAR 2
26178: PPUSH
26179: LD_INT 0
26181: PPUSH
26182: CALL_OW 324
26186: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26187: LD_EXP 60
26191: PUSH
26192: LD_EXP 97
26196: AND
26197: IFFALSE 26217
26199: GO 26201
26201: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26202: LD_INT 19
26204: PPUSH
26205: LD_OWVAR 2
26209: PPUSH
26210: LD_INT 0
26212: PPUSH
26213: CALL_OW 324
26217: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26218: LD_EXP 60
26222: PUSH
26223: LD_EXP 69
26227: AND
26228: IFFALSE 26330
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// begin enable ;
26237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 34
26260: PUSH
26261: LD_INT 11
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 34
26270: PUSH
26271: LD_INT 30
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PPUSH
26287: CALL_OW 69
26291: ST_TO_ADDR
// if not tmp then
26292: LD_VAR 0 2
26296: NOT
26297: IFFALSE 26301
// exit ;
26299: GO 26330
// for i in tmp do
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: LD_VAR 0 2
26310: PUSH
26311: FOR_IN
26312: IFFALSE 26328
// begin SetLives ( i , 0 ) ;
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_INT 0
26321: PPUSH
26322: CALL_OW 234
// end ;
26326: GO 26311
26328: POP
26329: POP
// end ;
26330: PPOPN 2
26332: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26333: LD_EXP 60
26337: PUSH
26338: LD_EXP 70
26342: AND
26343: IFFALSE 26363
26345: GO 26347
26347: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26348: LD_INT 32
26350: PPUSH
26351: LD_OWVAR 2
26355: PPUSH
26356: LD_INT 0
26358: PPUSH
26359: CALL_OW 324
26363: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26364: LD_EXP 60
26368: PUSH
26369: LD_EXP 71
26373: AND
26374: IFFALSE 26555
26376: GO 26378
26378: DISABLE
26379: LD_INT 0
26381: PPUSH
26382: PPUSH
26383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26384: LD_ADDR_VAR 0 2
26388: PUSH
26389: LD_INT 22
26391: PUSH
26392: LD_OWVAR 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 33
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: ST_TO_ADDR
// if not tmp then
26420: LD_VAR 0 2
26424: NOT
26425: IFFALSE 26429
// exit ;
26427: GO 26555
// side := 0 ;
26429: LD_ADDR_VAR 0 3
26433: PUSH
26434: LD_INT 0
26436: ST_TO_ADDR
// for i := 1 to 8 do
26437: LD_ADDR_VAR 0 1
26441: PUSH
26442: DOUBLE
26443: LD_INT 1
26445: DEC
26446: ST_TO_ADDR
26447: LD_INT 8
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26499
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26453: LD_OWVAR 2
26457: PUSH
26458: LD_VAR 0 1
26462: NONEQUAL
26463: PUSH
26464: LD_OWVAR 2
26468: PPUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 81
26478: PUSH
26479: LD_INT 2
26481: EQUAL
26482: AND
26483: IFFALSE 26497
// begin side := i ;
26485: LD_ADDR_VAR 0 3
26489: PUSH
26490: LD_VAR 0 1
26494: ST_TO_ADDR
// break ;
26495: GO 26499
// end ;
26497: GO 26450
26499: POP
26500: POP
// if not side then
26501: LD_VAR 0 3
26505: NOT
26506: IFFALSE 26510
// exit ;
26508: GO 26555
// for i := 1 to tmp do
26510: LD_ADDR_VAR 0 1
26514: PUSH
26515: DOUBLE
26516: LD_INT 1
26518: DEC
26519: ST_TO_ADDR
26520: LD_VAR 0 2
26524: PUSH
26525: FOR_TO
26526: IFFALSE 26553
// if Prob ( 60 ) then
26528: LD_INT 60
26530: PPUSH
26531: CALL_OW 13
26535: IFFALSE 26551
// SetSide ( i , side ) ;
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_VAR 0 3
26546: PPUSH
26547: CALL_OW 235
26551: GO 26525
26553: POP
26554: POP
// end ;
26555: PPOPN 3
26557: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26558: LD_EXP 60
26562: PUSH
26563: LD_EXP 73
26567: AND
26568: IFFALSE 26687
26570: GO 26572
26572: DISABLE
26573: LD_INT 0
26575: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 3
26605: PUSH
26606: LD_INT 23
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: PPUSH
26625: CALL_OW 69
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26685
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26633: LD_VAR 0 1
26637: PPUSH
26638: CALL_OW 257
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 3
26651: PUSH
26652: LD_INT 4
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: IN
26661: IFFALSE 26683
// SetClass ( un , rand ( 1 , 4 ) ) ;
26663: LD_VAR 0 1
26667: PPUSH
26668: LD_INT 1
26670: PPUSH
26671: LD_INT 4
26673: PPUSH
26674: CALL_OW 12
26678: PPUSH
26679: CALL_OW 336
26683: GO 26630
26685: POP
26686: POP
// end ;
26687: PPOPN 1
26689: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26690: LD_EXP 60
26694: PUSH
26695: LD_EXP 72
26699: AND
26700: IFFALSE 26779
26702: GO 26704
26704: DISABLE
26705: LD_INT 0
26707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26708: LD_ADDR_VAR 0 1
26712: PUSH
26713: LD_INT 22
26715: PUSH
26716: LD_OWVAR 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 21
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PPUSH
26739: CALL_OW 69
26743: ST_TO_ADDR
// if not tmp then
26744: LD_VAR 0 1
26748: NOT
26749: IFFALSE 26753
// exit ;
26751: GO 26779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26753: LD_VAR 0 1
26757: PUSH
26758: LD_INT 1
26760: PPUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 12
26770: ARRAY
26771: PPUSH
26772: LD_INT 100
26774: PPUSH
26775: CALL_OW 234
// end ;
26779: PPOPN 1
26781: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26782: LD_EXP 60
26786: PUSH
26787: LD_EXP 74
26791: AND
26792: IFFALSE 26890
26794: GO 26796
26796: DISABLE
26797: LD_INT 0
26799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_OWVAR 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 21
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: ST_TO_ADDR
// if not tmp then
26836: LD_VAR 0 1
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 26890
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26845: LD_VAR 0 1
26849: PUSH
26850: LD_INT 1
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 12
26862: ARRAY
26863: PPUSH
26864: LD_INT 1
26866: PPUSH
26867: LD_INT 4
26869: PPUSH
26870: CALL_OW 12
26874: PPUSH
26875: LD_INT 3000
26877: PPUSH
26878: LD_INT 9000
26880: PPUSH
26881: CALL_OW 12
26885: PPUSH
26886: CALL_OW 492
// end ;
26890: PPOPN 1
26892: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26893: LD_EXP 60
26897: PUSH
26898: LD_EXP 75
26902: AND
26903: IFFALSE 26923
26905: GO 26907
26907: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26908: LD_INT 1
26910: PPUSH
26911: LD_OWVAR 2
26915: PPUSH
26916: LD_INT 0
26918: PPUSH
26919: CALL_OW 324
26923: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26924: LD_EXP 60
26928: PUSH
26929: LD_EXP 76
26933: AND
26934: IFFALSE 27017
26936: GO 26938
26938: DISABLE
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26943: LD_ADDR_VAR 0 2
26947: PUSH
26948: LD_INT 22
26950: PUSH
26951: LD_OWVAR 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 21
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 69
26978: ST_TO_ADDR
// if not tmp then
26979: LD_VAR 0 2
26983: NOT
26984: IFFALSE 26988
// exit ;
26986: GO 27017
// for i in tmp do
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: LD_VAR 0 2
26997: PUSH
26998: FOR_IN
26999: IFFALSE 27015
// SetBLevel ( i , 10 ) ;
27001: LD_VAR 0 1
27005: PPUSH
27006: LD_INT 10
27008: PPUSH
27009: CALL_OW 241
27013: GO 26998
27015: POP
27016: POP
// end ;
27017: PPOPN 2
27019: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27020: LD_EXP 60
27024: PUSH
27025: LD_EXP 77
27029: AND
27030: IFFALSE 27141
27032: GO 27034
27034: DISABLE
27035: LD_INT 0
27037: PPUSH
27038: PPUSH
27039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: LD_INT 22
27047: PUSH
27048: LD_OWVAR 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 25
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if not tmp then
27076: LD_VAR 0 3
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 27141
// un := tmp [ rand ( 1 , tmp ) ] ;
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: LD_VAR 0 3
27094: PUSH
27095: LD_INT 1
27097: PPUSH
27098: LD_VAR 0 3
27102: PPUSH
27103: CALL_OW 12
27107: ARRAY
27108: ST_TO_ADDR
// if Crawls ( un ) then
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL_OW 318
27118: IFFALSE 27129
// ComWalk ( un ) ;
27120: LD_VAR 0 2
27124: PPUSH
27125: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27129: LD_VAR 0 2
27133: PPUSH
27134: LD_INT 5
27136: PPUSH
27137: CALL_OW 336
// end ;
27141: PPOPN 3
27143: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27144: LD_EXP 60
27148: PUSH
27149: LD_EXP 78
27153: AND
27154: PUSH
27155: LD_OWVAR 67
27159: PUSH
27160: LD_INT 4
27162: LESS
27163: AND
27164: IFFALSE 27183
27166: GO 27168
27168: DISABLE
// begin Difficulty := Difficulty + 1 ;
27169: LD_ADDR_OWVAR 67
27173: PUSH
27174: LD_OWVAR 67
27178: PUSH
27179: LD_INT 1
27181: PLUS
27182: ST_TO_ADDR
// end ;
27183: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27184: LD_EXP 60
27188: PUSH
27189: LD_EXP 79
27193: AND
27194: IFFALSE 27297
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
// begin for i := 1 to 5 do
27202: LD_ADDR_VAR 0 1
27206: PUSH
27207: DOUBLE
27208: LD_INT 1
27210: DEC
27211: ST_TO_ADDR
27212: LD_INT 5
27214: PUSH
27215: FOR_TO
27216: IFFALSE 27295
// begin uc_nation := nation_nature ;
27218: LD_ADDR_OWVAR 21
27222: PUSH
27223: LD_INT 0
27225: ST_TO_ADDR
// uc_side := 0 ;
27226: LD_ADDR_OWVAR 20
27230: PUSH
27231: LD_INT 0
27233: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27234: LD_ADDR_OWVAR 29
27238: PUSH
27239: LD_INT 12
27241: PUSH
27242: LD_INT 12
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// hc_agressivity := 20 ;
27249: LD_ADDR_OWVAR 35
27253: PUSH
27254: LD_INT 20
27256: ST_TO_ADDR
// hc_class := class_tiger ;
27257: LD_ADDR_OWVAR 28
27261: PUSH
27262: LD_INT 14
27264: ST_TO_ADDR
// hc_gallery :=  ;
27265: LD_ADDR_OWVAR 33
27269: PUSH
27270: LD_STRING 
27272: ST_TO_ADDR
// hc_name :=  ;
27273: LD_ADDR_OWVAR 26
27277: PUSH
27278: LD_STRING 
27280: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27281: CALL_OW 44
27285: PPUSH
27286: LD_INT 0
27288: PPUSH
27289: CALL_OW 51
// end ;
27293: GO 27215
27295: POP
27296: POP
// end ;
27297: PPOPN 1
27299: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27300: LD_EXP 60
27304: PUSH
27305: LD_EXP 80
27309: AND
27310: IFFALSE 27319
27312: GO 27314
27314: DISABLE
// StreamSibBomb ;
27315: CALL 27320 0 0
27319: END
// export function StreamSibBomb ; var i , x , y ; begin
27320: LD_INT 0
27322: PPUSH
27323: PPUSH
27324: PPUSH
27325: PPUSH
// result := false ;
27326: LD_ADDR_VAR 0 1
27330: PUSH
27331: LD_INT 0
27333: ST_TO_ADDR
// for i := 1 to 16 do
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: DOUBLE
27340: LD_INT 1
27342: DEC
27343: ST_TO_ADDR
27344: LD_INT 16
27346: PUSH
27347: FOR_TO
27348: IFFALSE 27547
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: LD_INT 10
27357: PUSH
27358: LD_INT 20
27360: PUSH
27361: LD_INT 30
27363: PUSH
27364: LD_INT 40
27366: PUSH
27367: LD_INT 50
27369: PUSH
27370: LD_INT 60
27372: PUSH
27373: LD_INT 70
27375: PUSH
27376: LD_INT 80
27378: PUSH
27379: LD_INT 90
27381: PUSH
27382: LD_INT 100
27384: PUSH
27385: LD_INT 110
27387: PUSH
27388: LD_INT 120
27390: PUSH
27391: LD_INT 130
27393: PUSH
27394: LD_INT 140
27396: PUSH
27397: LD_INT 150
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: PPUSH
27420: LD_INT 15
27422: PPUSH
27423: CALL_OW 12
27427: ARRAY
27428: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: LD_INT 10
27436: PUSH
27437: LD_INT 20
27439: PUSH
27440: LD_INT 30
27442: PUSH
27443: LD_INT 40
27445: PUSH
27446: LD_INT 50
27448: PUSH
27449: LD_INT 60
27451: PUSH
27452: LD_INT 70
27454: PUSH
27455: LD_INT 80
27457: PUSH
27458: LD_INT 90
27460: PUSH
27461: LD_INT 100
27463: PUSH
27464: LD_INT 110
27466: PUSH
27467: LD_INT 120
27469: PUSH
27470: LD_INT 130
27472: PUSH
27473: LD_INT 140
27475: PUSH
27476: LD_INT 150
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PPUSH
27499: LD_INT 15
27501: PPUSH
27502: CALL_OW 12
27506: ARRAY
27507: ST_TO_ADDR
// if ValidHex ( x , y ) then
27508: LD_VAR 0 3
27512: PPUSH
27513: LD_VAR 0 4
27517: PPUSH
27518: CALL_OW 488
27522: IFFALSE 27545
// begin result := [ x , y ] ;
27524: LD_ADDR_VAR 0 1
27528: PUSH
27529: LD_VAR 0 3
27533: PUSH
27534: LD_VAR 0 4
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// break ;
27543: GO 27547
// end ; end ;
27545: GO 27347
27547: POP
27548: POP
// if result then
27549: LD_VAR 0 1
27553: IFFALSE 27613
// begin ToLua ( playSibBomb() ) ;
27555: LD_STRING playSibBomb()
27557: PPUSH
27558: CALL_OW 559
// wait ( 0 0$14 ) ;
27562: LD_INT 490
27564: PPUSH
27565: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: ARRAY
27577: PPUSH
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 2
27585: ARRAY
27586: PPUSH
27587: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_VAR 0 1
27604: PUSH
27605: LD_INT 2
27607: ARRAY
27608: PPUSH
27609: CALL_OW 429
// end ; end ;
27613: LD_VAR 0 1
27617: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27618: LD_EXP 60
27622: PUSH
27623: LD_EXP 82
27627: AND
27628: IFFALSE 27640
27630: GO 27632
27632: DISABLE
// YouLost (  ) ;
27633: LD_STRING 
27635: PPUSH
27636: CALL_OW 104
27640: END
// every 0 0$1 trigger StreamModeActive and sFog do
27641: LD_EXP 60
27645: PUSH
27646: LD_EXP 81
27650: AND
27651: IFFALSE 27665
27653: GO 27655
27655: DISABLE
// FogOff ( your_side ) ;
27656: LD_OWVAR 2
27660: PPUSH
27661: CALL_OW 344
27665: END
// every 0 0$1 trigger StreamModeActive and sSun do
27666: LD_EXP 60
27670: PUSH
27671: LD_EXP 83
27675: AND
27676: IFFALSE 27704
27678: GO 27680
27680: DISABLE
// begin solar_recharge_percent := 0 ;
27681: LD_ADDR_OWVAR 79
27685: PUSH
27686: LD_INT 0
27688: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27689: LD_INT 10500
27691: PPUSH
27692: CALL_OW 67
// solar_recharge_percent := 100 ;
27696: LD_ADDR_OWVAR 79
27700: PUSH
27701: LD_INT 100
27703: ST_TO_ADDR
// end ;
27704: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27705: LD_EXP 60
27709: PUSH
27710: LD_EXP 84
27714: AND
27715: IFFALSE 27954
27717: GO 27719
27719: DISABLE
27720: LD_INT 0
27722: PPUSH
27723: PPUSH
27724: PPUSH
// begin tmp := [ ] ;
27725: LD_ADDR_VAR 0 3
27729: PUSH
27730: EMPTY
27731: ST_TO_ADDR
// for i := 1 to 6 do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: DOUBLE
27738: LD_INT 1
27740: DEC
27741: ST_TO_ADDR
27742: LD_INT 6
27744: PUSH
27745: FOR_TO
27746: IFFALSE 27851
// begin uc_nation := nation_nature ;
27748: LD_ADDR_OWVAR 21
27752: PUSH
27753: LD_INT 0
27755: ST_TO_ADDR
// uc_side := 0 ;
27756: LD_ADDR_OWVAR 20
27760: PUSH
27761: LD_INT 0
27763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27764: LD_ADDR_OWVAR 29
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 12
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// hc_agressivity := 20 ;
27779: LD_ADDR_OWVAR 35
27783: PUSH
27784: LD_INT 20
27786: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27787: LD_ADDR_OWVAR 28
27791: PUSH
27792: LD_INT 17
27794: ST_TO_ADDR
// hc_gallery :=  ;
27795: LD_ADDR_OWVAR 33
27799: PUSH
27800: LD_STRING 
27802: ST_TO_ADDR
// hc_name :=  ;
27803: LD_ADDR_OWVAR 26
27807: PUSH
27808: LD_STRING 
27810: ST_TO_ADDR
// un := CreateHuman ;
27811: LD_ADDR_VAR 0 2
27815: PUSH
27816: CALL_OW 44
27820: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27821: LD_VAR 0 2
27825: PPUSH
27826: LD_INT 1
27828: PPUSH
27829: CALL_OW 51
// tmp := tmp ^ un ;
27833: LD_ADDR_VAR 0 3
27837: PUSH
27838: LD_VAR 0 3
27842: PUSH
27843: LD_VAR 0 2
27847: ADD
27848: ST_TO_ADDR
// end ;
27849: GO 27745
27851: POP
27852: POP
// repeat wait ( 0 0$1 ) ;
27853: LD_INT 35
27855: PPUSH
27856: CALL_OW 67
// for un in tmp do
27860: LD_ADDR_VAR 0 2
27864: PUSH
27865: LD_VAR 0 3
27869: PUSH
27870: FOR_IN
27871: IFFALSE 27945
// begin if IsDead ( un ) then
27873: LD_VAR 0 2
27877: PPUSH
27878: CALL_OW 301
27882: IFFALSE 27902
// begin tmp := tmp diff un ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_VAR 0 3
27893: PUSH
27894: LD_VAR 0 2
27898: DIFF
27899: ST_TO_ADDR
// continue ;
27900: GO 27870
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_INT 3
27909: PUSH
27910: LD_INT 22
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: PPUSH
27929: LD_VAR 0 2
27933: PPUSH
27934: CALL_OW 74
27938: PPUSH
27939: CALL_OW 115
// end ;
27943: GO 27870
27945: POP
27946: POP
// until not tmp ;
27947: LD_VAR 0 3
27951: NOT
27952: IFFALSE 27853
// end ;
27954: PPOPN 3
27956: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27957: LD_EXP 60
27961: PUSH
27962: LD_EXP 85
27966: AND
27967: IFFALSE 28021
27969: GO 27971
27971: DISABLE
// begin ToLua ( displayTroll(); ) ;
27972: LD_STRING displayTroll();
27974: PPUSH
27975: CALL_OW 559
// wait ( 3 3$00 ) ;
27979: LD_INT 6300
27981: PPUSH
27982: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27986: LD_STRING hideTroll();
27988: PPUSH
27989: CALL_OW 559
// wait ( 1 1$00 ) ;
27993: LD_INT 2100
27995: PPUSH
27996: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28000: LD_STRING displayTroll();
28002: PPUSH
28003: CALL_OW 559
// wait ( 1 1$00 ) ;
28007: LD_INT 2100
28009: PPUSH
28010: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28014: LD_STRING hideTroll();
28016: PPUSH
28017: CALL_OW 559
// end ;
28021: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28022: LD_EXP 60
28026: PUSH
28027: LD_EXP 86
28031: AND
28032: IFFALSE 28095
28034: GO 28036
28036: DISABLE
28037: LD_INT 0
28039: PPUSH
// begin p := 0 ;
28040: LD_ADDR_VAR 0 1
28044: PUSH
28045: LD_INT 0
28047: ST_TO_ADDR
// repeat game_speed := 1 ;
28048: LD_ADDR_OWVAR 65
28052: PUSH
28053: LD_INT 1
28055: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28056: LD_INT 35
28058: PPUSH
28059: CALL_OW 67
// p := p + 1 ;
28063: LD_ADDR_VAR 0 1
28067: PUSH
28068: LD_VAR 0 1
28072: PUSH
28073: LD_INT 1
28075: PLUS
28076: ST_TO_ADDR
// until p >= 60 ;
28077: LD_VAR 0 1
28081: PUSH
28082: LD_INT 60
28084: GREATEREQUAL
28085: IFFALSE 28048
// game_speed := 4 ;
28087: LD_ADDR_OWVAR 65
28091: PUSH
28092: LD_INT 4
28094: ST_TO_ADDR
// end ;
28095: PPOPN 1
28097: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28098: LD_EXP 60
28102: PUSH
28103: LD_EXP 87
28107: AND
28108: IFFALSE 28254
28110: GO 28112
28112: DISABLE
28113: LD_INT 0
28115: PPUSH
28116: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28117: LD_ADDR_VAR 0 1
28121: PUSH
28122: LD_INT 22
28124: PUSH
28125: LD_OWVAR 2
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 30
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 30
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PPUSH
28166: CALL_OW 69
28170: ST_TO_ADDR
// if not depot then
28171: LD_VAR 0 1
28175: NOT
28176: IFFALSE 28180
// exit ;
28178: GO 28254
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28180: LD_ADDR_VAR 0 2
28184: PUSH
28185: LD_VAR 0 1
28189: PUSH
28190: LD_INT 1
28192: PPUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL_OW 12
28202: ARRAY
28203: PPUSH
28204: CALL_OW 274
28208: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28209: LD_VAR 0 2
28213: PPUSH
28214: LD_INT 1
28216: PPUSH
28217: LD_INT 0
28219: PPUSH
28220: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28224: LD_VAR 0 2
28228: PPUSH
28229: LD_INT 2
28231: PPUSH
28232: LD_INT 0
28234: PPUSH
28235: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28239: LD_VAR 0 2
28243: PPUSH
28244: LD_INT 3
28246: PPUSH
28247: LD_INT 0
28249: PPUSH
28250: CALL_OW 277
// end ;
28254: PPOPN 2
28256: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28257: LD_EXP 60
28261: PUSH
28262: LD_EXP 88
28266: AND
28267: IFFALSE 28364
28269: GO 28271
28271: DISABLE
28272: LD_INT 0
28274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28275: LD_ADDR_VAR 0 1
28279: PUSH
28280: LD_INT 22
28282: PUSH
28283: LD_OWVAR 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 21
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 3
28304: PUSH
28305: LD_INT 23
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: PPUSH
28324: CALL_OW 69
28328: ST_TO_ADDR
// if not tmp then
28329: LD_VAR 0 1
28333: NOT
28334: IFFALSE 28338
// exit ;
28336: GO 28364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28338: LD_VAR 0 1
28342: PUSH
28343: LD_INT 1
28345: PPUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 12
28355: ARRAY
28356: PPUSH
28357: LD_INT 200
28359: PPUSH
28360: CALL_OW 234
// end ;
28364: PPOPN 1
28366: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28367: LD_EXP 60
28371: PUSH
28372: LD_EXP 89
28376: AND
28377: IFFALSE 28456
28379: GO 28381
28381: DISABLE
28382: LD_INT 0
28384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28385: LD_ADDR_VAR 0 1
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_OWVAR 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 21
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: ST_TO_ADDR
// if not tmp then
28421: LD_VAR 0 1
28425: NOT
28426: IFFALSE 28430
// exit ;
28428: GO 28456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28430: LD_VAR 0 1
28434: PUSH
28435: LD_INT 1
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 12
28447: ARRAY
28448: PPUSH
28449: LD_INT 60
28451: PPUSH
28452: CALL_OW 234
// end ;
28456: PPOPN 1
28458: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28459: LD_EXP 60
28463: PUSH
28464: LD_EXP 90
28468: AND
28469: IFFALSE 28568
28471: GO 28473
28473: DISABLE
28474: LD_INT 0
28476: PPUSH
28477: PPUSH
// begin enable ;
28478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28479: LD_ADDR_VAR 0 1
28483: PUSH
28484: LD_INT 22
28486: PUSH
28487: LD_OWVAR 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 61
28498: PUSH
28499: EMPTY
28500: LIST
28501: PUSH
28502: LD_INT 33
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 1
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 28568
// for i in tmp do
28531: LD_ADDR_VAR 0 2
28535: PUSH
28536: LD_VAR 0 1
28540: PUSH
28541: FOR_IN
28542: IFFALSE 28566
// if IsControledBy ( i ) then
28544: LD_VAR 0 2
28548: PPUSH
28549: CALL_OW 312
28553: IFFALSE 28564
// ComUnlink ( i ) ;
28555: LD_VAR 0 2
28559: PPUSH
28560: CALL_OW 136
28564: GO 28541
28566: POP
28567: POP
// end ;
28568: PPOPN 2
28570: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28571: LD_EXP 60
28575: PUSH
28576: LD_EXP 91
28580: AND
28581: IFFALSE 28721
28583: GO 28585
28585: DISABLE
28586: LD_INT 0
28588: PPUSH
28589: PPUSH
// begin ToLua ( displayPowell(); ) ;
28590: LD_STRING displayPowell();
28592: PPUSH
28593: CALL_OW 559
// uc_side := 0 ;
28597: LD_ADDR_OWVAR 20
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// uc_nation := 2 ;
28605: LD_ADDR_OWVAR 21
28609: PUSH
28610: LD_INT 2
28612: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28613: LD_ADDR_OWVAR 37
28617: PUSH
28618: LD_INT 14
28620: ST_TO_ADDR
// vc_engine := engine_siberite ;
28621: LD_ADDR_OWVAR 39
28625: PUSH
28626: LD_INT 3
28628: ST_TO_ADDR
// vc_control := control_apeman ;
28629: LD_ADDR_OWVAR 38
28633: PUSH
28634: LD_INT 5
28636: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28637: LD_ADDR_OWVAR 40
28641: PUSH
28642: LD_INT 29
28644: ST_TO_ADDR
// un := CreateVehicle ;
28645: LD_ADDR_VAR 0 2
28649: PUSH
28650: CALL_OW 45
28654: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28655: LD_VAR 0 2
28659: PPUSH
28660: LD_INT 1
28662: PPUSH
28663: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28667: LD_INT 35
28669: PPUSH
28670: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28674: LD_VAR 0 2
28678: PPUSH
28679: LD_INT 22
28681: PUSH
28682: LD_OWVAR 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PPUSH
28691: CALL_OW 69
28695: PPUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: CALL_OW 74
28705: PPUSH
28706: CALL_OW 115
// until IsDead ( un ) ;
28710: LD_VAR 0 2
28714: PPUSH
28715: CALL_OW 301
28719: IFFALSE 28667
// end ;
28721: PPOPN 2
28723: END
// every 0 0$1 trigger StreamModeActive and sStu do
28724: LD_EXP 60
28728: PUSH
28729: LD_EXP 99
28733: AND
28734: IFFALSE 28750
28736: GO 28738
28738: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28739: LD_STRING displayStucuk();
28741: PPUSH
28742: CALL_OW 559
// ResetFog ;
28746: CALL_OW 335
// end ;
28750: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28751: LD_EXP 60
28755: PUSH
28756: LD_EXP 92
28760: AND
28761: IFFALSE 28902
28763: GO 28765
28765: DISABLE
28766: LD_INT 0
28768: PPUSH
28769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28770: LD_ADDR_VAR 0 2
28774: PUSH
28775: LD_INT 22
28777: PUSH
28778: LD_OWVAR 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 21
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 2
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 28902
// un := tmp [ rand ( 1 , tmp ) ] ;
28815: LD_ADDR_VAR 0 1
28819: PUSH
28820: LD_VAR 0 2
28824: PUSH
28825: LD_INT 1
28827: PPUSH
28828: LD_VAR 0 2
28832: PPUSH
28833: CALL_OW 12
28837: ARRAY
28838: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28839: LD_VAR 0 1
28843: PPUSH
28844: LD_INT 0
28846: PPUSH
28847: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28851: LD_VAR 0 1
28855: PPUSH
28856: LD_OWVAR 3
28860: PUSH
28861: LD_VAR 0 1
28865: DIFF
28866: PPUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 74
28876: PPUSH
28877: CALL_OW 115
// wait ( 0 0$20 ) ;
28881: LD_INT 700
28883: PPUSH
28884: CALL_OW 67
// SetSide ( un , your_side ) ;
28888: LD_VAR 0 1
28892: PPUSH
28893: LD_OWVAR 2
28897: PPUSH
28898: CALL_OW 235
// end ;
28902: PPOPN 2
28904: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28905: LD_EXP 60
28909: PUSH
28910: LD_EXP 93
28914: AND
28915: IFFALSE 29021
28917: GO 28919
28919: DISABLE
28920: LD_INT 0
28922: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28923: LD_ADDR_VAR 0 1
28927: PUSH
28928: LD_INT 22
28930: PUSH
28931: LD_OWVAR 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 30
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 30
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PPUSH
28972: CALL_OW 69
28976: ST_TO_ADDR
// if not depot then
28977: LD_VAR 0 1
28981: NOT
28982: IFFALSE 28986
// exit ;
28984: GO 29021
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28986: LD_VAR 0 1
28990: PUSH
28991: LD_INT 1
28993: ARRAY
28994: PPUSH
28995: CALL_OW 250
28999: PPUSH
29000: LD_VAR 0 1
29004: PUSH
29005: LD_INT 1
29007: ARRAY
29008: PPUSH
29009: CALL_OW 251
29013: PPUSH
29014: LD_INT 70
29016: PPUSH
29017: CALL_OW 495
// end ;
29021: PPOPN 1
29023: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29024: LD_EXP 60
29028: PUSH
29029: LD_EXP 94
29033: AND
29034: IFFALSE 29245
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29046: LD_ADDR_VAR 0 5
29050: PUSH
29051: LD_INT 22
29053: PUSH
29054: LD_OWVAR 2
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 21
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 69
29081: ST_TO_ADDR
// if not tmp then
29082: LD_VAR 0 5
29086: NOT
29087: IFFALSE 29091
// exit ;
29089: GO 29245
// for i in tmp do
29091: LD_ADDR_VAR 0 1
29095: PUSH
29096: LD_VAR 0 5
29100: PUSH
29101: FOR_IN
29102: IFFALSE 29243
// begin d := rand ( 0 , 5 ) ;
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: LD_INT 0
29111: PPUSH
29112: LD_INT 5
29114: PPUSH
29115: CALL_OW 12
29119: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: LD_VAR 0 1
29129: PPUSH
29130: CALL_OW 250
29134: PPUSH
29135: LD_VAR 0 4
29139: PPUSH
29140: LD_INT 3
29142: PPUSH
29143: LD_INT 12
29145: PPUSH
29146: CALL_OW 12
29150: PPUSH
29151: CALL_OW 272
29155: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_VAR 0 1
29165: PPUSH
29166: CALL_OW 251
29170: PPUSH
29171: LD_VAR 0 4
29175: PPUSH
29176: LD_INT 3
29178: PPUSH
29179: LD_INT 12
29181: PPUSH
29182: CALL_OW 12
29186: PPUSH
29187: CALL_OW 273
29191: ST_TO_ADDR
// if ValidHex ( x , y ) then
29192: LD_VAR 0 2
29196: PPUSH
29197: LD_VAR 0 3
29201: PPUSH
29202: CALL_OW 488
29206: IFFALSE 29241
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_VAR 0 3
29222: PPUSH
29223: LD_INT 3
29225: PPUSH
29226: LD_INT 6
29228: PPUSH
29229: CALL_OW 12
29233: PPUSH
29234: LD_INT 1
29236: PPUSH
29237: CALL_OW 483
// end ;
29241: GO 29101
29243: POP
29244: POP
// end ;
29245: PPOPN 5
29247: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29248: LD_EXP 60
29252: PUSH
29253: LD_EXP 95
29257: AND
29258: IFFALSE 29352
29260: GO 29262
29262: DISABLE
29263: LD_INT 0
29265: PPUSH
29266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: LD_OWVAR 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 32
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 21
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: PPUSH
29309: CALL_OW 69
29313: ST_TO_ADDR
// if not tmp then
29314: LD_VAR 0 2
29318: NOT
29319: IFFALSE 29323
// exit ;
29321: GO 29352
// for i in tmp do
29323: LD_ADDR_VAR 0 1
29327: PUSH
29328: LD_VAR 0 2
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29350
// SetFuel ( i , 0 ) ;
29336: LD_VAR 0 1
29340: PPUSH
29341: LD_INT 0
29343: PPUSH
29344: CALL_OW 240
29348: GO 29333
29350: POP
29351: POP
// end ;
29352: PPOPN 2
29354: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29355: LD_EXP 60
29359: PUSH
29360: LD_EXP 96
29364: AND
29365: IFFALSE 29431
29367: GO 29369
29369: DISABLE
29370: LD_INT 0
29372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29373: LD_ADDR_VAR 0 1
29377: PUSH
29378: LD_INT 22
29380: PUSH
29381: LD_OWVAR 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: LD_INT 29
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 69
29408: ST_TO_ADDR
// if not tmp then
29409: LD_VAR 0 1
29413: NOT
29414: IFFALSE 29418
// exit ;
29416: GO 29431
// DestroyUnit ( tmp [ 1 ] ) ;
29418: LD_VAR 0 1
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: CALL_OW 65
// end ;
29431: PPOPN 1
29433: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29434: LD_EXP 60
29438: PUSH
29439: LD_EXP 98
29443: AND
29444: IFFALSE 29573
29446: GO 29448
29448: DISABLE
29449: LD_INT 0
29451: PPUSH
// begin uc_side := 0 ;
29452: LD_ADDR_OWVAR 20
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// uc_nation := nation_arabian ;
29460: LD_ADDR_OWVAR 21
29464: PUSH
29465: LD_INT 2
29467: ST_TO_ADDR
// hc_gallery :=  ;
29468: LD_ADDR_OWVAR 33
29472: PUSH
29473: LD_STRING 
29475: ST_TO_ADDR
// hc_name :=  ;
29476: LD_ADDR_OWVAR 26
29480: PUSH
29481: LD_STRING 
29483: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29484: LD_INT 1
29486: PPUSH
29487: LD_INT 11
29489: PPUSH
29490: LD_INT 10
29492: PPUSH
29493: CALL_OW 380
// un := CreateHuman ;
29497: LD_ADDR_VAR 0 1
29501: PUSH
29502: CALL_OW 44
29506: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29507: LD_VAR 0 1
29511: PPUSH
29512: LD_INT 1
29514: PPUSH
29515: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29519: LD_INT 35
29521: PPUSH
29522: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_INT 22
29533: PUSH
29534: LD_OWVAR 2
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PPUSH
29543: CALL_OW 69
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 74
29557: PPUSH
29558: CALL_OW 115
// until IsDead ( un ) ;
29562: LD_VAR 0 1
29566: PPUSH
29567: CALL_OW 301
29571: IFFALSE 29519
// end ;
29573: PPOPN 1
29575: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29576: LD_EXP 60
29580: PUSH
29581: LD_EXP 100
29585: AND
29586: IFFALSE 29598
29588: GO 29590
29590: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29591: LD_STRING earthquake(getX(game), 0, 32)
29593: PPUSH
29594: CALL_OW 559
29598: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29599: LD_EXP 60
29603: PUSH
29604: LD_EXP 101
29608: AND
29609: IFFALSE 29700
29611: GO 29613
29613: DISABLE
29614: LD_INT 0
29616: PPUSH
// begin enable ;
29617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29618: LD_ADDR_VAR 0 1
29622: PUSH
29623: LD_INT 22
29625: PUSH
29626: LD_OWVAR 2
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 21
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 33
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 69
29664: ST_TO_ADDR
// if not tmp then
29665: LD_VAR 0 1
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 29700
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29674: LD_VAR 0 1
29678: PUSH
29679: LD_INT 1
29681: PPUSH
29682: LD_VAR 0 1
29686: PPUSH
29687: CALL_OW 12
29691: ARRAY
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: CALL_OW 234
// end ;
29700: PPOPN 1
29702: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29703: LD_EXP 60
29707: PUSH
29708: LD_EXP 102
29712: AND
29713: IFFALSE 29854
29715: GO 29717
29717: DISABLE
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
29722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29723: LD_ADDR_VAR 0 3
29727: PUSH
29728: LD_INT 22
29730: PUSH
29731: LD_OWVAR 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 25
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: ST_TO_ADDR
// if not tmp then
29759: LD_VAR 0 3
29763: NOT
29764: IFFALSE 29768
// exit ;
29766: GO 29854
// un := tmp [ rand ( 1 , tmp ) ] ;
29768: LD_ADDR_VAR 0 2
29772: PUSH
29773: LD_VAR 0 3
29777: PUSH
29778: LD_INT 1
29780: PPUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: CALL_OW 12
29790: ARRAY
29791: ST_TO_ADDR
// if Crawls ( un ) then
29792: LD_VAR 0 2
29796: PPUSH
29797: CALL_OW 318
29801: IFFALSE 29812
// ComWalk ( un ) ;
29803: LD_VAR 0 2
29807: PPUSH
29808: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29812: LD_VAR 0 2
29816: PPUSH
29817: LD_INT 9
29819: PPUSH
29820: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29824: LD_INT 28
29826: PPUSH
29827: LD_OWVAR 2
29831: PPUSH
29832: LD_INT 2
29834: PPUSH
29835: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29839: LD_INT 29
29841: PPUSH
29842: LD_OWVAR 2
29846: PPUSH
29847: LD_INT 2
29849: PPUSH
29850: CALL_OW 322
// end ;
29854: PPOPN 3
29856: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29857: LD_EXP 60
29861: PUSH
29862: LD_EXP 103
29866: AND
29867: IFFALSE 29978
29869: GO 29871
29871: DISABLE
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
29876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 22
29884: PUSH
29885: LD_OWVAR 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 25
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PPUSH
29908: CALL_OW 69
29912: ST_TO_ADDR
// if not tmp then
29913: LD_VAR 0 3
29917: NOT
29918: IFFALSE 29922
// exit ;
29920: GO 29978
// un := tmp [ rand ( 1 , tmp ) ] ;
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_VAR 0 3
29931: PUSH
29932: LD_INT 1
29934: PPUSH
29935: LD_VAR 0 3
29939: PPUSH
29940: CALL_OW 12
29944: ARRAY
29945: ST_TO_ADDR
// if Crawls ( un ) then
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 318
29955: IFFALSE 29966
// ComWalk ( un ) ;
29957: LD_VAR 0 2
29961: PPUSH
29962: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29966: LD_VAR 0 2
29970: PPUSH
29971: LD_INT 8
29973: PPUSH
29974: CALL_OW 336
// end ;
29978: PPOPN 3
29980: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29981: LD_EXP 60
29985: PUSH
29986: LD_EXP 104
29990: AND
29991: IFFALSE 30135
29993: GO 29995
29995: DISABLE
29996: LD_INT 0
29998: PPUSH
29999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30000: LD_ADDR_VAR 0 2
30004: PUSH
30005: LD_INT 22
30007: PUSH
30008: LD_OWVAR 2
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 21
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: LD_INT 34
30032: PUSH
30033: LD_INT 12
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 34
30042: PUSH
30043: LD_INT 51
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 34
30052: PUSH
30053: LD_INT 32
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: ST_TO_ADDR
// if not tmp then
30076: LD_VAR 0 2
30080: NOT
30081: IFFALSE 30085
// exit ;
30083: GO 30135
// for i in tmp do
30085: LD_ADDR_VAR 0 1
30089: PUSH
30090: LD_VAR 0 2
30094: PUSH
30095: FOR_IN
30096: IFFALSE 30133
// if GetCargo ( i , mat_artifact ) = 0 then
30098: LD_VAR 0 1
30102: PPUSH
30103: LD_INT 4
30105: PPUSH
30106: CALL_OW 289
30110: PUSH
30111: LD_INT 0
30113: EQUAL
30114: IFFALSE 30131
// SetCargo ( i , mat_siberit , 100 ) ;
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_INT 3
30123: PPUSH
30124: LD_INT 100
30126: PPUSH
30127: CALL_OW 290
30131: GO 30095
30133: POP
30134: POP
// end ;
30135: PPOPN 2
30137: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30138: LD_EXP 60
30142: PUSH
30143: LD_EXP 105
30147: AND
30148: IFFALSE 30331
30150: GO 30152
30152: DISABLE
30153: LD_INT 0
30155: PPUSH
30156: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30157: LD_ADDR_VAR 0 2
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 69
30178: ST_TO_ADDR
// if not tmp then
30179: LD_VAR 0 2
30183: NOT
30184: IFFALSE 30188
// exit ;
30186: GO 30331
// for i := 1 to 2 do
30188: LD_ADDR_VAR 0 1
30192: PUSH
30193: DOUBLE
30194: LD_INT 1
30196: DEC
30197: ST_TO_ADDR
30198: LD_INT 2
30200: PUSH
30201: FOR_TO
30202: IFFALSE 30329
// begin uc_side := your_side ;
30204: LD_ADDR_OWVAR 20
30208: PUSH
30209: LD_OWVAR 2
30213: ST_TO_ADDR
// uc_nation := nation_american ;
30214: LD_ADDR_OWVAR 21
30218: PUSH
30219: LD_INT 1
30221: ST_TO_ADDR
// vc_chassis := us_morphling ;
30222: LD_ADDR_OWVAR 37
30226: PUSH
30227: LD_INT 5
30229: ST_TO_ADDR
// vc_engine := engine_siberite ;
30230: LD_ADDR_OWVAR 39
30234: PUSH
30235: LD_INT 3
30237: ST_TO_ADDR
// vc_control := control_computer ;
30238: LD_ADDR_OWVAR 38
30242: PUSH
30243: LD_INT 3
30245: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30246: LD_ADDR_OWVAR 40
30250: PUSH
30251: LD_INT 10
30253: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30254: LD_VAR 0 2
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: PPUSH
30263: CALL_OW 310
30267: NOT
30268: IFFALSE 30315
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30270: CALL_OW 45
30274: PPUSH
30275: LD_VAR 0 2
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: PPUSH
30284: CALL_OW 250
30288: PPUSH
30289: LD_VAR 0 2
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PPUSH
30298: CALL_OW 251
30302: PPUSH
30303: LD_INT 12
30305: PPUSH
30306: LD_INT 1
30308: PPUSH
30309: CALL_OW 50
30313: GO 30327
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30315: CALL_OW 45
30319: PPUSH
30320: LD_INT 1
30322: PPUSH
30323: CALL_OW 51
// end ;
30327: GO 30201
30329: POP
30330: POP
// end ;
30331: PPOPN 2
30333: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30334: LD_EXP 60
30338: PUSH
30339: LD_EXP 106
30343: AND
30344: IFFALSE 30566
30346: GO 30348
30348: DISABLE
30349: LD_INT 0
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30357: LD_ADDR_VAR 0 6
30361: PUSH
30362: LD_INT 22
30364: PUSH
30365: LD_OWVAR 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 21
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: LD_INT 23
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: PPUSH
30406: CALL_OW 69
30410: ST_TO_ADDR
// if not tmp then
30411: LD_VAR 0 6
30415: NOT
30416: IFFALSE 30420
// exit ;
30418: GO 30566
// s1 := rand ( 1 , 4 ) ;
30420: LD_ADDR_VAR 0 2
30424: PUSH
30425: LD_INT 1
30427: PPUSH
30428: LD_INT 4
30430: PPUSH
30431: CALL_OW 12
30435: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30436: LD_ADDR_VAR 0 4
30440: PUSH
30441: LD_VAR 0 6
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PPUSH
30450: LD_VAR 0 2
30454: PPUSH
30455: CALL_OW 259
30459: ST_TO_ADDR
// if s1 = 1 then
30460: LD_VAR 0 2
30464: PUSH
30465: LD_INT 1
30467: EQUAL
30468: IFFALSE 30488
// s2 := rand ( 2 , 4 ) else
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_INT 2
30477: PPUSH
30478: LD_INT 4
30480: PPUSH
30481: CALL_OW 12
30485: ST_TO_ADDR
30486: GO 30496
// s2 := 1 ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_INT 1
30495: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30496: LD_ADDR_VAR 0 5
30500: PUSH
30501: LD_VAR 0 6
30505: PUSH
30506: LD_INT 1
30508: ARRAY
30509: PPUSH
30510: LD_VAR 0 3
30514: PPUSH
30515: CALL_OW 259
30519: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30520: LD_VAR 0 6
30524: PUSH
30525: LD_INT 1
30527: ARRAY
30528: PPUSH
30529: LD_VAR 0 2
30533: PPUSH
30534: LD_VAR 0 5
30538: PPUSH
30539: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30543: LD_VAR 0 6
30547: PUSH
30548: LD_INT 1
30550: ARRAY
30551: PPUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: LD_VAR 0 4
30561: PPUSH
30562: CALL_OW 237
// end ;
30566: PPOPN 6
30568: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30569: LD_EXP 60
30573: PUSH
30574: LD_EXP 107
30578: AND
30579: IFFALSE 30658
30581: GO 30583
30583: DISABLE
30584: LD_INT 0
30586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30587: LD_ADDR_VAR 0 1
30591: PUSH
30592: LD_INT 22
30594: PUSH
30595: LD_OWVAR 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 30
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PPUSH
30618: CALL_OW 69
30622: ST_TO_ADDR
// if not tmp then
30623: LD_VAR 0 1
30627: NOT
30628: IFFALSE 30632
// exit ;
30630: GO 30658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30632: LD_VAR 0 1
30636: PUSH
30637: LD_INT 1
30639: PPUSH
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL_OW 12
30649: ARRAY
30650: PPUSH
30651: LD_INT 1
30653: PPUSH
30654: CALL_OW 234
// end ;
30658: PPOPN 1
30660: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30661: LD_EXP 60
30665: PUSH
30666: LD_EXP 108
30670: AND
30671: IFFALSE 30783
30673: GO 30675
30675: DISABLE
30676: LD_INT 0
30678: PPUSH
30679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30680: LD_ADDR_VAR 0 2
30684: PUSH
30685: LD_INT 22
30687: PUSH
30688: LD_OWVAR 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: LD_INT 30
30702: PUSH
30703: LD_INT 27
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 30
30712: PUSH
30713: LD_INT 26
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 30
30722: PUSH
30723: LD_INT 28
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PPUSH
30740: CALL_OW 69
30744: ST_TO_ADDR
// if not tmp then
30745: LD_VAR 0 2
30749: NOT
30750: IFFALSE 30754
// exit ;
30752: GO 30783
// for i in tmp do
30754: LD_ADDR_VAR 0 1
30758: PUSH
30759: LD_VAR 0 2
30763: PUSH
30764: FOR_IN
30765: IFFALSE 30781
// SetLives ( i , 1 ) ;
30767: LD_VAR 0 1
30771: PPUSH
30772: LD_INT 1
30774: PPUSH
30775: CALL_OW 234
30779: GO 30764
30781: POP
30782: POP
// end ;
30783: PPOPN 2
30785: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30786: LD_EXP 60
30790: PUSH
30791: LD_EXP 109
30795: AND
30796: IFFALSE 31083
30798: GO 30800
30800: DISABLE
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
30805: PPUSH
// begin i := rand ( 1 , 7 ) ;
30806: LD_ADDR_VAR 0 1
30810: PUSH
30811: LD_INT 1
30813: PPUSH
30814: LD_INT 7
30816: PPUSH
30817: CALL_OW 12
30821: ST_TO_ADDR
// case i of 1 :
30822: LD_VAR 0 1
30826: PUSH
30827: LD_INT 1
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30845
30835: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30836: LD_STRING earthquake(getX(game), 0, 32)
30838: PPUSH
30839: CALL_OW 559
30843: GO 31083
30845: LD_INT 2
30847: DOUBLE
30848: EQUAL
30849: IFTRUE 30853
30851: GO 30867
30853: POP
// begin ToLua ( displayStucuk(); ) ;
30854: LD_STRING displayStucuk();
30856: PPUSH
30857: CALL_OW 559
// ResetFog ;
30861: CALL_OW 335
// end ; 3 :
30865: GO 31083
30867: LD_INT 3
30869: DOUBLE
30870: EQUAL
30871: IFTRUE 30875
30873: GO 30979
30875: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30876: LD_ADDR_VAR 0 2
30880: PUSH
30881: LD_INT 22
30883: PUSH
30884: LD_OWVAR 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 25
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 69
30911: ST_TO_ADDR
// if not tmp then
30912: LD_VAR 0 2
30916: NOT
30917: IFFALSE 30921
// exit ;
30919: GO 31083
// un := tmp [ rand ( 1 , tmp ) ] ;
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_VAR 0 2
30930: PUSH
30931: LD_INT 1
30933: PPUSH
30934: LD_VAR 0 2
30938: PPUSH
30939: CALL_OW 12
30943: ARRAY
30944: ST_TO_ADDR
// if Crawls ( un ) then
30945: LD_VAR 0 3
30949: PPUSH
30950: CALL_OW 318
30954: IFFALSE 30965
// ComWalk ( un ) ;
30956: LD_VAR 0 3
30960: PPUSH
30961: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30965: LD_VAR 0 3
30969: PPUSH
30970: LD_INT 8
30972: PPUSH
30973: CALL_OW 336
// end ; 4 :
30977: GO 31083
30979: LD_INT 4
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 30987
30985: GO 31061
30987: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30988: LD_ADDR_VAR 0 2
30992: PUSH
30993: LD_INT 22
30995: PUSH
30996: LD_OWVAR 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 30
31007: PUSH
31008: LD_INT 29
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PPUSH
31019: CALL_OW 69
31023: ST_TO_ADDR
// if not tmp then
31024: LD_VAR 0 2
31028: NOT
31029: IFFALSE 31033
// exit ;
31031: GO 31083
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31033: LD_VAR 0 2
31037: PUSH
31038: LD_INT 1
31040: ARRAY
31041: PPUSH
31042: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31046: LD_VAR 0 2
31050: PUSH
31051: LD_INT 1
31053: ARRAY
31054: PPUSH
31055: CALL_OW 65
// end ; 5 .. 7 :
31059: GO 31083
31061: LD_INT 5
31063: DOUBLE
31064: GREATEREQUAL
31065: IFFALSE 31073
31067: LD_INT 7
31069: DOUBLE
31070: LESSEQUAL
31071: IFTRUE 31075
31073: GO 31082
31075: POP
// StreamSibBomb ; end ;
31076: CALL 27320 0 0
31080: GO 31083
31082: POP
// end ;
31083: PPOPN 3
31085: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31086: LD_EXP 60
31090: PUSH
31091: LD_EXP 110
31095: AND
31096: IFFALSE 31252
31098: GO 31100
31100: DISABLE
31101: LD_INT 0
31103: PPUSH
31104: PPUSH
31105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31106: LD_ADDR_VAR 0 2
31110: PUSH
31111: LD_INT 81
31113: PUSH
31114: LD_OWVAR 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 21
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 21
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PPUSH
31155: CALL_OW 69
31159: ST_TO_ADDR
// if not tmp then
31160: LD_VAR 0 2
31164: NOT
31165: IFFALSE 31169
// exit ;
31167: GO 31252
// p := 0 ;
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_INT 0
31176: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31177: LD_INT 35
31179: PPUSH
31180: CALL_OW 67
// p := p + 1 ;
31184: LD_ADDR_VAR 0 3
31188: PUSH
31189: LD_VAR 0 3
31193: PUSH
31194: LD_INT 1
31196: PLUS
31197: ST_TO_ADDR
// for i in tmp do
31198: LD_ADDR_VAR 0 1
31202: PUSH
31203: LD_VAR 0 2
31207: PUSH
31208: FOR_IN
31209: IFFALSE 31240
// if GetLives ( i ) < 1000 then
31211: LD_VAR 0 1
31215: PPUSH
31216: CALL_OW 256
31220: PUSH
31221: LD_INT 1000
31223: LESS
31224: IFFALSE 31238
// SetLives ( i , 1000 ) ;
31226: LD_VAR 0 1
31230: PPUSH
31231: LD_INT 1000
31233: PPUSH
31234: CALL_OW 234
31238: GO 31208
31240: POP
31241: POP
// until p > 20 ;
31242: LD_VAR 0 3
31246: PUSH
31247: LD_INT 20
31249: GREATER
31250: IFFALSE 31177
// end ;
31252: PPOPN 3
31254: END
// every 0 0$1 trigger StreamModeActive and sTime do
31255: LD_EXP 60
31259: PUSH
31260: LD_EXP 111
31264: AND
31265: IFFALSE 31300
31267: GO 31269
31269: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31270: LD_INT 28
31272: PPUSH
31273: LD_OWVAR 2
31277: PPUSH
31278: LD_INT 2
31280: PPUSH
31281: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31285: LD_INT 30
31287: PPUSH
31288: LD_OWVAR 2
31292: PPUSH
31293: LD_INT 2
31295: PPUSH
31296: CALL_OW 322
// end ;
31300: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31301: LD_EXP 60
31305: PUSH
31306: LD_EXP 112
31310: AND
31311: IFFALSE 31432
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31320: LD_ADDR_VAR 0 2
31324: PUSH
31325: LD_INT 22
31327: PUSH
31328: LD_OWVAR 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 21
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: LD_INT 23
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: PPUSH
31369: CALL_OW 69
31373: ST_TO_ADDR
// if not tmp then
31374: LD_VAR 0 2
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 31432
// for i in tmp do
31383: LD_ADDR_VAR 0 1
31387: PUSH
31388: LD_VAR 0 2
31392: PUSH
31393: FOR_IN
31394: IFFALSE 31430
// begin if Crawls ( i ) then
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 318
31405: IFFALSE 31416
// ComWalk ( i ) ;
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL_OW 138
// SetClass ( i , 2 ) ;
31416: LD_VAR 0 1
31420: PPUSH
31421: LD_INT 2
31423: PPUSH
31424: CALL_OW 336
// end ;
31428: GO 31393
31430: POP
31431: POP
// end ;
31432: PPOPN 2
31434: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31435: LD_EXP 60
31439: PUSH
31440: LD_EXP 113
31444: AND
31445: IFFALSE 31733
31447: GO 31449
31449: DISABLE
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
31454: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31455: LD_OWVAR 2
31459: PPUSH
31460: LD_INT 9
31462: PPUSH
31463: LD_INT 1
31465: PPUSH
31466: LD_INT 1
31468: PPUSH
31469: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31473: LD_INT 9
31475: PPUSH
31476: LD_OWVAR 2
31480: PPUSH
31481: CALL_OW 343
// uc_side := 9 ;
31485: LD_ADDR_OWVAR 20
31489: PUSH
31490: LD_INT 9
31492: ST_TO_ADDR
// uc_nation := 2 ;
31493: LD_ADDR_OWVAR 21
31497: PUSH
31498: LD_INT 2
31500: ST_TO_ADDR
// hc_name := Dark Warrior ;
31501: LD_ADDR_OWVAR 26
31505: PUSH
31506: LD_STRING Dark Warrior
31508: ST_TO_ADDR
// hc_gallery :=  ;
31509: LD_ADDR_OWVAR 33
31513: PUSH
31514: LD_STRING 
31516: ST_TO_ADDR
// hc_noskilllimit := true ;
31517: LD_ADDR_OWVAR 76
31521: PUSH
31522: LD_INT 1
31524: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31525: LD_ADDR_OWVAR 31
31529: PUSH
31530: LD_INT 30
31532: PUSH
31533: LD_INT 30
31535: PUSH
31536: LD_INT 30
31538: PUSH
31539: LD_INT 30
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: ST_TO_ADDR
// un := CreateHuman ;
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: CALL_OW 44
31557: ST_TO_ADDR
// hc_noskilllimit := false ;
31558: LD_ADDR_OWVAR 76
31562: PUSH
31563: LD_INT 0
31565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31566: LD_VAR 0 3
31570: PPUSH
31571: LD_INT 1
31573: PPUSH
31574: CALL_OW 51
// ToLua ( playRanger() ) ;
31578: LD_STRING playRanger()
31580: PPUSH
31581: CALL_OW 559
// p := 0 ;
31585: LD_ADDR_VAR 0 2
31589: PUSH
31590: LD_INT 0
31592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31593: LD_INT 35
31595: PPUSH
31596: CALL_OW 67
// p := p + 1 ;
31600: LD_ADDR_VAR 0 2
31604: PUSH
31605: LD_VAR 0 2
31609: PUSH
31610: LD_INT 1
31612: PLUS
31613: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31614: LD_VAR 0 3
31618: PPUSH
31619: CALL_OW 256
31623: PUSH
31624: LD_INT 1000
31626: LESS
31627: IFFALSE 31641
// SetLives ( un , 1000 ) ;
31629: LD_VAR 0 3
31633: PPUSH
31634: LD_INT 1000
31636: PPUSH
31637: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31641: LD_VAR 0 3
31645: PPUSH
31646: LD_INT 81
31648: PUSH
31649: LD_OWVAR 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 91
31660: PUSH
31661: LD_VAR 0 3
31665: PUSH
31666: LD_INT 30
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PPUSH
31678: CALL_OW 69
31682: PPUSH
31683: LD_VAR 0 3
31687: PPUSH
31688: CALL_OW 74
31692: PPUSH
31693: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31697: LD_VAR 0 2
31701: PUSH
31702: LD_INT 80
31704: GREATER
31705: PUSH
31706: LD_VAR 0 3
31710: PPUSH
31711: CALL_OW 301
31715: OR
31716: IFFALSE 31593
// if un then
31718: LD_VAR 0 3
31722: IFFALSE 31733
// RemoveUnit ( un ) ;
31724: LD_VAR 0 3
31728: PPUSH
31729: CALL_OW 64
// end ;
31733: PPOPN 3
31735: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31736: LD_EXP 114
31740: IFFALSE 31856
31742: GO 31744
31744: DISABLE
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31750: LD_ADDR_VAR 0 2
31754: PUSH
31755: LD_INT 81
31757: PUSH
31758: LD_OWVAR 2
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 21
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PPUSH
31781: CALL_OW 69
31785: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31786: LD_STRING playComputer()
31788: PPUSH
31789: CALL_OW 559
// if not tmp then
31793: LD_VAR 0 2
31797: NOT
31798: IFFALSE 31802
// exit ;
31800: GO 31856
// for i in tmp do
31802: LD_ADDR_VAR 0 1
31806: PUSH
31807: LD_VAR 0 2
31811: PUSH
31812: FOR_IN
31813: IFFALSE 31854
// for j := 1 to 4 do
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: DOUBLE
31821: LD_INT 1
31823: DEC
31824: ST_TO_ADDR
31825: LD_INT 4
31827: PUSH
31828: FOR_TO
31829: IFFALSE 31850
// SetSkill ( i , j , 10 ) ;
31831: LD_VAR 0 1
31835: PPUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_INT 10
31843: PPUSH
31844: CALL_OW 237
31848: GO 31828
31850: POP
31851: POP
31852: GO 31812
31854: POP
31855: POP
// end ;
31856: PPOPN 3
31858: END
// every 0 0$1 trigger s30 do var i , tmp ;
31859: LD_EXP 115
31863: IFFALSE 31932
31865: GO 31867
31867: DISABLE
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31872: LD_ADDR_VAR 0 2
31876: PUSH
31877: LD_INT 22
31879: PUSH
31880: LD_OWVAR 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: ST_TO_ADDR
// if not tmp then
31894: LD_VAR 0 2
31898: NOT
31899: IFFALSE 31903
// exit ;
31901: GO 31932
// for i in tmp do
31903: LD_ADDR_VAR 0 1
31907: PUSH
31908: LD_VAR 0 2
31912: PUSH
31913: FOR_IN
31914: IFFALSE 31930
// SetLives ( i , 300 ) ;
31916: LD_VAR 0 1
31920: PPUSH
31921: LD_INT 300
31923: PPUSH
31924: CALL_OW 234
31928: GO 31913
31930: POP
31931: POP
// end ;
31932: PPOPN 2
31934: END
// every 0 0$1 trigger s60 do var i , tmp ;
31935: LD_EXP 116
31939: IFFALSE 32008
31941: GO 31943
31943: DISABLE
31944: LD_INT 0
31946: PPUSH
31947: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31948: LD_ADDR_VAR 0 2
31952: PUSH
31953: LD_INT 22
31955: PUSH
31956: LD_OWVAR 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 69
31969: ST_TO_ADDR
// if not tmp then
31970: LD_VAR 0 2
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 32008
// for i in tmp do
31979: LD_ADDR_VAR 0 1
31983: PUSH
31984: LD_VAR 0 2
31988: PUSH
31989: FOR_IN
31990: IFFALSE 32006
// SetLives ( i , 600 ) ;
31992: LD_VAR 0 1
31996: PPUSH
31997: LD_INT 600
31999: PPUSH
32000: CALL_OW 234
32004: GO 31989
32006: POP
32007: POP
// end ;
32008: PPOPN 2
32010: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32011: LD_INT 0
32013: PPUSH
// case cmd of 301 :
32014: LD_VAR 0 1
32018: PUSH
32019: LD_INT 301
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32059
32027: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32028: LD_VAR 0 6
32032: PPUSH
32033: LD_VAR 0 7
32037: PPUSH
32038: LD_VAR 0 8
32042: PPUSH
32043: LD_VAR 0 4
32047: PPUSH
32048: LD_VAR 0 5
32052: PPUSH
32053: CALL 33260 0 5
32057: GO 32180
32059: LD_INT 302
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32104
32067: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32068: LD_VAR 0 6
32072: PPUSH
32073: LD_VAR 0 7
32077: PPUSH
32078: LD_VAR 0 8
32082: PPUSH
32083: LD_VAR 0 9
32087: PPUSH
32088: LD_VAR 0 4
32092: PPUSH
32093: LD_VAR 0 5
32097: PPUSH
32098: CALL 33351 0 6
32102: GO 32180
32104: LD_INT 303
32106: DOUBLE
32107: EQUAL
32108: IFTRUE 32112
32110: GO 32149
32112: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32113: LD_VAR 0 6
32117: PPUSH
32118: LD_VAR 0 7
32122: PPUSH
32123: LD_VAR 0 8
32127: PPUSH
32128: LD_VAR 0 9
32132: PPUSH
32133: LD_VAR 0 4
32137: PPUSH
32138: LD_VAR 0 5
32142: PPUSH
32143: CALL 32185 0 6
32147: GO 32180
32149: LD_INT 304
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32179
32157: POP
// hHackTeleport ( unit , x , y ) ; end ;
32158: LD_VAR 0 2
32162: PPUSH
32163: LD_VAR 0 4
32167: PPUSH
32168: LD_VAR 0 5
32172: PPUSH
32173: CALL 33944 0 3
32177: GO 32180
32179: POP
// end ;
32180: LD_VAR 0 12
32184: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32185: LD_INT 0
32187: PPUSH
32188: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32189: LD_VAR 0 1
32193: PUSH
32194: LD_INT 1
32196: LESS
32197: PUSH
32198: LD_VAR 0 1
32202: PUSH
32203: LD_INT 3
32205: GREATER
32206: OR
32207: PUSH
32208: LD_VAR 0 5
32212: PPUSH
32213: LD_VAR 0 6
32217: PPUSH
32218: CALL_OW 428
32222: OR
32223: IFFALSE 32227
// exit ;
32225: GO 32947
// uc_side := your_side ;
32227: LD_ADDR_OWVAR 20
32231: PUSH
32232: LD_OWVAR 2
32236: ST_TO_ADDR
// uc_nation := nation ;
32237: LD_ADDR_OWVAR 21
32241: PUSH
32242: LD_VAR 0 1
32246: ST_TO_ADDR
// bc_level = 1 ;
32247: LD_ADDR_OWVAR 43
32251: PUSH
32252: LD_INT 1
32254: ST_TO_ADDR
// case btype of 1 :
32255: LD_VAR 0 2
32259: PUSH
32260: LD_INT 1
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32268
32266: GO 32279
32268: POP
// bc_type := b_depot ; 2 :
32269: LD_ADDR_OWVAR 42
32273: PUSH
32274: LD_INT 0
32276: ST_TO_ADDR
32277: GO 32891
32279: LD_INT 2
32281: DOUBLE
32282: EQUAL
32283: IFTRUE 32287
32285: GO 32298
32287: POP
// bc_type := b_warehouse ; 3 :
32288: LD_ADDR_OWVAR 42
32292: PUSH
32293: LD_INT 1
32295: ST_TO_ADDR
32296: GO 32891
32298: LD_INT 3
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32317
32306: POP
// bc_type := b_lab ; 4 .. 9 :
32307: LD_ADDR_OWVAR 42
32311: PUSH
32312: LD_INT 6
32314: ST_TO_ADDR
32315: GO 32891
32317: LD_INT 4
32319: DOUBLE
32320: GREATEREQUAL
32321: IFFALSE 32329
32323: LD_INT 9
32325: DOUBLE
32326: LESSEQUAL
32327: IFTRUE 32331
32329: GO 32383
32331: POP
// begin bc_type := b_lab_half ;
32332: LD_ADDR_OWVAR 42
32336: PUSH
32337: LD_INT 7
32339: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32340: LD_ADDR_OWVAR 44
32344: PUSH
32345: LD_INT 10
32347: PUSH
32348: LD_INT 11
32350: PUSH
32351: LD_INT 12
32353: PUSH
32354: LD_INT 15
32356: PUSH
32357: LD_INT 14
32359: PUSH
32360: LD_INT 13
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: PUSH
32371: LD_VAR 0 2
32375: PUSH
32376: LD_INT 3
32378: MINUS
32379: ARRAY
32380: ST_TO_ADDR
// end ; 10 .. 13 :
32381: GO 32891
32383: LD_INT 10
32385: DOUBLE
32386: GREATEREQUAL
32387: IFFALSE 32395
32389: LD_INT 13
32391: DOUBLE
32392: LESSEQUAL
32393: IFTRUE 32397
32395: GO 32474
32397: POP
// begin bc_type := b_lab_full ;
32398: LD_ADDR_OWVAR 42
32402: PUSH
32403: LD_INT 8
32405: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32406: LD_ADDR_OWVAR 44
32410: PUSH
32411: LD_INT 10
32413: PUSH
32414: LD_INT 12
32416: PUSH
32417: LD_INT 14
32419: PUSH
32420: LD_INT 13
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: PUSH
32429: LD_VAR 0 2
32433: PUSH
32434: LD_INT 9
32436: MINUS
32437: ARRAY
32438: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32439: LD_ADDR_OWVAR 45
32443: PUSH
32444: LD_INT 11
32446: PUSH
32447: LD_INT 15
32449: PUSH
32450: LD_INT 12
32452: PUSH
32453: LD_INT 15
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: PUSH
32462: LD_VAR 0 2
32466: PUSH
32467: LD_INT 9
32469: MINUS
32470: ARRAY
32471: ST_TO_ADDR
// end ; 14 :
32472: GO 32891
32474: LD_INT 14
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32493
32482: POP
// bc_type := b_workshop ; 15 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 2
32490: ST_TO_ADDR
32491: GO 32891
32493: LD_INT 15
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_factory ; 16 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 3
32509: ST_TO_ADDR
32510: GO 32891
32512: LD_INT 16
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32531
32520: POP
// bc_type := b_ext_gun ; 17 :
32521: LD_ADDR_OWVAR 42
32525: PUSH
32526: LD_INT 17
32528: ST_TO_ADDR
32529: GO 32891
32531: LD_INT 17
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32567
32539: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 19
32547: PUSH
32548: LD_INT 23
32550: PUSH
32551: LD_INT 19
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: PUSH
32559: LD_VAR 0 1
32563: ARRAY
32564: ST_TO_ADDR
32565: GO 32891
32567: LD_INT 18
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32586
32575: POP
// bc_type := b_ext_radar ; 19 :
32576: LD_ADDR_OWVAR 42
32580: PUSH
32581: LD_INT 20
32583: ST_TO_ADDR
32584: GO 32891
32586: LD_INT 19
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32605
32594: POP
// bc_type := b_ext_radio ; 20 :
32595: LD_ADDR_OWVAR 42
32599: PUSH
32600: LD_INT 22
32602: ST_TO_ADDR
32603: GO 32891
32605: LD_INT 20
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32624
32613: POP
// bc_type := b_ext_siberium ; 21 :
32614: LD_ADDR_OWVAR 42
32618: PUSH
32619: LD_INT 21
32621: ST_TO_ADDR
32622: GO 32891
32624: LD_INT 21
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_ext_computer ; 22 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 24
32640: ST_TO_ADDR
32641: GO 32891
32643: LD_INT 22
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_ext_track ; 23 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 16
32659: ST_TO_ADDR
32660: GO 32891
32662: LD_INT 23
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_ext_laser ; 24 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 25
32678: ST_TO_ADDR
32679: GO 32891
32681: LD_INT 24
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_control_tower ; 25 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 36
32697: ST_TO_ADDR
32698: GO 32891
32700: LD_INT 25
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_breastwork ; 26 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 31
32716: ST_TO_ADDR
32717: GO 32891
32719: LD_INT 26
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_bunker ; 27 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 32
32735: ST_TO_ADDR
32736: GO 32891
32738: LD_INT 27
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32757
32746: POP
// bc_type := b_turret ; 28 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 33
32754: ST_TO_ADDR
32755: GO 32891
32757: LD_INT 28
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// bc_type := b_armoury ; 29 :
32766: LD_ADDR_OWVAR 42
32770: PUSH
32771: LD_INT 4
32773: ST_TO_ADDR
32774: GO 32891
32776: LD_INT 29
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// bc_type := b_barracks ; 30 :
32785: LD_ADDR_OWVAR 42
32789: PUSH
32790: LD_INT 5
32792: ST_TO_ADDR
32793: GO 32891
32795: LD_INT 30
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// bc_type := b_solar_power ; 31 :
32804: LD_ADDR_OWVAR 42
32808: PUSH
32809: LD_INT 27
32811: ST_TO_ADDR
32812: GO 32891
32814: LD_INT 31
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// bc_type := b_oil_power ; 32 :
32823: LD_ADDR_OWVAR 42
32827: PUSH
32828: LD_INT 26
32830: ST_TO_ADDR
32831: GO 32891
32833: LD_INT 32
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32852
32841: POP
// bc_type := b_siberite_power ; 33 :
32842: LD_ADDR_OWVAR 42
32846: PUSH
32847: LD_INT 28
32849: ST_TO_ADDR
32850: GO 32891
32852: LD_INT 33
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32860
32858: GO 32871
32860: POP
// bc_type := b_oil_mine ; 34 :
32861: LD_ADDR_OWVAR 42
32865: PUSH
32866: LD_INT 29
32868: ST_TO_ADDR
32869: GO 32891
32871: LD_INT 34
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32890
32879: POP
// bc_type := b_siberite_mine ; end ;
32880: LD_ADDR_OWVAR 42
32884: PUSH
32885: LD_INT 30
32887: ST_TO_ADDR
32888: GO 32891
32890: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32891: LD_ADDR_VAR 0 8
32895: PUSH
32896: LD_VAR 0 5
32900: PPUSH
32901: LD_VAR 0 6
32905: PPUSH
32906: LD_VAR 0 3
32910: PPUSH
32911: CALL_OW 47
32915: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32916: LD_OWVAR 42
32920: PUSH
32921: LD_INT 32
32923: PUSH
32924: LD_INT 33
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: IN
32931: IFFALSE 32947
// PlaceWeaponTurret ( b , weapon ) ;
32933: LD_VAR 0 8
32937: PPUSH
32938: LD_VAR 0 4
32942: PPUSH
32943: CALL_OW 431
// end ;
32947: LD_VAR 0 7
32951: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32952: LD_INT 0
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32958: LD_ADDR_VAR 0 4
32962: PUSH
32963: LD_INT 22
32965: PUSH
32966: LD_OWVAR 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 30
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 30
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PPUSH
33007: CALL_OW 69
33011: ST_TO_ADDR
// if not tmp then
33012: LD_VAR 0 4
33016: NOT
33017: IFFALSE 33021
// exit ;
33019: GO 33080
// for i in tmp do
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_VAR 0 4
33030: PUSH
33031: FOR_IN
33032: IFFALSE 33078
// for j = 1 to 3 do
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: DOUBLE
33040: LD_INT 1
33042: DEC
33043: ST_TO_ADDR
33044: LD_INT 3
33046: PUSH
33047: FOR_TO
33048: IFFALSE 33074
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 274
33059: PPUSH
33060: LD_VAR 0 3
33064: PPUSH
33065: LD_INT 99999
33067: PPUSH
33068: CALL_OW 277
33072: GO 33047
33074: POP
33075: POP
33076: GO 33031
33078: POP
33079: POP
// end ;
33080: LD_VAR 0 1
33084: RET
// export function hHackSetLevel10 ; var i , j ; begin
33085: LD_INT 0
33087: PPUSH
33088: PPUSH
33089: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33090: LD_ADDR_VAR 0 2
33094: PUSH
33095: LD_INT 21
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: PUSH
33110: FOR_IN
33111: IFFALSE 33163
// if IsSelected ( i ) then
33113: LD_VAR 0 2
33117: PPUSH
33118: CALL_OW 306
33122: IFFALSE 33161
// begin for j := 1 to 4 do
33124: LD_ADDR_VAR 0 3
33128: PUSH
33129: DOUBLE
33130: LD_INT 1
33132: DEC
33133: ST_TO_ADDR
33134: LD_INT 4
33136: PUSH
33137: FOR_TO
33138: IFFALSE 33159
// SetSkill ( i , j , 10 ) ;
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 3
33149: PPUSH
33150: LD_INT 10
33152: PPUSH
33153: CALL_OW 237
33157: GO 33137
33159: POP
33160: POP
// end ;
33161: GO 33110
33163: POP
33164: POP
// end ;
33165: LD_VAR 0 1
33169: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33170: LD_INT 0
33172: PPUSH
33173: PPUSH
33174: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33175: LD_ADDR_VAR 0 2
33179: PUSH
33180: LD_INT 22
33182: PUSH
33183: LD_OWVAR 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 21
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 69
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33253
// begin for j := 1 to 4 do
33214: LD_ADDR_VAR 0 3
33218: PUSH
33219: DOUBLE
33220: LD_INT 1
33222: DEC
33223: ST_TO_ADDR
33224: LD_INT 4
33226: PUSH
33227: FOR_TO
33228: IFFALSE 33249
// SetSkill ( i , j , 10 ) ;
33230: LD_VAR 0 2
33234: PPUSH
33235: LD_VAR 0 3
33239: PPUSH
33240: LD_INT 10
33242: PPUSH
33243: CALL_OW 237
33247: GO 33227
33249: POP
33250: POP
// end ;
33251: GO 33211
33253: POP
33254: POP
// end ;
33255: LD_VAR 0 1
33259: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33260: LD_INT 0
33262: PPUSH
// uc_side := your_side ;
33263: LD_ADDR_OWVAR 20
33267: PUSH
33268: LD_OWVAR 2
33272: ST_TO_ADDR
// uc_nation := nation ;
33273: LD_ADDR_OWVAR 21
33277: PUSH
33278: LD_VAR 0 1
33282: ST_TO_ADDR
// InitHc ;
33283: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33287: LD_INT 0
33289: PPUSH
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_VAR 0 3
33299: PPUSH
33300: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33304: LD_VAR 0 4
33308: PPUSH
33309: LD_VAR 0 5
33313: PPUSH
33314: CALL_OW 428
33318: PUSH
33319: LD_INT 0
33321: EQUAL
33322: IFFALSE 33346
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33324: CALL_OW 44
33328: PPUSH
33329: LD_VAR 0 4
33333: PPUSH
33334: LD_VAR 0 5
33338: PPUSH
33339: LD_INT 1
33341: PPUSH
33342: CALL_OW 48
// end ;
33346: LD_VAR 0 6
33350: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33351: LD_INT 0
33353: PPUSH
33354: PPUSH
// uc_side := your_side ;
33355: LD_ADDR_OWVAR 20
33359: PUSH
33360: LD_OWVAR 2
33364: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33365: LD_VAR 0 1
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 5
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: IFFALSE 33404
// uc_nation := nation_american else
33394: LD_ADDR_OWVAR 21
33398: PUSH
33399: LD_INT 1
33401: ST_TO_ADDR
33402: GO 33447
// if chassis in [ 11 , 12 , 13 , 14 ] then
33404: LD_VAR 0 1
33408: PUSH
33409: LD_INT 11
33411: PUSH
33412: LD_INT 12
33414: PUSH
33415: LD_INT 13
33417: PUSH
33418: LD_INT 14
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: IN
33427: IFFALSE 33439
// uc_nation := nation_arabian else
33429: LD_ADDR_OWVAR 21
33433: PUSH
33434: LD_INT 2
33436: ST_TO_ADDR
33437: GO 33447
// uc_nation := nation_russian ;
33439: LD_ADDR_OWVAR 21
33443: PUSH
33444: LD_INT 3
33446: ST_TO_ADDR
// vc_chassis := chassis ;
33447: LD_ADDR_OWVAR 37
33451: PUSH
33452: LD_VAR 0 1
33456: ST_TO_ADDR
// vc_engine := engine ;
33457: LD_ADDR_OWVAR 39
33461: PUSH
33462: LD_VAR 0 2
33466: ST_TO_ADDR
// vc_control := control ;
33467: LD_ADDR_OWVAR 38
33471: PUSH
33472: LD_VAR 0 3
33476: ST_TO_ADDR
// vc_weapon := weapon ;
33477: LD_ADDR_OWVAR 40
33481: PUSH
33482: LD_VAR 0 4
33486: ST_TO_ADDR
// un := CreateVehicle ;
33487: LD_ADDR_VAR 0 8
33491: PUSH
33492: CALL_OW 45
33496: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33497: LD_VAR 0 8
33501: PPUSH
33502: LD_INT 0
33504: PPUSH
33505: LD_INT 5
33507: PPUSH
33508: CALL_OW 12
33512: PPUSH
33513: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33517: LD_VAR 0 8
33521: PPUSH
33522: LD_VAR 0 5
33526: PPUSH
33527: LD_VAR 0 6
33531: PPUSH
33532: LD_INT 1
33534: PPUSH
33535: CALL_OW 48
// end ;
33539: LD_VAR 0 7
33543: RET
// export hInvincible ; every 1 do
33544: GO 33546
33546: DISABLE
// hInvincible := [ ] ;
33547: LD_ADDR_EXP 117
33551: PUSH
33552: EMPTY
33553: ST_TO_ADDR
33554: END
// every 10 do var i ;
33555: GO 33557
33557: DISABLE
33558: LD_INT 0
33560: PPUSH
// begin enable ;
33561: ENABLE
// if not hInvincible then
33562: LD_EXP 117
33566: NOT
33567: IFFALSE 33571
// exit ;
33569: GO 33615
// for i in hInvincible do
33571: LD_ADDR_VAR 0 1
33575: PUSH
33576: LD_EXP 117
33580: PUSH
33581: FOR_IN
33582: IFFALSE 33613
// if GetLives ( i ) < 1000 then
33584: LD_VAR 0 1
33588: PPUSH
33589: CALL_OW 256
33593: PUSH
33594: LD_INT 1000
33596: LESS
33597: IFFALSE 33611
// SetLives ( i , 1000 ) ;
33599: LD_VAR 0 1
33603: PPUSH
33604: LD_INT 1000
33606: PPUSH
33607: CALL_OW 234
33611: GO 33581
33613: POP
33614: POP
// end ;
33615: PPOPN 1
33617: END
// export function hHackInvincible ; var i ; begin
33618: LD_INT 0
33620: PPUSH
33621: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33622: LD_ADDR_VAR 0 2
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 21
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 21
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: PPUSH
33655: CALL_OW 69
33659: PUSH
33660: FOR_IN
33661: IFFALSE 33722
// if IsSelected ( i ) then
33663: LD_VAR 0 2
33667: PPUSH
33668: CALL_OW 306
33672: IFFALSE 33720
// begin if i in hInvincible then
33674: LD_VAR 0 2
33678: PUSH
33679: LD_EXP 117
33683: IN
33684: IFFALSE 33704
// hInvincible := hInvincible diff i else
33686: LD_ADDR_EXP 117
33690: PUSH
33691: LD_EXP 117
33695: PUSH
33696: LD_VAR 0 2
33700: DIFF
33701: ST_TO_ADDR
33702: GO 33720
// hInvincible := hInvincible union i ;
33704: LD_ADDR_EXP 117
33708: PUSH
33709: LD_EXP 117
33713: PUSH
33714: LD_VAR 0 2
33718: UNION
33719: ST_TO_ADDR
// end ;
33720: GO 33660
33722: POP
33723: POP
// end ;
33724: LD_VAR 0 1
33728: RET
// export function hHackInvisible ; var i , j ; begin
33729: LD_INT 0
33731: PPUSH
33732: PPUSH
33733: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33734: LD_ADDR_VAR 0 2
33738: PUSH
33739: LD_INT 21
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PPUSH
33749: CALL_OW 69
33753: PUSH
33754: FOR_IN
33755: IFFALSE 33779
// if IsSelected ( i ) then
33757: LD_VAR 0 2
33761: PPUSH
33762: CALL_OW 306
33766: IFFALSE 33777
// ComForceInvisible ( i ) ;
33768: LD_VAR 0 2
33772: PPUSH
33773: CALL_OW 496
33777: GO 33754
33779: POP
33780: POP
// end ;
33781: LD_VAR 0 1
33785: RET
// export function hHackChangeYourSide ; begin
33786: LD_INT 0
33788: PPUSH
// if your_side = 8 then
33789: LD_OWVAR 2
33793: PUSH
33794: LD_INT 8
33796: EQUAL
33797: IFFALSE 33809
// your_side := 0 else
33799: LD_ADDR_OWVAR 2
33803: PUSH
33804: LD_INT 0
33806: ST_TO_ADDR
33807: GO 33823
// your_side := your_side + 1 ;
33809: LD_ADDR_OWVAR 2
33813: PUSH
33814: LD_OWVAR 2
33818: PUSH
33819: LD_INT 1
33821: PLUS
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 1
33827: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33828: LD_INT 0
33830: PPUSH
33831: PPUSH
33832: PPUSH
// for i in all_units do
33833: LD_ADDR_VAR 0 2
33837: PUSH
33838: LD_OWVAR 3
33842: PUSH
33843: FOR_IN
33844: IFFALSE 33922
// if IsSelected ( i ) then
33846: LD_VAR 0 2
33850: PPUSH
33851: CALL_OW 306
33855: IFFALSE 33920
// begin j := GetSide ( i ) ;
33857: LD_ADDR_VAR 0 3
33861: PUSH
33862: LD_VAR 0 2
33866: PPUSH
33867: CALL_OW 255
33871: ST_TO_ADDR
// if j = 8 then
33872: LD_VAR 0 3
33876: PUSH
33877: LD_INT 8
33879: EQUAL
33880: IFFALSE 33892
// j := 0 else
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 0
33889: ST_TO_ADDR
33890: GO 33906
// j := j + 1 ;
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_VAR 0 3
33901: PUSH
33902: LD_INT 1
33904: PLUS
33905: ST_TO_ADDR
// SetSide ( i , j ) ;
33906: LD_VAR 0 2
33910: PPUSH
33911: LD_VAR 0 3
33915: PPUSH
33916: CALL_OW 235
// end ;
33920: GO 33843
33922: POP
33923: POP
// end ;
33924: LD_VAR 0 1
33928: RET
// export function hHackFog ; begin
33929: LD_INT 0
33931: PPUSH
// FogOff ( true ) ;
33932: LD_INT 1
33934: PPUSH
33935: CALL_OW 344
// end ;
33939: LD_VAR 0 1
33943: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33944: LD_INT 0
33946: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_VAR 0 2
33956: PPUSH
33957: LD_VAR 0 3
33961: PPUSH
33962: LD_INT 1
33964: PPUSH
33965: LD_INT 1
33967: PPUSH
33968: CALL_OW 483
// CenterOnXY ( x , y ) ;
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_VAR 0 3
33981: PPUSH
33982: CALL_OW 84
// end ;
33986: LD_VAR 0 4
33990: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33995: LD_VAR 0 1
33999: NOT
34000: PUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: LD_VAR 0 3
34010: PPUSH
34011: CALL_OW 488
34015: NOT
34016: OR
34017: PUSH
34018: LD_VAR 0 1
34022: PPUSH
34023: CALL_OW 266
34027: PUSH
34028: LD_INT 3
34030: NONEQUAL
34031: PUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: CALL_OW 247
34041: PUSH
34042: LD_INT 1
34044: EQUAL
34045: NOT
34046: AND
34047: OR
34048: IFFALSE 34052
// exit ;
34050: GO 34201
// if GetType ( factory ) = unit_human then
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 247
34061: PUSH
34062: LD_INT 1
34064: EQUAL
34065: IFFALSE 34082
// factory := IsInUnit ( factory ) ;
34067: LD_ADDR_VAR 0 1
34071: PUSH
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 310
34081: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34082: LD_VAR 0 1
34086: PPUSH
34087: CALL_OW 266
34091: PUSH
34092: LD_INT 3
34094: NONEQUAL
34095: IFFALSE 34099
// exit ;
34097: GO 34201
// if HexInfo ( x , y ) = factory then
34099: LD_VAR 0 2
34103: PPUSH
34104: LD_VAR 0 3
34108: PPUSH
34109: CALL_OW 428
34113: PUSH
34114: LD_VAR 0 1
34118: EQUAL
34119: IFFALSE 34146
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34121: LD_ADDR_EXP 118
34125: PUSH
34126: LD_EXP 118
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: LD_INT 0
34138: PPUSH
34139: CALL_OW 1
34143: ST_TO_ADDR
34144: GO 34197
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34146: LD_ADDR_EXP 118
34150: PUSH
34151: LD_EXP 118
34155: PPUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: LD_VAR 0 1
34165: PPUSH
34166: CALL_OW 255
34170: PUSH
34171: LD_VAR 0 1
34175: PUSH
34176: LD_VAR 0 2
34180: PUSH
34181: LD_VAR 0 3
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: PPUSH
34192: CALL_OW 1
34196: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34197: CALL 34206 0 0
// end ;
34201: LD_VAR 0 4
34205: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34206: LD_INT 0
34208: PPUSH
34209: PPUSH
34210: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34211: LD_STRING resetFactoryWaypoint();
34213: PPUSH
34214: CALL_OW 559
// if factoryWaypoints then
34218: LD_EXP 118
34222: IFFALSE 34348
// begin list := PrepareArray ( factoryWaypoints ) ;
34224: LD_ADDR_VAR 0 3
34228: PUSH
34229: LD_EXP 118
34233: PPUSH
34234: CALL 80798 0 1
34238: ST_TO_ADDR
// for i := 1 to list do
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: DOUBLE
34245: LD_INT 1
34247: DEC
34248: ST_TO_ADDR
34249: LD_VAR 0 3
34253: PUSH
34254: FOR_TO
34255: IFFALSE 34346
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34257: LD_STRING setFactoryWaypointXY(
34259: PUSH
34260: LD_VAR 0 3
34264: PUSH
34265: LD_VAR 0 2
34269: ARRAY
34270: PUSH
34271: LD_INT 1
34273: ARRAY
34274: STR
34275: PUSH
34276: LD_STRING ,
34278: STR
34279: PUSH
34280: LD_VAR 0 3
34284: PUSH
34285: LD_VAR 0 2
34289: ARRAY
34290: PUSH
34291: LD_INT 2
34293: ARRAY
34294: STR
34295: PUSH
34296: LD_STRING ,
34298: STR
34299: PUSH
34300: LD_VAR 0 3
34304: PUSH
34305: LD_VAR 0 2
34309: ARRAY
34310: PUSH
34311: LD_INT 3
34313: ARRAY
34314: STR
34315: PUSH
34316: LD_STRING ,
34318: STR
34319: PUSH
34320: LD_VAR 0 3
34324: PUSH
34325: LD_VAR 0 2
34329: ARRAY
34330: PUSH
34331: LD_INT 4
34333: ARRAY
34334: STR
34335: PUSH
34336: LD_STRING )
34338: STR
34339: PPUSH
34340: CALL_OW 559
34344: GO 34254
34346: POP
34347: POP
// end ; end ;
34348: LD_VAR 0 1
34352: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34353: LD_INT 0
34355: PPUSH
// if HexInfo ( x , y ) = warehouse then
34356: LD_VAR 0 2
34360: PPUSH
34361: LD_VAR 0 3
34365: PPUSH
34366: CALL_OW 428
34370: PUSH
34371: LD_VAR 0 1
34375: EQUAL
34376: IFFALSE 34403
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34378: LD_ADDR_EXP 119
34382: PUSH
34383: LD_EXP 119
34387: PPUSH
34388: LD_VAR 0 1
34392: PPUSH
34393: LD_INT 0
34395: PPUSH
34396: CALL_OW 1
34400: ST_TO_ADDR
34401: GO 34454
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34403: LD_ADDR_EXP 119
34407: PUSH
34408: LD_EXP 119
34412: PPUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: LD_VAR 0 1
34422: PPUSH
34423: CALL_OW 255
34427: PUSH
34428: LD_VAR 0 1
34432: PUSH
34433: LD_VAR 0 2
34437: PUSH
34438: LD_VAR 0 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: PPUSH
34449: CALL_OW 1
34453: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34454: CALL 34463 0 0
// end ;
34458: LD_VAR 0 4
34462: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
34467: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34468: LD_STRING resetWarehouseGatheringPoints();
34470: PPUSH
34471: CALL_OW 559
// if warehouseGatheringPoints then
34475: LD_EXP 119
34479: IFFALSE 34605
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34481: LD_ADDR_VAR 0 3
34485: PUSH
34486: LD_EXP 119
34490: PPUSH
34491: CALL 80798 0 1
34495: ST_TO_ADDR
// for i := 1 to list do
34496: LD_ADDR_VAR 0 2
34500: PUSH
34501: DOUBLE
34502: LD_INT 1
34504: DEC
34505: ST_TO_ADDR
34506: LD_VAR 0 3
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34603
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34514: LD_STRING setWarehouseGatheringPointXY(
34516: PUSH
34517: LD_VAR 0 3
34521: PUSH
34522: LD_VAR 0 2
34526: ARRAY
34527: PUSH
34528: LD_INT 1
34530: ARRAY
34531: STR
34532: PUSH
34533: LD_STRING ,
34535: STR
34536: PUSH
34537: LD_VAR 0 3
34541: PUSH
34542: LD_VAR 0 2
34546: ARRAY
34547: PUSH
34548: LD_INT 2
34550: ARRAY
34551: STR
34552: PUSH
34553: LD_STRING ,
34555: STR
34556: PUSH
34557: LD_VAR 0 3
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: PUSH
34568: LD_INT 3
34570: ARRAY
34571: STR
34572: PUSH
34573: LD_STRING ,
34575: STR
34576: PUSH
34577: LD_VAR 0 3
34581: PUSH
34582: LD_VAR 0 2
34586: ARRAY
34587: PUSH
34588: LD_INT 4
34590: ARRAY
34591: STR
34592: PUSH
34593: LD_STRING )
34595: STR
34596: PPUSH
34597: CALL_OW 559
34601: GO 34511
34603: POP
34604: POP
// end ; end ;
34605: LD_VAR 0 1
34609: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34610: LD_EXP 119
34614: IFFALSE 35299
34616: GO 34618
34618: DISABLE
34619: LD_INT 0
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
// begin enable ;
34630: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34631: LD_ADDR_VAR 0 3
34635: PUSH
34636: LD_EXP 119
34640: PPUSH
34641: CALL 80798 0 1
34645: ST_TO_ADDR
// if not list then
34646: LD_VAR 0 3
34650: NOT
34651: IFFALSE 34655
// exit ;
34653: GO 35299
// for i := 1 to list do
34655: LD_ADDR_VAR 0 1
34659: PUSH
34660: DOUBLE
34661: LD_INT 1
34663: DEC
34664: ST_TO_ADDR
34665: LD_VAR 0 3
34669: PUSH
34670: FOR_TO
34671: IFFALSE 35297
// begin depot := list [ i ] [ 2 ] ;
34673: LD_ADDR_VAR 0 8
34677: PUSH
34678: LD_VAR 0 3
34682: PUSH
34683: LD_VAR 0 1
34687: ARRAY
34688: PUSH
34689: LD_INT 2
34691: ARRAY
34692: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34693: LD_ADDR_VAR 0 5
34697: PUSH
34698: LD_VAR 0 3
34702: PUSH
34703: LD_VAR 0 1
34707: ARRAY
34708: PUSH
34709: LD_INT 1
34711: ARRAY
34712: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34713: LD_VAR 0 8
34717: PPUSH
34718: CALL_OW 301
34722: PUSH
34723: LD_VAR 0 5
34727: PUSH
34728: LD_VAR 0 8
34732: PPUSH
34733: CALL_OW 255
34737: NONEQUAL
34738: OR
34739: IFFALSE 34768
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34741: LD_ADDR_EXP 119
34745: PUSH
34746: LD_EXP 119
34750: PPUSH
34751: LD_VAR 0 8
34755: PPUSH
34756: LD_INT 0
34758: PPUSH
34759: CALL_OW 1
34763: ST_TO_ADDR
// exit ;
34764: POP
34765: POP
34766: GO 35299
// end ; x := list [ i ] [ 3 ] ;
34768: LD_ADDR_VAR 0 6
34772: PUSH
34773: LD_VAR 0 3
34777: PUSH
34778: LD_VAR 0 1
34782: ARRAY
34783: PUSH
34784: LD_INT 3
34786: ARRAY
34787: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_VAR 0 3
34797: PUSH
34798: LD_VAR 0 1
34802: ARRAY
34803: PUSH
34804: LD_INT 4
34806: ARRAY
34807: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34808: LD_ADDR_VAR 0 9
34812: PUSH
34813: LD_VAR 0 6
34817: PPUSH
34818: LD_VAR 0 7
34822: PPUSH
34823: LD_INT 16
34825: PPUSH
34826: CALL 79386 0 3
34830: ST_TO_ADDR
// if not cratesNearbyPoint then
34831: LD_VAR 0 9
34835: NOT
34836: IFFALSE 34842
// exit ;
34838: POP
34839: POP
34840: GO 35299
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34842: LD_ADDR_VAR 0 4
34846: PUSH
34847: LD_INT 22
34849: PUSH
34850: LD_VAR 0 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 60
34864: PUSH
34865: EMPTY
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 91
34874: PUSH
34875: LD_VAR 0 8
34879: PUSH
34880: LD_INT 6
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 25
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 25
34903: PUSH
34904: LD_INT 16
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: PPUSH
34922: CALL_OW 69
34926: PUSH
34927: LD_VAR 0 8
34931: PPUSH
34932: CALL_OW 313
34936: PPUSH
34937: LD_INT 3
34939: PUSH
34940: LD_INT 60
34942: PUSH
34943: EMPTY
34944: LIST
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 25
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 25
34965: PUSH
34966: LD_INT 16
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PPUSH
34982: CALL_OW 72
34986: UNION
34987: ST_TO_ADDR
// if tmp then
34988: LD_VAR 0 4
34992: IFFALSE 35072
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34994: LD_ADDR_VAR 0 4
34998: PUSH
34999: LD_VAR 0 4
35003: PPUSH
35004: LD_INT 3
35006: PPUSH
35007: CALL 77355 0 2
35011: ST_TO_ADDR
// for j in tmp do
35012: LD_ADDR_VAR 0 2
35016: PUSH
35017: LD_VAR 0 4
35021: PUSH
35022: FOR_IN
35023: IFFALSE 35066
// begin if IsInUnit ( j ) then
35025: LD_VAR 0 2
35029: PPUSH
35030: CALL_OW 310
35034: IFFALSE 35045
// ComExit ( j ) ;
35036: LD_VAR 0 2
35040: PPUSH
35041: CALL 77438 0 1
// AddComCollect ( j , x , y ) ;
35045: LD_VAR 0 2
35049: PPUSH
35050: LD_VAR 0 6
35054: PPUSH
35055: LD_VAR 0 7
35059: PPUSH
35060: CALL_OW 177
// end ;
35064: GO 35022
35066: POP
35067: POP
// exit ;
35068: POP
35069: POP
35070: GO 35299
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35072: LD_ADDR_VAR 0 4
35076: PUSH
35077: LD_INT 22
35079: PUSH
35080: LD_VAR 0 5
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 91
35091: PUSH
35092: LD_VAR 0 8
35096: PUSH
35097: LD_INT 8
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 34
35110: PUSH
35111: LD_INT 12
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 34
35120: PUSH
35121: LD_INT 51
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 34
35130: PUSH
35131: LD_INT 32
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 34
35140: PUSH
35141: LD_INT 89
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: PPUSH
35160: CALL_OW 69
35164: ST_TO_ADDR
// if tmp then
35165: LD_VAR 0 4
35169: IFFALSE 35295
// begin for j in tmp do
35171: LD_ADDR_VAR 0 2
35175: PUSH
35176: LD_VAR 0 4
35180: PUSH
35181: FOR_IN
35182: IFFALSE 35293
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35184: LD_VAR 0 2
35188: PPUSH
35189: CALL_OW 262
35193: PUSH
35194: LD_INT 3
35196: EQUAL
35197: PUSH
35198: LD_VAR 0 2
35202: PPUSH
35203: CALL_OW 261
35207: PUSH
35208: LD_INT 20
35210: GREATER
35211: OR
35212: PUSH
35213: LD_VAR 0 2
35217: PPUSH
35218: CALL_OW 314
35222: NOT
35223: AND
35224: PUSH
35225: LD_VAR 0 2
35229: PPUSH
35230: CALL_OW 263
35234: PUSH
35235: LD_INT 1
35237: NONEQUAL
35238: PUSH
35239: LD_VAR 0 2
35243: PPUSH
35244: CALL_OW 311
35248: OR
35249: AND
35250: IFFALSE 35291
// begin ComCollect ( j , x , y ) ;
35252: LD_VAR 0 2
35256: PPUSH
35257: LD_VAR 0 6
35261: PPUSH
35262: LD_VAR 0 7
35266: PPUSH
35267: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35271: LD_VAR 0 2
35275: PPUSH
35276: LD_VAR 0 8
35280: PPUSH
35281: CALL_OW 172
// exit ;
35285: POP
35286: POP
35287: POP
35288: POP
35289: GO 35299
// end ;
35291: GO 35181
35293: POP
35294: POP
// end ; end ;
35295: GO 34670
35297: POP
35298: POP
// end ; end_of_file
35299: PPOPN 9
35301: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 264
35317: PUSH
35318: LD_INT 91
35320: EQUAL
35321: IFFALSE 35393
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35323: LD_INT 68
35325: PPUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 255
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: IFFALSE 35356
// eff := 70 else
35346: LD_ADDR_VAR 0 4
35350: PUSH
35351: LD_INT 70
35353: ST_TO_ADDR
35354: GO 35364
// eff := 30 ;
35356: LD_ADDR_VAR 0 4
35360: PUSH
35361: LD_INT 30
35363: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 250
35373: PPUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 251
35383: PPUSH
35384: LD_VAR 0 4
35388: PPUSH
35389: CALL_OW 495
// end ; end ;
35393: LD_VAR 0 2
35397: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35398: LD_INT 0
35400: PPUSH
// end ;
35401: LD_VAR 0 4
35405: RET
// export function SOS_Command ( cmd ) ; begin
35406: LD_INT 0
35408: PPUSH
// end ;
35409: LD_VAR 0 2
35413: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35414: LD_INT 0
35416: PPUSH
// end ;
35417: LD_VAR 0 6
35421: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35422: LD_INT 0
35424: PPUSH
35425: PPUSH
// if not vehicle or not factory then
35426: LD_VAR 0 1
35430: NOT
35431: PUSH
35432: LD_VAR 0 2
35436: NOT
35437: OR
35438: IFFALSE 35442
// exit ;
35440: GO 35673
// if factoryWaypoints >= factory then
35442: LD_EXP 118
35446: PUSH
35447: LD_VAR 0 2
35451: GREATEREQUAL
35452: IFFALSE 35673
// if factoryWaypoints [ factory ] then
35454: LD_EXP 118
35458: PUSH
35459: LD_VAR 0 2
35463: ARRAY
35464: IFFALSE 35673
// begin if GetControl ( vehicle ) = control_manual then
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL_OW 263
35475: PUSH
35476: LD_INT 1
35478: EQUAL
35479: IFFALSE 35560
// begin driver := IsDrivenBy ( vehicle ) ;
35481: LD_ADDR_VAR 0 4
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 311
35495: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35496: LD_VAR 0 4
35500: PPUSH
35501: LD_EXP 118
35505: PUSH
35506: LD_VAR 0 2
35510: ARRAY
35511: PUSH
35512: LD_INT 3
35514: ARRAY
35515: PPUSH
35516: LD_EXP 118
35520: PUSH
35521: LD_VAR 0 2
35525: ARRAY
35526: PUSH
35527: LD_INT 4
35529: ARRAY
35530: PPUSH
35531: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35535: LD_VAR 0 4
35539: PPUSH
35540: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35544: LD_VAR 0 4
35548: PPUSH
35549: LD_VAR 0 2
35553: PPUSH
35554: CALL_OW 180
// end else
35558: GO 35673
// if GetControl ( vehicle ) = control_remote then
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 263
35569: PUSH
35570: LD_INT 2
35572: EQUAL
35573: IFFALSE 35634
// begin wait ( 0 0$2 ) ;
35575: LD_INT 70
35577: PPUSH
35578: CALL_OW 67
// if Connect ( vehicle ) then
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL 47697 0 1
35591: IFFALSE 35632
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35593: LD_VAR 0 1
35597: PPUSH
35598: LD_EXP 118
35602: PUSH
35603: LD_VAR 0 2
35607: ARRAY
35608: PUSH
35609: LD_INT 3
35611: ARRAY
35612: PPUSH
35613: LD_EXP 118
35617: PUSH
35618: LD_VAR 0 2
35622: ARRAY
35623: PUSH
35624: LD_INT 4
35626: ARRAY
35627: PPUSH
35628: CALL_OW 171
// end else
35632: GO 35673
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35634: LD_VAR 0 1
35638: PPUSH
35639: LD_EXP 118
35643: PUSH
35644: LD_VAR 0 2
35648: ARRAY
35649: PUSH
35650: LD_INT 3
35652: ARRAY
35653: PPUSH
35654: LD_EXP 118
35658: PUSH
35659: LD_VAR 0 2
35663: ARRAY
35664: PUSH
35665: LD_INT 4
35667: ARRAY
35668: PPUSH
35669: CALL_OW 171
// end ; end ;
35673: LD_VAR 0 3
35677: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35678: LD_INT 0
35680: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35681: LD_VAR 0 1
35685: PUSH
35686: LD_INT 250
35688: EQUAL
35689: PUSH
35690: LD_VAR 0 2
35694: PPUSH
35695: CALL_OW 264
35699: PUSH
35700: LD_INT 81
35702: EQUAL
35703: AND
35704: IFFALSE 35725
// MinerPlaceMine ( unit , x , y ) ;
35706: LD_VAR 0 2
35710: PPUSH
35711: LD_VAR 0 4
35715: PPUSH
35716: LD_VAR 0 5
35720: PPUSH
35721: CALL 38110 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35725: LD_VAR 0 1
35729: PUSH
35730: LD_INT 251
35732: EQUAL
35733: PUSH
35734: LD_VAR 0 2
35738: PPUSH
35739: CALL_OW 264
35743: PUSH
35744: LD_INT 81
35746: EQUAL
35747: AND
35748: IFFALSE 35769
// MinerDetonateMine ( unit , x , y ) ;
35750: LD_VAR 0 2
35754: PPUSH
35755: LD_VAR 0 4
35759: PPUSH
35760: LD_VAR 0 5
35764: PPUSH
35765: CALL 38385 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35769: LD_VAR 0 1
35773: PUSH
35774: LD_INT 252
35776: EQUAL
35777: PUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: CALL_OW 264
35787: PUSH
35788: LD_INT 81
35790: EQUAL
35791: AND
35792: IFFALSE 35813
// MinerCreateMinefield ( unit , x , y ) ;
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_VAR 0 4
35803: PPUSH
35804: LD_VAR 0 5
35808: PPUSH
35809: CALL 38802 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35813: LD_VAR 0 1
35817: PUSH
35818: LD_INT 253
35820: EQUAL
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 257
35831: PUSH
35832: LD_INT 5
35834: EQUAL
35835: AND
35836: IFFALSE 35857
// ComBinocular ( unit , x , y ) ;
35838: LD_VAR 0 2
35842: PPUSH
35843: LD_VAR 0 4
35847: PPUSH
35848: LD_VAR 0 5
35852: PPUSH
35853: CALL 39171 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35857: LD_VAR 0 1
35861: PUSH
35862: LD_INT 254
35864: EQUAL
35865: PUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 99
35878: EQUAL
35879: AND
35880: PUSH
35881: LD_VAR 0 3
35885: PPUSH
35886: CALL_OW 263
35890: PUSH
35891: LD_INT 3
35893: EQUAL
35894: AND
35895: IFFALSE 35911
// HackDestroyVehicle ( unit , selectedUnit ) ;
35897: LD_VAR 0 2
35901: PPUSH
35902: LD_VAR 0 3
35906: PPUSH
35907: CALL 37474 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35911: LD_VAR 0 1
35915: PUSH
35916: LD_INT 255
35918: EQUAL
35919: PUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 14
35932: PUSH
35933: LD_INT 53
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: IN
35940: AND
35941: PUSH
35942: LD_VAR 0 4
35946: PPUSH
35947: LD_VAR 0 5
35951: PPUSH
35952: CALL_OW 488
35956: AND
35957: IFFALSE 35981
// CutTreeXYR ( unit , x , y , 12 ) ;
35959: LD_VAR 0 2
35963: PPUSH
35964: LD_VAR 0 4
35968: PPUSH
35969: LD_VAR 0 5
35973: PPUSH
35974: LD_INT 12
35976: PPUSH
35977: CALL 36044 0 4
// if cmd = 256 then
35981: LD_VAR 0 1
35985: PUSH
35986: LD_INT 256
35988: EQUAL
35989: IFFALSE 36010
// SetFactoryWaypoint ( unit , x , y ) ;
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 4
36000: PPUSH
36001: LD_VAR 0 5
36005: PPUSH
36006: CALL 33991 0 3
// if cmd = 257 then
36010: LD_VAR 0 1
36014: PUSH
36015: LD_INT 257
36017: EQUAL
36018: IFFALSE 36039
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36020: LD_VAR 0 2
36024: PPUSH
36025: LD_VAR 0 4
36029: PPUSH
36030: LD_VAR 0 5
36034: PPUSH
36035: CALL 34353 0 3
// end ;
36039: LD_VAR 0 6
36043: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36044: LD_INT 0
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36055: LD_VAR 0 1
36059: NOT
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: CALL_OW 488
36075: NOT
36076: OR
36077: PUSH
36078: LD_VAR 0 4
36082: NOT
36083: OR
36084: IFFALSE 36088
// exit ;
36086: GO 36428
// list := [ ] ;
36088: LD_ADDR_VAR 0 13
36092: PUSH
36093: EMPTY
36094: ST_TO_ADDR
// if x - r < 0 then
36095: LD_VAR 0 2
36099: PUSH
36100: LD_VAR 0 4
36104: MINUS
36105: PUSH
36106: LD_INT 0
36108: LESS
36109: IFFALSE 36121
// min_x := 0 else
36111: LD_ADDR_VAR 0 7
36115: PUSH
36116: LD_INT 0
36118: ST_TO_ADDR
36119: GO 36137
// min_x := x - r ;
36121: LD_ADDR_VAR 0 7
36125: PUSH
36126: LD_VAR 0 2
36130: PUSH
36131: LD_VAR 0 4
36135: MINUS
36136: ST_TO_ADDR
// if y - r < 0 then
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 4
36146: MINUS
36147: PUSH
36148: LD_INT 0
36150: LESS
36151: IFFALSE 36163
// min_y := 0 else
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: LD_INT 0
36160: ST_TO_ADDR
36161: GO 36179
// min_y := y - r ;
36163: LD_ADDR_VAR 0 8
36167: PUSH
36168: LD_VAR 0 3
36172: PUSH
36173: LD_VAR 0 4
36177: MINUS
36178: ST_TO_ADDR
// max_x := x + r ;
36179: LD_ADDR_VAR 0 9
36183: PUSH
36184: LD_VAR 0 2
36188: PUSH
36189: LD_VAR 0 4
36193: PLUS
36194: ST_TO_ADDR
// max_y := y + r ;
36195: LD_ADDR_VAR 0 10
36199: PUSH
36200: LD_VAR 0 3
36204: PUSH
36205: LD_VAR 0 4
36209: PLUS
36210: ST_TO_ADDR
// for _x = min_x to max_x do
36211: LD_ADDR_VAR 0 11
36215: PUSH
36216: DOUBLE
36217: LD_VAR 0 7
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 9
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36346
// for _y = min_y to max_y do
36231: LD_ADDR_VAR 0 12
36235: PUSH
36236: DOUBLE
36237: LD_VAR 0 8
36241: DEC
36242: ST_TO_ADDR
36243: LD_VAR 0 10
36247: PUSH
36248: FOR_TO
36249: IFFALSE 36342
// begin if not ValidHex ( _x , _y ) then
36251: LD_VAR 0 11
36255: PPUSH
36256: LD_VAR 0 12
36260: PPUSH
36261: CALL_OW 488
36265: NOT
36266: IFFALSE 36270
// continue ;
36268: GO 36248
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36270: LD_VAR 0 11
36274: PPUSH
36275: LD_VAR 0 12
36279: PPUSH
36280: CALL_OW 351
36284: PUSH
36285: LD_VAR 0 11
36289: PPUSH
36290: LD_VAR 0 12
36294: PPUSH
36295: CALL_OW 554
36299: AND
36300: IFFALSE 36340
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36302: LD_ADDR_VAR 0 13
36306: PUSH
36307: LD_VAR 0 13
36311: PPUSH
36312: LD_VAR 0 13
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: PPUSH
36321: LD_VAR 0 11
36325: PUSH
36326: LD_VAR 0 12
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PPUSH
36335: CALL_OW 2
36339: ST_TO_ADDR
// end ;
36340: GO 36248
36342: POP
36343: POP
36344: GO 36228
36346: POP
36347: POP
// if not list then
36348: LD_VAR 0 13
36352: NOT
36353: IFFALSE 36357
// exit ;
36355: GO 36428
// for i in list do
36357: LD_ADDR_VAR 0 6
36361: PUSH
36362: LD_VAR 0 13
36366: PUSH
36367: FOR_IN
36368: IFFALSE 36426
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36370: LD_VAR 0 1
36374: PPUSH
36375: LD_STRING M
36377: PUSH
36378: LD_VAR 0 6
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PUSH
36387: LD_VAR 0 6
36391: PUSH
36392: LD_INT 2
36394: ARRAY
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: PPUSH
36420: CALL_OW 447
36424: GO 36367
36426: POP
36427: POP
// end ;
36428: LD_VAR 0 5
36432: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36433: LD_EXP 121
36437: NOT
36438: IFFALSE 36488
36440: GO 36442
36442: DISABLE
// begin initHack := true ;
36443: LD_ADDR_EXP 121
36447: PUSH
36448: LD_INT 1
36450: ST_TO_ADDR
// hackTanks := [ ] ;
36451: LD_ADDR_EXP 122
36455: PUSH
36456: EMPTY
36457: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36458: LD_ADDR_EXP 123
36462: PUSH
36463: EMPTY
36464: ST_TO_ADDR
// hackLimit := 3 ;
36465: LD_ADDR_EXP 124
36469: PUSH
36470: LD_INT 3
36472: ST_TO_ADDR
// hackDist := 12 ;
36473: LD_ADDR_EXP 125
36477: PUSH
36478: LD_INT 12
36480: ST_TO_ADDR
// hackCounter := [ ] ;
36481: LD_ADDR_EXP 126
36485: PUSH
36486: EMPTY
36487: ST_TO_ADDR
// end ;
36488: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36489: LD_EXP 121
36493: PUSH
36494: LD_INT 34
36496: PUSH
36497: LD_INT 99
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PPUSH
36504: CALL_OW 69
36508: AND
36509: IFFALSE 36762
36511: GO 36513
36513: DISABLE
36514: LD_INT 0
36516: PPUSH
36517: PPUSH
// begin enable ;
36518: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36519: LD_ADDR_VAR 0 1
36523: PUSH
36524: LD_INT 34
36526: PUSH
36527: LD_INT 99
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PPUSH
36534: CALL_OW 69
36538: PUSH
36539: FOR_IN
36540: IFFALSE 36760
// begin if not i in hackTanks then
36542: LD_VAR 0 1
36546: PUSH
36547: LD_EXP 122
36551: IN
36552: NOT
36553: IFFALSE 36636
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36555: LD_ADDR_EXP 122
36559: PUSH
36560: LD_EXP 122
36564: PPUSH
36565: LD_EXP 122
36569: PUSH
36570: LD_INT 1
36572: PLUS
36573: PPUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 1
36583: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36584: LD_ADDR_EXP 123
36588: PUSH
36589: LD_EXP 123
36593: PPUSH
36594: LD_EXP 123
36598: PUSH
36599: LD_INT 1
36601: PLUS
36602: PPUSH
36603: EMPTY
36604: PPUSH
36605: CALL_OW 1
36609: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36610: LD_ADDR_EXP 126
36614: PUSH
36615: LD_EXP 126
36619: PPUSH
36620: LD_EXP 126
36624: PUSH
36625: LD_INT 1
36627: PLUS
36628: PPUSH
36629: EMPTY
36630: PPUSH
36631: CALL_OW 1
36635: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 302
36645: NOT
36646: IFFALSE 36659
// begin HackUnlinkAll ( i ) ;
36648: LD_VAR 0 1
36652: PPUSH
36653: CALL 36765 0 1
// continue ;
36657: GO 36539
// end ; HackCheckCapturedStatus ( i ) ;
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL 37208 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36668: LD_ADDR_VAR 0 2
36672: PUSH
36673: LD_INT 81
36675: PUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: CALL_OW 255
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 33
36692: PUSH
36693: LD_INT 3
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 91
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_EXP 125
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 50
36720: PUSH
36721: EMPTY
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: PPUSH
36730: CALL_OW 69
36734: ST_TO_ADDR
// if not tmp then
36735: LD_VAR 0 2
36739: NOT
36740: IFFALSE 36744
// continue ;
36742: GO 36539
// HackLink ( i , tmp ) ;
36744: LD_VAR 0 1
36748: PPUSH
36749: LD_VAR 0 2
36753: PPUSH
36754: CALL 36901 0 2
// end ;
36758: GO 36539
36760: POP
36761: POP
// end ;
36762: PPOPN 2
36764: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36765: LD_INT 0
36767: PPUSH
36768: PPUSH
36769: PPUSH
// if not hack in hackTanks then
36770: LD_VAR 0 1
36774: PUSH
36775: LD_EXP 122
36779: IN
36780: NOT
36781: IFFALSE 36785
// exit ;
36783: GO 36896
// index := GetElementIndex ( hackTanks , hack ) ;
36785: LD_ADDR_VAR 0 4
36789: PUSH
36790: LD_EXP 122
36794: PPUSH
36795: LD_VAR 0 1
36799: PPUSH
36800: CALL 44513 0 2
36804: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36805: LD_EXP 123
36809: PUSH
36810: LD_VAR 0 4
36814: ARRAY
36815: IFFALSE 36896
// begin for i in hackTanksCaptured [ index ] do
36817: LD_ADDR_VAR 0 3
36821: PUSH
36822: LD_EXP 123
36826: PUSH
36827: LD_VAR 0 4
36831: ARRAY
36832: PUSH
36833: FOR_IN
36834: IFFALSE 36860
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36836: LD_VAR 0 3
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PPUSH
36845: LD_VAR 0 3
36849: PUSH
36850: LD_INT 2
36852: ARRAY
36853: PPUSH
36854: CALL_OW 235
36858: GO 36833
36860: POP
36861: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36862: LD_ADDR_EXP 123
36866: PUSH
36867: LD_EXP 123
36871: PPUSH
36872: LD_VAR 0 4
36876: PPUSH
36877: EMPTY
36878: PPUSH
36879: CALL_OW 1
36883: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36884: LD_VAR 0 1
36888: PPUSH
36889: LD_INT 0
36891: PPUSH
36892: CALL_OW 505
// end ; end ;
36896: LD_VAR 0 2
36900: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
// if not hack in hackTanks or not vehicles then
36906: LD_VAR 0 1
36910: PUSH
36911: LD_EXP 122
36915: IN
36916: NOT
36917: PUSH
36918: LD_VAR 0 2
36922: NOT
36923: OR
36924: IFFALSE 36928
// exit ;
36926: GO 37203
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36928: LD_ADDR_VAR 0 2
36932: PUSH
36933: LD_VAR 0 1
36937: PPUSH
36938: LD_VAR 0 2
36942: PPUSH
36943: LD_INT 1
36945: PPUSH
36946: LD_INT 1
36948: PPUSH
36949: CALL 45163 0 4
36953: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36954: LD_ADDR_VAR 0 5
36958: PUSH
36959: LD_EXP 122
36963: PPUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL 44513 0 2
36973: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36974: LD_EXP 123
36978: PUSH
36979: LD_VAR 0 5
36983: ARRAY
36984: PUSH
36985: LD_EXP 124
36989: LESS
36990: IFFALSE 37179
// begin for i := 1 to vehicles do
36992: LD_ADDR_VAR 0 4
36996: PUSH
36997: DOUBLE
36998: LD_INT 1
37000: DEC
37001: ST_TO_ADDR
37002: LD_VAR 0 2
37006: PUSH
37007: FOR_TO
37008: IFFALSE 37177
// begin if hackTanksCaptured [ index ] = hackLimit then
37010: LD_EXP 123
37014: PUSH
37015: LD_VAR 0 5
37019: ARRAY
37020: PUSH
37021: LD_EXP 124
37025: EQUAL
37026: IFFALSE 37030
// break ;
37028: GO 37177
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37030: LD_ADDR_EXP 126
37034: PUSH
37035: LD_EXP 126
37039: PPUSH
37040: LD_VAR 0 5
37044: PPUSH
37045: LD_EXP 126
37049: PUSH
37050: LD_VAR 0 5
37054: ARRAY
37055: PUSH
37056: LD_INT 1
37058: PLUS
37059: PPUSH
37060: CALL_OW 1
37064: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37065: LD_ADDR_EXP 123
37069: PUSH
37070: LD_EXP 123
37074: PPUSH
37075: LD_VAR 0 5
37079: PUSH
37080: LD_EXP 123
37084: PUSH
37085: LD_VAR 0 5
37089: ARRAY
37090: PUSH
37091: LD_INT 1
37093: PLUS
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_VAR 0 4
37108: ARRAY
37109: PUSH
37110: LD_VAR 0 2
37114: PUSH
37115: LD_VAR 0 4
37119: ARRAY
37120: PPUSH
37121: CALL_OW 255
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL 44728 0 3
37134: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37135: LD_VAR 0 2
37139: PUSH
37140: LD_VAR 0 4
37144: ARRAY
37145: PPUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 255
37155: PPUSH
37156: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37160: LD_VAR 0 2
37164: PUSH
37165: LD_VAR 0 4
37169: ARRAY
37170: PPUSH
37171: CALL_OW 141
// end ;
37175: GO 37007
37177: POP
37178: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37179: LD_VAR 0 1
37183: PPUSH
37184: LD_EXP 123
37188: PUSH
37189: LD_VAR 0 5
37193: ARRAY
37194: PUSH
37195: LD_INT 0
37197: PLUS
37198: PPUSH
37199: CALL_OW 505
// end ;
37203: LD_VAR 0 3
37207: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
// if not hack in hackTanks then
37214: LD_VAR 0 1
37218: PUSH
37219: LD_EXP 122
37223: IN
37224: NOT
37225: IFFALSE 37229
// exit ;
37227: GO 37469
// index := GetElementIndex ( hackTanks , hack ) ;
37229: LD_ADDR_VAR 0 4
37233: PUSH
37234: LD_EXP 122
37238: PPUSH
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL 44513 0 2
37248: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: DOUBLE
37255: LD_EXP 123
37259: PUSH
37260: LD_VAR 0 4
37264: ARRAY
37265: INC
37266: ST_TO_ADDR
37267: LD_INT 1
37269: PUSH
37270: FOR_DOWNTO
37271: IFFALSE 37443
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_EXP 123
37282: PUSH
37283: LD_VAR 0 4
37287: ARRAY
37288: PUSH
37289: LD_VAR 0 3
37293: ARRAY
37294: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37295: LD_VAR 0 5
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: PPUSH
37304: CALL_OW 302
37308: NOT
37309: PUSH
37310: LD_VAR 0 5
37314: PUSH
37315: LD_INT 1
37317: ARRAY
37318: PPUSH
37319: CALL_OW 255
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: CALL_OW 255
37333: NONEQUAL
37334: OR
37335: IFFALSE 37441
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37337: LD_VAR 0 5
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: PPUSH
37346: CALL_OW 305
37350: PUSH
37351: LD_VAR 0 5
37355: PUSH
37356: LD_INT 1
37358: ARRAY
37359: PPUSH
37360: CALL_OW 255
37364: PUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 255
37374: EQUAL
37375: AND
37376: IFFALSE 37400
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37378: LD_VAR 0 5
37382: PUSH
37383: LD_INT 1
37385: ARRAY
37386: PPUSH
37387: LD_VAR 0 5
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: PPUSH
37396: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37400: LD_ADDR_EXP 123
37404: PUSH
37405: LD_EXP 123
37409: PPUSH
37410: LD_VAR 0 4
37414: PPUSH
37415: LD_EXP 123
37419: PUSH
37420: LD_VAR 0 4
37424: ARRAY
37425: PPUSH
37426: LD_VAR 0 3
37430: PPUSH
37431: CALL_OW 3
37435: PPUSH
37436: CALL_OW 1
37440: ST_TO_ADDR
// end ; end ;
37441: GO 37270
37443: POP
37444: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_EXP 123
37454: PUSH
37455: LD_VAR 0 4
37459: ARRAY
37460: PUSH
37461: LD_INT 0
37463: PLUS
37464: PPUSH
37465: CALL_OW 505
// end ;
37469: LD_VAR 0 2
37473: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
// if not hack in hackTanks then
37480: LD_VAR 0 1
37484: PUSH
37485: LD_EXP 122
37489: IN
37490: NOT
37491: IFFALSE 37495
// exit ;
37493: GO 37580
// index := GetElementIndex ( hackTanks , hack ) ;
37495: LD_ADDR_VAR 0 5
37499: PUSH
37500: LD_EXP 122
37504: PPUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL 44513 0 2
37514: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37515: LD_ADDR_VAR 0 4
37519: PUSH
37520: DOUBLE
37521: LD_INT 1
37523: DEC
37524: ST_TO_ADDR
37525: LD_EXP 123
37529: PUSH
37530: LD_VAR 0 5
37534: ARRAY
37535: PUSH
37536: FOR_TO
37537: IFFALSE 37578
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37539: LD_EXP 123
37543: PUSH
37544: LD_VAR 0 5
37548: ARRAY
37549: PUSH
37550: LD_VAR 0 4
37554: ARRAY
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: PUSH
37560: LD_VAR 0 2
37564: EQUAL
37565: IFFALSE 37576
// KillUnit ( vehicle ) ;
37567: LD_VAR 0 2
37571: PPUSH
37572: CALL_OW 66
37576: GO 37536
37578: POP
37579: POP
// end ;
37580: LD_VAR 0 3
37584: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37585: LD_EXP 127
37589: NOT
37590: IFFALSE 37625
37592: GO 37594
37594: DISABLE
// begin initMiner := true ;
37595: LD_ADDR_EXP 127
37599: PUSH
37600: LD_INT 1
37602: ST_TO_ADDR
// minersList := [ ] ;
37603: LD_ADDR_EXP 128
37607: PUSH
37608: EMPTY
37609: ST_TO_ADDR
// minerMinesList := [ ] ;
37610: LD_ADDR_EXP 129
37614: PUSH
37615: EMPTY
37616: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37617: LD_ADDR_EXP 130
37621: PUSH
37622: LD_INT 5
37624: ST_TO_ADDR
// end ;
37625: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37626: LD_EXP 127
37630: PUSH
37631: LD_INT 34
37633: PUSH
37634: LD_INT 81
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PPUSH
37641: CALL_OW 69
37645: AND
37646: IFFALSE 38107
37648: GO 37650
37650: DISABLE
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
// begin enable ;
37657: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37658: LD_ADDR_VAR 0 1
37662: PUSH
37663: LD_INT 34
37665: PUSH
37666: LD_INT 81
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PPUSH
37673: CALL_OW 69
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37751
// begin if not i in minersList then
37681: LD_VAR 0 1
37685: PUSH
37686: LD_EXP 128
37690: IN
37691: NOT
37692: IFFALSE 37749
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37694: LD_ADDR_EXP 128
37698: PUSH
37699: LD_EXP 128
37703: PPUSH
37704: LD_EXP 128
37708: PUSH
37709: LD_INT 1
37711: PLUS
37712: PPUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 1
37722: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37723: LD_ADDR_EXP 129
37727: PUSH
37728: LD_EXP 129
37732: PPUSH
37733: LD_EXP 129
37737: PUSH
37738: LD_INT 1
37740: PLUS
37741: PPUSH
37742: EMPTY
37743: PPUSH
37744: CALL_OW 1
37748: ST_TO_ADDR
// end end ;
37749: GO 37678
37751: POP
37752: POP
// for i := minerMinesList downto 1 do
37753: LD_ADDR_VAR 0 1
37757: PUSH
37758: DOUBLE
37759: LD_EXP 129
37763: INC
37764: ST_TO_ADDR
37765: LD_INT 1
37767: PUSH
37768: FOR_DOWNTO
37769: IFFALSE 38105
// begin if IsLive ( minersList [ i ] ) then
37771: LD_EXP 128
37775: PUSH
37776: LD_VAR 0 1
37780: ARRAY
37781: PPUSH
37782: CALL_OW 300
37786: IFFALSE 37814
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37788: LD_EXP 128
37792: PUSH
37793: LD_VAR 0 1
37797: ARRAY
37798: PPUSH
37799: LD_EXP 129
37803: PUSH
37804: LD_VAR 0 1
37808: ARRAY
37809: PPUSH
37810: CALL_OW 505
// if not minerMinesList [ i ] then
37814: LD_EXP 129
37818: PUSH
37819: LD_VAR 0 1
37823: ARRAY
37824: NOT
37825: IFFALSE 37829
// continue ;
37827: GO 37768
// for j := minerMinesList [ i ] downto 1 do
37829: LD_ADDR_VAR 0 2
37833: PUSH
37834: DOUBLE
37835: LD_EXP 129
37839: PUSH
37840: LD_VAR 0 1
37844: ARRAY
37845: INC
37846: ST_TO_ADDR
37847: LD_INT 1
37849: PUSH
37850: FOR_DOWNTO
37851: IFFALSE 38101
// begin side := GetSide ( minersList [ i ] ) ;
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_EXP 128
37862: PUSH
37863: LD_VAR 0 1
37867: ARRAY
37868: PPUSH
37869: CALL_OW 255
37873: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37874: LD_ADDR_VAR 0 4
37878: PUSH
37879: LD_EXP 129
37883: PUSH
37884: LD_VAR 0 1
37888: ARRAY
37889: PUSH
37890: LD_VAR 0 2
37894: ARRAY
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: PPUSH
37900: LD_EXP 129
37904: PUSH
37905: LD_VAR 0 1
37909: ARRAY
37910: PUSH
37911: LD_VAR 0 2
37915: ARRAY
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: CALL_OW 428
37925: ST_TO_ADDR
// if not tmp then
37926: LD_VAR 0 4
37930: NOT
37931: IFFALSE 37935
// continue ;
37933: GO 37850
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37935: LD_VAR 0 4
37939: PUSH
37940: LD_INT 81
37942: PUSH
37943: LD_VAR 0 3
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PPUSH
37952: CALL_OW 69
37956: IN
37957: PUSH
37958: LD_EXP 129
37962: PUSH
37963: LD_VAR 0 1
37967: ARRAY
37968: PUSH
37969: LD_VAR 0 2
37973: ARRAY
37974: PUSH
37975: LD_INT 1
37977: ARRAY
37978: PPUSH
37979: LD_EXP 129
37983: PUSH
37984: LD_VAR 0 1
37988: ARRAY
37989: PUSH
37990: LD_VAR 0 2
37994: ARRAY
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: PPUSH
38000: CALL_OW 458
38004: AND
38005: IFFALSE 38099
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38007: LD_EXP 129
38011: PUSH
38012: LD_VAR 0 1
38016: ARRAY
38017: PUSH
38018: LD_VAR 0 2
38022: ARRAY
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: LD_EXP 129
38032: PUSH
38033: LD_VAR 0 1
38037: ARRAY
38038: PUSH
38039: LD_VAR 0 2
38043: ARRAY
38044: PUSH
38045: LD_INT 2
38047: ARRAY
38048: PPUSH
38049: LD_VAR 0 3
38053: PPUSH
38054: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38058: LD_ADDR_EXP 129
38062: PUSH
38063: LD_EXP 129
38067: PPUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: LD_EXP 129
38077: PUSH
38078: LD_VAR 0 1
38082: ARRAY
38083: PPUSH
38084: LD_VAR 0 2
38088: PPUSH
38089: CALL_OW 3
38093: PPUSH
38094: CALL_OW 1
38098: ST_TO_ADDR
// end ; end ;
38099: GO 37850
38101: POP
38102: POP
// end ;
38103: GO 37768
38105: POP
38106: POP
// end ;
38107: PPOPN 4
38109: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
// result := false ;
38114: LD_ADDR_VAR 0 4
38118: PUSH
38119: LD_INT 0
38121: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 264
38131: PUSH
38132: LD_INT 81
38134: EQUAL
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38380
// index := GetElementIndex ( minersList , unit ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_EXP 128
38149: PPUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL 44513 0 2
38159: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38160: LD_EXP 129
38164: PUSH
38165: LD_VAR 0 5
38169: ARRAY
38170: PUSH
38171: LD_EXP 130
38175: GREATEREQUAL
38176: IFFALSE 38180
// exit ;
38178: GO 38380
// ComMoveXY ( unit , x , y ) ;
38180: LD_VAR 0 1
38184: PPUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38199: LD_INT 35
38201: PPUSH
38202: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38206: LD_VAR 0 1
38210: PPUSH
38211: LD_VAR 0 2
38215: PPUSH
38216: LD_VAR 0 3
38220: PPUSH
38221: CALL 75849 0 3
38225: NOT
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 314
38236: AND
38237: IFFALSE 38241
// exit ;
38239: GO 38380
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: CALL_OW 428
38255: PUSH
38256: LD_VAR 0 1
38260: EQUAL
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 314
38271: NOT
38272: AND
38273: IFFALSE 38199
// PlaySoundXY ( x , y , PlantMine ) ;
38275: LD_VAR 0 2
38279: PPUSH
38280: LD_VAR 0 3
38284: PPUSH
38285: LD_STRING PlantMine
38287: PPUSH
38288: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38292: LD_VAR 0 2
38296: PPUSH
38297: LD_VAR 0 3
38301: PPUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL_OW 255
38311: PPUSH
38312: LD_INT 0
38314: PPUSH
38315: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38319: LD_ADDR_EXP 129
38323: PUSH
38324: LD_EXP 129
38328: PPUSH
38329: LD_VAR 0 5
38333: PUSH
38334: LD_EXP 129
38338: PUSH
38339: LD_VAR 0 5
38343: ARRAY
38344: PUSH
38345: LD_INT 1
38347: PLUS
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PPUSH
38353: LD_VAR 0 2
38357: PUSH
38358: LD_VAR 0 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PPUSH
38367: CALL 44728 0 3
38371: ST_TO_ADDR
// result := true ;
38372: LD_ADDR_VAR 0 4
38376: PUSH
38377: LD_INT 1
38379: ST_TO_ADDR
// end ;
38380: LD_VAR 0 4
38384: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38385: LD_INT 0
38387: PPUSH
38388: PPUSH
38389: PPUSH
// if not unit in minersList then
38390: LD_VAR 0 1
38394: PUSH
38395: LD_EXP 128
38399: IN
38400: NOT
38401: IFFALSE 38405
// exit ;
38403: GO 38797
// index := GetElementIndex ( minersList , unit ) ;
38405: LD_ADDR_VAR 0 6
38409: PUSH
38410: LD_EXP 128
38414: PPUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL 44513 0 2
38424: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38425: LD_ADDR_VAR 0 5
38429: PUSH
38430: DOUBLE
38431: LD_EXP 129
38435: PUSH
38436: LD_VAR 0 6
38440: ARRAY
38441: INC
38442: ST_TO_ADDR
38443: LD_INT 1
38445: PUSH
38446: FOR_DOWNTO
38447: IFFALSE 38608
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38449: LD_EXP 129
38453: PUSH
38454: LD_VAR 0 6
38458: ARRAY
38459: PUSH
38460: LD_VAR 0 5
38464: ARRAY
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PUSH
38470: LD_VAR 0 2
38474: EQUAL
38475: PUSH
38476: LD_EXP 129
38480: PUSH
38481: LD_VAR 0 6
38485: ARRAY
38486: PUSH
38487: LD_VAR 0 5
38491: ARRAY
38492: PUSH
38493: LD_INT 2
38495: ARRAY
38496: PUSH
38497: LD_VAR 0 3
38501: EQUAL
38502: AND
38503: IFFALSE 38606
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38505: LD_EXP 129
38509: PUSH
38510: LD_VAR 0 6
38514: ARRAY
38515: PUSH
38516: LD_VAR 0 5
38520: ARRAY
38521: PUSH
38522: LD_INT 1
38524: ARRAY
38525: PPUSH
38526: LD_EXP 129
38530: PUSH
38531: LD_VAR 0 6
38535: ARRAY
38536: PUSH
38537: LD_VAR 0 5
38541: ARRAY
38542: PUSH
38543: LD_INT 2
38545: ARRAY
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 255
38556: PPUSH
38557: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38561: LD_ADDR_EXP 129
38565: PUSH
38566: LD_EXP 129
38570: PPUSH
38571: LD_VAR 0 6
38575: PPUSH
38576: LD_EXP 129
38580: PUSH
38581: LD_VAR 0 6
38585: ARRAY
38586: PPUSH
38587: LD_VAR 0 5
38591: PPUSH
38592: CALL_OW 3
38596: PPUSH
38597: CALL_OW 1
38601: ST_TO_ADDR
// exit ;
38602: POP
38603: POP
38604: GO 38797
// end ; end ;
38606: GO 38446
38608: POP
38609: POP
// for i := minerMinesList [ index ] downto 1 do
38610: LD_ADDR_VAR 0 5
38614: PUSH
38615: DOUBLE
38616: LD_EXP 129
38620: PUSH
38621: LD_VAR 0 6
38625: ARRAY
38626: INC
38627: ST_TO_ADDR
38628: LD_INT 1
38630: PUSH
38631: FOR_DOWNTO
38632: IFFALSE 38795
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38634: LD_EXP 129
38638: PUSH
38639: LD_VAR 0 6
38643: ARRAY
38644: PUSH
38645: LD_VAR 0 5
38649: ARRAY
38650: PUSH
38651: LD_INT 1
38653: ARRAY
38654: PPUSH
38655: LD_EXP 129
38659: PUSH
38660: LD_VAR 0 6
38664: ARRAY
38665: PUSH
38666: LD_VAR 0 5
38670: ARRAY
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: PPUSH
38676: LD_VAR 0 2
38680: PPUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: CALL_OW 298
38690: PUSH
38691: LD_INT 6
38693: LESS
38694: IFFALSE 38793
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38696: LD_EXP 129
38700: PUSH
38701: LD_VAR 0 6
38705: ARRAY
38706: PUSH
38707: LD_VAR 0 5
38711: ARRAY
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PPUSH
38717: LD_EXP 129
38721: PUSH
38722: LD_VAR 0 6
38726: ARRAY
38727: PUSH
38728: LD_VAR 0 5
38732: ARRAY
38733: PUSH
38734: LD_INT 2
38736: ARRAY
38737: PPUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 255
38747: PPUSH
38748: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38752: LD_ADDR_EXP 129
38756: PUSH
38757: LD_EXP 129
38761: PPUSH
38762: LD_VAR 0 6
38766: PPUSH
38767: LD_EXP 129
38771: PUSH
38772: LD_VAR 0 6
38776: ARRAY
38777: PPUSH
38778: LD_VAR 0 5
38782: PPUSH
38783: CALL_OW 3
38787: PPUSH
38788: CALL_OW 1
38792: ST_TO_ADDR
// end ; end ;
38793: GO 38631
38795: POP
38796: POP
// end ;
38797: LD_VAR 0 4
38801: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38802: LD_INT 0
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 264
38822: PUSH
38823: LD_INT 81
38825: EQUAL
38826: NOT
38827: PUSH
38828: LD_VAR 0 1
38832: PUSH
38833: LD_EXP 128
38837: IN
38838: NOT
38839: OR
38840: IFFALSE 38844
// exit ;
38842: GO 39166
// index := GetElementIndex ( minersList , unit ) ;
38844: LD_ADDR_VAR 0 6
38848: PUSH
38849: LD_EXP 128
38853: PPUSH
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL 44513 0 2
38863: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38864: LD_ADDR_VAR 0 8
38868: PUSH
38869: LD_EXP 130
38873: PUSH
38874: LD_EXP 129
38878: PUSH
38879: LD_VAR 0 6
38883: ARRAY
38884: MINUS
38885: ST_TO_ADDR
// if not minesFreeAmount then
38886: LD_VAR 0 8
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 39166
// tmp := [ ] ;
38895: LD_ADDR_VAR 0 7
38899: PUSH
38900: EMPTY
38901: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38902: LD_ADDR_VAR 0 5
38906: PUSH
38907: DOUBLE
38908: LD_INT 1
38910: DEC
38911: ST_TO_ADDR
38912: LD_VAR 0 8
38916: PUSH
38917: FOR_TO
38918: IFFALSE 39113
// begin _d := rand ( 0 , 5 ) ;
38920: LD_ADDR_VAR 0 11
38924: PUSH
38925: LD_INT 0
38927: PPUSH
38928: LD_INT 5
38930: PPUSH
38931: CALL_OW 12
38935: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38936: LD_ADDR_VAR 0 12
38940: PUSH
38941: LD_INT 2
38943: PPUSH
38944: LD_INT 6
38946: PPUSH
38947: CALL_OW 12
38951: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38952: LD_ADDR_VAR 0 9
38956: PUSH
38957: LD_VAR 0 2
38961: PPUSH
38962: LD_VAR 0 11
38966: PPUSH
38967: LD_VAR 0 12
38971: PPUSH
38972: CALL_OW 272
38976: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38977: LD_ADDR_VAR 0 10
38981: PUSH
38982: LD_VAR 0 3
38986: PPUSH
38987: LD_VAR 0 11
38991: PPUSH
38992: LD_VAR 0 12
38996: PPUSH
38997: CALL_OW 273
39001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39002: LD_VAR 0 9
39006: PPUSH
39007: LD_VAR 0 10
39011: PPUSH
39012: CALL_OW 488
39016: PUSH
39017: LD_VAR 0 9
39021: PUSH
39022: LD_VAR 0 10
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 7
39035: IN
39036: NOT
39037: AND
39038: PUSH
39039: LD_VAR 0 9
39043: PPUSH
39044: LD_VAR 0 10
39048: PPUSH
39049: CALL_OW 458
39053: NOT
39054: AND
39055: IFFALSE 39097
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39057: LD_ADDR_VAR 0 7
39061: PUSH
39062: LD_VAR 0 7
39066: PPUSH
39067: LD_VAR 0 7
39071: PUSH
39072: LD_INT 1
39074: PLUS
39075: PPUSH
39076: LD_VAR 0 9
39080: PUSH
39081: LD_VAR 0 10
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PPUSH
39090: CALL_OW 1
39094: ST_TO_ADDR
39095: GO 39111
// i := i - 1 ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 5
39106: PUSH
39107: LD_INT 1
39109: MINUS
39110: ST_TO_ADDR
// end ;
39111: GO 38917
39113: POP
39114: POP
// for i in tmp do
39115: LD_ADDR_VAR 0 5
39119: PUSH
39120: LD_VAR 0 7
39124: PUSH
39125: FOR_IN
39126: IFFALSE 39164
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39128: LD_VAR 0 1
39132: PPUSH
39133: LD_VAR 0 5
39137: PUSH
39138: LD_INT 1
39140: ARRAY
39141: PPUSH
39142: LD_VAR 0 5
39146: PUSH
39147: LD_INT 2
39149: ARRAY
39150: PPUSH
39151: CALL 38110 0 3
39155: NOT
39156: IFFALSE 39162
// exit ;
39158: POP
39159: POP
39160: GO 39166
39162: GO 39125
39164: POP
39165: POP
// end ;
39166: LD_VAR 0 4
39170: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
// if not GetClass ( unit ) = class_sniper then
39180: LD_VAR 0 1
39184: PPUSH
39185: CALL_OW 257
39189: PUSH
39190: LD_INT 5
39192: EQUAL
39193: NOT
39194: IFFALSE 39198
// exit ;
39196: GO 39586
// dist := 8 ;
39198: LD_ADDR_VAR 0 5
39202: PUSH
39203: LD_INT 8
39205: ST_TO_ADDR
// viewRange := 12 ;
39206: LD_ADDR_VAR 0 7
39210: PUSH
39211: LD_INT 12
39213: ST_TO_ADDR
// side := GetSide ( unit ) ;
39214: LD_ADDR_VAR 0 6
39218: PUSH
39219: LD_VAR 0 1
39223: PPUSH
39224: CALL_OW 255
39228: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39229: LD_INT 61
39231: PPUSH
39232: LD_VAR 0 6
39236: PPUSH
39237: CALL_OW 321
39241: PUSH
39242: LD_INT 2
39244: EQUAL
39245: IFFALSE 39255
// viewRange := 16 ;
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: LD_INT 16
39254: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39255: LD_VAR 0 1
39259: PPUSH
39260: LD_VAR 0 2
39264: PPUSH
39265: LD_VAR 0 3
39269: PPUSH
39270: CALL_OW 297
39274: PUSH
39275: LD_VAR 0 5
39279: GREATER
39280: IFFALSE 39359
// begin ComMoveXY ( unit , x , y ) ;
39282: LD_VAR 0 1
39286: PPUSH
39287: LD_VAR 0 2
39291: PPUSH
39292: LD_VAR 0 3
39296: PPUSH
39297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39301: LD_INT 35
39303: PPUSH
39304: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: LD_VAR 0 3
39322: PPUSH
39323: CALL 75849 0 3
39327: NOT
39328: IFFALSE 39332
// exit ;
39330: GO 39586
// until GetDistUnitXY ( unit , x , y ) < dist ;
39332: LD_VAR 0 1
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 3
39346: PPUSH
39347: CALL_OW 297
39351: PUSH
39352: LD_VAR 0 5
39356: LESS
39357: IFFALSE 39301
// end ; ComTurnXY ( unit , x , y ) ;
39359: LD_VAR 0 1
39363: PPUSH
39364: LD_VAR 0 2
39368: PPUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: CALL_OW 118
// wait ( 5 ) ;
39378: LD_INT 5
39380: PPUSH
39381: CALL_OW 67
// _d := GetDir ( unit ) ;
39385: LD_ADDR_VAR 0 10
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 254
39399: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39400: LD_ADDR_VAR 0 8
39404: PUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 250
39414: PPUSH
39415: LD_VAR 0 10
39419: PPUSH
39420: LD_VAR 0 5
39424: PPUSH
39425: CALL_OW 272
39429: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 251
39444: PPUSH
39445: LD_VAR 0 10
39449: PPUSH
39450: LD_VAR 0 5
39454: PPUSH
39455: CALL_OW 273
39459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39460: LD_VAR 0 8
39464: PPUSH
39465: LD_VAR 0 9
39469: PPUSH
39470: CALL_OW 488
39474: NOT
39475: IFFALSE 39479
// exit ;
39477: GO 39586
// ComAnimCustom ( unit , 1 ) ;
39479: LD_VAR 0 1
39483: PPUSH
39484: LD_INT 1
39486: PPUSH
39487: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39491: LD_VAR 0 8
39495: PPUSH
39496: LD_VAR 0 9
39500: PPUSH
39501: LD_VAR 0 6
39505: PPUSH
39506: LD_VAR 0 7
39510: PPUSH
39511: CALL_OW 330
// repeat wait ( 1 ) ;
39515: LD_INT 1
39517: PPUSH
39518: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 316
39531: PUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 314
39541: OR
39542: PUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 302
39552: NOT
39553: OR
39554: PUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 301
39564: OR
39565: IFFALSE 39515
// RemoveSeeing ( _x , _y , side ) ;
39567: LD_VAR 0 8
39571: PPUSH
39572: LD_VAR 0 9
39576: PPUSH
39577: LD_VAR 0 6
39581: PPUSH
39582: CALL_OW 331
// end ; end_of_file
39586: LD_VAR 0 4
39590: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39591: LD_INT 0
39593: PPUSH
39594: PPUSH
// if exist_mode then
39595: LD_VAR 0 2
39599: IFFALSE 39624
// unit := CreateCharacter ( prefix & ident ) else
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_VAR 0 3
39610: PUSH
39611: LD_VAR 0 1
39615: STR
39616: PPUSH
39617: CALL_OW 34
39621: ST_TO_ADDR
39622: GO 39639
// unit := NewCharacter ( ident ) ;
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 25
39638: ST_TO_ADDR
// result := unit ;
39639: LD_ADDR_VAR 0 4
39643: PUSH
39644: LD_VAR 0 5
39648: ST_TO_ADDR
// end ;
39649: LD_VAR 0 4
39653: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
// if not side or not nation then
39658: LD_VAR 0 1
39662: NOT
39663: PUSH
39664: LD_VAR 0 2
39668: NOT
39669: OR
39670: IFFALSE 39674
// exit ;
39672: GO 40442
// case nation of nation_american :
39674: LD_VAR 0 2
39678: PUSH
39679: LD_INT 1
39681: DOUBLE
39682: EQUAL
39683: IFTRUE 39687
39685: GO 39901
39687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39688: LD_ADDR_VAR 0 4
39692: PUSH
39693: LD_INT 35
39695: PUSH
39696: LD_INT 45
39698: PUSH
39699: LD_INT 46
39701: PUSH
39702: LD_INT 47
39704: PUSH
39705: LD_INT 82
39707: PUSH
39708: LD_INT 83
39710: PUSH
39711: LD_INT 84
39713: PUSH
39714: LD_INT 85
39716: PUSH
39717: LD_INT 86
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 6
39728: PUSH
39729: LD_INT 15
39731: PUSH
39732: LD_INT 16
39734: PUSH
39735: LD_INT 7
39737: PUSH
39738: LD_INT 12
39740: PUSH
39741: LD_INT 13
39743: PUSH
39744: LD_INT 10
39746: PUSH
39747: LD_INT 14
39749: PUSH
39750: LD_INT 20
39752: PUSH
39753: LD_INT 21
39755: PUSH
39756: LD_INT 22
39758: PUSH
39759: LD_INT 25
39761: PUSH
39762: LD_INT 32
39764: PUSH
39765: LD_INT 27
39767: PUSH
39768: LD_INT 36
39770: PUSH
39771: LD_INT 69
39773: PUSH
39774: LD_INT 39
39776: PUSH
39777: LD_INT 34
39779: PUSH
39780: LD_INT 40
39782: PUSH
39783: LD_INT 48
39785: PUSH
39786: LD_INT 49
39788: PUSH
39789: LD_INT 50
39791: PUSH
39792: LD_INT 51
39794: PUSH
39795: LD_INT 52
39797: PUSH
39798: LD_INT 53
39800: PUSH
39801: LD_INT 54
39803: PUSH
39804: LD_INT 55
39806: PUSH
39807: LD_INT 56
39809: PUSH
39810: LD_INT 57
39812: PUSH
39813: LD_INT 58
39815: PUSH
39816: LD_INT 59
39818: PUSH
39819: LD_INT 60
39821: PUSH
39822: LD_INT 61
39824: PUSH
39825: LD_INT 62
39827: PUSH
39828: LD_INT 80
39830: PUSH
39831: LD_INT 82
39833: PUSH
39834: LD_INT 83
39836: PUSH
39837: LD_INT 84
39839: PUSH
39840: LD_INT 85
39842: PUSH
39843: LD_INT 86
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
39899: GO 40366
39901: LD_INT 2
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 40135
39909: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: LD_INT 35
39917: PUSH
39918: LD_INT 45
39920: PUSH
39921: LD_INT 46
39923: PUSH
39924: LD_INT 47
39926: PUSH
39927: LD_INT 82
39929: PUSH
39930: LD_INT 83
39932: PUSH
39933: LD_INT 84
39935: PUSH
39936: LD_INT 85
39938: PUSH
39939: LD_INT 87
39941: PUSH
39942: LD_INT 70
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 11
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: LD_INT 4
39956: PUSH
39957: LD_INT 5
39959: PUSH
39960: LD_INT 6
39962: PUSH
39963: LD_INT 15
39965: PUSH
39966: LD_INT 18
39968: PUSH
39969: LD_INT 7
39971: PUSH
39972: LD_INT 17
39974: PUSH
39975: LD_INT 8
39977: PUSH
39978: LD_INT 20
39980: PUSH
39981: LD_INT 21
39983: PUSH
39984: LD_INT 22
39986: PUSH
39987: LD_INT 72
39989: PUSH
39990: LD_INT 26
39992: PUSH
39993: LD_INT 69
39995: PUSH
39996: LD_INT 39
39998: PUSH
39999: LD_INT 40
40001: PUSH
40002: LD_INT 41
40004: PUSH
40005: LD_INT 42
40007: PUSH
40008: LD_INT 43
40010: PUSH
40011: LD_INT 48
40013: PUSH
40014: LD_INT 49
40016: PUSH
40017: LD_INT 50
40019: PUSH
40020: LD_INT 51
40022: PUSH
40023: LD_INT 52
40025: PUSH
40026: LD_INT 53
40028: PUSH
40029: LD_INT 54
40031: PUSH
40032: LD_INT 55
40034: PUSH
40035: LD_INT 56
40037: PUSH
40038: LD_INT 60
40040: PUSH
40041: LD_INT 61
40043: PUSH
40044: LD_INT 62
40046: PUSH
40047: LD_INT 66
40049: PUSH
40050: LD_INT 67
40052: PUSH
40053: LD_INT 68
40055: PUSH
40056: LD_INT 81
40058: PUSH
40059: LD_INT 82
40061: PUSH
40062: LD_INT 83
40064: PUSH
40065: LD_INT 84
40067: PUSH
40068: LD_INT 85
40070: PUSH
40071: LD_INT 87
40073: PUSH
40074: LD_INT 88
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
40133: GO 40366
40135: LD_INT 3
40137: DOUBLE
40138: EQUAL
40139: IFTRUE 40143
40141: GO 40365
40143: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: LD_INT 46
40151: PUSH
40152: LD_INT 47
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 82
40163: PUSH
40164: LD_INT 83
40166: PUSH
40167: LD_INT 84
40169: PUSH
40170: LD_INT 85
40172: PUSH
40173: LD_INT 86
40175: PUSH
40176: LD_INT 11
40178: PUSH
40179: LD_INT 9
40181: PUSH
40182: LD_INT 20
40184: PUSH
40185: LD_INT 19
40187: PUSH
40188: LD_INT 21
40190: PUSH
40191: LD_INT 24
40193: PUSH
40194: LD_INT 22
40196: PUSH
40197: LD_INT 25
40199: PUSH
40200: LD_INT 28
40202: PUSH
40203: LD_INT 29
40205: PUSH
40206: LD_INT 30
40208: PUSH
40209: LD_INT 31
40211: PUSH
40212: LD_INT 37
40214: PUSH
40215: LD_INT 38
40217: PUSH
40218: LD_INT 32
40220: PUSH
40221: LD_INT 27
40223: PUSH
40224: LD_INT 33
40226: PUSH
40227: LD_INT 69
40229: PUSH
40230: LD_INT 39
40232: PUSH
40233: LD_INT 34
40235: PUSH
40236: LD_INT 40
40238: PUSH
40239: LD_INT 71
40241: PUSH
40242: LD_INT 23
40244: PUSH
40245: LD_INT 44
40247: PUSH
40248: LD_INT 48
40250: PUSH
40251: LD_INT 49
40253: PUSH
40254: LD_INT 50
40256: PUSH
40257: LD_INT 51
40259: PUSH
40260: LD_INT 52
40262: PUSH
40263: LD_INT 53
40265: PUSH
40266: LD_INT 54
40268: PUSH
40269: LD_INT 55
40271: PUSH
40272: LD_INT 56
40274: PUSH
40275: LD_INT 57
40277: PUSH
40278: LD_INT 58
40280: PUSH
40281: LD_INT 59
40283: PUSH
40284: LD_INT 63
40286: PUSH
40287: LD_INT 64
40289: PUSH
40290: LD_INT 65
40292: PUSH
40293: LD_INT 82
40295: PUSH
40296: LD_INT 83
40298: PUSH
40299: LD_INT 84
40301: PUSH
40302: LD_INT 85
40304: PUSH
40305: LD_INT 86
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
40363: GO 40366
40365: POP
// if state > - 1 and state < 3 then
40366: LD_VAR 0 3
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: GREATER
40375: PUSH
40376: LD_VAR 0 3
40380: PUSH
40381: LD_INT 3
40383: LESS
40384: AND
40385: IFFALSE 40442
// for i in result do
40387: LD_ADDR_VAR 0 5
40391: PUSH
40392: LD_VAR 0 4
40396: PUSH
40397: FOR_IN
40398: IFFALSE 40440
// if GetTech ( i , side ) <> state then
40400: LD_VAR 0 5
40404: PPUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 321
40414: PUSH
40415: LD_VAR 0 3
40419: NONEQUAL
40420: IFFALSE 40438
// result := result diff i ;
40422: LD_ADDR_VAR 0 4
40426: PUSH
40427: LD_VAR 0 4
40431: PUSH
40432: LD_VAR 0 5
40436: DIFF
40437: ST_TO_ADDR
40438: GO 40397
40440: POP
40441: POP
// end ;
40442: LD_VAR 0 4
40446: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40447: LD_INT 0
40449: PPUSH
40450: PPUSH
40451: PPUSH
// result := true ;
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: LD_INT 1
40459: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40460: LD_ADDR_VAR 0 5
40464: PUSH
40465: LD_VAR 0 2
40469: PPUSH
40470: CALL_OW 480
40474: ST_TO_ADDR
// if not tmp then
40475: LD_VAR 0 5
40479: NOT
40480: IFFALSE 40484
// exit ;
40482: GO 40533
// for i in tmp do
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_VAR 0 5
40493: PUSH
40494: FOR_IN
40495: IFFALSE 40531
// if GetTech ( i , side ) <> state_researched then
40497: LD_VAR 0 4
40501: PPUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: CALL_OW 321
40511: PUSH
40512: LD_INT 2
40514: NONEQUAL
40515: IFFALSE 40529
// begin result := false ;
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_INT 0
40524: ST_TO_ADDR
// exit ;
40525: POP
40526: POP
40527: GO 40533
// end ;
40529: GO 40494
40531: POP
40532: POP
// end ;
40533: LD_VAR 0 3
40537: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40538: LD_INT 0
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40553: LD_VAR 0 1
40557: NOT
40558: PUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 257
40568: PUSH
40569: LD_INT 9
40571: NONEQUAL
40572: OR
40573: IFFALSE 40577
// exit ;
40575: GO 41150
// side := GetSide ( unit ) ;
40577: LD_ADDR_VAR 0 9
40581: PUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 255
40591: ST_TO_ADDR
// tech_space := tech_spacanom ;
40592: LD_ADDR_VAR 0 12
40596: PUSH
40597: LD_INT 29
40599: ST_TO_ADDR
// tech_time := tech_taurad ;
40600: LD_ADDR_VAR 0 13
40604: PUSH
40605: LD_INT 28
40607: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40608: LD_ADDR_VAR 0 11
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 310
40622: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40623: LD_VAR 0 11
40627: PPUSH
40628: CALL_OW 247
40632: PUSH
40633: LD_INT 2
40635: EQUAL
40636: IFFALSE 40640
// exit ;
40638: GO 41150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40640: LD_ADDR_VAR 0 8
40644: PUSH
40645: LD_INT 81
40647: PUSH
40648: LD_VAR 0 9
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: PUSH
40660: LD_INT 21
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PPUSH
40678: CALL_OW 69
40682: ST_TO_ADDR
// if not tmp then
40683: LD_VAR 0 8
40687: NOT
40688: IFFALSE 40692
// exit ;
40690: GO 41150
// if in_unit then
40692: LD_VAR 0 11
40696: IFFALSE 40720
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40698: LD_ADDR_VAR 0 10
40702: PUSH
40703: LD_VAR 0 8
40707: PPUSH
40708: LD_VAR 0 11
40712: PPUSH
40713: CALL_OW 74
40717: ST_TO_ADDR
40718: GO 40740
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40720: LD_ADDR_VAR 0 10
40724: PUSH
40725: LD_VAR 0 8
40729: PPUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 74
40739: ST_TO_ADDR
// if not enemy then
40740: LD_VAR 0 10
40744: NOT
40745: IFFALSE 40749
// exit ;
40747: GO 41150
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40749: LD_VAR 0 11
40753: PUSH
40754: LD_VAR 0 11
40758: PPUSH
40759: LD_VAR 0 10
40763: PPUSH
40764: CALL_OW 296
40768: PUSH
40769: LD_INT 13
40771: GREATER
40772: AND
40773: PUSH
40774: LD_VAR 0 1
40778: PPUSH
40779: LD_VAR 0 10
40783: PPUSH
40784: CALL_OW 296
40788: PUSH
40789: LD_INT 12
40791: GREATER
40792: OR
40793: IFFALSE 40797
// exit ;
40795: GO 41150
// missile := [ 1 ] ;
40797: LD_ADDR_VAR 0 14
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40808: LD_VAR 0 9
40812: PPUSH
40813: LD_VAR 0 12
40817: PPUSH
40818: CALL_OW 325
40822: IFFALSE 40851
// missile := Replace ( missile , missile + 1 , 2 ) ;
40824: LD_ADDR_VAR 0 14
40828: PUSH
40829: LD_VAR 0 14
40833: PPUSH
40834: LD_VAR 0 14
40838: PUSH
40839: LD_INT 1
40841: PLUS
40842: PPUSH
40843: LD_INT 2
40845: PPUSH
40846: CALL_OW 1
40850: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40851: LD_VAR 0 9
40855: PPUSH
40856: LD_VAR 0 13
40860: PPUSH
40861: CALL_OW 325
40865: PUSH
40866: LD_VAR 0 10
40870: PPUSH
40871: CALL_OW 255
40875: PPUSH
40876: LD_VAR 0 13
40880: PPUSH
40881: CALL_OW 325
40885: NOT
40886: AND
40887: IFFALSE 40916
// missile := Replace ( missile , missile + 1 , 3 ) ;
40889: LD_ADDR_VAR 0 14
40893: PUSH
40894: LD_VAR 0 14
40898: PPUSH
40899: LD_VAR 0 14
40903: PUSH
40904: LD_INT 1
40906: PLUS
40907: PPUSH
40908: LD_INT 3
40910: PPUSH
40911: CALL_OW 1
40915: ST_TO_ADDR
// if missile < 2 then
40916: LD_VAR 0 14
40920: PUSH
40921: LD_INT 2
40923: LESS
40924: IFFALSE 40928
// exit ;
40926: GO 41150
// x := GetX ( enemy ) ;
40928: LD_ADDR_VAR 0 4
40932: PUSH
40933: LD_VAR 0 10
40937: PPUSH
40938: CALL_OW 250
40942: ST_TO_ADDR
// y := GetY ( enemy ) ;
40943: LD_ADDR_VAR 0 5
40947: PUSH
40948: LD_VAR 0 10
40952: PPUSH
40953: CALL_OW 251
40957: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40958: LD_ADDR_VAR 0 6
40962: PUSH
40963: LD_VAR 0 4
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PPUSH
40972: LD_INT 1
40974: PPUSH
40975: CALL_OW 12
40979: PLUS
40980: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40981: LD_ADDR_VAR 0 7
40985: PUSH
40986: LD_VAR 0 5
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PPUSH
40995: LD_INT 1
40997: PPUSH
40998: CALL_OW 12
41002: PLUS
41003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41004: LD_VAR 0 6
41008: PPUSH
41009: LD_VAR 0 7
41013: PPUSH
41014: CALL_OW 488
41018: NOT
41019: IFFALSE 41041
// begin _x := x ;
41021: LD_ADDR_VAR 0 6
41025: PUSH
41026: LD_VAR 0 4
41030: ST_TO_ADDR
// _y := y ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: LD_VAR 0 5
41040: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_INT 1
41048: PPUSH
41049: LD_VAR 0 14
41053: PPUSH
41054: CALL_OW 12
41058: ST_TO_ADDR
// case i of 1 :
41059: LD_VAR 0 3
41063: PUSH
41064: LD_INT 1
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41072
41070: GO 41089
41072: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41073: LD_VAR 0 1
41077: PPUSH
41078: LD_VAR 0 10
41082: PPUSH
41083: CALL_OW 115
41087: GO 41150
41089: LD_INT 2
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41097
41095: GO 41119
41097: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41098: LD_VAR 0 1
41102: PPUSH
41103: LD_VAR 0 6
41107: PPUSH
41108: LD_VAR 0 7
41112: PPUSH
41113: CALL_OW 153
41117: GO 41150
41119: LD_INT 3
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41127
41125: GO 41149
41127: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41128: LD_VAR 0 1
41132: PPUSH
41133: LD_VAR 0 6
41137: PPUSH
41138: LD_VAR 0 7
41142: PPUSH
41143: CALL_OW 154
41147: GO 41150
41149: POP
// end ;
41150: LD_VAR 0 2
41154: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
// if not unit or not building then
41163: LD_VAR 0 1
41167: NOT
41168: PUSH
41169: LD_VAR 0 2
41173: NOT
41174: OR
41175: IFFALSE 41179
// exit ;
41177: GO 41337
// x := GetX ( building ) ;
41179: LD_ADDR_VAR 0 5
41183: PUSH
41184: LD_VAR 0 2
41188: PPUSH
41189: CALL_OW 250
41193: ST_TO_ADDR
// y := GetY ( building ) ;
41194: LD_ADDR_VAR 0 6
41198: PUSH
41199: LD_VAR 0 2
41203: PPUSH
41204: CALL_OW 251
41208: ST_TO_ADDR
// for i = 0 to 5 do
41209: LD_ADDR_VAR 0 4
41213: PUSH
41214: DOUBLE
41215: LD_INT 0
41217: DEC
41218: ST_TO_ADDR
41219: LD_INT 5
41221: PUSH
41222: FOR_TO
41223: IFFALSE 41335
// begin _x := ShiftX ( x , i , 3 ) ;
41225: LD_ADDR_VAR 0 7
41229: PUSH
41230: LD_VAR 0 5
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: LD_INT 3
41242: PPUSH
41243: CALL_OW 272
41247: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41248: LD_ADDR_VAR 0 8
41252: PUSH
41253: LD_VAR 0 6
41257: PPUSH
41258: LD_VAR 0 4
41262: PPUSH
41263: LD_INT 3
41265: PPUSH
41266: CALL_OW 273
41270: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41271: LD_VAR 0 7
41275: PPUSH
41276: LD_VAR 0 8
41280: PPUSH
41281: CALL_OW 488
41285: NOT
41286: IFFALSE 41290
// continue ;
41288: GO 41222
// if HexInfo ( _x , _y ) = 0 then
41290: LD_VAR 0 7
41294: PPUSH
41295: LD_VAR 0 8
41299: PPUSH
41300: CALL_OW 428
41304: PUSH
41305: LD_INT 0
41307: EQUAL
41308: IFFALSE 41333
// begin ComMoveXY ( unit , _x , _y ) ;
41310: LD_VAR 0 1
41314: PPUSH
41315: LD_VAR 0 7
41319: PPUSH
41320: LD_VAR 0 8
41324: PPUSH
41325: CALL_OW 111
// exit ;
41329: POP
41330: POP
41331: GO 41337
// end ; end ;
41333: GO 41222
41335: POP
41336: POP
// end ;
41337: LD_VAR 0 3
41341: RET
// export function ScanBase ( side , base_area ) ; begin
41342: LD_INT 0
41344: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41345: LD_ADDR_VAR 0 3
41349: PUSH
41350: LD_VAR 0 2
41354: PPUSH
41355: LD_INT 81
41357: PUSH
41358: LD_VAR 0 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PPUSH
41367: CALL_OW 70
41371: ST_TO_ADDR
// end ;
41372: LD_VAR 0 3
41376: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41377: LD_INT 0
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
// result := false ;
41383: LD_ADDR_VAR 0 2
41387: PUSH
41388: LD_INT 0
41390: ST_TO_ADDR
// side := GetSide ( unit ) ;
41391: LD_ADDR_VAR 0 3
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 255
41405: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41406: LD_ADDR_VAR 0 4
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 248
41420: ST_TO_ADDR
// case nat of 1 :
41421: LD_VAR 0 4
41425: PUSH
41426: LD_INT 1
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41445
41434: POP
// tech := tech_lassight ; 2 :
41435: LD_ADDR_VAR 0 5
41439: PUSH
41440: LD_INT 12
41442: ST_TO_ADDR
41443: GO 41484
41445: LD_INT 2
41447: DOUBLE
41448: EQUAL
41449: IFTRUE 41453
41451: GO 41464
41453: POP
// tech := tech_mortar ; 3 :
41454: LD_ADDR_VAR 0 5
41458: PUSH
41459: LD_INT 41
41461: ST_TO_ADDR
41462: GO 41484
41464: LD_INT 3
41466: DOUBLE
41467: EQUAL
41468: IFTRUE 41472
41470: GO 41483
41472: POP
// tech := tech_bazooka ; end ;
41473: LD_ADDR_VAR 0 5
41477: PUSH
41478: LD_INT 44
41480: ST_TO_ADDR
41481: GO 41484
41483: POP
// if Researched ( side , tech ) then
41484: LD_VAR 0 3
41488: PPUSH
41489: LD_VAR 0 5
41493: PPUSH
41494: CALL_OW 325
41498: IFFALSE 41525
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41500: LD_ADDR_VAR 0 2
41504: PUSH
41505: LD_INT 5
41507: PUSH
41508: LD_INT 8
41510: PUSH
41511: LD_INT 9
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: PUSH
41519: LD_VAR 0 4
41523: ARRAY
41524: ST_TO_ADDR
// end ;
41525: LD_VAR 0 2
41529: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41530: LD_INT 0
41532: PPUSH
41533: PPUSH
41534: PPUSH
// if not mines then
41535: LD_VAR 0 2
41539: NOT
41540: IFFALSE 41544
// exit ;
41542: GO 41688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41544: LD_ADDR_VAR 0 5
41548: PUSH
41549: LD_INT 81
41551: PUSH
41552: LD_VAR 0 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 21
41566: PUSH
41567: LD_INT 3
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PPUSH
41582: CALL_OW 69
41586: ST_TO_ADDR
// for i in mines do
41587: LD_ADDR_VAR 0 4
41591: PUSH
41592: LD_VAR 0 2
41596: PUSH
41597: FOR_IN
41598: IFFALSE 41686
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41600: LD_VAR 0 4
41604: PUSH
41605: LD_INT 1
41607: ARRAY
41608: PPUSH
41609: LD_VAR 0 4
41613: PUSH
41614: LD_INT 2
41616: ARRAY
41617: PPUSH
41618: CALL_OW 458
41622: NOT
41623: IFFALSE 41627
// continue ;
41625: GO 41597
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41627: LD_VAR 0 4
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PPUSH
41636: LD_VAR 0 4
41640: PUSH
41641: LD_INT 2
41643: ARRAY
41644: PPUSH
41645: CALL_OW 428
41649: PUSH
41650: LD_VAR 0 5
41654: IN
41655: IFFALSE 41684
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41657: LD_VAR 0 4
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: PPUSH
41666: LD_VAR 0 4
41670: PUSH
41671: LD_INT 2
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 456
// end ;
41684: GO 41597
41686: POP
41687: POP
// end ;
41688: LD_VAR 0 3
41692: RET
// export function Count ( array ) ; var i ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
// result := 0 ;
41697: LD_ADDR_VAR 0 2
41701: PUSH
41702: LD_INT 0
41704: ST_TO_ADDR
// for i in array do
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 1
41714: PUSH
41715: FOR_IN
41716: IFFALSE 41740
// if i then
41718: LD_VAR 0 3
41722: IFFALSE 41738
// result := result + 1 ;
41724: LD_ADDR_VAR 0 2
41728: PUSH
41729: LD_VAR 0 2
41733: PUSH
41734: LD_INT 1
41736: PLUS
41737: ST_TO_ADDR
41738: GO 41715
41740: POP
41741: POP
// end ;
41742: LD_VAR 0 2
41746: RET
// export function IsEmpty ( building ) ; begin
41747: LD_INT 0
41749: PPUSH
// if not building then
41750: LD_VAR 0 1
41754: NOT
41755: IFFALSE 41759
// exit ;
41757: GO 41802
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41759: LD_ADDR_VAR 0 2
41763: PUSH
41764: LD_VAR 0 1
41768: PUSH
41769: LD_INT 22
41771: PUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL_OW 255
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 58
41788: PUSH
41789: EMPTY
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PPUSH
41796: CALL_OW 69
41800: IN
41801: ST_TO_ADDR
// end ;
41802: LD_VAR 0 2
41806: RET
// export function IsNotFull ( building ) ; var places ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
// if not building then
41811: LD_VAR 0 1
41815: NOT
41816: IFFALSE 41820
// exit ;
41818: GO 41991
// result := false ;
41820: LD_ADDR_VAR 0 2
41824: PUSH
41825: LD_INT 0
41827: ST_TO_ADDR
// places := 0 ;
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_INT 0
41835: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 266
41845: PUSH
41846: LD_INT 0
41848: DOUBLE
41849: EQUAL
41850: IFTRUE 41908
41852: LD_INT 1
41854: DOUBLE
41855: EQUAL
41856: IFTRUE 41908
41858: LD_INT 6
41860: DOUBLE
41861: EQUAL
41862: IFTRUE 41908
41864: LD_INT 7
41866: DOUBLE
41867: EQUAL
41868: IFTRUE 41908
41870: LD_INT 8
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41908
41876: LD_INT 4
41878: DOUBLE
41879: EQUAL
41880: IFTRUE 41908
41882: LD_INT 5
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41908
41888: LD_INT 2
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41908
41894: LD_INT 3
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41908
41900: LD_INT 35
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41919
41908: POP
// places := 6 ; b_bunker , b_breastwork :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 6
41916: ST_TO_ADDR
41917: GO 41964
41919: LD_INT 32
41921: DOUBLE
41922: EQUAL
41923: IFTRUE 41933
41925: LD_INT 31
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41944
41933: POP
// places := 1 ; b_control_tower :
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 1
41941: ST_TO_ADDR
41942: GO 41964
41944: LD_INT 36
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 41963
41952: POP
// places := 3 ; end ;
41953: LD_ADDR_VAR 0 3
41957: PUSH
41958: LD_INT 3
41960: ST_TO_ADDR
41961: GO 41964
41963: POP
// if places then
41964: LD_VAR 0 3
41968: IFFALSE 41991
// result := UnitsInside ( building ) < places ;
41970: LD_ADDR_VAR 0 2
41974: PUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 313
41984: PUSH
41985: LD_VAR 0 3
41989: LESS
41990: ST_TO_ADDR
// end ;
41991: LD_VAR 0 2
41995: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
// tmp := [ ] ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: EMPTY
42008: ST_TO_ADDR
// list := [ ] ;
42009: LD_ADDR_VAR 0 5
42013: PUSH
42014: EMPTY
42015: ST_TO_ADDR
// for i = 16 to 25 do
42016: LD_ADDR_VAR 0 4
42020: PUSH
42021: DOUBLE
42022: LD_INT 16
42024: DEC
42025: ST_TO_ADDR
42026: LD_INT 25
42028: PUSH
42029: FOR_TO
42030: IFFALSE 42103
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_VAR 0 3
42041: PUSH
42042: LD_INT 22
42044: PUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: CALL_OW 255
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 91
42061: PUSH
42062: LD_VAR 0 1
42066: PUSH
42067: LD_INT 6
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 30
42077: PUSH
42078: LD_VAR 0 4
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: PPUSH
42095: CALL_OW 69
42099: ADD
42100: ST_TO_ADDR
42101: GO 42029
42103: POP
42104: POP
// for i = 1 to tmp do
42105: LD_ADDR_VAR 0 4
42109: PUSH
42110: DOUBLE
42111: LD_INT 1
42113: DEC
42114: ST_TO_ADDR
42115: LD_VAR 0 3
42119: PUSH
42120: FOR_TO
42121: IFFALSE 42209
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_VAR 0 5
42132: PUSH
42133: LD_VAR 0 3
42137: PUSH
42138: LD_VAR 0 4
42142: ARRAY
42143: PPUSH
42144: CALL_OW 266
42148: PUSH
42149: LD_VAR 0 3
42153: PUSH
42154: LD_VAR 0 4
42158: ARRAY
42159: PPUSH
42160: CALL_OW 250
42164: PUSH
42165: LD_VAR 0 3
42169: PUSH
42170: LD_VAR 0 4
42174: ARRAY
42175: PPUSH
42176: CALL_OW 251
42180: PUSH
42181: LD_VAR 0 3
42185: PUSH
42186: LD_VAR 0 4
42190: ARRAY
42191: PPUSH
42192: CALL_OW 254
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: ADD
42206: ST_TO_ADDR
42207: GO 42120
42209: POP
42210: POP
// result := list ;
42211: LD_ADDR_VAR 0 2
42215: PUSH
42216: LD_VAR 0 5
42220: ST_TO_ADDR
// end ;
42221: LD_VAR 0 2
42225: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42226: LD_INT 0
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
// if not factory then
42235: LD_VAR 0 1
42239: NOT
42240: IFFALSE 42244
// exit ;
42242: GO 42837
// if control = control_apeman then
42244: LD_VAR 0 4
42248: PUSH
42249: LD_INT 5
42251: EQUAL
42252: IFFALSE 42361
// begin tmp := UnitsInside ( factory ) ;
42254: LD_ADDR_VAR 0 8
42258: PUSH
42259: LD_VAR 0 1
42263: PPUSH
42264: CALL_OW 313
42268: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42269: LD_VAR 0 8
42273: PPUSH
42274: LD_INT 25
42276: PUSH
42277: LD_INT 12
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PPUSH
42284: CALL_OW 72
42288: NOT
42289: IFFALSE 42299
// control := control_manual ;
42291: LD_ADDR_VAR 0 4
42295: PUSH
42296: LD_INT 1
42298: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42299: LD_ADDR_VAR 0 8
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL 41996 0 1
42313: ST_TO_ADDR
// if tmp then
42314: LD_VAR 0 8
42318: IFFALSE 42361
// begin for i in tmp do
42320: LD_ADDR_VAR 0 7
42324: PUSH
42325: LD_VAR 0 8
42329: PUSH
42330: FOR_IN
42331: IFFALSE 42359
// if i [ 1 ] = b_ext_radio then
42333: LD_VAR 0 7
42337: PUSH
42338: LD_INT 1
42340: ARRAY
42341: PUSH
42342: LD_INT 22
42344: EQUAL
42345: IFFALSE 42357
// begin control := control_remote ;
42347: LD_ADDR_VAR 0 4
42351: PUSH
42352: LD_INT 2
42354: ST_TO_ADDR
// break ;
42355: GO 42359
// end ;
42357: GO 42330
42359: POP
42360: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_VAR 0 2
42370: PPUSH
42371: LD_VAR 0 3
42375: PPUSH
42376: LD_VAR 0 4
42380: PPUSH
42381: LD_VAR 0 5
42385: PPUSH
42386: CALL_OW 448
42390: IFFALSE 42425
// begin result := [ chassis , engine , control , weapon ] ;
42392: LD_ADDR_VAR 0 6
42396: PUSH
42397: LD_VAR 0 2
42401: PUSH
42402: LD_VAR 0 3
42406: PUSH
42407: LD_VAR 0 4
42411: PUSH
42412: LD_VAR 0 5
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: ST_TO_ADDR
// exit ;
42423: GO 42837
// end ; _chassis := AvailableChassisList ( factory ) ;
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 475
42439: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42440: LD_ADDR_VAR 0 11
42444: PUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 476
42454: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42455: LD_ADDR_VAR 0 12
42459: PUSH
42460: LD_VAR 0 1
42464: PPUSH
42465: CALL_OW 477
42469: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42470: LD_ADDR_VAR 0 10
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 478
42484: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42485: LD_VAR 0 9
42489: NOT
42490: PUSH
42491: LD_VAR 0 11
42495: NOT
42496: OR
42497: PUSH
42498: LD_VAR 0 12
42502: NOT
42503: OR
42504: PUSH
42505: LD_VAR 0 10
42509: NOT
42510: OR
42511: IFFALSE 42546
// begin result := [ chassis , engine , control , weapon ] ;
42513: LD_ADDR_VAR 0 6
42517: PUSH
42518: LD_VAR 0 2
42522: PUSH
42523: LD_VAR 0 3
42527: PUSH
42528: LD_VAR 0 4
42532: PUSH
42533: LD_VAR 0 5
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
// exit ;
42544: GO 42837
// end ; if not chassis in _chassis then
42546: LD_VAR 0 2
42550: PUSH
42551: LD_VAR 0 9
42555: IN
42556: NOT
42557: IFFALSE 42583
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42559: LD_ADDR_VAR 0 2
42563: PUSH
42564: LD_VAR 0 9
42568: PUSH
42569: LD_INT 1
42571: PPUSH
42572: LD_VAR 0 9
42576: PPUSH
42577: CALL_OW 12
42581: ARRAY
42582: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42583: LD_VAR 0 2
42587: PPUSH
42588: LD_VAR 0 3
42592: PPUSH
42593: CALL 42842 0 2
42597: NOT
42598: IFFALSE 42657
// repeat engine := _engine [ 1 ] ;
42600: LD_ADDR_VAR 0 3
42604: PUSH
42605: LD_VAR 0 11
42609: PUSH
42610: LD_INT 1
42612: ARRAY
42613: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42614: LD_ADDR_VAR 0 11
42618: PUSH
42619: LD_VAR 0 11
42623: PPUSH
42624: LD_INT 1
42626: PPUSH
42627: CALL_OW 3
42631: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42632: LD_VAR 0 2
42636: PPUSH
42637: LD_VAR 0 3
42641: PPUSH
42642: CALL 42842 0 2
42646: PUSH
42647: LD_VAR 0 11
42651: PUSH
42652: EMPTY
42653: EQUAL
42654: OR
42655: IFFALSE 42600
// if not control in _control then
42657: LD_VAR 0 4
42661: PUSH
42662: LD_VAR 0 12
42666: IN
42667: NOT
42668: IFFALSE 42694
// control := _control [ rand ( 1 , _control ) ] ;
42670: LD_ADDR_VAR 0 4
42674: PUSH
42675: LD_VAR 0 12
42679: PUSH
42680: LD_INT 1
42682: PPUSH
42683: LD_VAR 0 12
42687: PPUSH
42688: CALL_OW 12
42692: ARRAY
42693: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42694: LD_VAR 0 2
42698: PPUSH
42699: LD_VAR 0 5
42703: PPUSH
42704: CALL 43062 0 2
42708: NOT
42709: IFFALSE 42768
// repeat weapon := _weapon [ 1 ] ;
42711: LD_ADDR_VAR 0 5
42715: PUSH
42716: LD_VAR 0 10
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42725: LD_ADDR_VAR 0 10
42729: PUSH
42730: LD_VAR 0 10
42734: PPUSH
42735: LD_INT 1
42737: PPUSH
42738: CALL_OW 3
42742: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42743: LD_VAR 0 2
42747: PPUSH
42748: LD_VAR 0 5
42752: PPUSH
42753: CALL 43062 0 2
42757: PUSH
42758: LD_VAR 0 10
42762: PUSH
42763: EMPTY
42764: EQUAL
42765: OR
42766: IFFALSE 42711
// result := [ ] ;
42768: LD_ADDR_VAR 0 6
42772: PUSH
42773: EMPTY
42774: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_VAR 0 2
42784: PPUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: LD_VAR 0 5
42799: PPUSH
42800: CALL_OW 448
42804: IFFALSE 42837
// result := [ chassis , engine , control , weapon ] ;
42806: LD_ADDR_VAR 0 6
42810: PUSH
42811: LD_VAR 0 2
42815: PUSH
42816: LD_VAR 0 3
42820: PUSH
42821: LD_VAR 0 4
42825: PUSH
42826: LD_VAR 0 5
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// end ;
42837: LD_VAR 0 6
42841: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42842: LD_INT 0
42844: PPUSH
// if not chassis or not engine then
42845: LD_VAR 0 1
42849: NOT
42850: PUSH
42851: LD_VAR 0 2
42855: NOT
42856: OR
42857: IFFALSE 42861
// exit ;
42859: GO 43057
// case engine of engine_solar :
42861: LD_VAR 0 2
42865: PUSH
42866: LD_INT 2
42868: DOUBLE
42869: EQUAL
42870: IFTRUE 42874
42872: GO 42912
42874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42875: LD_ADDR_VAR 0 3
42879: PUSH
42880: LD_INT 11
42882: PUSH
42883: LD_INT 12
42885: PUSH
42886: LD_INT 13
42888: PUSH
42889: LD_INT 14
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
42910: GO 43041
42912: LD_INT 1
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42920
42918: GO 42982
42920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_INT 11
42928: PUSH
42929: LD_INT 12
42931: PUSH
42932: LD_INT 13
42934: PUSH
42935: LD_INT 14
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 4
42949: PUSH
42950: LD_INT 5
42952: PUSH
42953: LD_INT 21
42955: PUSH
42956: LD_INT 23
42958: PUSH
42959: LD_INT 22
42961: PUSH
42962: LD_INT 24
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
42980: GO 43041
42982: LD_INT 3
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43040
42990: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 13
42998: PUSH
42999: LD_INT 14
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: LD_INT 4
43010: PUSH
43011: LD_INT 5
43013: PUSH
43014: LD_INT 21
43016: PUSH
43017: LD_INT 22
43019: PUSH
43020: LD_INT 23
43022: PUSH
43023: LD_INT 24
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
43038: GO 43041
43040: POP
// result := ( chassis in result ) ;
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_VAR 0 1
43050: PUSH
43051: LD_VAR 0 3
43055: IN
43056: ST_TO_ADDR
// end ;
43057: LD_VAR 0 3
43061: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43062: LD_INT 0
43064: PPUSH
// if not chassis or not weapon then
43065: LD_VAR 0 1
43069: NOT
43070: PUSH
43071: LD_VAR 0 2
43075: NOT
43076: OR
43077: IFFALSE 43081
// exit ;
43079: GO 44141
// case weapon of us_machine_gun :
43081: LD_VAR 0 2
43085: PUSH
43086: LD_INT 2
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43094
43092: GO 43124
43094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43095: LD_ADDR_VAR 0 3
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: ST_TO_ADDR
43122: GO 44125
43124: LD_INT 3
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43162
43132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43133: LD_ADDR_VAR 0 3
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: LD_INT 5
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 44125
43162: LD_INT 11
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43200
43170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: LD_INT 4
43187: PUSH
43188: LD_INT 5
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
43198: GO 44125
43200: LD_INT 4
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43234
43208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 4
43222: PUSH
43223: LD_INT 5
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
43232: GO 44125
43234: LD_INT 5
43236: DOUBLE
43237: EQUAL
43238: IFTRUE 43242
43240: GO 43268
43242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 4
43256: PUSH
43257: LD_INT 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
43266: GO 44125
43268: LD_INT 9
43270: DOUBLE
43271: EQUAL
43272: IFTRUE 43276
43274: GO 43302
43276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: LD_INT 4
43290: PUSH
43291: LD_INT 5
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
43300: GO 44125
43302: LD_INT 7
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43336
43310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: LD_INT 5
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
43334: GO 44125
43336: LD_INT 12
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43370
43344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: LD_INT 4
43358: PUSH
43359: LD_INT 5
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
43368: GO 44125
43370: LD_INT 13
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43404
43378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: LD_INT 4
43392: PUSH
43393: LD_INT 5
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
43402: GO 44125
43404: LD_INT 14
43406: DOUBLE
43407: EQUAL
43408: IFTRUE 43412
43410: GO 43430
43412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_INT 4
43420: PUSH
43421: LD_INT 5
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: ST_TO_ADDR
43428: GO 44125
43430: LD_INT 6
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43456
43438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: LD_INT 4
43446: PUSH
43447: LD_INT 5
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: ST_TO_ADDR
43454: GO 44125
43456: LD_INT 10
43458: DOUBLE
43459: EQUAL
43460: IFTRUE 43464
43462: GO 43482
43464: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_INT 4
43472: PUSH
43473: LD_INT 5
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 44125
43482: LD_INT 22
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 11
43498: PUSH
43499: LD_INT 12
43501: PUSH
43502: LD_INT 13
43504: PUSH
43505: LD_INT 14
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 44125
43516: LD_INT 23
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 11
43532: PUSH
43533: LD_INT 12
43535: PUSH
43536: LD_INT 13
43538: PUSH
43539: LD_INT 14
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44125
43550: LD_INT 24
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43584
43558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 11
43566: PUSH
43567: LD_INT 12
43569: PUSH
43570: LD_INT 13
43572: PUSH
43573: LD_INT 14
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 44125
43584: LD_INT 30
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43618
43592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 11
43600: PUSH
43601: LD_INT 12
43603: PUSH
43604: LD_INT 13
43606: PUSH
43607: LD_INT 14
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 44125
43618: LD_INT 25
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43644
43626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 13
43634: PUSH
43635: LD_INT 14
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 44125
43644: LD_INT 27
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43670
43652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_INT 13
43660: PUSH
43661: LD_INT 14
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: ST_TO_ADDR
43668: GO 44125
43670: LD_INT 92
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43704
43678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 11
43686: PUSH
43687: LD_INT 12
43689: PUSH
43690: LD_INT 13
43692: PUSH
43693: LD_INT 14
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
43702: GO 44125
43704: LD_INT 28
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 43730
43712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43713: LD_ADDR_VAR 0 3
43717: PUSH
43718: LD_INT 13
43720: PUSH
43721: LD_INT 14
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44125
43730: LD_INT 29
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43756
43738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 13
43746: PUSH
43747: LD_INT 14
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: ST_TO_ADDR
43754: GO 44125
43756: LD_INT 31
43758: DOUBLE
43759: EQUAL
43760: IFTRUE 43764
43762: GO 43782
43764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43765: LD_ADDR_VAR 0 3
43769: PUSH
43770: LD_INT 13
43772: PUSH
43773: LD_INT 14
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: ST_TO_ADDR
43780: GO 44125
43782: LD_INT 26
43784: DOUBLE
43785: EQUAL
43786: IFTRUE 43790
43788: GO 43808
43790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43791: LD_ADDR_VAR 0 3
43795: PUSH
43796: LD_INT 13
43798: PUSH
43799: LD_INT 14
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: ST_TO_ADDR
43806: GO 44125
43808: LD_INT 42
43810: DOUBLE
43811: EQUAL
43812: IFTRUE 43816
43814: GO 43842
43816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_INT 21
43824: PUSH
43825: LD_INT 22
43827: PUSH
43828: LD_INT 23
43830: PUSH
43831: LD_INT 24
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
43840: GO 44125
43842: LD_INT 43
43844: DOUBLE
43845: EQUAL
43846: IFTRUE 43850
43848: GO 43876
43850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_INT 21
43858: PUSH
43859: LD_INT 22
43861: PUSH
43862: LD_INT 23
43864: PUSH
43865: LD_INT 24
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
43874: GO 44125
43876: LD_INT 44
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43910
43884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 21
43892: PUSH
43893: LD_INT 22
43895: PUSH
43896: LD_INT 23
43898: PUSH
43899: LD_INT 24
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
43908: GO 44125
43910: LD_INT 45
43912: DOUBLE
43913: EQUAL
43914: IFTRUE 43918
43916: GO 43944
43918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43919: LD_ADDR_VAR 0 3
43923: PUSH
43924: LD_INT 21
43926: PUSH
43927: LD_INT 22
43929: PUSH
43930: LD_INT 23
43932: PUSH
43933: LD_INT 24
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
43942: GO 44125
43944: LD_INT 49
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 43978
43952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 21
43960: PUSH
43961: LD_INT 22
43963: PUSH
43964: LD_INT 23
43966: PUSH
43967: LD_INT 24
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
43976: GO 44125
43978: LD_INT 51
43980: DOUBLE
43981: EQUAL
43982: IFTRUE 43986
43984: GO 44012
43986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43987: LD_ADDR_VAR 0 3
43991: PUSH
43992: LD_INT 21
43994: PUSH
43995: LD_INT 22
43997: PUSH
43998: LD_INT 23
44000: PUSH
44001: LD_INT 24
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
44010: GO 44125
44012: LD_INT 52
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44020
44018: GO 44046
44020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 21
44028: PUSH
44029: LD_INT 22
44031: PUSH
44032: LD_INT 23
44034: PUSH
44035: LD_INT 24
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
44044: GO 44125
44046: LD_INT 53
44048: DOUBLE
44049: EQUAL
44050: IFTRUE 44054
44052: GO 44072
44054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: LD_INT 23
44062: PUSH
44063: LD_INT 24
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: ST_TO_ADDR
44070: GO 44125
44072: LD_INT 46
44074: DOUBLE
44075: EQUAL
44076: IFTRUE 44080
44078: GO 44098
44080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44081: LD_ADDR_VAR 0 3
44085: PUSH
44086: LD_INT 23
44088: PUSH
44089: LD_INT 24
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: ST_TO_ADDR
44096: GO 44125
44098: LD_INT 47
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44124
44106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 23
44114: PUSH
44115: LD_INT 24
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: ST_TO_ADDR
44122: GO 44125
44124: POP
// result := ( chassis in result ) ;
44125: LD_ADDR_VAR 0 3
44129: PUSH
44130: LD_VAR 0 1
44134: PUSH
44135: LD_VAR 0 3
44139: IN
44140: ST_TO_ADDR
// end ;
44141: LD_VAR 0 3
44145: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44146: LD_INT 0
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
// result := array ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: LD_VAR 0 1
44164: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44165: LD_VAR 0 1
44169: NOT
44170: PUSH
44171: LD_VAR 0 2
44175: NOT
44176: OR
44177: PUSH
44178: LD_VAR 0 3
44182: NOT
44183: OR
44184: PUSH
44185: LD_VAR 0 2
44189: PUSH
44190: LD_VAR 0 1
44194: GREATER
44195: OR
44196: PUSH
44197: LD_VAR 0 3
44201: PUSH
44202: LD_VAR 0 1
44206: GREATER
44207: OR
44208: IFFALSE 44212
// exit ;
44210: GO 44508
// if direction then
44212: LD_VAR 0 4
44216: IFFALSE 44280
// begin d := 1 ;
44218: LD_ADDR_VAR 0 9
44222: PUSH
44223: LD_INT 1
44225: ST_TO_ADDR
// if i_from > i_to then
44226: LD_VAR 0 2
44230: PUSH
44231: LD_VAR 0 3
44235: GREATER
44236: IFFALSE 44262
// length := ( array - i_from ) + i_to else
44238: LD_ADDR_VAR 0 11
44242: PUSH
44243: LD_VAR 0 1
44247: PUSH
44248: LD_VAR 0 2
44252: MINUS
44253: PUSH
44254: LD_VAR 0 3
44258: PLUS
44259: ST_TO_ADDR
44260: GO 44278
// length := i_to - i_from ;
44262: LD_ADDR_VAR 0 11
44266: PUSH
44267: LD_VAR 0 3
44271: PUSH
44272: LD_VAR 0 2
44276: MINUS
44277: ST_TO_ADDR
// end else
44278: GO 44341
// begin d := - 1 ;
44280: LD_ADDR_VAR 0 9
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: ST_TO_ADDR
// if i_from > i_to then
44289: LD_VAR 0 2
44293: PUSH
44294: LD_VAR 0 3
44298: GREATER
44299: IFFALSE 44319
// length := i_from - i_to else
44301: LD_ADDR_VAR 0 11
44305: PUSH
44306: LD_VAR 0 2
44310: PUSH
44311: LD_VAR 0 3
44315: MINUS
44316: ST_TO_ADDR
44317: GO 44341
// length := ( array - i_to ) + i_from ;
44319: LD_ADDR_VAR 0 11
44323: PUSH
44324: LD_VAR 0 1
44328: PUSH
44329: LD_VAR 0 3
44333: MINUS
44334: PUSH
44335: LD_VAR 0 2
44339: PLUS
44340: ST_TO_ADDR
// end ; if not length then
44341: LD_VAR 0 11
44345: NOT
44346: IFFALSE 44350
// exit ;
44348: GO 44508
// tmp := array ;
44350: LD_ADDR_VAR 0 10
44354: PUSH
44355: LD_VAR 0 1
44359: ST_TO_ADDR
// for i = 1 to length do
44360: LD_ADDR_VAR 0 6
44364: PUSH
44365: DOUBLE
44366: LD_INT 1
44368: DEC
44369: ST_TO_ADDR
44370: LD_VAR 0 11
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44496
// begin for j = 1 to array do
44378: LD_ADDR_VAR 0 7
44382: PUSH
44383: DOUBLE
44384: LD_INT 1
44386: DEC
44387: ST_TO_ADDR
44388: LD_VAR 0 1
44392: PUSH
44393: FOR_TO
44394: IFFALSE 44482
// begin k := j + d ;
44396: LD_ADDR_VAR 0 8
44400: PUSH
44401: LD_VAR 0 7
44405: PUSH
44406: LD_VAR 0 9
44410: PLUS
44411: ST_TO_ADDR
// if k > array then
44412: LD_VAR 0 8
44416: PUSH
44417: LD_VAR 0 1
44421: GREATER
44422: IFFALSE 44432
// k := 1 ;
44424: LD_ADDR_VAR 0 8
44428: PUSH
44429: LD_INT 1
44431: ST_TO_ADDR
// if not k then
44432: LD_VAR 0 8
44436: NOT
44437: IFFALSE 44449
// k := array ;
44439: LD_ADDR_VAR 0 8
44443: PUSH
44444: LD_VAR 0 1
44448: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44449: LD_ADDR_VAR 0 10
44453: PUSH
44454: LD_VAR 0 10
44458: PPUSH
44459: LD_VAR 0 8
44463: PPUSH
44464: LD_VAR 0 1
44468: PUSH
44469: LD_VAR 0 7
44473: ARRAY
44474: PPUSH
44475: CALL_OW 1
44479: ST_TO_ADDR
// end ;
44480: GO 44393
44482: POP
44483: POP
// array := tmp ;
44484: LD_ADDR_VAR 0 1
44488: PUSH
44489: LD_VAR 0 10
44493: ST_TO_ADDR
// end ;
44494: GO 44375
44496: POP
44497: POP
// result := array ;
44498: LD_ADDR_VAR 0 5
44502: PUSH
44503: LD_VAR 0 1
44507: ST_TO_ADDR
// end ;
44508: LD_VAR 0 5
44512: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44513: LD_INT 0
44515: PPUSH
44516: PPUSH
// result := 0 ;
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_INT 0
44524: ST_TO_ADDR
// if not array or not value in array then
44525: LD_VAR 0 1
44529: NOT
44530: PUSH
44531: LD_VAR 0 2
44535: PUSH
44536: LD_VAR 0 1
44540: IN
44541: NOT
44542: OR
44543: IFFALSE 44547
// exit ;
44545: GO 44601
// for i = 1 to array do
44547: LD_ADDR_VAR 0 4
44551: PUSH
44552: DOUBLE
44553: LD_INT 1
44555: DEC
44556: ST_TO_ADDR
44557: LD_VAR 0 1
44561: PUSH
44562: FOR_TO
44563: IFFALSE 44599
// if value = array [ i ] then
44565: LD_VAR 0 2
44569: PUSH
44570: LD_VAR 0 1
44574: PUSH
44575: LD_VAR 0 4
44579: ARRAY
44580: EQUAL
44581: IFFALSE 44597
// begin result := i ;
44583: LD_ADDR_VAR 0 3
44587: PUSH
44588: LD_VAR 0 4
44592: ST_TO_ADDR
// exit ;
44593: POP
44594: POP
44595: GO 44601
// end ;
44597: GO 44562
44599: POP
44600: POP
// end ;
44601: LD_VAR 0 3
44605: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44606: LD_INT 0
44608: PPUSH
// vc_chassis := chassis ;
44609: LD_ADDR_OWVAR 37
44613: PUSH
44614: LD_VAR 0 1
44618: ST_TO_ADDR
// vc_engine := engine ;
44619: LD_ADDR_OWVAR 39
44623: PUSH
44624: LD_VAR 0 2
44628: ST_TO_ADDR
// vc_control := control ;
44629: LD_ADDR_OWVAR 38
44633: PUSH
44634: LD_VAR 0 3
44638: ST_TO_ADDR
// vc_weapon := weapon ;
44639: LD_ADDR_OWVAR 40
44643: PUSH
44644: LD_VAR 0 4
44648: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44649: LD_ADDR_OWVAR 41
44653: PUSH
44654: LD_VAR 0 5
44658: ST_TO_ADDR
// end ;
44659: LD_VAR 0 6
44663: RET
// export function WantPlant ( unit ) ; var task ; begin
44664: LD_INT 0
44666: PPUSH
44667: PPUSH
// result := false ;
44668: LD_ADDR_VAR 0 2
44672: PUSH
44673: LD_INT 0
44675: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44676: LD_ADDR_VAR 0 3
44680: PUSH
44681: LD_VAR 0 1
44685: PPUSH
44686: CALL_OW 437
44690: ST_TO_ADDR
// if task then
44691: LD_VAR 0 3
44695: IFFALSE 44723
// if task [ 1 ] [ 1 ] = p then
44697: LD_VAR 0 3
44701: PUSH
44702: LD_INT 1
44704: ARRAY
44705: PUSH
44706: LD_INT 1
44708: ARRAY
44709: PUSH
44710: LD_STRING p
44712: EQUAL
44713: IFFALSE 44723
// result := true ;
44715: LD_ADDR_VAR 0 2
44719: PUSH
44720: LD_INT 1
44722: ST_TO_ADDR
// end ;
44723: LD_VAR 0 2
44727: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44728: LD_INT 0
44730: PPUSH
44731: PPUSH
44732: PPUSH
44733: PPUSH
// if pos < 1 then
44734: LD_VAR 0 2
44738: PUSH
44739: LD_INT 1
44741: LESS
44742: IFFALSE 44746
// exit ;
44744: GO 45049
// if pos = 1 then
44746: LD_VAR 0 2
44750: PUSH
44751: LD_INT 1
44753: EQUAL
44754: IFFALSE 44787
// result := Replace ( arr , pos [ 1 ] , value ) else
44756: LD_ADDR_VAR 0 4
44760: PUSH
44761: LD_VAR 0 1
44765: PPUSH
44766: LD_VAR 0 2
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: PPUSH
44775: LD_VAR 0 3
44779: PPUSH
44780: CALL_OW 1
44784: ST_TO_ADDR
44785: GO 45049
// begin tmp := arr ;
44787: LD_ADDR_VAR 0 6
44791: PUSH
44792: LD_VAR 0 1
44796: ST_TO_ADDR
// s_arr := [ tmp ] ;
44797: LD_ADDR_VAR 0 7
44801: PUSH
44802: LD_VAR 0 6
44806: PUSH
44807: EMPTY
44808: LIST
44809: ST_TO_ADDR
// for i = 1 to pos - 1 do
44810: LD_ADDR_VAR 0 5
44814: PUSH
44815: DOUBLE
44816: LD_INT 1
44818: DEC
44819: ST_TO_ADDR
44820: LD_VAR 0 2
44824: PUSH
44825: LD_INT 1
44827: MINUS
44828: PUSH
44829: FOR_TO
44830: IFFALSE 44875
// begin tmp := tmp [ pos [ i ] ] ;
44832: LD_ADDR_VAR 0 6
44836: PUSH
44837: LD_VAR 0 6
44841: PUSH
44842: LD_VAR 0 2
44846: PUSH
44847: LD_VAR 0 5
44851: ARRAY
44852: ARRAY
44853: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44854: LD_ADDR_VAR 0 7
44858: PUSH
44859: LD_VAR 0 7
44863: PUSH
44864: LD_VAR 0 6
44868: PUSH
44869: EMPTY
44870: LIST
44871: ADD
44872: ST_TO_ADDR
// end ;
44873: GO 44829
44875: POP
44876: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44877: LD_ADDR_VAR 0 6
44881: PUSH
44882: LD_VAR 0 6
44886: PPUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_VAR 0 2
44896: ARRAY
44897: PPUSH
44898: LD_VAR 0 3
44902: PPUSH
44903: CALL_OW 1
44907: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44908: LD_ADDR_VAR 0 7
44912: PUSH
44913: LD_VAR 0 7
44917: PPUSH
44918: LD_VAR 0 7
44922: PPUSH
44923: LD_VAR 0 6
44927: PPUSH
44928: CALL_OW 1
44932: ST_TO_ADDR
// for i = s_arr downto 2 do
44933: LD_ADDR_VAR 0 5
44937: PUSH
44938: DOUBLE
44939: LD_VAR 0 7
44943: INC
44944: ST_TO_ADDR
44945: LD_INT 2
44947: PUSH
44948: FOR_DOWNTO
44949: IFFALSE 45033
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44951: LD_ADDR_VAR 0 6
44955: PUSH
44956: LD_VAR 0 7
44960: PUSH
44961: LD_VAR 0 5
44965: PUSH
44966: LD_INT 1
44968: MINUS
44969: ARRAY
44970: PPUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_VAR 0 5
44980: PUSH
44981: LD_INT 1
44983: MINUS
44984: ARRAY
44985: PPUSH
44986: LD_VAR 0 7
44990: PUSH
44991: LD_VAR 0 5
44995: ARRAY
44996: PPUSH
44997: CALL_OW 1
45001: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45002: LD_ADDR_VAR 0 7
45006: PUSH
45007: LD_VAR 0 7
45011: PPUSH
45012: LD_VAR 0 5
45016: PUSH
45017: LD_INT 1
45019: MINUS
45020: PPUSH
45021: LD_VAR 0 6
45025: PPUSH
45026: CALL_OW 1
45030: ST_TO_ADDR
// end ;
45031: GO 44948
45033: POP
45034: POP
// result := s_arr [ 1 ] ;
45035: LD_ADDR_VAR 0 4
45039: PUSH
45040: LD_VAR 0 7
45044: PUSH
45045: LD_INT 1
45047: ARRAY
45048: ST_TO_ADDR
// end ; end ;
45049: LD_VAR 0 4
45053: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45054: LD_INT 0
45056: PPUSH
45057: PPUSH
// if not list then
45058: LD_VAR 0 1
45062: NOT
45063: IFFALSE 45067
// exit ;
45065: GO 45158
// i := list [ pos1 ] ;
45067: LD_ADDR_VAR 0 5
45071: PUSH
45072: LD_VAR 0 1
45076: PUSH
45077: LD_VAR 0 2
45081: ARRAY
45082: ST_TO_ADDR
// if not i then
45083: LD_VAR 0 5
45087: NOT
45088: IFFALSE 45092
// exit ;
45090: GO 45158
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45092: LD_ADDR_VAR 0 1
45096: PUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: LD_VAR 0 2
45106: PPUSH
45107: LD_VAR 0 1
45111: PUSH
45112: LD_VAR 0 3
45116: ARRAY
45117: PPUSH
45118: CALL_OW 1
45122: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45123: LD_ADDR_VAR 0 1
45127: PUSH
45128: LD_VAR 0 1
45132: PPUSH
45133: LD_VAR 0 3
45137: PPUSH
45138: LD_VAR 0 5
45142: PPUSH
45143: CALL_OW 1
45147: ST_TO_ADDR
// result := list ;
45148: LD_ADDR_VAR 0 4
45152: PUSH
45153: LD_VAR 0 1
45157: ST_TO_ADDR
// end ;
45158: LD_VAR 0 4
45162: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45163: LD_INT 0
45165: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45166: LD_ADDR_VAR 0 5
45170: PUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 250
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 251
45190: PPUSH
45191: LD_VAR 0 2
45195: PPUSH
45196: LD_VAR 0 3
45200: PPUSH
45201: LD_VAR 0 4
45205: PPUSH
45206: CALL 45216 0 5
45210: ST_TO_ADDR
// end ;
45211: LD_VAR 0 5
45215: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45216: LD_INT 0
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
// if not list then
45222: LD_VAR 0 3
45226: NOT
45227: IFFALSE 45231
// exit ;
45229: GO 45619
// result := [ ] ;
45231: LD_ADDR_VAR 0 6
45235: PUSH
45236: EMPTY
45237: ST_TO_ADDR
// for i in list do
45238: LD_ADDR_VAR 0 7
45242: PUSH
45243: LD_VAR 0 3
45247: PUSH
45248: FOR_IN
45249: IFFALSE 45451
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45251: LD_ADDR_VAR 0 9
45255: PUSH
45256: LD_VAR 0 7
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_VAR 0 2
45270: PPUSH
45271: CALL_OW 297
45275: ST_TO_ADDR
// if not result then
45276: LD_VAR 0 6
45280: NOT
45281: IFFALSE 45307
// result := [ [ i , tmp ] ] else
45283: LD_ADDR_VAR 0 6
45287: PUSH
45288: LD_VAR 0 7
45292: PUSH
45293: LD_VAR 0 9
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: ST_TO_ADDR
45305: GO 45449
// begin if result [ result ] [ 2 ] < tmp then
45307: LD_VAR 0 6
45311: PUSH
45312: LD_VAR 0 6
45316: ARRAY
45317: PUSH
45318: LD_INT 2
45320: ARRAY
45321: PUSH
45322: LD_VAR 0 9
45326: LESS
45327: IFFALSE 45369
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45329: LD_ADDR_VAR 0 6
45333: PUSH
45334: LD_VAR 0 6
45338: PPUSH
45339: LD_VAR 0 6
45343: PUSH
45344: LD_INT 1
45346: PLUS
45347: PPUSH
45348: LD_VAR 0 7
45352: PUSH
45353: LD_VAR 0 9
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PPUSH
45362: CALL_OW 2
45366: ST_TO_ADDR
45367: GO 45449
// for j = 1 to result do
45369: LD_ADDR_VAR 0 8
45373: PUSH
45374: DOUBLE
45375: LD_INT 1
45377: DEC
45378: ST_TO_ADDR
45379: LD_VAR 0 6
45383: PUSH
45384: FOR_TO
45385: IFFALSE 45447
// begin if tmp < result [ j ] [ 2 ] then
45387: LD_VAR 0 9
45391: PUSH
45392: LD_VAR 0 6
45396: PUSH
45397: LD_VAR 0 8
45401: ARRAY
45402: PUSH
45403: LD_INT 2
45405: ARRAY
45406: LESS
45407: IFFALSE 45445
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45409: LD_ADDR_VAR 0 6
45413: PUSH
45414: LD_VAR 0 6
45418: PPUSH
45419: LD_VAR 0 8
45423: PPUSH
45424: LD_VAR 0 7
45428: PUSH
45429: LD_VAR 0 9
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PPUSH
45438: CALL_OW 2
45442: ST_TO_ADDR
// break ;
45443: GO 45447
// end ; end ;
45445: GO 45384
45447: POP
45448: POP
// end ; end ;
45449: GO 45248
45451: POP
45452: POP
// if result and not asc then
45453: LD_VAR 0 6
45457: PUSH
45458: LD_VAR 0 4
45462: NOT
45463: AND
45464: IFFALSE 45539
// begin tmp := result ;
45466: LD_ADDR_VAR 0 9
45470: PUSH
45471: LD_VAR 0 6
45475: ST_TO_ADDR
// for i = tmp downto 1 do
45476: LD_ADDR_VAR 0 7
45480: PUSH
45481: DOUBLE
45482: LD_VAR 0 9
45486: INC
45487: ST_TO_ADDR
45488: LD_INT 1
45490: PUSH
45491: FOR_DOWNTO
45492: IFFALSE 45537
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45494: LD_ADDR_VAR 0 6
45498: PUSH
45499: LD_VAR 0 6
45503: PPUSH
45504: LD_VAR 0 9
45508: PUSH
45509: LD_VAR 0 7
45513: MINUS
45514: PUSH
45515: LD_INT 1
45517: PLUS
45518: PPUSH
45519: LD_VAR 0 9
45523: PUSH
45524: LD_VAR 0 7
45528: ARRAY
45529: PPUSH
45530: CALL_OW 1
45534: ST_TO_ADDR
45535: GO 45491
45537: POP
45538: POP
// end ; tmp := [ ] ;
45539: LD_ADDR_VAR 0 9
45543: PUSH
45544: EMPTY
45545: ST_TO_ADDR
// if mode then
45546: LD_VAR 0 5
45550: IFFALSE 45619
// begin for i = 1 to result do
45552: LD_ADDR_VAR 0 7
45556: PUSH
45557: DOUBLE
45558: LD_INT 1
45560: DEC
45561: ST_TO_ADDR
45562: LD_VAR 0 6
45566: PUSH
45567: FOR_TO
45568: IFFALSE 45607
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_VAR 0 9
45579: PPUSH
45580: LD_VAR 0 7
45584: PPUSH
45585: LD_VAR 0 6
45589: PUSH
45590: LD_VAR 0 7
45594: ARRAY
45595: PUSH
45596: LD_INT 1
45598: ARRAY
45599: PPUSH
45600: CALL_OW 1
45604: ST_TO_ADDR
45605: GO 45567
45607: POP
45608: POP
// result := tmp ;
45609: LD_ADDR_VAR 0 6
45613: PUSH
45614: LD_VAR 0 9
45618: ST_TO_ADDR
// end ; end ;
45619: LD_VAR 0 6
45623: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45624: LD_INT 0
45626: PPUSH
45627: PPUSH
45628: PPUSH
45629: PPUSH
45630: PPUSH
45631: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45632: LD_ADDR_VAR 0 5
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
// if not x or not y then
45654: LD_VAR 0 2
45658: NOT
45659: PUSH
45660: LD_VAR 0 3
45664: NOT
45665: OR
45666: IFFALSE 45670
// exit ;
45668: GO 47320
// if not range then
45670: LD_VAR 0 4
45674: NOT
45675: IFFALSE 45685
// range := 10 ;
45677: LD_ADDR_VAR 0 4
45681: PUSH
45682: LD_INT 10
45684: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45685: LD_ADDR_VAR 0 8
45689: PUSH
45690: LD_INT 81
45692: PUSH
45693: LD_VAR 0 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 92
45704: PUSH
45705: LD_VAR 0 2
45709: PUSH
45710: LD_VAR 0 3
45714: PUSH
45715: LD_VAR 0 4
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 21
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: PPUSH
45748: CALL_OW 69
45752: ST_TO_ADDR
// if not tmp then
45753: LD_VAR 0 8
45757: NOT
45758: IFFALSE 45762
// exit ;
45760: GO 47320
// for i in tmp do
45762: LD_ADDR_VAR 0 6
45766: PUSH
45767: LD_VAR 0 8
45771: PUSH
45772: FOR_IN
45773: IFFALSE 47295
// begin points := [ 0 , 0 , 0 ] ;
45775: LD_ADDR_VAR 0 9
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// bpoints := 1 ;
45794: LD_ADDR_VAR 0 10
45798: PUSH
45799: LD_INT 1
45801: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45802: LD_VAR 0 6
45806: PPUSH
45807: CALL_OW 247
45811: PUSH
45812: LD_INT 1
45814: DOUBLE
45815: EQUAL
45816: IFTRUE 45820
45818: GO 46398
45820: POP
// begin if GetClass ( i ) = 1 then
45821: LD_VAR 0 6
45825: PPUSH
45826: CALL_OW 257
45830: PUSH
45831: LD_INT 1
45833: EQUAL
45834: IFFALSE 45855
// points := [ 10 , 5 , 3 ] ;
45836: LD_ADDR_VAR 0 9
45840: PUSH
45841: LD_INT 10
45843: PUSH
45844: LD_INT 5
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45855: LD_VAR 0 6
45859: PPUSH
45860: CALL_OW 257
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: LD_INT 4
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: IN
45879: IFFALSE 45900
// points := [ 3 , 2 , 1 ] ;
45881: LD_ADDR_VAR 0 9
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 257
45909: PUSH
45910: LD_INT 5
45912: EQUAL
45913: IFFALSE 45934
// points := [ 130 , 5 , 2 ] ;
45915: LD_ADDR_VAR 0 9
45919: PUSH
45920: LD_INT 130
45922: PUSH
45923: LD_INT 5
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45934: LD_VAR 0 6
45938: PPUSH
45939: CALL_OW 257
45943: PUSH
45944: LD_INT 8
45946: EQUAL
45947: IFFALSE 45968
// points := [ 35 , 35 , 30 ] ;
45949: LD_ADDR_VAR 0 9
45953: PUSH
45954: LD_INT 35
45956: PUSH
45957: LD_INT 35
45959: PUSH
45960: LD_INT 30
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45968: LD_VAR 0 6
45972: PPUSH
45973: CALL_OW 257
45977: PUSH
45978: LD_INT 9
45980: EQUAL
45981: IFFALSE 46002
// points := [ 20 , 55 , 40 ] ;
45983: LD_ADDR_VAR 0 9
45987: PUSH
45988: LD_INT 20
45990: PUSH
45991: LD_INT 55
45993: PUSH
45994: LD_INT 40
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46002: LD_VAR 0 6
46006: PPUSH
46007: CALL_OW 257
46011: PUSH
46012: LD_INT 12
46014: PUSH
46015: LD_INT 16
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: IN
46022: IFFALSE 46043
// points := [ 5 , 3 , 2 ] ;
46024: LD_ADDR_VAR 0 9
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46043: LD_VAR 0 6
46047: PPUSH
46048: CALL_OW 257
46052: PUSH
46053: LD_INT 17
46055: EQUAL
46056: IFFALSE 46077
// points := [ 100 , 50 , 75 ] ;
46058: LD_ADDR_VAR 0 9
46062: PUSH
46063: LD_INT 100
46065: PUSH
46066: LD_INT 50
46068: PUSH
46069: LD_INT 75
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46077: LD_VAR 0 6
46081: PPUSH
46082: CALL_OW 257
46086: PUSH
46087: LD_INT 15
46089: EQUAL
46090: IFFALSE 46111
// points := [ 10 , 5 , 3 ] ;
46092: LD_ADDR_VAR 0 9
46096: PUSH
46097: LD_INT 10
46099: PUSH
46100: LD_INT 5
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46111: LD_VAR 0 6
46115: PPUSH
46116: CALL_OW 257
46120: PUSH
46121: LD_INT 14
46123: EQUAL
46124: IFFALSE 46145
// points := [ 10 , 0 , 0 ] ;
46126: LD_ADDR_VAR 0 9
46130: PUSH
46131: LD_INT 10
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46145: LD_VAR 0 6
46149: PPUSH
46150: CALL_OW 257
46154: PUSH
46155: LD_INT 11
46157: EQUAL
46158: IFFALSE 46179
// points := [ 30 , 10 , 5 ] ;
46160: LD_ADDR_VAR 0 9
46164: PUSH
46165: LD_INT 30
46167: PUSH
46168: LD_INT 10
46170: PUSH
46171: LD_INT 5
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46179: LD_VAR 0 1
46183: PPUSH
46184: LD_INT 5
46186: PPUSH
46187: CALL_OW 321
46191: PUSH
46192: LD_INT 2
46194: EQUAL
46195: IFFALSE 46212
// bpoints := bpoints * 1.8 ;
46197: LD_ADDR_VAR 0 10
46201: PUSH
46202: LD_VAR 0 10
46206: PUSH
46207: LD_REAL  1.80000000000000E+0000
46210: MUL
46211: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46212: LD_VAR 0 6
46216: PPUSH
46217: CALL_OW 257
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: LD_INT 4
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: IN
46240: PUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: LD_INT 51
46248: PPUSH
46249: CALL_OW 321
46253: PUSH
46254: LD_INT 2
46256: EQUAL
46257: AND
46258: IFFALSE 46275
// bpoints := bpoints * 1.2 ;
46260: LD_ADDR_VAR 0 10
46264: PUSH
46265: LD_VAR 0 10
46269: PUSH
46270: LD_REAL  1.20000000000000E+0000
46273: MUL
46274: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46275: LD_VAR 0 6
46279: PPUSH
46280: CALL_OW 257
46284: PUSH
46285: LD_INT 5
46287: PUSH
46288: LD_INT 7
46290: PUSH
46291: LD_INT 9
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: IN
46299: PUSH
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_INT 52
46307: PPUSH
46308: CALL_OW 321
46312: PUSH
46313: LD_INT 2
46315: EQUAL
46316: AND
46317: IFFALSE 46334
// bpoints := bpoints * 1.5 ;
46319: LD_ADDR_VAR 0 10
46323: PUSH
46324: LD_VAR 0 10
46328: PUSH
46329: LD_REAL  1.50000000000000E+0000
46332: MUL
46333: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46334: LD_VAR 0 1
46338: PPUSH
46339: LD_INT 66
46341: PPUSH
46342: CALL_OW 321
46346: PUSH
46347: LD_INT 2
46349: EQUAL
46350: IFFALSE 46367
// bpoints := bpoints * 1.1 ;
46352: LD_ADDR_VAR 0 10
46356: PUSH
46357: LD_VAR 0 10
46361: PUSH
46362: LD_REAL  1.10000000000000E+0000
46365: MUL
46366: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46367: LD_ADDR_VAR 0 10
46371: PUSH
46372: LD_VAR 0 10
46376: PUSH
46377: LD_VAR 0 6
46381: PPUSH
46382: LD_INT 1
46384: PPUSH
46385: CALL_OW 259
46389: PUSH
46390: LD_REAL  1.15000000000000E+0000
46393: MUL
46394: MUL
46395: ST_TO_ADDR
// end ; unit_vehicle :
46396: GO 47224
46398: LD_INT 2
46400: DOUBLE
46401: EQUAL
46402: IFTRUE 46406
46404: GO 47212
46406: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46407: LD_VAR 0 6
46411: PPUSH
46412: CALL_OW 264
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 42
46422: PUSH
46423: LD_INT 24
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: IN
46431: IFFALSE 46452
// points := [ 25 , 5 , 3 ] ;
46433: LD_ADDR_VAR 0 9
46437: PUSH
46438: LD_INT 25
46440: PUSH
46441: LD_INT 5
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46452: LD_VAR 0 6
46456: PPUSH
46457: CALL_OW 264
46461: PUSH
46462: LD_INT 4
46464: PUSH
46465: LD_INT 43
46467: PUSH
46468: LD_INT 25
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: IN
46476: IFFALSE 46497
// points := [ 40 , 15 , 5 ] ;
46478: LD_ADDR_VAR 0 9
46482: PUSH
46483: LD_INT 40
46485: PUSH
46486: LD_INT 15
46488: PUSH
46489: LD_INT 5
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46497: LD_VAR 0 6
46501: PPUSH
46502: CALL_OW 264
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: LD_INT 23
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: IN
46517: IFFALSE 46538
// points := [ 7 , 25 , 8 ] ;
46519: LD_ADDR_VAR 0 9
46523: PUSH
46524: LD_INT 7
46526: PUSH
46527: LD_INT 25
46529: PUSH
46530: LD_INT 8
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46538: LD_VAR 0 6
46542: PPUSH
46543: CALL_OW 264
46547: PUSH
46548: LD_INT 5
46550: PUSH
46551: LD_INT 27
46553: PUSH
46554: LD_INT 44
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: IN
46562: IFFALSE 46583
// points := [ 14 , 50 , 16 ] ;
46564: LD_ADDR_VAR 0 9
46568: PUSH
46569: LD_INT 14
46571: PUSH
46572: LD_INT 50
46574: PUSH
46575: LD_INT 16
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46583: LD_VAR 0 6
46587: PPUSH
46588: CALL_OW 264
46592: PUSH
46593: LD_INT 6
46595: PUSH
46596: LD_INT 46
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: IN
46603: IFFALSE 46624
// points := [ 32 , 120 , 70 ] ;
46605: LD_ADDR_VAR 0 9
46609: PUSH
46610: LD_INT 32
46612: PUSH
46613: LD_INT 120
46615: PUSH
46616: LD_INT 70
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 264
46633: PUSH
46634: LD_INT 7
46636: PUSH
46637: LD_INT 28
46639: PUSH
46640: LD_INT 45
46642: PUSH
46643: LD_INT 92
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: IN
46652: IFFALSE 46673
// points := [ 35 , 20 , 45 ] ;
46654: LD_ADDR_VAR 0 9
46658: PUSH
46659: LD_INT 35
46661: PUSH
46662: LD_INT 20
46664: PUSH
46665: LD_INT 45
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46673: LD_VAR 0 6
46677: PPUSH
46678: CALL_OW 264
46682: PUSH
46683: LD_INT 47
46685: PUSH
46686: EMPTY
46687: LIST
46688: IN
46689: IFFALSE 46710
// points := [ 67 , 45 , 75 ] ;
46691: LD_ADDR_VAR 0 9
46695: PUSH
46696: LD_INT 67
46698: PUSH
46699: LD_INT 45
46701: PUSH
46702: LD_INT 75
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46710: LD_VAR 0 6
46714: PPUSH
46715: CALL_OW 264
46719: PUSH
46720: LD_INT 26
46722: PUSH
46723: EMPTY
46724: LIST
46725: IN
46726: IFFALSE 46747
// points := [ 120 , 30 , 80 ] ;
46728: LD_ADDR_VAR 0 9
46732: PUSH
46733: LD_INT 120
46735: PUSH
46736: LD_INT 30
46738: PUSH
46739: LD_INT 80
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46747: LD_VAR 0 6
46751: PPUSH
46752: CALL_OW 264
46756: PUSH
46757: LD_INT 22
46759: PUSH
46760: EMPTY
46761: LIST
46762: IN
46763: IFFALSE 46784
// points := [ 40 , 1 , 1 ] ;
46765: LD_ADDR_VAR 0 9
46769: PUSH
46770: LD_INT 40
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46784: LD_VAR 0 6
46788: PPUSH
46789: CALL_OW 264
46793: PUSH
46794: LD_INT 29
46796: PUSH
46797: EMPTY
46798: LIST
46799: IN
46800: IFFALSE 46821
// points := [ 70 , 200 , 400 ] ;
46802: LD_ADDR_VAR 0 9
46806: PUSH
46807: LD_INT 70
46809: PUSH
46810: LD_INT 200
46812: PUSH
46813: LD_INT 400
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46821: LD_VAR 0 6
46825: PPUSH
46826: CALL_OW 264
46830: PUSH
46831: LD_INT 14
46833: PUSH
46834: LD_INT 53
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: IN
46841: IFFALSE 46862
// points := [ 40 , 10 , 20 ] ;
46843: LD_ADDR_VAR 0 9
46847: PUSH
46848: LD_INT 40
46850: PUSH
46851: LD_INT 10
46853: PUSH
46854: LD_INT 20
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46862: LD_VAR 0 6
46866: PPUSH
46867: CALL_OW 264
46871: PUSH
46872: LD_INT 9
46874: PUSH
46875: EMPTY
46876: LIST
46877: IN
46878: IFFALSE 46899
// points := [ 5 , 70 , 20 ] ;
46880: LD_ADDR_VAR 0 9
46884: PUSH
46885: LD_INT 5
46887: PUSH
46888: LD_INT 70
46890: PUSH
46891: LD_INT 20
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46899: LD_VAR 0 6
46903: PPUSH
46904: CALL_OW 264
46908: PUSH
46909: LD_INT 10
46911: PUSH
46912: EMPTY
46913: LIST
46914: IN
46915: IFFALSE 46936
// points := [ 35 , 110 , 70 ] ;
46917: LD_ADDR_VAR 0 9
46921: PUSH
46922: LD_INT 35
46924: PUSH
46925: LD_INT 110
46927: PUSH
46928: LD_INT 70
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46936: LD_VAR 0 6
46940: PPUSH
46941: CALL_OW 265
46945: PUSH
46946: LD_INT 25
46948: EQUAL
46949: IFFALSE 46970
// points := [ 80 , 65 , 100 ] ;
46951: LD_ADDR_VAR 0 9
46955: PUSH
46956: LD_INT 80
46958: PUSH
46959: LD_INT 65
46961: PUSH
46962: LD_INT 100
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46970: LD_VAR 0 6
46974: PPUSH
46975: CALL_OW 263
46979: PUSH
46980: LD_INT 1
46982: EQUAL
46983: IFFALSE 47018
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46985: LD_ADDR_VAR 0 10
46989: PUSH
46990: LD_VAR 0 10
46994: PUSH
46995: LD_VAR 0 6
46999: PPUSH
47000: CALL_OW 311
47004: PPUSH
47005: LD_INT 3
47007: PPUSH
47008: CALL_OW 259
47012: PUSH
47013: LD_INT 4
47015: MUL
47016: MUL
47017: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47018: LD_VAR 0 6
47022: PPUSH
47023: CALL_OW 263
47027: PUSH
47028: LD_INT 2
47030: EQUAL
47031: IFFALSE 47082
// begin j := IsControledBy ( i ) ;
47033: LD_ADDR_VAR 0 7
47037: PUSH
47038: LD_VAR 0 6
47042: PPUSH
47043: CALL_OW 312
47047: ST_TO_ADDR
// if j then
47048: LD_VAR 0 7
47052: IFFALSE 47082
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47054: LD_ADDR_VAR 0 10
47058: PUSH
47059: LD_VAR 0 10
47063: PUSH
47064: LD_VAR 0 7
47068: PPUSH
47069: LD_INT 3
47071: PPUSH
47072: CALL_OW 259
47076: PUSH
47077: LD_INT 3
47079: MUL
47080: MUL
47081: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47082: LD_VAR 0 6
47086: PPUSH
47087: CALL_OW 264
47091: PUSH
47092: LD_INT 5
47094: PUSH
47095: LD_INT 6
47097: PUSH
47098: LD_INT 46
47100: PUSH
47101: LD_INT 44
47103: PUSH
47104: LD_INT 47
47106: PUSH
47107: LD_INT 45
47109: PUSH
47110: LD_INT 28
47112: PUSH
47113: LD_INT 7
47115: PUSH
47116: LD_INT 27
47118: PUSH
47119: LD_INT 29
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: IN
47134: PUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: LD_INT 52
47142: PPUSH
47143: CALL_OW 321
47147: PUSH
47148: LD_INT 2
47150: EQUAL
47151: AND
47152: IFFALSE 47169
// bpoints := bpoints * 1.2 ;
47154: LD_ADDR_VAR 0 10
47158: PUSH
47159: LD_VAR 0 10
47163: PUSH
47164: LD_REAL  1.20000000000000E+0000
47167: MUL
47168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47169: LD_VAR 0 6
47173: PPUSH
47174: CALL_OW 264
47178: PUSH
47179: LD_INT 6
47181: PUSH
47182: LD_INT 46
47184: PUSH
47185: LD_INT 47
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: IN
47193: IFFALSE 47210
// bpoints := bpoints * 1.2 ;
47195: LD_ADDR_VAR 0 10
47199: PUSH
47200: LD_VAR 0 10
47204: PUSH
47205: LD_REAL  1.20000000000000E+0000
47208: MUL
47209: ST_TO_ADDR
// end ; unit_building :
47210: GO 47224
47212: LD_INT 3
47214: DOUBLE
47215: EQUAL
47216: IFTRUE 47220
47218: GO 47223
47220: POP
// ; end ;
47221: GO 47224
47223: POP
// for j = 1 to 3 do
47224: LD_ADDR_VAR 0 7
47228: PUSH
47229: DOUBLE
47230: LD_INT 1
47232: DEC
47233: ST_TO_ADDR
47234: LD_INT 3
47236: PUSH
47237: FOR_TO
47238: IFFALSE 47291
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47240: LD_ADDR_VAR 0 5
47244: PUSH
47245: LD_VAR 0 5
47249: PPUSH
47250: LD_VAR 0 7
47254: PPUSH
47255: LD_VAR 0 5
47259: PUSH
47260: LD_VAR 0 7
47264: ARRAY
47265: PUSH
47266: LD_VAR 0 9
47270: PUSH
47271: LD_VAR 0 7
47275: ARRAY
47276: PUSH
47277: LD_VAR 0 10
47281: MUL
47282: PLUS
47283: PPUSH
47284: CALL_OW 1
47288: ST_TO_ADDR
47289: GO 47237
47291: POP
47292: POP
// end ;
47293: GO 45772
47295: POP
47296: POP
// result := Replace ( result , 4 , tmp ) ;
47297: LD_ADDR_VAR 0 5
47301: PUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: LD_INT 4
47309: PPUSH
47310: LD_VAR 0 8
47314: PPUSH
47315: CALL_OW 1
47319: ST_TO_ADDR
// end ;
47320: LD_VAR 0 5
47324: RET
// export function DangerAtRange ( unit , range ) ; begin
47325: LD_INT 0
47327: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47328: LD_ADDR_VAR 0 3
47332: PUSH
47333: LD_VAR 0 1
47337: PPUSH
47338: CALL_OW 255
47342: PPUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: CALL_OW 250
47352: PPUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 251
47362: PPUSH
47363: LD_VAR 0 2
47367: PPUSH
47368: CALL 45624 0 4
47372: ST_TO_ADDR
// end ;
47373: LD_VAR 0 3
47377: RET
// export function DangerInArea ( side , area ) ; begin
47378: LD_INT 0
47380: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47381: LD_ADDR_VAR 0 3
47385: PUSH
47386: LD_VAR 0 2
47390: PPUSH
47391: LD_INT 81
47393: PUSH
47394: LD_VAR 0 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PPUSH
47403: CALL_OW 70
47407: ST_TO_ADDR
// end ;
47408: LD_VAR 0 3
47412: RET
// export function IsExtension ( b ) ; begin
47413: LD_INT 0
47415: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47416: LD_ADDR_VAR 0 2
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: LD_INT 23
47428: PUSH
47429: LD_INT 20
47431: PUSH
47432: LD_INT 22
47434: PUSH
47435: LD_INT 17
47437: PUSH
47438: LD_INT 24
47440: PUSH
47441: LD_INT 21
47443: PUSH
47444: LD_INT 19
47446: PUSH
47447: LD_INT 16
47449: PUSH
47450: LD_INT 25
47452: PUSH
47453: LD_INT 18
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: IN
47468: ST_TO_ADDR
// end ;
47469: LD_VAR 0 2
47473: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47474: LD_INT 0
47476: PPUSH
47477: PPUSH
47478: PPUSH
// result := [ ] ;
47479: LD_ADDR_VAR 0 4
47483: PUSH
47484: EMPTY
47485: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47486: LD_ADDR_VAR 0 5
47490: PUSH
47491: LD_VAR 0 2
47495: PPUSH
47496: LD_INT 21
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PPUSH
47506: CALL_OW 70
47510: ST_TO_ADDR
// if not tmp then
47511: LD_VAR 0 5
47515: NOT
47516: IFFALSE 47520
// exit ;
47518: GO 47584
// if checkLink then
47520: LD_VAR 0 3
47524: IFFALSE 47574
// begin for i in tmp do
47526: LD_ADDR_VAR 0 6
47530: PUSH
47531: LD_VAR 0 5
47535: PUSH
47536: FOR_IN
47537: IFFALSE 47572
// if GetBase ( i ) <> base then
47539: LD_VAR 0 6
47543: PPUSH
47544: CALL_OW 274
47548: PUSH
47549: LD_VAR 0 1
47553: NONEQUAL
47554: IFFALSE 47570
// ComLinkToBase ( base , i ) ;
47556: LD_VAR 0 1
47560: PPUSH
47561: LD_VAR 0 6
47565: PPUSH
47566: CALL_OW 169
47570: GO 47536
47572: POP
47573: POP
// end ; result := tmp ;
47574: LD_ADDR_VAR 0 4
47578: PUSH
47579: LD_VAR 0 5
47583: ST_TO_ADDR
// end ;
47584: LD_VAR 0 4
47588: RET
// export function ComComplete ( units , b ) ; var i ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
// if not units then
47593: LD_VAR 0 1
47597: NOT
47598: IFFALSE 47602
// exit ;
47600: GO 47692
// for i in units do
47602: LD_ADDR_VAR 0 4
47606: PUSH
47607: LD_VAR 0 1
47611: PUSH
47612: FOR_IN
47613: IFFALSE 47690
// if BuildingStatus ( b ) = bs_build then
47615: LD_VAR 0 2
47619: PPUSH
47620: CALL_OW 461
47624: PUSH
47625: LD_INT 1
47627: EQUAL
47628: IFFALSE 47688
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47630: LD_VAR 0 4
47634: PPUSH
47635: LD_STRING h
47637: PUSH
47638: LD_VAR 0 2
47642: PPUSH
47643: CALL_OW 250
47647: PUSH
47648: LD_VAR 0 2
47652: PPUSH
47653: CALL_OW 251
47657: PUSH
47658: LD_VAR 0 2
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: PPUSH
47684: CALL_OW 446
47688: GO 47612
47690: POP
47691: POP
// end ;
47692: LD_VAR 0 3
47696: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47697: LD_INT 0
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47705: LD_VAR 0 1
47709: NOT
47710: PUSH
47711: LD_VAR 0 1
47715: PPUSH
47716: CALL_OW 263
47720: PUSH
47721: LD_INT 2
47723: NONEQUAL
47724: OR
47725: IFFALSE 47729
// exit ;
47727: GO 48045
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47729: LD_ADDR_VAR 0 6
47733: PUSH
47734: LD_INT 22
47736: PUSH
47737: LD_VAR 0 1
47741: PPUSH
47742: CALL_OW 255
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 30
47756: PUSH
47757: LD_INT 36
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 34
47766: PUSH
47767: LD_INT 31
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PPUSH
47783: CALL_OW 69
47787: ST_TO_ADDR
// if not tmp then
47788: LD_VAR 0 6
47792: NOT
47793: IFFALSE 47797
// exit ;
47795: GO 48045
// result := [ ] ;
47797: LD_ADDR_VAR 0 2
47801: PUSH
47802: EMPTY
47803: ST_TO_ADDR
// for i in tmp do
47804: LD_ADDR_VAR 0 3
47808: PUSH
47809: LD_VAR 0 6
47813: PUSH
47814: FOR_IN
47815: IFFALSE 47886
// begin t := UnitsInside ( i ) ;
47817: LD_ADDR_VAR 0 4
47821: PUSH
47822: LD_VAR 0 3
47826: PPUSH
47827: CALL_OW 313
47831: ST_TO_ADDR
// if t then
47832: LD_VAR 0 4
47836: IFFALSE 47884
// for j in t do
47838: LD_ADDR_VAR 0 7
47842: PUSH
47843: LD_VAR 0 4
47847: PUSH
47848: FOR_IN
47849: IFFALSE 47882
// result := Replace ( result , result + 1 , j ) ;
47851: LD_ADDR_VAR 0 2
47855: PUSH
47856: LD_VAR 0 2
47860: PPUSH
47861: LD_VAR 0 2
47865: PUSH
47866: LD_INT 1
47868: PLUS
47869: PPUSH
47870: LD_VAR 0 7
47874: PPUSH
47875: CALL_OW 1
47879: ST_TO_ADDR
47880: GO 47848
47882: POP
47883: POP
// end ;
47884: GO 47814
47886: POP
47887: POP
// if not result then
47888: LD_VAR 0 2
47892: NOT
47893: IFFALSE 47897
// exit ;
47895: GO 48045
// mech := result [ 1 ] ;
47897: LD_ADDR_VAR 0 5
47901: PUSH
47902: LD_VAR 0 2
47906: PUSH
47907: LD_INT 1
47909: ARRAY
47910: ST_TO_ADDR
// if result > 1 then
47911: LD_VAR 0 2
47915: PUSH
47916: LD_INT 1
47918: GREATER
47919: IFFALSE 48031
// begin for i = 2 to result do
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: DOUBLE
47927: LD_INT 2
47929: DEC
47930: ST_TO_ADDR
47931: LD_VAR 0 2
47935: PUSH
47936: FOR_TO
47937: IFFALSE 48029
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47939: LD_ADDR_VAR 0 4
47943: PUSH
47944: LD_VAR 0 2
47948: PUSH
47949: LD_VAR 0 3
47953: ARRAY
47954: PPUSH
47955: LD_INT 3
47957: PPUSH
47958: CALL_OW 259
47962: PUSH
47963: LD_VAR 0 2
47967: PUSH
47968: LD_VAR 0 3
47972: ARRAY
47973: PPUSH
47974: CALL_OW 432
47978: MINUS
47979: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47980: LD_VAR 0 4
47984: PUSH
47985: LD_VAR 0 5
47989: PPUSH
47990: LD_INT 3
47992: PPUSH
47993: CALL_OW 259
47997: PUSH
47998: LD_VAR 0 5
48002: PPUSH
48003: CALL_OW 432
48007: MINUS
48008: GREATEREQUAL
48009: IFFALSE 48027
// mech := result [ i ] ;
48011: LD_ADDR_VAR 0 5
48015: PUSH
48016: LD_VAR 0 2
48020: PUSH
48021: LD_VAR 0 3
48025: ARRAY
48026: ST_TO_ADDR
// end ;
48027: GO 47936
48029: POP
48030: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48031: LD_VAR 0 1
48035: PPUSH
48036: LD_VAR 0 5
48040: PPUSH
48041: CALL_OW 135
// end ;
48045: LD_VAR 0 2
48049: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48050: LD_INT 0
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
// result := [ ] ;
48065: LD_ADDR_VAR 0 7
48069: PUSH
48070: EMPTY
48071: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48072: LD_VAR 0 1
48076: PPUSH
48077: CALL_OW 266
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: IN
48092: NOT
48093: IFFALSE 48097
// exit ;
48095: GO 49731
// if name then
48097: LD_VAR 0 3
48101: IFFALSE 48117
// SetBName ( base_dep , name ) ;
48103: LD_VAR 0 1
48107: PPUSH
48108: LD_VAR 0 3
48112: PPUSH
48113: CALL_OW 500
// base := GetBase ( base_dep ) ;
48117: LD_ADDR_VAR 0 15
48121: PUSH
48122: LD_VAR 0 1
48126: PPUSH
48127: CALL_OW 274
48131: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48132: LD_ADDR_VAR 0 16
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 255
48146: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48147: LD_ADDR_VAR 0 17
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 248
48161: ST_TO_ADDR
// if sources then
48162: LD_VAR 0 5
48166: IFFALSE 48213
// for i = 1 to 3 do
48168: LD_ADDR_VAR 0 8
48172: PUSH
48173: DOUBLE
48174: LD_INT 1
48176: DEC
48177: ST_TO_ADDR
48178: LD_INT 3
48180: PUSH
48181: FOR_TO
48182: IFFALSE 48211
// AddResourceType ( base , i , sources [ i ] ) ;
48184: LD_VAR 0 15
48188: PPUSH
48189: LD_VAR 0 8
48193: PPUSH
48194: LD_VAR 0 5
48198: PUSH
48199: LD_VAR 0 8
48203: ARRAY
48204: PPUSH
48205: CALL_OW 276
48209: GO 48181
48211: POP
48212: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48213: LD_ADDR_VAR 0 18
48217: PUSH
48218: LD_VAR 0 15
48222: PPUSH
48223: LD_VAR 0 2
48227: PPUSH
48228: LD_INT 1
48230: PPUSH
48231: CALL 47474 0 3
48235: ST_TO_ADDR
// InitHc ;
48236: CALL_OW 19
// InitUc ;
48240: CALL_OW 18
// uc_side := side ;
48244: LD_ADDR_OWVAR 20
48248: PUSH
48249: LD_VAR 0 16
48253: ST_TO_ADDR
// uc_nation := nation ;
48254: LD_ADDR_OWVAR 21
48258: PUSH
48259: LD_VAR 0 17
48263: ST_TO_ADDR
// if buildings then
48264: LD_VAR 0 18
48268: IFFALSE 49590
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48270: LD_ADDR_VAR 0 19
48274: PUSH
48275: LD_VAR 0 18
48279: PPUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 30
48285: PUSH
48286: LD_INT 29
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 30
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: PPUSH
48308: CALL_OW 72
48312: ST_TO_ADDR
// if tmp then
48313: LD_VAR 0 19
48317: IFFALSE 48365
// for i in tmp do
48319: LD_ADDR_VAR 0 8
48323: PUSH
48324: LD_VAR 0 19
48328: PUSH
48329: FOR_IN
48330: IFFALSE 48363
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48332: LD_VAR 0 8
48336: PPUSH
48337: CALL_OW 250
48341: PPUSH
48342: LD_VAR 0 8
48346: PPUSH
48347: CALL_OW 251
48351: PPUSH
48352: LD_VAR 0 16
48356: PPUSH
48357: CALL_OW 441
48361: GO 48329
48363: POP
48364: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48365: LD_VAR 0 18
48369: PPUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 30
48375: PUSH
48376: LD_INT 32
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 30
48385: PUSH
48386: LD_INT 33
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: PPUSH
48398: CALL_OW 72
48402: IFFALSE 48490
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48404: LD_ADDR_VAR 0 8
48408: PUSH
48409: LD_VAR 0 18
48413: PPUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 30
48419: PUSH
48420: LD_INT 32
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 30
48429: PUSH
48430: LD_INT 33
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: PPUSH
48442: CALL_OW 72
48446: PUSH
48447: FOR_IN
48448: IFFALSE 48488
// begin if not GetBWeapon ( i ) then
48450: LD_VAR 0 8
48454: PPUSH
48455: CALL_OW 269
48459: NOT
48460: IFFALSE 48486
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48462: LD_VAR 0 8
48466: PPUSH
48467: LD_VAR 0 8
48471: PPUSH
48472: LD_VAR 0 2
48476: PPUSH
48477: CALL 49736 0 2
48481: PPUSH
48482: CALL_OW 431
// end ;
48486: GO 48447
48488: POP
48489: POP
// end ; for i = 1 to personel do
48490: LD_ADDR_VAR 0 8
48494: PUSH
48495: DOUBLE
48496: LD_INT 1
48498: DEC
48499: ST_TO_ADDR
48500: LD_VAR 0 6
48504: PUSH
48505: FOR_TO
48506: IFFALSE 49570
// begin if i > 4 then
48508: LD_VAR 0 8
48512: PUSH
48513: LD_INT 4
48515: GREATER
48516: IFFALSE 48520
// break ;
48518: GO 49570
// case i of 1 :
48520: LD_VAR 0 8
48524: PUSH
48525: LD_INT 1
48527: DOUBLE
48528: EQUAL
48529: IFTRUE 48533
48531: GO 48613
48533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48534: LD_ADDR_VAR 0 12
48538: PUSH
48539: LD_VAR 0 18
48543: PPUSH
48544: LD_INT 22
48546: PUSH
48547: LD_VAR 0 16
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 58
48558: PUSH
48559: EMPTY
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 30
48567: PUSH
48568: LD_INT 32
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 30
48577: PUSH
48578: LD_INT 4
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 30
48587: PUSH
48588: LD_INT 5
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: PPUSH
48606: CALL_OW 72
48610: ST_TO_ADDR
48611: GO 48835
48613: LD_INT 2
48615: DOUBLE
48616: EQUAL
48617: IFTRUE 48621
48619: GO 48683
48621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48622: LD_ADDR_VAR 0 12
48626: PUSH
48627: LD_VAR 0 18
48631: PPUSH
48632: LD_INT 22
48634: PUSH
48635: LD_VAR 0 16
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 30
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 30
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PPUSH
48676: CALL_OW 72
48680: ST_TO_ADDR
48681: GO 48835
48683: LD_INT 3
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48753
48691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48692: LD_ADDR_VAR 0 12
48696: PUSH
48697: LD_VAR 0 18
48701: PPUSH
48702: LD_INT 22
48704: PUSH
48705: LD_VAR 0 16
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 30
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 30
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PPUSH
48746: CALL_OW 72
48750: ST_TO_ADDR
48751: GO 48835
48753: LD_INT 4
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48761
48759: GO 48834
48761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48762: LD_ADDR_VAR 0 12
48766: PUSH
48767: LD_VAR 0 18
48771: PPUSH
48772: LD_INT 22
48774: PUSH
48775: LD_VAR 0 16
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 30
48789: PUSH
48790: LD_INT 6
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 30
48799: PUSH
48800: LD_INT 7
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 30
48809: PUSH
48810: LD_INT 8
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PPUSH
48827: CALL_OW 72
48831: ST_TO_ADDR
48832: GO 48835
48834: POP
// if i = 1 then
48835: LD_VAR 0 8
48839: PUSH
48840: LD_INT 1
48842: EQUAL
48843: IFFALSE 48954
// begin tmp := [ ] ;
48845: LD_ADDR_VAR 0 19
48849: PUSH
48850: EMPTY
48851: ST_TO_ADDR
// for j in f do
48852: LD_ADDR_VAR 0 9
48856: PUSH
48857: LD_VAR 0 12
48861: PUSH
48862: FOR_IN
48863: IFFALSE 48936
// if GetBType ( j ) = b_bunker then
48865: LD_VAR 0 9
48869: PPUSH
48870: CALL_OW 266
48874: PUSH
48875: LD_INT 32
48877: EQUAL
48878: IFFALSE 48905
// tmp := Insert ( tmp , 1 , j ) else
48880: LD_ADDR_VAR 0 19
48884: PUSH
48885: LD_VAR 0 19
48889: PPUSH
48890: LD_INT 1
48892: PPUSH
48893: LD_VAR 0 9
48897: PPUSH
48898: CALL_OW 2
48902: ST_TO_ADDR
48903: GO 48934
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48905: LD_ADDR_VAR 0 19
48909: PUSH
48910: LD_VAR 0 19
48914: PPUSH
48915: LD_VAR 0 19
48919: PUSH
48920: LD_INT 1
48922: PLUS
48923: PPUSH
48924: LD_VAR 0 9
48928: PPUSH
48929: CALL_OW 2
48933: ST_TO_ADDR
48934: GO 48862
48936: POP
48937: POP
// if tmp then
48938: LD_VAR 0 19
48942: IFFALSE 48954
// f := tmp ;
48944: LD_ADDR_VAR 0 12
48948: PUSH
48949: LD_VAR 0 19
48953: ST_TO_ADDR
// end ; x := personel [ i ] ;
48954: LD_ADDR_VAR 0 13
48958: PUSH
48959: LD_VAR 0 6
48963: PUSH
48964: LD_VAR 0 8
48968: ARRAY
48969: ST_TO_ADDR
// if x = - 1 then
48970: LD_VAR 0 13
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: EQUAL
48979: IFFALSE 49188
// begin for j in f do
48981: LD_ADDR_VAR 0 9
48985: PUSH
48986: LD_VAR 0 12
48990: PUSH
48991: FOR_IN
48992: IFFALSE 49184
// repeat InitHc ;
48994: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48998: LD_VAR 0 9
49002: PPUSH
49003: CALL_OW 266
49007: PUSH
49008: LD_INT 5
49010: EQUAL
49011: IFFALSE 49081
// begin if UnitsInside ( j ) < 3 then
49013: LD_VAR 0 9
49017: PPUSH
49018: CALL_OW 313
49022: PUSH
49023: LD_INT 3
49025: LESS
49026: IFFALSE 49062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49028: LD_INT 0
49030: PPUSH
49031: LD_INT 5
49033: PUSH
49034: LD_INT 8
49036: PUSH
49037: LD_INT 9
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: PUSH
49045: LD_VAR 0 17
49049: ARRAY
49050: PPUSH
49051: LD_VAR 0 4
49055: PPUSH
49056: CALL_OW 380
49060: GO 49079
// PrepareHuman ( false , i , skill ) ;
49062: LD_INT 0
49064: PPUSH
49065: LD_VAR 0 8
49069: PPUSH
49070: LD_VAR 0 4
49074: PPUSH
49075: CALL_OW 380
// end else
49079: GO 49098
// PrepareHuman ( false , i , skill ) ;
49081: LD_INT 0
49083: PPUSH
49084: LD_VAR 0 8
49088: PPUSH
49089: LD_VAR 0 4
49093: PPUSH
49094: CALL_OW 380
// un := CreateHuman ;
49098: LD_ADDR_VAR 0 14
49102: PUSH
49103: CALL_OW 44
49107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49108: LD_ADDR_VAR 0 7
49112: PUSH
49113: LD_VAR 0 7
49117: PPUSH
49118: LD_INT 1
49120: PPUSH
49121: LD_VAR 0 14
49125: PPUSH
49126: CALL_OW 2
49130: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49131: LD_VAR 0 14
49135: PPUSH
49136: LD_VAR 0 9
49140: PPUSH
49141: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49145: LD_VAR 0 9
49149: PPUSH
49150: CALL_OW 313
49154: PUSH
49155: LD_INT 6
49157: EQUAL
49158: PUSH
49159: LD_VAR 0 9
49163: PPUSH
49164: CALL_OW 266
49168: PUSH
49169: LD_INT 32
49171: PUSH
49172: LD_INT 31
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: IN
49179: OR
49180: IFFALSE 48994
49182: GO 48991
49184: POP
49185: POP
// end else
49186: GO 49568
// for j = 1 to x do
49188: LD_ADDR_VAR 0 9
49192: PUSH
49193: DOUBLE
49194: LD_INT 1
49196: DEC
49197: ST_TO_ADDR
49198: LD_VAR 0 13
49202: PUSH
49203: FOR_TO
49204: IFFALSE 49566
// begin InitHc ;
49206: CALL_OW 19
// if not f then
49210: LD_VAR 0 12
49214: NOT
49215: IFFALSE 49304
// begin PrepareHuman ( false , i , skill ) ;
49217: LD_INT 0
49219: PPUSH
49220: LD_VAR 0 8
49224: PPUSH
49225: LD_VAR 0 4
49229: PPUSH
49230: CALL_OW 380
// un := CreateHuman ;
49234: LD_ADDR_VAR 0 14
49238: PUSH
49239: CALL_OW 44
49243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49244: LD_ADDR_VAR 0 7
49248: PUSH
49249: LD_VAR 0 7
49253: PPUSH
49254: LD_INT 1
49256: PPUSH
49257: LD_VAR 0 14
49261: PPUSH
49262: CALL_OW 2
49266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49267: LD_VAR 0 14
49271: PPUSH
49272: LD_VAR 0 1
49276: PPUSH
49277: CALL_OW 250
49281: PPUSH
49282: LD_VAR 0 1
49286: PPUSH
49287: CALL_OW 251
49291: PPUSH
49292: LD_INT 10
49294: PPUSH
49295: LD_INT 0
49297: PPUSH
49298: CALL_OW 50
// continue ;
49302: GO 49203
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49304: LD_VAR 0 12
49308: PUSH
49309: LD_INT 1
49311: ARRAY
49312: PPUSH
49313: CALL_OW 313
49317: PUSH
49318: LD_VAR 0 12
49322: PUSH
49323: LD_INT 1
49325: ARRAY
49326: PPUSH
49327: CALL_OW 266
49331: PUSH
49332: LD_INT 32
49334: PUSH
49335: LD_INT 31
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: IN
49342: AND
49343: PUSH
49344: LD_VAR 0 12
49348: PUSH
49349: LD_INT 1
49351: ARRAY
49352: PPUSH
49353: CALL_OW 313
49357: PUSH
49358: LD_INT 6
49360: EQUAL
49361: OR
49362: IFFALSE 49382
// f := Delete ( f , 1 ) ;
49364: LD_ADDR_VAR 0 12
49368: PUSH
49369: LD_VAR 0 12
49373: PPUSH
49374: LD_INT 1
49376: PPUSH
49377: CALL_OW 3
49381: ST_TO_ADDR
// if not f then
49382: LD_VAR 0 12
49386: NOT
49387: IFFALSE 49405
// begin x := x + 2 ;
49389: LD_ADDR_VAR 0 13
49393: PUSH
49394: LD_VAR 0 13
49398: PUSH
49399: LD_INT 2
49401: PLUS
49402: ST_TO_ADDR
// continue ;
49403: GO 49203
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49405: LD_VAR 0 12
49409: PUSH
49410: LD_INT 1
49412: ARRAY
49413: PPUSH
49414: CALL_OW 266
49418: PUSH
49419: LD_INT 5
49421: EQUAL
49422: IFFALSE 49496
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49424: LD_VAR 0 12
49428: PUSH
49429: LD_INT 1
49431: ARRAY
49432: PPUSH
49433: CALL_OW 313
49437: PUSH
49438: LD_INT 3
49440: LESS
49441: IFFALSE 49477
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49443: LD_INT 0
49445: PPUSH
49446: LD_INT 5
49448: PUSH
49449: LD_INT 8
49451: PUSH
49452: LD_INT 9
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: LD_VAR 0 17
49464: ARRAY
49465: PPUSH
49466: LD_VAR 0 4
49470: PPUSH
49471: CALL_OW 380
49475: GO 49494
// PrepareHuman ( false , i , skill ) ;
49477: LD_INT 0
49479: PPUSH
49480: LD_VAR 0 8
49484: PPUSH
49485: LD_VAR 0 4
49489: PPUSH
49490: CALL_OW 380
// end else
49494: GO 49513
// PrepareHuman ( false , i , skill ) ;
49496: LD_INT 0
49498: PPUSH
49499: LD_VAR 0 8
49503: PPUSH
49504: LD_VAR 0 4
49508: PPUSH
49509: CALL_OW 380
// un := CreateHuman ;
49513: LD_ADDR_VAR 0 14
49517: PUSH
49518: CALL_OW 44
49522: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49523: LD_ADDR_VAR 0 7
49527: PUSH
49528: LD_VAR 0 7
49532: PPUSH
49533: LD_INT 1
49535: PPUSH
49536: LD_VAR 0 14
49540: PPUSH
49541: CALL_OW 2
49545: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49546: LD_VAR 0 14
49550: PPUSH
49551: LD_VAR 0 12
49555: PUSH
49556: LD_INT 1
49558: ARRAY
49559: PPUSH
49560: CALL_OW 52
// end ;
49564: GO 49203
49566: POP
49567: POP
// end ;
49568: GO 48505
49570: POP
49571: POP
// result := result ^ buildings ;
49572: LD_ADDR_VAR 0 7
49576: PUSH
49577: LD_VAR 0 7
49581: PUSH
49582: LD_VAR 0 18
49586: ADD
49587: ST_TO_ADDR
// end else
49588: GO 49731
// begin for i = 1 to personel do
49590: LD_ADDR_VAR 0 8
49594: PUSH
49595: DOUBLE
49596: LD_INT 1
49598: DEC
49599: ST_TO_ADDR
49600: LD_VAR 0 6
49604: PUSH
49605: FOR_TO
49606: IFFALSE 49729
// begin if i > 4 then
49608: LD_VAR 0 8
49612: PUSH
49613: LD_INT 4
49615: GREATER
49616: IFFALSE 49620
// break ;
49618: GO 49729
// x := personel [ i ] ;
49620: LD_ADDR_VAR 0 13
49624: PUSH
49625: LD_VAR 0 6
49629: PUSH
49630: LD_VAR 0 8
49634: ARRAY
49635: ST_TO_ADDR
// if x = - 1 then
49636: LD_VAR 0 13
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: EQUAL
49645: IFFALSE 49649
// continue ;
49647: GO 49605
// PrepareHuman ( false , i , skill ) ;
49649: LD_INT 0
49651: PPUSH
49652: LD_VAR 0 8
49656: PPUSH
49657: LD_VAR 0 4
49661: PPUSH
49662: CALL_OW 380
// un := CreateHuman ;
49666: LD_ADDR_VAR 0 14
49670: PUSH
49671: CALL_OW 44
49675: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49676: LD_VAR 0 14
49680: PPUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 250
49690: PPUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 251
49700: PPUSH
49701: LD_INT 10
49703: PPUSH
49704: LD_INT 0
49706: PPUSH
49707: CALL_OW 50
// result := result ^ un ;
49711: LD_ADDR_VAR 0 7
49715: PUSH
49716: LD_VAR 0 7
49720: PUSH
49721: LD_VAR 0 14
49725: ADD
49726: ST_TO_ADDR
// end ;
49727: GO 49605
49729: POP
49730: POP
// end ; end ;
49731: LD_VAR 0 7
49735: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49736: LD_INT 0
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
// result := false ;
49754: LD_ADDR_VAR 0 3
49758: PUSH
49759: LD_INT 0
49761: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49762: LD_VAR 0 1
49766: NOT
49767: PUSH
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 266
49777: PUSH
49778: LD_INT 32
49780: PUSH
49781: LD_INT 33
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: IN
49788: NOT
49789: OR
49790: IFFALSE 49794
// exit ;
49792: GO 50903
// nat := GetNation ( tower ) ;
49794: LD_ADDR_VAR 0 12
49798: PUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: CALL_OW 248
49808: ST_TO_ADDR
// side := GetSide ( tower ) ;
49809: LD_ADDR_VAR 0 16
49813: PUSH
49814: LD_VAR 0 1
49818: PPUSH
49819: CALL_OW 255
49823: ST_TO_ADDR
// x := GetX ( tower ) ;
49824: LD_ADDR_VAR 0 10
49828: PUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: CALL_OW 250
49838: ST_TO_ADDR
// y := GetY ( tower ) ;
49839: LD_ADDR_VAR 0 11
49843: PUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 251
49853: ST_TO_ADDR
// if not x or not y then
49854: LD_VAR 0 10
49858: NOT
49859: PUSH
49860: LD_VAR 0 11
49864: NOT
49865: OR
49866: IFFALSE 49870
// exit ;
49868: GO 50903
// weapon := 0 ;
49870: LD_ADDR_VAR 0 18
49874: PUSH
49875: LD_INT 0
49877: ST_TO_ADDR
// fac_list := [ ] ;
49878: LD_ADDR_VAR 0 17
49882: PUSH
49883: EMPTY
49884: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49885: LD_ADDR_VAR 0 6
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 274
49899: PPUSH
49900: LD_VAR 0 2
49904: PPUSH
49905: LD_INT 0
49907: PPUSH
49908: CALL 47474 0 3
49912: PPUSH
49913: LD_INT 30
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PPUSH
49923: CALL_OW 72
49927: ST_TO_ADDR
// if not factories then
49928: LD_VAR 0 6
49932: NOT
49933: IFFALSE 49937
// exit ;
49935: GO 50903
// for i in factories do
49937: LD_ADDR_VAR 0 8
49941: PUSH
49942: LD_VAR 0 6
49946: PUSH
49947: FOR_IN
49948: IFFALSE 49973
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49950: LD_ADDR_VAR 0 17
49954: PUSH
49955: LD_VAR 0 17
49959: PUSH
49960: LD_VAR 0 8
49964: PPUSH
49965: CALL_OW 478
49969: UNION
49970: ST_TO_ADDR
49971: GO 49947
49973: POP
49974: POP
// if not fac_list then
49975: LD_VAR 0 17
49979: NOT
49980: IFFALSE 49984
// exit ;
49982: GO 50903
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49984: LD_ADDR_VAR 0 5
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: LD_INT 5
49994: PUSH
49995: LD_INT 9
49997: PUSH
49998: LD_INT 10
50000: PUSH
50001: LD_INT 6
50003: PUSH
50004: LD_INT 7
50006: PUSH
50007: LD_INT 11
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 27
50021: PUSH
50022: LD_INT 28
50024: PUSH
50025: LD_INT 26
50027: PUSH
50028: LD_INT 30
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 43
50039: PUSH
50040: LD_INT 44
50042: PUSH
50043: LD_INT 46
50045: PUSH
50046: LD_INT 45
50048: PUSH
50049: LD_INT 47
50051: PUSH
50052: LD_INT 49
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: PUSH
50068: LD_VAR 0 12
50072: ARRAY
50073: ST_TO_ADDR
// list := list isect fac_list ;
50074: LD_ADDR_VAR 0 5
50078: PUSH
50079: LD_VAR 0 5
50083: PUSH
50084: LD_VAR 0 17
50088: ISECT
50089: ST_TO_ADDR
// if not list then
50090: LD_VAR 0 5
50094: NOT
50095: IFFALSE 50099
// exit ;
50097: GO 50903
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50099: LD_VAR 0 12
50103: PUSH
50104: LD_INT 3
50106: EQUAL
50107: PUSH
50108: LD_INT 49
50110: PUSH
50111: LD_VAR 0 5
50115: IN
50116: AND
50117: PUSH
50118: LD_INT 31
50120: PPUSH
50121: LD_VAR 0 16
50125: PPUSH
50126: CALL_OW 321
50130: PUSH
50131: LD_INT 2
50133: EQUAL
50134: AND
50135: IFFALSE 50195
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50137: LD_INT 22
50139: PUSH
50140: LD_VAR 0 16
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 35
50151: PUSH
50152: LD_INT 49
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 91
50161: PUSH
50162: LD_VAR 0 1
50166: PUSH
50167: LD_INT 10
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: PPUSH
50180: CALL_OW 69
50184: NOT
50185: IFFALSE 50195
// weapon := ru_time_lapser ;
50187: LD_ADDR_VAR 0 18
50191: PUSH
50192: LD_INT 49
50194: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50195: LD_VAR 0 12
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: IN
50210: PUSH
50211: LD_INT 11
50213: PUSH
50214: LD_VAR 0 5
50218: IN
50219: PUSH
50220: LD_INT 30
50222: PUSH
50223: LD_VAR 0 5
50227: IN
50228: OR
50229: AND
50230: PUSH
50231: LD_INT 6
50233: PPUSH
50234: LD_VAR 0 16
50238: PPUSH
50239: CALL_OW 321
50243: PUSH
50244: LD_INT 2
50246: EQUAL
50247: AND
50248: IFFALSE 50413
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50250: LD_INT 22
50252: PUSH
50253: LD_VAR 0 16
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 35
50267: PUSH
50268: LD_INT 11
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 35
50277: PUSH
50278: LD_INT 30
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 91
50292: PUSH
50293: LD_VAR 0 1
50297: PUSH
50298: LD_INT 18
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: PPUSH
50311: CALL_OW 69
50315: NOT
50316: PUSH
50317: LD_INT 22
50319: PUSH
50320: LD_VAR 0 16
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 30
50334: PUSH
50335: LD_INT 32
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 33
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 91
50359: PUSH
50360: LD_VAR 0 1
50364: PUSH
50365: LD_INT 12
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: PPUSH
50381: CALL_OW 69
50385: PUSH
50386: LD_INT 2
50388: GREATER
50389: AND
50390: IFFALSE 50413
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50392: LD_ADDR_VAR 0 18
50396: PUSH
50397: LD_INT 11
50399: PUSH
50400: LD_INT 30
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_VAR 0 12
50411: ARRAY
50412: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50413: LD_VAR 0 18
50417: NOT
50418: PUSH
50419: LD_INT 40
50421: PPUSH
50422: LD_VAR 0 16
50426: PPUSH
50427: CALL_OW 321
50431: PUSH
50432: LD_INT 2
50434: EQUAL
50435: AND
50436: PUSH
50437: LD_INT 7
50439: PUSH
50440: LD_VAR 0 5
50444: IN
50445: PUSH
50446: LD_INT 28
50448: PUSH
50449: LD_VAR 0 5
50453: IN
50454: OR
50455: PUSH
50456: LD_INT 45
50458: PUSH
50459: LD_VAR 0 5
50463: IN
50464: OR
50465: AND
50466: IFFALSE 50720
// begin hex := GetHexInfo ( x , y ) ;
50468: LD_ADDR_VAR 0 4
50472: PUSH
50473: LD_VAR 0 10
50477: PPUSH
50478: LD_VAR 0 11
50482: PPUSH
50483: CALL_OW 546
50487: ST_TO_ADDR
// if hex [ 1 ] then
50488: LD_VAR 0 4
50492: PUSH
50493: LD_INT 1
50495: ARRAY
50496: IFFALSE 50500
// exit ;
50498: GO 50903
// height := hex [ 2 ] ;
50500: LD_ADDR_VAR 0 15
50504: PUSH
50505: LD_VAR 0 4
50509: PUSH
50510: LD_INT 2
50512: ARRAY
50513: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50514: LD_ADDR_VAR 0 14
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 5
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// for i in tmp do
50537: LD_ADDR_VAR 0 8
50541: PUSH
50542: LD_VAR 0 14
50546: PUSH
50547: FOR_IN
50548: IFFALSE 50718
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50550: LD_ADDR_VAR 0 9
50554: PUSH
50555: LD_VAR 0 10
50559: PPUSH
50560: LD_VAR 0 8
50564: PPUSH
50565: LD_INT 5
50567: PPUSH
50568: CALL_OW 272
50572: PUSH
50573: LD_VAR 0 11
50577: PPUSH
50578: LD_VAR 0 8
50582: PPUSH
50583: LD_INT 5
50585: PPUSH
50586: CALL_OW 273
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50595: LD_VAR 0 9
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: PPUSH
50604: LD_VAR 0 9
50608: PUSH
50609: LD_INT 2
50611: ARRAY
50612: PPUSH
50613: CALL_OW 488
50617: IFFALSE 50716
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50619: LD_ADDR_VAR 0 4
50623: PUSH
50624: LD_VAR 0 9
50628: PUSH
50629: LD_INT 1
50631: ARRAY
50632: PPUSH
50633: LD_VAR 0 9
50637: PUSH
50638: LD_INT 2
50640: ARRAY
50641: PPUSH
50642: CALL_OW 546
50646: ST_TO_ADDR
// if hex [ 1 ] then
50647: LD_VAR 0 4
50651: PUSH
50652: LD_INT 1
50654: ARRAY
50655: IFFALSE 50659
// continue ;
50657: GO 50547
// h := hex [ 2 ] ;
50659: LD_ADDR_VAR 0 13
50663: PUSH
50664: LD_VAR 0 4
50668: PUSH
50669: LD_INT 2
50671: ARRAY
50672: ST_TO_ADDR
// if h + 7 < height then
50673: LD_VAR 0 13
50677: PUSH
50678: LD_INT 7
50680: PLUS
50681: PUSH
50682: LD_VAR 0 15
50686: LESS
50687: IFFALSE 50716
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50689: LD_ADDR_VAR 0 18
50693: PUSH
50694: LD_INT 7
50696: PUSH
50697: LD_INT 28
50699: PUSH
50700: LD_INT 45
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: PUSH
50708: LD_VAR 0 12
50712: ARRAY
50713: ST_TO_ADDR
// break ;
50714: GO 50718
// end ; end ; end ;
50716: GO 50547
50718: POP
50719: POP
// end ; if not weapon then
50720: LD_VAR 0 18
50724: NOT
50725: IFFALSE 50785
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50727: LD_ADDR_VAR 0 5
50731: PUSH
50732: LD_VAR 0 5
50736: PUSH
50737: LD_INT 11
50739: PUSH
50740: LD_INT 30
50742: PUSH
50743: LD_INT 49
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: DIFF
50751: ST_TO_ADDR
// if not list then
50752: LD_VAR 0 5
50756: NOT
50757: IFFALSE 50761
// exit ;
50759: GO 50903
// weapon := list [ rand ( 1 , list ) ] ;
50761: LD_ADDR_VAR 0 18
50765: PUSH
50766: LD_VAR 0 5
50770: PUSH
50771: LD_INT 1
50773: PPUSH
50774: LD_VAR 0 5
50778: PPUSH
50779: CALL_OW 12
50783: ARRAY
50784: ST_TO_ADDR
// end ; if weapon then
50785: LD_VAR 0 18
50789: IFFALSE 50903
// begin tmp := CostOfWeapon ( weapon ) ;
50791: LD_ADDR_VAR 0 14
50795: PUSH
50796: LD_VAR 0 18
50800: PPUSH
50801: CALL_OW 451
50805: ST_TO_ADDR
// j := GetBase ( tower ) ;
50806: LD_ADDR_VAR 0 9
50810: PUSH
50811: LD_VAR 0 1
50815: PPUSH
50816: CALL_OW 274
50820: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50821: LD_VAR 0 9
50825: PPUSH
50826: LD_INT 1
50828: PPUSH
50829: CALL_OW 275
50833: PUSH
50834: LD_VAR 0 14
50838: PUSH
50839: LD_INT 1
50841: ARRAY
50842: GREATEREQUAL
50843: PUSH
50844: LD_VAR 0 9
50848: PPUSH
50849: LD_INT 2
50851: PPUSH
50852: CALL_OW 275
50856: PUSH
50857: LD_VAR 0 14
50861: PUSH
50862: LD_INT 2
50864: ARRAY
50865: GREATEREQUAL
50866: AND
50867: PUSH
50868: LD_VAR 0 9
50872: PPUSH
50873: LD_INT 3
50875: PPUSH
50876: CALL_OW 275
50880: PUSH
50881: LD_VAR 0 14
50885: PUSH
50886: LD_INT 3
50888: ARRAY
50889: GREATEREQUAL
50890: AND
50891: IFFALSE 50903
// result := weapon ;
50893: LD_ADDR_VAR 0 3
50897: PUSH
50898: LD_VAR 0 18
50902: ST_TO_ADDR
// end ; end ;
50903: LD_VAR 0 3
50907: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50908: LD_INT 0
50910: PPUSH
50911: PPUSH
// result := true ;
50912: LD_ADDR_VAR 0 3
50916: PUSH
50917: LD_INT 1
50919: ST_TO_ADDR
// if array1 = array2 then
50920: LD_VAR 0 1
50924: PUSH
50925: LD_VAR 0 2
50929: EQUAL
50930: IFFALSE 50990
// begin for i = 1 to array1 do
50932: LD_ADDR_VAR 0 4
50936: PUSH
50937: DOUBLE
50938: LD_INT 1
50940: DEC
50941: ST_TO_ADDR
50942: LD_VAR 0 1
50946: PUSH
50947: FOR_TO
50948: IFFALSE 50986
// if array1 [ i ] <> array2 [ i ] then
50950: LD_VAR 0 1
50954: PUSH
50955: LD_VAR 0 4
50959: ARRAY
50960: PUSH
50961: LD_VAR 0 2
50965: PUSH
50966: LD_VAR 0 4
50970: ARRAY
50971: NONEQUAL
50972: IFFALSE 50984
// begin result := false ;
50974: LD_ADDR_VAR 0 3
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// break ;
50982: GO 50986
// end ;
50984: GO 50947
50986: POP
50987: POP
// end else
50988: GO 50998
// result := false ;
50990: LD_ADDR_VAR 0 3
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
// end ;
50998: LD_VAR 0 3
51002: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51003: LD_INT 0
51005: PPUSH
51006: PPUSH
// if not array1 or not array2 then
51007: LD_VAR 0 1
51011: NOT
51012: PUSH
51013: LD_VAR 0 2
51017: NOT
51018: OR
51019: IFFALSE 51023
// exit ;
51021: GO 51087
// result := true ;
51023: LD_ADDR_VAR 0 3
51027: PUSH
51028: LD_INT 1
51030: ST_TO_ADDR
// for i = 1 to array1 do
51031: LD_ADDR_VAR 0 4
51035: PUSH
51036: DOUBLE
51037: LD_INT 1
51039: DEC
51040: ST_TO_ADDR
51041: LD_VAR 0 1
51045: PUSH
51046: FOR_TO
51047: IFFALSE 51085
// if array1 [ i ] <> array2 [ i ] then
51049: LD_VAR 0 1
51053: PUSH
51054: LD_VAR 0 4
51058: ARRAY
51059: PUSH
51060: LD_VAR 0 2
51064: PUSH
51065: LD_VAR 0 4
51069: ARRAY
51070: NONEQUAL
51071: IFFALSE 51083
// begin result := false ;
51073: LD_ADDR_VAR 0 3
51077: PUSH
51078: LD_INT 0
51080: ST_TO_ADDR
// break ;
51081: GO 51085
// end ;
51083: GO 51046
51085: POP
51086: POP
// end ;
51087: LD_VAR 0 3
51091: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51092: LD_INT 0
51094: PPUSH
51095: PPUSH
51096: PPUSH
// pom := GetBase ( fac ) ;
51097: LD_ADDR_VAR 0 5
51101: PUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: CALL_OW 274
51111: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51112: LD_ADDR_VAR 0 4
51116: PUSH
51117: LD_VAR 0 2
51121: PUSH
51122: LD_INT 1
51124: ARRAY
51125: PPUSH
51126: LD_VAR 0 2
51130: PUSH
51131: LD_INT 2
51133: ARRAY
51134: PPUSH
51135: LD_VAR 0 2
51139: PUSH
51140: LD_INT 3
51142: ARRAY
51143: PPUSH
51144: LD_VAR 0 2
51148: PUSH
51149: LD_INT 4
51151: ARRAY
51152: PPUSH
51153: CALL_OW 449
51157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51158: LD_ADDR_VAR 0 3
51162: PUSH
51163: LD_VAR 0 5
51167: PPUSH
51168: LD_INT 1
51170: PPUSH
51171: CALL_OW 275
51175: PUSH
51176: LD_VAR 0 4
51180: PUSH
51181: LD_INT 1
51183: ARRAY
51184: GREATEREQUAL
51185: PUSH
51186: LD_VAR 0 5
51190: PPUSH
51191: LD_INT 2
51193: PPUSH
51194: CALL_OW 275
51198: PUSH
51199: LD_VAR 0 4
51203: PUSH
51204: LD_INT 2
51206: ARRAY
51207: GREATEREQUAL
51208: AND
51209: PUSH
51210: LD_VAR 0 5
51214: PPUSH
51215: LD_INT 3
51217: PPUSH
51218: CALL_OW 275
51222: PUSH
51223: LD_VAR 0 4
51227: PUSH
51228: LD_INT 3
51230: ARRAY
51231: GREATEREQUAL
51232: AND
51233: ST_TO_ADDR
// end ;
51234: LD_VAR 0 3
51238: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51239: LD_INT 0
51241: PPUSH
51242: PPUSH
51243: PPUSH
51244: PPUSH
// pom := GetBase ( building ) ;
51245: LD_ADDR_VAR 0 3
51249: PUSH
51250: LD_VAR 0 1
51254: PPUSH
51255: CALL_OW 274
51259: ST_TO_ADDR
// if not pom then
51260: LD_VAR 0 3
51264: NOT
51265: IFFALSE 51269
// exit ;
51267: GO 51439
// btype := GetBType ( building ) ;
51269: LD_ADDR_VAR 0 5
51273: PUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 266
51283: ST_TO_ADDR
// if btype = b_armoury then
51284: LD_VAR 0 5
51288: PUSH
51289: LD_INT 4
51291: EQUAL
51292: IFFALSE 51302
// btype := b_barracks ;
51294: LD_ADDR_VAR 0 5
51298: PUSH
51299: LD_INT 5
51301: ST_TO_ADDR
// if btype = b_depot then
51302: LD_VAR 0 5
51306: PUSH
51307: LD_INT 0
51309: EQUAL
51310: IFFALSE 51320
// btype := b_warehouse ;
51312: LD_ADDR_VAR 0 5
51316: PUSH
51317: LD_INT 1
51319: ST_TO_ADDR
// if btype = b_workshop then
51320: LD_VAR 0 5
51324: PUSH
51325: LD_INT 2
51327: EQUAL
51328: IFFALSE 51338
// btype := b_factory ;
51330: LD_ADDR_VAR 0 5
51334: PUSH
51335: LD_INT 3
51337: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51338: LD_ADDR_VAR 0 4
51342: PUSH
51343: LD_VAR 0 5
51347: PPUSH
51348: LD_VAR 0 1
51352: PPUSH
51353: CALL_OW 248
51357: PPUSH
51358: CALL_OW 450
51362: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51363: LD_ADDR_VAR 0 2
51367: PUSH
51368: LD_VAR 0 3
51372: PPUSH
51373: LD_INT 1
51375: PPUSH
51376: CALL_OW 275
51380: PUSH
51381: LD_VAR 0 4
51385: PUSH
51386: LD_INT 1
51388: ARRAY
51389: GREATEREQUAL
51390: PUSH
51391: LD_VAR 0 3
51395: PPUSH
51396: LD_INT 2
51398: PPUSH
51399: CALL_OW 275
51403: PUSH
51404: LD_VAR 0 4
51408: PUSH
51409: LD_INT 2
51411: ARRAY
51412: GREATEREQUAL
51413: AND
51414: PUSH
51415: LD_VAR 0 3
51419: PPUSH
51420: LD_INT 3
51422: PPUSH
51423: CALL_OW 275
51427: PUSH
51428: LD_VAR 0 4
51432: PUSH
51433: LD_INT 3
51435: ARRAY
51436: GREATEREQUAL
51437: AND
51438: ST_TO_ADDR
// end ;
51439: LD_VAR 0 2
51443: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51444: LD_INT 0
51446: PPUSH
51447: PPUSH
51448: PPUSH
// pom := GetBase ( building ) ;
51449: LD_ADDR_VAR 0 4
51453: PUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 274
51463: ST_TO_ADDR
// if not pom then
51464: LD_VAR 0 4
51468: NOT
51469: IFFALSE 51473
// exit ;
51471: GO 51574
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51473: LD_ADDR_VAR 0 5
51477: PUSH
51478: LD_VAR 0 2
51482: PPUSH
51483: LD_VAR 0 1
51487: PPUSH
51488: CALL_OW 248
51492: PPUSH
51493: CALL_OW 450
51497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51498: LD_ADDR_VAR 0 3
51502: PUSH
51503: LD_VAR 0 4
51507: PPUSH
51508: LD_INT 1
51510: PPUSH
51511: CALL_OW 275
51515: PUSH
51516: LD_VAR 0 5
51520: PUSH
51521: LD_INT 1
51523: ARRAY
51524: GREATEREQUAL
51525: PUSH
51526: LD_VAR 0 4
51530: PPUSH
51531: LD_INT 2
51533: PPUSH
51534: CALL_OW 275
51538: PUSH
51539: LD_VAR 0 5
51543: PUSH
51544: LD_INT 2
51546: ARRAY
51547: GREATEREQUAL
51548: AND
51549: PUSH
51550: LD_VAR 0 4
51554: PPUSH
51555: LD_INT 3
51557: PPUSH
51558: CALL_OW 275
51562: PUSH
51563: LD_VAR 0 5
51567: PUSH
51568: LD_INT 3
51570: ARRAY
51571: GREATEREQUAL
51572: AND
51573: ST_TO_ADDR
// end ;
51574: LD_VAR 0 3
51578: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51579: LD_INT 0
51581: PPUSH
51582: PPUSH
51583: PPUSH
51584: PPUSH
51585: PPUSH
51586: PPUSH
51587: PPUSH
51588: PPUSH
51589: PPUSH
51590: PPUSH
51591: PPUSH
// result := false ;
51592: LD_ADDR_VAR 0 8
51596: PUSH
51597: LD_INT 0
51599: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51600: LD_VAR 0 5
51604: NOT
51605: PUSH
51606: LD_VAR 0 1
51610: NOT
51611: OR
51612: PUSH
51613: LD_VAR 0 2
51617: NOT
51618: OR
51619: PUSH
51620: LD_VAR 0 3
51624: NOT
51625: OR
51626: IFFALSE 51630
// exit ;
51628: GO 52444
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51630: LD_ADDR_VAR 0 14
51634: PUSH
51635: LD_VAR 0 1
51639: PPUSH
51640: LD_VAR 0 2
51644: PPUSH
51645: LD_VAR 0 3
51649: PPUSH
51650: LD_VAR 0 4
51654: PPUSH
51655: LD_VAR 0 5
51659: PUSH
51660: LD_INT 1
51662: ARRAY
51663: PPUSH
51664: CALL_OW 248
51668: PPUSH
51669: LD_INT 0
51671: PPUSH
51672: CALL 53677 0 6
51676: ST_TO_ADDR
// if not hexes then
51677: LD_VAR 0 14
51681: NOT
51682: IFFALSE 51686
// exit ;
51684: GO 52444
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51686: LD_ADDR_VAR 0 17
51690: PUSH
51691: LD_VAR 0 5
51695: PPUSH
51696: LD_INT 22
51698: PUSH
51699: LD_VAR 0 13
51703: PPUSH
51704: CALL_OW 255
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 30
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 30
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PPUSH
51745: CALL_OW 72
51749: ST_TO_ADDR
// for i = 1 to hexes do
51750: LD_ADDR_VAR 0 9
51754: PUSH
51755: DOUBLE
51756: LD_INT 1
51758: DEC
51759: ST_TO_ADDR
51760: LD_VAR 0 14
51764: PUSH
51765: FOR_TO
51766: IFFALSE 52442
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51768: LD_ADDR_VAR 0 13
51772: PUSH
51773: LD_VAR 0 14
51777: PUSH
51778: LD_VAR 0 9
51782: ARRAY
51783: PUSH
51784: LD_INT 1
51786: ARRAY
51787: PPUSH
51788: LD_VAR 0 14
51792: PUSH
51793: LD_VAR 0 9
51797: ARRAY
51798: PUSH
51799: LD_INT 2
51801: ARRAY
51802: PPUSH
51803: CALL_OW 428
51807: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51808: LD_VAR 0 14
51812: PUSH
51813: LD_VAR 0 9
51817: ARRAY
51818: PUSH
51819: LD_INT 1
51821: ARRAY
51822: PPUSH
51823: LD_VAR 0 14
51827: PUSH
51828: LD_VAR 0 9
51832: ARRAY
51833: PUSH
51834: LD_INT 2
51836: ARRAY
51837: PPUSH
51838: CALL_OW 351
51842: PUSH
51843: LD_VAR 0 14
51847: PUSH
51848: LD_VAR 0 9
51852: ARRAY
51853: PUSH
51854: LD_INT 1
51856: ARRAY
51857: PPUSH
51858: LD_VAR 0 14
51862: PUSH
51863: LD_VAR 0 9
51867: ARRAY
51868: PUSH
51869: LD_INT 2
51871: ARRAY
51872: PPUSH
51873: CALL_OW 488
51877: NOT
51878: OR
51879: PUSH
51880: LD_VAR 0 13
51884: PPUSH
51885: CALL_OW 247
51889: PUSH
51890: LD_INT 3
51892: EQUAL
51893: OR
51894: IFFALSE 51900
// exit ;
51896: POP
51897: POP
51898: GO 52444
// if not tmp then
51900: LD_VAR 0 13
51904: NOT
51905: IFFALSE 51909
// continue ;
51907: GO 51765
// result := true ;
51909: LD_ADDR_VAR 0 8
51913: PUSH
51914: LD_INT 1
51916: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51917: LD_VAR 0 6
51921: PUSH
51922: LD_VAR 0 13
51926: PPUSH
51927: CALL_OW 247
51931: PUSH
51932: LD_INT 2
51934: EQUAL
51935: AND
51936: PUSH
51937: LD_VAR 0 13
51941: PPUSH
51942: CALL_OW 263
51946: PUSH
51947: LD_INT 1
51949: EQUAL
51950: AND
51951: IFFALSE 52115
// begin if IsDrivenBy ( tmp ) then
51953: LD_VAR 0 13
51957: PPUSH
51958: CALL_OW 311
51962: IFFALSE 51966
// continue ;
51964: GO 51765
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51966: LD_VAR 0 6
51970: PPUSH
51971: LD_INT 3
51973: PUSH
51974: LD_INT 60
51976: PUSH
51977: EMPTY
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 55
51989: PUSH
51990: EMPTY
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PPUSH
52001: CALL_OW 72
52005: IFFALSE 52113
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52007: LD_ADDR_VAR 0 18
52011: PUSH
52012: LD_VAR 0 6
52016: PPUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 60
52022: PUSH
52023: EMPTY
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 55
52035: PUSH
52036: EMPTY
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PPUSH
52047: CALL_OW 72
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: ST_TO_ADDR
// if IsInUnit ( driver ) then
52056: LD_VAR 0 18
52060: PPUSH
52061: CALL_OW 310
52065: IFFALSE 52076
// ComExit ( driver ) ;
52067: LD_VAR 0 18
52071: PPUSH
52072: CALL 77438 0 1
// AddComEnterUnit ( driver , tmp ) ;
52076: LD_VAR 0 18
52080: PPUSH
52081: LD_VAR 0 13
52085: PPUSH
52086: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52090: LD_VAR 0 18
52094: PPUSH
52095: LD_VAR 0 7
52099: PPUSH
52100: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52104: LD_VAR 0 18
52108: PPUSH
52109: CALL_OW 181
// end ; continue ;
52113: GO 51765
// end ; if not cleaners or not tmp in cleaners then
52115: LD_VAR 0 6
52119: NOT
52120: PUSH
52121: LD_VAR 0 13
52125: PUSH
52126: LD_VAR 0 6
52130: IN
52131: NOT
52132: OR
52133: IFFALSE 52440
// begin if dep then
52135: LD_VAR 0 17
52139: IFFALSE 52275
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52141: LD_ADDR_VAR 0 16
52145: PUSH
52146: LD_VAR 0 17
52150: PUSH
52151: LD_INT 1
52153: ARRAY
52154: PPUSH
52155: CALL_OW 250
52159: PPUSH
52160: LD_VAR 0 17
52164: PUSH
52165: LD_INT 1
52167: ARRAY
52168: PPUSH
52169: CALL_OW 254
52173: PPUSH
52174: LD_INT 5
52176: PPUSH
52177: CALL_OW 272
52181: PUSH
52182: LD_VAR 0 17
52186: PUSH
52187: LD_INT 1
52189: ARRAY
52190: PPUSH
52191: CALL_OW 251
52195: PPUSH
52196: LD_VAR 0 17
52200: PUSH
52201: LD_INT 1
52203: ARRAY
52204: PPUSH
52205: CALL_OW 254
52209: PPUSH
52210: LD_INT 5
52212: PPUSH
52213: CALL_OW 273
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52222: LD_VAR 0 16
52226: PUSH
52227: LD_INT 1
52229: ARRAY
52230: PPUSH
52231: LD_VAR 0 16
52235: PUSH
52236: LD_INT 2
52238: ARRAY
52239: PPUSH
52240: CALL_OW 488
52244: IFFALSE 52275
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52246: LD_VAR 0 13
52250: PPUSH
52251: LD_VAR 0 16
52255: PUSH
52256: LD_INT 1
52258: ARRAY
52259: PPUSH
52260: LD_VAR 0 16
52264: PUSH
52265: LD_INT 2
52267: ARRAY
52268: PPUSH
52269: CALL_OW 111
// continue ;
52273: GO 51765
// end ; end ; r := GetDir ( tmp ) ;
52275: LD_ADDR_VAR 0 15
52279: PUSH
52280: LD_VAR 0 13
52284: PPUSH
52285: CALL_OW 254
52289: ST_TO_ADDR
// if r = 5 then
52290: LD_VAR 0 15
52294: PUSH
52295: LD_INT 5
52297: EQUAL
52298: IFFALSE 52308
// r := 0 ;
52300: LD_ADDR_VAR 0 15
52304: PUSH
52305: LD_INT 0
52307: ST_TO_ADDR
// for j = r to 5 do
52308: LD_ADDR_VAR 0 10
52312: PUSH
52313: DOUBLE
52314: LD_VAR 0 15
52318: DEC
52319: ST_TO_ADDR
52320: LD_INT 5
52322: PUSH
52323: FOR_TO
52324: IFFALSE 52438
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52326: LD_ADDR_VAR 0 11
52330: PUSH
52331: LD_VAR 0 13
52335: PPUSH
52336: CALL_OW 250
52340: PPUSH
52341: LD_VAR 0 10
52345: PPUSH
52346: LD_INT 2
52348: PPUSH
52349: CALL_OW 272
52353: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52354: LD_ADDR_VAR 0 12
52358: PUSH
52359: LD_VAR 0 13
52363: PPUSH
52364: CALL_OW 251
52368: PPUSH
52369: LD_VAR 0 10
52373: PPUSH
52374: LD_INT 2
52376: PPUSH
52377: CALL_OW 273
52381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52382: LD_VAR 0 11
52386: PPUSH
52387: LD_VAR 0 12
52391: PPUSH
52392: CALL_OW 488
52396: PUSH
52397: LD_VAR 0 11
52401: PPUSH
52402: LD_VAR 0 12
52406: PPUSH
52407: CALL_OW 428
52411: NOT
52412: AND
52413: IFFALSE 52436
// begin ComMoveXY ( tmp , _x , _y ) ;
52415: LD_VAR 0 13
52419: PPUSH
52420: LD_VAR 0 11
52424: PPUSH
52425: LD_VAR 0 12
52429: PPUSH
52430: CALL_OW 111
// break ;
52434: GO 52438
// end ; end ;
52436: GO 52323
52438: POP
52439: POP
// end ; end ;
52440: GO 51765
52442: POP
52443: POP
// end ;
52444: LD_VAR 0 8
52448: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52449: LD_INT 0
52451: PPUSH
// result := true ;
52452: LD_ADDR_VAR 0 3
52456: PUSH
52457: LD_INT 1
52459: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52460: LD_VAR 0 2
52464: PUSH
52465: LD_INT 24
52467: DOUBLE
52468: EQUAL
52469: IFTRUE 52479
52471: LD_INT 33
52473: DOUBLE
52474: EQUAL
52475: IFTRUE 52479
52477: GO 52504
52479: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52480: LD_ADDR_VAR 0 3
52484: PUSH
52485: LD_INT 32
52487: PPUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: CALL_OW 321
52497: PUSH
52498: LD_INT 2
52500: EQUAL
52501: ST_TO_ADDR
52502: GO 52820
52504: LD_INT 20
52506: DOUBLE
52507: EQUAL
52508: IFTRUE 52512
52510: GO 52537
52512: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52513: LD_ADDR_VAR 0 3
52517: PUSH
52518: LD_INT 6
52520: PPUSH
52521: LD_VAR 0 1
52525: PPUSH
52526: CALL_OW 321
52530: PUSH
52531: LD_INT 2
52533: EQUAL
52534: ST_TO_ADDR
52535: GO 52820
52537: LD_INT 22
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52551
52543: LD_INT 36
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52551
52549: GO 52576
52551: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52552: LD_ADDR_VAR 0 3
52556: PUSH
52557: LD_INT 15
52559: PPUSH
52560: LD_VAR 0 1
52564: PPUSH
52565: CALL_OW 321
52569: PUSH
52570: LD_INT 2
52572: EQUAL
52573: ST_TO_ADDR
52574: GO 52820
52576: LD_INT 30
52578: DOUBLE
52579: EQUAL
52580: IFTRUE 52584
52582: GO 52609
52584: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52585: LD_ADDR_VAR 0 3
52589: PUSH
52590: LD_INT 20
52592: PPUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 321
52602: PUSH
52603: LD_INT 2
52605: EQUAL
52606: ST_TO_ADDR
52607: GO 52820
52609: LD_INT 28
52611: DOUBLE
52612: EQUAL
52613: IFTRUE 52623
52615: LD_INT 21
52617: DOUBLE
52618: EQUAL
52619: IFTRUE 52623
52621: GO 52648
52623: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52624: LD_ADDR_VAR 0 3
52628: PUSH
52629: LD_INT 21
52631: PPUSH
52632: LD_VAR 0 1
52636: PPUSH
52637: CALL_OW 321
52641: PUSH
52642: LD_INT 2
52644: EQUAL
52645: ST_TO_ADDR
52646: GO 52820
52648: LD_INT 16
52650: DOUBLE
52651: EQUAL
52652: IFTRUE 52656
52654: GO 52681
52656: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52657: LD_ADDR_VAR 0 3
52661: PUSH
52662: LD_INT 84
52664: PPUSH
52665: LD_VAR 0 1
52669: PPUSH
52670: CALL_OW 321
52674: PUSH
52675: LD_INT 2
52677: EQUAL
52678: ST_TO_ADDR
52679: GO 52820
52681: LD_INT 19
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52695
52687: LD_INT 23
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52695
52693: GO 52720
52695: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52696: LD_ADDR_VAR 0 3
52700: PUSH
52701: LD_INT 83
52703: PPUSH
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 321
52713: PUSH
52714: LD_INT 2
52716: EQUAL
52717: ST_TO_ADDR
52718: GO 52820
52720: LD_INT 17
52722: DOUBLE
52723: EQUAL
52724: IFTRUE 52728
52726: GO 52753
52728: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52729: LD_ADDR_VAR 0 3
52733: PUSH
52734: LD_INT 39
52736: PPUSH
52737: LD_VAR 0 1
52741: PPUSH
52742: CALL_OW 321
52746: PUSH
52747: LD_INT 2
52749: EQUAL
52750: ST_TO_ADDR
52751: GO 52820
52753: LD_INT 18
52755: DOUBLE
52756: EQUAL
52757: IFTRUE 52761
52759: GO 52786
52761: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52762: LD_ADDR_VAR 0 3
52766: PUSH
52767: LD_INT 40
52769: PPUSH
52770: LD_VAR 0 1
52774: PPUSH
52775: CALL_OW 321
52779: PUSH
52780: LD_INT 2
52782: EQUAL
52783: ST_TO_ADDR
52784: GO 52820
52786: LD_INT 27
52788: DOUBLE
52789: EQUAL
52790: IFTRUE 52794
52792: GO 52819
52794: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52795: LD_ADDR_VAR 0 3
52799: PUSH
52800: LD_INT 35
52802: PPUSH
52803: LD_VAR 0 1
52807: PPUSH
52808: CALL_OW 321
52812: PUSH
52813: LD_INT 2
52815: EQUAL
52816: ST_TO_ADDR
52817: GO 52820
52819: POP
// end ;
52820: LD_VAR 0 3
52824: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52825: LD_INT 0
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
// result := false ;
52838: LD_ADDR_VAR 0 6
52842: PUSH
52843: LD_INT 0
52845: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52846: LD_VAR 0 1
52850: NOT
52851: PUSH
52852: LD_VAR 0 1
52856: PPUSH
52857: CALL_OW 266
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: IN
52872: NOT
52873: OR
52874: PUSH
52875: LD_VAR 0 2
52879: NOT
52880: OR
52881: PUSH
52882: LD_VAR 0 5
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: LD_INT 4
52901: PUSH
52902: LD_INT 5
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: IN
52913: NOT
52914: OR
52915: PUSH
52916: LD_VAR 0 3
52920: PPUSH
52921: LD_VAR 0 4
52925: PPUSH
52926: CALL_OW 488
52930: NOT
52931: OR
52932: IFFALSE 52936
// exit ;
52934: GO 53672
// side := GetSide ( depot ) ;
52936: LD_ADDR_VAR 0 9
52940: PUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: CALL_OW 255
52950: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52951: LD_VAR 0 9
52955: PPUSH
52956: LD_VAR 0 2
52960: PPUSH
52961: CALL 52449 0 2
52965: NOT
52966: IFFALSE 52970
// exit ;
52968: GO 53672
// pom := GetBase ( depot ) ;
52970: LD_ADDR_VAR 0 10
52974: PUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL_OW 274
52984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52985: LD_ADDR_VAR 0 11
52989: PUSH
52990: LD_VAR 0 2
52994: PPUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 248
53004: PPUSH
53005: CALL_OW 450
53009: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53010: LD_VAR 0 10
53014: PPUSH
53015: LD_INT 1
53017: PPUSH
53018: CALL_OW 275
53022: PUSH
53023: LD_VAR 0 11
53027: PUSH
53028: LD_INT 1
53030: ARRAY
53031: GREATEREQUAL
53032: PUSH
53033: LD_VAR 0 10
53037: PPUSH
53038: LD_INT 2
53040: PPUSH
53041: CALL_OW 275
53045: PUSH
53046: LD_VAR 0 11
53050: PUSH
53051: LD_INT 2
53053: ARRAY
53054: GREATEREQUAL
53055: AND
53056: PUSH
53057: LD_VAR 0 10
53061: PPUSH
53062: LD_INT 3
53064: PPUSH
53065: CALL_OW 275
53069: PUSH
53070: LD_VAR 0 11
53074: PUSH
53075: LD_INT 3
53077: ARRAY
53078: GREATEREQUAL
53079: AND
53080: NOT
53081: IFFALSE 53085
// exit ;
53083: GO 53672
// if GetBType ( depot ) = b_depot then
53085: LD_VAR 0 1
53089: PPUSH
53090: CALL_OW 266
53094: PUSH
53095: LD_INT 0
53097: EQUAL
53098: IFFALSE 53110
// dist := 28 else
53100: LD_ADDR_VAR 0 14
53104: PUSH
53105: LD_INT 28
53107: ST_TO_ADDR
53108: GO 53118
// dist := 36 ;
53110: LD_ADDR_VAR 0 14
53114: PUSH
53115: LD_INT 36
53117: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53118: LD_VAR 0 1
53122: PPUSH
53123: LD_VAR 0 3
53127: PPUSH
53128: LD_VAR 0 4
53132: PPUSH
53133: CALL_OW 297
53137: PUSH
53138: LD_VAR 0 14
53142: GREATER
53143: IFFALSE 53147
// exit ;
53145: GO 53672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53147: LD_ADDR_VAR 0 12
53151: PUSH
53152: LD_VAR 0 2
53156: PPUSH
53157: LD_VAR 0 3
53161: PPUSH
53162: LD_VAR 0 4
53166: PPUSH
53167: LD_VAR 0 5
53171: PPUSH
53172: LD_VAR 0 1
53176: PPUSH
53177: CALL_OW 248
53181: PPUSH
53182: LD_INT 0
53184: PPUSH
53185: CALL 53677 0 6
53189: ST_TO_ADDR
// if not hexes then
53190: LD_VAR 0 12
53194: NOT
53195: IFFALSE 53199
// exit ;
53197: GO 53672
// hex := GetHexInfo ( x , y ) ;
53199: LD_ADDR_VAR 0 15
53203: PUSH
53204: LD_VAR 0 3
53208: PPUSH
53209: LD_VAR 0 4
53213: PPUSH
53214: CALL_OW 546
53218: ST_TO_ADDR
// if hex [ 1 ] then
53219: LD_VAR 0 15
53223: PUSH
53224: LD_INT 1
53226: ARRAY
53227: IFFALSE 53231
// exit ;
53229: GO 53672
// height := hex [ 2 ] ;
53231: LD_ADDR_VAR 0 13
53235: PUSH
53236: LD_VAR 0 15
53240: PUSH
53241: LD_INT 2
53243: ARRAY
53244: ST_TO_ADDR
// for i = 1 to hexes do
53245: LD_ADDR_VAR 0 7
53249: PUSH
53250: DOUBLE
53251: LD_INT 1
53253: DEC
53254: ST_TO_ADDR
53255: LD_VAR 0 12
53259: PUSH
53260: FOR_TO
53261: IFFALSE 53591
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53263: LD_VAR 0 12
53267: PUSH
53268: LD_VAR 0 7
53272: ARRAY
53273: PUSH
53274: LD_INT 1
53276: ARRAY
53277: PPUSH
53278: LD_VAR 0 12
53282: PUSH
53283: LD_VAR 0 7
53287: ARRAY
53288: PUSH
53289: LD_INT 2
53291: ARRAY
53292: PPUSH
53293: CALL_OW 488
53297: NOT
53298: PUSH
53299: LD_VAR 0 12
53303: PUSH
53304: LD_VAR 0 7
53308: ARRAY
53309: PUSH
53310: LD_INT 1
53312: ARRAY
53313: PPUSH
53314: LD_VAR 0 12
53318: PUSH
53319: LD_VAR 0 7
53323: ARRAY
53324: PUSH
53325: LD_INT 2
53327: ARRAY
53328: PPUSH
53329: CALL_OW 428
53333: PUSH
53334: LD_INT 0
53336: GREATER
53337: OR
53338: PUSH
53339: LD_VAR 0 12
53343: PUSH
53344: LD_VAR 0 7
53348: ARRAY
53349: PUSH
53350: LD_INT 1
53352: ARRAY
53353: PPUSH
53354: LD_VAR 0 12
53358: PUSH
53359: LD_VAR 0 7
53363: ARRAY
53364: PUSH
53365: LD_INT 2
53367: ARRAY
53368: PPUSH
53369: CALL_OW 351
53373: OR
53374: IFFALSE 53380
// exit ;
53376: POP
53377: POP
53378: GO 53672
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53380: LD_ADDR_VAR 0 8
53384: PUSH
53385: LD_VAR 0 12
53389: PUSH
53390: LD_VAR 0 7
53394: ARRAY
53395: PUSH
53396: LD_INT 1
53398: ARRAY
53399: PPUSH
53400: LD_VAR 0 12
53404: PUSH
53405: LD_VAR 0 7
53409: ARRAY
53410: PUSH
53411: LD_INT 2
53413: ARRAY
53414: PPUSH
53415: CALL_OW 546
53419: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53420: LD_VAR 0 8
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PUSH
53429: LD_VAR 0 8
53433: PUSH
53434: LD_INT 2
53436: ARRAY
53437: PUSH
53438: LD_VAR 0 13
53442: PUSH
53443: LD_INT 2
53445: PLUS
53446: GREATER
53447: OR
53448: PUSH
53449: LD_VAR 0 8
53453: PUSH
53454: LD_INT 2
53456: ARRAY
53457: PUSH
53458: LD_VAR 0 13
53462: PUSH
53463: LD_INT 2
53465: MINUS
53466: LESS
53467: OR
53468: PUSH
53469: LD_VAR 0 8
53473: PUSH
53474: LD_INT 3
53476: ARRAY
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 8
53483: PUSH
53484: LD_INT 9
53486: PUSH
53487: LD_INT 10
53489: PUSH
53490: LD_INT 11
53492: PUSH
53493: LD_INT 12
53495: PUSH
53496: LD_INT 13
53498: PUSH
53499: LD_INT 16
53501: PUSH
53502: LD_INT 17
53504: PUSH
53505: LD_INT 18
53507: PUSH
53508: LD_INT 19
53510: PUSH
53511: LD_INT 20
53513: PUSH
53514: LD_INT 21
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: IN
53532: NOT
53533: OR
53534: PUSH
53535: LD_VAR 0 8
53539: PUSH
53540: LD_INT 5
53542: ARRAY
53543: NOT
53544: OR
53545: PUSH
53546: LD_VAR 0 8
53550: PUSH
53551: LD_INT 6
53553: ARRAY
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 7
53563: PUSH
53564: LD_INT 9
53566: PUSH
53567: LD_INT 10
53569: PUSH
53570: LD_INT 11
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: IN
53581: NOT
53582: OR
53583: IFFALSE 53589
// exit ;
53585: POP
53586: POP
53587: GO 53672
// end ;
53589: GO 53260
53591: POP
53592: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53593: LD_VAR 0 9
53597: PPUSH
53598: LD_VAR 0 3
53602: PPUSH
53603: LD_VAR 0 4
53607: PPUSH
53608: LD_INT 20
53610: PPUSH
53611: CALL 45624 0 4
53615: PUSH
53616: LD_INT 4
53618: ARRAY
53619: IFFALSE 53623
// exit ;
53621: GO 53672
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53623: LD_VAR 0 2
53627: PUSH
53628: LD_INT 29
53630: PUSH
53631: LD_INT 30
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: IN
53638: PUSH
53639: LD_VAR 0 3
53643: PPUSH
53644: LD_VAR 0 4
53648: PPUSH
53649: LD_VAR 0 9
53653: PPUSH
53654: CALL_OW 440
53658: NOT
53659: AND
53660: IFFALSE 53664
// exit ;
53662: GO 53672
// result := true ;
53664: LD_ADDR_VAR 0 6
53668: PUSH
53669: LD_INT 1
53671: ST_TO_ADDR
// end ;
53672: LD_VAR 0 6
53676: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53677: LD_INT 0
53679: PPUSH
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
53687: PPUSH
53688: PPUSH
53689: PPUSH
53690: PPUSH
53691: PPUSH
53692: PPUSH
53693: PPUSH
53694: PPUSH
53695: PPUSH
53696: PPUSH
53697: PPUSH
53698: PPUSH
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
53703: PPUSH
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
// result = [ ] ;
53737: LD_ADDR_VAR 0 7
53741: PUSH
53742: EMPTY
53743: ST_TO_ADDR
// temp_list = [ ] ;
53744: LD_ADDR_VAR 0 9
53748: PUSH
53749: EMPTY
53750: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53751: LD_VAR 0 4
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: IN
53782: NOT
53783: PUSH
53784: LD_VAR 0 1
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: IN
53799: PUSH
53800: LD_VAR 0 5
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: IN
53819: NOT
53820: AND
53821: OR
53822: IFFALSE 53826
// exit ;
53824: GO 72217
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53826: LD_VAR 0 1
53830: PUSH
53831: LD_INT 6
53833: PUSH
53834: LD_INT 7
53836: PUSH
53837: LD_INT 8
53839: PUSH
53840: LD_INT 13
53842: PUSH
53843: LD_INT 12
53845: PUSH
53846: LD_INT 15
53848: PUSH
53849: LD_INT 11
53851: PUSH
53852: LD_INT 14
53854: PUSH
53855: LD_INT 10
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: IN
53869: IFFALSE 53879
// btype = b_lab ;
53871: LD_ADDR_VAR 0 1
53875: PUSH
53876: LD_INT 6
53878: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53879: LD_VAR 0 6
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: IN
53898: NOT
53899: PUSH
53900: LD_VAR 0 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: LD_INT 6
53919: PUSH
53920: LD_INT 36
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: LD_INT 5
53928: PUSH
53929: LD_INT 31
53931: PUSH
53932: LD_INT 32
53934: PUSH
53935: LD_INT 33
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: IN
53951: NOT
53952: PUSH
53953: LD_VAR 0 6
53957: PUSH
53958: LD_INT 1
53960: EQUAL
53961: AND
53962: OR
53963: PUSH
53964: LD_VAR 0 1
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: IN
53979: NOT
53980: PUSH
53981: LD_VAR 0 6
53985: PUSH
53986: LD_INT 2
53988: EQUAL
53989: AND
53990: OR
53991: IFFALSE 54001
// mode = 0 ;
53993: LD_ADDR_VAR 0 6
53997: PUSH
53998: LD_INT 0
54000: ST_TO_ADDR
// case mode of 0 :
54001: LD_VAR 0 6
54005: PUSH
54006: LD_INT 0
54008: DOUBLE
54009: EQUAL
54010: IFTRUE 54014
54012: GO 65467
54014: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54015: LD_ADDR_VAR 0 11
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54208: LD_ADDR_VAR 0 12
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54404: LD_ADDR_VAR 0 13
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54603: LD_ADDR_VAR 0 14
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54799: LD_ADDR_VAR 0 15
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54992: LD_ADDR_VAR 0 16
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55185: LD_ADDR_VAR 0 17
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55415: LD_ADDR_VAR 0 18
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55645: LD_ADDR_VAR 0 19
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55875: LD_ADDR_VAR 0 20
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56105: LD_ADDR_VAR 0 21
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56335: LD_ADDR_VAR 0 22
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56565: LD_ADDR_VAR 0 23
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56845: LD_ADDR_VAR 0 24
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57121: LD_ADDR_VAR 0 25
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57395: LD_ADDR_VAR 0 26
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57671: LD_ADDR_VAR 0 27
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57951: LD_ADDR_VAR 0 28
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58233: LD_ADDR_VAR 0 29
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58512: LD_ADDR_VAR 0 30
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58790: LD_ADDR_VAR 0 31
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59068: LD_ADDR_VAR 0 32
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59346: LD_ADDR_VAR 0 33
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59625: LD_ADDR_VAR 0 34
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59905: LD_ADDR_VAR 0 35
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60017: LD_ADDR_VAR 0 36
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60129: LD_ADDR_VAR 0 37
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60241: LD_ADDR_VAR 0 38
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60353: LD_ADDR_VAR 0 39
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60465: LD_ADDR_VAR 0 40
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60577: LD_ADDR_VAR 0 41
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60927: LD_ADDR_VAR 0 42
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 3
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61277: LD_ADDR_VAR 0 43
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61625: LD_ADDR_VAR 0 44
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: LD_INT 2
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: LD_INT 3
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61975: LD_ADDR_VAR 0 45
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62325: LD_ADDR_VAR 0 46
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 2
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 3
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62673: LD_ADDR_VAR 0 47
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62824: LD_ADDR_VAR 0 48
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62971: LD_ADDR_VAR 0 49
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63115: LD_ADDR_VAR 0 50
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63259: LD_ADDR_VAR 0 51
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63406: LD_ADDR_VAR 0 52
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63557: LD_ADDR_VAR 0 53
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 2
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63787: LD_ADDR_VAR 0 54
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64017: LD_ADDR_VAR 0 55
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64247: LD_ADDR_VAR 0 56
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64477: LD_ADDR_VAR 0 57
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64707: LD_ADDR_VAR 0 58
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64937: LD_ADDR_VAR 0 59
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65025: LD_ADDR_VAR 0 60
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65113: LD_ADDR_VAR 0 61
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65201: LD_ADDR_VAR 0 62
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65289: LD_ADDR_VAR 0 63
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65377: LD_ADDR_VAR 0 64
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// end ; 1 :
65465: GO 71362
65467: LD_INT 1
65469: DOUBLE
65470: EQUAL
65471: IFTRUE 65475
65473: GO 68098
65475: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65476: LD_ADDR_VAR 0 11
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 2
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65520: LD_ADDR_VAR 0 12
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 3
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: LIST
65560: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65561: LD_ADDR_VAR 0 13
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 2
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65601: LD_ADDR_VAR 0 14
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 3
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65642: LD_ADDR_VAR 0 15
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65686: LD_ADDR_VAR 0 16
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: NEG
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: LIST
65731: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65732: LD_ADDR_VAR 0 17
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: LD_INT 3
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 2
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65776: LD_ADDR_VAR 0 18
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65817: LD_ADDR_VAR 0 19
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65857: LD_ADDR_VAR 0 20
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 2
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65898: LD_ADDR_VAR 0 21
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65942: LD_ADDR_VAR 0 22
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: LD_INT 3
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: LIST
65987: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65988: LD_ADDR_VAR 0 23
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: LD_INT 3
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66032: LD_ADDR_VAR 0 24
66036: PUSH
66037: LD_INT 3
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 4
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66073: LD_ADDR_VAR 0 25
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: LD_INT 4
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66113: LD_ADDR_VAR 0 26
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: LD_INT 4
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66154: LD_ADDR_VAR 0 27
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 4
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66198: LD_ADDR_VAR 0 28
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: LD_INT 3
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: LD_INT 4
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 4
66229: NEG
66230: PUSH
66231: LD_INT 3
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: LIST
66243: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66244: LD_ADDR_VAR 0 29
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 3
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 4
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 5
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: LD_INT 5
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: LD_INT 4
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 6
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: LD_INT 6
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 5
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66399: LD_ADDR_VAR 0 30
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 3
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 4
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 4
66458: PUSH
66459: LD_INT 1
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 5
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 5
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 6
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 6
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66542: LD_ADDR_VAR 0 31
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: LD_INT 4
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 4
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 5
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: LD_INT 5
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 4
66629: PUSH
66630: LD_INT 5
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 6
66639: PUSH
66640: LD_INT 5
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 6
66649: PUSH
66650: LD_INT 6
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: LD_INT 6
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66681: LD_ADDR_VAR 0 32
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 3
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 4
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 4
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 5
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 5
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 4
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 6
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 6
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 5
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66824: LD_ADDR_VAR 0 33
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 4
66876: NEG
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 4
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 4
66899: NEG
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 5
66910: NEG
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 5
66921: NEG
66922: PUSH
66923: LD_INT 1
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 5
66933: NEG
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 6
66944: NEG
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 6
66955: NEG
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66979: LD_ADDR_VAR 0 34
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: LD_INT 3
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: LD_INT 3
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: NEG
67023: PUSH
67024: LD_INT 4
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 4
67034: NEG
67035: PUSH
67036: LD_INT 3
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 4
67046: NEG
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 4
67058: NEG
67059: PUSH
67060: LD_INT 5
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 5
67070: NEG
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 5
67082: NEG
67083: PUSH
67084: LD_INT 5
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 5
67094: NEG
67095: PUSH
67096: LD_INT 6
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 6
67106: NEG
67107: PUSH
67108: LD_INT 5
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 6
67118: NEG
67119: PUSH
67120: LD_INT 6
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67142: LD_ADDR_VAR 0 41
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67186: LD_ADDR_VAR 0 42
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: LD_INT 1
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67227: LD_ADDR_VAR 0 43
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 2
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67267: LD_ADDR_VAR 0 44
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67308: LD_ADDR_VAR 0 45
67312: PUSH
67313: LD_INT 2
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: NEG
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67352: LD_ADDR_VAR 0 46
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 3
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67398: LD_ADDR_VAR 0 47
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67431: LD_ADDR_VAR 0 48
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 2
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67462: LD_ADDR_VAR 0 49
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67491: LD_ADDR_VAR 0 50
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67520: LD_ADDR_VAR 0 51
67524: PUSH
67525: LD_INT 1
67527: NEG
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67551: LD_ADDR_VAR 0 52
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: NEG
67571: PUSH
67572: LD_INT 2
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67584: LD_ADDR_VAR 0 53
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67628: LD_ADDR_VAR 0 54
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67669: LD_ADDR_VAR 0 55
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: LD_INT 3
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67709: LD_ADDR_VAR 0 56
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67750: LD_ADDR_VAR 0 57
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 3
67768: NEG
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 3
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67794: LD_ADDR_VAR 0 58
67798: PUSH
67799: LD_INT 2
67801: NEG
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: LD_INT 2
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67840: LD_ADDR_VAR 0 59
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: LD_INT 2
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 1
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67884: LD_ADDR_VAR 0 60
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67925: LD_ADDR_VAR 0 61
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: LIST
67964: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67965: LD_ADDR_VAR 0 62
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68006: LD_ADDR_VAR 0 63
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68050: LD_ADDR_VAR 0 64
68054: PUSH
68055: LD_INT 1
68057: NEG
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 2
68081: NEG
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// end ; 2 :
68096: GO 71362
68098: LD_INT 2
68100: DOUBLE
68101: EQUAL
68102: IFTRUE 68106
68104: GO 71361
68106: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68107: LD_ADDR_VAR 0 29
68111: PUSH
68112: LD_INT 4
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 4
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 5
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 5
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 3
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 5
68197: PUSH
68198: LD_INT 2
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: LD_INT 3
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 4
68237: PUSH
68238: LD_INT 4
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: LD_INT 4
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: LD_INT 3
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: LD_INT 4
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 4
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 3
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: PUSH
68318: LD_INT 4
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: LD_INT 5
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 5
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 4
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 5
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: LD_INT 3
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 2
68413: NEG
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 2
68481: NEG
68482: PUSH
68483: LD_INT 2
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 4
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 4
68504: NEG
68505: PUSH
68506: LD_INT 5
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 3
68516: NEG
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: LD_INT 3
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 4
68540: NEG
68541: PUSH
68542: LD_INT 3
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: NEG
68553: PUSH
68554: LD_INT 4
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 5
68564: NEG
68565: PUSH
68566: LD_INT 5
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: LD_INT 5
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 5
68588: NEG
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68645: LD_ADDR_VAR 0 30
68649: PUSH
68650: LD_INT 4
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 4
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 5
68672: PUSH
68673: LD_INT 4
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 5
68682: PUSH
68683: LD_INT 5
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: LD_INT 5
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: LD_INT 4
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: LD_INT 3
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 5
68722: PUSH
68723: LD_INT 3
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: PUSH
68733: LD_INT 5
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 3
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 2
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 1
68762: PUSH
68763: LD_INT 3
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: LD_INT 4
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 4
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 2
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 4
68835: NEG
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 4
68846: NEG
68847: PUSH
68848: LD_INT 1
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 3
68858: NEG
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: LD_INT 1
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 5
68891: NEG
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: NEG
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 5
68914: NEG
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: NEG
68927: PUSH
68928: LD_INT 2
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: NEG
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: LD_INT 4
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 2
68973: NEG
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 3
68985: NEG
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 4
68997: NEG
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 4
69009: NEG
69010: PUSH
69011: LD_INT 4
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 2
69021: NEG
69022: PUSH
69023: LD_INT 4
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 4
69033: NEG
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 4
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 5
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 1
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: LD_INT 5
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 2
69135: NEG
69136: PUSH
69137: LD_INT 5
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69192: LD_ADDR_VAR 0 31
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: LD_INT 4
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: LD_INT 5
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 5
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: LD_INT 4
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: LD_INT 3
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 2
69271: PUSH
69272: LD_INT 5
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: LD_INT 3
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 3
69292: NEG
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: LD_INT 1
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 4
69371: NEG
69372: PUSH
69373: LD_INT 2
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 4
69394: NEG
69395: PUSH
69396: LD_INT 4
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: LD_INT 5
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: NEG
69431: PUSH
69432: LD_INT 3
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 4
69442: NEG
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 5
69466: NEG
69467: PUSH
69468: LD_INT 5
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: NEG
69479: PUSH
69480: LD_INT 5
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 5
69490: NEG
69491: PUSH
69492: LD_INT 3
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 4
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: LD_INT 3
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: LD_INT 2
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: NEG
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: LD_INT 4
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 2
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PUSH
69594: LD_INT 4
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: LD_INT 1
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 5
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 5
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 4
69645: PUSH
69646: LD_INT 1
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 3
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 5
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69742: LD_ADDR_VAR 0 32
69746: PUSH
69747: LD_INT 4
69749: NEG
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 4
69760: NEG
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: NEG
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 4
69794: NEG
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: NEG
69806: PUSH
69807: LD_INT 0
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 5
69816: NEG
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 5
69828: NEG
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 3
69840: NEG
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: LD_INT 4
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 2
69887: NEG
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 4
69923: NEG
69924: PUSH
69925: LD_INT 4
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 4
69947: NEG
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: LD_INT 4
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: LD_INT 5
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: PUSH
69982: LD_INT 4
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: PUSH
69993: LD_INT 3
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: LD_INT 3
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: NEG
70015: PUSH
70016: LD_INT 4
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 1
70026: NEG
70027: PUSH
70028: LD_INT 5
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 2
70038: PUSH
70039: LD_INT 3
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 2
70049: NEG
70050: PUSH
70051: LD_INT 5
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 1
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 4
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 4
70092: PUSH
70093: LD_INT 1
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: LD_INT 1
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 2
70122: PUSH
70123: LD_INT 1
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 2
70133: PUSH
70134: LD_INT 2
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: LD_INT 4
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 5
70184: PUSH
70185: LD_INT 5
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 4
70194: PUSH
70195: LD_INT 5
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 3
70204: PUSH
70205: LD_INT 4
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 3
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: PUSH
70225: LD_INT 3
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: LD_INT 5
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70289: LD_ADDR_VAR 0 33
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 4
70308: NEG
70309: PUSH
70310: LD_INT 5
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 5
70368: NEG
70369: PUSH
70370: LD_INT 5
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 3
70380: NEG
70381: PUSH
70382: LD_INT 5
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: LD_INT 3
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: LD_INT 3
70407: NEG
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_INT 4
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: LD_INT 3
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 1
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: LD_INT 3
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: LD_INT 4
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: LD_INT 2
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 2
70494: NEG
70495: PUSH
70496: LD_INT 4
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 4
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: LD_INT 1
70519: NEG
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 5
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 5
70537: PUSH
70538: LD_INT 1
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 4
70547: PUSH
70548: LD_INT 1
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: LD_INT 2
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 5
70589: PUSH
70590: LD_INT 2
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 4
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 4
70629: PUSH
70630: LD_INT 4
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: LD_INT 4
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 2
70649: PUSH
70650: LD_INT 3
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: LD_INT 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 4
70669: PUSH
70670: LD_INT 2
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: LD_INT 4
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 4
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: LD_INT 4
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 1
70719: PUSH
70720: LD_INT 5
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 5
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: LD_INT 4
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 1
70750: NEG
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 2
70761: PUSH
70762: LD_INT 5
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: LD_INT 3
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70827: LD_ADDR_VAR 0 34
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 4
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: LD_INT 5
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 4
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: LD_INT 3
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: LD_INT 4
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 1
70901: NEG
70902: PUSH
70903: LD_INT 5
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 2
70913: PUSH
70914: LD_INT 3
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 2
70924: NEG
70925: PUSH
70926: LD_INT 5
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 3
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 3
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 4
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 4
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 2
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 2
71008: PUSH
71009: LD_INT 2
71011: NEG
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 4
71019: PUSH
71020: LD_INT 2
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 4
71029: PUSH
71030: LD_INT 4
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 4
71039: PUSH
71040: LD_INT 3
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 5
71049: PUSH
71050: LD_INT 4
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 5
71059: PUSH
71060: LD_INT 5
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 4
71069: PUSH
71070: LD_INT 5
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 3
71079: PUSH
71080: LD_INT 4
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 3
71089: PUSH
71090: LD_INT 3
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 5
71099: PUSH
71100: LD_INT 3
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: LD_INT 5
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 0
71129: PUSH
71130: LD_INT 2
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: LD_INT 3
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: LD_INT 4
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 1
71169: NEG
71170: PUSH
71171: LD_INT 3
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: LD_INT 2
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 2
71191: PUSH
71192: LD_INT 4
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 2
71201: NEG
71202: PUSH
71203: LD_INT 2
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 4
71212: NEG
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 4
71223: NEG
71224: PUSH
71225: LD_INT 1
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 3
71235: NEG
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: LD_INT 1
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 4
71257: NEG
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 5
71268: NEG
71269: PUSH
71270: LD_INT 0
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 5
71279: NEG
71280: PUSH
71281: LD_INT 1
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 5
71291: NEG
71292: PUSH
71293: LD_INT 2
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: ST_TO_ADDR
// end ; end ;
71359: GO 71362
71361: POP
// case btype of b_depot , b_warehouse :
71362: LD_VAR 0 1
71366: PUSH
71367: LD_INT 0
71369: DOUBLE
71370: EQUAL
71371: IFTRUE 71381
71373: LD_INT 1
71375: DOUBLE
71376: EQUAL
71377: IFTRUE 71381
71379: GO 71582
71381: POP
// case nation of nation_american :
71382: LD_VAR 0 5
71386: PUSH
71387: LD_INT 1
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71395
71393: GO 71451
71395: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71396: LD_ADDR_VAR 0 9
71400: PUSH
71401: LD_VAR 0 11
71405: PUSH
71406: LD_VAR 0 12
71410: PUSH
71411: LD_VAR 0 13
71415: PUSH
71416: LD_VAR 0 14
71420: PUSH
71421: LD_VAR 0 15
71425: PUSH
71426: LD_VAR 0 16
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: PUSH
71439: LD_VAR 0 4
71443: PUSH
71444: LD_INT 1
71446: PLUS
71447: ARRAY
71448: ST_TO_ADDR
71449: GO 71580
71451: LD_INT 2
71453: DOUBLE
71454: EQUAL
71455: IFTRUE 71459
71457: GO 71515
71459: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71460: LD_ADDR_VAR 0 9
71464: PUSH
71465: LD_VAR 0 17
71469: PUSH
71470: LD_VAR 0 18
71474: PUSH
71475: LD_VAR 0 19
71479: PUSH
71480: LD_VAR 0 20
71484: PUSH
71485: LD_VAR 0 21
71489: PUSH
71490: LD_VAR 0 22
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: PUSH
71503: LD_VAR 0 4
71507: PUSH
71508: LD_INT 1
71510: PLUS
71511: ARRAY
71512: ST_TO_ADDR
71513: GO 71580
71515: LD_INT 3
71517: DOUBLE
71518: EQUAL
71519: IFTRUE 71523
71521: GO 71579
71523: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71524: LD_ADDR_VAR 0 9
71528: PUSH
71529: LD_VAR 0 23
71533: PUSH
71534: LD_VAR 0 24
71538: PUSH
71539: LD_VAR 0 25
71543: PUSH
71544: LD_VAR 0 26
71548: PUSH
71549: LD_VAR 0 27
71553: PUSH
71554: LD_VAR 0 28
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: PUSH
71567: LD_VAR 0 4
71571: PUSH
71572: LD_INT 1
71574: PLUS
71575: ARRAY
71576: ST_TO_ADDR
71577: GO 71580
71579: POP
71580: GO 72135
71582: LD_INT 2
71584: DOUBLE
71585: EQUAL
71586: IFTRUE 71596
71588: LD_INT 3
71590: DOUBLE
71591: EQUAL
71592: IFTRUE 71596
71594: GO 71652
71596: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71597: LD_ADDR_VAR 0 9
71601: PUSH
71602: LD_VAR 0 29
71606: PUSH
71607: LD_VAR 0 30
71611: PUSH
71612: LD_VAR 0 31
71616: PUSH
71617: LD_VAR 0 32
71621: PUSH
71622: LD_VAR 0 33
71626: PUSH
71627: LD_VAR 0 34
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: PUSH
71640: LD_VAR 0 4
71644: PUSH
71645: LD_INT 1
71647: PLUS
71648: ARRAY
71649: ST_TO_ADDR
71650: GO 72135
71652: LD_INT 16
71654: DOUBLE
71655: EQUAL
71656: IFTRUE 71714
71658: LD_INT 17
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71714
71664: LD_INT 18
71666: DOUBLE
71667: EQUAL
71668: IFTRUE 71714
71670: LD_INT 19
71672: DOUBLE
71673: EQUAL
71674: IFTRUE 71714
71676: LD_INT 22
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71714
71682: LD_INT 20
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71714
71688: LD_INT 21
71690: DOUBLE
71691: EQUAL
71692: IFTRUE 71714
71694: LD_INT 23
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71714
71700: LD_INT 24
71702: DOUBLE
71703: EQUAL
71704: IFTRUE 71714
71706: LD_INT 25
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71714
71712: GO 71770
71714: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71715: LD_ADDR_VAR 0 9
71719: PUSH
71720: LD_VAR 0 35
71724: PUSH
71725: LD_VAR 0 36
71729: PUSH
71730: LD_VAR 0 37
71734: PUSH
71735: LD_VAR 0 38
71739: PUSH
71740: LD_VAR 0 39
71744: PUSH
71745: LD_VAR 0 40
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: PUSH
71758: LD_VAR 0 4
71762: PUSH
71763: LD_INT 1
71765: PLUS
71766: ARRAY
71767: ST_TO_ADDR
71768: GO 72135
71770: LD_INT 6
71772: DOUBLE
71773: EQUAL
71774: IFTRUE 71826
71776: LD_INT 7
71778: DOUBLE
71779: EQUAL
71780: IFTRUE 71826
71782: LD_INT 8
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71826
71788: LD_INT 13
71790: DOUBLE
71791: EQUAL
71792: IFTRUE 71826
71794: LD_INT 12
71796: DOUBLE
71797: EQUAL
71798: IFTRUE 71826
71800: LD_INT 15
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71826
71806: LD_INT 11
71808: DOUBLE
71809: EQUAL
71810: IFTRUE 71826
71812: LD_INT 14
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71826
71818: LD_INT 10
71820: DOUBLE
71821: EQUAL
71822: IFTRUE 71826
71824: GO 71882
71826: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71827: LD_ADDR_VAR 0 9
71831: PUSH
71832: LD_VAR 0 41
71836: PUSH
71837: LD_VAR 0 42
71841: PUSH
71842: LD_VAR 0 43
71846: PUSH
71847: LD_VAR 0 44
71851: PUSH
71852: LD_VAR 0 45
71856: PUSH
71857: LD_VAR 0 46
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: PUSH
71870: LD_VAR 0 4
71874: PUSH
71875: LD_INT 1
71877: PLUS
71878: ARRAY
71879: ST_TO_ADDR
71880: GO 72135
71882: LD_INT 36
71884: DOUBLE
71885: EQUAL
71886: IFTRUE 71890
71888: GO 71946
71890: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71891: LD_ADDR_VAR 0 9
71895: PUSH
71896: LD_VAR 0 47
71900: PUSH
71901: LD_VAR 0 48
71905: PUSH
71906: LD_VAR 0 49
71910: PUSH
71911: LD_VAR 0 50
71915: PUSH
71916: LD_VAR 0 51
71920: PUSH
71921: LD_VAR 0 52
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: PUSH
71934: LD_VAR 0 4
71938: PUSH
71939: LD_INT 1
71941: PLUS
71942: ARRAY
71943: ST_TO_ADDR
71944: GO 72135
71946: LD_INT 4
71948: DOUBLE
71949: EQUAL
71950: IFTRUE 71972
71952: LD_INT 5
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71972
71958: LD_INT 34
71960: DOUBLE
71961: EQUAL
71962: IFTRUE 71972
71964: LD_INT 37
71966: DOUBLE
71967: EQUAL
71968: IFTRUE 71972
71970: GO 72028
71972: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71973: LD_ADDR_VAR 0 9
71977: PUSH
71978: LD_VAR 0 53
71982: PUSH
71983: LD_VAR 0 54
71987: PUSH
71988: LD_VAR 0 55
71992: PUSH
71993: LD_VAR 0 56
71997: PUSH
71998: LD_VAR 0 57
72002: PUSH
72003: LD_VAR 0 58
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 4
72020: PUSH
72021: LD_INT 1
72023: PLUS
72024: ARRAY
72025: ST_TO_ADDR
72026: GO 72135
72028: LD_INT 31
72030: DOUBLE
72031: EQUAL
72032: IFTRUE 72078
72034: LD_INT 32
72036: DOUBLE
72037: EQUAL
72038: IFTRUE 72078
72040: LD_INT 33
72042: DOUBLE
72043: EQUAL
72044: IFTRUE 72078
72046: LD_INT 27
72048: DOUBLE
72049: EQUAL
72050: IFTRUE 72078
72052: LD_INT 26
72054: DOUBLE
72055: EQUAL
72056: IFTRUE 72078
72058: LD_INT 28
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72078
72064: LD_INT 29
72066: DOUBLE
72067: EQUAL
72068: IFTRUE 72078
72070: LD_INT 30
72072: DOUBLE
72073: EQUAL
72074: IFTRUE 72078
72076: GO 72134
72078: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72079: LD_ADDR_VAR 0 9
72083: PUSH
72084: LD_VAR 0 59
72088: PUSH
72089: LD_VAR 0 60
72093: PUSH
72094: LD_VAR 0 61
72098: PUSH
72099: LD_VAR 0 62
72103: PUSH
72104: LD_VAR 0 63
72108: PUSH
72109: LD_VAR 0 64
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: PUSH
72122: LD_VAR 0 4
72126: PUSH
72127: LD_INT 1
72129: PLUS
72130: ARRAY
72131: ST_TO_ADDR
72132: GO 72135
72134: POP
// temp_list2 = [ ] ;
72135: LD_ADDR_VAR 0 10
72139: PUSH
72140: EMPTY
72141: ST_TO_ADDR
// for i in temp_list do
72142: LD_ADDR_VAR 0 8
72146: PUSH
72147: LD_VAR 0 9
72151: PUSH
72152: FOR_IN
72153: IFFALSE 72205
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72155: LD_ADDR_VAR 0 10
72159: PUSH
72160: LD_VAR 0 10
72164: PUSH
72165: LD_VAR 0 8
72169: PUSH
72170: LD_INT 1
72172: ARRAY
72173: PUSH
72174: LD_VAR 0 2
72178: PLUS
72179: PUSH
72180: LD_VAR 0 8
72184: PUSH
72185: LD_INT 2
72187: ARRAY
72188: PUSH
72189: LD_VAR 0 3
72193: PLUS
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: EMPTY
72200: LIST
72201: ADD
72202: ST_TO_ADDR
72203: GO 72152
72205: POP
72206: POP
// result = temp_list2 ;
72207: LD_ADDR_VAR 0 7
72211: PUSH
72212: LD_VAR 0 10
72216: ST_TO_ADDR
// end ;
72217: LD_VAR 0 7
72221: RET
// export function EnemyInRange ( unit , dist ) ; begin
72222: LD_INT 0
72224: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72225: LD_ADDR_VAR 0 3
72229: PUSH
72230: LD_VAR 0 1
72234: PPUSH
72235: CALL_OW 255
72239: PPUSH
72240: LD_VAR 0 1
72244: PPUSH
72245: CALL_OW 250
72249: PPUSH
72250: LD_VAR 0 1
72254: PPUSH
72255: CALL_OW 251
72259: PPUSH
72260: LD_VAR 0 2
72264: PPUSH
72265: CALL 45624 0 4
72269: PUSH
72270: LD_INT 4
72272: ARRAY
72273: ST_TO_ADDR
// end ;
72274: LD_VAR 0 3
72278: RET
// export function PlayerSeeMe ( unit ) ; begin
72279: LD_INT 0
72281: PPUSH
// result := See ( your_side , unit ) ;
72282: LD_ADDR_VAR 0 2
72286: PUSH
72287: LD_OWVAR 2
72291: PPUSH
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 292
72301: ST_TO_ADDR
// end ;
72302: LD_VAR 0 2
72306: RET
// export function ReverseDir ( unit ) ; begin
72307: LD_INT 0
72309: PPUSH
// if not unit then
72310: LD_VAR 0 1
72314: NOT
72315: IFFALSE 72319
// exit ;
72317: GO 72342
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72319: LD_ADDR_VAR 0 2
72323: PUSH
72324: LD_VAR 0 1
72328: PPUSH
72329: CALL_OW 254
72333: PUSH
72334: LD_INT 3
72336: PLUS
72337: PUSH
72338: LD_INT 6
72340: MOD
72341: ST_TO_ADDR
// end ;
72342: LD_VAR 0 2
72346: RET
// export function ReverseArray ( array ) ; var i ; begin
72347: LD_INT 0
72349: PPUSH
72350: PPUSH
// if not array then
72351: LD_VAR 0 1
72355: NOT
72356: IFFALSE 72360
// exit ;
72358: GO 72415
// result := [ ] ;
72360: LD_ADDR_VAR 0 2
72364: PUSH
72365: EMPTY
72366: ST_TO_ADDR
// for i := array downto 1 do
72367: LD_ADDR_VAR 0 3
72371: PUSH
72372: DOUBLE
72373: LD_VAR 0 1
72377: INC
72378: ST_TO_ADDR
72379: LD_INT 1
72381: PUSH
72382: FOR_DOWNTO
72383: IFFALSE 72413
// result := Join ( result , array [ i ] ) ;
72385: LD_ADDR_VAR 0 2
72389: PUSH
72390: LD_VAR 0 2
72394: PPUSH
72395: LD_VAR 0 1
72399: PUSH
72400: LD_VAR 0 3
72404: ARRAY
72405: PPUSH
72406: CALL 77040 0 2
72410: ST_TO_ADDR
72411: GO 72382
72413: POP
72414: POP
// end ;
72415: LD_VAR 0 2
72419: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72420: LD_INT 0
72422: PPUSH
72423: PPUSH
72424: PPUSH
72425: PPUSH
72426: PPUSH
72427: PPUSH
// if not unit or not hexes then
72428: LD_VAR 0 1
72432: NOT
72433: PUSH
72434: LD_VAR 0 2
72438: NOT
72439: OR
72440: IFFALSE 72444
// exit ;
72442: GO 72567
// dist := 9999 ;
72444: LD_ADDR_VAR 0 5
72448: PUSH
72449: LD_INT 9999
72451: ST_TO_ADDR
// for i = 1 to hexes do
72452: LD_ADDR_VAR 0 4
72456: PUSH
72457: DOUBLE
72458: LD_INT 1
72460: DEC
72461: ST_TO_ADDR
72462: LD_VAR 0 2
72466: PUSH
72467: FOR_TO
72468: IFFALSE 72555
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72470: LD_ADDR_VAR 0 6
72474: PUSH
72475: LD_VAR 0 1
72479: PPUSH
72480: LD_VAR 0 2
72484: PUSH
72485: LD_VAR 0 4
72489: ARRAY
72490: PUSH
72491: LD_INT 1
72493: ARRAY
72494: PPUSH
72495: LD_VAR 0 2
72499: PUSH
72500: LD_VAR 0 4
72504: ARRAY
72505: PUSH
72506: LD_INT 2
72508: ARRAY
72509: PPUSH
72510: CALL_OW 297
72514: ST_TO_ADDR
// if tdist < dist then
72515: LD_VAR 0 6
72519: PUSH
72520: LD_VAR 0 5
72524: LESS
72525: IFFALSE 72553
// begin hex := hexes [ i ] ;
72527: LD_ADDR_VAR 0 8
72531: PUSH
72532: LD_VAR 0 2
72536: PUSH
72537: LD_VAR 0 4
72541: ARRAY
72542: ST_TO_ADDR
// dist := tdist ;
72543: LD_ADDR_VAR 0 5
72547: PUSH
72548: LD_VAR 0 6
72552: ST_TO_ADDR
// end ; end ;
72553: GO 72467
72555: POP
72556: POP
// result := hex ;
72557: LD_ADDR_VAR 0 3
72561: PUSH
72562: LD_VAR 0 8
72566: ST_TO_ADDR
// end ;
72567: LD_VAR 0 3
72571: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72572: LD_INT 0
72574: PPUSH
72575: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72576: LD_VAR 0 1
72580: NOT
72581: PUSH
72582: LD_VAR 0 1
72586: PUSH
72587: LD_INT 21
72589: PUSH
72590: LD_INT 2
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 23
72599: PUSH
72600: LD_INT 2
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PPUSH
72611: CALL_OW 69
72615: IN
72616: NOT
72617: OR
72618: IFFALSE 72622
// exit ;
72620: GO 72669
// for i = 1 to 3 do
72622: LD_ADDR_VAR 0 3
72626: PUSH
72627: DOUBLE
72628: LD_INT 1
72630: DEC
72631: ST_TO_ADDR
72632: LD_INT 3
72634: PUSH
72635: FOR_TO
72636: IFFALSE 72667
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72638: LD_VAR 0 1
72642: PPUSH
72643: CALL_OW 250
72647: PPUSH
72648: LD_VAR 0 1
72652: PPUSH
72653: CALL_OW 251
72657: PPUSH
72658: LD_INT 1
72660: PPUSH
72661: CALL_OW 453
72665: GO 72635
72667: POP
72668: POP
// end ;
72669: LD_VAR 0 2
72673: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72674: LD_INT 0
72676: PPUSH
72677: PPUSH
72678: PPUSH
72679: PPUSH
72680: PPUSH
72681: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72682: LD_VAR 0 1
72686: NOT
72687: PUSH
72688: LD_VAR 0 2
72692: NOT
72693: OR
72694: PUSH
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 314
72704: OR
72705: IFFALSE 72709
// exit ;
72707: GO 73150
// x := GetX ( enemy_unit ) ;
72709: LD_ADDR_VAR 0 7
72713: PUSH
72714: LD_VAR 0 2
72718: PPUSH
72719: CALL_OW 250
72723: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72724: LD_ADDR_VAR 0 8
72728: PUSH
72729: LD_VAR 0 2
72733: PPUSH
72734: CALL_OW 251
72738: ST_TO_ADDR
// if not x or not y then
72739: LD_VAR 0 7
72743: NOT
72744: PUSH
72745: LD_VAR 0 8
72749: NOT
72750: OR
72751: IFFALSE 72755
// exit ;
72753: GO 73150
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72755: LD_ADDR_VAR 0 6
72759: PUSH
72760: LD_VAR 0 7
72764: PPUSH
72765: LD_INT 0
72767: PPUSH
72768: LD_INT 4
72770: PPUSH
72771: CALL_OW 272
72775: PUSH
72776: LD_VAR 0 8
72780: PPUSH
72781: LD_INT 0
72783: PPUSH
72784: LD_INT 4
72786: PPUSH
72787: CALL_OW 273
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_VAR 0 7
72800: PPUSH
72801: LD_INT 1
72803: PPUSH
72804: LD_INT 4
72806: PPUSH
72807: CALL_OW 272
72811: PUSH
72812: LD_VAR 0 8
72816: PPUSH
72817: LD_INT 1
72819: PPUSH
72820: LD_INT 4
72822: PPUSH
72823: CALL_OW 273
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_VAR 0 7
72836: PPUSH
72837: LD_INT 2
72839: PPUSH
72840: LD_INT 4
72842: PPUSH
72843: CALL_OW 272
72847: PUSH
72848: LD_VAR 0 8
72852: PPUSH
72853: LD_INT 2
72855: PPUSH
72856: LD_INT 4
72858: PPUSH
72859: CALL_OW 273
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_VAR 0 7
72872: PPUSH
72873: LD_INT 3
72875: PPUSH
72876: LD_INT 4
72878: PPUSH
72879: CALL_OW 272
72883: PUSH
72884: LD_VAR 0 8
72888: PPUSH
72889: LD_INT 3
72891: PPUSH
72892: LD_INT 4
72894: PPUSH
72895: CALL_OW 273
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_VAR 0 7
72908: PPUSH
72909: LD_INT 4
72911: PPUSH
72912: LD_INT 4
72914: PPUSH
72915: CALL_OW 272
72919: PUSH
72920: LD_VAR 0 8
72924: PPUSH
72925: LD_INT 4
72927: PPUSH
72928: LD_INT 4
72930: PPUSH
72931: CALL_OW 273
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_VAR 0 7
72944: PPUSH
72945: LD_INT 5
72947: PPUSH
72948: LD_INT 4
72950: PPUSH
72951: CALL_OW 272
72955: PUSH
72956: LD_VAR 0 8
72960: PPUSH
72961: LD_INT 5
72963: PPUSH
72964: LD_INT 4
72966: PPUSH
72967: CALL_OW 273
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: ST_TO_ADDR
// for i = tmp downto 1 do
72984: LD_ADDR_VAR 0 4
72988: PUSH
72989: DOUBLE
72990: LD_VAR 0 6
72994: INC
72995: ST_TO_ADDR
72996: LD_INT 1
72998: PUSH
72999: FOR_DOWNTO
73000: IFFALSE 73101
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73002: LD_VAR 0 6
73006: PUSH
73007: LD_VAR 0 4
73011: ARRAY
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: PPUSH
73017: LD_VAR 0 6
73021: PUSH
73022: LD_VAR 0 4
73026: ARRAY
73027: PUSH
73028: LD_INT 2
73030: ARRAY
73031: PPUSH
73032: CALL_OW 488
73036: NOT
73037: PUSH
73038: LD_VAR 0 6
73042: PUSH
73043: LD_VAR 0 4
73047: ARRAY
73048: PUSH
73049: LD_INT 1
73051: ARRAY
73052: PPUSH
73053: LD_VAR 0 6
73057: PUSH
73058: LD_VAR 0 4
73062: ARRAY
73063: PUSH
73064: LD_INT 2
73066: ARRAY
73067: PPUSH
73068: CALL_OW 428
73072: PUSH
73073: LD_INT 0
73075: NONEQUAL
73076: OR
73077: IFFALSE 73099
// tmp := Delete ( tmp , i ) ;
73079: LD_ADDR_VAR 0 6
73083: PUSH
73084: LD_VAR 0 6
73088: PPUSH
73089: LD_VAR 0 4
73093: PPUSH
73094: CALL_OW 3
73098: ST_TO_ADDR
73099: GO 72999
73101: POP
73102: POP
// j := GetClosestHex ( unit , tmp ) ;
73103: LD_ADDR_VAR 0 5
73107: PUSH
73108: LD_VAR 0 1
73112: PPUSH
73113: LD_VAR 0 6
73117: PPUSH
73118: CALL 72420 0 2
73122: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73123: LD_VAR 0 1
73127: PPUSH
73128: LD_VAR 0 5
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PPUSH
73137: LD_VAR 0 5
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PPUSH
73146: CALL_OW 111
// end ;
73150: LD_VAR 0 3
73154: RET
// export function PrepareApemanSoldier ( ) ; begin
73155: LD_INT 0
73157: PPUSH
// uc_nation := 0 ;
73158: LD_ADDR_OWVAR 21
73162: PUSH
73163: LD_INT 0
73165: ST_TO_ADDR
// hc_sex := sex_male ;
73166: LD_ADDR_OWVAR 27
73170: PUSH
73171: LD_INT 1
73173: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73174: LD_ADDR_OWVAR 28
73178: PUSH
73179: LD_INT 15
73181: ST_TO_ADDR
// hc_gallery :=  ;
73182: LD_ADDR_OWVAR 33
73186: PUSH
73187: LD_STRING 
73189: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73190: LD_ADDR_OWVAR 31
73194: PUSH
73195: LD_INT 0
73197: PPUSH
73198: LD_INT 3
73200: PPUSH
73201: CALL_OW 12
73205: PUSH
73206: LD_INT 0
73208: PPUSH
73209: LD_INT 3
73211: PPUSH
73212: CALL_OW 12
73216: PUSH
73217: LD_INT 0
73219: PUSH
73220: LD_INT 0
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: ST_TO_ADDR
// end ;
73229: LD_VAR 0 1
73233: RET
// export function PrepareApemanEngineer ( ) ; begin
73234: LD_INT 0
73236: PPUSH
// uc_nation := 0 ;
73237: LD_ADDR_OWVAR 21
73241: PUSH
73242: LD_INT 0
73244: ST_TO_ADDR
// hc_sex := sex_male ;
73245: LD_ADDR_OWVAR 27
73249: PUSH
73250: LD_INT 1
73252: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73253: LD_ADDR_OWVAR 28
73257: PUSH
73258: LD_INT 16
73260: ST_TO_ADDR
// hc_gallery :=  ;
73261: LD_ADDR_OWVAR 33
73265: PUSH
73266: LD_STRING 
73268: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73269: LD_ADDR_OWVAR 31
73273: PUSH
73274: LD_INT 0
73276: PPUSH
73277: LD_INT 3
73279: PPUSH
73280: CALL_OW 12
73284: PUSH
73285: LD_INT 0
73287: PPUSH
73288: LD_INT 3
73290: PPUSH
73291: CALL_OW 12
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: LD_INT 0
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: ST_TO_ADDR
// end ;
73308: LD_VAR 0 1
73312: RET
// export function PrepareApeman ( agressivity ) ; begin
73313: LD_INT 0
73315: PPUSH
// uc_side := 0 ;
73316: LD_ADDR_OWVAR 20
73320: PUSH
73321: LD_INT 0
73323: ST_TO_ADDR
// uc_nation := 0 ;
73324: LD_ADDR_OWVAR 21
73328: PUSH
73329: LD_INT 0
73331: ST_TO_ADDR
// hc_sex := sex_male ;
73332: LD_ADDR_OWVAR 27
73336: PUSH
73337: LD_INT 1
73339: ST_TO_ADDR
// hc_class := class_apeman ;
73340: LD_ADDR_OWVAR 28
73344: PUSH
73345: LD_INT 12
73347: ST_TO_ADDR
// hc_gallery :=  ;
73348: LD_ADDR_OWVAR 33
73352: PUSH
73353: LD_STRING 
73355: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73356: LD_ADDR_OWVAR 35
73360: PUSH
73361: LD_VAR 0 1
73365: NEG
73366: PPUSH
73367: LD_VAR 0 1
73371: PPUSH
73372: CALL_OW 12
73376: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73377: LD_ADDR_OWVAR 31
73381: PUSH
73382: LD_INT 0
73384: PPUSH
73385: LD_INT 3
73387: PPUSH
73388: CALL_OW 12
73392: PUSH
73393: LD_INT 0
73395: PPUSH
73396: LD_INT 3
73398: PPUSH
73399: CALL_OW 12
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: ST_TO_ADDR
// end ;
73416: LD_VAR 0 2
73420: RET
// export function PrepareTiger ( agressivity ) ; begin
73421: LD_INT 0
73423: PPUSH
// uc_side := 0 ;
73424: LD_ADDR_OWVAR 20
73428: PUSH
73429: LD_INT 0
73431: ST_TO_ADDR
// uc_nation := 0 ;
73432: LD_ADDR_OWVAR 21
73436: PUSH
73437: LD_INT 0
73439: ST_TO_ADDR
// hc_class := class_tiger ;
73440: LD_ADDR_OWVAR 28
73444: PUSH
73445: LD_INT 14
73447: ST_TO_ADDR
// hc_gallery :=  ;
73448: LD_ADDR_OWVAR 33
73452: PUSH
73453: LD_STRING 
73455: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73456: LD_ADDR_OWVAR 35
73460: PUSH
73461: LD_VAR 0 1
73465: NEG
73466: PPUSH
73467: LD_VAR 0 1
73471: PPUSH
73472: CALL_OW 12
73476: ST_TO_ADDR
// end ;
73477: LD_VAR 0 2
73481: RET
// export function PrepareEnchidna ( ) ; begin
73482: LD_INT 0
73484: PPUSH
// uc_side := 0 ;
73485: LD_ADDR_OWVAR 20
73489: PUSH
73490: LD_INT 0
73492: ST_TO_ADDR
// uc_nation := 0 ;
73493: LD_ADDR_OWVAR 21
73497: PUSH
73498: LD_INT 0
73500: ST_TO_ADDR
// hc_class := class_baggie ;
73501: LD_ADDR_OWVAR 28
73505: PUSH
73506: LD_INT 13
73508: ST_TO_ADDR
// hc_gallery :=  ;
73509: LD_ADDR_OWVAR 33
73513: PUSH
73514: LD_STRING 
73516: ST_TO_ADDR
// end ;
73517: LD_VAR 0 1
73521: RET
// export function PrepareFrog ( ) ; begin
73522: LD_INT 0
73524: PPUSH
// uc_side := 0 ;
73525: LD_ADDR_OWVAR 20
73529: PUSH
73530: LD_INT 0
73532: ST_TO_ADDR
// uc_nation := 0 ;
73533: LD_ADDR_OWVAR 21
73537: PUSH
73538: LD_INT 0
73540: ST_TO_ADDR
// hc_class := class_frog ;
73541: LD_ADDR_OWVAR 28
73545: PUSH
73546: LD_INT 19
73548: ST_TO_ADDR
// hc_gallery :=  ;
73549: LD_ADDR_OWVAR 33
73553: PUSH
73554: LD_STRING 
73556: ST_TO_ADDR
// end ;
73557: LD_VAR 0 1
73561: RET
// export function PrepareFish ( ) ; begin
73562: LD_INT 0
73564: PPUSH
// uc_side := 0 ;
73565: LD_ADDR_OWVAR 20
73569: PUSH
73570: LD_INT 0
73572: ST_TO_ADDR
// uc_nation := 0 ;
73573: LD_ADDR_OWVAR 21
73577: PUSH
73578: LD_INT 0
73580: ST_TO_ADDR
// hc_class := class_fish ;
73581: LD_ADDR_OWVAR 28
73585: PUSH
73586: LD_INT 20
73588: ST_TO_ADDR
// hc_gallery :=  ;
73589: LD_ADDR_OWVAR 33
73593: PUSH
73594: LD_STRING 
73596: ST_TO_ADDR
// end ;
73597: LD_VAR 0 1
73601: RET
// export function PrepareBird ( ) ; begin
73602: LD_INT 0
73604: PPUSH
// uc_side := 0 ;
73605: LD_ADDR_OWVAR 20
73609: PUSH
73610: LD_INT 0
73612: ST_TO_ADDR
// uc_nation := 0 ;
73613: LD_ADDR_OWVAR 21
73617: PUSH
73618: LD_INT 0
73620: ST_TO_ADDR
// hc_class := class_phororhacos ;
73621: LD_ADDR_OWVAR 28
73625: PUSH
73626: LD_INT 18
73628: ST_TO_ADDR
// hc_gallery :=  ;
73629: LD_ADDR_OWVAR 33
73633: PUSH
73634: LD_STRING 
73636: ST_TO_ADDR
// end ;
73637: LD_VAR 0 1
73641: RET
// export function PrepareHorse ( ) ; begin
73642: LD_INT 0
73644: PPUSH
// uc_side := 0 ;
73645: LD_ADDR_OWVAR 20
73649: PUSH
73650: LD_INT 0
73652: ST_TO_ADDR
// uc_nation := 0 ;
73653: LD_ADDR_OWVAR 21
73657: PUSH
73658: LD_INT 0
73660: ST_TO_ADDR
// hc_class := class_horse ;
73661: LD_ADDR_OWVAR 28
73665: PUSH
73666: LD_INT 21
73668: ST_TO_ADDR
// hc_gallery :=  ;
73669: LD_ADDR_OWVAR 33
73673: PUSH
73674: LD_STRING 
73676: ST_TO_ADDR
// end ;
73677: LD_VAR 0 1
73681: RET
// export function PrepareMastodont ( ) ; begin
73682: LD_INT 0
73684: PPUSH
// uc_side := 0 ;
73685: LD_ADDR_OWVAR 20
73689: PUSH
73690: LD_INT 0
73692: ST_TO_ADDR
// uc_nation := 0 ;
73693: LD_ADDR_OWVAR 21
73697: PUSH
73698: LD_INT 0
73700: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73701: LD_ADDR_OWVAR 37
73705: PUSH
73706: LD_INT 31
73708: ST_TO_ADDR
// vc_control := control_rider ;
73709: LD_ADDR_OWVAR 38
73713: PUSH
73714: LD_INT 4
73716: ST_TO_ADDR
// end ;
73717: LD_VAR 0 1
73721: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73722: LD_INT 0
73724: PPUSH
73725: PPUSH
73726: PPUSH
// uc_side = 0 ;
73727: LD_ADDR_OWVAR 20
73731: PUSH
73732: LD_INT 0
73734: ST_TO_ADDR
// uc_nation = 0 ;
73735: LD_ADDR_OWVAR 21
73739: PUSH
73740: LD_INT 0
73742: ST_TO_ADDR
// InitHc_All ( ) ;
73743: CALL_OW 584
// InitVc ;
73747: CALL_OW 20
// if mastodonts then
73751: LD_VAR 0 6
73755: IFFALSE 73822
// for i = 1 to mastodonts do
73757: LD_ADDR_VAR 0 11
73761: PUSH
73762: DOUBLE
73763: LD_INT 1
73765: DEC
73766: ST_TO_ADDR
73767: LD_VAR 0 6
73771: PUSH
73772: FOR_TO
73773: IFFALSE 73820
// begin vc_chassis := 31 ;
73775: LD_ADDR_OWVAR 37
73779: PUSH
73780: LD_INT 31
73782: ST_TO_ADDR
// vc_control := control_rider ;
73783: LD_ADDR_OWVAR 38
73787: PUSH
73788: LD_INT 4
73790: ST_TO_ADDR
// animal := CreateVehicle ;
73791: LD_ADDR_VAR 0 12
73795: PUSH
73796: CALL_OW 45
73800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73801: LD_VAR 0 12
73805: PPUSH
73806: LD_VAR 0 8
73810: PPUSH
73811: LD_INT 0
73813: PPUSH
73814: CALL 75957 0 3
// end ;
73818: GO 73772
73820: POP
73821: POP
// if horses then
73822: LD_VAR 0 5
73826: IFFALSE 73893
// for i = 1 to horses do
73828: LD_ADDR_VAR 0 11
73832: PUSH
73833: DOUBLE
73834: LD_INT 1
73836: DEC
73837: ST_TO_ADDR
73838: LD_VAR 0 5
73842: PUSH
73843: FOR_TO
73844: IFFALSE 73891
// begin hc_class := 21 ;
73846: LD_ADDR_OWVAR 28
73850: PUSH
73851: LD_INT 21
73853: ST_TO_ADDR
// hc_gallery :=  ;
73854: LD_ADDR_OWVAR 33
73858: PUSH
73859: LD_STRING 
73861: ST_TO_ADDR
// animal := CreateHuman ;
73862: LD_ADDR_VAR 0 12
73866: PUSH
73867: CALL_OW 44
73871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73872: LD_VAR 0 12
73876: PPUSH
73877: LD_VAR 0 8
73881: PPUSH
73882: LD_INT 0
73884: PPUSH
73885: CALL 75957 0 3
// end ;
73889: GO 73843
73891: POP
73892: POP
// if birds then
73893: LD_VAR 0 1
73897: IFFALSE 73964
// for i = 1 to birds do
73899: LD_ADDR_VAR 0 11
73903: PUSH
73904: DOUBLE
73905: LD_INT 1
73907: DEC
73908: ST_TO_ADDR
73909: LD_VAR 0 1
73913: PUSH
73914: FOR_TO
73915: IFFALSE 73962
// begin hc_class = 18 ;
73917: LD_ADDR_OWVAR 28
73921: PUSH
73922: LD_INT 18
73924: ST_TO_ADDR
// hc_gallery =  ;
73925: LD_ADDR_OWVAR 33
73929: PUSH
73930: LD_STRING 
73932: ST_TO_ADDR
// animal := CreateHuman ;
73933: LD_ADDR_VAR 0 12
73937: PUSH
73938: CALL_OW 44
73942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73943: LD_VAR 0 12
73947: PPUSH
73948: LD_VAR 0 8
73952: PPUSH
73953: LD_INT 0
73955: PPUSH
73956: CALL 75957 0 3
// end ;
73960: GO 73914
73962: POP
73963: POP
// if tigers then
73964: LD_VAR 0 2
73968: IFFALSE 74052
// for i = 1 to tigers do
73970: LD_ADDR_VAR 0 11
73974: PUSH
73975: DOUBLE
73976: LD_INT 1
73978: DEC
73979: ST_TO_ADDR
73980: LD_VAR 0 2
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74050
// begin hc_class = class_tiger ;
73988: LD_ADDR_OWVAR 28
73992: PUSH
73993: LD_INT 14
73995: ST_TO_ADDR
// hc_gallery =  ;
73996: LD_ADDR_OWVAR 33
74000: PUSH
74001: LD_STRING 
74003: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74004: LD_ADDR_OWVAR 35
74008: PUSH
74009: LD_INT 7
74011: NEG
74012: PPUSH
74013: LD_INT 7
74015: PPUSH
74016: CALL_OW 12
74020: ST_TO_ADDR
// animal := CreateHuman ;
74021: LD_ADDR_VAR 0 12
74025: PUSH
74026: CALL_OW 44
74030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74031: LD_VAR 0 12
74035: PPUSH
74036: LD_VAR 0 8
74040: PPUSH
74041: LD_INT 0
74043: PPUSH
74044: CALL 75957 0 3
// end ;
74048: GO 73985
74050: POP
74051: POP
// if apemans then
74052: LD_VAR 0 3
74056: IFFALSE 74179
// for i = 1 to apemans do
74058: LD_ADDR_VAR 0 11
74062: PUSH
74063: DOUBLE
74064: LD_INT 1
74066: DEC
74067: ST_TO_ADDR
74068: LD_VAR 0 3
74072: PUSH
74073: FOR_TO
74074: IFFALSE 74177
// begin hc_class = class_apeman ;
74076: LD_ADDR_OWVAR 28
74080: PUSH
74081: LD_INT 12
74083: ST_TO_ADDR
// hc_gallery =  ;
74084: LD_ADDR_OWVAR 33
74088: PUSH
74089: LD_STRING 
74091: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74092: LD_ADDR_OWVAR 35
74096: PUSH
74097: LD_INT 2
74099: NEG
74100: PPUSH
74101: LD_INT 2
74103: PPUSH
74104: CALL_OW 12
74108: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74109: LD_ADDR_OWVAR 31
74113: PUSH
74114: LD_INT 1
74116: PPUSH
74117: LD_INT 3
74119: PPUSH
74120: CALL_OW 12
74124: PUSH
74125: LD_INT 1
74127: PPUSH
74128: LD_INT 3
74130: PPUSH
74131: CALL_OW 12
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: ST_TO_ADDR
// animal := CreateHuman ;
74148: LD_ADDR_VAR 0 12
74152: PUSH
74153: CALL_OW 44
74157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74158: LD_VAR 0 12
74162: PPUSH
74163: LD_VAR 0 8
74167: PPUSH
74168: LD_INT 0
74170: PPUSH
74171: CALL 75957 0 3
// end ;
74175: GO 74073
74177: POP
74178: POP
// if enchidnas then
74179: LD_VAR 0 4
74183: IFFALSE 74250
// for i = 1 to enchidnas do
74185: LD_ADDR_VAR 0 11
74189: PUSH
74190: DOUBLE
74191: LD_INT 1
74193: DEC
74194: ST_TO_ADDR
74195: LD_VAR 0 4
74199: PUSH
74200: FOR_TO
74201: IFFALSE 74248
// begin hc_class = 13 ;
74203: LD_ADDR_OWVAR 28
74207: PUSH
74208: LD_INT 13
74210: ST_TO_ADDR
// hc_gallery =  ;
74211: LD_ADDR_OWVAR 33
74215: PUSH
74216: LD_STRING 
74218: ST_TO_ADDR
// animal := CreateHuman ;
74219: LD_ADDR_VAR 0 12
74223: PUSH
74224: CALL_OW 44
74228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74229: LD_VAR 0 12
74233: PPUSH
74234: LD_VAR 0 8
74238: PPUSH
74239: LD_INT 0
74241: PPUSH
74242: CALL 75957 0 3
// end ;
74246: GO 74200
74248: POP
74249: POP
// if fishes then
74250: LD_VAR 0 7
74254: IFFALSE 74321
// for i = 1 to fishes do
74256: LD_ADDR_VAR 0 11
74260: PUSH
74261: DOUBLE
74262: LD_INT 1
74264: DEC
74265: ST_TO_ADDR
74266: LD_VAR 0 7
74270: PUSH
74271: FOR_TO
74272: IFFALSE 74319
// begin hc_class = 20 ;
74274: LD_ADDR_OWVAR 28
74278: PUSH
74279: LD_INT 20
74281: ST_TO_ADDR
// hc_gallery =  ;
74282: LD_ADDR_OWVAR 33
74286: PUSH
74287: LD_STRING 
74289: ST_TO_ADDR
// animal := CreateHuman ;
74290: LD_ADDR_VAR 0 12
74294: PUSH
74295: CALL_OW 44
74299: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74300: LD_VAR 0 12
74304: PPUSH
74305: LD_VAR 0 9
74309: PPUSH
74310: LD_INT 0
74312: PPUSH
74313: CALL 75957 0 3
// end ;
74317: GO 74271
74319: POP
74320: POP
// end ;
74321: LD_VAR 0 10
74325: RET
// export function WantHeal ( sci , unit ) ; begin
74326: LD_INT 0
74328: PPUSH
// if GetTaskList ( sci ) > 0 then
74329: LD_VAR 0 1
74333: PPUSH
74334: CALL_OW 437
74338: PUSH
74339: LD_INT 0
74341: GREATER
74342: IFFALSE 74412
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74344: LD_VAR 0 1
74348: PPUSH
74349: CALL_OW 437
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PUSH
74358: LD_INT 1
74360: ARRAY
74361: PUSH
74362: LD_STRING l
74364: EQUAL
74365: PUSH
74366: LD_VAR 0 1
74370: PPUSH
74371: CALL_OW 437
74375: PUSH
74376: LD_INT 1
74378: ARRAY
74379: PUSH
74380: LD_INT 4
74382: ARRAY
74383: PUSH
74384: LD_VAR 0 2
74388: EQUAL
74389: AND
74390: IFFALSE 74402
// result := true else
74392: LD_ADDR_VAR 0 3
74396: PUSH
74397: LD_INT 1
74399: ST_TO_ADDR
74400: GO 74410
// result := false ;
74402: LD_ADDR_VAR 0 3
74406: PUSH
74407: LD_INT 0
74409: ST_TO_ADDR
// end else
74410: GO 74420
// result := false ;
74412: LD_ADDR_VAR 0 3
74416: PUSH
74417: LD_INT 0
74419: ST_TO_ADDR
// end ;
74420: LD_VAR 0 3
74424: RET
// export function HealTarget ( sci ) ; begin
74425: LD_INT 0
74427: PPUSH
// if not sci then
74428: LD_VAR 0 1
74432: NOT
74433: IFFALSE 74437
// exit ;
74435: GO 74502
// result := 0 ;
74437: LD_ADDR_VAR 0 2
74441: PUSH
74442: LD_INT 0
74444: ST_TO_ADDR
// if GetTaskList ( sci ) then
74445: LD_VAR 0 1
74449: PPUSH
74450: CALL_OW 437
74454: IFFALSE 74502
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74456: LD_VAR 0 1
74460: PPUSH
74461: CALL_OW 437
74465: PUSH
74466: LD_INT 1
74468: ARRAY
74469: PUSH
74470: LD_INT 1
74472: ARRAY
74473: PUSH
74474: LD_STRING l
74476: EQUAL
74477: IFFALSE 74502
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_VAR 0 1
74488: PPUSH
74489: CALL_OW 437
74493: PUSH
74494: LD_INT 1
74496: ARRAY
74497: PUSH
74498: LD_INT 4
74500: ARRAY
74501: ST_TO_ADDR
// end ;
74502: LD_VAR 0 2
74506: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74507: LD_INT 0
74509: PPUSH
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not base_units then
74513: LD_VAR 0 1
74517: NOT
74518: IFFALSE 74522
// exit ;
74520: GO 74609
// result := false ;
74522: LD_ADDR_VAR 0 2
74526: PUSH
74527: LD_INT 0
74529: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74530: LD_ADDR_VAR 0 5
74534: PUSH
74535: LD_VAR 0 1
74539: PPUSH
74540: LD_INT 21
74542: PUSH
74543: LD_INT 3
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PPUSH
74550: CALL_OW 72
74554: ST_TO_ADDR
// if not tmp then
74555: LD_VAR 0 5
74559: NOT
74560: IFFALSE 74564
// exit ;
74562: GO 74609
// for i in tmp do
74564: LD_ADDR_VAR 0 3
74568: PUSH
74569: LD_VAR 0 5
74573: PUSH
74574: FOR_IN
74575: IFFALSE 74607
// begin result := EnemyInRange ( i , 22 ) ;
74577: LD_ADDR_VAR 0 2
74581: PUSH
74582: LD_VAR 0 3
74586: PPUSH
74587: LD_INT 22
74589: PPUSH
74590: CALL 72222 0 2
74594: ST_TO_ADDR
// if result then
74595: LD_VAR 0 2
74599: IFFALSE 74605
// exit ;
74601: POP
74602: POP
74603: GO 74609
// end ;
74605: GO 74574
74607: POP
74608: POP
// end ;
74609: LD_VAR 0 2
74613: RET
// export function FilterByTag ( units , tag ) ; begin
74614: LD_INT 0
74616: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74617: LD_ADDR_VAR 0 3
74621: PUSH
74622: LD_VAR 0 1
74626: PPUSH
74627: LD_INT 120
74629: PUSH
74630: LD_VAR 0 2
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PPUSH
74639: CALL_OW 72
74643: ST_TO_ADDR
// end ;
74644: LD_VAR 0 3
74648: RET
// export function IsDriver ( un ) ; begin
74649: LD_INT 0
74651: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74652: LD_ADDR_VAR 0 2
74656: PUSH
74657: LD_VAR 0 1
74661: PUSH
74662: LD_INT 55
74664: PUSH
74665: EMPTY
74666: LIST
74667: PPUSH
74668: CALL_OW 69
74672: IN
74673: ST_TO_ADDR
// end ;
74674: LD_VAR 0 2
74678: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74679: LD_INT 0
74681: PPUSH
74682: PPUSH
// list := [ ] ;
74683: LD_ADDR_VAR 0 5
74687: PUSH
74688: EMPTY
74689: ST_TO_ADDR
// case d of 0 :
74690: LD_VAR 0 3
74694: PUSH
74695: LD_INT 0
74697: DOUBLE
74698: EQUAL
74699: IFTRUE 74703
74701: GO 74836
74703: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74704: LD_ADDR_VAR 0 5
74708: PUSH
74709: LD_VAR 0 1
74713: PUSH
74714: LD_INT 4
74716: MINUS
74717: PUSH
74718: LD_VAR 0 2
74722: PUSH
74723: LD_INT 4
74725: MINUS
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: LIST
74734: PUSH
74735: LD_VAR 0 1
74739: PUSH
74740: LD_INT 3
74742: MINUS
74743: PUSH
74744: LD_VAR 0 2
74748: PUSH
74749: LD_INT 1
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: LIST
74756: PUSH
74757: LD_VAR 0 1
74761: PUSH
74762: LD_INT 4
74764: PLUS
74765: PUSH
74766: LD_VAR 0 2
74770: PUSH
74771: LD_INT 4
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: LIST
74778: PUSH
74779: LD_VAR 0 1
74783: PUSH
74784: LD_INT 3
74786: PLUS
74787: PUSH
74788: LD_VAR 0 2
74792: PUSH
74793: LD_INT 3
74795: PLUS
74796: PUSH
74797: LD_INT 5
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: PUSH
74805: LD_VAR 0 1
74809: PUSH
74810: LD_VAR 0 2
74814: PUSH
74815: LD_INT 4
74817: PLUS
74818: PUSH
74819: LD_INT 0
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: LIST
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: ST_TO_ADDR
// end ; 1 :
74834: GO 75534
74836: LD_INT 1
74838: DOUBLE
74839: EQUAL
74840: IFTRUE 74844
74842: GO 74977
74844: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74845: LD_ADDR_VAR 0 5
74849: PUSH
74850: LD_VAR 0 1
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: LD_INT 4
74862: MINUS
74863: PUSH
74864: LD_INT 3
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: PUSH
74872: LD_VAR 0 1
74876: PUSH
74877: LD_INT 3
74879: MINUS
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_INT 3
74888: MINUS
74889: PUSH
74890: LD_INT 2
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: PUSH
74898: LD_VAR 0 1
74902: PUSH
74903: LD_INT 4
74905: MINUS
74906: PUSH
74907: LD_VAR 0 2
74911: PUSH
74912: LD_INT 1
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: LIST
74919: PUSH
74920: LD_VAR 0 1
74924: PUSH
74925: LD_VAR 0 2
74929: PUSH
74930: LD_INT 3
74932: PLUS
74933: PUSH
74934: LD_INT 0
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: LIST
74941: PUSH
74942: LD_VAR 0 1
74946: PUSH
74947: LD_INT 4
74949: PLUS
74950: PUSH
74951: LD_VAR 0 2
74955: PUSH
74956: LD_INT 4
74958: PLUS
74959: PUSH
74960: LD_INT 5
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: LIST
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: ST_TO_ADDR
// end ; 2 :
74975: GO 75534
74977: LD_INT 2
74979: DOUBLE
74980: EQUAL
74981: IFTRUE 74985
74983: GO 75114
74985: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74986: LD_ADDR_VAR 0 5
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_VAR 0 2
75000: PUSH
75001: LD_INT 3
75003: MINUS
75004: PUSH
75005: LD_INT 3
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: LD_VAR 0 1
75017: PUSH
75018: LD_INT 4
75020: PLUS
75021: PUSH
75022: LD_VAR 0 2
75026: PUSH
75027: LD_INT 4
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: LD_VAR 0 1
75039: PUSH
75040: LD_VAR 0 2
75044: PUSH
75045: LD_INT 4
75047: PLUS
75048: PUSH
75049: LD_INT 0
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: LIST
75056: PUSH
75057: LD_VAR 0 1
75061: PUSH
75062: LD_INT 3
75064: MINUS
75065: PUSH
75066: LD_VAR 0 2
75070: PUSH
75071: LD_INT 1
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: LIST
75078: PUSH
75079: LD_VAR 0 1
75083: PUSH
75084: LD_INT 4
75086: MINUS
75087: PUSH
75088: LD_VAR 0 2
75092: PUSH
75093: LD_INT 4
75095: MINUS
75096: PUSH
75097: LD_INT 2
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: LIST
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: ST_TO_ADDR
// end ; 3 :
75112: GO 75534
75114: LD_INT 3
75116: DOUBLE
75117: EQUAL
75118: IFTRUE 75122
75120: GO 75255
75122: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75123: LD_ADDR_VAR 0 5
75127: PUSH
75128: LD_VAR 0 1
75132: PUSH
75133: LD_INT 3
75135: PLUS
75136: PUSH
75137: LD_VAR 0 2
75141: PUSH
75142: LD_INT 4
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: PUSH
75150: LD_VAR 0 1
75154: PUSH
75155: LD_INT 4
75157: PLUS
75158: PUSH
75159: LD_VAR 0 2
75163: PUSH
75164: LD_INT 4
75166: PLUS
75167: PUSH
75168: LD_INT 5
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: PUSH
75176: LD_VAR 0 1
75180: PUSH
75181: LD_INT 4
75183: MINUS
75184: PUSH
75185: LD_VAR 0 2
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: LIST
75197: PUSH
75198: LD_VAR 0 1
75202: PUSH
75203: LD_VAR 0 2
75207: PUSH
75208: LD_INT 4
75210: MINUS
75211: PUSH
75212: LD_INT 3
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: LIST
75219: PUSH
75220: LD_VAR 0 1
75224: PUSH
75225: LD_INT 3
75227: MINUS
75228: PUSH
75229: LD_VAR 0 2
75233: PUSH
75234: LD_INT 3
75236: MINUS
75237: PUSH
75238: LD_INT 2
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: LIST
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: ST_TO_ADDR
// end ; 4 :
75253: GO 75534
75255: LD_INT 4
75257: DOUBLE
75258: EQUAL
75259: IFTRUE 75263
75261: GO 75396
75263: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75264: LD_ADDR_VAR 0 5
75268: PUSH
75269: LD_VAR 0 1
75273: PUSH
75274: LD_VAR 0 2
75278: PUSH
75279: LD_INT 4
75281: PLUS
75282: PUSH
75283: LD_INT 0
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 1
75295: PUSH
75296: LD_INT 3
75298: PLUS
75299: PUSH
75300: LD_VAR 0 2
75304: PUSH
75305: LD_INT 3
75307: PLUS
75308: PUSH
75309: LD_INT 5
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: PUSH
75317: LD_VAR 0 1
75321: PUSH
75322: LD_INT 4
75324: PLUS
75325: PUSH
75326: LD_VAR 0 2
75330: PUSH
75331: LD_INT 4
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: LIST
75338: PUSH
75339: LD_VAR 0 1
75343: PUSH
75344: LD_VAR 0 2
75348: PUSH
75349: LD_INT 3
75351: MINUS
75352: PUSH
75353: LD_INT 3
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: PUSH
75361: LD_VAR 0 1
75365: PUSH
75366: LD_INT 4
75368: MINUS
75369: PUSH
75370: LD_VAR 0 2
75374: PUSH
75375: LD_INT 4
75377: MINUS
75378: PUSH
75379: LD_INT 2
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: LIST
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: ST_TO_ADDR
// end ; 5 :
75394: GO 75534
75396: LD_INT 5
75398: DOUBLE
75399: EQUAL
75400: IFTRUE 75404
75402: GO 75533
75404: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75405: LD_ADDR_VAR 0 5
75409: PUSH
75410: LD_VAR 0 1
75414: PUSH
75415: LD_INT 4
75417: MINUS
75418: PUSH
75419: LD_VAR 0 2
75423: PUSH
75424: LD_INT 1
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: LD_VAR 0 1
75436: PUSH
75437: LD_VAR 0 2
75441: PUSH
75442: LD_INT 4
75444: MINUS
75445: PUSH
75446: LD_INT 3
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: LD_INT 4
75461: PLUS
75462: PUSH
75463: LD_VAR 0 2
75467: PUSH
75468: LD_INT 4
75470: PLUS
75471: PUSH
75472: LD_INT 5
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: LIST
75479: PUSH
75480: LD_VAR 0 1
75484: PUSH
75485: LD_INT 3
75487: PLUS
75488: PUSH
75489: LD_VAR 0 2
75493: PUSH
75494: LD_INT 4
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: LIST
75501: PUSH
75502: LD_VAR 0 1
75506: PUSH
75507: LD_VAR 0 2
75511: PUSH
75512: LD_INT 3
75514: PLUS
75515: PUSH
75516: LD_INT 0
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: ST_TO_ADDR
// end ; end ;
75531: GO 75534
75533: POP
// result := list ;
75534: LD_ADDR_VAR 0 4
75538: PUSH
75539: LD_VAR 0 5
75543: ST_TO_ADDR
// end ;
75544: LD_VAR 0 4
75548: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75549: LD_INT 0
75551: PPUSH
75552: PPUSH
75553: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75554: LD_VAR 0 1
75558: NOT
75559: PUSH
75560: LD_VAR 0 2
75564: PUSH
75565: LD_INT 1
75567: PUSH
75568: LD_INT 2
75570: PUSH
75571: LD_INT 3
75573: PUSH
75574: LD_INT 4
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: IN
75583: NOT
75584: OR
75585: IFFALSE 75589
// exit ;
75587: GO 75681
// tmp := [ ] ;
75589: LD_ADDR_VAR 0 5
75593: PUSH
75594: EMPTY
75595: ST_TO_ADDR
// for i in units do
75596: LD_ADDR_VAR 0 4
75600: PUSH
75601: LD_VAR 0 1
75605: PUSH
75606: FOR_IN
75607: IFFALSE 75650
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75609: LD_ADDR_VAR 0 5
75613: PUSH
75614: LD_VAR 0 5
75618: PPUSH
75619: LD_VAR 0 5
75623: PUSH
75624: LD_INT 1
75626: PLUS
75627: PPUSH
75628: LD_VAR 0 4
75632: PPUSH
75633: LD_VAR 0 2
75637: PPUSH
75638: CALL_OW 259
75642: PPUSH
75643: CALL_OW 2
75647: ST_TO_ADDR
75648: GO 75606
75650: POP
75651: POP
// if not tmp then
75652: LD_VAR 0 5
75656: NOT
75657: IFFALSE 75661
// exit ;
75659: GO 75681
// result := SortListByListDesc ( units , tmp ) ;
75661: LD_ADDR_VAR 0 3
75665: PUSH
75666: LD_VAR 0 1
75670: PPUSH
75671: LD_VAR 0 5
75675: PPUSH
75676: CALL_OW 77
75680: ST_TO_ADDR
// end ;
75681: LD_VAR 0 3
75685: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75686: LD_INT 0
75688: PPUSH
75689: PPUSH
75690: PPUSH
// result := false ;
75691: LD_ADDR_VAR 0 3
75695: PUSH
75696: LD_INT 0
75698: ST_TO_ADDR
// x := GetX ( building ) ;
75699: LD_ADDR_VAR 0 4
75703: PUSH
75704: LD_VAR 0 2
75708: PPUSH
75709: CALL_OW 250
75713: ST_TO_ADDR
// y := GetY ( building ) ;
75714: LD_ADDR_VAR 0 5
75718: PUSH
75719: LD_VAR 0 2
75723: PPUSH
75724: CALL_OW 251
75728: ST_TO_ADDR
// if not building or not x or not y then
75729: LD_VAR 0 2
75733: NOT
75734: PUSH
75735: LD_VAR 0 4
75739: NOT
75740: OR
75741: PUSH
75742: LD_VAR 0 5
75746: NOT
75747: OR
75748: IFFALSE 75752
// exit ;
75750: GO 75844
// if GetTaskList ( unit ) then
75752: LD_VAR 0 1
75756: PPUSH
75757: CALL_OW 437
75761: IFFALSE 75844
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75763: LD_STRING e
75765: PUSH
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 437
75775: PUSH
75776: LD_INT 1
75778: ARRAY
75779: PUSH
75780: LD_INT 1
75782: ARRAY
75783: EQUAL
75784: PUSH
75785: LD_VAR 0 4
75789: PUSH
75790: LD_VAR 0 1
75794: PPUSH
75795: CALL_OW 437
75799: PUSH
75800: LD_INT 1
75802: ARRAY
75803: PUSH
75804: LD_INT 2
75806: ARRAY
75807: EQUAL
75808: AND
75809: PUSH
75810: LD_VAR 0 5
75814: PUSH
75815: LD_VAR 0 1
75819: PPUSH
75820: CALL_OW 437
75824: PUSH
75825: LD_INT 1
75827: ARRAY
75828: PUSH
75829: LD_INT 3
75831: ARRAY
75832: EQUAL
75833: AND
75834: IFFALSE 75844
// result := true end ;
75836: LD_ADDR_VAR 0 3
75840: PUSH
75841: LD_INT 1
75843: ST_TO_ADDR
// end ;
75844: LD_VAR 0 3
75848: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75849: LD_INT 0
75851: PPUSH
// result := false ;
75852: LD_ADDR_VAR 0 4
75856: PUSH
75857: LD_INT 0
75859: ST_TO_ADDR
// if GetTaskList ( unit ) then
75860: LD_VAR 0 1
75864: PPUSH
75865: CALL_OW 437
75869: IFFALSE 75952
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75871: LD_STRING M
75873: PUSH
75874: LD_VAR 0 1
75878: PPUSH
75879: CALL_OW 437
75883: PUSH
75884: LD_INT 1
75886: ARRAY
75887: PUSH
75888: LD_INT 1
75890: ARRAY
75891: EQUAL
75892: PUSH
75893: LD_VAR 0 2
75897: PUSH
75898: LD_VAR 0 1
75902: PPUSH
75903: CALL_OW 437
75907: PUSH
75908: LD_INT 1
75910: ARRAY
75911: PUSH
75912: LD_INT 2
75914: ARRAY
75915: EQUAL
75916: AND
75917: PUSH
75918: LD_VAR 0 3
75922: PUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: CALL_OW 437
75932: PUSH
75933: LD_INT 1
75935: ARRAY
75936: PUSH
75937: LD_INT 3
75939: ARRAY
75940: EQUAL
75941: AND
75942: IFFALSE 75952
// result := true ;
75944: LD_ADDR_VAR 0 4
75948: PUSH
75949: LD_INT 1
75951: ST_TO_ADDR
// end ; end ;
75952: LD_VAR 0 4
75956: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75957: LD_INT 0
75959: PPUSH
75960: PPUSH
75961: PPUSH
75962: PPUSH
// if not unit or not area then
75963: LD_VAR 0 1
75967: NOT
75968: PUSH
75969: LD_VAR 0 2
75973: NOT
75974: OR
75975: IFFALSE 75979
// exit ;
75977: GO 76143
// tmp := AreaToList ( area , i ) ;
75979: LD_ADDR_VAR 0 6
75983: PUSH
75984: LD_VAR 0 2
75988: PPUSH
75989: LD_VAR 0 5
75993: PPUSH
75994: CALL_OW 517
75998: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75999: LD_ADDR_VAR 0 5
76003: PUSH
76004: DOUBLE
76005: LD_INT 1
76007: DEC
76008: ST_TO_ADDR
76009: LD_VAR 0 6
76013: PUSH
76014: LD_INT 1
76016: ARRAY
76017: PUSH
76018: FOR_TO
76019: IFFALSE 76141
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76021: LD_ADDR_VAR 0 7
76025: PUSH
76026: LD_VAR 0 6
76030: PUSH
76031: LD_INT 1
76033: ARRAY
76034: PUSH
76035: LD_VAR 0 5
76039: ARRAY
76040: PUSH
76041: LD_VAR 0 6
76045: PUSH
76046: LD_INT 2
76048: ARRAY
76049: PUSH
76050: LD_VAR 0 5
76054: ARRAY
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76060: LD_VAR 0 7
76064: PUSH
76065: LD_INT 1
76067: ARRAY
76068: PPUSH
76069: LD_VAR 0 7
76073: PUSH
76074: LD_INT 2
76076: ARRAY
76077: PPUSH
76078: CALL_OW 428
76082: PUSH
76083: LD_INT 0
76085: EQUAL
76086: IFFALSE 76139
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76088: LD_VAR 0 1
76092: PPUSH
76093: LD_VAR 0 7
76097: PUSH
76098: LD_INT 1
76100: ARRAY
76101: PPUSH
76102: LD_VAR 0 7
76106: PUSH
76107: LD_INT 2
76109: ARRAY
76110: PPUSH
76111: LD_VAR 0 3
76115: PPUSH
76116: CALL_OW 48
// result := IsPlaced ( unit ) ;
76120: LD_ADDR_VAR 0 4
76124: PUSH
76125: LD_VAR 0 1
76129: PPUSH
76130: CALL_OW 305
76134: ST_TO_ADDR
// exit ;
76135: POP
76136: POP
76137: GO 76143
// end ; end ;
76139: GO 76018
76141: POP
76142: POP
// end ;
76143: LD_VAR 0 4
76147: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76148: LD_INT 0
76150: PPUSH
76151: PPUSH
76152: PPUSH
// if not side or side > 8 then
76153: LD_VAR 0 1
76157: NOT
76158: PUSH
76159: LD_VAR 0 1
76163: PUSH
76164: LD_INT 8
76166: GREATER
76167: OR
76168: IFFALSE 76172
// exit ;
76170: GO 76359
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76172: LD_ADDR_VAR 0 4
76176: PUSH
76177: LD_INT 22
76179: PUSH
76180: LD_VAR 0 1
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 21
76191: PUSH
76192: LD_INT 3
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PPUSH
76203: CALL_OW 69
76207: ST_TO_ADDR
// if not tmp then
76208: LD_VAR 0 4
76212: NOT
76213: IFFALSE 76217
// exit ;
76215: GO 76359
// enable_addtolog := true ;
76217: LD_ADDR_OWVAR 81
76221: PUSH
76222: LD_INT 1
76224: ST_TO_ADDR
// AddToLog ( [ ) ;
76225: LD_STRING [
76227: PPUSH
76228: CALL_OW 561
// for i in tmp do
76232: LD_ADDR_VAR 0 3
76236: PUSH
76237: LD_VAR 0 4
76241: PUSH
76242: FOR_IN
76243: IFFALSE 76350
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76245: LD_STRING [
76247: PUSH
76248: LD_VAR 0 3
76252: PPUSH
76253: CALL_OW 266
76257: STR
76258: PUSH
76259: LD_STRING , 
76261: STR
76262: PUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: CALL_OW 250
76272: STR
76273: PUSH
76274: LD_STRING , 
76276: STR
76277: PUSH
76278: LD_VAR 0 3
76282: PPUSH
76283: CALL_OW 251
76287: STR
76288: PUSH
76289: LD_STRING , 
76291: STR
76292: PUSH
76293: LD_VAR 0 3
76297: PPUSH
76298: CALL_OW 254
76302: STR
76303: PUSH
76304: LD_STRING , 
76306: STR
76307: PUSH
76308: LD_VAR 0 3
76312: PPUSH
76313: LD_INT 1
76315: PPUSH
76316: CALL_OW 268
76320: STR
76321: PUSH
76322: LD_STRING , 
76324: STR
76325: PUSH
76326: LD_VAR 0 3
76330: PPUSH
76331: LD_INT 2
76333: PPUSH
76334: CALL_OW 268
76338: STR
76339: PUSH
76340: LD_STRING ],
76342: STR
76343: PPUSH
76344: CALL_OW 561
// end ;
76348: GO 76242
76350: POP
76351: POP
// AddToLog ( ]; ) ;
76352: LD_STRING ];
76354: PPUSH
76355: CALL_OW 561
// end ;
76359: LD_VAR 0 2
76363: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
76369: PPUSH
76370: PPUSH
// if not area or not rate or not max then
76371: LD_VAR 0 1
76375: NOT
76376: PUSH
76377: LD_VAR 0 2
76381: NOT
76382: OR
76383: PUSH
76384: LD_VAR 0 4
76388: NOT
76389: OR
76390: IFFALSE 76394
// exit ;
76392: GO 76583
// while 1 do
76394: LD_INT 1
76396: IFFALSE 76583
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76398: LD_ADDR_VAR 0 9
76402: PUSH
76403: LD_VAR 0 1
76407: PPUSH
76408: LD_INT 1
76410: PPUSH
76411: CALL_OW 287
76415: PUSH
76416: LD_INT 10
76418: MUL
76419: ST_TO_ADDR
// r := rate / 10 ;
76420: LD_ADDR_VAR 0 7
76424: PUSH
76425: LD_VAR 0 2
76429: PUSH
76430: LD_INT 10
76432: DIVREAL
76433: ST_TO_ADDR
// time := 1 1$00 ;
76434: LD_ADDR_VAR 0 8
76438: PUSH
76439: LD_INT 2100
76441: ST_TO_ADDR
// if amount < min then
76442: LD_VAR 0 9
76446: PUSH
76447: LD_VAR 0 3
76451: LESS
76452: IFFALSE 76470
// r := r * 2 else
76454: LD_ADDR_VAR 0 7
76458: PUSH
76459: LD_VAR 0 7
76463: PUSH
76464: LD_INT 2
76466: MUL
76467: ST_TO_ADDR
76468: GO 76496
// if amount > max then
76470: LD_VAR 0 9
76474: PUSH
76475: LD_VAR 0 4
76479: GREATER
76480: IFFALSE 76496
// r := r / 2 ;
76482: LD_ADDR_VAR 0 7
76486: PUSH
76487: LD_VAR 0 7
76491: PUSH
76492: LD_INT 2
76494: DIVREAL
76495: ST_TO_ADDR
// time := time / r ;
76496: LD_ADDR_VAR 0 8
76500: PUSH
76501: LD_VAR 0 8
76505: PUSH
76506: LD_VAR 0 7
76510: DIVREAL
76511: ST_TO_ADDR
// if time < 0 then
76512: LD_VAR 0 8
76516: PUSH
76517: LD_INT 0
76519: LESS
76520: IFFALSE 76537
// time := time * - 1 ;
76522: LD_ADDR_VAR 0 8
76526: PUSH
76527: LD_VAR 0 8
76531: PUSH
76532: LD_INT 1
76534: NEG
76535: MUL
76536: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76537: LD_VAR 0 8
76541: PUSH
76542: LD_INT 35
76544: PPUSH
76545: LD_INT 875
76547: PPUSH
76548: CALL_OW 12
76552: PLUS
76553: PPUSH
76554: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76558: LD_INT 1
76560: PPUSH
76561: LD_INT 5
76563: PPUSH
76564: CALL_OW 12
76568: PPUSH
76569: LD_VAR 0 1
76573: PPUSH
76574: LD_INT 1
76576: PPUSH
76577: CALL_OW 55
// end ;
76581: GO 76394
// end ;
76583: LD_VAR 0 5
76587: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76588: LD_INT 0
76590: PPUSH
76591: PPUSH
76592: PPUSH
76593: PPUSH
76594: PPUSH
76595: PPUSH
76596: PPUSH
76597: PPUSH
// if not turrets or not factories then
76598: LD_VAR 0 1
76602: NOT
76603: PUSH
76604: LD_VAR 0 2
76608: NOT
76609: OR
76610: IFFALSE 76614
// exit ;
76612: GO 76921
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76614: LD_ADDR_VAR 0 10
76618: PUSH
76619: LD_INT 5
76621: PUSH
76622: LD_INT 6
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 2
76631: PUSH
76632: LD_INT 4
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 3
76641: PUSH
76642: LD_INT 5
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 24
76656: PUSH
76657: LD_INT 25
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 23
76666: PUSH
76667: LD_INT 27
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: LD_INT 42
76680: PUSH
76681: LD_INT 43
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 44
76690: PUSH
76691: LD_INT 46
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 45
76700: PUSH
76701: LD_INT 47
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: LIST
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: LIST
76717: ST_TO_ADDR
// result := [ ] ;
76718: LD_ADDR_VAR 0 3
76722: PUSH
76723: EMPTY
76724: ST_TO_ADDR
// for i in turrets do
76725: LD_ADDR_VAR 0 4
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: FOR_IN
76736: IFFALSE 76919
// begin nat := GetNation ( i ) ;
76738: LD_ADDR_VAR 0 7
76742: PUSH
76743: LD_VAR 0 4
76747: PPUSH
76748: CALL_OW 248
76752: ST_TO_ADDR
// weapon := 0 ;
76753: LD_ADDR_VAR 0 8
76757: PUSH
76758: LD_INT 0
76760: ST_TO_ADDR
// if not nat then
76761: LD_VAR 0 7
76765: NOT
76766: IFFALSE 76770
// continue ;
76768: GO 76735
// for j in list [ nat ] do
76770: LD_ADDR_VAR 0 5
76774: PUSH
76775: LD_VAR 0 10
76779: PUSH
76780: LD_VAR 0 7
76784: ARRAY
76785: PUSH
76786: FOR_IN
76787: IFFALSE 76828
// if GetBWeapon ( i ) = j [ 1 ] then
76789: LD_VAR 0 4
76793: PPUSH
76794: CALL_OW 269
76798: PUSH
76799: LD_VAR 0 5
76803: PUSH
76804: LD_INT 1
76806: ARRAY
76807: EQUAL
76808: IFFALSE 76826
// begin weapon := j [ 2 ] ;
76810: LD_ADDR_VAR 0 8
76814: PUSH
76815: LD_VAR 0 5
76819: PUSH
76820: LD_INT 2
76822: ARRAY
76823: ST_TO_ADDR
// break ;
76824: GO 76828
// end ;
76826: GO 76786
76828: POP
76829: POP
// if not weapon then
76830: LD_VAR 0 8
76834: NOT
76835: IFFALSE 76839
// continue ;
76837: GO 76735
// for k in factories do
76839: LD_ADDR_VAR 0 6
76843: PUSH
76844: LD_VAR 0 2
76848: PUSH
76849: FOR_IN
76850: IFFALSE 76915
// begin weapons := AvailableWeaponList ( k ) ;
76852: LD_ADDR_VAR 0 9
76856: PUSH
76857: LD_VAR 0 6
76861: PPUSH
76862: CALL_OW 478
76866: ST_TO_ADDR
// if not weapons then
76867: LD_VAR 0 9
76871: NOT
76872: IFFALSE 76876
// continue ;
76874: GO 76849
// if weapon in weapons then
76876: LD_VAR 0 8
76880: PUSH
76881: LD_VAR 0 9
76885: IN
76886: IFFALSE 76913
// begin result := [ i , weapon ] ;
76888: LD_ADDR_VAR 0 3
76892: PUSH
76893: LD_VAR 0 4
76897: PUSH
76898: LD_VAR 0 8
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: ST_TO_ADDR
// exit ;
76907: POP
76908: POP
76909: POP
76910: POP
76911: GO 76921
// end ; end ;
76913: GO 76849
76915: POP
76916: POP
// end ;
76917: GO 76735
76919: POP
76920: POP
// end ;
76921: LD_VAR 0 3
76925: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76926: LD_INT 0
76928: PPUSH
// if not side or side > 8 then
76929: LD_VAR 0 3
76933: NOT
76934: PUSH
76935: LD_VAR 0 3
76939: PUSH
76940: LD_INT 8
76942: GREATER
76943: OR
76944: IFFALSE 76948
// exit ;
76946: GO 77007
// if not range then
76948: LD_VAR 0 4
76952: NOT
76953: IFFALSE 76964
// range := - 12 ;
76955: LD_ADDR_VAR 0 4
76959: PUSH
76960: LD_INT 12
76962: NEG
76963: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76964: LD_VAR 0 1
76968: PPUSH
76969: LD_VAR 0 2
76973: PPUSH
76974: LD_VAR 0 3
76978: PPUSH
76979: LD_VAR 0 4
76983: PPUSH
76984: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76988: LD_VAR 0 1
76992: PPUSH
76993: LD_VAR 0 2
76997: PPUSH
76998: LD_VAR 0 3
77002: PPUSH
77003: CALL_OW 331
// end ;
77007: LD_VAR 0 5
77011: RET
// export function Video ( mode ) ; begin
77012: LD_INT 0
77014: PPUSH
// ingame_video = mode ;
77015: LD_ADDR_OWVAR 52
77019: PUSH
77020: LD_VAR 0 1
77024: ST_TO_ADDR
// interface_hidden = mode ;
77025: LD_ADDR_OWVAR 54
77029: PUSH
77030: LD_VAR 0 1
77034: ST_TO_ADDR
// end ;
77035: LD_VAR 0 2
77039: RET
// export function Join ( array , element ) ; begin
77040: LD_INT 0
77042: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77043: LD_ADDR_VAR 0 3
77047: PUSH
77048: LD_VAR 0 1
77052: PPUSH
77053: LD_VAR 0 1
77057: PUSH
77058: LD_INT 1
77060: PLUS
77061: PPUSH
77062: LD_VAR 0 2
77066: PPUSH
77067: CALL_OW 1
77071: ST_TO_ADDR
// end ;
77072: LD_VAR 0 3
77076: RET
// export function JoinUnion ( array , element ) ; begin
77077: LD_INT 0
77079: PPUSH
// result := array union element ;
77080: LD_ADDR_VAR 0 3
77084: PUSH
77085: LD_VAR 0 1
77089: PUSH
77090: LD_VAR 0 2
77094: UNION
77095: ST_TO_ADDR
// end ;
77096: LD_VAR 0 3
77100: RET
// export function GetBehemoths ( side ) ; begin
77101: LD_INT 0
77103: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77104: LD_ADDR_VAR 0 2
77108: PUSH
77109: LD_INT 22
77111: PUSH
77112: LD_VAR 0 1
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 31
77123: PUSH
77124: LD_INT 25
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PPUSH
77135: CALL_OW 69
77139: ST_TO_ADDR
// end ;
77140: LD_VAR 0 2
77144: RET
// export function Shuffle ( array ) ; var i , index ; begin
77145: LD_INT 0
77147: PPUSH
77148: PPUSH
77149: PPUSH
// result := [ ] ;
77150: LD_ADDR_VAR 0 2
77154: PUSH
77155: EMPTY
77156: ST_TO_ADDR
// if not array then
77157: LD_VAR 0 1
77161: NOT
77162: IFFALSE 77166
// exit ;
77164: GO 77265
// Randomize ;
77166: CALL_OW 10
// for i = array downto 1 do
77170: LD_ADDR_VAR 0 3
77174: PUSH
77175: DOUBLE
77176: LD_VAR 0 1
77180: INC
77181: ST_TO_ADDR
77182: LD_INT 1
77184: PUSH
77185: FOR_DOWNTO
77186: IFFALSE 77263
// begin index := rand ( 1 , array ) ;
77188: LD_ADDR_VAR 0 4
77192: PUSH
77193: LD_INT 1
77195: PPUSH
77196: LD_VAR 0 1
77200: PPUSH
77201: CALL_OW 12
77205: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77206: LD_ADDR_VAR 0 2
77210: PUSH
77211: LD_VAR 0 2
77215: PPUSH
77216: LD_VAR 0 2
77220: PUSH
77221: LD_INT 1
77223: PLUS
77224: PPUSH
77225: LD_VAR 0 1
77229: PUSH
77230: LD_VAR 0 4
77234: ARRAY
77235: PPUSH
77236: CALL_OW 2
77240: ST_TO_ADDR
// array := Delete ( array , index ) ;
77241: LD_ADDR_VAR 0 1
77245: PUSH
77246: LD_VAR 0 1
77250: PPUSH
77251: LD_VAR 0 4
77255: PPUSH
77256: CALL_OW 3
77260: ST_TO_ADDR
// end ;
77261: GO 77185
77263: POP
77264: POP
// end ;
77265: LD_VAR 0 2
77269: RET
// export function GetBaseMaterials ( base ) ; begin
77270: LD_INT 0
77272: PPUSH
// result := [ 0 , 0 , 0 ] ;
77273: LD_ADDR_VAR 0 2
77277: PUSH
77278: LD_INT 0
77280: PUSH
77281: LD_INT 0
77283: PUSH
77284: LD_INT 0
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: LIST
77291: ST_TO_ADDR
// if not base then
77292: LD_VAR 0 1
77296: NOT
77297: IFFALSE 77301
// exit ;
77299: GO 77350
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77301: LD_ADDR_VAR 0 2
77305: PUSH
77306: LD_VAR 0 1
77310: PPUSH
77311: LD_INT 1
77313: PPUSH
77314: CALL_OW 275
77318: PUSH
77319: LD_VAR 0 1
77323: PPUSH
77324: LD_INT 2
77326: PPUSH
77327: CALL_OW 275
77331: PUSH
77332: LD_VAR 0 1
77336: PPUSH
77337: LD_INT 3
77339: PPUSH
77340: CALL_OW 275
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: LIST
77349: ST_TO_ADDR
// end ;
77350: LD_VAR 0 2
77354: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77355: LD_INT 0
77357: PPUSH
77358: PPUSH
// result := array ;
77359: LD_ADDR_VAR 0 3
77363: PUSH
77364: LD_VAR 0 1
77368: ST_TO_ADDR
// if size >= result then
77369: LD_VAR 0 2
77373: PUSH
77374: LD_VAR 0 3
77378: GREATEREQUAL
77379: IFFALSE 77383
// exit ;
77381: GO 77433
// if size then
77383: LD_VAR 0 2
77387: IFFALSE 77433
// for i := array downto size do
77389: LD_ADDR_VAR 0 4
77393: PUSH
77394: DOUBLE
77395: LD_VAR 0 1
77399: INC
77400: ST_TO_ADDR
77401: LD_VAR 0 2
77405: PUSH
77406: FOR_DOWNTO
77407: IFFALSE 77431
// result := Delete ( result , result ) ;
77409: LD_ADDR_VAR 0 3
77413: PUSH
77414: LD_VAR 0 3
77418: PPUSH
77419: LD_VAR 0 3
77423: PPUSH
77424: CALL_OW 3
77428: ST_TO_ADDR
77429: GO 77406
77431: POP
77432: POP
// end ;
77433: LD_VAR 0 3
77437: RET
// export function ComExit ( unit ) ; var tmp ; begin
77438: LD_INT 0
77440: PPUSH
77441: PPUSH
// if not IsInUnit ( unit ) then
77442: LD_VAR 0 1
77446: PPUSH
77447: CALL_OW 310
77451: NOT
77452: IFFALSE 77456
// exit ;
77454: GO 77516
// tmp := IsInUnit ( unit ) ;
77456: LD_ADDR_VAR 0 3
77460: PUSH
77461: LD_VAR 0 1
77465: PPUSH
77466: CALL_OW 310
77470: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77471: LD_VAR 0 3
77475: PPUSH
77476: CALL_OW 247
77480: PUSH
77481: LD_INT 2
77483: EQUAL
77484: IFFALSE 77497
// ComExitVehicle ( unit ) else
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 121
77495: GO 77506
// ComExitBuilding ( unit ) ;
77497: LD_VAR 0 1
77501: PPUSH
77502: CALL_OW 122
// result := tmp ;
77506: LD_ADDR_VAR 0 2
77510: PUSH
77511: LD_VAR 0 3
77515: ST_TO_ADDR
// end ;
77516: LD_VAR 0 2
77520: RET
// export function ComExitAll ( units ) ; var i ; begin
77521: LD_INT 0
77523: PPUSH
77524: PPUSH
// if not units then
77525: LD_VAR 0 1
77529: NOT
77530: IFFALSE 77534
// exit ;
77532: GO 77560
// for i in units do
77534: LD_ADDR_VAR 0 3
77538: PUSH
77539: LD_VAR 0 1
77543: PUSH
77544: FOR_IN
77545: IFFALSE 77558
// ComExit ( i ) ;
77547: LD_VAR 0 3
77551: PPUSH
77552: CALL 77438 0 1
77556: GO 77544
77558: POP
77559: POP
// end ;
77560: LD_VAR 0 2
77564: RET
// export function ResetHc ; begin
77565: LD_INT 0
77567: PPUSH
// InitHc ;
77568: CALL_OW 19
// hc_importance := 0 ;
77572: LD_ADDR_OWVAR 32
77576: PUSH
77577: LD_INT 0
77579: ST_TO_ADDR
// end ;
77580: LD_VAR 0 1
77584: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77585: LD_INT 0
77587: PPUSH
77588: PPUSH
77589: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77590: LD_ADDR_VAR 0 6
77594: PUSH
77595: LD_VAR 0 1
77599: PUSH
77600: LD_VAR 0 3
77604: PLUS
77605: PUSH
77606: LD_INT 2
77608: DIV
77609: ST_TO_ADDR
// if _x < 0 then
77610: LD_VAR 0 6
77614: PUSH
77615: LD_INT 0
77617: LESS
77618: IFFALSE 77635
// _x := _x * - 1 ;
77620: LD_ADDR_VAR 0 6
77624: PUSH
77625: LD_VAR 0 6
77629: PUSH
77630: LD_INT 1
77632: NEG
77633: MUL
77634: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77635: LD_ADDR_VAR 0 7
77639: PUSH
77640: LD_VAR 0 2
77644: PUSH
77645: LD_VAR 0 4
77649: PLUS
77650: PUSH
77651: LD_INT 2
77653: DIV
77654: ST_TO_ADDR
// if _y < 0 then
77655: LD_VAR 0 7
77659: PUSH
77660: LD_INT 0
77662: LESS
77663: IFFALSE 77680
// _y := _y * - 1 ;
77665: LD_ADDR_VAR 0 7
77669: PUSH
77670: LD_VAR 0 7
77674: PUSH
77675: LD_INT 1
77677: NEG
77678: MUL
77679: ST_TO_ADDR
// result := [ _x , _y ] ;
77680: LD_ADDR_VAR 0 5
77684: PUSH
77685: LD_VAR 0 6
77689: PUSH
77690: LD_VAR 0 7
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: ST_TO_ADDR
// end ;
77699: LD_VAR 0 5
77703: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77704: LD_INT 0
77706: PPUSH
77707: PPUSH
77708: PPUSH
77709: PPUSH
// task := GetTaskList ( unit ) ;
77710: LD_ADDR_VAR 0 7
77714: PUSH
77715: LD_VAR 0 1
77719: PPUSH
77720: CALL_OW 437
77724: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77725: LD_VAR 0 7
77729: NOT
77730: PUSH
77731: LD_VAR 0 1
77735: PPUSH
77736: LD_VAR 0 2
77740: PPUSH
77741: CALL_OW 308
77745: NOT
77746: AND
77747: IFFALSE 77751
// exit ;
77749: GO 77869
// if IsInArea ( unit , area ) then
77751: LD_VAR 0 1
77755: PPUSH
77756: LD_VAR 0 2
77760: PPUSH
77761: CALL_OW 308
77765: IFFALSE 77783
// begin ComMoveToArea ( unit , goAway ) ;
77767: LD_VAR 0 1
77771: PPUSH
77772: LD_VAR 0 3
77776: PPUSH
77777: CALL_OW 113
// exit ;
77781: GO 77869
// end ; if task [ 1 ] [ 1 ] <> M then
77783: LD_VAR 0 7
77787: PUSH
77788: LD_INT 1
77790: ARRAY
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: PUSH
77796: LD_STRING M
77798: NONEQUAL
77799: IFFALSE 77803
// exit ;
77801: GO 77869
// x := task [ 1 ] [ 2 ] ;
77803: LD_ADDR_VAR 0 5
77807: PUSH
77808: LD_VAR 0 7
77812: PUSH
77813: LD_INT 1
77815: ARRAY
77816: PUSH
77817: LD_INT 2
77819: ARRAY
77820: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77821: LD_ADDR_VAR 0 6
77825: PUSH
77826: LD_VAR 0 7
77830: PUSH
77831: LD_INT 1
77833: ARRAY
77834: PUSH
77835: LD_INT 3
77837: ARRAY
77838: ST_TO_ADDR
// if InArea ( x , y , area ) then
77839: LD_VAR 0 5
77843: PPUSH
77844: LD_VAR 0 6
77848: PPUSH
77849: LD_VAR 0 2
77853: PPUSH
77854: CALL_OW 309
77858: IFFALSE 77869
// ComStop ( unit ) ;
77860: LD_VAR 0 1
77864: PPUSH
77865: CALL_OW 141
// end ;
77869: LD_VAR 0 4
77873: RET
// export function Abs ( value ) ; begin
77874: LD_INT 0
77876: PPUSH
// result := value ;
77877: LD_ADDR_VAR 0 2
77881: PUSH
77882: LD_VAR 0 1
77886: ST_TO_ADDR
// if value < 0 then
77887: LD_VAR 0 1
77891: PUSH
77892: LD_INT 0
77894: LESS
77895: IFFALSE 77912
// result := value * - 1 ;
77897: LD_ADDR_VAR 0 2
77901: PUSH
77902: LD_VAR 0 1
77906: PUSH
77907: LD_INT 1
77909: NEG
77910: MUL
77911: ST_TO_ADDR
// end ;
77912: LD_VAR 0 2
77916: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77917: LD_INT 0
77919: PPUSH
77920: PPUSH
77921: PPUSH
77922: PPUSH
77923: PPUSH
77924: PPUSH
77925: PPUSH
77926: PPUSH
// if not unit or not building then
77927: LD_VAR 0 1
77931: NOT
77932: PUSH
77933: LD_VAR 0 2
77937: NOT
77938: OR
77939: IFFALSE 77943
// exit ;
77941: GO 78169
// x := GetX ( building ) ;
77943: LD_ADDR_VAR 0 4
77947: PUSH
77948: LD_VAR 0 2
77952: PPUSH
77953: CALL_OW 250
77957: ST_TO_ADDR
// y := GetY ( building ) ;
77958: LD_ADDR_VAR 0 6
77962: PUSH
77963: LD_VAR 0 2
77967: PPUSH
77968: CALL_OW 251
77972: ST_TO_ADDR
// d := GetDir ( building ) ;
77973: LD_ADDR_VAR 0 8
77977: PUSH
77978: LD_VAR 0 2
77982: PPUSH
77983: CALL_OW 254
77987: ST_TO_ADDR
// r := 4 ;
77988: LD_ADDR_VAR 0 9
77992: PUSH
77993: LD_INT 4
77995: ST_TO_ADDR
// for i := 1 to 5 do
77996: LD_ADDR_VAR 0 10
78000: PUSH
78001: DOUBLE
78002: LD_INT 1
78004: DEC
78005: ST_TO_ADDR
78006: LD_INT 5
78008: PUSH
78009: FOR_TO
78010: IFFALSE 78167
// begin _x := ShiftX ( x , d , r + i ) ;
78012: LD_ADDR_VAR 0 5
78016: PUSH
78017: LD_VAR 0 4
78021: PPUSH
78022: LD_VAR 0 8
78026: PPUSH
78027: LD_VAR 0 9
78031: PUSH
78032: LD_VAR 0 10
78036: PLUS
78037: PPUSH
78038: CALL_OW 272
78042: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78043: LD_ADDR_VAR 0 7
78047: PUSH
78048: LD_VAR 0 6
78052: PPUSH
78053: LD_VAR 0 8
78057: PPUSH
78058: LD_VAR 0 9
78062: PUSH
78063: LD_VAR 0 10
78067: PLUS
78068: PPUSH
78069: CALL_OW 273
78073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78074: LD_VAR 0 5
78078: PPUSH
78079: LD_VAR 0 7
78083: PPUSH
78084: CALL_OW 488
78088: PUSH
78089: LD_VAR 0 5
78093: PPUSH
78094: LD_VAR 0 7
78098: PPUSH
78099: CALL_OW 428
78103: PPUSH
78104: CALL_OW 247
78108: PUSH
78109: LD_INT 3
78111: PUSH
78112: LD_INT 2
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: IN
78119: NOT
78120: AND
78121: IFFALSE 78165
// begin ComMoveXY ( unit , _x , _y ) ;
78123: LD_VAR 0 1
78127: PPUSH
78128: LD_VAR 0 5
78132: PPUSH
78133: LD_VAR 0 7
78137: PPUSH
78138: CALL_OW 111
// result := [ _x , _y ] ;
78142: LD_ADDR_VAR 0 3
78146: PUSH
78147: LD_VAR 0 5
78151: PUSH
78152: LD_VAR 0 7
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: ST_TO_ADDR
// exit ;
78161: POP
78162: POP
78163: GO 78169
// end ; end ;
78165: GO 78009
78167: POP
78168: POP
// end ;
78169: LD_VAR 0 3
78173: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78174: LD_INT 0
78176: PPUSH
78177: PPUSH
78178: PPUSH
// result := 0 ;
78179: LD_ADDR_VAR 0 3
78183: PUSH
78184: LD_INT 0
78186: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78187: LD_VAR 0 1
78191: PUSH
78192: LD_INT 0
78194: LESS
78195: PUSH
78196: LD_VAR 0 1
78200: PUSH
78201: LD_INT 8
78203: GREATER
78204: OR
78205: PUSH
78206: LD_VAR 0 2
78210: PUSH
78211: LD_INT 0
78213: LESS
78214: OR
78215: PUSH
78216: LD_VAR 0 2
78220: PUSH
78221: LD_INT 8
78223: GREATER
78224: OR
78225: IFFALSE 78229
// exit ;
78227: GO 78304
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78229: LD_ADDR_VAR 0 4
78233: PUSH
78234: LD_INT 22
78236: PUSH
78237: LD_VAR 0 2
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PPUSH
78246: CALL_OW 69
78250: PUSH
78251: FOR_IN
78252: IFFALSE 78302
// begin un := UnitShoot ( i ) ;
78254: LD_ADDR_VAR 0 5
78258: PUSH
78259: LD_VAR 0 4
78263: PPUSH
78264: CALL_OW 504
78268: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78269: LD_VAR 0 5
78273: PPUSH
78274: CALL_OW 255
78278: PUSH
78279: LD_VAR 0 1
78283: EQUAL
78284: IFFALSE 78300
// begin result := un ;
78286: LD_ADDR_VAR 0 3
78290: PUSH
78291: LD_VAR 0 5
78295: ST_TO_ADDR
// exit ;
78296: POP
78297: POP
78298: GO 78304
// end ; end ;
78300: GO 78251
78302: POP
78303: POP
// end ;
78304: LD_VAR 0 3
78308: RET
// export function GetCargoBay ( units ) ; begin
78309: LD_INT 0
78311: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78312: LD_ADDR_VAR 0 2
78316: PUSH
78317: LD_VAR 0 1
78321: PPUSH
78322: LD_INT 2
78324: PUSH
78325: LD_INT 34
78327: PUSH
78328: LD_INT 12
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 34
78337: PUSH
78338: LD_INT 51
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: LD_INT 34
78347: PUSH
78348: LD_INT 32
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PUSH
78355: LD_INT 34
78357: PUSH
78358: LD_INT 89
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: PPUSH
78372: CALL_OW 72
78376: ST_TO_ADDR
// end ;
78377: LD_VAR 0 2
78381: RET
// export function Negate ( value ) ; begin
78382: LD_INT 0
78384: PPUSH
// result := not value ;
78385: LD_ADDR_VAR 0 2
78389: PUSH
78390: LD_VAR 0 1
78394: NOT
78395: ST_TO_ADDR
// end ;
78396: LD_VAR 0 2
78400: RET
// export function Inc ( value ) ; begin
78401: LD_INT 0
78403: PPUSH
// result := value + 1 ;
78404: LD_ADDR_VAR 0 2
78408: PUSH
78409: LD_VAR 0 1
78413: PUSH
78414: LD_INT 1
78416: PLUS
78417: ST_TO_ADDR
// end ;
78418: LD_VAR 0 2
78422: RET
// export function Dec ( value ) ; begin
78423: LD_INT 0
78425: PPUSH
// result := value - 1 ;
78426: LD_ADDR_VAR 0 2
78430: PUSH
78431: LD_VAR 0 1
78435: PUSH
78436: LD_INT 1
78438: MINUS
78439: ST_TO_ADDR
// end ;
78440: LD_VAR 0 2
78444: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78445: LD_INT 0
78447: PPUSH
78448: PPUSH
78449: PPUSH
78450: PPUSH
78451: PPUSH
78452: PPUSH
78453: PPUSH
78454: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78455: LD_VAR 0 1
78459: PPUSH
78460: LD_VAR 0 2
78464: PPUSH
78465: CALL_OW 488
78469: NOT
78470: PUSH
78471: LD_VAR 0 3
78475: PPUSH
78476: LD_VAR 0 4
78480: PPUSH
78481: CALL_OW 488
78485: NOT
78486: OR
78487: IFFALSE 78500
// begin result := - 1 ;
78489: LD_ADDR_VAR 0 5
78493: PUSH
78494: LD_INT 1
78496: NEG
78497: ST_TO_ADDR
// exit ;
78498: GO 78735
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78500: LD_ADDR_VAR 0 12
78504: PUSH
78505: LD_VAR 0 1
78509: PPUSH
78510: LD_VAR 0 2
78514: PPUSH
78515: LD_VAR 0 3
78519: PPUSH
78520: LD_VAR 0 4
78524: PPUSH
78525: CALL 77585 0 4
78529: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78530: LD_ADDR_VAR 0 11
78534: PUSH
78535: LD_VAR 0 1
78539: PPUSH
78540: LD_VAR 0 2
78544: PPUSH
78545: LD_VAR 0 12
78549: PUSH
78550: LD_INT 1
78552: ARRAY
78553: PPUSH
78554: LD_VAR 0 12
78558: PUSH
78559: LD_INT 2
78561: ARRAY
78562: PPUSH
78563: CALL_OW 298
78567: ST_TO_ADDR
// distance := 9999 ;
78568: LD_ADDR_VAR 0 10
78572: PUSH
78573: LD_INT 9999
78575: ST_TO_ADDR
// for i := 0 to 5 do
78576: LD_ADDR_VAR 0 6
78580: PUSH
78581: DOUBLE
78582: LD_INT 0
78584: DEC
78585: ST_TO_ADDR
78586: LD_INT 5
78588: PUSH
78589: FOR_TO
78590: IFFALSE 78733
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78592: LD_ADDR_VAR 0 7
78596: PUSH
78597: LD_VAR 0 1
78601: PPUSH
78602: LD_VAR 0 6
78606: PPUSH
78607: LD_VAR 0 11
78611: PPUSH
78612: CALL_OW 272
78616: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78617: LD_ADDR_VAR 0 8
78621: PUSH
78622: LD_VAR 0 2
78626: PPUSH
78627: LD_VAR 0 6
78631: PPUSH
78632: LD_VAR 0 11
78636: PPUSH
78637: CALL_OW 273
78641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78642: LD_VAR 0 7
78646: PPUSH
78647: LD_VAR 0 8
78651: PPUSH
78652: CALL_OW 488
78656: NOT
78657: IFFALSE 78661
// continue ;
78659: GO 78589
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78661: LD_ADDR_VAR 0 9
78665: PUSH
78666: LD_VAR 0 12
78670: PUSH
78671: LD_INT 1
78673: ARRAY
78674: PPUSH
78675: LD_VAR 0 12
78679: PUSH
78680: LD_INT 2
78682: ARRAY
78683: PPUSH
78684: LD_VAR 0 7
78688: PPUSH
78689: LD_VAR 0 8
78693: PPUSH
78694: CALL_OW 298
78698: ST_TO_ADDR
// if tmp < distance then
78699: LD_VAR 0 9
78703: PUSH
78704: LD_VAR 0 10
78708: LESS
78709: IFFALSE 78731
// begin result := i ;
78711: LD_ADDR_VAR 0 5
78715: PUSH
78716: LD_VAR 0 6
78720: ST_TO_ADDR
// distance := tmp ;
78721: LD_ADDR_VAR 0 10
78725: PUSH
78726: LD_VAR 0 9
78730: ST_TO_ADDR
// end ; end ;
78731: GO 78589
78733: POP
78734: POP
// end ;
78735: LD_VAR 0 5
78739: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78740: LD_INT 0
78742: PPUSH
78743: PPUSH
// if not driver or not IsInUnit ( driver ) then
78744: LD_VAR 0 1
78748: NOT
78749: PUSH
78750: LD_VAR 0 1
78754: PPUSH
78755: CALL_OW 310
78759: NOT
78760: OR
78761: IFFALSE 78765
// exit ;
78763: GO 78855
// vehicle := IsInUnit ( driver ) ;
78765: LD_ADDR_VAR 0 3
78769: PUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: CALL_OW 310
78779: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78780: LD_VAR 0 1
78784: PPUSH
78785: LD_STRING \
78787: PUSH
78788: LD_INT 0
78790: PUSH
78791: LD_INT 0
78793: PUSH
78794: LD_INT 0
78796: PUSH
78797: LD_INT 0
78799: PUSH
78800: LD_INT 0
78802: PUSH
78803: LD_INT 0
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: PUSH
78815: LD_STRING E
78817: PUSH
78818: LD_INT 0
78820: PUSH
78821: LD_INT 0
78823: PUSH
78824: LD_VAR 0 3
78828: PUSH
78829: LD_INT 0
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: LD_INT 0
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: PUSH
78847: EMPTY
78848: LIST
78849: LIST
78850: PPUSH
78851: CALL_OW 446
// end ;
78855: LD_VAR 0 2
78859: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
// if not driver or not IsInUnit ( driver ) then
78864: LD_VAR 0 1
78868: NOT
78869: PUSH
78870: LD_VAR 0 1
78874: PPUSH
78875: CALL_OW 310
78879: NOT
78880: OR
78881: IFFALSE 78885
// exit ;
78883: GO 78975
// vehicle := IsInUnit ( driver ) ;
78885: LD_ADDR_VAR 0 3
78889: PUSH
78890: LD_VAR 0 1
78894: PPUSH
78895: CALL_OW 310
78899: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78900: LD_VAR 0 1
78904: PPUSH
78905: LD_STRING \
78907: PUSH
78908: LD_INT 0
78910: PUSH
78911: LD_INT 0
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: LD_INT 0
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: LD_INT 0
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: LIST
78932: LIST
78933: LIST
78934: PUSH
78935: LD_STRING E
78937: PUSH
78938: LD_INT 0
78940: PUSH
78941: LD_INT 0
78943: PUSH
78944: LD_VAR 0 3
78948: PUSH
78949: LD_INT 0
78951: PUSH
78952: LD_INT 0
78954: PUSH
78955: LD_INT 0
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PPUSH
78971: CALL_OW 447
// end ;
78975: LD_VAR 0 2
78979: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78980: LD_INT 0
78982: PPUSH
78983: PPUSH
78984: PPUSH
// tmp := [ ] ;
78985: LD_ADDR_VAR 0 5
78989: PUSH
78990: EMPTY
78991: ST_TO_ADDR
// for i in units do
78992: LD_ADDR_VAR 0 4
78996: PUSH
78997: LD_VAR 0 1
79001: PUSH
79002: FOR_IN
79003: IFFALSE 79041
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79005: LD_ADDR_VAR 0 5
79009: PUSH
79010: LD_VAR 0 5
79014: PPUSH
79015: LD_VAR 0 5
79019: PUSH
79020: LD_INT 1
79022: PLUS
79023: PPUSH
79024: LD_VAR 0 4
79028: PPUSH
79029: CALL_OW 256
79033: PPUSH
79034: CALL_OW 2
79038: ST_TO_ADDR
79039: GO 79002
79041: POP
79042: POP
// if not tmp then
79043: LD_VAR 0 5
79047: NOT
79048: IFFALSE 79052
// exit ;
79050: GO 79100
// if asc then
79052: LD_VAR 0 2
79056: IFFALSE 79080
// result := SortListByListAsc ( units , tmp ) else
79058: LD_ADDR_VAR 0 3
79062: PUSH
79063: LD_VAR 0 1
79067: PPUSH
79068: LD_VAR 0 5
79072: PPUSH
79073: CALL_OW 76
79077: ST_TO_ADDR
79078: GO 79100
// result := SortListByListDesc ( units , tmp ) ;
79080: LD_ADDR_VAR 0 3
79084: PUSH
79085: LD_VAR 0 1
79089: PPUSH
79090: LD_VAR 0 5
79094: PPUSH
79095: CALL_OW 77
79099: ST_TO_ADDR
// end ;
79100: LD_VAR 0 3
79104: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79105: LD_INT 0
79107: PPUSH
79108: PPUSH
// task := GetTaskList ( mech ) ;
79109: LD_ADDR_VAR 0 4
79113: PUSH
79114: LD_VAR 0 1
79118: PPUSH
79119: CALL_OW 437
79123: ST_TO_ADDR
// if not task then
79124: LD_VAR 0 4
79128: NOT
79129: IFFALSE 79133
// exit ;
79131: GO 79175
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79133: LD_ADDR_VAR 0 3
79137: PUSH
79138: LD_VAR 0 4
79142: PUSH
79143: LD_INT 1
79145: ARRAY
79146: PUSH
79147: LD_INT 1
79149: ARRAY
79150: PUSH
79151: LD_STRING r
79153: EQUAL
79154: PUSH
79155: LD_VAR 0 4
79159: PUSH
79160: LD_INT 1
79162: ARRAY
79163: PUSH
79164: LD_INT 4
79166: ARRAY
79167: PUSH
79168: LD_VAR 0 2
79172: EQUAL
79173: AND
79174: ST_TO_ADDR
// end ;
79175: LD_VAR 0 3
79179: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79180: LD_INT 0
79182: PPUSH
// SetDir ( unit , d ) ;
79183: LD_VAR 0 1
79187: PPUSH
79188: LD_VAR 0 4
79192: PPUSH
79193: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79197: LD_VAR 0 1
79201: PPUSH
79202: LD_VAR 0 2
79206: PPUSH
79207: LD_VAR 0 3
79211: PPUSH
79212: LD_VAR 0 5
79216: PPUSH
79217: CALL_OW 48
// end ;
79221: LD_VAR 0 6
79225: RET
// export function ToNaturalNumber ( number ) ; begin
79226: LD_INT 0
79228: PPUSH
// result := number div 1 ;
79229: LD_ADDR_VAR 0 2
79233: PUSH
79234: LD_VAR 0 1
79238: PUSH
79239: LD_INT 1
79241: DIV
79242: ST_TO_ADDR
// if number < 0 then
79243: LD_VAR 0 1
79247: PUSH
79248: LD_INT 0
79250: LESS
79251: IFFALSE 79261
// result := 0 ;
79253: LD_ADDR_VAR 0 2
79257: PUSH
79258: LD_INT 0
79260: ST_TO_ADDR
// end ;
79261: LD_VAR 0 2
79265: RET
// export function SortByClass ( units , class ) ; var un ; begin
79266: LD_INT 0
79268: PPUSH
79269: PPUSH
// if not units or not class then
79270: LD_VAR 0 1
79274: NOT
79275: PUSH
79276: LD_VAR 0 2
79280: NOT
79281: OR
79282: IFFALSE 79286
// exit ;
79284: GO 79381
// result := [ ] ;
79286: LD_ADDR_VAR 0 3
79290: PUSH
79291: EMPTY
79292: ST_TO_ADDR
// for un in units do
79293: LD_ADDR_VAR 0 4
79297: PUSH
79298: LD_VAR 0 1
79302: PUSH
79303: FOR_IN
79304: IFFALSE 79379
// if GetClass ( un ) = class then
79306: LD_VAR 0 4
79310: PPUSH
79311: CALL_OW 257
79315: PUSH
79316: LD_VAR 0 2
79320: EQUAL
79321: IFFALSE 79348
// result := Insert ( result , 1 , un ) else
79323: LD_ADDR_VAR 0 3
79327: PUSH
79328: LD_VAR 0 3
79332: PPUSH
79333: LD_INT 1
79335: PPUSH
79336: LD_VAR 0 4
79340: PPUSH
79341: CALL_OW 2
79345: ST_TO_ADDR
79346: GO 79377
// result := Replace ( result , result + 1 , un ) ;
79348: LD_ADDR_VAR 0 3
79352: PUSH
79353: LD_VAR 0 3
79357: PPUSH
79358: LD_VAR 0 3
79362: PUSH
79363: LD_INT 1
79365: PLUS
79366: PPUSH
79367: LD_VAR 0 4
79371: PPUSH
79372: CALL_OW 1
79376: ST_TO_ADDR
79377: GO 79303
79379: POP
79380: POP
// end ;
79381: LD_VAR 0 3
79385: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79386: LD_INT 0
79388: PPUSH
79389: PPUSH
79390: PPUSH
79391: PPUSH
79392: PPUSH
79393: PPUSH
79394: PPUSH
// result := [ ] ;
79395: LD_ADDR_VAR 0 4
79399: PUSH
79400: EMPTY
79401: ST_TO_ADDR
// if x - r < 0 then
79402: LD_VAR 0 1
79406: PUSH
79407: LD_VAR 0 3
79411: MINUS
79412: PUSH
79413: LD_INT 0
79415: LESS
79416: IFFALSE 79428
// min_x := 0 else
79418: LD_ADDR_VAR 0 8
79422: PUSH
79423: LD_INT 0
79425: ST_TO_ADDR
79426: GO 79444
// min_x := x - r ;
79428: LD_ADDR_VAR 0 8
79432: PUSH
79433: LD_VAR 0 1
79437: PUSH
79438: LD_VAR 0 3
79442: MINUS
79443: ST_TO_ADDR
// if y - r < 0 then
79444: LD_VAR 0 2
79448: PUSH
79449: LD_VAR 0 3
79453: MINUS
79454: PUSH
79455: LD_INT 0
79457: LESS
79458: IFFALSE 79470
// min_y := 0 else
79460: LD_ADDR_VAR 0 7
79464: PUSH
79465: LD_INT 0
79467: ST_TO_ADDR
79468: GO 79486
// min_y := y - r ;
79470: LD_ADDR_VAR 0 7
79474: PUSH
79475: LD_VAR 0 2
79479: PUSH
79480: LD_VAR 0 3
79484: MINUS
79485: ST_TO_ADDR
// max_x := x + r ;
79486: LD_ADDR_VAR 0 9
79490: PUSH
79491: LD_VAR 0 1
79495: PUSH
79496: LD_VAR 0 3
79500: PLUS
79501: ST_TO_ADDR
// max_y := y + r ;
79502: LD_ADDR_VAR 0 10
79506: PUSH
79507: LD_VAR 0 2
79511: PUSH
79512: LD_VAR 0 3
79516: PLUS
79517: ST_TO_ADDR
// for _x = min_x to max_x do
79518: LD_ADDR_VAR 0 5
79522: PUSH
79523: DOUBLE
79524: LD_VAR 0 8
79528: DEC
79529: ST_TO_ADDR
79530: LD_VAR 0 9
79534: PUSH
79535: FOR_TO
79536: IFFALSE 79637
// for _y = min_y to max_y do
79538: LD_ADDR_VAR 0 6
79542: PUSH
79543: DOUBLE
79544: LD_VAR 0 7
79548: DEC
79549: ST_TO_ADDR
79550: LD_VAR 0 10
79554: PUSH
79555: FOR_TO
79556: IFFALSE 79633
// begin if not ValidHex ( _x , _y ) then
79558: LD_VAR 0 5
79562: PPUSH
79563: LD_VAR 0 6
79567: PPUSH
79568: CALL_OW 488
79572: NOT
79573: IFFALSE 79577
// continue ;
79575: GO 79555
// if GetResourceTypeXY ( _x , _y ) then
79577: LD_VAR 0 5
79581: PPUSH
79582: LD_VAR 0 6
79586: PPUSH
79587: CALL_OW 283
79591: IFFALSE 79631
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79593: LD_ADDR_VAR 0 4
79597: PUSH
79598: LD_VAR 0 4
79602: PPUSH
79603: LD_VAR 0 4
79607: PUSH
79608: LD_INT 1
79610: PLUS
79611: PPUSH
79612: LD_VAR 0 5
79616: PUSH
79617: LD_VAR 0 6
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PPUSH
79626: CALL_OW 1
79630: ST_TO_ADDR
// end ;
79631: GO 79555
79633: POP
79634: POP
79635: GO 79535
79637: POP
79638: POP
// end ;
79639: LD_VAR 0 4
79643: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79644: LD_INT 0
79646: PPUSH
79647: PPUSH
79648: PPUSH
79649: PPUSH
79650: PPUSH
79651: PPUSH
79652: PPUSH
79653: PPUSH
// if not units then
79654: LD_VAR 0 1
79658: NOT
79659: IFFALSE 79663
// exit ;
79661: GO 80187
// result := UnitFilter ( units , [ f_ok ] ) ;
79663: LD_ADDR_VAR 0 3
79667: PUSH
79668: LD_VAR 0 1
79672: PPUSH
79673: LD_INT 50
79675: PUSH
79676: EMPTY
79677: LIST
79678: PPUSH
79679: CALL_OW 72
79683: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79684: LD_ADDR_VAR 0 8
79688: PUSH
79689: LD_VAR 0 1
79693: PUSH
79694: LD_INT 1
79696: ARRAY
79697: PPUSH
79698: CALL_OW 255
79702: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79703: LD_ADDR_VAR 0 10
79707: PUSH
79708: LD_INT 29
79710: PUSH
79711: LD_INT 91
79713: PUSH
79714: LD_INT 49
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: LIST
79721: ST_TO_ADDR
// if not result then
79722: LD_VAR 0 3
79726: NOT
79727: IFFALSE 79731
// exit ;
79729: GO 80187
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79731: LD_ADDR_VAR 0 5
79735: PUSH
79736: LD_INT 81
79738: PUSH
79739: LD_VAR 0 8
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: PPUSH
79748: CALL_OW 69
79752: ST_TO_ADDR
// for i in result do
79753: LD_ADDR_VAR 0 4
79757: PUSH
79758: LD_VAR 0 3
79762: PUSH
79763: FOR_IN
79764: IFFALSE 80185
// begin tag := GetTag ( i ) + 1 ;
79766: LD_ADDR_VAR 0 9
79770: PUSH
79771: LD_VAR 0 4
79775: PPUSH
79776: CALL_OW 110
79780: PUSH
79781: LD_INT 1
79783: PLUS
79784: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79785: LD_ADDR_VAR 0 7
79789: PUSH
79790: LD_VAR 0 4
79794: PPUSH
79795: CALL_OW 250
79799: PPUSH
79800: LD_VAR 0 4
79804: PPUSH
79805: CALL_OW 251
79809: PPUSH
79810: LD_INT 6
79812: PPUSH
79813: CALL 79386 0 3
79817: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79818: LD_VAR 0 4
79822: PPUSH
79823: CALL_OW 247
79827: PUSH
79828: LD_INT 2
79830: EQUAL
79831: PUSH
79832: LD_VAR 0 7
79836: AND
79837: PUSH
79838: LD_VAR 0 4
79842: PPUSH
79843: CALL_OW 264
79847: PUSH
79848: LD_VAR 0 10
79852: IN
79853: NOT
79854: AND
79855: IFFALSE 79894
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79857: LD_VAR 0 4
79861: PPUSH
79862: LD_VAR 0 7
79866: PUSH
79867: LD_INT 1
79869: ARRAY
79870: PUSH
79871: LD_INT 1
79873: ARRAY
79874: PPUSH
79875: LD_VAR 0 7
79879: PUSH
79880: LD_INT 1
79882: ARRAY
79883: PUSH
79884: LD_INT 2
79886: ARRAY
79887: PPUSH
79888: CALL_OW 116
79892: GO 80183
// if path > tag then
79894: LD_VAR 0 2
79898: PUSH
79899: LD_VAR 0 9
79903: GREATER
79904: IFFALSE 80112
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79906: LD_ADDR_VAR 0 6
79910: PUSH
79911: LD_VAR 0 5
79915: PPUSH
79916: LD_INT 91
79918: PUSH
79919: LD_VAR 0 4
79923: PUSH
79924: LD_INT 8
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: LIST
79931: PPUSH
79932: CALL_OW 72
79936: ST_TO_ADDR
// if nearEnemy then
79937: LD_VAR 0 6
79941: IFFALSE 80010
// begin if GetWeapon ( i ) = ru_time_lapser then
79943: LD_VAR 0 4
79947: PPUSH
79948: CALL_OW 264
79952: PUSH
79953: LD_INT 49
79955: EQUAL
79956: IFFALSE 79984
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79958: LD_VAR 0 4
79962: PPUSH
79963: LD_VAR 0 6
79967: PPUSH
79968: LD_VAR 0 4
79972: PPUSH
79973: CALL_OW 74
79977: PPUSH
79978: CALL_OW 112
79982: GO 80008
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79984: LD_VAR 0 4
79988: PPUSH
79989: LD_VAR 0 6
79993: PPUSH
79994: LD_VAR 0 4
79998: PPUSH
79999: CALL_OW 74
80003: PPUSH
80004: CALL_OW 115
// end else
80008: GO 80110
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80010: LD_VAR 0 4
80014: PPUSH
80015: LD_VAR 0 2
80019: PUSH
80020: LD_VAR 0 9
80024: ARRAY
80025: PUSH
80026: LD_INT 1
80028: ARRAY
80029: PPUSH
80030: LD_VAR 0 2
80034: PUSH
80035: LD_VAR 0 9
80039: ARRAY
80040: PUSH
80041: LD_INT 2
80043: ARRAY
80044: PPUSH
80045: CALL_OW 297
80049: PUSH
80050: LD_INT 6
80052: GREATER
80053: IFFALSE 80096
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80055: LD_VAR 0 4
80059: PPUSH
80060: LD_VAR 0 2
80064: PUSH
80065: LD_VAR 0 9
80069: ARRAY
80070: PUSH
80071: LD_INT 1
80073: ARRAY
80074: PPUSH
80075: LD_VAR 0 2
80079: PUSH
80080: LD_VAR 0 9
80084: ARRAY
80085: PUSH
80086: LD_INT 2
80088: ARRAY
80089: PPUSH
80090: CALL_OW 114
80094: GO 80110
// SetTag ( i , tag ) ;
80096: LD_VAR 0 4
80100: PPUSH
80101: LD_VAR 0 9
80105: PPUSH
80106: CALL_OW 109
// end else
80110: GO 80183
// if enemy then
80112: LD_VAR 0 5
80116: IFFALSE 80183
// begin if GetWeapon ( i ) = ru_time_lapser then
80118: LD_VAR 0 4
80122: PPUSH
80123: CALL_OW 264
80127: PUSH
80128: LD_INT 49
80130: EQUAL
80131: IFFALSE 80159
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80133: LD_VAR 0 4
80137: PPUSH
80138: LD_VAR 0 5
80142: PPUSH
80143: LD_VAR 0 4
80147: PPUSH
80148: CALL_OW 74
80152: PPUSH
80153: CALL_OW 112
80157: GO 80183
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80159: LD_VAR 0 4
80163: PPUSH
80164: LD_VAR 0 5
80168: PPUSH
80169: LD_VAR 0 4
80173: PPUSH
80174: CALL_OW 74
80178: PPUSH
80179: CALL_OW 115
// end ; end ;
80183: GO 79763
80185: POP
80186: POP
// end ;
80187: LD_VAR 0 3
80191: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80192: LD_INT 0
80194: PPUSH
80195: PPUSH
80196: PPUSH
// if not unit or IsInUnit ( unit ) then
80197: LD_VAR 0 1
80201: NOT
80202: PUSH
80203: LD_VAR 0 1
80207: PPUSH
80208: CALL_OW 310
80212: OR
80213: IFFALSE 80217
// exit ;
80215: GO 80308
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80217: LD_ADDR_VAR 0 4
80221: PUSH
80222: LD_VAR 0 1
80226: PPUSH
80227: CALL_OW 250
80231: PPUSH
80232: LD_VAR 0 2
80236: PPUSH
80237: LD_INT 1
80239: PPUSH
80240: CALL_OW 272
80244: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80245: LD_ADDR_VAR 0 5
80249: PUSH
80250: LD_VAR 0 1
80254: PPUSH
80255: CALL_OW 251
80259: PPUSH
80260: LD_VAR 0 2
80264: PPUSH
80265: LD_INT 1
80267: PPUSH
80268: CALL_OW 273
80272: ST_TO_ADDR
// if ValidHex ( x , y ) then
80273: LD_VAR 0 4
80277: PPUSH
80278: LD_VAR 0 5
80282: PPUSH
80283: CALL_OW 488
80287: IFFALSE 80308
// ComTurnXY ( unit , x , y ) ;
80289: LD_VAR 0 1
80293: PPUSH
80294: LD_VAR 0 4
80298: PPUSH
80299: LD_VAR 0 5
80303: PPUSH
80304: CALL_OW 118
// end ;
80308: LD_VAR 0 3
80312: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80313: LD_INT 0
80315: PPUSH
80316: PPUSH
// result := false ;
80317: LD_ADDR_VAR 0 3
80321: PUSH
80322: LD_INT 0
80324: ST_TO_ADDR
// if not units then
80325: LD_VAR 0 2
80329: NOT
80330: IFFALSE 80334
// exit ;
80332: GO 80379
// for i in units do
80334: LD_ADDR_VAR 0 4
80338: PUSH
80339: LD_VAR 0 2
80343: PUSH
80344: FOR_IN
80345: IFFALSE 80377
// if See ( side , i ) then
80347: LD_VAR 0 1
80351: PPUSH
80352: LD_VAR 0 4
80356: PPUSH
80357: CALL_OW 292
80361: IFFALSE 80375
// begin result := true ;
80363: LD_ADDR_VAR 0 3
80367: PUSH
80368: LD_INT 1
80370: ST_TO_ADDR
// exit ;
80371: POP
80372: POP
80373: GO 80379
// end ;
80375: GO 80344
80377: POP
80378: POP
// end ;
80379: LD_VAR 0 3
80383: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80384: LD_INT 0
80386: PPUSH
80387: PPUSH
80388: PPUSH
80389: PPUSH
// if not unit or not points then
80390: LD_VAR 0 1
80394: NOT
80395: PUSH
80396: LD_VAR 0 2
80400: NOT
80401: OR
80402: IFFALSE 80406
// exit ;
80404: GO 80496
// dist := 99999 ;
80406: LD_ADDR_VAR 0 5
80410: PUSH
80411: LD_INT 99999
80413: ST_TO_ADDR
// for i in points do
80414: LD_ADDR_VAR 0 4
80418: PUSH
80419: LD_VAR 0 2
80423: PUSH
80424: FOR_IN
80425: IFFALSE 80494
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80427: LD_ADDR_VAR 0 6
80431: PUSH
80432: LD_VAR 0 1
80436: PPUSH
80437: LD_VAR 0 4
80441: PUSH
80442: LD_INT 1
80444: ARRAY
80445: PPUSH
80446: LD_VAR 0 4
80450: PUSH
80451: LD_INT 2
80453: ARRAY
80454: PPUSH
80455: CALL_OW 297
80459: ST_TO_ADDR
// if tmpDist < dist then
80460: LD_VAR 0 6
80464: PUSH
80465: LD_VAR 0 5
80469: LESS
80470: IFFALSE 80492
// begin result := i ;
80472: LD_ADDR_VAR 0 3
80476: PUSH
80477: LD_VAR 0 4
80481: ST_TO_ADDR
// dist := tmpDist ;
80482: LD_ADDR_VAR 0 5
80486: PUSH
80487: LD_VAR 0 6
80491: ST_TO_ADDR
// end ; end ;
80492: GO 80424
80494: POP
80495: POP
// end ;
80496: LD_VAR 0 3
80500: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80501: LD_INT 0
80503: PPUSH
// uc_side := side ;
80504: LD_ADDR_OWVAR 20
80508: PUSH
80509: LD_VAR 0 1
80513: ST_TO_ADDR
// uc_nation := 3 ;
80514: LD_ADDR_OWVAR 21
80518: PUSH
80519: LD_INT 3
80521: ST_TO_ADDR
// vc_chassis := 25 ;
80522: LD_ADDR_OWVAR 37
80526: PUSH
80527: LD_INT 25
80529: ST_TO_ADDR
// vc_engine := engine_siberite ;
80530: LD_ADDR_OWVAR 39
80534: PUSH
80535: LD_INT 3
80537: ST_TO_ADDR
// vc_control := control_computer ;
80538: LD_ADDR_OWVAR 38
80542: PUSH
80543: LD_INT 3
80545: ST_TO_ADDR
// vc_weapon := 59 ;
80546: LD_ADDR_OWVAR 40
80550: PUSH
80551: LD_INT 59
80553: ST_TO_ADDR
// result := CreateVehicle ;
80554: LD_ADDR_VAR 0 5
80558: PUSH
80559: CALL_OW 45
80563: ST_TO_ADDR
// SetDir ( result , d ) ;
80564: LD_VAR 0 5
80568: PPUSH
80569: LD_VAR 0 4
80573: PPUSH
80574: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80578: LD_VAR 0 5
80582: PPUSH
80583: LD_VAR 0 2
80587: PPUSH
80588: LD_VAR 0 3
80592: PPUSH
80593: LD_INT 0
80595: PPUSH
80596: CALL_OW 48
// end ;
80600: LD_VAR 0 5
80604: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80605: LD_INT 0
80607: PPUSH
80608: PPUSH
80609: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80610: LD_ADDR_VAR 0 2
80614: PUSH
80615: LD_INT 0
80617: PUSH
80618: LD_INT 0
80620: PUSH
80621: LD_INT 0
80623: PUSH
80624: LD_INT 0
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80633: LD_VAR 0 1
80637: NOT
80638: PUSH
80639: LD_VAR 0 1
80643: PPUSH
80644: CALL_OW 264
80648: PUSH
80649: LD_INT 12
80651: PUSH
80652: LD_INT 51
80654: PUSH
80655: LD_INT 32
80657: PUSH
80658: LD_INT 89
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: LIST
80665: LIST
80666: IN
80667: NOT
80668: OR
80669: IFFALSE 80673
// exit ;
80671: GO 80771
// for i := 1 to 3 do
80673: LD_ADDR_VAR 0 3
80677: PUSH
80678: DOUBLE
80679: LD_INT 1
80681: DEC
80682: ST_TO_ADDR
80683: LD_INT 3
80685: PUSH
80686: FOR_TO
80687: IFFALSE 80769
// begin tmp := GetCargo ( cargo , i ) ;
80689: LD_ADDR_VAR 0 4
80693: PUSH
80694: LD_VAR 0 1
80698: PPUSH
80699: LD_VAR 0 3
80703: PPUSH
80704: CALL_OW 289
80708: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80709: LD_ADDR_VAR 0 2
80713: PUSH
80714: LD_VAR 0 2
80718: PPUSH
80719: LD_VAR 0 3
80723: PPUSH
80724: LD_VAR 0 4
80728: PPUSH
80729: CALL_OW 1
80733: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80734: LD_ADDR_VAR 0 2
80738: PUSH
80739: LD_VAR 0 2
80743: PPUSH
80744: LD_INT 4
80746: PPUSH
80747: LD_VAR 0 2
80751: PUSH
80752: LD_INT 4
80754: ARRAY
80755: PUSH
80756: LD_VAR 0 4
80760: PLUS
80761: PPUSH
80762: CALL_OW 1
80766: ST_TO_ADDR
// end ;
80767: GO 80686
80769: POP
80770: POP
// end ;
80771: LD_VAR 0 2
80775: RET
// export function Length ( array ) ; begin
80776: LD_INT 0
80778: PPUSH
// result := array + 0 ;
80779: LD_ADDR_VAR 0 2
80783: PUSH
80784: LD_VAR 0 1
80788: PUSH
80789: LD_INT 0
80791: PLUS
80792: ST_TO_ADDR
// end ;
80793: LD_VAR 0 2
80797: RET
// export function PrepareArray ( array ) ; begin
80798: LD_INT 0
80800: PPUSH
// result := array diff 0 ;
80801: LD_ADDR_VAR 0 2
80805: PUSH
80806: LD_VAR 0 1
80810: PUSH
80811: LD_INT 0
80813: DIFF
80814: ST_TO_ADDR
// if not result [ 1 ] then
80815: LD_VAR 0 2
80819: PUSH
80820: LD_INT 1
80822: ARRAY
80823: NOT
80824: IFFALSE 80844
// result := Delete ( result , 1 ) ;
80826: LD_ADDR_VAR 0 2
80830: PUSH
80831: LD_VAR 0 2
80835: PPUSH
80836: LD_INT 1
80838: PPUSH
80839: CALL_OW 3
80843: ST_TO_ADDR
// end ;
80844: LD_VAR 0 2
80848: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80849: LD_INT 0
80851: PPUSH
80852: PPUSH
80853: PPUSH
80854: PPUSH
// sibRocketRange := 25 ;
80855: LD_ADDR_VAR 0 6
80859: PUSH
80860: LD_INT 25
80862: ST_TO_ADDR
// result := false ;
80863: LD_ADDR_VAR 0 4
80867: PUSH
80868: LD_INT 0
80870: ST_TO_ADDR
// for i := 0 to 5 do
80871: LD_ADDR_VAR 0 5
80875: PUSH
80876: DOUBLE
80877: LD_INT 0
80879: DEC
80880: ST_TO_ADDR
80881: LD_INT 5
80883: PUSH
80884: FOR_TO
80885: IFFALSE 80952
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80887: LD_VAR 0 1
80891: PPUSH
80892: LD_VAR 0 5
80896: PPUSH
80897: LD_VAR 0 6
80901: PPUSH
80902: CALL_OW 272
80906: PPUSH
80907: LD_VAR 0 2
80911: PPUSH
80912: LD_VAR 0 5
80916: PPUSH
80917: LD_VAR 0 6
80921: PPUSH
80922: CALL_OW 273
80926: PPUSH
80927: LD_VAR 0 3
80931: PPUSH
80932: CALL_OW 309
80936: IFFALSE 80950
// begin result := true ;
80938: LD_ADDR_VAR 0 4
80942: PUSH
80943: LD_INT 1
80945: ST_TO_ADDR
// exit ;
80946: POP
80947: POP
80948: GO 80954
// end ;
80950: GO 80884
80952: POP
80953: POP
// end ; end_of_file
80954: LD_VAR 0 4
80958: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80959: LD_VAR 0 1
80963: PUSH
80964: LD_INT 200
80966: DOUBLE
80967: GREATEREQUAL
80968: IFFALSE 80976
80970: LD_INT 299
80972: DOUBLE
80973: LESSEQUAL
80974: IFTRUE 80978
80976: GO 81010
80978: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80979: LD_VAR 0 1
80983: PPUSH
80984: LD_VAR 0 2
80988: PPUSH
80989: LD_VAR 0 3
80993: PPUSH
80994: LD_VAR 0 4
80998: PPUSH
80999: LD_VAR 0 5
81003: PPUSH
81004: CALL 35678 0 5
81008: GO 81087
81010: LD_INT 300
81012: DOUBLE
81013: GREATEREQUAL
81014: IFFALSE 81022
81016: LD_INT 399
81018: DOUBLE
81019: LESSEQUAL
81020: IFTRUE 81024
81022: GO 81086
81024: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81025: LD_VAR 0 1
81029: PPUSH
81030: LD_VAR 0 2
81034: PPUSH
81035: LD_VAR 0 3
81039: PPUSH
81040: LD_VAR 0 4
81044: PPUSH
81045: LD_VAR 0 5
81049: PPUSH
81050: LD_VAR 0 6
81054: PPUSH
81055: LD_VAR 0 7
81059: PPUSH
81060: LD_VAR 0 8
81064: PPUSH
81065: LD_VAR 0 9
81069: PPUSH
81070: LD_VAR 0 10
81074: PPUSH
81075: LD_VAR 0 11
81079: PPUSH
81080: CALL 32011 0 11
81084: GO 81087
81086: POP
// end ;
81087: PPOPN 11
81089: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81090: LD_VAR 0 1
81094: PPUSH
81095: LD_VAR 0 2
81099: PPUSH
81100: LD_VAR 0 3
81104: PPUSH
81105: LD_VAR 0 4
81109: PPUSH
81110: LD_VAR 0 5
81114: PPUSH
81115: CALL 35414 0 5
// end ; end_of_file
81119: PPOPN 5
81121: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81122: LD_VAR 0 1
81126: PPUSH
81127: LD_VAR 0 2
81131: PPUSH
81132: LD_VAR 0 3
81136: PPUSH
81137: LD_VAR 0 4
81141: PPUSH
81142: LD_VAR 0 5
81146: PPUSH
81147: LD_VAR 0 6
81151: PPUSH
81152: CALL 19704 0 6
// end ;
81156: PPOPN 6
81158: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81159: LD_INT 0
81161: PPUSH
// begin if not units then
81162: LD_VAR 0 1
81166: NOT
81167: IFFALSE 81171
// exit ;
81169: GO 81171
// end ;
81171: PPOPN 7
81173: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81174: CALL 19675 0 0
// end ;
81178: PPOPN 1
81180: END
