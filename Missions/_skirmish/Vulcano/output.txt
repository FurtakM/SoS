// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 888 0 0
// PrepareRussian ;
  23: CALL 3430 0 0
// PrepareLegion ;
  27: CALL 7336 0 0
// Action ;
  31: CALL 10673 0 0
// InitArt ;
  35: CALL 209 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 8
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 9
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 10
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 12
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 13
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 14
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 15
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_progress := 0 ;
 196: LD_ADDR_EXP 7
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// function InitArt ; begin
 209: LD_INT 0
 211: PPUSH
// SetArtifactRes ( your_side , true ) ;
 212: LD_OWVAR 2
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 467
// end ; end_of_file
 224: LD_VAR 0 1
 228: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 236: LD_ADDR_EXP 22
 240: PUSH
 241: LD_INT 7
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 5
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: ST_TO_ADDR
// us_force := [ ] ;
 261: LD_ADDR_EXP 21
 265: PUSH
 266: EMPTY
 267: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 268: LD_INT 17
 270: PPUSH
 271: CALL_OW 355
// PrepareAllianceAI ( ) ;
 275: CALL 16012 0 0
// uc_side := 1 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// uc_nation := nation_american ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 1
 294: ST_TO_ADDR
// hc_gallery :=  ;
 295: LD_ADDR_OWVAR 33
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_name :=  ;
 303: LD_ADDR_OWVAR 26
 307: PUSH
 308: LD_STRING 
 310: ST_TO_ADDR
// hc_importance := 0 ;
 311: LD_ADDR_OWVAR 32
 315: PUSH
 316: LD_INT 0
 318: ST_TO_ADDR
// for i = 1 to 11 do
 319: LD_ADDR_VAR 0 2
 323: PUSH
 324: DOUBLE
 325: LD_INT 1
 327: DEC
 328: ST_TO_ADDR
 329: LD_INT 11
 331: PUSH
 332: FOR_TO
 333: IFFALSE 386
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 335: LD_INT 0
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: LD_INT 4
 343: PPUSH
 344: CALL_OW 12
 348: PPUSH
 349: LD_EXP 22
 353: PPUSH
 354: CALL_OW 380
// un := CreateHuman ;
 358: LD_ADDR_VAR 0 4
 362: PUSH
 363: CALL_OW 44
 367: ST_TO_ADDR
// us_force := us_force ^ un ;
 368: LD_ADDR_EXP 21
 372: PUSH
 373: LD_EXP 21
 377: PUSH
 378: LD_VAR 0 4
 382: ADD
 383: ST_TO_ADDR
// end ;
 384: GO 332
 386: POP
 387: POP
// hc_importance := 100 ;
 388: LD_ADDR_OWVAR 32
 392: PUSH
 393: LD_INT 100
 395: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 396: LD_INT 1
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_EXP 22
 406: PPUSH
 407: CALL_OW 380
// us_commander := CreateHuman ;
 411: LD_ADDR_EXP 20
 415: PUSH
 416: CALL_OW 44
 420: ST_TO_ADDR
// player_commander := us_commander ;
 421: LD_ADDR_EXP 11
 425: PUSH
 426: LD_EXP 20
 430: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 431: LD_ADDR_VAR 0 5
 435: PUSH
 436: LD_STRING text
 438: PPUSH
 439: LD_INT 6
 441: PUSH
 442: LD_INT 5
 444: PUSH
 445: LD_INT 4
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: PPUSH
 459: LD_INT 6
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 4
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_OWVAR 67
 477: ARRAY
 478: PPUSH
 479: LD_INT -5
 481: PUSH
 482: LD_EXP 20
 486: PUSH
 487: LD_INT -3
 489: PUSH
 490: LD_INT -2
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_EXP 21
 503: ADD
 504: PPUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 3
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 1
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 5
 533: PUSH
 534: LD_INT 5
 536: PUSH
 537: LD_INT 1
 539: NEG
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_OWVAR 67
 550: ARRAY
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 42
 563: ST_TO_ADDR
// team := team ^ us_commander ;
 564: LD_ADDR_VAR 0 5
 568: PUSH
 569: LD_VAR 0 5
 573: PUSH
 574: LD_EXP 20
 578: ADD
 579: ST_TO_ADDR
// for i = 1 to team do
 580: LD_ADDR_VAR 0 2
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_VAR 0 5
 594: PUSH
 595: FOR_TO
 596: IFFALSE 621
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 598: LD_VAR 0 5
 602: PUSH
 603: LD_VAR 0 2
 607: ARRAY
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 595
 621: POP
 622: POP
// end ;
 623: LD_VAR 0 1
 627: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 628: LD_OWVAR 1
 632: PUSH
 633: LD_INT 73500
 635: LESS
 636: IFFALSE 663
 638: GO 640
 640: DISABLE
// begin enable ;
 641: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 5
 647: PPUSH
 648: CALL_OW 12
 652: PPUSH
 653: LD_INT 24
 655: PPUSH
 656: LD_INT 1
 658: PPUSH
 659: CALL_OW 55
// end ;
 663: END
// every 1 1$10 do var time , p , l ;
 664: GO 666
 666: DISABLE
 667: LD_INT 0
 669: PPUSH
 670: PPUSH
 671: PPUSH
// begin time := 0 0$44 ;
 672: LD_ADDR_VAR 0 1
 676: PUSH
 677: LD_INT 1540
 679: ST_TO_ADDR
// l := 0 ;
 680: LD_ADDR_VAR 0 3
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 688: LD_VAR 0 1
 692: PPUSH
 693: CALL_OW 67
// l := l + 1 ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: PLUS
 710: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 711: LD_INT 12
 713: PPUSH
 714: CALL_OW 435
 718: PUSH
 719: LD_INT 30
 721: LESS
 722: IFFALSE 781
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 5
 729: PPUSH
 730: CALL_OW 12
 734: PPUSH
 735: LD_INT 12
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 745: LD_INT 1155
 747: PPUSH
 748: LD_INT 1540
 750: PPUSH
 751: CALL_OW 12
 755: PPUSH
 756: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 12
 770: PPUSH
 771: LD_INT 12
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 781: LD_ADDR_VAR 0 2
 785: PUSH
 786: LD_INT 0
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL_OW 12
 796: ST_TO_ADDR
// if p then
 797: LD_VAR 0 2
 801: IFFALSE 836
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 803: LD_INT 105
 805: PPUSH
 806: LD_INT 350
 808: PPUSH
 809: CALL_OW 12
 813: PPUSH
 814: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 818: LD_INT 1
 820: PPUSH
 821: LD_INT 4
 823: PPUSH
 824: CALL_OW 12
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 836: LD_VAR 0 3
 840: PUSH
 841: LD_INT 15
 843: PUSH
 844: LD_INT 13
 846: PUSH
 847: LD_INT 11
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: MOD
 861: PUSH
 862: LD_INT 0
 864: EQUAL
 865: IFFALSE 881
// time := time + 2 2$00 ;
 867: LD_ADDR_VAR 0 1
 871: PUSH
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 4200
 879: PLUS
 880: ST_TO_ADDR
// end until false ;
 881: LD_INT 0
 883: IFFALSE 688
// end ; end_of_file
 885: PPOPN 3
 887: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 888: LD_INT 0
 890: PPUSH
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
 895: PPUSH
 896: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 897: LD_ADDR_VAR 0 3
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 4
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 21
 914: PUSH
 915: LD_INT 3
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 69
 930: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: LD_INT 470
 938: PUSH
 939: LD_INT 370
 941: PUSH
 942: LD_INT 290
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// case Difficulty of 2 :
 956: LD_OWVAR 67
 960: PUSH
 961: LD_INT 2
 963: DOUBLE
 964: EQUAL
 965: IFTRUE 969
 967: GO 1000
 969: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 32
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 72
 989: PUSH
 990: LD_INT 1
 992: ARRAY
 993: PPUSH
 994: CALL_OW 65
// end ; 3 :
 998: GO 1076
1000: LD_INT 3
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1075
1008: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1009: LD_VAR 0 3
1013: PPUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 32
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PPUSH
1024: CALL_OW 72
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1037: LD_VAR 0 3
1041: PPUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 72
1056: PUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: CALL_OW 12
1067: ARRAY
1068: PPUSH
1069: CALL_OW 65
// end ; end ;
1073: GO 1076
1075: POP
// for i = 1 to filter do
1076: LD_ADDR_VAR 0 2
1080: PUSH
1081: DOUBLE
1082: LD_INT 1
1084: DEC
1085: ST_TO_ADDR
1086: LD_VAR 0 3
1090: PUSH
1091: FOR_TO
1092: IFFALSE 1129
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PPUSH
1105: LD_VAR 0 4
1109: PUSH
1110: LD_INT 29
1112: NEG
1113: PPUSH
1114: LD_INT 29
1116: PPUSH
1117: CALL_OW 12
1121: PLUS
1122: PPUSH
1123: CALL_OW 234
1127: GO 1091
1129: POP
1130: POP
// SetBName ( us_depot , Vulcano1 ) ;
1131: LD_INT 50
1133: PPUSH
1134: LD_STRING Vulcano1
1136: PPUSH
1137: CALL_OW 500
// hc_importance := 0 ;
1141: LD_ADDR_OWVAR 32
1145: PUSH
1146: LD_INT 0
1148: ST_TO_ADDR
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := nation_russian ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// russian_in_base := [ ] ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: EMPTY
1171: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1172: LD_ADDR_VAR 0 2
1176: PUSH
1177: DOUBLE
1178: LD_INT 1
1180: DEC
1181: ST_TO_ADDR
1182: LD_INT 6
1184: PUSH
1185: LD_INT 6
1187: PUSH
1188: LD_INT 7
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_OWVAR 67
1200: ARRAY
1201: PUSH
1202: FOR_TO
1203: IFFALSE 1284
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1205: LD_INT 0
1207: PPUSH
1208: LD_INT 1
1210: PPUSH
1211: LD_INT 4
1213: PUSH
1214: LD_INT 5
1216: PUSH
1217: LD_INT 6
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_OWVAR 67
1229: ARRAY
1230: PPUSH
1231: CALL_OW 380
// un := CreateHuman ;
1235: LD_ADDR_VAR 0 5
1239: PUSH
1240: CALL_OW 44
1244: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_VAR 0 7
1254: PUSH
1255: LD_VAR 0 5
1259: ADD
1260: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1261: LD_VAR 0 5
1265: PPUSH
1266: LD_INT 94
1268: PPUSH
1269: LD_INT 145
1271: PPUSH
1272: LD_INT 10
1274: PPUSH
1275: LD_INT 0
1277: PPUSH
1278: CALL_OW 50
// end ;
1282: GO 1202
1284: POP
1285: POP
// end ;
1286: LD_VAR 0 1
1290: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1291: LD_INT 50
1293: PPUSH
1294: LD_INT 1
1296: PPUSH
1297: CALL 1894 0 2
1301: PUSH
1302: LD_INT 40
1304: LESS
1305: IFFALSE 1502
1307: GO 1309
1309: DISABLE
1310: LD_INT 0
1312: PPUSH
1313: PPUSH
// begin uc_side := 4 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 4
1321: ST_TO_ADDR
// uc_nation := nation_american ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// hc_importance := 0 ;
1330: LD_ADDR_OWVAR 32
1334: PUSH
1335: LD_INT 0
1337: ST_TO_ADDR
// for i = 1 to 7 do
1338: LD_ADDR_VAR 0 1
1342: PUSH
1343: DOUBLE
1344: LD_INT 1
1346: DEC
1347: ST_TO_ADDR
1348: LD_INT 7
1350: PUSH
1351: FOR_TO
1352: IFFALSE 1416
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1354: LD_INT 0
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_INT 3
1362: PPUSH
1363: CALL_OW 12
1367: PPUSH
1368: LD_EXP 22
1372: PPUSH
1373: CALL_OW 380
// un := CreateHuman ;
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: CALL_OW 44
1386: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1387: LD_VAR 0 2
1391: PPUSH
1392: LD_INT 7
1394: PPUSH
1395: LD_INT 0
1397: PPUSH
1398: CALL_OW 49
// SetLives ( un , 10 ) ;
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_INT 10
1409: PPUSH
1410: CALL_OW 234
// end ;
1414: GO 1351
1416: POP
1417: POP
// for i = 1 to 5 do
1418: LD_ADDR_VAR 0 1
1422: PUSH
1423: DOUBLE
1424: LD_INT 1
1426: DEC
1427: ST_TO_ADDR
1428: LD_INT 5
1430: PUSH
1431: FOR_TO
1432: IFFALSE 1500
// begin PrepareHuman ( false , 4 , us_skill ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_EXP 22
1444: PPUSH
1445: CALL_OW 380
// SetDir ( un , 1 ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: CALL_OW 233
// un := CreateHuman ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1471: LD_VAR 0 2
1475: PPUSH
1476: LD_INT 23
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// SetLives ( un , 10 ) ;
1486: LD_VAR 0 2
1490: PPUSH
1491: LD_INT 10
1493: PPUSH
1494: CALL_OW 234
// end ;
1498: GO 1431
1500: POP
1501: POP
// end ; end_of_file
1502: PPOPN 2
1504: END
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
// c := Rand ( 1 , 3 ) ;
1511: LD_ADDR_VAR 0 5
1515: PUSH
1516: LD_INT 1
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: CALL_OW 12
1526: ST_TO_ADDR
// for i = 1 to list do
1527: LD_ADDR_VAR 0 6
1531: PUSH
1532: DOUBLE
1533: LD_INT 1
1535: DEC
1536: ST_TO_ADDR
1537: LD_VAR 0 1
1541: PUSH
1542: FOR_TO
1543: IFFALSE 1725
// for ta in filter do
1545: LD_ADDR_VAR 0 4
1549: PUSH
1550: LD_VAR 0 2
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1721
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1558: LD_VAR 0 1
1562: PUSH
1563: LD_VAR 0 6
1567: ARRAY
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL_OW 296
1578: PUSH
1579: LD_INT 15
1581: LESSEQUAL
1582: IFFALSE 1719
// begin case c of 1 :
1584: LD_VAR 0 5
1588: PUSH
1589: LD_INT 1
1591: DOUBLE
1592: EQUAL
1593: IFTRUE 1597
1595: GO 1635
1597: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1598: LD_VAR 0 1
1602: PUSH
1603: LD_VAR 0 6
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 4
1613: PPUSH
1614: CALL_OW 250
1618: PPUSH
1619: LD_VAR 0 4
1623: PPUSH
1624: CALL_OW 251
1628: PPUSH
1629: CALL_OW 154
1633: GO 1719
1635: LD_INT 2
1637: DOUBLE
1638: EQUAL
1639: IFTRUE 1643
1641: GO 1707
1643: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1644: LD_VAR 0 1
1648: PUSH
1649: LD_VAR 0 6
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL_OW 250
1664: PUSH
1665: LD_INT 1
1667: NEG
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 12
1676: PLUS
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL_OW 251
1687: PUSH
1688: LD_INT 1
1690: NEG
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: CALL_OW 12
1699: PLUS
1700: PPUSH
1701: CALL_OW 153
1705: GO 1719
1707: LD_INT 3
1709: DOUBLE
1710: EQUAL
1711: IFTRUE 1715
1713: GO 1718
1715: POP
// ; end ;
1716: GO 1719
1718: POP
// end ; end ;
1719: GO 1555
1721: POP
1722: POP
1723: GO 1542
1725: POP
1726: POP
// end ;
1727: LD_VAR 0 3
1731: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
// for i = 1 to n do
1737: LD_ADDR_VAR 0 4
1741: PUSH
1742: DOUBLE
1743: LD_INT 1
1745: DEC
1746: ST_TO_ADDR
1747: LD_VAR 0 1
1751: PUSH
1752: FOR_TO
1753: IFFALSE 1887
// begin uc_side := 0 ;
1755: LD_ADDR_OWVAR 20
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// uc_nation := 0 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 0
1770: ST_TO_ADDR
// hc_class := class_apeman ;
1771: LD_ADDR_OWVAR 28
1775: PUSH
1776: LD_INT 12
1778: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1779: LD_ADDR_OWVAR 31
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: ST_TO_ADDR
// hc_name :=  ;
1802: LD_ADDR_OWVAR 26
1806: PUSH
1807: LD_STRING 
1809: ST_TO_ADDR
// hc_gallery :=  ;
1810: LD_ADDR_OWVAR 33
1814: PUSH
1815: LD_STRING 
1817: ST_TO_ADDR
// hc_importance := 0 ;
1818: LD_ADDR_OWVAR 32
1822: PUSH
1823: LD_INT 0
1825: ST_TO_ADDR
// un := CreateHuman ;
1826: LD_ADDR_VAR 0 3
1830: PUSH
1831: CALL_OW 44
1835: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 19
1843: PUSH
1844: LD_INT 20
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_INT 2
1856: PPUSH
1857: CALL_OW 12
1861: ARRAY
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1870: LD_INT 1155
1872: PPUSH
1873: LD_INT 5355
1875: PPUSH
1876: CALL_OW 12
1880: PPUSH
1881: CALL_OW 67
// end ;
1885: GO 1752
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 2
1893: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1894: LD_INT 0
1896: PPUSH
1897: PPUSH
1898: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_VAR 0 2
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PPUSH
1916: CALL_OW 69
1920: PPUSH
1921: LD_VAR 0 1
1925: PPUSH
1926: CALL_OW 74
1930: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1931: LD_ADDR_VAR 0 5
1935: PUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_VAR 0 4
1945: PPUSH
1946: CALL_OW 296
1950: ST_TO_ADDR
// if dist >= 9999 then
1951: LD_VAR 0 5
1955: PUSH
1956: LD_INT 9999
1958: GREATEREQUAL
1959: IFFALSE 1972
// result := - 1 else
1961: LD_ADDR_VAR 0 3
1965: PUSH
1966: LD_INT 1
1968: NEG
1969: ST_TO_ADDR
1970: GO 1982
// result := dist ;
1972: LD_ADDR_VAR 0 3
1976: PUSH
1977: LD_VAR 0 5
1981: ST_TO_ADDR
// end ;
1982: LD_VAR 0 3
1986: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
1991: PPUSH
1992: PPUSH
// tmp := 9999 ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_INT 9999
2000: ST_TO_ADDR
// for i = 1 to plist do
2001: LD_ADDR_VAR 0 4
2005: PUSH
2006: DOUBLE
2007: LD_INT 1
2009: DEC
2010: ST_TO_ADDR
2011: LD_VAR 0 1
2015: PUSH
2016: FOR_TO
2017: IFFALSE 2091
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2019: LD_VAR 0 1
2023: PUSH
2024: LD_VAR 0 4
2028: ARRAY
2029: PPUSH
2030: LD_VAR 0 2
2034: PPUSH
2035: CALL 1894 0 2
2039: PUSH
2040: LD_VAR 0 5
2044: LESS
2045: IFFALSE 2089
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2047: LD_ADDR_VAR 0 5
2051: PUSH
2052: LD_VAR 0 1
2056: PUSH
2057: LD_VAR 0 4
2061: ARRAY
2062: PPUSH
2063: LD_VAR 0 2
2067: PPUSH
2068: CALL 1894 0 2
2072: ST_TO_ADDR
// unit := plist [ i ] ;
2073: LD_ADDR_VAR 0 6
2077: PUSH
2078: LD_VAR 0 1
2082: PUSH
2083: LD_VAR 0 4
2087: ARRAY
2088: ST_TO_ADDR
// end ;
2089: GO 2016
2091: POP
2092: POP
// result := unit ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: LD_VAR 0 6
2102: ST_TO_ADDR
// end ;
2103: LD_VAR 0 3
2107: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2108: LD_INT 0
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2115: LD_ADDR_VAR 0 2
2119: PUSH
2120: LD_INT 1000
2122: PUSH
2123: LD_INT 2500
2125: PUSH
2126: LD_INT 5000
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_OWVAR 67
2138: ARRAY
2139: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_VAR 0 2
2149: PUSH
2150: LD_INT 1
2152: NEG
2153: PUSH
2154: LD_INT 22
2156: PUSH
2157: LD_OWVAR 2
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 21
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PPUSH
2180: CALL_OW 69
2184: MUL
2185: PUSH
2186: LD_INT 30
2188: MUL
2189: PLUS
2190: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: LD_VAR 0 2
2200: PUSH
2201: LD_EXP 16
2205: PUSH
2206: LD_INT 10
2208: MUL
2209: PLUS
2210: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2211: LD_ADDR_VAR 0 2
2215: PUSH
2216: LD_VAR 0 2
2220: PUSH
2221: LD_INT 1
2223: NEG
2224: PUSH
2225: LD_EXP 16
2229: MUL
2230: PUSH
2231: LD_INT 20
2233: MUL
2234: PLUS
2235: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2236: LD_ADDR_VAR 0 2
2240: PUSH
2241: LD_VAR 0 2
2245: PUSH
2246: LD_INT 1
2248: NEG
2249: PUSH
2250: LD_OWVAR 1
2254: PUSH
2255: LD_INT 35
2257: DIVREAL
2258: PUSH
2259: LD_INT 60
2261: DIVREAL
2262: MUL
2263: PUSH
2264: LD_INT 25
2266: MUL
2267: PLUS
2268: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: LD_VAR 0 2
2278: PUSH
2279: LD_EXP 18
2283: PUSH
2284: LD_INT 15
2286: MUL
2287: PLUS
2288: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 1
2301: NEG
2302: PUSH
2303: LD_EXP 19
2307: MUL
2308: PUSH
2309: LD_INT 1000
2311: MUL
2312: PLUS
2313: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PUSH
2324: LD_EXP 17
2328: PUSH
2329: LD_INT 5
2331: MUL
2332: PLUS
2333: ST_TO_ADDR
// result := points ;
2334: LD_ADDR_VAR 0 1
2338: PUSH
2339: LD_VAR 0 2
2343: ST_TO_ADDR
// end ; end_of_file
2344: LD_VAR 0 1
2348: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2349: LD_VAR 0 1
2353: PPUSH
2354: CALL 31905 0 1
// if un = ru_cargo then
2358: LD_VAR 0 1
2362: PUSH
2363: LD_EXP 26
2367: EQUAL
2368: IFFALSE 2378
// ru_cargo := 0 ;
2370: LD_ADDR_EXP 26
2374: PUSH
2375: LD_INT 0
2377: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2378: LD_VAR 0 1
2382: PPUSH
2383: CALL_OW 255
2387: PUSH
2388: LD_OWVAR 2
2392: EQUAL
2393: IFFALSE 2409
// dead_counter := dead_counter + 1 ;
2395: LD_ADDR_EXP 15
2399: PUSH
2400: LD_EXP 15
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2409: LD_VAR 0 1
2413: PPUSH
2414: CALL_OW 255
2418: PUSH
2419: LD_INT 81
2421: PUSH
2422: LD_OWVAR 2
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL_OW 69
2435: IN
2436: IFFALSE 2452
// kill_counter := kill_counter + 1 ;
2438: LD_ADDR_EXP 16
2442: PUSH
2443: LD_EXP 16
2447: PUSH
2448: LD_INT 1
2450: PLUS
2451: ST_TO_ADDR
// if un = player_commander then
2452: LD_VAR 0 1
2456: PUSH
2457: LD_EXP 11
2461: EQUAL
2462: IFFALSE 2471
// YouLost ( vulcano-lost ) ;
2464: LD_STRING vulcano-lost
2466: PPUSH
2467: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2471: LD_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 3
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: IN
2505: IFFALSE 2621
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL_OW 266
2516: PUSH
2517: LD_INT 33
2519: EQUAL
2520: PUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: CALL_OW 266
2530: PUSH
2531: LD_INT 28
2533: EQUAL
2534: OR
2535: IFFALSE 2621
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2537: LD_ADDR_EXP 27
2541: PUSH
2542: LD_EXP 27
2546: PUSH
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 266
2556: ADD
2557: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2558: LD_ADDR_EXP 27
2562: PUSH
2563: LD_EXP 27
2567: PUSH
2568: LD_VAR 0 1
2572: PPUSH
2573: CALL_OW 250
2577: ADD
2578: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2579: LD_ADDR_EXP 27
2583: PUSH
2584: LD_EXP 27
2588: PUSH
2589: LD_VAR 0 1
2593: PPUSH
2594: CALL_OW 251
2598: ADD
2599: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2600: LD_ADDR_EXP 27
2604: PUSH
2605: LD_EXP 27
2609: PUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 254
2619: ADD
2620: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2621: LD_VAR 0 1
2625: PUSH
2626: LD_INT 22
2628: PUSH
2629: LD_INT 8
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 21
2638: PUSH
2639: LD_INT 3
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 69
2654: IN
2655: IFFALSE 2799
// begin if GetBType ( un ) = b_barracks then
2657: LD_VAR 0 1
2661: PPUSH
2662: CALL_OW 266
2666: PUSH
2667: LD_INT 5
2669: EQUAL
2670: IFFALSE 2688
// legion_blist := legion_blist ^ b_armoury else
2672: LD_ADDR_EXP 35
2676: PUSH
2677: LD_EXP 35
2681: PUSH
2682: LD_INT 4
2684: ADD
2685: ST_TO_ADDR
2686: GO 2736
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2688: LD_VAR 0 1
2692: PPUSH
2693: CALL_OW 266
2697: PUSH
2698: LD_INT 1
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: LD_INT 8
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: IN
2712: NOT
2713: IFFALSE 2736
// legion_blist := legion_blist ^ GetBType ( un ) ;
2715: LD_ADDR_EXP 35
2719: PUSH
2720: LD_EXP 35
2724: PUSH
2725: LD_VAR 0 1
2729: PPUSH
2730: CALL_OW 266
2734: ADD
2735: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2736: LD_ADDR_EXP 35
2740: PUSH
2741: LD_EXP 35
2745: PUSH
2746: LD_VAR 0 1
2750: PPUSH
2751: CALL_OW 250
2755: ADD
2756: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2757: LD_ADDR_EXP 35
2761: PUSH
2762: LD_EXP 35
2766: PUSH
2767: LD_VAR 0 1
2771: PPUSH
2772: CALL_OW 251
2776: ADD
2777: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2778: LD_ADDR_EXP 35
2782: PUSH
2783: LD_EXP 35
2787: PUSH
2788: LD_VAR 0 1
2792: PPUSH
2793: CALL_OW 254
2797: ADD
2798: ST_TO_ADDR
// end ; if un in legion_force then
2799: LD_VAR 0 1
2803: PUSH
2804: LD_EXP 32
2808: IN
2809: IFFALSE 2827
// legion_force := legion_force diff un ;
2811: LD_ADDR_EXP 32
2815: PUSH
2816: LD_EXP 32
2820: PUSH
2821: LD_VAR 0 1
2825: DIFF
2826: ST_TO_ADDR
// if un in ru_force then
2827: LD_VAR 0 1
2831: PUSH
2832: LD_EXP 24
2836: IN
2837: IFFALSE 2855
// ru_force := ru_force diff un ;
2839: LD_ADDR_EXP 24
2843: PUSH
2844: LD_EXP 24
2848: PUSH
2849: LD_VAR 0 1
2853: DIFF
2854: ST_TO_ADDR
// if un in al_force then
2855: LD_VAR 0 1
2859: PUSH
2860: LD_EXP 39
2864: IN
2865: IFFALSE 2883
// al_force := al_force diff un ;
2867: LD_ADDR_EXP 39
2871: PUSH
2872: LD_EXP 39
2876: PUSH
2877: LD_VAR 0 1
2881: DIFF
2882: ST_TO_ADDR
// end ;
2883: PPOPN 1
2885: END
// on BuildingComplete ( b ) do var i ;
2886: LD_INT 0
2888: PPUSH
// begin if GetSide ( b ) = 8 then
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 255
2898: PUSH
2899: LD_INT 8
2901: EQUAL
2902: IFFALSE 2942
// for i = 1 to 4 do
2904: LD_ADDR_VAR 0 2
2908: PUSH
2909: DOUBLE
2910: LD_INT 1
2912: DEC
2913: ST_TO_ADDR
2914: LD_INT 4
2916: PUSH
2917: FOR_TO
2918: IFFALSE 2940
// legion_blist := Delete ( legion_blist , 1 ) ;
2920: LD_ADDR_EXP 35
2924: PUSH
2925: LD_EXP 35
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 3
2937: ST_TO_ADDR
2938: GO 2917
2940: POP
2941: POP
// if GetSide ( b ) = 3 then
2942: LD_VAR 0 1
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 3
2954: EQUAL
2955: IFFALSE 2995
// for i = 1 to 4 do
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: DOUBLE
2963: LD_INT 1
2965: DEC
2966: ST_TO_ADDR
2967: LD_INT 4
2969: PUSH
2970: FOR_TO
2971: IFFALSE 2993
// ru_blist := Delete ( ru_blist , 1 ) ;
2973: LD_ADDR_EXP 27
2977: PUSH
2978: LD_EXP 27
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: CALL_OW 3
2990: ST_TO_ADDR
2991: GO 2970
2993: POP
2994: POP
// end ;
2995: PPOPN 2
2997: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
2998: LD_VAR 0 1
3002: PPUSH
3003: CALL_OW 264
3007: PUSH
3008: LD_INT 51
3010: PUSH
3011: LD_INT 48
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: IN
3018: NOT
3019: IFFALSE 3067
// begin if GetSide ( veh ) = 3 then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 255
3030: PUSH
3031: LD_INT 3
3033: EQUAL
3034: IFFALSE 3067
// begin ComMoveXY ( veh , 149 , 8 ) ;
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 149
3043: PPUSH
3044: LD_INT 8
3046: PPUSH
3047: CALL_OW 111
// ru_force := ru_force ^ veh ;
3051: LD_ADDR_EXP 24
3055: PUSH
3056: LD_EXP 24
3060: PUSH
3061: LD_VAR 0 1
3065: ADD
3066: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 264
3076: PUSH
3077: LD_INT 32
3079: PUSH
3080: LD_INT 31
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: IN
3087: NOT
3088: IFFALSE 3121
// begin if GetSide ( veh ) = 8 then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 255
3099: PUSH
3100: LD_INT 8
3102: EQUAL
3103: IFFALSE 3121
// legion_force := legion_force ^ veh ;
3105: LD_ADDR_EXP 32
3109: PUSH
3110: LD_EXP 32
3114: PUSH
3115: LD_VAR 0 1
3119: ADD
3120: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3121: LD_VAR 0 1
3125: PPUSH
3126: CALL_OW 255
3130: PUSH
3131: LD_INT 3
3133: EQUAL
3134: PUSH
3135: LD_EXP 26
3139: NOT
3140: AND
3141: PUSH
3142: LD_VAR 0 1
3146: PPUSH
3147: CALL_OW 264
3151: PUSH
3152: LD_INT 51
3154: EQUAL
3155: AND
3156: IFFALSE 3168
// ru_cargo := veh ;
3158: LD_ADDR_EXP 26
3162: PUSH
3163: LD_VAR 0 1
3167: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3168: LD_VAR 0 1
3172: PPUSH
3173: CALL_OW 255
3177: PUSH
3178: LD_INT 7
3180: EQUAL
3181: PUSH
3182: LD_OWVAR 2
3186: PUSH
3187: LD_INT 7
3189: NONEQUAL
3190: AND
3191: IFFALSE 3209
// al_force := al_force ^ veh ;
3193: LD_ADDR_EXP 39
3197: PUSH
3198: LD_EXP 39
3202: PUSH
3203: LD_VAR 0 1
3207: ADD
3208: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 255
3218: PUSH
3219: LD_OWVAR 2
3223: EQUAL
3224: IFFALSE 3240
// veh_counter := veh_counter + 1 ;
3226: LD_ADDR_EXP 17
3230: PUSH
3231: LD_EXP 17
3235: PUSH
3236: LD_INT 1
3238: PLUS
3239: ST_TO_ADDR
// end ;
3240: PPOPN 2
3242: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3243: LD_VAR 0 1
3247: PPUSH
3248: CALL_OW 255
3252: PUSH
3253: LD_OWVAR 2
3257: NONEQUAL
3258: IFFALSE 3274
// sib_contamin_counter := sib_contamin_counter + 1 ;
3260: LD_ADDR_EXP 19
3264: PUSH
3265: LD_EXP 19
3269: PUSH
3270: LD_INT 1
3272: PLUS
3273: ST_TO_ADDR
// end ;
3274: PPOPN 3
3276: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3277: LD_VAR 0 2
3281: PPUSH
3282: CALL_OW 255
3286: PUSH
3287: LD_OWVAR 2
3291: EQUAL
3292: IFFALSE 3308
// tech_counter := tech_counter + 1 ;
3294: LD_ADDR_EXP 18
3298: PUSH
3299: LD_EXP 18
3303: PUSH
3304: LD_INT 1
3306: PLUS
3307: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_INT 53
3315: EQUAL
3316: PUSH
3317: LD_OWVAR 2
3321: PUSH
3322: LD_INT 1
3324: EQUAL
3325: AND
3326: IFFALSE 3341
// SetTech ( 80 , 1 , state_researched ) ;
3328: LD_INT 80
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: LD_INT 2
3336: PPUSH
3337: CALL_OW 322
// end ;
3341: PPOPN 2
3343: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3344: LD_INT 25
3346: PUSH
3347: LD_INT 12
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 69
3358: PUSH
3359: LD_INT 9
3361: LESS
3362: IFFALSE 3395
3364: GO 3366
3366: DISABLE
// begin enable ;
3367: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3368: LD_INT 8
3370: PUSH
3371: LD_INT 25
3373: PUSH
3374: LD_INT 12
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: PUSH
3386: LD_INT 0
3388: PLUS
3389: MINUS
3390: PPUSH
3391: CALL 1732 0 1
// end ;
3395: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3396: LD_VAR 0 1
3400: PPUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_VAR 0 3
3410: PPUSH
3411: CALL 32003 0 3
// end ;
3415: PPOPN 3
3417: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3418: LD_VAR 0 1
3422: PPUSH
3423: CALL 32011 0 1
// end ; end_of_file
3427: PPOPN 1
3429: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3430: LD_INT 0
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
3436: PPUSH
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
3442: PPUSH
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := nation_russian ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: LD_INT 22
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 69
3492: PUSH
3493: LD_INT 1
3495: ARRAY
3496: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_INT 22
3504: PUSH
3505: LD_INT 3
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 30
3514: PUSH
3515: LD_INT 3
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: CALL_OW 69
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3535: LD_ADDR_VAR 0 6
3539: PUSH
3540: LD_INT 22
3542: PUSH
3543: LD_INT 3
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 34
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3573: LD_ADDR_VAR 0 8
3577: PUSH
3578: LD_INT 22
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 30
3590: PUSH
3591: LD_INT 33
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PPUSH
3602: CALL_OW 69
3606: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3607: LD_ADDR_VAR 0 7
3611: PUSH
3612: LD_INT 22
3614: PUSH
3615: LD_INT 3
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 30
3624: PUSH
3625: LD_INT 5
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PPUSH
3636: CALL_OW 69
3640: PUSH
3641: LD_INT 1
3643: ARRAY
3644: ST_TO_ADDR
// ru_blist := [ ] ;
3645: LD_ADDR_EXP 27
3649: PUSH
3650: EMPTY
3651: ST_TO_ADDR
// ru_vlist := [ ] ;
3652: LD_ADDR_EXP 28
3656: PUSH
3657: EMPTY
3658: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3659: LD_ADDR_EXP 31
3663: PUSH
3664: LD_INT 183
3666: PUSH
3667: LD_INT 62
3669: PUSH
3670: LD_INT 147
3672: PUSH
3673: LD_INT 44
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3682: LD_INT 30
3684: PUSH
3685: LD_INT 34
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: PPUSH
3701: LD_EXP 31
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: LD_EXP 31
3714: PUSH
3715: LD_INT 2
3717: ARRAY
3718: PPUSH
3719: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3723: LD_ADDR_EXP 29
3727: PUSH
3728: LD_INT 4
3730: PUSH
3731: LD_INT 5
3733: PUSH
3734: LD_INT 6
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: LD_OWVAR 67
3746: ARRAY
3747: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3748: LD_VAR 0 4
3752: PPUSH
3753: CALL_OW 274
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 3000
3763: PPUSH
3764: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3768: LD_VAR 0 4
3772: PPUSH
3773: CALL_OW 274
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: LD_INT 300
3783: PPUSH
3784: CALL_OW 277
// hc_gallery :=  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name :=  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// hc_importance := 0 ;
3804: LD_ADDR_OWVAR 32
3808: PUSH
3809: LD_INT 0
3811: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3812: LD_ADDR_EXP 25
3816: PUSH
3817: LD_INT 5
3819: PUSH
3820: LD_INT 6
3822: PUSH
3823: LD_INT 7
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: LD_OWVAR 67
3835: ARRAY
3836: ST_TO_ADDR
// for i = 1 to 6 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 6
3849: PUSH
3850: FOR_TO
3851: IFFALSE 4009
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3853: LD_INT 0
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: LD_EXP 25
3863: PPUSH
3864: CALL_OW 380
// un := CreateHuman ;
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: CALL_OW 44
3877: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_VAR 0 7
3887: PPUSH
3888: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3892: LD_INT 0
3894: PPUSH
3895: LD_INT 4
3897: PPUSH
3898: LD_EXP 25
3902: PPUSH
3903: CALL_OW 380
// un := CreateHuman ;
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: CALL_OW 44
3916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3917: LD_VAR 0 3
3921: PPUSH
3922: LD_INT 24
3924: PPUSH
3925: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
3929: LD_INT 0
3931: PPUSH
3932: LD_INT 3
3934: PPUSH
3935: LD_EXP 25
3939: PPUSH
3940: CALL_OW 380
// un := CreateHuman ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: CALL_OW 44
3953: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
3954: LD_VAR 0 3
3958: PPUSH
3959: LD_VAR 0 5
3963: PPUSH
3964: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: LD_EXP 25
3978: PPUSH
3979: CALL_OW 380
// un := CreateHuman ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 44
3992: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_VAR 0 4
4002: PPUSH
4003: CALL_OW 52
// end ;
4007: GO 3850
4009: POP
4010: POP
// russian_prepared := true ;
4011: LD_ADDR_EXP 2
4015: PUSH
4016: LD_INT 1
4018: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4019: LD_VAR 0 5
4023: PPUSH
4024: LD_INT 21
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 3
4032: PPUSH
4033: LD_INT 51
4035: PPUSH
4036: CALL_OW 125
// end ;
4040: LD_VAR 0 1
4044: RET
// every 0 0$1 trigger legion_mines do var i , p ;
4045: LD_EXP 34
4049: IFFALSE 4261
4051: GO 4053
4053: DISABLE
4054: LD_INT 0
4056: PPUSH
4057: PPUSH
// begin enable ;
4058: ENABLE
// p := 1 ;
4059: LD_ADDR_VAR 0 2
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// for i = legion_mines div 2 downto 1 do
4067: LD_ADDR_VAR 0 1
4071: PUSH
4072: DOUBLE
4073: LD_EXP 34
4077: PUSH
4078: LD_INT 2
4080: DIV
4081: INC
4082: ST_TO_ADDR
4083: LD_INT 1
4085: PUSH
4086: FOR_DOWNTO
4087: IFFALSE 4259
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
4089: LD_EXP 34
4093: PUSH
4094: LD_VAR 0 2
4098: ARRAY
4099: PPUSH
4100: LD_EXP 34
4104: PUSH
4105: LD_VAR 0 2
4109: PUSH
4110: LD_INT 1
4112: PLUS
4113: ARRAY
4114: PPUSH
4115: CALL_OW 428
4119: PUSH
4120: LD_INT 0
4122: GREATER
4123: IFFALSE 4257
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
4125: LD_EXP 34
4129: PUSH
4130: LD_VAR 0 2
4134: ARRAY
4135: PPUSH
4136: LD_EXP 34
4140: PUSH
4141: LD_VAR 0 2
4145: PUSH
4146: LD_INT 1
4148: PLUS
4149: ARRAY
4150: PPUSH
4151: CALL_OW 428
4155: PPUSH
4156: CALL_OW 255
4160: PUSH
4161: LD_EXP 37
4165: EQUAL
4166: IFFALSE 4243
// begin LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
4168: LD_EXP 34
4172: PUSH
4173: LD_VAR 0 2
4177: ARRAY
4178: PPUSH
4179: LD_EXP 34
4183: PUSH
4184: LD_VAR 0 2
4188: PUSH
4189: LD_INT 1
4191: PLUS
4192: ARRAY
4193: PPUSH
4194: LD_INT 8
4196: PPUSH
4197: CALL_OW 456
// legion_mines := Delete ( legion_mines , p ) ;
4201: LD_ADDR_EXP 34
4205: PUSH
4206: LD_EXP 34
4210: PPUSH
4211: LD_VAR 0 2
4215: PPUSH
4216: CALL_OW 3
4220: ST_TO_ADDR
// legion_mines := Delete ( legion_mines , p ) ;
4221: LD_ADDR_EXP 34
4225: PUSH
4226: LD_EXP 34
4230: PPUSH
4231: LD_VAR 0 2
4235: PPUSH
4236: CALL_OW 3
4240: ST_TO_ADDR
// end else
4241: GO 4257
// p := p + 2 ;
4243: LD_ADDR_VAR 0 2
4247: PUSH
4248: LD_VAR 0 2
4252: PUSH
4253: LD_INT 2
4255: PLUS
4256: ST_TO_ADDR
// end ;
4257: GO 4086
4259: POP
4260: POP
// end ;
4261: PPOPN 2
4263: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4264: LD_INT 22
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 69
4278: PUSH
4279: LD_INT 0
4281: GREATER
4282: PUSH
4283: LD_EXP 2
4287: AND
4288: IFFALSE 6792
4290: GO 4292
4292: DISABLE
4293: LD_INT 0
4295: PPUSH
4296: PPUSH
4297: PPUSH
4298: PPUSH
4299: PPUSH
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
// begin enable ;
4311: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4312: LD_ADDR_VAR 0 1
4316: PUSH
4317: LD_INT 22
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 30
4329: PUSH
4330: LD_INT 1
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PPUSH
4341: CALL_OW 69
4345: PUSH
4346: LD_INT 1
4348: ARRAY
4349: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4350: LD_ADDR_VAR 0 2
4354: PUSH
4355: LD_INT 22
4357: PUSH
4358: LD_INT 3
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 3
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 1
4386: ARRAY
4387: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 30
4405: PUSH
4406: LD_INT 34
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 69
4421: PUSH
4422: LD_INT 1
4424: ARRAY
4425: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4426: LD_ADDR_VAR 0 4
4430: PUSH
4431: LD_INT 22
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 30
4443: PUSH
4444: LD_INT 33
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 69
4459: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4460: LD_ADDR_VAR 0 8
4464: PUSH
4465: LD_INT 22
4467: PUSH
4468: LD_INT 3
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 5
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 69
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4498: LD_ADDR_VAR 0 5
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 3
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 21
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4532: LD_ADDR_VAR 0 6
4536: PUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4566: LD_ADDR_VAR 0 7
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4600: LD_ADDR_VAR 0 9
4604: PUSH
4605: LD_VAR 0 7
4609: PPUSH
4610: LD_INT 25
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 72
4624: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4625: LD_ADDR_VAR 0 10
4629: PUSH
4630: LD_VAR 0 7
4634: PPUSH
4635: LD_INT 25
4637: PUSH
4638: LD_INT 3
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 72
4649: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4650: LD_ADDR_VAR 0 11
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 25
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PPUSH
4670: CALL_OW 72
4674: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4675: LD_INT 22
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 34
4687: PUSH
4688: LD_INT 51
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PPUSH
4699: CALL_OW 69
4703: PUSH
4704: LD_INT 0
4706: GREATER
4707: PUSH
4708: LD_EXP 26
4712: PUSH
4713: LD_INT 0
4715: EQUAL
4716: AND
4717: IFFALSE 4757
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4719: LD_ADDR_EXP 26
4723: PUSH
4724: LD_INT 22
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 34
4736: PUSH
4737: LD_INT 51
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PPUSH
4748: CALL_OW 69
4752: PUSH
4753: LD_INT 1
4755: ARRAY
4756: ST_TO_ADDR
// if ru_cargo then
4757: LD_EXP 26
4761: IFFALSE 5101
// begin if IsInArea ( ru_cargo , ru_base ) then
4763: LD_EXP 26
4767: PPUSH
4768: LD_INT 9
4770: PPUSH
4771: CALL_OW 308
4775: IFFALSE 4854
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4777: LD_EXP 26
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: CALL_OW 289
4789: PUSH
4790: LD_INT 0
4792: EQUAL
4793: IFFALSE 4811
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4795: LD_EXP 26
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 120
4809: GO 4852
// if not HasTask ( ru_cargo ) then
4811: LD_EXP 26
4815: PPUSH
4816: CALL_OW 314
4820: NOT
4821: IFFALSE 4852
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4823: LD_EXP 26
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 250
4837: PPUSH
4838: LD_VAR 0 1
4842: PPUSH
4843: CALL_OW 251
4847: PPUSH
4848: CALL_OW 111
// end else
4852: GO 5101
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4854: LD_EXP 26
4858: PPUSH
4859: CALL_OW 314
4863: NOT
4864: PUSH
4865: LD_EXP 26
4869: PPUSH
4870: LD_INT 1
4872: PPUSH
4873: CALL_OW 289
4877: PUSH
4878: LD_INT 100
4880: LESS
4881: AND
4882: PUSH
4883: LD_EXP 26
4887: PPUSH
4888: LD_INT 10
4890: PPUSH
4891: CALL_OW 308
4895: NOT
4896: AND
4897: IFFALSE 4974
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4899: LD_ADDR_VAR 0 15
4903: PUSH
4904: LD_INT 11
4906: PPUSH
4907: CALL_OW 435
4911: ST_TO_ADDR
// if cr then
4912: LD_VAR 0 15
4916: IFFALSE 4947
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4918: LD_EXP 26
4922: PPUSH
4923: LD_VAR 0 15
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: PPUSH
4932: LD_VAR 0 15
4936: PUSH
4937: LD_INT 2
4939: ARRAY
4940: PPUSH
4941: CALL_OW 117
4945: GO 4974
// if not IsInArea ( ru_cargo , ru_crates ) then
4947: LD_EXP 26
4951: PPUSH
4952: LD_INT 11
4954: PPUSH
4955: CALL_OW 308
4959: NOT
4960: IFFALSE 4974
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4962: LD_EXP 26
4966: PPUSH
4967: LD_INT 11
4969: PPUSH
4970: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
4974: LD_EXP 26
4978: PPUSH
4979: CALL_OW 314
4983: NOT
4984: PUSH
4985: LD_EXP 26
4989: PPUSH
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 308
4997: NOT
4998: AND
4999: PUSH
5000: LD_EXP 26
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 289
5012: PUSH
5013: LD_INT 100
5015: EQUAL
5016: PUSH
5017: LD_OWVAR 2
5021: PPUSH
5022: LD_EXP 26
5026: PPUSH
5027: CALL_OW 292
5031: OR
5032: AND
5033: IFFALSE 5047
// ComMoveToArea ( ru_cargo , cargoa ) ;
5035: LD_EXP 26
5039: PPUSH
5040: LD_INT 10
5042: PPUSH
5043: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5047: LD_EXP 26
5051: PPUSH
5052: LD_INT 10
5054: PPUSH
5055: CALL_OW 308
5059: PUSH
5060: LD_VAR 0 8
5064: AND
5065: IFFALSE 5101
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5067: LD_VAR 0 7
5071: PPUSH
5072: LD_INT 25
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 72
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: LD_INT 139
5093: PPUSH
5094: LD_INT 24
5096: PPUSH
5097: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5101: LD_EXP 26
5105: PUSH
5106: LD_INT 0
5108: EQUAL
5109: PUSH
5110: LD_VAR 0 2
5114: AND
5115: PUSH
5116: LD_VAR 0 2
5120: PPUSH
5121: CALL_OW 461
5125: PUSH
5126: LD_INT 2
5128: EQUAL
5129: AND
5130: IFFALSE 5153
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5132: LD_VAR 0 2
5136: PPUSH
5137: LD_INT 21
5139: PPUSH
5140: LD_INT 3
5142: PPUSH
5143: LD_INT 3
5145: PPUSH
5146: LD_INT 51
5148: PPUSH
5149: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
5153: LD_VAR 0 7
5157: PPUSH
5158: LD_INT 25
5160: PUSH
5161: LD_INT 9
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PPUSH
5168: CALL_OW 72
5172: IFFALSE 5236
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5174: LD_VAR 0 7
5178: PPUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 9
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PPUSH
5189: CALL_OW 72
5193: PPUSH
5194: LD_INT 22
5196: PUSH
5197: LD_OWVAR 2
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 21
5211: PUSH
5212: LD_INT 3
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: PPUSH
5232: CALL 1505 0 2
// if ru_factory and ru_vlist > 0 then
5236: LD_VAR 0 2
5240: PUSH
5241: LD_EXP 28
5245: PUSH
5246: LD_INT 0
5248: GREATER
5249: AND
5250: IFFALSE 5350
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5252: LD_VAR 0 2
5256: PPUSH
5257: CALL_OW 461
5261: PUSH
5262: LD_INT 2
5264: EQUAL
5265: IFFALSE 5350
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5267: LD_VAR 0 2
5271: PPUSH
5272: LD_EXP 28
5276: PUSH
5277: LD_INT 1
5279: ARRAY
5280: PPUSH
5281: LD_EXP 28
5285: PUSH
5286: LD_INT 2
5288: ARRAY
5289: PPUSH
5290: LD_EXP 28
5294: PUSH
5295: LD_INT 3
5297: ARRAY
5298: PPUSH
5299: LD_EXP 28
5303: PUSH
5304: LD_INT 4
5306: ARRAY
5307: PPUSH
5308: CALL_OW 125
// for i = 1 to 4 do
5312: LD_ADDR_VAR 0 12
5316: PUSH
5317: DOUBLE
5318: LD_INT 1
5320: DEC
5321: ST_TO_ADDR
5322: LD_INT 4
5324: PUSH
5325: FOR_TO
5326: IFFALSE 5348
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5328: LD_ADDR_EXP 28
5332: PUSH
5333: LD_EXP 28
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 3
5345: ST_TO_ADDR
5346: GO 5325
5348: POP
5349: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5350: LD_INT 24
5352: PPUSH
5353: CALL_OW 461
5357: PUSH
5358: LD_INT 2
5360: EQUAL
5361: PUSH
5362: LD_EXP 4
5366: AND
5367: IFFALSE 5395
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5369: LD_INT 25
5371: PPUSH
5372: LD_INT 3
5374: PPUSH
5375: CALL_OW 321
5379: PUSH
5380: LD_INT 1
5382: EQUAL
5383: IFFALSE 5395
// ComResearch ( ru_lab , tech_sibfiss ) ;
5385: LD_INT 24
5387: PPUSH
5388: LD_INT 25
5390: PPUSH
5391: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5395: LD_INT 25
5397: PPUSH
5398: LD_INT 3
5400: PPUSH
5401: CALL_OW 321
5405: PUSH
5406: LD_INT 2
5408: EQUAL
5409: PUSH
5410: LD_OWVAR 1
5414: PUSH
5415: LD_INT 10500
5417: MOD
5418: PUSH
5419: LD_INT 0
5421: EQUAL
5422: AND
5423: IFFALSE 5461
// if BuildingStatus ( ru_factory ) = bs_idle then
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 461
5434: PUSH
5435: LD_INT 2
5437: EQUAL
5438: IFFALSE 5461
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5440: LD_VAR 0 2
5444: PPUSH
5445: LD_INT 23
5447: PPUSH
5448: LD_INT 3
5450: PPUSH
5451: LD_INT 3
5453: PPUSH
5454: LD_INT 48
5456: PPUSH
5457: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5461: LD_INT 22
5463: PUSH
5464: LD_INT 3
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 34
5473: PUSH
5474: LD_INT 48
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: PUSH
5490: LD_INT 0
5492: GREATER
5493: IFFALSE 5867
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5495: LD_ADDR_VAR 0 16
5499: PUSH
5500: LD_INT 22
5502: PUSH
5503: LD_INT 3
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 34
5512: PUSH
5513: LD_INT 48
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PUSH
5529: LD_INT 1
5531: ARRAY
5532: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5533: LD_VAR 0 16
5537: PPUSH
5538: LD_INT 9
5540: PPUSH
5541: CALL_OW 308
5545: IFFALSE 5563
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5547: LD_VAR 0 16
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 120
5561: GO 5867
// if not HasTask ( sib_bomb ) then
5563: LD_VAR 0 16
5567: PPUSH
5568: CALL_OW 314
5572: NOT
5573: IFFALSE 5867
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5575: LD_INT 22
5577: PUSH
5578: LD_OWVAR 2
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: PUSH
5606: LD_INT 1
5608: ARRAY
5609: PPUSH
5610: CALL_OW 256
5614: PUSH
5615: LD_INT 250
5617: GREATER
5618: IFFALSE 5711
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5620: LD_VAR 0 16
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_OWVAR 2
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 30
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PPUSH
5651: CALL_OW 69
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 250
5664: PPUSH
5665: LD_INT 22
5667: PUSH
5668: LD_OWVAR 2
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 30
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PPUSH
5691: CALL_OW 69
5695: PUSH
5696: LD_INT 1
5698: ARRAY
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
5709: GO 5867
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5711: LD_INT 22
5713: PUSH
5714: LD_OWVAR 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 21
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PPUSH
5737: CALL_OW 69
5741: PUSH
5742: LD_INT 0
5744: GREATER
5745: IFFALSE 5838
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5747: LD_VAR 0 16
5751: PPUSH
5752: LD_INT 22
5754: PUSH
5755: LD_OWVAR 2
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 21
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PPUSH
5778: CALL_OW 69
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: CALL_OW 250
5791: PPUSH
5792: LD_INT 22
5794: PUSH
5795: LD_OWVAR 2
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 21
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PPUSH
5818: CALL_OW 69
5822: PUSH
5823: LD_INT 1
5825: ARRAY
5826: PPUSH
5827: CALL_OW 251
5831: PPUSH
5832: CALL_OW 116
5836: GO 5867
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5838: LD_VAR 0 16
5842: PPUSH
5843: LD_EXP 11
5847: PPUSH
5848: CALL_OW 250
5852: PPUSH
5853: LD_EXP 11
5857: PPUSH
5858: CALL_OW 251
5862: PPUSH
5863: CALL_OW 116
// end ; if ru_can_attack then
5867: LD_EXP 3
5871: IFFALSE 6019
// if ru_time > 0 0$00 then
5873: LD_EXP 30
5877: PUSH
5878: LD_INT 0
5880: GREATER
5881: IFFALSE 5899
// ru_time := ru_time - 0 0$03 else
5883: LD_ADDR_EXP 30
5887: PUSH
5888: LD_EXP 30
5892: PUSH
5893: LD_INT 105
5895: MINUS
5896: ST_TO_ADDR
5897: GO 6019
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5899: LD_ADDR_EXP 30
5903: PUSH
5904: LD_INT 20265
5906: PPUSH
5907: LD_INT 30765
5909: PPUSH
5910: CALL_OW 12
5914: ST_TO_ADDR
// for i = 1 to ru_amount do
5915: LD_ADDR_VAR 0 12
5919: PUSH
5920: DOUBLE
5921: LD_INT 1
5923: DEC
5924: ST_TO_ADDR
5925: LD_EXP 29
5929: PUSH
5930: FOR_TO
5931: IFFALSE 6017
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5933: LD_ADDR_EXP 28
5937: PUSH
5938: LD_EXP 28
5942: PUSH
5943: LD_INT 23
5945: ADD
5946: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: LD_EXP 28
5956: PUSH
5957: LD_INT 3
5959: ADD
5960: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5961: LD_ADDR_EXP 28
5965: PUSH
5966: LD_EXP 28
5970: PUSH
5971: LD_INT 3
5973: ADD
5974: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5975: LD_ADDR_EXP 28
5979: PUSH
5980: LD_EXP 28
5984: PUSH
5985: LD_INT 46
5987: PUSH
5988: LD_INT 45
5990: PUSH
5991: LD_INT 47
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PUSH
5999: LD_INT 1
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: CALL_OW 14
6012: ARRAY
6013: ADD
6014: ST_TO_ADDR
// end ;
6015: GO 5930
6017: POP
6018: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6019: LD_VAR 0 4
6023: PPUSH
6024: LD_INT 35
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PPUSH
6034: CALL_OW 72
6038: PUSH
6039: LD_INT 0
6041: GREATER
6042: IFFALSE 6090
// if BuildingStatus ( ru_factory ) = bs_idle then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 461
6053: PUSH
6054: LD_INT 2
6056: EQUAL
6057: IFFALSE 6090
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6059: LD_VAR 0 4
6063: PPUSH
6064: LD_INT 35
6066: PUSH
6067: LD_INT 0
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 72
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PPUSH
6083: LD_INT 47
6085: PPUSH
6086: CALL_OW 148
// if ru_force = ru_amount then
6090: LD_EXP 24
6094: PUSH
6095: LD_EXP 29
6099: EQUAL
6100: IFFALSE 6232
// begin for i = 1 to ru_force do
6102: LD_ADDR_VAR 0 12
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_EXP 24
6116: PUSH
6117: FOR_TO
6118: IFFALSE 6228
// if IsInArea ( ru_force [ i ] , ru_base ) then
6120: LD_EXP 24
6124: PUSH
6125: LD_VAR 0 12
6129: ARRAY
6130: PPUSH
6131: LD_INT 9
6133: PPUSH
6134: CALL_OW 308
6138: IFFALSE 6162
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
6140: LD_EXP 24
6144: PUSH
6145: LD_VAR 0 12
6149: ARRAY
6150: PPUSH
6151: LD_VAR 0 3
6155: PPUSH
6156: CALL_OW 120
6160: GO 6226
// if not HasTask ( ru_force [ i ] ) then
6162: LD_EXP 24
6166: PUSH
6167: LD_VAR 0 12
6171: ARRAY
6172: PPUSH
6173: CALL_OW 314
6177: NOT
6178: IFFALSE 6226
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6180: LD_EXP 24
6184: PUSH
6185: LD_VAR 0 12
6189: ARRAY
6190: PPUSH
6191: LD_INT 81
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: PPUSH
6206: LD_EXP 24
6210: PUSH
6211: LD_VAR 0 12
6215: ARRAY
6216: PPUSH
6217: CALL_OW 74
6221: PPUSH
6222: CALL_OW 115
6226: GO 6117
6228: POP
6229: POP
// end else
6230: GO 6382
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6232: LD_EXP 24
6236: PPUSH
6237: LD_INT 3
6239: PUSH
6240: LD_INT 95
6242: PUSH
6243: LD_INT 18
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 72
6258: PUSH
6259: LD_INT 0
6261: GREATER
6262: IFFALSE 6382
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6264: LD_ADDR_VAR 0 13
6268: PUSH
6269: LD_EXP 24
6273: PPUSH
6274: LD_INT 3
6276: PUSH
6277: LD_INT 95
6279: PUSH
6280: LD_INT 18
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PPUSH
6291: CALL_OW 72
6295: ST_TO_ADDR
// for i = 1 to tmp do
6296: LD_ADDR_VAR 0 12
6300: PUSH
6301: DOUBLE
6302: LD_INT 1
6304: DEC
6305: ST_TO_ADDR
6306: LD_VAR 0 13
6310: PUSH
6311: FOR_TO
6312: IFFALSE 6380
// if not HasTask ( tmp [ i ] ) then
6314: LD_VAR 0 13
6318: PUSH
6319: LD_VAR 0 12
6323: ARRAY
6324: PPUSH
6325: CALL_OW 314
6329: NOT
6330: IFFALSE 6378
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6332: LD_EXP 24
6336: PUSH
6337: LD_VAR 0 12
6341: ARRAY
6342: PPUSH
6343: LD_INT 81
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 69
6357: PPUSH
6358: LD_EXP 24
6362: PUSH
6363: LD_VAR 0 12
6367: ARRAY
6368: PPUSH
6369: CALL_OW 74
6373: PPUSH
6374: CALL_OW 115
6378: GO 6311
6380: POP
6381: POP
// end ; if ru_engs > 0 then
6382: LD_VAR 0 9
6386: PUSH
6387: LD_INT 0
6389: GREATER
6390: IFFALSE 6792
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6392: LD_VAR 0 5
6396: PPUSH
6397: LD_INT 3
6399: PUSH
6400: LD_INT 24
6402: PUSH
6403: LD_INT 1000
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 72
6418: PUSH
6419: LD_INT 0
6421: GREATER
6422: IFFALSE 6577
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6424: LD_ADDR_VAR 0 14
6428: PUSH
6429: LD_VAR 0 5
6433: PPUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 24
6439: PUSH
6440: LD_INT 1000
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 72
6455: ST_TO_ADDR
// for i = 1 to ru_engs do
6456: LD_ADDR_VAR 0 12
6460: PUSH
6461: DOUBLE
6462: LD_INT 1
6464: DEC
6465: ST_TO_ADDR
6466: LD_VAR 0 9
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6573
// begin if IsInUnit ( ru_engs [ i ] ) then
6474: LD_VAR 0 9
6478: PUSH
6479: LD_VAR 0 12
6483: ARRAY
6484: PPUSH
6485: CALL_OW 310
6489: IFFALSE 6508
// ComExitBuilding ( ru_engs [ i ] ) else
6491: LD_VAR 0 9
6495: PUSH
6496: LD_VAR 0 12
6500: ARRAY
6501: PPUSH
6502: CALL_OW 122
6506: GO 6571
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6508: LD_VAR 0 9
6512: PUSH
6513: LD_VAR 0 12
6517: ARRAY
6518: PPUSH
6519: CALL_OW 314
6523: NOT
6524: PUSH
6525: LD_VAR 0 9
6529: PUSH
6530: LD_VAR 0 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 256
6540: PUSH
6541: LD_INT 600
6543: GREATER
6544: AND
6545: IFFALSE 6571
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 14
6562: PUSH
6563: LD_INT 1
6565: ARRAY
6566: PPUSH
6567: CALL_OW 130
// end ;
6571: GO 6471
6573: POP
6574: POP
// end else
6575: GO 6792
// begin if ru_blist = 0 then
6577: LD_EXP 27
6581: PUSH
6582: LD_INT 0
6584: EQUAL
6585: IFFALSE 6667
// begin for i = 1 to ru_engs do
6587: LD_ADDR_VAR 0 12
6591: PUSH
6592: DOUBLE
6593: LD_INT 1
6595: DEC
6596: ST_TO_ADDR
6597: LD_VAR 0 9
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6663
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6605: LD_VAR 0 9
6609: PUSH
6610: LD_VAR 0 12
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: PUSH
6622: LD_VAR 0 9
6626: PUSH
6627: LD_VAR 0 12
6631: ARRAY
6632: PPUSH
6633: CALL_OW 310
6637: NOT
6638: AND
6639: IFFALSE 6661
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6641: LD_VAR 0 9
6645: PUSH
6646: LD_VAR 0 12
6650: ARRAY
6651: PPUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 120
6661: GO 6602
6663: POP
6664: POP
// end else
6665: GO 6792
// begin for i = 1 to ru_engs do
6667: LD_ADDR_VAR 0 12
6671: PUSH
6672: DOUBLE
6673: LD_INT 1
6675: DEC
6676: ST_TO_ADDR
6677: LD_VAR 0 9
6681: PUSH
6682: FOR_TO
6683: IFFALSE 6790
// begin if IsInUnit ( ru_engs [ i ] ) then
6685: LD_VAR 0 9
6689: PUSH
6690: LD_VAR 0 12
6694: ARRAY
6695: PPUSH
6696: CALL_OW 310
6700: IFFALSE 6719
// ComExitBuilding ( ru_engs [ i ] ) else
6702: LD_VAR 0 9
6706: PUSH
6707: LD_VAR 0 12
6711: ARRAY
6712: PPUSH
6713: CALL_OW 122
6717: GO 6788
// if not HasTask ( ru_engs [ i ] ) then
6719: LD_VAR 0 9
6723: PUSH
6724: LD_VAR 0 12
6728: ARRAY
6729: PPUSH
6730: CALL_OW 314
6734: NOT
6735: IFFALSE 6788
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6737: LD_VAR 0 9
6741: PUSH
6742: LD_VAR 0 12
6746: ARRAY
6747: PPUSH
6748: LD_EXP 27
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: LD_EXP 27
6761: PUSH
6762: LD_INT 2
6764: ARRAY
6765: PPUSH
6766: LD_EXP 27
6770: PUSH
6771: LD_INT 3
6773: ARRAY
6774: PPUSH
6775: LD_EXP 27
6779: PUSH
6780: LD_INT 4
6782: ARRAY
6783: PPUSH
6784: CALL_OW 145
// end ;
6788: GO 6682
6790: POP
6791: POP
// end ; end ; end ; end ;
6792: PPOPN 16
6794: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6795: LD_EXP 2
6799: PUSH
6800: LD_INT 11
6802: PPUSH
6803: CALL_OW 435
6807: PUSH
6808: LD_INT 10
6810: LESS
6811: AND
6812: IFFALSE 6875
6814: GO 6816
6816: DISABLE
// begin enable ;
6817: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 5
6823: PPUSH
6824: CALL_OW 12
6828: PPUSH
6829: LD_INT 11
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6839: LD_INT 1505
6841: PPUSH
6842: LD_INT 2100
6844: PPUSH
6845: CALL_OW 12
6849: PPUSH
6850: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 5
6859: PPUSH
6860: CALL_OW 12
6864: PPUSH
6865: LD_INT 11
6867: PPUSH
6868: LD_INT 1
6870: PPUSH
6871: CALL_OW 55
// end ;
6875: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6876: LD_EXP 4
6880: NOT
6881: IFFALSE 6996
6883: GO 6885
6885: DISABLE
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
// begin enable ;
6890: ENABLE
// i := Rand ( 0 , 100 ) ;
6891: LD_ADDR_VAR 0 1
6895: PUSH
6896: LD_INT 0
6898: PPUSH
6899: LD_INT 100
6901: PPUSH
6902: CALL_OW 12
6906: ST_TO_ADDR
// case your_side of 1 :
6907: LD_OWVAR 2
6911: PUSH
6912: LD_INT 1
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6931
6920: POP
// tmp := 10 ; 2 :
6921: LD_ADDR_VAR 0 2
6925: PUSH
6926: LD_INT 10
6928: ST_TO_ADDR
6929: GO 6970
6931: LD_INT 2
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6950
6939: POP
// tmp := 0 ; 7 :
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
6948: GO 6970
6950: LD_INT 7
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 6969
6958: POP
// tmp := 15 ; end ;
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_INT 15
6966: ST_TO_ADDR
6967: GO 6970
6969: POP
// if i < chance_to_bomb + tmp then
6970: LD_VAR 0 1
6974: PUSH
6975: LD_EXP 5
6979: PUSH
6980: LD_VAR 0 2
6984: PLUS
6985: LESS
6986: IFFALSE 6996
// ru_sib_bomb := true ;
6988: LD_ADDR_EXP 4
6992: PUSH
6993: LD_INT 1
6995: ST_TO_ADDR
// end ;
6996: PPOPN 2
6998: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6999: LD_INT 22
7001: PUSH
7002: LD_OWVAR 2
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 34
7013: PUSH
7014: LD_INT 8
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 69
7029: IFFALSE 7042
7031: GO 7033
7033: DISABLE
// begin ru_sib_bomb := true ;
7034: LD_ADDR_EXP 4
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// end ;
7042: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
7043: LD_INT 22
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 30
7055: PUSH
7056: LD_INT 34
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 69
7071: IFFALSE 7170
7073: GO 7075
7075: DISABLE
7076: LD_INT 0
7078: PPUSH
// begin enable ;
7079: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 1
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: CALL_OW 12
7105: ARRAY
7106: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
7107: LD_INT 22
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 34
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: PUSH
7136: LD_INT 1
7138: ARRAY
7139: PPUSH
7140: LD_EXP 31
7144: PUSH
7145: LD_VAR 0 1
7149: ARRAY
7150: PPUSH
7151: LD_EXP 31
7155: PUSH
7156: LD_VAR 0 1
7160: PUSH
7161: LD_INT 1
7163: PLUS
7164: ARRAY
7165: PPUSH
7166: CALL_OW 243
// end ;
7170: PPOPN 1
7172: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 69
7201: IFFALSE 7288
7203: GO 7205
7205: DISABLE
7206: LD_INT 0
7208: PPUSH
// begin enable ;
7209: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7210: LD_ADDR_VAR 0 1
7214: PUSH
7215: LD_INT 22
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 30
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 69
7243: PUSH
7244: LD_INT 1
7246: ARRAY
7247: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 274
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_INT 3000
7263: PPUSH
7264: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 274
7277: PPUSH
7278: LD_INT 2
7280: PPUSH
7281: LD_INT 300
7283: PPUSH
7284: CALL_OW 276
// end ; end_of_file
7288: PPOPN 1
7290: END
// export function RemoveLegion ; var i ; begin
7291: LD_INT 0
7293: PPUSH
7294: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7295: LD_ADDR_VAR 0 2
7299: PUSH
7300: LD_INT 22
7302: PUSH
7303: LD_INT 8
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7329
// RemoveUnit ( i ) ;
7318: LD_VAR 0 2
7322: PPUSH
7323: CALL_OW 64
7327: GO 7315
7329: POP
7330: POP
// end ;
7331: LD_VAR 0 1
7335: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7336: LD_INT 0
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7348: LD_ADDR_VAR 0 6
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 30
7365: PUSH
7366: LD_INT 1
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 69
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7386: LD_ADDR_VAR 0 8
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 8
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 30
7403: PUSH
7404: LD_INT 3
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 69
7419: PUSH
7420: LD_INT 1
7422: ARRAY
7423: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7424: LD_ADDR_VAR 0 9
7428: PUSH
7429: LD_INT 22
7431: PUSH
7432: LD_INT 8
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 30
7444: PUSH
7445: LD_INT 6
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 30
7454: PUSH
7455: LD_INT 8
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PPUSH
7471: CALL_OW 69
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7480: LD_ADDR_VAR 0 10
7484: PUSH
7485: LD_INT 22
7487: PUSH
7488: LD_INT 8
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 32
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PPUSH
7509: CALL_OW 69
7513: ST_TO_ADDR
// uc_side := 8 ;
7514: LD_ADDR_OWVAR 20
7518: PUSH
7519: LD_INT 8
7521: ST_TO_ADDR
// uc_nation := nation_arabian ;
7522: LD_ADDR_OWVAR 21
7526: PUSH
7527: LD_INT 2
7529: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7530: LD_ADDR_EXP 33
7534: PUSH
7535: LD_INT 5
7537: PUSH
7538: LD_INT 6
7540: PUSH
7541: LD_INT 7
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: LD_OWVAR 67
7553: ARRAY
7554: ST_TO_ADDR
// legion_blist := [ ] ;
7555: LD_ADDR_EXP 35
7559: PUSH
7560: EMPTY
7561: ST_TO_ADDR
// legion_vlist := [ ] ;
7562: LD_ADDR_EXP 36
7566: PUSH
7567: EMPTY
7568: ST_TO_ADDR
// legion_force := [ ] ;
7569: LD_ADDR_EXP 32
7573: PUSH
7574: EMPTY
7575: ST_TO_ADDR
// legion_enemy := - 1 ;
7576: LD_ADDR_EXP 37
7580: PUSH
7581: LD_INT 1
7583: NEG
7584: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7585: LD_VAR 0 6
7589: PPUSH
7590: CALL_OW 274
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: LD_INT 10000
7600: PPUSH
7601: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7605: LD_VAR 0 6
7609: PPUSH
7610: CALL_OW 274
7614: PPUSH
7615: LD_INT 3
7617: PPUSH
7618: LD_INT 1000
7620: PPUSH
7621: CALL_OW 277
// for i = 1 to l_towers do
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 10
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7690
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7643: LD_INT 0
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: LD_EXP 33
7653: PPUSH
7654: CALL_OW 380
// un := CreateHuman ;
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: CALL_OW 44
7667: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_VAR 0 10
7677: PUSH
7678: LD_VAR 0 3
7682: ARRAY
7683: PPUSH
7684: CALL_OW 52
// end ;
7688: GO 7640
7690: POP
7691: POP
// for i = 1 to 4 do
7692: LD_ADDR_VAR 0 3
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_INT 4
7704: PUSH
7705: FOR_TO
7706: IFFALSE 7799
// for p = 1 to 2 do
7708: LD_ADDR_VAR 0 7
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7795
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7724: LD_INT 0
7726: PPUSH
7727: LD_INT 8
7729: PPUSH
7730: LD_EXP 33
7734: PPUSH
7735: CALL_OW 380
// un := CreateHuman ;
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: CALL_OW 44
7748: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7749: LD_VAR 0 2
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 8
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 30
7766: PUSH
7767: LD_INT 5
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_VAR 0 7
7787: ARRAY
7788: PPUSH
7789: CALL_OW 52
// end ;
7793: GO 7721
7795: POP
7796: POP
7797: GO 7705
7799: POP
7800: POP
// for i = 1 to 4 do
7801: LD_ADDR_VAR 0 3
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 4
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7858
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: LD_EXP 33
7827: PPUSH
7828: CALL_OW 380
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7842: LD_VAR 0 2
7846: PPUSH
7847: LD_VAR 0 9
7851: PPUSH
7852: CALL_OW 52
// end ;
7856: GO 7814
7858: POP
7859: POP
// for i = 1 to 4 do
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: DOUBLE
7866: LD_INT 1
7868: DEC
7869: ST_TO_ADDR
7870: LD_INT 4
7872: PUSH
7873: FOR_TO
7874: IFFALSE 7917
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7876: LD_INT 0
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: LD_EXP 33
7886: PPUSH
7887: CALL_OW 380
// un := CreateHuman ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: CALL_OW 44
7900: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7901: LD_VAR 0 2
7905: PPUSH
7906: LD_VAR 0 8
7910: PPUSH
7911: CALL_OW 52
// end ;
7915: GO 7873
7917: POP
7918: POP
// for i = 1 to 3 do
7919: LD_ADDR_VAR 0 3
7923: PUSH
7924: DOUBLE
7925: LD_INT 1
7927: DEC
7928: ST_TO_ADDR
7929: LD_INT 3
7931: PUSH
7932: FOR_TO
7933: IFFALSE 7976
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7935: LD_INT 0
7937: PPUSH
7938: LD_INT 2
7940: PPUSH
7941: LD_EXP 33
7945: PPUSH
7946: CALL_OW 380
// un := CreateHuman ;
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: CALL_OW 44
7959: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7960: LD_VAR 0 2
7964: PPUSH
7965: LD_VAR 0 6
7969: PPUSH
7970: CALL_OW 52
// end ;
7974: GO 7932
7976: POP
7977: POP
// for i = 1 to 3 do
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: DOUBLE
7984: LD_INT 1
7986: DEC
7987: ST_TO_ADDR
7988: LD_INT 3
7990: PUSH
7991: FOR_TO
7992: IFFALSE 8102
// begin vc_chassis := ar_half_tracked ;
7994: LD_ADDR_OWVAR 37
7998: PUSH
7999: LD_INT 14
8001: ST_TO_ADDR
// vc_engine := engine_siberite ;
8002: LD_ADDR_OWVAR 39
8006: PUSH
8007: LD_INT 3
8009: ST_TO_ADDR
// vc_control := control_manual ;
8010: LD_ADDR_OWVAR 38
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8018: LD_ADDR_OWVAR 40
8022: PUSH
8023: LD_INT 31
8025: ST_TO_ADDR
// veh := CreateVehicle ;
8026: LD_ADDR_VAR 0 5
8030: PUSH
8031: CALL_OW 45
8035: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8036: LD_VAR 0 5
8040: PPUSH
8041: LD_INT 212
8043: PPUSH
8044: LD_INT 135
8046: PPUSH
8047: LD_INT 5
8049: PPUSH
8050: LD_INT 0
8052: PPUSH
8053: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8057: LD_INT 0
8059: PPUSH
8060: LD_INT 3
8062: PPUSH
8063: LD_EXP 33
8067: PUSH
8068: LD_INT 1
8070: PLUS
8071: PPUSH
8072: CALL_OW 380
// un := CreateHuman ;
8076: LD_ADDR_VAR 0 2
8080: PUSH
8081: CALL_OW 44
8085: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8086: LD_VAR 0 2
8090: PPUSH
8091: LD_VAR 0 5
8095: PPUSH
8096: CALL_OW 52
// end ;
8100: GO 7991
8102: POP
8103: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8104: LD_INT 198
8106: PPUSH
8107: LD_INT 94
8109: PPUSH
8110: LD_INT 8
8112: PPUSH
8113: LD_INT 10
8115: PPUSH
8116: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8120: LD_INT 167
8122: PPUSH
8123: LD_INT 130
8125: PPUSH
8126: LD_INT 8
8128: PPUSH
8129: LD_INT 10
8131: PPUSH
8132: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8136: LD_ADDR_VAR 0 4
8140: PUSH
8141: LD_INT 25
8143: PPUSH
8144: LD_INT 0
8146: PPUSH
8147: CALL_OW 517
8151: ST_TO_ADDR
// legion_mines := [ ] ;
8152: LD_ADDR_EXP 34
8156: PUSH
8157: EMPTY
8158: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8159: LD_ADDR_VAR 0 3
8163: PUSH
8164: DOUBLE
8165: LD_INT 1
8167: DEC
8168: ST_TO_ADDR
8169: LD_VAR 0 4
8173: PUSH
8174: LD_INT 1
8176: ARRAY
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8281
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 , 0 ) ;
8181: LD_VAR 0 4
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PUSH
8190: LD_VAR 0 3
8194: ARRAY
8195: PPUSH
8196: LD_VAR 0 4
8200: PUSH
8201: LD_INT 2
8203: ARRAY
8204: PUSH
8205: LD_VAR 0 3
8209: ARRAY
8210: PPUSH
8211: LD_INT 2
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8221: LD_ADDR_EXP 34
8225: PUSH
8226: LD_EXP 34
8230: PPUSH
8231: LD_EXP 34
8235: PUSH
8236: LD_INT 1
8238: PLUS
8239: PPUSH
8240: LD_VAR 0 4
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PUSH
8249: LD_VAR 0 3
8253: ARRAY
8254: PUSH
8255: LD_VAR 0 4
8259: PUSH
8260: LD_INT 2
8262: ARRAY
8263: PUSH
8264: LD_VAR 0 3
8268: ARRAY
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 1
8278: ST_TO_ADDR
// end ;
8279: GO 8178
8281: POP
8282: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8283: LD_ADDR_EXP 36
8287: PUSH
8288: LD_INT 13
8290: PUSH
8291: LD_INT 3
8293: PUSH
8294: LD_INT 2
8296: PUSH
8297: LD_INT 32
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// end ;
8306: LD_VAR 0 1
8310: RET
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8311: LD_OWVAR 1
8315: PUSH
8316: LD_INT 52500
8318: PUSH
8319: LD_INT 46200
8321: PUSH
8322: LD_INT 42000
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: PUSH
8330: LD_OWVAR 67
8334: ARRAY
8335: GREATEREQUAL
8336: IFFALSE 8514
8338: GO 8340
8340: DISABLE
8341: LD_INT 0
8343: PPUSH
8344: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8345: LD_ADDR_VAR 0 1
8349: PUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 469
8357: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: PUSH
8367: LD_INT 112
8369: EQUAL
8370: PUSH
8371: LD_VAR 0 1
8375: PUSH
8376: LD_INT 2
8378: ARRAY
8379: PUSH
8380: LD_INT 67
8382: EQUAL
8383: AND
8384: IFFALSE 8514
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8386: LD_ADDR_VAR 0 2
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 8
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 25
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 69
8419: ST_TO_ADDR
// if not un then
8420: LD_VAR 0 2
8424: NOT
8425: IFFALSE 8429
// exit ;
8427: GO 8514
// un := un [ 1 ] ;
8429: LD_ADDR_VAR 0 2
8433: PUSH
8434: LD_VAR 0 2
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: ST_TO_ADDR
// if IsInUnit ( un ) then
8443: LD_VAR 0 2
8447: PPUSH
8448: CALL_OW 310
8452: IFFALSE 8463
// ComExitBuilding ( un ) ;
8454: LD_VAR 0 2
8458: PPUSH
8459: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8463: LD_VAR 0 2
8467: PPUSH
8468: LD_VAR 0 1
8472: PUSH
8473: LD_INT 1
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 1
8481: PUSH
8482: LD_INT 2
8484: ARRAY
8485: PPUSH
8486: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8490: LD_VAR 0 2
8494: PPUSH
8495: LD_INT 207
8497: PPUSH
8498: LD_INT 123
8500: PPUSH
8501: CALL_OW 171
// AddComUnload ( un ) ;
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 219
// end ; end ;
8514: PPOPN 2
8516: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8517: LD_INT 22
8519: PUSH
8520: LD_INT 8
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PPUSH
8527: CALL_OW 69
8531: PUSH
8532: LD_INT 0
8534: GREATER
8535: IFFALSE 10415
8537: GO 8539
8539: DISABLE
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
8544: PPUSH
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
8557: PPUSH
8558: PPUSH
// begin enable ;
8559: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8560: LD_ADDR_VAR 0 8
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_INT 8
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 30
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8598: LD_ADDR_VAR 0 9
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 8
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL_OW 69
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8636: LD_ADDR_VAR 0 10
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 8
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 2
8653: PUSH
8654: LD_INT 30
8656: PUSH
8657: LD_INT 6
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 30
8666: PUSH
8667: LD_INT 8
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: CALL_OW 69
8687: PUSH
8688: LD_INT 1
8690: ARRAY
8691: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8692: LD_ADDR_VAR 0 11
8696: PUSH
8697: LD_INT 22
8699: PUSH
8700: LD_INT 8
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 32
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PPUSH
8721: CALL_OW 69
8725: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8726: LD_ADDR_VAR 0 16
8730: PUSH
8731: LD_INT 22
8733: PUSH
8734: LD_INT 8
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 25
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PPUSH
8755: CALL_OW 69
8759: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8760: LD_ADDR_VAR 0 15
8764: PUSH
8765: LD_INT 22
8767: PUSH
8768: LD_INT 8
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 25
8777: PUSH
8778: LD_INT 1
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8794: LD_ADDR_VAR 0 14
8798: PUSH
8799: LD_INT 22
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 25
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 69
8827: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8828: LD_ADDR_VAR 0 13
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 8
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 4
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PPUSH
8857: CALL_OW 69
8861: ST_TO_ADDR
// if l_eng then
8862: LD_VAR 0 16
8866: IFFALSE 9281
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8868: LD_ADDR_VAR 0 5
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 8
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 3
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 69
8901: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8902: LD_VAR 0 5
8906: PPUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 24
8912: PUSH
8913: LD_INT 1000
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 72
8928: PUSH
8929: LD_INT 0
8931: GREATER
8932: IFFALSE 9066
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8934: LD_ADDR_VAR 0 3
8938: PUSH
8939: LD_VAR 0 5
8943: PPUSH
8944: LD_INT 3
8946: PUSH
8947: LD_INT 24
8949: PUSH
8950: LD_INT 1000
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PPUSH
8961: CALL_OW 72
8965: ST_TO_ADDR
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9062
// if IsInUnit ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: IFFALSE 9018
// ComExitBuilding ( l_eng [ i ] ) else
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 122
9016: GO 9060
// if not HasTask ( l_eng [ i ] ) then
9018: LD_VAR 0 16
9022: PUSH
9023: LD_VAR 0 2
9027: ARRAY
9028: PPUSH
9029: CALL_OW 314
9033: NOT
9034: IFFALSE 9060
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9036: LD_VAR 0 16
9040: PUSH
9041: LD_VAR 0 2
9045: ARRAY
9046: PPUSH
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: CALL_OW 130
9060: GO 8981
9062: POP
9063: POP
// end else
9064: GO 9281
// begin if legion_blist > 0 then
9066: LD_EXP 35
9070: PUSH
9071: LD_INT 0
9073: GREATER
9074: IFFALSE 9203
// begin for i = 1 to l_eng do
9076: LD_ADDR_VAR 0 2
9080: PUSH
9081: DOUBLE
9082: LD_INT 1
9084: DEC
9085: ST_TO_ADDR
9086: LD_VAR 0 16
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9199
// if IsInUnit ( l_eng [ i ] ) then
9094: LD_VAR 0 16
9098: PUSH
9099: LD_VAR 0 2
9103: ARRAY
9104: PPUSH
9105: CALL_OW 310
9109: IFFALSE 9128
// ComExitBuilding ( l_eng [ i ] ) else
9111: LD_VAR 0 16
9115: PUSH
9116: LD_VAR 0 2
9120: ARRAY
9121: PPUSH
9122: CALL_OW 122
9126: GO 9197
// if not HasTask ( l_eng [ i ] ) then
9128: LD_VAR 0 16
9132: PUSH
9133: LD_VAR 0 2
9137: ARRAY
9138: PPUSH
9139: CALL_OW 314
9143: NOT
9144: IFFALSE 9197
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9146: LD_VAR 0 16
9150: PUSH
9151: LD_VAR 0 2
9155: ARRAY
9156: PPUSH
9157: LD_EXP 35
9161: PUSH
9162: LD_INT 1
9164: ARRAY
9165: PPUSH
9166: LD_EXP 35
9170: PUSH
9171: LD_INT 2
9173: ARRAY
9174: PPUSH
9175: LD_EXP 35
9179: PUSH
9180: LD_INT 3
9182: ARRAY
9183: PPUSH
9184: LD_EXP 35
9188: PUSH
9189: LD_INT 4
9191: ARRAY
9192: PPUSH
9193: CALL_OW 145
9197: GO 9091
9199: POP
9200: POP
// end else
9201: GO 9281
// for i = 1 to l_eng do
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: DOUBLE
9209: LD_INT 1
9211: DEC
9212: ST_TO_ADDR
9213: LD_VAR 0 16
9217: PUSH
9218: FOR_TO
9219: IFFALSE 9279
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9221: LD_VAR 0 16
9225: PUSH
9226: LD_VAR 0 2
9230: ARRAY
9231: PPUSH
9232: CALL_OW 310
9236: NOT
9237: PUSH
9238: LD_VAR 0 16
9242: PUSH
9243: LD_VAR 0 2
9247: ARRAY
9248: PPUSH
9249: CALL_OW 314
9253: NOT
9254: AND
9255: IFFALSE 9277
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9257: LD_VAR 0 16
9261: PUSH
9262: LD_VAR 0 2
9266: ARRAY
9267: PPUSH
9268: LD_VAR 0 8
9272: PPUSH
9273: CALL_OW 120
9277: GO 9218
9279: POP
9280: POP
// end ; end ; if l_factory then
9281: LD_VAR 0 9
9285: IFFALSE 9685
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9287: LD_INT 22
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 33
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 61
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 69
9329: PUSH
9330: LD_INT 0
9332: GREATER
9333: PUSH
9334: LD_INT 22
9336: PUSH
9337: LD_INT 8
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 34
9346: PUSH
9347: LD_INT 31
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 69
9362: PUSH
9363: LD_INT 0
9365: GREATER
9366: AND
9367: IFFALSE 9487
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9369: LD_INT 22
9371: PUSH
9372: LD_INT 8
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 33
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: LD_INT 61
9394: PUSH
9395: EMPTY
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 8
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 34
9428: PUSH
9429: LD_INT 31
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 69
9444: PUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_INT 22
9450: PUSH
9451: LD_INT 8
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 34
9460: PUSH
9461: LD_INT 31
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PPUSH
9477: CALL_OW 12
9481: ARRAY
9482: PPUSH
9483: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9487: LD_EXP 36
9491: PUSH
9492: LD_INT 0
9494: GREATER
9495: PUSH
9496: LD_VAR 0 9
9500: PPUSH
9501: CALL_OW 461
9505: PUSH
9506: LD_INT 2
9508: EQUAL
9509: AND
9510: IFFALSE 9595
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9512: LD_VAR 0 9
9516: PPUSH
9517: LD_EXP 36
9521: PUSH
9522: LD_INT 1
9524: ARRAY
9525: PPUSH
9526: LD_EXP 36
9530: PUSH
9531: LD_INT 2
9533: ARRAY
9534: PPUSH
9535: LD_EXP 36
9539: PUSH
9540: LD_INT 3
9542: ARRAY
9543: PPUSH
9544: LD_EXP 36
9548: PUSH
9549: LD_INT 4
9551: ARRAY
9552: PPUSH
9553: CALL_OW 125
// for i = 1 to 4 do
9557: LD_ADDR_VAR 0 2
9561: PUSH
9562: DOUBLE
9563: LD_INT 1
9565: DEC
9566: ST_TO_ADDR
9567: LD_INT 4
9569: PUSH
9570: FOR_TO
9571: IFFALSE 9593
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9573: LD_ADDR_EXP 36
9577: PUSH
9578: LD_EXP 36
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 3
9590: ST_TO_ADDR
9591: GO 9570
9593: POP
9594: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9595: LD_VAR 0 11
9599: PPUSH
9600: LD_INT 35
9602: PUSH
9603: LD_INT 0
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PPUSH
9610: CALL_OW 72
9614: PUSH
9615: LD_INT 0
9617: GREATER
9618: PUSH
9619: LD_VAR 0 9
9623: PPUSH
9624: CALL_OW 461
9628: PUSH
9629: LD_INT 2
9631: EQUAL
9632: AND
9633: IFFALSE 9685
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9635: LD_VAR 0 11
9639: PPUSH
9640: LD_INT 35
9642: PUSH
9643: LD_INT 0
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 72
9654: PUSH
9655: LD_INT 1
9657: ARRAY
9658: PPUSH
9659: LD_INT 28
9661: PUSH
9662: LD_INT 27
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 1
9671: PPUSH
9672: LD_INT 2
9674: PPUSH
9675: CALL_OW 12
9679: ARRAY
9680: PPUSH
9681: CALL_OW 148
// end ; if legion_enemy > 0 then
9685: LD_EXP 37
9689: PUSH
9690: LD_INT 0
9692: GREATER
9693: IFFALSE 10273
// begin if tick mod 11 11$00 = 0 then
9695: LD_OWVAR 1
9699: PUSH
9700: LD_INT 23100
9702: MOD
9703: PUSH
9704: LD_INT 0
9706: EQUAL
9707: IFFALSE 9957
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9709: LD_ADDR_EXP 36
9713: PUSH
9714: LD_EXP 36
9718: PUSH
9719: LD_INT 13
9721: PUSH
9722: LD_INT 1
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: ADD
9733: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9734: LD_ADDR_EXP 36
9738: PUSH
9739: LD_EXP 36
9743: PUSH
9744: LD_INT 28
9746: PUSH
9747: LD_INT 27
9749: PUSH
9750: LD_INT 29
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 3
9763: PPUSH
9764: CALL_OW 12
9768: ARRAY
9769: ADD
9770: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9771: LD_ADDR_EXP 36
9775: PUSH
9776: LD_EXP 36
9780: PUSH
9781: LD_INT 13
9783: PUSH
9784: LD_INT 1
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: ADD
9795: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9796: LD_ADDR_EXP 36
9800: PUSH
9801: LD_EXP 36
9805: PUSH
9806: LD_INT 28
9808: PUSH
9809: LD_INT 27
9811: PUSH
9812: LD_INT 29
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 1
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: CALL_OW 12
9830: ARRAY
9831: ADD
9832: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9833: LD_ADDR_EXP 36
9837: PUSH
9838: LD_EXP 36
9842: PUSH
9843: LD_INT 13
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: ADD
9857: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9858: LD_ADDR_EXP 36
9862: PUSH
9863: LD_EXP 36
9867: PUSH
9868: LD_INT 28
9870: PUSH
9871: LD_INT 27
9873: PUSH
9874: LD_INT 29
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 1
9884: PPUSH
9885: LD_INT 3
9887: PPUSH
9888: CALL_OW 12
9892: ARRAY
9893: ADD
9894: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9895: LD_ADDR_EXP 36
9899: PUSH
9900: LD_EXP 36
9904: PUSH
9905: LD_INT 13
9907: PUSH
9908: LD_INT 1
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: ADD
9919: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9920: LD_ADDR_EXP 36
9924: PUSH
9925: LD_EXP 36
9929: PUSH
9930: LD_INT 28
9932: PUSH
9933: LD_INT 27
9935: PUSH
9936: LD_INT 29
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 1
9946: PPUSH
9947: LD_INT 3
9949: PPUSH
9950: CALL_OW 12
9954: ARRAY
9955: ADD
9956: ST_TO_ADDR
// end ; if legion_force >= 7 then
9957: LD_EXP 32
9961: PUSH
9962: LD_INT 7
9964: GREATEREQUAL
9965: IFFALSE 10148
// begin for i = 1 to legion_force do
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: DOUBLE
9973: LD_INT 1
9975: DEC
9976: ST_TO_ADDR
9977: LD_EXP 32
9981: PUSH
9982: FOR_TO
9983: IFFALSE 10146
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9985: LD_EXP 32
9989: PUSH
9990: LD_VAR 0 2
9994: ARRAY
9995: PPUSH
9996: CALL_OW 314
10000: NOT
10001: PUSH
10002: LD_EXP 32
10006: PUSH
10007: LD_VAR 0 2
10011: ARRAY
10012: PPUSH
10013: CALL_OW 110
10017: PUSH
10018: LD_INT 11
10020: NONEQUAL
10021: AND
10022: IFFALSE 10144
// begin case legion_enemy of 1 :
10024: LD_EXP 37
10028: PUSH
10029: LD_INT 1
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10061
10037: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
10038: LD_EXP 32
10042: PUSH
10043: LD_VAR 0 2
10047: ARRAY
10048: PPUSH
10049: LD_INT 142
10051: PPUSH
10052: LD_INT 144
10054: PPUSH
10055: CALL_OW 111
10059: GO 10126
10061: LD_INT 2
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10093
10069: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
10070: LD_EXP 32
10074: PUSH
10075: LD_VAR 0 2
10079: ARRAY
10080: PPUSH
10081: LD_INT 101
10083: PPUSH
10084: LD_INT 34
10086: PPUSH
10087: CALL_OW 111
10091: GO 10126
10093: LD_INT 7
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10125
10101: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
10102: LD_EXP 32
10106: PUSH
10107: LD_VAR 0 2
10111: ARRAY
10112: PPUSH
10113: LD_INT 173
10115: PPUSH
10116: LD_INT 127
10118: PPUSH
10119: CALL_OW 111
10123: GO 10126
10125: POP
// SetTag ( legion_force [ i ] , 11 ) ;
10126: LD_EXP 32
10130: PUSH
10131: LD_VAR 0 2
10135: ARRAY
10136: PPUSH
10137: LD_INT 11
10139: PPUSH
10140: CALL_OW 109
// end ; end ;
10144: GO 9982
10146: POP
10147: POP
// end ; if legion_force then
10148: LD_EXP 32
10152: IFFALSE 10273
// begin tmp := legion_force ;
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: LD_EXP 32
10163: ST_TO_ADDR
// for i = 1 to tmp do
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: DOUBLE
10170: LD_INT 1
10172: DEC
10173: ST_TO_ADDR
10174: LD_VAR 0 3
10178: PUSH
10179: FOR_TO
10180: IFFALSE 10271
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
10182: LD_VAR 0 3
10186: PUSH
10187: LD_VAR 0 2
10191: ARRAY
10192: PPUSH
10193: CALL_OW 314
10197: NOT
10198: PUSH
10199: LD_EXP 32
10203: PUSH
10204: LD_VAR 0 2
10208: ARRAY
10209: PPUSH
10210: CALL_OW 110
10214: PUSH
10215: LD_INT 11
10217: EQUAL
10218: AND
10219: IFFALSE 10269
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
10221: LD_VAR 0 3
10225: PUSH
10226: LD_VAR 0 2
10230: ARRAY
10231: PPUSH
10232: LD_INT 22
10234: PUSH
10235: LD_EXP 37
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: CALL_OW 69
10248: PPUSH
10249: LD_VAR 0 3
10253: PUSH
10254: LD_VAR 0 2
10258: ARRAY
10259: PPUSH
10260: CALL_OW 74
10264: PPUSH
10265: CALL_OW 115
10269: GO 10179
10271: POP
10272: POP
// end ; end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10273: LD_INT 22
10275: PUSH
10276: LD_INT 8
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 34
10285: PUSH
10286: LD_INT 32
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 69
10301: IFFALSE 10415
// begin if l_cargo = false then
10303: LD_VAR 0 17
10307: PUSH
10308: LD_INT 0
10310: EQUAL
10311: IFFALSE 10347
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10313: LD_ADDR_VAR 0 17
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_INT 8
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 34
10330: PUSH
10331: LD_INT 32
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 69
10346: ST_TO_ADDR
// if l_cargo then
10347: LD_VAR 0 17
10351: IFFALSE 10415
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10353: LD_ADDR_VAR 0 7
10357: PUSH
10358: LD_INT 14
10360: PPUSH
10361: CALL_OW 435
10365: ST_TO_ADDR
// if cr > 0 then
10366: LD_VAR 0 7
10370: PUSH
10371: LD_INT 0
10373: GREATER
10374: IFFALSE 10415
// if not HasTask ( l_cargo ) then
10376: LD_VAR 0 17
10380: PPUSH
10381: CALL_OW 314
10385: NOT
10386: IFFALSE 10415
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10388: LD_VAR 0 17
10392: PPUSH
10393: LD_VAR 0 7
10397: PUSH
10398: LD_INT 1
10400: ARRAY
10401: PPUSH
10402: LD_VAR 0 7
10406: PUSH
10407: LD_INT 2
10409: ARRAY
10410: PPUSH
10411: CALL_OW 117
// end ; end ; end ;
10415: PPOPN 17
10417: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10418: LD_OWVAR 67
10422: PUSH
10423: LD_INT 1
10425: GREATER
10426: IFFALSE 10631
10428: GO 10430
10430: DISABLE
10431: LD_INT 0
10433: PPUSH
10434: PPUSH
10435: PPUSH
10436: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10437: LD_INT 35
10439: PPUSH
10440: LD_INT 12635
10442: PPUSH
10443: CALL_OW 12
10447: PPUSH
10448: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10452: LD_ADDR_VAR 0 2
10456: PUSH
10457: LD_INT 22
10459: PUSH
10460: LD_INT 8
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 4
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ST_TO_ADDR
// p := 1 ;
10486: LD_ADDR_VAR 0 4
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10494: LD_ADDR_VAR 0 3
10498: PUSH
10499: LD_INT 116
10501: PUSH
10502: LD_INT 139
10504: PUSH
10505: LD_INT 69
10507: PUSH
10508: LD_INT 13
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: ST_TO_ADDR
// for i = 1 to 2 do
10517: LD_ADDR_VAR 0 1
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_INT 2
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10629
// begin if IsInUnit ( sci [ i ] ) then
10533: LD_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: ARRAY
10543: PPUSH
10544: CALL_OW 310
10548: IFFALSE 10565
// ComExitBuilding ( sci [ i ] ) ;
10550: LD_VAR 0 2
10554: PUSH
10555: LD_VAR 0 1
10559: ARRAY
10560: PPUSH
10561: CALL_OW 122
// Wait ( 0 0$03 ) ;
10565: LD_INT 105
10567: PPUSH
10568: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10572: LD_VAR 0 2
10576: PUSH
10577: LD_VAR 0 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 3
10587: PUSH
10588: LD_VAR 0 4
10592: ARRAY
10593: PPUSH
10594: LD_VAR 0 3
10598: PUSH
10599: LD_VAR 0 4
10603: PUSH
10604: LD_INT 1
10606: PLUS
10607: ARRAY
10608: PPUSH
10609: CALL_OW 158
// p := p + 2 ;
10613: LD_ADDR_VAR 0 4
10617: PUSH
10618: LD_VAR 0 4
10622: PUSH
10623: LD_INT 2
10625: PLUS
10626: ST_TO_ADDR
// end ;
10627: GO 10530
10629: POP
10630: POP
// end ;
10631: PPOPN 4
10633: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10634: LD_INT 14
10636: PPUSH
10637: CALL_OW 435
10641: PUSH
10642: LD_INT 20
10644: LESS
10645: IFFALSE 10672
10647: GO 10649
10649: DISABLE
// begin enable ;
10650: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10651: LD_INT 1
10653: PPUSH
10654: LD_INT 5
10656: PPUSH
10657: CALL_OW 12
10661: PPUSH
10662: LD_INT 14
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 55
// end ; end_of_file
10672: END
// export function Action ; var un , gamemode , speaker ; begin
10673: LD_INT 0
10675: PPUSH
10676: PPUSH
10677: PPUSH
10678: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10679: LD_ADDR_OWVAR 67
10683: PUSH
10684: LD_INT 0
10686: PPUSH
10687: CALL_OW 426
10691: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10692: LD_ADDR_VAR 0 3
10696: PUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 426
10704: ST_TO_ADDR
// if gamemode = 1 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_INT 1
10712: EQUAL
10713: IFFALSE 10737
// begin your_side := 1 ;
10715: LD_ADDR_OWVAR 2
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// legion_enemy := 1 ;
10723: LD_ADDR_EXP 37
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// PrepareAmerican ;
10731: CALL 229 0 0
// end else
10735: GO 10789
// if gamemode = 2 then
10737: LD_VAR 0 3
10741: PUSH
10742: LD_INT 2
10744: EQUAL
10745: IFFALSE 10769
// begin your_side := 2 ;
10747: LD_ADDR_OWVAR 2
10751: PUSH
10752: LD_INT 2
10754: ST_TO_ADDR
// legion_enemy := 2 ;
10755: LD_ADDR_EXP 37
10759: PUSH
10760: LD_INT 2
10762: ST_TO_ADDR
// PrepareArabian ;
10763: CALL 18102 0 0
// end else
10767: GO 10789
// begin your_side := 7 ;
10769: LD_ADDR_OWVAR 2
10773: PUSH
10774: LD_INT 7
10776: ST_TO_ADDR
// legion_enemy := 7 ;
10777: LD_ADDR_EXP 37
10781: PUSH
10782: LD_INT 7
10784: ST_TO_ADDR
// PrepareAlliance ;
10785: CALL 15513 0 0
// end ; if your_side = 1 then
10789: LD_OWVAR 2
10793: PUSH
10794: LD_INT 1
10796: EQUAL
10797: IFFALSE 11275
// begin case Query ( QVul4 ) of 1 :
10799: LD_STRING QVul4
10801: PPUSH
10802: CALL_OW 97
10806: PUSH
10807: LD_INT 1
10809: DOUBLE
10810: EQUAL
10811: IFTRUE 10815
10813: GO 10818
10815: POP
// ; end ;
10816: GO 10819
10818: POP
// InGameOn ;
10819: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10823: LD_INT 8
10825: PPUSH
10826: LD_INT 5
10828: PPUSH
10829: CALL_OW 86
// uc_side := 4 ;
10833: LD_ADDR_OWVAR 20
10837: PUSH
10838: LD_INT 4
10840: ST_TO_ADDR
// uc_nation := 1 ;
10841: LD_ADDR_OWVAR 21
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// hc_importance := 0 ;
10849: LD_ADDR_OWVAR 32
10853: PUSH
10854: LD_INT 0
10856: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10857: LD_INT 1
10859: PPUSH
10860: LD_INT 3
10862: PPUSH
10863: LD_EXP 22
10867: PPUSH
10868: CALL_OW 380
// un := CreateHuman ;
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: CALL_OW 44
10881: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10882: LD_VAR 0 2
10886: PPUSH
10887: LD_INT 12
10889: PPUSH
10890: LD_INT 9
10892: PPUSH
10893: LD_INT 0
10895: PPUSH
10896: CALL_OW 48
// hc_name := Stuart Carey ;
10900: LD_ADDR_OWVAR 26
10904: PUSH
10905: LD_STRING Stuart Carey
10907: ST_TO_ADDR
// hc_class := 1 ;
10908: LD_ADDR_OWVAR 28
10912: PUSH
10913: LD_INT 1
10915: ST_TO_ADDR
// hc_gallery := vulcano ;
10916: LD_ADDR_OWVAR 33
10920: PUSH
10921: LD_STRING vulcano
10923: ST_TO_ADDR
// hc_face_number := 1 ;
10924: LD_ADDR_OWVAR 34
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// us_guy := CreateHuman ;
10932: LD_ADDR_EXP 23
10936: PUSH
10937: CALL_OW 44
10941: ST_TO_ADDR
// InitHc ;
10942: CALL_OW 19
// if rand ( 0 , 1 ) then
10946: LD_INT 0
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 12
10956: IFFALSE 10973
// PrepareHuman ( sex_male , 3 , 6 ) else
10958: LD_INT 1
10960: PPUSH
10961: LD_INT 3
10963: PPUSH
10964: LD_INT 6
10966: PPUSH
10967: CALL_OW 380
10971: GO 10986
// PrepareHuman ( sex_female , 4 , 8 ) ;
10973: LD_INT 2
10975: PPUSH
10976: LD_INT 4
10978: PPUSH
10979: LD_INT 8
10981: PPUSH
10982: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_EXP 20
10995: PPUSH
10996: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11000: LD_EXP 20
11004: PPUSH
11005: LD_VAR 0 2
11009: PPUSH
11010: CALL_OW 119
// if GetSex ( un ) = sex_male then
11014: LD_VAR 0 2
11018: PPUSH
11019: CALL_OW 258
11023: PUSH
11024: LD_INT 1
11026: EQUAL
11027: IFFALSE 11110
// begin Say ( un , VD-un1 ) ;
11029: LD_VAR 0 2
11033: PPUSH
11034: LD_STRING VD-un1
11036: PPUSH
11037: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11041: LD_EXP 20
11045: PPUSH
11046: LD_STRING VDc-1
11048: PPUSH
11049: CALL_OW 88
// Say ( un , VD-un2 ) ;
11053: LD_VAR 0 2
11057: PPUSH
11058: LD_STRING VD-un2
11060: PPUSH
11061: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11065: LD_EXP 20
11069: PPUSH
11070: LD_STRING VDc-2
11072: PPUSH
11073: CALL_OW 88
// Say ( un , VD-un3 ) ;
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_STRING VD-un3
11084: PPUSH
11085: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11089: LD_INT 7
11091: PPUSH
11092: CALL_OW 67
// Say ( un , VD-un4 ) ;
11096: LD_VAR 0 2
11100: PPUSH
11101: LD_STRING VD-un4
11103: PPUSH
11104: CALL_OW 88
// end else
11108: GO 11189
// begin Say ( un , VD-unf1 ) ;
11110: LD_VAR 0 2
11114: PPUSH
11115: LD_STRING VD-unf1
11117: PPUSH
11118: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11122: LD_EXP 20
11126: PPUSH
11127: LD_STRING VDc-1
11129: PPUSH
11130: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_STRING VD-unf2
11141: PPUSH
11142: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11146: LD_EXP 20
11150: PPUSH
11151: LD_STRING VDc-2
11153: PPUSH
11154: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11158: LD_VAR 0 2
11162: PPUSH
11163: LD_STRING VD-unf3
11165: PPUSH
11166: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11170: LD_INT 7
11172: PPUSH
11173: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11177: LD_VAR 0 2
11181: PPUSH
11182: LD_STRING VD-unf4
11184: PPUSH
11185: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 2
11196: PPUSH
11197: LD_INT 2
11199: PPUSH
11200: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11204: LD_EXP 20
11208: PPUSH
11209: LD_STRING VDc-3
11211: PPUSH
11212: CALL_OW 88
// InGameOff ;
11216: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11220: LD_STRING CVulc1
11222: PPUSH
11223: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11227: LD_INT 35
11229: PPUSH
11230: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 250
11243: PUSH
11244: LD_INT 2
11246: EQUAL
11247: PUSH
11248: LD_VAR 0 2
11252: PPUSH
11253: CALL_OW 251
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: AND
11262: IFFALSE 11227
// RemoveUnit ( un ) ;
11264: LD_VAR 0 2
11268: PPUSH
11269: CALL_OW 64
// end else
11273: GO 11652
// if your_side = 2 then
11275: LD_OWVAR 2
11279: PUSH
11280: LD_INT 2
11282: EQUAL
11283: IFFALSE 11499
// begin CenterNowOnUnits ( player_commander ) ;
11285: LD_EXP 11
11289: PPUSH
11290: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11294: LD_ADDR_VAR 0 4
11298: PUSH
11299: LD_INT 22
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 21
11311: PUSH
11312: LD_INT 1
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 69
11327: PUSH
11328: LD_EXP 52
11332: DIFF
11333: ST_TO_ADDR
// if speaker then
11334: LD_VAR 0 4
11338: IFFALSE 11490
// begin InGameOn ;
11340: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11344: LD_EXP 52
11348: PPUSH
11349: LD_STRING VSd-1
11351: PPUSH
11352: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11356: LD_VAR 0 4
11360: PUSH
11361: LD_INT 1
11363: ARRAY
11364: PPUSH
11365: CALL_OW 258
11369: PUSH
11370: LD_INT 1
11372: EQUAL
11373: IFFALSE 11393
// Say ( speaker [ 1 ] , VAd-1 ) else
11375: LD_VAR 0 4
11379: PUSH
11380: LD_INT 1
11382: ARRAY
11383: PPUSH
11384: LD_STRING VAd-1
11386: PPUSH
11387: CALL_OW 88
11391: GO 11409
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11393: LD_VAR 0 4
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: LD_STRING VAfd-1
11404: PPUSH
11405: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11409: LD_EXP 52
11413: PPUSH
11414: LD_STRING VSd-2
11416: PPUSH
11417: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11421: LD_VAR 0 4
11425: PUSH
11426: LD_INT 1
11428: ARRAY
11429: PPUSH
11430: CALL_OW 258
11434: PUSH
11435: LD_INT 1
11437: EQUAL
11438: IFFALSE 11458
// Say ( speaker [ 1 ] , VAd-2 ) else
11440: LD_VAR 0 4
11444: PUSH
11445: LD_INT 1
11447: ARRAY
11448: PPUSH
11449: LD_STRING VAd-2
11451: PPUSH
11452: CALL_OW 88
11456: GO 11474
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11458: LD_VAR 0 4
11462: PUSH
11463: LD_INT 1
11465: ARRAY
11466: PPUSH
11467: LD_STRING VAfd-2
11469: PPUSH
11470: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11474: LD_EXP 52
11478: PPUSH
11479: LD_STRING VSd-3
11481: PPUSH
11482: CALL_OW 88
// InGameOff ;
11486: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11490: LD_STRING CVulc5
11492: PPUSH
11493: CALL_OW 337
// end else
11497: GO 11652
// if your_side = 7 then
11499: LD_OWVAR 2
11503: PUSH
11504: LD_INT 7
11506: EQUAL
11507: IFFALSE 11652
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11509: LD_ADDR_VAR 0 4
11513: PUSH
11514: LD_INT 22
11516: PUSH
11517: LD_INT 7
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 21
11526: PUSH
11527: LD_INT 1
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: PUSH
11543: LD_EXP 38
11547: DIFF
11548: ST_TO_ADDR
// if speaker then
11549: LD_VAR 0 4
11553: IFFALSE 11645
// begin CenterNowOnUnits ( al_commander ) ;
11555: LD_EXP 38
11559: PPUSH
11560: CALL_OW 87
// InGameOn ;
11564: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11568: LD_EXP 38
11572: PPUSH
11573: LD_STRING VPd-1
11575: PPUSH
11576: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11580: LD_VAR 0 4
11584: PUSH
11585: LD_INT 1
11587: ARRAY
11588: PPUSH
11589: CALL_OW 258
11593: IFFALSE 11613
// Say ( speaker [ 1 ] , VPpd-1 ) else
11595: LD_VAR 0 4
11599: PUSH
11600: LD_INT 1
11602: ARRAY
11603: PPUSH
11604: LD_STRING VPpd-1
11606: PPUSH
11607: CALL_OW 88
11611: GO 11629
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11613: LD_VAR 0 4
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: PPUSH
11622: LD_STRING VPpdf-1
11624: PPUSH
11625: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11629: LD_EXP 38
11633: PPUSH
11634: LD_STRING VPd-2
11636: PPUSH
11637: CALL_OW 88
// InGameOff ;
11641: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11645: LD_STRING CVulc7
11647: PPUSH
11648: CALL_OW 337
// end ; SaveForQuickRestart ;
11652: CALL_OW 22
// end ;
11656: LD_VAR 0 1
11660: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11661: LD_INT 22
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 30
11673: PUSH
11674: LD_INT 3
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 69
11689: IFFALSE 11733
11691: GO 11693
11693: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11694: LD_STRING CVulc6
11696: PPUSH
11697: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11701: LD_INT 52500
11703: PUSH
11704: LD_INT 47250
11706: PUSH
11707: LD_INT 42000
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: LD_OWVAR 67
11719: ARRAY
11720: PPUSH
11721: CALL_OW 67
// ru_can_attack := true ;
11725: LD_ADDR_EXP 3
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// end ;
11733: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11734: LD_INT 50
11736: PPUSH
11737: CALL_OW 255
11741: PUSH
11742: LD_INT 1
11744: EQUAL
11745: PUSH
11746: LD_INT 22
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 2
11758: PUSH
11759: LD_INT 30
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: OR
11793: IFFALSE 12027
11795: GO 11797
11797: DISABLE
11798: LD_INT 0
11800: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11801: LD_STRING CVulc2
11803: PPUSH
11804: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11808: LD_ADDR_VAR 0 1
11812: PUSH
11813: LD_INT 22
11815: PUSH
11816: LD_INT 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 25
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: PUSH
11842: LD_EXP 20
11846: DIFF
11847: ST_TO_ADDR
// DialogueOn ;
11848: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11852: LD_INT 10
11854: PPUSH
11855: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 1
11866: ARRAY
11867: PPUSH
11868: CALL_OW 258
11872: PUSH
11873: LD_INT 1
11875: EQUAL
11876: IFFALSE 11896
// Say ( speaker [ 1 ] , VDb-1 ) else
11878: LD_VAR 0 1
11882: PUSH
11883: LD_INT 1
11885: ARRAY
11886: PPUSH
11887: LD_STRING VDb-1
11889: PPUSH
11890: CALL_OW 88
11894: GO 11912
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11896: LD_VAR 0 1
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: PPUSH
11905: LD_STRING VDbf-1
11907: PPUSH
11908: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11912: LD_INT 10
11914: PPUSH
11915: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11919: LD_VAR 0 1
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: CALL_OW 258
11932: PUSH
11933: LD_INT 1
11935: EQUAL
11936: IFFALSE 11956
// Say ( speaker [ 1 ] , VDb-2 ) else
11938: LD_VAR 0 1
11942: PUSH
11943: LD_INT 1
11945: ARRAY
11946: PPUSH
11947: LD_STRING VDb-2
11949: PPUSH
11950: CALL_OW 88
11954: GO 11972
// Say ( speaker [ 1 ] , VDbf-2 ) ;
11956: LD_VAR 0 1
11960: PUSH
11961: LD_INT 1
11963: ARRAY
11964: PPUSH
11965: LD_STRING VDbf-2
11967: PPUSH
11968: CALL_OW 88
// DWait ( 0 0$01 ) ;
11972: LD_INT 35
11974: PPUSH
11975: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
11979: LD_EXP 20
11983: PPUSH
11984: LD_STRING VDb-com1
11986: PPUSH
11987: CALL_OW 88
// DialogueOff ;
11991: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
11995: LD_INT 44100
11997: PUSH
11998: LD_INT 36750
12000: PUSH
12001: LD_INT 31500
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_OWVAR 67
12013: ARRAY
12014: PPUSH
12015: CALL_OW 67
// ru_can_attack := true ;
12019: LD_ADDR_EXP 3
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// end ;
12027: PPOPN 1
12029: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12030: LD_INT 22
12032: PUSH
12033: LD_INT 7
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 3
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: IFFALSE 12095
12060: GO 12062
12062: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12063: LD_INT 42000
12065: PUSH
12066: LD_INT 34650
12068: PUSH
12069: LD_INT 29400
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: LD_OWVAR 67
12081: ARRAY
12082: PPUSH
12083: CALL_OW 67
// ru_can_attack := true ;
12087: LD_ADDR_EXP 3
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// end ;
12095: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12096: LD_INT 58
12098: PPUSH
12099: CALL_OW 255
12103: PUSH
12104: LD_INT 1
12106: EQUAL
12107: IFFALSE 12314
12109: GO 12111
12111: DISABLE
12112: LD_INT 0
12114: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12115: LD_ADDR_VAR 0 1
12119: PUSH
12120: LD_INT 22
12122: PUSH
12123: LD_INT 1
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 25
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PPUSH
12144: CALL_OW 69
12148: ST_TO_ADDR
// DialogueOn ;
12149: CALL_OW 6
// if speaker then
12153: LD_VAR 0 1
12157: IFFALSE 12212
// if GetSex ( speaker [ 1 ] ) = sex_male then
12159: LD_VAR 0 1
12163: PUSH
12164: LD_INT 1
12166: ARRAY
12167: PPUSH
12168: CALL_OW 258
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12196
// Say ( speaker [ 1 ] , VDe-1 ) else
12178: LD_VAR 0 1
12182: PUSH
12183: LD_INT 1
12185: ARRAY
12186: PPUSH
12187: LD_STRING VDe-1
12189: PPUSH
12190: CALL_OW 88
12194: GO 12212
// Say ( speaker [ 1 ] , VDef-1 ) ;
12196: LD_VAR 0 1
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PPUSH
12205: LD_STRING VDef-1
12207: PPUSH
12208: CALL_OW 88
// case Query ( SibNote ) of 1 :
12212: LD_STRING SibNote
12214: PPUSH
12215: CALL_OW 97
12219: PUSH
12220: LD_INT 1
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12231
12228: POP
// ; end ;
12229: GO 12232
12231: POP
// if speaker then
12232: LD_VAR 0 1
12236: IFFALSE 12291
// if GetSex ( speaker [ 1 ] ) = sex_male then
12238: LD_VAR 0 1
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PPUSH
12247: CALL_OW 258
12251: PUSH
12252: LD_INT 1
12254: EQUAL
12255: IFFALSE 12275
// Say ( speaker [ 1 ] , VDe-2 ) else
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: LD_STRING VDe-2
12268: PPUSH
12269: CALL_OW 88
12273: GO 12291
// Say ( speaker [ 1 ] , VDef-2 ) ;
12275: LD_VAR 0 1
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: LD_STRING VDef-2
12286: PPUSH
12287: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12291: LD_EXP 20
12295: PPUSH
12296: LD_STRING VDc-4
12298: PPUSH
12299: CALL_OW 88
// DialogueOff ;
12303: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12307: LD_STRING CVulc3
12309: PPUSH
12310: CALL_OW 337
// end ;
12314: PPOPN 1
12316: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12317: LD_OWVAR 2
12321: PUSH
12322: LD_INT 1
12324: EQUAL
12325: PUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 3
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 0
12357: GREATER
12358: AND
12359: IFFALSE 12793
12361: GO 12363
12363: DISABLE
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
12368: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12369: LD_INT 245
12371: PPUSH
12372: LD_INT 1295
12374: PPUSH
12375: CALL_OW 12
12379: PPUSH
12380: CALL_OW 67
// DialogueOn ;
12384: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12388: LD_EXP 23
12392: PPUSH
12393: LD_STRING VDG-1
12395: PPUSH
12396: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12400: LD_EXP 20
12404: PPUSH
12405: LD_STRING VDc-5
12407: PPUSH
12408: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12412: LD_EXP 23
12416: PPUSH
12417: LD_STRING VDG-2
12419: PPUSH
12420: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12424: LD_EXP 20
12428: PPUSH
12429: LD_STRING VDc-6
12431: PPUSH
12432: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12436: LD_EXP 23
12440: PPUSH
12441: LD_STRING VDG-3
12443: PPUSH
12444: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12448: LD_EXP 20
12452: PPUSH
12453: LD_STRING VDc-7
12455: PPUSH
12456: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12460: LD_EXP 23
12464: PPUSH
12465: LD_STRING VDG-4
12467: PPUSH
12468: CALL_OW 94
// DialogueOff ;
12472: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12476: LD_STRING CVulc4
12478: PPUSH
12479: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12483: LD_INT 18900
12485: PUSH
12486: LD_INT 21000
12488: PUSH
12489: LD_INT 23100
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: LD_OWVAR 67
12501: ARRAY
12502: PPUSH
12503: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: DOUBLE
12513: LD_INT 1
12515: DEC
12516: ST_TO_ADDR
12517: LD_INT 4
12519: PUSH
12520: LD_INT 5
12522: PUSH
12523: LD_INT 6
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: LD_OWVAR 67
12535: ARRAY
12536: PUSH
12537: FOR_TO
12538: IFFALSE 12782
// begin uc_side := 1 ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_INT 1
12547: ST_TO_ADDR
// uc_nation := 1 ;
12548: LD_ADDR_OWVAR 21
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12556: LD_INT 0
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: LD_INT 4
12564: PPUSH
12565: CALL_OW 12
12569: PPUSH
12570: LD_EXP 22
12574: PPUSH
12575: CALL_OW 380
// un := CreateHuman ;
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: CALL_OW 44
12588: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 233
// if GetClass ( un ) = 3 then
12601: LD_VAR 0 2
12605: PPUSH
12606: CALL_OW 257
12610: PUSH
12611: LD_INT 3
12613: EQUAL
12614: IFFALSE 12765
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12616: LD_ADDR_OWVAR 37
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: LD_INT 3
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_VAR 0 1
12635: PUSH
12636: LD_INT 2
12638: MOD
12639: ARRAY
12640: ST_TO_ADDR
// vc_engine := engine_combustion ;
12641: LD_ADDR_OWVAR 39
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// vc_control := control_manual ;
12649: LD_ADDR_OWVAR 38
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12657: LD_ADDR_OWVAR 40
12661: PUSH
12662: LD_INT 9
12664: PUSH
12665: LD_INT 9
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: LD_INT 11
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 1
12682: PPUSH
12683: LD_INT 4
12685: PPUSH
12686: CALL_OW 12
12690: ARRAY
12691: ST_TO_ADDR
// veh := CreateVehicle ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: CALL_OW 45
12701: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 2
12709: PPUSH
12710: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 77
12721: PPUSH
12722: LD_INT 88
12724: PPUSH
12725: CALL_OW 12
12729: PPUSH
12730: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: LD_INT 0
12744: PPUSH
12745: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12749: LD_VAR 0 2
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: CALL_OW 52
// end else
12763: GO 12780
// PlaceUnitArea ( un , start_north , false ) ;
12765: LD_VAR 0 2
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL_OW 49
// end ;
12780: GO 12537
12782: POP
12783: POP
// CenterNowOnUnits ( un ) ;
12784: LD_VAR 0 2
12788: PPUSH
12789: CALL_OW 87
// end ;
12793: PPOPN 3
12795: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12796: LD_INT 21
12798: PPUSH
12799: LD_INT 22
12801: PUSH
12802: LD_OWVAR 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 70
12815: IFFALSE 13136
12817: GO 12819
12819: DISABLE
12820: LD_INT 0
12822: PPUSH
12823: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_OWVAR 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 25
12856: PUSH
12857: LD_INT 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 3
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 4
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: PUSH
12900: LD_EXP 11
12904: DIFF
12905: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12906: LD_ADDR_VAR 0 1
12910: PUSH
12911: LD_VAR 0 2
12915: PPUSH
12916: LD_INT 112
12918: PPUSH
12919: LD_INT 67
12921: PPUSH
12922: CALL_OW 73
12926: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12927: LD_VAR 0 1
12931: PPUSH
12932: CALL_OW 255
12936: PUSH
12937: LD_INT 7
12939: EQUAL
12940: IFFALSE 12983
// if GetSex ( un ) = sex_male then
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 258
12951: PUSH
12952: LD_INT 1
12954: EQUAL
12955: IFFALSE 12971
// Say ( un , VD-find-al ) else
12957: LD_VAR 0 1
12961: PPUSH
12962: LD_STRING VD-find-al
12964: PPUSH
12965: CALL_OW 88
12969: GO 12983
// Say ( un , VD-find-al-f ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_STRING VD-find-al-f
12978: PPUSH
12979: CALL_OW 88
// if GetSide ( un ) = 2 then
12983: LD_VAR 0 1
12987: PPUSH
12988: CALL_OW 255
12992: PUSH
12993: LD_INT 2
12995: EQUAL
12996: IFFALSE 13039
// if GetSex ( un ) = sex_male then
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 258
13007: PUSH
13008: LD_INT 1
13010: EQUAL
13011: IFFALSE 13027
// Say ( un , VD-find-ar ) else
13013: LD_VAR 0 1
13017: PPUSH
13018: LD_STRING VD-find-ar
13020: PPUSH
13021: CALL_OW 88
13025: GO 13039
// Say ( un , VD-find-ar-f ) ;
13027: LD_VAR 0 1
13031: PPUSH
13032: LD_STRING VD-find-ar-f
13034: PPUSH
13035: CALL_OW 88
// if GetSide ( un ) = 1 then
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 255
13048: PUSH
13049: LD_INT 1
13051: EQUAL
13052: IFFALSE 13119
// begin if GetSex ( un ) = sex_male then
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 258
13063: PUSH
13064: LD_INT 1
13066: EQUAL
13067: IFFALSE 13095
// begin Say ( un , VD-find-us ) ;
13069: LD_VAR 0 1
13073: PPUSH
13074: LD_STRING VD-find-us
13076: PPUSH
13077: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13081: LD_VAR 0 1
13085: PPUSH
13086: LD_STRING VD-find-us2
13088: PPUSH
13089: CALL_OW 88
// end else
13093: GO 13119
// begin Say ( un , VD-find-us-f ) ;
13095: LD_VAR 0 1
13099: PPUSH
13100: LD_STRING VD-find-us-f
13102: PPUSH
13103: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13107: LD_VAR 0 1
13111: PPUSH
13112: LD_STRING VD-find-us2-f
13114: PPUSH
13115: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13119: LD_INT 10
13121: PPUSH
13122: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13126: LD_INT 112
13128: PPUSH
13129: LD_INT 67
13131: PPUSH
13132: CALL_OW 86
// end ;
13136: PPOPN 2
13138: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13139: LD_EXP 8
13143: IFFALSE 13645
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
// begin if your_side = 1 then
13151: LD_OWVAR 2
13155: PUSH
13156: LD_INT 1
13158: EQUAL
13159: IFFALSE 13340
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13161: LD_ADDR_VAR 0 1
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 25
13178: PUSH
13179: LD_INT 4
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 69
13194: PUSH
13195: LD_EXP 20
13199: DIFF
13200: ST_TO_ADDR
// if not speaker then
13201: LD_VAR 0 1
13205: NOT
13206: IFFALSE 13210
// exit ;
13208: GO 13645
// if GetSex ( speaker [ 1 ] ) = sex_male then
13210: LD_VAR 0 1
13214: PUSH
13215: LD_INT 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 258
13223: PUSH
13224: LD_INT 1
13226: EQUAL
13227: IFFALSE 13247
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13229: LD_VAR 0 1
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: LD_STRING VD-us-sci-art-1
13240: PPUSH
13241: CALL_OW 88
13245: GO 13263
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: LD_STRING VD-us-fsci-art-1
13258: PPUSH
13259: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13263: LD_EXP 20
13267: PPUSH
13268: LD_STRING VDc-art1
13270: PPUSH
13271: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13275: LD_VAR 0 1
13279: PUSH
13280: LD_INT 1
13282: ARRAY
13283: PPUSH
13284: CALL_OW 258
13288: PUSH
13289: LD_INT 1
13291: EQUAL
13292: IFFALSE 13312
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13294: LD_VAR 0 1
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_STRING VD-us-sci-art-2
13305: PPUSH
13306: CALL_OW 88
13310: GO 13328
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13312: LD_VAR 0 1
13316: PUSH
13317: LD_INT 1
13319: ARRAY
13320: PPUSH
13321: LD_STRING VD-us-fsci-art-2
13323: PPUSH
13324: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13328: LD_EXP 20
13332: PPUSH
13333: LD_STRING VDc-art2
13335: PPUSH
13336: CALL_OW 88
// end ; if your_side = 2 then
13340: LD_OWVAR 2
13344: PUSH
13345: LD_INT 2
13347: EQUAL
13348: IFFALSE 13452
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 4
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PUSH
13384: LD_EXP 52
13388: DIFF
13389: ST_TO_ADDR
// if not speaker then
13390: LD_VAR 0 1
13394: NOT
13395: IFFALSE 13399
// exit ;
13397: GO 13645
// if GetSex ( speaker [ 1 ] ) = sex_male then
13399: LD_VAR 0 1
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: CALL_OW 258
13412: PUSH
13413: LD_INT 1
13415: EQUAL
13416: IFFALSE 13436
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13418: LD_VAR 0 1
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PPUSH
13427: LD_STRING VD-ar-sci-art-1
13429: PPUSH
13430: CALL_OW 88
13434: GO 13452
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13436: LD_VAR 0 1
13440: PUSH
13441: LD_INT 1
13443: ARRAY
13444: PPUSH
13445: LD_STRING VD-ar-fsci-art-1
13447: PPUSH
13448: CALL_OW 88
// end ; if your_side = 7 then
13452: LD_OWVAR 2
13456: PUSH
13457: LD_INT 7
13459: EQUAL
13460: IFFALSE 13645
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: LD_INT 7
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 25
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: PUSH
13496: LD_EXP 38
13500: DIFF
13501: ST_TO_ADDR
// if speaker then
13502: LD_VAR 0 1
13506: IFFALSE 13638
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: CALL_OW 258
13521: PUSH
13522: LD_INT 1
13524: EQUAL
13525: IFFALSE 13545
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_STRING VD-al-sci-art-1
13538: PPUSH
13539: CALL_OW 88
13543: GO 13561
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13545: LD_VAR 0 1
13549: PUSH
13550: LD_INT 1
13552: ARRAY
13553: PPUSH
13554: LD_STRING VD-al-fsci-art-1
13556: PPUSH
13557: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13561: LD_EXP 38
13565: PPUSH
13566: LD_STRING VPd-art-1
13568: PPUSH
13569: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13573: LD_VAR 0 1
13577: PUSH
13578: LD_INT 1
13580: ARRAY
13581: PPUSH
13582: CALL_OW 258
13586: PUSH
13587: LD_INT 1
13589: EQUAL
13590: IFFALSE 13610
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_STRING VD-al-sci-art-2
13603: PPUSH
13604: CALL_OW 88
13608: GO 13626
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13610: LD_VAR 0 1
13614: PUSH
13615: LD_INT 1
13617: ARRAY
13618: PPUSH
13619: LD_STRING VD-al-fsci-art-2
13621: PPUSH
13622: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13626: LD_EXP 38
13630: PPUSH
13631: LD_STRING VPd-art-2
13633: PPUSH
13634: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13638: LD_STRING CVulc7out
13640: PPUSH
13641: CALL_OW 337
// end ; end ;
13645: PPOPN 1
13647: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13648: LD_INT 8
13650: PPUSH
13651: LD_INT 22
13653: PUSH
13654: LD_OWVAR 2
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PPUSH
13668: LD_INT 8
13670: PPUSH
13671: CALL 1987 0 2
13675: PPUSH
13676: CALL_OW 292
13680: IFFALSE 13823
13682: GO 13684
13684: DISABLE
13685: LD_INT 0
13687: PPUSH
// begin if your_side = 1 then
13688: LD_OWVAR 2
13692: PUSH
13693: LD_INT 1
13695: EQUAL
13696: IFFALSE 13779
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13698: LD_ADDR_VAR 0 1
13702: PUSH
13703: LD_INT 22
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: PUSH
13718: LD_EXP 20
13722: DIFF
13723: ST_TO_ADDR
// if speaker then
13724: LD_VAR 0 1
13728: IFFALSE 13779
// if GetSex ( speaker [ 1 ] ) then
13730: LD_VAR 0 1
13734: PUSH
13735: LD_INT 1
13737: ARRAY
13738: PPUSH
13739: CALL_OW 258
13743: IFFALSE 13763
// Say ( speaker [ 1 ] , VD-legion-us ) else
13745: LD_VAR 0 1
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: LD_STRING VD-legion-us
13756: PPUSH
13757: CALL_OW 88
13761: GO 13779
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: LD_STRING VD-legion-us-f
13774: PPUSH
13775: CALL_OW 88
// end ; if your_side = 2 then
13779: LD_OWVAR 2
13783: PUSH
13784: LD_INT 2
13786: EQUAL
13787: IFFALSE 13801
// Say ( ar_commander , VD-legion-ar ) ;
13789: LD_EXP 52
13793: PPUSH
13794: LD_STRING VD-legion-ar
13796: PPUSH
13797: CALL_OW 88
// if your_side = 7 then
13801: LD_OWVAR 2
13805: PUSH
13806: LD_INT 7
13808: EQUAL
13809: IFFALSE 13823
// Say ( al_commander , VD-legion-al ) ;
13811: LD_EXP 38
13815: PPUSH
13816: LD_STRING VD-legion-al
13818: PPUSH
13819: CALL_OW 88
// end ;
13823: PPOPN 1
13825: END
// every 0 0$01 trigger mine_vulc do
13826: LD_EXP 13
13830: IFFALSE 13847
13832: GO 13834
13834: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13835: LD_EXP 11
13839: PPUSH
13840: LD_STRING VD-vulc-mines
13842: PPUSH
13843: CALL_OW 88
// end ;
13847: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13848: LD_OWVAR 67
13852: PUSH
13853: LD_INT 1
13855: GREATER
13856: IFFALSE 13975
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13866: LD_ADDR_VAR 0 1
13870: PUSH
13871: LD_INT 123
13873: PUSH
13874: LD_INT 95
13876: PUSH
13877: LD_INT 119
13879: PUSH
13880: LD_INT 89
13882: PUSH
13883: LD_INT 115
13885: PUSH
13886: LD_INT 81
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: ST_TO_ADDR
// p := 1 ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_INT 1
13904: ST_TO_ADDR
// for i = 1 to 3 do
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: DOUBLE
13911: LD_INT 1
13913: DEC
13914: ST_TO_ADDR
13915: LD_INT 3
13917: PUSH
13918: FOR_TO
13919: IFFALSE 13973
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13921: LD_VAR 0 1
13925: PUSH
13926: LD_VAR 0 2
13930: ARRAY
13931: PPUSH
13932: LD_VAR 0 1
13936: PUSH
13937: LD_VAR 0 2
13941: PUSH
13942: LD_INT 1
13944: PLUS
13945: ARRAY
13946: PPUSH
13947: LD_INT 8
13949: PPUSH
13950: LD_INT 0
13952: PPUSH
13953: CALL_OW 454
// p := p + 2 ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 2
13966: PUSH
13967: LD_INT 2
13969: PLUS
13970: ST_TO_ADDR
// end ;
13971: GO 13918
13973: POP
13974: POP
// end ;
13975: PPOPN 3
13977: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
13978: LD_OWVAR 67
13982: PUSH
13983: LD_INT 1
13985: GREATER
13986: PUSH
13987: LD_INT 22
13989: PPUSH
13990: LD_INT 22
13992: PUSH
13993: LD_OWVAR 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PPUSH
14002: CALL_OW 70
14006: AND
14007: IFFALSE 14211
14009: GO 14011
14011: DISABLE
14012: LD_INT 0
14014: PPUSH
14015: PPUSH
14016: PPUSH
// begin enable ;
14017: ENABLE
// p := 1 ;
14018: LD_ADDR_VAR 0 1
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14026: LD_ADDR_VAR 0 3
14030: PUSH
14031: LD_INT 123
14033: PUSH
14034: LD_INT 95
14036: PUSH
14037: LD_INT 119
14039: PUSH
14040: LD_INT 89
14042: PUSH
14043: LD_INT 115
14045: PUSH
14046: LD_INT 81
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: ST_TO_ADDR
// for i = 1 to 3 do
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_INT 3
14069: PUSH
14070: FOR_TO
14071: IFFALSE 14209
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14073: LD_VAR 0 3
14077: PUSH
14078: LD_VAR 0 1
14082: ARRAY
14083: PPUSH
14084: LD_VAR 0 3
14088: PUSH
14089: LD_VAR 0 1
14093: PUSH
14094: LD_INT 1
14096: PLUS
14097: ARRAY
14098: PPUSH
14099: CALL_OW 428
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14193
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14109: LD_VAR 0 3
14113: PUSH
14114: LD_VAR 0 1
14118: ARRAY
14119: PPUSH
14120: LD_VAR 0 3
14124: PUSH
14125: LD_VAR 0 1
14129: PUSH
14130: LD_INT 1
14132: PLUS
14133: ARRAY
14134: PPUSH
14135: CALL_OW 428
14139: PPUSH
14140: CALL_OW 255
14144: PUSH
14145: LD_OWVAR 2
14149: EQUAL
14150: IFFALSE 14193
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14152: LD_VAR 0 3
14156: PUSH
14157: LD_VAR 0 1
14161: ARRAY
14162: PPUSH
14163: LD_VAR 0 3
14167: PUSH
14168: LD_VAR 0 1
14172: PUSH
14173: LD_INT 1
14175: PLUS
14176: ARRAY
14177: PPUSH
14178: LD_INT 8
14180: PPUSH
14181: CALL_OW 456
// mine_vulc := true ;
14185: LD_ADDR_EXP 13
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// end ; p := p + 2 ;
14193: LD_ADDR_VAR 0 1
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: LD_INT 2
14205: PLUS
14206: ST_TO_ADDR
// end ;
14207: GO 14070
14209: POP
14210: POP
// end ;
14211: PPOPN 3
14213: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14214: LD_INT 22
14216: PUSH
14217: LD_INT 3
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PUSH
14229: LD_INT 0
14231: EQUAL
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: LD_INT 2
14240: NONEQUAL
14241: AND
14242: IFFALSE 14251
14244: GO 14246
14246: DISABLE
// Win ;
14247: CALL 14308 0 0
14251: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14252: LD_INT 2
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 8
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 3
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: PUSH
14285: LD_INT 0
14287: EQUAL
14288: PUSH
14289: LD_OWVAR 2
14293: PUSH
14294: LD_INT 2
14296: EQUAL
14297: AND
14298: IFFALSE 14307
14300: GO 14302
14302: DISABLE
// Win ;
14303: CALL 14308 0 0
14307: END
// function Win ; var points ; begin
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
// case Query ( VulcWin ) of 1 :
14312: LD_STRING VulcWin
14314: PPUSH
14315: CALL_OW 97
14319: PUSH
14320: LD_INT 1
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14331
14328: POP
// ; end ;
14329: GO 14332
14331: POP
// if medal_enabled then
14332: LD_EXP 14
14336: IFFALSE 14350
// AddMedal ( vulc_1 , 1 ) else
14338: LD_STRING vulc_1
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 101
14348: GO 14361
// AddMedal ( vulc_1 , - 1 ) ;
14350: LD_STRING vulc_1
14352: PPUSH
14353: LD_INT 1
14355: NEG
14356: PPUSH
14357: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14361: LD_INT 22
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: PUSH
14376: LD_INT 0
14378: EQUAL
14379: IFFALSE 14393
// AddMedal ( vulc_2 , 1 ) else
14381: LD_STRING vulc_2
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 101
14391: GO 14404
// AddMedal ( vulc_2 , - 1 ) ;
14393: LD_STRING vulc_2
14395: PPUSH
14396: LD_INT 1
14398: NEG
14399: PPUSH
14400: CALL_OW 101
// points := CalculateCommanderPoints ;
14404: LD_ADDR_VAR 0 2
14408: PUSH
14409: CALL 2108 0 0
14413: ST_TO_ADDR
// if points >= 2000 then
14414: LD_VAR 0 2
14418: PUSH
14419: LD_INT 2000
14421: GREATEREQUAL
14422: IFFALSE 14436
// AddMedal ( vulc_3 , 2 ) else
14424: LD_STRING vulc_3
14426: PPUSH
14427: LD_INT 2
14429: PPUSH
14430: CALL_OW 101
14434: GO 14469
// if points >= 0 then
14436: LD_VAR 0 2
14440: PUSH
14441: LD_INT 0
14443: GREATEREQUAL
14444: IFFALSE 14458
// AddMedal ( vulc_3 , 1 ) else
14446: LD_STRING vulc_3
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 101
14456: GO 14469
// AddMedal ( vulc_3 , - 1 ) ;
14458: LD_STRING vulc_3
14460: PPUSH
14461: LD_INT 1
14463: NEG
14464: PPUSH
14465: CALL_OW 101
// GiveMedals ( MAIN ) ;
14469: LD_STRING MAIN
14471: PPUSH
14472: CALL_OW 102
// YouWin ;
14476: CALL_OW 103
// end ; end_of_file
14480: LD_VAR 0 1
14484: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14485: LD_INT 13
14487: PPUSH
14488: LD_INT 21
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: PUSH
14503: LD_INT 0
14505: GREATER
14506: IFFALSE 14566
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
// begin enable ;
14515: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: LD_INT 13
14523: PPUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 70
14538: PUSH
14539: FOR_IN
14540: IFFALSE 14564
// if GetLives ( i ) then
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 256
14551: IFFALSE 14562
// KillUnit ( i ) ;
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 66
14562: GO 14539
14564: POP
14565: POP
// end ;
14566: PPOPN 2
14568: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 255
14578: PUSH
14579: LD_OWVAR 2
14583: EQUAL
14584: IFFALSE 14594
// player_res_art := true ;
14586: LD_ADDR_EXP 6
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: PPOPN 1
14596: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14597: LD_INT 22
14599: PUSH
14600: LD_OWVAR 2
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 30
14614: PUSH
14615: LD_INT 7
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 30
14624: PUSH
14625: LD_INT 8
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 30
14634: PUSH
14635: LD_INT 11
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: PUSH
14657: LD_EXP 6
14661: AND
14662: IFFALSE 15019
14664: GO 14666
14666: DISABLE
14667: LD_INT 0
14669: PPUSH
14670: PPUSH
// begin enable ;
14671: ENABLE
// xy := FindArtifact ( 1 ) ;
14672: LD_ADDR_VAR 0 1
14676: PUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 469
14684: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14685: LD_ADDR_VAR 0 2
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 30
14707: PUSH
14708: LD_INT 8
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 11
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PPUSH
14745: CALL_OW 69
14749: PPUSH
14750: LD_VAR 0 1
14754: PUSH
14755: LD_INT 1
14757: ARRAY
14758: PPUSH
14759: LD_VAR 0 1
14763: PUSH
14764: LD_INT 2
14766: ARRAY
14767: PPUSH
14768: CALL_OW 73
14772: ST_TO_ADDR
// if player_artifact_ready = false then
14773: LD_EXP 8
14777: PUSH
14778: LD_INT 0
14780: EQUAL
14781: IFFALSE 14895
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14783: LD_VAR 0 2
14787: PPUSH
14788: LD_VAR 0 1
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_VAR 0 1
14801: PUSH
14802: LD_INT 2
14804: ARRAY
14805: PPUSH
14806: CALL_OW 297
14810: PUSH
14811: LD_INT 6
14813: LESS
14814: IFFALSE 14875
// begin if BuildingStatus ( lab ) = bs_idle then
14816: LD_VAR 0 2
14820: PPUSH
14821: CALL_OW 461
14825: PUSH
14826: LD_INT 2
14828: EQUAL
14829: IFFALSE 14853
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14831: LD_OWVAR 2
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: LD_INT 2
14841: PPUSH
14842: LD_VAR 0 2
14846: PPUSH
14847: CALL_OW 468
14851: GO 14873
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14853: LD_OWVAR 2
14857: PPUSH
14858: LD_INT 1
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: LD_VAR 0 2
14868: PPUSH
14869: CALL_OW 468
// end else
14873: GO 14895
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14875: LD_OWVAR 2
14879: PPUSH
14880: LD_INT 1
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: CALL_OW 468
// if player_artifact_ready then
14895: LD_EXP 8
14899: IFFALSE 15019
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14901: LD_VAR 0 2
14905: PPUSH
14906: LD_VAR 0 1
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 1
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: CALL_OW 297
14928: PUSH
14929: LD_INT 6
14931: LESS
14932: IFFALSE 14997
// begin if BuildingStatus ( lab ) = bs_idle then
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 461
14943: PUSH
14944: LD_INT 2
14946: EQUAL
14947: IFFALSE 14973
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
14949: LD_OWVAR 2
14953: PPUSH
14954: LD_EXP 9
14958: PPUSH
14959: LD_INT 4
14961: PPUSH
14962: LD_VAR 0 2
14966: PPUSH
14967: CALL_OW 468
14971: GO 14995
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14973: LD_OWVAR 2
14977: PPUSH
14978: LD_EXP 9
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: LD_VAR 0 2
14990: PPUSH
14991: CALL_OW 468
// end else
14995: GO 15019
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14997: LD_OWVAR 2
15001: PPUSH
15002: LD_EXP 9
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 468
// end ;
15019: PPOPN 2
15021: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15022: LD_INT 0
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15028: LD_ADDR_VAR 0 5
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 469
15040: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15041: LD_ADDR_VAR 0 7
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_OWVAR 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 30
15063: PUSH
15064: LD_INT 8
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 30
15073: PUSH
15074: LD_INT 11
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PPUSH
15095: LD_VAR 0 5
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PPUSH
15104: LD_VAR 0 5
15108: PUSH
15109: LD_INT 2
15111: ARRAY
15112: PPUSH
15113: CALL_OW 73
15117: ST_TO_ADDR
// if icon = art_exp_left then
15118: LD_VAR 0 2
15122: PUSH
15123: LD_INT 1
15125: EQUAL
15126: IFFALSE 15179
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15128: LD_VAR 0 7
15132: PPUSH
15133: LD_EXP 10
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15145: LD_VAR 0 7
15149: PPUSH
15150: LD_EXP 7
15154: PPUSH
15155: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15159: LD_OWVAR 2
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: LD_INT 0
15169: PPUSH
15170: LD_VAR 0 7
15174: PPUSH
15175: CALL_OW 468
// end ; if icon = art_icon then
15179: LD_VAR 0 2
15183: PUSH
15184: LD_EXP 9
15188: EQUAL
15189: IFFALSE 15400
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 21
15198: PUSH
15199: LD_INT 3
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: IN
15211: IFFALSE 15400
// begin side := GetSide ( cr1 ) ;
15213: LD_ADDR_VAR 0 8
15217: PUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: CALL_OW 255
15227: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15228: LD_INT 22
15230: PUSH
15231: LD_VAR 0 8
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 28
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PPUSH
15254: CALL_OW 69
15258: PUSH
15259: LD_INT 0
15261: GREATER
15262: IFFALSE 15400
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15264: LD_ADDR_VAR 0 6
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_VAR 0 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 26
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 30
15296: PUSH
15297: LD_INT 27
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 30
15306: PUSH
15307: LD_INT 28
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PPUSH
15324: CALL_OW 69
15328: PUSH
15329: FOR_IN
15330: IFFALSE 15343
// KillUnit ( i ) ;
15332: LD_VAR 0 6
15336: PPUSH
15337: CALL_OW 66
15341: GO 15329
15343: POP
15344: POP
// player_res_art := false ;
15345: LD_ADDR_EXP 6
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15353: LD_OWVAR 2
15357: PPUSH
15358: LD_EXP 9
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: LD_VAR 0 7
15370: PPUSH
15371: CALL_OW 468
// wait ( time_to_reuse ) ;
15375: LD_EXP 12
15379: PPUSH
15380: CALL_OW 67
// player_res_art := true ;
15384: LD_ADDR_EXP 6
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// medal_enabled := true ;
15392: LD_ADDR_EXP 14
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// end ; end ; end ; end ;
15400: PPOPN 8
15402: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15403: LD_VAR 0 1
15407: PPUSH
15408: CALL_OW 255
15412: PUSH
15413: LD_OWVAR 2
15417: EQUAL
15418: IFFALSE 15455
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15420: LD_OWVAR 2
15424: PPUSH
15425: LD_INT 1
15427: PPUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 468
// player_artifact_ready := true ;
15440: LD_ADDR_EXP 8
15444: PUSH
15445: LD_INT 1
15447: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15448: LD_STRING ArtVulcano
15450: PPUSH
15451: CALL_OW 339
// end ; end ;
15455: PPOPN 1
15457: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15458: LD_ADDR_EXP 7
15462: PUSH
15463: LD_VAR 0 2
15467: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15468: LD_OWVAR 2
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: LD_INT 2
15478: PPUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 468
// end ; end_of_file
15488: PPOPN 2
15490: END
// every 0 0$01 do
15491: GO 15493
15493: DISABLE
// begin enable ;
15494: ENABLE
// Display_Strings := [ #tick , tick ] ;
15495: LD_ADDR_OWVAR 47
15499: PUSH
15500: LD_STRING #tick
15502: PUSH
15503: LD_OWVAR 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: ST_TO_ADDR
// end ; end_of_file
15512: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15513: LD_INT 0
15515: PPUSH
15516: PPUSH
15517: PPUSH
15518: PPUSH
15519: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15520: LD_ADDR_EXP 40
15524: PUSH
15525: LD_INT 7
15527: PUSH
15528: LD_INT 6
15530: PUSH
15531: LD_INT 5
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PUSH
15539: LD_OWVAR 67
15543: ARRAY
15544: ST_TO_ADDR
// al_force := [ ] ;
15545: LD_ADDR_EXP 39
15549: PUSH
15550: EMPTY
15551: ST_TO_ADDR
// RemoveAlliance ;
15552: CALL 15930 0 0
// ResetFog ;
15556: CALL_OW 335
// your_side := 7 ;
15560: LD_ADDR_OWVAR 2
15564: PUSH
15565: LD_INT 7
15567: ST_TO_ADDR
// uc_side := 7 ;
15568: LD_ADDR_OWVAR 20
15572: PUSH
15573: LD_INT 7
15575: ST_TO_ADDR
// hc_gallery :=  ;
15576: LD_ADDR_OWVAR 33
15580: PUSH
15581: LD_STRING 
15583: ST_TO_ADDR
// hc_name :=  ;
15584: LD_ADDR_OWVAR 26
15588: PUSH
15589: LD_STRING 
15591: ST_TO_ADDR
// hc_importance := 0 ;
15592: LD_ADDR_OWVAR 32
15596: PUSH
15597: LD_INT 0
15599: ST_TO_ADDR
// for i = 1 to 17 do
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_INT 17
15612: PUSH
15613: FOR_TO
15614: IFFALSE 15694
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15616: LD_ADDR_OWVAR 21
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: LD_INT 3
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: PPUSH
15634: LD_INT 2
15636: PPUSH
15637: CALL_OW 12
15641: ARRAY
15642: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15643: LD_INT 0
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: LD_INT 4
15651: PPUSH
15652: CALL_OW 12
15656: PPUSH
15657: LD_EXP 40
15661: PPUSH
15662: CALL_OW 380
// un := CreateHuman ;
15666: LD_ADDR_VAR 0 4
15670: PUSH
15671: CALL_OW 44
15675: ST_TO_ADDR
// al_force := al_force ^ un ;
15676: LD_ADDR_EXP 39
15680: PUSH
15681: LD_EXP 39
15685: PUSH
15686: LD_VAR 0 4
15690: ADD
15691: ST_TO_ADDR
// end ;
15692: GO 15613
15694: POP
15695: POP
// hc_importance := 100 ;
15696: LD_ADDR_OWVAR 32
15700: PUSH
15701: LD_INT 100
15703: ST_TO_ADDR
// uc_nation := 1 ;
15704: LD_ADDR_OWVAR 21
15708: PUSH
15709: LD_INT 1
15711: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15712: LD_INT 1
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_EXP 40
15722: PPUSH
15723: CALL_OW 380
// al_commander := CreateHuman ;
15727: LD_ADDR_EXP 38
15731: PUSH
15732: CALL_OW 44
15736: ST_TO_ADDR
// player_commander := al_commander ;
15737: LD_ADDR_EXP 11
15741: PUSH
15742: LD_EXP 38
15746: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15747: LD_ADDR_VAR 0 5
15751: PUSH
15752: LD_STRING text
15754: PPUSH
15755: LD_INT 9
15757: PUSH
15758: LD_INT 9
15760: PUSH
15761: LD_INT 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_OWVAR 67
15773: ARRAY
15774: PPUSH
15775: LD_INT 9
15777: PUSH
15778: LD_INT 9
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: PUSH
15789: LD_OWVAR 67
15793: ARRAY
15794: PPUSH
15795: LD_INT -5
15797: PUSH
15798: LD_EXP 38
15802: PUSH
15803: LD_INT -3
15805: PUSH
15806: LD_INT -2
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: LD_EXP 39
15819: ADD
15820: PPUSH
15821: LD_INT 1
15823: PUSH
15824: LD_INT 3
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 4
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 9
15849: PUSH
15850: LD_INT 5
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 42
15865: ST_TO_ADDR
// team := team ^ al_commander ;
15866: LD_ADDR_VAR 0 5
15870: PUSH
15871: LD_VAR 0 5
15875: PUSH
15876: LD_EXP 38
15880: ADD
15881: ST_TO_ADDR
// for i = 1 to team do
15882: LD_ADDR_VAR 0 2
15886: PUSH
15887: DOUBLE
15888: LD_INT 1
15890: DEC
15891: ST_TO_ADDR
15892: LD_VAR 0 5
15896: PUSH
15897: FOR_TO
15898: IFFALSE 15923
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15900: LD_VAR 0 5
15904: PUSH
15905: LD_VAR 0 2
15909: ARRAY
15910: PPUSH
15911: LD_INT 15
15913: PPUSH
15914: LD_INT 0
15916: PPUSH
15917: CALL_OW 49
15921: GO 15897
15923: POP
15924: POP
// end ;
15925: LD_VAR 0 1
15929: RET
// export function RemoveAlliance ; var i ; begin
15930: LD_INT 0
15932: PPUSH
15933: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
15934: LD_INT 22
15936: PUSH
15937: LD_INT 7
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 30
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 69
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: PPUSH
15967: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: LD_INT 22
15978: PUSH
15979: LD_INT 7
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: PUSH
15991: FOR_IN
15992: IFFALSE 16005
// RemoveUnit ( i ) ;
15994: LD_VAR 0 2
15998: PPUSH
15999: CALL_OW 64
16003: GO 15991
16005: POP
16006: POP
// end ;
16007: LD_VAR 0 1
16011: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16012: LD_INT 0
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16018: LD_INT 31
16020: PPUSH
16021: LD_INT 7
16023: PPUSH
16024: LD_INT 2
16026: PPUSH
16027: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16031: LD_INT 32
16033: PPUSH
16034: LD_INT 7
16036: PPUSH
16037: LD_INT 2
16039: PPUSH
16040: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16044: LD_INT 59
16046: PPUSH
16047: LD_INT 7
16049: PPUSH
16050: LD_INT 2
16052: PPUSH
16053: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16057: LD_ADDR_EXP 40
16061: PUSH
16062: LD_INT 5
16064: PUSH
16065: LD_INT 6
16067: PUSH
16068: LD_INT 7
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: LD_OWVAR 67
16080: ARRAY
16081: ST_TO_ADDR
// al_force := [ ] ;
16082: LD_ADDR_EXP 39
16086: PUSH
16087: EMPTY
16088: ST_TO_ADDR
// al_vehs := [ ] ;
16089: LD_ADDR_EXP 45
16093: PUSH
16094: EMPTY
16095: ST_TO_ADDR
// uc_side := 7 ;
16096: LD_ADDR_OWVAR 20
16100: PUSH
16101: LD_INT 7
16103: ST_TO_ADDR
// uc_nation := 1 ;
16104: LD_ADDR_OWVAR 21
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// bc_type := b_oil_mine ;
16112: LD_ADDR_OWVAR 42
16116: PUSH
16117: LD_INT 29
16119: ST_TO_ADDR
// b := CreateBuilding ;
16120: LD_ADDR_VAR 0 4
16124: PUSH
16125: CALL_OW 46
16129: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16130: LD_VAR 0 4
16134: PPUSH
16135: LD_INT 61
16137: PPUSH
16138: LD_INT 7
16140: PPUSH
16141: LD_INT 0
16143: PPUSH
16144: LD_INT 0
16146: PPUSH
16147: CALL_OW 50
// bc_type := b_siberite_mine ;
16151: LD_ADDR_OWVAR 42
16155: PUSH
16156: LD_INT 30
16158: ST_TO_ADDR
// b := CreateBuilding ;
16159: LD_ADDR_VAR 0 4
16163: PUSH
16164: CALL_OW 46
16168: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16169: LD_VAR 0 4
16173: PPUSH
16174: LD_INT 69
16176: PPUSH
16177: LD_INT 13
16179: PPUSH
16180: LD_INT 0
16182: PPUSH
16183: LD_INT 0
16185: PPUSH
16186: CALL_OW 50
// hc_gallery :=  ;
16190: LD_ADDR_OWVAR 33
16194: PUSH
16195: LD_STRING 
16197: ST_TO_ADDR
// hc_name :=  ;
16198: LD_ADDR_OWVAR 26
16202: PUSH
16203: LD_STRING 
16205: ST_TO_ADDR
// hc_importance := 0 ;
16206: LD_ADDR_OWVAR 32
16210: PUSH
16211: LD_INT 0
16213: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16214: LD_ADDR_VAR 0 2
16218: PUSH
16219: LD_INT 22
16221: PUSH
16222: LD_INT 7
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 30
16231: PUSH
16232: LD_INT 32
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PUSH
16248: FOR_IN
16249: IFFALSE 16319
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16251: LD_ADDR_OWVAR 21
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: LD_INT 3
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 2
16271: PPUSH
16272: CALL_OW 12
16276: ARRAY
16277: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16278: LD_INT 0
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_EXP 40
16288: PPUSH
16289: CALL_OW 380
// un := CreateHuman ;
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: CALL_OW 44
16302: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_VAR 0 2
16312: PPUSH
16313: CALL_OW 52
// end ;
16317: GO 16248
16319: POP
16320: POP
// for i = 1 to 3 do
16321: LD_ADDR_VAR 0 2
16325: PUSH
16326: DOUBLE
16327: LD_INT 1
16329: DEC
16330: ST_TO_ADDR
16331: LD_INT 3
16333: PUSH
16334: FOR_TO
16335: IFFALSE 16403
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16337: LD_ADDR_OWVAR 21
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: LD_INT 3
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 1
16354: PPUSH
16355: LD_INT 2
16357: PPUSH
16358: CALL_OW 12
16362: ARRAY
16363: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16364: LD_INT 0
16366: PPUSH
16367: LD_INT 4
16369: PPUSH
16370: LD_EXP 40
16374: PPUSH
16375: CALL_OW 380
// un := CreateHuman ;
16379: LD_ADDR_VAR 0 3
16383: PUSH
16384: CALL_OW 44
16388: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 164
16396: PPUSH
16397: CALL_OW 52
// end ;
16401: GO 16334
16403: POP
16404: POP
// for i = 1 to 4 do
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: DOUBLE
16411: LD_INT 1
16413: DEC
16414: ST_TO_ADDR
16415: LD_INT 4
16417: PUSH
16418: FOR_TO
16419: IFFALSE 16510
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16421: LD_ADDR_OWVAR 21
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 3
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: PPUSH
16439: LD_INT 2
16441: PPUSH
16442: CALL_OW 12
16446: ARRAY
16447: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16448: LD_INT 0
16450: PPUSH
16451: LD_INT 5
16453: PUSH
16454: LD_INT 9
16456: PUSH
16457: LD_INT 9
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 1
16467: PPUSH
16468: LD_INT 3
16470: PPUSH
16471: CALL_OW 12
16475: ARRAY
16476: PPUSH
16477: LD_EXP 40
16481: PPUSH
16482: CALL_OW 380
// un := CreateHuman ;
16486: LD_ADDR_VAR 0 3
16490: PUSH
16491: CALL_OW 44
16495: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16496: LD_VAR 0 3
16500: PPUSH
16501: LD_INT 173
16503: PPUSH
16504: CALL_OW 52
// end ;
16508: GO 16418
16510: POP
16511: POP
// for i = 1 to 4 do
16512: LD_ADDR_VAR 0 2
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_INT 4
16524: PUSH
16525: FOR_TO
16526: IFFALSE 16624
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16528: LD_ADDR_OWVAR 21
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: LD_INT 3
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 1
16545: PPUSH
16546: LD_INT 2
16548: PPUSH
16549: CALL_OW 12
16553: ARRAY
16554: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16555: LD_INT 0
16557: PPUSH
16558: LD_INT 3
16560: PPUSH
16561: LD_EXP 40
16565: PPUSH
16566: CALL_OW 380
// un := CreateHuman ;
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: CALL_OW 44
16579: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 22
16587: PUSH
16588: LD_INT 7
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 30
16597: PUSH
16598: LD_INT 3
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 69
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: PPUSH
16618: CALL_OW 52
// end ;
16622: GO 16525
16624: POP
16625: POP
// for i = 1 to 4 do
16626: LD_ADDR_VAR 0 2
16630: PUSH
16631: DOUBLE
16632: LD_INT 1
16634: DEC
16635: ST_TO_ADDR
16636: LD_INT 4
16638: PUSH
16639: FOR_TO
16640: IFFALSE 16708
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16642: LD_ADDR_OWVAR 21
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PPUSH
16660: LD_INT 2
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16669: LD_INT 0
16671: PPUSH
16672: LD_INT 2
16674: PPUSH
16675: LD_EXP 40
16679: PPUSH
16680: CALL_OW 380
// un := CreateHuman ;
16684: LD_ADDR_VAR 0 3
16688: PUSH
16689: CALL_OW 44
16693: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16694: LD_VAR 0 3
16698: PPUSH
16699: LD_INT 162
16701: PPUSH
16702: CALL_OW 52
// end ;
16706: GO 16639
16708: POP
16709: POP
// uc_nation := 3 ;
16710: LD_ADDR_OWVAR 21
16714: PUSH
16715: LD_INT 3
16717: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16718: LD_ADDR_OWVAR 37
16722: PUSH
16723: LD_INT 21
16725: ST_TO_ADDR
// vc_engine := engine_siberite ;
16726: LD_ADDR_OWVAR 39
16730: PUSH
16731: LD_INT 3
16733: ST_TO_ADDR
// vc_control := control_computer ;
16734: LD_ADDR_OWVAR 38
16738: PUSH
16739: LD_INT 3
16741: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16742: LD_ADDR_OWVAR 40
16746: PUSH
16747: LD_INT 51
16749: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16750: CALL_OW 45
16754: PPUSH
16755: LD_INT 49
16757: PPUSH
16758: LD_INT 13
16760: PPUSH
16761: LD_INT 0
16763: PPUSH
16764: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16768: LD_ADDR_EXP 47
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_INT 7
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 30
16785: PUSH
16786: LD_INT 33
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_INT 22
16814: PUSH
16815: LD_INT 7
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: LD_INT 33
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 35
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PUSH
16855: FOR_TO
16856: IFFALSE 16916
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16858: LD_INT 22
16860: PUSH
16861: LD_INT 7
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 30
16870: PUSH
16871: LD_INT 33
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 35
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: PUSH
16893: EMPTY
16894: LIST
16895: PPUSH
16896: CALL_OW 69
16900: PUSH
16901: LD_VAR 0 2
16905: ARRAY
16906: PPUSH
16907: LD_INT 49
16909: PPUSH
16910: CALL_OW 208
16914: GO 16855
16916: POP
16917: POP
// end ;
16918: LD_VAR 0 1
16922: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
16923: LD_OWVAR 2
16927: PUSH
16928: LD_INT 1
16930: EQUAL
16931: IFFALSE 18099
16933: GO 16935
16935: DISABLE
16936: LD_INT 0
16938: PPUSH
16939: PPUSH
16940: PPUSH
16941: PPUSH
// begin enable ;
16942: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
16943: LD_ADDR_EXP 51
16947: PUSH
16948: LD_INT 22
16950: PUSH
16951: LD_INT 7
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 21
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 69
16976: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
16977: LD_ADDR_EXP 49
16981: PUSH
16982: LD_INT 164
16984: PUSH
16985: LD_INT 197
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
16992: LD_ADDR_EXP 48
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 7
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: PUSH
17026: LD_INT 1
17028: ARRAY
17029: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17030: LD_ADDR_EXP 50
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 7
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 30
17047: PUSH
17048: LD_INT 3
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PPUSH
17059: CALL_OW 69
17063: PUSH
17064: LD_INT 1
17066: ARRAY
17067: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17068: LD_INT 22
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 34
17080: PUSH
17081: LD_INT 51
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: IFFALSE 17136
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17098: LD_ADDR_EXP 46
17102: PUSH
17103: LD_INT 22
17105: PUSH
17106: LD_INT 7
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 34
17115: PUSH
17116: LD_INT 51
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: PUSH
17132: LD_INT 1
17134: ARRAY
17135: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17136: LD_ADDR_EXP 42
17140: PUSH
17141: LD_INT 22
17143: PUSH
17144: LD_INT 7
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 25
17153: PUSH
17154: LD_INT 9
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17170: LD_ADDR_EXP 41
17174: PUSH
17175: LD_INT 22
17177: PUSH
17178: LD_INT 7
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 25
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17204: LD_ADDR_EXP 43
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_INT 7
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 25
17221: PUSH
17222: LD_INT 3
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17238: LD_ADDR_EXP 44
17242: PUSH
17243: LD_INT 22
17245: PUSH
17246: LD_INT 7
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 25
17255: PUSH
17256: LD_INT 4
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17272: LD_EXP 42
17276: PPUSH
17277: LD_INT 81
17279: PUSH
17280: LD_INT 7
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 69
17291: PPUSH
17292: CALL 1505 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17296: LD_EXP 46
17300: PPUSH
17301: CALL_OW 314
17305: NOT
17306: PUSH
17307: LD_EXP 46
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 289
17319: PUSH
17320: LD_INT 100
17322: LESS
17323: AND
17324: IFFALSE 17372
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17326: LD_ADDR_VAR 0 4
17330: PUSH
17331: LD_INT 12
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// if cr then
17339: LD_VAR 0 4
17343: IFFALSE 17372
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17345: LD_EXP 46
17349: PPUSH
17350: LD_VAR 0 4
17354: PUSH
17355: LD_INT 1
17357: ARRAY
17358: PPUSH
17359: LD_VAR 0 4
17363: PUSH
17364: LD_INT 2
17366: ARRAY
17367: PPUSH
17368: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17372: LD_EXP 51
17376: PPUSH
17377: LD_INT 3
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 1000
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 72
17398: IFFALSE 17528
// begin if al_eng then
17400: LD_EXP 41
17404: IFFALSE 17526
// for i = 1 to al_eng do
17406: LD_ADDR_VAR 0 1
17410: PUSH
17411: DOUBLE
17412: LD_INT 1
17414: DEC
17415: ST_TO_ADDR
17416: LD_EXP 41
17420: PUSH
17421: FOR_TO
17422: IFFALSE 17524
// if IsInUnit ( al_eng [ i ] ) then
17424: LD_EXP 41
17428: PUSH
17429: LD_VAR 0 1
17433: ARRAY
17434: PPUSH
17435: CALL_OW 310
17439: IFFALSE 17458
// ComExitBuilding ( al_eng [ i ] ) else
17441: LD_EXP 41
17445: PUSH
17446: LD_VAR 0 1
17450: ARRAY
17451: PPUSH
17452: CALL_OW 122
17456: GO 17522
// if not HasTask ( al_eng [ i ] ) then
17458: LD_EXP 41
17462: PUSH
17463: LD_VAR 0 1
17467: ARRAY
17468: PPUSH
17469: CALL_OW 314
17473: NOT
17474: IFFALSE 17522
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17476: LD_EXP 41
17480: PUSH
17481: LD_VAR 0 1
17485: ARRAY
17486: PPUSH
17487: LD_EXP 51
17491: PPUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 24
17497: PUSH
17498: LD_INT 1000
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PPUSH
17509: CALL_OW 72
17513: PUSH
17514: LD_INT 1
17516: ARRAY
17517: PPUSH
17518: CALL_OW 130
17522: GO 17421
17524: POP
17525: POP
// end else
17526: GO 17610
// if al_eng then
17528: LD_EXP 41
17532: IFFALSE 17610
// if not IsInUnit ( al_eng [ 1 ] ) then
17534: LD_EXP 41
17538: PUSH
17539: LD_INT 1
17541: ARRAY
17542: PPUSH
17543: CALL_OW 310
17547: NOT
17548: IFFALSE 17610
// for i = 1 to al_eng do
17550: LD_ADDR_VAR 0 1
17554: PUSH
17555: DOUBLE
17556: LD_INT 1
17558: DEC
17559: ST_TO_ADDR
17560: LD_EXP 41
17564: PUSH
17565: FOR_TO
17566: IFFALSE 17608
// if not IsInUnit ( al_eng [ i ] ) then
17568: LD_EXP 41
17572: PUSH
17573: LD_VAR 0 1
17577: ARRAY
17578: PPUSH
17579: CALL_OW 310
17583: NOT
17584: IFFALSE 17606
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17586: LD_EXP 41
17590: PUSH
17591: LD_VAR 0 1
17595: ARRAY
17596: PPUSH
17597: LD_EXP 48
17601: PPUSH
17602: CALL_OW 120
17606: GO 17565
17608: POP
17609: POP
// if al_vehs then
17610: LD_EXP 45
17614: IFFALSE 17714
// if BuildingStatus ( al_fac ) = bs_idle then
17616: LD_EXP 50
17620: PPUSH
17621: CALL_OW 461
17625: PUSH
17626: LD_INT 2
17628: EQUAL
17629: IFFALSE 17714
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17631: LD_EXP 50
17635: PPUSH
17636: LD_EXP 45
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: PPUSH
17645: LD_EXP 45
17649: PUSH
17650: LD_INT 2
17652: ARRAY
17653: PPUSH
17654: LD_EXP 45
17658: PUSH
17659: LD_INT 3
17661: ARRAY
17662: PPUSH
17663: LD_EXP 45
17667: PUSH
17668: LD_INT 4
17670: ARRAY
17671: PPUSH
17672: CALL_OW 125
// for i = 1 to 4 do
17676: LD_ADDR_VAR 0 1
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_INT 4
17688: PUSH
17689: FOR_TO
17690: IFFALSE 17712
// al_vehs := Delete ( al_vehs , 1 ) ;
17692: LD_ADDR_EXP 45
17696: PUSH
17697: LD_EXP 45
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 3
17709: ST_TO_ADDR
17710: GO 17689
17712: POP
17713: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17714: LD_EXP 39
17718: PUSH
17719: LD_INT 0
17721: EQUAL
17722: PUSH
17723: LD_OWVAR 1
17727: PUSH
17728: LD_INT 23100
17730: MOD
17731: PUSH
17732: LD_INT 0
17734: EQUAL
17735: AND
17736: IFFALSE 17850
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: DOUBLE
17744: LD_INT 1
17746: DEC
17747: ST_TO_ADDR
17748: LD_INT 4
17750: PUSH
17751: LD_INT 5
17753: PUSH
17754: LD_INT 6
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 17848
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17771: LD_ADDR_EXP 45
17775: PUSH
17776: LD_EXP 45
17780: PUSH
17781: LD_INT 23
17783: ADD
17784: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17785: LD_ADDR_EXP 45
17789: PUSH
17790: LD_EXP 45
17794: PUSH
17795: LD_INT 1
17797: ADD
17798: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17799: LD_ADDR_EXP 45
17803: PUSH
17804: LD_EXP 45
17808: PUSH
17809: LD_INT 3
17811: ADD
17812: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17813: LD_ADDR_EXP 45
17817: PUSH
17818: LD_EXP 45
17822: PUSH
17823: LD_INT 46
17825: PUSH
17826: LD_INT 47
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 1
17835: PPUSH
17836: LD_INT 2
17838: PPUSH
17839: CALL_OW 12
17843: ARRAY
17844: ADD
17845: ST_TO_ADDR
// end ;
17846: GO 17768
17848: POP
17849: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17850: LD_INT 22
17852: PUSH
17853: LD_INT 7
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 34
17862: PUSH
17863: LD_INT 51
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PPUSH
17874: CALL_OW 69
17878: PUSH
17879: LD_INT 0
17881: EQUAL
17882: IFFALSE 17905
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17884: LD_EXP 50
17888: PPUSH
17889: LD_INT 21
17891: PPUSH
17892: LD_INT 1
17894: PPUSH
17895: LD_INT 3
17897: PPUSH
17898: LD_INT 51
17900: PPUSH
17901: CALL_OW 125
// if al_force and tick mod 10 10$00 = 0 then
17905: LD_EXP 39
17909: PUSH
17910: LD_OWVAR 1
17914: PUSH
17915: LD_INT 21000
17917: MOD
17918: PUSH
17919: LD_INT 0
17921: EQUAL
17922: AND
17923: IFFALSE 17986
// begin for i = 1 to al_force do
17925: LD_ADDR_VAR 0 1
17929: PUSH
17930: DOUBLE
17931: LD_INT 1
17933: DEC
17934: ST_TO_ADDR
17935: LD_EXP 39
17939: PUSH
17940: FOR_TO
17941: IFFALSE 17984
// if GetTag ( al_force [ i ] ) <> 11 then
17943: LD_EXP 39
17947: PUSH
17948: LD_VAR 0 1
17952: ARRAY
17953: PPUSH
17954: CALL_OW 110
17958: PUSH
17959: LD_INT 11
17961: NONEQUAL
17962: IFFALSE 17982
// SetTag ( al_force [ i ] , 11 ) ;
17964: LD_EXP 39
17968: PUSH
17969: LD_VAR 0 1
17973: ARRAY
17974: PPUSH
17975: LD_INT 11
17977: PPUSH
17978: CALL_OW 109
17982: GO 17940
17984: POP
17985: POP
// end ; if al_force then
17986: LD_EXP 39
17990: IFFALSE 18099
// for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 39
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18097
// begin if GetTag ( al_force [ i ] ) = 11 then
18010: LD_EXP 39
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: EQUAL
18029: IFFALSE 18095
// begin if not HasTask ( al_force [ i ] ) then
18031: LD_EXP 39
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: CALL_OW 314
18046: NOT
18047: IFFALSE 18095
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18049: LD_EXP 39
18053: PUSH
18054: LD_VAR 0 1
18058: ARRAY
18059: PPUSH
18060: LD_INT 81
18062: PUSH
18063: LD_INT 7
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PPUSH
18075: LD_EXP 39
18079: PUSH
18080: LD_VAR 0 1
18084: ARRAY
18085: PPUSH
18086: CALL_OW 74
18090: PPUSH
18091: CALL_OW 115
// end ; end ;
18095: GO 18007
18097: POP
18098: POP
// end ; end_of_file
18099: PPOPN 4
18101: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18109: LD_ADDR_EXP 54
18113: PUSH
18114: LD_INT 9
18116: PUSH
18117: LD_INT 8
18119: PUSH
18120: LD_INT 7
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: LD_OWVAR 67
18132: ARRAY
18133: ST_TO_ADDR
// ar_force := [ ] ;
18134: LD_ADDR_EXP 53
18138: PUSH
18139: EMPTY
18140: ST_TO_ADDR
// RemoveAlliance ;
18141: CALL 15930 0 0
// RemoveEnvironmentArea ( evn ) ;
18145: LD_INT 17
18147: PPUSH
18148: CALL_OW 355
// your_side := 2 ;
18152: LD_ADDR_OWVAR 2
18156: PUSH
18157: LD_INT 2
18159: ST_TO_ADDR
// uc_side := 2 ;
18160: LD_ADDR_OWVAR 20
18164: PUSH
18165: LD_INT 2
18167: ST_TO_ADDR
// uc_nation := nation_arabian ;
18168: LD_ADDR_OWVAR 21
18172: PUSH
18173: LD_INT 2
18175: ST_TO_ADDR
// hc_gallery :=  ;
18176: LD_ADDR_OWVAR 33
18180: PUSH
18181: LD_STRING 
18183: ST_TO_ADDR
// hc_name :=  ;
18184: LD_ADDR_OWVAR 26
18188: PUSH
18189: LD_STRING 
18191: ST_TO_ADDR
// hc_importance := 0 ;
18192: LD_ADDR_OWVAR 32
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// for i = 1 to 20 do
18200: LD_ADDR_VAR 0 2
18204: PUSH
18205: DOUBLE
18206: LD_INT 1
18208: DEC
18209: ST_TO_ADDR
18210: LD_INT 20
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18279
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18216: LD_INT 0
18218: PPUSH
18219: LD_INT 1
18221: PPUSH
18222: LD_INT 4
18224: PPUSH
18225: CALL_OW 12
18229: PPUSH
18230: LD_EXP 54
18234: PPUSH
18235: CALL_OW 380
// un := CreateHuman ;
18239: LD_ADDR_VAR 0 4
18243: PUSH
18244: CALL_OW 44
18248: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18249: LD_VAR 0 4
18253: PPUSH
18254: LD_INT 2
18256: PPUSH
18257: CALL_OW 233
// ar_force := ar_force ^ un ;
18261: LD_ADDR_EXP 53
18265: PUSH
18266: LD_EXP 53
18270: PUSH
18271: LD_VAR 0 4
18275: ADD
18276: ST_TO_ADDR
// end ;
18277: GO 18213
18279: POP
18280: POP
// hc_importance := 100 ;
18281: LD_ADDR_OWVAR 32
18285: PUSH
18286: LD_INT 100
18288: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18289: LD_INT 1
18291: PPUSH
18292: LD_INT 11
18294: PPUSH
18295: LD_EXP 54
18299: PPUSH
18300: CALL_OW 380
// ar_commander := CreateHuman ;
18304: LD_ADDR_EXP 52
18308: PUSH
18309: CALL_OW 44
18313: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18314: LD_EXP 52
18318: PPUSH
18319: LD_INT 2
18321: PPUSH
18322: CALL_OW 233
// player_commander := ar_commander ;
18326: LD_ADDR_EXP 11
18330: PUSH
18331: LD_EXP 52
18335: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18336: LD_ADDR_VAR 0 5
18340: PUSH
18341: LD_STRING text
18343: PPUSH
18344: LD_INT 14
18346: PUSH
18347: LD_INT 13
18349: PUSH
18350: LD_INT 12
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: PUSH
18358: LD_OWVAR 67
18362: ARRAY
18363: PPUSH
18364: LD_INT 14
18366: PUSH
18367: LD_INT 13
18369: PUSH
18370: LD_INT 12
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: PUSH
18378: LD_OWVAR 67
18382: ARRAY
18383: PPUSH
18384: LD_INT -5
18386: PUSH
18387: LD_EXP 52
18391: PUSH
18392: LD_INT -3
18394: PUSH
18395: LD_INT -2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: PUSH
18404: LD_EXP 53
18408: ADD
18409: PPUSH
18410: LD_INT 1
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 4
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 8
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 42
18450: ST_TO_ADDR
// team := team ^ ar_commander ;
18451: LD_ADDR_VAR 0 5
18455: PUSH
18456: LD_VAR 0 5
18460: PUSH
18461: LD_EXP 52
18465: ADD
18466: ST_TO_ADDR
// for i = 1 to team do
18467: LD_ADDR_VAR 0 2
18471: PUSH
18472: DOUBLE
18473: LD_INT 1
18475: DEC
18476: ST_TO_ADDR
18477: LD_VAR 0 5
18481: PUSH
18482: FOR_TO
18483: IFFALSE 18508
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18485: LD_VAR 0 5
18489: PUSH
18490: LD_VAR 0 2
18494: ARRAY
18495: PPUSH
18496: LD_INT 16
18498: PPUSH
18499: LD_INT 0
18501: PPUSH
18502: CALL_OW 49
18506: GO 18482
18508: POP
18509: POP
// uc_side := 0 ;
18510: LD_ADDR_OWVAR 20
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// uc_nation := 0 ;
18518: LD_ADDR_OWVAR 21
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
// vc_chassis := 31 ;
18526: LD_ADDR_OWVAR 37
18530: PUSH
18531: LD_INT 31
18533: ST_TO_ADDR
// vc_control := control_rider ;
18534: LD_ADDR_OWVAR 38
18538: PUSH
18539: LD_INT 4
18541: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18542: CALL_OW 45
18546: PPUSH
18547: LD_INT 96
18549: PPUSH
18550: LD_INT 20
18552: PPUSH
18553: LD_INT 0
18555: PPUSH
18556: CALL_OW 48
// end ; end_of_file
18560: LD_VAR 0 1
18564: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18565: LD_INT 0
18567: PPUSH
// ar_miner := 81 ;
18568: LD_ADDR_EXP 62
18572: PUSH
18573: LD_INT 81
18575: ST_TO_ADDR
// ar_crane := 88 ;
18576: LD_ADDR_EXP 61
18580: PUSH
18581: LD_INT 88
18583: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18584: LD_ADDR_EXP 56
18588: PUSH
18589: LD_INT 89
18591: ST_TO_ADDR
// us_hack := 99 ;
18592: LD_ADDR_EXP 57
18596: PUSH
18597: LD_INT 99
18599: ST_TO_ADDR
// us_artillery := 97 ;
18600: LD_ADDR_EXP 58
18604: PUSH
18605: LD_INT 97
18607: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18608: LD_ADDR_EXP 59
18612: PUSH
18613: LD_INT 91
18615: ST_TO_ADDR
// ar_mortar := 92 ;
18616: LD_ADDR_EXP 60
18620: PUSH
18621: LD_INT 92
18623: ST_TO_ADDR
// ru_radar := 98 ;
18624: LD_ADDR_EXP 55
18628: PUSH
18629: LD_INT 98
18631: ST_TO_ADDR
// tech_Artillery := 80 ;
18632: LD_ADDR_EXP 63
18636: PUSH
18637: LD_INT 80
18639: ST_TO_ADDR
// tech_RadMat := 81 ;
18640: LD_ADDR_EXP 64
18644: PUSH
18645: LD_INT 81
18647: ST_TO_ADDR
// tech_BasicTools := 82 ;
18648: LD_ADDR_EXP 65
18652: PUSH
18653: LD_INT 82
18655: ST_TO_ADDR
// tech_Cargo := 83 ;
18656: LD_ADDR_EXP 66
18660: PUSH
18661: LD_INT 83
18663: ST_TO_ADDR
// tech_Track := 84 ;
18664: LD_ADDR_EXP 67
18668: PUSH
18669: LD_INT 84
18671: ST_TO_ADDR
// tech_Crane := 85 ;
18672: LD_ADDR_EXP 68
18676: PUSH
18677: LD_INT 85
18679: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18680: LD_ADDR_EXP 69
18684: PUSH
18685: LD_INT 86
18687: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18688: LD_ADDR_EXP 70
18692: PUSH
18693: LD_INT 87
18695: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18696: LD_ADDR_EXP 71
18700: PUSH
18701: LD_INT 88
18703: ST_TO_ADDR
// class_mastodont := 31 ;
18704: LD_ADDR_EXP 72
18708: PUSH
18709: LD_INT 31
18711: ST_TO_ADDR
// class_horse := 21 ;
18712: LD_ADDR_EXP 73
18716: PUSH
18717: LD_INT 21
18719: ST_TO_ADDR
// end ;
18720: LD_VAR 0 1
18724: RET
// every 1 do
18725: GO 18727
18727: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18728: CALL 18565 0 0
18732: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18733: LD_INT 0
18735: PPUSH
// if p2 = 100 then
18736: LD_VAR 0 2
18740: PUSH
18741: LD_INT 100
18743: EQUAL
18744: IFFALSE 19693
// begin if not StreamModeActive then
18746: LD_EXP 74
18750: NOT
18751: IFFALSE 18761
// StreamModeActive := true ;
18753: LD_ADDR_EXP 74
18757: PUSH
18758: LD_INT 1
18760: ST_TO_ADDR
// if p3 = 0 then
18761: LD_VAR 0 3
18765: PUSH
18766: LD_INT 0
18768: EQUAL
18769: IFFALSE 18775
// InitStreamMode ;
18771: CALL 19853 0 0
// if p3 = 1 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_INT 1
18782: EQUAL
18783: IFFALSE 18793
// sRocket := true ;
18785: LD_ADDR_EXP 79
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 2 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 2
18800: EQUAL
18801: IFFALSE 18811
// sSpeed := true ;
18803: LD_ADDR_EXP 78
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// if p3 = 3 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 3
18818: EQUAL
18819: IFFALSE 18829
// sEngine := true ;
18821: LD_ADDR_EXP 80
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// if p3 = 4 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 4
18836: EQUAL
18837: IFFALSE 18847
// sSpec := true ;
18839: LD_ADDR_EXP 77
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// if p3 = 5 then
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 5
18854: EQUAL
18855: IFFALSE 18865
// sLevel := true ;
18857: LD_ADDR_EXP 81
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 6 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 6
18872: EQUAL
18873: IFFALSE 18883
// sArmoury := true ;
18875: LD_ADDR_EXP 82
18879: PUSH
18880: LD_INT 1
18882: ST_TO_ADDR
// if p3 = 7 then
18883: LD_VAR 0 3
18887: PUSH
18888: LD_INT 7
18890: EQUAL
18891: IFFALSE 18901
// sRadar := true ;
18893: LD_ADDR_EXP 83
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 8 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 8
18908: EQUAL
18909: IFFALSE 18919
// sBunker := true ;
18911: LD_ADDR_EXP 84
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// if p3 = 9 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 9
18926: EQUAL
18927: IFFALSE 18937
// sHack := true ;
18929: LD_ADDR_EXP 85
18933: PUSH
18934: LD_INT 1
18936: ST_TO_ADDR
// if p3 = 10 then
18937: LD_VAR 0 3
18941: PUSH
18942: LD_INT 10
18944: EQUAL
18945: IFFALSE 18955
// sFire := true ;
18947: LD_ADDR_EXP 86
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// if p3 = 11 then
18955: LD_VAR 0 3
18959: PUSH
18960: LD_INT 11
18962: EQUAL
18963: IFFALSE 18973
// sRefresh := true ;
18965: LD_ADDR_EXP 87
18969: PUSH
18970: LD_INT 1
18972: ST_TO_ADDR
// if p3 = 12 then
18973: LD_VAR 0 3
18977: PUSH
18978: LD_INT 12
18980: EQUAL
18981: IFFALSE 18991
// sExp := true ;
18983: LD_ADDR_EXP 88
18987: PUSH
18988: LD_INT 1
18990: ST_TO_ADDR
// if p3 = 13 then
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 13
18998: EQUAL
18999: IFFALSE 19009
// sDepot := true ;
19001: LD_ADDR_EXP 89
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// if p3 = 14 then
19009: LD_VAR 0 3
19013: PUSH
19014: LD_INT 14
19016: EQUAL
19017: IFFALSE 19027
// sFlag := true ;
19019: LD_ADDR_EXP 90
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if p3 = 15 then
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 15
19034: EQUAL
19035: IFFALSE 19045
// sKamikadze := true ;
19037: LD_ADDR_EXP 98
19041: PUSH
19042: LD_INT 1
19044: ST_TO_ADDR
// if p3 = 16 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_INT 16
19052: EQUAL
19053: IFFALSE 19063
// sTroll := true ;
19055: LD_ADDR_EXP 99
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// if p3 = 17 then
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 17
19070: EQUAL
19071: IFFALSE 19081
// sSlow := true ;
19073: LD_ADDR_EXP 100
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// if p3 = 18 then
19081: LD_VAR 0 3
19085: PUSH
19086: LD_INT 18
19088: EQUAL
19089: IFFALSE 19099
// sLack := true ;
19091: LD_ADDR_EXP 101
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// if p3 = 19 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 19
19106: EQUAL
19107: IFFALSE 19117
// sTank := true ;
19109: LD_ADDR_EXP 103
19113: PUSH
19114: LD_INT 1
19116: ST_TO_ADDR
// if p3 = 20 then
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 20
19124: EQUAL
19125: IFFALSE 19135
// sRemote := true ;
19127: LD_ADDR_EXP 104
19131: PUSH
19132: LD_INT 1
19134: ST_TO_ADDR
// if p3 = 21 then
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 21
19142: EQUAL
19143: IFFALSE 19153
// sPowell := true ;
19145: LD_ADDR_EXP 105
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// if p3 = 22 then
19153: LD_VAR 0 3
19157: PUSH
19158: LD_INT 22
19160: EQUAL
19161: IFFALSE 19171
// sTeleport := true ;
19163: LD_ADDR_EXP 108
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// if p3 = 23 then
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 23
19178: EQUAL
19179: IFFALSE 19189
// sOilTower := true ;
19181: LD_ADDR_EXP 110
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if p3 = 24 then
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 24
19196: EQUAL
19197: IFFALSE 19207
// sShovel := true ;
19199: LD_ADDR_EXP 111
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// if p3 = 25 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 25
19214: EQUAL
19215: IFFALSE 19225
// sSheik := true ;
19217: LD_ADDR_EXP 112
19221: PUSH
19222: LD_INT 1
19224: ST_TO_ADDR
// if p3 = 26 then
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 26
19232: EQUAL
19233: IFFALSE 19243
// sEarthquake := true ;
19235: LD_ADDR_EXP 114
19239: PUSH
19240: LD_INT 1
19242: ST_TO_ADDR
// if p3 = 27 then
19243: LD_VAR 0 3
19247: PUSH
19248: LD_INT 27
19250: EQUAL
19251: IFFALSE 19261
// sAI := true ;
19253: LD_ADDR_EXP 115
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// if p3 = 28 then
19261: LD_VAR 0 3
19265: PUSH
19266: LD_INT 28
19268: EQUAL
19269: IFFALSE 19279
// sCargo := true ;
19271: LD_ADDR_EXP 118
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 29 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 29
19286: EQUAL
19287: IFFALSE 19297
// sDLaser := true ;
19289: LD_ADDR_EXP 119
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 30 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 30
19304: EQUAL
19305: IFFALSE 19315
// sExchange := true ;
19307: LD_ADDR_EXP 120
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// if p3 = 31 then
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 31
19322: EQUAL
19323: IFFALSE 19333
// sFac := true ;
19325: LD_ADDR_EXP 121
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// if p3 = 32 then
19333: LD_VAR 0 3
19337: PUSH
19338: LD_INT 32
19340: EQUAL
19341: IFFALSE 19351
// sPower := true ;
19343: LD_ADDR_EXP 122
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 33 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 33
19358: EQUAL
19359: IFFALSE 19369
// sRandom := true ;
19361: LD_ADDR_EXP 123
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 34 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 34
19376: EQUAL
19377: IFFALSE 19387
// sShield := true ;
19379: LD_ADDR_EXP 124
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 35 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 35
19394: EQUAL
19395: IFFALSE 19405
// sTime := true ;
19397: LD_ADDR_EXP 125
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 36 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 36
19412: EQUAL
19413: IFFALSE 19423
// sTools := true ;
19415: LD_ADDR_EXP 126
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 101 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 101
19430: EQUAL
19431: IFFALSE 19441
// sSold := true ;
19433: LD_ADDR_EXP 91
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 102 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 102
19448: EQUAL
19449: IFFALSE 19459
// sDiff := true ;
19451: LD_ADDR_EXP 92
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 103 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 103
19466: EQUAL
19467: IFFALSE 19477
// sFog := true ;
19469: LD_ADDR_EXP 95
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 104 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 104
19484: EQUAL
19485: IFFALSE 19495
// sReset := true ;
19487: LD_ADDR_EXP 96
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 105 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 105
19502: EQUAL
19503: IFFALSE 19513
// sSun := true ;
19505: LD_ADDR_EXP 97
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 106 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 106
19520: EQUAL
19521: IFFALSE 19531
// sTiger := true ;
19523: LD_ADDR_EXP 93
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 107 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 107
19538: EQUAL
19539: IFFALSE 19549
// sBomb := true ;
19541: LD_ADDR_EXP 94
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 108 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 108
19556: EQUAL
19557: IFFALSE 19567
// sWound := true ;
19559: LD_ADDR_EXP 102
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// if p3 = 109 then
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 109
19574: EQUAL
19575: IFFALSE 19585
// sBetray := true ;
19577: LD_ADDR_EXP 106
19581: PUSH
19582: LD_INT 1
19584: ST_TO_ADDR
// if p3 = 110 then
19585: LD_VAR 0 3
19589: PUSH
19590: LD_INT 110
19592: EQUAL
19593: IFFALSE 19603
// sContamin := true ;
19595: LD_ADDR_EXP 107
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if p3 = 111 then
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 111
19610: EQUAL
19611: IFFALSE 19621
// sOil := true ;
19613: LD_ADDR_EXP 109
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// if p3 = 112 then
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 112
19628: EQUAL
19629: IFFALSE 19639
// sStu := true ;
19631: LD_ADDR_EXP 113
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// if p3 = 113 then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 113
19646: EQUAL
19647: IFFALSE 19657
// sBazooka := true ;
19649: LD_ADDR_EXP 116
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// if p3 = 114 then
19657: LD_VAR 0 3
19661: PUSH
19662: LD_INT 114
19664: EQUAL
19665: IFFALSE 19675
// sMortar := true ;
19667: LD_ADDR_EXP 117
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// if p3 = 115 then
19675: LD_VAR 0 3
19679: PUSH
19680: LD_INT 115
19682: EQUAL
19683: IFFALSE 19693
// sRanger := true ;
19685: LD_ADDR_EXP 127
19689: PUSH
19690: LD_INT 1
19692: ST_TO_ADDR
// end ; if p2 = 101 then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 101
19700: EQUAL
19701: IFFALSE 19829
// begin case p3 of 1 :
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 1
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19723
19716: POP
// hHackUnlimitedResources ; 2 :
19717: CALL 30866 0 0
19721: GO 19829
19723: LD_INT 2
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19738
19731: POP
// hHackSetLevel10 ; 3 :
19732: CALL 30999 0 0
19736: GO 19829
19738: LD_INT 3
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19753
19746: POP
// hHackSetLevel10YourUnits ; 4 :
19747: CALL 31084 0 0
19751: GO 19829
19753: LD_INT 4
19755: DOUBLE
19756: EQUAL
19757: IFTRUE 19761
19759: GO 19768
19761: POP
// hHackInvincible ; 5 :
19762: CALL 31532 0 0
19766: GO 19829
19768: LD_INT 5
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19783
19776: POP
// hHackInvisible ; 6 :
19777: CALL 31643 0 0
19781: GO 19829
19783: LD_INT 6
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19798
19791: POP
// hHackChangeYourSide ; 7 :
19792: CALL 31700 0 0
19796: GO 19829
19798: LD_INT 7
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19813
19806: POP
// hHackChangeUnitSide ; 8 :
19807: CALL 31742 0 0
19811: GO 19829
19813: LD_INT 8
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19828
19821: POP
// hHackFog ; end ;
19822: CALL 31843 0 0
19826: GO 19829
19828: POP
// end ; end ;
19829: LD_VAR 0 7
19833: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19834: GO 19836
19836: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19837: LD_STRING initStreamRollete();
19839: PPUSH
19840: CALL_OW 559
// InitStreamMode ;
19844: CALL 19853 0 0
// DefineStreamItems ( ) ;
19848: CALL 20293 0 0
// end ;
19852: END
// function InitStreamMode ; begin
19853: LD_INT 0
19855: PPUSH
// streamModeActive := false ;
19856: LD_ADDR_EXP 74
19860: PUSH
19861: LD_INT 0
19863: ST_TO_ADDR
// normalCounter := 36 ;
19864: LD_ADDR_EXP 75
19868: PUSH
19869: LD_INT 36
19871: ST_TO_ADDR
// hardcoreCounter := 16 ;
19872: LD_ADDR_EXP 76
19876: PUSH
19877: LD_INT 16
19879: ST_TO_ADDR
// sRocket := false ;
19880: LD_ADDR_EXP 79
19884: PUSH
19885: LD_INT 0
19887: ST_TO_ADDR
// sSpeed := false ;
19888: LD_ADDR_EXP 78
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// sEngine := false ;
19896: LD_ADDR_EXP 80
19900: PUSH
19901: LD_INT 0
19903: ST_TO_ADDR
// sSpec := false ;
19904: LD_ADDR_EXP 77
19908: PUSH
19909: LD_INT 0
19911: ST_TO_ADDR
// sLevel := false ;
19912: LD_ADDR_EXP 81
19916: PUSH
19917: LD_INT 0
19919: ST_TO_ADDR
// sArmoury := false ;
19920: LD_ADDR_EXP 82
19924: PUSH
19925: LD_INT 0
19927: ST_TO_ADDR
// sRadar := false ;
19928: LD_ADDR_EXP 83
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// sBunker := false ;
19936: LD_ADDR_EXP 84
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// sHack := false ;
19944: LD_ADDR_EXP 85
19948: PUSH
19949: LD_INT 0
19951: ST_TO_ADDR
// sFire := false ;
19952: LD_ADDR_EXP 86
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// sRefresh := false ;
19960: LD_ADDR_EXP 87
19964: PUSH
19965: LD_INT 0
19967: ST_TO_ADDR
// sExp := false ;
19968: LD_ADDR_EXP 88
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// sDepot := false ;
19976: LD_ADDR_EXP 89
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// sFlag := false ;
19984: LD_ADDR_EXP 90
19988: PUSH
19989: LD_INT 0
19991: ST_TO_ADDR
// sKamikadze := false ;
19992: LD_ADDR_EXP 98
19996: PUSH
19997: LD_INT 0
19999: ST_TO_ADDR
// sTroll := false ;
20000: LD_ADDR_EXP 99
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sSlow := false ;
20008: LD_ADDR_EXP 100
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sLack := false ;
20016: LD_ADDR_EXP 101
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// sTank := false ;
20024: LD_ADDR_EXP 103
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// sRemote := false ;
20032: LD_ADDR_EXP 104
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// sPowell := false ;
20040: LD_ADDR_EXP 105
20044: PUSH
20045: LD_INT 0
20047: ST_TO_ADDR
// sTeleport := false ;
20048: LD_ADDR_EXP 108
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// sOilTower := false ;
20056: LD_ADDR_EXP 110
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// sShovel := false ;
20064: LD_ADDR_EXP 111
20068: PUSH
20069: LD_INT 0
20071: ST_TO_ADDR
// sSheik := false ;
20072: LD_ADDR_EXP 112
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sEarthquake := false ;
20080: LD_ADDR_EXP 114
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sAI := false ;
20088: LD_ADDR_EXP 115
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sCargo := false ;
20096: LD_ADDR_EXP 118
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sDLaser := false ;
20104: LD_ADDR_EXP 119
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sExchange := false ;
20112: LD_ADDR_EXP 120
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sFac := false ;
20120: LD_ADDR_EXP 121
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sPower := false ;
20128: LD_ADDR_EXP 122
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sRandom := false ;
20136: LD_ADDR_EXP 123
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sShield := false ;
20144: LD_ADDR_EXP 124
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sTime := false ;
20152: LD_ADDR_EXP 125
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sTools := false ;
20160: LD_ADDR_EXP 126
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sSold := false ;
20168: LD_ADDR_EXP 91
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sDiff := false ;
20176: LD_ADDR_EXP 92
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sFog := false ;
20184: LD_ADDR_EXP 95
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sReset := false ;
20192: LD_ADDR_EXP 96
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sSun := false ;
20200: LD_ADDR_EXP 97
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sTiger := false ;
20208: LD_ADDR_EXP 93
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sBomb := false ;
20216: LD_ADDR_EXP 94
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sWound := false ;
20224: LD_ADDR_EXP 102
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sBetray := false ;
20232: LD_ADDR_EXP 106
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sContamin := false ;
20240: LD_ADDR_EXP 107
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sOil := false ;
20248: LD_ADDR_EXP 109
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sStu := false ;
20256: LD_ADDR_EXP 113
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sBazooka := false ;
20264: LD_ADDR_EXP 116
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sMortar := false ;
20272: LD_ADDR_EXP 117
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sRanger := false ;
20280: LD_ADDR_EXP 127
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// end ;
20288: LD_VAR 0 1
20292: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20293: LD_INT 0
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
// result := [ ] ;
20300: LD_ADDR_VAR 0 1
20304: PUSH
20305: EMPTY
20306: ST_TO_ADDR
// if campaign_id = 1 then
20307: LD_OWVAR 69
20311: PUSH
20312: LD_INT 1
20314: EQUAL
20315: IFFALSE 23253
// begin case mission_number of 1 :
20317: LD_OWVAR 70
20321: PUSH
20322: LD_INT 1
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20394
20330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: LD_INT 4
20341: PUSH
20342: LD_INT 11
20344: PUSH
20345: LD_INT 12
20347: PUSH
20348: LD_INT 15
20350: PUSH
20351: LD_INT 16
20353: PUSH
20354: LD_INT 22
20356: PUSH
20357: LD_INT 23
20359: PUSH
20360: LD_INT 26
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 101
20376: PUSH
20377: LD_INT 102
20379: PUSH
20380: LD_INT 106
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: ST_TO_ADDR
20392: GO 23251
20394: LD_INT 2
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20474
20402: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 4
20413: PUSH
20414: LD_INT 11
20416: PUSH
20417: LD_INT 12
20419: PUSH
20420: LD_INT 15
20422: PUSH
20423: LD_INT 16
20425: PUSH
20426: LD_INT 22
20428: PUSH
20429: LD_INT 23
20431: PUSH
20432: LD_INT 26
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 101
20448: PUSH
20449: LD_INT 102
20451: PUSH
20452: LD_INT 105
20454: PUSH
20455: LD_INT 106
20457: PUSH
20458: LD_INT 108
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: ST_TO_ADDR
20472: GO 23251
20474: LD_INT 3
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20558
20482: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20483: LD_ADDR_VAR 0 1
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 4
20493: PUSH
20494: LD_INT 5
20496: PUSH
20497: LD_INT 11
20499: PUSH
20500: LD_INT 12
20502: PUSH
20503: LD_INT 15
20505: PUSH
20506: LD_INT 16
20508: PUSH
20509: LD_INT 22
20511: PUSH
20512: LD_INT 26
20514: PUSH
20515: LD_INT 36
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 101
20532: PUSH
20533: LD_INT 102
20535: PUSH
20536: LD_INT 105
20538: PUSH
20539: LD_INT 106
20541: PUSH
20542: LD_INT 108
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: ST_TO_ADDR
20556: GO 23251
20558: LD_INT 4
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20650
20566: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20567: LD_ADDR_VAR 0 1
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 4
20577: PUSH
20578: LD_INT 5
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: LD_INT 11
20586: PUSH
20587: LD_INT 12
20589: PUSH
20590: LD_INT 15
20592: PUSH
20593: LD_INT 16
20595: PUSH
20596: LD_INT 22
20598: PUSH
20599: LD_INT 23
20601: PUSH
20602: LD_INT 26
20604: PUSH
20605: LD_INT 36
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 101
20624: PUSH
20625: LD_INT 102
20627: PUSH
20628: LD_INT 105
20630: PUSH
20631: LD_INT 106
20633: PUSH
20634: LD_INT 108
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 23251
20650: LD_INT 5
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20758
20658: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20659: LD_ADDR_VAR 0 1
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 4
20669: PUSH
20670: LD_INT 5
20672: PUSH
20673: LD_INT 6
20675: PUSH
20676: LD_INT 8
20678: PUSH
20679: LD_INT 11
20681: PUSH
20682: LD_INT 12
20684: PUSH
20685: LD_INT 15
20687: PUSH
20688: LD_INT 16
20690: PUSH
20691: LD_INT 22
20693: PUSH
20694: LD_INT 23
20696: PUSH
20697: LD_INT 25
20699: PUSH
20700: LD_INT 26
20702: PUSH
20703: LD_INT 36
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 101
20724: PUSH
20725: LD_INT 102
20727: PUSH
20728: LD_INT 105
20730: PUSH
20731: LD_INT 106
20733: PUSH
20734: LD_INT 108
20736: PUSH
20737: LD_INT 109
20739: PUSH
20740: LD_INT 112
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: ST_TO_ADDR
20756: GO 23251
20758: LD_INT 6
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20886
20766: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: LD_INT 4
20777: PUSH
20778: LD_INT 5
20780: PUSH
20781: LD_INT 6
20783: PUSH
20784: LD_INT 8
20786: PUSH
20787: LD_INT 11
20789: PUSH
20790: LD_INT 12
20792: PUSH
20793: LD_INT 15
20795: PUSH
20796: LD_INT 16
20798: PUSH
20799: LD_INT 20
20801: PUSH
20802: LD_INT 21
20804: PUSH
20805: LD_INT 22
20807: PUSH
20808: LD_INT 23
20810: PUSH
20811: LD_INT 25
20813: PUSH
20814: LD_INT 26
20816: PUSH
20817: LD_INT 30
20819: PUSH
20820: LD_INT 31
20822: PUSH
20823: LD_INT 32
20825: PUSH
20826: LD_INT 36
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 101
20852: PUSH
20853: LD_INT 102
20855: PUSH
20856: LD_INT 105
20858: PUSH
20859: LD_INT 106
20861: PUSH
20862: LD_INT 108
20864: PUSH
20865: LD_INT 109
20867: PUSH
20868: LD_INT 112
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: ST_TO_ADDR
20884: GO 23251
20886: LD_INT 7
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20994
20894: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20895: LD_ADDR_VAR 0 1
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 4
20905: PUSH
20906: LD_INT 5
20908: PUSH
20909: LD_INT 7
20911: PUSH
20912: LD_INT 11
20914: PUSH
20915: LD_INT 12
20917: PUSH
20918: LD_INT 15
20920: PUSH
20921: LD_INT 16
20923: PUSH
20924: LD_INT 20
20926: PUSH
20927: LD_INT 21
20929: PUSH
20930: LD_INT 22
20932: PUSH
20933: LD_INT 23
20935: PUSH
20936: LD_INT 25
20938: PUSH
20939: LD_INT 26
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 101
20960: PUSH
20961: LD_INT 102
20963: PUSH
20964: LD_INT 103
20966: PUSH
20967: LD_INT 105
20969: PUSH
20970: LD_INT 106
20972: PUSH
20973: LD_INT 108
20975: PUSH
20976: LD_INT 112
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 23251
20994: LD_INT 8
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21130
21002: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21003: LD_ADDR_VAR 0 1
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 4
21013: PUSH
21014: LD_INT 5
21016: PUSH
21017: LD_INT 6
21019: PUSH
21020: LD_INT 7
21022: PUSH
21023: LD_INT 8
21025: PUSH
21026: LD_INT 11
21028: PUSH
21029: LD_INT 12
21031: PUSH
21032: LD_INT 15
21034: PUSH
21035: LD_INT 16
21037: PUSH
21038: LD_INT 20
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 22
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: LD_INT 25
21052: PUSH
21053: LD_INT 26
21055: PUSH
21056: LD_INT 30
21058: PUSH
21059: LD_INT 31
21061: PUSH
21062: LD_INT 32
21064: PUSH
21065: LD_INT 36
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 101
21092: PUSH
21093: LD_INT 102
21095: PUSH
21096: LD_INT 103
21098: PUSH
21099: LD_INT 105
21101: PUSH
21102: LD_INT 106
21104: PUSH
21105: LD_INT 108
21107: PUSH
21108: LD_INT 109
21110: PUSH
21111: LD_INT 112
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: ST_TO_ADDR
21128: GO 23251
21130: LD_INT 9
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21274
21138: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21139: LD_ADDR_VAR 0 1
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: LD_INT 4
21149: PUSH
21150: LD_INT 5
21152: PUSH
21153: LD_INT 6
21155: PUSH
21156: LD_INT 7
21158: PUSH
21159: LD_INT 8
21161: PUSH
21162: LD_INT 11
21164: PUSH
21165: LD_INT 12
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 20
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 25
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: LD_INT 28
21194: PUSH
21195: LD_INT 30
21197: PUSH
21198: LD_INT 31
21200: PUSH
21201: LD_INT 32
21203: PUSH
21204: LD_INT 36
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 101
21232: PUSH
21233: LD_INT 102
21235: PUSH
21236: LD_INT 103
21238: PUSH
21239: LD_INT 105
21241: PUSH
21242: LD_INT 106
21244: PUSH
21245: LD_INT 108
21247: PUSH
21248: LD_INT 109
21250: PUSH
21251: LD_INT 112
21253: PUSH
21254: LD_INT 114
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: ST_TO_ADDR
21272: GO 23251
21274: LD_INT 10
21276: DOUBLE
21277: EQUAL
21278: IFTRUE 21282
21280: GO 21466
21282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: LD_INT 4
21293: PUSH
21294: LD_INT 5
21296: PUSH
21297: LD_INT 6
21299: PUSH
21300: LD_INT 7
21302: PUSH
21303: LD_INT 8
21305: PUSH
21306: LD_INT 9
21308: PUSH
21309: LD_INT 10
21311: PUSH
21312: LD_INT 11
21314: PUSH
21315: LD_INT 12
21317: PUSH
21318: LD_INT 13
21320: PUSH
21321: LD_INT 14
21323: PUSH
21324: LD_INT 15
21326: PUSH
21327: LD_INT 16
21329: PUSH
21330: LD_INT 17
21332: PUSH
21333: LD_INT 18
21335: PUSH
21336: LD_INT 19
21338: PUSH
21339: LD_INT 20
21341: PUSH
21342: LD_INT 21
21344: PUSH
21345: LD_INT 22
21347: PUSH
21348: LD_INT 23
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 25
21356: PUSH
21357: LD_INT 26
21359: PUSH
21360: LD_INT 28
21362: PUSH
21363: LD_INT 30
21365: PUSH
21366: LD_INT 31
21368: PUSH
21369: LD_INT 32
21371: PUSH
21372: LD_INT 36
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 101
21408: PUSH
21409: LD_INT 102
21411: PUSH
21412: LD_INT 103
21414: PUSH
21415: LD_INT 104
21417: PUSH
21418: LD_INT 105
21420: PUSH
21421: LD_INT 106
21423: PUSH
21424: LD_INT 107
21426: PUSH
21427: LD_INT 108
21429: PUSH
21430: LD_INT 109
21432: PUSH
21433: LD_INT 110
21435: PUSH
21436: LD_INT 111
21438: PUSH
21439: LD_INT 112
21441: PUSH
21442: LD_INT 114
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: ST_TO_ADDR
21464: GO 23251
21466: LD_INT 11
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21666
21474: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21475: LD_ADDR_VAR 0 1
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: LD_INT 4
21488: PUSH
21489: LD_INT 5
21491: PUSH
21492: LD_INT 6
21494: PUSH
21495: LD_INT 7
21497: PUSH
21498: LD_INT 8
21500: PUSH
21501: LD_INT 9
21503: PUSH
21504: LD_INT 10
21506: PUSH
21507: LD_INT 11
21509: PUSH
21510: LD_INT 12
21512: PUSH
21513: LD_INT 13
21515: PUSH
21516: LD_INT 14
21518: PUSH
21519: LD_INT 15
21521: PUSH
21522: LD_INT 16
21524: PUSH
21525: LD_INT 17
21527: PUSH
21528: LD_INT 18
21530: PUSH
21531: LD_INT 19
21533: PUSH
21534: LD_INT 20
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 22
21542: PUSH
21543: LD_INT 23
21545: PUSH
21546: LD_INT 24
21548: PUSH
21549: LD_INT 25
21551: PUSH
21552: LD_INT 26
21554: PUSH
21555: LD_INT 28
21557: PUSH
21558: LD_INT 30
21560: PUSH
21561: LD_INT 31
21563: PUSH
21564: LD_INT 32
21566: PUSH
21567: LD_INT 34
21569: PUSH
21570: LD_INT 36
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 101
21608: PUSH
21609: LD_INT 102
21611: PUSH
21612: LD_INT 103
21614: PUSH
21615: LD_INT 104
21617: PUSH
21618: LD_INT 105
21620: PUSH
21621: LD_INT 106
21623: PUSH
21624: LD_INT 107
21626: PUSH
21627: LD_INT 108
21629: PUSH
21630: LD_INT 109
21632: PUSH
21633: LD_INT 110
21635: PUSH
21636: LD_INT 111
21638: PUSH
21639: LD_INT 112
21641: PUSH
21642: LD_INT 114
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: ST_TO_ADDR
21664: GO 23251
21666: LD_INT 12
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21882
21674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21675: LD_ADDR_VAR 0 1
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 3
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: LD_INT 6
21697: PUSH
21698: LD_INT 7
21700: PUSH
21701: LD_INT 8
21703: PUSH
21704: LD_INT 9
21706: PUSH
21707: LD_INT 10
21709: PUSH
21710: LD_INT 11
21712: PUSH
21713: LD_INT 12
21715: PUSH
21716: LD_INT 13
21718: PUSH
21719: LD_INT 14
21721: PUSH
21722: LD_INT 15
21724: PUSH
21725: LD_INT 16
21727: PUSH
21728: LD_INT 17
21730: PUSH
21731: LD_INT 18
21733: PUSH
21734: LD_INT 19
21736: PUSH
21737: LD_INT 20
21739: PUSH
21740: LD_INT 21
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_INT 23
21748: PUSH
21749: LD_INT 24
21751: PUSH
21752: LD_INT 25
21754: PUSH
21755: LD_INT 26
21757: PUSH
21758: LD_INT 27
21760: PUSH
21761: LD_INT 28
21763: PUSH
21764: LD_INT 30
21766: PUSH
21767: LD_INT 31
21769: PUSH
21770: LD_INT 32
21772: PUSH
21773: LD_INT 33
21775: PUSH
21776: LD_INT 34
21778: PUSH
21779: LD_INT 36
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 101
21820: PUSH
21821: LD_INT 102
21823: PUSH
21824: LD_INT 103
21826: PUSH
21827: LD_INT 104
21829: PUSH
21830: LD_INT 105
21832: PUSH
21833: LD_INT 106
21835: PUSH
21836: LD_INT 107
21838: PUSH
21839: LD_INT 108
21841: PUSH
21842: LD_INT 109
21844: PUSH
21845: LD_INT 110
21847: PUSH
21848: LD_INT 111
21850: PUSH
21851: LD_INT 112
21853: PUSH
21854: LD_INT 113
21856: PUSH
21857: LD_INT 114
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: ST_TO_ADDR
21880: GO 23251
21882: LD_INT 13
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 22086
21890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21891: LD_ADDR_VAR 0 1
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 3
21904: PUSH
21905: LD_INT 4
21907: PUSH
21908: LD_INT 5
21910: PUSH
21911: LD_INT 8
21913: PUSH
21914: LD_INT 9
21916: PUSH
21917: LD_INT 10
21919: PUSH
21920: LD_INT 11
21922: PUSH
21923: LD_INT 12
21925: PUSH
21926: LD_INT 14
21928: PUSH
21929: LD_INT 15
21931: PUSH
21932: LD_INT 16
21934: PUSH
21935: LD_INT 17
21937: PUSH
21938: LD_INT 18
21940: PUSH
21941: LD_INT 19
21943: PUSH
21944: LD_INT 20
21946: PUSH
21947: LD_INT 21
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_INT 23
21955: PUSH
21956: LD_INT 24
21958: PUSH
21959: LD_INT 25
21961: PUSH
21962: LD_INT 26
21964: PUSH
21965: LD_INT 27
21967: PUSH
21968: LD_INT 28
21970: PUSH
21971: LD_INT 30
21973: PUSH
21974: LD_INT 31
21976: PUSH
21977: LD_INT 32
21979: PUSH
21980: LD_INT 33
21982: PUSH
21983: LD_INT 34
21985: PUSH
21986: LD_INT 36
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 101
22024: PUSH
22025: LD_INT 102
22027: PUSH
22028: LD_INT 103
22030: PUSH
22031: LD_INT 104
22033: PUSH
22034: LD_INT 105
22036: PUSH
22037: LD_INT 106
22039: PUSH
22040: LD_INT 107
22042: PUSH
22043: LD_INT 108
22045: PUSH
22046: LD_INT 109
22048: PUSH
22049: LD_INT 110
22051: PUSH
22052: LD_INT 111
22054: PUSH
22055: LD_INT 112
22057: PUSH
22058: LD_INT 113
22060: PUSH
22061: LD_INT 114
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: ST_TO_ADDR
22084: GO 23251
22086: LD_INT 14
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22306
22094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22095: LD_ADDR_VAR 0 1
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 3
22108: PUSH
22109: LD_INT 4
22111: PUSH
22112: LD_INT 5
22114: PUSH
22115: LD_INT 6
22117: PUSH
22118: LD_INT 7
22120: PUSH
22121: LD_INT 8
22123: PUSH
22124: LD_INT 9
22126: PUSH
22127: LD_INT 10
22129: PUSH
22130: LD_INT 11
22132: PUSH
22133: LD_INT 12
22135: PUSH
22136: LD_INT 13
22138: PUSH
22139: LD_INT 14
22141: PUSH
22142: LD_INT 15
22144: PUSH
22145: LD_INT 16
22147: PUSH
22148: LD_INT 17
22150: PUSH
22151: LD_INT 18
22153: PUSH
22154: LD_INT 19
22156: PUSH
22157: LD_INT 20
22159: PUSH
22160: LD_INT 21
22162: PUSH
22163: LD_INT 22
22165: PUSH
22166: LD_INT 23
22168: PUSH
22169: LD_INT 24
22171: PUSH
22172: LD_INT 25
22174: PUSH
22175: LD_INT 26
22177: PUSH
22178: LD_INT 27
22180: PUSH
22181: LD_INT 28
22183: PUSH
22184: LD_INT 29
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 101
22244: PUSH
22245: LD_INT 102
22247: PUSH
22248: LD_INT 103
22250: PUSH
22251: LD_INT 104
22253: PUSH
22254: LD_INT 105
22256: PUSH
22257: LD_INT 106
22259: PUSH
22260: LD_INT 107
22262: PUSH
22263: LD_INT 108
22265: PUSH
22266: LD_INT 109
22268: PUSH
22269: LD_INT 110
22271: PUSH
22272: LD_INT 111
22274: PUSH
22275: LD_INT 112
22277: PUSH
22278: LD_INT 113
22280: PUSH
22281: LD_INT 114
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: ST_TO_ADDR
22304: GO 23251
22306: LD_INT 15
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22526
22314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22315: LD_ADDR_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: LD_INT 4
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 6
22337: PUSH
22338: LD_INT 7
22340: PUSH
22341: LD_INT 8
22343: PUSH
22344: LD_INT 9
22346: PUSH
22347: LD_INT 10
22349: PUSH
22350: LD_INT 11
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 13
22358: PUSH
22359: LD_INT 14
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 17
22370: PUSH
22371: LD_INT 18
22373: PUSH
22374: LD_INT 19
22376: PUSH
22377: LD_INT 20
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 24
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 27
22400: PUSH
22401: LD_INT 28
22403: PUSH
22404: LD_INT 29
22406: PUSH
22407: LD_INT 30
22409: PUSH
22410: LD_INT 31
22412: PUSH
22413: LD_INT 32
22415: PUSH
22416: LD_INT 33
22418: PUSH
22419: LD_INT 34
22421: PUSH
22422: LD_INT 36
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 103
22470: PUSH
22471: LD_INT 104
22473: PUSH
22474: LD_INT 105
22476: PUSH
22477: LD_INT 106
22479: PUSH
22480: LD_INT 107
22482: PUSH
22483: LD_INT 108
22485: PUSH
22486: LD_INT 109
22488: PUSH
22489: LD_INT 110
22491: PUSH
22492: LD_INT 111
22494: PUSH
22495: LD_INT 112
22497: PUSH
22498: LD_INT 113
22500: PUSH
22501: LD_INT 114
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: ST_TO_ADDR
22524: GO 23251
22526: LD_INT 16
22528: DOUBLE
22529: EQUAL
22530: IFTRUE 22534
22532: GO 22658
22534: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22535: LD_ADDR_VAR 0 1
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: LD_INT 4
22545: PUSH
22546: LD_INT 5
22548: PUSH
22549: LD_INT 7
22551: PUSH
22552: LD_INT 11
22554: PUSH
22555: LD_INT 12
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 20
22566: PUSH
22567: LD_INT 21
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_INT 23
22575: PUSH
22576: LD_INT 25
22578: PUSH
22579: LD_INT 26
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 31
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 33
22593: PUSH
22594: LD_INT 34
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 101
22620: PUSH
22621: LD_INT 102
22623: PUSH
22624: LD_INT 103
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 108
22632: PUSH
22633: LD_INT 112
22635: PUSH
22636: LD_INT 113
22638: PUSH
22639: LD_INT 114
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: ST_TO_ADDR
22656: GO 23251
22658: LD_INT 17
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22878
22666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22667: LD_ADDR_VAR 0 1
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 3
22680: PUSH
22681: LD_INT 4
22683: PUSH
22684: LD_INT 5
22686: PUSH
22687: LD_INT 6
22689: PUSH
22690: LD_INT 7
22692: PUSH
22693: LD_INT 8
22695: PUSH
22696: LD_INT 9
22698: PUSH
22699: LD_INT 10
22701: PUSH
22702: LD_INT 11
22704: PUSH
22705: LD_INT 12
22707: PUSH
22708: LD_INT 13
22710: PUSH
22711: LD_INT 14
22713: PUSH
22714: LD_INT 15
22716: PUSH
22717: LD_INT 16
22719: PUSH
22720: LD_INT 17
22722: PUSH
22723: LD_INT 18
22725: PUSH
22726: LD_INT 19
22728: PUSH
22729: LD_INT 20
22731: PUSH
22732: LD_INT 21
22734: PUSH
22735: LD_INT 22
22737: PUSH
22738: LD_INT 23
22740: PUSH
22741: LD_INT 24
22743: PUSH
22744: LD_INT 25
22746: PUSH
22747: LD_INT 26
22749: PUSH
22750: LD_INT 27
22752: PUSH
22753: LD_INT 28
22755: PUSH
22756: LD_INT 29
22758: PUSH
22759: LD_INT 30
22761: PUSH
22762: LD_INT 31
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: LD_INT 34
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 101
22816: PUSH
22817: LD_INT 102
22819: PUSH
22820: LD_INT 103
22822: PUSH
22823: LD_INT 104
22825: PUSH
22826: LD_INT 105
22828: PUSH
22829: LD_INT 106
22831: PUSH
22832: LD_INT 107
22834: PUSH
22835: LD_INT 108
22837: PUSH
22838: LD_INT 109
22840: PUSH
22841: LD_INT 110
22843: PUSH
22844: LD_INT 111
22846: PUSH
22847: LD_INT 112
22849: PUSH
22850: LD_INT 113
22852: PUSH
22853: LD_INT 114
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: ST_TO_ADDR
22876: GO 23251
22878: LD_INT 18
22880: DOUBLE
22881: EQUAL
22882: IFTRUE 22886
22884: GO 23022
22886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22887: LD_ADDR_VAR 0 1
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 4
22897: PUSH
22898: LD_INT 5
22900: PUSH
22901: LD_INT 7
22903: PUSH
22904: LD_INT 11
22906: PUSH
22907: LD_INT 12
22909: PUSH
22910: LD_INT 15
22912: PUSH
22913: LD_INT 16
22915: PUSH
22916: LD_INT 20
22918: PUSH
22919: LD_INT 21
22921: PUSH
22922: LD_INT 22
22924: PUSH
22925: LD_INT 23
22927: PUSH
22928: LD_INT 25
22930: PUSH
22931: LD_INT 26
22933: PUSH
22934: LD_INT 30
22936: PUSH
22937: LD_INT 31
22939: PUSH
22940: LD_INT 32
22942: PUSH
22943: LD_INT 33
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 35
22951: PUSH
22952: LD_INT 36
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 101
22980: PUSH
22981: LD_INT 102
22983: PUSH
22984: LD_INT 103
22986: PUSH
22987: LD_INT 106
22989: PUSH
22990: LD_INT 108
22992: PUSH
22993: LD_INT 112
22995: PUSH
22996: LD_INT 113
22998: PUSH
22999: LD_INT 114
23001: PUSH
23002: LD_INT 115
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
23020: GO 23251
23022: LD_INT 19
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23250
23030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23031: LD_ADDR_VAR 0 1
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 3
23044: PUSH
23045: LD_INT 4
23047: PUSH
23048: LD_INT 5
23050: PUSH
23051: LD_INT 6
23053: PUSH
23054: LD_INT 7
23056: PUSH
23057: LD_INT 8
23059: PUSH
23060: LD_INT 9
23062: PUSH
23063: LD_INT 10
23065: PUSH
23066: LD_INT 11
23068: PUSH
23069: LD_INT 12
23071: PUSH
23072: LD_INT 13
23074: PUSH
23075: LD_INT 14
23077: PUSH
23078: LD_INT 15
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 17
23086: PUSH
23087: LD_INT 18
23089: PUSH
23090: LD_INT 19
23092: PUSH
23093: LD_INT 20
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 23
23104: PUSH
23105: LD_INT 24
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 26
23113: PUSH
23114: LD_INT 27
23116: PUSH
23117: LD_INT 28
23119: PUSH
23120: LD_INT 29
23122: PUSH
23123: LD_INT 30
23125: PUSH
23126: LD_INT 31
23128: PUSH
23129: LD_INT 32
23131: PUSH
23132: LD_INT 33
23134: PUSH
23135: LD_INT 34
23137: PUSH
23138: LD_INT 35
23140: PUSH
23141: LD_INT 36
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 101
23184: PUSH
23185: LD_INT 102
23187: PUSH
23188: LD_INT 103
23190: PUSH
23191: LD_INT 104
23193: PUSH
23194: LD_INT 105
23196: PUSH
23197: LD_INT 106
23199: PUSH
23200: LD_INT 107
23202: PUSH
23203: LD_INT 108
23205: PUSH
23206: LD_INT 109
23208: PUSH
23209: LD_INT 110
23211: PUSH
23212: LD_INT 111
23214: PUSH
23215: LD_INT 112
23217: PUSH
23218: LD_INT 113
23220: PUSH
23221: LD_INT 114
23223: PUSH
23224: LD_INT 115
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: ST_TO_ADDR
23248: GO 23251
23250: POP
// end else
23251: GO 23470
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23253: LD_ADDR_VAR 0 1
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 3
23266: PUSH
23267: LD_INT 4
23269: PUSH
23270: LD_INT 5
23272: PUSH
23273: LD_INT 6
23275: PUSH
23276: LD_INT 7
23278: PUSH
23279: LD_INT 8
23281: PUSH
23282: LD_INT 9
23284: PUSH
23285: LD_INT 10
23287: PUSH
23288: LD_INT 11
23290: PUSH
23291: LD_INT 12
23293: PUSH
23294: LD_INT 13
23296: PUSH
23297: LD_INT 14
23299: PUSH
23300: LD_INT 15
23302: PUSH
23303: LD_INT 16
23305: PUSH
23306: LD_INT 17
23308: PUSH
23309: LD_INT 18
23311: PUSH
23312: LD_INT 19
23314: PUSH
23315: LD_INT 20
23317: PUSH
23318: LD_INT 21
23320: PUSH
23321: LD_INT 22
23323: PUSH
23324: LD_INT 23
23326: PUSH
23327: LD_INT 24
23329: PUSH
23330: LD_INT 25
23332: PUSH
23333: LD_INT 26
23335: PUSH
23336: LD_INT 27
23338: PUSH
23339: LD_INT 28
23341: PUSH
23342: LD_INT 29
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 31
23350: PUSH
23351: LD_INT 32
23353: PUSH
23354: LD_INT 33
23356: PUSH
23357: LD_INT 34
23359: PUSH
23360: LD_INT 35
23362: PUSH
23363: LD_INT 36
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 101
23406: PUSH
23407: LD_INT 102
23409: PUSH
23410: LD_INT 103
23412: PUSH
23413: LD_INT 104
23415: PUSH
23416: LD_INT 105
23418: PUSH
23419: LD_INT 106
23421: PUSH
23422: LD_INT 107
23424: PUSH
23425: LD_INT 108
23427: PUSH
23428: LD_INT 109
23430: PUSH
23431: LD_INT 110
23433: PUSH
23434: LD_INT 111
23436: PUSH
23437: LD_INT 112
23439: PUSH
23440: LD_INT 113
23442: PUSH
23443: LD_INT 114
23445: PUSH
23446: LD_INT 115
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: ST_TO_ADDR
// if result then
23470: LD_VAR 0 1
23474: IFFALSE 23763
// begin normal :=  ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: LD_STRING 
23483: ST_TO_ADDR
// hardcore :=  ;
23484: LD_ADDR_VAR 0 4
23488: PUSH
23489: LD_STRING 
23491: ST_TO_ADDR
// for i = 1 to normalCounter do
23492: LD_ADDR_VAR 0 5
23496: PUSH
23497: DOUBLE
23498: LD_INT 1
23500: DEC
23501: ST_TO_ADDR
23502: LD_EXP 75
23506: PUSH
23507: FOR_TO
23508: IFFALSE 23609
// begin tmp := 0 ;
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_STRING 0
23517: ST_TO_ADDR
// if result [ 1 ] then
23518: LD_VAR 0 1
23522: PUSH
23523: LD_INT 1
23525: ARRAY
23526: IFFALSE 23591
// if result [ 1 ] [ 1 ] = i then
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 1
23535: ARRAY
23536: PUSH
23537: LD_INT 1
23539: ARRAY
23540: PUSH
23541: LD_VAR 0 5
23545: EQUAL
23546: IFFALSE 23591
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23548: LD_ADDR_VAR 0 1
23552: PUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: LD_VAR 0 1
23565: PUSH
23566: LD_INT 1
23568: ARRAY
23569: PPUSH
23570: LD_INT 1
23572: PPUSH
23573: CALL_OW 3
23577: PPUSH
23578: CALL_OW 1
23582: ST_TO_ADDR
// tmp := 1 ;
23583: LD_ADDR_VAR 0 2
23587: PUSH
23588: LD_STRING 1
23590: ST_TO_ADDR
// end ; normal := normal & tmp ;
23591: LD_ADDR_VAR 0 3
23595: PUSH
23596: LD_VAR 0 3
23600: PUSH
23601: LD_VAR 0 2
23605: STR
23606: ST_TO_ADDR
// end ;
23607: GO 23507
23609: POP
23610: POP
// for i = 1 to hardcoreCounter do
23611: LD_ADDR_VAR 0 5
23615: PUSH
23616: DOUBLE
23617: LD_INT 1
23619: DEC
23620: ST_TO_ADDR
23621: LD_EXP 76
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23732
// begin tmp := 0 ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_STRING 0
23636: ST_TO_ADDR
// if result [ 2 ] then
23637: LD_VAR 0 1
23641: PUSH
23642: LD_INT 2
23644: ARRAY
23645: IFFALSE 23714
// if result [ 2 ] [ 1 ] = 100 + i then
23647: LD_VAR 0 1
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: PUSH
23656: LD_INT 1
23658: ARRAY
23659: PUSH
23660: LD_INT 100
23662: PUSH
23663: LD_VAR 0 5
23667: PLUS
23668: EQUAL
23669: IFFALSE 23714
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23671: LD_ADDR_VAR 0 1
23675: PUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: LD_INT 2
23683: PPUSH
23684: LD_VAR 0 1
23688: PUSH
23689: LD_INT 2
23691: ARRAY
23692: PPUSH
23693: LD_INT 1
23695: PPUSH
23696: CALL_OW 3
23700: PPUSH
23701: CALL_OW 1
23705: ST_TO_ADDR
// tmp := 1 ;
23706: LD_ADDR_VAR 0 2
23710: PUSH
23711: LD_STRING 1
23713: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23714: LD_ADDR_VAR 0 4
23718: PUSH
23719: LD_VAR 0 4
23723: PUSH
23724: LD_VAR 0 2
23728: STR
23729: ST_TO_ADDR
// end ;
23730: GO 23626
23732: POP
23733: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23734: LD_STRING getStreamItemsFromMission("
23736: PUSH
23737: LD_VAR 0 3
23741: STR
23742: PUSH
23743: LD_STRING ","
23745: STR
23746: PUSH
23747: LD_VAR 0 4
23751: STR
23752: PUSH
23753: LD_STRING ")
23755: STR
23756: PPUSH
23757: CALL_OW 559
// end else
23761: GO 23770
// ToLua ( getStreamItemsFromMission("","") ) ;
23763: LD_STRING getStreamItemsFromMission("","")
23765: PPUSH
23766: CALL_OW 559
// end ;
23770: LD_VAR 0 1
23774: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23775: LD_EXP 74
23779: PUSH
23780: LD_EXP 79
23784: AND
23785: IFFALSE 23909
23787: GO 23789
23789: DISABLE
23790: LD_INT 0
23792: PPUSH
23793: PPUSH
// begin enable ;
23794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23795: LD_ADDR_VAR 0 2
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_OWVAR 2
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: LD_INT 34
23817: PUSH
23818: LD_INT 7
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 34
23827: PUSH
23828: LD_INT 45
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 34
23837: PUSH
23838: LD_INT 28
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 34
23847: PUSH
23848: LD_INT 47
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PPUSH
23866: CALL_OW 69
23870: ST_TO_ADDR
// if not tmp then
23871: LD_VAR 0 2
23875: NOT
23876: IFFALSE 23880
// exit ;
23878: GO 23909
// for i in tmp do
23880: LD_ADDR_VAR 0 1
23884: PUSH
23885: LD_VAR 0 2
23889: PUSH
23890: FOR_IN
23891: IFFALSE 23907
// begin SetLives ( i , 0 ) ;
23893: LD_VAR 0 1
23897: PPUSH
23898: LD_INT 0
23900: PPUSH
23901: CALL_OW 234
// end ;
23905: GO 23890
23907: POP
23908: POP
// end ;
23909: PPOPN 2
23911: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23912: LD_EXP 74
23916: PUSH
23917: LD_EXP 80
23921: AND
23922: IFFALSE 24006
23924: GO 23926
23926: DISABLE
23927: LD_INT 0
23929: PPUSH
23930: PPUSH
// begin enable ;
23931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23932: LD_ADDR_VAR 0 2
23936: PUSH
23937: LD_INT 22
23939: PUSH
23940: LD_OWVAR 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 32
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PPUSH
23963: CALL_OW 69
23967: ST_TO_ADDR
// if not tmp then
23968: LD_VAR 0 2
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24006
// for i in tmp do
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: LD_VAR 0 2
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24004
// begin SetLives ( i , 0 ) ;
23990: LD_VAR 0 1
23994: PPUSH
23995: LD_INT 0
23997: PPUSH
23998: CALL_OW 234
// end ;
24002: GO 23987
24004: POP
24005: POP
// end ;
24006: PPOPN 2
24008: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24009: LD_EXP 74
24013: PUSH
24014: LD_EXP 77
24018: AND
24019: IFFALSE 24112
24021: GO 24023
24023: DISABLE
24024: LD_INT 0
24026: PPUSH
// begin enable ;
24027: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: LD_INT 22
24035: PUSH
24036: LD_OWVAR 2
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: LD_INT 25
24050: PUSH
24051: LD_INT 5
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 25
24060: PUSH
24061: LD_INT 9
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 25
24070: PUSH
24071: LD_INT 8
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PPUSH
24088: CALL_OW 69
24092: PUSH
24093: FOR_IN
24094: IFFALSE 24110
// begin SetClass ( i , 1 ) ;
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 336
// end ;
24108: GO 24093
24110: POP
24111: POP
// end ;
24112: PPOPN 1
24114: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24115: LD_EXP 74
24119: PUSH
24120: LD_EXP 78
24124: AND
24125: PUSH
24126: LD_OWVAR 65
24130: PUSH
24131: LD_INT 7
24133: LESS
24134: AND
24135: IFFALSE 24149
24137: GO 24139
24139: DISABLE
// begin enable ;
24140: ENABLE
// game_speed := 7 ;
24141: LD_ADDR_OWVAR 65
24145: PUSH
24146: LD_INT 7
24148: ST_TO_ADDR
// end ;
24149: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24150: LD_EXP 74
24154: PUSH
24155: LD_EXP 81
24159: AND
24160: IFFALSE 24362
24162: GO 24164
24164: DISABLE
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24170: LD_ADDR_VAR 0 3
24174: PUSH
24175: LD_INT 81
24177: PUSH
24178: LD_OWVAR 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 21
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PPUSH
24201: CALL_OW 69
24205: ST_TO_ADDR
// if not tmp then
24206: LD_VAR 0 3
24210: NOT
24211: IFFALSE 24215
// exit ;
24213: GO 24362
// if tmp > 5 then
24215: LD_VAR 0 3
24219: PUSH
24220: LD_INT 5
24222: GREATER
24223: IFFALSE 24235
// k := 5 else
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_INT 5
24232: ST_TO_ADDR
24233: GO 24245
// k := tmp ;
24235: LD_ADDR_VAR 0 2
24239: PUSH
24240: LD_VAR 0 3
24244: ST_TO_ADDR
// for i := 1 to k do
24245: LD_ADDR_VAR 0 1
24249: PUSH
24250: DOUBLE
24251: LD_INT 1
24253: DEC
24254: ST_TO_ADDR
24255: LD_VAR 0 2
24259: PUSH
24260: FOR_TO
24261: IFFALSE 24360
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24263: LD_VAR 0 3
24267: PUSH
24268: LD_VAR 0 1
24272: ARRAY
24273: PPUSH
24274: LD_VAR 0 1
24278: PUSH
24279: LD_INT 4
24281: MOD
24282: PUSH
24283: LD_INT 1
24285: PLUS
24286: PPUSH
24287: CALL_OW 259
24291: PUSH
24292: LD_INT 10
24294: LESS
24295: IFFALSE 24358
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24297: LD_VAR 0 3
24301: PUSH
24302: LD_VAR 0 1
24306: ARRAY
24307: PPUSH
24308: LD_VAR 0 1
24312: PUSH
24313: LD_INT 4
24315: MOD
24316: PUSH
24317: LD_INT 1
24319: PLUS
24320: PPUSH
24321: LD_VAR 0 3
24325: PUSH
24326: LD_VAR 0 1
24330: ARRAY
24331: PPUSH
24332: LD_VAR 0 1
24336: PUSH
24337: LD_INT 4
24339: MOD
24340: PUSH
24341: LD_INT 1
24343: PLUS
24344: PPUSH
24345: CALL_OW 259
24349: PUSH
24350: LD_INT 1
24352: PLUS
24353: PPUSH
24354: CALL_OW 237
24358: GO 24260
24360: POP
24361: POP
// end ;
24362: PPOPN 3
24364: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24365: LD_EXP 74
24369: PUSH
24370: LD_EXP 82
24374: AND
24375: IFFALSE 24395
24377: GO 24379
24379: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24380: LD_INT 4
24382: PPUSH
24383: LD_OWVAR 2
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: CALL_OW 324
24395: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24396: LD_EXP 74
24400: PUSH
24401: LD_EXP 111
24405: AND
24406: IFFALSE 24426
24408: GO 24410
24410: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24411: LD_INT 19
24413: PPUSH
24414: LD_OWVAR 2
24418: PPUSH
24419: LD_INT 0
24421: PPUSH
24422: CALL_OW 324
24426: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24427: LD_EXP 74
24431: PUSH
24432: LD_EXP 83
24436: AND
24437: IFFALSE 24539
24439: GO 24441
24441: DISABLE
24442: LD_INT 0
24444: PPUSH
24445: PPUSH
// begin enable ;
24446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 22
24454: PUSH
24455: LD_OWVAR 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 34
24469: PUSH
24470: LD_INT 11
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 34
24479: PUSH
24480: LD_INT 30
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: CALL_OW 69
24500: ST_TO_ADDR
// if not tmp then
24501: LD_VAR 0 2
24505: NOT
24506: IFFALSE 24510
// exit ;
24508: GO 24539
// for i in tmp do
24510: LD_ADDR_VAR 0 1
24514: PUSH
24515: LD_VAR 0 2
24519: PUSH
24520: FOR_IN
24521: IFFALSE 24537
// begin SetLives ( i , 0 ) ;
24523: LD_VAR 0 1
24527: PPUSH
24528: LD_INT 0
24530: PPUSH
24531: CALL_OW 234
// end ;
24535: GO 24520
24537: POP
24538: POP
// end ;
24539: PPOPN 2
24541: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24542: LD_EXP 74
24546: PUSH
24547: LD_EXP 84
24551: AND
24552: IFFALSE 24572
24554: GO 24556
24556: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24557: LD_INT 32
24559: PPUSH
24560: LD_OWVAR 2
24564: PPUSH
24565: LD_INT 0
24567: PPUSH
24568: CALL_OW 324
24572: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24573: LD_EXP 74
24577: PUSH
24578: LD_EXP 85
24582: AND
24583: IFFALSE 24764
24585: GO 24587
24587: DISABLE
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_INT 22
24600: PUSH
24601: LD_OWVAR 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 33
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: CALL_OW 69
24628: ST_TO_ADDR
// if not tmp then
24629: LD_VAR 0 2
24633: NOT
24634: IFFALSE 24638
// exit ;
24636: GO 24764
// side := 0 ;
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_INT 0
24645: ST_TO_ADDR
// for i := 1 to 8 do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_INT 8
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24708
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24662: LD_OWVAR 2
24666: PUSH
24667: LD_VAR 0 1
24671: NONEQUAL
24672: PUSH
24673: LD_OWVAR 2
24677: PPUSH
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 81
24687: PUSH
24688: LD_INT 2
24690: EQUAL
24691: AND
24692: IFFALSE 24706
// begin side := i ;
24694: LD_ADDR_VAR 0 3
24698: PUSH
24699: LD_VAR 0 1
24703: ST_TO_ADDR
// break ;
24704: GO 24708
// end ;
24706: GO 24659
24708: POP
24709: POP
// if not side then
24710: LD_VAR 0 3
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24764
// for i := 1 to tmp do
24719: LD_ADDR_VAR 0 1
24723: PUSH
24724: DOUBLE
24725: LD_INT 1
24727: DEC
24728: ST_TO_ADDR
24729: LD_VAR 0 2
24733: PUSH
24734: FOR_TO
24735: IFFALSE 24762
// if Prob ( 60 ) then
24737: LD_INT 60
24739: PPUSH
24740: CALL_OW 13
24744: IFFALSE 24760
// SetSide ( i , side ) ;
24746: LD_VAR 0 1
24750: PPUSH
24751: LD_VAR 0 3
24755: PPUSH
24756: CALL_OW 235
24760: GO 24734
24762: POP
24763: POP
// end ;
24764: PPOPN 3
24766: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24767: LD_EXP 74
24771: PUSH
24772: LD_EXP 87
24776: AND
24777: IFFALSE 24896
24779: GO 24781
24781: DISABLE
24782: LD_INT 0
24784: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24785: LD_ADDR_VAR 0 1
24789: PUSH
24790: LD_INT 22
24792: PUSH
24793: LD_OWVAR 2
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 21
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: LD_INT 23
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: PPUSH
24834: CALL_OW 69
24838: PUSH
24839: FOR_IN
24840: IFFALSE 24894
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24842: LD_VAR 0 1
24846: PPUSH
24847: CALL_OW 257
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: LD_INT 4
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: IN
24870: IFFALSE 24892
// SetClass ( un , rand ( 1 , 4 ) ) ;
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_INT 1
24879: PPUSH
24880: LD_INT 4
24882: PPUSH
24883: CALL_OW 12
24887: PPUSH
24888: CALL_OW 336
24892: GO 24839
24894: POP
24895: POP
// end ;
24896: PPOPN 1
24898: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24899: LD_EXP 74
24903: PUSH
24904: LD_EXP 86
24908: AND
24909: IFFALSE 24988
24911: GO 24913
24913: DISABLE
24914: LD_INT 0
24916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24917: LD_ADDR_VAR 0 1
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_OWVAR 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 21
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PPUSH
24948: CALL_OW 69
24952: ST_TO_ADDR
// if not tmp then
24953: LD_VAR 0 1
24957: NOT
24958: IFFALSE 24962
// exit ;
24960: GO 24988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24962: LD_VAR 0 1
24966: PUSH
24967: LD_INT 1
24969: PPUSH
24970: LD_VAR 0 1
24974: PPUSH
24975: CALL_OW 12
24979: ARRAY
24980: PPUSH
24981: LD_INT 100
24983: PPUSH
24984: CALL_OW 234
// end ;
24988: PPOPN 1
24990: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24991: LD_EXP 74
24995: PUSH
24996: LD_EXP 88
25000: AND
25001: IFFALSE 25099
25003: GO 25005
25005: DISABLE
25006: LD_INT 0
25008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25009: LD_ADDR_VAR 0 1
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_OWVAR 2
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: ST_TO_ADDR
// if not tmp then
25045: LD_VAR 0 1
25049: NOT
25050: IFFALSE 25054
// exit ;
25052: GO 25099
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 1
25061: PPUSH
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 12
25071: ARRAY
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: LD_INT 4
25078: PPUSH
25079: CALL_OW 12
25083: PPUSH
25084: LD_INT 3000
25086: PPUSH
25087: LD_INT 9000
25089: PPUSH
25090: CALL_OW 12
25094: PPUSH
25095: CALL_OW 492
// end ;
25099: PPOPN 1
25101: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25102: LD_EXP 74
25106: PUSH
25107: LD_EXP 89
25111: AND
25112: IFFALSE 25132
25114: GO 25116
25116: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25117: LD_INT 1
25119: PPUSH
25120: LD_OWVAR 2
25124: PPUSH
25125: LD_INT 0
25127: PPUSH
25128: CALL_OW 324
25132: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25133: LD_EXP 74
25137: PUSH
25138: LD_EXP 90
25142: AND
25143: IFFALSE 25226
25145: GO 25147
25147: DISABLE
25148: LD_INT 0
25150: PPUSH
25151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25152: LD_ADDR_VAR 0 2
25156: PUSH
25157: LD_INT 22
25159: PUSH
25160: LD_OWVAR 2
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 21
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: ST_TO_ADDR
// if not tmp then
25188: LD_VAR 0 2
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 25226
// for i in tmp do
25197: LD_ADDR_VAR 0 1
25201: PUSH
25202: LD_VAR 0 2
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25224
// SetBLevel ( i , 10 ) ;
25210: LD_VAR 0 1
25214: PPUSH
25215: LD_INT 10
25217: PPUSH
25218: CALL_OW 241
25222: GO 25207
25224: POP
25225: POP
// end ;
25226: PPOPN 2
25228: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25229: LD_EXP 74
25233: PUSH
25234: LD_EXP 91
25238: AND
25239: IFFALSE 25350
25241: GO 25243
25243: DISABLE
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
25248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_INT 22
25256: PUSH
25257: LD_OWVAR 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 25
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: ST_TO_ADDR
// if not tmp then
25285: LD_VAR 0 3
25289: NOT
25290: IFFALSE 25294
// exit ;
25292: GO 25350
// un := tmp [ rand ( 1 , tmp ) ] ;
25294: LD_ADDR_VAR 0 2
25298: PUSH
25299: LD_VAR 0 3
25303: PUSH
25304: LD_INT 1
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: CALL_OW 12
25316: ARRAY
25317: ST_TO_ADDR
// if Crawls ( un ) then
25318: LD_VAR 0 2
25322: PPUSH
25323: CALL_OW 318
25327: IFFALSE 25338
// ComWalk ( un ) ;
25329: LD_VAR 0 2
25333: PPUSH
25334: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_INT 5
25345: PPUSH
25346: CALL_OW 336
// end ;
25350: PPOPN 3
25352: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25353: LD_EXP 74
25357: PUSH
25358: LD_EXP 92
25362: AND
25363: PUSH
25364: LD_OWVAR 67
25368: PUSH
25369: LD_INT 3
25371: LESS
25372: AND
25373: IFFALSE 25392
25375: GO 25377
25377: DISABLE
// Difficulty := Difficulty + 1 ;
25378: LD_ADDR_OWVAR 67
25382: PUSH
25383: LD_OWVAR 67
25387: PUSH
25388: LD_INT 1
25390: PLUS
25391: ST_TO_ADDR
25392: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25393: LD_EXP 74
25397: PUSH
25398: LD_EXP 93
25402: AND
25403: IFFALSE 25506
25405: GO 25407
25407: DISABLE
25408: LD_INT 0
25410: PPUSH
// begin for i := 1 to 5 do
25411: LD_ADDR_VAR 0 1
25415: PUSH
25416: DOUBLE
25417: LD_INT 1
25419: DEC
25420: ST_TO_ADDR
25421: LD_INT 5
25423: PUSH
25424: FOR_TO
25425: IFFALSE 25504
// begin uc_nation := nation_nature ;
25427: LD_ADDR_OWVAR 21
25431: PUSH
25432: LD_INT 0
25434: ST_TO_ADDR
// uc_side := 0 ;
25435: LD_ADDR_OWVAR 20
25439: PUSH
25440: LD_INT 0
25442: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25443: LD_ADDR_OWVAR 29
25447: PUSH
25448: LD_INT 12
25450: PUSH
25451: LD_INT 12
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: ST_TO_ADDR
// hc_agressivity := 20 ;
25458: LD_ADDR_OWVAR 35
25462: PUSH
25463: LD_INT 20
25465: ST_TO_ADDR
// hc_class := class_tiger ;
25466: LD_ADDR_OWVAR 28
25470: PUSH
25471: LD_INT 14
25473: ST_TO_ADDR
// hc_gallery :=  ;
25474: LD_ADDR_OWVAR 33
25478: PUSH
25479: LD_STRING 
25481: ST_TO_ADDR
// hc_name :=  ;
25482: LD_ADDR_OWVAR 26
25486: PUSH
25487: LD_STRING 
25489: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25490: CALL_OW 44
25494: PPUSH
25495: LD_INT 0
25497: PPUSH
25498: CALL_OW 51
// end ;
25502: GO 25424
25504: POP
25505: POP
// end ;
25506: PPOPN 1
25508: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25509: LD_EXP 74
25513: PUSH
25514: LD_EXP 94
25518: AND
25519: IFFALSE 25528
25521: GO 25523
25523: DISABLE
// StreamSibBomb ;
25524: CALL 25529 0 0
25528: END
// export function StreamSibBomb ; var i , x , y ; begin
25529: LD_INT 0
25531: PPUSH
25532: PPUSH
25533: PPUSH
25534: PPUSH
// result := false ;
25535: LD_ADDR_VAR 0 1
25539: PUSH
25540: LD_INT 0
25542: ST_TO_ADDR
// for i := 1 to 16 do
25543: LD_ADDR_VAR 0 2
25547: PUSH
25548: DOUBLE
25549: LD_INT 1
25551: DEC
25552: ST_TO_ADDR
25553: LD_INT 16
25555: PUSH
25556: FOR_TO
25557: IFFALSE 25756
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25559: LD_ADDR_VAR 0 3
25563: PUSH
25564: LD_INT 10
25566: PUSH
25567: LD_INT 20
25569: PUSH
25570: LD_INT 30
25572: PUSH
25573: LD_INT 40
25575: PUSH
25576: LD_INT 50
25578: PUSH
25579: LD_INT 60
25581: PUSH
25582: LD_INT 70
25584: PUSH
25585: LD_INT 80
25587: PUSH
25588: LD_INT 90
25590: PUSH
25591: LD_INT 100
25593: PUSH
25594: LD_INT 110
25596: PUSH
25597: LD_INT 120
25599: PUSH
25600: LD_INT 130
25602: PUSH
25603: LD_INT 140
25605: PUSH
25606: LD_INT 150
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PPUSH
25629: LD_INT 15
25631: PPUSH
25632: CALL_OW 12
25636: ARRAY
25637: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25638: LD_ADDR_VAR 0 4
25642: PUSH
25643: LD_INT 10
25645: PUSH
25646: LD_INT 20
25648: PUSH
25649: LD_INT 30
25651: PUSH
25652: LD_INT 40
25654: PUSH
25655: LD_INT 50
25657: PUSH
25658: LD_INT 60
25660: PUSH
25661: LD_INT 70
25663: PUSH
25664: LD_INT 80
25666: PUSH
25667: LD_INT 90
25669: PUSH
25670: LD_INT 100
25672: PUSH
25673: LD_INT 110
25675: PUSH
25676: LD_INT 120
25678: PUSH
25679: LD_INT 130
25681: PUSH
25682: LD_INT 140
25684: PUSH
25685: LD_INT 150
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PPUSH
25708: LD_INT 15
25710: PPUSH
25711: CALL_OW 12
25715: ARRAY
25716: ST_TO_ADDR
// if ValidHex ( x , y ) then
25717: LD_VAR 0 3
25721: PPUSH
25722: LD_VAR 0 4
25726: PPUSH
25727: CALL_OW 488
25731: IFFALSE 25754
// begin result := [ x , y ] ;
25733: LD_ADDR_VAR 0 1
25737: PUSH
25738: LD_VAR 0 3
25742: PUSH
25743: LD_VAR 0 4
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: ST_TO_ADDR
// break ;
25752: GO 25756
// end ; end ;
25754: GO 25556
25756: POP
25757: POP
// if result then
25758: LD_VAR 0 1
25762: IFFALSE 25822
// begin ToLua ( playSibBomb() ) ;
25764: LD_STRING playSibBomb()
25766: PPUSH
25767: CALL_OW 559
// wait ( 0 0$14 ) ;
25771: LD_INT 490
25773: PPUSH
25774: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25778: LD_VAR 0 1
25782: PUSH
25783: LD_INT 1
25785: ARRAY
25786: PPUSH
25787: LD_VAR 0 1
25791: PUSH
25792: LD_INT 2
25794: ARRAY
25795: PPUSH
25796: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25800: LD_VAR 0 1
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: PPUSH
25809: LD_VAR 0 1
25813: PUSH
25814: LD_INT 2
25816: ARRAY
25817: PPUSH
25818: CALL_OW 429
// end ; end ;
25822: LD_VAR 0 1
25826: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25827: LD_EXP 74
25831: PUSH
25832: LD_EXP 96
25836: AND
25837: IFFALSE 25849
25839: GO 25841
25841: DISABLE
// YouLost (  ) ;
25842: LD_STRING 
25844: PPUSH
25845: CALL_OW 104
25849: END
// every 0 0$1 trigger StreamModeActive and sFog do
25850: LD_EXP 74
25854: PUSH
25855: LD_EXP 95
25859: AND
25860: IFFALSE 25874
25862: GO 25864
25864: DISABLE
// FogOff ( your_side ) ;
25865: LD_OWVAR 2
25869: PPUSH
25870: CALL_OW 344
25874: END
// every 0 0$1 trigger StreamModeActive and sSun do
25875: LD_EXP 74
25879: PUSH
25880: LD_EXP 97
25884: AND
25885: IFFALSE 25913
25887: GO 25889
25889: DISABLE
// begin solar_recharge_percent := 0 ;
25890: LD_ADDR_OWVAR 79
25894: PUSH
25895: LD_INT 0
25897: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25898: LD_INT 10500
25900: PPUSH
25901: CALL_OW 67
// solar_recharge_percent := 100 ;
25905: LD_ADDR_OWVAR 79
25909: PUSH
25910: LD_INT 100
25912: ST_TO_ADDR
// end ;
25913: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25914: LD_EXP 74
25918: PUSH
25919: LD_EXP 98
25923: AND
25924: IFFALSE 26163
25926: GO 25928
25928: DISABLE
25929: LD_INT 0
25931: PPUSH
25932: PPUSH
25933: PPUSH
// begin tmp := [ ] ;
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: EMPTY
25940: ST_TO_ADDR
// for i := 1 to 6 do
25941: LD_ADDR_VAR 0 1
25945: PUSH
25946: DOUBLE
25947: LD_INT 1
25949: DEC
25950: ST_TO_ADDR
25951: LD_INT 6
25953: PUSH
25954: FOR_TO
25955: IFFALSE 26060
// begin uc_nation := nation_nature ;
25957: LD_ADDR_OWVAR 21
25961: PUSH
25962: LD_INT 0
25964: ST_TO_ADDR
// uc_side := 0 ;
25965: LD_ADDR_OWVAR 20
25969: PUSH
25970: LD_INT 0
25972: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25973: LD_ADDR_OWVAR 29
25977: PUSH
25978: LD_INT 12
25980: PUSH
25981: LD_INT 12
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: ST_TO_ADDR
// hc_agressivity := 20 ;
25988: LD_ADDR_OWVAR 35
25992: PUSH
25993: LD_INT 20
25995: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25996: LD_ADDR_OWVAR 28
26000: PUSH
26001: LD_INT 17
26003: ST_TO_ADDR
// hc_gallery :=  ;
26004: LD_ADDR_OWVAR 33
26008: PUSH
26009: LD_STRING 
26011: ST_TO_ADDR
// hc_name :=  ;
26012: LD_ADDR_OWVAR 26
26016: PUSH
26017: LD_STRING 
26019: ST_TO_ADDR
// un := CreateHuman ;
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: CALL_OW 44
26029: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26030: LD_VAR 0 2
26034: PPUSH
26035: LD_INT 1
26037: PPUSH
26038: CALL_OW 51
// tmp := tmp ^ un ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 2
26056: ADD
26057: ST_TO_ADDR
// end ;
26058: GO 25954
26060: POP
26061: POP
// repeat wait ( 0 0$1 ) ;
26062: LD_INT 35
26064: PPUSH
26065: CALL_OW 67
// for un in tmp do
26069: LD_ADDR_VAR 0 2
26073: PUSH
26074: LD_VAR 0 3
26078: PUSH
26079: FOR_IN
26080: IFFALSE 26154
// begin if IsDead ( un ) then
26082: LD_VAR 0 2
26086: PPUSH
26087: CALL_OW 301
26091: IFFALSE 26111
// begin tmp := tmp diff un ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_VAR 0 2
26107: DIFF
26108: ST_TO_ADDR
// continue ;
26109: GO 26079
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26111: LD_VAR 0 2
26115: PPUSH
26116: LD_INT 3
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: PPUSH
26138: LD_VAR 0 2
26142: PPUSH
26143: CALL_OW 74
26147: PPUSH
26148: CALL_OW 115
// end ;
26152: GO 26079
26154: POP
26155: POP
// until not tmp ;
26156: LD_VAR 0 3
26160: NOT
26161: IFFALSE 26062
// end ;
26163: PPOPN 3
26165: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26166: LD_EXP 74
26170: PUSH
26171: LD_EXP 99
26175: AND
26176: IFFALSE 26230
26178: GO 26180
26180: DISABLE
// begin ToLua ( displayTroll(); ) ;
26181: LD_STRING displayTroll();
26183: PPUSH
26184: CALL_OW 559
// wait ( 3 3$00 ) ;
26188: LD_INT 6300
26190: PPUSH
26191: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26195: LD_STRING hideTroll();
26197: PPUSH
26198: CALL_OW 559
// wait ( 1 1$00 ) ;
26202: LD_INT 2100
26204: PPUSH
26205: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26209: LD_STRING displayTroll();
26211: PPUSH
26212: CALL_OW 559
// wait ( 1 1$00 ) ;
26216: LD_INT 2100
26218: PPUSH
26219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26223: LD_STRING hideTroll();
26225: PPUSH
26226: CALL_OW 559
// end ;
26230: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26231: LD_EXP 74
26235: PUSH
26236: LD_EXP 100
26240: AND
26241: IFFALSE 26304
26243: GO 26245
26245: DISABLE
26246: LD_INT 0
26248: PPUSH
// begin p := 0 ;
26249: LD_ADDR_VAR 0 1
26253: PUSH
26254: LD_INT 0
26256: ST_TO_ADDR
// repeat game_speed := 1 ;
26257: LD_ADDR_OWVAR 65
26261: PUSH
26262: LD_INT 1
26264: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26265: LD_INT 35
26267: PPUSH
26268: CALL_OW 67
// p := p + 1 ;
26272: LD_ADDR_VAR 0 1
26276: PUSH
26277: LD_VAR 0 1
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ST_TO_ADDR
// until p >= 60 ;
26286: LD_VAR 0 1
26290: PUSH
26291: LD_INT 60
26293: GREATEREQUAL
26294: IFFALSE 26257
// game_speed := 4 ;
26296: LD_ADDR_OWVAR 65
26300: PUSH
26301: LD_INT 4
26303: ST_TO_ADDR
// end ;
26304: PPOPN 1
26306: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26307: LD_EXP 74
26311: PUSH
26312: LD_EXP 101
26316: AND
26317: IFFALSE 26463
26319: GO 26321
26321: DISABLE
26322: LD_INT 0
26324: PPUSH
26325: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26326: LD_ADDR_VAR 0 1
26330: PUSH
26331: LD_INT 22
26333: PUSH
26334: LD_OWVAR 2
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: LD_INT 30
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 30
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: ST_TO_ADDR
// if not depot then
26380: LD_VAR 0 1
26384: NOT
26385: IFFALSE 26389
// exit ;
26387: GO 26463
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26389: LD_ADDR_VAR 0 2
26393: PUSH
26394: LD_VAR 0 1
26398: PUSH
26399: LD_INT 1
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 12
26411: ARRAY
26412: PPUSH
26413: CALL_OW 274
26417: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26418: LD_VAR 0 2
26422: PPUSH
26423: LD_INT 1
26425: PPUSH
26426: LD_INT 0
26428: PPUSH
26429: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26433: LD_VAR 0 2
26437: PPUSH
26438: LD_INT 2
26440: PPUSH
26441: LD_INT 0
26443: PPUSH
26444: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26448: LD_VAR 0 2
26452: PPUSH
26453: LD_INT 3
26455: PPUSH
26456: LD_INT 0
26458: PPUSH
26459: CALL_OW 277
// end ;
26463: PPOPN 2
26465: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26466: LD_EXP 74
26470: PUSH
26471: LD_EXP 102
26475: AND
26476: IFFALSE 26573
26478: GO 26480
26480: DISABLE
26481: LD_INT 0
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 23
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PPUSH
26533: CALL_OW 69
26537: ST_TO_ADDR
// if not tmp then
26538: LD_VAR 0 1
26542: NOT
26543: IFFALSE 26547
// exit ;
26545: GO 26573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26547: LD_VAR 0 1
26551: PUSH
26552: LD_INT 1
26554: PPUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 12
26564: ARRAY
26565: PPUSH
26566: LD_INT 200
26568: PPUSH
26569: CALL_OW 234
// end ;
26573: PPOPN 1
26575: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26576: LD_EXP 74
26580: PUSH
26581: LD_EXP 103
26585: AND
26586: IFFALSE 26665
26588: GO 26590
26590: DISABLE
26591: LD_INT 0
26593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26594: LD_ADDR_VAR 0 1
26598: PUSH
26599: LD_INT 22
26601: PUSH
26602: LD_OWVAR 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 21
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PPUSH
26625: CALL_OW 69
26629: ST_TO_ADDR
// if not tmp then
26630: LD_VAR 0 1
26634: NOT
26635: IFFALSE 26639
// exit ;
26637: GO 26665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26639: LD_VAR 0 1
26643: PUSH
26644: LD_INT 1
26646: PPUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 12
26656: ARRAY
26657: PPUSH
26658: LD_INT 60
26660: PPUSH
26661: CALL_OW 234
// end ;
26665: PPOPN 1
26667: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26668: LD_EXP 74
26672: PUSH
26673: LD_EXP 104
26677: AND
26678: IFFALSE 26777
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
// begin enable ;
26687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26688: LD_ADDR_VAR 0 1
26692: PUSH
26693: LD_INT 22
26695: PUSH
26696: LD_OWVAR 2
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 61
26707: PUSH
26708: EMPTY
26709: LIST
26710: PUSH
26711: LD_INT 33
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PPUSH
26726: CALL_OW 69
26730: ST_TO_ADDR
// if not tmp then
26731: LD_VAR 0 1
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26777
// for i in tmp do
26740: LD_ADDR_VAR 0 2
26744: PUSH
26745: LD_VAR 0 1
26749: PUSH
26750: FOR_IN
26751: IFFALSE 26775
// if IsControledBy ( i ) then
26753: LD_VAR 0 2
26757: PPUSH
26758: CALL_OW 312
26762: IFFALSE 26773
// ComUnlink ( i ) ;
26764: LD_VAR 0 2
26768: PPUSH
26769: CALL_OW 136
26773: GO 26750
26775: POP
26776: POP
// end ;
26777: PPOPN 2
26779: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26780: LD_EXP 74
26784: PUSH
26785: LD_EXP 105
26789: AND
26790: IFFALSE 26930
26792: GO 26794
26794: DISABLE
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
// begin ToLua ( displayPowell(); ) ;
26799: LD_STRING displayPowell();
26801: PPUSH
26802: CALL_OW 559
// uc_side := 0 ;
26806: LD_ADDR_OWVAR 20
26810: PUSH
26811: LD_INT 0
26813: ST_TO_ADDR
// uc_nation := 2 ;
26814: LD_ADDR_OWVAR 21
26818: PUSH
26819: LD_INT 2
26821: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26822: LD_ADDR_OWVAR 37
26826: PUSH
26827: LD_INT 14
26829: ST_TO_ADDR
// vc_engine := engine_siberite ;
26830: LD_ADDR_OWVAR 39
26834: PUSH
26835: LD_INT 3
26837: ST_TO_ADDR
// vc_control := control_apeman ;
26838: LD_ADDR_OWVAR 38
26842: PUSH
26843: LD_INT 5
26845: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26846: LD_ADDR_OWVAR 40
26850: PUSH
26851: LD_INT 29
26853: ST_TO_ADDR
// un := CreateVehicle ;
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: CALL_OW 45
26863: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26864: LD_VAR 0 2
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26876: LD_INT 35
26878: PPUSH
26879: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_INT 22
26890: PUSH
26891: LD_OWVAR 2
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PPUSH
26900: CALL_OW 69
26904: PPUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: CALL_OW 74
26914: PPUSH
26915: CALL_OW 115
// until IsDead ( un ) ;
26919: LD_VAR 0 2
26923: PPUSH
26924: CALL_OW 301
26928: IFFALSE 26876
// end ;
26930: PPOPN 2
26932: END
// every 0 0$1 trigger StreamModeActive and sStu do
26933: LD_EXP 74
26937: PUSH
26938: LD_EXP 113
26942: AND
26943: IFFALSE 26959
26945: GO 26947
26947: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26948: LD_STRING displayStucuk();
26950: PPUSH
26951: CALL_OW 559
// ResetFog ;
26955: CALL_OW 335
// end ;
26959: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26960: LD_EXP 74
26964: PUSH
26965: LD_EXP 106
26969: AND
26970: IFFALSE 27111
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
26978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26979: LD_ADDR_VAR 0 2
26983: PUSH
26984: LD_INT 22
26986: PUSH
26987: LD_OWVAR 2
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 21
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: ST_TO_ADDR
// if not tmp then
27015: LD_VAR 0 2
27019: NOT
27020: IFFALSE 27024
// exit ;
27022: GO 27111
// un := tmp [ rand ( 1 , tmp ) ] ;
27024: LD_ADDR_VAR 0 1
27028: PUSH
27029: LD_VAR 0 2
27033: PUSH
27034: LD_INT 1
27036: PPUSH
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 12
27046: ARRAY
27047: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_INT 0
27055: PPUSH
27056: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27060: LD_VAR 0 1
27064: PPUSH
27065: LD_OWVAR 3
27069: PUSH
27070: LD_VAR 0 1
27074: DIFF
27075: PPUSH
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 74
27085: PPUSH
27086: CALL_OW 115
// wait ( 0 0$20 ) ;
27090: LD_INT 700
27092: PPUSH
27093: CALL_OW 67
// SetSide ( un , your_side ) ;
27097: LD_VAR 0 1
27101: PPUSH
27102: LD_OWVAR 2
27106: PPUSH
27107: CALL_OW 235
// end ;
27111: PPOPN 2
27113: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27114: LD_EXP 74
27118: PUSH
27119: LD_EXP 107
27123: AND
27124: IFFALSE 27230
27126: GO 27128
27128: DISABLE
27129: LD_INT 0
27131: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27132: LD_ADDR_VAR 0 1
27136: PUSH
27137: LD_INT 22
27139: PUSH
27140: LD_OWVAR 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: LD_INT 30
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 30
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PPUSH
27181: CALL_OW 69
27185: ST_TO_ADDR
// if not depot then
27186: LD_VAR 0 1
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27230
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27195: LD_VAR 0 1
27199: PUSH
27200: LD_INT 1
27202: ARRAY
27203: PPUSH
27204: CALL_OW 250
27208: PPUSH
27209: LD_VAR 0 1
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: CALL_OW 251
27222: PPUSH
27223: LD_INT 70
27225: PPUSH
27226: CALL_OW 495
// end ;
27230: PPOPN 1
27232: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27233: LD_EXP 74
27237: PUSH
27238: LD_EXP 108
27242: AND
27243: IFFALSE 27454
27245: GO 27247
27247: DISABLE
27248: LD_INT 0
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
27254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27255: LD_ADDR_VAR 0 5
27259: PUSH
27260: LD_INT 22
27262: PUSH
27263: LD_OWVAR 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 21
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 69
27290: ST_TO_ADDR
// if not tmp then
27291: LD_VAR 0 5
27295: NOT
27296: IFFALSE 27300
// exit ;
27298: GO 27454
// for i in tmp do
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 5
27309: PUSH
27310: FOR_IN
27311: IFFALSE 27452
// begin d := rand ( 0 , 5 ) ;
27313: LD_ADDR_VAR 0 4
27317: PUSH
27318: LD_INT 0
27320: PPUSH
27321: LD_INT 5
27323: PPUSH
27324: CALL_OW 12
27328: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27329: LD_ADDR_VAR 0 2
27333: PUSH
27334: LD_VAR 0 1
27338: PPUSH
27339: CALL_OW 250
27343: PPUSH
27344: LD_VAR 0 4
27348: PPUSH
27349: LD_INT 3
27351: PPUSH
27352: LD_INT 12
27354: PPUSH
27355: CALL_OW 12
27359: PPUSH
27360: CALL_OW 272
27364: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 251
27379: PPUSH
27380: LD_VAR 0 4
27384: PPUSH
27385: LD_INT 3
27387: PPUSH
27388: LD_INT 12
27390: PPUSH
27391: CALL_OW 12
27395: PPUSH
27396: CALL_OW 273
27400: ST_TO_ADDR
// if ValidHex ( x , y ) then
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_VAR 0 3
27410: PPUSH
27411: CALL_OW 488
27415: IFFALSE 27450
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27417: LD_VAR 0 1
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: LD_VAR 0 3
27431: PPUSH
27432: LD_INT 3
27434: PPUSH
27435: LD_INT 6
27437: PPUSH
27438: CALL_OW 12
27442: PPUSH
27443: LD_INT 1
27445: PPUSH
27446: CALL_OW 483
// end ;
27450: GO 27310
27452: POP
27453: POP
// end ;
27454: PPOPN 5
27456: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27457: LD_EXP 74
27461: PUSH
27462: LD_EXP 109
27466: AND
27467: IFFALSE 27561
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27476: LD_ADDR_VAR 0 2
27480: PUSH
27481: LD_INT 22
27483: PUSH
27484: LD_OWVAR 2
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 32
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 21
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL_OW 69
27522: ST_TO_ADDR
// if not tmp then
27523: LD_VAR 0 2
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27561
// for i in tmp do
27532: LD_ADDR_VAR 0 1
27536: PUSH
27537: LD_VAR 0 2
27541: PUSH
27542: FOR_IN
27543: IFFALSE 27559
// SetFuel ( i , 0 ) ;
27545: LD_VAR 0 1
27549: PPUSH
27550: LD_INT 0
27552: PPUSH
27553: CALL_OW 240
27557: GO 27542
27559: POP
27560: POP
// end ;
27561: PPOPN 2
27563: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27564: LD_EXP 74
27568: PUSH
27569: LD_EXP 110
27573: AND
27574: IFFALSE 27640
27576: GO 27578
27578: DISABLE
27579: LD_INT 0
27581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: LD_INT 22
27589: PUSH
27590: LD_OWVAR 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 30
27601: PUSH
27602: LD_INT 29
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PPUSH
27613: CALL_OW 69
27617: ST_TO_ADDR
// if not tmp then
27618: LD_VAR 0 1
27622: NOT
27623: IFFALSE 27627
// exit ;
27625: GO 27640
// DestroyUnit ( tmp [ 1 ] ) ;
27627: LD_VAR 0 1
27631: PUSH
27632: LD_INT 1
27634: ARRAY
27635: PPUSH
27636: CALL_OW 65
// end ;
27640: PPOPN 1
27642: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27643: LD_EXP 74
27647: PUSH
27648: LD_EXP 112
27652: AND
27653: IFFALSE 27782
27655: GO 27657
27657: DISABLE
27658: LD_INT 0
27660: PPUSH
// begin uc_side := 0 ;
27661: LD_ADDR_OWVAR 20
27665: PUSH
27666: LD_INT 0
27668: ST_TO_ADDR
// uc_nation := nation_arabian ;
27669: LD_ADDR_OWVAR 21
27673: PUSH
27674: LD_INT 2
27676: ST_TO_ADDR
// hc_gallery :=  ;
27677: LD_ADDR_OWVAR 33
27681: PUSH
27682: LD_STRING 
27684: ST_TO_ADDR
// hc_name :=  ;
27685: LD_ADDR_OWVAR 26
27689: PUSH
27690: LD_STRING 
27692: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27693: LD_INT 1
27695: PPUSH
27696: LD_INT 11
27698: PPUSH
27699: LD_INT 10
27701: PPUSH
27702: CALL_OW 380
// un := CreateHuman ;
27706: LD_ADDR_VAR 0 1
27710: PUSH
27711: CALL_OW 44
27715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27716: LD_VAR 0 1
27720: PPUSH
27721: LD_INT 1
27723: PPUSH
27724: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27728: LD_INT 35
27730: PPUSH
27731: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_INT 22
27742: PUSH
27743: LD_OWVAR 2
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PPUSH
27752: CALL_OW 69
27756: PPUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 74
27766: PPUSH
27767: CALL_OW 115
// until IsDead ( un ) ;
27771: LD_VAR 0 1
27775: PPUSH
27776: CALL_OW 301
27780: IFFALSE 27728
// end ;
27782: PPOPN 1
27784: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27785: LD_EXP 74
27789: PUSH
27790: LD_EXP 114
27794: AND
27795: IFFALSE 27807
27797: GO 27799
27799: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27800: LD_STRING earthquake(getX(game), 0, 32)
27802: PPUSH
27803: CALL_OW 559
27807: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27808: LD_EXP 74
27812: PUSH
27813: LD_EXP 115
27817: AND
27818: IFFALSE 27909
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
// begin enable ;
27826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27827: LD_ADDR_VAR 0 1
27831: PUSH
27832: LD_INT 22
27834: PUSH
27835: LD_OWVAR 2
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 21
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 33
27856: PUSH
27857: LD_INT 3
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PPUSH
27869: CALL_OW 69
27873: ST_TO_ADDR
// if not tmp then
27874: LD_VAR 0 1
27878: NOT
27879: IFFALSE 27883
// exit ;
27881: GO 27909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27883: LD_VAR 0 1
27887: PUSH
27888: LD_INT 1
27890: PPUSH
27891: LD_VAR 0 1
27895: PPUSH
27896: CALL_OW 12
27900: ARRAY
27901: PPUSH
27902: LD_INT 1
27904: PPUSH
27905: CALL_OW 234
// end ;
27909: PPOPN 1
27911: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27912: LD_EXP 74
27916: PUSH
27917: LD_EXP 116
27921: AND
27922: IFFALSE 28063
27924: GO 27926
27926: DISABLE
27927: LD_INT 0
27929: PPUSH
27930: PPUSH
27931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 22
27939: PUSH
27940: LD_OWVAR 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 25
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 69
27967: ST_TO_ADDR
// if not tmp then
27968: LD_VAR 0 3
27972: NOT
27973: IFFALSE 27977
// exit ;
27975: GO 28063
// un := tmp [ rand ( 1 , tmp ) ] ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: LD_VAR 0 3
27986: PUSH
27987: LD_INT 1
27989: PPUSH
27990: LD_VAR 0 3
27994: PPUSH
27995: CALL_OW 12
27999: ARRAY
28000: ST_TO_ADDR
// if Crawls ( un ) then
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 318
28010: IFFALSE 28021
// ComWalk ( un ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28021: LD_VAR 0 2
28025: PPUSH
28026: LD_INT 9
28028: PPUSH
28029: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28033: LD_INT 28
28035: PPUSH
28036: LD_OWVAR 2
28040: PPUSH
28041: LD_INT 2
28043: PPUSH
28044: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28048: LD_INT 29
28050: PPUSH
28051: LD_OWVAR 2
28055: PPUSH
28056: LD_INT 2
28058: PPUSH
28059: CALL_OW 322
// end ;
28063: PPOPN 3
28065: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28066: LD_EXP 74
28070: PUSH
28071: LD_EXP 117
28075: AND
28076: IFFALSE 28187
28078: GO 28080
28080: DISABLE
28081: LD_INT 0
28083: PPUSH
28084: PPUSH
28085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 22
28093: PUSH
28094: LD_OWVAR 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 25
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: ST_TO_ADDR
// if not tmp then
28122: LD_VAR 0 3
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28187
// un := tmp [ rand ( 1 , tmp ) ] ;
28131: LD_ADDR_VAR 0 2
28135: PUSH
28136: LD_VAR 0 3
28140: PUSH
28141: LD_INT 1
28143: PPUSH
28144: LD_VAR 0 3
28148: PPUSH
28149: CALL_OW 12
28153: ARRAY
28154: ST_TO_ADDR
// if Crawls ( un ) then
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 318
28164: IFFALSE 28175
// ComWalk ( un ) ;
28166: LD_VAR 0 2
28170: PPUSH
28171: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28175: LD_VAR 0 2
28179: PPUSH
28180: LD_INT 8
28182: PPUSH
28183: CALL_OW 336
// end ;
28187: PPOPN 3
28189: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28190: LD_EXP 74
28194: PUSH
28195: LD_EXP 118
28199: AND
28200: IFFALSE 28344
28202: GO 28204
28204: DISABLE
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28209: LD_ADDR_VAR 0 2
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_OWVAR 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 21
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 34
28241: PUSH
28242: LD_INT 12
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 34
28251: PUSH
28252: LD_INT 51
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 34
28261: PUSH
28262: LD_INT 32
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 69
28284: ST_TO_ADDR
// if not tmp then
28285: LD_VAR 0 2
28289: NOT
28290: IFFALSE 28294
// exit ;
28292: GO 28344
// for i in tmp do
28294: LD_ADDR_VAR 0 1
28298: PUSH
28299: LD_VAR 0 2
28303: PUSH
28304: FOR_IN
28305: IFFALSE 28342
// if GetCargo ( i , mat_artifact ) = 0 then
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_INT 4
28314: PPUSH
28315: CALL_OW 289
28319: PUSH
28320: LD_INT 0
28322: EQUAL
28323: IFFALSE 28340
// SetCargo ( i , mat_siberit , 100 ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_INT 3
28332: PPUSH
28333: LD_INT 100
28335: PPUSH
28336: CALL_OW 290
28340: GO 28304
28342: POP
28343: POP
// end ;
28344: PPOPN 2
28346: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28347: LD_EXP 74
28351: PUSH
28352: LD_EXP 119
28356: AND
28357: IFFALSE 28540
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_OWVAR 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: ST_TO_ADDR
// if not tmp then
28388: LD_VAR 0 2
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28540
// for i := 1 to 2 do
28397: LD_ADDR_VAR 0 1
28401: PUSH
28402: DOUBLE
28403: LD_INT 1
28405: DEC
28406: ST_TO_ADDR
28407: LD_INT 2
28409: PUSH
28410: FOR_TO
28411: IFFALSE 28538
// begin uc_side := your_side ;
28413: LD_ADDR_OWVAR 20
28417: PUSH
28418: LD_OWVAR 2
28422: ST_TO_ADDR
// uc_nation := nation_american ;
28423: LD_ADDR_OWVAR 21
28427: PUSH
28428: LD_INT 1
28430: ST_TO_ADDR
// vc_chassis := us_morphling ;
28431: LD_ADDR_OWVAR 37
28435: PUSH
28436: LD_INT 5
28438: ST_TO_ADDR
// vc_engine := engine_siberite ;
28439: LD_ADDR_OWVAR 39
28443: PUSH
28444: LD_INT 3
28446: ST_TO_ADDR
// vc_control := control_computer ;
28447: LD_ADDR_OWVAR 38
28451: PUSH
28452: LD_INT 3
28454: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28455: LD_ADDR_OWVAR 40
28459: PUSH
28460: LD_INT 10
28462: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28463: LD_VAR 0 2
28467: PUSH
28468: LD_INT 1
28470: ARRAY
28471: PPUSH
28472: CALL_OW 310
28476: NOT
28477: IFFALSE 28524
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28479: CALL_OW 45
28483: PPUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_INT 1
28491: ARRAY
28492: PPUSH
28493: CALL_OW 250
28497: PPUSH
28498: LD_VAR 0 2
28502: PUSH
28503: LD_INT 1
28505: ARRAY
28506: PPUSH
28507: CALL_OW 251
28511: PPUSH
28512: LD_INT 12
28514: PPUSH
28515: LD_INT 1
28517: PPUSH
28518: CALL_OW 50
28522: GO 28536
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28524: CALL_OW 45
28528: PPUSH
28529: LD_INT 1
28531: PPUSH
28532: CALL_OW 51
// end ;
28536: GO 28410
28538: POP
28539: POP
// end ;
28540: PPOPN 2
28542: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28543: LD_EXP 74
28547: PUSH
28548: LD_EXP 120
28552: AND
28553: IFFALSE 28775
28555: GO 28557
28557: DISABLE
28558: LD_INT 0
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28566: LD_ADDR_VAR 0 6
28570: PUSH
28571: LD_INT 22
28573: PUSH
28574: LD_OWVAR 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 21
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: LD_INT 23
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: PPUSH
28615: CALL_OW 69
28619: ST_TO_ADDR
// if not tmp then
28620: LD_VAR 0 6
28624: NOT
28625: IFFALSE 28629
// exit ;
28627: GO 28775
// s1 := rand ( 1 , 4 ) ;
28629: LD_ADDR_VAR 0 2
28633: PUSH
28634: LD_INT 1
28636: PPUSH
28637: LD_INT 4
28639: PPUSH
28640: CALL_OW 12
28644: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28645: LD_ADDR_VAR 0 4
28649: PUSH
28650: LD_VAR 0 6
28654: PUSH
28655: LD_INT 1
28657: ARRAY
28658: PPUSH
28659: LD_VAR 0 2
28663: PPUSH
28664: CALL_OW 259
28668: ST_TO_ADDR
// if s1 = 1 then
28669: LD_VAR 0 2
28673: PUSH
28674: LD_INT 1
28676: EQUAL
28677: IFFALSE 28697
// s2 := rand ( 2 , 4 ) else
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 2
28686: PPUSH
28687: LD_INT 4
28689: PPUSH
28690: CALL_OW 12
28694: ST_TO_ADDR
28695: GO 28705
// s2 := 1 ;
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 1
28704: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28705: LD_ADDR_VAR 0 5
28709: PUSH
28710: LD_VAR 0 6
28714: PUSH
28715: LD_INT 1
28717: ARRAY
28718: PPUSH
28719: LD_VAR 0 3
28723: PPUSH
28724: CALL_OW 259
28728: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28729: LD_VAR 0 6
28733: PUSH
28734: LD_INT 1
28736: ARRAY
28737: PPUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: LD_VAR 0 5
28747: PPUSH
28748: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28752: LD_VAR 0 6
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: PPUSH
28761: LD_VAR 0 3
28765: PPUSH
28766: LD_VAR 0 4
28770: PPUSH
28771: CALL_OW 237
// end ;
28775: PPOPN 6
28777: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28778: LD_EXP 74
28782: PUSH
28783: LD_EXP 121
28787: AND
28788: IFFALSE 28867
28790: GO 28792
28792: DISABLE
28793: LD_INT 0
28795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28796: LD_ADDR_VAR 0 1
28800: PUSH
28801: LD_INT 22
28803: PUSH
28804: LD_OWVAR 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 30
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// if not tmp then
28832: LD_VAR 0 1
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 28867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28841: LD_VAR 0 1
28845: PUSH
28846: LD_INT 1
28848: PPUSH
28849: LD_VAR 0 1
28853: PPUSH
28854: CALL_OW 12
28858: ARRAY
28859: PPUSH
28860: LD_INT 1
28862: PPUSH
28863: CALL_OW 234
// end ;
28867: PPOPN 1
28869: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28870: LD_EXP 74
28874: PUSH
28875: LD_EXP 122
28879: AND
28880: IFFALSE 28992
28882: GO 28884
28884: DISABLE
28885: LD_INT 0
28887: PPUSH
28888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28889: LD_ADDR_VAR 0 2
28893: PUSH
28894: LD_INT 22
28896: PUSH
28897: LD_OWVAR 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: LD_INT 30
28911: PUSH
28912: LD_INT 27
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: LD_INT 26
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 30
28931: PUSH
28932: LD_INT 28
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PPUSH
28949: CALL_OW 69
28953: ST_TO_ADDR
// if not tmp then
28954: LD_VAR 0 2
28958: NOT
28959: IFFALSE 28963
// exit ;
28961: GO 28992
// for i in tmp do
28963: LD_ADDR_VAR 0 1
28967: PUSH
28968: LD_VAR 0 2
28972: PUSH
28973: FOR_IN
28974: IFFALSE 28990
// SetLives ( i , 1 ) ;
28976: LD_VAR 0 1
28980: PPUSH
28981: LD_INT 1
28983: PPUSH
28984: CALL_OW 234
28988: GO 28973
28990: POP
28991: POP
// end ;
28992: PPOPN 2
28994: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28995: LD_EXP 74
28999: PUSH
29000: LD_EXP 123
29004: AND
29005: IFFALSE 29279
29007: GO 29009
29009: DISABLE
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
// begin i := rand ( 1 , 7 ) ;
29015: LD_ADDR_VAR 0 1
29019: PUSH
29020: LD_INT 1
29022: PPUSH
29023: LD_INT 7
29025: PPUSH
29026: CALL_OW 12
29030: ST_TO_ADDR
// case i of 1 :
29031: LD_VAR 0 1
29035: PUSH
29036: LD_INT 1
29038: DOUBLE
29039: EQUAL
29040: IFTRUE 29044
29042: GO 29054
29044: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29045: LD_STRING earthquake(getX(game), 0, 32)
29047: PPUSH
29048: CALL_OW 559
29052: GO 29279
29054: LD_INT 2
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29076
29062: POP
// begin ToLua ( displayStucuk(); ) ;
29063: LD_STRING displayStucuk();
29065: PPUSH
29066: CALL_OW 559
// ResetFog ;
29070: CALL_OW 335
// end ; 3 :
29074: GO 29279
29076: LD_INT 3
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29188
29084: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29085: LD_ADDR_VAR 0 2
29089: PUSH
29090: LD_INT 22
29092: PUSH
29093: LD_OWVAR 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 25
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 69
29120: ST_TO_ADDR
// if not tmp then
29121: LD_VAR 0 2
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29279
// un := tmp [ rand ( 1 , tmp ) ] ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_VAR 0 2
29139: PUSH
29140: LD_INT 1
29142: PPUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 12
29152: ARRAY
29153: ST_TO_ADDR
// if Crawls ( un ) then
29154: LD_VAR 0 3
29158: PPUSH
29159: CALL_OW 318
29163: IFFALSE 29174
// ComWalk ( un ) ;
29165: LD_VAR 0 3
29169: PPUSH
29170: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29174: LD_VAR 0 3
29178: PPUSH
29179: LD_INT 8
29181: PPUSH
29182: CALL_OW 336
// end ; 4 :
29186: GO 29279
29188: LD_INT 4
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29257
29196: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 22
29204: PUSH
29205: LD_OWVAR 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 30
29216: PUSH
29217: LD_INT 29
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 69
29232: ST_TO_ADDR
// if not tmp then
29233: LD_VAR 0 2
29237: NOT
29238: IFFALSE 29242
// exit ;
29240: GO 29279
// DestroyUnit ( tmp [ 1 ] ) ;
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: CALL_OW 65
// end ; 5 .. 7 :
29255: GO 29279
29257: LD_INT 5
29259: DOUBLE
29260: GREATEREQUAL
29261: IFFALSE 29269
29263: LD_INT 7
29265: DOUBLE
29266: LESSEQUAL
29267: IFTRUE 29271
29269: GO 29278
29271: POP
// StreamSibBomb ; end ;
29272: CALL 25529 0 0
29276: GO 29279
29278: POP
// end ;
29279: PPOPN 3
29281: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29282: LD_EXP 74
29286: PUSH
29287: LD_EXP 124
29291: AND
29292: IFFALSE 29448
29294: GO 29296
29296: DISABLE
29297: LD_INT 0
29299: PPUSH
29300: PPUSH
29301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29302: LD_ADDR_VAR 0 2
29306: PUSH
29307: LD_INT 81
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 21
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 21
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 69
29355: ST_TO_ADDR
// if not tmp then
29356: LD_VAR 0 2
29360: NOT
29361: IFFALSE 29365
// exit ;
29363: GO 29448
// p := 0 ;
29365: LD_ADDR_VAR 0 3
29369: PUSH
29370: LD_INT 0
29372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29373: LD_INT 35
29375: PPUSH
29376: CALL_OW 67
// p := p + 1 ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_VAR 0 3
29389: PUSH
29390: LD_INT 1
29392: PLUS
29393: ST_TO_ADDR
// for i in tmp do
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_VAR 0 2
29403: PUSH
29404: FOR_IN
29405: IFFALSE 29436
// if GetLives ( i ) < 1000 then
29407: LD_VAR 0 1
29411: PPUSH
29412: CALL_OW 256
29416: PUSH
29417: LD_INT 1000
29419: LESS
29420: IFFALSE 29434
// SetLives ( i , 1000 ) ;
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_INT 1000
29429: PPUSH
29430: CALL_OW 234
29434: GO 29404
29436: POP
29437: POP
// until p > 20 ;
29438: LD_VAR 0 3
29442: PUSH
29443: LD_INT 20
29445: GREATER
29446: IFFALSE 29373
// end ;
29448: PPOPN 3
29450: END
// every 0 0$1 trigger StreamModeActive and sTime do
29451: LD_EXP 74
29455: PUSH
29456: LD_EXP 125
29460: AND
29461: IFFALSE 29496
29463: GO 29465
29465: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29466: LD_INT 28
29468: PPUSH
29469: LD_OWVAR 2
29473: PPUSH
29474: LD_INT 2
29476: PPUSH
29477: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29481: LD_INT 30
29483: PPUSH
29484: LD_OWVAR 2
29488: PPUSH
29489: LD_INT 2
29491: PPUSH
29492: CALL_OW 322
// end ;
29496: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29497: LD_EXP 74
29501: PUSH
29502: LD_EXP 126
29506: AND
29507: IFFALSE 29628
29509: GO 29511
29511: DISABLE
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29516: LD_ADDR_VAR 0 2
29520: PUSH
29521: LD_INT 22
29523: PUSH
29524: LD_OWVAR 2
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 21
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: LD_INT 23
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: ST_TO_ADDR
// if not tmp then
29570: LD_VAR 0 2
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29628
// for i in tmp do
29579: LD_ADDR_VAR 0 1
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: FOR_IN
29590: IFFALSE 29626
// begin if Crawls ( i ) then
29592: LD_VAR 0 1
29596: PPUSH
29597: CALL_OW 318
29601: IFFALSE 29612
// ComWalk ( i ) ;
29603: LD_VAR 0 1
29607: PPUSH
29608: CALL_OW 138
// SetClass ( i , 2 ) ;
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_INT 2
29619: PPUSH
29620: CALL_OW 336
// end ;
29624: GO 29589
29626: POP
29627: POP
// end ;
29628: PPOPN 2
29630: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29631: LD_EXP 74
29635: PUSH
29636: LD_EXP 127
29640: AND
29641: IFFALSE 29922
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
29650: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29651: LD_OWVAR 2
29655: PPUSH
29656: LD_INT 9
29658: PPUSH
29659: LD_INT 1
29661: PPUSH
29662: LD_INT 1
29664: PPUSH
29665: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29669: LD_INT 9
29671: PPUSH
29672: LD_OWVAR 2
29676: PPUSH
29677: CALL_OW 343
// uc_side := 9 ;
29681: LD_ADDR_OWVAR 20
29685: PUSH
29686: LD_INT 9
29688: ST_TO_ADDR
// uc_nation := 2 ;
29689: LD_ADDR_OWVAR 21
29693: PUSH
29694: LD_INT 2
29696: ST_TO_ADDR
// hc_name := Dark Warrior ;
29697: LD_ADDR_OWVAR 26
29701: PUSH
29702: LD_STRING Dark Warrior
29704: ST_TO_ADDR
// hc_gallery :=  ;
29705: LD_ADDR_OWVAR 33
29709: PUSH
29710: LD_STRING 
29712: ST_TO_ADDR
// hc_noskilllimit := true ;
29713: LD_ADDR_OWVAR 76
29717: PUSH
29718: LD_INT 1
29720: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29721: LD_ADDR_OWVAR 31
29725: PUSH
29726: LD_INT 30
29728: PUSH
29729: LD_INT 30
29731: PUSH
29732: LD_INT 30
29734: PUSH
29735: LD_INT 30
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: ST_TO_ADDR
// un := CreateHuman ;
29744: LD_ADDR_VAR 0 3
29748: PUSH
29749: CALL_OW 44
29753: ST_TO_ADDR
// hc_noskilllimit := false ;
29754: LD_ADDR_OWVAR 76
29758: PUSH
29759: LD_INT 0
29761: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29762: LD_VAR 0 3
29766: PPUSH
29767: LD_INT 1
29769: PPUSH
29770: CALL_OW 51
// p := 0 ;
29774: LD_ADDR_VAR 0 2
29778: PUSH
29779: LD_INT 0
29781: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29782: LD_INT 35
29784: PPUSH
29785: CALL_OW 67
// p := p + 1 ;
29789: LD_ADDR_VAR 0 2
29793: PUSH
29794: LD_VAR 0 2
29798: PUSH
29799: LD_INT 1
29801: PLUS
29802: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29803: LD_VAR 0 3
29807: PPUSH
29808: CALL_OW 256
29812: PUSH
29813: LD_INT 1000
29815: LESS
29816: IFFALSE 29830
// SetLives ( un , 1000 ) ;
29818: LD_VAR 0 3
29822: PPUSH
29823: LD_INT 1000
29825: PPUSH
29826: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29830: LD_VAR 0 3
29834: PPUSH
29835: LD_INT 81
29837: PUSH
29838: LD_OWVAR 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 91
29849: PUSH
29850: LD_VAR 0 3
29854: PUSH
29855: LD_INT 30
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PPUSH
29867: CALL_OW 69
29871: PPUSH
29872: LD_VAR 0 3
29876: PPUSH
29877: CALL_OW 74
29881: PPUSH
29882: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29886: LD_VAR 0 2
29890: PUSH
29891: LD_INT 60
29893: GREATER
29894: PUSH
29895: LD_VAR 0 3
29899: PPUSH
29900: CALL_OW 301
29904: OR
29905: IFFALSE 29782
// if un then
29907: LD_VAR 0 3
29911: IFFALSE 29922
// RemoveUnit ( un ) ;
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL_OW 64
// end ;
29922: PPOPN 3
29924: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29925: LD_INT 0
29927: PPUSH
// case cmd of 301 :
29928: LD_VAR 0 1
29932: PUSH
29933: LD_INT 301
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29973
29941: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29942: LD_VAR 0 6
29946: PPUSH
29947: LD_VAR 0 7
29951: PPUSH
29952: LD_VAR 0 8
29956: PPUSH
29957: LD_VAR 0 4
29961: PPUSH
29962: LD_VAR 0 5
29966: PPUSH
29967: CALL 31174 0 5
29971: GO 30094
29973: LD_INT 302
29975: DOUBLE
29976: EQUAL
29977: IFTRUE 29981
29979: GO 30018
29981: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29982: LD_VAR 0 6
29986: PPUSH
29987: LD_VAR 0 7
29991: PPUSH
29992: LD_VAR 0 8
29996: PPUSH
29997: LD_VAR 0 9
30001: PPUSH
30002: LD_VAR 0 4
30006: PPUSH
30007: LD_VAR 0 5
30011: PPUSH
30012: CALL 31265 0 6
30016: GO 30094
30018: LD_INT 303
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30063
30026: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30027: LD_VAR 0 6
30031: PPUSH
30032: LD_VAR 0 7
30036: PPUSH
30037: LD_VAR 0 8
30041: PPUSH
30042: LD_VAR 0 9
30046: PPUSH
30047: LD_VAR 0 4
30051: PPUSH
30052: LD_VAR 0 5
30056: PPUSH
30057: CALL 30099 0 6
30061: GO 30094
30063: LD_INT 304
30065: DOUBLE
30066: EQUAL
30067: IFTRUE 30071
30069: GO 30093
30071: POP
// hHackTeleport ( unit , x , y ) ; end ;
30072: LD_VAR 0 2
30076: PPUSH
30077: LD_VAR 0 4
30081: PPUSH
30082: LD_VAR 0 5
30086: PPUSH
30087: CALL 31858 0 3
30091: GO 30094
30093: POP
// end ;
30094: LD_VAR 0 12
30098: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30103: LD_VAR 0 1
30107: PUSH
30108: LD_INT 1
30110: LESS
30111: PUSH
30112: LD_VAR 0 1
30116: PUSH
30117: LD_INT 3
30119: GREATER
30120: OR
30121: PUSH
30122: LD_VAR 0 5
30126: PPUSH
30127: LD_VAR 0 6
30131: PPUSH
30132: CALL_OW 428
30136: OR
30137: IFFALSE 30141
// exit ;
30139: GO 30861
// uc_side := your_side ;
30141: LD_ADDR_OWVAR 20
30145: PUSH
30146: LD_OWVAR 2
30150: ST_TO_ADDR
// uc_nation := nation ;
30151: LD_ADDR_OWVAR 21
30155: PUSH
30156: LD_VAR 0 1
30160: ST_TO_ADDR
// bc_level = 1 ;
30161: LD_ADDR_OWVAR 43
30165: PUSH
30166: LD_INT 1
30168: ST_TO_ADDR
// case btype of 1 :
30169: LD_VAR 0 2
30173: PUSH
30174: LD_INT 1
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30193
30182: POP
// bc_type := b_depot ; 2 :
30183: LD_ADDR_OWVAR 42
30187: PUSH
30188: LD_INT 0
30190: ST_TO_ADDR
30191: GO 30805
30193: LD_INT 2
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30212
30201: POP
// bc_type := b_warehouse ; 3 :
30202: LD_ADDR_OWVAR 42
30206: PUSH
30207: LD_INT 1
30209: ST_TO_ADDR
30210: GO 30805
30212: LD_INT 3
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30231
30220: POP
// bc_type := b_lab ; 4 .. 9 :
30221: LD_ADDR_OWVAR 42
30225: PUSH
30226: LD_INT 6
30228: ST_TO_ADDR
30229: GO 30805
30231: LD_INT 4
30233: DOUBLE
30234: GREATEREQUAL
30235: IFFALSE 30243
30237: LD_INT 9
30239: DOUBLE
30240: LESSEQUAL
30241: IFTRUE 30245
30243: GO 30297
30245: POP
// begin bc_type := b_lab_half ;
30246: LD_ADDR_OWVAR 42
30250: PUSH
30251: LD_INT 7
30253: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30254: LD_ADDR_OWVAR 44
30258: PUSH
30259: LD_INT 10
30261: PUSH
30262: LD_INT 11
30264: PUSH
30265: LD_INT 12
30267: PUSH
30268: LD_INT 15
30270: PUSH
30271: LD_INT 14
30273: PUSH
30274: LD_INT 13
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: PUSH
30285: LD_VAR 0 2
30289: PUSH
30290: LD_INT 3
30292: MINUS
30293: ARRAY
30294: ST_TO_ADDR
// end ; 10 .. 13 :
30295: GO 30805
30297: LD_INT 10
30299: DOUBLE
30300: GREATEREQUAL
30301: IFFALSE 30309
30303: LD_INT 13
30305: DOUBLE
30306: LESSEQUAL
30307: IFTRUE 30311
30309: GO 30388
30311: POP
// begin bc_type := b_lab_full ;
30312: LD_ADDR_OWVAR 42
30316: PUSH
30317: LD_INT 8
30319: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30320: LD_ADDR_OWVAR 44
30324: PUSH
30325: LD_INT 10
30327: PUSH
30328: LD_INT 12
30330: PUSH
30331: LD_INT 14
30333: PUSH
30334: LD_INT 13
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: PUSH
30343: LD_VAR 0 2
30347: PUSH
30348: LD_INT 9
30350: MINUS
30351: ARRAY
30352: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30353: LD_ADDR_OWVAR 45
30357: PUSH
30358: LD_INT 11
30360: PUSH
30361: LD_INT 15
30363: PUSH
30364: LD_INT 12
30366: PUSH
30367: LD_INT 15
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: PUSH
30376: LD_VAR 0 2
30380: PUSH
30381: LD_INT 9
30383: MINUS
30384: ARRAY
30385: ST_TO_ADDR
// end ; 14 :
30386: GO 30805
30388: LD_INT 14
30390: DOUBLE
30391: EQUAL
30392: IFTRUE 30396
30394: GO 30407
30396: POP
// bc_type := b_workshop ; 15 :
30397: LD_ADDR_OWVAR 42
30401: PUSH
30402: LD_INT 2
30404: ST_TO_ADDR
30405: GO 30805
30407: LD_INT 15
30409: DOUBLE
30410: EQUAL
30411: IFTRUE 30415
30413: GO 30426
30415: POP
// bc_type := b_factory ; 16 :
30416: LD_ADDR_OWVAR 42
30420: PUSH
30421: LD_INT 3
30423: ST_TO_ADDR
30424: GO 30805
30426: LD_INT 16
30428: DOUBLE
30429: EQUAL
30430: IFTRUE 30434
30432: GO 30445
30434: POP
// bc_type := b_ext_gun ; 17 :
30435: LD_ADDR_OWVAR 42
30439: PUSH
30440: LD_INT 17
30442: ST_TO_ADDR
30443: GO 30805
30445: LD_INT 17
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30481
30453: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30454: LD_ADDR_OWVAR 42
30458: PUSH
30459: LD_INT 19
30461: PUSH
30462: LD_INT 23
30464: PUSH
30465: LD_INT 19
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: PUSH
30473: LD_VAR 0 1
30477: ARRAY
30478: ST_TO_ADDR
30479: GO 30805
30481: LD_INT 18
30483: DOUBLE
30484: EQUAL
30485: IFTRUE 30489
30487: GO 30500
30489: POP
// bc_type := b_ext_radar ; 19 :
30490: LD_ADDR_OWVAR 42
30494: PUSH
30495: LD_INT 20
30497: ST_TO_ADDR
30498: GO 30805
30500: LD_INT 19
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30519
30508: POP
// bc_type := b_ext_radio ; 20 :
30509: LD_ADDR_OWVAR 42
30513: PUSH
30514: LD_INT 22
30516: ST_TO_ADDR
30517: GO 30805
30519: LD_INT 20
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30538
30527: POP
// bc_type := b_ext_siberium ; 21 :
30528: LD_ADDR_OWVAR 42
30532: PUSH
30533: LD_INT 21
30535: ST_TO_ADDR
30536: GO 30805
30538: LD_INT 21
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30557
30546: POP
// bc_type := b_ext_computer ; 22 :
30547: LD_ADDR_OWVAR 42
30551: PUSH
30552: LD_INT 24
30554: ST_TO_ADDR
30555: GO 30805
30557: LD_INT 22
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30576
30565: POP
// bc_type := b_ext_track ; 23 :
30566: LD_ADDR_OWVAR 42
30570: PUSH
30571: LD_INT 16
30573: ST_TO_ADDR
30574: GO 30805
30576: LD_INT 23
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30595
30584: POP
// bc_type := b_ext_laser ; 24 :
30585: LD_ADDR_OWVAR 42
30589: PUSH
30590: LD_INT 25
30592: ST_TO_ADDR
30593: GO 30805
30595: LD_INT 24
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30614
30603: POP
// bc_type := b_control_tower ; 25 :
30604: LD_ADDR_OWVAR 42
30608: PUSH
30609: LD_INT 36
30611: ST_TO_ADDR
30612: GO 30805
30614: LD_INT 25
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30633
30622: POP
// bc_type := b_breastwork ; 26 :
30623: LD_ADDR_OWVAR 42
30627: PUSH
30628: LD_INT 31
30630: ST_TO_ADDR
30631: GO 30805
30633: LD_INT 26
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30652
30641: POP
// bc_type := b_bunker ; 27 :
30642: LD_ADDR_OWVAR 42
30646: PUSH
30647: LD_INT 32
30649: ST_TO_ADDR
30650: GO 30805
30652: LD_INT 27
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30671
30660: POP
// bc_type := b_turret ; 28 :
30661: LD_ADDR_OWVAR 42
30665: PUSH
30666: LD_INT 33
30668: ST_TO_ADDR
30669: GO 30805
30671: LD_INT 28
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30690
30679: POP
// bc_type := b_armoury ; 29 :
30680: LD_ADDR_OWVAR 42
30684: PUSH
30685: LD_INT 4
30687: ST_TO_ADDR
30688: GO 30805
30690: LD_INT 29
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// bc_type := b_barracks ; 30 :
30699: LD_ADDR_OWVAR 42
30703: PUSH
30704: LD_INT 5
30706: ST_TO_ADDR
30707: GO 30805
30709: LD_INT 30
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30728
30717: POP
// bc_type := b_solar_power ; 31 :
30718: LD_ADDR_OWVAR 42
30722: PUSH
30723: LD_INT 27
30725: ST_TO_ADDR
30726: GO 30805
30728: LD_INT 31
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30747
30736: POP
// bc_type := b_oil_power ; 32 :
30737: LD_ADDR_OWVAR 42
30741: PUSH
30742: LD_INT 26
30744: ST_TO_ADDR
30745: GO 30805
30747: LD_INT 32
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30766
30755: POP
// bc_type := b_siberite_power ; 33 :
30756: LD_ADDR_OWVAR 42
30760: PUSH
30761: LD_INT 28
30763: ST_TO_ADDR
30764: GO 30805
30766: LD_INT 33
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30785
30774: POP
// bc_type := b_oil_mine ; 34 :
30775: LD_ADDR_OWVAR 42
30779: PUSH
30780: LD_INT 29
30782: ST_TO_ADDR
30783: GO 30805
30785: LD_INT 34
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30804
30793: POP
// bc_type := b_siberite_mine ; end ;
30794: LD_ADDR_OWVAR 42
30798: PUSH
30799: LD_INT 30
30801: ST_TO_ADDR
30802: GO 30805
30804: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30805: LD_ADDR_VAR 0 8
30809: PUSH
30810: LD_VAR 0 5
30814: PPUSH
30815: LD_VAR 0 6
30819: PPUSH
30820: LD_VAR 0 3
30824: PPUSH
30825: CALL_OW 47
30829: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30830: LD_OWVAR 42
30834: PUSH
30835: LD_INT 32
30837: PUSH
30838: LD_INT 33
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: IN
30845: IFFALSE 30861
// PlaceWeaponTurret ( b , weapon ) ;
30847: LD_VAR 0 8
30851: PPUSH
30852: LD_VAR 0 4
30856: PPUSH
30857: CALL_OW 431
// end ;
30861: LD_VAR 0 7
30865: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30866: LD_INT 0
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30872: LD_ADDR_VAR 0 4
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 30
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 30
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 4
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 30994
// for i in tmp do
30935: LD_ADDR_VAR 0 2
30939: PUSH
30940: LD_VAR 0 4
30944: PUSH
30945: FOR_IN
30946: IFFALSE 30992
// for j = 1 to 3 do
30948: LD_ADDR_VAR 0 3
30952: PUSH
30953: DOUBLE
30954: LD_INT 1
30956: DEC
30957: ST_TO_ADDR
30958: LD_INT 3
30960: PUSH
30961: FOR_TO
30962: IFFALSE 30988
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30964: LD_VAR 0 2
30968: PPUSH
30969: CALL_OW 274
30973: PPUSH
30974: LD_VAR 0 3
30978: PPUSH
30979: LD_INT 99999
30981: PPUSH
30982: CALL_OW 277
30986: GO 30961
30988: POP
30989: POP
30990: GO 30945
30992: POP
30993: POP
// end ;
30994: LD_VAR 0 1
30998: RET
// export function hHackSetLevel10 ; var i , j ; begin
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
31003: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31004: LD_ADDR_VAR 0 2
31008: PUSH
31009: LD_INT 21
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PPUSH
31019: CALL_OW 69
31023: PUSH
31024: FOR_IN
31025: IFFALSE 31077
// if IsSelected ( i ) then
31027: LD_VAR 0 2
31031: PPUSH
31032: CALL_OW 306
31036: IFFALSE 31075
// begin for j := 1 to 4 do
31038: LD_ADDR_VAR 0 3
31042: PUSH
31043: DOUBLE
31044: LD_INT 1
31046: DEC
31047: ST_TO_ADDR
31048: LD_INT 4
31050: PUSH
31051: FOR_TO
31052: IFFALSE 31073
// SetSkill ( i , j , 10 ) ;
31054: LD_VAR 0 2
31058: PPUSH
31059: LD_VAR 0 3
31063: PPUSH
31064: LD_INT 10
31066: PPUSH
31067: CALL_OW 237
31071: GO 31051
31073: POP
31074: POP
// end ;
31075: GO 31024
31077: POP
31078: POP
// end ;
31079: LD_VAR 0 1
31083: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
31088: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31089: LD_ADDR_VAR 0 2
31093: PUSH
31094: LD_INT 22
31096: PUSH
31097: LD_OWVAR 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 21
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PPUSH
31120: CALL_OW 69
31124: PUSH
31125: FOR_IN
31126: IFFALSE 31167
// begin for j := 1 to 4 do
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: DOUBLE
31134: LD_INT 1
31136: DEC
31137: ST_TO_ADDR
31138: LD_INT 4
31140: PUSH
31141: FOR_TO
31142: IFFALSE 31163
// SetSkill ( i , j , 10 ) ;
31144: LD_VAR 0 2
31148: PPUSH
31149: LD_VAR 0 3
31153: PPUSH
31154: LD_INT 10
31156: PPUSH
31157: CALL_OW 237
31161: GO 31141
31163: POP
31164: POP
// end ;
31165: GO 31125
31167: POP
31168: POP
// end ;
31169: LD_VAR 0 1
31173: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31174: LD_INT 0
31176: PPUSH
// uc_side := your_side ;
31177: LD_ADDR_OWVAR 20
31181: PUSH
31182: LD_OWVAR 2
31186: ST_TO_ADDR
// uc_nation := nation ;
31187: LD_ADDR_OWVAR 21
31191: PUSH
31192: LD_VAR 0 1
31196: ST_TO_ADDR
// InitHc ;
31197: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31201: LD_INT 0
31203: PPUSH
31204: LD_VAR 0 2
31208: PPUSH
31209: LD_VAR 0 3
31213: PPUSH
31214: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31218: LD_VAR 0 4
31222: PPUSH
31223: LD_VAR 0 5
31227: PPUSH
31228: CALL_OW 428
31232: PUSH
31233: LD_INT 0
31235: EQUAL
31236: IFFALSE 31260
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31238: CALL_OW 44
31242: PPUSH
31243: LD_VAR 0 4
31247: PPUSH
31248: LD_VAR 0 5
31252: PPUSH
31253: LD_INT 1
31255: PPUSH
31256: CALL_OW 48
// end ;
31260: LD_VAR 0 6
31264: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31265: LD_INT 0
31267: PPUSH
31268: PPUSH
// uc_side := your_side ;
31269: LD_ADDR_OWVAR 20
31273: PUSH
31274: LD_OWVAR 2
31278: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31279: LD_VAR 0 1
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 4
31295: PUSH
31296: LD_INT 5
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: IN
31306: IFFALSE 31318
// uc_nation := nation_american else
31308: LD_ADDR_OWVAR 21
31312: PUSH
31313: LD_INT 1
31315: ST_TO_ADDR
31316: GO 31361
// if chassis in [ 11 , 12 , 13 , 14 ] then
31318: LD_VAR 0 1
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: IN
31341: IFFALSE 31353
// uc_nation := nation_arabian else
31343: LD_ADDR_OWVAR 21
31347: PUSH
31348: LD_INT 2
31350: ST_TO_ADDR
31351: GO 31361
// uc_nation := nation_russian ;
31353: LD_ADDR_OWVAR 21
31357: PUSH
31358: LD_INT 3
31360: ST_TO_ADDR
// vc_chassis := chassis ;
31361: LD_ADDR_OWVAR 37
31365: PUSH
31366: LD_VAR 0 1
31370: ST_TO_ADDR
// vc_engine := engine ;
31371: LD_ADDR_OWVAR 39
31375: PUSH
31376: LD_VAR 0 2
31380: ST_TO_ADDR
// vc_control := control ;
31381: LD_ADDR_OWVAR 38
31385: PUSH
31386: LD_VAR 0 3
31390: ST_TO_ADDR
// vc_weapon := weapon ;
31391: LD_ADDR_OWVAR 40
31395: PUSH
31396: LD_VAR 0 4
31400: ST_TO_ADDR
// un := CreateVehicle ;
31401: LD_ADDR_VAR 0 8
31405: PUSH
31406: CALL_OW 45
31410: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31411: LD_VAR 0 8
31415: PPUSH
31416: LD_INT 0
31418: PPUSH
31419: LD_INT 5
31421: PPUSH
31422: CALL_OW 12
31426: PPUSH
31427: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31431: LD_VAR 0 8
31435: PPUSH
31436: LD_VAR 0 5
31440: PPUSH
31441: LD_VAR 0 6
31445: PPUSH
31446: LD_INT 1
31448: PPUSH
31449: CALL_OW 48
// end ;
31453: LD_VAR 0 7
31457: RET
// export hInvincible ; every 1 do
31458: GO 31460
31460: DISABLE
// hInvincible := [ ] ;
31461: LD_ADDR_EXP 128
31465: PUSH
31466: EMPTY
31467: ST_TO_ADDR
31468: END
// every 10 do var i ;
31469: GO 31471
31471: DISABLE
31472: LD_INT 0
31474: PPUSH
// begin enable ;
31475: ENABLE
// if not hInvincible then
31476: LD_EXP 128
31480: NOT
31481: IFFALSE 31485
// exit ;
31483: GO 31529
// for i in hInvincible do
31485: LD_ADDR_VAR 0 1
31489: PUSH
31490: LD_EXP 128
31494: PUSH
31495: FOR_IN
31496: IFFALSE 31527
// if GetLives ( i ) < 1000 then
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 256
31507: PUSH
31508: LD_INT 1000
31510: LESS
31511: IFFALSE 31525
// SetLives ( i , 1000 ) ;
31513: LD_VAR 0 1
31517: PPUSH
31518: LD_INT 1000
31520: PPUSH
31521: CALL_OW 234
31525: GO 31495
31527: POP
31528: POP
// end ;
31529: PPOPN 1
31531: END
// export function hHackInvincible ; var i ; begin
31532: LD_INT 0
31534: PPUSH
31535: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31536: LD_ADDR_VAR 0 2
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 21
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 21
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: PPUSH
31569: CALL_OW 69
31573: PUSH
31574: FOR_IN
31575: IFFALSE 31636
// if IsSelected ( i ) then
31577: LD_VAR 0 2
31581: PPUSH
31582: CALL_OW 306
31586: IFFALSE 31634
// begin if i in hInvincible then
31588: LD_VAR 0 2
31592: PUSH
31593: LD_EXP 128
31597: IN
31598: IFFALSE 31618
// hInvincible := hInvincible diff i else
31600: LD_ADDR_EXP 128
31604: PUSH
31605: LD_EXP 128
31609: PUSH
31610: LD_VAR 0 2
31614: DIFF
31615: ST_TO_ADDR
31616: GO 31634
// hInvincible := hInvincible union i ;
31618: LD_ADDR_EXP 128
31622: PUSH
31623: LD_EXP 128
31627: PUSH
31628: LD_VAR 0 2
31632: UNION
31633: ST_TO_ADDR
// end ;
31634: GO 31574
31636: POP
31637: POP
// end ;
31638: LD_VAR 0 1
31642: RET
// export function hHackInvisible ; var i , j ; begin
31643: LD_INT 0
31645: PPUSH
31646: PPUSH
31647: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 21
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PPUSH
31663: CALL_OW 69
31667: PUSH
31668: FOR_IN
31669: IFFALSE 31693
// if IsSelected ( i ) then
31671: LD_VAR 0 2
31675: PPUSH
31676: CALL_OW 306
31680: IFFALSE 31691
// ComForceInvisible ( i ) ;
31682: LD_VAR 0 2
31686: PPUSH
31687: CALL_OW 496
31691: GO 31668
31693: POP
31694: POP
// end ;
31695: LD_VAR 0 1
31699: RET
// export function hHackChangeYourSide ; begin
31700: LD_INT 0
31702: PPUSH
// if your_side = 8 then
31703: LD_OWVAR 2
31707: PUSH
31708: LD_INT 8
31710: EQUAL
31711: IFFALSE 31723
// your_side := 0 else
31713: LD_ADDR_OWVAR 2
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
31721: GO 31737
// your_side := your_side + 1 ;
31723: LD_ADDR_OWVAR 2
31727: PUSH
31728: LD_OWVAR 2
31732: PUSH
31733: LD_INT 1
31735: PLUS
31736: ST_TO_ADDR
// end ;
31737: LD_VAR 0 1
31741: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31742: LD_INT 0
31744: PPUSH
31745: PPUSH
31746: PPUSH
// for i in all_units do
31747: LD_ADDR_VAR 0 2
31751: PUSH
31752: LD_OWVAR 3
31756: PUSH
31757: FOR_IN
31758: IFFALSE 31836
// if IsSelected ( i ) then
31760: LD_VAR 0 2
31764: PPUSH
31765: CALL_OW 306
31769: IFFALSE 31834
// begin j := GetSide ( i ) ;
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_VAR 0 2
31780: PPUSH
31781: CALL_OW 255
31785: ST_TO_ADDR
// if j = 8 then
31786: LD_VAR 0 3
31790: PUSH
31791: LD_INT 8
31793: EQUAL
31794: IFFALSE 31806
// j := 0 else
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: LD_INT 0
31803: ST_TO_ADDR
31804: GO 31820
// j := j + 1 ;
31806: LD_ADDR_VAR 0 3
31810: PUSH
31811: LD_VAR 0 3
31815: PUSH
31816: LD_INT 1
31818: PLUS
31819: ST_TO_ADDR
// SetSide ( i , j ) ;
31820: LD_VAR 0 2
31824: PPUSH
31825: LD_VAR 0 3
31829: PPUSH
31830: CALL_OW 235
// end ;
31834: GO 31757
31836: POP
31837: POP
// end ;
31838: LD_VAR 0 1
31842: RET
// export function hHackFog ; begin
31843: LD_INT 0
31845: PPUSH
// FogOff ( true ) ;
31846: LD_INT 1
31848: PPUSH
31849: CALL_OW 344
// end ;
31853: LD_VAR 0 1
31857: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31858: LD_INT 0
31860: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31861: LD_VAR 0 1
31865: PPUSH
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_VAR 0 3
31875: PPUSH
31876: LD_INT 1
31878: PPUSH
31879: LD_INT 1
31881: PPUSH
31882: CALL_OW 483
// CenterOnXY ( x , y ) ;
31886: LD_VAR 0 2
31890: PPUSH
31891: LD_VAR 0 3
31895: PPUSH
31896: CALL_OW 84
// end ; end_of_file
31900: LD_VAR 0 4
31904: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31905: LD_INT 0
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 264
31920: PUSH
31921: LD_EXP 59
31925: EQUAL
31926: IFFALSE 31998
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31928: LD_INT 68
31930: PPUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 255
31940: PPUSH
31941: CALL_OW 321
31945: PUSH
31946: LD_INT 2
31948: EQUAL
31949: IFFALSE 31961
// eff := 70 else
31951: LD_ADDR_VAR 0 4
31955: PUSH
31956: LD_INT 70
31958: ST_TO_ADDR
31959: GO 31969
// eff := 30 ;
31961: LD_ADDR_VAR 0 4
31965: PUSH
31966: LD_INT 30
31968: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 250
31978: PPUSH
31979: LD_VAR 0 1
31983: PPUSH
31984: CALL_OW 251
31988: PPUSH
31989: LD_VAR 0 4
31993: PPUSH
31994: CALL_OW 495
// end ; end ;
31998: LD_VAR 0 2
32002: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32003: LD_INT 0
32005: PPUSH
// end ;
32006: LD_VAR 0 4
32010: RET
// export function SOS_Command ( cmd ) ; begin
32011: LD_INT 0
32013: PPUSH
// end ;
32014: LD_VAR 0 2
32018: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32019: LD_INT 0
32021: PPUSH
// if cmd = 121 then
32022: LD_VAR 0 1
32026: PUSH
32027: LD_INT 121
32029: EQUAL
32030: IFFALSE 32032
// end ;
32032: LD_VAR 0 6
32036: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32037: LD_INT 0
32039: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32040: LD_VAR 0 1
32044: PUSH
32045: LD_INT 250
32047: EQUAL
32048: PUSH
32049: LD_VAR 0 2
32053: PPUSH
32054: CALL_OW 264
32058: PUSH
32059: LD_EXP 62
32063: EQUAL
32064: AND
32065: IFFALSE 32086
// MinerPlaceMine ( unit , x , y ) ;
32067: LD_VAR 0 2
32071: PPUSH
32072: LD_VAR 0 4
32076: PPUSH
32077: LD_VAR 0 5
32081: PPUSH
32082: CALL 34435 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32086: LD_VAR 0 1
32090: PUSH
32091: LD_INT 251
32093: EQUAL
32094: PUSH
32095: LD_VAR 0 2
32099: PPUSH
32100: CALL_OW 264
32104: PUSH
32105: LD_EXP 62
32109: EQUAL
32110: AND
32111: IFFALSE 32132
// MinerDetonateMine ( unit , x , y ) ;
32113: LD_VAR 0 2
32117: PPUSH
32118: LD_VAR 0 4
32122: PPUSH
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL 34712 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32132: LD_VAR 0 1
32136: PUSH
32137: LD_INT 252
32139: EQUAL
32140: PUSH
32141: LD_VAR 0 2
32145: PPUSH
32146: CALL_OW 264
32150: PUSH
32151: LD_EXP 62
32155: EQUAL
32156: AND
32157: IFFALSE 32178
// MinerCreateMinefield ( unit , x , y ) ;
32159: LD_VAR 0 2
32163: PPUSH
32164: LD_VAR 0 4
32168: PPUSH
32169: LD_VAR 0 5
32173: PPUSH
32174: CALL 35129 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32178: LD_VAR 0 1
32182: PUSH
32183: LD_INT 253
32185: EQUAL
32186: PUSH
32187: LD_VAR 0 2
32191: PPUSH
32192: CALL_OW 257
32196: PUSH
32197: LD_INT 5
32199: EQUAL
32200: AND
32201: IFFALSE 32222
// ComBinocular ( unit , x , y ) ;
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_VAR 0 4
32212: PPUSH
32213: LD_VAR 0 5
32217: PPUSH
32218: CALL 35500 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32222: LD_VAR 0 1
32226: PUSH
32227: LD_INT 254
32229: EQUAL
32230: PUSH
32231: LD_VAR 0 2
32235: PPUSH
32236: CALL_OW 264
32240: PUSH
32241: LD_EXP 57
32245: EQUAL
32246: AND
32247: PUSH
32248: LD_VAR 0 3
32252: PPUSH
32253: CALL_OW 263
32257: PUSH
32258: LD_INT 3
32260: EQUAL
32261: AND
32262: IFFALSE 32278
// HackDestroyVehicle ( unit , selectedUnit ) ;
32264: LD_VAR 0 2
32268: PPUSH
32269: LD_VAR 0 3
32273: PPUSH
32274: CALL 33795 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32278: LD_VAR 0 1
32282: PUSH
32283: LD_INT 255
32285: EQUAL
32286: PUSH
32287: LD_VAR 0 2
32291: PPUSH
32292: CALL_OW 264
32296: PUSH
32297: LD_INT 14
32299: PUSH
32300: LD_INT 53
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: IN
32307: AND
32308: PUSH
32309: LD_VAR 0 4
32313: PPUSH
32314: LD_VAR 0 5
32318: PPUSH
32319: CALL_OW 488
32323: AND
32324: IFFALSE 32348
// CutTreeXYR ( unit , x , y , 12 ) ;
32326: LD_VAR 0 2
32330: PPUSH
32331: LD_VAR 0 4
32335: PPUSH
32336: LD_VAR 0 5
32340: PPUSH
32341: LD_INT 12
32343: PPUSH
32344: CALL 32361 0 4
// end ;
32348: LD_VAR 0 6
32352: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32353: LD_INT 0
32355: PPUSH
// end ;
32356: LD_VAR 0 4
32360: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32361: LD_INT 0
32363: PPUSH
32364: PPUSH
32365: PPUSH
32366: PPUSH
32367: PPUSH
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32372: LD_VAR 0 1
32376: NOT
32377: PUSH
32378: LD_VAR 0 2
32382: PPUSH
32383: LD_VAR 0 3
32387: PPUSH
32388: CALL_OW 488
32392: NOT
32393: OR
32394: PUSH
32395: LD_VAR 0 4
32399: NOT
32400: OR
32401: IFFALSE 32405
// exit ;
32403: GO 32745
// list := [ ] ;
32405: LD_ADDR_VAR 0 13
32409: PUSH
32410: EMPTY
32411: ST_TO_ADDR
// if x - r < 0 then
32412: LD_VAR 0 2
32416: PUSH
32417: LD_VAR 0 4
32421: MINUS
32422: PUSH
32423: LD_INT 0
32425: LESS
32426: IFFALSE 32438
// min_x := 0 else
32428: LD_ADDR_VAR 0 7
32432: PUSH
32433: LD_INT 0
32435: ST_TO_ADDR
32436: GO 32454
// min_x := x - r ;
32438: LD_ADDR_VAR 0 7
32442: PUSH
32443: LD_VAR 0 2
32447: PUSH
32448: LD_VAR 0 4
32452: MINUS
32453: ST_TO_ADDR
// if y - r < 0 then
32454: LD_VAR 0 3
32458: PUSH
32459: LD_VAR 0 4
32463: MINUS
32464: PUSH
32465: LD_INT 0
32467: LESS
32468: IFFALSE 32480
// min_y := 0 else
32470: LD_ADDR_VAR 0 8
32474: PUSH
32475: LD_INT 0
32477: ST_TO_ADDR
32478: GO 32496
// min_y := y - r ;
32480: LD_ADDR_VAR 0 8
32484: PUSH
32485: LD_VAR 0 3
32489: PUSH
32490: LD_VAR 0 4
32494: MINUS
32495: ST_TO_ADDR
// max_x := x + r ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_VAR 0 2
32505: PUSH
32506: LD_VAR 0 4
32510: PLUS
32511: ST_TO_ADDR
// max_y := y + r ;
32512: LD_ADDR_VAR 0 10
32516: PUSH
32517: LD_VAR 0 3
32521: PUSH
32522: LD_VAR 0 4
32526: PLUS
32527: ST_TO_ADDR
// for _x = min_x to max_x do
32528: LD_ADDR_VAR 0 11
32532: PUSH
32533: DOUBLE
32534: LD_VAR 0 7
32538: DEC
32539: ST_TO_ADDR
32540: LD_VAR 0 9
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32663
// for _y = min_y to max_y do
32548: LD_ADDR_VAR 0 12
32552: PUSH
32553: DOUBLE
32554: LD_VAR 0 8
32558: DEC
32559: ST_TO_ADDR
32560: LD_VAR 0 10
32564: PUSH
32565: FOR_TO
32566: IFFALSE 32659
// begin if not ValidHex ( _x , _y ) then
32568: LD_VAR 0 11
32572: PPUSH
32573: LD_VAR 0 12
32577: PPUSH
32578: CALL_OW 488
32582: NOT
32583: IFFALSE 32587
// continue ;
32585: GO 32565
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32587: LD_VAR 0 11
32591: PPUSH
32592: LD_VAR 0 12
32596: PPUSH
32597: CALL_OW 351
32601: PUSH
32602: LD_VAR 0 11
32606: PPUSH
32607: LD_VAR 0 12
32611: PPUSH
32612: CALL_OW 554
32616: AND
32617: IFFALSE 32657
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32619: LD_ADDR_VAR 0 13
32623: PUSH
32624: LD_VAR 0 13
32628: PPUSH
32629: LD_VAR 0 13
32633: PUSH
32634: LD_INT 1
32636: PLUS
32637: PPUSH
32638: LD_VAR 0 11
32642: PUSH
32643: LD_VAR 0 12
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PPUSH
32652: CALL_OW 2
32656: ST_TO_ADDR
// end ;
32657: GO 32565
32659: POP
32660: POP
32661: GO 32545
32663: POP
32664: POP
// if not list then
32665: LD_VAR 0 13
32669: NOT
32670: IFFALSE 32674
// exit ;
32672: GO 32745
// for i in list do
32674: LD_ADDR_VAR 0 6
32678: PUSH
32679: LD_VAR 0 13
32683: PUSH
32684: FOR_IN
32685: IFFALSE 32743
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32687: LD_VAR 0 1
32691: PPUSH
32692: LD_STRING M
32694: PUSH
32695: LD_VAR 0 6
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: PUSH
32704: LD_VAR 0 6
32708: PUSH
32709: LD_INT 2
32711: ARRAY
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: PUSH
32734: EMPTY
32735: LIST
32736: PPUSH
32737: CALL_OW 447
32741: GO 32684
32743: POP
32744: POP
// end ;
32745: LD_VAR 0 5
32749: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32750: LD_EXP 131
32754: NOT
32755: IFFALSE 32805
32757: GO 32759
32759: DISABLE
// begin initHack := true ;
32760: LD_ADDR_EXP 131
32764: PUSH
32765: LD_INT 1
32767: ST_TO_ADDR
// hackTanks := [ ] ;
32768: LD_ADDR_EXP 132
32772: PUSH
32773: EMPTY
32774: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32775: LD_ADDR_EXP 133
32779: PUSH
32780: EMPTY
32781: ST_TO_ADDR
// hackLimit := 3 ;
32782: LD_ADDR_EXP 134
32786: PUSH
32787: LD_INT 3
32789: ST_TO_ADDR
// hackDist := 12 ;
32790: LD_ADDR_EXP 135
32794: PUSH
32795: LD_INT 12
32797: ST_TO_ADDR
// hackCounter := [ ] ;
32798: LD_ADDR_EXP 136
32802: PUSH
32803: EMPTY
32804: ST_TO_ADDR
// end ;
32805: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32806: LD_EXP 131
32810: PUSH
32811: LD_INT 34
32813: PUSH
32814: LD_EXP 57
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 69
32827: AND
32828: IFFALSE 33083
32830: GO 32832
32832: DISABLE
32833: LD_INT 0
32835: PPUSH
32836: PPUSH
// begin enable ;
32837: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32838: LD_ADDR_VAR 0 1
32842: PUSH
32843: LD_INT 34
32845: PUSH
32846: LD_EXP 57
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PPUSH
32855: CALL_OW 69
32859: PUSH
32860: FOR_IN
32861: IFFALSE 33081
// begin if not i in hackTanks then
32863: LD_VAR 0 1
32867: PUSH
32868: LD_EXP 132
32872: IN
32873: NOT
32874: IFFALSE 32957
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32876: LD_ADDR_EXP 132
32880: PUSH
32881: LD_EXP 132
32885: PPUSH
32886: LD_EXP 132
32890: PUSH
32891: LD_INT 1
32893: PLUS
32894: PPUSH
32895: LD_VAR 0 1
32899: PPUSH
32900: CALL_OW 1
32904: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32905: LD_ADDR_EXP 133
32909: PUSH
32910: LD_EXP 133
32914: PPUSH
32915: LD_EXP 133
32919: PUSH
32920: LD_INT 1
32922: PLUS
32923: PPUSH
32924: EMPTY
32925: PPUSH
32926: CALL_OW 1
32930: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32931: LD_ADDR_EXP 136
32935: PUSH
32936: LD_EXP 136
32940: PPUSH
32941: LD_EXP 136
32945: PUSH
32946: LD_INT 1
32948: PLUS
32949: PPUSH
32950: EMPTY
32951: PPUSH
32952: CALL_OW 1
32956: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 302
32966: NOT
32967: IFFALSE 32980
// begin HackUnlinkAll ( i ) ;
32969: LD_VAR 0 1
32973: PPUSH
32974: CALL 33086 0 1
// continue ;
32978: GO 32860
// end ; HackCheckCapturedStatus ( i ) ;
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL 33529 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32989: LD_ADDR_VAR 0 2
32993: PUSH
32994: LD_INT 81
32996: PUSH
32997: LD_VAR 0 1
33001: PPUSH
33002: CALL_OW 255
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 33
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 91
33023: PUSH
33024: LD_VAR 0 1
33028: PUSH
33029: LD_EXP 135
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 50
33041: PUSH
33042: EMPTY
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: PPUSH
33051: CALL_OW 69
33055: ST_TO_ADDR
// if not tmp then
33056: LD_VAR 0 2
33060: NOT
33061: IFFALSE 33065
// continue ;
33063: GO 32860
// HackLink ( i , tmp ) ;
33065: LD_VAR 0 1
33069: PPUSH
33070: LD_VAR 0 2
33074: PPUSH
33075: CALL 33222 0 2
// end ;
33079: GO 32860
33081: POP
33082: POP
// end ;
33083: PPOPN 2
33085: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33086: LD_INT 0
33088: PPUSH
33089: PPUSH
33090: PPUSH
// if not hack in hackTanks then
33091: LD_VAR 0 1
33095: PUSH
33096: LD_EXP 132
33100: IN
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33217
// index := GetElementIndex ( hackTanks , hack ) ;
33106: LD_ADDR_VAR 0 4
33110: PUSH
33111: LD_EXP 132
33115: PPUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL 40691 0 2
33125: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33126: LD_EXP 133
33130: PUSH
33131: LD_VAR 0 4
33135: ARRAY
33136: IFFALSE 33217
// begin for i in hackTanksCaptured [ index ] do
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_EXP 133
33147: PUSH
33148: LD_VAR 0 4
33152: ARRAY
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33181
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33157: LD_VAR 0 3
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: PPUSH
33166: LD_VAR 0 3
33170: PUSH
33171: LD_INT 2
33173: ARRAY
33174: PPUSH
33175: CALL_OW 235
33179: GO 33154
33181: POP
33182: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33183: LD_ADDR_EXP 133
33187: PUSH
33188: LD_EXP 133
33192: PPUSH
33193: LD_VAR 0 4
33197: PPUSH
33198: EMPTY
33199: PPUSH
33200: CALL_OW 1
33204: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33205: LD_VAR 0 1
33209: PPUSH
33210: LD_INT 0
33212: PPUSH
33213: CALL_OW 505
// end ; end ;
33217: LD_VAR 0 2
33221: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33222: LD_INT 0
33224: PPUSH
33225: PPUSH
33226: PPUSH
// if not hack in hackTanks or not vehicles then
33227: LD_VAR 0 1
33231: PUSH
33232: LD_EXP 132
33236: IN
33237: NOT
33238: PUSH
33239: LD_VAR 0 2
33243: NOT
33244: OR
33245: IFFALSE 33249
// exit ;
33247: GO 33524
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33249: LD_ADDR_VAR 0 2
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 2
33263: PPUSH
33264: LD_INT 1
33266: PPUSH
33267: LD_INT 1
33269: PPUSH
33270: CALL 41341 0 4
33274: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33275: LD_ADDR_VAR 0 5
33279: PUSH
33280: LD_EXP 132
33284: PPUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL 40691 0 2
33294: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33295: LD_EXP 133
33299: PUSH
33300: LD_VAR 0 5
33304: ARRAY
33305: PUSH
33306: LD_EXP 134
33310: LESS
33311: IFFALSE 33500
// begin for i := 1 to vehicles do
33313: LD_ADDR_VAR 0 4
33317: PUSH
33318: DOUBLE
33319: LD_INT 1
33321: DEC
33322: ST_TO_ADDR
33323: LD_VAR 0 2
33327: PUSH
33328: FOR_TO
33329: IFFALSE 33498
// begin if hackTanksCaptured [ index ] = hackLimit then
33331: LD_EXP 133
33335: PUSH
33336: LD_VAR 0 5
33340: ARRAY
33341: PUSH
33342: LD_EXP 134
33346: EQUAL
33347: IFFALSE 33351
// break ;
33349: GO 33498
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33351: LD_ADDR_EXP 136
33355: PUSH
33356: LD_EXP 136
33360: PPUSH
33361: LD_VAR 0 5
33365: PPUSH
33366: LD_EXP 136
33370: PUSH
33371: LD_VAR 0 5
33375: ARRAY
33376: PUSH
33377: LD_INT 1
33379: PLUS
33380: PPUSH
33381: CALL_OW 1
33385: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33386: LD_ADDR_EXP 133
33390: PUSH
33391: LD_EXP 133
33395: PPUSH
33396: LD_VAR 0 5
33400: PUSH
33401: LD_EXP 133
33405: PUSH
33406: LD_VAR 0 5
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: PLUS
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PPUSH
33420: LD_VAR 0 2
33424: PUSH
33425: LD_VAR 0 4
33429: ARRAY
33430: PUSH
33431: LD_VAR 0 2
33435: PUSH
33436: LD_VAR 0 4
33440: ARRAY
33441: PPUSH
33442: CALL_OW 255
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PPUSH
33451: CALL 40906 0 3
33455: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33456: LD_VAR 0 2
33460: PUSH
33461: LD_VAR 0 4
33465: ARRAY
33466: PPUSH
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 255
33476: PPUSH
33477: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33481: LD_VAR 0 2
33485: PUSH
33486: LD_VAR 0 4
33490: ARRAY
33491: PPUSH
33492: CALL_OW 141
// end ;
33496: GO 33328
33498: POP
33499: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33500: LD_VAR 0 1
33504: PPUSH
33505: LD_EXP 133
33509: PUSH
33510: LD_VAR 0 5
33514: ARRAY
33515: PUSH
33516: LD_INT 0
33518: PLUS
33519: PPUSH
33520: CALL_OW 505
// end ;
33524: LD_VAR 0 3
33528: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33529: LD_INT 0
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
// if not hack in hackTanks then
33535: LD_VAR 0 1
33539: PUSH
33540: LD_EXP 132
33544: IN
33545: NOT
33546: IFFALSE 33550
// exit ;
33548: GO 33790
// index := GetElementIndex ( hackTanks , hack ) ;
33550: LD_ADDR_VAR 0 4
33554: PUSH
33555: LD_EXP 132
33559: PPUSH
33560: LD_VAR 0 1
33564: PPUSH
33565: CALL 40691 0 2
33569: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: DOUBLE
33576: LD_EXP 133
33580: PUSH
33581: LD_VAR 0 4
33585: ARRAY
33586: INC
33587: ST_TO_ADDR
33588: LD_INT 1
33590: PUSH
33591: FOR_DOWNTO
33592: IFFALSE 33764
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33594: LD_ADDR_VAR 0 5
33598: PUSH
33599: LD_EXP 133
33603: PUSH
33604: LD_VAR 0 4
33608: ARRAY
33609: PUSH
33610: LD_VAR 0 3
33614: ARRAY
33615: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33616: LD_VAR 0 5
33620: PUSH
33621: LD_INT 1
33623: ARRAY
33624: PPUSH
33625: CALL_OW 302
33629: NOT
33630: PUSH
33631: LD_VAR 0 5
33635: PUSH
33636: LD_INT 1
33638: ARRAY
33639: PPUSH
33640: CALL_OW 255
33644: PUSH
33645: LD_VAR 0 1
33649: PPUSH
33650: CALL_OW 255
33654: NONEQUAL
33655: OR
33656: IFFALSE 33762
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33658: LD_VAR 0 5
33662: PUSH
33663: LD_INT 1
33665: ARRAY
33666: PPUSH
33667: CALL_OW 305
33671: PUSH
33672: LD_VAR 0 5
33676: PUSH
33677: LD_INT 1
33679: ARRAY
33680: PPUSH
33681: CALL_OW 255
33685: PUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 255
33695: EQUAL
33696: AND
33697: IFFALSE 33721
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33699: LD_VAR 0 5
33703: PUSH
33704: LD_INT 1
33706: ARRAY
33707: PPUSH
33708: LD_VAR 0 5
33712: PUSH
33713: LD_INT 2
33715: ARRAY
33716: PPUSH
33717: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33721: LD_ADDR_EXP 133
33725: PUSH
33726: LD_EXP 133
33730: PPUSH
33731: LD_VAR 0 4
33735: PPUSH
33736: LD_EXP 133
33740: PUSH
33741: LD_VAR 0 4
33745: ARRAY
33746: PPUSH
33747: LD_VAR 0 3
33751: PPUSH
33752: CALL_OW 3
33756: PPUSH
33757: CALL_OW 1
33761: ST_TO_ADDR
// end ; end ;
33762: GO 33591
33764: POP
33765: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33766: LD_VAR 0 1
33770: PPUSH
33771: LD_EXP 133
33775: PUSH
33776: LD_VAR 0 4
33780: ARRAY
33781: PUSH
33782: LD_INT 0
33784: PLUS
33785: PPUSH
33786: CALL_OW 505
// end ;
33790: LD_VAR 0 2
33794: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33795: LD_INT 0
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
// if not hack in hackTanks then
33801: LD_VAR 0 1
33805: PUSH
33806: LD_EXP 132
33810: IN
33811: NOT
33812: IFFALSE 33816
// exit ;
33814: GO 33901
// index := GetElementIndex ( hackTanks , hack ) ;
33816: LD_ADDR_VAR 0 5
33820: PUSH
33821: LD_EXP 132
33825: PPUSH
33826: LD_VAR 0 1
33830: PPUSH
33831: CALL 40691 0 2
33835: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33836: LD_ADDR_VAR 0 4
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_EXP 133
33850: PUSH
33851: LD_VAR 0 5
33855: ARRAY
33856: PUSH
33857: FOR_TO
33858: IFFALSE 33899
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33860: LD_EXP 133
33864: PUSH
33865: LD_VAR 0 5
33869: ARRAY
33870: PUSH
33871: LD_VAR 0 4
33875: ARRAY
33876: PUSH
33877: LD_INT 1
33879: ARRAY
33880: PUSH
33881: LD_VAR 0 2
33885: EQUAL
33886: IFFALSE 33897
// KillUnit ( vehicle ) ;
33888: LD_VAR 0 2
33892: PPUSH
33893: CALL_OW 66
33897: GO 33857
33899: POP
33900: POP
// end ;
33901: LD_VAR 0 3
33905: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33906: LD_EXP 137
33910: NOT
33911: IFFALSE 33946
33913: GO 33915
33915: DISABLE
// begin initMiner := true ;
33916: LD_ADDR_EXP 137
33920: PUSH
33921: LD_INT 1
33923: ST_TO_ADDR
// minersList := [ ] ;
33924: LD_ADDR_EXP 138
33928: PUSH
33929: EMPTY
33930: ST_TO_ADDR
// minerMinesList := [ ] ;
33931: LD_ADDR_EXP 139
33935: PUSH
33936: EMPTY
33937: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33938: LD_ADDR_EXP 140
33942: PUSH
33943: LD_INT 5
33945: ST_TO_ADDR
// end ;
33946: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33947: LD_EXP 137
33951: PUSH
33952: LD_INT 34
33954: PUSH
33955: LD_EXP 62
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PPUSH
33964: CALL_OW 69
33968: AND
33969: IFFALSE 34432
33971: GO 33973
33973: DISABLE
33974: LD_INT 0
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
// begin enable ;
33980: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33981: LD_ADDR_VAR 0 1
33985: PUSH
33986: LD_INT 34
33988: PUSH
33989: LD_EXP 62
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL_OW 69
34002: PUSH
34003: FOR_IN
34004: IFFALSE 34076
// begin if not i in minersList then
34006: LD_VAR 0 1
34010: PUSH
34011: LD_EXP 138
34015: IN
34016: NOT
34017: IFFALSE 34074
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34019: LD_ADDR_EXP 138
34023: PUSH
34024: LD_EXP 138
34028: PPUSH
34029: LD_EXP 138
34033: PUSH
34034: LD_INT 1
34036: PLUS
34037: PPUSH
34038: LD_VAR 0 1
34042: PPUSH
34043: CALL_OW 1
34047: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34048: LD_ADDR_EXP 139
34052: PUSH
34053: LD_EXP 139
34057: PPUSH
34058: LD_EXP 139
34062: PUSH
34063: LD_INT 1
34065: PLUS
34066: PPUSH
34067: EMPTY
34068: PPUSH
34069: CALL_OW 1
34073: ST_TO_ADDR
// end end ;
34074: GO 34003
34076: POP
34077: POP
// for i := minerMinesList downto 1 do
34078: LD_ADDR_VAR 0 1
34082: PUSH
34083: DOUBLE
34084: LD_EXP 139
34088: INC
34089: ST_TO_ADDR
34090: LD_INT 1
34092: PUSH
34093: FOR_DOWNTO
34094: IFFALSE 34430
// begin if IsLive ( minersList [ i ] ) then
34096: LD_EXP 138
34100: PUSH
34101: LD_VAR 0 1
34105: ARRAY
34106: PPUSH
34107: CALL_OW 300
34111: IFFALSE 34139
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34113: LD_EXP 138
34117: PUSH
34118: LD_VAR 0 1
34122: ARRAY
34123: PPUSH
34124: LD_EXP 139
34128: PUSH
34129: LD_VAR 0 1
34133: ARRAY
34134: PPUSH
34135: CALL_OW 505
// if not minerMinesList [ i ] then
34139: LD_EXP 139
34143: PUSH
34144: LD_VAR 0 1
34148: ARRAY
34149: NOT
34150: IFFALSE 34154
// continue ;
34152: GO 34093
// for j := minerMinesList [ i ] downto 1 do
34154: LD_ADDR_VAR 0 2
34158: PUSH
34159: DOUBLE
34160: LD_EXP 139
34164: PUSH
34165: LD_VAR 0 1
34169: ARRAY
34170: INC
34171: ST_TO_ADDR
34172: LD_INT 1
34174: PUSH
34175: FOR_DOWNTO
34176: IFFALSE 34426
// begin side := GetSide ( minersList [ i ] ) ;
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_EXP 138
34187: PUSH
34188: LD_VAR 0 1
34192: ARRAY
34193: PPUSH
34194: CALL_OW 255
34198: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34199: LD_ADDR_VAR 0 4
34203: PUSH
34204: LD_EXP 139
34208: PUSH
34209: LD_VAR 0 1
34213: ARRAY
34214: PUSH
34215: LD_VAR 0 2
34219: ARRAY
34220: PUSH
34221: LD_INT 1
34223: ARRAY
34224: PPUSH
34225: LD_EXP 139
34229: PUSH
34230: LD_VAR 0 1
34234: ARRAY
34235: PUSH
34236: LD_VAR 0 2
34240: ARRAY
34241: PUSH
34242: LD_INT 2
34244: ARRAY
34245: PPUSH
34246: CALL_OW 428
34250: ST_TO_ADDR
// if not tmp then
34251: LD_VAR 0 4
34255: NOT
34256: IFFALSE 34260
// continue ;
34258: GO 34175
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34260: LD_VAR 0 4
34264: PUSH
34265: LD_INT 81
34267: PUSH
34268: LD_VAR 0 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PPUSH
34277: CALL_OW 69
34281: IN
34282: PUSH
34283: LD_EXP 139
34287: PUSH
34288: LD_VAR 0 1
34292: ARRAY
34293: PUSH
34294: LD_VAR 0 2
34298: ARRAY
34299: PUSH
34300: LD_INT 1
34302: ARRAY
34303: PPUSH
34304: LD_EXP 139
34308: PUSH
34309: LD_VAR 0 1
34313: ARRAY
34314: PUSH
34315: LD_VAR 0 2
34319: ARRAY
34320: PUSH
34321: LD_INT 2
34323: ARRAY
34324: PPUSH
34325: CALL_OW 458
34329: AND
34330: IFFALSE 34424
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34332: LD_EXP 139
34336: PUSH
34337: LD_VAR 0 1
34341: ARRAY
34342: PUSH
34343: LD_VAR 0 2
34347: ARRAY
34348: PUSH
34349: LD_INT 1
34351: ARRAY
34352: PPUSH
34353: LD_EXP 139
34357: PUSH
34358: LD_VAR 0 1
34362: ARRAY
34363: PUSH
34364: LD_VAR 0 2
34368: ARRAY
34369: PUSH
34370: LD_INT 2
34372: ARRAY
34373: PPUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34383: LD_ADDR_EXP 139
34387: PUSH
34388: LD_EXP 139
34392: PPUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: LD_EXP 139
34402: PUSH
34403: LD_VAR 0 1
34407: ARRAY
34408: PPUSH
34409: LD_VAR 0 2
34413: PPUSH
34414: CALL_OW 3
34418: PPUSH
34419: CALL_OW 1
34423: ST_TO_ADDR
// end ; end ;
34424: GO 34175
34426: POP
34427: POP
// end ;
34428: GO 34093
34430: POP
34431: POP
// end ;
34432: PPOPN 4
34434: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34435: LD_INT 0
34437: PPUSH
34438: PPUSH
// result := false ;
34439: LD_ADDR_VAR 0 4
34443: PUSH
34444: LD_INT 0
34446: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34447: LD_VAR 0 1
34451: PPUSH
34452: CALL_OW 264
34456: PUSH
34457: LD_EXP 62
34461: EQUAL
34462: NOT
34463: IFFALSE 34467
// exit ;
34465: GO 34707
// index := GetElementIndex ( minersList , unit ) ;
34467: LD_ADDR_VAR 0 5
34471: PUSH
34472: LD_EXP 138
34476: PPUSH
34477: LD_VAR 0 1
34481: PPUSH
34482: CALL 40691 0 2
34486: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34487: LD_EXP 139
34491: PUSH
34492: LD_VAR 0 5
34496: ARRAY
34497: PUSH
34498: LD_EXP 140
34502: GREATEREQUAL
34503: IFFALSE 34507
// exit ;
34505: GO 34707
// ComMoveXY ( unit , x , y ) ;
34507: LD_VAR 0 1
34511: PPUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: LD_VAR 0 3
34521: PPUSH
34522: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34526: LD_INT 35
34528: PPUSH
34529: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34533: LD_VAR 0 1
34537: PPUSH
34538: LD_VAR 0 2
34542: PPUSH
34543: LD_VAR 0 3
34547: PPUSH
34548: CALL 71464 0 3
34552: NOT
34553: PUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 314
34563: AND
34564: IFFALSE 34568
// exit ;
34566: GO 34707
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34568: LD_VAR 0 2
34572: PPUSH
34573: LD_VAR 0 3
34577: PPUSH
34578: CALL_OW 428
34582: PUSH
34583: LD_VAR 0 1
34587: EQUAL
34588: PUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 314
34598: NOT
34599: AND
34600: IFFALSE 34526
// PlaySoundXY ( x , y , PlantMine ) ;
34602: LD_VAR 0 2
34606: PPUSH
34607: LD_VAR 0 3
34611: PPUSH
34612: LD_STRING PlantMine
34614: PPUSH
34615: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34619: LD_VAR 0 2
34623: PPUSH
34624: LD_VAR 0 3
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 255
34638: PPUSH
34639: LD_INT 0
34641: PPUSH
34642: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34646: LD_ADDR_EXP 139
34650: PUSH
34651: LD_EXP 139
34655: PPUSH
34656: LD_VAR 0 5
34660: PUSH
34661: LD_EXP 139
34665: PUSH
34666: LD_VAR 0 5
34670: ARRAY
34671: PUSH
34672: LD_INT 1
34674: PLUS
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PPUSH
34680: LD_VAR 0 2
34684: PUSH
34685: LD_VAR 0 3
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PPUSH
34694: CALL 40906 0 3
34698: ST_TO_ADDR
// result := true ;
34699: LD_ADDR_VAR 0 4
34703: PUSH
34704: LD_INT 1
34706: ST_TO_ADDR
// end ;
34707: LD_VAR 0 4
34711: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34712: LD_INT 0
34714: PPUSH
34715: PPUSH
34716: PPUSH
// if not unit in minersList then
34717: LD_VAR 0 1
34721: PUSH
34722: LD_EXP 138
34726: IN
34727: NOT
34728: IFFALSE 34732
// exit ;
34730: GO 35124
// index := GetElementIndex ( minersList , unit ) ;
34732: LD_ADDR_VAR 0 6
34736: PUSH
34737: LD_EXP 138
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL 40691 0 2
34751: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34752: LD_ADDR_VAR 0 5
34756: PUSH
34757: DOUBLE
34758: LD_EXP 139
34762: PUSH
34763: LD_VAR 0 6
34767: ARRAY
34768: INC
34769: ST_TO_ADDR
34770: LD_INT 1
34772: PUSH
34773: FOR_DOWNTO
34774: IFFALSE 34935
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34776: LD_EXP 139
34780: PUSH
34781: LD_VAR 0 6
34785: ARRAY
34786: PUSH
34787: LD_VAR 0 5
34791: ARRAY
34792: PUSH
34793: LD_INT 1
34795: ARRAY
34796: PUSH
34797: LD_VAR 0 2
34801: EQUAL
34802: PUSH
34803: LD_EXP 139
34807: PUSH
34808: LD_VAR 0 6
34812: ARRAY
34813: PUSH
34814: LD_VAR 0 5
34818: ARRAY
34819: PUSH
34820: LD_INT 2
34822: ARRAY
34823: PUSH
34824: LD_VAR 0 3
34828: EQUAL
34829: AND
34830: IFFALSE 34933
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34832: LD_EXP 139
34836: PUSH
34837: LD_VAR 0 6
34841: ARRAY
34842: PUSH
34843: LD_VAR 0 5
34847: ARRAY
34848: PUSH
34849: LD_INT 1
34851: ARRAY
34852: PPUSH
34853: LD_EXP 139
34857: PUSH
34858: LD_VAR 0 6
34862: ARRAY
34863: PUSH
34864: LD_VAR 0 5
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 255
34883: PPUSH
34884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34888: LD_ADDR_EXP 139
34892: PUSH
34893: LD_EXP 139
34897: PPUSH
34898: LD_VAR 0 6
34902: PPUSH
34903: LD_EXP 139
34907: PUSH
34908: LD_VAR 0 6
34912: ARRAY
34913: PPUSH
34914: LD_VAR 0 5
34918: PPUSH
34919: CALL_OW 3
34923: PPUSH
34924: CALL_OW 1
34928: ST_TO_ADDR
// exit ;
34929: POP
34930: POP
34931: GO 35124
// end ; end ;
34933: GO 34773
34935: POP
34936: POP
// for i := minerMinesList [ index ] downto 1 do
34937: LD_ADDR_VAR 0 5
34941: PUSH
34942: DOUBLE
34943: LD_EXP 139
34947: PUSH
34948: LD_VAR 0 6
34952: ARRAY
34953: INC
34954: ST_TO_ADDR
34955: LD_INT 1
34957: PUSH
34958: FOR_DOWNTO
34959: IFFALSE 35122
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34961: LD_EXP 139
34965: PUSH
34966: LD_VAR 0 6
34970: ARRAY
34971: PUSH
34972: LD_VAR 0 5
34976: ARRAY
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: PPUSH
34982: LD_EXP 139
34986: PUSH
34987: LD_VAR 0 6
34991: ARRAY
34992: PUSH
34993: LD_VAR 0 5
34997: ARRAY
34998: PUSH
34999: LD_INT 2
35001: ARRAY
35002: PPUSH
35003: LD_VAR 0 2
35007: PPUSH
35008: LD_VAR 0 3
35012: PPUSH
35013: CALL_OW 298
35017: PUSH
35018: LD_INT 6
35020: LESS
35021: IFFALSE 35120
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35023: LD_EXP 139
35027: PUSH
35028: LD_VAR 0 6
35032: ARRAY
35033: PUSH
35034: LD_VAR 0 5
35038: ARRAY
35039: PUSH
35040: LD_INT 1
35042: ARRAY
35043: PPUSH
35044: LD_EXP 139
35048: PUSH
35049: LD_VAR 0 6
35053: ARRAY
35054: PUSH
35055: LD_VAR 0 5
35059: ARRAY
35060: PUSH
35061: LD_INT 2
35063: ARRAY
35064: PPUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 255
35074: PPUSH
35075: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35079: LD_ADDR_EXP 139
35083: PUSH
35084: LD_EXP 139
35088: PPUSH
35089: LD_VAR 0 6
35093: PPUSH
35094: LD_EXP 139
35098: PUSH
35099: LD_VAR 0 6
35103: ARRAY
35104: PPUSH
35105: LD_VAR 0 5
35109: PPUSH
35110: CALL_OW 3
35114: PPUSH
35115: CALL_OW 1
35119: ST_TO_ADDR
// end ; end ;
35120: GO 34958
35122: POP
35123: POP
// end ;
35124: LD_VAR 0 4
35128: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35129: LD_INT 0
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 264
35149: PUSH
35150: LD_EXP 62
35154: EQUAL
35155: NOT
35156: PUSH
35157: LD_VAR 0 1
35161: PUSH
35162: LD_EXP 138
35166: IN
35167: NOT
35168: OR
35169: IFFALSE 35173
// exit ;
35171: GO 35495
// index := GetElementIndex ( minersList , unit ) ;
35173: LD_ADDR_VAR 0 6
35177: PUSH
35178: LD_EXP 138
35182: PPUSH
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL 40691 0 2
35192: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35193: LD_ADDR_VAR 0 8
35197: PUSH
35198: LD_EXP 140
35202: PUSH
35203: LD_EXP 139
35207: PUSH
35208: LD_VAR 0 6
35212: ARRAY
35213: MINUS
35214: ST_TO_ADDR
// if not minesFreeAmount then
35215: LD_VAR 0 8
35219: NOT
35220: IFFALSE 35224
// exit ;
35222: GO 35495
// tmp := [ ] ;
35224: LD_ADDR_VAR 0 7
35228: PUSH
35229: EMPTY
35230: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: DOUBLE
35237: LD_INT 1
35239: DEC
35240: ST_TO_ADDR
35241: LD_VAR 0 8
35245: PUSH
35246: FOR_TO
35247: IFFALSE 35442
// begin _d := rand ( 0 , 5 ) ;
35249: LD_ADDR_VAR 0 11
35253: PUSH
35254: LD_INT 0
35256: PPUSH
35257: LD_INT 5
35259: PPUSH
35260: CALL_OW 12
35264: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35265: LD_ADDR_VAR 0 12
35269: PUSH
35270: LD_INT 2
35272: PPUSH
35273: LD_INT 6
35275: PPUSH
35276: CALL_OW 12
35280: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 11
35295: PPUSH
35296: LD_VAR 0 12
35300: PPUSH
35301: CALL_OW 272
35305: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35306: LD_ADDR_VAR 0 10
35310: PUSH
35311: LD_VAR 0 3
35315: PPUSH
35316: LD_VAR 0 11
35320: PPUSH
35321: LD_VAR 0 12
35325: PPUSH
35326: CALL_OW 273
35330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35331: LD_VAR 0 9
35335: PPUSH
35336: LD_VAR 0 10
35340: PPUSH
35341: CALL_OW 488
35345: PUSH
35346: LD_VAR 0 9
35350: PUSH
35351: LD_VAR 0 10
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_VAR 0 7
35364: IN
35365: NOT
35366: AND
35367: PUSH
35368: LD_VAR 0 9
35372: PPUSH
35373: LD_VAR 0 10
35377: PPUSH
35378: CALL_OW 458
35382: NOT
35383: AND
35384: IFFALSE 35426
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 7
35395: PPUSH
35396: LD_VAR 0 7
35400: PUSH
35401: LD_INT 1
35403: PLUS
35404: PPUSH
35405: LD_VAR 0 9
35409: PUSH
35410: LD_VAR 0 10
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PPUSH
35419: CALL_OW 1
35423: ST_TO_ADDR
35424: GO 35440
// i := i - 1 ;
35426: LD_ADDR_VAR 0 5
35430: PUSH
35431: LD_VAR 0 5
35435: PUSH
35436: LD_INT 1
35438: MINUS
35439: ST_TO_ADDR
// end ;
35440: GO 35246
35442: POP
35443: POP
// for i in tmp do
35444: LD_ADDR_VAR 0 5
35448: PUSH
35449: LD_VAR 0 7
35453: PUSH
35454: FOR_IN
35455: IFFALSE 35493
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_VAR 0 5
35466: PUSH
35467: LD_INT 1
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 5
35475: PUSH
35476: LD_INT 2
35478: ARRAY
35479: PPUSH
35480: CALL 34435 0 3
35484: NOT
35485: IFFALSE 35491
// exit ;
35487: POP
35488: POP
35489: GO 35495
35491: GO 35454
35493: POP
35494: POP
// end ;
35495: LD_VAR 0 4
35499: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35500: LD_INT 0
35502: PPUSH
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
// if not GetClass ( unit ) = class_sniper then
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 257
35518: PUSH
35519: LD_INT 5
35521: EQUAL
35522: NOT
35523: IFFALSE 35527
// exit ;
35525: GO 35915
// dist := 8 ;
35527: LD_ADDR_VAR 0 5
35531: PUSH
35532: LD_INT 8
35534: ST_TO_ADDR
// viewRange := 12 ;
35535: LD_ADDR_VAR 0 7
35539: PUSH
35540: LD_INT 12
35542: ST_TO_ADDR
// side := GetSide ( unit ) ;
35543: LD_ADDR_VAR 0 6
35547: PUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 255
35557: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35558: LD_INT 61
35560: PPUSH
35561: LD_VAR 0 6
35565: PPUSH
35566: CALL_OW 321
35570: PUSH
35571: LD_INT 2
35573: EQUAL
35574: IFFALSE 35584
// viewRange := 16 ;
35576: LD_ADDR_VAR 0 7
35580: PUSH
35581: LD_INT 16
35583: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35584: LD_VAR 0 1
35588: PPUSH
35589: LD_VAR 0 2
35593: PPUSH
35594: LD_VAR 0 3
35598: PPUSH
35599: CALL_OW 297
35603: PUSH
35604: LD_VAR 0 5
35608: GREATER
35609: IFFALSE 35688
// begin ComMoveXY ( unit , x , y ) ;
35611: LD_VAR 0 1
35615: PPUSH
35616: LD_VAR 0 2
35620: PPUSH
35621: LD_VAR 0 3
35625: PPUSH
35626: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35630: LD_INT 35
35632: PPUSH
35633: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35637: LD_VAR 0 1
35641: PPUSH
35642: LD_VAR 0 2
35646: PPUSH
35647: LD_VAR 0 3
35651: PPUSH
35652: CALL 71464 0 3
35656: NOT
35657: IFFALSE 35661
// exit ;
35659: GO 35915
// until GetDistUnitXY ( unit , x , y ) < dist ;
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_VAR 0 2
35670: PPUSH
35671: LD_VAR 0 3
35675: PPUSH
35676: CALL_OW 297
35680: PUSH
35681: LD_VAR 0 5
35685: LESS
35686: IFFALSE 35630
// end ; ComTurnXY ( unit , x , y ) ;
35688: LD_VAR 0 1
35692: PPUSH
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_VAR 0 3
35702: PPUSH
35703: CALL_OW 118
// wait ( 5 ) ;
35707: LD_INT 5
35709: PPUSH
35710: CALL_OW 67
// _d := GetDir ( unit ) ;
35714: LD_ADDR_VAR 0 10
35718: PUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: CALL_OW 254
35728: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35729: LD_ADDR_VAR 0 8
35733: PUSH
35734: LD_VAR 0 1
35738: PPUSH
35739: CALL_OW 250
35743: PPUSH
35744: LD_VAR 0 10
35748: PPUSH
35749: LD_VAR 0 5
35753: PPUSH
35754: CALL_OW 272
35758: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35759: LD_ADDR_VAR 0 9
35763: PUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 251
35773: PPUSH
35774: LD_VAR 0 10
35778: PPUSH
35779: LD_VAR 0 5
35783: PPUSH
35784: CALL_OW 273
35788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35789: LD_VAR 0 8
35793: PPUSH
35794: LD_VAR 0 9
35798: PPUSH
35799: CALL_OW 488
35803: NOT
35804: IFFALSE 35808
// exit ;
35806: GO 35915
// ComAnimCustom ( unit , 1 ) ;
35808: LD_VAR 0 1
35812: PPUSH
35813: LD_INT 1
35815: PPUSH
35816: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35820: LD_VAR 0 8
35824: PPUSH
35825: LD_VAR 0 9
35829: PPUSH
35830: LD_VAR 0 6
35834: PPUSH
35835: LD_VAR 0 7
35839: PPUSH
35840: CALL_OW 330
// repeat wait ( 1 ) ;
35844: LD_INT 1
35846: PPUSH
35847: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL_OW 316
35860: PUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 314
35870: OR
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 302
35881: NOT
35882: OR
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 301
35893: OR
35894: IFFALSE 35844
// RemoveSeeing ( _x , _y , side ) ;
35896: LD_VAR 0 8
35900: PPUSH
35901: LD_VAR 0 9
35905: PPUSH
35906: LD_VAR 0 6
35910: PPUSH
35911: CALL_OW 331
// end ; end_of_file
35915: LD_VAR 0 4
35919: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35920: LD_INT 0
35922: PPUSH
35923: PPUSH
// if exist_mode then
35924: LD_VAR 0 2
35928: IFFALSE 35953
// unit := CreateCharacter ( prefix & ident ) else
35930: LD_ADDR_VAR 0 5
35934: PUSH
35935: LD_VAR 0 3
35939: PUSH
35940: LD_VAR 0 1
35944: STR
35945: PPUSH
35946: CALL_OW 34
35950: ST_TO_ADDR
35951: GO 35968
// unit := NewCharacter ( ident ) ;
35953: LD_ADDR_VAR 0 5
35957: PUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 25
35967: ST_TO_ADDR
// result := unit ;
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_VAR 0 5
35977: ST_TO_ADDR
// end ;
35978: LD_VAR 0 4
35982: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
// if not side or not nation then
35987: LD_VAR 0 1
35991: NOT
35992: PUSH
35993: LD_VAR 0 2
35997: NOT
35998: OR
35999: IFFALSE 36003
// exit ;
36001: GO 36771
// case nation of nation_american :
36003: LD_VAR 0 2
36007: PUSH
36008: LD_INT 1
36010: DOUBLE
36011: EQUAL
36012: IFTRUE 36016
36014: GO 36230
36016: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36017: LD_ADDR_VAR 0 4
36021: PUSH
36022: LD_INT 35
36024: PUSH
36025: LD_INT 45
36027: PUSH
36028: LD_INT 46
36030: PUSH
36031: LD_INT 47
36033: PUSH
36034: LD_INT 82
36036: PUSH
36037: LD_INT 83
36039: PUSH
36040: LD_INT 84
36042: PUSH
36043: LD_INT 85
36045: PUSH
36046: LD_INT 86
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 6
36057: PUSH
36058: LD_INT 15
36060: PUSH
36061: LD_INT 16
36063: PUSH
36064: LD_INT 7
36066: PUSH
36067: LD_INT 12
36069: PUSH
36070: LD_INT 13
36072: PUSH
36073: LD_INT 10
36075: PUSH
36076: LD_INT 14
36078: PUSH
36079: LD_INT 20
36081: PUSH
36082: LD_INT 21
36084: PUSH
36085: LD_INT 22
36087: PUSH
36088: LD_INT 25
36090: PUSH
36091: LD_INT 32
36093: PUSH
36094: LD_INT 27
36096: PUSH
36097: LD_INT 36
36099: PUSH
36100: LD_INT 69
36102: PUSH
36103: LD_INT 39
36105: PUSH
36106: LD_INT 34
36108: PUSH
36109: LD_INT 40
36111: PUSH
36112: LD_INT 48
36114: PUSH
36115: LD_INT 49
36117: PUSH
36118: LD_INT 50
36120: PUSH
36121: LD_INT 51
36123: PUSH
36124: LD_INT 52
36126: PUSH
36127: LD_INT 53
36129: PUSH
36130: LD_INT 54
36132: PUSH
36133: LD_INT 55
36135: PUSH
36136: LD_INT 56
36138: PUSH
36139: LD_INT 57
36141: PUSH
36142: LD_INT 58
36144: PUSH
36145: LD_INT 59
36147: PUSH
36148: LD_INT 60
36150: PUSH
36151: LD_INT 61
36153: PUSH
36154: LD_INT 62
36156: PUSH
36157: LD_INT 80
36159: PUSH
36160: LD_INT 82
36162: PUSH
36163: LD_INT 83
36165: PUSH
36166: LD_INT 84
36168: PUSH
36169: LD_INT 85
36171: PUSH
36172: LD_INT 86
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
36228: GO 36695
36230: LD_INT 2
36232: DOUBLE
36233: EQUAL
36234: IFTRUE 36238
36236: GO 36464
36238: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: LD_INT 35
36246: PUSH
36247: LD_INT 45
36249: PUSH
36250: LD_INT 46
36252: PUSH
36253: LD_INT 47
36255: PUSH
36256: LD_INT 82
36258: PUSH
36259: LD_INT 83
36261: PUSH
36262: LD_INT 84
36264: PUSH
36265: LD_INT 85
36267: PUSH
36268: LD_INT 87
36270: PUSH
36271: LD_INT 70
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 11
36279: PUSH
36280: LD_INT 3
36282: PUSH
36283: LD_INT 4
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: LD_INT 6
36291: PUSH
36292: LD_INT 15
36294: PUSH
36295: LD_INT 18
36297: PUSH
36298: LD_INT 7
36300: PUSH
36301: LD_INT 17
36303: PUSH
36304: LD_INT 8
36306: PUSH
36307: LD_INT 20
36309: PUSH
36310: LD_INT 21
36312: PUSH
36313: LD_INT 22
36315: PUSH
36316: LD_INT 72
36318: PUSH
36319: LD_INT 26
36321: PUSH
36322: LD_INT 69
36324: PUSH
36325: LD_INT 39
36327: PUSH
36328: LD_INT 40
36330: PUSH
36331: LD_INT 41
36333: PUSH
36334: LD_INT 42
36336: PUSH
36337: LD_INT 43
36339: PUSH
36340: LD_INT 48
36342: PUSH
36343: LD_INT 49
36345: PUSH
36346: LD_INT 50
36348: PUSH
36349: LD_INT 51
36351: PUSH
36352: LD_INT 52
36354: PUSH
36355: LD_INT 53
36357: PUSH
36358: LD_INT 54
36360: PUSH
36361: LD_INT 55
36363: PUSH
36364: LD_INT 56
36366: PUSH
36367: LD_INT 60
36369: PUSH
36370: LD_INT 61
36372: PUSH
36373: LD_INT 62
36375: PUSH
36376: LD_INT 66
36378: PUSH
36379: LD_INT 67
36381: PUSH
36382: LD_INT 68
36384: PUSH
36385: LD_INT 81
36387: PUSH
36388: LD_INT 82
36390: PUSH
36391: LD_INT 83
36393: PUSH
36394: LD_INT 84
36396: PUSH
36397: LD_INT 85
36399: PUSH
36400: LD_INT 87
36402: PUSH
36403: LD_INT 88
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
36462: GO 36695
36464: LD_INT 3
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 36694
36472: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_INT 46
36480: PUSH
36481: LD_INT 47
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 82
36492: PUSH
36493: LD_INT 83
36495: PUSH
36496: LD_INT 84
36498: PUSH
36499: LD_INT 85
36501: PUSH
36502: LD_INT 86
36504: PUSH
36505: LD_INT 11
36507: PUSH
36508: LD_INT 9
36510: PUSH
36511: LD_INT 20
36513: PUSH
36514: LD_INT 19
36516: PUSH
36517: LD_INT 21
36519: PUSH
36520: LD_INT 24
36522: PUSH
36523: LD_INT 22
36525: PUSH
36526: LD_INT 25
36528: PUSH
36529: LD_INT 28
36531: PUSH
36532: LD_INT 29
36534: PUSH
36535: LD_INT 30
36537: PUSH
36538: LD_INT 31
36540: PUSH
36541: LD_INT 37
36543: PUSH
36544: LD_INT 38
36546: PUSH
36547: LD_INT 32
36549: PUSH
36550: LD_INT 27
36552: PUSH
36553: LD_INT 33
36555: PUSH
36556: LD_INT 69
36558: PUSH
36559: LD_INT 39
36561: PUSH
36562: LD_INT 34
36564: PUSH
36565: LD_INT 40
36567: PUSH
36568: LD_INT 71
36570: PUSH
36571: LD_INT 23
36573: PUSH
36574: LD_INT 44
36576: PUSH
36577: LD_INT 48
36579: PUSH
36580: LD_INT 49
36582: PUSH
36583: LD_INT 50
36585: PUSH
36586: LD_INT 51
36588: PUSH
36589: LD_INT 52
36591: PUSH
36592: LD_INT 53
36594: PUSH
36595: LD_INT 54
36597: PUSH
36598: LD_INT 55
36600: PUSH
36601: LD_INT 56
36603: PUSH
36604: LD_INT 57
36606: PUSH
36607: LD_INT 58
36609: PUSH
36610: LD_INT 59
36612: PUSH
36613: LD_INT 63
36615: PUSH
36616: LD_INT 64
36618: PUSH
36619: LD_INT 65
36621: PUSH
36622: LD_INT 82
36624: PUSH
36625: LD_INT 83
36627: PUSH
36628: LD_INT 84
36630: PUSH
36631: LD_INT 85
36633: PUSH
36634: LD_INT 86
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
36692: GO 36695
36694: POP
// if state > - 1 and state < 3 then
36695: LD_VAR 0 3
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: GREATER
36704: PUSH
36705: LD_VAR 0 3
36709: PUSH
36710: LD_INT 3
36712: LESS
36713: AND
36714: IFFALSE 36771
// for i in result do
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 4
36725: PUSH
36726: FOR_IN
36727: IFFALSE 36769
// if GetTech ( i , side ) <> state then
36729: LD_VAR 0 5
36733: PPUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 321
36743: PUSH
36744: LD_VAR 0 3
36748: NONEQUAL
36749: IFFALSE 36767
// result := result diff i ;
36751: LD_ADDR_VAR 0 4
36755: PUSH
36756: LD_VAR 0 4
36760: PUSH
36761: LD_VAR 0 5
36765: DIFF
36766: ST_TO_ADDR
36767: GO 36726
36769: POP
36770: POP
// end ;
36771: LD_VAR 0 4
36775: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36776: LD_INT 0
36778: PPUSH
36779: PPUSH
36780: PPUSH
// result := true ;
36781: LD_ADDR_VAR 0 3
36785: PUSH
36786: LD_INT 1
36788: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36789: LD_ADDR_VAR 0 5
36793: PUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: CALL_OW 480
36803: ST_TO_ADDR
// if not tmp then
36804: LD_VAR 0 5
36808: NOT
36809: IFFALSE 36813
// exit ;
36811: GO 36862
// for i in tmp do
36813: LD_ADDR_VAR 0 4
36817: PUSH
36818: LD_VAR 0 5
36822: PUSH
36823: FOR_IN
36824: IFFALSE 36860
// if GetTech ( i , side ) <> state_researched then
36826: LD_VAR 0 4
36830: PPUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 321
36840: PUSH
36841: LD_INT 2
36843: NONEQUAL
36844: IFFALSE 36858
// begin result := false ;
36846: LD_ADDR_VAR 0 3
36850: PUSH
36851: LD_INT 0
36853: ST_TO_ADDR
// exit ;
36854: POP
36855: POP
36856: GO 36862
// end ;
36858: GO 36823
36860: POP
36861: POP
// end ;
36862: LD_VAR 0 3
36866: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36867: LD_INT 0
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36882: LD_VAR 0 1
36886: NOT
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 257
36897: PUSH
36898: LD_INT 9
36900: NONEQUAL
36901: OR
36902: IFFALSE 36906
// exit ;
36904: GO 37479
// side := GetSide ( unit ) ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL_OW 255
36920: ST_TO_ADDR
// tech_space := tech_spacanom ;
36921: LD_ADDR_VAR 0 12
36925: PUSH
36926: LD_INT 29
36928: ST_TO_ADDR
// tech_time := tech_taurad ;
36929: LD_ADDR_VAR 0 13
36933: PUSH
36934: LD_INT 28
36936: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36937: LD_ADDR_VAR 0 11
36941: PUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 310
36951: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36952: LD_VAR 0 11
36956: PPUSH
36957: CALL_OW 247
36961: PUSH
36962: LD_INT 2
36964: EQUAL
36965: IFFALSE 36969
// exit ;
36967: GO 37479
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36969: LD_ADDR_VAR 0 8
36973: PUSH
36974: LD_INT 81
36976: PUSH
36977: LD_VAR 0 9
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: LD_INT 21
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 69
37011: ST_TO_ADDR
// if not tmp then
37012: LD_VAR 0 8
37016: NOT
37017: IFFALSE 37021
// exit ;
37019: GO 37479
// if in_unit then
37021: LD_VAR 0 11
37025: IFFALSE 37049
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37027: LD_ADDR_VAR 0 10
37031: PUSH
37032: LD_VAR 0 8
37036: PPUSH
37037: LD_VAR 0 11
37041: PPUSH
37042: CALL_OW 74
37046: ST_TO_ADDR
37047: GO 37069
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37049: LD_ADDR_VAR 0 10
37053: PUSH
37054: LD_VAR 0 8
37058: PPUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 74
37068: ST_TO_ADDR
// if not enemy then
37069: LD_VAR 0 10
37073: NOT
37074: IFFALSE 37078
// exit ;
37076: GO 37479
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37078: LD_VAR 0 11
37082: PUSH
37083: LD_VAR 0 11
37087: PPUSH
37088: LD_VAR 0 10
37092: PPUSH
37093: CALL_OW 296
37097: PUSH
37098: LD_INT 13
37100: GREATER
37101: AND
37102: PUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: LD_VAR 0 10
37112: PPUSH
37113: CALL_OW 296
37117: PUSH
37118: LD_INT 12
37120: GREATER
37121: OR
37122: IFFALSE 37126
// exit ;
37124: GO 37479
// missile := [ 1 ] ;
37126: LD_ADDR_VAR 0 14
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37137: LD_VAR 0 9
37141: PPUSH
37142: LD_VAR 0 12
37146: PPUSH
37147: CALL_OW 325
37151: IFFALSE 37180
// missile := Insert ( missile , missile + 1 , 2 ) ;
37153: LD_ADDR_VAR 0 14
37157: PUSH
37158: LD_VAR 0 14
37162: PPUSH
37163: LD_VAR 0 14
37167: PUSH
37168: LD_INT 1
37170: PLUS
37171: PPUSH
37172: LD_INT 2
37174: PPUSH
37175: CALL_OW 2
37179: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37180: LD_VAR 0 9
37184: PPUSH
37185: LD_VAR 0 13
37189: PPUSH
37190: CALL_OW 325
37194: PUSH
37195: LD_VAR 0 10
37199: PPUSH
37200: CALL_OW 255
37204: PPUSH
37205: LD_VAR 0 13
37209: PPUSH
37210: CALL_OW 325
37214: NOT
37215: AND
37216: IFFALSE 37245
// missile := Insert ( missile , missile + 1 , 3 ) ;
37218: LD_ADDR_VAR 0 14
37222: PUSH
37223: LD_VAR 0 14
37227: PPUSH
37228: LD_VAR 0 14
37232: PUSH
37233: LD_INT 1
37235: PLUS
37236: PPUSH
37237: LD_INT 3
37239: PPUSH
37240: CALL_OW 2
37244: ST_TO_ADDR
// if missile < 2 then
37245: LD_VAR 0 14
37249: PUSH
37250: LD_INT 2
37252: LESS
37253: IFFALSE 37257
// exit ;
37255: GO 37479
// x := GetX ( enemy ) ;
37257: LD_ADDR_VAR 0 4
37261: PUSH
37262: LD_VAR 0 10
37266: PPUSH
37267: CALL_OW 250
37271: ST_TO_ADDR
// y := GetY ( enemy ) ;
37272: LD_ADDR_VAR 0 5
37276: PUSH
37277: LD_VAR 0 10
37281: PPUSH
37282: CALL_OW 251
37286: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37287: LD_ADDR_VAR 0 6
37291: PUSH
37292: LD_VAR 0 4
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PPUSH
37301: LD_INT 1
37303: PPUSH
37304: CALL_OW 12
37308: PLUS
37309: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37310: LD_ADDR_VAR 0 7
37314: PUSH
37315: LD_VAR 0 5
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PPUSH
37324: LD_INT 1
37326: PPUSH
37327: CALL_OW 12
37331: PLUS
37332: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37333: LD_VAR 0 6
37337: PPUSH
37338: LD_VAR 0 7
37342: PPUSH
37343: CALL_OW 488
37347: NOT
37348: IFFALSE 37370
// begin _x := x ;
37350: LD_ADDR_VAR 0 6
37354: PUSH
37355: LD_VAR 0 4
37359: ST_TO_ADDR
// _y := y ;
37360: LD_ADDR_VAR 0 7
37364: PUSH
37365: LD_VAR 0 5
37369: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_INT 1
37377: PPUSH
37378: LD_VAR 0 14
37382: PPUSH
37383: CALL_OW 12
37387: ST_TO_ADDR
// case i of 1 :
37388: LD_VAR 0 3
37392: PUSH
37393: LD_INT 1
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37418
37401: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37402: LD_VAR 0 1
37406: PPUSH
37407: LD_VAR 0 10
37411: PPUSH
37412: CALL_OW 115
37416: GO 37479
37418: LD_INT 2
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 37448
37426: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37427: LD_VAR 0 1
37431: PPUSH
37432: LD_VAR 0 6
37436: PPUSH
37437: LD_VAR 0 7
37441: PPUSH
37442: CALL_OW 153
37446: GO 37479
37448: LD_INT 3
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37478
37456: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37457: LD_VAR 0 1
37461: PPUSH
37462: LD_VAR 0 6
37466: PPUSH
37467: LD_VAR 0 7
37471: PPUSH
37472: CALL_OW 154
37476: GO 37479
37478: POP
// end ;
37479: LD_VAR 0 2
37483: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37484: LD_INT 0
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
// if not unit or not building then
37492: LD_VAR 0 1
37496: NOT
37497: PUSH
37498: LD_VAR 0 2
37502: NOT
37503: OR
37504: IFFALSE 37508
// exit ;
37506: GO 37666
// x := GetX ( building ) ;
37508: LD_ADDR_VAR 0 5
37512: PUSH
37513: LD_VAR 0 2
37517: PPUSH
37518: CALL_OW 250
37522: ST_TO_ADDR
// y := GetY ( building ) ;
37523: LD_ADDR_VAR 0 6
37527: PUSH
37528: LD_VAR 0 2
37532: PPUSH
37533: CALL_OW 251
37537: ST_TO_ADDR
// for i = 0 to 5 do
37538: LD_ADDR_VAR 0 4
37542: PUSH
37543: DOUBLE
37544: LD_INT 0
37546: DEC
37547: ST_TO_ADDR
37548: LD_INT 5
37550: PUSH
37551: FOR_TO
37552: IFFALSE 37664
// begin _x := ShiftX ( x , i , 3 ) ;
37554: LD_ADDR_VAR 0 7
37558: PUSH
37559: LD_VAR 0 5
37563: PPUSH
37564: LD_VAR 0 4
37568: PPUSH
37569: LD_INT 3
37571: PPUSH
37572: CALL_OW 272
37576: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37577: LD_ADDR_VAR 0 8
37581: PUSH
37582: LD_VAR 0 6
37586: PPUSH
37587: LD_VAR 0 4
37591: PPUSH
37592: LD_INT 3
37594: PPUSH
37595: CALL_OW 273
37599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37600: LD_VAR 0 7
37604: PPUSH
37605: LD_VAR 0 8
37609: PPUSH
37610: CALL_OW 488
37614: NOT
37615: IFFALSE 37619
// continue ;
37617: GO 37551
// if HexInfo ( _x , _y ) = 0 then
37619: LD_VAR 0 7
37623: PPUSH
37624: LD_VAR 0 8
37628: PPUSH
37629: CALL_OW 428
37633: PUSH
37634: LD_INT 0
37636: EQUAL
37637: IFFALSE 37662
// begin ComMoveXY ( unit , _x , _y ) ;
37639: LD_VAR 0 1
37643: PPUSH
37644: LD_VAR 0 7
37648: PPUSH
37649: LD_VAR 0 8
37653: PPUSH
37654: CALL_OW 111
// exit ;
37658: POP
37659: POP
37660: GO 37666
// end ; end ;
37662: GO 37551
37664: POP
37665: POP
// end ;
37666: LD_VAR 0 3
37670: RET
// export function ScanBase ( side , base_area ) ; begin
37671: LD_INT 0
37673: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_INT 81
37686: PUSH
37687: LD_VAR 0 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 70
37700: ST_TO_ADDR
// end ;
37701: LD_VAR 0 3
37705: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37706: LD_INT 0
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
// result := false ;
37712: LD_ADDR_VAR 0 2
37716: PUSH
37717: LD_INT 0
37719: ST_TO_ADDR
// side := GetSide ( unit ) ;
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 255
37734: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37735: LD_ADDR_VAR 0 4
37739: PUSH
37740: LD_VAR 0 1
37744: PPUSH
37745: CALL_OW 248
37749: ST_TO_ADDR
// case nat of 1 :
37750: LD_VAR 0 4
37754: PUSH
37755: LD_INT 1
37757: DOUBLE
37758: EQUAL
37759: IFTRUE 37763
37761: GO 37774
37763: POP
// tech := tech_lassight ; 2 :
37764: LD_ADDR_VAR 0 5
37768: PUSH
37769: LD_INT 12
37771: ST_TO_ADDR
37772: GO 37813
37774: LD_INT 2
37776: DOUBLE
37777: EQUAL
37778: IFTRUE 37782
37780: GO 37793
37782: POP
// tech := tech_mortar ; 3 :
37783: LD_ADDR_VAR 0 5
37787: PUSH
37788: LD_INT 41
37790: ST_TO_ADDR
37791: GO 37813
37793: LD_INT 3
37795: DOUBLE
37796: EQUAL
37797: IFTRUE 37801
37799: GO 37812
37801: POP
// tech := tech_bazooka ; end ;
37802: LD_ADDR_VAR 0 5
37806: PUSH
37807: LD_INT 44
37809: ST_TO_ADDR
37810: GO 37813
37812: POP
// if Researched ( side , tech ) then
37813: LD_VAR 0 3
37817: PPUSH
37818: LD_VAR 0 5
37822: PPUSH
37823: CALL_OW 325
37827: IFFALSE 37854
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37829: LD_ADDR_VAR 0 2
37833: PUSH
37834: LD_INT 5
37836: PUSH
37837: LD_INT 8
37839: PUSH
37840: LD_INT 9
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: LD_VAR 0 4
37852: ARRAY
37853: ST_TO_ADDR
// end ;
37854: LD_VAR 0 2
37858: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37859: LD_INT 0
37861: PPUSH
37862: PPUSH
37863: PPUSH
// if not mines then
37864: LD_VAR 0 2
37868: NOT
37869: IFFALSE 37873
// exit ;
37871: GO 38017
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37873: LD_ADDR_VAR 0 5
37877: PUSH
37878: LD_INT 81
37880: PUSH
37881: LD_VAR 0 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: LD_INT 21
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PPUSH
37911: CALL_OW 69
37915: ST_TO_ADDR
// for i in mines do
37916: LD_ADDR_VAR 0 4
37920: PUSH
37921: LD_VAR 0 2
37925: PUSH
37926: FOR_IN
37927: IFFALSE 38015
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37929: LD_VAR 0 4
37933: PUSH
37934: LD_INT 1
37936: ARRAY
37937: PPUSH
37938: LD_VAR 0 4
37942: PUSH
37943: LD_INT 2
37945: ARRAY
37946: PPUSH
37947: CALL_OW 458
37951: NOT
37952: IFFALSE 37956
// continue ;
37954: GO 37926
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37956: LD_VAR 0 4
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PPUSH
37965: LD_VAR 0 4
37969: PUSH
37970: LD_INT 2
37972: ARRAY
37973: PPUSH
37974: CALL_OW 428
37978: PUSH
37979: LD_VAR 0 5
37983: IN
37984: IFFALSE 38013
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37986: LD_VAR 0 4
37990: PUSH
37991: LD_INT 1
37993: ARRAY
37994: PPUSH
37995: LD_VAR 0 4
37999: PUSH
38000: LD_INT 2
38002: ARRAY
38003: PPUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 456
// end ;
38013: GO 37926
38015: POP
38016: POP
// end ;
38017: LD_VAR 0 3
38021: RET
// export function Count ( array ) ; var i ; begin
38022: LD_INT 0
38024: PPUSH
38025: PPUSH
// result := 0 ;
38026: LD_ADDR_VAR 0 2
38030: PUSH
38031: LD_INT 0
38033: ST_TO_ADDR
// for i in array do
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_VAR 0 1
38043: PUSH
38044: FOR_IN
38045: IFFALSE 38069
// if i then
38047: LD_VAR 0 3
38051: IFFALSE 38067
// result := result + 1 ;
38053: LD_ADDR_VAR 0 2
38057: PUSH
38058: LD_VAR 0 2
38062: PUSH
38063: LD_INT 1
38065: PLUS
38066: ST_TO_ADDR
38067: GO 38044
38069: POP
38070: POP
// end ;
38071: LD_VAR 0 2
38075: RET
// export function IsEmpty ( building ) ; begin
38076: LD_INT 0
38078: PPUSH
// if not building then
38079: LD_VAR 0 1
38083: NOT
38084: IFFALSE 38088
// exit ;
38086: GO 38131
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38088: LD_ADDR_VAR 0 2
38092: PUSH
38093: LD_VAR 0 1
38097: PUSH
38098: LD_INT 22
38100: PUSH
38101: LD_VAR 0 1
38105: PPUSH
38106: CALL_OW 255
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 58
38117: PUSH
38118: EMPTY
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL_OW 69
38129: IN
38130: ST_TO_ADDR
// end ;
38131: LD_VAR 0 2
38135: RET
// export function IsNotFull ( building ) ; begin
38136: LD_INT 0
38138: PPUSH
// if not building then
38139: LD_VAR 0 1
38143: NOT
38144: IFFALSE 38148
// exit ;
38146: GO 38167
// result := UnitsInside ( building ) < 6 ;
38148: LD_ADDR_VAR 0 2
38152: PUSH
38153: LD_VAR 0 1
38157: PPUSH
38158: CALL_OW 313
38162: PUSH
38163: LD_INT 6
38165: LESS
38166: ST_TO_ADDR
// end ;
38167: LD_VAR 0 2
38171: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38172: LD_INT 0
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
// tmp := [ ] ;
38178: LD_ADDR_VAR 0 3
38182: PUSH
38183: EMPTY
38184: ST_TO_ADDR
// list := [ ] ;
38185: LD_ADDR_VAR 0 5
38189: PUSH
38190: EMPTY
38191: ST_TO_ADDR
// for i = 16 to 25 do
38192: LD_ADDR_VAR 0 4
38196: PUSH
38197: DOUBLE
38198: LD_INT 16
38200: DEC
38201: ST_TO_ADDR
38202: LD_INT 25
38204: PUSH
38205: FOR_TO
38206: IFFALSE 38279
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38208: LD_ADDR_VAR 0 3
38212: PUSH
38213: LD_VAR 0 3
38217: PUSH
38218: LD_INT 22
38220: PUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 255
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 91
38237: PUSH
38238: LD_VAR 0 1
38242: PUSH
38243: LD_INT 6
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 30
38253: PUSH
38254: LD_VAR 0 4
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: PPUSH
38271: CALL_OW 69
38275: ADD
38276: ST_TO_ADDR
38277: GO 38205
38279: POP
38280: POP
// for i = 1 to tmp do
38281: LD_ADDR_VAR 0 4
38285: PUSH
38286: DOUBLE
38287: LD_INT 1
38289: DEC
38290: ST_TO_ADDR
38291: LD_VAR 0 3
38295: PUSH
38296: FOR_TO
38297: IFFALSE 38385
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38299: LD_ADDR_VAR 0 5
38303: PUSH
38304: LD_VAR 0 5
38308: PUSH
38309: LD_VAR 0 3
38313: PUSH
38314: LD_VAR 0 4
38318: ARRAY
38319: PPUSH
38320: CALL_OW 266
38324: PUSH
38325: LD_VAR 0 3
38329: PUSH
38330: LD_VAR 0 4
38334: ARRAY
38335: PPUSH
38336: CALL_OW 250
38340: PUSH
38341: LD_VAR 0 3
38345: PUSH
38346: LD_VAR 0 4
38350: ARRAY
38351: PPUSH
38352: CALL_OW 251
38356: PUSH
38357: LD_VAR 0 3
38361: PUSH
38362: LD_VAR 0 4
38366: ARRAY
38367: PPUSH
38368: CALL_OW 254
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: ADD
38382: ST_TO_ADDR
38383: GO 38296
38385: POP
38386: POP
// result := list ;
38387: LD_ADDR_VAR 0 2
38391: PUSH
38392: LD_VAR 0 5
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 2
38401: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38402: LD_INT 0
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
// if not factory then
38411: LD_VAR 0 1
38415: NOT
38416: IFFALSE 38420
// exit ;
38418: GO 39013
// if control = control_apeman then
38420: LD_VAR 0 4
38424: PUSH
38425: LD_INT 5
38427: EQUAL
38428: IFFALSE 38537
// begin tmp := UnitsInside ( factory ) ;
38430: LD_ADDR_VAR 0 8
38434: PUSH
38435: LD_VAR 0 1
38439: PPUSH
38440: CALL_OW 313
38444: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38445: LD_VAR 0 8
38449: PPUSH
38450: LD_INT 25
38452: PUSH
38453: LD_INT 12
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PPUSH
38460: CALL_OW 72
38464: NOT
38465: IFFALSE 38475
// control := control_manual ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_INT 1
38474: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38475: LD_ADDR_VAR 0 8
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL 38172 0 1
38489: ST_TO_ADDR
// if tmp then
38490: LD_VAR 0 8
38494: IFFALSE 38537
// begin for i in tmp do
38496: LD_ADDR_VAR 0 7
38500: PUSH
38501: LD_VAR 0 8
38505: PUSH
38506: FOR_IN
38507: IFFALSE 38535
// if i [ 1 ] = b_ext_radio then
38509: LD_VAR 0 7
38513: PUSH
38514: LD_INT 1
38516: ARRAY
38517: PUSH
38518: LD_INT 22
38520: EQUAL
38521: IFFALSE 38533
// begin control := control_remote ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_INT 2
38530: ST_TO_ADDR
// break ;
38531: GO 38535
// end ;
38533: GO 38506
38535: POP
38536: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38537: LD_VAR 0 1
38541: PPUSH
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: LD_VAR 0 4
38556: PPUSH
38557: LD_VAR 0 5
38561: PPUSH
38562: CALL_OW 448
38566: IFFALSE 38601
// begin result := [ chassis , engine , control , weapon ] ;
38568: LD_ADDR_VAR 0 6
38572: PUSH
38573: LD_VAR 0 2
38577: PUSH
38578: LD_VAR 0 3
38582: PUSH
38583: LD_VAR 0 4
38587: PUSH
38588: LD_VAR 0 5
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: ST_TO_ADDR
// exit ;
38599: GO 39013
// end ; _chassis := AvailableChassisList ( factory ) ;
38601: LD_ADDR_VAR 0 9
38605: PUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 475
38615: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38616: LD_ADDR_VAR 0 11
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 476
38630: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38631: LD_ADDR_VAR 0 12
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 477
38645: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38646: LD_ADDR_VAR 0 10
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 478
38660: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38661: LD_VAR 0 9
38665: NOT
38666: PUSH
38667: LD_VAR 0 11
38671: NOT
38672: OR
38673: PUSH
38674: LD_VAR 0 12
38678: NOT
38679: OR
38680: PUSH
38681: LD_VAR 0 10
38685: NOT
38686: OR
38687: IFFALSE 38722
// begin result := [ chassis , engine , control , weapon ] ;
38689: LD_ADDR_VAR 0 6
38693: PUSH
38694: LD_VAR 0 2
38698: PUSH
38699: LD_VAR 0 3
38703: PUSH
38704: LD_VAR 0 4
38708: PUSH
38709: LD_VAR 0 5
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// exit ;
38720: GO 39013
// end ; if not chassis in _chassis then
38722: LD_VAR 0 2
38726: PUSH
38727: LD_VAR 0 9
38731: IN
38732: NOT
38733: IFFALSE 38759
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38735: LD_ADDR_VAR 0 2
38739: PUSH
38740: LD_VAR 0 9
38744: PUSH
38745: LD_INT 1
38747: PPUSH
38748: LD_VAR 0 9
38752: PPUSH
38753: CALL_OW 12
38757: ARRAY
38758: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38759: LD_VAR 0 2
38763: PPUSH
38764: LD_VAR 0 3
38768: PPUSH
38769: CALL 39018 0 2
38773: NOT
38774: IFFALSE 38833
// repeat engine := _engine [ 1 ] ;
38776: LD_ADDR_VAR 0 3
38780: PUSH
38781: LD_VAR 0 11
38785: PUSH
38786: LD_INT 1
38788: ARRAY
38789: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38790: LD_ADDR_VAR 0 11
38794: PUSH
38795: LD_VAR 0 11
38799: PPUSH
38800: LD_INT 1
38802: PPUSH
38803: CALL_OW 3
38807: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38808: LD_VAR 0 2
38812: PPUSH
38813: LD_VAR 0 3
38817: PPUSH
38818: CALL 39018 0 2
38822: PUSH
38823: LD_VAR 0 11
38827: PUSH
38828: EMPTY
38829: EQUAL
38830: OR
38831: IFFALSE 38776
// if not control in _control then
38833: LD_VAR 0 4
38837: PUSH
38838: LD_VAR 0 12
38842: IN
38843: NOT
38844: IFFALSE 38870
// control := _control [ rand ( 1 , _control ) ] ;
38846: LD_ADDR_VAR 0 4
38850: PUSH
38851: LD_VAR 0 12
38855: PUSH
38856: LD_INT 1
38858: PPUSH
38859: LD_VAR 0 12
38863: PPUSH
38864: CALL_OW 12
38868: ARRAY
38869: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38870: LD_VAR 0 2
38874: PPUSH
38875: LD_VAR 0 5
38879: PPUSH
38880: CALL 39238 0 2
38884: NOT
38885: IFFALSE 38944
// repeat weapon := _weapon [ 1 ] ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_VAR 0 10
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38901: LD_ADDR_VAR 0 10
38905: PUSH
38906: LD_VAR 0 10
38910: PPUSH
38911: LD_INT 1
38913: PPUSH
38914: CALL_OW 3
38918: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38919: LD_VAR 0 2
38923: PPUSH
38924: LD_VAR 0 5
38928: PPUSH
38929: CALL 39238 0 2
38933: PUSH
38934: LD_VAR 0 10
38938: PUSH
38939: EMPTY
38940: EQUAL
38941: OR
38942: IFFALSE 38887
// result := [ ] ;
38944: LD_ADDR_VAR 0 6
38948: PUSH
38949: EMPTY
38950: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38951: LD_VAR 0 1
38955: PPUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_VAR 0 3
38965: PPUSH
38966: LD_VAR 0 4
38970: PPUSH
38971: LD_VAR 0 5
38975: PPUSH
38976: CALL_OW 448
38980: IFFALSE 39013
// result := [ chassis , engine , control , weapon ] ;
38982: LD_ADDR_VAR 0 6
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_VAR 0 3
38996: PUSH
38997: LD_VAR 0 4
39001: PUSH
39002: LD_VAR 0 5
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
// end ;
39013: LD_VAR 0 6
39017: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39018: LD_INT 0
39020: PPUSH
// if not chassis or not engine then
39021: LD_VAR 0 1
39025: NOT
39026: PUSH
39027: LD_VAR 0 2
39031: NOT
39032: OR
39033: IFFALSE 39037
// exit ;
39035: GO 39233
// case engine of engine_solar :
39037: LD_VAR 0 2
39041: PUSH
39042: LD_INT 2
39044: DOUBLE
39045: EQUAL
39046: IFTRUE 39050
39048: GO 39088
39050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39051: LD_ADDR_VAR 0 3
39055: PUSH
39056: LD_INT 11
39058: PUSH
39059: LD_INT 12
39061: PUSH
39062: LD_INT 13
39064: PUSH
39065: LD_INT 14
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
39086: GO 39217
39088: LD_INT 1
39090: DOUBLE
39091: EQUAL
39092: IFTRUE 39096
39094: GO 39158
39096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: LD_INT 11
39104: PUSH
39105: LD_INT 12
39107: PUSH
39108: LD_INT 13
39110: PUSH
39111: LD_INT 14
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 4
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: LD_INT 21
39131: PUSH
39132: LD_INT 23
39134: PUSH
39135: LD_INT 22
39137: PUSH
39138: LD_INT 24
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: ST_TO_ADDR
39156: GO 39217
39158: LD_INT 3
39160: DOUBLE
39161: EQUAL
39162: IFTRUE 39166
39164: GO 39216
39166: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39167: LD_ADDR_VAR 0 3
39171: PUSH
39172: LD_INT 13
39174: PUSH
39175: LD_INT 14
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 4
39186: PUSH
39187: LD_INT 5
39189: PUSH
39190: LD_INT 21
39192: PUSH
39193: LD_INT 22
39195: PUSH
39196: LD_INT 23
39198: PUSH
39199: LD_INT 24
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
39214: GO 39217
39216: POP
// result := ( chassis in result ) ;
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_VAR 0 1
39226: PUSH
39227: LD_VAR 0 3
39231: IN
39232: ST_TO_ADDR
// end ;
39233: LD_VAR 0 3
39237: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39238: LD_INT 0
39240: PPUSH
// if not chassis or not weapon then
39241: LD_VAR 0 1
39245: NOT
39246: PUSH
39247: LD_VAR 0 2
39251: NOT
39252: OR
39253: IFFALSE 39257
// exit ;
39255: GO 40319
// case weapon of us_machine_gun :
39257: LD_VAR 0 2
39261: PUSH
39262: LD_INT 2
39264: DOUBLE
39265: EQUAL
39266: IFTRUE 39270
39268: GO 39300
39270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 3
39284: PUSH
39285: LD_INT 4
39287: PUSH
39288: LD_INT 5
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
39298: GO 40303
39300: LD_INT 3
39302: DOUBLE
39303: EQUAL
39304: IFTRUE 39308
39306: GO 39338
39308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39309: LD_ADDR_VAR 0 3
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: LD_INT 5
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
39336: GO 40303
39338: LD_INT 11
39340: DOUBLE
39341: EQUAL
39342: IFTRUE 39346
39344: GO 39376
39346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39347: LD_ADDR_VAR 0 3
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: LD_INT 4
39363: PUSH
39364: LD_INT 5
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: ST_TO_ADDR
39374: GO 40303
39376: LD_INT 4
39378: DOUBLE
39379: EQUAL
39380: IFTRUE 39384
39382: GO 39410
39384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: LD_INT 4
39398: PUSH
39399: LD_INT 5
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
39408: GO 40303
39410: LD_INT 5
39412: DOUBLE
39413: EQUAL
39414: IFTRUE 39418
39416: GO 39444
39418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 4
39432: PUSH
39433: LD_INT 5
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
39442: GO 40303
39444: LD_INT 9
39446: DOUBLE
39447: EQUAL
39448: IFTRUE 39452
39450: GO 39478
39452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: LD_INT 4
39466: PUSH
39467: LD_INT 5
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
39476: GO 40303
39478: LD_INT 7
39480: DOUBLE
39481: EQUAL
39482: IFTRUE 39486
39484: GO 39512
39486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: LD_INT 4
39500: PUSH
39501: LD_INT 5
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
39510: GO 40303
39512: LD_INT 12
39514: DOUBLE
39515: EQUAL
39516: IFTRUE 39520
39518: GO 39546
39520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 4
39534: PUSH
39535: LD_INT 5
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
39544: GO 40303
39546: LD_INT 13
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39580
39554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: LD_INT 4
39568: PUSH
39569: LD_INT 5
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
39578: GO 40303
39580: LD_INT 14
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39606
39588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 4
39596: PUSH
39597: LD_INT 5
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: ST_TO_ADDR
39604: GO 40303
39606: LD_INT 6
39608: DOUBLE
39609: EQUAL
39610: IFTRUE 39614
39612: GO 39632
39614: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39615: LD_ADDR_VAR 0 3
39619: PUSH
39620: LD_INT 4
39622: PUSH
39623: LD_INT 5
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: ST_TO_ADDR
39630: GO 40303
39632: LD_INT 10
39634: DOUBLE
39635: EQUAL
39636: IFTRUE 39640
39638: GO 39658
39640: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: LD_INT 5
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: ST_TO_ADDR
39656: GO 40303
39658: LD_INT 22
39660: DOUBLE
39661: EQUAL
39662: IFTRUE 39666
39664: GO 39692
39666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39667: LD_ADDR_VAR 0 3
39671: PUSH
39672: LD_INT 11
39674: PUSH
39675: LD_INT 12
39677: PUSH
39678: LD_INT 13
39680: PUSH
39681: LD_INT 14
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
39690: GO 40303
39692: LD_INT 23
39694: DOUBLE
39695: EQUAL
39696: IFTRUE 39700
39698: GO 39726
39700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_INT 11
39708: PUSH
39709: LD_INT 12
39711: PUSH
39712: LD_INT 13
39714: PUSH
39715: LD_INT 14
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
39724: GO 40303
39726: LD_INT 24
39728: DOUBLE
39729: EQUAL
39730: IFTRUE 39734
39732: GO 39760
39734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_INT 11
39742: PUSH
39743: LD_INT 12
39745: PUSH
39746: LD_INT 13
39748: PUSH
39749: LD_INT 14
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
39758: GO 40303
39760: LD_INT 30
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39794
39768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 11
39776: PUSH
39777: LD_INT 12
39779: PUSH
39780: LD_INT 13
39782: PUSH
39783: LD_INT 14
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
39792: GO 40303
39794: LD_INT 25
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39820
39802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 13
39810: PUSH
39811: LD_INT 14
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: ST_TO_ADDR
39818: GO 40303
39820: LD_INT 27
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39846
39828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_INT 13
39836: PUSH
39837: LD_INT 14
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: ST_TO_ADDR
39844: GO 40303
39846: LD_EXP 60
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39882
39856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_INT 11
39864: PUSH
39865: LD_INT 12
39867: PUSH
39868: LD_INT 13
39870: PUSH
39871: LD_INT 14
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
39880: GO 40303
39882: LD_INT 28
39884: DOUBLE
39885: EQUAL
39886: IFTRUE 39890
39888: GO 39908
39890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39891: LD_ADDR_VAR 0 3
39895: PUSH
39896: LD_INT 13
39898: PUSH
39899: LD_INT 14
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: ST_TO_ADDR
39906: GO 40303
39908: LD_INT 29
39910: DOUBLE
39911: EQUAL
39912: IFTRUE 39916
39914: GO 39934
39916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39917: LD_ADDR_VAR 0 3
39921: PUSH
39922: LD_INT 13
39924: PUSH
39925: LD_INT 14
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: ST_TO_ADDR
39932: GO 40303
39934: LD_INT 31
39936: DOUBLE
39937: EQUAL
39938: IFTRUE 39942
39940: GO 39960
39942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: LD_INT 13
39950: PUSH
39951: LD_INT 14
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: ST_TO_ADDR
39958: GO 40303
39960: LD_INT 26
39962: DOUBLE
39963: EQUAL
39964: IFTRUE 39968
39966: GO 39986
39968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: LD_INT 13
39976: PUSH
39977: LD_INT 14
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: ST_TO_ADDR
39984: GO 40303
39986: LD_INT 42
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 39994
39992: GO 40020
39994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 21
40002: PUSH
40003: LD_INT 22
40005: PUSH
40006: LD_INT 23
40008: PUSH
40009: LD_INT 24
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
40018: GO 40303
40020: LD_INT 43
40022: DOUBLE
40023: EQUAL
40024: IFTRUE 40028
40026: GO 40054
40028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_INT 21
40036: PUSH
40037: LD_INT 22
40039: PUSH
40040: LD_INT 23
40042: PUSH
40043: LD_INT 24
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: ST_TO_ADDR
40052: GO 40303
40054: LD_INT 44
40056: DOUBLE
40057: EQUAL
40058: IFTRUE 40062
40060: GO 40088
40062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: LD_INT 21
40070: PUSH
40071: LD_INT 22
40073: PUSH
40074: LD_INT 23
40076: PUSH
40077: LD_INT 24
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: ST_TO_ADDR
40086: GO 40303
40088: LD_INT 45
40090: DOUBLE
40091: EQUAL
40092: IFTRUE 40096
40094: GO 40122
40096: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_INT 21
40104: PUSH
40105: LD_INT 22
40107: PUSH
40108: LD_INT 23
40110: PUSH
40111: LD_INT 24
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
40120: GO 40303
40122: LD_INT 49
40124: DOUBLE
40125: EQUAL
40126: IFTRUE 40130
40128: GO 40156
40130: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 21
40138: PUSH
40139: LD_INT 22
40141: PUSH
40142: LD_INT 23
40144: PUSH
40145: LD_INT 24
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
40154: GO 40303
40156: LD_INT 51
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40164
40162: GO 40190
40164: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40165: LD_ADDR_VAR 0 3
40169: PUSH
40170: LD_INT 21
40172: PUSH
40173: LD_INT 22
40175: PUSH
40176: LD_INT 23
40178: PUSH
40179: LD_INT 24
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
40188: GO 40303
40190: LD_INT 52
40192: DOUBLE
40193: EQUAL
40194: IFTRUE 40198
40196: GO 40224
40198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40199: LD_ADDR_VAR 0 3
40203: PUSH
40204: LD_INT 21
40206: PUSH
40207: LD_INT 22
40209: PUSH
40210: LD_INT 23
40212: PUSH
40213: LD_INT 24
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
40222: GO 40303
40224: LD_INT 53
40226: DOUBLE
40227: EQUAL
40228: IFTRUE 40232
40230: GO 40250
40232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: LD_INT 23
40240: PUSH
40241: LD_INT 24
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: ST_TO_ADDR
40248: GO 40303
40250: LD_INT 46
40252: DOUBLE
40253: EQUAL
40254: IFTRUE 40258
40256: GO 40276
40258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40259: LD_ADDR_VAR 0 3
40263: PUSH
40264: LD_INT 23
40266: PUSH
40267: LD_INT 24
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: ST_TO_ADDR
40274: GO 40303
40276: LD_INT 47
40278: DOUBLE
40279: EQUAL
40280: IFTRUE 40284
40282: GO 40302
40284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40285: LD_ADDR_VAR 0 3
40289: PUSH
40290: LD_INT 23
40292: PUSH
40293: LD_INT 24
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: ST_TO_ADDR
40300: GO 40303
40302: POP
// result := ( chassis in result ) ;
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_VAR 0 1
40312: PUSH
40313: LD_VAR 0 3
40317: IN
40318: ST_TO_ADDR
// end ;
40319: LD_VAR 0 3
40323: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40324: LD_INT 0
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
// result := array ;
40333: LD_ADDR_VAR 0 5
40337: PUSH
40338: LD_VAR 0 1
40342: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40343: LD_VAR 0 1
40347: NOT
40348: PUSH
40349: LD_VAR 0 2
40353: NOT
40354: OR
40355: PUSH
40356: LD_VAR 0 3
40360: NOT
40361: OR
40362: PUSH
40363: LD_VAR 0 2
40367: PUSH
40368: LD_VAR 0 1
40372: GREATER
40373: OR
40374: PUSH
40375: LD_VAR 0 3
40379: PUSH
40380: LD_VAR 0 1
40384: GREATER
40385: OR
40386: IFFALSE 40390
// exit ;
40388: GO 40686
// if direction then
40390: LD_VAR 0 4
40394: IFFALSE 40458
// begin d := 1 ;
40396: LD_ADDR_VAR 0 9
40400: PUSH
40401: LD_INT 1
40403: ST_TO_ADDR
// if i_from > i_to then
40404: LD_VAR 0 2
40408: PUSH
40409: LD_VAR 0 3
40413: GREATER
40414: IFFALSE 40440
// length := ( array - i_from ) + i_to else
40416: LD_ADDR_VAR 0 11
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_VAR 0 2
40430: MINUS
40431: PUSH
40432: LD_VAR 0 3
40436: PLUS
40437: ST_TO_ADDR
40438: GO 40456
// length := i_to - i_from ;
40440: LD_ADDR_VAR 0 11
40444: PUSH
40445: LD_VAR 0 3
40449: PUSH
40450: LD_VAR 0 2
40454: MINUS
40455: ST_TO_ADDR
// end else
40456: GO 40519
// begin d := - 1 ;
40458: LD_ADDR_VAR 0 9
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: ST_TO_ADDR
// if i_from > i_to then
40467: LD_VAR 0 2
40471: PUSH
40472: LD_VAR 0 3
40476: GREATER
40477: IFFALSE 40497
// length := i_from - i_to else
40479: LD_ADDR_VAR 0 11
40483: PUSH
40484: LD_VAR 0 2
40488: PUSH
40489: LD_VAR 0 3
40493: MINUS
40494: ST_TO_ADDR
40495: GO 40519
// length := ( array - i_to ) + i_from ;
40497: LD_ADDR_VAR 0 11
40501: PUSH
40502: LD_VAR 0 1
40506: PUSH
40507: LD_VAR 0 3
40511: MINUS
40512: PUSH
40513: LD_VAR 0 2
40517: PLUS
40518: ST_TO_ADDR
// end ; if not length then
40519: LD_VAR 0 11
40523: NOT
40524: IFFALSE 40528
// exit ;
40526: GO 40686
// tmp := array ;
40528: LD_ADDR_VAR 0 10
40532: PUSH
40533: LD_VAR 0 1
40537: ST_TO_ADDR
// for i = 1 to length do
40538: LD_ADDR_VAR 0 6
40542: PUSH
40543: DOUBLE
40544: LD_INT 1
40546: DEC
40547: ST_TO_ADDR
40548: LD_VAR 0 11
40552: PUSH
40553: FOR_TO
40554: IFFALSE 40674
// begin for j = 1 to array do
40556: LD_ADDR_VAR 0 7
40560: PUSH
40561: DOUBLE
40562: LD_INT 1
40564: DEC
40565: ST_TO_ADDR
40566: LD_VAR 0 1
40570: PUSH
40571: FOR_TO
40572: IFFALSE 40660
// begin k := j + d ;
40574: LD_ADDR_VAR 0 8
40578: PUSH
40579: LD_VAR 0 7
40583: PUSH
40584: LD_VAR 0 9
40588: PLUS
40589: ST_TO_ADDR
// if k > array then
40590: LD_VAR 0 8
40594: PUSH
40595: LD_VAR 0 1
40599: GREATER
40600: IFFALSE 40610
// k := 1 ;
40602: LD_ADDR_VAR 0 8
40606: PUSH
40607: LD_INT 1
40609: ST_TO_ADDR
// if not k then
40610: LD_VAR 0 8
40614: NOT
40615: IFFALSE 40627
// k := array ;
40617: LD_ADDR_VAR 0 8
40621: PUSH
40622: LD_VAR 0 1
40626: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40627: LD_ADDR_VAR 0 10
40631: PUSH
40632: LD_VAR 0 10
40636: PPUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: LD_VAR 0 1
40646: PUSH
40647: LD_VAR 0 7
40651: ARRAY
40652: PPUSH
40653: CALL_OW 1
40657: ST_TO_ADDR
// end ;
40658: GO 40571
40660: POP
40661: POP
// array := tmp ;
40662: LD_ADDR_VAR 0 1
40666: PUSH
40667: LD_VAR 0 10
40671: ST_TO_ADDR
// end ;
40672: GO 40553
40674: POP
40675: POP
// result := array ;
40676: LD_ADDR_VAR 0 5
40680: PUSH
40681: LD_VAR 0 1
40685: ST_TO_ADDR
// end ;
40686: LD_VAR 0 5
40690: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
// result := 0 ;
40695: LD_ADDR_VAR 0 3
40699: PUSH
40700: LD_INT 0
40702: ST_TO_ADDR
// if not array or not value in array then
40703: LD_VAR 0 1
40707: NOT
40708: PUSH
40709: LD_VAR 0 2
40713: PUSH
40714: LD_VAR 0 1
40718: IN
40719: NOT
40720: OR
40721: IFFALSE 40725
// exit ;
40723: GO 40779
// for i = 1 to array do
40725: LD_ADDR_VAR 0 4
40729: PUSH
40730: DOUBLE
40731: LD_INT 1
40733: DEC
40734: ST_TO_ADDR
40735: LD_VAR 0 1
40739: PUSH
40740: FOR_TO
40741: IFFALSE 40777
// if value = array [ i ] then
40743: LD_VAR 0 2
40747: PUSH
40748: LD_VAR 0 1
40752: PUSH
40753: LD_VAR 0 4
40757: ARRAY
40758: EQUAL
40759: IFFALSE 40775
// begin result := i ;
40761: LD_ADDR_VAR 0 3
40765: PUSH
40766: LD_VAR 0 4
40770: ST_TO_ADDR
// exit ;
40771: POP
40772: POP
40773: GO 40779
// end ;
40775: GO 40740
40777: POP
40778: POP
// end ;
40779: LD_VAR 0 3
40783: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40784: LD_INT 0
40786: PPUSH
// vc_chassis := chassis ;
40787: LD_ADDR_OWVAR 37
40791: PUSH
40792: LD_VAR 0 1
40796: ST_TO_ADDR
// vc_engine := engine ;
40797: LD_ADDR_OWVAR 39
40801: PUSH
40802: LD_VAR 0 2
40806: ST_TO_ADDR
// vc_control := control ;
40807: LD_ADDR_OWVAR 38
40811: PUSH
40812: LD_VAR 0 3
40816: ST_TO_ADDR
// vc_weapon := weapon ;
40817: LD_ADDR_OWVAR 40
40821: PUSH
40822: LD_VAR 0 4
40826: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40827: LD_ADDR_OWVAR 41
40831: PUSH
40832: LD_VAR 0 5
40836: ST_TO_ADDR
// end ;
40837: LD_VAR 0 6
40841: RET
// export function WantPlant ( unit ) ; var task ; begin
40842: LD_INT 0
40844: PPUSH
40845: PPUSH
// result := false ;
40846: LD_ADDR_VAR 0 2
40850: PUSH
40851: LD_INT 0
40853: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 437
40868: ST_TO_ADDR
// if task then
40869: LD_VAR 0 3
40873: IFFALSE 40901
// if task [ 1 ] [ 1 ] = p then
40875: LD_VAR 0 3
40879: PUSH
40880: LD_INT 1
40882: ARRAY
40883: PUSH
40884: LD_INT 1
40886: ARRAY
40887: PUSH
40888: LD_STRING p
40890: EQUAL
40891: IFFALSE 40901
// result := true ;
40893: LD_ADDR_VAR 0 2
40897: PUSH
40898: LD_INT 1
40900: ST_TO_ADDR
// end ;
40901: LD_VAR 0 2
40905: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40906: LD_INT 0
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
// if pos < 1 then
40912: LD_VAR 0 2
40916: PUSH
40917: LD_INT 1
40919: LESS
40920: IFFALSE 40924
// exit ;
40922: GO 41227
// if pos = 1 then
40924: LD_VAR 0 2
40928: PUSH
40929: LD_INT 1
40931: EQUAL
40932: IFFALSE 40965
// result := Replace ( arr , pos [ 1 ] , value ) else
40934: LD_ADDR_VAR 0 4
40938: PUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: LD_VAR 0 2
40948: PUSH
40949: LD_INT 1
40951: ARRAY
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 1
40962: ST_TO_ADDR
40963: GO 41227
// begin tmp := arr ;
40965: LD_ADDR_VAR 0 6
40969: PUSH
40970: LD_VAR 0 1
40974: ST_TO_ADDR
// s_arr := [ tmp ] ;
40975: LD_ADDR_VAR 0 7
40979: PUSH
40980: LD_VAR 0 6
40984: PUSH
40985: EMPTY
40986: LIST
40987: ST_TO_ADDR
// for i = 1 to pos - 1 do
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: DOUBLE
40994: LD_INT 1
40996: DEC
40997: ST_TO_ADDR
40998: LD_VAR 0 2
41002: PUSH
41003: LD_INT 1
41005: MINUS
41006: PUSH
41007: FOR_TO
41008: IFFALSE 41053
// begin tmp := tmp [ pos [ i ] ] ;
41010: LD_ADDR_VAR 0 6
41014: PUSH
41015: LD_VAR 0 6
41019: PUSH
41020: LD_VAR 0 2
41024: PUSH
41025: LD_VAR 0 5
41029: ARRAY
41030: ARRAY
41031: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41032: LD_ADDR_VAR 0 7
41036: PUSH
41037: LD_VAR 0 7
41041: PUSH
41042: LD_VAR 0 6
41046: PUSH
41047: EMPTY
41048: LIST
41049: ADD
41050: ST_TO_ADDR
// end ;
41051: GO 41007
41053: POP
41054: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41055: LD_ADDR_VAR 0 6
41059: PUSH
41060: LD_VAR 0 6
41064: PPUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_VAR 0 2
41074: ARRAY
41075: PPUSH
41076: LD_VAR 0 3
41080: PPUSH
41081: CALL_OW 1
41085: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41086: LD_ADDR_VAR 0 7
41090: PUSH
41091: LD_VAR 0 7
41095: PPUSH
41096: LD_VAR 0 7
41100: PPUSH
41101: LD_VAR 0 6
41105: PPUSH
41106: CALL_OW 1
41110: ST_TO_ADDR
// for i = s_arr downto 2 do
41111: LD_ADDR_VAR 0 5
41115: PUSH
41116: DOUBLE
41117: LD_VAR 0 7
41121: INC
41122: ST_TO_ADDR
41123: LD_INT 2
41125: PUSH
41126: FOR_DOWNTO
41127: IFFALSE 41211
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41129: LD_ADDR_VAR 0 6
41133: PUSH
41134: LD_VAR 0 7
41138: PUSH
41139: LD_VAR 0 5
41143: PUSH
41144: LD_INT 1
41146: MINUS
41147: ARRAY
41148: PPUSH
41149: LD_VAR 0 2
41153: PUSH
41154: LD_VAR 0 5
41158: PUSH
41159: LD_INT 1
41161: MINUS
41162: ARRAY
41163: PPUSH
41164: LD_VAR 0 7
41168: PUSH
41169: LD_VAR 0 5
41173: ARRAY
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41180: LD_ADDR_VAR 0 7
41184: PUSH
41185: LD_VAR 0 7
41189: PPUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 1
41197: MINUS
41198: PPUSH
41199: LD_VAR 0 6
41203: PPUSH
41204: CALL_OW 1
41208: ST_TO_ADDR
// end ;
41209: GO 41126
41211: POP
41212: POP
// result := s_arr [ 1 ] ;
41213: LD_ADDR_VAR 0 4
41217: PUSH
41218: LD_VAR 0 7
41222: PUSH
41223: LD_INT 1
41225: ARRAY
41226: ST_TO_ADDR
// end ; end ;
41227: LD_VAR 0 4
41231: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41232: LD_INT 0
41234: PPUSH
41235: PPUSH
// if not list then
41236: LD_VAR 0 1
41240: NOT
41241: IFFALSE 41245
// exit ;
41243: GO 41336
// i := list [ pos1 ] ;
41245: LD_ADDR_VAR 0 5
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 2
41259: ARRAY
41260: ST_TO_ADDR
// if not i then
41261: LD_VAR 0 5
41265: NOT
41266: IFFALSE 41270
// exit ;
41268: GO 41336
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41270: LD_ADDR_VAR 0 1
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: LD_VAR 0 2
41284: PPUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_VAR 0 3
41294: ARRAY
41295: PPUSH
41296: CALL_OW 1
41300: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41301: LD_ADDR_VAR 0 1
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_VAR 0 3
41315: PPUSH
41316: LD_VAR 0 5
41320: PPUSH
41321: CALL_OW 1
41325: ST_TO_ADDR
// result := list ;
41326: LD_ADDR_VAR 0 4
41330: PUSH
41331: LD_VAR 0 1
41335: ST_TO_ADDR
// end ;
41336: LD_VAR 0 4
41340: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41341: LD_INT 0
41343: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41344: LD_ADDR_VAR 0 5
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: CALL_OW 250
41358: PPUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 251
41368: PPUSH
41369: LD_VAR 0 2
41373: PPUSH
41374: LD_VAR 0 3
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: CALL 41394 0 5
41388: ST_TO_ADDR
// end ;
41389: LD_VAR 0 5
41393: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41394: LD_INT 0
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
// if not list then
41400: LD_VAR 0 3
41404: NOT
41405: IFFALSE 41409
// exit ;
41407: GO 41797
// result := [ ] ;
41409: LD_ADDR_VAR 0 6
41413: PUSH
41414: EMPTY
41415: ST_TO_ADDR
// for i in list do
41416: LD_ADDR_VAR 0 7
41420: PUSH
41421: LD_VAR 0 3
41425: PUSH
41426: FOR_IN
41427: IFFALSE 41629
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41429: LD_ADDR_VAR 0 9
41433: PUSH
41434: LD_VAR 0 7
41438: PPUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: CALL_OW 297
41453: ST_TO_ADDR
// if not result then
41454: LD_VAR 0 6
41458: NOT
41459: IFFALSE 41485
// result := [ [ i , tmp ] ] else
41461: LD_ADDR_VAR 0 6
41465: PUSH
41466: LD_VAR 0 7
41470: PUSH
41471: LD_VAR 0 9
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: ST_TO_ADDR
41483: GO 41627
// begin if result [ result ] [ 2 ] < tmp then
41485: LD_VAR 0 6
41489: PUSH
41490: LD_VAR 0 6
41494: ARRAY
41495: PUSH
41496: LD_INT 2
41498: ARRAY
41499: PUSH
41500: LD_VAR 0 9
41504: LESS
41505: IFFALSE 41547
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41507: LD_ADDR_VAR 0 6
41511: PUSH
41512: LD_VAR 0 6
41516: PPUSH
41517: LD_VAR 0 6
41521: PUSH
41522: LD_INT 1
41524: PLUS
41525: PPUSH
41526: LD_VAR 0 7
41530: PUSH
41531: LD_VAR 0 9
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PPUSH
41540: CALL_OW 2
41544: ST_TO_ADDR
41545: GO 41627
// for j = 1 to result do
41547: LD_ADDR_VAR 0 8
41551: PUSH
41552: DOUBLE
41553: LD_INT 1
41555: DEC
41556: ST_TO_ADDR
41557: LD_VAR 0 6
41561: PUSH
41562: FOR_TO
41563: IFFALSE 41625
// begin if tmp < result [ j ] [ 2 ] then
41565: LD_VAR 0 9
41569: PUSH
41570: LD_VAR 0 6
41574: PUSH
41575: LD_VAR 0 8
41579: ARRAY
41580: PUSH
41581: LD_INT 2
41583: ARRAY
41584: LESS
41585: IFFALSE 41623
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41587: LD_ADDR_VAR 0 6
41591: PUSH
41592: LD_VAR 0 6
41596: PPUSH
41597: LD_VAR 0 8
41601: PPUSH
41602: LD_VAR 0 7
41606: PUSH
41607: LD_VAR 0 9
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PPUSH
41616: CALL_OW 2
41620: ST_TO_ADDR
// break ;
41621: GO 41625
// end ; end ;
41623: GO 41562
41625: POP
41626: POP
// end ; end ;
41627: GO 41426
41629: POP
41630: POP
// if result and not asc then
41631: LD_VAR 0 6
41635: PUSH
41636: LD_VAR 0 4
41640: NOT
41641: AND
41642: IFFALSE 41717
// begin tmp := result ;
41644: LD_ADDR_VAR 0 9
41648: PUSH
41649: LD_VAR 0 6
41653: ST_TO_ADDR
// for i = tmp downto 1 do
41654: LD_ADDR_VAR 0 7
41658: PUSH
41659: DOUBLE
41660: LD_VAR 0 9
41664: INC
41665: ST_TO_ADDR
41666: LD_INT 1
41668: PUSH
41669: FOR_DOWNTO
41670: IFFALSE 41715
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41672: LD_ADDR_VAR 0 6
41676: PUSH
41677: LD_VAR 0 6
41681: PPUSH
41682: LD_VAR 0 9
41686: PUSH
41687: LD_VAR 0 7
41691: MINUS
41692: PUSH
41693: LD_INT 1
41695: PLUS
41696: PPUSH
41697: LD_VAR 0 9
41701: PUSH
41702: LD_VAR 0 7
41706: ARRAY
41707: PPUSH
41708: CALL_OW 1
41712: ST_TO_ADDR
41713: GO 41669
41715: POP
41716: POP
// end ; tmp := [ ] ;
41717: LD_ADDR_VAR 0 9
41721: PUSH
41722: EMPTY
41723: ST_TO_ADDR
// if mode then
41724: LD_VAR 0 5
41728: IFFALSE 41797
// begin for i = 1 to result do
41730: LD_ADDR_VAR 0 7
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_VAR 0 6
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41785
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41748: LD_ADDR_VAR 0 9
41752: PUSH
41753: LD_VAR 0 9
41757: PPUSH
41758: LD_VAR 0 7
41762: PPUSH
41763: LD_VAR 0 6
41767: PUSH
41768: LD_VAR 0 7
41772: ARRAY
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: PPUSH
41778: CALL_OW 1
41782: ST_TO_ADDR
41783: GO 41745
41785: POP
41786: POP
// result := tmp ;
41787: LD_ADDR_VAR 0 6
41791: PUSH
41792: LD_VAR 0 9
41796: ST_TO_ADDR
// end ; end ;
41797: LD_VAR 0 6
41801: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41802: LD_INT 0
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41810: LD_ADDR_VAR 0 5
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: ST_TO_ADDR
// if not x or not y then
41832: LD_VAR 0 2
41836: NOT
41837: PUSH
41838: LD_VAR 0 3
41842: NOT
41843: OR
41844: IFFALSE 41848
// exit ;
41846: GO 43500
// if not range then
41848: LD_VAR 0 4
41852: NOT
41853: IFFALSE 41863
// range := 10 ;
41855: LD_ADDR_VAR 0 4
41859: PUSH
41860: LD_INT 10
41862: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41863: LD_ADDR_VAR 0 8
41867: PUSH
41868: LD_INT 81
41870: PUSH
41871: LD_VAR 0 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 92
41882: PUSH
41883: LD_VAR 0 2
41887: PUSH
41888: LD_VAR 0 3
41892: PUSH
41893: LD_VAR 0 4
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: LD_INT 21
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: PPUSH
41926: CALL_OW 69
41930: ST_TO_ADDR
// if not tmp then
41931: LD_VAR 0 8
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 43500
// for i in tmp do
41940: LD_ADDR_VAR 0 6
41944: PUSH
41945: LD_VAR 0 8
41949: PUSH
41950: FOR_IN
41951: IFFALSE 43475
// begin points := [ 0 , 0 , 0 ] ;
41953: LD_ADDR_VAR 0 9
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: ST_TO_ADDR
// bpoints := 1 ;
41972: LD_ADDR_VAR 0 10
41976: PUSH
41977: LD_INT 1
41979: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41980: LD_VAR 0 6
41984: PPUSH
41985: CALL_OW 247
41989: PUSH
41990: LD_INT 1
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 42576
41998: POP
// begin if GetClass ( i ) = 1 then
41999: LD_VAR 0 6
42003: PPUSH
42004: CALL_OW 257
42008: PUSH
42009: LD_INT 1
42011: EQUAL
42012: IFFALSE 42033
// points := [ 10 , 5 , 3 ] ;
42014: LD_ADDR_VAR 0 9
42018: PUSH
42019: LD_INT 10
42021: PUSH
42022: LD_INT 5
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42033: LD_VAR 0 6
42037: PPUSH
42038: CALL_OW 257
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 4
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: IN
42057: IFFALSE 42078
// points := [ 3 , 2 , 1 ] ;
42059: LD_ADDR_VAR 0 9
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42078: LD_VAR 0 6
42082: PPUSH
42083: CALL_OW 257
42087: PUSH
42088: LD_INT 5
42090: EQUAL
42091: IFFALSE 42112
// points := [ 130 , 5 , 2 ] ;
42093: LD_ADDR_VAR 0 9
42097: PUSH
42098: LD_INT 130
42100: PUSH
42101: LD_INT 5
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42112: LD_VAR 0 6
42116: PPUSH
42117: CALL_OW 257
42121: PUSH
42122: LD_INT 8
42124: EQUAL
42125: IFFALSE 42146
// points := [ 35 , 35 , 30 ] ;
42127: LD_ADDR_VAR 0 9
42131: PUSH
42132: LD_INT 35
42134: PUSH
42135: LD_INT 35
42137: PUSH
42138: LD_INT 30
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42146: LD_VAR 0 6
42150: PPUSH
42151: CALL_OW 257
42155: PUSH
42156: LD_INT 9
42158: EQUAL
42159: IFFALSE 42180
// points := [ 20 , 55 , 40 ] ;
42161: LD_ADDR_VAR 0 9
42165: PUSH
42166: LD_INT 20
42168: PUSH
42169: LD_INT 55
42171: PUSH
42172: LD_INT 40
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42180: LD_VAR 0 6
42184: PPUSH
42185: CALL_OW 257
42189: PUSH
42190: LD_INT 12
42192: PUSH
42193: LD_INT 16
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: IN
42200: IFFALSE 42221
// points := [ 5 , 3 , 2 ] ;
42202: LD_ADDR_VAR 0 9
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42221: LD_VAR 0 6
42225: PPUSH
42226: CALL_OW 257
42230: PUSH
42231: LD_INT 17
42233: EQUAL
42234: IFFALSE 42255
// points := [ 100 , 50 , 75 ] ;
42236: LD_ADDR_VAR 0 9
42240: PUSH
42241: LD_INT 100
42243: PUSH
42244: LD_INT 50
42246: PUSH
42247: LD_INT 75
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42255: LD_VAR 0 6
42259: PPUSH
42260: CALL_OW 257
42264: PUSH
42265: LD_INT 15
42267: EQUAL
42268: IFFALSE 42289
// points := [ 10 , 5 , 3 ] ;
42270: LD_ADDR_VAR 0 9
42274: PUSH
42275: LD_INT 10
42277: PUSH
42278: LD_INT 5
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42289: LD_VAR 0 6
42293: PPUSH
42294: CALL_OW 257
42298: PUSH
42299: LD_INT 14
42301: EQUAL
42302: IFFALSE 42323
// points := [ 10 , 0 , 0 ] ;
42304: LD_ADDR_VAR 0 9
42308: PUSH
42309: LD_INT 10
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42323: LD_VAR 0 6
42327: PPUSH
42328: CALL_OW 257
42332: PUSH
42333: LD_INT 11
42335: EQUAL
42336: IFFALSE 42357
// points := [ 30 , 10 , 5 ] ;
42338: LD_ADDR_VAR 0 9
42342: PUSH
42343: LD_INT 30
42345: PUSH
42346: LD_INT 10
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_INT 5
42364: PPUSH
42365: CALL_OW 321
42369: PUSH
42370: LD_INT 2
42372: EQUAL
42373: IFFALSE 42390
// bpoints := bpoints * 1.8 ;
42375: LD_ADDR_VAR 0 10
42379: PUSH
42380: LD_VAR 0 10
42384: PUSH
42385: LD_REAL  1.80000000000000E+0000
42388: MUL
42389: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42390: LD_VAR 0 6
42394: PPUSH
42395: CALL_OW 257
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: LD_INT 4
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: IN
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: LD_INT 51
42426: PPUSH
42427: CALL_OW 321
42431: PUSH
42432: LD_INT 2
42434: EQUAL
42435: AND
42436: IFFALSE 42453
// bpoints := bpoints * 1.2 ;
42438: LD_ADDR_VAR 0 10
42442: PUSH
42443: LD_VAR 0 10
42447: PUSH
42448: LD_REAL  1.20000000000000E+0000
42451: MUL
42452: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42453: LD_VAR 0 6
42457: PPUSH
42458: CALL_OW 257
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: LD_INT 7
42468: PUSH
42469: LD_INT 9
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: IN
42477: PUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: LD_INT 52
42485: PPUSH
42486: CALL_OW 321
42490: PUSH
42491: LD_INT 2
42493: EQUAL
42494: AND
42495: IFFALSE 42512
// bpoints := bpoints * 1.5 ;
42497: LD_ADDR_VAR 0 10
42501: PUSH
42502: LD_VAR 0 10
42506: PUSH
42507: LD_REAL  1.50000000000000E+0000
42510: MUL
42511: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42512: LD_VAR 0 1
42516: PPUSH
42517: LD_INT 66
42519: PPUSH
42520: CALL_OW 321
42524: PUSH
42525: LD_INT 2
42527: EQUAL
42528: IFFALSE 42545
// bpoints := bpoints * 1.1 ;
42530: LD_ADDR_VAR 0 10
42534: PUSH
42535: LD_VAR 0 10
42539: PUSH
42540: LD_REAL  1.10000000000000E+0000
42543: MUL
42544: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42545: LD_ADDR_VAR 0 10
42549: PUSH
42550: LD_VAR 0 10
42554: PUSH
42555: LD_VAR 0 6
42559: PPUSH
42560: LD_INT 1
42562: PPUSH
42563: CALL_OW 259
42567: PUSH
42568: LD_REAL  1.15000000000000E+0000
42571: MUL
42572: MUL
42573: ST_TO_ADDR
// end ; unit_vehicle :
42574: GO 43404
42576: LD_INT 2
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 43392
42584: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42585: LD_VAR 0 6
42589: PPUSH
42590: CALL_OW 264
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 42
42600: PUSH
42601: LD_INT 24
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: IN
42609: IFFALSE 42630
// points := [ 25 , 5 , 3 ] ;
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_INT 25
42618: PUSH
42619: LD_INT 5
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42630: LD_VAR 0 6
42634: PPUSH
42635: CALL_OW 264
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 43
42645: PUSH
42646: LD_INT 25
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: IN
42654: IFFALSE 42675
// points := [ 40 , 15 , 5 ] ;
42656: LD_ADDR_VAR 0 9
42660: PUSH
42661: LD_INT 40
42663: PUSH
42664: LD_INT 15
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42675: LD_VAR 0 6
42679: PPUSH
42680: CALL_OW 264
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: LD_INT 23
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: IN
42695: IFFALSE 42716
// points := [ 7 , 25 , 8 ] ;
42697: LD_ADDR_VAR 0 9
42701: PUSH
42702: LD_INT 7
42704: PUSH
42705: LD_INT 25
42707: PUSH
42708: LD_INT 8
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42716: LD_VAR 0 6
42720: PPUSH
42721: CALL_OW 264
42725: PUSH
42726: LD_INT 5
42728: PUSH
42729: LD_INT 27
42731: PUSH
42732: LD_INT 44
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: IN
42740: IFFALSE 42761
// points := [ 14 , 50 , 16 ] ;
42742: LD_ADDR_VAR 0 9
42746: PUSH
42747: LD_INT 14
42749: PUSH
42750: LD_INT 50
42752: PUSH
42753: LD_INT 16
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42761: LD_VAR 0 6
42765: PPUSH
42766: CALL_OW 264
42770: PUSH
42771: LD_INT 6
42773: PUSH
42774: LD_INT 46
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: IN
42781: IFFALSE 42802
// points := [ 32 , 120 , 70 ] ;
42783: LD_ADDR_VAR 0 9
42787: PUSH
42788: LD_INT 32
42790: PUSH
42791: LD_INT 120
42793: PUSH
42794: LD_INT 70
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42802: LD_VAR 0 6
42806: PPUSH
42807: CALL_OW 264
42811: PUSH
42812: LD_INT 7
42814: PUSH
42815: LD_INT 28
42817: PUSH
42818: LD_INT 45
42820: PUSH
42821: LD_EXP 60
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: IN
42832: IFFALSE 42853
// points := [ 35 , 20 , 45 ] ;
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_INT 35
42841: PUSH
42842: LD_INT 20
42844: PUSH
42845: LD_INT 45
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42853: LD_VAR 0 6
42857: PPUSH
42858: CALL_OW 264
42862: PUSH
42863: LD_INT 47
42865: PUSH
42866: EMPTY
42867: LIST
42868: IN
42869: IFFALSE 42890
// points := [ 67 , 45 , 75 ] ;
42871: LD_ADDR_VAR 0 9
42875: PUSH
42876: LD_INT 67
42878: PUSH
42879: LD_INT 45
42881: PUSH
42882: LD_INT 75
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42890: LD_VAR 0 6
42894: PPUSH
42895: CALL_OW 264
42899: PUSH
42900: LD_INT 26
42902: PUSH
42903: EMPTY
42904: LIST
42905: IN
42906: IFFALSE 42927
// points := [ 120 , 30 , 80 ] ;
42908: LD_ADDR_VAR 0 9
42912: PUSH
42913: LD_INT 120
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 80
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42927: LD_VAR 0 6
42931: PPUSH
42932: CALL_OW 264
42936: PUSH
42937: LD_INT 22
42939: PUSH
42940: EMPTY
42941: LIST
42942: IN
42943: IFFALSE 42964
// points := [ 40 , 1 , 1 ] ;
42945: LD_ADDR_VAR 0 9
42949: PUSH
42950: LD_INT 40
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42964: LD_VAR 0 6
42968: PPUSH
42969: CALL_OW 264
42973: PUSH
42974: LD_INT 29
42976: PUSH
42977: EMPTY
42978: LIST
42979: IN
42980: IFFALSE 43001
// points := [ 70 , 200 , 400 ] ;
42982: LD_ADDR_VAR 0 9
42986: PUSH
42987: LD_INT 70
42989: PUSH
42990: LD_INT 200
42992: PUSH
42993: LD_INT 400
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43001: LD_VAR 0 6
43005: PPUSH
43006: CALL_OW 264
43010: PUSH
43011: LD_INT 14
43013: PUSH
43014: LD_INT 53
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: IN
43021: IFFALSE 43042
// points := [ 40 , 10 , 20 ] ;
43023: LD_ADDR_VAR 0 9
43027: PUSH
43028: LD_INT 40
43030: PUSH
43031: LD_INT 10
43033: PUSH
43034: LD_INT 20
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43042: LD_VAR 0 6
43046: PPUSH
43047: CALL_OW 264
43051: PUSH
43052: LD_INT 9
43054: PUSH
43055: EMPTY
43056: LIST
43057: IN
43058: IFFALSE 43079
// points := [ 5 , 70 , 20 ] ;
43060: LD_ADDR_VAR 0 9
43064: PUSH
43065: LD_INT 5
43067: PUSH
43068: LD_INT 70
43070: PUSH
43071: LD_INT 20
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43079: LD_VAR 0 6
43083: PPUSH
43084: CALL_OW 264
43088: PUSH
43089: LD_INT 10
43091: PUSH
43092: EMPTY
43093: LIST
43094: IN
43095: IFFALSE 43116
// points := [ 35 , 110 , 70 ] ;
43097: LD_ADDR_VAR 0 9
43101: PUSH
43102: LD_INT 35
43104: PUSH
43105: LD_INT 110
43107: PUSH
43108: LD_INT 70
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43116: LD_VAR 0 6
43120: PPUSH
43121: CALL_OW 265
43125: PUSH
43126: LD_INT 25
43128: EQUAL
43129: IFFALSE 43150
// points := [ 80 , 65 , 100 ] ;
43131: LD_ADDR_VAR 0 9
43135: PUSH
43136: LD_INT 80
43138: PUSH
43139: LD_INT 65
43141: PUSH
43142: LD_INT 100
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43150: LD_VAR 0 6
43154: PPUSH
43155: CALL_OW 263
43159: PUSH
43160: LD_INT 1
43162: EQUAL
43163: IFFALSE 43198
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43165: LD_ADDR_VAR 0 10
43169: PUSH
43170: LD_VAR 0 10
43174: PUSH
43175: LD_VAR 0 6
43179: PPUSH
43180: CALL_OW 311
43184: PPUSH
43185: LD_INT 3
43187: PPUSH
43188: CALL_OW 259
43192: PUSH
43193: LD_INT 4
43195: MUL
43196: MUL
43197: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43198: LD_VAR 0 6
43202: PPUSH
43203: CALL_OW 263
43207: PUSH
43208: LD_INT 2
43210: EQUAL
43211: IFFALSE 43262
// begin j := IsControledBy ( i ) ;
43213: LD_ADDR_VAR 0 7
43217: PUSH
43218: LD_VAR 0 6
43222: PPUSH
43223: CALL_OW 312
43227: ST_TO_ADDR
// if j then
43228: LD_VAR 0 7
43232: IFFALSE 43262
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43234: LD_ADDR_VAR 0 10
43238: PUSH
43239: LD_VAR 0 10
43243: PUSH
43244: LD_VAR 0 7
43248: PPUSH
43249: LD_INT 3
43251: PPUSH
43252: CALL_OW 259
43256: PUSH
43257: LD_INT 3
43259: MUL
43260: MUL
43261: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43262: LD_VAR 0 6
43266: PPUSH
43267: CALL_OW 264
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: LD_INT 6
43277: PUSH
43278: LD_INT 46
43280: PUSH
43281: LD_INT 44
43283: PUSH
43284: LD_INT 47
43286: PUSH
43287: LD_INT 45
43289: PUSH
43290: LD_INT 28
43292: PUSH
43293: LD_INT 7
43295: PUSH
43296: LD_INT 27
43298: PUSH
43299: LD_INT 29
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: IN
43314: PUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: LD_INT 52
43322: PPUSH
43323: CALL_OW 321
43327: PUSH
43328: LD_INT 2
43330: EQUAL
43331: AND
43332: IFFALSE 43349
// bpoints := bpoints * 1.2 ;
43334: LD_ADDR_VAR 0 10
43338: PUSH
43339: LD_VAR 0 10
43343: PUSH
43344: LD_REAL  1.20000000000000E+0000
43347: MUL
43348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43349: LD_VAR 0 6
43353: PPUSH
43354: CALL_OW 264
43358: PUSH
43359: LD_INT 6
43361: PUSH
43362: LD_INT 46
43364: PUSH
43365: LD_INT 47
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: IN
43373: IFFALSE 43390
// bpoints := bpoints * 1.2 ;
43375: LD_ADDR_VAR 0 10
43379: PUSH
43380: LD_VAR 0 10
43384: PUSH
43385: LD_REAL  1.20000000000000E+0000
43388: MUL
43389: ST_TO_ADDR
// end ; unit_building :
43390: GO 43404
43392: LD_INT 3
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43400
43398: GO 43403
43400: POP
// ; end ;
43401: GO 43404
43403: POP
// for j = 1 to 3 do
43404: LD_ADDR_VAR 0 7
43408: PUSH
43409: DOUBLE
43410: LD_INT 1
43412: DEC
43413: ST_TO_ADDR
43414: LD_INT 3
43416: PUSH
43417: FOR_TO
43418: IFFALSE 43471
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43420: LD_ADDR_VAR 0 5
43424: PUSH
43425: LD_VAR 0 5
43429: PPUSH
43430: LD_VAR 0 7
43434: PPUSH
43435: LD_VAR 0 5
43439: PUSH
43440: LD_VAR 0 7
43444: ARRAY
43445: PUSH
43446: LD_VAR 0 9
43450: PUSH
43451: LD_VAR 0 7
43455: ARRAY
43456: PUSH
43457: LD_VAR 0 10
43461: MUL
43462: PLUS
43463: PPUSH
43464: CALL_OW 1
43468: ST_TO_ADDR
43469: GO 43417
43471: POP
43472: POP
// end ;
43473: GO 41950
43475: POP
43476: POP
// result := Replace ( result , 4 , tmp ) ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: LD_VAR 0 5
43486: PPUSH
43487: LD_INT 4
43489: PPUSH
43490: LD_VAR 0 8
43494: PPUSH
43495: CALL_OW 1
43499: ST_TO_ADDR
// end ;
43500: LD_VAR 0 5
43504: RET
// export function DangerAtRange ( unit , range ) ; begin
43505: LD_INT 0
43507: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 255
43522: PPUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 250
43532: PPUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 251
43542: PPUSH
43543: LD_VAR 0 2
43547: PPUSH
43548: CALL 41802 0 4
43552: ST_TO_ADDR
// end ;
43553: LD_VAR 0 3
43557: RET
// export function DangerInArea ( side , area ) ; begin
43558: LD_INT 0
43560: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: LD_VAR 0 2
43570: PPUSH
43571: LD_INT 81
43573: PUSH
43574: LD_VAR 0 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PPUSH
43583: CALL_OW 70
43587: ST_TO_ADDR
// end ;
43588: LD_VAR 0 3
43592: RET
// export function IsExtension ( b ) ; begin
43593: LD_INT 0
43595: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43596: LD_ADDR_VAR 0 2
43600: PUSH
43601: LD_VAR 0 1
43605: PUSH
43606: LD_INT 23
43608: PUSH
43609: LD_INT 20
43611: PUSH
43612: LD_INT 22
43614: PUSH
43615: LD_INT 17
43617: PUSH
43618: LD_INT 24
43620: PUSH
43621: LD_INT 21
43623: PUSH
43624: LD_INT 19
43626: PUSH
43627: LD_INT 16
43629: PUSH
43630: LD_INT 25
43632: PUSH
43633: LD_INT 18
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: IN
43648: ST_TO_ADDR
// end ;
43649: LD_VAR 0 2
43653: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43654: LD_INT 0
43656: PPUSH
43657: PPUSH
43658: PPUSH
// result := [ ] ;
43659: LD_ADDR_VAR 0 4
43663: PUSH
43664: EMPTY
43665: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43666: LD_ADDR_VAR 0 5
43670: PUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_INT 21
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PPUSH
43686: CALL_OW 70
43690: ST_TO_ADDR
// if not tmp then
43691: LD_VAR 0 5
43695: NOT
43696: IFFALSE 43700
// exit ;
43698: GO 43764
// if checkLink then
43700: LD_VAR 0 3
43704: IFFALSE 43754
// begin for i in tmp do
43706: LD_ADDR_VAR 0 6
43710: PUSH
43711: LD_VAR 0 5
43715: PUSH
43716: FOR_IN
43717: IFFALSE 43752
// if GetBase ( i ) <> base then
43719: LD_VAR 0 6
43723: PPUSH
43724: CALL_OW 274
43728: PUSH
43729: LD_VAR 0 1
43733: NONEQUAL
43734: IFFALSE 43750
// ComLinkToBase ( base , i ) ;
43736: LD_VAR 0 1
43740: PPUSH
43741: LD_VAR 0 6
43745: PPUSH
43746: CALL_OW 169
43750: GO 43716
43752: POP
43753: POP
// end ; result := tmp ;
43754: LD_ADDR_VAR 0 4
43758: PUSH
43759: LD_VAR 0 5
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 4
43768: RET
// export function ComComplete ( units , b ) ; var i ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
// if not units then
43773: LD_VAR 0 1
43777: NOT
43778: IFFALSE 43782
// exit ;
43780: GO 43872
// for i in units do
43782: LD_ADDR_VAR 0 4
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: FOR_IN
43793: IFFALSE 43870
// if BuildingStatus ( b ) = bs_build then
43795: LD_VAR 0 2
43799: PPUSH
43800: CALL_OW 461
43804: PUSH
43805: LD_INT 1
43807: EQUAL
43808: IFFALSE 43868
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43810: LD_VAR 0 4
43814: PPUSH
43815: LD_STRING h
43817: PUSH
43818: LD_VAR 0 2
43822: PPUSH
43823: CALL_OW 250
43827: PUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: CALL_OW 251
43837: PUSH
43838: LD_VAR 0 2
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: PPUSH
43864: CALL_OW 446
43868: GO 43792
43870: POP
43871: POP
// end ;
43872: LD_VAR 0 3
43876: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43877: LD_INT 0
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43885: LD_VAR 0 1
43889: NOT
43890: PUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 263
43900: PUSH
43901: LD_INT 2
43903: EQUAL
43904: NOT
43905: OR
43906: IFFALSE 43910
// exit ;
43908: GO 44226
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43910: LD_ADDR_VAR 0 6
43914: PUSH
43915: LD_INT 22
43917: PUSH
43918: LD_VAR 0 1
43922: PPUSH
43923: CALL_OW 255
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 30
43937: PUSH
43938: LD_INT 36
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 34
43947: PUSH
43948: LD_INT 31
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PPUSH
43964: CALL_OW 69
43968: ST_TO_ADDR
// if not tmp then
43969: LD_VAR 0 6
43973: NOT
43974: IFFALSE 43978
// exit ;
43976: GO 44226
// result := [ ] ;
43978: LD_ADDR_VAR 0 2
43982: PUSH
43983: EMPTY
43984: ST_TO_ADDR
// for i in tmp do
43985: LD_ADDR_VAR 0 3
43989: PUSH
43990: LD_VAR 0 6
43994: PUSH
43995: FOR_IN
43996: IFFALSE 44067
// begin t := UnitsInside ( i ) ;
43998: LD_ADDR_VAR 0 4
44002: PUSH
44003: LD_VAR 0 3
44007: PPUSH
44008: CALL_OW 313
44012: ST_TO_ADDR
// if t then
44013: LD_VAR 0 4
44017: IFFALSE 44065
// for j in t do
44019: LD_ADDR_VAR 0 7
44023: PUSH
44024: LD_VAR 0 4
44028: PUSH
44029: FOR_IN
44030: IFFALSE 44063
// result := Insert ( result , result + 1 , j ) ;
44032: LD_ADDR_VAR 0 2
44036: PUSH
44037: LD_VAR 0 2
44041: PPUSH
44042: LD_VAR 0 2
44046: PUSH
44047: LD_INT 1
44049: PLUS
44050: PPUSH
44051: LD_VAR 0 7
44055: PPUSH
44056: CALL_OW 2
44060: ST_TO_ADDR
44061: GO 44029
44063: POP
44064: POP
// end ;
44065: GO 43995
44067: POP
44068: POP
// if not result then
44069: LD_VAR 0 2
44073: NOT
44074: IFFALSE 44078
// exit ;
44076: GO 44226
// mech := result [ 1 ] ;
44078: LD_ADDR_VAR 0 5
44082: PUSH
44083: LD_VAR 0 2
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: ST_TO_ADDR
// if result > 1 then
44092: LD_VAR 0 2
44096: PUSH
44097: LD_INT 1
44099: GREATER
44100: IFFALSE 44212
// for i = 2 to result do
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: DOUBLE
44108: LD_INT 2
44110: DEC
44111: ST_TO_ADDR
44112: LD_VAR 0 2
44116: PUSH
44117: FOR_TO
44118: IFFALSE 44210
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44120: LD_ADDR_VAR 0 4
44124: PUSH
44125: LD_VAR 0 2
44129: PUSH
44130: LD_VAR 0 3
44134: ARRAY
44135: PPUSH
44136: LD_INT 3
44138: PPUSH
44139: CALL_OW 259
44143: PUSH
44144: LD_VAR 0 2
44148: PUSH
44149: LD_VAR 0 3
44153: ARRAY
44154: PPUSH
44155: CALL_OW 432
44159: MINUS
44160: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44161: LD_VAR 0 4
44165: PUSH
44166: LD_VAR 0 5
44170: PPUSH
44171: LD_INT 3
44173: PPUSH
44174: CALL_OW 259
44178: PUSH
44179: LD_VAR 0 5
44183: PPUSH
44184: CALL_OW 432
44188: MINUS
44189: GREATEREQUAL
44190: IFFALSE 44208
// mech := result [ i ] ;
44192: LD_ADDR_VAR 0 5
44196: PUSH
44197: LD_VAR 0 2
44201: PUSH
44202: LD_VAR 0 3
44206: ARRAY
44207: ST_TO_ADDR
// end ;
44208: GO 44117
44210: POP
44211: POP
// ComLinkTo ( vehicle , mech ) ;
44212: LD_VAR 0 1
44216: PPUSH
44217: LD_VAR 0 5
44221: PPUSH
44222: CALL_OW 135
// end ;
44226: LD_VAR 0 2
44230: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44231: LD_INT 0
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
// result := [ ] ;
44246: LD_ADDR_VAR 0 7
44250: PUSH
44251: EMPTY
44252: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 266
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: IN
44273: NOT
44274: IFFALSE 44278
// exit ;
44276: GO 45912
// if name then
44278: LD_VAR 0 3
44282: IFFALSE 44298
// SetBName ( base_dep , name ) ;
44284: LD_VAR 0 1
44288: PPUSH
44289: LD_VAR 0 3
44293: PPUSH
44294: CALL_OW 500
// base := GetBase ( base_dep ) ;
44298: LD_ADDR_VAR 0 15
44302: PUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 274
44312: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44313: LD_ADDR_VAR 0 16
44317: PUSH
44318: LD_VAR 0 1
44322: PPUSH
44323: CALL_OW 255
44327: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44328: LD_ADDR_VAR 0 17
44332: PUSH
44333: LD_VAR 0 1
44337: PPUSH
44338: CALL_OW 248
44342: ST_TO_ADDR
// if sources then
44343: LD_VAR 0 5
44347: IFFALSE 44394
// for i = 1 to 3 do
44349: LD_ADDR_VAR 0 8
44353: PUSH
44354: DOUBLE
44355: LD_INT 1
44357: DEC
44358: ST_TO_ADDR
44359: LD_INT 3
44361: PUSH
44362: FOR_TO
44363: IFFALSE 44392
// AddResourceType ( base , i , sources [ i ] ) ;
44365: LD_VAR 0 15
44369: PPUSH
44370: LD_VAR 0 8
44374: PPUSH
44375: LD_VAR 0 5
44379: PUSH
44380: LD_VAR 0 8
44384: ARRAY
44385: PPUSH
44386: CALL_OW 276
44390: GO 44362
44392: POP
44393: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44394: LD_ADDR_VAR 0 18
44398: PUSH
44399: LD_VAR 0 15
44403: PPUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: LD_INT 1
44411: PPUSH
44412: CALL 43654 0 3
44416: ST_TO_ADDR
// InitHc ;
44417: CALL_OW 19
// InitUc ;
44421: CALL_OW 18
// uc_side := side ;
44425: LD_ADDR_OWVAR 20
44429: PUSH
44430: LD_VAR 0 16
44434: ST_TO_ADDR
// uc_nation := nation ;
44435: LD_ADDR_OWVAR 21
44439: PUSH
44440: LD_VAR 0 17
44444: ST_TO_ADDR
// if buildings then
44445: LD_VAR 0 18
44449: IFFALSE 45771
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44451: LD_ADDR_VAR 0 19
44455: PUSH
44456: LD_VAR 0 18
44460: PPUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 30
44466: PUSH
44467: LD_INT 29
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 30
44476: PUSH
44477: LD_INT 30
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: PPUSH
44489: CALL_OW 72
44493: ST_TO_ADDR
// if tmp then
44494: LD_VAR 0 19
44498: IFFALSE 44546
// for i in tmp do
44500: LD_ADDR_VAR 0 8
44504: PUSH
44505: LD_VAR 0 19
44509: PUSH
44510: FOR_IN
44511: IFFALSE 44544
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44513: LD_VAR 0 8
44517: PPUSH
44518: CALL_OW 250
44522: PPUSH
44523: LD_VAR 0 8
44527: PPUSH
44528: CALL_OW 251
44532: PPUSH
44533: LD_VAR 0 16
44537: PPUSH
44538: CALL_OW 441
44542: GO 44510
44544: POP
44545: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44546: LD_VAR 0 18
44550: PPUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 30
44556: PUSH
44557: LD_INT 32
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 30
44566: PUSH
44567: LD_INT 33
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: PPUSH
44579: CALL_OW 72
44583: IFFALSE 44671
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44585: LD_ADDR_VAR 0 8
44589: PUSH
44590: LD_VAR 0 18
44594: PPUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 30
44600: PUSH
44601: LD_INT 32
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 30
44610: PUSH
44611: LD_INT 33
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: PPUSH
44623: CALL_OW 72
44627: PUSH
44628: FOR_IN
44629: IFFALSE 44669
// begin if not GetBWeapon ( i ) then
44631: LD_VAR 0 8
44635: PPUSH
44636: CALL_OW 269
44640: NOT
44641: IFFALSE 44667
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44643: LD_VAR 0 8
44647: PPUSH
44648: LD_VAR 0 8
44652: PPUSH
44653: LD_VAR 0 2
44657: PPUSH
44658: CALL 45917 0 2
44662: PPUSH
44663: CALL_OW 431
// end ;
44667: GO 44628
44669: POP
44670: POP
// end ; for i = 1 to personel do
44671: LD_ADDR_VAR 0 8
44675: PUSH
44676: DOUBLE
44677: LD_INT 1
44679: DEC
44680: ST_TO_ADDR
44681: LD_VAR 0 6
44685: PUSH
44686: FOR_TO
44687: IFFALSE 45751
// begin if i > 4 then
44689: LD_VAR 0 8
44693: PUSH
44694: LD_INT 4
44696: GREATER
44697: IFFALSE 44701
// break ;
44699: GO 45751
// case i of 1 :
44701: LD_VAR 0 8
44705: PUSH
44706: LD_INT 1
44708: DOUBLE
44709: EQUAL
44710: IFTRUE 44714
44712: GO 44794
44714: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44715: LD_ADDR_VAR 0 12
44719: PUSH
44720: LD_VAR 0 18
44724: PPUSH
44725: LD_INT 22
44727: PUSH
44728: LD_VAR 0 16
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 58
44739: PUSH
44740: EMPTY
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 30
44748: PUSH
44749: LD_INT 32
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 30
44758: PUSH
44759: LD_INT 4
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 30
44768: PUSH
44769: LD_INT 5
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: PPUSH
44787: CALL_OW 72
44791: ST_TO_ADDR
44792: GO 45016
44794: LD_INT 2
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44802
44800: GO 44864
44802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44803: LD_ADDR_VAR 0 12
44807: PUSH
44808: LD_VAR 0 18
44812: PPUSH
44813: LD_INT 22
44815: PUSH
44816: LD_VAR 0 16
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: LD_INT 30
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 30
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PPUSH
44857: CALL_OW 72
44861: ST_TO_ADDR
44862: GO 45016
44864: LD_INT 3
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 44934
44872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44873: LD_ADDR_VAR 0 12
44877: PUSH
44878: LD_VAR 0 18
44882: PPUSH
44883: LD_INT 22
44885: PUSH
44886: LD_VAR 0 16
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 30
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 30
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PPUSH
44927: CALL_OW 72
44931: ST_TO_ADDR
44932: GO 45016
44934: LD_INT 4
44936: DOUBLE
44937: EQUAL
44938: IFTRUE 44942
44940: GO 45015
44942: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44943: LD_ADDR_VAR 0 12
44947: PUSH
44948: LD_VAR 0 18
44952: PPUSH
44953: LD_INT 22
44955: PUSH
44956: LD_VAR 0 16
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 30
44970: PUSH
44971: LD_INT 6
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 30
44980: PUSH
44981: LD_INT 7
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 30
44990: PUSH
44991: LD_INT 8
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PPUSH
45008: CALL_OW 72
45012: ST_TO_ADDR
45013: GO 45016
45015: POP
// if i = 1 then
45016: LD_VAR 0 8
45020: PUSH
45021: LD_INT 1
45023: EQUAL
45024: IFFALSE 45135
// begin tmp := [ ] ;
45026: LD_ADDR_VAR 0 19
45030: PUSH
45031: EMPTY
45032: ST_TO_ADDR
// for j in f do
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: LD_VAR 0 12
45042: PUSH
45043: FOR_IN
45044: IFFALSE 45117
// if GetBType ( j ) = b_bunker then
45046: LD_VAR 0 9
45050: PPUSH
45051: CALL_OW 266
45055: PUSH
45056: LD_INT 32
45058: EQUAL
45059: IFFALSE 45086
// tmp := Insert ( tmp , 1 , j ) else
45061: LD_ADDR_VAR 0 19
45065: PUSH
45066: LD_VAR 0 19
45070: PPUSH
45071: LD_INT 1
45073: PPUSH
45074: LD_VAR 0 9
45078: PPUSH
45079: CALL_OW 2
45083: ST_TO_ADDR
45084: GO 45115
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45086: LD_ADDR_VAR 0 19
45090: PUSH
45091: LD_VAR 0 19
45095: PPUSH
45096: LD_VAR 0 19
45100: PUSH
45101: LD_INT 1
45103: PLUS
45104: PPUSH
45105: LD_VAR 0 9
45109: PPUSH
45110: CALL_OW 2
45114: ST_TO_ADDR
45115: GO 45043
45117: POP
45118: POP
// if tmp then
45119: LD_VAR 0 19
45123: IFFALSE 45135
// f := tmp ;
45125: LD_ADDR_VAR 0 12
45129: PUSH
45130: LD_VAR 0 19
45134: ST_TO_ADDR
// end ; x := personel [ i ] ;
45135: LD_ADDR_VAR 0 13
45139: PUSH
45140: LD_VAR 0 6
45144: PUSH
45145: LD_VAR 0 8
45149: ARRAY
45150: ST_TO_ADDR
// if x = - 1 then
45151: LD_VAR 0 13
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: EQUAL
45160: IFFALSE 45369
// begin for j in f do
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_VAR 0 12
45171: PUSH
45172: FOR_IN
45173: IFFALSE 45365
// repeat InitHc ;
45175: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45179: LD_VAR 0 9
45183: PPUSH
45184: CALL_OW 266
45188: PUSH
45189: LD_INT 5
45191: EQUAL
45192: IFFALSE 45262
// begin if UnitsInside ( j ) < 3 then
45194: LD_VAR 0 9
45198: PPUSH
45199: CALL_OW 313
45203: PUSH
45204: LD_INT 3
45206: LESS
45207: IFFALSE 45243
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45209: LD_INT 0
45211: PPUSH
45212: LD_INT 5
45214: PUSH
45215: LD_INT 8
45217: PUSH
45218: LD_INT 9
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: PUSH
45226: LD_VAR 0 17
45230: ARRAY
45231: PPUSH
45232: LD_VAR 0 4
45236: PPUSH
45237: CALL_OW 380
45241: GO 45260
// PrepareHuman ( false , i , skill ) ;
45243: LD_INT 0
45245: PPUSH
45246: LD_VAR 0 8
45250: PPUSH
45251: LD_VAR 0 4
45255: PPUSH
45256: CALL_OW 380
// end else
45260: GO 45279
// PrepareHuman ( false , i , skill ) ;
45262: LD_INT 0
45264: PPUSH
45265: LD_VAR 0 8
45269: PPUSH
45270: LD_VAR 0 4
45274: PPUSH
45275: CALL_OW 380
// un := CreateHuman ;
45279: LD_ADDR_VAR 0 14
45283: PUSH
45284: CALL_OW 44
45288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45289: LD_ADDR_VAR 0 7
45293: PUSH
45294: LD_VAR 0 7
45298: PPUSH
45299: LD_INT 1
45301: PPUSH
45302: LD_VAR 0 14
45306: PPUSH
45307: CALL_OW 2
45311: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45312: LD_VAR 0 14
45316: PPUSH
45317: LD_VAR 0 9
45321: PPUSH
45322: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45326: LD_VAR 0 9
45330: PPUSH
45331: CALL_OW 313
45335: PUSH
45336: LD_INT 6
45338: EQUAL
45339: PUSH
45340: LD_VAR 0 9
45344: PPUSH
45345: CALL_OW 266
45349: PUSH
45350: LD_INT 32
45352: PUSH
45353: LD_INT 31
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: IN
45360: OR
45361: IFFALSE 45175
45363: GO 45172
45365: POP
45366: POP
// end else
45367: GO 45749
// for j = 1 to x do
45369: LD_ADDR_VAR 0 9
45373: PUSH
45374: DOUBLE
45375: LD_INT 1
45377: DEC
45378: ST_TO_ADDR
45379: LD_VAR 0 13
45383: PUSH
45384: FOR_TO
45385: IFFALSE 45747
// begin InitHc ;
45387: CALL_OW 19
// if not f then
45391: LD_VAR 0 12
45395: NOT
45396: IFFALSE 45485
// begin PrepareHuman ( false , i , skill ) ;
45398: LD_INT 0
45400: PPUSH
45401: LD_VAR 0 8
45405: PPUSH
45406: LD_VAR 0 4
45410: PPUSH
45411: CALL_OW 380
// un := CreateHuman ;
45415: LD_ADDR_VAR 0 14
45419: PUSH
45420: CALL_OW 44
45424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45425: LD_ADDR_VAR 0 7
45429: PUSH
45430: LD_VAR 0 7
45434: PPUSH
45435: LD_INT 1
45437: PPUSH
45438: LD_VAR 0 14
45442: PPUSH
45443: CALL_OW 2
45447: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45448: LD_VAR 0 14
45452: PPUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 250
45462: PPUSH
45463: LD_VAR 0 1
45467: PPUSH
45468: CALL_OW 251
45472: PPUSH
45473: LD_INT 10
45475: PPUSH
45476: LD_INT 0
45478: PPUSH
45479: CALL_OW 50
// continue ;
45483: GO 45384
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45485: LD_VAR 0 12
45489: PUSH
45490: LD_INT 1
45492: ARRAY
45493: PPUSH
45494: CALL_OW 313
45498: PUSH
45499: LD_VAR 0 12
45503: PUSH
45504: LD_INT 1
45506: ARRAY
45507: PPUSH
45508: CALL_OW 266
45512: PUSH
45513: LD_INT 32
45515: PUSH
45516: LD_INT 31
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: IN
45523: AND
45524: PUSH
45525: LD_VAR 0 12
45529: PUSH
45530: LD_INT 1
45532: ARRAY
45533: PPUSH
45534: CALL_OW 313
45538: PUSH
45539: LD_INT 6
45541: EQUAL
45542: OR
45543: IFFALSE 45563
// f := Delete ( f , 1 ) ;
45545: LD_ADDR_VAR 0 12
45549: PUSH
45550: LD_VAR 0 12
45554: PPUSH
45555: LD_INT 1
45557: PPUSH
45558: CALL_OW 3
45562: ST_TO_ADDR
// if not f then
45563: LD_VAR 0 12
45567: NOT
45568: IFFALSE 45586
// begin x := x + 2 ;
45570: LD_ADDR_VAR 0 13
45574: PUSH
45575: LD_VAR 0 13
45579: PUSH
45580: LD_INT 2
45582: PLUS
45583: ST_TO_ADDR
// continue ;
45584: GO 45384
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45586: LD_VAR 0 12
45590: PUSH
45591: LD_INT 1
45593: ARRAY
45594: PPUSH
45595: CALL_OW 266
45599: PUSH
45600: LD_INT 5
45602: EQUAL
45603: IFFALSE 45677
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45605: LD_VAR 0 12
45609: PUSH
45610: LD_INT 1
45612: ARRAY
45613: PPUSH
45614: CALL_OW 313
45618: PUSH
45619: LD_INT 3
45621: LESS
45622: IFFALSE 45658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45624: LD_INT 0
45626: PPUSH
45627: LD_INT 5
45629: PUSH
45630: LD_INT 8
45632: PUSH
45633: LD_INT 9
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: PUSH
45641: LD_VAR 0 17
45645: ARRAY
45646: PPUSH
45647: LD_VAR 0 4
45651: PPUSH
45652: CALL_OW 380
45656: GO 45675
// PrepareHuman ( false , i , skill ) ;
45658: LD_INT 0
45660: PPUSH
45661: LD_VAR 0 8
45665: PPUSH
45666: LD_VAR 0 4
45670: PPUSH
45671: CALL_OW 380
// end else
45675: GO 45694
// PrepareHuman ( false , i , skill ) ;
45677: LD_INT 0
45679: PPUSH
45680: LD_VAR 0 8
45684: PPUSH
45685: LD_VAR 0 4
45689: PPUSH
45690: CALL_OW 380
// un := CreateHuman ;
45694: LD_ADDR_VAR 0 14
45698: PUSH
45699: CALL_OW 44
45703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45704: LD_ADDR_VAR 0 7
45708: PUSH
45709: LD_VAR 0 7
45713: PPUSH
45714: LD_INT 1
45716: PPUSH
45717: LD_VAR 0 14
45721: PPUSH
45722: CALL_OW 2
45726: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45727: LD_VAR 0 14
45731: PPUSH
45732: LD_VAR 0 12
45736: PUSH
45737: LD_INT 1
45739: ARRAY
45740: PPUSH
45741: CALL_OW 52
// end ;
45745: GO 45384
45747: POP
45748: POP
// end ;
45749: GO 44686
45751: POP
45752: POP
// result := result ^ buildings ;
45753: LD_ADDR_VAR 0 7
45757: PUSH
45758: LD_VAR 0 7
45762: PUSH
45763: LD_VAR 0 18
45767: ADD
45768: ST_TO_ADDR
// end else
45769: GO 45912
// begin for i = 1 to personel do
45771: LD_ADDR_VAR 0 8
45775: PUSH
45776: DOUBLE
45777: LD_INT 1
45779: DEC
45780: ST_TO_ADDR
45781: LD_VAR 0 6
45785: PUSH
45786: FOR_TO
45787: IFFALSE 45910
// begin if i > 4 then
45789: LD_VAR 0 8
45793: PUSH
45794: LD_INT 4
45796: GREATER
45797: IFFALSE 45801
// break ;
45799: GO 45910
// x := personel [ i ] ;
45801: LD_ADDR_VAR 0 13
45805: PUSH
45806: LD_VAR 0 6
45810: PUSH
45811: LD_VAR 0 8
45815: ARRAY
45816: ST_TO_ADDR
// if x = - 1 then
45817: LD_VAR 0 13
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: EQUAL
45826: IFFALSE 45830
// continue ;
45828: GO 45786
// PrepareHuman ( false , i , skill ) ;
45830: LD_INT 0
45832: PPUSH
45833: LD_VAR 0 8
45837: PPUSH
45838: LD_VAR 0 4
45842: PPUSH
45843: CALL_OW 380
// un := CreateHuman ;
45847: LD_ADDR_VAR 0 14
45851: PUSH
45852: CALL_OW 44
45856: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45857: LD_VAR 0 14
45861: PPUSH
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL_OW 250
45871: PPUSH
45872: LD_VAR 0 1
45876: PPUSH
45877: CALL_OW 251
45881: PPUSH
45882: LD_INT 10
45884: PPUSH
45885: LD_INT 0
45887: PPUSH
45888: CALL_OW 50
// result := result ^ un ;
45892: LD_ADDR_VAR 0 7
45896: PUSH
45897: LD_VAR 0 7
45901: PUSH
45902: LD_VAR 0 14
45906: ADD
45907: ST_TO_ADDR
// end ;
45908: GO 45786
45910: POP
45911: POP
// end ; end ;
45912: LD_VAR 0 7
45916: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45917: LD_INT 0
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
// result := false ;
45935: LD_ADDR_VAR 0 3
45939: PUSH
45940: LD_INT 0
45942: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45943: LD_VAR 0 1
45947: NOT
45948: PUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: CALL_OW 266
45958: PUSH
45959: LD_INT 32
45961: PUSH
45962: LD_INT 33
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: IN
45969: NOT
45970: OR
45971: IFFALSE 45975
// exit ;
45973: GO 47084
// nat := GetNation ( tower ) ;
45975: LD_ADDR_VAR 0 12
45979: PUSH
45980: LD_VAR 0 1
45984: PPUSH
45985: CALL_OW 248
45989: ST_TO_ADDR
// side := GetSide ( tower ) ;
45990: LD_ADDR_VAR 0 16
45994: PUSH
45995: LD_VAR 0 1
45999: PPUSH
46000: CALL_OW 255
46004: ST_TO_ADDR
// x := GetX ( tower ) ;
46005: LD_ADDR_VAR 0 10
46009: PUSH
46010: LD_VAR 0 1
46014: PPUSH
46015: CALL_OW 250
46019: ST_TO_ADDR
// y := GetY ( tower ) ;
46020: LD_ADDR_VAR 0 11
46024: PUSH
46025: LD_VAR 0 1
46029: PPUSH
46030: CALL_OW 251
46034: ST_TO_ADDR
// if not x or not y then
46035: LD_VAR 0 10
46039: NOT
46040: PUSH
46041: LD_VAR 0 11
46045: NOT
46046: OR
46047: IFFALSE 46051
// exit ;
46049: GO 47084
// weapon := 0 ;
46051: LD_ADDR_VAR 0 18
46055: PUSH
46056: LD_INT 0
46058: ST_TO_ADDR
// fac_list := [ ] ;
46059: LD_ADDR_VAR 0 17
46063: PUSH
46064: EMPTY
46065: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46066: LD_ADDR_VAR 0 6
46070: PUSH
46071: LD_VAR 0 1
46075: PPUSH
46076: CALL_OW 274
46080: PPUSH
46081: LD_VAR 0 2
46085: PPUSH
46086: LD_INT 0
46088: PPUSH
46089: CALL 43654 0 3
46093: PPUSH
46094: LD_INT 30
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PPUSH
46104: CALL_OW 72
46108: ST_TO_ADDR
// if not factories then
46109: LD_VAR 0 6
46113: NOT
46114: IFFALSE 46118
// exit ;
46116: GO 47084
// for i in factories do
46118: LD_ADDR_VAR 0 8
46122: PUSH
46123: LD_VAR 0 6
46127: PUSH
46128: FOR_IN
46129: IFFALSE 46154
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46131: LD_ADDR_VAR 0 17
46135: PUSH
46136: LD_VAR 0 17
46140: PUSH
46141: LD_VAR 0 8
46145: PPUSH
46146: CALL_OW 478
46150: UNION
46151: ST_TO_ADDR
46152: GO 46128
46154: POP
46155: POP
// if not fac_list then
46156: LD_VAR 0 17
46160: NOT
46161: IFFALSE 46165
// exit ;
46163: GO 47084
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46165: LD_ADDR_VAR 0 5
46169: PUSH
46170: LD_INT 4
46172: PUSH
46173: LD_INT 5
46175: PUSH
46176: LD_INT 9
46178: PUSH
46179: LD_INT 10
46181: PUSH
46182: LD_INT 6
46184: PUSH
46185: LD_INT 7
46187: PUSH
46188: LD_INT 11
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 27
46202: PUSH
46203: LD_INT 28
46205: PUSH
46206: LD_INT 26
46208: PUSH
46209: LD_INT 30
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 43
46220: PUSH
46221: LD_INT 44
46223: PUSH
46224: LD_INT 46
46226: PUSH
46227: LD_INT 45
46229: PUSH
46230: LD_INT 47
46232: PUSH
46233: LD_INT 49
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: PUSH
46249: LD_VAR 0 12
46253: ARRAY
46254: ST_TO_ADDR
// list := list isect fac_list ;
46255: LD_ADDR_VAR 0 5
46259: PUSH
46260: LD_VAR 0 5
46264: PUSH
46265: LD_VAR 0 17
46269: ISECT
46270: ST_TO_ADDR
// if not list then
46271: LD_VAR 0 5
46275: NOT
46276: IFFALSE 46280
// exit ;
46278: GO 47084
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46280: LD_VAR 0 12
46284: PUSH
46285: LD_INT 3
46287: EQUAL
46288: PUSH
46289: LD_INT 49
46291: PUSH
46292: LD_VAR 0 5
46296: IN
46297: AND
46298: PUSH
46299: LD_INT 31
46301: PPUSH
46302: LD_VAR 0 16
46306: PPUSH
46307: CALL_OW 321
46311: PUSH
46312: LD_INT 2
46314: EQUAL
46315: AND
46316: IFFALSE 46376
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46318: LD_INT 22
46320: PUSH
46321: LD_VAR 0 16
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 35
46332: PUSH
46333: LD_INT 49
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 91
46342: PUSH
46343: LD_VAR 0 1
46347: PUSH
46348: LD_INT 10
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: PPUSH
46361: CALL_OW 69
46365: NOT
46366: IFFALSE 46376
// weapon := ru_time_lapser ;
46368: LD_ADDR_VAR 0 18
46372: PUSH
46373: LD_INT 49
46375: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46376: LD_VAR 0 12
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: IN
46391: PUSH
46392: LD_INT 11
46394: PUSH
46395: LD_VAR 0 5
46399: IN
46400: PUSH
46401: LD_INT 30
46403: PUSH
46404: LD_VAR 0 5
46408: IN
46409: OR
46410: AND
46411: PUSH
46412: LD_INT 6
46414: PPUSH
46415: LD_VAR 0 16
46419: PPUSH
46420: CALL_OW 321
46424: PUSH
46425: LD_INT 2
46427: EQUAL
46428: AND
46429: IFFALSE 46594
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46431: LD_INT 22
46433: PUSH
46434: LD_VAR 0 16
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 35
46448: PUSH
46449: LD_INT 11
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 35
46458: PUSH
46459: LD_INT 30
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 91
46473: PUSH
46474: LD_VAR 0 1
46478: PUSH
46479: LD_INT 18
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: PPUSH
46492: CALL_OW 69
46496: NOT
46497: PUSH
46498: LD_INT 22
46500: PUSH
46501: LD_VAR 0 16
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 30
46515: PUSH
46516: LD_INT 32
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 30
46525: PUSH
46526: LD_INT 33
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 91
46540: PUSH
46541: LD_VAR 0 1
46545: PUSH
46546: LD_INT 12
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: PPUSH
46562: CALL_OW 69
46566: PUSH
46567: LD_INT 2
46569: GREATER
46570: AND
46571: IFFALSE 46594
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46573: LD_ADDR_VAR 0 18
46577: PUSH
46578: LD_INT 11
46580: PUSH
46581: LD_INT 30
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_VAR 0 12
46592: ARRAY
46593: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46594: LD_VAR 0 18
46598: NOT
46599: PUSH
46600: LD_INT 40
46602: PPUSH
46603: LD_VAR 0 16
46607: PPUSH
46608: CALL_OW 321
46612: PUSH
46613: LD_INT 2
46615: EQUAL
46616: AND
46617: PUSH
46618: LD_INT 7
46620: PUSH
46621: LD_VAR 0 5
46625: IN
46626: PUSH
46627: LD_INT 28
46629: PUSH
46630: LD_VAR 0 5
46634: IN
46635: OR
46636: PUSH
46637: LD_INT 45
46639: PUSH
46640: LD_VAR 0 5
46644: IN
46645: OR
46646: AND
46647: IFFALSE 46901
// begin hex := GetHexInfo ( x , y ) ;
46649: LD_ADDR_VAR 0 4
46653: PUSH
46654: LD_VAR 0 10
46658: PPUSH
46659: LD_VAR 0 11
46663: PPUSH
46664: CALL_OW 546
46668: ST_TO_ADDR
// if hex [ 1 ] then
46669: LD_VAR 0 4
46673: PUSH
46674: LD_INT 1
46676: ARRAY
46677: IFFALSE 46681
// exit ;
46679: GO 47084
// height := hex [ 2 ] ;
46681: LD_ADDR_VAR 0 15
46685: PUSH
46686: LD_VAR 0 4
46690: PUSH
46691: LD_INT 2
46693: ARRAY
46694: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46695: LD_ADDR_VAR 0 14
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: LD_INT 5
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// for i in tmp do
46718: LD_ADDR_VAR 0 8
46722: PUSH
46723: LD_VAR 0 14
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46899
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46731: LD_ADDR_VAR 0 9
46735: PUSH
46736: LD_VAR 0 10
46740: PPUSH
46741: LD_VAR 0 8
46745: PPUSH
46746: LD_INT 5
46748: PPUSH
46749: CALL_OW 272
46753: PUSH
46754: LD_VAR 0 11
46758: PPUSH
46759: LD_VAR 0 8
46763: PPUSH
46764: LD_INT 5
46766: PPUSH
46767: CALL_OW 273
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46776: LD_VAR 0 9
46780: PUSH
46781: LD_INT 1
46783: ARRAY
46784: PPUSH
46785: LD_VAR 0 9
46789: PUSH
46790: LD_INT 2
46792: ARRAY
46793: PPUSH
46794: CALL_OW 488
46798: IFFALSE 46897
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46800: LD_ADDR_VAR 0 4
46804: PUSH
46805: LD_VAR 0 9
46809: PUSH
46810: LD_INT 1
46812: ARRAY
46813: PPUSH
46814: LD_VAR 0 9
46818: PUSH
46819: LD_INT 2
46821: ARRAY
46822: PPUSH
46823: CALL_OW 546
46827: ST_TO_ADDR
// if hex [ 1 ] then
46828: LD_VAR 0 4
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: IFFALSE 46840
// continue ;
46838: GO 46728
// h := hex [ 2 ] ;
46840: LD_ADDR_VAR 0 13
46844: PUSH
46845: LD_VAR 0 4
46849: PUSH
46850: LD_INT 2
46852: ARRAY
46853: ST_TO_ADDR
// if h + 7 < height then
46854: LD_VAR 0 13
46858: PUSH
46859: LD_INT 7
46861: PLUS
46862: PUSH
46863: LD_VAR 0 15
46867: LESS
46868: IFFALSE 46897
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46870: LD_ADDR_VAR 0 18
46874: PUSH
46875: LD_INT 7
46877: PUSH
46878: LD_INT 28
46880: PUSH
46881: LD_INT 45
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: PUSH
46889: LD_VAR 0 12
46893: ARRAY
46894: ST_TO_ADDR
// break ;
46895: GO 46899
// end ; end ; end ;
46897: GO 46728
46899: POP
46900: POP
// end ; if not weapon then
46901: LD_VAR 0 18
46905: NOT
46906: IFFALSE 46966
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46908: LD_ADDR_VAR 0 5
46912: PUSH
46913: LD_VAR 0 5
46917: PUSH
46918: LD_INT 11
46920: PUSH
46921: LD_INT 30
46923: PUSH
46924: LD_INT 49
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: DIFF
46932: ST_TO_ADDR
// if not list then
46933: LD_VAR 0 5
46937: NOT
46938: IFFALSE 46942
// exit ;
46940: GO 47084
// weapon := list [ rand ( 1 , list ) ] ;
46942: LD_ADDR_VAR 0 18
46946: PUSH
46947: LD_VAR 0 5
46951: PUSH
46952: LD_INT 1
46954: PPUSH
46955: LD_VAR 0 5
46959: PPUSH
46960: CALL_OW 12
46964: ARRAY
46965: ST_TO_ADDR
// end ; if weapon then
46966: LD_VAR 0 18
46970: IFFALSE 47084
// begin tmp := CostOfWeapon ( weapon ) ;
46972: LD_ADDR_VAR 0 14
46976: PUSH
46977: LD_VAR 0 18
46981: PPUSH
46982: CALL_OW 451
46986: ST_TO_ADDR
// j := GetBase ( tower ) ;
46987: LD_ADDR_VAR 0 9
46991: PUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 274
47001: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47002: LD_VAR 0 9
47006: PPUSH
47007: LD_INT 1
47009: PPUSH
47010: CALL_OW 275
47014: PUSH
47015: LD_VAR 0 14
47019: PUSH
47020: LD_INT 1
47022: ARRAY
47023: GREATEREQUAL
47024: PUSH
47025: LD_VAR 0 9
47029: PPUSH
47030: LD_INT 2
47032: PPUSH
47033: CALL_OW 275
47037: PUSH
47038: LD_VAR 0 14
47042: PUSH
47043: LD_INT 2
47045: ARRAY
47046: GREATEREQUAL
47047: AND
47048: PUSH
47049: LD_VAR 0 9
47053: PPUSH
47054: LD_INT 3
47056: PPUSH
47057: CALL_OW 275
47061: PUSH
47062: LD_VAR 0 14
47066: PUSH
47067: LD_INT 3
47069: ARRAY
47070: GREATEREQUAL
47071: AND
47072: IFFALSE 47084
// result := weapon ;
47074: LD_ADDR_VAR 0 3
47078: PUSH
47079: LD_VAR 0 18
47083: ST_TO_ADDR
// end ; end ;
47084: LD_VAR 0 3
47088: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47089: LD_INT 0
47091: PPUSH
47092: PPUSH
// result := true ;
47093: LD_ADDR_VAR 0 3
47097: PUSH
47098: LD_INT 1
47100: ST_TO_ADDR
// if array1 = array2 then
47101: LD_VAR 0 1
47105: PUSH
47106: LD_VAR 0 2
47110: EQUAL
47111: IFFALSE 47171
// begin for i = 1 to array1 do
47113: LD_ADDR_VAR 0 4
47117: PUSH
47118: DOUBLE
47119: LD_INT 1
47121: DEC
47122: ST_TO_ADDR
47123: LD_VAR 0 1
47127: PUSH
47128: FOR_TO
47129: IFFALSE 47167
// if array1 [ i ] <> array2 [ i ] then
47131: LD_VAR 0 1
47135: PUSH
47136: LD_VAR 0 4
47140: ARRAY
47141: PUSH
47142: LD_VAR 0 2
47146: PUSH
47147: LD_VAR 0 4
47151: ARRAY
47152: NONEQUAL
47153: IFFALSE 47165
// begin result := false ;
47155: LD_ADDR_VAR 0 3
47159: PUSH
47160: LD_INT 0
47162: ST_TO_ADDR
// break ;
47163: GO 47167
// end ;
47165: GO 47128
47167: POP
47168: POP
// end else
47169: GO 47179
// result := false ;
47171: LD_ADDR_VAR 0 3
47175: PUSH
47176: LD_INT 0
47178: ST_TO_ADDR
// end ;
47179: LD_VAR 0 3
47183: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47184: LD_INT 0
47186: PPUSH
47187: PPUSH
// if not array1 or not array2 then
47188: LD_VAR 0 1
47192: NOT
47193: PUSH
47194: LD_VAR 0 2
47198: NOT
47199: OR
47200: IFFALSE 47204
// exit ;
47202: GO 47268
// result := true ;
47204: LD_ADDR_VAR 0 3
47208: PUSH
47209: LD_INT 1
47211: ST_TO_ADDR
// for i = 1 to array1 do
47212: LD_ADDR_VAR 0 4
47216: PUSH
47217: DOUBLE
47218: LD_INT 1
47220: DEC
47221: ST_TO_ADDR
47222: LD_VAR 0 1
47226: PUSH
47227: FOR_TO
47228: IFFALSE 47266
// if array1 [ i ] <> array2 [ i ] then
47230: LD_VAR 0 1
47234: PUSH
47235: LD_VAR 0 4
47239: ARRAY
47240: PUSH
47241: LD_VAR 0 2
47245: PUSH
47246: LD_VAR 0 4
47250: ARRAY
47251: NONEQUAL
47252: IFFALSE 47264
// begin result := false ;
47254: LD_ADDR_VAR 0 3
47258: PUSH
47259: LD_INT 0
47261: ST_TO_ADDR
// break ;
47262: GO 47266
// end ;
47264: GO 47227
47266: POP
47267: POP
// end ;
47268: LD_VAR 0 3
47272: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47273: LD_INT 0
47275: PPUSH
47276: PPUSH
47277: PPUSH
// pom := GetBase ( fac ) ;
47278: LD_ADDR_VAR 0 5
47282: PUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: CALL_OW 274
47292: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47293: LD_ADDR_VAR 0 4
47297: PUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: PPUSH
47307: LD_VAR 0 2
47311: PUSH
47312: LD_INT 2
47314: ARRAY
47315: PPUSH
47316: LD_VAR 0 2
47320: PUSH
47321: LD_INT 3
47323: ARRAY
47324: PPUSH
47325: LD_VAR 0 2
47329: PUSH
47330: LD_INT 4
47332: ARRAY
47333: PPUSH
47334: CALL_OW 449
47338: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47339: LD_ADDR_VAR 0 3
47343: PUSH
47344: LD_VAR 0 5
47348: PPUSH
47349: LD_INT 1
47351: PPUSH
47352: CALL_OW 275
47356: PUSH
47357: LD_VAR 0 4
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: GREATEREQUAL
47366: PUSH
47367: LD_VAR 0 5
47371: PPUSH
47372: LD_INT 2
47374: PPUSH
47375: CALL_OW 275
47379: PUSH
47380: LD_VAR 0 4
47384: PUSH
47385: LD_INT 2
47387: ARRAY
47388: GREATEREQUAL
47389: AND
47390: PUSH
47391: LD_VAR 0 5
47395: PPUSH
47396: LD_INT 3
47398: PPUSH
47399: CALL_OW 275
47403: PUSH
47404: LD_VAR 0 4
47408: PUSH
47409: LD_INT 3
47411: ARRAY
47412: GREATEREQUAL
47413: AND
47414: ST_TO_ADDR
// end ;
47415: LD_VAR 0 3
47419: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47420: LD_INT 0
47422: PPUSH
47423: PPUSH
47424: PPUSH
47425: PPUSH
// pom := GetBase ( building ) ;
47426: LD_ADDR_VAR 0 3
47430: PUSH
47431: LD_VAR 0 1
47435: PPUSH
47436: CALL_OW 274
47440: ST_TO_ADDR
// if not pom then
47441: LD_VAR 0 3
47445: NOT
47446: IFFALSE 47450
// exit ;
47448: GO 47620
// btype := GetBType ( building ) ;
47450: LD_ADDR_VAR 0 5
47454: PUSH
47455: LD_VAR 0 1
47459: PPUSH
47460: CALL_OW 266
47464: ST_TO_ADDR
// if btype = b_armoury then
47465: LD_VAR 0 5
47469: PUSH
47470: LD_INT 4
47472: EQUAL
47473: IFFALSE 47483
// btype := b_barracks ;
47475: LD_ADDR_VAR 0 5
47479: PUSH
47480: LD_INT 5
47482: ST_TO_ADDR
// if btype = b_depot then
47483: LD_VAR 0 5
47487: PUSH
47488: LD_INT 0
47490: EQUAL
47491: IFFALSE 47501
// btype := b_warehouse ;
47493: LD_ADDR_VAR 0 5
47497: PUSH
47498: LD_INT 1
47500: ST_TO_ADDR
// if btype = b_workshop then
47501: LD_VAR 0 5
47505: PUSH
47506: LD_INT 2
47508: EQUAL
47509: IFFALSE 47519
// btype := b_factory ;
47511: LD_ADDR_VAR 0 5
47515: PUSH
47516: LD_INT 3
47518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47519: LD_ADDR_VAR 0 4
47523: PUSH
47524: LD_VAR 0 5
47528: PPUSH
47529: LD_VAR 0 1
47533: PPUSH
47534: CALL_OW 248
47538: PPUSH
47539: CALL_OW 450
47543: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47544: LD_ADDR_VAR 0 2
47548: PUSH
47549: LD_VAR 0 3
47553: PPUSH
47554: LD_INT 1
47556: PPUSH
47557: CALL_OW 275
47561: PUSH
47562: LD_VAR 0 4
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: GREATEREQUAL
47571: PUSH
47572: LD_VAR 0 3
47576: PPUSH
47577: LD_INT 2
47579: PPUSH
47580: CALL_OW 275
47584: PUSH
47585: LD_VAR 0 4
47589: PUSH
47590: LD_INT 2
47592: ARRAY
47593: GREATEREQUAL
47594: AND
47595: PUSH
47596: LD_VAR 0 3
47600: PPUSH
47601: LD_INT 3
47603: PPUSH
47604: CALL_OW 275
47608: PUSH
47609: LD_VAR 0 4
47613: PUSH
47614: LD_INT 3
47616: ARRAY
47617: GREATEREQUAL
47618: AND
47619: ST_TO_ADDR
// end ;
47620: LD_VAR 0 2
47624: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47625: LD_INT 0
47627: PPUSH
47628: PPUSH
47629: PPUSH
// pom := GetBase ( building ) ;
47630: LD_ADDR_VAR 0 4
47634: PUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: CALL_OW 274
47644: ST_TO_ADDR
// if not pom then
47645: LD_VAR 0 4
47649: NOT
47650: IFFALSE 47654
// exit ;
47652: GO 47755
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47654: LD_ADDR_VAR 0 5
47658: PUSH
47659: LD_VAR 0 2
47663: PPUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 248
47673: PPUSH
47674: CALL_OW 450
47678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47679: LD_ADDR_VAR 0 3
47683: PUSH
47684: LD_VAR 0 4
47688: PPUSH
47689: LD_INT 1
47691: PPUSH
47692: CALL_OW 275
47696: PUSH
47697: LD_VAR 0 5
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: GREATEREQUAL
47706: PUSH
47707: LD_VAR 0 4
47711: PPUSH
47712: LD_INT 2
47714: PPUSH
47715: CALL_OW 275
47719: PUSH
47720: LD_VAR 0 5
47724: PUSH
47725: LD_INT 2
47727: ARRAY
47728: GREATEREQUAL
47729: AND
47730: PUSH
47731: LD_VAR 0 4
47735: PPUSH
47736: LD_INT 3
47738: PPUSH
47739: CALL_OW 275
47743: PUSH
47744: LD_VAR 0 5
47748: PUSH
47749: LD_INT 3
47751: ARRAY
47752: GREATEREQUAL
47753: AND
47754: ST_TO_ADDR
// end ;
47755: LD_VAR 0 3
47759: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47760: LD_INT 0
47762: PPUSH
47763: PPUSH
47764: PPUSH
47765: PPUSH
47766: PPUSH
47767: PPUSH
47768: PPUSH
47769: PPUSH
47770: PPUSH
47771: PPUSH
47772: PPUSH
// result := false ;
47773: LD_ADDR_VAR 0 8
47777: PUSH
47778: LD_INT 0
47780: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47781: LD_VAR 0 5
47785: NOT
47786: PUSH
47787: LD_VAR 0 1
47791: NOT
47792: OR
47793: PUSH
47794: LD_VAR 0 2
47798: NOT
47799: OR
47800: PUSH
47801: LD_VAR 0 3
47805: NOT
47806: OR
47807: IFFALSE 47811
// exit ;
47809: GO 48625
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47811: LD_ADDR_VAR 0 14
47815: PUSH
47816: LD_VAR 0 1
47820: PPUSH
47821: LD_VAR 0 2
47825: PPUSH
47826: LD_VAR 0 3
47830: PPUSH
47831: LD_VAR 0 4
47835: PPUSH
47836: LD_VAR 0 5
47840: PUSH
47841: LD_INT 1
47843: ARRAY
47844: PPUSH
47845: CALL_OW 248
47849: PPUSH
47850: LD_INT 0
47852: PPUSH
47853: CALL 49862 0 6
47857: ST_TO_ADDR
// if not hexes then
47858: LD_VAR 0 14
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 48625
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47867: LD_ADDR_VAR 0 17
47871: PUSH
47872: LD_VAR 0 5
47876: PPUSH
47877: LD_INT 22
47879: PUSH
47880: LD_VAR 0 13
47884: PPUSH
47885: CALL_OW 255
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 30
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 30
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PPUSH
47926: CALL_OW 72
47930: ST_TO_ADDR
// for i = 1 to hexes do
47931: LD_ADDR_VAR 0 9
47935: PUSH
47936: DOUBLE
47937: LD_INT 1
47939: DEC
47940: ST_TO_ADDR
47941: LD_VAR 0 14
47945: PUSH
47946: FOR_TO
47947: IFFALSE 48623
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47949: LD_ADDR_VAR 0 13
47953: PUSH
47954: LD_VAR 0 14
47958: PUSH
47959: LD_VAR 0 9
47963: ARRAY
47964: PUSH
47965: LD_INT 1
47967: ARRAY
47968: PPUSH
47969: LD_VAR 0 14
47973: PUSH
47974: LD_VAR 0 9
47978: ARRAY
47979: PUSH
47980: LD_INT 2
47982: ARRAY
47983: PPUSH
47984: CALL_OW 428
47988: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47989: LD_VAR 0 14
47993: PUSH
47994: LD_VAR 0 9
47998: ARRAY
47999: PUSH
48000: LD_INT 1
48002: ARRAY
48003: PPUSH
48004: LD_VAR 0 14
48008: PUSH
48009: LD_VAR 0 9
48013: ARRAY
48014: PUSH
48015: LD_INT 2
48017: ARRAY
48018: PPUSH
48019: CALL_OW 351
48023: PUSH
48024: LD_VAR 0 14
48028: PUSH
48029: LD_VAR 0 9
48033: ARRAY
48034: PUSH
48035: LD_INT 1
48037: ARRAY
48038: PPUSH
48039: LD_VAR 0 14
48043: PUSH
48044: LD_VAR 0 9
48048: ARRAY
48049: PUSH
48050: LD_INT 2
48052: ARRAY
48053: PPUSH
48054: CALL_OW 488
48058: NOT
48059: OR
48060: PUSH
48061: LD_VAR 0 13
48065: PPUSH
48066: CALL_OW 247
48070: PUSH
48071: LD_INT 3
48073: EQUAL
48074: OR
48075: IFFALSE 48081
// exit ;
48077: POP
48078: POP
48079: GO 48625
// if not tmp then
48081: LD_VAR 0 13
48085: NOT
48086: IFFALSE 48090
// continue ;
48088: GO 47946
// result := true ;
48090: LD_ADDR_VAR 0 8
48094: PUSH
48095: LD_INT 1
48097: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48098: LD_VAR 0 6
48102: PUSH
48103: LD_VAR 0 13
48107: PPUSH
48108: CALL_OW 247
48112: PUSH
48113: LD_INT 2
48115: EQUAL
48116: AND
48117: PUSH
48118: LD_VAR 0 13
48122: PPUSH
48123: CALL_OW 263
48127: PUSH
48128: LD_INT 1
48130: EQUAL
48131: AND
48132: IFFALSE 48296
// begin if IsDrivenBy ( tmp ) then
48134: LD_VAR 0 13
48138: PPUSH
48139: CALL_OW 311
48143: IFFALSE 48147
// continue ;
48145: GO 47946
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48147: LD_VAR 0 6
48151: PPUSH
48152: LD_INT 3
48154: PUSH
48155: LD_INT 60
48157: PUSH
48158: EMPTY
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 55
48170: PUSH
48171: EMPTY
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: IFFALSE 48294
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48188: LD_ADDR_VAR 0 18
48192: PUSH
48193: LD_VAR 0 6
48197: PPUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 60
48203: PUSH
48204: EMPTY
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 55
48216: PUSH
48217: EMPTY
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PPUSH
48228: CALL_OW 72
48232: PUSH
48233: LD_INT 1
48235: ARRAY
48236: ST_TO_ADDR
// if IsInUnit ( driver ) then
48237: LD_VAR 0 18
48241: PPUSH
48242: CALL_OW 310
48246: IFFALSE 48257
// ComExit ( driver ) ;
48248: LD_VAR 0 18
48252: PPUSH
48253: CALL 73046 0 1
// AddComEnterUnit ( driver , tmp ) ;
48257: LD_VAR 0 18
48261: PPUSH
48262: LD_VAR 0 13
48266: PPUSH
48267: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48271: LD_VAR 0 18
48275: PPUSH
48276: LD_VAR 0 7
48280: PPUSH
48281: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48285: LD_VAR 0 18
48289: PPUSH
48290: CALL_OW 181
// end ; continue ;
48294: GO 47946
// end ; if not cleaners or not tmp in cleaners then
48296: LD_VAR 0 6
48300: NOT
48301: PUSH
48302: LD_VAR 0 13
48306: PUSH
48307: LD_VAR 0 6
48311: IN
48312: NOT
48313: OR
48314: IFFALSE 48621
// begin if dep then
48316: LD_VAR 0 17
48320: IFFALSE 48456
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48322: LD_ADDR_VAR 0 16
48326: PUSH
48327: LD_VAR 0 17
48331: PUSH
48332: LD_INT 1
48334: ARRAY
48335: PPUSH
48336: CALL_OW 250
48340: PPUSH
48341: LD_VAR 0 17
48345: PUSH
48346: LD_INT 1
48348: ARRAY
48349: PPUSH
48350: CALL_OW 254
48354: PPUSH
48355: LD_INT 5
48357: PPUSH
48358: CALL_OW 272
48362: PUSH
48363: LD_VAR 0 17
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: PPUSH
48372: CALL_OW 251
48376: PPUSH
48377: LD_VAR 0 17
48381: PUSH
48382: LD_INT 1
48384: ARRAY
48385: PPUSH
48386: CALL_OW 254
48390: PPUSH
48391: LD_INT 5
48393: PPUSH
48394: CALL_OW 273
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48403: LD_VAR 0 16
48407: PUSH
48408: LD_INT 1
48410: ARRAY
48411: PPUSH
48412: LD_VAR 0 16
48416: PUSH
48417: LD_INT 2
48419: ARRAY
48420: PPUSH
48421: CALL_OW 488
48425: IFFALSE 48456
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48427: LD_VAR 0 13
48431: PPUSH
48432: LD_VAR 0 16
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: PPUSH
48441: LD_VAR 0 16
48445: PUSH
48446: LD_INT 2
48448: ARRAY
48449: PPUSH
48450: CALL_OW 111
// continue ;
48454: GO 47946
// end ; end ; r := GetDir ( tmp ) ;
48456: LD_ADDR_VAR 0 15
48460: PUSH
48461: LD_VAR 0 13
48465: PPUSH
48466: CALL_OW 254
48470: ST_TO_ADDR
// if r = 5 then
48471: LD_VAR 0 15
48475: PUSH
48476: LD_INT 5
48478: EQUAL
48479: IFFALSE 48489
// r := 0 ;
48481: LD_ADDR_VAR 0 15
48485: PUSH
48486: LD_INT 0
48488: ST_TO_ADDR
// for j = r to 5 do
48489: LD_ADDR_VAR 0 10
48493: PUSH
48494: DOUBLE
48495: LD_VAR 0 15
48499: DEC
48500: ST_TO_ADDR
48501: LD_INT 5
48503: PUSH
48504: FOR_TO
48505: IFFALSE 48619
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48507: LD_ADDR_VAR 0 11
48511: PUSH
48512: LD_VAR 0 13
48516: PPUSH
48517: CALL_OW 250
48521: PPUSH
48522: LD_VAR 0 10
48526: PPUSH
48527: LD_INT 2
48529: PPUSH
48530: CALL_OW 272
48534: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48535: LD_ADDR_VAR 0 12
48539: PUSH
48540: LD_VAR 0 13
48544: PPUSH
48545: CALL_OW 251
48549: PPUSH
48550: LD_VAR 0 10
48554: PPUSH
48555: LD_INT 2
48557: PPUSH
48558: CALL_OW 273
48562: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48563: LD_VAR 0 11
48567: PPUSH
48568: LD_VAR 0 12
48572: PPUSH
48573: CALL_OW 488
48577: PUSH
48578: LD_VAR 0 11
48582: PPUSH
48583: LD_VAR 0 12
48587: PPUSH
48588: CALL_OW 428
48592: NOT
48593: AND
48594: IFFALSE 48617
// begin ComMoveXY ( tmp , _x , _y ) ;
48596: LD_VAR 0 13
48600: PPUSH
48601: LD_VAR 0 11
48605: PPUSH
48606: LD_VAR 0 12
48610: PPUSH
48611: CALL_OW 111
// break ;
48615: GO 48619
// end ; end ;
48617: GO 48504
48619: POP
48620: POP
// end ; end ;
48621: GO 47946
48623: POP
48624: POP
// end ;
48625: LD_VAR 0 8
48629: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48630: LD_INT 0
48632: PPUSH
// result := true ;
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: LD_INT 1
48640: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48641: LD_VAR 0 2
48645: PUSH
48646: LD_INT 24
48648: DOUBLE
48649: EQUAL
48650: IFTRUE 48660
48652: LD_INT 33
48654: DOUBLE
48655: EQUAL
48656: IFTRUE 48660
48658: GO 48685
48660: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48661: LD_ADDR_VAR 0 3
48665: PUSH
48666: LD_INT 32
48668: PPUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 321
48678: PUSH
48679: LD_INT 2
48681: EQUAL
48682: ST_TO_ADDR
48683: GO 49005
48685: LD_INT 20
48687: DOUBLE
48688: EQUAL
48689: IFTRUE 48693
48691: GO 48718
48693: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48694: LD_ADDR_VAR 0 3
48698: PUSH
48699: LD_INT 6
48701: PPUSH
48702: LD_VAR 0 1
48706: PPUSH
48707: CALL_OW 321
48711: PUSH
48712: LD_INT 2
48714: EQUAL
48715: ST_TO_ADDR
48716: GO 49005
48718: LD_INT 22
48720: DOUBLE
48721: EQUAL
48722: IFTRUE 48732
48724: LD_INT 36
48726: DOUBLE
48727: EQUAL
48728: IFTRUE 48732
48730: GO 48757
48732: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48733: LD_ADDR_VAR 0 3
48737: PUSH
48738: LD_INT 15
48740: PPUSH
48741: LD_VAR 0 1
48745: PPUSH
48746: CALL_OW 321
48750: PUSH
48751: LD_INT 2
48753: EQUAL
48754: ST_TO_ADDR
48755: GO 49005
48757: LD_INT 30
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48765
48763: GO 48790
48765: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48766: LD_ADDR_VAR 0 3
48770: PUSH
48771: LD_INT 20
48773: PPUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: CALL_OW 321
48783: PUSH
48784: LD_INT 2
48786: EQUAL
48787: ST_TO_ADDR
48788: GO 49005
48790: LD_INT 28
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48804
48796: LD_INT 21
48798: DOUBLE
48799: EQUAL
48800: IFTRUE 48804
48802: GO 48829
48804: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48805: LD_ADDR_VAR 0 3
48809: PUSH
48810: LD_INT 21
48812: PPUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: CALL_OW 321
48822: PUSH
48823: LD_INT 2
48825: EQUAL
48826: ST_TO_ADDR
48827: GO 49005
48829: LD_INT 16
48831: DOUBLE
48832: EQUAL
48833: IFTRUE 48837
48835: GO 48864
48837: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48838: LD_ADDR_VAR 0 3
48842: PUSH
48843: LD_EXP 67
48847: PPUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 321
48857: PUSH
48858: LD_INT 2
48860: EQUAL
48861: ST_TO_ADDR
48862: GO 49005
48864: LD_INT 19
48866: DOUBLE
48867: EQUAL
48868: IFTRUE 48878
48870: LD_INT 23
48872: DOUBLE
48873: EQUAL
48874: IFTRUE 48878
48876: GO 48905
48878: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48879: LD_ADDR_VAR 0 3
48883: PUSH
48884: LD_EXP 66
48888: PPUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: CALL_OW 321
48898: PUSH
48899: LD_INT 2
48901: EQUAL
48902: ST_TO_ADDR
48903: GO 49005
48905: LD_INT 17
48907: DOUBLE
48908: EQUAL
48909: IFTRUE 48913
48911: GO 48938
48913: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48914: LD_ADDR_VAR 0 3
48918: PUSH
48919: LD_INT 39
48921: PPUSH
48922: LD_VAR 0 1
48926: PPUSH
48927: CALL_OW 321
48931: PUSH
48932: LD_INT 2
48934: EQUAL
48935: ST_TO_ADDR
48936: GO 49005
48938: LD_INT 18
48940: DOUBLE
48941: EQUAL
48942: IFTRUE 48946
48944: GO 48971
48946: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48947: LD_ADDR_VAR 0 3
48951: PUSH
48952: LD_INT 40
48954: PPUSH
48955: LD_VAR 0 1
48959: PPUSH
48960: CALL_OW 321
48964: PUSH
48965: LD_INT 2
48967: EQUAL
48968: ST_TO_ADDR
48969: GO 49005
48971: LD_INT 27
48973: DOUBLE
48974: EQUAL
48975: IFTRUE 48979
48977: GO 49004
48979: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48980: LD_ADDR_VAR 0 3
48984: PUSH
48985: LD_INT 35
48987: PPUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 321
48997: PUSH
48998: LD_INT 2
49000: EQUAL
49001: ST_TO_ADDR
49002: GO 49005
49004: POP
// end ;
49005: LD_VAR 0 3
49009: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49010: LD_INT 0
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
// result := false ;
49023: LD_ADDR_VAR 0 6
49027: PUSH
49028: LD_INT 0
49030: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49031: LD_VAR 0 1
49035: NOT
49036: PUSH
49037: LD_VAR 0 1
49041: PPUSH
49042: CALL_OW 266
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: IN
49057: NOT
49058: OR
49059: PUSH
49060: LD_VAR 0 2
49064: NOT
49065: OR
49066: PUSH
49067: LD_VAR 0 5
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: LD_INT 4
49086: PUSH
49087: LD_INT 5
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: IN
49098: NOT
49099: OR
49100: PUSH
49101: LD_VAR 0 3
49105: PPUSH
49106: LD_VAR 0 4
49110: PPUSH
49111: CALL_OW 488
49115: NOT
49116: OR
49117: IFFALSE 49121
// exit ;
49119: GO 49857
// side := GetSide ( depot ) ;
49121: LD_ADDR_VAR 0 9
49125: PUSH
49126: LD_VAR 0 1
49130: PPUSH
49131: CALL_OW 255
49135: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49136: LD_VAR 0 9
49140: PPUSH
49141: LD_VAR 0 2
49145: PPUSH
49146: CALL 48630 0 2
49150: NOT
49151: IFFALSE 49155
// exit ;
49153: GO 49857
// pom := GetBase ( depot ) ;
49155: LD_ADDR_VAR 0 10
49159: PUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: CALL_OW 274
49169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49170: LD_ADDR_VAR 0 11
49174: PUSH
49175: LD_VAR 0 2
49179: PPUSH
49180: LD_VAR 0 1
49184: PPUSH
49185: CALL_OW 248
49189: PPUSH
49190: CALL_OW 450
49194: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49195: LD_VAR 0 10
49199: PPUSH
49200: LD_INT 1
49202: PPUSH
49203: CALL_OW 275
49207: PUSH
49208: LD_VAR 0 11
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: GREATEREQUAL
49217: PUSH
49218: LD_VAR 0 10
49222: PPUSH
49223: LD_INT 2
49225: PPUSH
49226: CALL_OW 275
49230: PUSH
49231: LD_VAR 0 11
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: GREATEREQUAL
49240: AND
49241: PUSH
49242: LD_VAR 0 10
49246: PPUSH
49247: LD_INT 3
49249: PPUSH
49250: CALL_OW 275
49254: PUSH
49255: LD_VAR 0 11
49259: PUSH
49260: LD_INT 3
49262: ARRAY
49263: GREATEREQUAL
49264: AND
49265: NOT
49266: IFFALSE 49270
// exit ;
49268: GO 49857
// if GetBType ( depot ) = b_depot then
49270: LD_VAR 0 1
49274: PPUSH
49275: CALL_OW 266
49279: PUSH
49280: LD_INT 0
49282: EQUAL
49283: IFFALSE 49295
// dist := 28 else
49285: LD_ADDR_VAR 0 14
49289: PUSH
49290: LD_INT 28
49292: ST_TO_ADDR
49293: GO 49303
// dist := 36 ;
49295: LD_ADDR_VAR 0 14
49299: PUSH
49300: LD_INT 36
49302: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49303: LD_VAR 0 1
49307: PPUSH
49308: LD_VAR 0 3
49312: PPUSH
49313: LD_VAR 0 4
49317: PPUSH
49318: CALL_OW 297
49322: PUSH
49323: LD_VAR 0 14
49327: GREATER
49328: IFFALSE 49332
// exit ;
49330: GO 49857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49332: LD_ADDR_VAR 0 12
49336: PUSH
49337: LD_VAR 0 2
49341: PPUSH
49342: LD_VAR 0 3
49346: PPUSH
49347: LD_VAR 0 4
49351: PPUSH
49352: LD_VAR 0 5
49356: PPUSH
49357: LD_VAR 0 1
49361: PPUSH
49362: CALL_OW 248
49366: PPUSH
49367: LD_INT 0
49369: PPUSH
49370: CALL 49862 0 6
49374: ST_TO_ADDR
// if not hexes then
49375: LD_VAR 0 12
49379: NOT
49380: IFFALSE 49384
// exit ;
49382: GO 49857
// hex := GetHexInfo ( x , y ) ;
49384: LD_ADDR_VAR 0 15
49388: PUSH
49389: LD_VAR 0 3
49393: PPUSH
49394: LD_VAR 0 4
49398: PPUSH
49399: CALL_OW 546
49403: ST_TO_ADDR
// if hex [ 1 ] then
49404: LD_VAR 0 15
49408: PUSH
49409: LD_INT 1
49411: ARRAY
49412: IFFALSE 49416
// exit ;
49414: GO 49857
// height := hex [ 2 ] ;
49416: LD_ADDR_VAR 0 13
49420: PUSH
49421: LD_VAR 0 15
49425: PUSH
49426: LD_INT 2
49428: ARRAY
49429: ST_TO_ADDR
// for i = 1 to hexes do
49430: LD_ADDR_VAR 0 7
49434: PUSH
49435: DOUBLE
49436: LD_INT 1
49438: DEC
49439: ST_TO_ADDR
49440: LD_VAR 0 12
49444: PUSH
49445: FOR_TO
49446: IFFALSE 49776
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49448: LD_VAR 0 12
49452: PUSH
49453: LD_VAR 0 7
49457: ARRAY
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 12
49467: PUSH
49468: LD_VAR 0 7
49472: ARRAY
49473: PUSH
49474: LD_INT 2
49476: ARRAY
49477: PPUSH
49478: CALL_OW 488
49482: NOT
49483: PUSH
49484: LD_VAR 0 12
49488: PUSH
49489: LD_VAR 0 7
49493: ARRAY
49494: PUSH
49495: LD_INT 1
49497: ARRAY
49498: PPUSH
49499: LD_VAR 0 12
49503: PUSH
49504: LD_VAR 0 7
49508: ARRAY
49509: PUSH
49510: LD_INT 2
49512: ARRAY
49513: PPUSH
49514: CALL_OW 428
49518: PUSH
49519: LD_INT 0
49521: GREATER
49522: OR
49523: PUSH
49524: LD_VAR 0 12
49528: PUSH
49529: LD_VAR 0 7
49533: ARRAY
49534: PUSH
49535: LD_INT 1
49537: ARRAY
49538: PPUSH
49539: LD_VAR 0 12
49543: PUSH
49544: LD_VAR 0 7
49548: ARRAY
49549: PUSH
49550: LD_INT 2
49552: ARRAY
49553: PPUSH
49554: CALL_OW 351
49558: OR
49559: IFFALSE 49565
// exit ;
49561: POP
49562: POP
49563: GO 49857
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49565: LD_ADDR_VAR 0 8
49569: PUSH
49570: LD_VAR 0 12
49574: PUSH
49575: LD_VAR 0 7
49579: ARRAY
49580: PUSH
49581: LD_INT 1
49583: ARRAY
49584: PPUSH
49585: LD_VAR 0 12
49589: PUSH
49590: LD_VAR 0 7
49594: ARRAY
49595: PUSH
49596: LD_INT 2
49598: ARRAY
49599: PPUSH
49600: CALL_OW 546
49604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49605: LD_VAR 0 8
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: PUSH
49614: LD_VAR 0 8
49618: PUSH
49619: LD_INT 2
49621: ARRAY
49622: PUSH
49623: LD_VAR 0 13
49627: PUSH
49628: LD_INT 2
49630: PLUS
49631: GREATER
49632: OR
49633: PUSH
49634: LD_VAR 0 8
49638: PUSH
49639: LD_INT 2
49641: ARRAY
49642: PUSH
49643: LD_VAR 0 13
49647: PUSH
49648: LD_INT 2
49650: MINUS
49651: LESS
49652: OR
49653: PUSH
49654: LD_VAR 0 8
49658: PUSH
49659: LD_INT 3
49661: ARRAY
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 8
49668: PUSH
49669: LD_INT 9
49671: PUSH
49672: LD_INT 10
49674: PUSH
49675: LD_INT 11
49677: PUSH
49678: LD_INT 12
49680: PUSH
49681: LD_INT 13
49683: PUSH
49684: LD_INT 16
49686: PUSH
49687: LD_INT 17
49689: PUSH
49690: LD_INT 18
49692: PUSH
49693: LD_INT 19
49695: PUSH
49696: LD_INT 20
49698: PUSH
49699: LD_INT 21
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: IN
49717: NOT
49718: OR
49719: PUSH
49720: LD_VAR 0 8
49724: PUSH
49725: LD_INT 5
49727: ARRAY
49728: NOT
49729: OR
49730: PUSH
49731: LD_VAR 0 8
49735: PUSH
49736: LD_INT 6
49738: ARRAY
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 7
49748: PUSH
49749: LD_INT 9
49751: PUSH
49752: LD_INT 10
49754: PUSH
49755: LD_INT 11
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: IN
49766: NOT
49767: OR
49768: IFFALSE 49774
// exit ;
49770: POP
49771: POP
49772: GO 49857
// end ;
49774: GO 49445
49776: POP
49777: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49778: LD_VAR 0 9
49782: PPUSH
49783: LD_VAR 0 3
49787: PPUSH
49788: LD_VAR 0 4
49792: PPUSH
49793: LD_INT 20
49795: PPUSH
49796: CALL 41802 0 4
49800: PUSH
49801: LD_INT 4
49803: ARRAY
49804: IFFALSE 49808
// exit ;
49806: GO 49857
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49808: LD_VAR 0 2
49812: PUSH
49813: LD_INT 29
49815: PUSH
49816: LD_INT 30
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: IN
49823: PUSH
49824: LD_VAR 0 3
49828: PPUSH
49829: LD_VAR 0 4
49833: PPUSH
49834: LD_VAR 0 9
49838: PPUSH
49839: CALL_OW 440
49843: NOT
49844: AND
49845: IFFALSE 49849
// exit ;
49847: GO 49857
// result := true ;
49849: LD_ADDR_VAR 0 6
49853: PUSH
49854: LD_INT 1
49856: ST_TO_ADDR
// end ;
49857: LD_VAR 0 6
49861: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49862: LD_INT 0
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
// result = [ ] ;
49922: LD_ADDR_VAR 0 7
49926: PUSH
49927: EMPTY
49928: ST_TO_ADDR
// temp_list = [ ] ;
49929: LD_ADDR_VAR 0 9
49933: PUSH
49934: EMPTY
49935: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49936: LD_VAR 0 4
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 4
49955: PUSH
49956: LD_INT 5
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: IN
49967: NOT
49968: PUSH
49969: LD_VAR 0 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: IN
49984: PUSH
49985: LD_VAR 0 5
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: IN
50004: NOT
50005: AND
50006: OR
50007: IFFALSE 50011
// exit ;
50009: GO 68402
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50011: LD_VAR 0 1
50015: PUSH
50016: LD_INT 6
50018: PUSH
50019: LD_INT 7
50021: PUSH
50022: LD_INT 8
50024: PUSH
50025: LD_INT 13
50027: PUSH
50028: LD_INT 12
50030: PUSH
50031: LD_INT 15
50033: PUSH
50034: LD_INT 11
50036: PUSH
50037: LD_INT 14
50039: PUSH
50040: LD_INT 10
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: IN
50054: IFFALSE 50064
// btype = b_lab ;
50056: LD_ADDR_VAR 0 1
50060: PUSH
50061: LD_INT 6
50063: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50064: LD_VAR 0 6
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: IN
50083: NOT
50084: PUSH
50085: LD_VAR 0 1
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 6
50104: PUSH
50105: LD_INT 36
50107: PUSH
50108: LD_INT 4
50110: PUSH
50111: LD_INT 5
50113: PUSH
50114: LD_INT 31
50116: PUSH
50117: LD_INT 32
50119: PUSH
50120: LD_INT 33
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: IN
50136: NOT
50137: PUSH
50138: LD_VAR 0 6
50142: PUSH
50143: LD_INT 1
50145: EQUAL
50146: AND
50147: OR
50148: PUSH
50149: LD_VAR 0 1
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: IN
50164: NOT
50165: PUSH
50166: LD_VAR 0 6
50170: PUSH
50171: LD_INT 2
50173: EQUAL
50174: AND
50175: OR
50176: IFFALSE 50186
// mode = 0 ;
50178: LD_ADDR_VAR 0 6
50182: PUSH
50183: LD_INT 0
50185: ST_TO_ADDR
// case mode of 0 :
50186: LD_VAR 0 6
50190: PUSH
50191: LD_INT 0
50193: DOUBLE
50194: EQUAL
50195: IFTRUE 50199
50197: GO 61652
50199: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50200: LD_ADDR_VAR 0 11
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50393: LD_ADDR_VAR 0 12
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50589: LD_ADDR_VAR 0 13
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50788: LD_ADDR_VAR 0 14
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50984: LD_ADDR_VAR 0 15
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51177: LD_ADDR_VAR 0 16
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51370: LD_ADDR_VAR 0 17
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51600: LD_ADDR_VAR 0 18
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51830: LD_ADDR_VAR 0 19
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52060: LD_ADDR_VAR 0 20
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52290: LD_ADDR_VAR 0 21
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52520: LD_ADDR_VAR 0 22
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52750: LD_ADDR_VAR 0 23
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53030: LD_ADDR_VAR 0 24
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53306: LD_ADDR_VAR 0 25
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53580: LD_ADDR_VAR 0 26
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53856: LD_ADDR_VAR 0 27
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54136: LD_ADDR_VAR 0 28
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 3
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54418: LD_ADDR_VAR 0 29
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54697: LD_ADDR_VAR 0 30
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54975: LD_ADDR_VAR 0 31
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55253: LD_ADDR_VAR 0 32
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55531: LD_ADDR_VAR 0 33
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55810: LD_ADDR_VAR 0 34
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56090: LD_ADDR_VAR 0 35
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56202: LD_ADDR_VAR 0 36
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56314: LD_ADDR_VAR 0 37
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56426: LD_ADDR_VAR 0 38
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56538: LD_ADDR_VAR 0 39
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56650: LD_ADDR_VAR 0 40
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56762: LD_ADDR_VAR 0 41
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57112: LD_ADDR_VAR 0 42
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: NEG
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57462: LD_ADDR_VAR 0 43
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57810: LD_ADDR_VAR 0 44
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58160: LD_ADDR_VAR 0 45
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 3
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58510: LD_ADDR_VAR 0 46
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58858: LD_ADDR_VAR 0 47
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59009: LD_ADDR_VAR 0 48
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59156: LD_ADDR_VAR 0 49
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59300: LD_ADDR_VAR 0 50
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59444: LD_ADDR_VAR 0 51
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59591: LD_ADDR_VAR 0 52
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59742: LD_ADDR_VAR 0 53
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59972: LD_ADDR_VAR 0 54
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60202: LD_ADDR_VAR 0 55
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60432: LD_ADDR_VAR 0 56
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60662: LD_ADDR_VAR 0 57
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60892: LD_ADDR_VAR 0 58
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61122: LD_ADDR_VAR 0 59
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61210: LD_ADDR_VAR 0 60
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61298: LD_ADDR_VAR 0 61
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61386: LD_ADDR_VAR 0 62
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61474: LD_ADDR_VAR 0 63
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61562: LD_ADDR_VAR 0 64
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// end ; 1 :
61650: GO 67547
61652: LD_INT 1
61654: DOUBLE
61655: EQUAL
61656: IFTRUE 61660
61658: GO 64283
61660: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61661: LD_ADDR_VAR 0 11
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61705: LD_ADDR_VAR 0 12
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61746: LD_ADDR_VAR 0 13
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61786: LD_ADDR_VAR 0 14
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61827: LD_ADDR_VAR 0 15
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61871: LD_ADDR_VAR 0 16
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61917: LD_ADDR_VAR 0 17
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 3
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61961: LD_ADDR_VAR 0 18
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62002: LD_ADDR_VAR 0 19
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62042: LD_ADDR_VAR 0 20
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62083: LD_ADDR_VAR 0 21
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 3
62101: NEG
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62127: LD_ADDR_VAR 0 22
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62173: LD_ADDR_VAR 0 23
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 4
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62217: LD_ADDR_VAR 0 24
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 4
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62258: LD_ADDR_VAR 0 25
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 3
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 4
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62298: LD_ADDR_VAR 0 26
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 4
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62339: LD_ADDR_VAR 0 27
62343: PUSH
62344: LD_INT 3
62346: NEG
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: NEG
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 4
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62383: LD_ADDR_VAR 0 28
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 4
62414: NEG
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: LIST
62428: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62429: LD_ADDR_VAR 0 29
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 3
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 4
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 5
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 5
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 6
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 6
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 5
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62584: LD_ADDR_VAR 0 30
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 4
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 4
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 5
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 5
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 5
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 6
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 6
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62727: LD_ADDR_VAR 0 31
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 4
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 4
62774: PUSH
62775: LD_INT 4
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 5
62794: PUSH
62795: LD_INT 4
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: LD_INT 5
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 4
62814: PUSH
62815: LD_INT 5
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 6
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 6
62834: PUSH
62835: LD_INT 6
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 5
62844: PUSH
62845: LD_INT 6
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62866: LD_ADDR_VAR 0 32
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 4
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 4
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: LD_INT 5
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 5
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: LD_INT 4
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 6
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 6
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 5
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63009: LD_ADDR_VAR 0 33
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 4
63061: NEG
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 4
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 4
63084: NEG
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 5
63095: NEG
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 5
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 6
63129: NEG
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 6
63140: NEG
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63164: LD_ADDR_VAR 0 34
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: NEG
63208: PUSH
63209: LD_INT 4
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 4
63219: NEG
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 4
63231: NEG
63232: PUSH
63233: LD_INT 4
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 4
63243: NEG
63244: PUSH
63245: LD_INT 5
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 5
63255: NEG
63256: PUSH
63257: LD_INT 4
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 5
63267: NEG
63268: PUSH
63269: LD_INT 5
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 5
63279: NEG
63280: PUSH
63281: LD_INT 6
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 6
63291: NEG
63292: PUSH
63293: LD_INT 5
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 6
63303: NEG
63304: PUSH
63305: LD_INT 6
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63327: LD_ADDR_VAR 0 41
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63371: LD_ADDR_VAR 0 42
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63412: LD_ADDR_VAR 0 43
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63452: LD_ADDR_VAR 0 44
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 3
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63493: LD_ADDR_VAR 0 45
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63537: LD_ADDR_VAR 0 46
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: NEG
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: LD_INT 2
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63583: LD_ADDR_VAR 0 47
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 3
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63616: LD_ADDR_VAR 0 48
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63647: LD_ADDR_VAR 0 49
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63676: LD_ADDR_VAR 0 50
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63705: LD_ADDR_VAR 0 51
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63736: LD_ADDR_VAR 0 52
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63769: LD_ADDR_VAR 0 53
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 3
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63813: LD_ADDR_VAR 0 54
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 3
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63854: LD_ADDR_VAR 0 55
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63894: LD_ADDR_VAR 0 56
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63935: LD_ADDR_VAR 0 57
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 3
63953: NEG
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63979: LD_ADDR_VAR 0 58
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: LD_INT 3
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64025: LD_ADDR_VAR 0 59
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64069: LD_ADDR_VAR 0 60
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64110: LD_ADDR_VAR 0 61
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64150: LD_ADDR_VAR 0 62
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64191: LD_ADDR_VAR 0 63
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64235: LD_ADDR_VAR 0 64
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// end ; 2 :
64281: GO 67547
64283: LD_INT 2
64285: DOUBLE
64286: EQUAL
64287: IFTRUE 64291
64289: GO 67546
64291: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64292: LD_ADDR_VAR 0 29
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 4
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 5
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 5
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 4
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 3
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 3
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 3
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 5
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: LD_INT 3
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 4
64422: PUSH
64423: LD_INT 4
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 3
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 4
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 4
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: LD_INT 4
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 5
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: LD_INT 5
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 2
64564: NEG
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: NEG
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: NEG
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 3
64620: NEG
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 4
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 4
64654: NEG
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: NEG
64690: PUSH
64691: LD_INT 5
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 4
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: LD_INT 3
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 4
64725: NEG
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 5
64737: NEG
64738: PUSH
64739: LD_INT 4
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 5
64749: NEG
64750: PUSH
64751: LD_INT 5
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: LD_INT 5
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 5
64773: NEG
64774: PUSH
64775: LD_INT 3
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64830: LD_ADDR_VAR 0 30
64834: PUSH
64835: LD_INT 4
64837: PUSH
64838: LD_INT 4
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 4
64847: PUSH
64848: LD_INT 3
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 5
64857: PUSH
64858: LD_INT 4
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 5
64867: PUSH
64868: LD_INT 5
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 4
64877: PUSH
64878: LD_INT 5
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: LD_INT 4
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 5
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: LD_INT 5
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 4
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 4
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 2
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 4
65020: NEG
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 4
65031: NEG
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: NEG
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 4
65065: NEG
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 5
65076: NEG
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 5
65087: NEG
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 5
65099: NEG
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 3
65111: NEG
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: LD_INT 3
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: LD_INT 4
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: LD_INT 3
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 4
65194: NEG
65195: PUSH
65196: LD_INT 4
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 4
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 4
65218: NEG
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 4
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 5
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 4
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 4
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 5
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 2
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: NEG
65321: PUSH
65322: LD_INT 5
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65377: LD_ADDR_VAR 0 31
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: LD_INT 4
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 5
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 5
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 5
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 3
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 3
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 4
65533: NEG
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 4
65544: NEG
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: NEG
65557: PUSH
65558: LD_INT 2
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 4
65579: NEG
65580: PUSH
65581: LD_INT 4
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 5
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: LD_INT 4
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 4
65627: NEG
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 5
65639: NEG
65640: PUSH
65641: LD_INT 4
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 5
65651: NEG
65652: PUSH
65653: LD_INT 5
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: NEG
65664: PUSH
65665: LD_INT 5
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 5
65675: NEG
65676: PUSH
65677: LD_INT 3
65679: NEG
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 4
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 3
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: LD_INT 3
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 4
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 2
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 5
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 5
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 4
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 5
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65927: LD_ADDR_VAR 0 32
65931: PUSH
65932: LD_INT 4
65934: NEG
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 4
65945: NEG
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 3
65968: NEG
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 4
65979: NEG
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 5
65990: NEG
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 5
66001: NEG
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 5
66013: NEG
66014: PUSH
66015: LD_INT 2
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 3
66025: NEG
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: NEG
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: NEG
66049: PUSH
66050: LD_INT 4
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: LD_INT 3
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: LD_INT 2
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 4
66096: NEG
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 4
66108: NEG
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: LD_INT 4
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 4
66132: NEG
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 4
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 5
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 4
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: LD_INT 3
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 4
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 5
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: LD_INT 5
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 3
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 4
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 4
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 2
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: PUSH
66340: LD_INT 4
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 5
66359: PUSH
66360: LD_INT 4
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 5
66369: PUSH
66370: LD_INT 5
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: LD_INT 5
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: LD_INT 4
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: LD_INT 5
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66474: LD_ADDR_VAR 0 33
66478: PUSH
66479: LD_INT 4
66481: NEG
66482: PUSH
66483: LD_INT 4
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 4
66493: NEG
66494: PUSH
66495: LD_INT 5
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 3
66505: NEG
66506: PUSH
66507: LD_INT 4
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 3
66517: NEG
66518: PUSH
66519: LD_INT 3
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 4
66529: NEG
66530: PUSH
66531: LD_INT 3
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 5
66541: NEG
66542: PUSH
66543: LD_INT 4
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 5
66553: NEG
66554: PUSH
66555: LD_INT 5
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 3
66565: NEG
66566: PUSH
66567: LD_INT 5
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 5
66577: NEG
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 3
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 4
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: LD_INT 3
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 2
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: LD_INT 4
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 4
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 4
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 5
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 5
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 3
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 5
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 4
66814: PUSH
66815: LD_INT 4
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: LD_INT 4
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: LD_INT 2
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 3
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: LD_INT 5
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 5
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67012: LD_ADDR_VAR 0 34
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 4
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 5
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 4
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 4
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 5
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: LD_INT 5
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 3
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 4
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 2
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: PUSH
67205: LD_INT 2
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 4
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 4
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 5
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 5
67244: PUSH
67245: LD_INT 5
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: LD_INT 5
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: LD_INT 4
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 3
67294: PUSH
67295: LD_INT 5
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 3
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 4
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 4
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 3
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 4
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 4
67397: NEG
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 4
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 5
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 5
67476: NEG
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// end ; end ;
67544: GO 67547
67546: POP
// case btype of b_depot , b_warehouse :
67547: LD_VAR 0 1
67551: PUSH
67552: LD_INT 0
67554: DOUBLE
67555: EQUAL
67556: IFTRUE 67566
67558: LD_INT 1
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67566
67564: GO 67767
67566: POP
// case nation of nation_american :
67567: LD_VAR 0 5
67571: PUSH
67572: LD_INT 1
67574: DOUBLE
67575: EQUAL
67576: IFTRUE 67580
67578: GO 67636
67580: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67581: LD_ADDR_VAR 0 9
67585: PUSH
67586: LD_VAR 0 11
67590: PUSH
67591: LD_VAR 0 12
67595: PUSH
67596: LD_VAR 0 13
67600: PUSH
67601: LD_VAR 0 14
67605: PUSH
67606: LD_VAR 0 15
67610: PUSH
67611: LD_VAR 0 16
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: PUSH
67624: LD_VAR 0 4
67628: PUSH
67629: LD_INT 1
67631: PLUS
67632: ARRAY
67633: ST_TO_ADDR
67634: GO 67765
67636: LD_INT 2
67638: DOUBLE
67639: EQUAL
67640: IFTRUE 67644
67642: GO 67700
67644: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67645: LD_ADDR_VAR 0 9
67649: PUSH
67650: LD_VAR 0 17
67654: PUSH
67655: LD_VAR 0 18
67659: PUSH
67660: LD_VAR 0 19
67664: PUSH
67665: LD_VAR 0 20
67669: PUSH
67670: LD_VAR 0 21
67674: PUSH
67675: LD_VAR 0 22
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: PUSH
67688: LD_VAR 0 4
67692: PUSH
67693: LD_INT 1
67695: PLUS
67696: ARRAY
67697: ST_TO_ADDR
67698: GO 67765
67700: LD_INT 3
67702: DOUBLE
67703: EQUAL
67704: IFTRUE 67708
67706: GO 67764
67708: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67709: LD_ADDR_VAR 0 9
67713: PUSH
67714: LD_VAR 0 23
67718: PUSH
67719: LD_VAR 0 24
67723: PUSH
67724: LD_VAR 0 25
67728: PUSH
67729: LD_VAR 0 26
67733: PUSH
67734: LD_VAR 0 27
67738: PUSH
67739: LD_VAR 0 28
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: PUSH
67752: LD_VAR 0 4
67756: PUSH
67757: LD_INT 1
67759: PLUS
67760: ARRAY
67761: ST_TO_ADDR
67762: GO 67765
67764: POP
67765: GO 68320
67767: LD_INT 2
67769: DOUBLE
67770: EQUAL
67771: IFTRUE 67781
67773: LD_INT 3
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67781
67779: GO 67837
67781: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67782: LD_ADDR_VAR 0 9
67786: PUSH
67787: LD_VAR 0 29
67791: PUSH
67792: LD_VAR 0 30
67796: PUSH
67797: LD_VAR 0 31
67801: PUSH
67802: LD_VAR 0 32
67806: PUSH
67807: LD_VAR 0 33
67811: PUSH
67812: LD_VAR 0 34
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: PUSH
67825: LD_VAR 0 4
67829: PUSH
67830: LD_INT 1
67832: PLUS
67833: ARRAY
67834: ST_TO_ADDR
67835: GO 68320
67837: LD_INT 16
67839: DOUBLE
67840: EQUAL
67841: IFTRUE 67899
67843: LD_INT 17
67845: DOUBLE
67846: EQUAL
67847: IFTRUE 67899
67849: LD_INT 18
67851: DOUBLE
67852: EQUAL
67853: IFTRUE 67899
67855: LD_INT 19
67857: DOUBLE
67858: EQUAL
67859: IFTRUE 67899
67861: LD_INT 22
67863: DOUBLE
67864: EQUAL
67865: IFTRUE 67899
67867: LD_INT 20
67869: DOUBLE
67870: EQUAL
67871: IFTRUE 67899
67873: LD_INT 21
67875: DOUBLE
67876: EQUAL
67877: IFTRUE 67899
67879: LD_INT 23
67881: DOUBLE
67882: EQUAL
67883: IFTRUE 67899
67885: LD_INT 24
67887: DOUBLE
67888: EQUAL
67889: IFTRUE 67899
67891: LD_INT 25
67893: DOUBLE
67894: EQUAL
67895: IFTRUE 67899
67897: GO 67955
67899: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67900: LD_ADDR_VAR 0 9
67904: PUSH
67905: LD_VAR 0 35
67909: PUSH
67910: LD_VAR 0 36
67914: PUSH
67915: LD_VAR 0 37
67919: PUSH
67920: LD_VAR 0 38
67924: PUSH
67925: LD_VAR 0 39
67929: PUSH
67930: LD_VAR 0 40
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: PUSH
67943: LD_VAR 0 4
67947: PUSH
67948: LD_INT 1
67950: PLUS
67951: ARRAY
67952: ST_TO_ADDR
67953: GO 68320
67955: LD_INT 6
67957: DOUBLE
67958: EQUAL
67959: IFTRUE 68011
67961: LD_INT 7
67963: DOUBLE
67964: EQUAL
67965: IFTRUE 68011
67967: LD_INT 8
67969: DOUBLE
67970: EQUAL
67971: IFTRUE 68011
67973: LD_INT 13
67975: DOUBLE
67976: EQUAL
67977: IFTRUE 68011
67979: LD_INT 12
67981: DOUBLE
67982: EQUAL
67983: IFTRUE 68011
67985: LD_INT 15
67987: DOUBLE
67988: EQUAL
67989: IFTRUE 68011
67991: LD_INT 11
67993: DOUBLE
67994: EQUAL
67995: IFTRUE 68011
67997: LD_INT 14
67999: DOUBLE
68000: EQUAL
68001: IFTRUE 68011
68003: LD_INT 10
68005: DOUBLE
68006: EQUAL
68007: IFTRUE 68011
68009: GO 68067
68011: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68012: LD_ADDR_VAR 0 9
68016: PUSH
68017: LD_VAR 0 41
68021: PUSH
68022: LD_VAR 0 42
68026: PUSH
68027: LD_VAR 0 43
68031: PUSH
68032: LD_VAR 0 44
68036: PUSH
68037: LD_VAR 0 45
68041: PUSH
68042: LD_VAR 0 46
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: PUSH
68055: LD_VAR 0 4
68059: PUSH
68060: LD_INT 1
68062: PLUS
68063: ARRAY
68064: ST_TO_ADDR
68065: GO 68320
68067: LD_INT 36
68069: DOUBLE
68070: EQUAL
68071: IFTRUE 68075
68073: GO 68131
68075: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68076: LD_ADDR_VAR 0 9
68080: PUSH
68081: LD_VAR 0 47
68085: PUSH
68086: LD_VAR 0 48
68090: PUSH
68091: LD_VAR 0 49
68095: PUSH
68096: LD_VAR 0 50
68100: PUSH
68101: LD_VAR 0 51
68105: PUSH
68106: LD_VAR 0 52
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: PUSH
68119: LD_VAR 0 4
68123: PUSH
68124: LD_INT 1
68126: PLUS
68127: ARRAY
68128: ST_TO_ADDR
68129: GO 68320
68131: LD_INT 4
68133: DOUBLE
68134: EQUAL
68135: IFTRUE 68157
68137: LD_INT 5
68139: DOUBLE
68140: EQUAL
68141: IFTRUE 68157
68143: LD_INT 34
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68157
68149: LD_INT 37
68151: DOUBLE
68152: EQUAL
68153: IFTRUE 68157
68155: GO 68213
68157: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68158: LD_ADDR_VAR 0 9
68162: PUSH
68163: LD_VAR 0 53
68167: PUSH
68168: LD_VAR 0 54
68172: PUSH
68173: LD_VAR 0 55
68177: PUSH
68178: LD_VAR 0 56
68182: PUSH
68183: LD_VAR 0 57
68187: PUSH
68188: LD_VAR 0 58
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: PUSH
68201: LD_VAR 0 4
68205: PUSH
68206: LD_INT 1
68208: PLUS
68209: ARRAY
68210: ST_TO_ADDR
68211: GO 68320
68213: LD_INT 31
68215: DOUBLE
68216: EQUAL
68217: IFTRUE 68263
68219: LD_INT 32
68221: DOUBLE
68222: EQUAL
68223: IFTRUE 68263
68225: LD_INT 33
68227: DOUBLE
68228: EQUAL
68229: IFTRUE 68263
68231: LD_INT 27
68233: DOUBLE
68234: EQUAL
68235: IFTRUE 68263
68237: LD_INT 26
68239: DOUBLE
68240: EQUAL
68241: IFTRUE 68263
68243: LD_INT 28
68245: DOUBLE
68246: EQUAL
68247: IFTRUE 68263
68249: LD_INT 29
68251: DOUBLE
68252: EQUAL
68253: IFTRUE 68263
68255: LD_INT 30
68257: DOUBLE
68258: EQUAL
68259: IFTRUE 68263
68261: GO 68319
68263: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68264: LD_ADDR_VAR 0 9
68268: PUSH
68269: LD_VAR 0 59
68273: PUSH
68274: LD_VAR 0 60
68278: PUSH
68279: LD_VAR 0 61
68283: PUSH
68284: LD_VAR 0 62
68288: PUSH
68289: LD_VAR 0 63
68293: PUSH
68294: LD_VAR 0 64
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: PUSH
68307: LD_VAR 0 4
68311: PUSH
68312: LD_INT 1
68314: PLUS
68315: ARRAY
68316: ST_TO_ADDR
68317: GO 68320
68319: POP
// temp_list2 = [ ] ;
68320: LD_ADDR_VAR 0 10
68324: PUSH
68325: EMPTY
68326: ST_TO_ADDR
// for i in temp_list do
68327: LD_ADDR_VAR 0 8
68331: PUSH
68332: LD_VAR 0 9
68336: PUSH
68337: FOR_IN
68338: IFFALSE 68390
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68340: LD_ADDR_VAR 0 10
68344: PUSH
68345: LD_VAR 0 10
68349: PUSH
68350: LD_VAR 0 8
68354: PUSH
68355: LD_INT 1
68357: ARRAY
68358: PUSH
68359: LD_VAR 0 2
68363: PLUS
68364: PUSH
68365: LD_VAR 0 8
68369: PUSH
68370: LD_INT 2
68372: ARRAY
68373: PUSH
68374: LD_VAR 0 3
68378: PLUS
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: EMPTY
68385: LIST
68386: ADD
68387: ST_TO_ADDR
68388: GO 68337
68390: POP
68391: POP
// result = temp_list2 ;
68392: LD_ADDR_VAR 0 7
68396: PUSH
68397: LD_VAR 0 10
68401: ST_TO_ADDR
// end ;
68402: LD_VAR 0 7
68406: RET
// export function EnemyInRange ( unit , dist ) ; begin
68407: LD_INT 0
68409: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68410: LD_ADDR_VAR 0 3
68414: PUSH
68415: LD_VAR 0 1
68419: PPUSH
68420: CALL_OW 255
68424: PPUSH
68425: LD_VAR 0 1
68429: PPUSH
68430: CALL_OW 250
68434: PPUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: CALL_OW 251
68444: PPUSH
68445: LD_VAR 0 2
68449: PPUSH
68450: CALL 41802 0 4
68454: PUSH
68455: LD_INT 4
68457: ARRAY
68458: ST_TO_ADDR
// end ;
68459: LD_VAR 0 3
68463: RET
// export function PlayerSeeMe ( unit ) ; begin
68464: LD_INT 0
68466: PPUSH
// result := See ( your_side , unit ) ;
68467: LD_ADDR_VAR 0 2
68471: PUSH
68472: LD_OWVAR 2
68476: PPUSH
68477: LD_VAR 0 1
68481: PPUSH
68482: CALL_OW 292
68486: ST_TO_ADDR
// end ;
68487: LD_VAR 0 2
68491: RET
// export function ReverseDir ( unit ) ; begin
68492: LD_INT 0
68494: PPUSH
// if not unit then
68495: LD_VAR 0 1
68499: NOT
68500: IFFALSE 68504
// exit ;
68502: GO 68527
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68504: LD_ADDR_VAR 0 2
68508: PUSH
68509: LD_VAR 0 1
68513: PPUSH
68514: CALL_OW 254
68518: PUSH
68519: LD_INT 3
68521: PLUS
68522: PUSH
68523: LD_INT 6
68525: MOD
68526: ST_TO_ADDR
// end ;
68527: LD_VAR 0 2
68531: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68532: LD_INT 0
68534: PPUSH
68535: PPUSH
68536: PPUSH
68537: PPUSH
68538: PPUSH
// if not hexes then
68539: LD_VAR 0 2
68543: NOT
68544: IFFALSE 68548
// exit ;
68546: GO 68696
// dist := 9999 ;
68548: LD_ADDR_VAR 0 5
68552: PUSH
68553: LD_INT 9999
68555: ST_TO_ADDR
// for i = 1 to hexes do
68556: LD_ADDR_VAR 0 4
68560: PUSH
68561: DOUBLE
68562: LD_INT 1
68564: DEC
68565: ST_TO_ADDR
68566: LD_VAR 0 2
68570: PUSH
68571: FOR_TO
68572: IFFALSE 68684
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68574: LD_VAR 0 1
68578: PPUSH
68579: LD_VAR 0 2
68583: PUSH
68584: LD_VAR 0 4
68588: ARRAY
68589: PUSH
68590: LD_INT 1
68592: ARRAY
68593: PPUSH
68594: LD_VAR 0 2
68598: PUSH
68599: LD_VAR 0 4
68603: ARRAY
68604: PUSH
68605: LD_INT 2
68607: ARRAY
68608: PPUSH
68609: CALL_OW 297
68613: PUSH
68614: LD_VAR 0 5
68618: LESS
68619: IFFALSE 68682
// begin hex := hexes [ i ] ;
68621: LD_ADDR_VAR 0 7
68625: PUSH
68626: LD_VAR 0 2
68630: PUSH
68631: LD_VAR 0 4
68635: ARRAY
68636: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68637: LD_ADDR_VAR 0 5
68641: PUSH
68642: LD_VAR 0 1
68646: PPUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_VAR 0 4
68656: ARRAY
68657: PUSH
68658: LD_INT 1
68660: ARRAY
68661: PPUSH
68662: LD_VAR 0 2
68666: PUSH
68667: LD_VAR 0 4
68671: ARRAY
68672: PUSH
68673: LD_INT 2
68675: ARRAY
68676: PPUSH
68677: CALL_OW 297
68681: ST_TO_ADDR
// end ; end ;
68682: GO 68571
68684: POP
68685: POP
// result := hex ;
68686: LD_ADDR_VAR 0 3
68690: PUSH
68691: LD_VAR 0 7
68695: ST_TO_ADDR
// end ;
68696: LD_VAR 0 3
68700: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68701: LD_INT 0
68703: PPUSH
68704: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68705: LD_VAR 0 1
68709: NOT
68710: PUSH
68711: LD_VAR 0 1
68715: PUSH
68716: LD_INT 21
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 23
68728: PUSH
68729: LD_INT 2
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PPUSH
68740: CALL_OW 69
68744: IN
68745: NOT
68746: OR
68747: IFFALSE 68751
// exit ;
68749: GO 68798
// for i = 1 to 3 do
68751: LD_ADDR_VAR 0 3
68755: PUSH
68756: DOUBLE
68757: LD_INT 1
68759: DEC
68760: ST_TO_ADDR
68761: LD_INT 3
68763: PUSH
68764: FOR_TO
68765: IFFALSE 68796
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68767: LD_VAR 0 1
68771: PPUSH
68772: CALL_OW 250
68776: PPUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: CALL_OW 251
68786: PPUSH
68787: LD_INT 1
68789: PPUSH
68790: CALL_OW 453
68794: GO 68764
68796: POP
68797: POP
// end ;
68798: LD_VAR 0 2
68802: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68803: LD_INT 0
68805: PPUSH
68806: PPUSH
68807: PPUSH
68808: PPUSH
68809: PPUSH
68810: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68811: LD_VAR 0 1
68815: NOT
68816: PUSH
68817: LD_VAR 0 2
68821: NOT
68822: OR
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: CALL_OW 314
68833: OR
68834: IFFALSE 68838
// exit ;
68836: GO 69279
// x := GetX ( enemy_unit ) ;
68838: LD_ADDR_VAR 0 7
68842: PUSH
68843: LD_VAR 0 2
68847: PPUSH
68848: CALL_OW 250
68852: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68853: LD_ADDR_VAR 0 8
68857: PUSH
68858: LD_VAR 0 2
68862: PPUSH
68863: CALL_OW 251
68867: ST_TO_ADDR
// if not x or not y then
68868: LD_VAR 0 7
68872: NOT
68873: PUSH
68874: LD_VAR 0 8
68878: NOT
68879: OR
68880: IFFALSE 68884
// exit ;
68882: GO 69279
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68884: LD_ADDR_VAR 0 6
68888: PUSH
68889: LD_VAR 0 7
68893: PPUSH
68894: LD_INT 0
68896: PPUSH
68897: LD_INT 4
68899: PPUSH
68900: CALL_OW 272
68904: PUSH
68905: LD_VAR 0 8
68909: PPUSH
68910: LD_INT 0
68912: PPUSH
68913: LD_INT 4
68915: PPUSH
68916: CALL_OW 273
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_VAR 0 7
68929: PPUSH
68930: LD_INT 1
68932: PPUSH
68933: LD_INT 4
68935: PPUSH
68936: CALL_OW 272
68940: PUSH
68941: LD_VAR 0 8
68945: PPUSH
68946: LD_INT 1
68948: PPUSH
68949: LD_INT 4
68951: PPUSH
68952: CALL_OW 273
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_VAR 0 7
68965: PPUSH
68966: LD_INT 2
68968: PPUSH
68969: LD_INT 4
68971: PPUSH
68972: CALL_OW 272
68976: PUSH
68977: LD_VAR 0 8
68981: PPUSH
68982: LD_INT 2
68984: PPUSH
68985: LD_INT 4
68987: PPUSH
68988: CALL_OW 273
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_VAR 0 7
69001: PPUSH
69002: LD_INT 3
69004: PPUSH
69005: LD_INT 4
69007: PPUSH
69008: CALL_OW 272
69012: PUSH
69013: LD_VAR 0 8
69017: PPUSH
69018: LD_INT 3
69020: PPUSH
69021: LD_INT 4
69023: PPUSH
69024: CALL_OW 273
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_VAR 0 7
69037: PPUSH
69038: LD_INT 4
69040: PPUSH
69041: LD_INT 4
69043: PPUSH
69044: CALL_OW 272
69048: PUSH
69049: LD_VAR 0 8
69053: PPUSH
69054: LD_INT 4
69056: PPUSH
69057: LD_INT 4
69059: PPUSH
69060: CALL_OW 273
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_VAR 0 7
69073: PPUSH
69074: LD_INT 5
69076: PPUSH
69077: LD_INT 4
69079: PPUSH
69080: CALL_OW 272
69084: PUSH
69085: LD_VAR 0 8
69089: PPUSH
69090: LD_INT 5
69092: PPUSH
69093: LD_INT 4
69095: PPUSH
69096: CALL_OW 273
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: ST_TO_ADDR
// for i = tmp downto 1 do
69113: LD_ADDR_VAR 0 4
69117: PUSH
69118: DOUBLE
69119: LD_VAR 0 6
69123: INC
69124: ST_TO_ADDR
69125: LD_INT 1
69127: PUSH
69128: FOR_DOWNTO
69129: IFFALSE 69230
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69131: LD_VAR 0 6
69135: PUSH
69136: LD_VAR 0 4
69140: ARRAY
69141: PUSH
69142: LD_INT 1
69144: ARRAY
69145: PPUSH
69146: LD_VAR 0 6
69150: PUSH
69151: LD_VAR 0 4
69155: ARRAY
69156: PUSH
69157: LD_INT 2
69159: ARRAY
69160: PPUSH
69161: CALL_OW 488
69165: NOT
69166: PUSH
69167: LD_VAR 0 6
69171: PUSH
69172: LD_VAR 0 4
69176: ARRAY
69177: PUSH
69178: LD_INT 1
69180: ARRAY
69181: PPUSH
69182: LD_VAR 0 6
69186: PUSH
69187: LD_VAR 0 4
69191: ARRAY
69192: PUSH
69193: LD_INT 2
69195: ARRAY
69196: PPUSH
69197: CALL_OW 428
69201: PUSH
69202: LD_INT 0
69204: NONEQUAL
69205: OR
69206: IFFALSE 69228
// tmp := Delete ( tmp , i ) ;
69208: LD_ADDR_VAR 0 6
69212: PUSH
69213: LD_VAR 0 6
69217: PPUSH
69218: LD_VAR 0 4
69222: PPUSH
69223: CALL_OW 3
69227: ST_TO_ADDR
69228: GO 69128
69230: POP
69231: POP
// j := GetClosestHex ( unit , tmp ) ;
69232: LD_ADDR_VAR 0 5
69236: PUSH
69237: LD_VAR 0 1
69241: PPUSH
69242: LD_VAR 0 6
69246: PPUSH
69247: CALL 68532 0 2
69251: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69252: LD_VAR 0 1
69256: PPUSH
69257: LD_VAR 0 5
69261: PUSH
69262: LD_INT 1
69264: ARRAY
69265: PPUSH
69266: LD_VAR 0 5
69270: PUSH
69271: LD_INT 2
69273: ARRAY
69274: PPUSH
69275: CALL_OW 111
// end ;
69279: LD_VAR 0 3
69283: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69284: LD_INT 0
69286: PPUSH
69287: PPUSH
69288: PPUSH
// uc_side = 0 ;
69289: LD_ADDR_OWVAR 20
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// uc_nation = 0 ;
69297: LD_ADDR_OWVAR 21
69301: PUSH
69302: LD_INT 0
69304: ST_TO_ADDR
// InitHc_All ( ) ;
69305: CALL_OW 584
// InitVc ;
69309: CALL_OW 20
// if mastodonts then
69313: LD_VAR 0 6
69317: IFFALSE 69384
// for i = 1 to mastodonts do
69319: LD_ADDR_VAR 0 11
69323: PUSH
69324: DOUBLE
69325: LD_INT 1
69327: DEC
69328: ST_TO_ADDR
69329: LD_VAR 0 6
69333: PUSH
69334: FOR_TO
69335: IFFALSE 69382
// begin vc_chassis := 31 ;
69337: LD_ADDR_OWVAR 37
69341: PUSH
69342: LD_INT 31
69344: ST_TO_ADDR
// vc_control := control_rider ;
69345: LD_ADDR_OWVAR 38
69349: PUSH
69350: LD_INT 4
69352: ST_TO_ADDR
// animal := CreateVehicle ;
69353: LD_ADDR_VAR 0 12
69357: PUSH
69358: CALL_OW 45
69362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69363: LD_VAR 0 12
69367: PPUSH
69368: LD_VAR 0 8
69372: PPUSH
69373: LD_INT 0
69375: PPUSH
69376: CALL 71572 0 3
// end ;
69380: GO 69334
69382: POP
69383: POP
// if horses then
69384: LD_VAR 0 5
69388: IFFALSE 69455
// for i = 1 to horses do
69390: LD_ADDR_VAR 0 11
69394: PUSH
69395: DOUBLE
69396: LD_INT 1
69398: DEC
69399: ST_TO_ADDR
69400: LD_VAR 0 5
69404: PUSH
69405: FOR_TO
69406: IFFALSE 69453
// begin hc_class := 21 ;
69408: LD_ADDR_OWVAR 28
69412: PUSH
69413: LD_INT 21
69415: ST_TO_ADDR
// hc_gallery :=  ;
69416: LD_ADDR_OWVAR 33
69420: PUSH
69421: LD_STRING 
69423: ST_TO_ADDR
// animal := CreateHuman ;
69424: LD_ADDR_VAR 0 12
69428: PUSH
69429: CALL_OW 44
69433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69434: LD_VAR 0 12
69438: PPUSH
69439: LD_VAR 0 8
69443: PPUSH
69444: LD_INT 0
69446: PPUSH
69447: CALL 71572 0 3
// end ;
69451: GO 69405
69453: POP
69454: POP
// if birds then
69455: LD_VAR 0 1
69459: IFFALSE 69526
// for i = 1 to birds do
69461: LD_ADDR_VAR 0 11
69465: PUSH
69466: DOUBLE
69467: LD_INT 1
69469: DEC
69470: ST_TO_ADDR
69471: LD_VAR 0 1
69475: PUSH
69476: FOR_TO
69477: IFFALSE 69524
// begin hc_class = 18 ;
69479: LD_ADDR_OWVAR 28
69483: PUSH
69484: LD_INT 18
69486: ST_TO_ADDR
// hc_gallery =  ;
69487: LD_ADDR_OWVAR 33
69491: PUSH
69492: LD_STRING 
69494: ST_TO_ADDR
// animal := CreateHuman ;
69495: LD_ADDR_VAR 0 12
69499: PUSH
69500: CALL_OW 44
69504: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69505: LD_VAR 0 12
69509: PPUSH
69510: LD_VAR 0 8
69514: PPUSH
69515: LD_INT 0
69517: PPUSH
69518: CALL 71572 0 3
// end ;
69522: GO 69476
69524: POP
69525: POP
// if tigers then
69526: LD_VAR 0 2
69530: IFFALSE 69614
// for i = 1 to tigers do
69532: LD_ADDR_VAR 0 11
69536: PUSH
69537: DOUBLE
69538: LD_INT 1
69540: DEC
69541: ST_TO_ADDR
69542: LD_VAR 0 2
69546: PUSH
69547: FOR_TO
69548: IFFALSE 69612
// begin hc_class = class_tiger ;
69550: LD_ADDR_OWVAR 28
69554: PUSH
69555: LD_INT 14
69557: ST_TO_ADDR
// hc_gallery =  ;
69558: LD_ADDR_OWVAR 33
69562: PUSH
69563: LD_STRING 
69565: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69566: LD_ADDR_OWVAR 35
69570: PUSH
69571: LD_INT 7
69573: NEG
69574: PPUSH
69575: LD_INT 7
69577: PPUSH
69578: CALL_OW 12
69582: ST_TO_ADDR
// animal := CreateHuman ;
69583: LD_ADDR_VAR 0 12
69587: PUSH
69588: CALL_OW 44
69592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69593: LD_VAR 0 12
69597: PPUSH
69598: LD_VAR 0 8
69602: PPUSH
69603: LD_INT 0
69605: PPUSH
69606: CALL 71572 0 3
// end ;
69610: GO 69547
69612: POP
69613: POP
// if apemans then
69614: LD_VAR 0 3
69618: IFFALSE 69741
// for i = 1 to apemans do
69620: LD_ADDR_VAR 0 11
69624: PUSH
69625: DOUBLE
69626: LD_INT 1
69628: DEC
69629: ST_TO_ADDR
69630: LD_VAR 0 3
69634: PUSH
69635: FOR_TO
69636: IFFALSE 69739
// begin hc_class = class_apeman ;
69638: LD_ADDR_OWVAR 28
69642: PUSH
69643: LD_INT 12
69645: ST_TO_ADDR
// hc_gallery =  ;
69646: LD_ADDR_OWVAR 33
69650: PUSH
69651: LD_STRING 
69653: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69654: LD_ADDR_OWVAR 35
69658: PUSH
69659: LD_INT 2
69661: NEG
69662: PPUSH
69663: LD_INT 2
69665: PPUSH
69666: CALL_OW 12
69670: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69671: LD_ADDR_OWVAR 31
69675: PUSH
69676: LD_INT 1
69678: PPUSH
69679: LD_INT 3
69681: PPUSH
69682: CALL_OW 12
69686: PUSH
69687: LD_INT 1
69689: PPUSH
69690: LD_INT 3
69692: PPUSH
69693: CALL_OW 12
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: ST_TO_ADDR
// animal := CreateHuman ;
69710: LD_ADDR_VAR 0 12
69714: PUSH
69715: CALL_OW 44
69719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69720: LD_VAR 0 12
69724: PPUSH
69725: LD_VAR 0 8
69729: PPUSH
69730: LD_INT 0
69732: PPUSH
69733: CALL 71572 0 3
// end ;
69737: GO 69635
69739: POP
69740: POP
// if enchidnas then
69741: LD_VAR 0 4
69745: IFFALSE 69812
// for i = 1 to enchidnas do
69747: LD_ADDR_VAR 0 11
69751: PUSH
69752: DOUBLE
69753: LD_INT 1
69755: DEC
69756: ST_TO_ADDR
69757: LD_VAR 0 4
69761: PUSH
69762: FOR_TO
69763: IFFALSE 69810
// begin hc_class = 13 ;
69765: LD_ADDR_OWVAR 28
69769: PUSH
69770: LD_INT 13
69772: ST_TO_ADDR
// hc_gallery =  ;
69773: LD_ADDR_OWVAR 33
69777: PUSH
69778: LD_STRING 
69780: ST_TO_ADDR
// animal := CreateHuman ;
69781: LD_ADDR_VAR 0 12
69785: PUSH
69786: CALL_OW 44
69790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69791: LD_VAR 0 12
69795: PPUSH
69796: LD_VAR 0 8
69800: PPUSH
69801: LD_INT 0
69803: PPUSH
69804: CALL 71572 0 3
// end ;
69808: GO 69762
69810: POP
69811: POP
// if fishes then
69812: LD_VAR 0 7
69816: IFFALSE 69883
// for i = 1 to fishes do
69818: LD_ADDR_VAR 0 11
69822: PUSH
69823: DOUBLE
69824: LD_INT 1
69826: DEC
69827: ST_TO_ADDR
69828: LD_VAR 0 7
69832: PUSH
69833: FOR_TO
69834: IFFALSE 69881
// begin hc_class = 20 ;
69836: LD_ADDR_OWVAR 28
69840: PUSH
69841: LD_INT 20
69843: ST_TO_ADDR
// hc_gallery =  ;
69844: LD_ADDR_OWVAR 33
69848: PUSH
69849: LD_STRING 
69851: ST_TO_ADDR
// animal := CreateHuman ;
69852: LD_ADDR_VAR 0 12
69856: PUSH
69857: CALL_OW 44
69861: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69862: LD_VAR 0 12
69866: PPUSH
69867: LD_VAR 0 9
69871: PPUSH
69872: LD_INT 0
69874: PPUSH
69875: CALL 71572 0 3
// end ;
69879: GO 69833
69881: POP
69882: POP
// end ;
69883: LD_VAR 0 10
69887: RET
// export function WantHeal ( sci , unit ) ; begin
69888: LD_INT 0
69890: PPUSH
// if GetTaskList ( sci ) > 0 then
69891: LD_VAR 0 1
69895: PPUSH
69896: CALL_OW 437
69900: PUSH
69901: LD_INT 0
69903: GREATER
69904: IFFALSE 69974
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69906: LD_VAR 0 1
69910: PPUSH
69911: CALL_OW 437
69915: PUSH
69916: LD_INT 1
69918: ARRAY
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PUSH
69924: LD_STRING l
69926: EQUAL
69927: PUSH
69928: LD_VAR 0 1
69932: PPUSH
69933: CALL_OW 437
69937: PUSH
69938: LD_INT 1
69940: ARRAY
69941: PUSH
69942: LD_INT 4
69944: ARRAY
69945: PUSH
69946: LD_VAR 0 2
69950: EQUAL
69951: AND
69952: IFFALSE 69964
// result := true else
69954: LD_ADDR_VAR 0 3
69958: PUSH
69959: LD_INT 1
69961: ST_TO_ADDR
69962: GO 69972
// result := false ;
69964: LD_ADDR_VAR 0 3
69968: PUSH
69969: LD_INT 0
69971: ST_TO_ADDR
// end else
69972: GO 69982
// result := false ;
69974: LD_ADDR_VAR 0 3
69978: PUSH
69979: LD_INT 0
69981: ST_TO_ADDR
// end ;
69982: LD_VAR 0 3
69986: RET
// export function HealTarget ( sci ) ; begin
69987: LD_INT 0
69989: PPUSH
// if not sci then
69990: LD_VAR 0 1
69994: NOT
69995: IFFALSE 69999
// exit ;
69997: GO 70064
// result := 0 ;
69999: LD_ADDR_VAR 0 2
70003: PUSH
70004: LD_INT 0
70006: ST_TO_ADDR
// if GetTaskList ( sci ) then
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 437
70016: IFFALSE 70064
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70018: LD_VAR 0 1
70022: PPUSH
70023: CALL_OW 437
70027: PUSH
70028: LD_INT 1
70030: ARRAY
70031: PUSH
70032: LD_INT 1
70034: ARRAY
70035: PUSH
70036: LD_STRING l
70038: EQUAL
70039: IFFALSE 70064
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_VAR 0 1
70050: PPUSH
70051: CALL_OW 437
70055: PUSH
70056: LD_INT 1
70058: ARRAY
70059: PUSH
70060: LD_INT 4
70062: ARRAY
70063: ST_TO_ADDR
// end ;
70064: LD_VAR 0 2
70068: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70069: LD_INT 0
70071: PPUSH
70072: PPUSH
70073: PPUSH
70074: PPUSH
// if not base_units then
70075: LD_VAR 0 1
70079: NOT
70080: IFFALSE 70084
// exit ;
70082: GO 70171
// result := false ;
70084: LD_ADDR_VAR 0 2
70088: PUSH
70089: LD_INT 0
70091: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70092: LD_ADDR_VAR 0 5
70096: PUSH
70097: LD_VAR 0 1
70101: PPUSH
70102: LD_INT 21
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PPUSH
70112: CALL_OW 72
70116: ST_TO_ADDR
// if not tmp then
70117: LD_VAR 0 5
70121: NOT
70122: IFFALSE 70126
// exit ;
70124: GO 70171
// for i in tmp do
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 5
70135: PUSH
70136: FOR_IN
70137: IFFALSE 70169
// begin result := EnemyInRange ( i , 22 ) ;
70139: LD_ADDR_VAR 0 2
70143: PUSH
70144: LD_VAR 0 3
70148: PPUSH
70149: LD_INT 22
70151: PPUSH
70152: CALL 68407 0 2
70156: ST_TO_ADDR
// if result then
70157: LD_VAR 0 2
70161: IFFALSE 70167
// exit ;
70163: POP
70164: POP
70165: GO 70171
// end ;
70167: GO 70136
70169: POP
70170: POP
// end ;
70171: LD_VAR 0 2
70175: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70176: LD_INT 0
70178: PPUSH
70179: PPUSH
// if not units then
70180: LD_VAR 0 1
70184: NOT
70185: IFFALSE 70189
// exit ;
70187: GO 70259
// result := [ ] ;
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: EMPTY
70195: ST_TO_ADDR
// for i in units do
70196: LD_ADDR_VAR 0 4
70200: PUSH
70201: LD_VAR 0 1
70205: PUSH
70206: FOR_IN
70207: IFFALSE 70257
// if GetTag ( i ) = tag then
70209: LD_VAR 0 4
70213: PPUSH
70214: CALL_OW 110
70218: PUSH
70219: LD_VAR 0 2
70223: EQUAL
70224: IFFALSE 70255
// result := Insert ( result , result + 1 , i ) ;
70226: LD_ADDR_VAR 0 3
70230: PUSH
70231: LD_VAR 0 3
70235: PPUSH
70236: LD_VAR 0 3
70240: PUSH
70241: LD_INT 1
70243: PLUS
70244: PPUSH
70245: LD_VAR 0 4
70249: PPUSH
70250: CALL_OW 2
70254: ST_TO_ADDR
70255: GO 70206
70257: POP
70258: POP
// end ;
70259: LD_VAR 0 3
70263: RET
// export function IsDriver ( un ) ; begin
70264: LD_INT 0
70266: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70267: LD_ADDR_VAR 0 2
70271: PUSH
70272: LD_VAR 0 1
70276: PUSH
70277: LD_INT 55
70279: PUSH
70280: EMPTY
70281: LIST
70282: PPUSH
70283: CALL_OW 69
70287: IN
70288: ST_TO_ADDR
// end ;
70289: LD_VAR 0 2
70293: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70294: LD_INT 0
70296: PPUSH
70297: PPUSH
// list := [ ] ;
70298: LD_ADDR_VAR 0 5
70302: PUSH
70303: EMPTY
70304: ST_TO_ADDR
// case d of 0 :
70305: LD_VAR 0 3
70309: PUSH
70310: LD_INT 0
70312: DOUBLE
70313: EQUAL
70314: IFTRUE 70318
70316: GO 70451
70318: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70319: LD_ADDR_VAR 0 5
70323: PUSH
70324: LD_VAR 0 1
70328: PUSH
70329: LD_INT 4
70331: MINUS
70332: PUSH
70333: LD_VAR 0 2
70337: PUSH
70338: LD_INT 4
70340: MINUS
70341: PUSH
70342: LD_INT 2
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: LD_INT 3
70357: MINUS
70358: PUSH
70359: LD_VAR 0 2
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: PUSH
70372: LD_VAR 0 1
70376: PUSH
70377: LD_INT 4
70379: PLUS
70380: PUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_INT 4
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: LIST
70393: PUSH
70394: LD_VAR 0 1
70398: PUSH
70399: LD_INT 3
70401: PLUS
70402: PUSH
70403: LD_VAR 0 2
70407: PUSH
70408: LD_INT 3
70410: PLUS
70411: PUSH
70412: LD_INT 5
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: LIST
70419: PUSH
70420: LD_VAR 0 1
70424: PUSH
70425: LD_VAR 0 2
70429: PUSH
70430: LD_INT 4
70432: PLUS
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: ST_TO_ADDR
// end ; 1 :
70449: GO 71149
70451: LD_INT 1
70453: DOUBLE
70454: EQUAL
70455: IFTRUE 70459
70457: GO 70592
70459: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70460: LD_ADDR_VAR 0 5
70464: PUSH
70465: LD_VAR 0 1
70469: PUSH
70470: LD_VAR 0 2
70474: PUSH
70475: LD_INT 4
70477: MINUS
70478: PUSH
70479: LD_INT 3
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: LD_VAR 0 1
70491: PUSH
70492: LD_INT 3
70494: MINUS
70495: PUSH
70496: LD_VAR 0 2
70500: PUSH
70501: LD_INT 3
70503: MINUS
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 4
70520: MINUS
70521: PUSH
70522: LD_VAR 0 2
70526: PUSH
70527: LD_INT 1
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: PUSH
70535: LD_VAR 0 1
70539: PUSH
70540: LD_VAR 0 2
70544: PUSH
70545: LD_INT 3
70547: PLUS
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: LIST
70556: PUSH
70557: LD_VAR 0 1
70561: PUSH
70562: LD_INT 4
70564: PLUS
70565: PUSH
70566: LD_VAR 0 2
70570: PUSH
70571: LD_INT 4
70573: PLUS
70574: PUSH
70575: LD_INT 5
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: ST_TO_ADDR
// end ; 2 :
70590: GO 71149
70592: LD_INT 2
70594: DOUBLE
70595: EQUAL
70596: IFTRUE 70600
70598: GO 70729
70600: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: LD_VAR 0 1
70610: PUSH
70611: LD_VAR 0 2
70615: PUSH
70616: LD_INT 3
70618: MINUS
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: PUSH
70628: LD_VAR 0 1
70632: PUSH
70633: LD_INT 4
70635: PLUS
70636: PUSH
70637: LD_VAR 0 2
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: LIST
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: LD_VAR 0 2
70659: PUSH
70660: LD_INT 4
70662: PLUS
70663: PUSH
70664: LD_INT 0
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: PUSH
70672: LD_VAR 0 1
70676: PUSH
70677: LD_INT 3
70679: MINUS
70680: PUSH
70681: LD_VAR 0 2
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: LIST
70693: PUSH
70694: LD_VAR 0 1
70698: PUSH
70699: LD_INT 4
70701: MINUS
70702: PUSH
70703: LD_VAR 0 2
70707: PUSH
70708: LD_INT 4
70710: MINUS
70711: PUSH
70712: LD_INT 2
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: ST_TO_ADDR
// end ; 3 :
70727: GO 71149
70729: LD_INT 3
70731: DOUBLE
70732: EQUAL
70733: IFTRUE 70737
70735: GO 70870
70737: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70738: LD_ADDR_VAR 0 5
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 3
70750: PLUS
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: LIST
70764: PUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 4
70772: PLUS
70773: PUSH
70774: LD_VAR 0 2
70778: PUSH
70779: LD_INT 4
70781: PLUS
70782: PUSH
70783: LD_INT 5
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: PUSH
70791: LD_VAR 0 1
70795: PUSH
70796: LD_INT 4
70798: MINUS
70799: PUSH
70800: LD_VAR 0 2
70804: PUSH
70805: LD_INT 1
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: PUSH
70813: LD_VAR 0 1
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 4
70825: MINUS
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: LIST
70834: PUSH
70835: LD_VAR 0 1
70839: PUSH
70840: LD_INT 3
70842: MINUS
70843: PUSH
70844: LD_VAR 0 2
70848: PUSH
70849: LD_INT 3
70851: MINUS
70852: PUSH
70853: LD_INT 2
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: LIST
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: ST_TO_ADDR
// end ; 4 :
70868: GO 71149
70870: LD_INT 4
70872: DOUBLE
70873: EQUAL
70874: IFTRUE 70878
70876: GO 71011
70878: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70879: LD_ADDR_VAR 0 5
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: LD_VAR 0 2
70893: PUSH
70894: LD_INT 4
70896: PLUS
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 1
70910: PUSH
70911: LD_INT 3
70913: PLUS
70914: PUSH
70915: LD_VAR 0 2
70919: PUSH
70920: LD_INT 3
70922: PLUS
70923: PUSH
70924: LD_INT 5
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: LD_VAR 0 1
70936: PUSH
70937: LD_INT 4
70939: PLUS
70940: PUSH
70941: LD_VAR 0 2
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: PUSH
70954: LD_VAR 0 1
70958: PUSH
70959: LD_VAR 0 2
70963: PUSH
70964: LD_INT 3
70966: MINUS
70967: PUSH
70968: LD_INT 3
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: LIST
70975: PUSH
70976: LD_VAR 0 1
70980: PUSH
70981: LD_INT 4
70983: MINUS
70984: PUSH
70985: LD_VAR 0 2
70989: PUSH
70990: LD_INT 4
70992: MINUS
70993: PUSH
70994: LD_INT 2
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: LIST
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: ST_TO_ADDR
// end ; 5 :
71009: GO 71149
71011: LD_INT 5
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71019
71017: GO 71148
71019: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71020: LD_ADDR_VAR 0 5
71024: PUSH
71025: LD_VAR 0 1
71029: PUSH
71030: LD_INT 4
71032: MINUS
71033: PUSH
71034: LD_VAR 0 2
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: LIST
71046: PUSH
71047: LD_VAR 0 1
71051: PUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 4
71059: MINUS
71060: PUSH
71061: LD_INT 3
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: PUSH
71069: LD_VAR 0 1
71073: PUSH
71074: LD_INT 4
71076: PLUS
71077: PUSH
71078: LD_VAR 0 2
71082: PUSH
71083: LD_INT 4
71085: PLUS
71086: PUSH
71087: LD_INT 5
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: LIST
71094: PUSH
71095: LD_VAR 0 1
71099: PUSH
71100: LD_INT 3
71102: PLUS
71103: PUSH
71104: LD_VAR 0 2
71108: PUSH
71109: LD_INT 4
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: PUSH
71117: LD_VAR 0 1
71121: PUSH
71122: LD_VAR 0 2
71126: PUSH
71127: LD_INT 3
71129: PLUS
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: LIST
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: ST_TO_ADDR
// end ; end ;
71146: GO 71149
71148: POP
// result := list ;
71149: LD_ADDR_VAR 0 4
71153: PUSH
71154: LD_VAR 0 5
71158: ST_TO_ADDR
// end ;
71159: LD_VAR 0 4
71163: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71164: LD_INT 0
71166: PPUSH
71167: PPUSH
71168: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71169: LD_VAR 0 1
71173: NOT
71174: PUSH
71175: LD_VAR 0 2
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: LD_INT 2
71185: PUSH
71186: LD_INT 3
71188: PUSH
71189: LD_INT 4
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: IN
71198: NOT
71199: OR
71200: IFFALSE 71204
// exit ;
71202: GO 71296
// tmp := [ ] ;
71204: LD_ADDR_VAR 0 5
71208: PUSH
71209: EMPTY
71210: ST_TO_ADDR
// for i in units do
71211: LD_ADDR_VAR 0 4
71215: PUSH
71216: LD_VAR 0 1
71220: PUSH
71221: FOR_IN
71222: IFFALSE 71265
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71224: LD_ADDR_VAR 0 5
71228: PUSH
71229: LD_VAR 0 5
71233: PPUSH
71234: LD_VAR 0 5
71238: PUSH
71239: LD_INT 1
71241: PLUS
71242: PPUSH
71243: LD_VAR 0 4
71247: PPUSH
71248: LD_VAR 0 2
71252: PPUSH
71253: CALL_OW 259
71257: PPUSH
71258: CALL_OW 2
71262: ST_TO_ADDR
71263: GO 71221
71265: POP
71266: POP
// if not tmp then
71267: LD_VAR 0 5
71271: NOT
71272: IFFALSE 71276
// exit ;
71274: GO 71296
// result := SortListByListDesc ( units , tmp ) ;
71276: LD_ADDR_VAR 0 3
71280: PUSH
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_VAR 0 5
71290: PPUSH
71291: CALL_OW 77
71295: ST_TO_ADDR
// end ;
71296: LD_VAR 0 3
71300: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71301: LD_INT 0
71303: PPUSH
71304: PPUSH
71305: PPUSH
// result := false ;
71306: LD_ADDR_VAR 0 3
71310: PUSH
71311: LD_INT 0
71313: ST_TO_ADDR
// x := GetX ( building ) ;
71314: LD_ADDR_VAR 0 4
71318: PUSH
71319: LD_VAR 0 2
71323: PPUSH
71324: CALL_OW 250
71328: ST_TO_ADDR
// y := GetY ( building ) ;
71329: LD_ADDR_VAR 0 5
71333: PUSH
71334: LD_VAR 0 2
71338: PPUSH
71339: CALL_OW 251
71343: ST_TO_ADDR
// if not building or not x or not y then
71344: LD_VAR 0 2
71348: NOT
71349: PUSH
71350: LD_VAR 0 4
71354: NOT
71355: OR
71356: PUSH
71357: LD_VAR 0 5
71361: NOT
71362: OR
71363: IFFALSE 71367
// exit ;
71365: GO 71459
// if GetTaskList ( unit ) then
71367: LD_VAR 0 1
71371: PPUSH
71372: CALL_OW 437
71376: IFFALSE 71459
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71378: LD_STRING e
71380: PUSH
71381: LD_VAR 0 1
71385: PPUSH
71386: CALL_OW 437
71390: PUSH
71391: LD_INT 1
71393: ARRAY
71394: PUSH
71395: LD_INT 1
71397: ARRAY
71398: EQUAL
71399: PUSH
71400: LD_VAR 0 4
71404: PUSH
71405: LD_VAR 0 1
71409: PPUSH
71410: CALL_OW 437
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PUSH
71419: LD_INT 2
71421: ARRAY
71422: EQUAL
71423: AND
71424: PUSH
71425: LD_VAR 0 5
71429: PUSH
71430: LD_VAR 0 1
71434: PPUSH
71435: CALL_OW 437
71439: PUSH
71440: LD_INT 1
71442: ARRAY
71443: PUSH
71444: LD_INT 3
71446: ARRAY
71447: EQUAL
71448: AND
71449: IFFALSE 71459
// result := true end ;
71451: LD_ADDR_VAR 0 3
71455: PUSH
71456: LD_INT 1
71458: ST_TO_ADDR
// end ;
71459: LD_VAR 0 3
71463: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71464: LD_INT 0
71466: PPUSH
// result := false ;
71467: LD_ADDR_VAR 0 4
71471: PUSH
71472: LD_INT 0
71474: ST_TO_ADDR
// if GetTaskList ( unit ) then
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 437
71484: IFFALSE 71567
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71486: LD_STRING M
71488: PUSH
71489: LD_VAR 0 1
71493: PPUSH
71494: CALL_OW 437
71498: PUSH
71499: LD_INT 1
71501: ARRAY
71502: PUSH
71503: LD_INT 1
71505: ARRAY
71506: EQUAL
71507: PUSH
71508: LD_VAR 0 2
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 437
71522: PUSH
71523: LD_INT 1
71525: ARRAY
71526: PUSH
71527: LD_INT 2
71529: ARRAY
71530: EQUAL
71531: AND
71532: PUSH
71533: LD_VAR 0 3
71537: PUSH
71538: LD_VAR 0 1
71542: PPUSH
71543: CALL_OW 437
71547: PUSH
71548: LD_INT 1
71550: ARRAY
71551: PUSH
71552: LD_INT 3
71554: ARRAY
71555: EQUAL
71556: AND
71557: IFFALSE 71567
// result := true ;
71559: LD_ADDR_VAR 0 4
71563: PUSH
71564: LD_INT 1
71566: ST_TO_ADDR
// end ; end ;
71567: LD_VAR 0 4
71571: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71572: LD_INT 0
71574: PPUSH
71575: PPUSH
71576: PPUSH
71577: PPUSH
// if not unit or not area then
71578: LD_VAR 0 1
71582: NOT
71583: PUSH
71584: LD_VAR 0 2
71588: NOT
71589: OR
71590: IFFALSE 71594
// exit ;
71592: GO 71758
// tmp := AreaToList ( area , i ) ;
71594: LD_ADDR_VAR 0 6
71598: PUSH
71599: LD_VAR 0 2
71603: PPUSH
71604: LD_VAR 0 5
71608: PPUSH
71609: CALL_OW 517
71613: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71614: LD_ADDR_VAR 0 5
71618: PUSH
71619: DOUBLE
71620: LD_INT 1
71622: DEC
71623: ST_TO_ADDR
71624: LD_VAR 0 6
71628: PUSH
71629: LD_INT 1
71631: ARRAY
71632: PUSH
71633: FOR_TO
71634: IFFALSE 71756
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71636: LD_ADDR_VAR 0 7
71640: PUSH
71641: LD_VAR 0 6
71645: PUSH
71646: LD_INT 1
71648: ARRAY
71649: PUSH
71650: LD_VAR 0 5
71654: ARRAY
71655: PUSH
71656: LD_VAR 0 6
71660: PUSH
71661: LD_INT 2
71663: ARRAY
71664: PUSH
71665: LD_VAR 0 5
71669: ARRAY
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71675: LD_VAR 0 7
71679: PUSH
71680: LD_INT 1
71682: ARRAY
71683: PPUSH
71684: LD_VAR 0 7
71688: PUSH
71689: LD_INT 2
71691: ARRAY
71692: PPUSH
71693: CALL_OW 428
71697: PUSH
71698: LD_INT 0
71700: EQUAL
71701: IFFALSE 71754
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71703: LD_VAR 0 1
71707: PPUSH
71708: LD_VAR 0 7
71712: PUSH
71713: LD_INT 1
71715: ARRAY
71716: PPUSH
71717: LD_VAR 0 7
71721: PUSH
71722: LD_INT 2
71724: ARRAY
71725: PPUSH
71726: LD_VAR 0 3
71730: PPUSH
71731: CALL_OW 48
// result := IsPlaced ( unit ) ;
71735: LD_ADDR_VAR 0 4
71739: PUSH
71740: LD_VAR 0 1
71744: PPUSH
71745: CALL_OW 305
71749: ST_TO_ADDR
// exit ;
71750: POP
71751: POP
71752: GO 71758
// end ; end ;
71754: GO 71633
71756: POP
71757: POP
// end ;
71758: LD_VAR 0 4
71762: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71763: LD_INT 0
71765: PPUSH
71766: PPUSH
71767: PPUSH
// if not side or side > 8 then
71768: LD_VAR 0 1
71772: NOT
71773: PUSH
71774: LD_VAR 0 1
71778: PUSH
71779: LD_INT 8
71781: GREATER
71782: OR
71783: IFFALSE 71787
// exit ;
71785: GO 71974
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71787: LD_ADDR_VAR 0 4
71791: PUSH
71792: LD_INT 22
71794: PUSH
71795: LD_VAR 0 1
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 21
71806: PUSH
71807: LD_INT 3
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PPUSH
71818: CALL_OW 69
71822: ST_TO_ADDR
// if not tmp then
71823: LD_VAR 0 4
71827: NOT
71828: IFFALSE 71832
// exit ;
71830: GO 71974
// enable_addtolog := true ;
71832: LD_ADDR_OWVAR 81
71836: PUSH
71837: LD_INT 1
71839: ST_TO_ADDR
// AddToLog ( [ ) ;
71840: LD_STRING [
71842: PPUSH
71843: CALL_OW 561
// for i in tmp do
71847: LD_ADDR_VAR 0 3
71851: PUSH
71852: LD_VAR 0 4
71856: PUSH
71857: FOR_IN
71858: IFFALSE 71965
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71860: LD_STRING [
71862: PUSH
71863: LD_VAR 0 3
71867: PPUSH
71868: CALL_OW 266
71872: STR
71873: PUSH
71874: LD_STRING , 
71876: STR
71877: PUSH
71878: LD_VAR 0 3
71882: PPUSH
71883: CALL_OW 250
71887: STR
71888: PUSH
71889: LD_STRING , 
71891: STR
71892: PUSH
71893: LD_VAR 0 3
71897: PPUSH
71898: CALL_OW 251
71902: STR
71903: PUSH
71904: LD_STRING , 
71906: STR
71907: PUSH
71908: LD_VAR 0 3
71912: PPUSH
71913: CALL_OW 254
71917: STR
71918: PUSH
71919: LD_STRING , 
71921: STR
71922: PUSH
71923: LD_VAR 0 3
71927: PPUSH
71928: LD_INT 1
71930: PPUSH
71931: CALL_OW 268
71935: STR
71936: PUSH
71937: LD_STRING , 
71939: STR
71940: PUSH
71941: LD_VAR 0 3
71945: PPUSH
71946: LD_INT 2
71948: PPUSH
71949: CALL_OW 268
71953: STR
71954: PUSH
71955: LD_STRING ],
71957: STR
71958: PPUSH
71959: CALL_OW 561
// end ;
71963: GO 71857
71965: POP
71966: POP
// AddToLog ( ]; ) ;
71967: LD_STRING ];
71969: PPUSH
71970: CALL_OW 561
// end ;
71974: LD_VAR 0 2
71978: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71979: LD_INT 0
71981: PPUSH
71982: PPUSH
71983: PPUSH
71984: PPUSH
71985: PPUSH
// if not area or not rate or not max then
71986: LD_VAR 0 1
71990: NOT
71991: PUSH
71992: LD_VAR 0 2
71996: NOT
71997: OR
71998: PUSH
71999: LD_VAR 0 4
72003: NOT
72004: OR
72005: IFFALSE 72009
// exit ;
72007: GO 72201
// while 1 do
72009: LD_INT 1
72011: IFFALSE 72201
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72013: LD_ADDR_VAR 0 9
72017: PUSH
72018: LD_VAR 0 1
72022: PPUSH
72023: LD_INT 1
72025: PPUSH
72026: CALL_OW 287
72030: PUSH
72031: LD_INT 10
72033: MUL
72034: ST_TO_ADDR
// r := rate / 10 ;
72035: LD_ADDR_VAR 0 7
72039: PUSH
72040: LD_VAR 0 2
72044: PUSH
72045: LD_INT 10
72047: DIVREAL
72048: ST_TO_ADDR
// time := 1 1$00 ;
72049: LD_ADDR_VAR 0 8
72053: PUSH
72054: LD_INT 2100
72056: ST_TO_ADDR
// if amount < min then
72057: LD_VAR 0 9
72061: PUSH
72062: LD_VAR 0 3
72066: LESS
72067: IFFALSE 72085
// r := r * 2 else
72069: LD_ADDR_VAR 0 7
72073: PUSH
72074: LD_VAR 0 7
72078: PUSH
72079: LD_INT 2
72081: MUL
72082: ST_TO_ADDR
72083: GO 72111
// if amount > max then
72085: LD_VAR 0 9
72089: PUSH
72090: LD_VAR 0 4
72094: GREATER
72095: IFFALSE 72111
// r := r / 2 ;
72097: LD_ADDR_VAR 0 7
72101: PUSH
72102: LD_VAR 0 7
72106: PUSH
72107: LD_INT 2
72109: DIVREAL
72110: ST_TO_ADDR
// time := time / r ;
72111: LD_ADDR_VAR 0 8
72115: PUSH
72116: LD_VAR 0 8
72120: PUSH
72121: LD_VAR 0 7
72125: DIVREAL
72126: ST_TO_ADDR
// if time < 0 then
72127: LD_VAR 0 8
72131: PUSH
72132: LD_INT 0
72134: LESS
72135: IFFALSE 72152
// time := time * - 1 ;
72137: LD_ADDR_VAR 0 8
72141: PUSH
72142: LD_VAR 0 8
72146: PUSH
72147: LD_INT 1
72149: NEG
72150: MUL
72151: ST_TO_ADDR
// wait ( time ) ;
72152: LD_VAR 0 8
72156: PPUSH
72157: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72161: LD_INT 35
72163: PPUSH
72164: LD_INT 875
72166: PPUSH
72167: CALL_OW 12
72171: PPUSH
72172: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72176: LD_INT 1
72178: PPUSH
72179: LD_INT 5
72181: PPUSH
72182: CALL_OW 12
72186: PPUSH
72187: LD_VAR 0 1
72191: PPUSH
72192: LD_INT 1
72194: PPUSH
72195: CALL_OW 55
// end ;
72199: GO 72009
// end ;
72201: LD_VAR 0 5
72205: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72206: LD_INT 0
72208: PPUSH
72209: PPUSH
72210: PPUSH
72211: PPUSH
72212: PPUSH
72213: PPUSH
72214: PPUSH
72215: PPUSH
// if not turrets or not factories then
72216: LD_VAR 0 1
72220: NOT
72221: PUSH
72222: LD_VAR 0 2
72226: NOT
72227: OR
72228: IFFALSE 72232
// exit ;
72230: GO 72539
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72232: LD_ADDR_VAR 0 10
72236: PUSH
72237: LD_INT 5
72239: PUSH
72240: LD_INT 6
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: LD_INT 4
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 5
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 24
72274: PUSH
72275: LD_INT 25
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 23
72284: PUSH
72285: LD_INT 27
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 42
72298: PUSH
72299: LD_INT 43
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 44
72308: PUSH
72309: LD_INT 46
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 45
72318: PUSH
72319: LD_INT 47
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: LIST
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: LIST
72335: ST_TO_ADDR
// result := [ ] ;
72336: LD_ADDR_VAR 0 3
72340: PUSH
72341: EMPTY
72342: ST_TO_ADDR
// for i in turrets do
72343: LD_ADDR_VAR 0 4
72347: PUSH
72348: LD_VAR 0 1
72352: PUSH
72353: FOR_IN
72354: IFFALSE 72537
// begin nat := GetNation ( i ) ;
72356: LD_ADDR_VAR 0 7
72360: PUSH
72361: LD_VAR 0 4
72365: PPUSH
72366: CALL_OW 248
72370: ST_TO_ADDR
// weapon := 0 ;
72371: LD_ADDR_VAR 0 8
72375: PUSH
72376: LD_INT 0
72378: ST_TO_ADDR
// if not nat then
72379: LD_VAR 0 7
72383: NOT
72384: IFFALSE 72388
// continue ;
72386: GO 72353
// for j in list [ nat ] do
72388: LD_ADDR_VAR 0 5
72392: PUSH
72393: LD_VAR 0 10
72397: PUSH
72398: LD_VAR 0 7
72402: ARRAY
72403: PUSH
72404: FOR_IN
72405: IFFALSE 72446
// if GetBWeapon ( i ) = j [ 1 ] then
72407: LD_VAR 0 4
72411: PPUSH
72412: CALL_OW 269
72416: PUSH
72417: LD_VAR 0 5
72421: PUSH
72422: LD_INT 1
72424: ARRAY
72425: EQUAL
72426: IFFALSE 72444
// begin weapon := j [ 2 ] ;
72428: LD_ADDR_VAR 0 8
72432: PUSH
72433: LD_VAR 0 5
72437: PUSH
72438: LD_INT 2
72440: ARRAY
72441: ST_TO_ADDR
// break ;
72442: GO 72446
// end ;
72444: GO 72404
72446: POP
72447: POP
// if not weapon then
72448: LD_VAR 0 8
72452: NOT
72453: IFFALSE 72457
// continue ;
72455: GO 72353
// for k in factories do
72457: LD_ADDR_VAR 0 6
72461: PUSH
72462: LD_VAR 0 2
72466: PUSH
72467: FOR_IN
72468: IFFALSE 72533
// begin weapons := AvailableWeaponList ( k ) ;
72470: LD_ADDR_VAR 0 9
72474: PUSH
72475: LD_VAR 0 6
72479: PPUSH
72480: CALL_OW 478
72484: ST_TO_ADDR
// if not weapons then
72485: LD_VAR 0 9
72489: NOT
72490: IFFALSE 72494
// continue ;
72492: GO 72467
// if weapon in weapons then
72494: LD_VAR 0 8
72498: PUSH
72499: LD_VAR 0 9
72503: IN
72504: IFFALSE 72531
// begin result := [ i , weapon ] ;
72506: LD_ADDR_VAR 0 3
72510: PUSH
72511: LD_VAR 0 4
72515: PUSH
72516: LD_VAR 0 8
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: ST_TO_ADDR
// exit ;
72525: POP
72526: POP
72527: POP
72528: POP
72529: GO 72539
// end ; end ;
72531: GO 72467
72533: POP
72534: POP
// end ;
72535: GO 72353
72537: POP
72538: POP
// end ;
72539: LD_VAR 0 3
72543: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72544: LD_INT 0
72546: PPUSH
// if not side or side > 8 then
72547: LD_VAR 0 3
72551: NOT
72552: PUSH
72553: LD_VAR 0 3
72557: PUSH
72558: LD_INT 8
72560: GREATER
72561: OR
72562: IFFALSE 72566
// exit ;
72564: GO 72625
// if not range then
72566: LD_VAR 0 4
72570: NOT
72571: IFFALSE 72582
// range := - 12 ;
72573: LD_ADDR_VAR 0 4
72577: PUSH
72578: LD_INT 12
72580: NEG
72581: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72582: LD_VAR 0 1
72586: PPUSH
72587: LD_VAR 0 2
72591: PPUSH
72592: LD_VAR 0 3
72596: PPUSH
72597: LD_VAR 0 4
72601: PPUSH
72602: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_VAR 0 2
72615: PPUSH
72616: LD_VAR 0 3
72620: PPUSH
72621: CALL_OW 331
// end ;
72625: LD_VAR 0 5
72629: RET
// export function Video ( mode ) ; begin
72630: LD_INT 0
72632: PPUSH
// ingame_video = mode ;
72633: LD_ADDR_OWVAR 52
72637: PUSH
72638: LD_VAR 0 1
72642: ST_TO_ADDR
// interface_hidden = mode ;
72643: LD_ADDR_OWVAR 54
72647: PUSH
72648: LD_VAR 0 1
72652: ST_TO_ADDR
// end ;
72653: LD_VAR 0 2
72657: RET
// export function Join ( array , element ) ; begin
72658: LD_INT 0
72660: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72661: LD_ADDR_VAR 0 3
72665: PUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: LD_VAR 0 1
72675: PUSH
72676: LD_INT 1
72678: PLUS
72679: PPUSH
72680: LD_VAR 0 2
72684: PPUSH
72685: CALL_OW 1
72689: ST_TO_ADDR
// end ;
72690: LD_VAR 0 3
72694: RET
// export function JoinUnion ( array , element ) ; begin
72695: LD_INT 0
72697: PPUSH
// result := array union element ;
72698: LD_ADDR_VAR 0 3
72702: PUSH
72703: LD_VAR 0 1
72707: PUSH
72708: LD_VAR 0 2
72712: UNION
72713: ST_TO_ADDR
// end ;
72714: LD_VAR 0 3
72718: RET
// export function GetBehemoths ( side ) ; begin
72719: LD_INT 0
72721: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_INT 22
72729: PUSH
72730: LD_VAR 0 1
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 31
72741: PUSH
72742: LD_INT 25
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PPUSH
72753: CALL_OW 69
72757: ST_TO_ADDR
// end ;
72758: LD_VAR 0 2
72762: RET
// export function Shuffle ( array ) ; var i , index ; begin
72763: LD_INT 0
72765: PPUSH
72766: PPUSH
72767: PPUSH
// result := [ ] ;
72768: LD_ADDR_VAR 0 2
72772: PUSH
72773: EMPTY
72774: ST_TO_ADDR
// if not array then
72775: LD_VAR 0 1
72779: NOT
72780: IFFALSE 72784
// exit ;
72782: GO 72883
// Randomize ;
72784: CALL_OW 10
// for i = array downto 1 do
72788: LD_ADDR_VAR 0 3
72792: PUSH
72793: DOUBLE
72794: LD_VAR 0 1
72798: INC
72799: ST_TO_ADDR
72800: LD_INT 1
72802: PUSH
72803: FOR_DOWNTO
72804: IFFALSE 72881
// begin index := rand ( 1 , array ) ;
72806: LD_ADDR_VAR 0 4
72810: PUSH
72811: LD_INT 1
72813: PPUSH
72814: LD_VAR 0 1
72818: PPUSH
72819: CALL_OW 12
72823: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72824: LD_ADDR_VAR 0 2
72828: PUSH
72829: LD_VAR 0 2
72833: PPUSH
72834: LD_VAR 0 2
72838: PUSH
72839: LD_INT 1
72841: PLUS
72842: PPUSH
72843: LD_VAR 0 1
72847: PUSH
72848: LD_VAR 0 4
72852: ARRAY
72853: PPUSH
72854: CALL_OW 2
72858: ST_TO_ADDR
// array := Delete ( array , index ) ;
72859: LD_ADDR_VAR 0 1
72863: PUSH
72864: LD_VAR 0 1
72868: PPUSH
72869: LD_VAR 0 4
72873: PPUSH
72874: CALL_OW 3
72878: ST_TO_ADDR
// end ;
72879: GO 72803
72881: POP
72882: POP
// end ;
72883: LD_VAR 0 2
72887: RET
// export function GetBaseMaterials ( base ) ; begin
72888: LD_INT 0
72890: PPUSH
// result := [ 0 , 0 , 0 ] ;
72891: LD_ADDR_VAR 0 2
72895: PUSH
72896: LD_INT 0
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: LD_INT 0
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: LIST
72909: ST_TO_ADDR
// if not base then
72910: LD_VAR 0 1
72914: NOT
72915: IFFALSE 72919
// exit ;
72917: GO 72968
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72919: LD_ADDR_VAR 0 2
72923: PUSH
72924: LD_VAR 0 1
72928: PPUSH
72929: LD_INT 1
72931: PPUSH
72932: CALL_OW 275
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: LD_INT 2
72944: PPUSH
72945: CALL_OW 275
72949: PUSH
72950: LD_VAR 0 1
72954: PPUSH
72955: LD_INT 3
72957: PPUSH
72958: CALL_OW 275
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: LIST
72967: ST_TO_ADDR
// end ;
72968: LD_VAR 0 2
72972: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72973: LD_INT 0
72975: PPUSH
72976: PPUSH
// result := array ;
72977: LD_ADDR_VAR 0 3
72981: PUSH
72982: LD_VAR 0 1
72986: ST_TO_ADDR
// if size > 0 then
72987: LD_VAR 0 2
72991: PUSH
72992: LD_INT 0
72994: GREATER
72995: IFFALSE 73041
// for i := array downto size do
72997: LD_ADDR_VAR 0 4
73001: PUSH
73002: DOUBLE
73003: LD_VAR 0 1
73007: INC
73008: ST_TO_ADDR
73009: LD_VAR 0 2
73013: PUSH
73014: FOR_DOWNTO
73015: IFFALSE 73039
// result := Delete ( result , result ) ;
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: LD_VAR 0 3
73026: PPUSH
73027: LD_VAR 0 3
73031: PPUSH
73032: CALL_OW 3
73036: ST_TO_ADDR
73037: GO 73014
73039: POP
73040: POP
// end ;
73041: LD_VAR 0 3
73045: RET
// export function ComExit ( unit ) ; var tmp ; begin
73046: LD_INT 0
73048: PPUSH
73049: PPUSH
// if not IsInUnit ( unit ) then
73050: LD_VAR 0 1
73054: PPUSH
73055: CALL_OW 310
73059: NOT
73060: IFFALSE 73064
// exit ;
73062: GO 73124
// tmp := IsInUnit ( unit ) ;
73064: LD_ADDR_VAR 0 3
73068: PUSH
73069: LD_VAR 0 1
73073: PPUSH
73074: CALL_OW 310
73078: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73079: LD_VAR 0 3
73083: PPUSH
73084: CALL_OW 247
73088: PUSH
73089: LD_INT 2
73091: EQUAL
73092: IFFALSE 73105
// ComExitVehicle ( unit ) else
73094: LD_VAR 0 1
73098: PPUSH
73099: CALL_OW 121
73103: GO 73114
// ComExitBuilding ( unit ) ;
73105: LD_VAR 0 1
73109: PPUSH
73110: CALL_OW 122
// result := tmp ;
73114: LD_ADDR_VAR 0 2
73118: PUSH
73119: LD_VAR 0 3
73123: ST_TO_ADDR
// end ;
73124: LD_VAR 0 2
73128: RET
// export function ComExitAll ( units ) ; var i ; begin
73129: LD_INT 0
73131: PPUSH
73132: PPUSH
// if not units then
73133: LD_VAR 0 1
73137: NOT
73138: IFFALSE 73142
// exit ;
73140: GO 73168
// for i in units do
73142: LD_ADDR_VAR 0 3
73146: PUSH
73147: LD_VAR 0 1
73151: PUSH
73152: FOR_IN
73153: IFFALSE 73166
// ComExit ( i ) ;
73155: LD_VAR 0 3
73159: PPUSH
73160: CALL 73046 0 1
73164: GO 73152
73166: POP
73167: POP
// end ;
73168: LD_VAR 0 2
73172: RET
// export function ResetHc ; begin
73173: LD_INT 0
73175: PPUSH
// InitHc ;
73176: CALL_OW 19
// hc_importance := 0 ;
73180: LD_ADDR_OWVAR 32
73184: PUSH
73185: LD_INT 0
73187: ST_TO_ADDR
// end ;
73188: LD_VAR 0 1
73192: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73193: LD_INT 0
73195: PPUSH
73196: PPUSH
73197: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73198: LD_ADDR_VAR 0 6
73202: PUSH
73203: LD_VAR 0 1
73207: PUSH
73208: LD_VAR 0 3
73212: PLUS
73213: PUSH
73214: LD_INT 2
73216: DIV
73217: ST_TO_ADDR
// if _x < 0 then
73218: LD_VAR 0 6
73222: PUSH
73223: LD_INT 0
73225: LESS
73226: IFFALSE 73243
// _x := _x * - 1 ;
73228: LD_ADDR_VAR 0 6
73232: PUSH
73233: LD_VAR 0 6
73237: PUSH
73238: LD_INT 1
73240: NEG
73241: MUL
73242: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73243: LD_ADDR_VAR 0 7
73247: PUSH
73248: LD_VAR 0 2
73252: PUSH
73253: LD_VAR 0 4
73257: PLUS
73258: PUSH
73259: LD_INT 2
73261: DIV
73262: ST_TO_ADDR
// if _y < 0 then
73263: LD_VAR 0 7
73267: PUSH
73268: LD_INT 0
73270: LESS
73271: IFFALSE 73288
// _y := _y * - 1 ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 7
73282: PUSH
73283: LD_INT 1
73285: NEG
73286: MUL
73287: ST_TO_ADDR
// result := [ _x , _y ] ;
73288: LD_ADDR_VAR 0 5
73292: PUSH
73293: LD_VAR 0 6
73297: PUSH
73298: LD_VAR 0 7
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: ST_TO_ADDR
// end ;
73307: LD_VAR 0 5
73311: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73312: LD_INT 0
73314: PPUSH
73315: PPUSH
73316: PPUSH
73317: PPUSH
// task := GetTaskList ( unit ) ;
73318: LD_ADDR_VAR 0 7
73322: PUSH
73323: LD_VAR 0 1
73327: PPUSH
73328: CALL_OW 437
73332: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73333: LD_VAR 0 7
73337: NOT
73338: PUSH
73339: LD_VAR 0 1
73343: PPUSH
73344: LD_VAR 0 2
73348: PPUSH
73349: CALL_OW 308
73353: NOT
73354: AND
73355: IFFALSE 73359
// exit ;
73357: GO 73477
// if IsInArea ( unit , area ) then
73359: LD_VAR 0 1
73363: PPUSH
73364: LD_VAR 0 2
73368: PPUSH
73369: CALL_OW 308
73373: IFFALSE 73391
// begin ComMoveToArea ( unit , goAway ) ;
73375: LD_VAR 0 1
73379: PPUSH
73380: LD_VAR 0 3
73384: PPUSH
73385: CALL_OW 113
// exit ;
73389: GO 73477
// end ; if task [ 1 ] [ 1 ] <> M then
73391: LD_VAR 0 7
73395: PUSH
73396: LD_INT 1
73398: ARRAY
73399: PUSH
73400: LD_INT 1
73402: ARRAY
73403: PUSH
73404: LD_STRING M
73406: NONEQUAL
73407: IFFALSE 73411
// exit ;
73409: GO 73477
// x := task [ 1 ] [ 2 ] ;
73411: LD_ADDR_VAR 0 5
73415: PUSH
73416: LD_VAR 0 7
73420: PUSH
73421: LD_INT 1
73423: ARRAY
73424: PUSH
73425: LD_INT 2
73427: ARRAY
73428: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73429: LD_ADDR_VAR 0 6
73433: PUSH
73434: LD_VAR 0 7
73438: PUSH
73439: LD_INT 1
73441: ARRAY
73442: PUSH
73443: LD_INT 3
73445: ARRAY
73446: ST_TO_ADDR
// if InArea ( x , y , area ) then
73447: LD_VAR 0 5
73451: PPUSH
73452: LD_VAR 0 6
73456: PPUSH
73457: LD_VAR 0 2
73461: PPUSH
73462: CALL_OW 309
73466: IFFALSE 73477
// ComStop ( unit ) ;
73468: LD_VAR 0 1
73472: PPUSH
73473: CALL_OW 141
// end ;
73477: LD_VAR 0 4
73481: RET
// export function Abs ( value ) ; begin
73482: LD_INT 0
73484: PPUSH
// result := value ;
73485: LD_ADDR_VAR 0 2
73489: PUSH
73490: LD_VAR 0 1
73494: ST_TO_ADDR
// if value < 0 then
73495: LD_VAR 0 1
73499: PUSH
73500: LD_INT 0
73502: LESS
73503: IFFALSE 73520
// result := value * - 1 ;
73505: LD_ADDR_VAR 0 2
73509: PUSH
73510: LD_VAR 0 1
73514: PUSH
73515: LD_INT 1
73517: NEG
73518: MUL
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 2
73524: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73525: LD_INT 0
73527: PPUSH
73528: PPUSH
73529: PPUSH
73530: PPUSH
73531: PPUSH
73532: PPUSH
73533: PPUSH
73534: PPUSH
// if not unit or not building then
73535: LD_VAR 0 1
73539: NOT
73540: PUSH
73541: LD_VAR 0 2
73545: NOT
73546: OR
73547: IFFALSE 73551
// exit ;
73549: GO 73777
// x := GetX ( building ) ;
73551: LD_ADDR_VAR 0 4
73555: PUSH
73556: LD_VAR 0 2
73560: PPUSH
73561: CALL_OW 250
73565: ST_TO_ADDR
// y := GetY ( building ) ;
73566: LD_ADDR_VAR 0 6
73570: PUSH
73571: LD_VAR 0 2
73575: PPUSH
73576: CALL_OW 251
73580: ST_TO_ADDR
// d := GetDir ( building ) ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_VAR 0 2
73590: PPUSH
73591: CALL_OW 254
73595: ST_TO_ADDR
// r := 4 ;
73596: LD_ADDR_VAR 0 9
73600: PUSH
73601: LD_INT 4
73603: ST_TO_ADDR
// for i := 1 to 5 do
73604: LD_ADDR_VAR 0 10
73608: PUSH
73609: DOUBLE
73610: LD_INT 1
73612: DEC
73613: ST_TO_ADDR
73614: LD_INT 5
73616: PUSH
73617: FOR_TO
73618: IFFALSE 73775
// begin _x := ShiftX ( x , d , r + i ) ;
73620: LD_ADDR_VAR 0 5
73624: PUSH
73625: LD_VAR 0 4
73629: PPUSH
73630: LD_VAR 0 8
73634: PPUSH
73635: LD_VAR 0 9
73639: PUSH
73640: LD_VAR 0 10
73644: PLUS
73645: PPUSH
73646: CALL_OW 272
73650: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73651: LD_ADDR_VAR 0 7
73655: PUSH
73656: LD_VAR 0 6
73660: PPUSH
73661: LD_VAR 0 8
73665: PPUSH
73666: LD_VAR 0 9
73670: PUSH
73671: LD_VAR 0 10
73675: PLUS
73676: PPUSH
73677: CALL_OW 273
73681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73682: LD_VAR 0 5
73686: PPUSH
73687: LD_VAR 0 7
73691: PPUSH
73692: CALL_OW 488
73696: PUSH
73697: LD_VAR 0 5
73701: PPUSH
73702: LD_VAR 0 7
73706: PPUSH
73707: CALL_OW 428
73711: PPUSH
73712: CALL_OW 247
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: LD_INT 2
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: IN
73727: NOT
73728: AND
73729: IFFALSE 73773
// begin ComMoveXY ( unit , _x , _y ) ;
73731: LD_VAR 0 1
73735: PPUSH
73736: LD_VAR 0 5
73740: PPUSH
73741: LD_VAR 0 7
73745: PPUSH
73746: CALL_OW 111
// result := [ _x , _y ] ;
73750: LD_ADDR_VAR 0 3
73754: PUSH
73755: LD_VAR 0 5
73759: PUSH
73760: LD_VAR 0 7
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: ST_TO_ADDR
// exit ;
73769: POP
73770: POP
73771: GO 73777
// end ; end ;
73773: GO 73617
73775: POP
73776: POP
// end ;
73777: LD_VAR 0 3
73781: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73782: LD_INT 0
73784: PPUSH
73785: PPUSH
73786: PPUSH
// result := 0 ;
73787: LD_ADDR_VAR 0 3
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73795: LD_VAR 0 1
73799: PUSH
73800: LD_INT 0
73802: LESS
73803: PUSH
73804: LD_VAR 0 1
73808: PUSH
73809: LD_INT 8
73811: GREATER
73812: OR
73813: PUSH
73814: LD_VAR 0 2
73818: PUSH
73819: LD_INT 0
73821: LESS
73822: OR
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_INT 8
73831: GREATER
73832: OR
73833: IFFALSE 73837
// exit ;
73835: GO 73912
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73837: LD_ADDR_VAR 0 4
73841: PUSH
73842: LD_INT 22
73844: PUSH
73845: LD_VAR 0 2
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PPUSH
73854: CALL_OW 69
73858: PUSH
73859: FOR_IN
73860: IFFALSE 73910
// begin un := UnitShoot ( i ) ;
73862: LD_ADDR_VAR 0 5
73866: PUSH
73867: LD_VAR 0 4
73871: PPUSH
73872: CALL_OW 504
73876: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73877: LD_VAR 0 5
73881: PPUSH
73882: CALL_OW 255
73886: PUSH
73887: LD_VAR 0 1
73891: EQUAL
73892: IFFALSE 73908
// begin result := un ;
73894: LD_ADDR_VAR 0 3
73898: PUSH
73899: LD_VAR 0 5
73903: ST_TO_ADDR
// exit ;
73904: POP
73905: POP
73906: GO 73912
// end ; end ;
73908: GO 73859
73910: POP
73911: POP
// end ;
73912: LD_VAR 0 3
73916: RET
// export function GetCargoBay ( units ) ; begin
73917: LD_INT 0
73919: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73920: LD_ADDR_VAR 0 2
73924: PUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: LD_INT 2
73932: PUSH
73933: LD_INT 34
73935: PUSH
73936: LD_INT 12
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 34
73945: PUSH
73946: LD_INT 51
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 34
73955: PUSH
73956: LD_INT 32
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 34
73965: PUSH
73966: LD_EXP 56
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 72
73986: ST_TO_ADDR
// end ;
73987: LD_VAR 0 2
73991: RET
// export function Negate ( value ) ; begin
73992: LD_INT 0
73994: PPUSH
// result := not value ;
73995: LD_ADDR_VAR 0 2
73999: PUSH
74000: LD_VAR 0 1
74004: NOT
74005: ST_TO_ADDR
// end ;
74006: LD_VAR 0 2
74010: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74011: LD_INT 0
74013: PPUSH
// if x1 = x2 then
74014: LD_VAR 0 1
74018: PUSH
74019: LD_VAR 0 3
74023: EQUAL
74024: IFFALSE 74058
// begin if y1 > y2 then
74026: LD_VAR 0 2
74030: PUSH
74031: LD_VAR 0 4
74035: GREATER
74036: IFFALSE 74048
// result := 0 else
74038: LD_ADDR_VAR 0 5
74042: PUSH
74043: LD_INT 0
74045: ST_TO_ADDR
74046: GO 74056
// result := 3 ;
74048: LD_ADDR_VAR 0 5
74052: PUSH
74053: LD_INT 3
74055: ST_TO_ADDR
// exit ;
74056: GO 74144
// end ; if y1 = y2 then
74058: LD_VAR 0 2
74062: PUSH
74063: LD_VAR 0 4
74067: EQUAL
74068: IFFALSE 74102
// begin if x1 > x2 then
74070: LD_VAR 0 1
74074: PUSH
74075: LD_VAR 0 3
74079: GREATER
74080: IFFALSE 74092
// result := 1 else
74082: LD_ADDR_VAR 0 5
74086: PUSH
74087: LD_INT 1
74089: ST_TO_ADDR
74090: GO 74100
// result := 4 ;
74092: LD_ADDR_VAR 0 5
74096: PUSH
74097: LD_INT 4
74099: ST_TO_ADDR
// exit ;
74100: GO 74144
// end ; if x1 > x2 and y1 > y2 then
74102: LD_VAR 0 1
74106: PUSH
74107: LD_VAR 0 3
74111: GREATER
74112: PUSH
74113: LD_VAR 0 2
74117: PUSH
74118: LD_VAR 0 4
74122: GREATER
74123: AND
74124: IFFALSE 74136
// result := 2 else
74126: LD_ADDR_VAR 0 5
74130: PUSH
74131: LD_INT 2
74133: ST_TO_ADDR
74134: GO 74144
// result := 5 ;
74136: LD_ADDR_VAR 0 5
74140: PUSH
74141: LD_INT 5
74143: ST_TO_ADDR
// end ;
74144: LD_VAR 0 5
74148: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74149: LD_INT 0
74151: PPUSH
74152: PPUSH
// if not driver or not IsInUnit ( driver ) then
74153: LD_VAR 0 1
74157: NOT
74158: PUSH
74159: LD_VAR 0 1
74163: PPUSH
74164: CALL_OW 310
74168: NOT
74169: OR
74170: IFFALSE 74174
// exit ;
74172: GO 74264
// vehicle := IsInUnit ( driver ) ;
74174: LD_ADDR_VAR 0 3
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: CALL_OW 310
74188: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74189: LD_VAR 0 1
74193: PPUSH
74194: LD_STRING \
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: LD_INT 0
74208: PUSH
74209: LD_INT 0
74211: PUSH
74212: LD_INT 0
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: PUSH
74224: LD_STRING E
74226: PUSH
74227: LD_INT 0
74229: PUSH
74230: LD_INT 0
74232: PUSH
74233: LD_VAR 0 3
74237: PUSH
74238: LD_INT 0
74240: PUSH
74241: LD_INT 0
74243: PUSH
74244: LD_INT 0
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PPUSH
74260: CALL_OW 446
// end ;
74264: LD_VAR 0 2
74268: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74269: LD_INT 0
74271: PPUSH
74272: PPUSH
// if not driver or not IsInUnit ( driver ) then
74273: LD_VAR 0 1
74277: NOT
74278: PUSH
74279: LD_VAR 0 1
74283: PPUSH
74284: CALL_OW 310
74288: NOT
74289: OR
74290: IFFALSE 74294
// exit ;
74292: GO 74384
// vehicle := IsInUnit ( driver ) ;
74294: LD_ADDR_VAR 0 3
74298: PUSH
74299: LD_VAR 0 1
74303: PPUSH
74304: CALL_OW 310
74308: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74309: LD_VAR 0 1
74313: PPUSH
74314: LD_STRING \
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: LD_INT 0
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: PUSH
74344: LD_STRING E
74346: PUSH
74347: LD_INT 0
74349: PUSH
74350: LD_INT 0
74352: PUSH
74353: LD_VAR 0 3
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: LD_INT 0
74363: PUSH
74364: LD_INT 0
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PPUSH
74380: CALL_OW 447
// end ;
74384: LD_VAR 0 2
74388: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74389: LD_INT 0
74391: PPUSH
74392: PPUSH
74393: PPUSH
// tmp := [ ] ;
74394: LD_ADDR_VAR 0 5
74398: PUSH
74399: EMPTY
74400: ST_TO_ADDR
// for i in units do
74401: LD_ADDR_VAR 0 4
74405: PUSH
74406: LD_VAR 0 1
74410: PUSH
74411: FOR_IN
74412: IFFALSE 74450
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74414: LD_ADDR_VAR 0 5
74418: PUSH
74419: LD_VAR 0 5
74423: PPUSH
74424: LD_VAR 0 5
74428: PUSH
74429: LD_INT 1
74431: PLUS
74432: PPUSH
74433: LD_VAR 0 4
74437: PPUSH
74438: CALL_OW 256
74442: PPUSH
74443: CALL_OW 2
74447: ST_TO_ADDR
74448: GO 74411
74450: POP
74451: POP
// if not tmp then
74452: LD_VAR 0 5
74456: NOT
74457: IFFALSE 74461
// exit ;
74459: GO 74509
// if asc then
74461: LD_VAR 0 2
74465: IFFALSE 74489
// result := SortListByListAsc ( units , tmp ) else
74467: LD_ADDR_VAR 0 3
74471: PUSH
74472: LD_VAR 0 1
74476: PPUSH
74477: LD_VAR 0 5
74481: PPUSH
74482: CALL_OW 76
74486: ST_TO_ADDR
74487: GO 74509
// result := SortListByListDesc ( units , tmp ) ;
74489: LD_ADDR_VAR 0 3
74493: PUSH
74494: LD_VAR 0 1
74498: PPUSH
74499: LD_VAR 0 5
74503: PPUSH
74504: CALL_OW 77
74508: ST_TO_ADDR
// end ;
74509: LD_VAR 0 3
74513: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74514: LD_INT 0
74516: PPUSH
74517: PPUSH
// task := GetTaskList ( mech ) ;
74518: LD_ADDR_VAR 0 4
74522: PUSH
74523: LD_VAR 0 1
74527: PPUSH
74528: CALL_OW 437
74532: ST_TO_ADDR
// if not task then
74533: LD_VAR 0 4
74537: NOT
74538: IFFALSE 74542
// exit ;
74540: GO 74584
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74542: LD_ADDR_VAR 0 3
74546: PUSH
74547: LD_VAR 0 4
74551: PUSH
74552: LD_INT 1
74554: ARRAY
74555: PUSH
74556: LD_INT 1
74558: ARRAY
74559: PUSH
74560: LD_STRING r
74562: EQUAL
74563: PUSH
74564: LD_VAR 0 4
74568: PUSH
74569: LD_INT 1
74571: ARRAY
74572: PUSH
74573: LD_INT 4
74575: ARRAY
74576: PUSH
74577: LD_VAR 0 2
74581: EQUAL
74582: AND
74583: ST_TO_ADDR
// end ;
74584: LD_VAR 0 3
74588: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74589: LD_INT 0
74591: PPUSH
// SetDir ( unit , d ) ;
74592: LD_VAR 0 1
74596: PPUSH
74597: LD_VAR 0 4
74601: PPUSH
74602: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74606: LD_VAR 0 1
74610: PPUSH
74611: LD_VAR 0 2
74615: PPUSH
74616: LD_VAR 0 3
74620: PPUSH
74621: LD_VAR 0 5
74625: PPUSH
74626: CALL_OW 48
// end ;
74630: LD_VAR 0 6
74634: RET
// export function ToNaturalNumber ( number ) ; begin
74635: LD_INT 0
74637: PPUSH
// result := number div 1 ;
74638: LD_ADDR_VAR 0 2
74642: PUSH
74643: LD_VAR 0 1
74647: PUSH
74648: LD_INT 1
74650: DIV
74651: ST_TO_ADDR
// if number < 0 then
74652: LD_VAR 0 1
74656: PUSH
74657: LD_INT 0
74659: LESS
74660: IFFALSE 74670
// result := 0 ;
74662: LD_ADDR_VAR 0 2
74666: PUSH
74667: LD_INT 0
74669: ST_TO_ADDR
// end ; end_of_file
74670: LD_VAR 0 2
74674: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74675: LD_VAR 0 1
74679: PUSH
74680: LD_INT 200
74682: DOUBLE
74683: GREATEREQUAL
74684: IFFALSE 74692
74686: LD_INT 299
74688: DOUBLE
74689: LESSEQUAL
74690: IFTRUE 74694
74692: GO 74726
74694: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74695: LD_VAR 0 1
74699: PPUSH
74700: LD_VAR 0 2
74704: PPUSH
74705: LD_VAR 0 3
74709: PPUSH
74710: LD_VAR 0 4
74714: PPUSH
74715: LD_VAR 0 5
74719: PPUSH
74720: CALL 32037 0 5
74724: GO 74803
74726: LD_INT 300
74728: DOUBLE
74729: GREATEREQUAL
74730: IFFALSE 74738
74732: LD_INT 399
74734: DOUBLE
74735: LESSEQUAL
74736: IFTRUE 74740
74738: GO 74802
74740: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74741: LD_VAR 0 1
74745: PPUSH
74746: LD_VAR 0 2
74750: PPUSH
74751: LD_VAR 0 3
74755: PPUSH
74756: LD_VAR 0 4
74760: PPUSH
74761: LD_VAR 0 5
74765: PPUSH
74766: LD_VAR 0 6
74770: PPUSH
74771: LD_VAR 0 7
74775: PPUSH
74776: LD_VAR 0 8
74780: PPUSH
74781: LD_VAR 0 9
74785: PPUSH
74786: LD_VAR 0 10
74790: PPUSH
74791: LD_VAR 0 11
74795: PPUSH
74796: CALL 29925 0 11
74800: GO 74803
74802: POP
// end ;
74803: PPOPN 11
74805: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 2
74815: PPUSH
74816: LD_VAR 0 3
74820: PPUSH
74821: LD_VAR 0 4
74825: PPUSH
74826: LD_VAR 0 5
74830: PPUSH
74831: CALL 32019 0 5
// end ; end_of_file
74835: PPOPN 5
74837: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74838: LD_VAR 0 1
74842: PPUSH
74843: LD_VAR 0 2
74847: PPUSH
74848: LD_VAR 0 3
74852: PPUSH
74853: LD_VAR 0 4
74857: PPUSH
74858: LD_VAR 0 5
74862: PPUSH
74863: LD_VAR 0 6
74867: PPUSH
74868: CALL 18733 0 6
// end ;
74872: PPOPN 6
74874: END
