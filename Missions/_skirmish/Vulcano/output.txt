// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 880 0 0
// PrepareRussian ;
  23: CALL 3532 0 0
// PrepareLegion ;
  27: CALL 7063 0 0
// Action ;
  31: CALL 10742 0 0
// InitArt ;
  35: CALL 201 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 7
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 15
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 16
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// function InitArt ; begin
 201: LD_INT 0
 203: PPUSH
// SetArtifactRes ( your_side , true ) ;
 204: LD_OWVAR 2
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 467
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// us_force := [ ] ;
 253: LD_ADDR_EXP 20
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 260: LD_INT 17
 262: PPUSH
 263: CALL_OW 355
// PrepareAllianceAI ( ) ;
 267: CALL 16079 0 0
// uc_side := 1 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// uc_nation := nation_american ;
 279: LD_ADDR_OWVAR 21
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// hc_gallery :=  ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING 
 294: ST_TO_ADDR
// hc_name :=  ;
 295: LD_ADDR_OWVAR 26
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_importance := 0 ;
 303: LD_ADDR_OWVAR 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// for i = 1 to 11 do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_INT 11
 323: PUSH
 324: FOR_TO
 325: IFFALSE 378
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 327: LD_INT 0
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: PPUSH
 341: LD_EXP 21
 345: PPUSH
 346: CALL_OW 380
// un := CreateHuman ;
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// us_force := us_force ^ un ;
 360: LD_ADDR_EXP 20
 364: PUSH
 365: LD_EXP 20
 369: PUSH
 370: LD_VAR 0 4
 374: ADD
 375: ST_TO_ADDR
// end ;
 376: GO 324
 378: POP
 379: POP
// hc_importance := 100 ;
 380: LD_ADDR_OWVAR 32
 384: PUSH
 385: LD_INT 100
 387: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_EXP 21
 398: PPUSH
 399: CALL_OW 380
// us_commander := CreateHuman ;
 403: LD_ADDR_EXP 19
 407: PUSH
 408: CALL_OW 44
 412: ST_TO_ADDR
// player_commander := us_commander ;
 413: LD_ADDR_EXP 10
 417: PUSH
 418: LD_EXP 19
 422: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_STRING text
 430: PPUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: LD_OWVAR 67
 449: ARRAY
 450: PPUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 5
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PPUSH
 471: LD_INT -5
 473: PUSH
 474: LD_EXP 19
 478: PUSH
 479: LD_INT -3
 481: PUSH
 482: LD_INT -2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_EXP 20
 495: ADD
 496: PPUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 5
 525: PUSH
 526: LD_INT 5
 528: PUSH
 529: LD_INT 1
 531: NEG
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 42
 555: ST_TO_ADDR
// team := team ^ us_commander ;
 556: LD_ADDR_VAR 0 5
 560: PUSH
 561: LD_VAR 0 5
 565: PUSH
 566: LD_EXP 19
 570: ADD
 571: ST_TO_ADDR
// for i = 1 to team do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_VAR 0 5
 586: PUSH
 587: FOR_TO
 588: IFFALSE 613
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 590: LD_VAR 0 5
 594: PUSH
 595: LD_VAR 0 2
 599: ARRAY
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 587
 613: POP
 614: POP
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 620: LD_OWVAR 1
 624: PUSH
 625: LD_INT 73500
 627: LESS
 628: IFFALSE 655
 630: GO 632
 632: DISABLE
// begin enable ;
 633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 634: LD_INT 1
 636: PPUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 12
 644: PPUSH
 645: LD_INT 24
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL_OW 55
// end ;
 655: END
// every 1 1$10 do var time , p , l ;
 656: GO 658
 658: DISABLE
 659: LD_INT 0
 661: PPUSH
 662: PPUSH
 663: PPUSH
// begin time := 0 0$44 ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_INT 1540
 671: ST_TO_ADDR
// l := 0 ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 680: LD_VAR 0 1
 684: PPUSH
 685: CALL_OW 67
// l := l + 1 ;
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 703: LD_INT 12
 705: PPUSH
 706: CALL_OW 435
 710: PUSH
 711: LD_INT 30
 713: LESS
 714: IFFALSE 773
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 5
 721: PPUSH
 722: CALL_OW 12
 726: PPUSH
 727: LD_INT 12
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 737: LD_INT 1155
 739: PPUSH
 740: LD_INT 1540
 742: PPUSH
 743: CALL_OW 12
 747: PPUSH
 748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_INT 0
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL_OW 12
 788: ST_TO_ADDR
// if p then
 789: LD_VAR 0 2
 793: IFFALSE 828
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 795: LD_INT 105
 797: PPUSH
 798: LD_INT 350
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 15
 835: PUSH
 836: LD_INT 13
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_OWVAR 67
 851: ARRAY
 852: MOD
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: IFFALSE 873
// time := time + 2 2$00 ;
 859: LD_ADDR_VAR 0 1
 863: PUSH
 864: LD_VAR 0 1
 868: PUSH
 869: LD_INT 4200
 871: PLUS
 872: ST_TO_ADDR
// end until false ;
 873: LD_INT 0
 875: IFFALSE 680
// end ; end_of_file
 877: PPOPN 3
 879: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , p , russian_in_base ; begin
 880: LD_INT 0
 882: PPUSH
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 890: LD_ADDR_VAR 0 3
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 21
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 924: LD_ADDR_VAR 0 4
 928: PUSH
 929: LD_INT 470
 931: PUSH
 932: LD_INT 370
 934: PUSH
 935: LD_INT 290
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_OWVAR 67
 947: ARRAY
 948: ST_TO_ADDR
// case Difficulty of 2 :
 949: LD_OWVAR 67
 953: PUSH
 954: LD_INT 2
 956: DOUBLE
 957: EQUAL
 958: IFTRUE 962
 960: GO 993
 962: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: CALL_OW 65
// end ; 3 :
 991: GO 1069
 993: LD_INT 3
 995: DOUBLE
 996: EQUAL
 997: IFTRUE 1001
 999: GO 1068
1001: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1002: LD_VAR 0 3
1006: PPUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 32
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1030: LD_VAR 0 3
1034: PPUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 72
1049: PUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 3
1055: PPUSH
1056: CALL_OW 12
1060: ARRAY
1061: PPUSH
1062: CALL_OW 65
// end ; end ;
1066: GO 1069
1068: POP
// for i = 1 to filter do
1069: LD_ADDR_VAR 0 2
1073: PUSH
1074: DOUBLE
1075: LD_INT 1
1077: DEC
1078: ST_TO_ADDR
1079: LD_VAR 0 3
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1122
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1087: LD_VAR 0 3
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 4
1102: PUSH
1103: LD_INT 29
1105: NEG
1106: PPUSH
1107: LD_INT 29
1109: PPUSH
1110: CALL_OW 12
1114: PLUS
1115: PPUSH
1116: CALL_OW 234
1120: GO 1084
1122: POP
1123: POP
// SetBName ( us_depot , Vulcano1 ) ;
1124: LD_INT 50
1126: PPUSH
1127: LD_STRING Vulcano1
1129: PPUSH
1130: CALL_OW 500
// hc_importance := 0 ;
1134: LD_ADDR_OWVAR 32
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// uc_side := 3 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// uc_nation := nation_russian ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 3
1157: ST_TO_ADDR
// russian_in_base := [ ] ;
1158: LD_ADDR_VAR 0 8
1162: PUSH
1163: EMPTY
1164: ST_TO_ADDR
// area := RandPointsFromArea ( 82 , 137 , 106 , 152 , 10 ) ;
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_INT 82
1172: PPUSH
1173: LD_INT 137
1175: PPUSH
1176: LD_INT 106
1178: PPUSH
1179: LD_INT 152
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: CALL 1562 0 5
1189: ST_TO_ADDR
// p := 1 ;
1190: LD_ADDR_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_INT 6
1210: PUSH
1211: LD_INT 6
1213: PUSH
1214: LD_INT 7
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_OWVAR 67
1226: ARRAY
1227: PUSH
1228: FOR_TO
1229: IFFALSE 1341
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1231: LD_INT 0
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 4
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_OWVAR 67
1255: ARRAY
1256: PPUSH
1257: CALL_OW 380
// un := CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1271: LD_ADDR_VAR 0 8
1275: PUSH
1276: LD_VAR 0 8
1280: PUSH
1281: LD_VAR 0 5
1285: ADD
1286: ST_TO_ADDR
// PlaceUnitXY ( un , area [ p ] , area [ p + 1 ] , false ) ;
1287: LD_VAR 0 5
1291: PPUSH
1292: LD_VAR 0 6
1296: PUSH
1297: LD_VAR 0 7
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 7
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 48
// p := p + 2 ;
1325: LD_ADDR_VAR 0 7
1329: PUSH
1330: LD_VAR 0 7
1334: PUSH
1335: LD_INT 2
1337: PLUS
1338: ST_TO_ADDR
// end ;
1339: GO 1228
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1348: LD_INT 50
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 2052 0 2
1358: PUSH
1359: LD_INT 40
1361: LESS
1362: IFFALSE 1559
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
// begin uc_side := 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// uc_nation := nation_american ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_importance := 0 ;
1387: LD_ADDR_OWVAR 32
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// for i = 1 to 7 do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: DOUBLE
1401: LD_INT 1
1403: DEC
1404: ST_TO_ADDR
1405: LD_INT 7
1407: PUSH
1408: FOR_TO
1409: IFFALSE 1473
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 12
1424: PPUSH
1425: LD_EXP 21
1429: PPUSH
1430: CALL_OW 380
// un := CreateHuman ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: CALL_OW 44
1443: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 7
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// SetLives ( un , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 234
// end ;
1471: GO 1408
1473: POP
1474: POP
// for i = 1 to 5 do
1475: LD_ADDR_VAR 0 1
1479: PUSH
1480: DOUBLE
1481: LD_INT 1
1483: DEC
1484: ST_TO_ADDR
1485: LD_INT 5
1487: PUSH
1488: FOR_TO
1489: IFFALSE 1557
// begin PrepareHuman ( false , 4 , us_skill ) ;
1491: LD_INT 0
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: LD_EXP 21
1501: PPUSH
1502: CALL_OW 380
// SetDir ( un , 1 ) ;
1506: LD_VAR 0 2
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 233
// un := CreateHuman ;
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 23
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// SetLives ( un , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_INT 10
1550: PPUSH
1551: CALL_OW 234
// end ;
1555: GO 1488
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 2
1561: END
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
// list := [ ] ;
1567: LD_ADDR_VAR 0 7
1571: PUSH
1572: EMPTY
1573: ST_TO_ADDR
// for i = 1 to num do
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_VAR 0 5
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1646
// begin list := list ^ Rand ( x1 , x2 ) ;
1592: LD_ADDR_VAR 0 7
1596: PUSH
1597: LD_VAR 0 7
1601: PUSH
1602: LD_VAR 0 1
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 12
1616: ADD
1617: ST_TO_ADDR
// list := list ^ Rand ( y1 , y2 ) ;
1618: LD_ADDR_VAR 0 7
1622: PUSH
1623: LD_VAR 0 7
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL_OW 12
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1589
1646: POP
1647: POP
// result := list ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: LD_VAR 0 7
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 6
1662: RET
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1663: LD_INT 0
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// c := Rand ( 1 , 3 ) ;
1669: LD_ADDR_VAR 0 5
1673: PUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 12
1684: ST_TO_ADDR
// for i = 1 to list do
1685: LD_ADDR_VAR 0 6
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_VAR 0 1
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1883
// for ta in filter do
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: FOR_IN
1714: IFFALSE 1879
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_VAR 0 6
1725: ARRAY
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 296
1736: PUSH
1737: LD_INT 15
1739: LESSEQUAL
1740: IFFALSE 1877
// begin case c of 1 :
1742: LD_VAR 0 5
1746: PUSH
1747: LD_INT 1
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1793
1755: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1756: LD_VAR 0 1
1760: PUSH
1761: LD_VAR 0 6
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 250
1776: PPUSH
1777: LD_VAR 0 4
1781: PPUSH
1782: CALL_OW 251
1786: PPUSH
1787: CALL_OW 154
1791: GO 1877
1793: LD_INT 2
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1865
1801: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1802: LD_VAR 0 1
1806: PUSH
1807: LD_VAR 0 6
1811: ARRAY
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL_OW 250
1822: PUSH
1823: LD_INT 1
1825: NEG
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL_OW 12
1834: PLUS
1835: PPUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 251
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: PLUS
1858: PPUSH
1859: CALL_OW 153
1863: GO 1877
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1876
1873: POP
// ; end ;
1874: GO 1877
1876: POP
// end ; end ;
1877: GO 1713
1879: POP
1880: POP
1881: GO 1700
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// for i = 1 to n do
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 1
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2045
// begin uc_side := 0 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// uc_nation := 0 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 0
1928: ST_TO_ADDR
// hc_class := class_apeman ;
1929: LD_ADDR_OWVAR 28
1933: PUSH
1934: LD_INT 12
1936: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1937: LD_ADDR_OWVAR 31
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_name :=  ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING 
1967: ST_TO_ADDR
// hc_gallery :=  ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING 
1975: ST_TO_ADDR
// hc_importance := 0 ;
1976: LD_ADDR_OWVAR 32
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// un := CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 19
2001: PUSH
2002: LD_INT 20
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: CALL_OW 12
2019: ARRAY
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2028: LD_INT 1155
2030: PPUSH
2031: LD_INT 5355
2033: PPUSH
2034: CALL_OW 12
2038: PPUSH
2039: CALL_OW 67
// end ;
2043: GO 1910
2045: POP
2046: POP
// end ;
2047: LD_VAR 0 2
2051: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2052: LD_INT 0
2054: PPUSH
2055: PPUSH
2056: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2057: LD_ADDR_VAR 0 4
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: CALL_OW 74
2088: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_VAR 0 1
2098: PPUSH
2099: LD_VAR 0 4
2103: PPUSH
2104: CALL_OW 296
2108: ST_TO_ADDR
// if dist >= 9999 then
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 9999
2116: GREATEREQUAL
2117: IFFALSE 2130
// result := - 1 else
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: LD_INT 1
2126: NEG
2127: ST_TO_ADDR
2128: GO 2140
// result := dist ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 5
2139: ST_TO_ADDR
// end ;
2140: LD_VAR 0 3
2144: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// tmp := 9999 ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_INT 9999
2158: ST_TO_ADDR
// for i = 1 to plist do
2159: LD_ADDR_VAR 0 4
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2249
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2177: LD_VAR 0 1
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PPUSH
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL 2052 0 2
2197: PUSH
2198: LD_VAR 0 5
2202: LESS
2203: IFFALSE 2247
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 4
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL 2052 0 2
2230: ST_TO_ADDR
// unit := plist [ i ] ;
2231: LD_ADDR_VAR 0 6
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_VAR 0 4
2245: ARRAY
2246: ST_TO_ADDR
// end ;
2247: GO 2174
2249: POP
2250: POP
// result := unit ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: LD_VAR 0 6
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 3
2265: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_INT 1000
2280: PUSH
2281: LD_INT 2500
2283: PUSH
2284: LD_INT 5000
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_OWVAR 67
2296: ARRAY
2297: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 2
2307: PUSH
2308: LD_INT 1
2310: NEG
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_OWVAR 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PPUSH
2338: CALL_OW 69
2342: MUL
2343: PUSH
2344: LD_INT 30
2346: MUL
2347: PLUS
2348: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_INT 10
2366: MUL
2367: PLUS
2368: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_VAR 0 2
2378: PUSH
2379: LD_INT 1
2381: NEG
2382: PUSH
2383: LD_EXP 15
2387: MUL
2388: PUSH
2389: LD_INT 20
2391: MUL
2392: PLUS
2393: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_OWVAR 1
2412: PUSH
2413: LD_INT 35
2415: DIVREAL
2416: PUSH
2417: LD_INT 60
2419: DIVREAL
2420: MUL
2421: PUSH
2422: LD_INT 25
2424: MUL
2425: PLUS
2426: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PUSH
2437: LD_EXP 17
2441: PUSH
2442: LD_INT 15
2444: MUL
2445: PLUS
2446: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: NEG
2460: PUSH
2461: LD_EXP 18
2465: MUL
2466: PUSH
2467: LD_INT 1000
2469: MUL
2470: PLUS
2471: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_INT 5
2489: MUL
2490: PLUS
2491: ST_TO_ADDR
// result := points ;
2492: LD_ADDR_VAR 0 1
2496: PUSH
2497: LD_VAR 0 2
2501: ST_TO_ADDR
// end ; end_of_file
2502: LD_VAR 0 1
2506: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL 31943 0 1
// if GetSide ( un ) = your_side then
2516: LD_VAR 0 1
2520: PPUSH
2521: CALL_OW 255
2525: PUSH
2526: LD_OWVAR 2
2530: EQUAL
2531: IFFALSE 2547
// dead_counter := dead_counter + 1 ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: LD_EXP 14
2542: PUSH
2543: LD_INT 1
2545: PLUS
2546: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 81
2559: PUSH
2560: LD_OWVAR 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: IN
2574: IFFALSE 2590
// kill_counter := kill_counter + 1 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_EXP 15
2585: PUSH
2586: LD_INT 1
2588: PLUS
2589: ST_TO_ADDR
// if un = player_commander then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 10
2599: EQUAL
2600: IFFALSE 2609
// YouLost ( vulcano-lost ) ;
2602: LD_STRING vulcano-lost
2604: PPUSH
2605: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: IN
2643: IFFALSE 2759
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_INT 33
2657: EQUAL
2658: PUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 266
2668: PUSH
2669: LD_INT 28
2671: EQUAL
2672: OR
2673: IFFALSE 2759
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_EXP 26
2684: PUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: ADD
2695: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_EXP 26
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: CALL_OW 250
2715: ADD
2716: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2717: LD_ADDR_EXP 26
2721: PUSH
2722: LD_EXP 26
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 251
2736: ADD
2737: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2738: LD_ADDR_EXP 26
2742: PUSH
2743: LD_EXP 26
2747: PUSH
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL_OW 254
2757: ADD
2758: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2759: LD_VAR 0 1
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 8
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: IN
2793: IFFALSE 2937
// begin if GetBType ( un ) = b_barracks then
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 266
2804: PUSH
2805: LD_INT 5
2807: EQUAL
2808: IFFALSE 2826
// legion_blist := legion_blist ^ b_armoury else
2810: LD_ADDR_EXP 34
2814: PUSH
2815: LD_EXP 34
2819: PUSH
2820: LD_INT 4
2822: ADD
2823: ST_TO_ADDR
2824: GO 2874
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 6
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: IN
2850: NOT
2851: IFFALSE 2874
// legion_blist := legion_blist ^ GetBType ( un ) ;
2853: LD_ADDR_EXP 34
2857: PUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 266
2872: ADD
2873: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: LD_EXP 34
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 250
2893: ADD
2894: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2895: LD_ADDR_EXP 34
2899: PUSH
2900: LD_EXP 34
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 251
2914: ADD
2915: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2916: LD_ADDR_EXP 34
2920: PUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 254
2935: ADD
2936: ST_TO_ADDR
// end ; if un in legion_force then
2937: LD_VAR 0 1
2941: PUSH
2942: LD_EXP 31
2946: IN
2947: IFFALSE 2965
// legion_force := legion_force diff un ;
2949: LD_ADDR_EXP 31
2953: PUSH
2954: LD_EXP 31
2958: PUSH
2959: LD_VAR 0 1
2963: DIFF
2964: ST_TO_ADDR
// if un in ru_force then
2965: LD_VAR 0 1
2969: PUSH
2970: LD_EXP 23
2974: IN
2975: IFFALSE 2993
// ru_force := ru_force diff un ;
2977: LD_ADDR_EXP 23
2981: PUSH
2982: LD_EXP 23
2986: PUSH
2987: LD_VAR 0 1
2991: DIFF
2992: ST_TO_ADDR
// if un in al_force then
2993: LD_VAR 0 1
2997: PUSH
2998: LD_EXP 38
3002: IN
3003: IFFALSE 3021
// al_force := al_force diff un ;
3005: LD_ADDR_EXP 38
3009: PUSH
3010: LD_EXP 38
3014: PUSH
3015: LD_VAR 0 1
3019: DIFF
3020: ST_TO_ADDR
// end ;
3021: PPOPN 1
3023: END
// on BuildingComplete ( b ) do var i ;
3024: LD_INT 0
3026: PPUSH
// begin if GetSide ( b ) = 8 then
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 255
3036: PUSH
3037: LD_INT 8
3039: EQUAL
3040: IFFALSE 3080
// for i = 1 to 4 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 4
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3078
// legion_blist := Delete ( legion_blist , 1 ) ;
3058: LD_ADDR_EXP 34
3062: PUSH
3063: LD_EXP 34
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
3076: GO 3055
3078: POP
3079: POP
// if GetSide ( b ) = 3 then
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: PUSH
3090: LD_INT 3
3092: EQUAL
3093: IFFALSE 3133
// for i = 1 to 4 do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_INT 4
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3131
// ru_blist := Delete ( ru_blist , 1 ) ;
3111: LD_ADDR_EXP 26
3115: PUSH
3116: LD_EXP 26
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 3
3128: ST_TO_ADDR
3129: GO 3108
3131: POP
3132: POP
// end ;
3133: PPOPN 2
3135: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 264
3145: PUSH
3146: LD_INT 51
3148: PUSH
3149: LD_INT 48
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: IN
3156: NOT
3157: IFFALSE 3205
// begin if GetSide ( veh ) = 3 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 3
3171: EQUAL
3172: IFFALSE 3205
// begin ComMoveXY ( veh , 149 , 8 ) ;
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 149
3181: PPUSH
3182: LD_INT 8
3184: PPUSH
3185: CALL_OW 111
// ru_force := ru_force ^ veh ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 1
3203: ADD
3204: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 31
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: IN
3225: NOT
3226: IFFALSE 3259
// begin if GetSide ( veh ) = 8 then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 255
3237: PUSH
3238: LD_INT 8
3240: EQUAL
3241: IFFALSE 3259
// legion_force := legion_force ^ veh ;
3243: LD_ADDR_EXP 31
3247: PUSH
3248: LD_EXP 31
3252: PUSH
3253: LD_VAR 0 1
3257: ADD
3258: ST_TO_ADDR
// end ; if GetSide ( veh ) = 7 and your_side <> 7 then
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 255
3268: PUSH
3269: LD_INT 7
3271: EQUAL
3272: PUSH
3273: LD_OWVAR 2
3277: PUSH
3278: LD_INT 7
3280: NONEQUAL
3281: AND
3282: IFFALSE 3300
// al_force := al_force ^ veh ;
3284: LD_ADDR_EXP 38
3288: PUSH
3289: LD_EXP 38
3293: PUSH
3294: LD_VAR 0 1
3298: ADD
3299: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 255
3309: PUSH
3310: LD_OWVAR 2
3314: EQUAL
3315: IFFALSE 3331
// veh_counter := veh_counter + 1 ;
3317: LD_ADDR_EXP 16
3321: PUSH
3322: LD_EXP 16
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: ST_TO_ADDR
// end ;
3331: PPOPN 2
3333: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 255
3343: PUSH
3344: LD_OWVAR 2
3348: NONEQUAL
3349: IFFALSE 3365
// sib_contamin_counter := sib_contamin_counter + 1 ;
3351: LD_ADDR_EXP 18
3355: PUSH
3356: LD_EXP 18
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: ST_TO_ADDR
// end ;
3365: PPOPN 3
3367: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL_OW 255
3377: PUSH
3378: LD_OWVAR 2
3382: EQUAL
3383: IFFALSE 3399
// tech_counter := tech_counter + 1 ;
3385: LD_ADDR_EXP 17
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3399: LD_VAR 0 1
3403: PUSH
3404: LD_INT 53
3406: EQUAL
3407: PUSH
3408: LD_OWVAR 2
3412: PUSH
3413: LD_INT 1
3415: EQUAL
3416: AND
3417: IFFALSE 3432
// SetTech ( 80 , 1 , state_researched ) ;
3419: LD_INT 80
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// end ;
3432: PPOPN 2
3434: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do var i ;
3435: LD_INT 25
3437: PUSH
3438: LD_INT 12
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 9
3452: LESS
3453: IFFALSE 3495
3455: GO 3457
3457: DISABLE
3458: LD_INT 0
3460: PPUSH
// begin enable ;
3461: ENABLE
// i := FilterAllUnits ( [ f_class , class_apeman ] ) ;
3462: LD_ADDR_VAR 0 1
3466: PUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 12
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 69
3481: ST_TO_ADDR
// PrepareApeman ( 8 - i ) ;
3482: LD_INT 8
3484: PUSH
3485: LD_VAR 0 1
3489: MINUS
3490: PPUSH
3491: CALL 1890 0 1
// end ;
3495: PPOPN 1
3497: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL 32041 0 3
// end ;
3517: PPOPN 3
3519: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL 32049 0 1
// end ; end_of_file
3529: PPOPN 1
3531: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side := 3 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 3
3552: ST_TO_ADDR
// uc_nation := nation_russian ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 30
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 69
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 30
3654: PUSH
3655: LD_INT 34
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 69
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 22
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// ru_blist := [ ] ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// ru_vlist := [ ] ;
3754: LD_ADDR_EXP 27
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3761: LD_ADDR_EXP 30
3765: PUSH
3766: LD_INT 183
3768: PUSH
3769: LD_INT 62
3771: PUSH
3772: LD_INT 147
3774: PUSH
3775: LD_INT 44
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3784: LD_INT 30
3786: PUSH
3787: LD_INT 34
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_EXP 30
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_EXP 30
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3825: LD_ADDR_EXP 28
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 3000
3865: PPUSH
3866: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: LD_INT 300
3885: PPUSH
3886: CALL_OW 277
// hc_gallery :=  ;
3890: LD_ADDR_OWVAR 33
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// hc_name :=  ;
3898: LD_ADDR_OWVAR 26
3902: PUSH
3903: LD_STRING 
3905: ST_TO_ADDR
// hc_importance := 0 ;
3906: LD_ADDR_OWVAR 32
3910: PUSH
3911: LD_INT 0
3913: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3914: LD_ADDR_EXP 24
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: LD_INT 7
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: ST_TO_ADDR
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4111
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 9
3960: PPUSH
3961: LD_EXP 24
3965: PPUSH
3966: CALL_OW 380
// un := CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3994: LD_INT 0
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_EXP 24
4004: PPUSH
4005: CALL_OW 380
// un := CreateHuman ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 24
4026: PPUSH
4027: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4031: LD_INT 0
4033: PPUSH
4034: LD_INT 3
4036: PPUSH
4037: LD_EXP 24
4041: PPUSH
4042: CALL_OW 380
// un := CreateHuman ;
4046: LD_ADDR_VAR 0 3
4050: PUSH
4051: CALL_OW 44
4055: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_VAR 0 5
4065: PPUSH
4066: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: LD_EXP 24
4080: PPUSH
4081: CALL_OW 380
// un := CreateHuman ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: CALL_OW 44
4094: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4095: LD_VAR 0 3
4099: PPUSH
4100: LD_VAR 0 4
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3952
4111: POP
4112: POP
// russian_prepared := true ;
4113: LD_ADDR_EXP 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_INT 21
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_INT 51
4137: PPUSH
4138: CALL_OW 125
// end ;
4142: LD_VAR 0 1
4146: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , p , cr , sib_bomb ;
4147: LD_INT 22
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: PUSH
4162: LD_INT 0
4164: GREATER
4165: PUSH
4166: LD_EXP 2
4170: AND
4171: IFFALSE 6634
4173: GO 4175
4175: DISABLE
4176: LD_INT 0
4178: PPUSH
4179: PPUSH
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
4194: PPUSH
// begin enable ;
4195: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 69
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 3
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 30
4289: PUSH
4290: LD_INT 34
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 69
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_INT 22
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 69
4343: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4344: LD_ADDR_VAR 0 8
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 69
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 5
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 21
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PPUSH
4479: CALL_OW 69
4483: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 72
4508: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4509: LD_ADDR_VAR 0 10
4513: PUSH
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4534: LD_ADDR_VAR 0 11
4538: PUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 4
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 51
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: GREATER
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_INT 0
4599: EQUAL
4600: AND
4601: IFFALSE 4641
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4603: LD_ADDR_EXP 25
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 34
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 69
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: ST_TO_ADDR
// if ru_cargo then
4641: LD_EXP 25
4645: IFFALSE 4943
// begin if IsInArea ( ru_cargo , ru_base ) then
4647: LD_EXP 25
4651: PPUSH
4652: LD_INT 9
4654: PPUSH
4655: CALL_OW 308
4659: IFFALSE 4738
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4661: LD_EXP 25
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: CALL_OW 289
4673: PUSH
4674: LD_INT 0
4676: EQUAL
4677: IFFALSE 4695
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4679: LD_EXP 25
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 120
4693: GO 4736
// if not HasTask ( ru_cargo ) then
4695: LD_EXP 25
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4736
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4707: LD_EXP 25
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 250
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 251
4731: PPUSH
4732: CALL_OW 111
// end else
4736: GO 4943
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 then
4738: LD_EXP 25
4742: PPUSH
4743: CALL_OW 314
4747: NOT
4748: PUSH
4749: LD_EXP 25
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 289
4761: PUSH
4762: LD_INT 100
4764: LESS
4765: AND
4766: IFFALSE 4832
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4768: LD_ADDR_VAR 0 16
4772: PUSH
4773: LD_INT 11
4775: PPUSH
4776: CALL_OW 435
4780: ST_TO_ADDR
// if cr > 0 then
4781: LD_VAR 0 16
4785: PUSH
4786: LD_INT 0
4788: GREATER
4789: IFFALSE 4820
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4791: LD_EXP 25
4795: PPUSH
4796: LD_VAR 0 16
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: PPUSH
4805: LD_VAR 0 16
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 117
4818: GO 4832
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4820: LD_EXP 25
4824: PPUSH
4825: LD_INT 11
4827: PPUSH
4828: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and GetCargo ( ru_cargo , mat_cans ) = 100 then
4832: LD_EXP 25
4836: PPUSH
4837: CALL_OW 314
4841: NOT
4842: PUSH
4843: LD_EXP 25
4847: PPUSH
4848: LD_INT 10
4850: PPUSH
4851: CALL_OW 308
4855: NOT
4856: AND
4857: PUSH
4858: LD_EXP 25
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 289
4870: PUSH
4871: LD_INT 100
4873: EQUAL
4874: AND
4875: IFFALSE 4889
// ComMoveToArea ( ru_cargo , cargoa ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_INT 10
4884: PPUSH
4885: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4889: LD_EXP 25
4893: PPUSH
4894: LD_INT 10
4896: PPUSH
4897: CALL_OW 308
4901: PUSH
4902: LD_VAR 0 8
4906: AND
4907: IFFALSE 4943
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4909: LD_VAR 0 7
4913: PPUSH
4914: LD_INT 25
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 72
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 139
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4943: LD_EXP 25
4947: PUSH
4948: LD_INT 0
4950: EQUAL
4951: PUSH
4952: LD_VAR 0 2
4956: AND
4957: PUSH
4958: LD_VAR 0 2
4962: PPUSH
4963: CALL_OW 461
4967: PUSH
4968: LD_INT 2
4970: EQUAL
4971: AND
4972: IFFALSE 4995
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4974: LD_VAR 0 2
4978: PPUSH
4979: LD_INT 21
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 51
4990: PPUSH
4991: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 72
5014: IFFALSE 5078
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PPUSH
5036: LD_INT 22
5038: PUSH
5039: LD_OWVAR 2
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: CALL 1663 0 2
// if ru_factory and ru_vlist > 0 then
5078: LD_VAR 0 2
5082: PUSH
5083: LD_EXP 27
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: AND
5092: IFFALSE 5192
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 461
5103: PUSH
5104: LD_INT 2
5106: EQUAL
5107: IFFALSE 5192
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_EXP 27
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_EXP 27
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_EXP 27
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 27
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: PPUSH
5150: CALL_OW 125
// for i = 1 to 4 do
5154: LD_ADDR_VAR 0 12
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_INT 4
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5190
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5170: LD_ADDR_EXP 27
5174: PUSH
5175: LD_EXP 27
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 3
5187: ST_TO_ADDR
5188: GO 5167
5190: POP
5191: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5192: LD_INT 24
5194: PPUSH
5195: CALL_OW 461
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: PUSH
5204: LD_EXP 4
5208: AND
5209: IFFALSE 5237
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5211: LD_INT 25
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL_OW 321
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5237
// ComResearch ( ru_lab , tech_sibfiss ) ;
5227: LD_INT 24
5229: PPUSH
5230: LD_INT 25
5232: PPUSH
5233: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5237: LD_INT 25
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 321
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: PUSH
5252: LD_OWVAR 1
5256: PUSH
5257: LD_INT 10500
5259: MOD
5260: PUSH
5261: LD_INT 0
5263: EQUAL
5264: AND
5265: IFFALSE 5303
// if BuildingStatus ( ru_factory ) = bs_idle then
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 461
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5303
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 48
5298: PPUSH
5299: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 48
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5709
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5337: LD_ADDR_VAR 0 17
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 34
5354: PUSH
5355: LD_INT 48
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PPUSH
5366: CALL_OW 69
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5375: LD_VAR 0 17
5379: PPUSH
5380: LD_INT 9
5382: PPUSH
5383: CALL_OW 308
5387: IFFALSE 5405
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5389: LD_VAR 0 17
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 120
5403: GO 5709
// if not HasTask ( sib_bomb ) then
5405: LD_VAR 0 17
5409: PPUSH
5410: CALL_OW 314
5414: NOT
5415: IFFALSE 5709
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5417: LD_INT 22
5419: PUSH
5420: LD_OWVAR 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 30
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: CALL_OW 256
5456: PUSH
5457: LD_INT 250
5459: GREATER
5460: IFFALSE 5553
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5462: LD_VAR 0 17
5466: PPUSH
5467: LD_INT 22
5469: PUSH
5470: LD_OWVAR 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL_OW 69
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: CALL_OW 250
5506: PPUSH
5507: LD_INT 22
5509: PUSH
5510: LD_OWVAR 2
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 251
5546: PPUSH
5547: CALL_OW 116
5551: GO 5709
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5553: LD_INT 22
5555: PUSH
5556: LD_OWVAR 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: IFFALSE 5680
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5589: LD_VAR 0 17
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_OWVAR 2
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 250
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_OWVAR 2
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: CALL_OW 251
5673: PPUSH
5674: CALL_OW 116
5678: GO 5709
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5680: LD_VAR 0 17
5684: PPUSH
5685: LD_EXP 10
5689: PPUSH
5690: CALL_OW 250
5694: PPUSH
5695: LD_EXP 10
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
// end ; if ru_can_attack then
5709: LD_EXP 3
5713: IFFALSE 5861
// if ru_time > 0 0$00 then
5715: LD_EXP 29
5719: PUSH
5720: LD_INT 0
5722: GREATER
5723: IFFALSE 5741
// ru_time := ru_time - 0 0$01 else
5725: LD_ADDR_EXP 29
5729: PUSH
5730: LD_EXP 29
5734: PUSH
5735: LD_INT 35
5737: MINUS
5738: ST_TO_ADDR
5739: GO 5861
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5741: LD_ADDR_EXP 29
5745: PUSH
5746: LD_INT 20265
5748: PPUSH
5749: LD_INT 30765
5751: PPUSH
5752: CALL_OW 12
5756: ST_TO_ADDR
// for i = 1 to ru_amount do
5757: LD_ADDR_VAR 0 12
5761: PUSH
5762: DOUBLE
5763: LD_INT 1
5765: DEC
5766: ST_TO_ADDR
5767: LD_EXP 28
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5859
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5775: LD_ADDR_EXP 27
5779: PUSH
5780: LD_EXP 27
5784: PUSH
5785: LD_INT 23
5787: ADD
5788: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5789: LD_ADDR_EXP 27
5793: PUSH
5794: LD_EXP 27
5798: PUSH
5799: LD_INT 3
5801: ADD
5802: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5803: LD_ADDR_EXP 27
5807: PUSH
5808: LD_EXP 27
5812: PUSH
5813: LD_INT 3
5815: ADD
5816: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5817: LD_ADDR_EXP 27
5821: PUSH
5822: LD_EXP 27
5826: PUSH
5827: LD_INT 46
5829: PUSH
5830: LD_INT 45
5832: PUSH
5833: LD_INT 47
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: CALL_OW 14
5854: ARRAY
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5772
5859: POP
5860: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5861: LD_VAR 0 4
5865: PPUSH
5866: LD_INT 35
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 72
5880: PUSH
5881: LD_INT 0
5883: GREATER
5884: IFFALSE 5932
// if BuildingStatus ( ru_factory ) = bs_idle then
5886: LD_VAR 0 2
5890: PPUSH
5891: CALL_OW 461
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: IFFALSE 5932
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_INT 35
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 72
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 47
5927: PPUSH
5928: CALL_OW 148
// if ru_force = ru_amount then
5932: LD_EXP 23
5936: PUSH
5937: LD_EXP 28
5941: EQUAL
5942: IFFALSE 6074
// begin for i = 1 to ru_force do
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_EXP 23
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6070
// if IsInArea ( ru_force [ i ] , ru_base ) then
5962: LD_EXP 23
5966: PUSH
5967: LD_VAR 0 12
5971: ARRAY
5972: PPUSH
5973: LD_INT 9
5975: PPUSH
5976: CALL_OW 308
5980: IFFALSE 6004
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
5982: LD_EXP 23
5986: PUSH
5987: LD_VAR 0 12
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 120
6002: GO 6068
// if not HasTask ( ru_force [ i ] ) then
6004: LD_EXP 23
6008: PUSH
6009: LD_VAR 0 12
6013: ARRAY
6014: PPUSH
6015: CALL_OW 314
6019: NOT
6020: IFFALSE 6068
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6022: LD_EXP 23
6026: PUSH
6027: LD_VAR 0 12
6031: ARRAY
6032: PPUSH
6033: LD_INT 81
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PPUSH
6048: LD_EXP 23
6052: PUSH
6053: LD_VAR 0 12
6057: ARRAY
6058: PPUSH
6059: CALL_OW 74
6063: PPUSH
6064: CALL_OW 115
6068: GO 5959
6070: POP
6071: POP
// end else
6072: GO 6224
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6074: LD_EXP 23
6078: PPUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 95
6084: PUSH
6085: LD_INT 18
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 72
6100: PUSH
6101: LD_INT 0
6103: GREATER
6104: IFFALSE 6224
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6106: LD_ADDR_VAR 0 13
6110: PUSH
6111: LD_EXP 23
6115: PPUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 95
6121: PUSH
6122: LD_INT 18
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 72
6137: ST_TO_ADDR
// for i = 1 to tmp do
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_VAR 0 13
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6222
// if not HasTask ( tmp [ i ] ) then
6156: LD_VAR 0 13
6160: PUSH
6161: LD_VAR 0 12
6165: ARRAY
6166: PPUSH
6167: CALL_OW 314
6171: NOT
6172: IFFALSE 6220
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6174: LD_EXP 23
6178: PUSH
6179: LD_VAR 0 12
6183: ARRAY
6184: PPUSH
6185: LD_INT 81
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PPUSH
6200: LD_EXP 23
6204: PUSH
6205: LD_VAR 0 12
6209: ARRAY
6210: PPUSH
6211: CALL_OW 74
6215: PPUSH
6216: CALL_OW 115
6220: GO 6153
6222: POP
6223: POP
// end ; if ru_engs > 0 then
6224: LD_VAR 0 9
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: IFFALSE 6634
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6234: LD_VAR 0 5
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: IFFALSE 6419
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6266: LD_ADDR_VAR 0 14
6270: PUSH
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: LD_INT 1000
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 72
6297: ST_TO_ADDR
// for i = 1 to ru_engs do
6298: LD_ADDR_VAR 0 12
6302: PUSH
6303: DOUBLE
6304: LD_INT 1
6306: DEC
6307: ST_TO_ADDR
6308: LD_VAR 0 9
6312: PUSH
6313: FOR_TO
6314: IFFALSE 6415
// begin if IsInUnit ( ru_engs [ i ] ) then
6316: LD_VAR 0 9
6320: PUSH
6321: LD_VAR 0 12
6325: ARRAY
6326: PPUSH
6327: CALL_OW 310
6331: IFFALSE 6350
// ComExitBuilding ( ru_engs [ i ] ) else
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 122
6348: GO 6413
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 314
6365: NOT
6366: PUSH
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 256
6382: PUSH
6383: LD_INT 600
6385: GREATER
6386: AND
6387: IFFALSE 6413
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6389: LD_VAR 0 9
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 14
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PPUSH
6409: CALL_OW 130
// end ;
6413: GO 6313
6415: POP
6416: POP
// end else
6417: GO 6634
// begin if ru_blist = 0 then
6419: LD_EXP 26
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6509
// begin for i = 1 to ru_engs do
6429: LD_ADDR_VAR 0 12
6433: PUSH
6434: DOUBLE
6435: LD_INT 1
6437: DEC
6438: ST_TO_ADDR
6439: LD_VAR 0 9
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6505
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6447: LD_VAR 0 9
6451: PUSH
6452: LD_VAR 0 12
6456: ARRAY
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 310
6479: NOT
6480: AND
6481: IFFALSE 6503
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6483: LD_VAR 0 9
6487: PUSH
6488: LD_VAR 0 12
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 120
6503: GO 6444
6505: POP
6506: POP
// end else
6507: GO 6634
// begin for i = 1 to ru_engs do
6509: LD_ADDR_VAR 0 12
6513: PUSH
6514: DOUBLE
6515: LD_INT 1
6517: DEC
6518: ST_TO_ADDR
6519: LD_VAR 0 9
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6632
// begin if IsInUnit ( ru_engs [ i ] ) then
6527: LD_VAR 0 9
6531: PUSH
6532: LD_VAR 0 12
6536: ARRAY
6537: PPUSH
6538: CALL_OW 310
6542: IFFALSE 6561
// ComExitBuilding ( ru_engs [ i ] ) else
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 122
6559: GO 6630
// if not HasTask ( ru_engs [ i ] ) then
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 314
6576: NOT
6577: IFFALSE 6630
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6579: LD_VAR 0 9
6583: PUSH
6584: LD_VAR 0 12
6588: ARRAY
6589: PPUSH
6590: LD_EXP 26
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: PPUSH
6599: LD_EXP 26
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: LD_EXP 26
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: LD_EXP 26
6621: PUSH
6622: LD_INT 4
6624: ARRAY
6625: PPUSH
6626: CALL_OW 145
// end ;
6630: GO 6524
6632: POP
6633: POP
// end ; end ; end ; end ;
6634: PPOPN 17
6636: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 20 do
6637: LD_EXP 2
6641: PUSH
6642: LD_INT 11
6644: PPUSH
6645: CALL_OW 435
6649: PUSH
6650: LD_INT 20
6652: LESS
6653: AND
6654: IFFALSE 6717
6656: GO 6658
6658: DISABLE
// begin enable ;
6659: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6660: LD_INT 1
6662: PPUSH
6663: LD_INT 5
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: LD_INT 11
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6681: LD_INT 1505
6683: PPUSH
6684: LD_INT 2100
6686: PPUSH
6687: CALL_OW 12
6691: PPUSH
6692: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 5
6701: PPUSH
6702: CALL_OW 12
6706: PPUSH
6707: LD_INT 11
6709: PPUSH
6710: LD_INT 1
6712: PPUSH
6713: CALL_OW 55
// end ;
6717: END
// every 15 15$00 + 25 25$00 trigger ru_sib_bomb = false do var i , tmp ;
6718: LD_EXP 4
6722: PUSH
6723: LD_INT 0
6725: EQUAL
6726: IFFALSE 6841
6728: GO 6730
6730: DISABLE
6731: LD_INT 0
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// i := Rand ( 0 , 100 ) ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 0
6743: PPUSH
6744: LD_INT 100
6746: PPUSH
6747: CALL_OW 12
6751: ST_TO_ADDR
// case your_side of 1 :
6752: LD_OWVAR 2
6756: PUSH
6757: LD_INT 1
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 10 ; 2 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 10
6773: ST_TO_ADDR
6774: GO 6815
6776: LD_INT 2
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 0 ; 7 :
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
6793: GO 6815
6795: LD_INT 7
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6814
6803: POP
// tmp := 15 ; end ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_INT 15
6811: ST_TO_ADDR
6812: GO 6815
6814: POP
// if i < chance_to_bomb + tmp then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_EXP 5
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: LESS
6831: IFFALSE 6841
// ru_sib_bomb := true ;
6833: LD_ADDR_EXP 4
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: PPOPN 2
6843: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6844: LD_INT 22
6846: PUSH
6847: LD_OWVAR 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IFFALSE 6887
6876: GO 6878
6878: DISABLE
// begin ru_sib_bomb := true ;
6879: LD_ADDR_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// end ;
6887: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6888: LD_INT 22
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 34
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IFFALSE 7015
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin enable ;
6924: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 2
6945: PPUSH
6946: CALL_OW 12
6950: ARRAY
6951: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6952: LD_INT 22
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PPUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_VAR 0 1
6994: ARRAY
6995: PPUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: CALL_OW 243
// end ; end_of_file
7015: PPOPN 1
7017: END
// export function RemoveLegion ; var i ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7022: LD_ADDR_VAR 0 2
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7056
// RemoveUnit ( i ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL_OW 64
7054: GO 7042
7056: POP
7057: POP
// end ;
7058: LD_VAR 0 1
7062: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , p , l_depot , l_factory , l_lab , l_towers ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 8
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 30
7181: PUSH
7182: LD_INT 8
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7207: LD_ADDR_VAR 0 10
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 8
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 30
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// uc_side := 8 ;
7241: LD_ADDR_OWVAR 20
7245: PUSH
7246: LD_INT 8
7248: ST_TO_ADDR
// uc_nation := nation_arabian ;
7249: LD_ADDR_OWVAR 21
7253: PUSH
7254: LD_INT 2
7256: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_OWVAR 67
7280: ARRAY
7281: ST_TO_ADDR
// legion_blist := [ ] ;
7282: LD_ADDR_EXP 34
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// legion_vlist := [ ] ;
7289: LD_ADDR_EXP 35
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// legion_force := [ ] ;
7296: LD_ADDR_EXP 31
7300: PUSH
7301: EMPTY
7302: ST_TO_ADDR
// legion_enemy := - 1 ;
7303: LD_ADDR_EXP 36
7307: PUSH
7308: LD_INT 1
7310: NEG
7311: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 274
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 10000
7327: PPUSH
7328: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7332: LD_VAR 0 7
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 1000
7347: PPUSH
7348: CALL_OW 277
// for i = 1 to l_towers do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_VAR 0 10
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7417
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_EXP 32
7380: PPUSH
7381: CALL_OW 380
// un := CreateHuman ;
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: PPUSH
7411: CALL_OW 52
// end ;
7415: GO 7367
7417: POP
7418: POP
// for i = 1 to 4 do
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 4
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7526
// for p = 1 to 2 do
7435: LD_ADDR_VAR 0 6
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 2
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7522
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7451: LD_INT 0
7453: PPUSH
7454: LD_INT 8
7456: PPUSH
7457: LD_EXP 32
7461: PPUSH
7462: CALL_OW 380
// un := CreateHuman ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_VAR 0 6
7514: ARRAY
7515: PPUSH
7516: CALL_OW 52
// end ;
7520: GO 7448
7522: POP
7523: POP
7524: GO 7432
7526: POP
7527: POP
// for i = 1 to 4 do
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: DOUBLE
7534: LD_INT 1
7536: DEC
7537: ST_TO_ADDR
7538: LD_INT 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7585
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 4
7549: PPUSH
7550: LD_EXP 32
7554: PPUSH
7555: CALL_OW 380
// un := CreateHuman ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 52
// end ;
7583: GO 7541
7585: POP
7586: POP
// for i = 1 to 6 do
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 6
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7644
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_EXP 32
7613: PPUSH
7614: CALL_OW 380
// un := CreateHuman ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: CALL_OW 44
7627: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 8
7637: PPUSH
7638: CALL_OW 52
// end ;
7642: GO 7600
7644: POP
7645: POP
// for i = 1 to 5 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 5
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7703
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7662: LD_INT 0
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_EXP 32
7672: PPUSH
7673: CALL_OW 380
// un := CreateHuman ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: CALL_OW 44
7686: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 7
7696: PPUSH
7697: CALL_OW 52
// end ;
7701: GO 7659
7703: POP
7704: POP
// tmp := RandPointsFromArea ( 199 , 134 , 216 , 141 , 6 ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 199
7712: PPUSH
7713: LD_INT 134
7715: PPUSH
7716: LD_INT 216
7718: PPUSH
7719: LD_INT 141
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: CALL 1562 0 5
7729: ST_TO_ADDR
// p := 1 ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// for i = 1 to 3 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 3
7750: PUSH
7751: FOR_TO
7752: IFFALSE 8005
// begin vc_chassis := ar_half_tracked ;
7754: LD_ADDR_OWVAR 37
7758: PUSH
7759: LD_INT 14
7761: ST_TO_ADDR
// vc_engine := engine_siberite ;
7762: LD_ADDR_OWVAR 39
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// vc_control := control_manual ;
7770: LD_ADDR_OWVAR 38
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_INT 31
7785: ST_TO_ADDR
// veh := CreateVehicle ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: CALL_OW 45
7795: ST_TO_ADDR
// if HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 4
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: PPUSH
7822: CALL_OW 428
7826: PUSH
7827: LD_INT 0
7829: EQUAL
7830: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) else
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_VAR 0 4
7841: PUSH
7842: LD_VAR 0 6
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 4
7852: PUSH
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: ARRAY
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: CALL_OW 48
7870: GO 7960
// begin repeat p := p + 2 ;
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 2
7884: PLUS
7885: ST_TO_ADDR
// until HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 ;
7886: LD_VAR 0 4
7890: PUSH
7891: LD_VAR 0 6
7895: ARRAY
7896: PPUSH
7897: LD_VAR 0 4
7901: PUSH
7902: LD_VAR 0 6
7906: PUSH
7907: LD_INT 1
7909: PLUS
7910: ARRAY
7911: PPUSH
7912: CALL_OW 428
7916: PUSH
7917: LD_INT 0
7919: EQUAL
7920: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_VAR 0 4
7931: PUSH
7932: LD_VAR 0 6
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ARRAY
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// end ; PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 3
7965: PPUSH
7966: LD_EXP 32
7970: PUSH
7971: LD_INT 1
7973: PLUS
7974: PPUSH
7975: CALL_OW 380
// un := CreateHuman ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: CALL_OW 44
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 52
// end ;
8003: GO 7751
8005: POP
8006: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8007: LD_INT 198
8009: PPUSH
8010: LD_INT 94
8012: PPUSH
8013: LD_INT 8
8015: PPUSH
8016: LD_INT 10
8018: PPUSH
8019: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8023: LD_INT 167
8025: PPUSH
8026: LD_INT 130
8028: PPUSH
8029: LD_INT 8
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 330
// legion_mines := [ ] ;
8039: LD_ADDR_EXP 33
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// legion_mines := RandPointsFromArea ( 176 , 122 , 188 , 126 , 6 ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_INT 176
8053: PPUSH
8054: LD_INT 122
8056: PPUSH
8057: LD_INT 188
8059: PPUSH
8060: LD_INT 126
8062: PPUSH
8063: LD_INT 6
8065: PPUSH
8066: CALL 1562 0 5
8070: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 197 , 91 , 205 , 96 , 4 ) ;
8071: LD_ADDR_EXP 33
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 197
8083: PPUSH
8084: LD_INT 91
8086: PPUSH
8087: LD_INT 205
8089: PPUSH
8090: LD_INT 96
8092: PPUSH
8093: LD_INT 4
8095: PPUSH
8096: CALL 1562 0 5
8100: ADD
8101: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 184 , 151 , 178 , 130 , 9 ) ;
8102: LD_ADDR_EXP 33
8106: PUSH
8107: LD_EXP 33
8111: PUSH
8112: LD_INT 184
8114: PPUSH
8115: LD_INT 151
8117: PPUSH
8118: LD_INT 178
8120: PPUSH
8121: LD_INT 130
8123: PPUSH
8124: LD_INT 9
8126: PPUSH
8127: CALL 1562 0 5
8131: ADD
8132: ST_TO_ADDR
// if Difficulty > 1 then
8133: LD_OWVAR 67
8137: PUSH
8138: LD_INT 1
8140: GREATER
8141: IFFALSE 8174
// legion_mines := legion_mines ^ RandPointsFromArea ( 166 , 126 , 181 , 136 , 5 ) ;
8143: LD_ADDR_EXP 33
8147: PUSH
8148: LD_EXP 33
8152: PUSH
8153: LD_INT 166
8155: PPUSH
8156: LD_INT 126
8158: PPUSH
8159: LD_INT 181
8161: PPUSH
8162: LD_INT 136
8164: PPUSH
8165: LD_INT 5
8167: PPUSH
8168: CALL 1562 0 5
8172: ADD
8173: ST_TO_ADDR
// p := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// for i = 1 to 24 do
8182: LD_ADDR_VAR 0 3
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_INT 24
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8250
// begin PlaceMine ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 , 0 ) ;
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 6
8207: ARRAY
8208: PPUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 1
8221: PLUS
8222: ARRAY
8223: PPUSH
8224: LD_INT 8
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 454
// p := p + 2 ;
8234: LD_ADDR_VAR 0 6
8238: PUSH
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 2
8246: PLUS
8247: ST_TO_ADDR
// end ;
8248: GO 8195
8250: POP
8251: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8252: LD_ADDR_EXP 35
8256: PUSH
8257: LD_INT 13
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 1
8279: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8280: LD_INT 22
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: LD_INT 0
8297: GREATER
8298: IFFALSE 10484
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin enable ;
8322: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 30
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 30
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8399: LD_ADDR_VAR 0 10
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 6
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8489: LD_ADDR_VAR 0 16
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8523: LD_ADDR_VAR 0 15
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8591: LD_ADDR_VAR 0 13
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 25
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if l_eng then
8625: LD_VAR 0 16
8629: IFFALSE 9044
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 1000
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 72
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8829
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 5
8706: PPUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1000
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: ST_TO_ADDR
// for i = 1 to l_eng do
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 16
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8825
// if IsInUnit ( l_eng [ i ] ) then
8747: LD_VAR 0 16
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PPUSH
8758: CALL_OW 310
8762: IFFALSE 8781
// ComExitBuilding ( l_eng [ i ] ) else
8764: LD_VAR 0 16
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 122
8779: GO 8823
// if not HasTask ( l_eng [ i ] ) then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_VAR 0 2
8790: ARRAY
8791: PPUSH
8792: CALL_OW 314
8796: NOT
8797: IFFALSE 8823
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
8799: LD_VAR 0 16
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 130
8823: GO 8744
8825: POP
8826: POP
// end else
8827: GO 9044
// begin if legion_blist > 0 then
8829: LD_EXP 34
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8966
// begin for i = 1 to l_eng do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 16
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8962
// if IsInUnit ( l_eng [ i ] ) then
8857: LD_VAR 0 16
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: PPUSH
8868: CALL_OW 310
8872: IFFALSE 8891
// ComExitBuilding ( l_eng [ i ] ) else
8874: LD_VAR 0 16
8878: PUSH
8879: LD_VAR 0 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 122
8889: GO 8960
// if not HasTask ( l_eng [ i ] ) then
8891: LD_VAR 0 16
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 314
8906: NOT
8907: IFFALSE 8960
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
8909: LD_VAR 0 16
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PPUSH
8920: LD_EXP 34
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_EXP 34
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PPUSH
8938: LD_EXP 34
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PPUSH
8947: LD_EXP 34
8951: PUSH
8952: LD_INT 4
8954: ARRAY
8955: PPUSH
8956: CALL_OW 145
8960: GO 8854
8962: POP
8963: POP
// end else
8964: GO 9044
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9042
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: NOT
9000: PUSH
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: AND
9018: IFFALSE 9040
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9020: LD_VAR 0 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 120
9040: GO 8981
9042: POP
9043: POP
// end ; end ; if l_factory then
9044: LD_VAR 0 9
9048: IFFALSE 9448
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9050: LD_INT 22
9052: PUSH
9053: LD_INT 8
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: LD_INT 61
9075: PUSH
9076: EMPTY
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 8
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 34
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9250
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9132: LD_INT 22
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 61
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 8
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: CALL_OW 12
9244: ARRAY
9245: PPUSH
9246: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9250: LD_EXP 35
9254: PUSH
9255: LD_INT 0
9257: GREATER
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: AND
9273: IFFALSE 9358
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9275: LD_VAR 0 9
9279: PPUSH
9280: LD_EXP 35
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_EXP 35
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: LD_EXP 35
9302: PUSH
9303: LD_INT 3
9305: ARRAY
9306: PPUSH
9307: LD_EXP 35
9311: PUSH
9312: LD_INT 4
9314: ARRAY
9315: PPUSH
9316: CALL_OW 125
// for i = 1 to 4 do
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9356
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9336: LD_ADDR_EXP 35
9340: PUSH
9341: LD_EXP 35
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 3
9353: ST_TO_ADDR
9354: GO 9333
9356: POP
9357: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9358: LD_VAR 0 11
9362: PPUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_INT 0
9380: GREATER
9381: PUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9448
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9398: LD_VAR 0 11
9402: PPUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 72
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_INT 28
9424: PUSH
9425: LD_INT 27
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: CALL_OW 12
9442: ARRAY
9443: PPUSH
9444: CALL_OW 148
// end ; if legion_enemy > 0 then
9448: LD_EXP 36
9452: PUSH
9453: LD_INT 0
9455: GREATER
9456: IFFALSE 10036
// begin if tick mod 11 11$00 = 0 then
9458: LD_OWVAR 1
9462: PUSH
9463: LD_INT 23100
9465: MOD
9466: PUSH
9467: LD_INT 0
9469: EQUAL
9470: IFFALSE 9720
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9472: LD_ADDR_EXP 35
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ADD
9496: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9497: LD_ADDR_EXP 35
9501: PUSH
9502: LD_EXP 35
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 27
9512: PUSH
9513: LD_INT 29
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ADD
9533: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9534: LD_ADDR_EXP 35
9538: PUSH
9539: LD_EXP 35
9543: PUSH
9544: LD_INT 13
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ADD
9558: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9559: LD_ADDR_EXP 35
9563: PUSH
9564: LD_EXP 35
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 27
9574: PUSH
9575: LD_INT 29
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 12
9593: ARRAY
9594: ADD
9595: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9596: LD_ADDR_EXP 35
9600: PUSH
9601: LD_EXP 35
9605: PUSH
9606: LD_INT 13
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: ADD
9620: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9621: LD_ADDR_EXP 35
9625: PUSH
9626: LD_EXP 35
9630: PUSH
9631: LD_INT 28
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 29
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: ADD
9657: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9658: LD_ADDR_EXP 35
9662: PUSH
9663: LD_EXP 35
9667: PUSH
9668: LD_INT 13
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ADD
9682: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9683: LD_ADDR_EXP 35
9687: PUSH
9688: LD_EXP 35
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 27
9698: PUSH
9699: LD_INT 29
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 12
9717: ARRAY
9718: ADD
9719: ST_TO_ADDR
// end ; if legion_force >= 7 then
9720: LD_EXP 31
9724: PUSH
9725: LD_INT 7
9727: GREATEREQUAL
9728: IFFALSE 9911
// begin for i = 1 to legion_force do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_EXP 31
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9909
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9748: LD_EXP 31
9752: PUSH
9753: LD_VAR 0 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 314
9763: NOT
9764: PUSH
9765: LD_EXP 31
9769: PUSH
9770: LD_VAR 0 2
9774: ARRAY
9775: PPUSH
9776: CALL_OW 110
9780: PUSH
9781: LD_INT 11
9783: NONEQUAL
9784: AND
9785: IFFALSE 9907
// begin case legion_enemy of 1 :
9787: LD_EXP 36
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9824
9800: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
9801: LD_EXP 31
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: PPUSH
9812: LD_INT 142
9814: PPUSH
9815: LD_INT 144
9817: PPUSH
9818: CALL_OW 111
9822: GO 9889
9824: LD_INT 2
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9856
9832: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
9833: LD_EXP 31
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PPUSH
9844: LD_INT 101
9846: PPUSH
9847: LD_INT 34
9849: PPUSH
9850: CALL_OW 111
9854: GO 9889
9856: LD_INT 7
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9888
9864: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
9865: LD_EXP 31
9869: PUSH
9870: LD_VAR 0 2
9874: ARRAY
9875: PPUSH
9876: LD_INT 173
9878: PPUSH
9879: LD_INT 127
9881: PPUSH
9882: CALL_OW 111
9886: GO 9889
9888: POP
// SetTag ( legion_force [ i ] , 11 ) ;
9889: LD_EXP 31
9893: PUSH
9894: LD_VAR 0 2
9898: ARRAY
9899: PPUSH
9900: LD_INT 11
9902: PPUSH
9903: CALL_OW 109
// end ; end ;
9907: GO 9745
9909: POP
9910: POP
// end ; if legion_force then
9911: LD_EXP 31
9915: IFFALSE 10036
// begin tmp := legion_force ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_EXP 31
9926: ST_TO_ADDR
// for i = 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 3
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10034
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 314
9960: NOT
9961: PUSH
9962: LD_EXP 31
9966: PUSH
9967: LD_VAR 0 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 110
9977: PUSH
9978: LD_INT 11
9980: EQUAL
9981: AND
9982: IFFALSE 10032
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
9984: LD_VAR 0 3
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 22
9997: PUSH
9998: LD_EXP 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 74
10027: PPUSH
10028: CALL_OW 115
10032: GO 9942
10034: POP
10035: POP
// end ; end ; p := 1 ;
10036: LD_ADDR_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// for i = 1 to 24 do
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 24
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10188
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
10060: LD_EXP 33
10064: PUSH
10065: LD_VAR 0 6
10069: ARRAY
10070: PPUSH
10071: LD_EXP 33
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ARRAY
10085: PPUSH
10086: CALL_OW 428
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: IFFALSE 10172
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
10096: LD_EXP 33
10100: PUSH
10101: LD_VAR 0 6
10105: ARRAY
10106: PPUSH
10107: LD_EXP 33
10111: PUSH
10112: LD_VAR 0 6
10116: PUSH
10117: LD_INT 1
10119: PLUS
10120: ARRAY
10121: PPUSH
10122: CALL_OW 428
10126: PPUSH
10127: CALL_OW 255
10131: PUSH
10132: LD_EXP 36
10136: EQUAL
10137: IFFALSE 10172
// LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
10139: LD_EXP 33
10143: PUSH
10144: LD_VAR 0 6
10148: ARRAY
10149: PPUSH
10150: LD_EXP 33
10154: PUSH
10155: LD_VAR 0 6
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 8
10167: PPUSH
10168: CALL_OW 456
// p := p + 2 ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 2
10184: PLUS
10185: ST_TO_ADDR
// end ;
10186: GO 10057
10188: POP
10189: POP
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10190: LD_INT 22
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: IFFALSE 10332
// begin if l_cargo = false then
10220: LD_VAR 0 17
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10264
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10230: LD_ADDR_VAR 0 17
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 8
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if l_cargo then
10264: LD_VAR 0 17
10268: IFFALSE 10332
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_INT 14
10277: PPUSH
10278: CALL_OW 435
10282: ST_TO_ADDR
// if cr > 0 then
10283: LD_VAR 0 7
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10332
// if not HasTask ( l_cargo ) then
10293: LD_VAR 0 17
10297: PPUSH
10298: CALL_OW 314
10302: NOT
10303: IFFALSE 10332
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10305: LD_VAR 0 17
10309: PPUSH
10310: LD_VAR 0 7
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_VAR 0 7
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: CALL_OW 117
// end ; end ; if tick = [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] and FindArtifact ( 1 ) [ 1 ] = 112 and FindArtifact ( 1 ) [ 2 ] = 67 then
10332: LD_OWVAR 1
10336: PUSH
10337: LD_INT 52500
10339: PUSH
10340: LD_INT 46200
10342: PUSH
10343: LD_INT 42000
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: LD_OWVAR 67
10355: ARRAY
10356: EQUAL
10357: PUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 469
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PUSH
10370: LD_INT 112
10372: EQUAL
10373: AND
10374: PUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 469
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PUSH
10387: LD_INT 67
10389: EQUAL
10390: AND
10391: IFFALSE 10484
// begin un := l_eng [ 1 ] ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: ST_TO_ADDR
// if IsInUnit ( un ) then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 310
10416: IFFALSE 10427
// ComExitBuilding ( un ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 122
// AddComCollect ( un , FindArtifact ( 1 ) [ 1 ] , FindArtifact ( 1 ) [ 2 ] ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 469
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 469
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 207
10467: PPUSH
10468: LD_INT 123
10470: PPUSH
10471: CALL_OW 171
// AddComUnload ( un ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 219
// end ; end ;
10484: PPOPN 17
10486: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10487: LD_OWVAR 67
10491: PUSH
10492: LD_INT 1
10494: GREATER
10495: IFFALSE 10700
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10506: LD_INT 35
10508: PPUSH
10509: LD_INT 12635
10511: PPUSH
10512: CALL_OW 12
10516: PPUSH
10517: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// p := 1 ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 139
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 13
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// for i = 1 to 2 do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_INT 2
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10698
// begin if IsInUnit ( sci [ i ] ) then
10602: LD_VAR 0 2
10606: PUSH
10607: LD_VAR 0 1
10611: ARRAY
10612: PPUSH
10613: CALL_OW 310
10617: IFFALSE 10634
// ComExitBuilding ( sci [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// Wait ( 0 0$03 ) ;
10634: LD_INT 105
10636: PPUSH
10637: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10641: LD_VAR 0 2
10645: PUSH
10646: LD_VAR 0 1
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 3
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ARRAY
10677: PPUSH
10678: CALL_OW 158
// p := p + 2 ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 2
10694: PLUS
10695: ST_TO_ADDR
// end ;
10696: GO 10599
10698: POP
10699: POP
// end ;
10700: PPOPN 4
10702: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10703: LD_INT 14
10705: PPUSH
10706: CALL_OW 435
10710: PUSH
10711: LD_INT 20
10713: LESS
10714: IFFALSE 10741
10716: GO 10718
10718: DISABLE
// begin enable ;
10719: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10720: LD_INT 1
10722: PPUSH
10723: LD_INT 5
10725: PPUSH
10726: CALL_OW 12
10730: PPUSH
10731: LD_INT 14
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 55
// end ; end_of_file
10741: END
// export function Action ; var un , gamemode , speaker ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10748: LD_ADDR_OWVAR 67
10752: PUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 426
10760: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 426
10773: ST_TO_ADDR
// if gamemode = 1 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 1
10781: EQUAL
10782: IFFALSE 10806
// begin your_side := 1 ;
10784: LD_ADDR_OWVAR 2
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// legion_enemy := 1 ;
10792: LD_ADDR_EXP 36
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// PrepareAmerican ;
10800: CALL 221 0 0
// end else
10804: GO 10858
// if gamemode = 2 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: IFFALSE 10838
// begin your_side := 2 ;
10816: LD_ADDR_OWVAR 2
10820: PUSH
10821: LD_INT 2
10823: ST_TO_ADDR
// legion_enemy := 2 ;
10824: LD_ADDR_EXP 36
10828: PUSH
10829: LD_INT 2
10831: ST_TO_ADDR
// PrepareArabian ;
10832: CALL 18169 0 0
// end else
10836: GO 10858
// begin your_side := 7 ;
10838: LD_ADDR_OWVAR 2
10842: PUSH
10843: LD_INT 7
10845: ST_TO_ADDR
// legion_enemy := 7 ;
10846: LD_ADDR_EXP 36
10850: PUSH
10851: LD_INT 7
10853: ST_TO_ADDR
// PrepareAlliance ;
10854: CALL 15580 0 0
// end ; if your_side = 1 then
10858: LD_OWVAR 2
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 11344
// begin case Query ( QVul4 ) of 1 :
10868: LD_STRING QVul4
10870: PPUSH
10871: CALL_OW 97
10875: PUSH
10876: LD_INT 1
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10892: LD_INT 8
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 86
// uc_side := 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation := 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_importance := 0 ;
10918: LD_ADDR_OWVAR 32
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_EXP 21
10936: PPUSH
10937: CALL_OW 380
// un := CreateHuman ;
10941: LD_ADDR_VAR 0 2
10945: PUSH
10946: CALL_OW 44
10950: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_INT 12
10958: PPUSH
10959: LD_INT 9
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 48
// hc_name := Stuart Carey ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING Stuart Carey
10976: ST_TO_ADDR
// hc_class := 1 ;
10977: LD_ADDR_OWVAR 28
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// hc_gallery := vulcano ;
10985: LD_ADDR_OWVAR 33
10989: PUSH
10990: LD_STRING vulcano
10992: ST_TO_ADDR
// hc_face_number := 1 ;
10993: LD_ADDR_OWVAR 34
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// us_guy := CreateHuman ;
11001: LD_ADDR_EXP 22
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// InitHc ;
11011: CALL_OW 19
// if rand ( 0 , 1 ) then
11015: LD_INT 0
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 12
11025: IFFALSE 11042
// PrepareHuman ( sex_male , 3 , 6 ) else
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 3
11032: PPUSH
11033: LD_INT 6
11035: PPUSH
11036: CALL_OW 380
11040: GO 11055
// PrepareHuman ( sex_female , 4 , 8 ) ;
11042: LD_INT 2
11044: PPUSH
11045: LD_INT 4
11047: PPUSH
11048: LD_INT 8
11050: PPUSH
11051: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_EXP 19
11064: PPUSH
11065: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11069: LD_EXP 19
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 119
// if GetSex ( un ) = sex_male then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 258
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11179
// begin Say ( un , VD-un1 ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_STRING VD-un1
11105: PPUSH
11106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11110: LD_EXP 19
11114: PPUSH
11115: LD_STRING VDc-1
11117: PPUSH
11118: CALL_OW 88
// Say ( un , VD-un2 ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_STRING VD-un2
11129: PPUSH
11130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11134: LD_EXP 19
11138: PPUSH
11139: LD_STRING VDc-2
11141: PPUSH
11142: CALL_OW 88
// Say ( un , VD-un3 ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_STRING VD-un3
11153: PPUSH
11154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11158: LD_INT 7
11160: PPUSH
11161: CALL_OW 67
// Say ( un , VD-un4 ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_STRING VD-un4
11172: PPUSH
11173: CALL_OW 88
// end else
11177: GO 11258
// begin Say ( un , VD-unf1 ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_STRING VD-unf1
11186: PPUSH
11187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11191: LD_EXP 19
11195: PPUSH
11196: LD_STRING VDc-1
11198: PPUSH
11199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_STRING VD-unf2
11210: PPUSH
11211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11215: LD_EXP 19
11219: PPUSH
11220: LD_STRING VDc-2
11222: PPUSH
11223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING VD-unf3
11234: PPUSH
11235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11239: LD_INT 7
11241: PPUSH
11242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_STRING VD-unf4
11253: PPUSH
11254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11273: LD_EXP 19
11277: PPUSH
11278: LD_STRING VDc-3
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11289: LD_STRING CVulc1
11291: PPUSH
11292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL_OW 250
11312: PUSH
11313: LD_INT 2
11315: EQUAL
11316: PUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 251
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: AND
11331: IFFALSE 11296
// RemoveUnit ( un ) ;
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 64
// end else
11342: GO 11721
// if your_side = 2 then
11344: LD_OWVAR 2
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: IFFALSE 11568
// begin CenterNowOnUnits ( player_commander ) ;
11354: LD_EXP 10
11358: PPUSH
11359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PUSH
11397: LD_EXP 51
11401: DIFF
11402: ST_TO_ADDR
// if speaker then
11403: LD_VAR 0 4
11407: IFFALSE 11559
// begin InGameOn ;
11409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11413: LD_EXP 51
11417: PPUSH
11418: LD_STRING VSd-1
11420: PPUSH
11421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11425: LD_VAR 0 4
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: CALL_OW 258
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11462
// Say ( speaker [ 1 ] , VAd-1 ) else
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_STRING VAd-1
11455: PPUSH
11456: CALL_OW 88
11460: GO 11478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 1
11469: ARRAY
11470: PPUSH
11471: LD_STRING VAfd-1
11473: PPUSH
11474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11478: LD_EXP 51
11482: PPUSH
11483: LD_STRING VSd-2
11485: PPUSH
11486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 258
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11527
// Say ( speaker [ 1 ] , VAd-2 ) else
11509: LD_VAR 0 4
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_STRING VAd-2
11520: PPUSH
11521: CALL_OW 88
11525: GO 11543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11527: LD_VAR 0 4
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_STRING VAfd-2
11538: PPUSH
11539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11543: LD_EXP 51
11547: PPUSH
11548: LD_STRING VSd-3
11550: PPUSH
11551: CALL_OW 88
// InGameOff ;
11555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11559: LD_STRING CVulc5
11561: PPUSH
11562: CALL_OW 337
// end else
11566: GO 11721
// if your_side = 7 then
11568: LD_OWVAR 2
11572: PUSH
11573: LD_INT 7
11575: EQUAL
11576: IFFALSE 11721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 7
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 37
11616: DIFF
11617: ST_TO_ADDR
// if speaker then
11618: LD_VAR 0 4
11622: IFFALSE 11714
// begin CenterNowOnUnits ( al_commander ) ;
11624: LD_EXP 37
11628: PPUSH
11629: CALL_OW 87
// InGameOn ;
11633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11637: LD_EXP 37
11641: PPUSH
11642: LD_STRING VPd-1
11644: PPUSH
11645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 258
11662: IFFALSE 11682
// Say ( speaker [ 1 ] , VPpd-1 ) else
11664: LD_VAR 0 4
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PPUSH
11673: LD_STRING VPpd-1
11675: PPUSH
11676: CALL_OW 88
11680: GO 11698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: LD_STRING VPpdf-1
11693: PPUSH
11694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11698: LD_EXP 37
11702: PPUSH
11703: LD_STRING VPd-2
11705: PPUSH
11706: CALL_OW 88
// InGameOff ;
11710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11714: LD_STRING CVulc7
11716: PPUSH
11717: CALL_OW 337
// end ; SaveForQuickRestart ;
11721: CALL_OW 22
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11730: LD_INT 22
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: IFFALSE 11802
11760: GO 11762
11762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11763: LD_STRING CVulc6
11765: PPUSH
11766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11770: LD_INT 52500
11772: PUSH
11773: LD_INT 47250
11775: PUSH
11776: LD_INT 42000
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL_OW 67
// ru_can_attack := true ;
11794: LD_ADDR_EXP 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11803: LD_INT 50
11805: PPUSH
11806: CALL_OW 255
11810: PUSH
11811: LD_INT 1
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: OR
11862: IFFALSE 12096
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11870: LD_STRING CVulc2
11872: PPUSH
11873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PUSH
11911: LD_EXP 19
11915: DIFF
11916: ST_TO_ADDR
// DialogueOn ;
11917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 258
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: IFFALSE 11965
// Say ( speaker [ 1 ] , VDb-1 ) else
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_STRING VDb-1
11958: PPUSH
11959: CALL_OW 88
11963: GO 11981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_STRING VDbf-1
11976: PPUSH
11977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11981: LD_INT 10
11983: PPUSH
11984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 258
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: IFFALSE 12025
// Say ( speaker [ 1 ] , VDb-2 ) else
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_STRING VDb-2
12018: PPUSH
12019: CALL_OW 88
12023: GO 12041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_STRING VDbf-2
12036: PPUSH
12037: CALL_OW 88
// DWait ( 0 0$01 ) ;
12041: LD_INT 35
12043: PPUSH
12044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12048: LD_EXP 19
12052: PPUSH
12053: LD_STRING VDb-com1
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12064: LD_INT 44100
12066: PUSH
12067: LD_INT 36750
12069: PUSH
12070: LD_INT 31500
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_OWVAR 67
12082: ARRAY
12083: PPUSH
12084: CALL_OW 67
// ru_can_attack := true ;
12088: LD_ADDR_EXP 3
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// end ;
12096: PPOPN 1
12098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12099: LD_INT 22
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: IFFALSE 12164
12129: GO 12131
12131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12132: LD_INT 42000
12134: PUSH
12135: LD_INT 34650
12137: PUSH
12138: LD_INT 29400
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_OWVAR 67
12150: ARRAY
12151: PPUSH
12152: CALL_OW 67
// ru_can_attack := true ;
12156: LD_ADDR_EXP 3
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// end ;
12164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 255
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12383
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: ST_TO_ADDR
// DialogueOn ;
12218: CALL_OW 6
// if speaker then
12222: LD_VAR 0 1
12226: IFFALSE 12281
// if GetSex ( speaker [ 1 ] ) = sex_male then
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 258
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12265
// Say ( speaker [ 1 ] , VDe-1 ) else
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_STRING VDe-1
12258: PPUSH
12259: CALL_OW 88
12263: GO 12281
// Say ( speaker [ 1 ] , VDef-1 ) ;
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING VDef-1
12276: PPUSH
12277: CALL_OW 88
// case Query ( SibNote ) of 1 :
12281: LD_STRING SibNote
12283: PPUSH
12284: CALL_OW 97
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12300
12297: POP
// ; end ;
12298: GO 12301
12300: POP
// if speaker then
12301: LD_VAR 0 1
12305: IFFALSE 12360
// if GetSex ( speaker [ 1 ] ) = sex_male then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 258
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12344
// Say ( speaker [ 1 ] , VDe-2 ) else
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_STRING VDe-2
12337: PPUSH
12338: CALL_OW 88
12342: GO 12360
// Say ( speaker [ 1 ] , VDef-2 ) ;
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: LD_STRING VDef-2
12355: PPUSH
12356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12360: LD_EXP 19
12364: PPUSH
12365: LD_STRING VDc-4
12367: PPUSH
12368: CALL_OW 88
// DialogueOff ;
12372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12376: LD_STRING CVulc3
12378: PPUSH
12379: CALL_OW 337
// end ;
12383: PPOPN 1
12385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12386: LD_OWVAR 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PUSH
12424: LD_INT 0
12426: GREATER
12427: AND
12428: IFFALSE 12862
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12438: LD_INT 245
12440: PPUSH
12441: LD_INT 1295
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING VDG-1
12464: PPUSH
12465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12469: LD_EXP 19
12473: PPUSH
12474: LD_STRING VDc-5
12476: PPUSH
12477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12481: LD_EXP 22
12485: PPUSH
12486: LD_STRING VDG-2
12488: PPUSH
12489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12493: LD_EXP 19
12497: PPUSH
12498: LD_STRING VDc-6
12500: PPUSH
12501: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12505: LD_EXP 22
12509: PPUSH
12510: LD_STRING VDG-3
12512: PPUSH
12513: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12517: LD_EXP 19
12521: PPUSH
12522: LD_STRING VDc-7
12524: PPUSH
12525: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12529: LD_EXP 22
12533: PPUSH
12534: LD_STRING VDG-4
12536: PPUSH
12537: CALL_OW 94
// DialogueOff ;
12541: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12545: LD_STRING CVulc4
12547: PPUSH
12548: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12552: LD_INT 18900
12554: PUSH
12555: LD_INT 21000
12557: PUSH
12558: LD_INT 23100
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_OWVAR 67
12570: ARRAY
12571: PPUSH
12572: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_OWVAR 67
12604: ARRAY
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12851
// begin uc_side := 1 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// uc_nation := 1 ;
12617: LD_ADDR_OWVAR 21
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12625: LD_INT 0
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 4
12633: PPUSH
12634: CALL_OW 12
12638: PPUSH
12639: LD_EXP 21
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: CALL_OW 233
// if GetClass ( un ) = 3 then
12670: LD_VAR 0 2
12674: PPUSH
12675: CALL_OW 257
12679: PUSH
12680: LD_INT 3
12682: EQUAL
12683: IFFALSE 12834
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12685: LD_ADDR_OWVAR 37
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: MOD
12708: ARRAY
12709: ST_TO_ADDR
// vc_engine := engine_combustion ;
12710: LD_ADDR_OWVAR 39
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// vc_control := control_manual ;
12718: LD_ADDR_OWVAR 38
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12726: LD_ADDR_OWVAR 40
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 9
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 12
12759: ARRAY
12760: ST_TO_ADDR
// veh := CreateVehicle ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: CALL_OW 45
12770: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 2
12778: PPUSH
12779: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 77
12790: PPUSH
12791: LD_INT 88
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end else
12832: GO 12849
// PlaceUnitArea ( un , start_north , false ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 49
// end ;
12849: GO 12606
12851: POP
12852: POP
// CenterNowOnUnits ( un ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 87
// end ;
12862: PPOPN 3
12864: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12865: LD_INT 21
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 70
12884: IFFALSE 13205
12886: GO 12888
12888: DISABLE
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 10
12973: DIFF
12974: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 112
12987: PPUSH
12988: LD_INT 67
12990: PPUSH
12991: CALL_OW 73
12995: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 7
13008: EQUAL
13009: IFFALSE 13052
// if GetSex ( un ) = sex_male then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 258
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: IFFALSE 13040
// Say ( un , VD-find-al ) else
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_STRING VD-find-al
13033: PPUSH
13034: CALL_OW 88
13038: GO 13052
// Say ( un , VD-find-al-f ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_STRING VD-find-al-f
13047: PPUSH
13048: CALL_OW 88
// if GetSide ( un ) = 2 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 255
13061: PUSH
13062: LD_INT 2
13064: EQUAL
13065: IFFALSE 13108
// if GetSex ( un ) = sex_male then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 258
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13096
// Say ( un , VD-find-ar ) else
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_STRING VD-find-ar
13089: PPUSH
13090: CALL_OW 88
13094: GO 13108
// Say ( un , VD-find-ar-f ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_STRING VD-find-ar-f
13103: PPUSH
13104: CALL_OW 88
// if GetSide ( un ) = 1 then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13188
// begin if GetSex ( un ) = sex_male then
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 258
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13164
// begin Say ( un , VD-find-us ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_STRING VD-find-us
13145: PPUSH
13146: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_STRING VD-find-us2
13157: PPUSH
13158: CALL_OW 88
// end else
13162: GO 13188
// begin Say ( un , VD-find-us-f ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_STRING VD-find-us-f
13171: PPUSH
13172: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13176: LD_VAR 0 1
13180: PPUSH
13181: LD_STRING VD-find-us2-f
13183: PPUSH
13184: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13188: LD_INT 10
13190: PPUSH
13191: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13195: LD_INT 112
13197: PPUSH
13198: LD_INT 67
13200: PPUSH
13201: CALL_OW 86
// end ;
13205: PPOPN 2
13207: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13208: LD_EXP 7
13212: IFFALSE 13714
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin if your_side = 1 then
13220: LD_OWVAR 2
13224: PUSH
13225: LD_INT 1
13227: EQUAL
13228: IFFALSE 13409
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 4
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: PUSH
13264: LD_EXP 19
13268: DIFF
13269: ST_TO_ADDR
// if not speaker then
13270: LD_VAR 0 1
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 258
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: IFFALSE 13316
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_STRING VD-us-sci-art-1
13309: PPUSH
13310: CALL_OW 88
13314: GO 13332
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING VD-us-fsci-art-1
13327: PPUSH
13328: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13332: LD_EXP 19
13336: PPUSH
13337: LD_STRING VDc-art1
13339: PPUSH
13340: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 258
13357: PUSH
13358: LD_INT 1
13360: EQUAL
13361: IFFALSE 13381
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13363: LD_VAR 0 1
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_STRING VD-us-sci-art-2
13374: PPUSH
13375: CALL_OW 88
13379: GO 13397
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13381: LD_VAR 0 1
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: LD_STRING VD-us-fsci-art-2
13392: PPUSH
13393: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13397: LD_EXP 19
13401: PPUSH
13402: LD_STRING VDc-art2
13404: PPUSH
13405: CALL_OW 88
// end ; if your_side = 2 then
13409: LD_OWVAR 2
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13521
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: LD_EXP 51
13457: DIFF
13458: ST_TO_ADDR
// if not speaker then
13459: LD_VAR 0 1
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 258
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13505
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING VD-ar-sci-art-1
13498: PPUSH
13499: CALL_OW 88
13503: GO 13521
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_STRING VD-ar-fsci-art-1
13516: PPUSH
13517: CALL_OW 88
// end ; if your_side = 7 then
13521: LD_OWVAR 2
13525: PUSH
13526: LD_INT 7
13528: EQUAL
13529: IFFALSE 13714
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 7
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 25
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_EXP 37
13569: DIFF
13570: ST_TO_ADDR
// if speaker then
13571: LD_VAR 0 1
13575: IFFALSE 13707
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 258
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13614
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_STRING VD-al-sci-art-1
13607: PPUSH
13608: CALL_OW 88
13612: GO 13630
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING VD-al-fsci-art-1
13625: PPUSH
13626: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13630: LD_EXP 37
13634: PPUSH
13635: LD_STRING VPd-art-1
13637: PPUSH
13638: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 258
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13679
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13661: LD_VAR 0 1
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_STRING VD-al-sci-art-2
13672: PPUSH
13673: CALL_OW 88
13677: GO 13695
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_STRING VD-al-fsci-art-2
13690: PPUSH
13691: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13695: LD_EXP 37
13699: PPUSH
13700: LD_STRING VPd-art-2
13702: PPUSH
13703: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13707: LD_STRING CVulc7out
13709: PPUSH
13710: CALL_OW 337
// end ; end ;
13714: PPOPN 1
13716: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13717: LD_INT 8
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_OWVAR 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL 2145 0 2
13744: PPUSH
13745: CALL_OW 292
13749: IFFALSE 13892
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin if your_side = 1 then
13757: LD_OWVAR 2
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: IFFALSE 13848
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: PUSH
13787: LD_EXP 19
13791: DIFF
13792: ST_TO_ADDR
// if speaker then
13793: LD_VAR 0 1
13797: IFFALSE 13848
// if GetSex ( speaker [ 1 ] ) then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 258
13812: IFFALSE 13832
// Say ( speaker [ 1 ] , VD-legion-us ) else
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING VD-legion-us
13825: PPUSH
13826: CALL_OW 88
13830: GO 13848
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13832: LD_VAR 0 1
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: LD_STRING VD-legion-us-f
13843: PPUSH
13844: CALL_OW 88
// end ; if your_side = 2 then
13848: LD_OWVAR 2
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13870
// Say ( ar_commander , VD-legion-ar ) ;
13858: LD_EXP 51
13862: PPUSH
13863: LD_STRING VD-legion-ar
13865: PPUSH
13866: CALL_OW 88
// if your_side = 7 then
13870: LD_OWVAR 2
13874: PUSH
13875: LD_INT 7
13877: EQUAL
13878: IFFALSE 13892
// Say ( al_commander , VD-legion-al ) ;
13880: LD_EXP 37
13884: PPUSH
13885: LD_STRING VD-legion-al
13887: PPUSH
13888: CALL_OW 88
// end ;
13892: PPOPN 1
13894: END
// every 0 0$01 trigger mine_vulc do
13895: LD_EXP 12
13899: IFFALSE 13916
13901: GO 13903
13903: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13904: LD_EXP 10
13908: PPUSH
13909: LD_STRING VD-vulc-mines
13911: PPUSH
13912: CALL_OW 88
// end ;
13916: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13917: LD_OWVAR 67
13921: PUSH
13922: LD_INT 1
13924: GREATER
13925: IFFALSE 14044
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 123
13942: PUSH
13943: LD_INT 95
13945: PUSH
13946: LD_INT 119
13948: PUSH
13949: LD_INT 89
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 81
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// p := 1 ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i = 1 to 3 do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14042
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13990: LD_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ARRAY
14015: PPUSH
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 454
// p := p + 2 ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 2
14038: PLUS
14039: ST_TO_ADDR
// end ;
14040: GO 13987
14042: POP
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 1
14054: GREATER
14055: PUSH
14056: LD_INT 22
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 70
14075: AND
14076: IFFALSE 14280
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
// begin enable ;
14086: ENABLE
// p := 1 ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 123
14102: PUSH
14103: LD_INT 95
14105: PUSH
14106: LD_INT 119
14108: PUSH
14109: LD_INT 89
14111: PUSH
14112: LD_INT 115
14114: PUSH
14115: LD_INT 81
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i = 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14278
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14142: LD_VAR 0 3
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: PLUS
14166: ARRAY
14167: PPUSH
14168: CALL_OW 428
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14262
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14178: LD_VAR 0 3
14182: PUSH
14183: LD_VAR 0 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 1
14201: PLUS
14202: ARRAY
14203: PPUSH
14204: CALL_OW 428
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_OWVAR 2
14218: EQUAL
14219: IFFALSE 14262
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14221: LD_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 3
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PLUS
14245: ARRAY
14246: PPUSH
14247: LD_INT 8
14249: PPUSH
14250: CALL_OW 456
// mine_vulc := true ;
14254: LD_ADDR_EXP 12
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// end ; p := p + 2 ;
14262: LD_ADDR_VAR 0 1
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PLUS
14275: ST_TO_ADDR
// end ;
14276: GO 14139
14278: POP
14279: POP
// end ;
14280: PPOPN 3
14282: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14283: LD_INT 22
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: LD_INT 0
14300: EQUAL
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: LD_INT 2
14309: NONEQUAL
14310: AND
14311: IFFALSE 14320
14313: GO 14315
14315: DISABLE
// Win ;
14316: CALL 14377 0 0
14320: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14321: LD_INT 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_INT 0
14356: EQUAL
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: AND
14367: IFFALSE 14376
14369: GO 14371
14371: DISABLE
// Win ;
14372: CALL 14377 0 0
14376: END
// function Win ; var points ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
// case Query ( VulcWin ) of 1 :
14381: LD_STRING VulcWin
14383: PPUSH
14384: CALL_OW 97
14388: PUSH
14389: LD_INT 1
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14400
14397: POP
// ; end ;
14398: GO 14401
14400: POP
// if medal_enabled then
14401: LD_EXP 13
14405: IFFALSE 14419
// AddMedal ( vulc_1 , 1 ) else
14407: LD_STRING vulc_1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 101
14417: GO 14430
// AddMedal ( vulc_1 , - 1 ) ;
14419: LD_STRING vulc_1
14421: PPUSH
14422: LD_INT 1
14424: NEG
14425: PPUSH
14426: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14430: LD_INT 22
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14462
// AddMedal ( vulc_2 , 1 ) else
14450: LD_STRING vulc_2
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 101
14460: GO 14473
// AddMedal ( vulc_2 , - 1 ) ;
14462: LD_STRING vulc_2
14464: PPUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: CALL_OW 101
// points := CalculateCommanderPoints ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: CALL 2266 0 0
14482: ST_TO_ADDR
// if points >= 2000 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_INT 2000
14490: GREATEREQUAL
14491: IFFALSE 14505
// AddMedal ( vulc_3 , 2 ) else
14493: LD_STRING vulc_3
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: CALL_OW 101
14503: GO 14538
// if points >= 0 then
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 0
14512: GREATEREQUAL
14513: IFFALSE 14527
// AddMedal ( vulc_3 , 1 ) else
14515: LD_STRING vulc_3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 101
14525: GO 14538
// AddMedal ( vulc_3 , - 1 ) ;
14527: LD_STRING vulc_3
14529: PPUSH
14530: LD_INT 1
14532: NEG
14533: PPUSH
14534: CALL_OW 101
// GiveMedals ( MAIN ) ;
14538: LD_STRING MAIN
14540: PPUSH
14541: CALL_OW 102
// YouWin ;
14545: CALL_OW 103
// end ; end_of_file
14549: LD_VAR 0 1
14553: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14554: LD_INT 13
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin enable ;
14584: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_INT 13
14592: PPUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14640
// if GetLives ( i ) > 4 then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 256
14620: PUSH
14621: LD_INT 4
14623: GREATER
14624: IFFALSE 14638
// SetLives ( i , 4 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL_OW 234
14638: GO 14608
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_OWVAR 2
14659: EQUAL
14660: IFFALSE 14670
// player_res_art := true ;
14662: LD_ADDR_EXP 6
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// end ;
14670: PPOPN 1
14672: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var x , y , lab ;
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 7
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PUSH
14733: LD_EXP 6
14737: AND
14738: IFFALSE 15093
14740: GO 14742
14742: DISABLE
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin enable ;
14748: ENABLE
// x := FindArtifact ( 1 ) [ 1 ] ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 469
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 469
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_OWVAR 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 73
14862: ST_TO_ADDR
// if player_artifact_ready = false then
14863: LD_EXP 7
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14977
// if GetDistUnitXY ( lab , x , y ) < 6 then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 297
14892: PUSH
14893: LD_INT 6
14895: LESS
14896: IFFALSE 14957
// begin if BuildingStatus ( lab ) = bs_idle then
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 461
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14935
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 468
14933: GO 14955
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14935: LD_OWVAR 2
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 468
// end else
14955: GO 14977
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14957: LD_OWVAR 2
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 468
// if player_artifact_ready then
14977: LD_EXP 7
14981: IFFALSE 15093
// if GetDistUnitXY ( lab , x , y ) < 6 then
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: PUSH
15003: LD_INT 6
15005: LESS
15006: IFFALSE 15071
// begin if BuildingStatus ( lab ) = bs_idle then
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 461
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15047
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15023: LD_OWVAR 2
15027: PPUSH
15028: LD_EXP 8
15032: PPUSH
15033: LD_INT 4
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 468
15045: GO 15069
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15047: LD_OWVAR 2
15051: PPUSH
15052: LD_EXP 8
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: CALL_OW 468
// end else
15069: GO 15093
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_EXP 8
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 468
// end ;
15093: PPOPN 3
15095: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var x , y , i , lab , side ;
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin x := FindArtifact ( 1 ) [ 1 ] ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 469
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 469
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
15137: LD_ADDR_VAR 0 8
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 11
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 6
15200: PPUSH
15201: CALL_OW 73
15205: ST_TO_ADDR
// if icon = art_exp_left then
15206: LD_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15253
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15216: LD_VAR 0 8
15220: PPUSH
15221: LD_EXP 9
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 486
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15233: LD_OWVAR 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: LD_VAR 0 8
15248: PPUSH
15249: CALL_OW 468
// end ; if icon = art_icon then
15253: LD_VAR 0 2
15257: PUSH
15258: LD_EXP 8
15262: EQUAL
15263: IFFALSE 15477
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: IN
15285: IFFALSE 15477
// begin side := GetSide ( cr1 ) ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 255
15301: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15302: LD_INT 22
15304: PUSH
15305: LD_VAR 0 9
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 0
15335: GREATER
15336: IFFALSE 15477
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 30
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 7
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// player_res_art := false ;
15422: LD_ADDR_EXP 6
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15430: LD_OWVAR 2
15434: PPUSH
15435: LD_EXP 8
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 8
15447: PPUSH
15448: CALL_OW 468
// Wait ( time_to_reuse ) ;
15452: LD_EXP 11
15456: PPUSH
15457: CALL_OW 67
// player_res_art := true ;
15461: LD_ADDR_EXP 6
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// medal_enabled := true ;
15469: LD_ADDR_EXP 13
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; end ; end ; end ;
15477: PPOPN 9
15479: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_OWVAR 2
15494: EQUAL
15495: IFFALSE 15532
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 468
// player_artifact_ready := true ;
15517: LD_ADDR_EXP 7
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15525: LD_STRING ArtVulcano
15527: PPUSH
15528: CALL_OW 339
// end ; end ;
15532: PPOPN 1
15534: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15535: LD_OWVAR 2
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 468
// end ; end_of_file
15555: PPOPN 2
15557: END
// every 0 0$01 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// Display_Strings := [ #tick , tick ] ;
15562: LD_ADDR_OWVAR 47
15566: PUSH
15567: LD_STRING #tick
15569: PUSH
15570: LD_OWVAR 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
// end ; end_of_file
15579: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15587: LD_ADDR_EXP 39
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: ST_TO_ADDR
// al_force := [ ] ;
15612: LD_ADDR_EXP 38
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// RemoveAlliance ;
15619: CALL 15997 0 0
// ResetFog ;
15623: CALL_OW 335
// your_side := 7 ;
15627: LD_ADDR_OWVAR 2
15631: PUSH
15632: LD_INT 7
15634: ST_TO_ADDR
// uc_side := 7 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 7
15642: ST_TO_ADDR
// hc_gallery :=  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name :=  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// hc_importance := 0 ;
15659: LD_ADDR_OWVAR 32
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// for i = 1 to 17 do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_INT 17
15679: PUSH
15680: FOR_TO
15681: IFFALSE 15761
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15683: LD_ADDR_OWVAR 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15710: LD_INT 0
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 4
15718: PPUSH
15719: CALL_OW 12
15723: PPUSH
15724: LD_EXP 39
15728: PPUSH
15729: CALL_OW 380
// un := CreateHuman ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: CALL_OW 44
15742: ST_TO_ADDR
// al_force := al_force ^ un ;
15743: LD_ADDR_EXP 38
15747: PUSH
15748: LD_EXP 38
15752: PUSH
15753: LD_VAR 0 4
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15680
15761: POP
15762: POP
// hc_importance := 100 ;
15763: LD_ADDR_OWVAR 32
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// uc_nation := 1 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_EXP 39
15789: PPUSH
15790: CALL_OW 380
// al_commander := CreateHuman ;
15794: LD_ADDR_EXP 37
15798: PUSH
15799: CALL_OW 44
15803: ST_TO_ADDR
// player_commander := al_commander ;
15804: LD_ADDR_EXP 10
15808: PUSH
15809: LD_EXP 37
15813: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_STRING text
15821: PPUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 9
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: LD_OWVAR 67
15840: ARRAY
15841: PPUSH
15842: LD_INT 9
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_OWVAR 67
15860: ARRAY
15861: PPUSH
15862: LD_INT -5
15864: PUSH
15865: LD_EXP 37
15869: PUSH
15870: LD_INT -3
15872: PUSH
15873: LD_INT -2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_EXP 38
15886: ADD
15887: PPUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 42
15932: ST_TO_ADDR
// team := team ^ al_commander ;
15933: LD_ADDR_VAR 0 5
15937: PUSH
15938: LD_VAR 0 5
15942: PUSH
15943: LD_EXP 37
15947: ADD
15948: ST_TO_ADDR
// for i = 1 to team do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 5
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15990
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 15
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 49
15988: GO 15964
15990: POP
15991: POP
// end ;
15992: LD_VAR 0 1
15996: RET
// export function RemoveAlliance ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16001: LD_INT 22
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16072
// RemoveUnit ( i ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 64
16070: GO 16058
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16085: LD_INT 31
16087: PPUSH
16088: LD_INT 7
16090: PPUSH
16091: LD_INT 2
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16098: LD_INT 32
16100: PPUSH
16101: LD_INT 7
16103: PPUSH
16104: LD_INT 2
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16111: LD_INT 59
16113: PPUSH
16114: LD_INT 7
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16124: LD_ADDR_EXP 39
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_OWVAR 67
16147: ARRAY
16148: ST_TO_ADDR
// al_force := [ ] ;
16149: LD_ADDR_EXP 38
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// al_vehs := [ ] ;
16156: LD_ADDR_EXP 44
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// uc_side := 7 ;
16163: LD_ADDR_OWVAR 20
16167: PUSH
16168: LD_INT 7
16170: ST_TO_ADDR
// uc_nation := 1 ;
16171: LD_ADDR_OWVAR 21
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// bc_type := b_oil_mine ;
16179: LD_ADDR_OWVAR 42
16183: PUSH
16184: LD_INT 29
16186: ST_TO_ADDR
// b := CreateBuilding ;
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: CALL_OW 46
16196: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 61
16204: PPUSH
16205: LD_INT 7
16207: PPUSH
16208: LD_INT 0
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 50
// bc_type := b_siberite_mine ;
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 30
16225: ST_TO_ADDR
// b := CreateBuilding ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: CALL_OW 46
16235: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 69
16243: PPUSH
16244: LD_INT 13
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 50
// hc_gallery :=  ;
16257: LD_ADDR_OWVAR 33
16261: PUSH
16262: LD_STRING 
16264: ST_TO_ADDR
// hc_name :=  ;
16265: LD_ADDR_OWVAR 26
16269: PUSH
16270: LD_STRING 
16272: ST_TO_ADDR
// hc_importance := 0 ;
16273: LD_ADDR_OWVAR 32
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_INT 7
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16386
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16318: LD_ADDR_OWVAR 21
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 12
16343: ARRAY
16344: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_EXP 39
16355: PPUSH
16356: CALL_OW 380
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 52
// end ;
16384: GO 16315
16386: POP
16387: POP
// for i = 1 to 3 do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: DOUBLE
16394: LD_INT 1
16396: DEC
16397: ST_TO_ADDR
16398: LD_INT 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16470
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 4
16436: PPUSH
16437: LD_EXP 39
16441: PPUSH
16442: CALL_OW 380
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 164
16463: PPUSH
16464: CALL_OW 52
// end ;
16468: GO 16401
16470: POP
16471: POP
// for i = 1 to 6 do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 6
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16577
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16488: LD_ADDR_OWVAR 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 9
16523: PUSH
16524: LD_INT 9
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 3
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_EXP 39
16548: PPUSH
16549: CALL_OW 380
// un := CreateHuman ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: CALL_OW 44
16562: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 173
16570: PPUSH
16571: CALL_OW 52
// end ;
16575: GO 16485
16577: POP
16578: POP
// for i = 1 to 6 do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_INT 6
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16691
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16595: LD_ADDR_OWVAR 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_EXP 39
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 52
// end ;
16689: GO 16592
16691: POP
16692: POP
// for i = 1 to 4 do
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_INT 4
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16775
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16709: LD_ADDR_OWVAR 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_EXP 39
16746: PPUSH
16747: CALL_OW 380
// un := CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 162
16768: PPUSH
16769: CALL_OW 52
// end ;
16773: GO 16706
16775: POP
16776: POP
// uc_nation := 3 ;
16777: LD_ADDR_OWVAR 21
16781: PUSH
16782: LD_INT 3
16784: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16785: LD_ADDR_OWVAR 37
16789: PUSH
16790: LD_INT 21
16792: ST_TO_ADDR
// vc_engine := engine_siberite ;
16793: LD_ADDR_OWVAR 39
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// vc_control := control_computer ;
16801: LD_ADDR_OWVAR 38
16805: PUSH
16806: LD_INT 3
16808: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16809: LD_ADDR_OWVAR 40
16813: PUSH
16814: LD_INT 51
16816: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16817: CALL_OW 45
16821: PPUSH
16822: LD_INT 49
16824: PPUSH
16825: LD_INT 13
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16835: LD_ADDR_EXP 46
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 33
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 22
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 35
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16983
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16925: LD_INT 22
16927: PUSH
16928: LD_INT 7
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 35
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: PUSH
16968: LD_VAR 0 2
16972: ARRAY
16973: PPUSH
16974: LD_INT 49
16976: PPUSH
16977: CALL_OW 208
16981: GO 16922
16983: POP
16984: POP
// end ;
16985: LD_VAR 0 1
16989: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$01 trigger your_side = 1 do var i , un , veh , cr ;
16990: LD_OWVAR 2
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: IFFALSE 18166
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
// begin enable ;
17009: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17010: LD_ADDR_EXP 50
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 7
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17044: LD_ADDR_EXP 48
17048: PUSH
17049: LD_INT 164
17051: PUSH
17052: LD_INT 197
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17059: LD_ADDR_EXP 47
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17097: LD_ADDR_EXP 49
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 7
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PPUSH
17159: CALL_OW 69
17163: IFFALSE 17203
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17165: LD_ADDR_EXP 45
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 7
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17203: LD_ADDR_EXP 41
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17237: LD_ADDR_EXP 40
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 7
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17271: LD_ADDR_EXP 42
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 7
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 4
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17339: LD_EXP 41
17343: PPUSH
17344: LD_INT 81
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PPUSH
17359: CALL 1663 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17363: LD_EXP 45
17367: PPUSH
17368: CALL_OW 314
17372: NOT
17373: PUSH
17374: LD_EXP 45
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 289
17386: PUSH
17387: LD_INT 100
17389: LESS
17390: AND
17391: IFFALSE 17439
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: LD_INT 12
17400: PPUSH
17401: CALL_OW 435
17405: ST_TO_ADDR
// if cr then
17406: LD_VAR 0 4
17410: IFFALSE 17439
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 4
17430: PUSH
17431: LD_INT 2
17433: ARRAY
17434: PPUSH
17435: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17439: LD_EXP 50
17443: PPUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 1000
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: IFFALSE 17595
// begin if al_eng then
17467: LD_EXP 40
17471: IFFALSE 17593
// for i = 1 to al_eng do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_EXP 40
17487: PUSH
17488: FOR_TO
17489: IFFALSE 17591
// if IsInUnit ( al_eng [ i ] ) then
17491: LD_EXP 40
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17525
// ComExitBuilding ( al_eng [ i ] ) else
17508: LD_EXP 40
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PPUSH
17519: CALL_OW 122
17523: GO 17589
// if not HasTask ( al_eng [ i ] ) then
17525: LD_EXP 40
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: IFFALSE 17589
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17543: LD_EXP 40
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: PPUSH
17554: LD_EXP 50
17558: PPUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 1000
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 130
17589: GO 17488
17591: POP
17592: POP
// end else
17593: GO 17677
// if al_eng then
17595: LD_EXP 40
17599: IFFALSE 17677
// if not IsInUnit ( al_eng [ 1 ] ) then
17601: LD_EXP 40
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 310
17614: NOT
17615: IFFALSE 17677
// for i = 1 to al_eng do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: DOUBLE
17623: LD_INT 1
17625: DEC
17626: ST_TO_ADDR
17627: LD_EXP 40
17631: PUSH
17632: FOR_TO
17633: IFFALSE 17675
// if not IsInUnit ( al_eng [ i ] ) then
17635: LD_EXP 40
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 310
17650: NOT
17651: IFFALSE 17673
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_EXP 47
17668: PPUSH
17669: CALL_OW 120
17673: GO 17632
17675: POP
17676: POP
// if al_vehs then
17677: LD_EXP 44
17681: IFFALSE 17781
// if BuildingStatus ( al_fac ) = bs_idle then
17683: LD_EXP 49
17687: PPUSH
17688: CALL_OW 461
17692: PUSH
17693: LD_INT 2
17695: EQUAL
17696: IFFALSE 17781
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17698: LD_EXP 49
17702: PPUSH
17703: LD_EXP 44
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_EXP 44
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_EXP 44
17725: PUSH
17726: LD_INT 3
17728: ARRAY
17729: PPUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_INT 4
17737: ARRAY
17738: PPUSH
17739: CALL_OW 125
// for i = 1 to 4 do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_INT 4
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17779
// al_vehs := Delete ( al_vehs , 1 ) ;
17759: LD_ADDR_EXP 44
17763: PUSH
17764: LD_EXP 44
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 3
17776: ST_TO_ADDR
17777: GO 17756
17779: POP
17780: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17781: LD_EXP 38
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_OWVAR 1
17794: PUSH
17795: LD_INT 23100
17797: MOD
17798: PUSH
17799: LD_INT 0
17801: EQUAL
17802: AND
17803: IFFALSE 17917
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17915
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17838: LD_ADDR_EXP 44
17842: PUSH
17843: LD_EXP 44
17847: PUSH
17848: LD_INT 23
17850: ADD
17851: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17852: LD_ADDR_EXP 44
17856: PUSH
17857: LD_EXP 44
17861: PUSH
17862: LD_INT 1
17864: ADD
17865: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17866: LD_ADDR_EXP 44
17870: PUSH
17871: LD_EXP 44
17875: PUSH
17876: LD_INT 3
17878: ADD
17879: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17880: LD_ADDR_EXP 44
17884: PUSH
17885: LD_EXP 44
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 47
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ADD
17912: ST_TO_ADDR
// end ;
17913: GO 17835
17915: POP
17916: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17917: LD_INT 22
17919: PUSH
17920: LD_INT 7
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 51
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17972
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17951: LD_EXP 49
17955: PPUSH
17956: LD_INT 21
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 51
17967: PPUSH
17968: CALL_OW 125
// if al_force and tick mod 25200 = 0 then
17972: LD_EXP 38
17976: PUSH
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 25200
17984: MOD
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18053
// begin for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 38
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18051
// if GetTag ( al_force [ i ] ) <> 11 then
18010: LD_EXP 38
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: NONEQUAL
18029: IFFALSE 18049
// SetTag ( al_force [ i ] , 11 ) ;
18031: LD_EXP 38
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_INT 11
18044: PPUSH
18045: CALL_OW 109
18049: GO 18007
18051: POP
18052: POP
// end ; if al_force then
18053: LD_EXP 38
18057: IFFALSE 18166
// for i = 1 to al_force do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 38
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18164
// begin if GetTag ( al_force [ i ] ) = 11 then
18077: LD_EXP 38
18081: PUSH
18082: LD_VAR 0 1
18086: ARRAY
18087: PPUSH
18088: CALL_OW 110
18092: PUSH
18093: LD_INT 11
18095: EQUAL
18096: IFFALSE 18162
// begin if not HasTask ( al_force [ i ] ) then
18098: LD_EXP 38
18102: PUSH
18103: LD_VAR 0 1
18107: ARRAY
18108: PPUSH
18109: CALL_OW 314
18113: NOT
18114: IFFALSE 18162
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18116: LD_EXP 38
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_EXP 38
18146: PUSH
18147: LD_VAR 0 1
18151: ARRAY
18152: PPUSH
18153: CALL_OW 74
18157: PPUSH
18158: CALL_OW 115
// end ; end ;
18162: GO 18074
18164: POP
18165: POP
// end ; end_of_file
18166: PPOPN 4
18168: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18176: LD_ADDR_EXP 53
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 7
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_OWVAR 67
18199: ARRAY
18200: ST_TO_ADDR
// ar_force := [ ] ;
18201: LD_ADDR_EXP 52
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// RemoveAlliance ;
18208: CALL 15997 0 0
// RemoveEnvironmentArea ( evn ) ;
18212: LD_INT 17
18214: PPUSH
18215: CALL_OW 355
// your_side := 2 ;
18219: LD_ADDR_OWVAR 2
18223: PUSH
18224: LD_INT 2
18226: ST_TO_ADDR
// uc_side := 2 ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_INT 2
18234: ST_TO_ADDR
// uc_nation := nation_arabian ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_INT 2
18242: ST_TO_ADDR
// hc_gallery :=  ;
18243: LD_ADDR_OWVAR 33
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// hc_name :=  ;
18251: LD_ADDR_OWVAR 26
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hc_importance := 0 ;
18259: LD_ADDR_OWVAR 32
18263: PUSH
18264: LD_INT 0
18266: ST_TO_ADDR
// for i = 1 to 20 do
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 20
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18346
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18283: LD_INT 0
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: LD_INT 4
18291: PPUSH
18292: CALL_OW 12
18296: PPUSH
18297: LD_EXP 53
18301: PPUSH
18302: CALL_OW 380
// un := CreateHuman ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: CALL_OW 44
18315: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 233
// ar_force := ar_force ^ un ;
18328: LD_ADDR_EXP 52
18332: PUSH
18333: LD_EXP 52
18337: PUSH
18338: LD_VAR 0 4
18342: ADD
18343: ST_TO_ADDR
// end ;
18344: GO 18280
18346: POP
18347: POP
// hc_importance := 100 ;
18348: LD_ADDR_OWVAR 32
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 11
18361: PPUSH
18362: LD_EXP 53
18366: PPUSH
18367: CALL_OW 380
// ar_commander := CreateHuman ;
18371: LD_ADDR_EXP 51
18375: PUSH
18376: CALL_OW 44
18380: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18381: LD_EXP 51
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 233
// player_commander := ar_commander ;
18393: LD_ADDR_EXP 10
18397: PUSH
18398: LD_EXP 51
18402: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_STRING text
18410: PPUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: PPUSH
18431: LD_INT 14
18433: PUSH
18434: LD_INT 13
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_OWVAR 67
18449: ARRAY
18450: PPUSH
18451: LD_INT -5
18453: PUSH
18454: LD_EXP 51
18458: PUSH
18459: LD_INT -3
18461: PUSH
18462: LD_INT -2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_EXP 52
18475: ADD
18476: PPUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 8
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 42
18517: ST_TO_ADDR
// team := team ^ ar_commander ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_EXP 51
18532: ADD
18533: ST_TO_ADDR
// for i = 1 to team do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_VAR 0 5
18548: PUSH
18549: FOR_TO
18550: IFFALSE 18575
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18552: LD_VAR 0 5
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PPUSH
18563: LD_INT 16
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL_OW 49
18573: GO 18549
18575: POP
18576: POP
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 0 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// vc_chassis := 31 ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 31
18600: ST_TO_ADDR
// vc_control := control_rider ;
18601: LD_ADDR_OWVAR 38
18605: PUSH
18606: LD_INT 4
18608: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18609: CALL_OW 45
18613: PPUSH
18614: LD_INT 96
18616: PPUSH
18617: LD_INT 20
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 48
// end ; end_of_file
18627: LD_VAR 0 1
18631: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18632: LD_INT 0
18634: PPUSH
// ar_miner := 81 ;
18635: LD_ADDR_EXP 61
18639: PUSH
18640: LD_INT 81
18642: ST_TO_ADDR
// ar_crane := 88 ;
18643: LD_ADDR_EXP 60
18647: PUSH
18648: LD_INT 88
18650: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18651: LD_ADDR_EXP 55
18655: PUSH
18656: LD_INT 89
18658: ST_TO_ADDR
// us_hack := 99 ;
18659: LD_ADDR_EXP 56
18663: PUSH
18664: LD_INT 99
18666: ST_TO_ADDR
// us_artillery := 97 ;
18667: LD_ADDR_EXP 57
18671: PUSH
18672: LD_INT 97
18674: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18675: LD_ADDR_EXP 58
18679: PUSH
18680: LD_INT 91
18682: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18683: LD_ADDR_EXP 59
18687: PUSH
18688: LD_INT 92
18690: ST_TO_ADDR
// ru_radar := 98 ;
18691: LD_ADDR_EXP 54
18695: PUSH
18696: LD_INT 98
18698: ST_TO_ADDR
// tech_Artillery := 80 ;
18699: LD_ADDR_EXP 62
18703: PUSH
18704: LD_INT 80
18706: ST_TO_ADDR
// tech_RadMat := 81 ;
18707: LD_ADDR_EXP 63
18711: PUSH
18712: LD_INT 81
18714: ST_TO_ADDR
// tech_BasicTools := 82 ;
18715: LD_ADDR_EXP 64
18719: PUSH
18720: LD_INT 82
18722: ST_TO_ADDR
// tech_Cargo := 83 ;
18723: LD_ADDR_EXP 65
18727: PUSH
18728: LD_INT 83
18730: ST_TO_ADDR
// tech_Track := 84 ;
18731: LD_ADDR_EXP 66
18735: PUSH
18736: LD_INT 84
18738: ST_TO_ADDR
// tech_Crane := 85 ;
18739: LD_ADDR_EXP 67
18743: PUSH
18744: LD_INT 85
18746: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18747: LD_ADDR_EXP 68
18751: PUSH
18752: LD_INT 86
18754: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18755: LD_ADDR_EXP 69
18759: PUSH
18760: LD_INT 87
18762: ST_TO_ADDR
// end ;
18763: LD_VAR 0 1
18767: RET
// every 1 do
18768: GO 18770
18770: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18771: CALL 18632 0 0
18775: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18776: LD_VAR 0 2
18780: PUSH
18781: LD_INT 100
18783: EQUAL
18784: IFFALSE 19733
// begin if not StreamModeActive then
18786: LD_EXP 70
18790: NOT
18791: IFFALSE 18801
// StreamModeActive := true ;
18793: LD_ADDR_EXP 70
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 0 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 0
18808: EQUAL
18809: IFFALSE 18815
// InitStreamMode ;
18811: CALL 19891 0 0
// if p3 = 1 then
18815: LD_VAR 0 3
18819: PUSH
18820: LD_INT 1
18822: EQUAL
18823: IFFALSE 18833
// sRocket := true ;
18825: LD_ADDR_EXP 75
18829: PUSH
18830: LD_INT 1
18832: ST_TO_ADDR
// if p3 = 2 then
18833: LD_VAR 0 3
18837: PUSH
18838: LD_INT 2
18840: EQUAL
18841: IFFALSE 18851
// sSpeed := true ;
18843: LD_ADDR_EXP 74
18847: PUSH
18848: LD_INT 1
18850: ST_TO_ADDR
// if p3 = 3 then
18851: LD_VAR 0 3
18855: PUSH
18856: LD_INT 3
18858: EQUAL
18859: IFFALSE 18869
// sEngine := true ;
18861: LD_ADDR_EXP 76
18865: PUSH
18866: LD_INT 1
18868: ST_TO_ADDR
// if p3 = 4 then
18869: LD_VAR 0 3
18873: PUSH
18874: LD_INT 4
18876: EQUAL
18877: IFFALSE 18887
// sSpec := true ;
18879: LD_ADDR_EXP 73
18883: PUSH
18884: LD_INT 1
18886: ST_TO_ADDR
// if p3 = 5 then
18887: LD_VAR 0 3
18891: PUSH
18892: LD_INT 5
18894: EQUAL
18895: IFFALSE 18905
// sLevel := true ;
18897: LD_ADDR_EXP 77
18901: PUSH
18902: LD_INT 1
18904: ST_TO_ADDR
// if p3 = 6 then
18905: LD_VAR 0 3
18909: PUSH
18910: LD_INT 6
18912: EQUAL
18913: IFFALSE 18923
// sArmoury := true ;
18915: LD_ADDR_EXP 78
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// if p3 = 7 then
18923: LD_VAR 0 3
18927: PUSH
18928: LD_INT 7
18930: EQUAL
18931: IFFALSE 18941
// sRadar := true ;
18933: LD_ADDR_EXP 79
18937: PUSH
18938: LD_INT 1
18940: ST_TO_ADDR
// if p3 = 8 then
18941: LD_VAR 0 3
18945: PUSH
18946: LD_INT 8
18948: EQUAL
18949: IFFALSE 18959
// sBunker := true ;
18951: LD_ADDR_EXP 80
18955: PUSH
18956: LD_INT 1
18958: ST_TO_ADDR
// if p3 = 9 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 9
18966: EQUAL
18967: IFFALSE 18977
// sHack := true ;
18969: LD_ADDR_EXP 81
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 10 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 10
18984: EQUAL
18985: IFFALSE 18995
// sFire := true ;
18987: LD_ADDR_EXP 82
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 11 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 11
19002: EQUAL
19003: IFFALSE 19013
// sRefresh := true ;
19005: LD_ADDR_EXP 83
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 12 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 12
19020: EQUAL
19021: IFFALSE 19031
// sExp := true ;
19023: LD_ADDR_EXP 84
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 13 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 13
19038: EQUAL
19039: IFFALSE 19049
// sDepot := true ;
19041: LD_ADDR_EXP 85
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 14 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 14
19056: EQUAL
19057: IFFALSE 19067
// sFlag := true ;
19059: LD_ADDR_EXP 86
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 15 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 15
19074: EQUAL
19075: IFFALSE 19085
// sKamikadze := true ;
19077: LD_ADDR_EXP 94
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 16 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 16
19092: EQUAL
19093: IFFALSE 19103
// sTroll := true ;
19095: LD_ADDR_EXP 95
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 17 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 17
19110: EQUAL
19111: IFFALSE 19121
// sSlow := true ;
19113: LD_ADDR_EXP 96
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 18 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 18
19128: EQUAL
19129: IFFALSE 19139
// sLack := true ;
19131: LD_ADDR_EXP 97
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 19 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 19
19146: EQUAL
19147: IFFALSE 19157
// sTank := true ;
19149: LD_ADDR_EXP 99
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 20 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 20
19164: EQUAL
19165: IFFALSE 19175
// sRemote := true ;
19167: LD_ADDR_EXP 100
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 21 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 21
19182: EQUAL
19183: IFFALSE 19193
// sPowell := true ;
19185: LD_ADDR_EXP 101
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 22 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 22
19200: EQUAL
19201: IFFALSE 19211
// sTeleport := true ;
19203: LD_ADDR_EXP 104
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 23 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 23
19218: EQUAL
19219: IFFALSE 19229
// sOilTower := true ;
19221: LD_ADDR_EXP 106
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 24 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 24
19236: EQUAL
19237: IFFALSE 19247
// sShovel := true ;
19239: LD_ADDR_EXP 107
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 25 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 25
19254: EQUAL
19255: IFFALSE 19265
// sSheik := true ;
19257: LD_ADDR_EXP 108
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 26 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 26
19272: EQUAL
19273: IFFALSE 19283
// sEarthquake := true ;
19275: LD_ADDR_EXP 110
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 27 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 27
19290: EQUAL
19291: IFFALSE 19301
// sAI := true ;
19293: LD_ADDR_EXP 111
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 28 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 28
19308: EQUAL
19309: IFFALSE 19319
// sCargo := true ;
19311: LD_ADDR_EXP 114
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 29 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 29
19326: EQUAL
19327: IFFALSE 19337
// sDLaser := true ;
19329: LD_ADDR_EXP 115
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 30 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 30
19344: EQUAL
19345: IFFALSE 19355
// sExchange := true ;
19347: LD_ADDR_EXP 116
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 31 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 31
19362: EQUAL
19363: IFFALSE 19373
// sFac := true ;
19365: LD_ADDR_EXP 117
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 32 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 32
19380: EQUAL
19381: IFFALSE 19391
// sPower := true ;
19383: LD_ADDR_EXP 118
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 33 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 33
19398: EQUAL
19399: IFFALSE 19409
// sRandom := true ;
19401: LD_ADDR_EXP 119
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 34 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 34
19416: EQUAL
19417: IFFALSE 19427
// sShield := true ;
19419: LD_ADDR_EXP 120
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 35 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 35
19434: EQUAL
19435: IFFALSE 19445
// sTime := true ;
19437: LD_ADDR_EXP 121
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 36 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 36
19452: EQUAL
19453: IFFALSE 19463
// sTools := true ;
19455: LD_ADDR_EXP 122
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 101 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 101
19470: EQUAL
19471: IFFALSE 19481
// sSold := true ;
19473: LD_ADDR_EXP 87
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 102 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 102
19488: EQUAL
19489: IFFALSE 19499
// sDiff := true ;
19491: LD_ADDR_EXP 88
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 103 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 103
19506: EQUAL
19507: IFFALSE 19517
// sFog := true ;
19509: LD_ADDR_EXP 91
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 104 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 104
19524: EQUAL
19525: IFFALSE 19535
// sReset := true ;
19527: LD_ADDR_EXP 92
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 105 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 105
19542: EQUAL
19543: IFFALSE 19553
// sSun := true ;
19545: LD_ADDR_EXP 93
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 106 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 106
19560: EQUAL
19561: IFFALSE 19571
// sTiger := true ;
19563: LD_ADDR_EXP 89
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 107 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 107
19578: EQUAL
19579: IFFALSE 19589
// sBomb := true ;
19581: LD_ADDR_EXP 90
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 108 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 108
19596: EQUAL
19597: IFFALSE 19607
// sWound := true ;
19599: LD_ADDR_EXP 98
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 109 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 109
19614: EQUAL
19615: IFFALSE 19625
// sBetray := true ;
19617: LD_ADDR_EXP 102
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 110 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 110
19632: EQUAL
19633: IFFALSE 19643
// sContamin := true ;
19635: LD_ADDR_EXP 103
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 111 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 111
19650: EQUAL
19651: IFFALSE 19661
// sOil := true ;
19653: LD_ADDR_EXP 105
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 112 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 112
19668: EQUAL
19669: IFFALSE 19679
// sStu := true ;
19671: LD_ADDR_EXP 109
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 113 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 113
19686: EQUAL
19687: IFFALSE 19697
// sBazooka := true ;
19689: LD_ADDR_EXP 112
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 114 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 114
19704: EQUAL
19705: IFFALSE 19715
// sMortar := true ;
19707: LD_ADDR_EXP 113
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 115 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 115
19722: EQUAL
19723: IFFALSE 19733
// sRanger := true ;
19725: LD_ADDR_EXP 123
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// end ; if p2 = 101 then
19733: LD_VAR 0 2
19737: PUSH
19738: LD_INT 101
19740: EQUAL
19741: IFFALSE 19869
// begin case p3 of 1 :
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 1
19750: DOUBLE
19751: EQUAL
19752: IFTRUE 19756
19754: GO 19763
19756: POP
// hHackUnlimitedResources ; 2 :
19757: CALL 30904 0 0
19761: GO 19869
19763: LD_INT 2
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19778
19771: POP
// hHackSetLevel10 ; 3 :
19772: CALL 31037 0 0
19776: GO 19869
19778: LD_INT 3
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19793
19786: POP
// hHackSetLevel10YourUnits ; 4 :
19787: CALL 31122 0 0
19791: GO 19869
19793: LD_INT 4
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19808
19801: POP
// hHackInvincible ; 5 :
19802: CALL 31570 0 0
19806: GO 19869
19808: LD_INT 5
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19823
19816: POP
// hHackInvisible ; 6 :
19817: CALL 31681 0 0
19821: GO 19869
19823: LD_INT 6
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19838
19831: POP
// hHackChangeYourSide ; 7 :
19832: CALL 31738 0 0
19836: GO 19869
19838: LD_INT 7
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19853
19846: POP
// hHackChangeUnitSide ; 8 :
19847: CALL 31780 0 0
19851: GO 19869
19853: LD_INT 8
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19868
19861: POP
// hHackFog ; end ;
19862: CALL 31881 0 0
19866: GO 19869
19868: POP
// end ; end ;
19869: PPOPN 6
19871: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19872: GO 19874
19874: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19875: LD_STRING initStreamRollete();
19877: PPUSH
19878: CALL_OW 559
// InitStreamMode ;
19882: CALL 19891 0 0
// DefineStreamItems ( ) ;
19886: CALL 20331 0 0
// end ;
19890: END
// function InitStreamMode ; begin
19891: LD_INT 0
19893: PPUSH
// streamModeActive := false ;
19894: LD_ADDR_EXP 70
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// normalCounter := 36 ;
19902: LD_ADDR_EXP 71
19906: PUSH
19907: LD_INT 36
19909: ST_TO_ADDR
// hardcoreCounter := 16 ;
19910: LD_ADDR_EXP 72
19914: PUSH
19915: LD_INT 16
19917: ST_TO_ADDR
// sRocket := false ;
19918: LD_ADDR_EXP 75
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sSpeed := false ;
19926: LD_ADDR_EXP 74
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sEngine := false ;
19934: LD_ADDR_EXP 76
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sSpec := false ;
19942: LD_ADDR_EXP 73
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sLevel := false ;
19950: LD_ADDR_EXP 77
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sArmoury := false ;
19958: LD_ADDR_EXP 78
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sRadar := false ;
19966: LD_ADDR_EXP 79
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sBunker := false ;
19974: LD_ADDR_EXP 80
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sHack := false ;
19982: LD_ADDR_EXP 81
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sFire := false ;
19990: LD_ADDR_EXP 82
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sRefresh := false ;
19998: LD_ADDR_EXP 83
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sExp := false ;
20006: LD_ADDR_EXP 84
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sDepot := false ;
20014: LD_ADDR_EXP 85
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sFlag := false ;
20022: LD_ADDR_EXP 86
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sKamikadze := false ;
20030: LD_ADDR_EXP 94
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sTroll := false ;
20038: LD_ADDR_EXP 95
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sSlow := false ;
20046: LD_ADDR_EXP 96
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sLack := false ;
20054: LD_ADDR_EXP 97
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sTank := false ;
20062: LD_ADDR_EXP 99
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sRemote := false ;
20070: LD_ADDR_EXP 100
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sPowell := false ;
20078: LD_ADDR_EXP 101
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sTeleport := false ;
20086: LD_ADDR_EXP 104
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sOilTower := false ;
20094: LD_ADDR_EXP 106
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sShovel := false ;
20102: LD_ADDR_EXP 107
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sSheik := false ;
20110: LD_ADDR_EXP 108
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sEarthquake := false ;
20118: LD_ADDR_EXP 110
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sAI := false ;
20126: LD_ADDR_EXP 111
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sCargo := false ;
20134: LD_ADDR_EXP 114
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sDLaser := false ;
20142: LD_ADDR_EXP 115
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sExchange := false ;
20150: LD_ADDR_EXP 116
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sFac := false ;
20158: LD_ADDR_EXP 117
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sPower := false ;
20166: LD_ADDR_EXP 118
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sRandom := false ;
20174: LD_ADDR_EXP 119
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sShield := false ;
20182: LD_ADDR_EXP 120
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sTime := false ;
20190: LD_ADDR_EXP 121
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sTools := false ;
20198: LD_ADDR_EXP 122
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sSold := false ;
20206: LD_ADDR_EXP 87
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sDiff := false ;
20214: LD_ADDR_EXP 88
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sFog := false ;
20222: LD_ADDR_EXP 91
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sReset := false ;
20230: LD_ADDR_EXP 92
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sSun := false ;
20238: LD_ADDR_EXP 93
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sTiger := false ;
20246: LD_ADDR_EXP 89
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sBomb := false ;
20254: LD_ADDR_EXP 90
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sWound := false ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sBetray := false ;
20270: LD_ADDR_EXP 102
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sContamin := false ;
20278: LD_ADDR_EXP 103
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sOil := false ;
20286: LD_ADDR_EXP 105
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sStu := false ;
20294: LD_ADDR_EXP 109
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sBazooka := false ;
20302: LD_ADDR_EXP 112
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sMortar := false ;
20310: LD_ADDR_EXP 113
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sRanger := false ;
20318: LD_ADDR_EXP 123
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// end ;
20326: LD_VAR 0 1
20330: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20331: LD_INT 0
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
// result := [ ] ;
20338: LD_ADDR_VAR 0 1
20342: PUSH
20343: EMPTY
20344: ST_TO_ADDR
// if campaign_id = 1 then
20345: LD_OWVAR 69
20349: PUSH
20350: LD_INT 1
20352: EQUAL
20353: IFFALSE 23291
// begin case mission_number of 1 :
20355: LD_OWVAR 70
20359: PUSH
20360: LD_INT 1
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20432
20368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20369: LD_ADDR_VAR 0 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 4
20379: PUSH
20380: LD_INT 11
20382: PUSH
20383: LD_INT 12
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 16
20391: PUSH
20392: LD_INT 22
20394: PUSH
20395: LD_INT 23
20397: PUSH
20398: LD_INT 26
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 101
20414: PUSH
20415: LD_INT 102
20417: PUSH
20418: LD_INT 106
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: ST_TO_ADDR
20430: GO 23289
20432: LD_INT 2
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20512
20440: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20441: LD_ADDR_VAR 0 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 4
20451: PUSH
20452: LD_INT 11
20454: PUSH
20455: LD_INT 12
20457: PUSH
20458: LD_INT 15
20460: PUSH
20461: LD_INT 16
20463: PUSH
20464: LD_INT 22
20466: PUSH
20467: LD_INT 23
20469: PUSH
20470: LD_INT 26
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 101
20486: PUSH
20487: LD_INT 102
20489: PUSH
20490: LD_INT 105
20492: PUSH
20493: LD_INT 106
20495: PUSH
20496: LD_INT 108
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
20510: GO 23289
20512: LD_INT 3
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20596
20520: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20521: LD_ADDR_VAR 0 1
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 4
20531: PUSH
20532: LD_INT 5
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 15
20543: PUSH
20544: LD_INT 16
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_INT 26
20552: PUSH
20553: LD_INT 36
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 101
20570: PUSH
20571: LD_INT 102
20573: PUSH
20574: LD_INT 105
20576: PUSH
20577: LD_INT 106
20579: PUSH
20580: LD_INT 108
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 23289
20596: LD_INT 4
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20688
20604: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20605: LD_ADDR_VAR 0 1
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 8
20621: PUSH
20622: LD_INT 11
20624: PUSH
20625: LD_INT 12
20627: PUSH
20628: LD_INT 15
20630: PUSH
20631: LD_INT 16
20633: PUSH
20634: LD_INT 22
20636: PUSH
20637: LD_INT 23
20639: PUSH
20640: LD_INT 26
20642: PUSH
20643: LD_INT 36
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 101
20662: PUSH
20663: LD_INT 102
20665: PUSH
20666: LD_INT 105
20668: PUSH
20669: LD_INT 106
20671: PUSH
20672: LD_INT 108
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: ST_TO_ADDR
20686: GO 23289
20688: LD_INT 5
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20796
20696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20697: LD_ADDR_VAR 0 1
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 4
20707: PUSH
20708: LD_INT 5
20710: PUSH
20711: LD_INT 6
20713: PUSH
20714: LD_INT 8
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 25
20737: PUSH
20738: LD_INT 26
20740: PUSH
20741: LD_INT 36
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 101
20762: PUSH
20763: LD_INT 102
20765: PUSH
20766: LD_INT 105
20768: PUSH
20769: LD_INT 106
20771: PUSH
20772: LD_INT 108
20774: PUSH
20775: LD_INT 109
20777: PUSH
20778: LD_INT 112
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: ST_TO_ADDR
20794: GO 23289
20796: LD_INT 6
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20924
20804: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20805: LD_ADDR_VAR 0 1
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 4
20815: PUSH
20816: LD_INT 5
20818: PUSH
20819: LD_INT 6
20821: PUSH
20822: LD_INT 8
20824: PUSH
20825: LD_INT 11
20827: PUSH
20828: LD_INT 12
20830: PUSH
20831: LD_INT 15
20833: PUSH
20834: LD_INT 16
20836: PUSH
20837: LD_INT 20
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_INT 23
20848: PUSH
20849: LD_INT 25
20851: PUSH
20852: LD_INT 26
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 31
20860: PUSH
20861: LD_INT 32
20863: PUSH
20864: LD_INT 36
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 101
20890: PUSH
20891: LD_INT 102
20893: PUSH
20894: LD_INT 105
20896: PUSH
20897: LD_INT 106
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 109
20905: PUSH
20906: LD_INT 112
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
20922: GO 23289
20924: LD_INT 7
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 21032
20932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 4
20943: PUSH
20944: LD_INT 5
20946: PUSH
20947: LD_INT 7
20949: PUSH
20950: LD_INT 11
20952: PUSH
20953: LD_INT 12
20955: PUSH
20956: LD_INT 15
20958: PUSH
20959: LD_INT 16
20961: PUSH
20962: LD_INT 20
20964: PUSH
20965: LD_INT 21
20967: PUSH
20968: LD_INT 22
20970: PUSH
20971: LD_INT 23
20973: PUSH
20974: LD_INT 25
20976: PUSH
20977: LD_INT 26
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 101
20998: PUSH
20999: LD_INT 102
21001: PUSH
21002: LD_INT 103
21004: PUSH
21005: LD_INT 105
21007: PUSH
21008: LD_INT 106
21010: PUSH
21011: LD_INT 108
21013: PUSH
21014: LD_INT 112
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: ST_TO_ADDR
21030: GO 23289
21032: LD_INT 8
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21168
21040: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: LD_INT 4
21051: PUSH
21052: LD_INT 5
21054: PUSH
21055: LD_INT 6
21057: PUSH
21058: LD_INT 7
21060: PUSH
21061: LD_INT 8
21063: PUSH
21064: LD_INT 11
21066: PUSH
21067: LD_INT 12
21069: PUSH
21070: LD_INT 15
21072: PUSH
21073: LD_INT 16
21075: PUSH
21076: LD_INT 20
21078: PUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 22
21084: PUSH
21085: LD_INT 23
21087: PUSH
21088: LD_INT 25
21090: PUSH
21091: LD_INT 26
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 31
21099: PUSH
21100: LD_INT 32
21102: PUSH
21103: LD_INT 36
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 103
21136: PUSH
21137: LD_INT 105
21139: PUSH
21140: LD_INT 106
21142: PUSH
21143: LD_INT 108
21145: PUSH
21146: LD_INT 109
21148: PUSH
21149: LD_INT 112
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: ST_TO_ADDR
21166: GO 23289
21168: LD_INT 9
21170: DOUBLE
21171: EQUAL
21172: IFTRUE 21176
21174: GO 21312
21176: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 4
21187: PUSH
21188: LD_INT 5
21190: PUSH
21191: LD_INT 6
21193: PUSH
21194: LD_INT 7
21196: PUSH
21197: LD_INT 8
21199: PUSH
21200: LD_INT 11
21202: PUSH
21203: LD_INT 12
21205: PUSH
21206: LD_INT 15
21208: PUSH
21209: LD_INT 16
21211: PUSH
21212: LD_INT 20
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_INT 23
21223: PUSH
21224: LD_INT 25
21226: PUSH
21227: LD_INT 26
21229: PUSH
21230: LD_INT 28
21232: PUSH
21233: LD_INT 30
21235: PUSH
21236: LD_INT 31
21238: PUSH
21239: LD_INT 32
21241: PUSH
21242: LD_INT 36
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 103
21276: PUSH
21277: LD_INT 105
21279: PUSH
21280: LD_INT 106
21282: PUSH
21283: LD_INT 108
21285: PUSH
21286: LD_INT 109
21288: PUSH
21289: LD_INT 112
21291: PUSH
21292: LD_INT 114
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 23289
21312: LD_INT 10
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21504
21320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21321: LD_ADDR_VAR 0 1
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 6
21337: PUSH
21338: LD_INT 7
21340: PUSH
21341: LD_INT 8
21343: PUSH
21344: LD_INT 9
21346: PUSH
21347: LD_INT 10
21349: PUSH
21350: LD_INT 11
21352: PUSH
21353: LD_INT 12
21355: PUSH
21356: LD_INT 13
21358: PUSH
21359: LD_INT 14
21361: PUSH
21362: LD_INT 15
21364: PUSH
21365: LD_INT 16
21367: PUSH
21368: LD_INT 17
21370: PUSH
21371: LD_INT 18
21373: PUSH
21374: LD_INT 19
21376: PUSH
21377: LD_INT 20
21379: PUSH
21380: LD_INT 21
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_INT 23
21388: PUSH
21389: LD_INT 24
21391: PUSH
21392: LD_INT 25
21394: PUSH
21395: LD_INT 26
21397: PUSH
21398: LD_INT 28
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 31
21406: PUSH
21407: LD_INT 32
21409: PUSH
21410: LD_INT 36
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 103
21452: PUSH
21453: LD_INT 104
21455: PUSH
21456: LD_INT 105
21458: PUSH
21459: LD_INT 106
21461: PUSH
21462: LD_INT 107
21464: PUSH
21465: LD_INT 108
21467: PUSH
21468: LD_INT 109
21470: PUSH
21471: LD_INT 110
21473: PUSH
21474: LD_INT 111
21476: PUSH
21477: LD_INT 112
21479: PUSH
21480: LD_INT 114
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 23289
21504: LD_INT 11
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21704
21512: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21513: LD_ADDR_VAR 0 1
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: LD_INT 4
21526: PUSH
21527: LD_INT 5
21529: PUSH
21530: LD_INT 6
21532: PUSH
21533: LD_INT 7
21535: PUSH
21536: LD_INT 8
21538: PUSH
21539: LD_INT 9
21541: PUSH
21542: LD_INT 10
21544: PUSH
21545: LD_INT 11
21547: PUSH
21548: LD_INT 12
21550: PUSH
21551: LD_INT 13
21553: PUSH
21554: LD_INT 14
21556: PUSH
21557: LD_INT 15
21559: PUSH
21560: LD_INT 16
21562: PUSH
21563: LD_INT 17
21565: PUSH
21566: LD_INT 18
21568: PUSH
21569: LD_INT 19
21571: PUSH
21572: LD_INT 20
21574: PUSH
21575: LD_INT 21
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_INT 23
21583: PUSH
21584: LD_INT 24
21586: PUSH
21587: LD_INT 25
21589: PUSH
21590: LD_INT 26
21592: PUSH
21593: LD_INT 28
21595: PUSH
21596: LD_INT 30
21598: PUSH
21599: LD_INT 31
21601: PUSH
21602: LD_INT 32
21604: PUSH
21605: LD_INT 34
21607: PUSH
21608: LD_INT 36
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 101
21646: PUSH
21647: LD_INT 102
21649: PUSH
21650: LD_INT 103
21652: PUSH
21653: LD_INT 104
21655: PUSH
21656: LD_INT 105
21658: PUSH
21659: LD_INT 106
21661: PUSH
21662: LD_INT 107
21664: PUSH
21665: LD_INT 108
21667: PUSH
21668: LD_INT 109
21670: PUSH
21671: LD_INT 110
21673: PUSH
21674: LD_INT 111
21676: PUSH
21677: LD_INT 112
21679: PUSH
21680: LD_INT 114
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: ST_TO_ADDR
21702: GO 23289
21704: LD_INT 12
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21920
21712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21713: LD_ADDR_VAR 0 1
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 3
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 5
21732: PUSH
21733: LD_INT 6
21735: PUSH
21736: LD_INT 7
21738: PUSH
21739: LD_INT 8
21741: PUSH
21742: LD_INT 9
21744: PUSH
21745: LD_INT 10
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 12
21753: PUSH
21754: LD_INT 13
21756: PUSH
21757: LD_INT 14
21759: PUSH
21760: LD_INT 15
21762: PUSH
21763: LD_INT 16
21765: PUSH
21766: LD_INT 17
21768: PUSH
21769: LD_INT 18
21771: PUSH
21772: LD_INT 19
21774: PUSH
21775: LD_INT 20
21777: PUSH
21778: LD_INT 21
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 24
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 26
21795: PUSH
21796: LD_INT 27
21798: PUSH
21799: LD_INT 28
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: LD_INT 31
21807: PUSH
21808: LD_INT 32
21810: PUSH
21811: LD_INT 33
21813: PUSH
21814: LD_INT 34
21816: PUSH
21817: LD_INT 36
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 101
21858: PUSH
21859: LD_INT 102
21861: PUSH
21862: LD_INT 103
21864: PUSH
21865: LD_INT 104
21867: PUSH
21868: LD_INT 105
21870: PUSH
21871: LD_INT 106
21873: PUSH
21874: LD_INT 107
21876: PUSH
21877: LD_INT 108
21879: PUSH
21880: LD_INT 109
21882: PUSH
21883: LD_INT 110
21885: PUSH
21886: LD_INT 111
21888: PUSH
21889: LD_INT 112
21891: PUSH
21892: LD_INT 113
21894: PUSH
21895: LD_INT 114
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: ST_TO_ADDR
21918: GO 23289
21920: LD_INT 13
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 22124
21928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21929: LD_ADDR_VAR 0 1
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 4
21945: PUSH
21946: LD_INT 5
21948: PUSH
21949: LD_INT 8
21951: PUSH
21952: LD_INT 9
21954: PUSH
21955: LD_INT 10
21957: PUSH
21958: LD_INT 11
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: LD_INT 14
21966: PUSH
21967: LD_INT 15
21969: PUSH
21970: LD_INT 16
21972: PUSH
21973: LD_INT 17
21975: PUSH
21976: LD_INT 18
21978: PUSH
21979: LD_INT 19
21981: PUSH
21982: LD_INT 20
21984: PUSH
21985: LD_INT 21
21987: PUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 24
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 26
22002: PUSH
22003: LD_INT 27
22005: PUSH
22006: LD_INT 28
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 31
22014: PUSH
22015: LD_INT 32
22017: PUSH
22018: LD_INT 33
22020: PUSH
22021: LD_INT 34
22023: PUSH
22024: LD_INT 36
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 103
22068: PUSH
22069: LD_INT 104
22071: PUSH
22072: LD_INT 105
22074: PUSH
22075: LD_INT 106
22077: PUSH
22078: LD_INT 107
22080: PUSH
22081: LD_INT 108
22083: PUSH
22084: LD_INT 109
22086: PUSH
22087: LD_INT 110
22089: PUSH
22090: LD_INT 111
22092: PUSH
22093: LD_INT 112
22095: PUSH
22096: LD_INT 113
22098: PUSH
22099: LD_INT 114
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: ST_TO_ADDR
22122: GO 23289
22124: LD_INT 14
22126: DOUBLE
22127: EQUAL
22128: IFTRUE 22132
22130: GO 22344
22132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22133: LD_ADDR_VAR 0 1
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 4
22149: PUSH
22150: LD_INT 5
22152: PUSH
22153: LD_INT 6
22155: PUSH
22156: LD_INT 7
22158: PUSH
22159: LD_INT 8
22161: PUSH
22162: LD_INT 9
22164: PUSH
22165: LD_INT 10
22167: PUSH
22168: LD_INT 11
22170: PUSH
22171: LD_INT 12
22173: PUSH
22174: LD_INT 13
22176: PUSH
22177: LD_INT 14
22179: PUSH
22180: LD_INT 15
22182: PUSH
22183: LD_INT 16
22185: PUSH
22186: LD_INT 17
22188: PUSH
22189: LD_INT 18
22191: PUSH
22192: LD_INT 19
22194: PUSH
22195: LD_INT 20
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 24
22209: PUSH
22210: LD_INT 25
22212: PUSH
22213: LD_INT 26
22215: PUSH
22216: LD_INT 27
22218: PUSH
22219: LD_INT 28
22221: PUSH
22222: LD_INT 29
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 31
22230: PUSH
22231: LD_INT 32
22233: PUSH
22234: LD_INT 33
22236: PUSH
22237: LD_INT 34
22239: PUSH
22240: LD_INT 36
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 101
22282: PUSH
22283: LD_INT 102
22285: PUSH
22286: LD_INT 103
22288: PUSH
22289: LD_INT 104
22291: PUSH
22292: LD_INT 105
22294: PUSH
22295: LD_INT 106
22297: PUSH
22298: LD_INT 107
22300: PUSH
22301: LD_INT 108
22303: PUSH
22304: LD_INT 109
22306: PUSH
22307: LD_INT 110
22309: PUSH
22310: LD_INT 111
22312: PUSH
22313: LD_INT 112
22315: PUSH
22316: LD_INT 113
22318: PUSH
22319: LD_INT 114
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: ST_TO_ADDR
22342: GO 23289
22344: LD_INT 15
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22564
22352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 3
22366: PUSH
22367: LD_INT 4
22369: PUSH
22370: LD_INT 5
22372: PUSH
22373: LD_INT 6
22375: PUSH
22376: LD_INT 7
22378: PUSH
22379: LD_INT 8
22381: PUSH
22382: LD_INT 9
22384: PUSH
22385: LD_INT 10
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: LD_INT 12
22393: PUSH
22394: LD_INT 13
22396: PUSH
22397: LD_INT 14
22399: PUSH
22400: LD_INT 15
22402: PUSH
22403: LD_INT 16
22405: PUSH
22406: LD_INT 17
22408: PUSH
22409: LD_INT 18
22411: PUSH
22412: LD_INT 19
22414: PUSH
22415: LD_INT 20
22417: PUSH
22418: LD_INT 21
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_INT 23
22426: PUSH
22427: LD_INT 24
22429: PUSH
22430: LD_INT 25
22432: PUSH
22433: LD_INT 26
22435: PUSH
22436: LD_INT 27
22438: PUSH
22439: LD_INT 28
22441: PUSH
22442: LD_INT 29
22444: PUSH
22445: LD_INT 30
22447: PUSH
22448: LD_INT 31
22450: PUSH
22451: LD_INT 32
22453: PUSH
22454: LD_INT 33
22456: PUSH
22457: LD_INT 34
22459: PUSH
22460: LD_INT 36
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 101
22502: PUSH
22503: LD_INT 102
22505: PUSH
22506: LD_INT 103
22508: PUSH
22509: LD_INT 104
22511: PUSH
22512: LD_INT 105
22514: PUSH
22515: LD_INT 106
22517: PUSH
22518: LD_INT 107
22520: PUSH
22521: LD_INT 108
22523: PUSH
22524: LD_INT 109
22526: PUSH
22527: LD_INT 110
22529: PUSH
22530: LD_INT 111
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 113
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: ST_TO_ADDR
22562: GO 23289
22564: LD_INT 16
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22696
22572: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22573: LD_ADDR_VAR 0 1
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 4
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: LD_INT 7
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 12
22595: PUSH
22596: LD_INT 15
22598: PUSH
22599: LD_INT 16
22601: PUSH
22602: LD_INT 20
22604: PUSH
22605: LD_INT 21
22607: PUSH
22608: LD_INT 22
22610: PUSH
22611: LD_INT 23
22613: PUSH
22614: LD_INT 25
22616: PUSH
22617: LD_INT 26
22619: PUSH
22620: LD_INT 30
22622: PUSH
22623: LD_INT 31
22625: PUSH
22626: LD_INT 32
22628: PUSH
22629: LD_INT 33
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 101
22658: PUSH
22659: LD_INT 102
22661: PUSH
22662: LD_INT 103
22664: PUSH
22665: LD_INT 106
22667: PUSH
22668: LD_INT 108
22670: PUSH
22671: LD_INT 112
22673: PUSH
22674: LD_INT 113
22676: PUSH
22677: LD_INT 114
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 23289
22696: LD_INT 17
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22916
22704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: LD_INT 6
22727: PUSH
22728: LD_INT 7
22730: PUSH
22731: LD_INT 8
22733: PUSH
22734: LD_INT 9
22736: PUSH
22737: LD_INT 10
22739: PUSH
22740: LD_INT 11
22742: PUSH
22743: LD_INT 12
22745: PUSH
22746: LD_INT 13
22748: PUSH
22749: LD_INT 14
22751: PUSH
22752: LD_INT 15
22754: PUSH
22755: LD_INT 16
22757: PUSH
22758: LD_INT 17
22760: PUSH
22761: LD_INT 18
22763: PUSH
22764: LD_INT 19
22766: PUSH
22767: LD_INT 20
22769: PUSH
22770: LD_INT 21
22772: PUSH
22773: LD_INT 22
22775: PUSH
22776: LD_INT 23
22778: PUSH
22779: LD_INT 24
22781: PUSH
22782: LD_INT 25
22784: PUSH
22785: LD_INT 26
22787: PUSH
22788: LD_INT 27
22790: PUSH
22791: LD_INT 28
22793: PUSH
22794: LD_INT 29
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 31
22802: PUSH
22803: LD_INT 32
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: LD_INT 34
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 101
22854: PUSH
22855: LD_INT 102
22857: PUSH
22858: LD_INT 103
22860: PUSH
22861: LD_INT 104
22863: PUSH
22864: LD_INT 105
22866: PUSH
22867: LD_INT 106
22869: PUSH
22870: LD_INT 107
22872: PUSH
22873: LD_INT 108
22875: PUSH
22876: LD_INT 109
22878: PUSH
22879: LD_INT 110
22881: PUSH
22882: LD_INT 111
22884: PUSH
22885: LD_INT 112
22887: PUSH
22888: LD_INT 113
22890: PUSH
22891: LD_INT 114
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: ST_TO_ADDR
22914: GO 23289
22916: LD_INT 18
22918: DOUBLE
22919: EQUAL
22920: IFTRUE 22924
22922: GO 23060
22924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22925: LD_ADDR_VAR 0 1
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: LD_INT 4
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: LD_INT 7
22941: PUSH
22942: LD_INT 11
22944: PUSH
22945: LD_INT 12
22947: PUSH
22948: LD_INT 15
22950: PUSH
22951: LD_INT 16
22953: PUSH
22954: LD_INT 20
22956: PUSH
22957: LD_INT 21
22959: PUSH
22960: LD_INT 22
22962: PUSH
22963: LD_INT 23
22965: PUSH
22966: LD_INT 25
22968: PUSH
22969: LD_INT 26
22971: PUSH
22972: LD_INT 30
22974: PUSH
22975: LD_INT 31
22977: PUSH
22978: LD_INT 32
22980: PUSH
22981: LD_INT 33
22983: PUSH
22984: LD_INT 34
22986: PUSH
22987: LD_INT 35
22989: PUSH
22990: LD_INT 36
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 101
23018: PUSH
23019: LD_INT 102
23021: PUSH
23022: LD_INT 103
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 108
23030: PUSH
23031: LD_INT 112
23033: PUSH
23034: LD_INT 113
23036: PUSH
23037: LD_INT 114
23039: PUSH
23040: LD_INT 115
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: ST_TO_ADDR
23058: GO 23289
23060: LD_INT 19
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23288
23068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23069: LD_ADDR_VAR 0 1
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 3
23082: PUSH
23083: LD_INT 4
23085: PUSH
23086: LD_INT 5
23088: PUSH
23089: LD_INT 6
23091: PUSH
23092: LD_INT 7
23094: PUSH
23095: LD_INT 8
23097: PUSH
23098: LD_INT 9
23100: PUSH
23101: LD_INT 10
23103: PUSH
23104: LD_INT 11
23106: PUSH
23107: LD_INT 12
23109: PUSH
23110: LD_INT 13
23112: PUSH
23113: LD_INT 14
23115: PUSH
23116: LD_INT 15
23118: PUSH
23119: LD_INT 16
23121: PUSH
23122: LD_INT 17
23124: PUSH
23125: LD_INT 18
23127: PUSH
23128: LD_INT 19
23130: PUSH
23131: LD_INT 20
23133: PUSH
23134: LD_INT 21
23136: PUSH
23137: LD_INT 22
23139: PUSH
23140: LD_INT 23
23142: PUSH
23143: LD_INT 24
23145: PUSH
23146: LD_INT 25
23148: PUSH
23149: LD_INT 26
23151: PUSH
23152: LD_INT 27
23154: PUSH
23155: LD_INT 28
23157: PUSH
23158: LD_INT 29
23160: PUSH
23161: LD_INT 30
23163: PUSH
23164: LD_INT 31
23166: PUSH
23167: LD_INT 32
23169: PUSH
23170: LD_INT 33
23172: PUSH
23173: LD_INT 34
23175: PUSH
23176: LD_INT 35
23178: PUSH
23179: LD_INT 36
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 101
23222: PUSH
23223: LD_INT 102
23225: PUSH
23226: LD_INT 103
23228: PUSH
23229: LD_INT 104
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 107
23240: PUSH
23241: LD_INT 108
23243: PUSH
23244: LD_INT 109
23246: PUSH
23247: LD_INT 110
23249: PUSH
23250: LD_INT 111
23252: PUSH
23253: LD_INT 112
23255: PUSH
23256: LD_INT 113
23258: PUSH
23259: LD_INT 114
23261: PUSH
23262: LD_INT 115
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: ST_TO_ADDR
23286: GO 23289
23288: POP
// end else
23289: GO 23508
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23291: LD_ADDR_VAR 0 1
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 4
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: LD_INT 6
23313: PUSH
23314: LD_INT 7
23316: PUSH
23317: LD_INT 8
23319: PUSH
23320: LD_INT 9
23322: PUSH
23323: LD_INT 10
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 13
23334: PUSH
23335: LD_INT 14
23337: PUSH
23338: LD_INT 15
23340: PUSH
23341: LD_INT 16
23343: PUSH
23344: LD_INT 17
23346: PUSH
23347: LD_INT 18
23349: PUSH
23350: LD_INT 19
23352: PUSH
23353: LD_INT 20
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 23
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: LD_INT 25
23370: PUSH
23371: LD_INT 26
23373: PUSH
23374: LD_INT 27
23376: PUSH
23377: LD_INT 28
23379: PUSH
23380: LD_INT 29
23382: PUSH
23383: LD_INT 30
23385: PUSH
23386: LD_INT 31
23388: PUSH
23389: LD_INT 32
23391: PUSH
23392: LD_INT 33
23394: PUSH
23395: LD_INT 34
23397: PUSH
23398: LD_INT 35
23400: PUSH
23401: LD_INT 36
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 101
23444: PUSH
23445: LD_INT 102
23447: PUSH
23448: LD_INT 103
23450: PUSH
23451: LD_INT 104
23453: PUSH
23454: LD_INT 105
23456: PUSH
23457: LD_INT 106
23459: PUSH
23460: LD_INT 107
23462: PUSH
23463: LD_INT 108
23465: PUSH
23466: LD_INT 109
23468: PUSH
23469: LD_INT 110
23471: PUSH
23472: LD_INT 111
23474: PUSH
23475: LD_INT 112
23477: PUSH
23478: LD_INT 113
23480: PUSH
23481: LD_INT 114
23483: PUSH
23484: LD_INT 115
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: ST_TO_ADDR
// if result then
23508: LD_VAR 0 1
23512: IFFALSE 23801
// begin normal :=  ;
23514: LD_ADDR_VAR 0 3
23518: PUSH
23519: LD_STRING 
23521: ST_TO_ADDR
// hardcore :=  ;
23522: LD_ADDR_VAR 0 4
23526: PUSH
23527: LD_STRING 
23529: ST_TO_ADDR
// for i = 1 to normalCounter do
23530: LD_ADDR_VAR 0 5
23534: PUSH
23535: DOUBLE
23536: LD_INT 1
23538: DEC
23539: ST_TO_ADDR
23540: LD_EXP 71
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23647
// begin tmp := 0 ;
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_STRING 0
23555: ST_TO_ADDR
// if result [ 1 ] then
23556: LD_VAR 0 1
23560: PUSH
23561: LD_INT 1
23563: ARRAY
23564: IFFALSE 23629
// if result [ 1 ] [ 1 ] = i then
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 1
23573: ARRAY
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PUSH
23579: LD_VAR 0 5
23583: EQUAL
23584: IFFALSE 23629
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23586: LD_ADDR_VAR 0 1
23590: PUSH
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_INT 1
23598: PPUSH
23599: LD_VAR 0 1
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: LD_INT 1
23610: PPUSH
23611: CALL_OW 3
23615: PPUSH
23616: CALL_OW 1
23620: ST_TO_ADDR
// tmp := 1 ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_STRING 1
23628: ST_TO_ADDR
// end ; normal := normal & tmp ;
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_VAR 0 3
23638: PUSH
23639: LD_VAR 0 2
23643: STR
23644: ST_TO_ADDR
// end ;
23645: GO 23545
23647: POP
23648: POP
// for i = 1 to hardcoreCounter do
23649: LD_ADDR_VAR 0 5
23653: PUSH
23654: DOUBLE
23655: LD_INT 1
23657: DEC
23658: ST_TO_ADDR
23659: LD_EXP 72
23663: PUSH
23664: FOR_TO
23665: IFFALSE 23770
// begin tmp := 0 ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_STRING 0
23674: ST_TO_ADDR
// if result [ 2 ] then
23675: LD_VAR 0 1
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: IFFALSE 23752
// if result [ 2 ] [ 1 ] = 100 + i then
23685: LD_VAR 0 1
23689: PUSH
23690: LD_INT 2
23692: ARRAY
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: PUSH
23698: LD_INT 100
23700: PUSH
23701: LD_VAR 0 5
23705: PLUS
23706: EQUAL
23707: IFFALSE 23752
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23709: LD_ADDR_VAR 0 1
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_INT 2
23721: PPUSH
23722: LD_VAR 0 1
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: PPUSH
23731: LD_INT 1
23733: PPUSH
23734: CALL_OW 3
23738: PPUSH
23739: CALL_OW 1
23743: ST_TO_ADDR
// tmp := 1 ;
23744: LD_ADDR_VAR 0 2
23748: PUSH
23749: LD_STRING 1
23751: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 4
23761: PUSH
23762: LD_VAR 0 2
23766: STR
23767: ST_TO_ADDR
// end ;
23768: GO 23664
23770: POP
23771: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23772: LD_STRING getStreamItemsFromMission("
23774: PUSH
23775: LD_VAR 0 3
23779: STR
23780: PUSH
23781: LD_STRING ","
23783: STR
23784: PUSH
23785: LD_VAR 0 4
23789: STR
23790: PUSH
23791: LD_STRING ")
23793: STR
23794: PPUSH
23795: CALL_OW 559
// end else
23799: GO 23808
// ToLua ( getStreamItemsFromMission("","") ) ;
23801: LD_STRING getStreamItemsFromMission("","")
23803: PPUSH
23804: CALL_OW 559
// end ;
23808: LD_VAR 0 1
23812: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23813: LD_EXP 70
23817: PUSH
23818: LD_EXP 75
23822: AND
23823: IFFALSE 23947
23825: GO 23827
23827: DISABLE
23828: LD_INT 0
23830: PPUSH
23831: PPUSH
// begin enable ;
23832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23833: LD_ADDR_VAR 0 2
23837: PUSH
23838: LD_INT 22
23840: PUSH
23841: LD_OWVAR 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 34
23855: PUSH
23856: LD_INT 7
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 34
23865: PUSH
23866: LD_INT 45
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 34
23875: PUSH
23876: LD_INT 28
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 47
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23947
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23945
// begin SetLives ( i , 0 ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 0
23938: PPUSH
23939: CALL_OW 234
// end ;
23943: GO 23928
23945: POP
23946: POP
// end ;
23947: PPOPN 2
23949: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23950: LD_EXP 70
23954: PUSH
23955: LD_EXP 76
23959: AND
23960: IFFALSE 24044
23962: GO 23964
23964: DISABLE
23965: LD_INT 0
23967: PPUSH
23968: PPUSH
// begin enable ;
23969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_INT 22
23977: PUSH
23978: LD_OWVAR 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 32
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: ST_TO_ADDR
// if not tmp then
24006: LD_VAR 0 2
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24044
// for i in tmp do
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 2
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24042
// begin SetLives ( i , 0 ) ;
24028: LD_VAR 0 1
24032: PPUSH
24033: LD_INT 0
24035: PPUSH
24036: CALL_OW 234
// end ;
24040: GO 24025
24042: POP
24043: POP
// end ;
24044: PPOPN 2
24046: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24047: LD_EXP 70
24051: PUSH
24052: LD_EXP 73
24056: AND
24057: IFFALSE 24150
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
// begin enable ;
24065: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24066: LD_ADDR_VAR 0 1
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 25
24088: PUSH
24089: LD_INT 5
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 25
24098: PUSH
24099: LD_INT 9
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 8
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PPUSH
24126: CALL_OW 69
24130: PUSH
24131: FOR_IN
24132: IFFALSE 24148
// begin SetClass ( i , 1 ) ;
24134: LD_VAR 0 1
24138: PPUSH
24139: LD_INT 1
24141: PPUSH
24142: CALL_OW 336
// end ;
24146: GO 24131
24148: POP
24149: POP
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24153: LD_EXP 70
24157: PUSH
24158: LD_EXP 74
24162: AND
24163: PUSH
24164: LD_OWVAR 65
24168: PUSH
24169: LD_INT 7
24171: LESS
24172: AND
24173: IFFALSE 24187
24175: GO 24177
24177: DISABLE
// begin enable ;
24178: ENABLE
// game_speed := 7 ;
24179: LD_ADDR_OWVAR 65
24183: PUSH
24184: LD_INT 7
24186: ST_TO_ADDR
// end ;
24187: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24188: LD_EXP 70
24192: PUSH
24193: LD_EXP 77
24197: AND
24198: IFFALSE 24400
24200: GO 24202
24202: DISABLE
24203: LD_INT 0
24205: PPUSH
24206: PPUSH
24207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24208: LD_ADDR_VAR 0 3
24212: PUSH
24213: LD_INT 81
24215: PUSH
24216: LD_OWVAR 2
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 21
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 69
24243: ST_TO_ADDR
// if not tmp then
24244: LD_VAR 0 3
24248: NOT
24249: IFFALSE 24253
// exit ;
24251: GO 24400
// if tmp > 5 then
24253: LD_VAR 0 3
24257: PUSH
24258: LD_INT 5
24260: GREATER
24261: IFFALSE 24273
// k := 5 else
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 5
24270: ST_TO_ADDR
24271: GO 24283
// k := tmp ;
24273: LD_ADDR_VAR 0 2
24277: PUSH
24278: LD_VAR 0 3
24282: ST_TO_ADDR
// for i := 1 to k do
24283: LD_ADDR_VAR 0 1
24287: PUSH
24288: DOUBLE
24289: LD_INT 1
24291: DEC
24292: ST_TO_ADDR
24293: LD_VAR 0 2
24297: PUSH
24298: FOR_TO
24299: IFFALSE 24398
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24301: LD_VAR 0 3
24305: PUSH
24306: LD_VAR 0 1
24310: ARRAY
24311: PPUSH
24312: LD_VAR 0 1
24316: PUSH
24317: LD_INT 4
24319: MOD
24320: PUSH
24321: LD_INT 1
24323: PLUS
24324: PPUSH
24325: CALL_OW 259
24329: PUSH
24330: LD_INT 10
24332: LESS
24333: IFFALSE 24396
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24335: LD_VAR 0 3
24339: PUSH
24340: LD_VAR 0 1
24344: ARRAY
24345: PPUSH
24346: LD_VAR 0 1
24350: PUSH
24351: LD_INT 4
24353: MOD
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: PPUSH
24359: LD_VAR 0 3
24363: PUSH
24364: LD_VAR 0 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 1
24374: PUSH
24375: LD_INT 4
24377: MOD
24378: PUSH
24379: LD_INT 1
24381: PLUS
24382: PPUSH
24383: CALL_OW 259
24387: PUSH
24388: LD_INT 1
24390: PLUS
24391: PPUSH
24392: CALL_OW 237
24396: GO 24298
24398: POP
24399: POP
// end ;
24400: PPOPN 3
24402: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24403: LD_EXP 70
24407: PUSH
24408: LD_EXP 78
24412: AND
24413: IFFALSE 24433
24415: GO 24417
24417: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24418: LD_INT 4
24420: PPUSH
24421: LD_OWVAR 2
24425: PPUSH
24426: LD_INT 0
24428: PPUSH
24429: CALL_OW 324
24433: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24434: LD_EXP 70
24438: PUSH
24439: LD_EXP 107
24443: AND
24444: IFFALSE 24464
24446: GO 24448
24448: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24449: LD_INT 19
24451: PPUSH
24452: LD_OWVAR 2
24456: PPUSH
24457: LD_INT 0
24459: PPUSH
24460: CALL_OW 324
24464: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24465: LD_EXP 70
24469: PUSH
24470: LD_EXP 79
24474: AND
24475: IFFALSE 24577
24477: GO 24479
24479: DISABLE
24480: LD_INT 0
24482: PPUSH
24483: PPUSH
// begin enable ;
24484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_OWVAR 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 34
24507: PUSH
24508: LD_INT 11
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 34
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PPUSH
24534: CALL_OW 69
24538: ST_TO_ADDR
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24577
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24575
// begin SetLives ( i , 0 ) ;
24561: LD_VAR 0 1
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: CALL_OW 234
// end ;
24573: GO 24558
24575: POP
24576: POP
// end ;
24577: PPOPN 2
24579: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24580: LD_EXP 70
24584: PUSH
24585: LD_EXP 80
24589: AND
24590: IFFALSE 24610
24592: GO 24594
24594: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24595: LD_INT 32
24597: PPUSH
24598: LD_OWVAR 2
24602: PPUSH
24603: LD_INT 0
24605: PPUSH
24606: CALL_OW 324
24610: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24611: LD_EXP 70
24615: PUSH
24616: LD_EXP 81
24620: AND
24621: IFFALSE 24802
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
24629: PPUSH
24630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_OWVAR 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 33
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PPUSH
24662: CALL_OW 69
24666: ST_TO_ADDR
// if not tmp then
24667: LD_VAR 0 2
24671: NOT
24672: IFFALSE 24676
// exit ;
24674: GO 24802
// side := 0 ;
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 0
24683: ST_TO_ADDR
// for i := 1 to 8 do
24684: LD_ADDR_VAR 0 1
24688: PUSH
24689: DOUBLE
24690: LD_INT 1
24692: DEC
24693: ST_TO_ADDR
24694: LD_INT 8
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24746
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24700: LD_OWVAR 2
24704: PUSH
24705: LD_VAR 0 1
24709: NONEQUAL
24710: PUSH
24711: LD_OWVAR 2
24715: PPUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 81
24725: PUSH
24726: LD_INT 2
24728: EQUAL
24729: AND
24730: IFFALSE 24744
// begin side := i ;
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_VAR 0 1
24741: ST_TO_ADDR
// break ;
24742: GO 24746
// end ;
24744: GO 24697
24746: POP
24747: POP
// if not side then
24748: LD_VAR 0 3
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 24802
// for i := 1 to tmp do
24757: LD_ADDR_VAR 0 1
24761: PUSH
24762: DOUBLE
24763: LD_INT 1
24765: DEC
24766: ST_TO_ADDR
24767: LD_VAR 0 2
24771: PUSH
24772: FOR_TO
24773: IFFALSE 24800
// if Prob ( 60 ) then
24775: LD_INT 60
24777: PPUSH
24778: CALL_OW 13
24782: IFFALSE 24798
// SetSide ( i , side ) ;
24784: LD_VAR 0 1
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: CALL_OW 235
24798: GO 24772
24800: POP
24801: POP
// end ;
24802: PPOPN 3
24804: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24805: LD_EXP 70
24809: PUSH
24810: LD_EXP 83
24814: AND
24815: IFFALSE 24934
24817: GO 24819
24819: DISABLE
24820: LD_INT 0
24822: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24823: LD_ADDR_VAR 0 1
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 21
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 3
24852: PUSH
24853: LD_INT 23
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 69
24876: PUSH
24877: FOR_IN
24878: IFFALSE 24932
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24880: LD_VAR 0 1
24884: PPUSH
24885: CALL_OW 257
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: LD_INT 4
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: IN
24908: IFFALSE 24930
// SetClass ( un , rand ( 1 , 4 ) ) ;
24910: LD_VAR 0 1
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: LD_INT 4
24920: PPUSH
24921: CALL_OW 12
24925: PPUSH
24926: CALL_OW 336
24930: GO 24877
24932: POP
24933: POP
// end ;
24934: PPOPN 1
24936: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24937: LD_EXP 70
24941: PUSH
24942: LD_EXP 82
24946: AND
24947: IFFALSE 25026
24949: GO 24951
24951: DISABLE
24952: LD_INT 0
24954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24955: LD_ADDR_VAR 0 1
24959: PUSH
24960: LD_INT 22
24962: PUSH
24963: LD_OWVAR 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 69
24990: ST_TO_ADDR
// if not tmp then
24991: LD_VAR 0 1
24995: NOT
24996: IFFALSE 25000
// exit ;
24998: GO 25026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25000: LD_VAR 0 1
25004: PUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_VAR 0 1
25012: PPUSH
25013: CALL_OW 12
25017: ARRAY
25018: PPUSH
25019: LD_INT 100
25021: PPUSH
25022: CALL_OW 234
// end ;
25026: PPOPN 1
25028: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25029: LD_EXP 70
25033: PUSH
25034: LD_EXP 84
25038: AND
25039: IFFALSE 25137
25041: GO 25043
25043: DISABLE
25044: LD_INT 0
25046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25047: LD_ADDR_VAR 0 1
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_OWVAR 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 21
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 69
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 1
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25137
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25092: LD_VAR 0 1
25096: PUSH
25097: LD_INT 1
25099: PPUSH
25100: LD_VAR 0 1
25104: PPUSH
25105: CALL_OW 12
25109: ARRAY
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: LD_INT 4
25116: PPUSH
25117: CALL_OW 12
25121: PPUSH
25122: LD_INT 3000
25124: PPUSH
25125: LD_INT 9000
25127: PPUSH
25128: CALL_OW 12
25132: PPUSH
25133: CALL_OW 492
// end ;
25137: PPOPN 1
25139: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25140: LD_EXP 70
25144: PUSH
25145: LD_EXP 85
25149: AND
25150: IFFALSE 25170
25152: GO 25154
25154: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25155: LD_INT 1
25157: PPUSH
25158: LD_OWVAR 2
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 324
25170: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25171: LD_EXP 70
25175: PUSH
25176: LD_EXP 86
25180: AND
25181: IFFALSE 25264
25183: GO 25185
25185: DISABLE
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_INT 22
25197: PUSH
25198: LD_OWVAR 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 21
25209: PUSH
25210: LD_INT 3
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PPUSH
25221: CALL_OW 69
25225: ST_TO_ADDR
// if not tmp then
25226: LD_VAR 0 2
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 25264
// for i in tmp do
25235: LD_ADDR_VAR 0 1
25239: PUSH
25240: LD_VAR 0 2
25244: PUSH
25245: FOR_IN
25246: IFFALSE 25262
// SetBLevel ( i , 10 ) ;
25248: LD_VAR 0 1
25252: PPUSH
25253: LD_INT 10
25255: PPUSH
25256: CALL_OW 241
25260: GO 25245
25262: POP
25263: POP
// end ;
25264: PPOPN 2
25266: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25267: LD_EXP 70
25271: PUSH
25272: LD_EXP 87
25276: AND
25277: IFFALSE 25388
25279: GO 25281
25281: DISABLE
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: LD_INT 22
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 25
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 69
25322: ST_TO_ADDR
// if not tmp then
25323: LD_VAR 0 3
25327: NOT
25328: IFFALSE 25332
// exit ;
25330: GO 25388
// un := tmp [ rand ( 1 , tmp ) ] ;
25332: LD_ADDR_VAR 0 2
25336: PUSH
25337: LD_VAR 0 3
25341: PUSH
25342: LD_INT 1
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: CALL_OW 12
25354: ARRAY
25355: ST_TO_ADDR
// if Crawls ( un ) then
25356: LD_VAR 0 2
25360: PPUSH
25361: CALL_OW 318
25365: IFFALSE 25376
// ComWalk ( un ) ;
25367: LD_VAR 0 2
25371: PPUSH
25372: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_INT 5
25383: PPUSH
25384: CALL_OW 336
// end ;
25388: PPOPN 3
25390: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25391: LD_EXP 70
25395: PUSH
25396: LD_EXP 88
25400: AND
25401: PUSH
25402: LD_OWVAR 67
25406: PUSH
25407: LD_INT 3
25409: LESS
25410: AND
25411: IFFALSE 25430
25413: GO 25415
25415: DISABLE
// Difficulty := Difficulty + 1 ;
25416: LD_ADDR_OWVAR 67
25420: PUSH
25421: LD_OWVAR 67
25425: PUSH
25426: LD_INT 1
25428: PLUS
25429: ST_TO_ADDR
25430: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25431: LD_EXP 70
25435: PUSH
25436: LD_EXP 89
25440: AND
25441: IFFALSE 25544
25443: GO 25445
25445: DISABLE
25446: LD_INT 0
25448: PPUSH
// begin for i := 1 to 5 do
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: DOUBLE
25455: LD_INT 1
25457: DEC
25458: ST_TO_ADDR
25459: LD_INT 5
25461: PUSH
25462: FOR_TO
25463: IFFALSE 25542
// begin uc_nation := nation_nature ;
25465: LD_ADDR_OWVAR 21
25469: PUSH
25470: LD_INT 0
25472: ST_TO_ADDR
// uc_side := 0 ;
25473: LD_ADDR_OWVAR 20
25477: PUSH
25478: LD_INT 0
25480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25481: LD_ADDR_OWVAR 29
25485: PUSH
25486: LD_INT 12
25488: PUSH
25489: LD_INT 12
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: ST_TO_ADDR
// hc_agressivity := 20 ;
25496: LD_ADDR_OWVAR 35
25500: PUSH
25501: LD_INT 20
25503: ST_TO_ADDR
// hc_class := class_tiger ;
25504: LD_ADDR_OWVAR 28
25508: PUSH
25509: LD_INT 14
25511: ST_TO_ADDR
// hc_gallery :=  ;
25512: LD_ADDR_OWVAR 33
25516: PUSH
25517: LD_STRING 
25519: ST_TO_ADDR
// hc_name :=  ;
25520: LD_ADDR_OWVAR 26
25524: PUSH
25525: LD_STRING 
25527: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25528: CALL_OW 44
25532: PPUSH
25533: LD_INT 0
25535: PPUSH
25536: CALL_OW 51
// end ;
25540: GO 25462
25542: POP
25543: POP
// end ;
25544: PPOPN 1
25546: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25547: LD_EXP 70
25551: PUSH
25552: LD_EXP 90
25556: AND
25557: IFFALSE 25566
25559: GO 25561
25561: DISABLE
// StreamSibBomb ;
25562: CALL 25567 0 0
25566: END
// export function StreamSibBomb ; var i , x , y ; begin
25567: LD_INT 0
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
// result := false ;
25573: LD_ADDR_VAR 0 1
25577: PUSH
25578: LD_INT 0
25580: ST_TO_ADDR
// for i := 1 to 16 do
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: DOUBLE
25587: LD_INT 1
25589: DEC
25590: ST_TO_ADDR
25591: LD_INT 16
25593: PUSH
25594: FOR_TO
25595: IFFALSE 25794
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 10
25604: PUSH
25605: LD_INT 20
25607: PUSH
25608: LD_INT 30
25610: PUSH
25611: LD_INT 40
25613: PUSH
25614: LD_INT 50
25616: PUSH
25617: LD_INT 60
25619: PUSH
25620: LD_INT 70
25622: PUSH
25623: LD_INT 80
25625: PUSH
25626: LD_INT 90
25628: PUSH
25629: LD_INT 100
25631: PUSH
25632: LD_INT 110
25634: PUSH
25635: LD_INT 120
25637: PUSH
25638: LD_INT 130
25640: PUSH
25641: LD_INT 140
25643: PUSH
25644: LD_INT 150
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: PPUSH
25667: LD_INT 15
25669: PPUSH
25670: CALL_OW 12
25674: ARRAY
25675: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25676: LD_ADDR_VAR 0 4
25680: PUSH
25681: LD_INT 10
25683: PUSH
25684: LD_INT 20
25686: PUSH
25687: LD_INT 30
25689: PUSH
25690: LD_INT 40
25692: PUSH
25693: LD_INT 50
25695: PUSH
25696: LD_INT 60
25698: PUSH
25699: LD_INT 70
25701: PUSH
25702: LD_INT 80
25704: PUSH
25705: LD_INT 90
25707: PUSH
25708: LD_INT 100
25710: PUSH
25711: LD_INT 110
25713: PUSH
25714: LD_INT 120
25716: PUSH
25717: LD_INT 130
25719: PUSH
25720: LD_INT 140
25722: PUSH
25723: LD_INT 150
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PPUSH
25746: LD_INT 15
25748: PPUSH
25749: CALL_OW 12
25753: ARRAY
25754: ST_TO_ADDR
// if ValidHex ( x , y ) then
25755: LD_VAR 0 3
25759: PPUSH
25760: LD_VAR 0 4
25764: PPUSH
25765: CALL_OW 488
25769: IFFALSE 25792
// begin result := [ x , y ] ;
25771: LD_ADDR_VAR 0 1
25775: PUSH
25776: LD_VAR 0 3
25780: PUSH
25781: LD_VAR 0 4
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: ST_TO_ADDR
// break ;
25790: GO 25794
// end ; end ;
25792: GO 25594
25794: POP
25795: POP
// if result then
25796: LD_VAR 0 1
25800: IFFALSE 25860
// begin ToLua ( playSibBomb() ) ;
25802: LD_STRING playSibBomb()
25804: PPUSH
25805: CALL_OW 559
// wait ( 0 0$14 ) ;
25809: LD_INT 490
25811: PPUSH
25812: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25816: LD_VAR 0 1
25820: PUSH
25821: LD_INT 1
25823: ARRAY
25824: PPUSH
25825: LD_VAR 0 1
25829: PUSH
25830: LD_INT 2
25832: ARRAY
25833: PPUSH
25834: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25838: LD_VAR 0 1
25842: PUSH
25843: LD_INT 1
25845: ARRAY
25846: PPUSH
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 2
25854: ARRAY
25855: PPUSH
25856: CALL_OW 429
// end ; end ;
25860: LD_VAR 0 1
25864: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25865: LD_EXP 70
25869: PUSH
25870: LD_EXP 92
25874: AND
25875: IFFALSE 25887
25877: GO 25879
25879: DISABLE
// YouLost (  ) ;
25880: LD_STRING 
25882: PPUSH
25883: CALL_OW 104
25887: END
// every 0 0$1 trigger StreamModeActive and sFog do
25888: LD_EXP 70
25892: PUSH
25893: LD_EXP 91
25897: AND
25898: IFFALSE 25912
25900: GO 25902
25902: DISABLE
// FogOff ( your_side ) ;
25903: LD_OWVAR 2
25907: PPUSH
25908: CALL_OW 344
25912: END
// every 0 0$1 trigger StreamModeActive and sSun do
25913: LD_EXP 70
25917: PUSH
25918: LD_EXP 93
25922: AND
25923: IFFALSE 25951
25925: GO 25927
25927: DISABLE
// begin solar_recharge_percent := 0 ;
25928: LD_ADDR_OWVAR 79
25932: PUSH
25933: LD_INT 0
25935: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25936: LD_INT 10500
25938: PPUSH
25939: CALL_OW 67
// solar_recharge_percent := 100 ;
25943: LD_ADDR_OWVAR 79
25947: PUSH
25948: LD_INT 100
25950: ST_TO_ADDR
// end ;
25951: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25952: LD_EXP 70
25956: PUSH
25957: LD_EXP 94
25961: AND
25962: IFFALSE 26201
25964: GO 25966
25966: DISABLE
25967: LD_INT 0
25969: PPUSH
25970: PPUSH
25971: PPUSH
// begin tmp := [ ] ;
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: EMPTY
25978: ST_TO_ADDR
// for i := 1 to 6 do
25979: LD_ADDR_VAR 0 1
25983: PUSH
25984: DOUBLE
25985: LD_INT 1
25987: DEC
25988: ST_TO_ADDR
25989: LD_INT 6
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26098
// begin uc_nation := nation_nature ;
25995: LD_ADDR_OWVAR 21
25999: PUSH
26000: LD_INT 0
26002: ST_TO_ADDR
// uc_side := 0 ;
26003: LD_ADDR_OWVAR 20
26007: PUSH
26008: LD_INT 0
26010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26011: LD_ADDR_OWVAR 29
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 12
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// hc_agressivity := 20 ;
26026: LD_ADDR_OWVAR 35
26030: PUSH
26031: LD_INT 20
26033: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26034: LD_ADDR_OWVAR 28
26038: PUSH
26039: LD_INT 17
26041: ST_TO_ADDR
// hc_gallery :=  ;
26042: LD_ADDR_OWVAR 33
26046: PUSH
26047: LD_STRING 
26049: ST_TO_ADDR
// hc_name :=  ;
26050: LD_ADDR_OWVAR 26
26054: PUSH
26055: LD_STRING 
26057: ST_TO_ADDR
// un := CreateHuman ;
26058: LD_ADDR_VAR 0 2
26062: PUSH
26063: CALL_OW 44
26067: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26068: LD_VAR 0 2
26072: PPUSH
26073: LD_INT 1
26075: PPUSH
26076: CALL_OW 51
// tmp := tmp ^ un ;
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_VAR 0 3
26089: PUSH
26090: LD_VAR 0 2
26094: ADD
26095: ST_TO_ADDR
// end ;
26096: GO 25992
26098: POP
26099: POP
// repeat wait ( 0 0$1 ) ;
26100: LD_INT 35
26102: PPUSH
26103: CALL_OW 67
// for un in tmp do
26107: LD_ADDR_VAR 0 2
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: FOR_IN
26118: IFFALSE 26192
// begin if IsDead ( un ) then
26120: LD_VAR 0 2
26124: PPUSH
26125: CALL_OW 301
26129: IFFALSE 26149
// begin tmp := tmp diff un ;
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_VAR 0 3
26140: PUSH
26141: LD_VAR 0 2
26145: DIFF
26146: ST_TO_ADDR
// continue ;
26147: GO 26117
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26149: LD_VAR 0 2
26153: PPUSH
26154: LD_INT 3
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PPUSH
26171: CALL_OW 69
26175: PPUSH
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 74
26185: PPUSH
26186: CALL_OW 115
// end ;
26190: GO 26117
26192: POP
26193: POP
// until not tmp ;
26194: LD_VAR 0 3
26198: NOT
26199: IFFALSE 26100
// end ;
26201: PPOPN 3
26203: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26204: LD_EXP 70
26208: PUSH
26209: LD_EXP 95
26213: AND
26214: IFFALSE 26268
26216: GO 26218
26218: DISABLE
// begin ToLua ( displayTroll(); ) ;
26219: LD_STRING displayTroll();
26221: PPUSH
26222: CALL_OW 559
// wait ( 3 3$00 ) ;
26226: LD_INT 6300
26228: PPUSH
26229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26233: LD_STRING hideTroll();
26235: PPUSH
26236: CALL_OW 559
// wait ( 1 1$00 ) ;
26240: LD_INT 2100
26242: PPUSH
26243: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26247: LD_STRING displayTroll();
26249: PPUSH
26250: CALL_OW 559
// wait ( 1 1$00 ) ;
26254: LD_INT 2100
26256: PPUSH
26257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26261: LD_STRING hideTroll();
26263: PPUSH
26264: CALL_OW 559
// end ;
26268: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26269: LD_EXP 70
26273: PUSH
26274: LD_EXP 96
26278: AND
26279: IFFALSE 26342
26281: GO 26283
26283: DISABLE
26284: LD_INT 0
26286: PPUSH
// begin p := 0 ;
26287: LD_ADDR_VAR 0 1
26291: PUSH
26292: LD_INT 0
26294: ST_TO_ADDR
// repeat game_speed := 1 ;
26295: LD_ADDR_OWVAR 65
26299: PUSH
26300: LD_INT 1
26302: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26303: LD_INT 35
26305: PPUSH
26306: CALL_OW 67
// p := p + 1 ;
26310: LD_ADDR_VAR 0 1
26314: PUSH
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 1
26322: PLUS
26323: ST_TO_ADDR
// until p >= 60 ;
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 60
26331: GREATEREQUAL
26332: IFFALSE 26295
// game_speed := 4 ;
26334: LD_ADDR_OWVAR 65
26338: PUSH
26339: LD_INT 4
26341: ST_TO_ADDR
// end ;
26342: PPOPN 1
26344: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26345: LD_EXP 70
26349: PUSH
26350: LD_EXP 97
26354: AND
26355: IFFALSE 26501
26357: GO 26359
26359: DISABLE
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26364: LD_ADDR_VAR 0 1
26368: PUSH
26369: LD_INT 22
26371: PUSH
26372: LD_OWVAR 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 30
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 30
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PPUSH
26413: CALL_OW 69
26417: ST_TO_ADDR
// if not depot then
26418: LD_VAR 0 1
26422: NOT
26423: IFFALSE 26427
// exit ;
26425: GO 26501
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26427: LD_ADDR_VAR 0 2
26431: PUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_INT 1
26439: PPUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 12
26449: ARRAY
26450: PPUSH
26451: CALL_OW 274
26455: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26456: LD_VAR 0 2
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26471: LD_VAR 0 2
26475: PPUSH
26476: LD_INT 2
26478: PPUSH
26479: LD_INT 0
26481: PPUSH
26482: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26486: LD_VAR 0 2
26490: PPUSH
26491: LD_INT 3
26493: PPUSH
26494: LD_INT 0
26496: PPUSH
26497: CALL_OW 277
// end ;
26501: PPOPN 2
26503: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26504: LD_EXP 70
26508: PUSH
26509: LD_EXP 98
26513: AND
26514: IFFALSE 26611
26516: GO 26518
26518: DISABLE
26519: LD_INT 0
26521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26522: LD_ADDR_VAR 0 1
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_OWVAR 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 21
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 3
26551: PUSH
26552: LD_INT 23
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: ST_TO_ADDR
// if not tmp then
26576: LD_VAR 0 1
26580: NOT
26581: IFFALSE 26585
// exit ;
26583: GO 26611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26585: LD_VAR 0 1
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 12
26602: ARRAY
26603: PPUSH
26604: LD_INT 200
26606: PPUSH
26607: CALL_OW 234
// end ;
26611: PPOPN 1
26613: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26614: LD_EXP 70
26618: PUSH
26619: LD_EXP 99
26623: AND
26624: IFFALSE 26703
26626: GO 26628
26628: DISABLE
26629: LD_INT 0
26631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: LD_INT 22
26639: PUSH
26640: LD_OWVAR 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 69
26667: ST_TO_ADDR
// if not tmp then
26668: LD_VAR 0 1
26672: NOT
26673: IFFALSE 26677
// exit ;
26675: GO 26703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26677: LD_VAR 0 1
26681: PUSH
26682: LD_INT 1
26684: PPUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 12
26694: ARRAY
26695: PPUSH
26696: LD_INT 60
26698: PPUSH
26699: CALL_OW 234
// end ;
26703: PPOPN 1
26705: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26706: LD_EXP 70
26710: PUSH
26711: LD_EXP 100
26715: AND
26716: IFFALSE 26815
26718: GO 26720
26720: DISABLE
26721: LD_INT 0
26723: PPUSH
26724: PPUSH
// begin enable ;
26725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26726: LD_ADDR_VAR 0 1
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_OWVAR 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 61
26745: PUSH
26746: EMPTY
26747: LIST
26748: PUSH
26749: LD_INT 33
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: PPUSH
26764: CALL_OW 69
26768: ST_TO_ADDR
// if not tmp then
26769: LD_VAR 0 1
26773: NOT
26774: IFFALSE 26778
// exit ;
26776: GO 26815
// for i in tmp do
26778: LD_ADDR_VAR 0 2
26782: PUSH
26783: LD_VAR 0 1
26787: PUSH
26788: FOR_IN
26789: IFFALSE 26813
// if IsControledBy ( i ) then
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 312
26800: IFFALSE 26811
// ComUnlink ( i ) ;
26802: LD_VAR 0 2
26806: PPUSH
26807: CALL_OW 136
26811: GO 26788
26813: POP
26814: POP
// end ;
26815: PPOPN 2
26817: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26818: LD_EXP 70
26822: PUSH
26823: LD_EXP 101
26827: AND
26828: IFFALSE 26968
26830: GO 26832
26832: DISABLE
26833: LD_INT 0
26835: PPUSH
26836: PPUSH
// begin ToLua ( displayPowell(); ) ;
26837: LD_STRING displayPowell();
26839: PPUSH
26840: CALL_OW 559
// uc_side := 0 ;
26844: LD_ADDR_OWVAR 20
26848: PUSH
26849: LD_INT 0
26851: ST_TO_ADDR
// uc_nation := 2 ;
26852: LD_ADDR_OWVAR 21
26856: PUSH
26857: LD_INT 2
26859: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26860: LD_ADDR_OWVAR 37
26864: PUSH
26865: LD_INT 14
26867: ST_TO_ADDR
// vc_engine := engine_siberite ;
26868: LD_ADDR_OWVAR 39
26872: PUSH
26873: LD_INT 3
26875: ST_TO_ADDR
// vc_control := control_apeman ;
26876: LD_ADDR_OWVAR 38
26880: PUSH
26881: LD_INT 5
26883: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26884: LD_ADDR_OWVAR 40
26888: PUSH
26889: LD_INT 29
26891: ST_TO_ADDR
// un := CreateVehicle ;
26892: LD_ADDR_VAR 0 2
26896: PUSH
26897: CALL_OW 45
26901: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26914: LD_INT 35
26916: PPUSH
26917: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26921: LD_VAR 0 2
26925: PPUSH
26926: LD_INT 22
26928: PUSH
26929: LD_OWVAR 2
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PPUSH
26938: CALL_OW 69
26942: PPUSH
26943: LD_VAR 0 2
26947: PPUSH
26948: CALL_OW 74
26952: PPUSH
26953: CALL_OW 115
// until IsDead ( un ) ;
26957: LD_VAR 0 2
26961: PPUSH
26962: CALL_OW 301
26966: IFFALSE 26914
// end ;
26968: PPOPN 2
26970: END
// every 0 0$1 trigger StreamModeActive and sStu do
26971: LD_EXP 70
26975: PUSH
26976: LD_EXP 109
26980: AND
26981: IFFALSE 26997
26983: GO 26985
26985: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26986: LD_STRING displayStucuk();
26988: PPUSH
26989: CALL_OW 559
// ResetFog ;
26993: CALL_OW 335
// end ;
26997: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26998: LD_EXP 70
27002: PUSH
27003: LD_EXP 102
27007: AND
27008: IFFALSE 27149
27010: GO 27012
27012: DISABLE
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27017: LD_ADDR_VAR 0 2
27021: PUSH
27022: LD_INT 22
27024: PUSH
27025: LD_OWVAR 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 21
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: ST_TO_ADDR
// if not tmp then
27053: LD_VAR 0 2
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27149
// un := tmp [ rand ( 1 , tmp ) ] ;
27062: LD_ADDR_VAR 0 1
27066: PUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_INT 1
27074: PPUSH
27075: LD_VAR 0 2
27079: PPUSH
27080: CALL_OW 12
27084: ARRAY
27085: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_INT 0
27093: PPUSH
27094: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27098: LD_VAR 0 1
27102: PPUSH
27103: LD_OWVAR 3
27107: PUSH
27108: LD_VAR 0 1
27112: DIFF
27113: PPUSH
27114: LD_VAR 0 1
27118: PPUSH
27119: CALL_OW 74
27123: PPUSH
27124: CALL_OW 115
// wait ( 0 0$20 ) ;
27128: LD_INT 700
27130: PPUSH
27131: CALL_OW 67
// SetSide ( un , your_side ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_OWVAR 2
27144: PPUSH
27145: CALL_OW 235
// end ;
27149: PPOPN 2
27151: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27152: LD_EXP 70
27156: PUSH
27157: LD_EXP 103
27161: AND
27162: IFFALSE 27268
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 30
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 30
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PPUSH
27219: CALL_OW 69
27223: ST_TO_ADDR
// if not depot then
27224: LD_VAR 0 1
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27268
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: PPUSH
27242: CALL_OW 250
27246: PPUSH
27247: LD_VAR 0 1
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: PPUSH
27256: CALL_OW 251
27260: PPUSH
27261: LD_INT 70
27263: PPUSH
27264: CALL_OW 495
// end ;
27268: PPOPN 1
27270: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27271: LD_EXP 70
27275: PUSH
27276: LD_EXP 104
27280: AND
27281: IFFALSE 27492
27283: GO 27285
27285: DISABLE
27286: LD_INT 0
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
27292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27293: LD_ADDR_VAR 0 5
27297: PUSH
27298: LD_INT 22
27300: PUSH
27301: LD_OWVAR 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 21
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PPUSH
27324: CALL_OW 69
27328: ST_TO_ADDR
// if not tmp then
27329: LD_VAR 0 5
27333: NOT
27334: IFFALSE 27338
// exit ;
27336: GO 27492
// for i in tmp do
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: FOR_IN
27349: IFFALSE 27490
// begin d := rand ( 0 , 5 ) ;
27351: LD_ADDR_VAR 0 4
27355: PUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 5
27361: PPUSH
27362: CALL_OW 12
27366: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27367: LD_ADDR_VAR 0 2
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 250
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_INT 3
27389: PPUSH
27390: LD_INT 12
27392: PPUSH
27393: CALL_OW 12
27397: PPUSH
27398: CALL_OW 272
27402: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 251
27417: PPUSH
27418: LD_VAR 0 4
27422: PPUSH
27423: LD_INT 3
27425: PPUSH
27426: LD_INT 12
27428: PPUSH
27429: CALL_OW 12
27433: PPUSH
27434: CALL_OW 273
27438: ST_TO_ADDR
// if ValidHex ( x , y ) then
27439: LD_VAR 0 2
27443: PPUSH
27444: LD_VAR 0 3
27448: PPUSH
27449: CALL_OW 488
27453: IFFALSE 27488
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: LD_INT 3
27472: PPUSH
27473: LD_INT 6
27475: PPUSH
27476: CALL_OW 12
27480: PPUSH
27481: LD_INT 1
27483: PPUSH
27484: CALL_OW 483
// end ;
27488: GO 27348
27490: POP
27491: POP
// end ;
27492: PPOPN 5
27494: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27495: LD_EXP 70
27499: PUSH
27500: LD_EXP 105
27504: AND
27505: IFFALSE 27599
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 32
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 21
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: ST_TO_ADDR
// if not tmp then
27561: LD_VAR 0 2
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27599
// for i in tmp do
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_VAR 0 2
27579: PUSH
27580: FOR_IN
27581: IFFALSE 27597
// SetFuel ( i , 0 ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_INT 0
27590: PPUSH
27591: CALL_OW 240
27595: GO 27580
27597: POP
27598: POP
// end ;
27599: PPOPN 2
27601: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27602: LD_EXP 70
27606: PUSH
27607: LD_EXP 106
27611: AND
27612: IFFALSE 27678
27614: GO 27616
27616: DISABLE
27617: LD_INT 0
27619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: LD_INT 22
27627: PUSH
27628: LD_OWVAR 2
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 30
27639: PUSH
27640: LD_INT 29
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 69
27655: ST_TO_ADDR
// if not tmp then
27656: LD_VAR 0 1
27660: NOT
27661: IFFALSE 27665
// exit ;
27663: GO 27678
// DestroyUnit ( tmp [ 1 ] ) ;
27665: LD_VAR 0 1
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: CALL_OW 65
// end ;
27678: PPOPN 1
27680: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27681: LD_EXP 70
27685: PUSH
27686: LD_EXP 108
27690: AND
27691: IFFALSE 27820
27693: GO 27695
27695: DISABLE
27696: LD_INT 0
27698: PPUSH
// begin uc_side := 0 ;
27699: LD_ADDR_OWVAR 20
27703: PUSH
27704: LD_INT 0
27706: ST_TO_ADDR
// uc_nation := nation_arabian ;
27707: LD_ADDR_OWVAR 21
27711: PUSH
27712: LD_INT 2
27714: ST_TO_ADDR
// hc_gallery :=  ;
27715: LD_ADDR_OWVAR 33
27719: PUSH
27720: LD_STRING 
27722: ST_TO_ADDR
// hc_name :=  ;
27723: LD_ADDR_OWVAR 26
27727: PUSH
27728: LD_STRING 
27730: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27731: LD_INT 1
27733: PPUSH
27734: LD_INT 11
27736: PPUSH
27737: LD_INT 10
27739: PPUSH
27740: CALL_OW 380
// un := CreateHuman ;
27744: LD_ADDR_VAR 0 1
27748: PUSH
27749: CALL_OW 44
27753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27754: LD_VAR 0 1
27758: PPUSH
27759: LD_INT 1
27761: PPUSH
27762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27766: LD_INT 35
27768: PPUSH
27769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_INT 22
27780: PUSH
27781: LD_OWVAR 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: PPUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 74
27804: PPUSH
27805: CALL_OW 115
// until IsDead ( un ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: CALL_OW 301
27818: IFFALSE 27766
// end ;
27820: PPOPN 1
27822: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27823: LD_EXP 70
27827: PUSH
27828: LD_EXP 110
27832: AND
27833: IFFALSE 27845
27835: GO 27837
27837: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27838: LD_STRING earthquake(getX(game), 0, 32)
27840: PPUSH
27841: CALL_OW 559
27845: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27846: LD_EXP 70
27850: PUSH
27851: LD_EXP 111
27855: AND
27856: IFFALSE 27947
27858: GO 27860
27860: DISABLE
27861: LD_INT 0
27863: PPUSH
// begin enable ;
27864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27865: LD_ADDR_VAR 0 1
27869: PUSH
27870: LD_INT 22
27872: PUSH
27873: LD_OWVAR 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 21
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 33
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 69
27911: ST_TO_ADDR
// if not tmp then
27912: LD_VAR 0 1
27916: NOT
27917: IFFALSE 27921
// exit ;
27919: GO 27947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27921: LD_VAR 0 1
27925: PUSH
27926: LD_INT 1
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 12
27938: ARRAY
27939: PPUSH
27940: LD_INT 1
27942: PPUSH
27943: CALL_OW 234
// end ;
27947: PPOPN 1
27949: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27950: LD_EXP 70
27954: PUSH
27955: LD_EXP 112
27959: AND
27960: IFFALSE 28101
27962: GO 27964
27964: DISABLE
27965: LD_INT 0
27967: PPUSH
27968: PPUSH
27969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27970: LD_ADDR_VAR 0 3
27974: PUSH
27975: LD_INT 22
27977: PUSH
27978: LD_OWVAR 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 25
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: ST_TO_ADDR
// if not tmp then
28006: LD_VAR 0 3
28010: NOT
28011: IFFALSE 28015
// exit ;
28013: GO 28101
// un := tmp [ rand ( 1 , tmp ) ] ;
28015: LD_ADDR_VAR 0 2
28019: PUSH
28020: LD_VAR 0 3
28024: PUSH
28025: LD_INT 1
28027: PPUSH
28028: LD_VAR 0 3
28032: PPUSH
28033: CALL_OW 12
28037: ARRAY
28038: ST_TO_ADDR
// if Crawls ( un ) then
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 318
28048: IFFALSE 28059
// ComWalk ( un ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28059: LD_VAR 0 2
28063: PPUSH
28064: LD_INT 9
28066: PPUSH
28067: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28071: LD_INT 28
28073: PPUSH
28074: LD_OWVAR 2
28078: PPUSH
28079: LD_INT 2
28081: PPUSH
28082: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28086: LD_INT 29
28088: PPUSH
28089: LD_OWVAR 2
28093: PPUSH
28094: LD_INT 2
28096: PPUSH
28097: CALL_OW 322
// end ;
28101: PPOPN 3
28103: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28104: LD_EXP 70
28108: PUSH
28109: LD_EXP 113
28113: AND
28114: IFFALSE 28225
28116: GO 28118
28118: DISABLE
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 25
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 69
28159: ST_TO_ADDR
// if not tmp then
28160: LD_VAR 0 3
28164: NOT
28165: IFFALSE 28169
// exit ;
28167: GO 28225
// un := tmp [ rand ( 1 , tmp ) ] ;
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: LD_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL_OW 12
28191: ARRAY
28192: ST_TO_ADDR
// if Crawls ( un ) then
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 318
28202: IFFALSE 28213
// ComWalk ( un ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_INT 8
28220: PPUSH
28221: CALL_OW 336
// end ;
28225: PPOPN 3
28227: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28228: LD_EXP 70
28232: PUSH
28233: LD_EXP 114
28237: AND
28238: IFFALSE 28382
28240: GO 28242
28242: DISABLE
28243: LD_INT 0
28245: PPUSH
28246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28247: LD_ADDR_VAR 0 2
28251: PUSH
28252: LD_INT 22
28254: PUSH
28255: LD_OWVAR 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: LD_INT 34
28279: PUSH
28280: LD_INT 12
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 34
28289: PUSH
28290: LD_INT 51
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 34
28299: PUSH
28300: LD_INT 32
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: PPUSH
28318: CALL_OW 69
28322: ST_TO_ADDR
// if not tmp then
28323: LD_VAR 0 2
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28382
// for i in tmp do
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: LD_VAR 0 2
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28380
// if GetCargo ( i , mat_artifact ) = 0 then
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_INT 4
28352: PPUSH
28353: CALL_OW 289
28357: PUSH
28358: LD_INT 0
28360: EQUAL
28361: IFFALSE 28378
// SetCargo ( i , mat_siberit , 100 ) ;
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_INT 3
28370: PPUSH
28371: LD_INT 100
28373: PPUSH
28374: CALL_OW 290
28378: GO 28342
28380: POP
28381: POP
// end ;
28382: PPOPN 2
28384: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28385: LD_EXP 70
28389: PUSH
28390: LD_EXP 115
28394: AND
28395: IFFALSE 28578
28397: GO 28399
28399: DISABLE
28400: LD_INT 0
28402: PPUSH
28403: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28404: LD_ADDR_VAR 0 2
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_OWVAR 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL_OW 69
28425: ST_TO_ADDR
// if not tmp then
28426: LD_VAR 0 2
28430: NOT
28431: IFFALSE 28435
// exit ;
28433: GO 28578
// for i := 1 to 2 do
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: DOUBLE
28441: LD_INT 1
28443: DEC
28444: ST_TO_ADDR
28445: LD_INT 2
28447: PUSH
28448: FOR_TO
28449: IFFALSE 28576
// begin uc_side := your_side ;
28451: LD_ADDR_OWVAR 20
28455: PUSH
28456: LD_OWVAR 2
28460: ST_TO_ADDR
// uc_nation := nation_american ;
28461: LD_ADDR_OWVAR 21
28465: PUSH
28466: LD_INT 1
28468: ST_TO_ADDR
// vc_chassis := us_morphling ;
28469: LD_ADDR_OWVAR 37
28473: PUSH
28474: LD_INT 5
28476: ST_TO_ADDR
// vc_engine := engine_siberite ;
28477: LD_ADDR_OWVAR 39
28481: PUSH
28482: LD_INT 3
28484: ST_TO_ADDR
// vc_control := control_computer ;
28485: LD_ADDR_OWVAR 38
28489: PUSH
28490: LD_INT 3
28492: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28493: LD_ADDR_OWVAR 40
28497: PUSH
28498: LD_INT 10
28500: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28501: LD_VAR 0 2
28505: PUSH
28506: LD_INT 1
28508: ARRAY
28509: PPUSH
28510: CALL_OW 310
28514: NOT
28515: IFFALSE 28562
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28517: CALL_OW 45
28521: PPUSH
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: PPUSH
28531: CALL_OW 250
28535: PPUSH
28536: LD_VAR 0 2
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: CALL_OW 251
28549: PPUSH
28550: LD_INT 12
28552: PPUSH
28553: LD_INT 1
28555: PPUSH
28556: CALL_OW 50
28560: GO 28574
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28562: CALL_OW 45
28566: PPUSH
28567: LD_INT 1
28569: PPUSH
28570: CALL_OW 51
// end ;
28574: GO 28448
28576: POP
28577: POP
// end ;
28578: PPOPN 2
28580: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28581: LD_EXP 70
28585: PUSH
28586: LD_EXP 116
28590: AND
28591: IFFALSE 28813
28593: GO 28595
28595: DISABLE
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28604: LD_ADDR_VAR 0 6
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_OWVAR 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 21
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 3
28633: PUSH
28634: LD_INT 23
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: PPUSH
28653: CALL_OW 69
28657: ST_TO_ADDR
// if not tmp then
28658: LD_VAR 0 6
28662: NOT
28663: IFFALSE 28667
// exit ;
28665: GO 28813
// s1 := rand ( 1 , 4 ) ;
28667: LD_ADDR_VAR 0 2
28671: PUSH
28672: LD_INT 1
28674: PPUSH
28675: LD_INT 4
28677: PPUSH
28678: CALL_OW 12
28682: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28683: LD_ADDR_VAR 0 4
28687: PUSH
28688: LD_VAR 0 6
28692: PUSH
28693: LD_INT 1
28695: ARRAY
28696: PPUSH
28697: LD_VAR 0 2
28701: PPUSH
28702: CALL_OW 259
28706: ST_TO_ADDR
// if s1 = 1 then
28707: LD_VAR 0 2
28711: PUSH
28712: LD_INT 1
28714: EQUAL
28715: IFFALSE 28735
// s2 := rand ( 2 , 4 ) else
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 2
28724: PPUSH
28725: LD_INT 4
28727: PPUSH
28728: CALL_OW 12
28732: ST_TO_ADDR
28733: GO 28743
// s2 := 1 ;
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28743: LD_ADDR_VAR 0 5
28747: PUSH
28748: LD_VAR 0 6
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 259
28766: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28767: LD_VAR 0 6
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 2
28780: PPUSH
28781: LD_VAR 0 5
28785: PPUSH
28786: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28790: LD_VAR 0 6
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PPUSH
28799: LD_VAR 0 3
28803: PPUSH
28804: LD_VAR 0 4
28808: PPUSH
28809: CALL_OW 237
// end ;
28813: PPOPN 6
28815: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28816: LD_EXP 70
28820: PUSH
28821: LD_EXP 117
28825: AND
28826: IFFALSE 28905
28828: GO 28830
28830: DISABLE
28831: LD_INT 0
28833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28834: LD_ADDR_VAR 0 1
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: LD_OWVAR 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 30
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: ST_TO_ADDR
// if not tmp then
28870: LD_VAR 0 1
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 28905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28879: LD_VAR 0 1
28883: PUSH
28884: LD_INT 1
28886: PPUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: CALL_OW 12
28896: ARRAY
28897: PPUSH
28898: LD_INT 1
28900: PPUSH
28901: CALL_OW 234
// end ;
28905: PPOPN 1
28907: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28908: LD_EXP 70
28912: PUSH
28913: LD_EXP 118
28917: AND
28918: IFFALSE 29030
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28927: LD_ADDR_VAR 0 2
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 30
28949: PUSH
28950: LD_INT 27
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: LD_INT 26
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 30
28969: PUSH
28970: LD_INT 28
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PPUSH
28987: CALL_OW 69
28991: ST_TO_ADDR
// if not tmp then
28992: LD_VAR 0 2
28996: NOT
28997: IFFALSE 29001
// exit ;
28999: GO 29030
// for i in tmp do
29001: LD_ADDR_VAR 0 1
29005: PUSH
29006: LD_VAR 0 2
29010: PUSH
29011: FOR_IN
29012: IFFALSE 29028
// SetLives ( i , 1 ) ;
29014: LD_VAR 0 1
29018: PPUSH
29019: LD_INT 1
29021: PPUSH
29022: CALL_OW 234
29026: GO 29011
29028: POP
29029: POP
// end ;
29030: PPOPN 2
29032: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29033: LD_EXP 70
29037: PUSH
29038: LD_EXP 119
29042: AND
29043: IFFALSE 29317
29045: GO 29047
29047: DISABLE
29048: LD_INT 0
29050: PPUSH
29051: PPUSH
29052: PPUSH
// begin i := rand ( 1 , 7 ) ;
29053: LD_ADDR_VAR 0 1
29057: PUSH
29058: LD_INT 1
29060: PPUSH
29061: LD_INT 7
29063: PPUSH
29064: CALL_OW 12
29068: ST_TO_ADDR
// case i of 1 :
29069: LD_VAR 0 1
29073: PUSH
29074: LD_INT 1
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29092
29082: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29083: LD_STRING earthquake(getX(game), 0, 32)
29085: PPUSH
29086: CALL_OW 559
29090: GO 29317
29092: LD_INT 2
29094: DOUBLE
29095: EQUAL
29096: IFTRUE 29100
29098: GO 29114
29100: POP
// begin ToLua ( displayStucuk(); ) ;
29101: LD_STRING displayStucuk();
29103: PPUSH
29104: CALL_OW 559
// ResetFog ;
29108: CALL_OW 335
// end ; 3 :
29112: GO 29317
29114: LD_INT 3
29116: DOUBLE
29117: EQUAL
29118: IFTRUE 29122
29120: GO 29226
29122: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29123: LD_ADDR_VAR 0 2
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_OWVAR 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 25
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: ST_TO_ADDR
// if not tmp then
29159: LD_VAR 0 2
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29317
// un := tmp [ rand ( 1 , tmp ) ] ;
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: LD_VAR 0 2
29177: PUSH
29178: LD_INT 1
29180: PPUSH
29181: LD_VAR 0 2
29185: PPUSH
29186: CALL_OW 12
29190: ARRAY
29191: ST_TO_ADDR
// if Crawls ( un ) then
29192: LD_VAR 0 3
29196: PPUSH
29197: CALL_OW 318
29201: IFFALSE 29212
// ComWalk ( un ) ;
29203: LD_VAR 0 3
29207: PPUSH
29208: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29212: LD_VAR 0 3
29216: PPUSH
29217: LD_INT 8
29219: PPUSH
29220: CALL_OW 336
// end ; 4 :
29224: GO 29317
29226: LD_INT 4
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29295
29234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29235: LD_ADDR_VAR 0 2
29239: PUSH
29240: LD_INT 22
29242: PUSH
29243: LD_OWVAR 2
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 30
29254: PUSH
29255: LD_INT 29
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PPUSH
29266: CALL_OW 69
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 2
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29317
// DestroyUnit ( tmp [ 1 ] ) ;
29280: LD_VAR 0 2
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 65
// end ; 5 .. 7 :
29293: GO 29317
29295: LD_INT 5
29297: DOUBLE
29298: GREATEREQUAL
29299: IFFALSE 29307
29301: LD_INT 7
29303: DOUBLE
29304: LESSEQUAL
29305: IFTRUE 29309
29307: GO 29316
29309: POP
// StreamSibBomb ; end ;
29310: CALL 25567 0 0
29314: GO 29317
29316: POP
// end ;
29317: PPOPN 3
29319: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29320: LD_EXP 70
29324: PUSH
29325: LD_EXP 120
29329: AND
29330: IFFALSE 29486
29332: GO 29334
29334: DISABLE
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29340: LD_ADDR_VAR 0 2
29344: PUSH
29345: LD_INT 81
29347: PUSH
29348: LD_OWVAR 2
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 21
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 21
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PPUSH
29389: CALL_OW 69
29393: ST_TO_ADDR
// if not tmp then
29394: LD_VAR 0 2
29398: NOT
29399: IFFALSE 29403
// exit ;
29401: GO 29486
// p := 0 ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_INT 0
29410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29411: LD_INT 35
29413: PPUSH
29414: CALL_OW 67
// p := p + 1 ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_VAR 0 3
29427: PUSH
29428: LD_INT 1
29430: PLUS
29431: ST_TO_ADDR
// for i in tmp do
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: LD_VAR 0 2
29441: PUSH
29442: FOR_IN
29443: IFFALSE 29474
// if GetLives ( i ) < 1000 then
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 256
29454: PUSH
29455: LD_INT 1000
29457: LESS
29458: IFFALSE 29472
// SetLives ( i , 1000 ) ;
29460: LD_VAR 0 1
29464: PPUSH
29465: LD_INT 1000
29467: PPUSH
29468: CALL_OW 234
29472: GO 29442
29474: POP
29475: POP
// until p > 20 ;
29476: LD_VAR 0 3
29480: PUSH
29481: LD_INT 20
29483: GREATER
29484: IFFALSE 29411
// end ;
29486: PPOPN 3
29488: END
// every 0 0$1 trigger StreamModeActive and sTime do
29489: LD_EXP 70
29493: PUSH
29494: LD_EXP 121
29498: AND
29499: IFFALSE 29534
29501: GO 29503
29503: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29504: LD_INT 28
29506: PPUSH
29507: LD_OWVAR 2
29511: PPUSH
29512: LD_INT 2
29514: PPUSH
29515: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29519: LD_INT 30
29521: PPUSH
29522: LD_OWVAR 2
29526: PPUSH
29527: LD_INT 2
29529: PPUSH
29530: CALL_OW 322
// end ;
29534: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29535: LD_EXP 70
29539: PUSH
29540: LD_EXP 122
29544: AND
29545: IFFALSE 29666
29547: GO 29549
29549: DISABLE
29550: LD_INT 0
29552: PPUSH
29553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29554: LD_ADDR_VAR 0 2
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 21
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 23
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 2
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29666
// for i in tmp do
29617: LD_ADDR_VAR 0 1
29621: PUSH
29622: LD_VAR 0 2
29626: PUSH
29627: FOR_IN
29628: IFFALSE 29664
// begin if Crawls ( i ) then
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL_OW 318
29639: IFFALSE 29650
// ComWalk ( i ) ;
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 138
// SetClass ( i , 2 ) ;
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_INT 2
29657: PPUSH
29658: CALL_OW 336
// end ;
29662: GO 29627
29664: POP
29665: POP
// end ;
29666: PPOPN 2
29668: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29669: LD_EXP 70
29673: PUSH
29674: LD_EXP 123
29678: AND
29679: IFFALSE 29960
29681: GO 29683
29683: DISABLE
29684: LD_INT 0
29686: PPUSH
29687: PPUSH
29688: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29689: LD_OWVAR 2
29693: PPUSH
29694: LD_INT 9
29696: PPUSH
29697: LD_INT 1
29699: PPUSH
29700: LD_INT 1
29702: PPUSH
29703: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29707: LD_INT 9
29709: PPUSH
29710: LD_OWVAR 2
29714: PPUSH
29715: CALL_OW 343
// uc_side := 9 ;
29719: LD_ADDR_OWVAR 20
29723: PUSH
29724: LD_INT 9
29726: ST_TO_ADDR
// uc_nation := 2 ;
29727: LD_ADDR_OWVAR 21
29731: PUSH
29732: LD_INT 2
29734: ST_TO_ADDR
// hc_name := Dark Warrior ;
29735: LD_ADDR_OWVAR 26
29739: PUSH
29740: LD_STRING Dark Warrior
29742: ST_TO_ADDR
// hc_gallery :=  ;
29743: LD_ADDR_OWVAR 33
29747: PUSH
29748: LD_STRING 
29750: ST_TO_ADDR
// hc_noskilllimit := true ;
29751: LD_ADDR_OWVAR 76
29755: PUSH
29756: LD_INT 1
29758: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29759: LD_ADDR_OWVAR 31
29763: PUSH
29764: LD_INT 30
29766: PUSH
29767: LD_INT 30
29769: PUSH
29770: LD_INT 30
29772: PUSH
29773: LD_INT 30
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// un := CreateHuman ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: CALL_OW 44
29791: ST_TO_ADDR
// hc_noskilllimit := false ;
29792: LD_ADDR_OWVAR 76
29796: PUSH
29797: LD_INT 0
29799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29800: LD_VAR 0 3
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: CALL_OW 51
// p := 0 ;
29812: LD_ADDR_VAR 0 2
29816: PUSH
29817: LD_INT 0
29819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29820: LD_INT 35
29822: PPUSH
29823: CALL_OW 67
// p := p + 1 ;
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: PLUS
29840: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29841: LD_VAR 0 3
29845: PPUSH
29846: CALL_OW 256
29850: PUSH
29851: LD_INT 1000
29853: LESS
29854: IFFALSE 29868
// SetLives ( un , 1000 ) ;
29856: LD_VAR 0 3
29860: PPUSH
29861: LD_INT 1000
29863: PPUSH
29864: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29868: LD_VAR 0 3
29872: PPUSH
29873: LD_INT 81
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 91
29887: PUSH
29888: LD_VAR 0 3
29892: PUSH
29893: LD_INT 30
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PPUSH
29905: CALL_OW 69
29909: PPUSH
29910: LD_VAR 0 3
29914: PPUSH
29915: CALL_OW 74
29919: PPUSH
29920: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29924: LD_VAR 0 2
29928: PUSH
29929: LD_INT 60
29931: GREATER
29932: PUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: CALL_OW 301
29942: OR
29943: IFFALSE 29820
// if un then
29945: LD_VAR 0 3
29949: IFFALSE 29960
// RemoveUnit ( un ) ;
29951: LD_VAR 0 3
29955: PPUSH
29956: CALL_OW 64
// end ;
29960: PPOPN 3
29962: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29963: LD_INT 0
29965: PPUSH
// case cmd of 301 :
29966: LD_VAR 0 1
29970: PUSH
29971: LD_INT 301
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30011
29979: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29980: LD_VAR 0 6
29984: PPUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 8
29994: PPUSH
29995: LD_VAR 0 4
29999: PPUSH
30000: LD_VAR 0 5
30004: PPUSH
30005: CALL 31212 0 5
30009: GO 30132
30011: LD_INT 302
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30056
30019: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30020: LD_VAR 0 6
30024: PPUSH
30025: LD_VAR 0 7
30029: PPUSH
30030: LD_VAR 0 8
30034: PPUSH
30035: LD_VAR 0 9
30039: PPUSH
30040: LD_VAR 0 4
30044: PPUSH
30045: LD_VAR 0 5
30049: PPUSH
30050: CALL 31303 0 6
30054: GO 30132
30056: LD_INT 303
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30101
30064: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30065: LD_VAR 0 6
30069: PPUSH
30070: LD_VAR 0 7
30074: PPUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: LD_VAR 0 9
30084: PPUSH
30085: LD_VAR 0 4
30089: PPUSH
30090: LD_VAR 0 5
30094: PPUSH
30095: CALL 30137 0 6
30099: GO 30132
30101: LD_INT 304
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30131
30109: POP
// hHackTeleport ( unit , x , y ) ; end ;
30110: LD_VAR 0 2
30114: PPUSH
30115: LD_VAR 0 4
30119: PPUSH
30120: LD_VAR 0 5
30124: PPUSH
30125: CALL 31896 0 3
30129: GO 30132
30131: POP
// end ;
30132: LD_VAR 0 12
30136: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 1
30148: LESS
30149: PUSH
30150: LD_VAR 0 1
30154: PUSH
30155: LD_INT 3
30157: GREATER
30158: OR
30159: PUSH
30160: LD_VAR 0 5
30164: PPUSH
30165: LD_VAR 0 6
30169: PPUSH
30170: CALL_OW 428
30174: OR
30175: IFFALSE 30179
// exit ;
30177: GO 30899
// uc_side := your_side ;
30179: LD_ADDR_OWVAR 20
30183: PUSH
30184: LD_OWVAR 2
30188: ST_TO_ADDR
// uc_nation := nation ;
30189: LD_ADDR_OWVAR 21
30193: PUSH
30194: LD_VAR 0 1
30198: ST_TO_ADDR
// bc_level = 1 ;
30199: LD_ADDR_OWVAR 43
30203: PUSH
30204: LD_INT 1
30206: ST_TO_ADDR
// case btype of 1 :
30207: LD_VAR 0 2
30211: PUSH
30212: LD_INT 1
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30231
30220: POP
// bc_type := b_depot ; 2 :
30221: LD_ADDR_OWVAR 42
30225: PUSH
30226: LD_INT 0
30228: ST_TO_ADDR
30229: GO 30843
30231: LD_INT 2
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30250
30239: POP
// bc_type := b_warehouse ; 3 :
30240: LD_ADDR_OWVAR 42
30244: PUSH
30245: LD_INT 1
30247: ST_TO_ADDR
30248: GO 30843
30250: LD_INT 3
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30269
30258: POP
// bc_type := b_lab ; 4 .. 9 :
30259: LD_ADDR_OWVAR 42
30263: PUSH
30264: LD_INT 6
30266: ST_TO_ADDR
30267: GO 30843
30269: LD_INT 4
30271: DOUBLE
30272: GREATEREQUAL
30273: IFFALSE 30281
30275: LD_INT 9
30277: DOUBLE
30278: LESSEQUAL
30279: IFTRUE 30283
30281: GO 30335
30283: POP
// begin bc_type := b_lab_half ;
30284: LD_ADDR_OWVAR 42
30288: PUSH
30289: LD_INT 7
30291: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30292: LD_ADDR_OWVAR 44
30296: PUSH
30297: LD_INT 10
30299: PUSH
30300: LD_INT 11
30302: PUSH
30303: LD_INT 12
30305: PUSH
30306: LD_INT 15
30308: PUSH
30309: LD_INT 14
30311: PUSH
30312: LD_INT 13
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: LD_INT 3
30330: MINUS
30331: ARRAY
30332: ST_TO_ADDR
// end ; 10 .. 13 :
30333: GO 30843
30335: LD_INT 10
30337: DOUBLE
30338: GREATEREQUAL
30339: IFFALSE 30347
30341: LD_INT 13
30343: DOUBLE
30344: LESSEQUAL
30345: IFTRUE 30349
30347: GO 30426
30349: POP
// begin bc_type := b_lab_full ;
30350: LD_ADDR_OWVAR 42
30354: PUSH
30355: LD_INT 8
30357: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30358: LD_ADDR_OWVAR 44
30362: PUSH
30363: LD_INT 10
30365: PUSH
30366: LD_INT 12
30368: PUSH
30369: LD_INT 14
30371: PUSH
30372: LD_INT 13
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: LD_VAR 0 2
30385: PUSH
30386: LD_INT 9
30388: MINUS
30389: ARRAY
30390: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30391: LD_ADDR_OWVAR 45
30395: PUSH
30396: LD_INT 11
30398: PUSH
30399: LD_INT 15
30401: PUSH
30402: LD_INT 12
30404: PUSH
30405: LD_INT 15
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: PUSH
30414: LD_VAR 0 2
30418: PUSH
30419: LD_INT 9
30421: MINUS
30422: ARRAY
30423: ST_TO_ADDR
// end ; 14 :
30424: GO 30843
30426: LD_INT 14
30428: DOUBLE
30429: EQUAL
30430: IFTRUE 30434
30432: GO 30445
30434: POP
// bc_type := b_workshop ; 15 :
30435: LD_ADDR_OWVAR 42
30439: PUSH
30440: LD_INT 2
30442: ST_TO_ADDR
30443: GO 30843
30445: LD_INT 15
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30464
30453: POP
// bc_type := b_factory ; 16 :
30454: LD_ADDR_OWVAR 42
30458: PUSH
30459: LD_INT 3
30461: ST_TO_ADDR
30462: GO 30843
30464: LD_INT 16
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30483
30472: POP
// bc_type := b_ext_gun ; 17 :
30473: LD_ADDR_OWVAR 42
30477: PUSH
30478: LD_INT 17
30480: ST_TO_ADDR
30481: GO 30843
30483: LD_INT 17
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30519
30491: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 19
30499: PUSH
30500: LD_INT 23
30502: PUSH
30503: LD_INT 19
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: LD_VAR 0 1
30515: ARRAY
30516: ST_TO_ADDR
30517: GO 30843
30519: LD_INT 18
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30538
30527: POP
// bc_type := b_ext_radar ; 19 :
30528: LD_ADDR_OWVAR 42
30532: PUSH
30533: LD_INT 20
30535: ST_TO_ADDR
30536: GO 30843
30538: LD_INT 19
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30557
30546: POP
// bc_type := b_ext_radio ; 20 :
30547: LD_ADDR_OWVAR 42
30551: PUSH
30552: LD_INT 22
30554: ST_TO_ADDR
30555: GO 30843
30557: LD_INT 20
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30576
30565: POP
// bc_type := b_ext_siberium ; 21 :
30566: LD_ADDR_OWVAR 42
30570: PUSH
30571: LD_INT 21
30573: ST_TO_ADDR
30574: GO 30843
30576: LD_INT 21
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30595
30584: POP
// bc_type := b_ext_computer ; 22 :
30585: LD_ADDR_OWVAR 42
30589: PUSH
30590: LD_INT 24
30592: ST_TO_ADDR
30593: GO 30843
30595: LD_INT 22
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30614
30603: POP
// bc_type := b_ext_track ; 23 :
30604: LD_ADDR_OWVAR 42
30608: PUSH
30609: LD_INT 16
30611: ST_TO_ADDR
30612: GO 30843
30614: LD_INT 23
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30633
30622: POP
// bc_type := b_ext_laser ; 24 :
30623: LD_ADDR_OWVAR 42
30627: PUSH
30628: LD_INT 25
30630: ST_TO_ADDR
30631: GO 30843
30633: LD_INT 24
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30652
30641: POP
// bc_type := b_control_tower ; 25 :
30642: LD_ADDR_OWVAR 42
30646: PUSH
30647: LD_INT 36
30649: ST_TO_ADDR
30650: GO 30843
30652: LD_INT 25
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30671
30660: POP
// bc_type := b_breastwork ; 26 :
30661: LD_ADDR_OWVAR 42
30665: PUSH
30666: LD_INT 31
30668: ST_TO_ADDR
30669: GO 30843
30671: LD_INT 26
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30690
30679: POP
// bc_type := b_bunker ; 27 :
30680: LD_ADDR_OWVAR 42
30684: PUSH
30685: LD_INT 32
30687: ST_TO_ADDR
30688: GO 30843
30690: LD_INT 27
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// bc_type := b_turret ; 28 :
30699: LD_ADDR_OWVAR 42
30703: PUSH
30704: LD_INT 33
30706: ST_TO_ADDR
30707: GO 30843
30709: LD_INT 28
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30728
30717: POP
// bc_type := b_armoury ; 29 :
30718: LD_ADDR_OWVAR 42
30722: PUSH
30723: LD_INT 4
30725: ST_TO_ADDR
30726: GO 30843
30728: LD_INT 29
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30747
30736: POP
// bc_type := b_barracks ; 30 :
30737: LD_ADDR_OWVAR 42
30741: PUSH
30742: LD_INT 5
30744: ST_TO_ADDR
30745: GO 30843
30747: LD_INT 30
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30766
30755: POP
// bc_type := b_solar_power ; 31 :
30756: LD_ADDR_OWVAR 42
30760: PUSH
30761: LD_INT 27
30763: ST_TO_ADDR
30764: GO 30843
30766: LD_INT 31
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30785
30774: POP
// bc_type := b_oil_power ; 32 :
30775: LD_ADDR_OWVAR 42
30779: PUSH
30780: LD_INT 26
30782: ST_TO_ADDR
30783: GO 30843
30785: LD_INT 32
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30804
30793: POP
// bc_type := b_siberite_power ; 33 :
30794: LD_ADDR_OWVAR 42
30798: PUSH
30799: LD_INT 28
30801: ST_TO_ADDR
30802: GO 30843
30804: LD_INT 33
30806: DOUBLE
30807: EQUAL
30808: IFTRUE 30812
30810: GO 30823
30812: POP
// bc_type := b_oil_mine ; 34 :
30813: LD_ADDR_OWVAR 42
30817: PUSH
30818: LD_INT 29
30820: ST_TO_ADDR
30821: GO 30843
30823: LD_INT 34
30825: DOUBLE
30826: EQUAL
30827: IFTRUE 30831
30829: GO 30842
30831: POP
// bc_type := b_siberite_mine ; end ;
30832: LD_ADDR_OWVAR 42
30836: PUSH
30837: LD_INT 30
30839: ST_TO_ADDR
30840: GO 30843
30842: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30843: LD_ADDR_VAR 0 8
30847: PUSH
30848: LD_VAR 0 5
30852: PPUSH
30853: LD_VAR 0 6
30857: PPUSH
30858: LD_VAR 0 3
30862: PPUSH
30863: CALL_OW 47
30867: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30868: LD_OWVAR 42
30872: PUSH
30873: LD_INT 32
30875: PUSH
30876: LD_INT 33
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: IN
30883: IFFALSE 30899
// PlaceWeaponTurret ( b , weapon ) ;
30885: LD_VAR 0 8
30889: PPUSH
30890: LD_VAR 0 4
30894: PPUSH
30895: CALL_OW 431
// end ;
30899: LD_VAR 0 7
30903: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30910: LD_ADDR_VAR 0 4
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PPUSH
30959: CALL_OW 69
30963: ST_TO_ADDR
// if not tmp then
30964: LD_VAR 0 4
30968: NOT
30969: IFFALSE 30973
// exit ;
30971: GO 31032
// for i in tmp do
30973: LD_ADDR_VAR 0 2
30977: PUSH
30978: LD_VAR 0 4
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31030
// for j = 1 to 3 do
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: DOUBLE
30992: LD_INT 1
30994: DEC
30995: ST_TO_ADDR
30996: LD_INT 3
30998: PUSH
30999: FOR_TO
31000: IFFALSE 31026
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31002: LD_VAR 0 2
31006: PPUSH
31007: CALL_OW 274
31011: PPUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: LD_INT 99999
31019: PPUSH
31020: CALL_OW 277
31024: GO 30999
31026: POP
31027: POP
31028: GO 30983
31030: POP
31031: POP
// end ;
31032: LD_VAR 0 1
31036: RET
// export function hHackSetLevel10 ; var i , j ; begin
31037: LD_INT 0
31039: PPUSH
31040: PPUSH
31041: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31042: LD_ADDR_VAR 0 2
31046: PUSH
31047: LD_INT 21
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: PUSH
31062: FOR_IN
31063: IFFALSE 31115
// if IsSelected ( i ) then
31065: LD_VAR 0 2
31069: PPUSH
31070: CALL_OW 306
31074: IFFALSE 31113
// begin for j := 1 to 4 do
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: DOUBLE
31082: LD_INT 1
31084: DEC
31085: ST_TO_ADDR
31086: LD_INT 4
31088: PUSH
31089: FOR_TO
31090: IFFALSE 31111
// SetSkill ( i , j , 10 ) ;
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_VAR 0 3
31101: PPUSH
31102: LD_INT 10
31104: PPUSH
31105: CALL_OW 237
31109: GO 31089
31111: POP
31112: POP
// end ;
31113: GO 31062
31115: POP
31116: POP
// end ;
31117: LD_VAR 0 1
31121: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31127: LD_ADDR_VAR 0 2
31131: PUSH
31132: LD_INT 22
31134: PUSH
31135: LD_OWVAR 2
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31205
// begin for j := 1 to 4 do
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: DOUBLE
31172: LD_INT 1
31174: DEC
31175: ST_TO_ADDR
31176: LD_INT 4
31178: PUSH
31179: FOR_TO
31180: IFFALSE 31201
// SetSkill ( i , j , 10 ) ;
31182: LD_VAR 0 2
31186: PPUSH
31187: LD_VAR 0 3
31191: PPUSH
31192: LD_INT 10
31194: PPUSH
31195: CALL_OW 237
31199: GO 31179
31201: POP
31202: POP
// end ;
31203: GO 31163
31205: POP
31206: POP
// end ;
31207: LD_VAR 0 1
31211: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31212: LD_INT 0
31214: PPUSH
// uc_side := your_side ;
31215: LD_ADDR_OWVAR 20
31219: PUSH
31220: LD_OWVAR 2
31224: ST_TO_ADDR
// uc_nation := nation ;
31225: LD_ADDR_OWVAR 21
31229: PUSH
31230: LD_VAR 0 1
31234: ST_TO_ADDR
// InitHc ;
31235: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31239: LD_INT 0
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31256: LD_VAR 0 4
31260: PPUSH
31261: LD_VAR 0 5
31265: PPUSH
31266: CALL_OW 428
31270: PUSH
31271: LD_INT 0
31273: EQUAL
31274: IFFALSE 31298
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31276: CALL_OW 44
31280: PPUSH
31281: LD_VAR 0 4
31285: PPUSH
31286: LD_VAR 0 5
31290: PPUSH
31291: LD_INT 1
31293: PPUSH
31294: CALL_OW 48
// end ;
31298: LD_VAR 0 6
31302: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
// uc_side := your_side ;
31307: LD_ADDR_OWVAR 20
31311: PUSH
31312: LD_OWVAR 2
31316: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31317: LD_VAR 0 1
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: IN
31344: IFFALSE 31356
// uc_nation := nation_american else
31346: LD_ADDR_OWVAR 21
31350: PUSH
31351: LD_INT 1
31353: ST_TO_ADDR
31354: GO 31399
// if chassis in [ 11 , 12 , 13 , 14 ] then
31356: LD_VAR 0 1
31360: PUSH
31361: LD_INT 11
31363: PUSH
31364: LD_INT 12
31366: PUSH
31367: LD_INT 13
31369: PUSH
31370: LD_INT 14
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: IN
31379: IFFALSE 31391
// uc_nation := nation_arabian else
31381: LD_ADDR_OWVAR 21
31385: PUSH
31386: LD_INT 2
31388: ST_TO_ADDR
31389: GO 31399
// uc_nation := nation_russian ;
31391: LD_ADDR_OWVAR 21
31395: PUSH
31396: LD_INT 3
31398: ST_TO_ADDR
// vc_chassis := chassis ;
31399: LD_ADDR_OWVAR 37
31403: PUSH
31404: LD_VAR 0 1
31408: ST_TO_ADDR
// vc_engine := engine ;
31409: LD_ADDR_OWVAR 39
31413: PUSH
31414: LD_VAR 0 2
31418: ST_TO_ADDR
// vc_control := control ;
31419: LD_ADDR_OWVAR 38
31423: PUSH
31424: LD_VAR 0 3
31428: ST_TO_ADDR
// vc_weapon := weapon ;
31429: LD_ADDR_OWVAR 40
31433: PUSH
31434: LD_VAR 0 4
31438: ST_TO_ADDR
// un := CreateVehicle ;
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: CALL_OW 45
31448: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_INT 0
31456: PPUSH
31457: LD_INT 5
31459: PPUSH
31460: CALL_OW 12
31464: PPUSH
31465: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31469: LD_VAR 0 8
31473: PPUSH
31474: LD_VAR 0 5
31478: PPUSH
31479: LD_VAR 0 6
31483: PPUSH
31484: LD_INT 1
31486: PPUSH
31487: CALL_OW 48
// end ;
31491: LD_VAR 0 7
31495: RET
// export hInvincible ; every 1 do
31496: GO 31498
31498: DISABLE
// hInvincible := [ ] ;
31499: LD_ADDR_EXP 124
31503: PUSH
31504: EMPTY
31505: ST_TO_ADDR
31506: END
// every 10 do var i ;
31507: GO 31509
31509: DISABLE
31510: LD_INT 0
31512: PPUSH
// begin enable ;
31513: ENABLE
// if not hInvincible then
31514: LD_EXP 124
31518: NOT
31519: IFFALSE 31523
// exit ;
31521: GO 31567
// for i in hInvincible do
31523: LD_ADDR_VAR 0 1
31527: PUSH
31528: LD_EXP 124
31532: PUSH
31533: FOR_IN
31534: IFFALSE 31565
// if GetLives ( i ) < 1000 then
31536: LD_VAR 0 1
31540: PPUSH
31541: CALL_OW 256
31545: PUSH
31546: LD_INT 1000
31548: LESS
31549: IFFALSE 31563
// SetLives ( i , 1000 ) ;
31551: LD_VAR 0 1
31555: PPUSH
31556: LD_INT 1000
31558: PPUSH
31559: CALL_OW 234
31563: GO 31533
31565: POP
31566: POP
// end ;
31567: PPOPN 1
31569: END
// export function hHackInvincible ; var i ; begin
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31574: LD_ADDR_VAR 0 2
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 21
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: PPUSH
31607: CALL_OW 69
31611: PUSH
31612: FOR_IN
31613: IFFALSE 31674
// if IsSelected ( i ) then
31615: LD_VAR 0 2
31619: PPUSH
31620: CALL_OW 306
31624: IFFALSE 31672
// begin if i in hInvincible then
31626: LD_VAR 0 2
31630: PUSH
31631: LD_EXP 124
31635: IN
31636: IFFALSE 31656
// hInvincible := hInvincible diff i else
31638: LD_ADDR_EXP 124
31642: PUSH
31643: LD_EXP 124
31647: PUSH
31648: LD_VAR 0 2
31652: DIFF
31653: ST_TO_ADDR
31654: GO 31672
// hInvincible := hInvincible union i ;
31656: LD_ADDR_EXP 124
31660: PUSH
31661: LD_EXP 124
31665: PUSH
31666: LD_VAR 0 2
31670: UNION
31671: ST_TO_ADDR
// end ;
31672: GO 31612
31674: POP
31675: POP
// end ;
31676: LD_VAR 0 1
31680: RET
// export function hHackInvisible ; var i , j ; begin
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
31685: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31686: LD_ADDR_VAR 0 2
31690: PUSH
31691: LD_INT 21
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PPUSH
31701: CALL_OW 69
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31731
// if IsSelected ( i ) then
31709: LD_VAR 0 2
31713: PPUSH
31714: CALL_OW 306
31718: IFFALSE 31729
// ComForceInvisible ( i ) ;
31720: LD_VAR 0 2
31724: PPUSH
31725: CALL_OW 496
31729: GO 31706
31731: POP
31732: POP
// end ;
31733: LD_VAR 0 1
31737: RET
// export function hHackChangeYourSide ; begin
31738: LD_INT 0
31740: PPUSH
// if your_side = 8 then
31741: LD_OWVAR 2
31745: PUSH
31746: LD_INT 8
31748: EQUAL
31749: IFFALSE 31761
// your_side := 0 else
31751: LD_ADDR_OWVAR 2
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
31759: GO 31775
// your_side := your_side + 1 ;
31761: LD_ADDR_OWVAR 2
31765: PUSH
31766: LD_OWVAR 2
31770: PUSH
31771: LD_INT 1
31773: PLUS
31774: ST_TO_ADDR
// end ;
31775: LD_VAR 0 1
31779: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31780: LD_INT 0
31782: PPUSH
31783: PPUSH
31784: PPUSH
// for i in all_units do
31785: LD_ADDR_VAR 0 2
31789: PUSH
31790: LD_OWVAR 3
31794: PUSH
31795: FOR_IN
31796: IFFALSE 31874
// if IsSelected ( i ) then
31798: LD_VAR 0 2
31802: PPUSH
31803: CALL_OW 306
31807: IFFALSE 31872
// begin j := GetSide ( i ) ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_VAR 0 2
31818: PPUSH
31819: CALL_OW 255
31823: ST_TO_ADDR
// if j = 8 then
31824: LD_VAR 0 3
31828: PUSH
31829: LD_INT 8
31831: EQUAL
31832: IFFALSE 31844
// j := 0 else
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
31842: GO 31858
// j := j + 1 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_VAR 0 3
31853: PUSH
31854: LD_INT 1
31856: PLUS
31857: ST_TO_ADDR
// SetSide ( i , j ) ;
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_VAR 0 3
31867: PPUSH
31868: CALL_OW 235
// end ;
31872: GO 31795
31874: POP
31875: POP
// end ;
31876: LD_VAR 0 1
31880: RET
// export function hHackFog ; begin
31881: LD_INT 0
31883: PPUSH
// FogOff ( true ) ;
31884: LD_INT 1
31886: PPUSH
31887: CALL_OW 344
// end ;
31891: LD_VAR 0 1
31895: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31896: LD_INT 0
31898: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31899: LD_VAR 0 1
31903: PPUSH
31904: LD_VAR 0 2
31908: PPUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: LD_INT 1
31919: PPUSH
31920: CALL_OW 483
// CenterOnXY ( x , y ) ;
31924: LD_VAR 0 2
31928: PPUSH
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL_OW 84
// end ; end_of_file
31938: LD_VAR 0 4
31942: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 264
31958: PUSH
31959: LD_EXP 58
31963: EQUAL
31964: IFFALSE 32036
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31966: LD_INT 68
31968: PPUSH
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 255
31978: PPUSH
31979: CALL_OW 321
31983: PUSH
31984: LD_INT 2
31986: EQUAL
31987: IFFALSE 31999
// eff := 70 else
31989: LD_ADDR_VAR 0 4
31993: PUSH
31994: LD_INT 70
31996: ST_TO_ADDR
31997: GO 32007
// eff := 30 ;
31999: LD_ADDR_VAR 0 4
32003: PUSH
32004: LD_INT 30
32006: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32007: LD_VAR 0 1
32011: PPUSH
32012: CALL_OW 250
32016: PPUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: CALL_OW 251
32026: PPUSH
32027: LD_VAR 0 4
32031: PPUSH
32032: CALL_OW 495
// end ; end ;
32036: LD_VAR 0 2
32040: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32041: LD_INT 0
32043: PPUSH
// end ;
32044: LD_VAR 0 4
32048: RET
// export function SOS_Command ( cmd ) ; begin
32049: LD_INT 0
32051: PPUSH
// end ;
32052: LD_VAR 0 2
32056: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32057: LD_INT 0
32059: PPUSH
// if cmd = 121 then
32060: LD_VAR 0 1
32064: PUSH
32065: LD_INT 121
32067: EQUAL
32068: IFFALSE 32070
// end ;
32070: LD_VAR 0 6
32074: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32075: LD_INT 0
32077: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32078: LD_VAR 0 1
32082: PUSH
32083: LD_INT 250
32085: EQUAL
32086: PUSH
32087: LD_VAR 0 2
32091: PPUSH
32092: CALL_OW 264
32096: PUSH
32097: LD_EXP 61
32101: EQUAL
32102: AND
32103: IFFALSE 32124
// MinerPlaceMine ( unit , x , y ) ;
32105: LD_VAR 0 2
32109: PPUSH
32110: LD_VAR 0 4
32114: PPUSH
32115: LD_VAR 0 5
32119: PPUSH
32120: CALL 34473 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 251
32131: EQUAL
32132: PUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: CALL_OW 264
32142: PUSH
32143: LD_EXP 61
32147: EQUAL
32148: AND
32149: IFFALSE 32170
// MinerDetonateMine ( unit , x , y ) ;
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 4
32160: PPUSH
32161: LD_VAR 0 5
32165: PPUSH
32166: CALL 34750 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32170: LD_VAR 0 1
32174: PUSH
32175: LD_INT 252
32177: EQUAL
32178: PUSH
32179: LD_VAR 0 2
32183: PPUSH
32184: CALL_OW 264
32188: PUSH
32189: LD_EXP 61
32193: EQUAL
32194: AND
32195: IFFALSE 32216
// MinerCreateMinefield ( unit , x , y ) ;
32197: LD_VAR 0 2
32201: PPUSH
32202: LD_VAR 0 4
32206: PPUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: CALL 35167 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 253
32223: EQUAL
32224: PUSH
32225: LD_VAR 0 2
32229: PPUSH
32230: CALL_OW 257
32234: PUSH
32235: LD_INT 5
32237: EQUAL
32238: AND
32239: IFFALSE 32260
// ComBinocular ( unit , x , y ) ;
32241: LD_VAR 0 2
32245: PPUSH
32246: LD_VAR 0 4
32250: PPUSH
32251: LD_VAR 0 5
32255: PPUSH
32256: CALL 35538 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32260: LD_VAR 0 1
32264: PUSH
32265: LD_INT 254
32267: EQUAL
32268: PUSH
32269: LD_VAR 0 2
32273: PPUSH
32274: CALL_OW 264
32278: PUSH
32279: LD_EXP 56
32283: EQUAL
32284: AND
32285: PUSH
32286: LD_VAR 0 3
32290: PPUSH
32291: CALL_OW 263
32295: PUSH
32296: LD_INT 3
32298: EQUAL
32299: AND
32300: IFFALSE 32316
// HackDestroyVehicle ( unit , selectedUnit ) ;
32302: LD_VAR 0 2
32306: PPUSH
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL 33833 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32316: LD_VAR 0 1
32320: PUSH
32321: LD_INT 255
32323: EQUAL
32324: PUSH
32325: LD_VAR 0 2
32329: PPUSH
32330: CALL_OW 264
32334: PUSH
32335: LD_INT 14
32337: PUSH
32338: LD_INT 53
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: IN
32345: AND
32346: PUSH
32347: LD_VAR 0 4
32351: PPUSH
32352: LD_VAR 0 5
32356: PPUSH
32357: CALL_OW 488
32361: AND
32362: IFFALSE 32386
// CutTreeXYR ( unit , x , y , 12 ) ;
32364: LD_VAR 0 2
32368: PPUSH
32369: LD_VAR 0 4
32373: PPUSH
32374: LD_VAR 0 5
32378: PPUSH
32379: LD_INT 12
32381: PPUSH
32382: CALL 32399 0 4
// end ;
32386: LD_VAR 0 6
32390: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32391: LD_INT 0
32393: PPUSH
// end ;
32394: LD_VAR 0 4
32398: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32399: LD_INT 0
32401: PPUSH
32402: PPUSH
32403: PPUSH
32404: PPUSH
32405: PPUSH
32406: PPUSH
32407: PPUSH
32408: PPUSH
32409: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32410: LD_VAR 0 1
32414: NOT
32415: PUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: LD_VAR 0 3
32425: PPUSH
32426: CALL_OW 488
32430: NOT
32431: OR
32432: PUSH
32433: LD_VAR 0 4
32437: NOT
32438: OR
32439: IFFALSE 32443
// exit ;
32441: GO 32783
// list := [ ] ;
32443: LD_ADDR_VAR 0 13
32447: PUSH
32448: EMPTY
32449: ST_TO_ADDR
// if x - r < 0 then
32450: LD_VAR 0 2
32454: PUSH
32455: LD_VAR 0 4
32459: MINUS
32460: PUSH
32461: LD_INT 0
32463: LESS
32464: IFFALSE 32476
// min_x := 0 else
32466: LD_ADDR_VAR 0 7
32470: PUSH
32471: LD_INT 0
32473: ST_TO_ADDR
32474: GO 32492
// min_x := x - r ;
32476: LD_ADDR_VAR 0 7
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_VAR 0 4
32490: MINUS
32491: ST_TO_ADDR
// if y - r < 0 then
32492: LD_VAR 0 3
32496: PUSH
32497: LD_VAR 0 4
32501: MINUS
32502: PUSH
32503: LD_INT 0
32505: LESS
32506: IFFALSE 32518
// min_y := 0 else
32508: LD_ADDR_VAR 0 8
32512: PUSH
32513: LD_INT 0
32515: ST_TO_ADDR
32516: GO 32534
// min_y := y - r ;
32518: LD_ADDR_VAR 0 8
32522: PUSH
32523: LD_VAR 0 3
32527: PUSH
32528: LD_VAR 0 4
32532: MINUS
32533: ST_TO_ADDR
// max_x := x + r ;
32534: LD_ADDR_VAR 0 9
32538: PUSH
32539: LD_VAR 0 2
32543: PUSH
32544: LD_VAR 0 4
32548: PLUS
32549: ST_TO_ADDR
// max_y := y + r ;
32550: LD_ADDR_VAR 0 10
32554: PUSH
32555: LD_VAR 0 3
32559: PUSH
32560: LD_VAR 0 4
32564: PLUS
32565: ST_TO_ADDR
// for _x = min_x to max_x do
32566: LD_ADDR_VAR 0 11
32570: PUSH
32571: DOUBLE
32572: LD_VAR 0 7
32576: DEC
32577: ST_TO_ADDR
32578: LD_VAR 0 9
32582: PUSH
32583: FOR_TO
32584: IFFALSE 32701
// for _y = min_y to max_y do
32586: LD_ADDR_VAR 0 12
32590: PUSH
32591: DOUBLE
32592: LD_VAR 0 8
32596: DEC
32597: ST_TO_ADDR
32598: LD_VAR 0 10
32602: PUSH
32603: FOR_TO
32604: IFFALSE 32697
// begin if not ValidHex ( _x , _y ) then
32606: LD_VAR 0 11
32610: PPUSH
32611: LD_VAR 0 12
32615: PPUSH
32616: CALL_OW 488
32620: NOT
32621: IFFALSE 32625
// continue ;
32623: GO 32603
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32625: LD_VAR 0 11
32629: PPUSH
32630: LD_VAR 0 12
32634: PPUSH
32635: CALL_OW 351
32639: PUSH
32640: LD_VAR 0 11
32644: PPUSH
32645: LD_VAR 0 12
32649: PPUSH
32650: CALL_OW 554
32654: AND
32655: IFFALSE 32695
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32657: LD_ADDR_VAR 0 13
32661: PUSH
32662: LD_VAR 0 13
32666: PPUSH
32667: LD_VAR 0 13
32671: PUSH
32672: LD_INT 1
32674: PLUS
32675: PPUSH
32676: LD_VAR 0 11
32680: PUSH
32681: LD_VAR 0 12
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PPUSH
32690: CALL_OW 2
32694: ST_TO_ADDR
// end ;
32695: GO 32603
32697: POP
32698: POP
32699: GO 32583
32701: POP
32702: POP
// if not list then
32703: LD_VAR 0 13
32707: NOT
32708: IFFALSE 32712
// exit ;
32710: GO 32783
// for i in list do
32712: LD_ADDR_VAR 0 6
32716: PUSH
32717: LD_VAR 0 13
32721: PUSH
32722: FOR_IN
32723: IFFALSE 32781
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32725: LD_VAR 0 1
32729: PPUSH
32730: LD_STRING M
32732: PUSH
32733: LD_VAR 0 6
32737: PUSH
32738: LD_INT 1
32740: ARRAY
32741: PUSH
32742: LD_VAR 0 6
32746: PUSH
32747: LD_INT 2
32749: ARRAY
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: EMPTY
32773: LIST
32774: PPUSH
32775: CALL_OW 447
32779: GO 32722
32781: POP
32782: POP
// end ;
32783: LD_VAR 0 5
32787: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32788: LD_EXP 127
32792: NOT
32793: IFFALSE 32843
32795: GO 32797
32797: DISABLE
// begin initHack := true ;
32798: LD_ADDR_EXP 127
32802: PUSH
32803: LD_INT 1
32805: ST_TO_ADDR
// hackTanks := [ ] ;
32806: LD_ADDR_EXP 128
32810: PUSH
32811: EMPTY
32812: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32813: LD_ADDR_EXP 129
32817: PUSH
32818: EMPTY
32819: ST_TO_ADDR
// hackLimit := 3 ;
32820: LD_ADDR_EXP 130
32824: PUSH
32825: LD_INT 3
32827: ST_TO_ADDR
// hackDist := 12 ;
32828: LD_ADDR_EXP 131
32832: PUSH
32833: LD_INT 12
32835: ST_TO_ADDR
// hackCounter := [ ] ;
32836: LD_ADDR_EXP 132
32840: PUSH
32841: EMPTY
32842: ST_TO_ADDR
// end ;
32843: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32844: LD_EXP 127
32848: PUSH
32849: LD_INT 34
32851: PUSH
32852: LD_EXP 56
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PPUSH
32861: CALL_OW 69
32865: AND
32866: IFFALSE 33121
32868: GO 32870
32870: DISABLE
32871: LD_INT 0
32873: PPUSH
32874: PPUSH
// begin enable ;
32875: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32876: LD_ADDR_VAR 0 1
32880: PUSH
32881: LD_INT 34
32883: PUSH
32884: LD_EXP 56
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 69
32897: PUSH
32898: FOR_IN
32899: IFFALSE 33119
// begin if not i in hackTanks then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_EXP 128
32910: IN
32911: NOT
32912: IFFALSE 32995
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32914: LD_ADDR_EXP 128
32918: PUSH
32919: LD_EXP 128
32923: PPUSH
32924: LD_EXP 128
32928: PUSH
32929: LD_INT 1
32931: PLUS
32932: PPUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 1
32942: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32943: LD_ADDR_EXP 129
32947: PUSH
32948: LD_EXP 129
32952: PPUSH
32953: LD_EXP 129
32957: PUSH
32958: LD_INT 1
32960: PLUS
32961: PPUSH
32962: EMPTY
32963: PPUSH
32964: CALL_OW 1
32968: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32969: LD_ADDR_EXP 132
32973: PUSH
32974: LD_EXP 132
32978: PPUSH
32979: LD_EXP 132
32983: PUSH
32984: LD_INT 1
32986: PLUS
32987: PPUSH
32988: EMPTY
32989: PPUSH
32990: CALL_OW 1
32994: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32995: LD_VAR 0 1
32999: PPUSH
33000: CALL_OW 302
33004: NOT
33005: IFFALSE 33018
// begin HackUnlinkAll ( i ) ;
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL 33124 0 1
// continue ;
33016: GO 32898
// end ; HackCheckCapturedStatus ( i ) ;
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL 33567 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33027: LD_ADDR_VAR 0 2
33031: PUSH
33032: LD_INT 81
33034: PUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 255
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 33
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 91
33061: PUSH
33062: LD_VAR 0 1
33066: PUSH
33067: LD_EXP 131
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 50
33079: PUSH
33080: EMPTY
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: PPUSH
33089: CALL_OW 69
33093: ST_TO_ADDR
// if not tmp then
33094: LD_VAR 0 2
33098: NOT
33099: IFFALSE 33103
// continue ;
33101: GO 32898
// HackLink ( i , tmp ) ;
33103: LD_VAR 0 1
33107: PPUSH
33108: LD_VAR 0 2
33112: PPUSH
33113: CALL 33260 0 2
// end ;
33117: GO 32898
33119: POP
33120: POP
// end ;
33121: PPOPN 2
33123: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33124: LD_INT 0
33126: PPUSH
33127: PPUSH
33128: PPUSH
// if not hack in hackTanks then
33129: LD_VAR 0 1
33133: PUSH
33134: LD_EXP 128
33138: IN
33139: NOT
33140: IFFALSE 33144
// exit ;
33142: GO 33255
// index := GetElementIndex ( hackTanks , hack ) ;
33144: LD_ADDR_VAR 0 4
33148: PUSH
33149: LD_EXP 128
33153: PPUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL 40689 0 2
33163: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33164: LD_EXP 129
33168: PUSH
33169: LD_VAR 0 4
33173: ARRAY
33174: IFFALSE 33255
// begin for i in hackTanksCaptured [ index ] do
33176: LD_ADDR_VAR 0 3
33180: PUSH
33181: LD_EXP 129
33185: PUSH
33186: LD_VAR 0 4
33190: ARRAY
33191: PUSH
33192: FOR_IN
33193: IFFALSE 33219
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33195: LD_VAR 0 3
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PPUSH
33204: LD_VAR 0 3
33208: PUSH
33209: LD_INT 2
33211: ARRAY
33212: PPUSH
33213: CALL_OW 235
33217: GO 33192
33219: POP
33220: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33221: LD_ADDR_EXP 129
33225: PUSH
33226: LD_EXP 129
33230: PPUSH
33231: LD_VAR 0 4
33235: PPUSH
33236: EMPTY
33237: PPUSH
33238: CALL_OW 1
33242: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33243: LD_VAR 0 1
33247: PPUSH
33248: LD_INT 0
33250: PPUSH
33251: CALL_OW 505
// end ; end ;
33255: LD_VAR 0 2
33259: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33260: LD_INT 0
33262: PPUSH
33263: PPUSH
33264: PPUSH
// if not hack in hackTanks or not vehicles then
33265: LD_VAR 0 1
33269: PUSH
33270: LD_EXP 128
33274: IN
33275: NOT
33276: PUSH
33277: LD_VAR 0 2
33281: NOT
33282: OR
33283: IFFALSE 33287
// exit ;
33285: GO 33562
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33287: LD_ADDR_VAR 0 2
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: LD_VAR 0 2
33301: PPUSH
33302: LD_INT 1
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: CALL 41339 0 4
33312: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33313: LD_ADDR_VAR 0 5
33317: PUSH
33318: LD_EXP 128
33322: PPUSH
33323: LD_VAR 0 1
33327: PPUSH
33328: CALL 40689 0 2
33332: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33333: LD_EXP 129
33337: PUSH
33338: LD_VAR 0 5
33342: ARRAY
33343: PUSH
33344: LD_EXP 130
33348: LESS
33349: IFFALSE 33538
// begin for i := 1 to vehicles do
33351: LD_ADDR_VAR 0 4
33355: PUSH
33356: DOUBLE
33357: LD_INT 1
33359: DEC
33360: ST_TO_ADDR
33361: LD_VAR 0 2
33365: PUSH
33366: FOR_TO
33367: IFFALSE 33536
// begin if hackTanksCaptured [ index ] = hackLimit then
33369: LD_EXP 129
33373: PUSH
33374: LD_VAR 0 5
33378: ARRAY
33379: PUSH
33380: LD_EXP 130
33384: EQUAL
33385: IFFALSE 33389
// break ;
33387: GO 33536
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33389: LD_ADDR_EXP 132
33393: PUSH
33394: LD_EXP 132
33398: PPUSH
33399: LD_VAR 0 5
33403: PPUSH
33404: LD_EXP 132
33408: PUSH
33409: LD_VAR 0 5
33413: ARRAY
33414: PUSH
33415: LD_INT 1
33417: PLUS
33418: PPUSH
33419: CALL_OW 1
33423: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33424: LD_ADDR_EXP 129
33428: PUSH
33429: LD_EXP 129
33433: PPUSH
33434: LD_VAR 0 5
33438: PUSH
33439: LD_EXP 129
33443: PUSH
33444: LD_VAR 0 5
33448: ARRAY
33449: PUSH
33450: LD_INT 1
33452: PLUS
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: LD_VAR 0 2
33462: PUSH
33463: LD_VAR 0 4
33467: ARRAY
33468: PUSH
33469: LD_VAR 0 2
33473: PUSH
33474: LD_VAR 0 4
33478: ARRAY
33479: PPUSH
33480: CALL_OW 255
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PPUSH
33489: CALL 40904 0 3
33493: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33494: LD_VAR 0 2
33498: PUSH
33499: LD_VAR 0 4
33503: ARRAY
33504: PPUSH
33505: LD_VAR 0 1
33509: PPUSH
33510: CALL_OW 255
33514: PPUSH
33515: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 4
33528: ARRAY
33529: PPUSH
33530: CALL_OW 141
// end ;
33534: GO 33366
33536: POP
33537: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33538: LD_VAR 0 1
33542: PPUSH
33543: LD_EXP 129
33547: PUSH
33548: LD_VAR 0 5
33552: ARRAY
33553: PUSH
33554: LD_INT 0
33556: PLUS
33557: PPUSH
33558: CALL_OW 505
// end ;
33562: LD_VAR 0 3
33566: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33567: LD_INT 0
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
// if not hack in hackTanks then
33573: LD_VAR 0 1
33577: PUSH
33578: LD_EXP 128
33582: IN
33583: NOT
33584: IFFALSE 33588
// exit ;
33586: GO 33828
// index := GetElementIndex ( hackTanks , hack ) ;
33588: LD_ADDR_VAR 0 4
33592: PUSH
33593: LD_EXP 128
33597: PPUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL 40689 0 2
33607: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: DOUBLE
33614: LD_EXP 129
33618: PUSH
33619: LD_VAR 0 4
33623: ARRAY
33624: INC
33625: ST_TO_ADDR
33626: LD_INT 1
33628: PUSH
33629: FOR_DOWNTO
33630: IFFALSE 33802
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_EXP 129
33641: PUSH
33642: LD_VAR 0 4
33646: ARRAY
33647: PUSH
33648: LD_VAR 0 3
33652: ARRAY
33653: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33654: LD_VAR 0 5
33658: PUSH
33659: LD_INT 1
33661: ARRAY
33662: PPUSH
33663: CALL_OW 302
33667: NOT
33668: PUSH
33669: LD_VAR 0 5
33673: PUSH
33674: LD_INT 1
33676: ARRAY
33677: PPUSH
33678: CALL_OW 255
33682: PUSH
33683: LD_VAR 0 1
33687: PPUSH
33688: CALL_OW 255
33692: NONEQUAL
33693: OR
33694: IFFALSE 33800
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33696: LD_VAR 0 5
33700: PUSH
33701: LD_INT 1
33703: ARRAY
33704: PPUSH
33705: CALL_OW 305
33709: PUSH
33710: LD_VAR 0 5
33714: PUSH
33715: LD_INT 1
33717: ARRAY
33718: PPUSH
33719: CALL_OW 255
33723: PUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: CALL_OW 255
33733: EQUAL
33734: AND
33735: IFFALSE 33759
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33737: LD_VAR 0 5
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PPUSH
33746: LD_VAR 0 5
33750: PUSH
33751: LD_INT 2
33753: ARRAY
33754: PPUSH
33755: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33759: LD_ADDR_EXP 129
33763: PUSH
33764: LD_EXP 129
33768: PPUSH
33769: LD_VAR 0 4
33773: PPUSH
33774: LD_EXP 129
33778: PUSH
33779: LD_VAR 0 4
33783: ARRAY
33784: PPUSH
33785: LD_VAR 0 3
33789: PPUSH
33790: CALL_OW 3
33794: PPUSH
33795: CALL_OW 1
33799: ST_TO_ADDR
// end ; end ;
33800: GO 33629
33802: POP
33803: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33804: LD_VAR 0 1
33808: PPUSH
33809: LD_EXP 129
33813: PUSH
33814: LD_VAR 0 4
33818: ARRAY
33819: PUSH
33820: LD_INT 0
33822: PLUS
33823: PPUSH
33824: CALL_OW 505
// end ;
33828: LD_VAR 0 2
33832: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33833: LD_INT 0
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
// if not hack in hackTanks then
33839: LD_VAR 0 1
33843: PUSH
33844: LD_EXP 128
33848: IN
33849: NOT
33850: IFFALSE 33854
// exit ;
33852: GO 33939
// index := GetElementIndex ( hackTanks , hack ) ;
33854: LD_ADDR_VAR 0 5
33858: PUSH
33859: LD_EXP 128
33863: PPUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL 40689 0 2
33873: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33874: LD_ADDR_VAR 0 4
33878: PUSH
33879: DOUBLE
33880: LD_INT 1
33882: DEC
33883: ST_TO_ADDR
33884: LD_EXP 129
33888: PUSH
33889: LD_VAR 0 5
33893: ARRAY
33894: PUSH
33895: FOR_TO
33896: IFFALSE 33937
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33898: LD_EXP 129
33902: PUSH
33903: LD_VAR 0 5
33907: ARRAY
33908: PUSH
33909: LD_VAR 0 4
33913: ARRAY
33914: PUSH
33915: LD_INT 1
33917: ARRAY
33918: PUSH
33919: LD_VAR 0 2
33923: EQUAL
33924: IFFALSE 33935
// KillUnit ( vehicle ) ;
33926: LD_VAR 0 2
33930: PPUSH
33931: CALL_OW 66
33935: GO 33895
33937: POP
33938: POP
// end ;
33939: LD_VAR 0 3
33943: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33944: LD_EXP 133
33948: NOT
33949: IFFALSE 33984
33951: GO 33953
33953: DISABLE
// begin initMiner := true ;
33954: LD_ADDR_EXP 133
33958: PUSH
33959: LD_INT 1
33961: ST_TO_ADDR
// minersList := [ ] ;
33962: LD_ADDR_EXP 134
33966: PUSH
33967: EMPTY
33968: ST_TO_ADDR
// minerMinesList := [ ] ;
33969: LD_ADDR_EXP 135
33973: PUSH
33974: EMPTY
33975: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33976: LD_ADDR_EXP 136
33980: PUSH
33981: LD_INT 5
33983: ST_TO_ADDR
// end ;
33984: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33985: LD_EXP 133
33989: PUSH
33990: LD_INT 34
33992: PUSH
33993: LD_EXP 61
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PPUSH
34002: CALL_OW 69
34006: AND
34007: IFFALSE 34470
34009: GO 34011
34011: DISABLE
34012: LD_INT 0
34014: PPUSH
34015: PPUSH
34016: PPUSH
34017: PPUSH
// begin enable ;
34018: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34019: LD_ADDR_VAR 0 1
34023: PUSH
34024: LD_INT 34
34026: PUSH
34027: LD_EXP 61
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PPUSH
34036: CALL_OW 69
34040: PUSH
34041: FOR_IN
34042: IFFALSE 34114
// begin if not i in minersList then
34044: LD_VAR 0 1
34048: PUSH
34049: LD_EXP 134
34053: IN
34054: NOT
34055: IFFALSE 34112
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34057: LD_ADDR_EXP 134
34061: PUSH
34062: LD_EXP 134
34066: PPUSH
34067: LD_EXP 134
34071: PUSH
34072: LD_INT 1
34074: PLUS
34075: PPUSH
34076: LD_VAR 0 1
34080: PPUSH
34081: CALL_OW 1
34085: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34086: LD_ADDR_EXP 135
34090: PUSH
34091: LD_EXP 135
34095: PPUSH
34096: LD_EXP 135
34100: PUSH
34101: LD_INT 1
34103: PLUS
34104: PPUSH
34105: EMPTY
34106: PPUSH
34107: CALL_OW 1
34111: ST_TO_ADDR
// end end ;
34112: GO 34041
34114: POP
34115: POP
// for i := minerMinesList downto 1 do
34116: LD_ADDR_VAR 0 1
34120: PUSH
34121: DOUBLE
34122: LD_EXP 135
34126: INC
34127: ST_TO_ADDR
34128: LD_INT 1
34130: PUSH
34131: FOR_DOWNTO
34132: IFFALSE 34468
// begin if IsLive ( minersList [ i ] ) then
34134: LD_EXP 134
34138: PUSH
34139: LD_VAR 0 1
34143: ARRAY
34144: PPUSH
34145: CALL_OW 300
34149: IFFALSE 34177
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34151: LD_EXP 134
34155: PUSH
34156: LD_VAR 0 1
34160: ARRAY
34161: PPUSH
34162: LD_EXP 135
34166: PUSH
34167: LD_VAR 0 1
34171: ARRAY
34172: PPUSH
34173: CALL_OW 505
// if not minerMinesList [ i ] then
34177: LD_EXP 135
34181: PUSH
34182: LD_VAR 0 1
34186: ARRAY
34187: NOT
34188: IFFALSE 34192
// continue ;
34190: GO 34131
// for j := minerMinesList [ i ] downto 1 do
34192: LD_ADDR_VAR 0 2
34196: PUSH
34197: DOUBLE
34198: LD_EXP 135
34202: PUSH
34203: LD_VAR 0 1
34207: ARRAY
34208: INC
34209: ST_TO_ADDR
34210: LD_INT 1
34212: PUSH
34213: FOR_DOWNTO
34214: IFFALSE 34464
// begin side := GetSide ( minersList [ i ] ) ;
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_EXP 134
34225: PUSH
34226: LD_VAR 0 1
34230: ARRAY
34231: PPUSH
34232: CALL_OW 255
34236: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34237: LD_ADDR_VAR 0 4
34241: PUSH
34242: LD_EXP 135
34246: PUSH
34247: LD_VAR 0 1
34251: ARRAY
34252: PUSH
34253: LD_VAR 0 2
34257: ARRAY
34258: PUSH
34259: LD_INT 1
34261: ARRAY
34262: PPUSH
34263: LD_EXP 135
34267: PUSH
34268: LD_VAR 0 1
34272: ARRAY
34273: PUSH
34274: LD_VAR 0 2
34278: ARRAY
34279: PUSH
34280: LD_INT 2
34282: ARRAY
34283: PPUSH
34284: CALL_OW 428
34288: ST_TO_ADDR
// if not tmp then
34289: LD_VAR 0 4
34293: NOT
34294: IFFALSE 34298
// continue ;
34296: GO 34213
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34298: LD_VAR 0 4
34302: PUSH
34303: LD_INT 81
34305: PUSH
34306: LD_VAR 0 3
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PPUSH
34315: CALL_OW 69
34319: IN
34320: PUSH
34321: LD_EXP 135
34325: PUSH
34326: LD_VAR 0 1
34330: ARRAY
34331: PUSH
34332: LD_VAR 0 2
34336: ARRAY
34337: PUSH
34338: LD_INT 1
34340: ARRAY
34341: PPUSH
34342: LD_EXP 135
34346: PUSH
34347: LD_VAR 0 1
34351: ARRAY
34352: PUSH
34353: LD_VAR 0 2
34357: ARRAY
34358: PUSH
34359: LD_INT 2
34361: ARRAY
34362: PPUSH
34363: CALL_OW 458
34367: AND
34368: IFFALSE 34462
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34370: LD_EXP 135
34374: PUSH
34375: LD_VAR 0 1
34379: ARRAY
34380: PUSH
34381: LD_VAR 0 2
34385: ARRAY
34386: PUSH
34387: LD_INT 1
34389: ARRAY
34390: PPUSH
34391: LD_EXP 135
34395: PUSH
34396: LD_VAR 0 1
34400: ARRAY
34401: PUSH
34402: LD_VAR 0 2
34406: ARRAY
34407: PUSH
34408: LD_INT 2
34410: ARRAY
34411: PPUSH
34412: LD_VAR 0 3
34416: PPUSH
34417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34421: LD_ADDR_EXP 135
34425: PUSH
34426: LD_EXP 135
34430: PPUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: LD_EXP 135
34440: PUSH
34441: LD_VAR 0 1
34445: ARRAY
34446: PPUSH
34447: LD_VAR 0 2
34451: PPUSH
34452: CALL_OW 3
34456: PPUSH
34457: CALL_OW 1
34461: ST_TO_ADDR
// end ; end ;
34462: GO 34213
34464: POP
34465: POP
// end ;
34466: GO 34131
34468: POP
34469: POP
// end ;
34470: PPOPN 4
34472: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34473: LD_INT 0
34475: PPUSH
34476: PPUSH
// result := false ;
34477: LD_ADDR_VAR 0 4
34481: PUSH
34482: LD_INT 0
34484: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34485: LD_VAR 0 1
34489: PPUSH
34490: CALL_OW 264
34494: PUSH
34495: LD_EXP 61
34499: EQUAL
34500: NOT
34501: IFFALSE 34505
// exit ;
34503: GO 34745
// index := GetElementIndex ( minersList , unit ) ;
34505: LD_ADDR_VAR 0 5
34509: PUSH
34510: LD_EXP 134
34514: PPUSH
34515: LD_VAR 0 1
34519: PPUSH
34520: CALL 40689 0 2
34524: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34525: LD_EXP 135
34529: PUSH
34530: LD_VAR 0 5
34534: ARRAY
34535: PUSH
34536: LD_EXP 136
34540: GREATEREQUAL
34541: IFFALSE 34545
// exit ;
34543: GO 34745
// ComMoveXY ( unit , x , y ) ;
34545: LD_VAR 0 1
34549: PPUSH
34550: LD_VAR 0 2
34554: PPUSH
34555: LD_VAR 0 3
34559: PPUSH
34560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34564: LD_INT 35
34566: PPUSH
34567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34571: LD_VAR 0 1
34575: PPUSH
34576: LD_VAR 0 2
34580: PPUSH
34581: LD_VAR 0 3
34585: PPUSH
34586: CALL 71086 0 3
34590: NOT
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 314
34601: AND
34602: IFFALSE 34606
// exit ;
34604: GO 34745
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34606: LD_VAR 0 2
34610: PPUSH
34611: LD_VAR 0 3
34615: PPUSH
34616: CALL_OW 428
34620: PUSH
34621: LD_VAR 0 1
34625: EQUAL
34626: PUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 314
34636: NOT
34637: AND
34638: IFFALSE 34564
// PlaySoundXY ( x , y , PlantMine ) ;
34640: LD_VAR 0 2
34644: PPUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: LD_STRING PlantMine
34652: PPUSH
34653: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34657: LD_VAR 0 2
34661: PPUSH
34662: LD_VAR 0 3
34666: PPUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: CALL_OW 255
34676: PPUSH
34677: LD_INT 0
34679: PPUSH
34680: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34684: LD_ADDR_EXP 135
34688: PUSH
34689: LD_EXP 135
34693: PPUSH
34694: LD_VAR 0 5
34698: PUSH
34699: LD_EXP 135
34703: PUSH
34704: LD_VAR 0 5
34708: ARRAY
34709: PUSH
34710: LD_INT 1
34712: PLUS
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PPUSH
34718: LD_VAR 0 2
34722: PUSH
34723: LD_VAR 0 3
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PPUSH
34732: CALL 40904 0 3
34736: ST_TO_ADDR
// result := true ;
34737: LD_ADDR_VAR 0 4
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
// end ;
34745: LD_VAR 0 4
34749: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34750: LD_INT 0
34752: PPUSH
34753: PPUSH
34754: PPUSH
// if not unit in minersList then
34755: LD_VAR 0 1
34759: PUSH
34760: LD_EXP 134
34764: IN
34765: NOT
34766: IFFALSE 34770
// exit ;
34768: GO 35162
// index := GetElementIndex ( minersList , unit ) ;
34770: LD_ADDR_VAR 0 6
34774: PUSH
34775: LD_EXP 134
34779: PPUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL 40689 0 2
34789: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34790: LD_ADDR_VAR 0 5
34794: PUSH
34795: DOUBLE
34796: LD_EXP 135
34800: PUSH
34801: LD_VAR 0 6
34805: ARRAY
34806: INC
34807: ST_TO_ADDR
34808: LD_INT 1
34810: PUSH
34811: FOR_DOWNTO
34812: IFFALSE 34973
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34814: LD_EXP 135
34818: PUSH
34819: LD_VAR 0 6
34823: ARRAY
34824: PUSH
34825: LD_VAR 0 5
34829: ARRAY
34830: PUSH
34831: LD_INT 1
34833: ARRAY
34834: PUSH
34835: LD_VAR 0 2
34839: EQUAL
34840: PUSH
34841: LD_EXP 135
34845: PUSH
34846: LD_VAR 0 6
34850: ARRAY
34851: PUSH
34852: LD_VAR 0 5
34856: ARRAY
34857: PUSH
34858: LD_INT 2
34860: ARRAY
34861: PUSH
34862: LD_VAR 0 3
34866: EQUAL
34867: AND
34868: IFFALSE 34971
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34870: LD_EXP 135
34874: PUSH
34875: LD_VAR 0 6
34879: ARRAY
34880: PUSH
34881: LD_VAR 0 5
34885: ARRAY
34886: PUSH
34887: LD_INT 1
34889: ARRAY
34890: PPUSH
34891: LD_EXP 135
34895: PUSH
34896: LD_VAR 0 6
34900: ARRAY
34901: PUSH
34902: LD_VAR 0 5
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 255
34921: PPUSH
34922: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34926: LD_ADDR_EXP 135
34930: PUSH
34931: LD_EXP 135
34935: PPUSH
34936: LD_VAR 0 6
34940: PPUSH
34941: LD_EXP 135
34945: PUSH
34946: LD_VAR 0 6
34950: ARRAY
34951: PPUSH
34952: LD_VAR 0 5
34956: PPUSH
34957: CALL_OW 3
34961: PPUSH
34962: CALL_OW 1
34966: ST_TO_ADDR
// exit ;
34967: POP
34968: POP
34969: GO 35162
// end ; end ;
34971: GO 34811
34973: POP
34974: POP
// for i := minerMinesList [ index ] downto 1 do
34975: LD_ADDR_VAR 0 5
34979: PUSH
34980: DOUBLE
34981: LD_EXP 135
34985: PUSH
34986: LD_VAR 0 6
34990: ARRAY
34991: INC
34992: ST_TO_ADDR
34993: LD_INT 1
34995: PUSH
34996: FOR_DOWNTO
34997: IFFALSE 35160
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34999: LD_EXP 135
35003: PUSH
35004: LD_VAR 0 6
35008: ARRAY
35009: PUSH
35010: LD_VAR 0 5
35014: ARRAY
35015: PUSH
35016: LD_INT 1
35018: ARRAY
35019: PPUSH
35020: LD_EXP 135
35024: PUSH
35025: LD_VAR 0 6
35029: ARRAY
35030: PUSH
35031: LD_VAR 0 5
35035: ARRAY
35036: PUSH
35037: LD_INT 2
35039: ARRAY
35040: PPUSH
35041: LD_VAR 0 2
35045: PPUSH
35046: LD_VAR 0 3
35050: PPUSH
35051: CALL_OW 298
35055: PUSH
35056: LD_INT 6
35058: LESS
35059: IFFALSE 35158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35061: LD_EXP 135
35065: PUSH
35066: LD_VAR 0 6
35070: ARRAY
35071: PUSH
35072: LD_VAR 0 5
35076: ARRAY
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PPUSH
35082: LD_EXP 135
35086: PUSH
35087: LD_VAR 0 6
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 5
35097: ARRAY
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 255
35112: PPUSH
35113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35117: LD_ADDR_EXP 135
35121: PUSH
35122: LD_EXP 135
35126: PPUSH
35127: LD_VAR 0 6
35131: PPUSH
35132: LD_EXP 135
35136: PUSH
35137: LD_VAR 0 6
35141: ARRAY
35142: PPUSH
35143: LD_VAR 0 5
35147: PPUSH
35148: CALL_OW 3
35152: PPUSH
35153: CALL_OW 1
35157: ST_TO_ADDR
// end ; end ;
35158: GO 34996
35160: POP
35161: POP
// end ;
35162: LD_VAR 0 4
35166: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35167: LD_INT 0
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 264
35187: PUSH
35188: LD_EXP 61
35192: EQUAL
35193: NOT
35194: PUSH
35195: LD_VAR 0 1
35199: PUSH
35200: LD_EXP 134
35204: IN
35205: NOT
35206: OR
35207: IFFALSE 35211
// exit ;
35209: GO 35533
// index := GetElementIndex ( minersList , unit ) ;
35211: LD_ADDR_VAR 0 6
35215: PUSH
35216: LD_EXP 134
35220: PPUSH
35221: LD_VAR 0 1
35225: PPUSH
35226: CALL 40689 0 2
35230: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35231: LD_ADDR_VAR 0 8
35235: PUSH
35236: LD_EXP 136
35240: PUSH
35241: LD_EXP 135
35245: PUSH
35246: LD_VAR 0 6
35250: ARRAY
35251: MINUS
35252: ST_TO_ADDR
// if not minesFreeAmount then
35253: LD_VAR 0 8
35257: NOT
35258: IFFALSE 35262
// exit ;
35260: GO 35533
// tmp := [ ] ;
35262: LD_ADDR_VAR 0 7
35266: PUSH
35267: EMPTY
35268: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35269: LD_ADDR_VAR 0 5
35273: PUSH
35274: DOUBLE
35275: LD_INT 1
35277: DEC
35278: ST_TO_ADDR
35279: LD_VAR 0 8
35283: PUSH
35284: FOR_TO
35285: IFFALSE 35480
// begin _d := rand ( 0 , 5 ) ;
35287: LD_ADDR_VAR 0 11
35291: PUSH
35292: LD_INT 0
35294: PPUSH
35295: LD_INT 5
35297: PPUSH
35298: CALL_OW 12
35302: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35303: LD_ADDR_VAR 0 12
35307: PUSH
35308: LD_INT 2
35310: PPUSH
35311: LD_INT 6
35313: PPUSH
35314: CALL_OW 12
35318: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35319: LD_ADDR_VAR 0 9
35323: PUSH
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_VAR 0 11
35333: PPUSH
35334: LD_VAR 0 12
35338: PPUSH
35339: CALL_OW 272
35343: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35344: LD_ADDR_VAR 0 10
35348: PUSH
35349: LD_VAR 0 3
35353: PPUSH
35354: LD_VAR 0 11
35358: PPUSH
35359: LD_VAR 0 12
35363: PPUSH
35364: CALL_OW 273
35368: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35369: LD_VAR 0 9
35373: PPUSH
35374: LD_VAR 0 10
35378: PPUSH
35379: CALL_OW 488
35383: PUSH
35384: LD_VAR 0 9
35388: PUSH
35389: LD_VAR 0 10
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_VAR 0 7
35402: IN
35403: NOT
35404: AND
35405: PUSH
35406: LD_VAR 0 9
35410: PPUSH
35411: LD_VAR 0 10
35415: PPUSH
35416: CALL_OW 458
35420: NOT
35421: AND
35422: IFFALSE 35464
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35424: LD_ADDR_VAR 0 7
35428: PUSH
35429: LD_VAR 0 7
35433: PPUSH
35434: LD_VAR 0 7
35438: PUSH
35439: LD_INT 1
35441: PLUS
35442: PPUSH
35443: LD_VAR 0 9
35447: PUSH
35448: LD_VAR 0 10
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PPUSH
35457: CALL_OW 1
35461: ST_TO_ADDR
35462: GO 35478
// i := i - 1 ;
35464: LD_ADDR_VAR 0 5
35468: PUSH
35469: LD_VAR 0 5
35473: PUSH
35474: LD_INT 1
35476: MINUS
35477: ST_TO_ADDR
// end ;
35478: GO 35284
35480: POP
35481: POP
// for i in tmp do
35482: LD_ADDR_VAR 0 5
35486: PUSH
35487: LD_VAR 0 7
35491: PUSH
35492: FOR_IN
35493: IFFALSE 35531
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35495: LD_VAR 0 1
35499: PPUSH
35500: LD_VAR 0 5
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PPUSH
35509: LD_VAR 0 5
35513: PUSH
35514: LD_INT 2
35516: ARRAY
35517: PPUSH
35518: CALL 34473 0 3
35522: NOT
35523: IFFALSE 35529
// exit ;
35525: POP
35526: POP
35527: GO 35533
35529: GO 35492
35531: POP
35532: POP
// end ;
35533: LD_VAR 0 4
35537: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35538: LD_INT 0
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
// if not GetClass ( unit ) = class_sniper then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 257
35556: PUSH
35557: LD_INT 5
35559: EQUAL
35560: NOT
35561: IFFALSE 35565
// exit ;
35563: GO 35953
// dist := 8 ;
35565: LD_ADDR_VAR 0 5
35569: PUSH
35570: LD_INT 8
35572: ST_TO_ADDR
// viewRange := 12 ;
35573: LD_ADDR_VAR 0 7
35577: PUSH
35578: LD_INT 12
35580: ST_TO_ADDR
// side := GetSide ( unit ) ;
35581: LD_ADDR_VAR 0 6
35585: PUSH
35586: LD_VAR 0 1
35590: PPUSH
35591: CALL_OW 255
35595: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35596: LD_INT 61
35598: PPUSH
35599: LD_VAR 0 6
35603: PPUSH
35604: CALL_OW 321
35608: PUSH
35609: LD_INT 2
35611: EQUAL
35612: IFFALSE 35622
// viewRange := 16 ;
35614: LD_ADDR_VAR 0 7
35618: PUSH
35619: LD_INT 16
35621: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35622: LD_VAR 0 1
35626: PPUSH
35627: LD_VAR 0 2
35631: PPUSH
35632: LD_VAR 0 3
35636: PPUSH
35637: CALL_OW 297
35641: PUSH
35642: LD_VAR 0 5
35646: GREATER
35647: IFFALSE 35726
// begin ComMoveXY ( unit , x , y ) ;
35649: LD_VAR 0 1
35653: PPUSH
35654: LD_VAR 0 2
35658: PPUSH
35659: LD_VAR 0 3
35663: PPUSH
35664: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35668: LD_INT 35
35670: PPUSH
35671: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35675: LD_VAR 0 1
35679: PPUSH
35680: LD_VAR 0 2
35684: PPUSH
35685: LD_VAR 0 3
35689: PPUSH
35690: CALL 71086 0 3
35694: NOT
35695: IFFALSE 35699
// exit ;
35697: GO 35953
// until GetDistUnitXY ( unit , x , y ) < dist ;
35699: LD_VAR 0 1
35703: PPUSH
35704: LD_VAR 0 2
35708: PPUSH
35709: LD_VAR 0 3
35713: PPUSH
35714: CALL_OW 297
35718: PUSH
35719: LD_VAR 0 5
35723: LESS
35724: IFFALSE 35668
// end ; ComTurnXY ( unit , x , y ) ;
35726: LD_VAR 0 1
35730: PPUSH
35731: LD_VAR 0 2
35735: PPUSH
35736: LD_VAR 0 3
35740: PPUSH
35741: CALL_OW 118
// wait ( 5 ) ;
35745: LD_INT 5
35747: PPUSH
35748: CALL_OW 67
// _d := GetDir ( unit ) ;
35752: LD_ADDR_VAR 0 10
35756: PUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 254
35766: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35767: LD_ADDR_VAR 0 8
35771: PUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: CALL_OW 250
35781: PPUSH
35782: LD_VAR 0 10
35786: PPUSH
35787: LD_VAR 0 5
35791: PPUSH
35792: CALL_OW 272
35796: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: CALL_OW 251
35811: PPUSH
35812: LD_VAR 0 10
35816: PPUSH
35817: LD_VAR 0 5
35821: PPUSH
35822: CALL_OW 273
35826: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35827: LD_VAR 0 8
35831: PPUSH
35832: LD_VAR 0 9
35836: PPUSH
35837: CALL_OW 488
35841: NOT
35842: IFFALSE 35846
// exit ;
35844: GO 35953
// ComAnimCustom ( unit , 1 ) ;
35846: LD_VAR 0 1
35850: PPUSH
35851: LD_INT 1
35853: PPUSH
35854: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35858: LD_VAR 0 8
35862: PPUSH
35863: LD_VAR 0 9
35867: PPUSH
35868: LD_VAR 0 6
35872: PPUSH
35873: LD_VAR 0 7
35877: PPUSH
35878: CALL_OW 330
// repeat wait ( 1 ) ;
35882: LD_INT 1
35884: PPUSH
35885: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 316
35898: PUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 314
35908: OR
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 302
35919: NOT
35920: OR
35921: PUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 301
35931: OR
35932: IFFALSE 35882
// RemoveSeeing ( _x , _y , side ) ;
35934: LD_VAR 0 8
35938: PPUSH
35939: LD_VAR 0 9
35943: PPUSH
35944: LD_VAR 0 6
35948: PPUSH
35949: CALL_OW 331
// end ; end_of_file
35953: LD_VAR 0 4
35957: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35958: LD_INT 0
35960: PPUSH
35961: PPUSH
// if exist_mode then
35962: LD_VAR 0 2
35966: IFFALSE 35991
// unit := CreateCharacter ( prefix & ident ) else
35968: LD_ADDR_VAR 0 5
35972: PUSH
35973: LD_VAR 0 3
35977: PUSH
35978: LD_VAR 0 1
35982: STR
35983: PPUSH
35984: CALL_OW 34
35988: ST_TO_ADDR
35989: GO 36006
// unit := NewCharacter ( ident ) ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_VAR 0 1
36000: PPUSH
36001: CALL_OW 25
36005: ST_TO_ADDR
// result := unit ;
36006: LD_ADDR_VAR 0 4
36010: PUSH
36011: LD_VAR 0 5
36015: ST_TO_ADDR
// end ;
36016: LD_VAR 0 4
36020: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36021: LD_INT 0
36023: PPUSH
36024: PPUSH
// if not side or not nation then
36025: LD_VAR 0 1
36029: NOT
36030: PUSH
36031: LD_VAR 0 2
36035: NOT
36036: OR
36037: IFFALSE 36041
// exit ;
36039: GO 36805
// case nation of nation_american :
36041: LD_VAR 0 2
36045: PUSH
36046: LD_INT 1
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36054
36052: GO 36268
36054: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36055: LD_ADDR_VAR 0 4
36059: PUSH
36060: LD_INT 35
36062: PUSH
36063: LD_INT 45
36065: PUSH
36066: LD_INT 46
36068: PUSH
36069: LD_INT 47
36071: PUSH
36072: LD_INT 82
36074: PUSH
36075: LD_INT 83
36077: PUSH
36078: LD_INT 84
36080: PUSH
36081: LD_INT 85
36083: PUSH
36084: LD_INT 86
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 6
36095: PUSH
36096: LD_INT 15
36098: PUSH
36099: LD_INT 16
36101: PUSH
36102: LD_INT 7
36104: PUSH
36105: LD_INT 12
36107: PUSH
36108: LD_INT 13
36110: PUSH
36111: LD_INT 10
36113: PUSH
36114: LD_INT 14
36116: PUSH
36117: LD_INT 20
36119: PUSH
36120: LD_INT 21
36122: PUSH
36123: LD_INT 22
36125: PUSH
36126: LD_INT 25
36128: PUSH
36129: LD_INT 32
36131: PUSH
36132: LD_INT 27
36134: PUSH
36135: LD_INT 36
36137: PUSH
36138: LD_INT 69
36140: PUSH
36141: LD_INT 39
36143: PUSH
36144: LD_INT 34
36146: PUSH
36147: LD_INT 40
36149: PUSH
36150: LD_INT 48
36152: PUSH
36153: LD_INT 49
36155: PUSH
36156: LD_INT 50
36158: PUSH
36159: LD_INT 51
36161: PUSH
36162: LD_INT 52
36164: PUSH
36165: LD_INT 53
36167: PUSH
36168: LD_INT 54
36170: PUSH
36171: LD_INT 55
36173: PUSH
36174: LD_INT 56
36176: PUSH
36177: LD_INT 57
36179: PUSH
36180: LD_INT 58
36182: PUSH
36183: LD_INT 59
36185: PUSH
36186: LD_INT 60
36188: PUSH
36189: LD_INT 61
36191: PUSH
36192: LD_INT 62
36194: PUSH
36195: LD_INT 80
36197: PUSH
36198: LD_INT 82
36200: PUSH
36201: LD_INT 83
36203: PUSH
36204: LD_INT 84
36206: PUSH
36207: LD_INT 85
36209: PUSH
36210: LD_INT 86
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
36266: GO 36729
36268: LD_INT 2
36270: DOUBLE
36271: EQUAL
36272: IFTRUE 36276
36274: GO 36498
36276: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36277: LD_ADDR_VAR 0 4
36281: PUSH
36282: LD_INT 35
36284: PUSH
36285: LD_INT 45
36287: PUSH
36288: LD_INT 46
36290: PUSH
36291: LD_INT 47
36293: PUSH
36294: LD_INT 82
36296: PUSH
36297: LD_INT 83
36299: PUSH
36300: LD_INT 84
36302: PUSH
36303: LD_INT 85
36305: PUSH
36306: LD_INT 87
36308: PUSH
36309: LD_INT 70
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 11
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: LD_INT 4
36323: PUSH
36324: LD_INT 5
36326: PUSH
36327: LD_INT 6
36329: PUSH
36330: LD_INT 15
36332: PUSH
36333: LD_INT 18
36335: PUSH
36336: LD_INT 7
36338: PUSH
36339: LD_INT 17
36341: PUSH
36342: LD_INT 8
36344: PUSH
36345: LD_INT 20
36347: PUSH
36348: LD_INT 21
36350: PUSH
36351: LD_INT 22
36353: PUSH
36354: LD_INT 72
36356: PUSH
36357: LD_INT 26
36359: PUSH
36360: LD_INT 69
36362: PUSH
36363: LD_INT 39
36365: PUSH
36366: LD_INT 40
36368: PUSH
36369: LD_INT 41
36371: PUSH
36372: LD_INT 42
36374: PUSH
36375: LD_INT 43
36377: PUSH
36378: LD_INT 48
36380: PUSH
36381: LD_INT 49
36383: PUSH
36384: LD_INT 50
36386: PUSH
36387: LD_INT 51
36389: PUSH
36390: LD_INT 52
36392: PUSH
36393: LD_INT 53
36395: PUSH
36396: LD_INT 54
36398: PUSH
36399: LD_INT 55
36401: PUSH
36402: LD_INT 56
36404: PUSH
36405: LD_INT 60
36407: PUSH
36408: LD_INT 61
36410: PUSH
36411: LD_INT 62
36413: PUSH
36414: LD_INT 66
36416: PUSH
36417: LD_INT 67
36419: PUSH
36420: LD_INT 68
36422: PUSH
36423: LD_INT 81
36425: PUSH
36426: LD_INT 82
36428: PUSH
36429: LD_INT 83
36431: PUSH
36432: LD_INT 84
36434: PUSH
36435: LD_INT 85
36437: PUSH
36438: LD_INT 87
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
36496: GO 36729
36498: LD_INT 3
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36506
36504: GO 36728
36506: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36507: LD_ADDR_VAR 0 4
36511: PUSH
36512: LD_INT 46
36514: PUSH
36515: LD_INT 47
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 82
36526: PUSH
36527: LD_INT 83
36529: PUSH
36530: LD_INT 84
36532: PUSH
36533: LD_INT 85
36535: PUSH
36536: LD_INT 86
36538: PUSH
36539: LD_INT 11
36541: PUSH
36542: LD_INT 9
36544: PUSH
36545: LD_INT 20
36547: PUSH
36548: LD_INT 19
36550: PUSH
36551: LD_INT 21
36553: PUSH
36554: LD_INT 24
36556: PUSH
36557: LD_INT 22
36559: PUSH
36560: LD_INT 25
36562: PUSH
36563: LD_INT 28
36565: PUSH
36566: LD_INT 29
36568: PUSH
36569: LD_INT 30
36571: PUSH
36572: LD_INT 31
36574: PUSH
36575: LD_INT 37
36577: PUSH
36578: LD_INT 38
36580: PUSH
36581: LD_INT 32
36583: PUSH
36584: LD_INT 27
36586: PUSH
36587: LD_INT 33
36589: PUSH
36590: LD_INT 69
36592: PUSH
36593: LD_INT 39
36595: PUSH
36596: LD_INT 34
36598: PUSH
36599: LD_INT 40
36601: PUSH
36602: LD_INT 71
36604: PUSH
36605: LD_INT 23
36607: PUSH
36608: LD_INT 44
36610: PUSH
36611: LD_INT 48
36613: PUSH
36614: LD_INT 49
36616: PUSH
36617: LD_INT 50
36619: PUSH
36620: LD_INT 51
36622: PUSH
36623: LD_INT 52
36625: PUSH
36626: LD_INT 53
36628: PUSH
36629: LD_INT 54
36631: PUSH
36632: LD_INT 55
36634: PUSH
36635: LD_INT 56
36637: PUSH
36638: LD_INT 57
36640: PUSH
36641: LD_INT 58
36643: PUSH
36644: LD_INT 59
36646: PUSH
36647: LD_INT 63
36649: PUSH
36650: LD_INT 64
36652: PUSH
36653: LD_INT 65
36655: PUSH
36656: LD_INT 82
36658: PUSH
36659: LD_INT 83
36661: PUSH
36662: LD_INT 84
36664: PUSH
36665: LD_INT 85
36667: PUSH
36668: LD_INT 86
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
36726: GO 36729
36728: POP
// if state > - 1 and state < 3 then
36729: LD_VAR 0 3
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: GREATER
36738: PUSH
36739: LD_VAR 0 3
36743: PUSH
36744: LD_INT 3
36746: LESS
36747: AND
36748: IFFALSE 36805
// for i in result do
36750: LD_ADDR_VAR 0 5
36754: PUSH
36755: LD_VAR 0 4
36759: PUSH
36760: FOR_IN
36761: IFFALSE 36803
// if GetTech ( i , side ) <> state then
36763: LD_VAR 0 5
36767: PPUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 321
36777: PUSH
36778: LD_VAR 0 3
36782: NONEQUAL
36783: IFFALSE 36801
// result := result diff i ;
36785: LD_ADDR_VAR 0 4
36789: PUSH
36790: LD_VAR 0 4
36794: PUSH
36795: LD_VAR 0 5
36799: DIFF
36800: ST_TO_ADDR
36801: GO 36760
36803: POP
36804: POP
// end ;
36805: LD_VAR 0 4
36809: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36810: LD_INT 0
36812: PPUSH
36813: PPUSH
36814: PPUSH
// result := true ;
36815: LD_ADDR_VAR 0 3
36819: PUSH
36820: LD_INT 1
36822: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36823: LD_ADDR_VAR 0 5
36827: PUSH
36828: LD_VAR 0 2
36832: PPUSH
36833: CALL_OW 480
36837: ST_TO_ADDR
// if not tmp then
36838: LD_VAR 0 5
36842: NOT
36843: IFFALSE 36847
// exit ;
36845: GO 36896
// for i in tmp do
36847: LD_ADDR_VAR 0 4
36851: PUSH
36852: LD_VAR 0 5
36856: PUSH
36857: FOR_IN
36858: IFFALSE 36894
// if GetTech ( i , side ) <> state_researched then
36860: LD_VAR 0 4
36864: PPUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 321
36874: PUSH
36875: LD_INT 2
36877: NONEQUAL
36878: IFFALSE 36892
// begin result := false ;
36880: LD_ADDR_VAR 0 3
36884: PUSH
36885: LD_INT 0
36887: ST_TO_ADDR
// exit ;
36888: POP
36889: POP
36890: GO 36896
// end ;
36892: GO 36857
36894: POP
36895: POP
// end ;
36896: LD_VAR 0 3
36900: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36916: LD_VAR 0 1
36920: NOT
36921: PUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 257
36931: PUSH
36932: LD_INT 9
36934: NONEQUAL
36935: OR
36936: IFFALSE 36940
// exit ;
36938: GO 37513
// side := GetSide ( unit ) ;
36940: LD_ADDR_VAR 0 9
36944: PUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 255
36954: ST_TO_ADDR
// tech_space := tech_spacanom ;
36955: LD_ADDR_VAR 0 12
36959: PUSH
36960: LD_INT 29
36962: ST_TO_ADDR
// tech_time := tech_taurad ;
36963: LD_ADDR_VAR 0 13
36967: PUSH
36968: LD_INT 28
36970: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36971: LD_ADDR_VAR 0 11
36975: PUSH
36976: LD_VAR 0 1
36980: PPUSH
36981: CALL_OW 310
36985: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36986: LD_VAR 0 11
36990: PPUSH
36991: CALL_OW 247
36995: PUSH
36996: LD_INT 2
36998: EQUAL
36999: IFFALSE 37003
// exit ;
37001: GO 37513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37003: LD_ADDR_VAR 0 8
37007: PUSH
37008: LD_INT 81
37010: PUSH
37011: LD_VAR 0 9
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: LD_INT 21
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PPUSH
37041: CALL_OW 69
37045: ST_TO_ADDR
// if not tmp then
37046: LD_VAR 0 8
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37513
// if in_unit then
37055: LD_VAR 0 11
37059: IFFALSE 37083
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37061: LD_ADDR_VAR 0 10
37065: PUSH
37066: LD_VAR 0 8
37070: PPUSH
37071: LD_VAR 0 11
37075: PPUSH
37076: CALL_OW 74
37080: ST_TO_ADDR
37081: GO 37103
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37083: LD_ADDR_VAR 0 10
37087: PUSH
37088: LD_VAR 0 8
37092: PPUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: CALL_OW 74
37102: ST_TO_ADDR
// if not enemy then
37103: LD_VAR 0 10
37107: NOT
37108: IFFALSE 37112
// exit ;
37110: GO 37513
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37112: LD_VAR 0 11
37116: PUSH
37117: LD_VAR 0 11
37121: PPUSH
37122: LD_VAR 0 10
37126: PPUSH
37127: CALL_OW 296
37131: PUSH
37132: LD_INT 13
37134: GREATER
37135: AND
37136: PUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: LD_VAR 0 10
37146: PPUSH
37147: CALL_OW 296
37151: PUSH
37152: LD_INT 12
37154: GREATER
37155: OR
37156: IFFALSE 37160
// exit ;
37158: GO 37513
// missile := [ 1 ] ;
37160: LD_ADDR_VAR 0 14
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37171: LD_VAR 0 9
37175: PPUSH
37176: LD_VAR 0 12
37180: PPUSH
37181: CALL_OW 325
37185: IFFALSE 37214
// missile := Insert ( missile , missile + 1 , 2 ) ;
37187: LD_ADDR_VAR 0 14
37191: PUSH
37192: LD_VAR 0 14
37196: PPUSH
37197: LD_VAR 0 14
37201: PUSH
37202: LD_INT 1
37204: PLUS
37205: PPUSH
37206: LD_INT 2
37208: PPUSH
37209: CALL_OW 2
37213: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37214: LD_VAR 0 9
37218: PPUSH
37219: LD_VAR 0 13
37223: PPUSH
37224: CALL_OW 325
37228: PUSH
37229: LD_VAR 0 10
37233: PPUSH
37234: CALL_OW 255
37238: PPUSH
37239: LD_VAR 0 13
37243: PPUSH
37244: CALL_OW 325
37248: NOT
37249: AND
37250: IFFALSE 37279
// missile := Insert ( missile , missile + 1 , 3 ) ;
37252: LD_ADDR_VAR 0 14
37256: PUSH
37257: LD_VAR 0 14
37261: PPUSH
37262: LD_VAR 0 14
37266: PUSH
37267: LD_INT 1
37269: PLUS
37270: PPUSH
37271: LD_INT 3
37273: PPUSH
37274: CALL_OW 2
37278: ST_TO_ADDR
// if missile < 2 then
37279: LD_VAR 0 14
37283: PUSH
37284: LD_INT 2
37286: LESS
37287: IFFALSE 37291
// exit ;
37289: GO 37513
// x := GetX ( enemy ) ;
37291: LD_ADDR_VAR 0 4
37295: PUSH
37296: LD_VAR 0 10
37300: PPUSH
37301: CALL_OW 250
37305: ST_TO_ADDR
// y := GetY ( enemy ) ;
37306: LD_ADDR_VAR 0 5
37310: PUSH
37311: LD_VAR 0 10
37315: PPUSH
37316: CALL_OW 251
37320: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: LD_VAR 0 4
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PPUSH
37335: LD_INT 1
37337: PPUSH
37338: CALL_OW 12
37342: PLUS
37343: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37344: LD_ADDR_VAR 0 7
37348: PUSH
37349: LD_VAR 0 5
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PPUSH
37358: LD_INT 1
37360: PPUSH
37361: CALL_OW 12
37365: PLUS
37366: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37367: LD_VAR 0 6
37371: PPUSH
37372: LD_VAR 0 7
37376: PPUSH
37377: CALL_OW 488
37381: NOT
37382: IFFALSE 37404
// begin _x := x ;
37384: LD_ADDR_VAR 0 6
37388: PUSH
37389: LD_VAR 0 4
37393: ST_TO_ADDR
// _y := y ;
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_VAR 0 5
37403: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 1
37411: PPUSH
37412: LD_VAR 0 14
37416: PPUSH
37417: CALL_OW 12
37421: ST_TO_ADDR
// case i of 1 :
37422: LD_VAR 0 3
37426: PUSH
37427: LD_INT 1
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37452
37435: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37436: LD_VAR 0 1
37440: PPUSH
37441: LD_VAR 0 10
37445: PPUSH
37446: CALL_OW 115
37450: GO 37513
37452: LD_INT 2
37454: DOUBLE
37455: EQUAL
37456: IFTRUE 37460
37458: GO 37482
37460: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37461: LD_VAR 0 1
37465: PPUSH
37466: LD_VAR 0 6
37470: PPUSH
37471: LD_VAR 0 7
37475: PPUSH
37476: CALL_OW 153
37480: GO 37513
37482: LD_INT 3
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37512
37490: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_VAR 0 6
37500: PPUSH
37501: LD_VAR 0 7
37505: PPUSH
37506: CALL_OW 154
37510: GO 37513
37512: POP
// end ;
37513: LD_VAR 0 2
37517: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37518: LD_INT 0
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
// if not unit or not building then
37526: LD_VAR 0 1
37530: NOT
37531: PUSH
37532: LD_VAR 0 2
37536: NOT
37537: OR
37538: IFFALSE 37542
// exit ;
37540: GO 37700
// x := GetX ( building ) ;
37542: LD_ADDR_VAR 0 5
37546: PUSH
37547: LD_VAR 0 2
37551: PPUSH
37552: CALL_OW 250
37556: ST_TO_ADDR
// y := GetY ( building ) ;
37557: LD_ADDR_VAR 0 6
37561: PUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: CALL_OW 251
37571: ST_TO_ADDR
// for i = 0 to 5 do
37572: LD_ADDR_VAR 0 4
37576: PUSH
37577: DOUBLE
37578: LD_INT 0
37580: DEC
37581: ST_TO_ADDR
37582: LD_INT 5
37584: PUSH
37585: FOR_TO
37586: IFFALSE 37698
// begin _x := ShiftX ( x , i , 3 ) ;
37588: LD_ADDR_VAR 0 7
37592: PUSH
37593: LD_VAR 0 5
37597: PPUSH
37598: LD_VAR 0 4
37602: PPUSH
37603: LD_INT 3
37605: PPUSH
37606: CALL_OW 272
37610: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37611: LD_ADDR_VAR 0 8
37615: PUSH
37616: LD_VAR 0 6
37620: PPUSH
37621: LD_VAR 0 4
37625: PPUSH
37626: LD_INT 3
37628: PPUSH
37629: CALL_OW 273
37633: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37634: LD_VAR 0 7
37638: PPUSH
37639: LD_VAR 0 8
37643: PPUSH
37644: CALL_OW 488
37648: NOT
37649: IFFALSE 37653
// continue ;
37651: GO 37585
// if HexInfo ( _x , _y ) = 0 then
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_VAR 0 8
37662: PPUSH
37663: CALL_OW 428
37667: PUSH
37668: LD_INT 0
37670: EQUAL
37671: IFFALSE 37696
// begin ComMoveXY ( unit , _x , _y ) ;
37673: LD_VAR 0 1
37677: PPUSH
37678: LD_VAR 0 7
37682: PPUSH
37683: LD_VAR 0 8
37687: PPUSH
37688: CALL_OW 111
// exit ;
37692: POP
37693: POP
37694: GO 37700
// end ; end ;
37696: GO 37585
37698: POP
37699: POP
// end ;
37700: LD_VAR 0 3
37704: RET
// export function ScanBase ( side , base_area ) ; begin
37705: LD_INT 0
37707: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37708: LD_ADDR_VAR 0 3
37712: PUSH
37713: LD_VAR 0 2
37717: PPUSH
37718: LD_INT 81
37720: PUSH
37721: LD_VAR 0 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PPUSH
37730: CALL_OW 70
37734: ST_TO_ADDR
// end ;
37735: LD_VAR 0 3
37739: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
// result := false ;
37746: LD_ADDR_VAR 0 2
37750: PUSH
37751: LD_INT 0
37753: ST_TO_ADDR
// side := GetSide ( unit ) ;
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: LD_VAR 0 1
37763: PPUSH
37764: CALL_OW 255
37768: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_VAR 0 1
37778: PPUSH
37779: CALL_OW 248
37783: ST_TO_ADDR
// case nat of 1 :
37784: LD_VAR 0 4
37788: PUSH
37789: LD_INT 1
37791: DOUBLE
37792: EQUAL
37793: IFTRUE 37797
37795: GO 37808
37797: POP
// tech := tech_lassight ; 2 :
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_INT 12
37805: ST_TO_ADDR
37806: GO 37847
37808: LD_INT 2
37810: DOUBLE
37811: EQUAL
37812: IFTRUE 37816
37814: GO 37827
37816: POP
// tech := tech_mortar ; 3 :
37817: LD_ADDR_VAR 0 5
37821: PUSH
37822: LD_INT 41
37824: ST_TO_ADDR
37825: GO 37847
37827: LD_INT 3
37829: DOUBLE
37830: EQUAL
37831: IFTRUE 37835
37833: GO 37846
37835: POP
// tech := tech_bazooka ; end ;
37836: LD_ADDR_VAR 0 5
37840: PUSH
37841: LD_INT 44
37843: ST_TO_ADDR
37844: GO 37847
37846: POP
// if Researched ( side , tech ) then
37847: LD_VAR 0 3
37851: PPUSH
37852: LD_VAR 0 5
37856: PPUSH
37857: CALL_OW 325
37861: IFFALSE 37888
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37863: LD_ADDR_VAR 0 2
37867: PUSH
37868: LD_INT 5
37870: PUSH
37871: LD_INT 8
37873: PUSH
37874: LD_INT 9
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: PUSH
37882: LD_VAR 0 4
37886: ARRAY
37887: ST_TO_ADDR
// end ;
37888: LD_VAR 0 2
37892: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37893: LD_INT 0
37895: PPUSH
37896: PPUSH
37897: PPUSH
// if not mines then
37898: LD_VAR 0 2
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 38051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37907: LD_ADDR_VAR 0 5
37911: PUSH
37912: LD_INT 81
37914: PUSH
37915: LD_VAR 0 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: PUSH
37927: LD_INT 21
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PPUSH
37945: CALL_OW 69
37949: ST_TO_ADDR
// for i in mines do
37950: LD_ADDR_VAR 0 4
37954: PUSH
37955: LD_VAR 0 2
37959: PUSH
37960: FOR_IN
37961: IFFALSE 38049
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37963: LD_VAR 0 4
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PPUSH
37972: LD_VAR 0 4
37976: PUSH
37977: LD_INT 2
37979: ARRAY
37980: PPUSH
37981: CALL_OW 458
37985: NOT
37986: IFFALSE 37990
// continue ;
37988: GO 37960
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37990: LD_VAR 0 4
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PPUSH
37999: LD_VAR 0 4
38003: PUSH
38004: LD_INT 2
38006: ARRAY
38007: PPUSH
38008: CALL_OW 428
38012: PUSH
38013: LD_VAR 0 5
38017: IN
38018: IFFALSE 38047
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38020: LD_VAR 0 4
38024: PUSH
38025: LD_INT 1
38027: ARRAY
38028: PPUSH
38029: LD_VAR 0 4
38033: PUSH
38034: LD_INT 2
38036: ARRAY
38037: PPUSH
38038: LD_VAR 0 1
38042: PPUSH
38043: CALL_OW 456
// end ;
38047: GO 37960
38049: POP
38050: POP
// end ;
38051: LD_VAR 0 3
38055: RET
// export function Count ( array ) ; var i ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
// result := 0 ;
38060: LD_ADDR_VAR 0 2
38064: PUSH
38065: LD_INT 0
38067: ST_TO_ADDR
// for i in array do
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: FOR_IN
38079: IFFALSE 38103
// if i then
38081: LD_VAR 0 3
38085: IFFALSE 38101
// result := result + 1 ;
38087: LD_ADDR_VAR 0 2
38091: PUSH
38092: LD_VAR 0 2
38096: PUSH
38097: LD_INT 1
38099: PLUS
38100: ST_TO_ADDR
38101: GO 38078
38103: POP
38104: POP
// end ;
38105: LD_VAR 0 2
38109: RET
// export function IsEmpty ( building ) ; begin
38110: LD_INT 0
38112: PPUSH
// if not building then
38113: LD_VAR 0 1
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38165
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38122: LD_ADDR_VAR 0 2
38126: PUSH
38127: LD_VAR 0 1
38131: PUSH
38132: LD_INT 22
38134: PUSH
38135: LD_VAR 0 1
38139: PPUSH
38140: CALL_OW 255
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 58
38151: PUSH
38152: EMPTY
38153: LIST
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PPUSH
38159: CALL_OW 69
38163: IN
38164: ST_TO_ADDR
// end ;
38165: LD_VAR 0 2
38169: RET
// export function IsNotFull ( building ) ; begin
38170: LD_INT 0
38172: PPUSH
// if not building then
38173: LD_VAR 0 1
38177: NOT
38178: IFFALSE 38182
// exit ;
38180: GO 38201
// result := UnitsInside ( building ) < 6 ;
38182: LD_ADDR_VAR 0 2
38186: PUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 313
38196: PUSH
38197: LD_INT 6
38199: LESS
38200: ST_TO_ADDR
// end ;
38201: LD_VAR 0 2
38205: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38206: LD_INT 0
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
// tmp := [ ] ;
38212: LD_ADDR_VAR 0 3
38216: PUSH
38217: EMPTY
38218: ST_TO_ADDR
// list := [ ] ;
38219: LD_ADDR_VAR 0 5
38223: PUSH
38224: EMPTY
38225: ST_TO_ADDR
// for i = 16 to 25 do
38226: LD_ADDR_VAR 0 4
38230: PUSH
38231: DOUBLE
38232: LD_INT 16
38234: DEC
38235: ST_TO_ADDR
38236: LD_INT 25
38238: PUSH
38239: FOR_TO
38240: IFFALSE 38313
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38242: LD_ADDR_VAR 0 3
38246: PUSH
38247: LD_VAR 0 3
38251: PUSH
38252: LD_INT 22
38254: PUSH
38255: LD_VAR 0 1
38259: PPUSH
38260: CALL_OW 255
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 91
38271: PUSH
38272: LD_VAR 0 1
38276: PUSH
38277: LD_INT 6
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 30
38287: PUSH
38288: LD_VAR 0 4
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: PUSH
38302: EMPTY
38303: LIST
38304: PPUSH
38305: CALL_OW 69
38309: ADD
38310: ST_TO_ADDR
38311: GO 38239
38313: POP
38314: POP
// for i = 1 to tmp do
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: DOUBLE
38321: LD_INT 1
38323: DEC
38324: ST_TO_ADDR
38325: LD_VAR 0 3
38329: PUSH
38330: FOR_TO
38331: IFFALSE 38419
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38333: LD_ADDR_VAR 0 5
38337: PUSH
38338: LD_VAR 0 5
38342: PUSH
38343: LD_VAR 0 3
38347: PUSH
38348: LD_VAR 0 4
38352: ARRAY
38353: PPUSH
38354: CALL_OW 266
38358: PUSH
38359: LD_VAR 0 3
38363: PUSH
38364: LD_VAR 0 4
38368: ARRAY
38369: PPUSH
38370: CALL_OW 250
38374: PUSH
38375: LD_VAR 0 3
38379: PUSH
38380: LD_VAR 0 4
38384: ARRAY
38385: PPUSH
38386: CALL_OW 251
38390: PUSH
38391: LD_VAR 0 3
38395: PUSH
38396: LD_VAR 0 4
38400: ARRAY
38401: PPUSH
38402: CALL_OW 254
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: ADD
38416: ST_TO_ADDR
38417: GO 38330
38419: POP
38420: POP
// result := list ;
38421: LD_ADDR_VAR 0 2
38425: PUSH
38426: LD_VAR 0 5
38430: ST_TO_ADDR
// end ;
38431: LD_VAR 0 2
38435: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38436: LD_INT 0
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
// if not factory then
38445: LD_VAR 0 1
38449: NOT
38450: IFFALSE 38454
// exit ;
38452: GO 39047
// if control = control_apeman then
38454: LD_VAR 0 4
38458: PUSH
38459: LD_INT 5
38461: EQUAL
38462: IFFALSE 38571
// begin tmp := UnitsInside ( factory ) ;
38464: LD_ADDR_VAR 0 8
38468: PUSH
38469: LD_VAR 0 1
38473: PPUSH
38474: CALL_OW 313
38478: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38479: LD_VAR 0 8
38483: PPUSH
38484: LD_INT 25
38486: PUSH
38487: LD_INT 12
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PPUSH
38494: CALL_OW 72
38498: NOT
38499: IFFALSE 38509
// control := control_manual ;
38501: LD_ADDR_VAR 0 4
38505: PUSH
38506: LD_INT 1
38508: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38509: LD_ADDR_VAR 0 8
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL 38206 0 1
38523: ST_TO_ADDR
// if tmp then
38524: LD_VAR 0 8
38528: IFFALSE 38571
// begin for i in tmp do
38530: LD_ADDR_VAR 0 7
38534: PUSH
38535: LD_VAR 0 8
38539: PUSH
38540: FOR_IN
38541: IFFALSE 38569
// if i [ 1 ] = b_ext_radio then
38543: LD_VAR 0 7
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PUSH
38552: LD_INT 22
38554: EQUAL
38555: IFFALSE 38567
// begin control := control_remote ;
38557: LD_ADDR_VAR 0 4
38561: PUSH
38562: LD_INT 2
38564: ST_TO_ADDR
// break ;
38565: GO 38569
// end ;
38567: GO 38540
38569: POP
38570: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38571: LD_VAR 0 1
38575: PPUSH
38576: LD_VAR 0 2
38580: PPUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: LD_VAR 0 4
38590: PPUSH
38591: LD_VAR 0 5
38595: PPUSH
38596: CALL_OW 448
38600: IFFALSE 38635
// begin result := [ chassis , engine , control , weapon ] ;
38602: LD_ADDR_VAR 0 6
38606: PUSH
38607: LD_VAR 0 2
38611: PUSH
38612: LD_VAR 0 3
38616: PUSH
38617: LD_VAR 0 4
38621: PUSH
38622: LD_VAR 0 5
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// exit ;
38633: GO 39047
// end ; _chassis := AvailableChassisList ( factory ) ;
38635: LD_ADDR_VAR 0 9
38639: PUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 475
38649: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38650: LD_ADDR_VAR 0 11
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 476
38664: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38665: LD_ADDR_VAR 0 12
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 477
38679: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38680: LD_ADDR_VAR 0 10
38684: PUSH
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL_OW 478
38694: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38695: LD_VAR 0 9
38699: NOT
38700: PUSH
38701: LD_VAR 0 11
38705: NOT
38706: OR
38707: PUSH
38708: LD_VAR 0 12
38712: NOT
38713: OR
38714: PUSH
38715: LD_VAR 0 10
38719: NOT
38720: OR
38721: IFFALSE 38756
// begin result := [ chassis , engine , control , weapon ] ;
38723: LD_ADDR_VAR 0 6
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_VAR 0 3
38737: PUSH
38738: LD_VAR 0 4
38742: PUSH
38743: LD_VAR 0 5
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
// exit ;
38754: GO 39047
// end ; if not chassis in _chassis then
38756: LD_VAR 0 2
38760: PUSH
38761: LD_VAR 0 9
38765: IN
38766: NOT
38767: IFFALSE 38793
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38769: LD_ADDR_VAR 0 2
38773: PUSH
38774: LD_VAR 0 9
38778: PUSH
38779: LD_INT 1
38781: PPUSH
38782: LD_VAR 0 9
38786: PPUSH
38787: CALL_OW 12
38791: ARRAY
38792: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38793: LD_VAR 0 2
38797: PPUSH
38798: LD_VAR 0 3
38802: PPUSH
38803: CALL 39052 0 2
38807: NOT
38808: IFFALSE 38867
// repeat engine := _engine [ 1 ] ;
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_VAR 0 11
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38824: LD_ADDR_VAR 0 11
38828: PUSH
38829: LD_VAR 0 11
38833: PPUSH
38834: LD_INT 1
38836: PPUSH
38837: CALL_OW 3
38841: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38842: LD_VAR 0 2
38846: PPUSH
38847: LD_VAR 0 3
38851: PPUSH
38852: CALL 39052 0 2
38856: PUSH
38857: LD_VAR 0 11
38861: PUSH
38862: EMPTY
38863: EQUAL
38864: OR
38865: IFFALSE 38810
// if not control in _control then
38867: LD_VAR 0 4
38871: PUSH
38872: LD_VAR 0 12
38876: IN
38877: NOT
38878: IFFALSE 38904
// control := _control [ rand ( 1 , _control ) ] ;
38880: LD_ADDR_VAR 0 4
38884: PUSH
38885: LD_VAR 0 12
38889: PUSH
38890: LD_INT 1
38892: PPUSH
38893: LD_VAR 0 12
38897: PPUSH
38898: CALL_OW 12
38902: ARRAY
38903: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38904: LD_VAR 0 2
38908: PPUSH
38909: LD_VAR 0 5
38913: PPUSH
38914: CALL 39272 0 2
38918: NOT
38919: IFFALSE 38978
// repeat weapon := _weapon [ 1 ] ;
38921: LD_ADDR_VAR 0 5
38925: PUSH
38926: LD_VAR 0 10
38930: PUSH
38931: LD_INT 1
38933: ARRAY
38934: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38935: LD_ADDR_VAR 0 10
38939: PUSH
38940: LD_VAR 0 10
38944: PPUSH
38945: LD_INT 1
38947: PPUSH
38948: CALL_OW 3
38952: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 5
38962: PPUSH
38963: CALL 39272 0 2
38967: PUSH
38968: LD_VAR 0 10
38972: PUSH
38973: EMPTY
38974: EQUAL
38975: OR
38976: IFFALSE 38921
// result := [ ] ;
38978: LD_ADDR_VAR 0 6
38982: PUSH
38983: EMPTY
38984: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38985: LD_VAR 0 1
38989: PPUSH
38990: LD_VAR 0 2
38994: PPUSH
38995: LD_VAR 0 3
38999: PPUSH
39000: LD_VAR 0 4
39004: PPUSH
39005: LD_VAR 0 5
39009: PPUSH
39010: CALL_OW 448
39014: IFFALSE 39047
// result := [ chassis , engine , control , weapon ] ;
39016: LD_ADDR_VAR 0 6
39020: PUSH
39021: LD_VAR 0 2
39025: PUSH
39026: LD_VAR 0 3
39030: PUSH
39031: LD_VAR 0 4
39035: PUSH
39036: LD_VAR 0 5
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// end ;
39047: LD_VAR 0 6
39051: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39052: LD_INT 0
39054: PPUSH
// if not chassis or not engine then
39055: LD_VAR 0 1
39059: NOT
39060: PUSH
39061: LD_VAR 0 2
39065: NOT
39066: OR
39067: IFFALSE 39071
// exit ;
39069: GO 39267
// case engine of engine_solar :
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 2
39078: DOUBLE
39079: EQUAL
39080: IFTRUE 39084
39082: GO 39122
39084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39085: LD_ADDR_VAR 0 3
39089: PUSH
39090: LD_INT 11
39092: PUSH
39093: LD_INT 12
39095: PUSH
39096: LD_INT 13
39098: PUSH
39099: LD_INT 14
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: ST_TO_ADDR
39120: GO 39251
39122: LD_INT 1
39124: DOUBLE
39125: EQUAL
39126: IFTRUE 39130
39128: GO 39192
39130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39131: LD_ADDR_VAR 0 3
39135: PUSH
39136: LD_INT 11
39138: PUSH
39139: LD_INT 12
39141: PUSH
39142: LD_INT 13
39144: PUSH
39145: LD_INT 14
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: LD_INT 5
39162: PUSH
39163: LD_INT 21
39165: PUSH
39166: LD_INT 23
39168: PUSH
39169: LD_INT 22
39171: PUSH
39172: LD_INT 24
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: ST_TO_ADDR
39190: GO 39251
39192: LD_INT 3
39194: DOUBLE
39195: EQUAL
39196: IFTRUE 39200
39198: GO 39250
39200: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 13
39208: PUSH
39209: LD_INT 14
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: LD_INT 5
39223: PUSH
39224: LD_INT 21
39226: PUSH
39227: LD_INT 22
39229: PUSH
39230: LD_INT 23
39232: PUSH
39233: LD_INT 24
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: ST_TO_ADDR
39248: GO 39251
39250: POP
// result := ( chassis in result ) ;
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_VAR 0 3
39265: IN
39266: ST_TO_ADDR
// end ;
39267: LD_VAR 0 3
39271: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39272: LD_INT 0
39274: PPUSH
// if not chassis or not weapon then
39275: LD_VAR 0 1
39279: NOT
39280: PUSH
39281: LD_VAR 0 2
39285: NOT
39286: OR
39287: IFFALSE 39291
// exit ;
39289: GO 40317
// case weapon of us_machine_gun :
39291: LD_VAR 0 2
39295: PUSH
39296: LD_INT 2
39298: DOUBLE
39299: EQUAL
39300: IFTRUE 39304
39302: GO 39334
39304: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39305: LD_ADDR_VAR 0 3
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 3
39318: PUSH
39319: LD_INT 4
39321: PUSH
39322: LD_INT 5
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
39332: GO 40301
39334: LD_INT 3
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39372
39342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 3
39356: PUSH
39357: LD_INT 4
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
39370: GO 40301
39372: LD_INT 11
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39410
39380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: LD_INT 4
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
39408: GO 40301
39410: LD_INT 4
39412: DOUBLE
39413: EQUAL
39414: IFTRUE 39418
39416: GO 39444
39418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 4
39432: PUSH
39433: LD_INT 5
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
39442: GO 40301
39444: LD_INT 5
39446: DOUBLE
39447: EQUAL
39448: IFTRUE 39452
39450: GO 39478
39452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: LD_INT 4
39466: PUSH
39467: LD_INT 5
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
39476: GO 40301
39478: LD_INT 9
39480: DOUBLE
39481: EQUAL
39482: IFTRUE 39486
39484: GO 39512
39486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: LD_INT 4
39500: PUSH
39501: LD_INT 5
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
39510: GO 40301
39512: LD_INT 7
39514: DOUBLE
39515: EQUAL
39516: IFTRUE 39520
39518: GO 39546
39520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 4
39534: PUSH
39535: LD_INT 5
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
39544: GO 40301
39546: LD_INT 12
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39580
39554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: LD_INT 4
39568: PUSH
39569: LD_INT 5
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
39578: GO 40301
39580: LD_INT 13
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39614
39588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 4
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: ST_TO_ADDR
39612: GO 40301
39614: LD_INT 14
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39640
39622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 4
39630: PUSH
39631: LD_INT 5
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: ST_TO_ADDR
39638: GO 40301
39640: LD_INT 6
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39666
39648: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_INT 4
39656: PUSH
39657: LD_INT 5
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: ST_TO_ADDR
39664: GO 40301
39666: LD_INT 10
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39692
39674: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_INT 4
39682: PUSH
39683: LD_INT 5
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: ST_TO_ADDR
39690: GO 40301
39692: LD_INT 22
39694: DOUBLE
39695: EQUAL
39696: IFTRUE 39700
39698: GO 39726
39700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_INT 11
39708: PUSH
39709: LD_INT 12
39711: PUSH
39712: LD_INT 13
39714: PUSH
39715: LD_INT 14
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
39724: GO 40301
39726: LD_INT 23
39728: DOUBLE
39729: EQUAL
39730: IFTRUE 39734
39732: GO 39760
39734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_INT 11
39742: PUSH
39743: LD_INT 12
39745: PUSH
39746: LD_INT 13
39748: PUSH
39749: LD_INT 14
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
39758: GO 40301
39760: LD_INT 24
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39794
39768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 11
39776: PUSH
39777: LD_INT 12
39779: PUSH
39780: LD_INT 13
39782: PUSH
39783: LD_INT 14
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
39792: GO 40301
39794: LD_INT 30
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39828
39802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 11
39810: PUSH
39811: LD_INT 12
39813: PUSH
39814: LD_INT 13
39816: PUSH
39817: LD_INT 14
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 40301
39828: LD_INT 25
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39854
39836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 13
39844: PUSH
39845: LD_INT 14
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: ST_TO_ADDR
39852: GO 40301
39854: LD_INT 27
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39862
39860: GO 39880
39862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_INT 13
39870: PUSH
39871: LD_INT 14
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: ST_TO_ADDR
39878: GO 40301
39880: LD_INT 28
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39888
39886: GO 39906
39888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 13
39896: PUSH
39897: LD_INT 14
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: ST_TO_ADDR
39904: GO 40301
39906: LD_INT 29
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39914
39912: GO 39932
39914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_INT 13
39922: PUSH
39923: LD_INT 14
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: ST_TO_ADDR
39930: GO 40301
39932: LD_INT 31
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39940
39938: GO 39958
39940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_INT 13
39948: PUSH
39949: LD_INT 14
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: ST_TO_ADDR
39956: GO 40301
39958: LD_INT 26
39960: DOUBLE
39961: EQUAL
39962: IFTRUE 39966
39964: GO 39984
39966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 13
39974: PUSH
39975: LD_INT 14
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: ST_TO_ADDR
39982: GO 40301
39984: LD_INT 42
39986: DOUBLE
39987: EQUAL
39988: IFTRUE 39992
39990: GO 40018
39992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_INT 21
40000: PUSH
40001: LD_INT 22
40003: PUSH
40004: LD_INT 23
40006: PUSH
40007: LD_INT 24
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: ST_TO_ADDR
40016: GO 40301
40018: LD_INT 43
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40052
40026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: LD_INT 21
40034: PUSH
40035: LD_INT 22
40037: PUSH
40038: LD_INT 23
40040: PUSH
40041: LD_INT 24
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: ST_TO_ADDR
40050: GO 40301
40052: LD_INT 44
40054: DOUBLE
40055: EQUAL
40056: IFTRUE 40060
40058: GO 40086
40060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40061: LD_ADDR_VAR 0 3
40065: PUSH
40066: LD_INT 21
40068: PUSH
40069: LD_INT 22
40071: PUSH
40072: LD_INT 23
40074: PUSH
40075: LD_INT 24
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
40084: GO 40301
40086: LD_INT 45
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40120
40094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_INT 21
40102: PUSH
40103: LD_INT 22
40105: PUSH
40106: LD_INT 23
40108: PUSH
40109: LD_INT 24
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
40118: GO 40301
40120: LD_INT 49
40122: DOUBLE
40123: EQUAL
40124: IFTRUE 40128
40126: GO 40154
40128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_INT 21
40136: PUSH
40137: LD_INT 22
40139: PUSH
40140: LD_INT 23
40142: PUSH
40143: LD_INT 24
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: ST_TO_ADDR
40152: GO 40301
40154: LD_INT 51
40156: DOUBLE
40157: EQUAL
40158: IFTRUE 40162
40160: GO 40188
40162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_INT 21
40170: PUSH
40171: LD_INT 22
40173: PUSH
40174: LD_INT 23
40176: PUSH
40177: LD_INT 24
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: ST_TO_ADDR
40186: GO 40301
40188: LD_INT 52
40190: DOUBLE
40191: EQUAL
40192: IFTRUE 40196
40194: GO 40222
40196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 21
40204: PUSH
40205: LD_INT 22
40207: PUSH
40208: LD_INT 23
40210: PUSH
40211: LD_INT 24
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
40220: GO 40301
40222: LD_INT 53
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40248
40230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 23
40238: PUSH
40239: LD_INT 24
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: ST_TO_ADDR
40246: GO 40301
40248: LD_INT 46
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40274
40256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 23
40264: PUSH
40265: LD_INT 24
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: ST_TO_ADDR
40272: GO 40301
40274: LD_INT 47
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40300
40282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: LD_INT 23
40290: PUSH
40291: LD_INT 24
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: ST_TO_ADDR
40298: GO 40301
40300: POP
// result := ( chassis in result ) ;
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_VAR 0 1
40310: PUSH
40311: LD_VAR 0 3
40315: IN
40316: ST_TO_ADDR
// end ;
40317: LD_VAR 0 3
40321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
// result := array ;
40331: LD_ADDR_VAR 0 5
40335: PUSH
40336: LD_VAR 0 1
40340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40341: LD_VAR 0 1
40345: NOT
40346: PUSH
40347: LD_VAR 0 2
40351: NOT
40352: OR
40353: PUSH
40354: LD_VAR 0 3
40358: NOT
40359: OR
40360: PUSH
40361: LD_VAR 0 2
40365: PUSH
40366: LD_VAR 0 1
40370: GREATER
40371: OR
40372: PUSH
40373: LD_VAR 0 3
40377: PUSH
40378: LD_VAR 0 1
40382: GREATER
40383: OR
40384: IFFALSE 40388
// exit ;
40386: GO 40684
// if direction then
40388: LD_VAR 0 4
40392: IFFALSE 40456
// begin d := 1 ;
40394: LD_ADDR_VAR 0 9
40398: PUSH
40399: LD_INT 1
40401: ST_TO_ADDR
// if i_from > i_to then
40402: LD_VAR 0 2
40406: PUSH
40407: LD_VAR 0 3
40411: GREATER
40412: IFFALSE 40438
// length := ( array - i_from ) + i_to else
40414: LD_ADDR_VAR 0 11
40418: PUSH
40419: LD_VAR 0 1
40423: PUSH
40424: LD_VAR 0 2
40428: MINUS
40429: PUSH
40430: LD_VAR 0 3
40434: PLUS
40435: ST_TO_ADDR
40436: GO 40454
// length := i_to - i_from ;
40438: LD_ADDR_VAR 0 11
40442: PUSH
40443: LD_VAR 0 3
40447: PUSH
40448: LD_VAR 0 2
40452: MINUS
40453: ST_TO_ADDR
// end else
40454: GO 40517
// begin d := - 1 ;
40456: LD_ADDR_VAR 0 9
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: ST_TO_ADDR
// if i_from > i_to then
40465: LD_VAR 0 2
40469: PUSH
40470: LD_VAR 0 3
40474: GREATER
40475: IFFALSE 40495
// length := i_from - i_to else
40477: LD_ADDR_VAR 0 11
40481: PUSH
40482: LD_VAR 0 2
40486: PUSH
40487: LD_VAR 0 3
40491: MINUS
40492: ST_TO_ADDR
40493: GO 40517
// length := ( array - i_to ) + i_from ;
40495: LD_ADDR_VAR 0 11
40499: PUSH
40500: LD_VAR 0 1
40504: PUSH
40505: LD_VAR 0 3
40509: MINUS
40510: PUSH
40511: LD_VAR 0 2
40515: PLUS
40516: ST_TO_ADDR
// end ; if not length then
40517: LD_VAR 0 11
40521: NOT
40522: IFFALSE 40526
// exit ;
40524: GO 40684
// tmp := array ;
40526: LD_ADDR_VAR 0 10
40530: PUSH
40531: LD_VAR 0 1
40535: ST_TO_ADDR
// for i = 1 to length do
40536: LD_ADDR_VAR 0 6
40540: PUSH
40541: DOUBLE
40542: LD_INT 1
40544: DEC
40545: ST_TO_ADDR
40546: LD_VAR 0 11
40550: PUSH
40551: FOR_TO
40552: IFFALSE 40672
// begin for j = 1 to array do
40554: LD_ADDR_VAR 0 7
40558: PUSH
40559: DOUBLE
40560: LD_INT 1
40562: DEC
40563: ST_TO_ADDR
40564: LD_VAR 0 1
40568: PUSH
40569: FOR_TO
40570: IFFALSE 40658
// begin k := j + d ;
40572: LD_ADDR_VAR 0 8
40576: PUSH
40577: LD_VAR 0 7
40581: PUSH
40582: LD_VAR 0 9
40586: PLUS
40587: ST_TO_ADDR
// if k > array then
40588: LD_VAR 0 8
40592: PUSH
40593: LD_VAR 0 1
40597: GREATER
40598: IFFALSE 40608
// k := 1 ;
40600: LD_ADDR_VAR 0 8
40604: PUSH
40605: LD_INT 1
40607: ST_TO_ADDR
// if not k then
40608: LD_VAR 0 8
40612: NOT
40613: IFFALSE 40625
// k := array ;
40615: LD_ADDR_VAR 0 8
40619: PUSH
40620: LD_VAR 0 1
40624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40625: LD_ADDR_VAR 0 10
40629: PUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: LD_VAR 0 8
40639: PPUSH
40640: LD_VAR 0 1
40644: PUSH
40645: LD_VAR 0 7
40649: ARRAY
40650: PPUSH
40651: CALL_OW 1
40655: ST_TO_ADDR
// end ;
40656: GO 40569
40658: POP
40659: POP
// array := tmp ;
40660: LD_ADDR_VAR 0 1
40664: PUSH
40665: LD_VAR 0 10
40669: ST_TO_ADDR
// end ;
40670: GO 40551
40672: POP
40673: POP
// result := array ;
40674: LD_ADDR_VAR 0 5
40678: PUSH
40679: LD_VAR 0 1
40683: ST_TO_ADDR
// end ;
40684: LD_VAR 0 5
40688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40689: LD_INT 0
40691: PPUSH
40692: PPUSH
// result := 0 ;
40693: LD_ADDR_VAR 0 3
40697: PUSH
40698: LD_INT 0
40700: ST_TO_ADDR
// if not array or not value in array then
40701: LD_VAR 0 1
40705: NOT
40706: PUSH
40707: LD_VAR 0 2
40711: PUSH
40712: LD_VAR 0 1
40716: IN
40717: NOT
40718: OR
40719: IFFALSE 40723
// exit ;
40721: GO 40777
// for i = 1 to array do
40723: LD_ADDR_VAR 0 4
40727: PUSH
40728: DOUBLE
40729: LD_INT 1
40731: DEC
40732: ST_TO_ADDR
40733: LD_VAR 0 1
40737: PUSH
40738: FOR_TO
40739: IFFALSE 40775
// if value = array [ i ] then
40741: LD_VAR 0 2
40745: PUSH
40746: LD_VAR 0 1
40750: PUSH
40751: LD_VAR 0 4
40755: ARRAY
40756: EQUAL
40757: IFFALSE 40773
// begin result := i ;
40759: LD_ADDR_VAR 0 3
40763: PUSH
40764: LD_VAR 0 4
40768: ST_TO_ADDR
// exit ;
40769: POP
40770: POP
40771: GO 40777
// end ;
40773: GO 40738
40775: POP
40776: POP
// end ;
40777: LD_VAR 0 3
40781: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40782: LD_INT 0
40784: PPUSH
// vc_chassis := chassis ;
40785: LD_ADDR_OWVAR 37
40789: PUSH
40790: LD_VAR 0 1
40794: ST_TO_ADDR
// vc_engine := engine ;
40795: LD_ADDR_OWVAR 39
40799: PUSH
40800: LD_VAR 0 2
40804: ST_TO_ADDR
// vc_control := control ;
40805: LD_ADDR_OWVAR 38
40809: PUSH
40810: LD_VAR 0 3
40814: ST_TO_ADDR
// vc_weapon := weapon ;
40815: LD_ADDR_OWVAR 40
40819: PUSH
40820: LD_VAR 0 4
40824: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40825: LD_ADDR_OWVAR 41
40829: PUSH
40830: LD_VAR 0 5
40834: ST_TO_ADDR
// end ;
40835: LD_VAR 0 6
40839: RET
// export function WantPlant ( unit ) ; var task ; begin
40840: LD_INT 0
40842: PPUSH
40843: PPUSH
// result := false ;
40844: LD_ADDR_VAR 0 2
40848: PUSH
40849: LD_INT 0
40851: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 437
40866: ST_TO_ADDR
// if task then
40867: LD_VAR 0 3
40871: IFFALSE 40899
// if task [ 1 ] [ 1 ] = p then
40873: LD_VAR 0 3
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: PUSH
40882: LD_INT 1
40884: ARRAY
40885: PUSH
40886: LD_STRING p
40888: EQUAL
40889: IFFALSE 40899
// result := true ;
40891: LD_ADDR_VAR 0 2
40895: PUSH
40896: LD_INT 1
40898: ST_TO_ADDR
// end ;
40899: LD_VAR 0 2
40903: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40904: LD_INT 0
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
// if pos < 1 then
40910: LD_VAR 0 2
40914: PUSH
40915: LD_INT 1
40917: LESS
40918: IFFALSE 40922
// exit ;
40920: GO 41225
// if pos = 1 then
40922: LD_VAR 0 2
40926: PUSH
40927: LD_INT 1
40929: EQUAL
40930: IFFALSE 40963
// result := Replace ( arr , pos [ 1 ] , value ) else
40932: LD_ADDR_VAR 0 4
40936: PUSH
40937: LD_VAR 0 1
40941: PPUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 3
40955: PPUSH
40956: CALL_OW 1
40960: ST_TO_ADDR
40961: GO 41225
// begin tmp := arr ;
40963: LD_ADDR_VAR 0 6
40967: PUSH
40968: LD_VAR 0 1
40972: ST_TO_ADDR
// s_arr := [ tmp ] ;
40973: LD_ADDR_VAR 0 7
40977: PUSH
40978: LD_VAR 0 6
40982: PUSH
40983: EMPTY
40984: LIST
40985: ST_TO_ADDR
// for i = 1 to pos - 1 do
40986: LD_ADDR_VAR 0 5
40990: PUSH
40991: DOUBLE
40992: LD_INT 1
40994: DEC
40995: ST_TO_ADDR
40996: LD_VAR 0 2
41000: PUSH
41001: LD_INT 1
41003: MINUS
41004: PUSH
41005: FOR_TO
41006: IFFALSE 41051
// begin tmp := tmp [ pos [ i ] ] ;
41008: LD_ADDR_VAR 0 6
41012: PUSH
41013: LD_VAR 0 6
41017: PUSH
41018: LD_VAR 0 2
41022: PUSH
41023: LD_VAR 0 5
41027: ARRAY
41028: ARRAY
41029: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41030: LD_ADDR_VAR 0 7
41034: PUSH
41035: LD_VAR 0 7
41039: PUSH
41040: LD_VAR 0 6
41044: PUSH
41045: EMPTY
41046: LIST
41047: ADD
41048: ST_TO_ADDR
// end ;
41049: GO 41005
41051: POP
41052: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41053: LD_ADDR_VAR 0 6
41057: PUSH
41058: LD_VAR 0 6
41062: PPUSH
41063: LD_VAR 0 2
41067: PUSH
41068: LD_VAR 0 2
41072: ARRAY
41073: PPUSH
41074: LD_VAR 0 3
41078: PPUSH
41079: CALL_OW 1
41083: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41084: LD_ADDR_VAR 0 7
41088: PUSH
41089: LD_VAR 0 7
41093: PPUSH
41094: LD_VAR 0 7
41098: PPUSH
41099: LD_VAR 0 6
41103: PPUSH
41104: CALL_OW 1
41108: ST_TO_ADDR
// for i = s_arr downto 2 do
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: DOUBLE
41115: LD_VAR 0 7
41119: INC
41120: ST_TO_ADDR
41121: LD_INT 2
41123: PUSH
41124: FOR_DOWNTO
41125: IFFALSE 41209
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41127: LD_ADDR_VAR 0 6
41131: PUSH
41132: LD_VAR 0 7
41136: PUSH
41137: LD_VAR 0 5
41141: PUSH
41142: LD_INT 1
41144: MINUS
41145: ARRAY
41146: PPUSH
41147: LD_VAR 0 2
41151: PUSH
41152: LD_VAR 0 5
41156: PUSH
41157: LD_INT 1
41159: MINUS
41160: ARRAY
41161: PPUSH
41162: LD_VAR 0 7
41166: PUSH
41167: LD_VAR 0 5
41171: ARRAY
41172: PPUSH
41173: CALL_OW 1
41177: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41178: LD_ADDR_VAR 0 7
41182: PUSH
41183: LD_VAR 0 7
41187: PPUSH
41188: LD_VAR 0 5
41192: PUSH
41193: LD_INT 1
41195: MINUS
41196: PPUSH
41197: LD_VAR 0 6
41201: PPUSH
41202: CALL_OW 1
41206: ST_TO_ADDR
// end ;
41207: GO 41124
41209: POP
41210: POP
// result := s_arr [ 1 ] ;
41211: LD_ADDR_VAR 0 4
41215: PUSH
41216: LD_VAR 0 7
41220: PUSH
41221: LD_INT 1
41223: ARRAY
41224: ST_TO_ADDR
// end ; end ;
41225: LD_VAR 0 4
41229: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
// if not list then
41234: LD_VAR 0 1
41238: NOT
41239: IFFALSE 41243
// exit ;
41241: GO 41334
// i := list [ pos1 ] ;
41243: LD_ADDR_VAR 0 5
41247: PUSH
41248: LD_VAR 0 1
41252: PUSH
41253: LD_VAR 0 2
41257: ARRAY
41258: ST_TO_ADDR
// if not i then
41259: LD_VAR 0 5
41263: NOT
41264: IFFALSE 41268
// exit ;
41266: GO 41334
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41268: LD_ADDR_VAR 0 1
41272: PUSH
41273: LD_VAR 0 1
41277: PPUSH
41278: LD_VAR 0 2
41282: PPUSH
41283: LD_VAR 0 1
41287: PUSH
41288: LD_VAR 0 3
41292: ARRAY
41293: PPUSH
41294: CALL_OW 1
41298: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41299: LD_ADDR_VAR 0 1
41303: PUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: LD_VAR 0 3
41313: PPUSH
41314: LD_VAR 0 5
41318: PPUSH
41319: CALL_OW 1
41323: ST_TO_ADDR
// result := list ;
41324: LD_ADDR_VAR 0 4
41328: PUSH
41329: LD_VAR 0 1
41333: ST_TO_ADDR
// end ;
41334: LD_VAR 0 4
41338: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41339: LD_INT 0
41341: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41342: LD_ADDR_VAR 0 5
41346: PUSH
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 250
41356: PPUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: CALL_OW 251
41366: PPUSH
41367: LD_VAR 0 2
41371: PPUSH
41372: LD_VAR 0 3
41376: PPUSH
41377: LD_VAR 0 4
41381: PPUSH
41382: CALL 41392 0 5
41386: ST_TO_ADDR
// end ;
41387: LD_VAR 0 5
41391: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41392: LD_INT 0
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
// if not list then
41398: LD_VAR 0 3
41402: NOT
41403: IFFALSE 41407
// exit ;
41405: GO 41795
// result := [ ] ;
41407: LD_ADDR_VAR 0 6
41411: PUSH
41412: EMPTY
41413: ST_TO_ADDR
// for i in list do
41414: LD_ADDR_VAR 0 7
41418: PUSH
41419: LD_VAR 0 3
41423: PUSH
41424: FOR_IN
41425: IFFALSE 41627
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41427: LD_ADDR_VAR 0 9
41431: PUSH
41432: LD_VAR 0 7
41436: PPUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: CALL_OW 297
41451: ST_TO_ADDR
// if not result then
41452: LD_VAR 0 6
41456: NOT
41457: IFFALSE 41483
// result := [ [ i , tmp ] ] else
41459: LD_ADDR_VAR 0 6
41463: PUSH
41464: LD_VAR 0 7
41468: PUSH
41469: LD_VAR 0 9
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: ST_TO_ADDR
41481: GO 41625
// begin if result [ result ] [ 2 ] < tmp then
41483: LD_VAR 0 6
41487: PUSH
41488: LD_VAR 0 6
41492: ARRAY
41493: PUSH
41494: LD_INT 2
41496: ARRAY
41497: PUSH
41498: LD_VAR 0 9
41502: LESS
41503: IFFALSE 41545
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41505: LD_ADDR_VAR 0 6
41509: PUSH
41510: LD_VAR 0 6
41514: PPUSH
41515: LD_VAR 0 6
41519: PUSH
41520: LD_INT 1
41522: PLUS
41523: PPUSH
41524: LD_VAR 0 7
41528: PUSH
41529: LD_VAR 0 9
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PPUSH
41538: CALL_OW 2
41542: ST_TO_ADDR
41543: GO 41625
// for j = 1 to result do
41545: LD_ADDR_VAR 0 8
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_VAR 0 6
41559: PUSH
41560: FOR_TO
41561: IFFALSE 41623
// begin if tmp < result [ j ] [ 2 ] then
41563: LD_VAR 0 9
41567: PUSH
41568: LD_VAR 0 6
41572: PUSH
41573: LD_VAR 0 8
41577: ARRAY
41578: PUSH
41579: LD_INT 2
41581: ARRAY
41582: LESS
41583: IFFALSE 41621
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41585: LD_ADDR_VAR 0 6
41589: PUSH
41590: LD_VAR 0 6
41594: PPUSH
41595: LD_VAR 0 8
41599: PPUSH
41600: LD_VAR 0 7
41604: PUSH
41605: LD_VAR 0 9
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PPUSH
41614: CALL_OW 2
41618: ST_TO_ADDR
// break ;
41619: GO 41623
// end ; end ;
41621: GO 41560
41623: POP
41624: POP
// end ; end ;
41625: GO 41424
41627: POP
41628: POP
// if result and not asc then
41629: LD_VAR 0 6
41633: PUSH
41634: LD_VAR 0 4
41638: NOT
41639: AND
41640: IFFALSE 41715
// begin tmp := result ;
41642: LD_ADDR_VAR 0 9
41646: PUSH
41647: LD_VAR 0 6
41651: ST_TO_ADDR
// for i = tmp downto 1 do
41652: LD_ADDR_VAR 0 7
41656: PUSH
41657: DOUBLE
41658: LD_VAR 0 9
41662: INC
41663: ST_TO_ADDR
41664: LD_INT 1
41666: PUSH
41667: FOR_DOWNTO
41668: IFFALSE 41713
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41670: LD_ADDR_VAR 0 6
41674: PUSH
41675: LD_VAR 0 6
41679: PPUSH
41680: LD_VAR 0 9
41684: PUSH
41685: LD_VAR 0 7
41689: MINUS
41690: PUSH
41691: LD_INT 1
41693: PLUS
41694: PPUSH
41695: LD_VAR 0 9
41699: PUSH
41700: LD_VAR 0 7
41704: ARRAY
41705: PPUSH
41706: CALL_OW 1
41710: ST_TO_ADDR
41711: GO 41667
41713: POP
41714: POP
// end ; tmp := [ ] ;
41715: LD_ADDR_VAR 0 9
41719: PUSH
41720: EMPTY
41721: ST_TO_ADDR
// if mode then
41722: LD_VAR 0 5
41726: IFFALSE 41795
// begin for i = 1 to result do
41728: LD_ADDR_VAR 0 7
41732: PUSH
41733: DOUBLE
41734: LD_INT 1
41736: DEC
41737: ST_TO_ADDR
41738: LD_VAR 0 6
41742: PUSH
41743: FOR_TO
41744: IFFALSE 41783
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41746: LD_ADDR_VAR 0 9
41750: PUSH
41751: LD_VAR 0 9
41755: PPUSH
41756: LD_VAR 0 7
41760: PPUSH
41761: LD_VAR 0 6
41765: PUSH
41766: LD_VAR 0 7
41770: ARRAY
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PPUSH
41776: CALL_OW 1
41780: ST_TO_ADDR
41781: GO 41743
41783: POP
41784: POP
// result := tmp ;
41785: LD_ADDR_VAR 0 6
41789: PUSH
41790: LD_VAR 0 9
41794: ST_TO_ADDR
// end ; end ;
41795: LD_VAR 0 6
41799: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41800: LD_INT 0
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41808: LD_ADDR_VAR 0 5
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: ST_TO_ADDR
// if not x or not y then
41830: LD_VAR 0 2
41834: NOT
41835: PUSH
41836: LD_VAR 0 3
41840: NOT
41841: OR
41842: IFFALSE 41846
// exit ;
41844: GO 43492
// if not range then
41846: LD_VAR 0 4
41850: NOT
41851: IFFALSE 41861
// range := 10 ;
41853: LD_ADDR_VAR 0 4
41857: PUSH
41858: LD_INT 10
41860: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41861: LD_ADDR_VAR 0 8
41865: PUSH
41866: LD_INT 81
41868: PUSH
41869: LD_VAR 0 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 92
41880: PUSH
41881: LD_VAR 0 2
41885: PUSH
41886: LD_VAR 0 3
41890: PUSH
41891: LD_VAR 0 4
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: LD_INT 21
41907: PUSH
41908: LD_INT 3
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: PPUSH
41924: CALL_OW 69
41928: ST_TO_ADDR
// if not tmp then
41929: LD_VAR 0 8
41933: NOT
41934: IFFALSE 41938
// exit ;
41936: GO 43492
// for i in tmp do
41938: LD_ADDR_VAR 0 6
41942: PUSH
41943: LD_VAR 0 8
41947: PUSH
41948: FOR_IN
41949: IFFALSE 43467
// begin points := [ 0 , 0 , 0 ] ;
41951: LD_ADDR_VAR 0 9
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: ST_TO_ADDR
// bpoints := 1 ;
41970: LD_ADDR_VAR 0 10
41974: PUSH
41975: LD_INT 1
41977: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41978: LD_VAR 0 6
41982: PPUSH
41983: CALL_OW 247
41987: PUSH
41988: LD_INT 1
41990: DOUBLE
41991: EQUAL
41992: IFTRUE 41996
41994: GO 42574
41996: POP
// begin if GetClass ( i ) = 1 then
41997: LD_VAR 0 6
42001: PPUSH
42002: CALL_OW 257
42006: PUSH
42007: LD_INT 1
42009: EQUAL
42010: IFFALSE 42031
// points := [ 10 , 5 , 3 ] ;
42012: LD_ADDR_VAR 0 9
42016: PUSH
42017: LD_INT 10
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42031: LD_VAR 0 6
42035: PPUSH
42036: CALL_OW 257
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: LD_INT 4
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: IN
42055: IFFALSE 42076
// points := [ 3 , 2 , 1 ] ;
42057: LD_ADDR_VAR 0 9
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42076: LD_VAR 0 6
42080: PPUSH
42081: CALL_OW 257
42085: PUSH
42086: LD_INT 5
42088: EQUAL
42089: IFFALSE 42110
// points := [ 130 , 5 , 2 ] ;
42091: LD_ADDR_VAR 0 9
42095: PUSH
42096: LD_INT 130
42098: PUSH
42099: LD_INT 5
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42110: LD_VAR 0 6
42114: PPUSH
42115: CALL_OW 257
42119: PUSH
42120: LD_INT 8
42122: EQUAL
42123: IFFALSE 42144
// points := [ 35 , 35 , 30 ] ;
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_INT 35
42132: PUSH
42133: LD_INT 35
42135: PUSH
42136: LD_INT 30
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42144: LD_VAR 0 6
42148: PPUSH
42149: CALL_OW 257
42153: PUSH
42154: LD_INT 9
42156: EQUAL
42157: IFFALSE 42178
// points := [ 20 , 55 , 40 ] ;
42159: LD_ADDR_VAR 0 9
42163: PUSH
42164: LD_INT 20
42166: PUSH
42167: LD_INT 55
42169: PUSH
42170: LD_INT 40
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42178: LD_VAR 0 6
42182: PPUSH
42183: CALL_OW 257
42187: PUSH
42188: LD_INT 12
42190: PUSH
42191: LD_INT 16
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: IN
42198: IFFALSE 42219
// points := [ 5 , 3 , 2 ] ;
42200: LD_ADDR_VAR 0 9
42204: PUSH
42205: LD_INT 5
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42219: LD_VAR 0 6
42223: PPUSH
42224: CALL_OW 257
42228: PUSH
42229: LD_INT 17
42231: EQUAL
42232: IFFALSE 42253
// points := [ 100 , 50 , 75 ] ;
42234: LD_ADDR_VAR 0 9
42238: PUSH
42239: LD_INT 100
42241: PUSH
42242: LD_INT 50
42244: PUSH
42245: LD_INT 75
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42253: LD_VAR 0 6
42257: PPUSH
42258: CALL_OW 257
42262: PUSH
42263: LD_INT 15
42265: EQUAL
42266: IFFALSE 42287
// points := [ 10 , 5 , 3 ] ;
42268: LD_ADDR_VAR 0 9
42272: PUSH
42273: LD_INT 10
42275: PUSH
42276: LD_INT 5
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42287: LD_VAR 0 6
42291: PPUSH
42292: CALL_OW 257
42296: PUSH
42297: LD_INT 14
42299: EQUAL
42300: IFFALSE 42321
// points := [ 10 , 0 , 0 ] ;
42302: LD_ADDR_VAR 0 9
42306: PUSH
42307: LD_INT 10
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42321: LD_VAR 0 6
42325: PPUSH
42326: CALL_OW 257
42330: PUSH
42331: LD_INT 11
42333: EQUAL
42334: IFFALSE 42355
// points := [ 30 , 10 , 5 ] ;
42336: LD_ADDR_VAR 0 9
42340: PUSH
42341: LD_INT 30
42343: PUSH
42344: LD_INT 10
42346: PUSH
42347: LD_INT 5
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42355: LD_VAR 0 1
42359: PPUSH
42360: LD_INT 5
42362: PPUSH
42363: CALL_OW 321
42367: PUSH
42368: LD_INT 2
42370: EQUAL
42371: IFFALSE 42388
// bpoints := bpoints * 1.8 ;
42373: LD_ADDR_VAR 0 10
42377: PUSH
42378: LD_VAR 0 10
42382: PUSH
42383: LD_REAL  1.80000000000000E+0000
42386: MUL
42387: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42388: LD_VAR 0 6
42392: PPUSH
42393: CALL_OW 257
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: LD_INT 4
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: IN
42416: PUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: LD_INT 51
42424: PPUSH
42425: CALL_OW 321
42429: PUSH
42430: LD_INT 2
42432: EQUAL
42433: AND
42434: IFFALSE 42451
// bpoints := bpoints * 1.2 ;
42436: LD_ADDR_VAR 0 10
42440: PUSH
42441: LD_VAR 0 10
42445: PUSH
42446: LD_REAL  1.20000000000000E+0000
42449: MUL
42450: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42451: LD_VAR 0 6
42455: PPUSH
42456: CALL_OW 257
42460: PUSH
42461: LD_INT 5
42463: PUSH
42464: LD_INT 7
42466: PUSH
42467: LD_INT 9
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: IN
42475: PUSH
42476: LD_VAR 0 1
42480: PPUSH
42481: LD_INT 52
42483: PPUSH
42484: CALL_OW 321
42488: PUSH
42489: LD_INT 2
42491: EQUAL
42492: AND
42493: IFFALSE 42510
// bpoints := bpoints * 1.5 ;
42495: LD_ADDR_VAR 0 10
42499: PUSH
42500: LD_VAR 0 10
42504: PUSH
42505: LD_REAL  1.50000000000000E+0000
42508: MUL
42509: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42510: LD_VAR 0 1
42514: PPUSH
42515: LD_INT 66
42517: PPUSH
42518: CALL_OW 321
42522: PUSH
42523: LD_INT 2
42525: EQUAL
42526: IFFALSE 42543
// bpoints := bpoints * 1.1 ;
42528: LD_ADDR_VAR 0 10
42532: PUSH
42533: LD_VAR 0 10
42537: PUSH
42538: LD_REAL  1.10000000000000E+0000
42541: MUL
42542: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42543: LD_ADDR_VAR 0 10
42547: PUSH
42548: LD_VAR 0 10
42552: PUSH
42553: LD_VAR 0 6
42557: PPUSH
42558: LD_INT 1
42560: PPUSH
42561: CALL_OW 259
42565: PUSH
42566: LD_REAL  1.15000000000000E+0000
42569: MUL
42570: MUL
42571: ST_TO_ADDR
// end ; unit_vehicle :
42572: GO 43396
42574: LD_INT 2
42576: DOUBLE
42577: EQUAL
42578: IFTRUE 42582
42580: GO 43384
42582: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42583: LD_VAR 0 6
42587: PPUSH
42588: CALL_OW 264
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 42
42598: PUSH
42599: LD_INT 24
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: IN
42607: IFFALSE 42628
// points := [ 25 , 5 , 3 ] ;
42609: LD_ADDR_VAR 0 9
42613: PUSH
42614: LD_INT 25
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42628: LD_VAR 0 6
42632: PPUSH
42633: CALL_OW 264
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: LD_INT 43
42643: PUSH
42644: LD_INT 25
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: IN
42652: IFFALSE 42673
// points := [ 40 , 15 , 5 ] ;
42654: LD_ADDR_VAR 0 9
42658: PUSH
42659: LD_INT 40
42661: PUSH
42662: LD_INT 15
42664: PUSH
42665: LD_INT 5
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42673: LD_VAR 0 6
42677: PPUSH
42678: CALL_OW 264
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: LD_INT 23
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: IN
42693: IFFALSE 42714
// points := [ 7 , 25 , 8 ] ;
42695: LD_ADDR_VAR 0 9
42699: PUSH
42700: LD_INT 7
42702: PUSH
42703: LD_INT 25
42705: PUSH
42706: LD_INT 8
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42714: LD_VAR 0 6
42718: PPUSH
42719: CALL_OW 264
42723: PUSH
42724: LD_INT 5
42726: PUSH
42727: LD_INT 27
42729: PUSH
42730: LD_INT 44
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: IN
42738: IFFALSE 42759
// points := [ 14 , 50 , 16 ] ;
42740: LD_ADDR_VAR 0 9
42744: PUSH
42745: LD_INT 14
42747: PUSH
42748: LD_INT 50
42750: PUSH
42751: LD_INT 16
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42759: LD_VAR 0 6
42763: PPUSH
42764: CALL_OW 264
42768: PUSH
42769: LD_INT 6
42771: PUSH
42772: LD_INT 46
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: IN
42779: IFFALSE 42800
// points := [ 32 , 120 , 70 ] ;
42781: LD_ADDR_VAR 0 9
42785: PUSH
42786: LD_INT 32
42788: PUSH
42789: LD_INT 120
42791: PUSH
42792: LD_INT 70
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42800: LD_VAR 0 6
42804: PPUSH
42805: CALL_OW 264
42809: PUSH
42810: LD_INT 7
42812: PUSH
42813: LD_INT 28
42815: PUSH
42816: LD_INT 45
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: IN
42824: IFFALSE 42845
// points := [ 35 , 20 , 45 ] ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_INT 35
42833: PUSH
42834: LD_INT 20
42836: PUSH
42837: LD_INT 45
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 264
42854: PUSH
42855: LD_INT 47
42857: PUSH
42858: EMPTY
42859: LIST
42860: IN
42861: IFFALSE 42882
// points := [ 67 , 45 , 75 ] ;
42863: LD_ADDR_VAR 0 9
42867: PUSH
42868: LD_INT 67
42870: PUSH
42871: LD_INT 45
42873: PUSH
42874: LD_INT 75
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42882: LD_VAR 0 6
42886: PPUSH
42887: CALL_OW 264
42891: PUSH
42892: LD_INT 26
42894: PUSH
42895: EMPTY
42896: LIST
42897: IN
42898: IFFALSE 42919
// points := [ 120 , 30 , 80 ] ;
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: LD_INT 120
42907: PUSH
42908: LD_INT 30
42910: PUSH
42911: LD_INT 80
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42919: LD_VAR 0 6
42923: PPUSH
42924: CALL_OW 264
42928: PUSH
42929: LD_INT 22
42931: PUSH
42932: EMPTY
42933: LIST
42934: IN
42935: IFFALSE 42956
// points := [ 40 , 1 , 1 ] ;
42937: LD_ADDR_VAR 0 9
42941: PUSH
42942: LD_INT 40
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42956: LD_VAR 0 6
42960: PPUSH
42961: CALL_OW 264
42965: PUSH
42966: LD_INT 29
42968: PUSH
42969: EMPTY
42970: LIST
42971: IN
42972: IFFALSE 42993
// points := [ 70 , 200 , 400 ] ;
42974: LD_ADDR_VAR 0 9
42978: PUSH
42979: LD_INT 70
42981: PUSH
42982: LD_INT 200
42984: PUSH
42985: LD_INT 400
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42993: LD_VAR 0 6
42997: PPUSH
42998: CALL_OW 264
43002: PUSH
43003: LD_INT 14
43005: PUSH
43006: LD_INT 53
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: IN
43013: IFFALSE 43034
// points := [ 40 , 10 , 20 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 40
43022: PUSH
43023: LD_INT 10
43025: PUSH
43026: LD_INT 20
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 264
43043: PUSH
43044: LD_INT 9
43046: PUSH
43047: EMPTY
43048: LIST
43049: IN
43050: IFFALSE 43071
// points := [ 5 , 70 , 20 ] ;
43052: LD_ADDR_VAR 0 9
43056: PUSH
43057: LD_INT 5
43059: PUSH
43060: LD_INT 70
43062: PUSH
43063: LD_INT 20
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43071: LD_VAR 0 6
43075: PPUSH
43076: CALL_OW 264
43080: PUSH
43081: LD_INT 10
43083: PUSH
43084: EMPTY
43085: LIST
43086: IN
43087: IFFALSE 43108
// points := [ 35 , 110 , 70 ] ;
43089: LD_ADDR_VAR 0 9
43093: PUSH
43094: LD_INT 35
43096: PUSH
43097: LD_INT 110
43099: PUSH
43100: LD_INT 70
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 265
43117: PUSH
43118: LD_INT 25
43120: EQUAL
43121: IFFALSE 43142
// points := [ 80 , 65 , 100 ] ;
43123: LD_ADDR_VAR 0 9
43127: PUSH
43128: LD_INT 80
43130: PUSH
43131: LD_INT 65
43133: PUSH
43134: LD_INT 100
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43142: LD_VAR 0 6
43146: PPUSH
43147: CALL_OW 263
43151: PUSH
43152: LD_INT 1
43154: EQUAL
43155: IFFALSE 43190
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43157: LD_ADDR_VAR 0 10
43161: PUSH
43162: LD_VAR 0 10
43166: PUSH
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 311
43176: PPUSH
43177: LD_INT 3
43179: PPUSH
43180: CALL_OW 259
43184: PUSH
43185: LD_INT 4
43187: MUL
43188: MUL
43189: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43190: LD_VAR 0 6
43194: PPUSH
43195: CALL_OW 263
43199: PUSH
43200: LD_INT 2
43202: EQUAL
43203: IFFALSE 43254
// begin j := IsControledBy ( i ) ;
43205: LD_ADDR_VAR 0 7
43209: PUSH
43210: LD_VAR 0 6
43214: PPUSH
43215: CALL_OW 312
43219: ST_TO_ADDR
// if j then
43220: LD_VAR 0 7
43224: IFFALSE 43254
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43226: LD_ADDR_VAR 0 10
43230: PUSH
43231: LD_VAR 0 10
43235: PUSH
43236: LD_VAR 0 7
43240: PPUSH
43241: LD_INT 3
43243: PPUSH
43244: CALL_OW 259
43248: PUSH
43249: LD_INT 3
43251: MUL
43252: MUL
43253: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43254: LD_VAR 0 6
43258: PPUSH
43259: CALL_OW 264
43263: PUSH
43264: LD_INT 5
43266: PUSH
43267: LD_INT 6
43269: PUSH
43270: LD_INT 46
43272: PUSH
43273: LD_INT 44
43275: PUSH
43276: LD_INT 47
43278: PUSH
43279: LD_INT 45
43281: PUSH
43282: LD_INT 28
43284: PUSH
43285: LD_INT 7
43287: PUSH
43288: LD_INT 27
43290: PUSH
43291: LD_INT 29
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: IN
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: LD_INT 52
43314: PPUSH
43315: CALL_OW 321
43319: PUSH
43320: LD_INT 2
43322: EQUAL
43323: AND
43324: IFFALSE 43341
// bpoints := bpoints * 1.2 ;
43326: LD_ADDR_VAR 0 10
43330: PUSH
43331: LD_VAR 0 10
43335: PUSH
43336: LD_REAL  1.20000000000000E+0000
43339: MUL
43340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 264
43350: PUSH
43351: LD_INT 6
43353: PUSH
43354: LD_INT 46
43356: PUSH
43357: LD_INT 47
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: IN
43365: IFFALSE 43382
// bpoints := bpoints * 1.2 ;
43367: LD_ADDR_VAR 0 10
43371: PUSH
43372: LD_VAR 0 10
43376: PUSH
43377: LD_REAL  1.20000000000000E+0000
43380: MUL
43381: ST_TO_ADDR
// end ; unit_building :
43382: GO 43396
43384: LD_INT 3
43386: DOUBLE
43387: EQUAL
43388: IFTRUE 43392
43390: GO 43395
43392: POP
// ; end ;
43393: GO 43396
43395: POP
// for j = 1 to 3 do
43396: LD_ADDR_VAR 0 7
43400: PUSH
43401: DOUBLE
43402: LD_INT 1
43404: DEC
43405: ST_TO_ADDR
43406: LD_INT 3
43408: PUSH
43409: FOR_TO
43410: IFFALSE 43463
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43412: LD_ADDR_VAR 0 5
43416: PUSH
43417: LD_VAR 0 5
43421: PPUSH
43422: LD_VAR 0 7
43426: PPUSH
43427: LD_VAR 0 5
43431: PUSH
43432: LD_VAR 0 7
43436: ARRAY
43437: PUSH
43438: LD_VAR 0 9
43442: PUSH
43443: LD_VAR 0 7
43447: ARRAY
43448: PUSH
43449: LD_VAR 0 10
43453: MUL
43454: PLUS
43455: PPUSH
43456: CALL_OW 1
43460: ST_TO_ADDR
43461: GO 43409
43463: POP
43464: POP
// end ;
43465: GO 41948
43467: POP
43468: POP
// result := Replace ( result , 4 , tmp ) ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 5
43478: PPUSH
43479: LD_INT 4
43481: PPUSH
43482: LD_VAR 0 8
43486: PPUSH
43487: CALL_OW 1
43491: ST_TO_ADDR
// end ;
43492: LD_VAR 0 5
43496: RET
// export function DangerAtRange ( unit , range ) ; begin
43497: LD_INT 0
43499: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 255
43514: PPUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 250
43524: PPUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 251
43534: PPUSH
43535: LD_VAR 0 2
43539: PPUSH
43540: CALL 41800 0 4
43544: ST_TO_ADDR
// end ;
43545: LD_VAR 0 3
43549: RET
// export function DangerInArea ( side , area ) ; begin
43550: LD_INT 0
43552: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: LD_VAR 0 2
43562: PPUSH
43563: LD_INT 81
43565: PUSH
43566: LD_VAR 0 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PPUSH
43575: CALL_OW 70
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 3
43584: RET
// export function IsExtension ( b ) ; begin
43585: LD_INT 0
43587: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43588: LD_ADDR_VAR 0 2
43592: PUSH
43593: LD_VAR 0 1
43597: PUSH
43598: LD_INT 23
43600: PUSH
43601: LD_INT 20
43603: PUSH
43604: LD_INT 22
43606: PUSH
43607: LD_INT 17
43609: PUSH
43610: LD_INT 24
43612: PUSH
43613: LD_INT 21
43615: PUSH
43616: LD_INT 19
43618: PUSH
43619: LD_INT 16
43621: PUSH
43622: LD_INT 25
43624: PUSH
43625: LD_INT 18
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: IN
43640: ST_TO_ADDR
// end ;
43641: LD_VAR 0 2
43645: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43646: LD_INT 0
43648: PPUSH
43649: PPUSH
43650: PPUSH
// result := [ ] ;
43651: LD_ADDR_VAR 0 4
43655: PUSH
43656: EMPTY
43657: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43658: LD_ADDR_VAR 0 5
43662: PUSH
43663: LD_VAR 0 2
43667: PPUSH
43668: LD_INT 21
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PPUSH
43678: CALL_OW 70
43682: ST_TO_ADDR
// if not tmp then
43683: LD_VAR 0 5
43687: NOT
43688: IFFALSE 43692
// exit ;
43690: GO 43756
// if checkLink then
43692: LD_VAR 0 3
43696: IFFALSE 43746
// begin for i in tmp do
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: LD_VAR 0 5
43707: PUSH
43708: FOR_IN
43709: IFFALSE 43744
// if GetBase ( i ) <> base then
43711: LD_VAR 0 6
43715: PPUSH
43716: CALL_OW 274
43720: PUSH
43721: LD_VAR 0 1
43725: NONEQUAL
43726: IFFALSE 43742
// ComLinkToBase ( base , i ) ;
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_VAR 0 6
43737: PPUSH
43738: CALL_OW 169
43742: GO 43708
43744: POP
43745: POP
// end ; result := tmp ;
43746: LD_ADDR_VAR 0 4
43750: PUSH
43751: LD_VAR 0 5
43755: ST_TO_ADDR
// end ;
43756: LD_VAR 0 4
43760: RET
// export function ComComplete ( units , b ) ; var i ; begin
43761: LD_INT 0
43763: PPUSH
43764: PPUSH
// if not units then
43765: LD_VAR 0 1
43769: NOT
43770: IFFALSE 43774
// exit ;
43772: GO 43864
// for i in units do
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 1
43783: PUSH
43784: FOR_IN
43785: IFFALSE 43862
// if BuildingStatus ( b ) = bs_build then
43787: LD_VAR 0 2
43791: PPUSH
43792: CALL_OW 461
43796: PUSH
43797: LD_INT 1
43799: EQUAL
43800: IFFALSE 43860
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43802: LD_VAR 0 4
43806: PPUSH
43807: LD_STRING h
43809: PUSH
43810: LD_VAR 0 2
43814: PPUSH
43815: CALL_OW 250
43819: PUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL_OW 251
43829: PUSH
43830: LD_VAR 0 2
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: PPUSH
43856: CALL_OW 446
43860: GO 43784
43862: POP
43863: POP
// end ;
43864: LD_VAR 0 3
43868: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43869: LD_INT 0
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43877: LD_VAR 0 1
43881: NOT
43882: PUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 263
43892: PUSH
43893: LD_INT 2
43895: EQUAL
43896: NOT
43897: OR
43898: IFFALSE 43902
// exit ;
43900: GO 44218
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43902: LD_ADDR_VAR 0 6
43906: PUSH
43907: LD_INT 22
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 255
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 30
43929: PUSH
43930: LD_INT 36
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 34
43939: PUSH
43940: LD_INT 31
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PPUSH
43956: CALL_OW 69
43960: ST_TO_ADDR
// if not tmp then
43961: LD_VAR 0 6
43965: NOT
43966: IFFALSE 43970
// exit ;
43968: GO 44218
// result := [ ] ;
43970: LD_ADDR_VAR 0 2
43974: PUSH
43975: EMPTY
43976: ST_TO_ADDR
// for i in tmp do
43977: LD_ADDR_VAR 0 3
43981: PUSH
43982: LD_VAR 0 6
43986: PUSH
43987: FOR_IN
43988: IFFALSE 44059
// begin t := UnitsInside ( i ) ;
43990: LD_ADDR_VAR 0 4
43994: PUSH
43995: LD_VAR 0 3
43999: PPUSH
44000: CALL_OW 313
44004: ST_TO_ADDR
// if t then
44005: LD_VAR 0 4
44009: IFFALSE 44057
// for j in t do
44011: LD_ADDR_VAR 0 7
44015: PUSH
44016: LD_VAR 0 4
44020: PUSH
44021: FOR_IN
44022: IFFALSE 44055
// result := Insert ( result , result + 1 , j ) ;
44024: LD_ADDR_VAR 0 2
44028: PUSH
44029: LD_VAR 0 2
44033: PPUSH
44034: LD_VAR 0 2
44038: PUSH
44039: LD_INT 1
44041: PLUS
44042: PPUSH
44043: LD_VAR 0 7
44047: PPUSH
44048: CALL_OW 2
44052: ST_TO_ADDR
44053: GO 44021
44055: POP
44056: POP
// end ;
44057: GO 43987
44059: POP
44060: POP
// if not result then
44061: LD_VAR 0 2
44065: NOT
44066: IFFALSE 44070
// exit ;
44068: GO 44218
// mech := result [ 1 ] ;
44070: LD_ADDR_VAR 0 5
44074: PUSH
44075: LD_VAR 0 2
44079: PUSH
44080: LD_INT 1
44082: ARRAY
44083: ST_TO_ADDR
// if result > 1 then
44084: LD_VAR 0 2
44088: PUSH
44089: LD_INT 1
44091: GREATER
44092: IFFALSE 44204
// for i = 2 to result do
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: DOUBLE
44100: LD_INT 2
44102: DEC
44103: ST_TO_ADDR
44104: LD_VAR 0 2
44108: PUSH
44109: FOR_TO
44110: IFFALSE 44202
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44112: LD_ADDR_VAR 0 4
44116: PUSH
44117: LD_VAR 0 2
44121: PUSH
44122: LD_VAR 0 3
44126: ARRAY
44127: PPUSH
44128: LD_INT 3
44130: PPUSH
44131: CALL_OW 259
44135: PUSH
44136: LD_VAR 0 2
44140: PUSH
44141: LD_VAR 0 3
44145: ARRAY
44146: PPUSH
44147: CALL_OW 432
44151: MINUS
44152: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44153: LD_VAR 0 4
44157: PUSH
44158: LD_VAR 0 5
44162: PPUSH
44163: LD_INT 3
44165: PPUSH
44166: CALL_OW 259
44170: PUSH
44171: LD_VAR 0 5
44175: PPUSH
44176: CALL_OW 432
44180: MINUS
44181: GREATEREQUAL
44182: IFFALSE 44200
// mech := result [ i ] ;
44184: LD_ADDR_VAR 0 5
44188: PUSH
44189: LD_VAR 0 2
44193: PUSH
44194: LD_VAR 0 3
44198: ARRAY
44199: ST_TO_ADDR
// end ;
44200: GO 44109
44202: POP
44203: POP
// ComLinkTo ( vehicle , mech ) ;
44204: LD_VAR 0 1
44208: PPUSH
44209: LD_VAR 0 5
44213: PPUSH
44214: CALL_OW 135
// end ;
44218: LD_VAR 0 2
44222: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44223: LD_INT 0
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// result := [ ] ;
44238: LD_ADDR_VAR 0 7
44242: PUSH
44243: EMPTY
44244: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44245: LD_VAR 0 1
44249: PPUSH
44250: CALL_OW 266
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: IN
44265: NOT
44266: IFFALSE 44270
// exit ;
44268: GO 45904
// if name then
44270: LD_VAR 0 3
44274: IFFALSE 44290
// SetBName ( base_dep , name ) ;
44276: LD_VAR 0 1
44280: PPUSH
44281: LD_VAR 0 3
44285: PPUSH
44286: CALL_OW 500
// base := GetBase ( base_dep ) ;
44290: LD_ADDR_VAR 0 15
44294: PUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 274
44304: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44305: LD_ADDR_VAR 0 16
44309: PUSH
44310: LD_VAR 0 1
44314: PPUSH
44315: CALL_OW 255
44319: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44320: LD_ADDR_VAR 0 17
44324: PUSH
44325: LD_VAR 0 1
44329: PPUSH
44330: CALL_OW 248
44334: ST_TO_ADDR
// if sources then
44335: LD_VAR 0 5
44339: IFFALSE 44386
// for i = 1 to 3 do
44341: LD_ADDR_VAR 0 8
44345: PUSH
44346: DOUBLE
44347: LD_INT 1
44349: DEC
44350: ST_TO_ADDR
44351: LD_INT 3
44353: PUSH
44354: FOR_TO
44355: IFFALSE 44384
// AddResourceType ( base , i , sources [ i ] ) ;
44357: LD_VAR 0 15
44361: PPUSH
44362: LD_VAR 0 8
44366: PPUSH
44367: LD_VAR 0 5
44371: PUSH
44372: LD_VAR 0 8
44376: ARRAY
44377: PPUSH
44378: CALL_OW 276
44382: GO 44354
44384: POP
44385: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44386: LD_ADDR_VAR 0 18
44390: PUSH
44391: LD_VAR 0 15
44395: PPUSH
44396: LD_VAR 0 2
44400: PPUSH
44401: LD_INT 1
44403: PPUSH
44404: CALL 43646 0 3
44408: ST_TO_ADDR
// InitHc ;
44409: CALL_OW 19
// InitUc ;
44413: CALL_OW 18
// uc_side := side ;
44417: LD_ADDR_OWVAR 20
44421: PUSH
44422: LD_VAR 0 16
44426: ST_TO_ADDR
// uc_nation := nation ;
44427: LD_ADDR_OWVAR 21
44431: PUSH
44432: LD_VAR 0 17
44436: ST_TO_ADDR
// if buildings then
44437: LD_VAR 0 18
44441: IFFALSE 45763
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44443: LD_ADDR_VAR 0 19
44447: PUSH
44448: LD_VAR 0 18
44452: PPUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 30
44458: PUSH
44459: LD_INT 29
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 30
44468: PUSH
44469: LD_INT 30
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: PPUSH
44481: CALL_OW 72
44485: ST_TO_ADDR
// if tmp then
44486: LD_VAR 0 19
44490: IFFALSE 44538
// for i in tmp do
44492: LD_ADDR_VAR 0 8
44496: PUSH
44497: LD_VAR 0 19
44501: PUSH
44502: FOR_IN
44503: IFFALSE 44536
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44505: LD_VAR 0 8
44509: PPUSH
44510: CALL_OW 250
44514: PPUSH
44515: LD_VAR 0 8
44519: PPUSH
44520: CALL_OW 251
44524: PPUSH
44525: LD_VAR 0 16
44529: PPUSH
44530: CALL_OW 441
44534: GO 44502
44536: POP
44537: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44538: LD_VAR 0 18
44542: PPUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 30
44548: PUSH
44549: LD_INT 32
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 30
44558: PUSH
44559: LD_INT 33
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: PPUSH
44571: CALL_OW 72
44575: IFFALSE 44663
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44577: LD_ADDR_VAR 0 8
44581: PUSH
44582: LD_VAR 0 18
44586: PPUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 30
44592: PUSH
44593: LD_INT 32
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 30
44602: PUSH
44603: LD_INT 33
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PPUSH
44615: CALL_OW 72
44619: PUSH
44620: FOR_IN
44621: IFFALSE 44661
// begin if not GetBWeapon ( i ) then
44623: LD_VAR 0 8
44627: PPUSH
44628: CALL_OW 269
44632: NOT
44633: IFFALSE 44659
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44635: LD_VAR 0 8
44639: PPUSH
44640: LD_VAR 0 8
44644: PPUSH
44645: LD_VAR 0 2
44649: PPUSH
44650: CALL 45909 0 2
44654: PPUSH
44655: CALL_OW 431
// end ;
44659: GO 44620
44661: POP
44662: POP
// end ; for i = 1 to personel do
44663: LD_ADDR_VAR 0 8
44667: PUSH
44668: DOUBLE
44669: LD_INT 1
44671: DEC
44672: ST_TO_ADDR
44673: LD_VAR 0 6
44677: PUSH
44678: FOR_TO
44679: IFFALSE 45743
// begin if i > 4 then
44681: LD_VAR 0 8
44685: PUSH
44686: LD_INT 4
44688: GREATER
44689: IFFALSE 44693
// break ;
44691: GO 45743
// case i of 1 :
44693: LD_VAR 0 8
44697: PUSH
44698: LD_INT 1
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44706
44704: GO 44786
44706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44707: LD_ADDR_VAR 0 12
44711: PUSH
44712: LD_VAR 0 18
44716: PPUSH
44717: LD_INT 22
44719: PUSH
44720: LD_VAR 0 16
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 58
44731: PUSH
44732: EMPTY
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 30
44740: PUSH
44741: LD_INT 32
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 30
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 30
44760: PUSH
44761: LD_INT 5
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: PPUSH
44779: CALL_OW 72
44783: ST_TO_ADDR
44784: GO 45008
44786: LD_INT 2
44788: DOUBLE
44789: EQUAL
44790: IFTRUE 44794
44792: GO 44856
44794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44795: LD_ADDR_VAR 0 12
44799: PUSH
44800: LD_VAR 0 18
44804: PPUSH
44805: LD_INT 22
44807: PUSH
44808: LD_VAR 0 16
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 30
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 30
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PPUSH
44849: CALL_OW 72
44853: ST_TO_ADDR
44854: GO 45008
44856: LD_INT 3
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44864
44862: GO 44926
44864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44865: LD_ADDR_VAR 0 12
44869: PUSH
44870: LD_VAR 0 18
44874: PPUSH
44875: LD_INT 22
44877: PUSH
44878: LD_VAR 0 16
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 30
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 30
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PPUSH
44919: CALL_OW 72
44923: ST_TO_ADDR
44924: GO 45008
44926: LD_INT 4
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 45007
44934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44935: LD_ADDR_VAR 0 12
44939: PUSH
44940: LD_VAR 0 18
44944: PPUSH
44945: LD_INT 22
44947: PUSH
44948: LD_VAR 0 16
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 30
44962: PUSH
44963: LD_INT 6
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 30
44972: PUSH
44973: LD_INT 7
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 30
44982: PUSH
44983: LD_INT 8
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PPUSH
45000: CALL_OW 72
45004: ST_TO_ADDR
45005: GO 45008
45007: POP
// if i = 1 then
45008: LD_VAR 0 8
45012: PUSH
45013: LD_INT 1
45015: EQUAL
45016: IFFALSE 45127
// begin tmp := [ ] ;
45018: LD_ADDR_VAR 0 19
45022: PUSH
45023: EMPTY
45024: ST_TO_ADDR
// for j in f do
45025: LD_ADDR_VAR 0 9
45029: PUSH
45030: LD_VAR 0 12
45034: PUSH
45035: FOR_IN
45036: IFFALSE 45109
// if GetBType ( j ) = b_bunker then
45038: LD_VAR 0 9
45042: PPUSH
45043: CALL_OW 266
45047: PUSH
45048: LD_INT 32
45050: EQUAL
45051: IFFALSE 45078
// tmp := Insert ( tmp , 1 , j ) else
45053: LD_ADDR_VAR 0 19
45057: PUSH
45058: LD_VAR 0 19
45062: PPUSH
45063: LD_INT 1
45065: PPUSH
45066: LD_VAR 0 9
45070: PPUSH
45071: CALL_OW 2
45075: ST_TO_ADDR
45076: GO 45107
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45078: LD_ADDR_VAR 0 19
45082: PUSH
45083: LD_VAR 0 19
45087: PPUSH
45088: LD_VAR 0 19
45092: PUSH
45093: LD_INT 1
45095: PLUS
45096: PPUSH
45097: LD_VAR 0 9
45101: PPUSH
45102: CALL_OW 2
45106: ST_TO_ADDR
45107: GO 45035
45109: POP
45110: POP
// if tmp then
45111: LD_VAR 0 19
45115: IFFALSE 45127
// f := tmp ;
45117: LD_ADDR_VAR 0 12
45121: PUSH
45122: LD_VAR 0 19
45126: ST_TO_ADDR
// end ; x := personel [ i ] ;
45127: LD_ADDR_VAR 0 13
45131: PUSH
45132: LD_VAR 0 6
45136: PUSH
45137: LD_VAR 0 8
45141: ARRAY
45142: ST_TO_ADDR
// if x = - 1 then
45143: LD_VAR 0 13
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: EQUAL
45152: IFFALSE 45361
// begin for j in f do
45154: LD_ADDR_VAR 0 9
45158: PUSH
45159: LD_VAR 0 12
45163: PUSH
45164: FOR_IN
45165: IFFALSE 45357
// repeat InitHc ;
45167: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45171: LD_VAR 0 9
45175: PPUSH
45176: CALL_OW 266
45180: PUSH
45181: LD_INT 5
45183: EQUAL
45184: IFFALSE 45254
// begin if UnitsInside ( j ) < 3 then
45186: LD_VAR 0 9
45190: PPUSH
45191: CALL_OW 313
45195: PUSH
45196: LD_INT 3
45198: LESS
45199: IFFALSE 45235
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45201: LD_INT 0
45203: PPUSH
45204: LD_INT 5
45206: PUSH
45207: LD_INT 8
45209: PUSH
45210: LD_INT 9
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: PUSH
45218: LD_VAR 0 17
45222: ARRAY
45223: PPUSH
45224: LD_VAR 0 4
45228: PPUSH
45229: CALL_OW 380
45233: GO 45252
// PrepareHuman ( false , i , skill ) ;
45235: LD_INT 0
45237: PPUSH
45238: LD_VAR 0 8
45242: PPUSH
45243: LD_VAR 0 4
45247: PPUSH
45248: CALL_OW 380
// end else
45252: GO 45271
// PrepareHuman ( false , i , skill ) ;
45254: LD_INT 0
45256: PPUSH
45257: LD_VAR 0 8
45261: PPUSH
45262: LD_VAR 0 4
45266: PPUSH
45267: CALL_OW 380
// un := CreateHuman ;
45271: LD_ADDR_VAR 0 14
45275: PUSH
45276: CALL_OW 44
45280: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45281: LD_ADDR_VAR 0 7
45285: PUSH
45286: LD_VAR 0 7
45290: PPUSH
45291: LD_INT 1
45293: PPUSH
45294: LD_VAR 0 14
45298: PPUSH
45299: CALL_OW 2
45303: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45304: LD_VAR 0 14
45308: PPUSH
45309: LD_VAR 0 9
45313: PPUSH
45314: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45318: LD_VAR 0 9
45322: PPUSH
45323: CALL_OW 313
45327: PUSH
45328: LD_INT 6
45330: EQUAL
45331: PUSH
45332: LD_VAR 0 9
45336: PPUSH
45337: CALL_OW 266
45341: PUSH
45342: LD_INT 32
45344: PUSH
45345: LD_INT 31
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: IN
45352: OR
45353: IFFALSE 45167
45355: GO 45164
45357: POP
45358: POP
// end else
45359: GO 45741
// for j = 1 to x do
45361: LD_ADDR_VAR 0 9
45365: PUSH
45366: DOUBLE
45367: LD_INT 1
45369: DEC
45370: ST_TO_ADDR
45371: LD_VAR 0 13
45375: PUSH
45376: FOR_TO
45377: IFFALSE 45739
// begin InitHc ;
45379: CALL_OW 19
// if not f then
45383: LD_VAR 0 12
45387: NOT
45388: IFFALSE 45477
// begin PrepareHuman ( false , i , skill ) ;
45390: LD_INT 0
45392: PPUSH
45393: LD_VAR 0 8
45397: PPUSH
45398: LD_VAR 0 4
45402: PPUSH
45403: CALL_OW 380
// un := CreateHuman ;
45407: LD_ADDR_VAR 0 14
45411: PUSH
45412: CALL_OW 44
45416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45417: LD_ADDR_VAR 0 7
45421: PUSH
45422: LD_VAR 0 7
45426: PPUSH
45427: LD_INT 1
45429: PPUSH
45430: LD_VAR 0 14
45434: PPUSH
45435: CALL_OW 2
45439: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45440: LD_VAR 0 14
45444: PPUSH
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 250
45454: PPUSH
45455: LD_VAR 0 1
45459: PPUSH
45460: CALL_OW 251
45464: PPUSH
45465: LD_INT 10
45467: PPUSH
45468: LD_INT 0
45470: PPUSH
45471: CALL_OW 50
// continue ;
45475: GO 45376
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45477: LD_VAR 0 12
45481: PUSH
45482: LD_INT 1
45484: ARRAY
45485: PPUSH
45486: CALL_OW 313
45490: PUSH
45491: LD_VAR 0 12
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PPUSH
45500: CALL_OW 266
45504: PUSH
45505: LD_INT 32
45507: PUSH
45508: LD_INT 31
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: IN
45515: AND
45516: PUSH
45517: LD_VAR 0 12
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: CALL_OW 313
45530: PUSH
45531: LD_INT 6
45533: EQUAL
45534: OR
45535: IFFALSE 45555
// f := Delete ( f , 1 ) ;
45537: LD_ADDR_VAR 0 12
45541: PUSH
45542: LD_VAR 0 12
45546: PPUSH
45547: LD_INT 1
45549: PPUSH
45550: CALL_OW 3
45554: ST_TO_ADDR
// if not f then
45555: LD_VAR 0 12
45559: NOT
45560: IFFALSE 45578
// begin x := x + 2 ;
45562: LD_ADDR_VAR 0 13
45566: PUSH
45567: LD_VAR 0 13
45571: PUSH
45572: LD_INT 2
45574: PLUS
45575: ST_TO_ADDR
// continue ;
45576: GO 45376
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45578: LD_VAR 0 12
45582: PUSH
45583: LD_INT 1
45585: ARRAY
45586: PPUSH
45587: CALL_OW 266
45591: PUSH
45592: LD_INT 5
45594: EQUAL
45595: IFFALSE 45669
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45597: LD_VAR 0 12
45601: PUSH
45602: LD_INT 1
45604: ARRAY
45605: PPUSH
45606: CALL_OW 313
45610: PUSH
45611: LD_INT 3
45613: LESS
45614: IFFALSE 45650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45616: LD_INT 0
45618: PPUSH
45619: LD_INT 5
45621: PUSH
45622: LD_INT 8
45624: PUSH
45625: LD_INT 9
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: PUSH
45633: LD_VAR 0 17
45637: ARRAY
45638: PPUSH
45639: LD_VAR 0 4
45643: PPUSH
45644: CALL_OW 380
45648: GO 45667
// PrepareHuman ( false , i , skill ) ;
45650: LD_INT 0
45652: PPUSH
45653: LD_VAR 0 8
45657: PPUSH
45658: LD_VAR 0 4
45662: PPUSH
45663: CALL_OW 380
// end else
45667: GO 45686
// PrepareHuman ( false , i , skill ) ;
45669: LD_INT 0
45671: PPUSH
45672: LD_VAR 0 8
45676: PPUSH
45677: LD_VAR 0 4
45681: PPUSH
45682: CALL_OW 380
// un := CreateHuman ;
45686: LD_ADDR_VAR 0 14
45690: PUSH
45691: CALL_OW 44
45695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45696: LD_ADDR_VAR 0 7
45700: PUSH
45701: LD_VAR 0 7
45705: PPUSH
45706: LD_INT 1
45708: PPUSH
45709: LD_VAR 0 14
45713: PPUSH
45714: CALL_OW 2
45718: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45719: LD_VAR 0 14
45723: PPUSH
45724: LD_VAR 0 12
45728: PUSH
45729: LD_INT 1
45731: ARRAY
45732: PPUSH
45733: CALL_OW 52
// end ;
45737: GO 45376
45739: POP
45740: POP
// end ;
45741: GO 44678
45743: POP
45744: POP
// result := result ^ buildings ;
45745: LD_ADDR_VAR 0 7
45749: PUSH
45750: LD_VAR 0 7
45754: PUSH
45755: LD_VAR 0 18
45759: ADD
45760: ST_TO_ADDR
// end else
45761: GO 45904
// begin for i = 1 to personel do
45763: LD_ADDR_VAR 0 8
45767: PUSH
45768: DOUBLE
45769: LD_INT 1
45771: DEC
45772: ST_TO_ADDR
45773: LD_VAR 0 6
45777: PUSH
45778: FOR_TO
45779: IFFALSE 45902
// begin if i > 4 then
45781: LD_VAR 0 8
45785: PUSH
45786: LD_INT 4
45788: GREATER
45789: IFFALSE 45793
// break ;
45791: GO 45902
// x := personel [ i ] ;
45793: LD_ADDR_VAR 0 13
45797: PUSH
45798: LD_VAR 0 6
45802: PUSH
45803: LD_VAR 0 8
45807: ARRAY
45808: ST_TO_ADDR
// if x = - 1 then
45809: LD_VAR 0 13
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: EQUAL
45818: IFFALSE 45822
// continue ;
45820: GO 45778
// PrepareHuman ( false , i , skill ) ;
45822: LD_INT 0
45824: PPUSH
45825: LD_VAR 0 8
45829: PPUSH
45830: LD_VAR 0 4
45834: PPUSH
45835: CALL_OW 380
// un := CreateHuman ;
45839: LD_ADDR_VAR 0 14
45843: PUSH
45844: CALL_OW 44
45848: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45849: LD_VAR 0 14
45853: PPUSH
45854: LD_VAR 0 1
45858: PPUSH
45859: CALL_OW 250
45863: PPUSH
45864: LD_VAR 0 1
45868: PPUSH
45869: CALL_OW 251
45873: PPUSH
45874: LD_INT 10
45876: PPUSH
45877: LD_INT 0
45879: PPUSH
45880: CALL_OW 50
// result := result ^ un ;
45884: LD_ADDR_VAR 0 7
45888: PUSH
45889: LD_VAR 0 7
45893: PUSH
45894: LD_VAR 0 14
45898: ADD
45899: ST_TO_ADDR
// end ;
45900: GO 45778
45902: POP
45903: POP
// end ; end ;
45904: LD_VAR 0 7
45908: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45909: LD_INT 0
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
// result := false ;
45927: LD_ADDR_VAR 0 3
45931: PUSH
45932: LD_INT 0
45934: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45935: LD_VAR 0 1
45939: NOT
45940: PUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 266
45950: PUSH
45951: LD_INT 32
45953: PUSH
45954: LD_INT 33
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: IN
45961: NOT
45962: OR
45963: IFFALSE 45967
// exit ;
45965: GO 47106
// nat := GetNation ( tower ) ;
45967: LD_ADDR_VAR 0 12
45971: PUSH
45972: LD_VAR 0 1
45976: PPUSH
45977: CALL_OW 248
45981: ST_TO_ADDR
// side := GetSide ( tower ) ;
45982: LD_ADDR_VAR 0 16
45986: PUSH
45987: LD_VAR 0 1
45991: PPUSH
45992: CALL_OW 255
45996: ST_TO_ADDR
// x := GetX ( tower ) ;
45997: LD_ADDR_VAR 0 10
46001: PUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: CALL_OW 250
46011: ST_TO_ADDR
// y := GetY ( tower ) ;
46012: LD_ADDR_VAR 0 11
46016: PUSH
46017: LD_VAR 0 1
46021: PPUSH
46022: CALL_OW 251
46026: ST_TO_ADDR
// if not x or not y then
46027: LD_VAR 0 10
46031: NOT
46032: PUSH
46033: LD_VAR 0 11
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 47106
// weapon := 0 ;
46043: LD_ADDR_VAR 0 18
46047: PUSH
46048: LD_INT 0
46050: ST_TO_ADDR
// fac_list := [ ] ;
46051: LD_ADDR_VAR 0 17
46055: PUSH
46056: EMPTY
46057: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46058: LD_ADDR_VAR 0 6
46062: PUSH
46063: LD_VAR 0 1
46067: PPUSH
46068: CALL_OW 274
46072: PPUSH
46073: LD_VAR 0 2
46077: PPUSH
46078: LD_INT 0
46080: PPUSH
46081: CALL 43646 0 3
46085: PPUSH
46086: LD_INT 30
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 72
46100: ST_TO_ADDR
// if not factories then
46101: LD_VAR 0 6
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 47106
// for i in factories do
46110: LD_ADDR_VAR 0 8
46114: PUSH
46115: LD_VAR 0 6
46119: PUSH
46120: FOR_IN
46121: IFFALSE 46146
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46123: LD_ADDR_VAR 0 17
46127: PUSH
46128: LD_VAR 0 17
46132: PUSH
46133: LD_VAR 0 8
46137: PPUSH
46138: CALL_OW 478
46142: UNION
46143: ST_TO_ADDR
46144: GO 46120
46146: POP
46147: POP
// if not fac_list then
46148: LD_VAR 0 17
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 47106
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46157: LD_ADDR_VAR 0 5
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: LD_INT 9
46170: PUSH
46171: LD_INT 10
46173: PUSH
46174: LD_INT 6
46176: PUSH
46177: LD_INT 7
46179: PUSH
46180: LD_INT 11
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 27
46194: PUSH
46195: LD_INT 28
46197: PUSH
46198: LD_INT 26
46200: PUSH
46201: LD_INT 30
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 43
46212: PUSH
46213: LD_INT 44
46215: PUSH
46216: LD_INT 46
46218: PUSH
46219: LD_INT 45
46221: PUSH
46222: LD_INT 47
46224: PUSH
46225: LD_INT 49
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: PUSH
46241: LD_VAR 0 12
46245: ARRAY
46246: ST_TO_ADDR
// for i in list do
46247: LD_ADDR_VAR 0 8
46251: PUSH
46252: LD_VAR 0 5
46256: PUSH
46257: FOR_IN
46258: IFFALSE 46291
// if not i in fac_list then
46260: LD_VAR 0 8
46264: PUSH
46265: LD_VAR 0 17
46269: IN
46270: NOT
46271: IFFALSE 46289
// list := list diff i ;
46273: LD_ADDR_VAR 0 5
46277: PUSH
46278: LD_VAR 0 5
46282: PUSH
46283: LD_VAR 0 8
46287: DIFF
46288: ST_TO_ADDR
46289: GO 46257
46291: POP
46292: POP
// if not list then
46293: LD_VAR 0 5
46297: NOT
46298: IFFALSE 46302
// exit ;
46300: GO 47106
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46302: LD_VAR 0 12
46306: PUSH
46307: LD_INT 3
46309: EQUAL
46310: PUSH
46311: LD_INT 49
46313: PUSH
46314: LD_VAR 0 5
46318: IN
46319: AND
46320: PUSH
46321: LD_INT 31
46323: PPUSH
46324: LD_VAR 0 16
46328: PPUSH
46329: CALL_OW 321
46333: PUSH
46334: LD_INT 2
46336: EQUAL
46337: AND
46338: IFFALSE 46398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46340: LD_INT 22
46342: PUSH
46343: LD_VAR 0 16
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 35
46354: PUSH
46355: LD_INT 49
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 91
46364: PUSH
46365: LD_VAR 0 1
46369: PUSH
46370: LD_INT 10
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: PPUSH
46383: CALL_OW 69
46387: NOT
46388: IFFALSE 46398
// weapon := ru_time_lapser ;
46390: LD_ADDR_VAR 0 18
46394: PUSH
46395: LD_INT 49
46397: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46398: LD_VAR 0 12
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: IN
46413: PUSH
46414: LD_INT 11
46416: PUSH
46417: LD_VAR 0 5
46421: IN
46422: PUSH
46423: LD_INT 30
46425: PUSH
46426: LD_VAR 0 5
46430: IN
46431: OR
46432: AND
46433: PUSH
46434: LD_INT 6
46436: PPUSH
46437: LD_VAR 0 16
46441: PPUSH
46442: CALL_OW 321
46446: PUSH
46447: LD_INT 2
46449: EQUAL
46450: AND
46451: IFFALSE 46616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46453: LD_INT 22
46455: PUSH
46456: LD_VAR 0 16
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 35
46470: PUSH
46471: LD_INT 11
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 35
46480: PUSH
46481: LD_INT 30
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 91
46495: PUSH
46496: LD_VAR 0 1
46500: PUSH
46501: LD_INT 18
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: PPUSH
46514: CALL_OW 69
46518: NOT
46519: PUSH
46520: LD_INT 22
46522: PUSH
46523: LD_VAR 0 16
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: LD_INT 32
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 33
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 91
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_INT 12
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: PPUSH
46584: CALL_OW 69
46588: PUSH
46589: LD_INT 2
46591: GREATER
46592: AND
46593: IFFALSE 46616
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46595: LD_ADDR_VAR 0 18
46599: PUSH
46600: LD_INT 11
46602: PUSH
46603: LD_INT 30
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_VAR 0 12
46614: ARRAY
46615: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46616: LD_VAR 0 18
46620: NOT
46621: PUSH
46622: LD_INT 40
46624: PPUSH
46625: LD_VAR 0 16
46629: PPUSH
46630: CALL_OW 321
46634: PUSH
46635: LD_INT 2
46637: EQUAL
46638: AND
46639: PUSH
46640: LD_INT 7
46642: PUSH
46643: LD_VAR 0 5
46647: IN
46648: PUSH
46649: LD_INT 28
46651: PUSH
46652: LD_VAR 0 5
46656: IN
46657: OR
46658: PUSH
46659: LD_INT 45
46661: PUSH
46662: LD_VAR 0 5
46666: IN
46667: OR
46668: AND
46669: IFFALSE 46923
// begin hex := GetHexInfo ( x , y ) ;
46671: LD_ADDR_VAR 0 4
46675: PUSH
46676: LD_VAR 0 10
46680: PPUSH
46681: LD_VAR 0 11
46685: PPUSH
46686: CALL_OW 546
46690: ST_TO_ADDR
// if hex [ 1 ] then
46691: LD_VAR 0 4
46695: PUSH
46696: LD_INT 1
46698: ARRAY
46699: IFFALSE 46703
// exit ;
46701: GO 47106
// height := hex [ 2 ] ;
46703: LD_ADDR_VAR 0 15
46707: PUSH
46708: LD_VAR 0 4
46712: PUSH
46713: LD_INT 2
46715: ARRAY
46716: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46717: LD_ADDR_VAR 0 14
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 5
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// for i in tmp do
46740: LD_ADDR_VAR 0 8
46744: PUSH
46745: LD_VAR 0 14
46749: PUSH
46750: FOR_IN
46751: IFFALSE 46921
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46753: LD_ADDR_VAR 0 9
46757: PUSH
46758: LD_VAR 0 10
46762: PPUSH
46763: LD_VAR 0 8
46767: PPUSH
46768: LD_INT 5
46770: PPUSH
46771: CALL_OW 272
46775: PUSH
46776: LD_VAR 0 11
46780: PPUSH
46781: LD_VAR 0 8
46785: PPUSH
46786: LD_INT 5
46788: PPUSH
46789: CALL_OW 273
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46798: LD_VAR 0 9
46802: PUSH
46803: LD_INT 1
46805: ARRAY
46806: PPUSH
46807: LD_VAR 0 9
46811: PUSH
46812: LD_INT 2
46814: ARRAY
46815: PPUSH
46816: CALL_OW 488
46820: IFFALSE 46919
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46822: LD_ADDR_VAR 0 4
46826: PUSH
46827: LD_VAR 0 9
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: PPUSH
46836: LD_VAR 0 9
46840: PUSH
46841: LD_INT 2
46843: ARRAY
46844: PPUSH
46845: CALL_OW 546
46849: ST_TO_ADDR
// if hex [ 1 ] then
46850: LD_VAR 0 4
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: IFFALSE 46862
// continue ;
46860: GO 46750
// h := hex [ 2 ] ;
46862: LD_ADDR_VAR 0 13
46866: PUSH
46867: LD_VAR 0 4
46871: PUSH
46872: LD_INT 2
46874: ARRAY
46875: ST_TO_ADDR
// if h + 7 < height then
46876: LD_VAR 0 13
46880: PUSH
46881: LD_INT 7
46883: PLUS
46884: PUSH
46885: LD_VAR 0 15
46889: LESS
46890: IFFALSE 46919
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46892: LD_ADDR_VAR 0 18
46896: PUSH
46897: LD_INT 7
46899: PUSH
46900: LD_INT 28
46902: PUSH
46903: LD_INT 45
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: LD_VAR 0 12
46915: ARRAY
46916: ST_TO_ADDR
// break ;
46917: GO 46921
// end ; end ; end ;
46919: GO 46750
46921: POP
46922: POP
// end ; if not weapon then
46923: LD_VAR 0 18
46927: NOT
46928: IFFALSE 46988
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46930: LD_ADDR_VAR 0 5
46934: PUSH
46935: LD_VAR 0 5
46939: PUSH
46940: LD_INT 11
46942: PUSH
46943: LD_INT 30
46945: PUSH
46946: LD_INT 49
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: DIFF
46954: ST_TO_ADDR
// if not list then
46955: LD_VAR 0 5
46959: NOT
46960: IFFALSE 46964
// exit ;
46962: GO 47106
// weapon := list [ rand ( 1 , list ) ] ;
46964: LD_ADDR_VAR 0 18
46968: PUSH
46969: LD_VAR 0 5
46973: PUSH
46974: LD_INT 1
46976: PPUSH
46977: LD_VAR 0 5
46981: PPUSH
46982: CALL_OW 12
46986: ARRAY
46987: ST_TO_ADDR
// end ; if weapon then
46988: LD_VAR 0 18
46992: IFFALSE 47106
// begin tmp := CostOfWeapon ( weapon ) ;
46994: LD_ADDR_VAR 0 14
46998: PUSH
46999: LD_VAR 0 18
47003: PPUSH
47004: CALL_OW 451
47008: ST_TO_ADDR
// j := GetBase ( tower ) ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 274
47023: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47024: LD_VAR 0 9
47028: PPUSH
47029: LD_INT 1
47031: PPUSH
47032: CALL_OW 275
47036: PUSH
47037: LD_VAR 0 14
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: GREATEREQUAL
47046: PUSH
47047: LD_VAR 0 9
47051: PPUSH
47052: LD_INT 2
47054: PPUSH
47055: CALL_OW 275
47059: PUSH
47060: LD_VAR 0 14
47064: PUSH
47065: LD_INT 2
47067: ARRAY
47068: GREATEREQUAL
47069: AND
47070: PUSH
47071: LD_VAR 0 9
47075: PPUSH
47076: LD_INT 3
47078: PPUSH
47079: CALL_OW 275
47083: PUSH
47084: LD_VAR 0 14
47088: PUSH
47089: LD_INT 3
47091: ARRAY
47092: GREATEREQUAL
47093: AND
47094: IFFALSE 47106
// result := weapon ;
47096: LD_ADDR_VAR 0 3
47100: PUSH
47101: LD_VAR 0 18
47105: ST_TO_ADDR
// end ; end ;
47106: LD_VAR 0 3
47110: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
// result := true ;
47115: LD_ADDR_VAR 0 3
47119: PUSH
47120: LD_INT 1
47122: ST_TO_ADDR
// if array1 = array2 then
47123: LD_VAR 0 1
47127: PUSH
47128: LD_VAR 0 2
47132: EQUAL
47133: IFFALSE 47193
// begin for i = 1 to array1 do
47135: LD_ADDR_VAR 0 4
47139: PUSH
47140: DOUBLE
47141: LD_INT 1
47143: DEC
47144: ST_TO_ADDR
47145: LD_VAR 0 1
47149: PUSH
47150: FOR_TO
47151: IFFALSE 47189
// if array1 [ i ] <> array2 [ i ] then
47153: LD_VAR 0 1
47157: PUSH
47158: LD_VAR 0 4
47162: ARRAY
47163: PUSH
47164: LD_VAR 0 2
47168: PUSH
47169: LD_VAR 0 4
47173: ARRAY
47174: NONEQUAL
47175: IFFALSE 47187
// begin result := false ;
47177: LD_ADDR_VAR 0 3
47181: PUSH
47182: LD_INT 0
47184: ST_TO_ADDR
// break ;
47185: GO 47189
// end ;
47187: GO 47150
47189: POP
47190: POP
// end else
47191: GO 47201
// result := false ;
47193: LD_ADDR_VAR 0 3
47197: PUSH
47198: LD_INT 0
47200: ST_TO_ADDR
// end ;
47201: LD_VAR 0 3
47205: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47206: LD_INT 0
47208: PPUSH
47209: PPUSH
// if not array1 or not array2 then
47210: LD_VAR 0 1
47214: NOT
47215: PUSH
47216: LD_VAR 0 2
47220: NOT
47221: OR
47222: IFFALSE 47226
// exit ;
47224: GO 47290
// result := true ;
47226: LD_ADDR_VAR 0 3
47230: PUSH
47231: LD_INT 1
47233: ST_TO_ADDR
// for i = 1 to array1 do
47234: LD_ADDR_VAR 0 4
47238: PUSH
47239: DOUBLE
47240: LD_INT 1
47242: DEC
47243: ST_TO_ADDR
47244: LD_VAR 0 1
47248: PUSH
47249: FOR_TO
47250: IFFALSE 47288
// if array1 [ i ] <> array2 [ i ] then
47252: LD_VAR 0 1
47256: PUSH
47257: LD_VAR 0 4
47261: ARRAY
47262: PUSH
47263: LD_VAR 0 2
47267: PUSH
47268: LD_VAR 0 4
47272: ARRAY
47273: NONEQUAL
47274: IFFALSE 47286
// begin result := false ;
47276: LD_ADDR_VAR 0 3
47280: PUSH
47281: LD_INT 0
47283: ST_TO_ADDR
// break ;
47284: GO 47288
// end ;
47286: GO 47249
47288: POP
47289: POP
// end ;
47290: LD_VAR 0 3
47294: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47295: LD_INT 0
47297: PPUSH
47298: PPUSH
47299: PPUSH
// pom := GetBase ( fac ) ;
47300: LD_ADDR_VAR 0 5
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: CALL_OW 274
47314: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47315: LD_ADDR_VAR 0 4
47319: PUSH
47320: LD_VAR 0 2
47324: PUSH
47325: LD_INT 1
47327: ARRAY
47328: PPUSH
47329: LD_VAR 0 2
47333: PUSH
47334: LD_INT 2
47336: ARRAY
47337: PPUSH
47338: LD_VAR 0 2
47342: PUSH
47343: LD_INT 3
47345: ARRAY
47346: PPUSH
47347: LD_VAR 0 2
47351: PUSH
47352: LD_INT 4
47354: ARRAY
47355: PPUSH
47356: CALL_OW 449
47360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47361: LD_ADDR_VAR 0 3
47365: PUSH
47366: LD_VAR 0 5
47370: PPUSH
47371: LD_INT 1
47373: PPUSH
47374: CALL_OW 275
47378: PUSH
47379: LD_VAR 0 4
47383: PUSH
47384: LD_INT 1
47386: ARRAY
47387: GREATEREQUAL
47388: PUSH
47389: LD_VAR 0 5
47393: PPUSH
47394: LD_INT 2
47396: PPUSH
47397: CALL_OW 275
47401: PUSH
47402: LD_VAR 0 4
47406: PUSH
47407: LD_INT 2
47409: ARRAY
47410: GREATEREQUAL
47411: AND
47412: PUSH
47413: LD_VAR 0 5
47417: PPUSH
47418: LD_INT 3
47420: PPUSH
47421: CALL_OW 275
47425: PUSH
47426: LD_VAR 0 4
47430: PUSH
47431: LD_INT 3
47433: ARRAY
47434: GREATEREQUAL
47435: AND
47436: ST_TO_ADDR
// end ;
47437: LD_VAR 0 3
47441: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47442: LD_INT 0
47444: PPUSH
47445: PPUSH
47446: PPUSH
47447: PPUSH
// pom := GetBase ( building ) ;
47448: LD_ADDR_VAR 0 3
47452: PUSH
47453: LD_VAR 0 1
47457: PPUSH
47458: CALL_OW 274
47462: ST_TO_ADDR
// if not pom then
47463: LD_VAR 0 3
47467: NOT
47468: IFFALSE 47472
// exit ;
47470: GO 47642
// btype := GetBType ( building ) ;
47472: LD_ADDR_VAR 0 5
47476: PUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: CALL_OW 266
47486: ST_TO_ADDR
// if btype = b_armoury then
47487: LD_VAR 0 5
47491: PUSH
47492: LD_INT 4
47494: EQUAL
47495: IFFALSE 47505
// btype := b_barracks ;
47497: LD_ADDR_VAR 0 5
47501: PUSH
47502: LD_INT 5
47504: ST_TO_ADDR
// if btype = b_depot then
47505: LD_VAR 0 5
47509: PUSH
47510: LD_INT 0
47512: EQUAL
47513: IFFALSE 47523
// btype := b_warehouse ;
47515: LD_ADDR_VAR 0 5
47519: PUSH
47520: LD_INT 1
47522: ST_TO_ADDR
// if btype = b_workshop then
47523: LD_VAR 0 5
47527: PUSH
47528: LD_INT 2
47530: EQUAL
47531: IFFALSE 47541
// btype := b_factory ;
47533: LD_ADDR_VAR 0 5
47537: PUSH
47538: LD_INT 3
47540: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47541: LD_ADDR_VAR 0 4
47545: PUSH
47546: LD_VAR 0 5
47550: PPUSH
47551: LD_VAR 0 1
47555: PPUSH
47556: CALL_OW 248
47560: PPUSH
47561: CALL_OW 450
47565: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47566: LD_ADDR_VAR 0 2
47570: PUSH
47571: LD_VAR 0 3
47575: PPUSH
47576: LD_INT 1
47578: PPUSH
47579: CALL_OW 275
47583: PUSH
47584: LD_VAR 0 4
47588: PUSH
47589: LD_INT 1
47591: ARRAY
47592: GREATEREQUAL
47593: PUSH
47594: LD_VAR 0 3
47598: PPUSH
47599: LD_INT 2
47601: PPUSH
47602: CALL_OW 275
47606: PUSH
47607: LD_VAR 0 4
47611: PUSH
47612: LD_INT 2
47614: ARRAY
47615: GREATEREQUAL
47616: AND
47617: PUSH
47618: LD_VAR 0 3
47622: PPUSH
47623: LD_INT 3
47625: PPUSH
47626: CALL_OW 275
47630: PUSH
47631: LD_VAR 0 4
47635: PUSH
47636: LD_INT 3
47638: ARRAY
47639: GREATEREQUAL
47640: AND
47641: ST_TO_ADDR
// end ;
47642: LD_VAR 0 2
47646: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47647: LD_INT 0
47649: PPUSH
47650: PPUSH
47651: PPUSH
// pom := GetBase ( building ) ;
47652: LD_ADDR_VAR 0 4
47656: PUSH
47657: LD_VAR 0 1
47661: PPUSH
47662: CALL_OW 274
47666: ST_TO_ADDR
// if not pom then
47667: LD_VAR 0 4
47671: NOT
47672: IFFALSE 47676
// exit ;
47674: GO 47777
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47676: LD_ADDR_VAR 0 5
47680: PUSH
47681: LD_VAR 0 2
47685: PPUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 248
47695: PPUSH
47696: CALL_OW 450
47700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47701: LD_ADDR_VAR 0 3
47705: PUSH
47706: LD_VAR 0 4
47710: PPUSH
47711: LD_INT 1
47713: PPUSH
47714: CALL_OW 275
47718: PUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_INT 1
47726: ARRAY
47727: GREATEREQUAL
47728: PUSH
47729: LD_VAR 0 4
47733: PPUSH
47734: LD_INT 2
47736: PPUSH
47737: CALL_OW 275
47741: PUSH
47742: LD_VAR 0 5
47746: PUSH
47747: LD_INT 2
47749: ARRAY
47750: GREATEREQUAL
47751: AND
47752: PUSH
47753: LD_VAR 0 4
47757: PPUSH
47758: LD_INT 3
47760: PPUSH
47761: CALL_OW 275
47765: PUSH
47766: LD_VAR 0 5
47770: PUSH
47771: LD_INT 3
47773: ARRAY
47774: GREATEREQUAL
47775: AND
47776: ST_TO_ADDR
// end ;
47777: LD_VAR 0 3
47781: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47782: LD_INT 0
47784: PPUSH
47785: PPUSH
47786: PPUSH
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
47791: PPUSH
47792: PPUSH
47793: PPUSH
47794: PPUSH
// result := false ;
47795: LD_ADDR_VAR 0 8
47799: PUSH
47800: LD_INT 0
47802: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47803: LD_VAR 0 5
47807: NOT
47808: PUSH
47809: LD_VAR 0 1
47813: NOT
47814: OR
47815: PUSH
47816: LD_VAR 0 2
47820: NOT
47821: OR
47822: PUSH
47823: LD_VAR 0 3
47827: NOT
47828: OR
47829: IFFALSE 47833
// exit ;
47831: GO 48647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47833: LD_ADDR_VAR 0 14
47837: PUSH
47838: LD_VAR 0 1
47842: PPUSH
47843: LD_VAR 0 2
47847: PPUSH
47848: LD_VAR 0 3
47852: PPUSH
47853: LD_VAR 0 4
47857: PPUSH
47858: LD_VAR 0 5
47862: PUSH
47863: LD_INT 1
47865: ARRAY
47866: PPUSH
47867: CALL_OW 248
47871: PPUSH
47872: LD_INT 0
47874: PPUSH
47875: CALL 49484 0 6
47879: ST_TO_ADDR
// if not hexes then
47880: LD_VAR 0 14
47884: NOT
47885: IFFALSE 47889
// exit ;
47887: GO 48647
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47889: LD_ADDR_VAR 0 17
47893: PUSH
47894: LD_VAR 0 5
47898: PPUSH
47899: LD_INT 22
47901: PUSH
47902: LD_VAR 0 13
47906: PPUSH
47907: CALL_OW 255
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 30
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PPUSH
47948: CALL_OW 72
47952: ST_TO_ADDR
// for i = 1 to hexes do
47953: LD_ADDR_VAR 0 9
47957: PUSH
47958: DOUBLE
47959: LD_INT 1
47961: DEC
47962: ST_TO_ADDR
47963: LD_VAR 0 14
47967: PUSH
47968: FOR_TO
47969: IFFALSE 48645
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47971: LD_ADDR_VAR 0 13
47975: PUSH
47976: LD_VAR 0 14
47980: PUSH
47981: LD_VAR 0 9
47985: ARRAY
47986: PUSH
47987: LD_INT 1
47989: ARRAY
47990: PPUSH
47991: LD_VAR 0 14
47995: PUSH
47996: LD_VAR 0 9
48000: ARRAY
48001: PUSH
48002: LD_INT 2
48004: ARRAY
48005: PPUSH
48006: CALL_OW 428
48010: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48011: LD_VAR 0 14
48015: PUSH
48016: LD_VAR 0 9
48020: ARRAY
48021: PUSH
48022: LD_INT 1
48024: ARRAY
48025: PPUSH
48026: LD_VAR 0 14
48030: PUSH
48031: LD_VAR 0 9
48035: ARRAY
48036: PUSH
48037: LD_INT 2
48039: ARRAY
48040: PPUSH
48041: CALL_OW 351
48045: PUSH
48046: LD_VAR 0 14
48050: PUSH
48051: LD_VAR 0 9
48055: ARRAY
48056: PUSH
48057: LD_INT 1
48059: ARRAY
48060: PPUSH
48061: LD_VAR 0 14
48065: PUSH
48066: LD_VAR 0 9
48070: ARRAY
48071: PUSH
48072: LD_INT 2
48074: ARRAY
48075: PPUSH
48076: CALL_OW 488
48080: NOT
48081: OR
48082: PUSH
48083: LD_VAR 0 13
48087: PPUSH
48088: CALL_OW 247
48092: PUSH
48093: LD_INT 3
48095: EQUAL
48096: OR
48097: IFFALSE 48103
// exit ;
48099: POP
48100: POP
48101: GO 48647
// if not tmp then
48103: LD_VAR 0 13
48107: NOT
48108: IFFALSE 48112
// continue ;
48110: GO 47968
// result := true ;
48112: LD_ADDR_VAR 0 8
48116: PUSH
48117: LD_INT 1
48119: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48120: LD_VAR 0 6
48124: PUSH
48125: LD_VAR 0 13
48129: PPUSH
48130: CALL_OW 247
48134: PUSH
48135: LD_INT 2
48137: EQUAL
48138: AND
48139: PUSH
48140: LD_VAR 0 13
48144: PPUSH
48145: CALL_OW 263
48149: PUSH
48150: LD_INT 1
48152: EQUAL
48153: AND
48154: IFFALSE 48318
// begin if IsDrivenBy ( tmp ) then
48156: LD_VAR 0 13
48160: PPUSH
48161: CALL_OW 311
48165: IFFALSE 48169
// continue ;
48167: GO 47968
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48169: LD_VAR 0 6
48173: PPUSH
48174: LD_INT 3
48176: PUSH
48177: LD_INT 60
48179: PUSH
48180: EMPTY
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 55
48192: PUSH
48193: EMPTY
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PPUSH
48204: CALL_OW 72
48208: IFFALSE 48316
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48210: LD_ADDR_VAR 0 18
48214: PUSH
48215: LD_VAR 0 6
48219: PPUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 60
48225: PUSH
48226: EMPTY
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: LD_INT 55
48238: PUSH
48239: EMPTY
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PPUSH
48250: CALL_OW 72
48254: PUSH
48255: LD_INT 1
48257: ARRAY
48258: ST_TO_ADDR
// if IsInUnit ( driver ) then
48259: LD_VAR 0 18
48263: PPUSH
48264: CALL_OW 310
48268: IFFALSE 48279
// ComExit ( driver ) ;
48270: LD_VAR 0 18
48274: PPUSH
48275: CALL 72668 0 1
// AddComEnterUnit ( driver , tmp ) ;
48279: LD_VAR 0 18
48283: PPUSH
48284: LD_VAR 0 13
48288: PPUSH
48289: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48293: LD_VAR 0 18
48297: PPUSH
48298: LD_VAR 0 7
48302: PPUSH
48303: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48307: LD_VAR 0 18
48311: PPUSH
48312: CALL_OW 181
// end ; continue ;
48316: GO 47968
// end ; if not cleaners or not tmp in cleaners then
48318: LD_VAR 0 6
48322: NOT
48323: PUSH
48324: LD_VAR 0 13
48328: PUSH
48329: LD_VAR 0 6
48333: IN
48334: NOT
48335: OR
48336: IFFALSE 48643
// begin if dep then
48338: LD_VAR 0 17
48342: IFFALSE 48478
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48344: LD_ADDR_VAR 0 16
48348: PUSH
48349: LD_VAR 0 17
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PPUSH
48358: CALL_OW 250
48362: PPUSH
48363: LD_VAR 0 17
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: PPUSH
48372: CALL_OW 254
48376: PPUSH
48377: LD_INT 5
48379: PPUSH
48380: CALL_OW 272
48384: PUSH
48385: LD_VAR 0 17
48389: PUSH
48390: LD_INT 1
48392: ARRAY
48393: PPUSH
48394: CALL_OW 251
48398: PPUSH
48399: LD_VAR 0 17
48403: PUSH
48404: LD_INT 1
48406: ARRAY
48407: PPUSH
48408: CALL_OW 254
48412: PPUSH
48413: LD_INT 5
48415: PPUSH
48416: CALL_OW 273
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48425: LD_VAR 0 16
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: PPUSH
48434: LD_VAR 0 16
48438: PUSH
48439: LD_INT 2
48441: ARRAY
48442: PPUSH
48443: CALL_OW 488
48447: IFFALSE 48478
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48449: LD_VAR 0 13
48453: PPUSH
48454: LD_VAR 0 16
48458: PUSH
48459: LD_INT 1
48461: ARRAY
48462: PPUSH
48463: LD_VAR 0 16
48467: PUSH
48468: LD_INT 2
48470: ARRAY
48471: PPUSH
48472: CALL_OW 111
// continue ;
48476: GO 47968
// end ; end ; r := GetDir ( tmp ) ;
48478: LD_ADDR_VAR 0 15
48482: PUSH
48483: LD_VAR 0 13
48487: PPUSH
48488: CALL_OW 254
48492: ST_TO_ADDR
// if r = 5 then
48493: LD_VAR 0 15
48497: PUSH
48498: LD_INT 5
48500: EQUAL
48501: IFFALSE 48511
// r := 0 ;
48503: LD_ADDR_VAR 0 15
48507: PUSH
48508: LD_INT 0
48510: ST_TO_ADDR
// for j = r to 5 do
48511: LD_ADDR_VAR 0 10
48515: PUSH
48516: DOUBLE
48517: LD_VAR 0 15
48521: DEC
48522: ST_TO_ADDR
48523: LD_INT 5
48525: PUSH
48526: FOR_TO
48527: IFFALSE 48641
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48529: LD_ADDR_VAR 0 11
48533: PUSH
48534: LD_VAR 0 13
48538: PPUSH
48539: CALL_OW 250
48543: PPUSH
48544: LD_VAR 0 10
48548: PPUSH
48549: LD_INT 2
48551: PPUSH
48552: CALL_OW 272
48556: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48557: LD_ADDR_VAR 0 12
48561: PUSH
48562: LD_VAR 0 13
48566: PPUSH
48567: CALL_OW 251
48571: PPUSH
48572: LD_VAR 0 10
48576: PPUSH
48577: LD_INT 2
48579: PPUSH
48580: CALL_OW 273
48584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48585: LD_VAR 0 11
48589: PPUSH
48590: LD_VAR 0 12
48594: PPUSH
48595: CALL_OW 488
48599: PUSH
48600: LD_VAR 0 11
48604: PPUSH
48605: LD_VAR 0 12
48609: PPUSH
48610: CALL_OW 428
48614: NOT
48615: AND
48616: IFFALSE 48639
// begin ComMoveXY ( tmp , _x , _y ) ;
48618: LD_VAR 0 13
48622: PPUSH
48623: LD_VAR 0 11
48627: PPUSH
48628: LD_VAR 0 12
48632: PPUSH
48633: CALL_OW 111
// break ;
48637: GO 48641
// end ; end ;
48639: GO 48526
48641: POP
48642: POP
// end ; end ;
48643: GO 47968
48645: POP
48646: POP
// end ;
48647: LD_VAR 0 8
48651: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48652: LD_INT 0
48654: PPUSH
48655: PPUSH
48656: PPUSH
48657: PPUSH
48658: PPUSH
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
// result := false ;
48664: LD_ADDR_VAR 0 6
48668: PUSH
48669: LD_INT 0
48671: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48672: LD_VAR 0 1
48676: NOT
48677: PUSH
48678: LD_VAR 0 1
48682: PPUSH
48683: CALL_OW 266
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: IN
48698: NOT
48699: OR
48700: PUSH
48701: LD_VAR 0 2
48705: NOT
48706: OR
48707: PUSH
48708: LD_VAR 0 5
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 4
48727: PUSH
48728: LD_INT 5
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: IN
48739: NOT
48740: OR
48741: PUSH
48742: LD_VAR 0 3
48746: PPUSH
48747: LD_VAR 0 4
48751: PPUSH
48752: CALL_OW 488
48756: NOT
48757: OR
48758: IFFALSE 48762
// exit ;
48760: GO 49479
// pom := GetBase ( depot ) ;
48762: LD_ADDR_VAR 0 10
48766: PUSH
48767: LD_VAR 0 1
48771: PPUSH
48772: CALL_OW 274
48776: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48777: LD_ADDR_VAR 0 11
48781: PUSH
48782: LD_VAR 0 2
48786: PPUSH
48787: LD_VAR 0 1
48791: PPUSH
48792: CALL_OW 248
48796: PPUSH
48797: CALL_OW 450
48801: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48802: LD_VAR 0 10
48806: PPUSH
48807: LD_INT 1
48809: PPUSH
48810: CALL_OW 275
48814: PUSH
48815: LD_VAR 0 11
48819: PUSH
48820: LD_INT 1
48822: ARRAY
48823: GREATEREQUAL
48824: PUSH
48825: LD_VAR 0 10
48829: PPUSH
48830: LD_INT 2
48832: PPUSH
48833: CALL_OW 275
48837: PUSH
48838: LD_VAR 0 11
48842: PUSH
48843: LD_INT 2
48845: ARRAY
48846: GREATEREQUAL
48847: AND
48848: PUSH
48849: LD_VAR 0 10
48853: PPUSH
48854: LD_INT 3
48856: PPUSH
48857: CALL_OW 275
48861: PUSH
48862: LD_VAR 0 11
48866: PUSH
48867: LD_INT 3
48869: ARRAY
48870: GREATEREQUAL
48871: AND
48872: NOT
48873: IFFALSE 48877
// exit ;
48875: GO 49479
// if GetBType ( depot ) = b_depot then
48877: LD_VAR 0 1
48881: PPUSH
48882: CALL_OW 266
48886: PUSH
48887: LD_INT 0
48889: EQUAL
48890: IFFALSE 48902
// dist := 28 else
48892: LD_ADDR_VAR 0 14
48896: PUSH
48897: LD_INT 28
48899: ST_TO_ADDR
48900: GO 48910
// dist := 36 ;
48902: LD_ADDR_VAR 0 14
48906: PUSH
48907: LD_INT 36
48909: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48910: LD_VAR 0 1
48914: PPUSH
48915: LD_VAR 0 3
48919: PPUSH
48920: LD_VAR 0 4
48924: PPUSH
48925: CALL_OW 297
48929: PUSH
48930: LD_VAR 0 14
48934: GREATER
48935: IFFALSE 48939
// exit ;
48937: GO 49479
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48939: LD_ADDR_VAR 0 12
48943: PUSH
48944: LD_VAR 0 2
48948: PPUSH
48949: LD_VAR 0 3
48953: PPUSH
48954: LD_VAR 0 4
48958: PPUSH
48959: LD_VAR 0 5
48963: PPUSH
48964: LD_VAR 0 1
48968: PPUSH
48969: CALL_OW 248
48973: PPUSH
48974: LD_INT 0
48976: PPUSH
48977: CALL 49484 0 6
48981: ST_TO_ADDR
// if not hexes then
48982: LD_VAR 0 12
48986: NOT
48987: IFFALSE 48991
// exit ;
48989: GO 49479
// hex := GetHexInfo ( x , y ) ;
48991: LD_ADDR_VAR 0 15
48995: PUSH
48996: LD_VAR 0 3
49000: PPUSH
49001: LD_VAR 0 4
49005: PPUSH
49006: CALL_OW 546
49010: ST_TO_ADDR
// if hex [ 1 ] then
49011: LD_VAR 0 15
49015: PUSH
49016: LD_INT 1
49018: ARRAY
49019: IFFALSE 49023
// exit ;
49021: GO 49479
// height := hex [ 2 ] ;
49023: LD_ADDR_VAR 0 13
49027: PUSH
49028: LD_VAR 0 15
49032: PUSH
49033: LD_INT 2
49035: ARRAY
49036: ST_TO_ADDR
// for i = 1 to hexes do
49037: LD_ADDR_VAR 0 7
49041: PUSH
49042: DOUBLE
49043: LD_INT 1
49045: DEC
49046: ST_TO_ADDR
49047: LD_VAR 0 12
49051: PUSH
49052: FOR_TO
49053: IFFALSE 49383
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49055: LD_VAR 0 12
49059: PUSH
49060: LD_VAR 0 7
49064: ARRAY
49065: PUSH
49066: LD_INT 1
49068: ARRAY
49069: PPUSH
49070: LD_VAR 0 12
49074: PUSH
49075: LD_VAR 0 7
49079: ARRAY
49080: PUSH
49081: LD_INT 2
49083: ARRAY
49084: PPUSH
49085: CALL_OW 488
49089: NOT
49090: PUSH
49091: LD_VAR 0 12
49095: PUSH
49096: LD_VAR 0 7
49100: ARRAY
49101: PUSH
49102: LD_INT 1
49104: ARRAY
49105: PPUSH
49106: LD_VAR 0 12
49110: PUSH
49111: LD_VAR 0 7
49115: ARRAY
49116: PUSH
49117: LD_INT 2
49119: ARRAY
49120: PPUSH
49121: CALL_OW 428
49125: PUSH
49126: LD_INT 0
49128: GREATER
49129: OR
49130: PUSH
49131: LD_VAR 0 12
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: PUSH
49142: LD_INT 1
49144: ARRAY
49145: PPUSH
49146: LD_VAR 0 12
49150: PUSH
49151: LD_VAR 0 7
49155: ARRAY
49156: PUSH
49157: LD_INT 2
49159: ARRAY
49160: PPUSH
49161: CALL_OW 351
49165: OR
49166: IFFALSE 49172
// exit ;
49168: POP
49169: POP
49170: GO 49479
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49172: LD_ADDR_VAR 0 8
49176: PUSH
49177: LD_VAR 0 12
49181: PUSH
49182: LD_VAR 0 7
49186: ARRAY
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: LD_VAR 0 12
49196: PUSH
49197: LD_VAR 0 7
49201: ARRAY
49202: PUSH
49203: LD_INT 2
49205: ARRAY
49206: PPUSH
49207: CALL_OW 546
49211: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49212: LD_VAR 0 8
49216: PUSH
49217: LD_INT 1
49219: ARRAY
49220: PUSH
49221: LD_VAR 0 8
49225: PUSH
49226: LD_INT 2
49228: ARRAY
49229: PUSH
49230: LD_VAR 0 13
49234: PUSH
49235: LD_INT 2
49237: PLUS
49238: GREATER
49239: OR
49240: PUSH
49241: LD_VAR 0 8
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PUSH
49250: LD_VAR 0 13
49254: PUSH
49255: LD_INT 2
49257: MINUS
49258: LESS
49259: OR
49260: PUSH
49261: LD_VAR 0 8
49265: PUSH
49266: LD_INT 3
49268: ARRAY
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 8
49275: PUSH
49276: LD_INT 9
49278: PUSH
49279: LD_INT 10
49281: PUSH
49282: LD_INT 11
49284: PUSH
49285: LD_INT 12
49287: PUSH
49288: LD_INT 13
49290: PUSH
49291: LD_INT 16
49293: PUSH
49294: LD_INT 17
49296: PUSH
49297: LD_INT 18
49299: PUSH
49300: LD_INT 19
49302: PUSH
49303: LD_INT 20
49305: PUSH
49306: LD_INT 21
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: IN
49324: NOT
49325: OR
49326: PUSH
49327: LD_VAR 0 8
49331: PUSH
49332: LD_INT 5
49334: ARRAY
49335: NOT
49336: OR
49337: PUSH
49338: LD_VAR 0 8
49342: PUSH
49343: LD_INT 6
49345: ARRAY
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 7
49355: PUSH
49356: LD_INT 9
49358: PUSH
49359: LD_INT 10
49361: PUSH
49362: LD_INT 11
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: IN
49373: NOT
49374: OR
49375: IFFALSE 49381
// exit ;
49377: POP
49378: POP
49379: GO 49479
// end ;
49381: GO 49052
49383: POP
49384: POP
// side := GetSide ( depot ) ;
49385: LD_ADDR_VAR 0 9
49389: PUSH
49390: LD_VAR 0 1
49394: PPUSH
49395: CALL_OW 255
49399: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49400: LD_VAR 0 9
49404: PPUSH
49405: LD_VAR 0 3
49409: PPUSH
49410: LD_VAR 0 4
49414: PPUSH
49415: LD_INT 20
49417: PPUSH
49418: CALL 41800 0 4
49422: PUSH
49423: LD_INT 4
49425: ARRAY
49426: IFFALSE 49430
// exit ;
49428: GO 49479
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49430: LD_VAR 0 2
49434: PUSH
49435: LD_INT 29
49437: PUSH
49438: LD_INT 30
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: IN
49445: PUSH
49446: LD_VAR 0 3
49450: PPUSH
49451: LD_VAR 0 4
49455: PPUSH
49456: LD_VAR 0 9
49460: PPUSH
49461: CALL_OW 440
49465: NOT
49466: AND
49467: IFFALSE 49471
// exit ;
49469: GO 49479
// result := true ;
49471: LD_ADDR_VAR 0 6
49475: PUSH
49476: LD_INT 1
49478: ST_TO_ADDR
// end ;
49479: LD_VAR 0 6
49483: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49484: LD_INT 0
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
49504: PPUSH
49505: PPUSH
49506: PPUSH
49507: PPUSH
49508: PPUSH
49509: PPUSH
49510: PPUSH
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
// result = [ ] ;
49544: LD_ADDR_VAR 0 7
49548: PUSH
49549: EMPTY
49550: ST_TO_ADDR
// temp_list = [ ] ;
49551: LD_ADDR_VAR 0 9
49555: PUSH
49556: EMPTY
49557: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49558: LD_VAR 0 4
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 3
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: IN
49589: NOT
49590: PUSH
49591: LD_VAR 0 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: IN
49606: PUSH
49607: LD_VAR 0 5
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: IN
49626: NOT
49627: AND
49628: OR
49629: IFFALSE 49633
// exit ;
49631: GO 68024
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49633: LD_VAR 0 1
49637: PUSH
49638: LD_INT 6
49640: PUSH
49641: LD_INT 7
49643: PUSH
49644: LD_INT 8
49646: PUSH
49647: LD_INT 13
49649: PUSH
49650: LD_INT 12
49652: PUSH
49653: LD_INT 15
49655: PUSH
49656: LD_INT 11
49658: PUSH
49659: LD_INT 14
49661: PUSH
49662: LD_INT 10
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: IN
49676: IFFALSE 49686
// btype = b_lab ;
49678: LD_ADDR_VAR 0 1
49682: PUSH
49683: LD_INT 6
49685: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49686: LD_VAR 0 6
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: IN
49705: NOT
49706: PUSH
49707: LD_VAR 0 1
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 6
49726: PUSH
49727: LD_INT 36
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: LD_INT 5
49735: PUSH
49736: LD_INT 31
49738: PUSH
49739: LD_INT 32
49741: PUSH
49742: LD_INT 33
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: IN
49758: NOT
49759: PUSH
49760: LD_VAR 0 6
49764: PUSH
49765: LD_INT 1
49767: EQUAL
49768: AND
49769: OR
49770: PUSH
49771: LD_VAR 0 1
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: IN
49786: NOT
49787: PUSH
49788: LD_VAR 0 6
49792: PUSH
49793: LD_INT 2
49795: EQUAL
49796: AND
49797: OR
49798: IFFALSE 49808
// mode = 0 ;
49800: LD_ADDR_VAR 0 6
49804: PUSH
49805: LD_INT 0
49807: ST_TO_ADDR
// case mode of 0 :
49808: LD_VAR 0 6
49812: PUSH
49813: LD_INT 0
49815: DOUBLE
49816: EQUAL
49817: IFTRUE 49821
49819: GO 61274
49821: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49822: LD_ADDR_VAR 0 11
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50015: LD_ADDR_VAR 0 12
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50211: LD_ADDR_VAR 0 13
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 3
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50410: LD_ADDR_VAR 0 14
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 3
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50606: LD_ADDR_VAR 0 15
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50799: LD_ADDR_VAR 0 16
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50992: LD_ADDR_VAR 0 17
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51222: LD_ADDR_VAR 0 18
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51452: LD_ADDR_VAR 0 19
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51682: LD_ADDR_VAR 0 20
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51912: LD_ADDR_VAR 0 21
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52142: LD_ADDR_VAR 0 22
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52372: LD_ADDR_VAR 0 23
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52652: LD_ADDR_VAR 0 24
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52928: LD_ADDR_VAR 0 25
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53202: LD_ADDR_VAR 0 26
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53478: LD_ADDR_VAR 0 27
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 28
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54040: LD_ADDR_VAR 0 29
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54319: LD_ADDR_VAR 0 30
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54597: LD_ADDR_VAR 0 31
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54875: LD_ADDR_VAR 0 32
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55153: LD_ADDR_VAR 0 33
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55432: LD_ADDR_VAR 0 34
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55712: LD_ADDR_VAR 0 35
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55824: LD_ADDR_VAR 0 36
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55936: LD_ADDR_VAR 0 37
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56048: LD_ADDR_VAR 0 38
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56160: LD_ADDR_VAR 0 39
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56272: LD_ADDR_VAR 0 40
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56384: LD_ADDR_VAR 0 41
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56734: LD_ADDR_VAR 0 42
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57084: LD_ADDR_VAR 0 43
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57432: LD_ADDR_VAR 0 44
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57782: LD_ADDR_VAR 0 45
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58132: LD_ADDR_VAR 0 46
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58480: LD_ADDR_VAR 0 47
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58631: LD_ADDR_VAR 0 48
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58778: LD_ADDR_VAR 0 49
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58922: LD_ADDR_VAR 0 50
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59066: LD_ADDR_VAR 0 51
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59213: LD_ADDR_VAR 0 52
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59364: LD_ADDR_VAR 0 53
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59594: LD_ADDR_VAR 0 54
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59824: LD_ADDR_VAR 0 55
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60054: LD_ADDR_VAR 0 56
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60284: LD_ADDR_VAR 0 57
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60514: LD_ADDR_VAR 0 58
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60744: LD_ADDR_VAR 0 59
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60832: LD_ADDR_VAR 0 60
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60920: LD_ADDR_VAR 0 61
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61008: LD_ADDR_VAR 0 62
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61096: LD_ADDR_VAR 0 63
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61184: LD_ADDR_VAR 0 64
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// end ; 1 :
61272: GO 67169
61274: LD_INT 1
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61282
61280: GO 63905
61282: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61283: LD_ADDR_VAR 0 11
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 3
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61327: LD_ADDR_VAR 0 12
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61368: LD_ADDR_VAR 0 13
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61408: LD_ADDR_VAR 0 14
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61449: LD_ADDR_VAR 0 15
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: LIST
61492: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61493: LD_ADDR_VAR 0 16
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61539: LD_ADDR_VAR 0 17
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61583: LD_ADDR_VAR 0 18
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61624: LD_ADDR_VAR 0 19
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61664: LD_ADDR_VAR 0 20
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61705: LD_ADDR_VAR 0 21
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61749: LD_ADDR_VAR 0 22
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61795: LD_ADDR_VAR 0 23
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 4
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: LIST
61838: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61839: LD_ADDR_VAR 0 24
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 4
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61880: LD_ADDR_VAR 0 25
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 4
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61920: LD_ADDR_VAR 0 26
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 4
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61961: LD_ADDR_VAR 0 27
61965: PUSH
61966: LD_INT 3
61968: NEG
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 4
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62005: LD_ADDR_VAR 0 28
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 4
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62051: LD_ADDR_VAR 0 29
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: LD_INT 4
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 5
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 5
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 4
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 6
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 6
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 5
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62206: LD_ADDR_VAR 0 30
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 4
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 4
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 4
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 5
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 5
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 6
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 6
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62349: LD_ADDR_VAR 0 31
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 4
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 4
62396: PUSH
62397: LD_INT 4
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: PUSH
62407: LD_INT 4
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 5
62416: PUSH
62417: LD_INT 4
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: PUSH
62427: LD_INT 5
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 4
62436: PUSH
62437: LD_INT 5
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 6
62446: PUSH
62447: LD_INT 5
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 6
62456: PUSH
62457: LD_INT 6
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 5
62466: PUSH
62467: LD_INT 6
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62488: LD_ADDR_VAR 0 32
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 4
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 4
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 5
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 5
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: LD_INT 4
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 6
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 6
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 5
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62631: LD_ADDR_VAR 0 33
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 3
62660: NEG
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 4
62683: NEG
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 4
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 5
62717: NEG
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 5
62728: NEG
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 5
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 6
62751: NEG
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 6
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62786: LD_ADDR_VAR 0 34
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 3
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: NEG
62818: PUSH
62819: LD_INT 3
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 4
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 4
62841: NEG
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 4
62853: NEG
62854: PUSH
62855: LD_INT 4
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 4
62865: NEG
62866: PUSH
62867: LD_INT 5
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: LD_INT 4
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 5
62889: NEG
62890: PUSH
62891: LD_INT 5
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 5
62901: NEG
62902: PUSH
62903: LD_INT 6
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 6
62913: NEG
62914: PUSH
62915: LD_INT 5
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 6
62925: NEG
62926: PUSH
62927: LD_INT 6
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62949: LD_ADDR_VAR 0 41
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62993: LD_ADDR_VAR 0 42
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63034: LD_ADDR_VAR 0 43
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63074: LD_ADDR_VAR 0 44
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63115: LD_ADDR_VAR 0 45
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63159: LD_ADDR_VAR 0 46
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63205: LD_ADDR_VAR 0 47
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63238: LD_ADDR_VAR 0 48
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63269: LD_ADDR_VAR 0 49
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63298: LD_ADDR_VAR 0 50
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63327: LD_ADDR_VAR 0 51
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63358: LD_ADDR_VAR 0 52
63362: PUSH
63363: LD_INT 3
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63391: LD_ADDR_VAR 0 53
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63435: LD_ADDR_VAR 0 54
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 3
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63476: LD_ADDR_VAR 0 55
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 3
63493: PUSH
63494: LD_INT 3
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: LD_INT 3
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63516: LD_ADDR_VAR 0 56
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63557: LD_ADDR_VAR 0 57
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63601: LD_ADDR_VAR 0 58
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63647: LD_ADDR_VAR 0 59
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: LIST
63690: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63691: LD_ADDR_VAR 0 60
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63732: LD_ADDR_VAR 0 61
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63772: LD_ADDR_VAR 0 62
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63813: LD_ADDR_VAR 0 63
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: LIST
63856: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63857: LD_ADDR_VAR 0 64
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// end ; 2 :
63903: GO 67169
63905: LD_INT 2
63907: DOUBLE
63908: EQUAL
63909: IFTRUE 63913
63911: GO 67168
63913: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63914: LD_ADDR_VAR 0 29
63918: PUSH
63919: LD_INT 4
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 4
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 5
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 5
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 5
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 3
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: LD_INT 4
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 4
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 4
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 4
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 4
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 5
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 5
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: LD_INT 4
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 5
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 2
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 4
64253: NEG
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: NEG
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 4
64276: NEG
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: NEG
64300: PUSH
64301: LD_INT 4
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 4
64311: NEG
64312: PUSH
64313: LD_INT 5
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: LD_INT 4
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: NEG
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: LD_INT 3
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 5
64359: NEG
64360: PUSH
64361: LD_INT 4
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 5
64371: NEG
64372: PUSH
64373: LD_INT 5
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: LD_INT 5
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 5
64395: NEG
64396: PUSH
64397: LD_INT 3
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64452: LD_ADDR_VAR 0 30
64456: PUSH
64457: LD_INT 4
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 5
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 5
64489: PUSH
64490: LD_INT 5
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 4
64499: PUSH
64500: LD_INT 5
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: LD_INT 3
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 5
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 5
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 4
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 4
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 4
64653: NEG
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 3
64665: NEG
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 4
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 5
64698: NEG
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 5
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 5
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 3
64744: NEG
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: NEG
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 4
64804: NEG
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 4
64816: NEG
64817: PUSH
64818: LD_INT 4
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: LD_INT 4
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 4
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 5
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 4
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 3
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: LD_INT 4
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 5
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: LD_INT 5
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64999: LD_ADDR_VAR 0 31
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 4
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: LD_INT 4
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 5
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 5
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: LD_INT 3
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: LD_INT 5
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: NEG
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 4
65178: NEG
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: LD_INT 5
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 3
65225: NEG
65226: PUSH
65227: LD_INT 4
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 3
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 5
65273: NEG
65274: PUSH
65275: LD_INT 5
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: LD_INT 5
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 5
65297: NEG
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 4
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 4
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 5
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 5
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 5
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65549: LD_ADDR_VAR 0 32
65553: PUSH
65554: LD_INT 4
65556: NEG
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: NEG
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: NEG
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 5
65612: NEG
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 5
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 5
65635: NEG
65636: PUSH
65637: LD_INT 2
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 3
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 4
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 4
65718: NEG
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 4
65730: NEG
65731: PUSH
65732: LD_INT 4
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 4
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: NEG
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: LD_INT 4
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 5
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: LD_INT 4
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: LD_INT 5
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 4
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 4
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 4
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 5
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 5
65991: PUSH
65992: LD_INT 5
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 4
66001: PUSH
66002: LD_INT 5
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 5
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 3
66041: PUSH
66042: LD_INT 5
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66096: LD_ADDR_VAR 0 33
66100: PUSH
66101: LD_INT 4
66103: NEG
66104: PUSH
66105: LD_INT 4
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: LD_INT 5
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 3
66127: NEG
66128: PUSH
66129: LD_INT 4
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: NEG
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 4
66151: NEG
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 5
66163: NEG
66164: PUSH
66165: LD_INT 4
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 5
66175: NEG
66176: PUSH
66177: LD_INT 5
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: NEG
66188: PUSH
66189: LD_INT 5
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 3
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 4
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: LD_INT 3
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 4
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: LD_INT 4
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 4
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 4
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 5
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 5
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 5
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 4
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: LD_INT 4
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 4
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: LD_INT 4
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: PUSH
66517: LD_INT 4
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 5
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: LD_INT 3
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: LD_INT 5
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66634: LD_ADDR_VAR 0 34
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 4
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: LD_INT 5
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: LD_INT 4
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: LD_INT 3
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: LD_INT 4
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 2
66731: NEG
66732: PUSH
66733: LD_INT 5
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 4
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 4
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 4
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 4
66836: PUSH
66837: LD_INT 4
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: LD_INT 3
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 5
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 5
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 4
66876: PUSH
66877: LD_INT 5
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 3
66886: PUSH
66887: LD_INT 4
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: PUSH
66897: LD_INT 3
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 5
66906: PUSH
66907: LD_INT 3
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: LD_INT 5
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 3
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 4
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 4
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 2
66998: PUSH
66999: LD_INT 4
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 4
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 3
67042: NEG
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 3
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 4
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 5
67075: NEG
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 5
67086: NEG
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 5
67098: NEG
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: LD_INT 2
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// end ; end ;
67166: GO 67169
67168: POP
// case btype of b_depot , b_warehouse :
67169: LD_VAR 0 1
67173: PUSH
67174: LD_INT 0
67176: DOUBLE
67177: EQUAL
67178: IFTRUE 67188
67180: LD_INT 1
67182: DOUBLE
67183: EQUAL
67184: IFTRUE 67188
67186: GO 67389
67188: POP
// case nation of nation_american :
67189: LD_VAR 0 5
67193: PUSH
67194: LD_INT 1
67196: DOUBLE
67197: EQUAL
67198: IFTRUE 67202
67200: GO 67258
67202: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67203: LD_ADDR_VAR 0 9
67207: PUSH
67208: LD_VAR 0 11
67212: PUSH
67213: LD_VAR 0 12
67217: PUSH
67218: LD_VAR 0 13
67222: PUSH
67223: LD_VAR 0 14
67227: PUSH
67228: LD_VAR 0 15
67232: PUSH
67233: LD_VAR 0 16
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: PUSH
67246: LD_VAR 0 4
67250: PUSH
67251: LD_INT 1
67253: PLUS
67254: ARRAY
67255: ST_TO_ADDR
67256: GO 67387
67258: LD_INT 2
67260: DOUBLE
67261: EQUAL
67262: IFTRUE 67266
67264: GO 67322
67266: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67267: LD_ADDR_VAR 0 9
67271: PUSH
67272: LD_VAR 0 17
67276: PUSH
67277: LD_VAR 0 18
67281: PUSH
67282: LD_VAR 0 19
67286: PUSH
67287: LD_VAR 0 20
67291: PUSH
67292: LD_VAR 0 21
67296: PUSH
67297: LD_VAR 0 22
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: PUSH
67310: LD_VAR 0 4
67314: PUSH
67315: LD_INT 1
67317: PLUS
67318: ARRAY
67319: ST_TO_ADDR
67320: GO 67387
67322: LD_INT 3
67324: DOUBLE
67325: EQUAL
67326: IFTRUE 67330
67328: GO 67386
67330: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67331: LD_ADDR_VAR 0 9
67335: PUSH
67336: LD_VAR 0 23
67340: PUSH
67341: LD_VAR 0 24
67345: PUSH
67346: LD_VAR 0 25
67350: PUSH
67351: LD_VAR 0 26
67355: PUSH
67356: LD_VAR 0 27
67360: PUSH
67361: LD_VAR 0 28
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: PUSH
67374: LD_VAR 0 4
67378: PUSH
67379: LD_INT 1
67381: PLUS
67382: ARRAY
67383: ST_TO_ADDR
67384: GO 67387
67386: POP
67387: GO 67942
67389: LD_INT 2
67391: DOUBLE
67392: EQUAL
67393: IFTRUE 67403
67395: LD_INT 3
67397: DOUBLE
67398: EQUAL
67399: IFTRUE 67403
67401: GO 67459
67403: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67404: LD_ADDR_VAR 0 9
67408: PUSH
67409: LD_VAR 0 29
67413: PUSH
67414: LD_VAR 0 30
67418: PUSH
67419: LD_VAR 0 31
67423: PUSH
67424: LD_VAR 0 32
67428: PUSH
67429: LD_VAR 0 33
67433: PUSH
67434: LD_VAR 0 34
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: PUSH
67447: LD_VAR 0 4
67451: PUSH
67452: LD_INT 1
67454: PLUS
67455: ARRAY
67456: ST_TO_ADDR
67457: GO 67942
67459: LD_INT 16
67461: DOUBLE
67462: EQUAL
67463: IFTRUE 67521
67465: LD_INT 17
67467: DOUBLE
67468: EQUAL
67469: IFTRUE 67521
67471: LD_INT 18
67473: DOUBLE
67474: EQUAL
67475: IFTRUE 67521
67477: LD_INT 19
67479: DOUBLE
67480: EQUAL
67481: IFTRUE 67521
67483: LD_INT 22
67485: DOUBLE
67486: EQUAL
67487: IFTRUE 67521
67489: LD_INT 20
67491: DOUBLE
67492: EQUAL
67493: IFTRUE 67521
67495: LD_INT 21
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67521
67501: LD_INT 23
67503: DOUBLE
67504: EQUAL
67505: IFTRUE 67521
67507: LD_INT 24
67509: DOUBLE
67510: EQUAL
67511: IFTRUE 67521
67513: LD_INT 25
67515: DOUBLE
67516: EQUAL
67517: IFTRUE 67521
67519: GO 67577
67521: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67522: LD_ADDR_VAR 0 9
67526: PUSH
67527: LD_VAR 0 35
67531: PUSH
67532: LD_VAR 0 36
67536: PUSH
67537: LD_VAR 0 37
67541: PUSH
67542: LD_VAR 0 38
67546: PUSH
67547: LD_VAR 0 39
67551: PUSH
67552: LD_VAR 0 40
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: PUSH
67565: LD_VAR 0 4
67569: PUSH
67570: LD_INT 1
67572: PLUS
67573: ARRAY
67574: ST_TO_ADDR
67575: GO 67942
67577: LD_INT 6
67579: DOUBLE
67580: EQUAL
67581: IFTRUE 67633
67583: LD_INT 7
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67633
67589: LD_INT 8
67591: DOUBLE
67592: EQUAL
67593: IFTRUE 67633
67595: LD_INT 13
67597: DOUBLE
67598: EQUAL
67599: IFTRUE 67633
67601: LD_INT 12
67603: DOUBLE
67604: EQUAL
67605: IFTRUE 67633
67607: LD_INT 15
67609: DOUBLE
67610: EQUAL
67611: IFTRUE 67633
67613: LD_INT 11
67615: DOUBLE
67616: EQUAL
67617: IFTRUE 67633
67619: LD_INT 14
67621: DOUBLE
67622: EQUAL
67623: IFTRUE 67633
67625: LD_INT 10
67627: DOUBLE
67628: EQUAL
67629: IFTRUE 67633
67631: GO 67689
67633: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67634: LD_ADDR_VAR 0 9
67638: PUSH
67639: LD_VAR 0 41
67643: PUSH
67644: LD_VAR 0 42
67648: PUSH
67649: LD_VAR 0 43
67653: PUSH
67654: LD_VAR 0 44
67658: PUSH
67659: LD_VAR 0 45
67663: PUSH
67664: LD_VAR 0 46
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: PUSH
67677: LD_VAR 0 4
67681: PUSH
67682: LD_INT 1
67684: PLUS
67685: ARRAY
67686: ST_TO_ADDR
67687: GO 67942
67689: LD_INT 36
67691: DOUBLE
67692: EQUAL
67693: IFTRUE 67697
67695: GO 67753
67697: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67698: LD_ADDR_VAR 0 9
67702: PUSH
67703: LD_VAR 0 47
67707: PUSH
67708: LD_VAR 0 48
67712: PUSH
67713: LD_VAR 0 49
67717: PUSH
67718: LD_VAR 0 50
67722: PUSH
67723: LD_VAR 0 51
67727: PUSH
67728: LD_VAR 0 52
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: LD_VAR 0 4
67745: PUSH
67746: LD_INT 1
67748: PLUS
67749: ARRAY
67750: ST_TO_ADDR
67751: GO 67942
67753: LD_INT 4
67755: DOUBLE
67756: EQUAL
67757: IFTRUE 67779
67759: LD_INT 5
67761: DOUBLE
67762: EQUAL
67763: IFTRUE 67779
67765: LD_INT 34
67767: DOUBLE
67768: EQUAL
67769: IFTRUE 67779
67771: LD_INT 37
67773: DOUBLE
67774: EQUAL
67775: IFTRUE 67779
67777: GO 67835
67779: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67780: LD_ADDR_VAR 0 9
67784: PUSH
67785: LD_VAR 0 53
67789: PUSH
67790: LD_VAR 0 54
67794: PUSH
67795: LD_VAR 0 55
67799: PUSH
67800: LD_VAR 0 56
67804: PUSH
67805: LD_VAR 0 57
67809: PUSH
67810: LD_VAR 0 58
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: PUSH
67823: LD_VAR 0 4
67827: PUSH
67828: LD_INT 1
67830: PLUS
67831: ARRAY
67832: ST_TO_ADDR
67833: GO 67942
67835: LD_INT 31
67837: DOUBLE
67838: EQUAL
67839: IFTRUE 67885
67841: LD_INT 32
67843: DOUBLE
67844: EQUAL
67845: IFTRUE 67885
67847: LD_INT 33
67849: DOUBLE
67850: EQUAL
67851: IFTRUE 67885
67853: LD_INT 27
67855: DOUBLE
67856: EQUAL
67857: IFTRUE 67885
67859: LD_INT 26
67861: DOUBLE
67862: EQUAL
67863: IFTRUE 67885
67865: LD_INT 28
67867: DOUBLE
67868: EQUAL
67869: IFTRUE 67885
67871: LD_INT 29
67873: DOUBLE
67874: EQUAL
67875: IFTRUE 67885
67877: LD_INT 30
67879: DOUBLE
67880: EQUAL
67881: IFTRUE 67885
67883: GO 67941
67885: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67886: LD_ADDR_VAR 0 9
67890: PUSH
67891: LD_VAR 0 59
67895: PUSH
67896: LD_VAR 0 60
67900: PUSH
67901: LD_VAR 0 61
67905: PUSH
67906: LD_VAR 0 62
67910: PUSH
67911: LD_VAR 0 63
67915: PUSH
67916: LD_VAR 0 64
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: PUSH
67929: LD_VAR 0 4
67933: PUSH
67934: LD_INT 1
67936: PLUS
67937: ARRAY
67938: ST_TO_ADDR
67939: GO 67942
67941: POP
// temp_list2 = [ ] ;
67942: LD_ADDR_VAR 0 10
67946: PUSH
67947: EMPTY
67948: ST_TO_ADDR
// for i in temp_list do
67949: LD_ADDR_VAR 0 8
67953: PUSH
67954: LD_VAR 0 9
67958: PUSH
67959: FOR_IN
67960: IFFALSE 68012
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67962: LD_ADDR_VAR 0 10
67966: PUSH
67967: LD_VAR 0 10
67971: PUSH
67972: LD_VAR 0 8
67976: PUSH
67977: LD_INT 1
67979: ARRAY
67980: PUSH
67981: LD_VAR 0 2
67985: PLUS
67986: PUSH
67987: LD_VAR 0 8
67991: PUSH
67992: LD_INT 2
67994: ARRAY
67995: PUSH
67996: LD_VAR 0 3
68000: PLUS
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: ADD
68009: ST_TO_ADDR
68010: GO 67959
68012: POP
68013: POP
// result = temp_list2 ;
68014: LD_ADDR_VAR 0 7
68018: PUSH
68019: LD_VAR 0 10
68023: ST_TO_ADDR
// end ;
68024: LD_VAR 0 7
68028: RET
// export function EnemyInRange ( unit , dist ) ; begin
68029: LD_INT 0
68031: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68032: LD_ADDR_VAR 0 3
68036: PUSH
68037: LD_VAR 0 1
68041: PPUSH
68042: CALL_OW 255
68046: PPUSH
68047: LD_VAR 0 1
68051: PPUSH
68052: CALL_OW 250
68056: PPUSH
68057: LD_VAR 0 1
68061: PPUSH
68062: CALL_OW 251
68066: PPUSH
68067: LD_VAR 0 2
68071: PPUSH
68072: CALL 41800 0 4
68076: PUSH
68077: LD_INT 4
68079: ARRAY
68080: ST_TO_ADDR
// end ;
68081: LD_VAR 0 3
68085: RET
// export function PlayerSeeMe ( unit ) ; begin
68086: LD_INT 0
68088: PPUSH
// result := See ( your_side , unit ) ;
68089: LD_ADDR_VAR 0 2
68093: PUSH
68094: LD_OWVAR 2
68098: PPUSH
68099: LD_VAR 0 1
68103: PPUSH
68104: CALL_OW 292
68108: ST_TO_ADDR
// end ;
68109: LD_VAR 0 2
68113: RET
// export function ReverseDir ( unit ) ; begin
68114: LD_INT 0
68116: PPUSH
// if not unit then
68117: LD_VAR 0 1
68121: NOT
68122: IFFALSE 68126
// exit ;
68124: GO 68149
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68126: LD_ADDR_VAR 0 2
68130: PUSH
68131: LD_VAR 0 1
68135: PPUSH
68136: CALL_OW 254
68140: PUSH
68141: LD_INT 3
68143: PLUS
68144: PUSH
68145: LD_INT 6
68147: MOD
68148: ST_TO_ADDR
// end ;
68149: LD_VAR 0 2
68153: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68154: LD_INT 0
68156: PPUSH
68157: PPUSH
68158: PPUSH
68159: PPUSH
68160: PPUSH
// if not hexes then
68161: LD_VAR 0 2
68165: NOT
68166: IFFALSE 68170
// exit ;
68168: GO 68318
// dist := 9999 ;
68170: LD_ADDR_VAR 0 5
68174: PUSH
68175: LD_INT 9999
68177: ST_TO_ADDR
// for i = 1 to hexes do
68178: LD_ADDR_VAR 0 4
68182: PUSH
68183: DOUBLE
68184: LD_INT 1
68186: DEC
68187: ST_TO_ADDR
68188: LD_VAR 0 2
68192: PUSH
68193: FOR_TO
68194: IFFALSE 68306
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68196: LD_VAR 0 1
68200: PPUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_VAR 0 4
68210: ARRAY
68211: PUSH
68212: LD_INT 1
68214: ARRAY
68215: PPUSH
68216: LD_VAR 0 2
68220: PUSH
68221: LD_VAR 0 4
68225: ARRAY
68226: PUSH
68227: LD_INT 2
68229: ARRAY
68230: PPUSH
68231: CALL_OW 297
68235: PUSH
68236: LD_VAR 0 5
68240: LESS
68241: IFFALSE 68304
// begin hex := hexes [ i ] ;
68243: LD_ADDR_VAR 0 7
68247: PUSH
68248: LD_VAR 0 2
68252: PUSH
68253: LD_VAR 0 4
68257: ARRAY
68258: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68259: LD_ADDR_VAR 0 5
68263: PUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 2
68273: PUSH
68274: LD_VAR 0 4
68278: ARRAY
68279: PUSH
68280: LD_INT 1
68282: ARRAY
68283: PPUSH
68284: LD_VAR 0 2
68288: PUSH
68289: LD_VAR 0 4
68293: ARRAY
68294: PUSH
68295: LD_INT 2
68297: ARRAY
68298: PPUSH
68299: CALL_OW 297
68303: ST_TO_ADDR
// end ; end ;
68304: GO 68193
68306: POP
68307: POP
// result := hex ;
68308: LD_ADDR_VAR 0 3
68312: PUSH
68313: LD_VAR 0 7
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 3
68322: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68323: LD_INT 0
68325: PPUSH
68326: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68327: LD_VAR 0 1
68331: NOT
68332: PUSH
68333: LD_VAR 0 1
68337: PUSH
68338: LD_INT 21
68340: PUSH
68341: LD_INT 2
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 23
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PPUSH
68362: CALL_OW 69
68366: IN
68367: NOT
68368: OR
68369: IFFALSE 68373
// exit ;
68371: GO 68420
// for i = 1 to 3 do
68373: LD_ADDR_VAR 0 3
68377: PUSH
68378: DOUBLE
68379: LD_INT 1
68381: DEC
68382: ST_TO_ADDR
68383: LD_INT 3
68385: PUSH
68386: FOR_TO
68387: IFFALSE 68418
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68389: LD_VAR 0 1
68393: PPUSH
68394: CALL_OW 250
68398: PPUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: CALL_OW 251
68408: PPUSH
68409: LD_INT 1
68411: PPUSH
68412: CALL_OW 453
68416: GO 68386
68418: POP
68419: POP
// end ;
68420: LD_VAR 0 2
68424: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68425: LD_INT 0
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68433: LD_VAR 0 1
68437: NOT
68438: PUSH
68439: LD_VAR 0 2
68443: NOT
68444: OR
68445: PUSH
68446: LD_VAR 0 1
68450: PPUSH
68451: CALL_OW 314
68455: OR
68456: IFFALSE 68460
// exit ;
68458: GO 68901
// x := GetX ( enemy_unit ) ;
68460: LD_ADDR_VAR 0 7
68464: PUSH
68465: LD_VAR 0 2
68469: PPUSH
68470: CALL_OW 250
68474: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68475: LD_ADDR_VAR 0 8
68479: PUSH
68480: LD_VAR 0 2
68484: PPUSH
68485: CALL_OW 251
68489: ST_TO_ADDR
// if not x or not y then
68490: LD_VAR 0 7
68494: NOT
68495: PUSH
68496: LD_VAR 0 8
68500: NOT
68501: OR
68502: IFFALSE 68506
// exit ;
68504: GO 68901
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68506: LD_ADDR_VAR 0 6
68510: PUSH
68511: LD_VAR 0 7
68515: PPUSH
68516: LD_INT 0
68518: PPUSH
68519: LD_INT 4
68521: PPUSH
68522: CALL_OW 272
68526: PUSH
68527: LD_VAR 0 8
68531: PPUSH
68532: LD_INT 0
68534: PPUSH
68535: LD_INT 4
68537: PPUSH
68538: CALL_OW 273
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_VAR 0 7
68551: PPUSH
68552: LD_INT 1
68554: PPUSH
68555: LD_INT 4
68557: PPUSH
68558: CALL_OW 272
68562: PUSH
68563: LD_VAR 0 8
68567: PPUSH
68568: LD_INT 1
68570: PPUSH
68571: LD_INT 4
68573: PPUSH
68574: CALL_OW 273
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_VAR 0 7
68587: PPUSH
68588: LD_INT 2
68590: PPUSH
68591: LD_INT 4
68593: PPUSH
68594: CALL_OW 272
68598: PUSH
68599: LD_VAR 0 8
68603: PPUSH
68604: LD_INT 2
68606: PPUSH
68607: LD_INT 4
68609: PPUSH
68610: CALL_OW 273
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_VAR 0 7
68623: PPUSH
68624: LD_INT 3
68626: PPUSH
68627: LD_INT 4
68629: PPUSH
68630: CALL_OW 272
68634: PUSH
68635: LD_VAR 0 8
68639: PPUSH
68640: LD_INT 3
68642: PPUSH
68643: LD_INT 4
68645: PPUSH
68646: CALL_OW 273
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 7
68659: PPUSH
68660: LD_INT 4
68662: PPUSH
68663: LD_INT 4
68665: PPUSH
68666: CALL_OW 272
68670: PUSH
68671: LD_VAR 0 8
68675: PPUSH
68676: LD_INT 4
68678: PPUSH
68679: LD_INT 4
68681: PPUSH
68682: CALL_OW 273
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_VAR 0 7
68695: PPUSH
68696: LD_INT 5
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: CALL_OW 272
68706: PUSH
68707: LD_VAR 0 8
68711: PPUSH
68712: LD_INT 5
68714: PPUSH
68715: LD_INT 4
68717: PPUSH
68718: CALL_OW 273
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: ST_TO_ADDR
// for i = tmp downto 1 do
68735: LD_ADDR_VAR 0 4
68739: PUSH
68740: DOUBLE
68741: LD_VAR 0 6
68745: INC
68746: ST_TO_ADDR
68747: LD_INT 1
68749: PUSH
68750: FOR_DOWNTO
68751: IFFALSE 68852
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68753: LD_VAR 0 6
68757: PUSH
68758: LD_VAR 0 4
68762: ARRAY
68763: PUSH
68764: LD_INT 1
68766: ARRAY
68767: PPUSH
68768: LD_VAR 0 6
68772: PUSH
68773: LD_VAR 0 4
68777: ARRAY
68778: PUSH
68779: LD_INT 2
68781: ARRAY
68782: PPUSH
68783: CALL_OW 488
68787: NOT
68788: PUSH
68789: LD_VAR 0 6
68793: PUSH
68794: LD_VAR 0 4
68798: ARRAY
68799: PUSH
68800: LD_INT 1
68802: ARRAY
68803: PPUSH
68804: LD_VAR 0 6
68808: PUSH
68809: LD_VAR 0 4
68813: ARRAY
68814: PUSH
68815: LD_INT 2
68817: ARRAY
68818: PPUSH
68819: CALL_OW 428
68823: PUSH
68824: LD_INT 0
68826: NONEQUAL
68827: OR
68828: IFFALSE 68850
// tmp := Delete ( tmp , i ) ;
68830: LD_ADDR_VAR 0 6
68834: PUSH
68835: LD_VAR 0 6
68839: PPUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: CALL_OW 3
68849: ST_TO_ADDR
68850: GO 68750
68852: POP
68853: POP
// j := GetClosestHex ( unit , tmp ) ;
68854: LD_ADDR_VAR 0 5
68858: PUSH
68859: LD_VAR 0 1
68863: PPUSH
68864: LD_VAR 0 6
68868: PPUSH
68869: CALL 68154 0 2
68873: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68874: LD_VAR 0 1
68878: PPUSH
68879: LD_VAR 0 5
68883: PUSH
68884: LD_INT 1
68886: ARRAY
68887: PPUSH
68888: LD_VAR 0 5
68892: PUSH
68893: LD_INT 2
68895: ARRAY
68896: PPUSH
68897: CALL_OW 111
// end ;
68901: LD_VAR 0 3
68905: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68906: LD_INT 0
68908: PPUSH
68909: PPUSH
68910: PPUSH
// uc_side = 0 ;
68911: LD_ADDR_OWVAR 20
68915: PUSH
68916: LD_INT 0
68918: ST_TO_ADDR
// uc_nation = 0 ;
68919: LD_ADDR_OWVAR 21
68923: PUSH
68924: LD_INT 0
68926: ST_TO_ADDR
// InitHc_All ( ) ;
68927: CALL_OW 584
// InitVc ;
68931: CALL_OW 20
// if mastodonts then
68935: LD_VAR 0 6
68939: IFFALSE 69006
// for i = 1 to mastodonts do
68941: LD_ADDR_VAR 0 11
68945: PUSH
68946: DOUBLE
68947: LD_INT 1
68949: DEC
68950: ST_TO_ADDR
68951: LD_VAR 0 6
68955: PUSH
68956: FOR_TO
68957: IFFALSE 69004
// begin vc_chassis := 31 ;
68959: LD_ADDR_OWVAR 37
68963: PUSH
68964: LD_INT 31
68966: ST_TO_ADDR
// vc_control := control_rider ;
68967: LD_ADDR_OWVAR 38
68971: PUSH
68972: LD_INT 4
68974: ST_TO_ADDR
// animal := CreateVehicle ;
68975: LD_ADDR_VAR 0 12
68979: PUSH
68980: CALL_OW 45
68984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68985: LD_VAR 0 12
68989: PPUSH
68990: LD_VAR 0 8
68994: PPUSH
68995: LD_INT 0
68997: PPUSH
68998: CALL 71194 0 3
// end ;
69002: GO 68956
69004: POP
69005: POP
// if horses then
69006: LD_VAR 0 5
69010: IFFALSE 69077
// for i = 1 to horses do
69012: LD_ADDR_VAR 0 11
69016: PUSH
69017: DOUBLE
69018: LD_INT 1
69020: DEC
69021: ST_TO_ADDR
69022: LD_VAR 0 5
69026: PUSH
69027: FOR_TO
69028: IFFALSE 69075
// begin hc_class := 21 ;
69030: LD_ADDR_OWVAR 28
69034: PUSH
69035: LD_INT 21
69037: ST_TO_ADDR
// hc_gallery :=  ;
69038: LD_ADDR_OWVAR 33
69042: PUSH
69043: LD_STRING 
69045: ST_TO_ADDR
// animal := CreateHuman ;
69046: LD_ADDR_VAR 0 12
69050: PUSH
69051: CALL_OW 44
69055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69056: LD_VAR 0 12
69060: PPUSH
69061: LD_VAR 0 8
69065: PPUSH
69066: LD_INT 0
69068: PPUSH
69069: CALL 71194 0 3
// end ;
69073: GO 69027
69075: POP
69076: POP
// if birds then
69077: LD_VAR 0 1
69081: IFFALSE 69148
// for i = 1 to birds do
69083: LD_ADDR_VAR 0 11
69087: PUSH
69088: DOUBLE
69089: LD_INT 1
69091: DEC
69092: ST_TO_ADDR
69093: LD_VAR 0 1
69097: PUSH
69098: FOR_TO
69099: IFFALSE 69146
// begin hc_class = 18 ;
69101: LD_ADDR_OWVAR 28
69105: PUSH
69106: LD_INT 18
69108: ST_TO_ADDR
// hc_gallery =  ;
69109: LD_ADDR_OWVAR 33
69113: PUSH
69114: LD_STRING 
69116: ST_TO_ADDR
// animal := CreateHuman ;
69117: LD_ADDR_VAR 0 12
69121: PUSH
69122: CALL_OW 44
69126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69127: LD_VAR 0 12
69131: PPUSH
69132: LD_VAR 0 8
69136: PPUSH
69137: LD_INT 0
69139: PPUSH
69140: CALL 71194 0 3
// end ;
69144: GO 69098
69146: POP
69147: POP
// if tigers then
69148: LD_VAR 0 2
69152: IFFALSE 69236
// for i = 1 to tigers do
69154: LD_ADDR_VAR 0 11
69158: PUSH
69159: DOUBLE
69160: LD_INT 1
69162: DEC
69163: ST_TO_ADDR
69164: LD_VAR 0 2
69168: PUSH
69169: FOR_TO
69170: IFFALSE 69234
// begin hc_class = class_tiger ;
69172: LD_ADDR_OWVAR 28
69176: PUSH
69177: LD_INT 14
69179: ST_TO_ADDR
// hc_gallery =  ;
69180: LD_ADDR_OWVAR 33
69184: PUSH
69185: LD_STRING 
69187: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69188: LD_ADDR_OWVAR 35
69192: PUSH
69193: LD_INT 7
69195: NEG
69196: PPUSH
69197: LD_INT 7
69199: PPUSH
69200: CALL_OW 12
69204: ST_TO_ADDR
// animal := CreateHuman ;
69205: LD_ADDR_VAR 0 12
69209: PUSH
69210: CALL_OW 44
69214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69215: LD_VAR 0 12
69219: PPUSH
69220: LD_VAR 0 8
69224: PPUSH
69225: LD_INT 0
69227: PPUSH
69228: CALL 71194 0 3
// end ;
69232: GO 69169
69234: POP
69235: POP
// if apemans then
69236: LD_VAR 0 3
69240: IFFALSE 69363
// for i = 1 to apemans do
69242: LD_ADDR_VAR 0 11
69246: PUSH
69247: DOUBLE
69248: LD_INT 1
69250: DEC
69251: ST_TO_ADDR
69252: LD_VAR 0 3
69256: PUSH
69257: FOR_TO
69258: IFFALSE 69361
// begin hc_class = class_apeman ;
69260: LD_ADDR_OWVAR 28
69264: PUSH
69265: LD_INT 12
69267: ST_TO_ADDR
// hc_gallery =  ;
69268: LD_ADDR_OWVAR 33
69272: PUSH
69273: LD_STRING 
69275: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69276: LD_ADDR_OWVAR 35
69280: PUSH
69281: LD_INT 5
69283: NEG
69284: PPUSH
69285: LD_INT 5
69287: PPUSH
69288: CALL_OW 12
69292: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69293: LD_ADDR_OWVAR 31
69297: PUSH
69298: LD_INT 1
69300: PPUSH
69301: LD_INT 3
69303: PPUSH
69304: CALL_OW 12
69308: PUSH
69309: LD_INT 1
69311: PPUSH
69312: LD_INT 3
69314: PPUSH
69315: CALL_OW 12
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: ST_TO_ADDR
// animal := CreateHuman ;
69332: LD_ADDR_VAR 0 12
69336: PUSH
69337: CALL_OW 44
69341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69342: LD_VAR 0 12
69346: PPUSH
69347: LD_VAR 0 8
69351: PPUSH
69352: LD_INT 0
69354: PPUSH
69355: CALL 71194 0 3
// end ;
69359: GO 69257
69361: POP
69362: POP
// if enchidnas then
69363: LD_VAR 0 4
69367: IFFALSE 69434
// for i = 1 to enchidnas do
69369: LD_ADDR_VAR 0 11
69373: PUSH
69374: DOUBLE
69375: LD_INT 1
69377: DEC
69378: ST_TO_ADDR
69379: LD_VAR 0 4
69383: PUSH
69384: FOR_TO
69385: IFFALSE 69432
// begin hc_class = 13 ;
69387: LD_ADDR_OWVAR 28
69391: PUSH
69392: LD_INT 13
69394: ST_TO_ADDR
// hc_gallery =  ;
69395: LD_ADDR_OWVAR 33
69399: PUSH
69400: LD_STRING 
69402: ST_TO_ADDR
// animal := CreateHuman ;
69403: LD_ADDR_VAR 0 12
69407: PUSH
69408: CALL_OW 44
69412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69413: LD_VAR 0 12
69417: PPUSH
69418: LD_VAR 0 8
69422: PPUSH
69423: LD_INT 0
69425: PPUSH
69426: CALL 71194 0 3
// end ;
69430: GO 69384
69432: POP
69433: POP
// if fishes then
69434: LD_VAR 0 7
69438: IFFALSE 69505
// for i = 1 to fishes do
69440: LD_ADDR_VAR 0 11
69444: PUSH
69445: DOUBLE
69446: LD_INT 1
69448: DEC
69449: ST_TO_ADDR
69450: LD_VAR 0 7
69454: PUSH
69455: FOR_TO
69456: IFFALSE 69503
// begin hc_class = 20 ;
69458: LD_ADDR_OWVAR 28
69462: PUSH
69463: LD_INT 20
69465: ST_TO_ADDR
// hc_gallery =  ;
69466: LD_ADDR_OWVAR 33
69470: PUSH
69471: LD_STRING 
69473: ST_TO_ADDR
// animal := CreateHuman ;
69474: LD_ADDR_VAR 0 12
69478: PUSH
69479: CALL_OW 44
69483: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69484: LD_VAR 0 12
69488: PPUSH
69489: LD_VAR 0 9
69493: PPUSH
69494: LD_INT 0
69496: PPUSH
69497: CALL 71194 0 3
// end ;
69501: GO 69455
69503: POP
69504: POP
// end ;
69505: LD_VAR 0 10
69509: RET
// export function WantHeal ( sci , unit ) ; begin
69510: LD_INT 0
69512: PPUSH
// if GetTaskList ( sci ) > 0 then
69513: LD_VAR 0 1
69517: PPUSH
69518: CALL_OW 437
69522: PUSH
69523: LD_INT 0
69525: GREATER
69526: IFFALSE 69596
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69528: LD_VAR 0 1
69532: PPUSH
69533: CALL_OW 437
69537: PUSH
69538: LD_INT 1
69540: ARRAY
69541: PUSH
69542: LD_INT 1
69544: ARRAY
69545: PUSH
69546: LD_STRING l
69548: EQUAL
69549: PUSH
69550: LD_VAR 0 1
69554: PPUSH
69555: CALL_OW 437
69559: PUSH
69560: LD_INT 1
69562: ARRAY
69563: PUSH
69564: LD_INT 4
69566: ARRAY
69567: PUSH
69568: LD_VAR 0 2
69572: EQUAL
69573: AND
69574: IFFALSE 69586
// result := true else
69576: LD_ADDR_VAR 0 3
69580: PUSH
69581: LD_INT 1
69583: ST_TO_ADDR
69584: GO 69594
// result := false ;
69586: LD_ADDR_VAR 0 3
69590: PUSH
69591: LD_INT 0
69593: ST_TO_ADDR
// end else
69594: GO 69604
// result := false ;
69596: LD_ADDR_VAR 0 3
69600: PUSH
69601: LD_INT 0
69603: ST_TO_ADDR
// end ;
69604: LD_VAR 0 3
69608: RET
// export function HealTarget ( sci ) ; begin
69609: LD_INT 0
69611: PPUSH
// if not sci then
69612: LD_VAR 0 1
69616: NOT
69617: IFFALSE 69621
// exit ;
69619: GO 69686
// result := 0 ;
69621: LD_ADDR_VAR 0 2
69625: PUSH
69626: LD_INT 0
69628: ST_TO_ADDR
// if GetTaskList ( sci ) then
69629: LD_VAR 0 1
69633: PPUSH
69634: CALL_OW 437
69638: IFFALSE 69686
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69640: LD_VAR 0 1
69644: PPUSH
69645: CALL_OW 437
69649: PUSH
69650: LD_INT 1
69652: ARRAY
69653: PUSH
69654: LD_INT 1
69656: ARRAY
69657: PUSH
69658: LD_STRING l
69660: EQUAL
69661: IFFALSE 69686
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69663: LD_ADDR_VAR 0 2
69667: PUSH
69668: LD_VAR 0 1
69672: PPUSH
69673: CALL_OW 437
69677: PUSH
69678: LD_INT 1
69680: ARRAY
69681: PUSH
69682: LD_INT 4
69684: ARRAY
69685: ST_TO_ADDR
// end ;
69686: LD_VAR 0 2
69690: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69691: LD_INT 0
69693: PPUSH
69694: PPUSH
69695: PPUSH
69696: PPUSH
// if not base_units then
69697: LD_VAR 0 1
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 69793
// result := false ;
69706: LD_ADDR_VAR 0 2
69710: PUSH
69711: LD_INT 0
69713: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69714: LD_ADDR_VAR 0 5
69718: PUSH
69719: LD_VAR 0 1
69723: PPUSH
69724: LD_INT 21
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PPUSH
69734: CALL_OW 72
69738: ST_TO_ADDR
// if not tmp then
69739: LD_VAR 0 5
69743: NOT
69744: IFFALSE 69748
// exit ;
69746: GO 69793
// for i in tmp do
69748: LD_ADDR_VAR 0 3
69752: PUSH
69753: LD_VAR 0 5
69757: PUSH
69758: FOR_IN
69759: IFFALSE 69791
// begin result := EnemyInRange ( i , 22 ) ;
69761: LD_ADDR_VAR 0 2
69765: PUSH
69766: LD_VAR 0 3
69770: PPUSH
69771: LD_INT 22
69773: PPUSH
69774: CALL 68029 0 2
69778: ST_TO_ADDR
// if result then
69779: LD_VAR 0 2
69783: IFFALSE 69789
// exit ;
69785: POP
69786: POP
69787: GO 69793
// end ;
69789: GO 69758
69791: POP
69792: POP
// end ;
69793: LD_VAR 0 2
69797: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69798: LD_INT 0
69800: PPUSH
69801: PPUSH
// if not units then
69802: LD_VAR 0 1
69806: NOT
69807: IFFALSE 69811
// exit ;
69809: GO 69881
// result := [ ] ;
69811: LD_ADDR_VAR 0 3
69815: PUSH
69816: EMPTY
69817: ST_TO_ADDR
// for i in units do
69818: LD_ADDR_VAR 0 4
69822: PUSH
69823: LD_VAR 0 1
69827: PUSH
69828: FOR_IN
69829: IFFALSE 69879
// if GetTag ( i ) = tag then
69831: LD_VAR 0 4
69835: PPUSH
69836: CALL_OW 110
69840: PUSH
69841: LD_VAR 0 2
69845: EQUAL
69846: IFFALSE 69877
// result := Insert ( result , result + 1 , i ) ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 3
69857: PPUSH
69858: LD_VAR 0 3
69862: PUSH
69863: LD_INT 1
69865: PLUS
69866: PPUSH
69867: LD_VAR 0 4
69871: PPUSH
69872: CALL_OW 2
69876: ST_TO_ADDR
69877: GO 69828
69879: POP
69880: POP
// end ;
69881: LD_VAR 0 3
69885: RET
// export function IsDriver ( un ) ; begin
69886: LD_INT 0
69888: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69889: LD_ADDR_VAR 0 2
69893: PUSH
69894: LD_VAR 0 1
69898: PUSH
69899: LD_INT 55
69901: PUSH
69902: EMPTY
69903: LIST
69904: PPUSH
69905: CALL_OW 69
69909: IN
69910: ST_TO_ADDR
// end ;
69911: LD_VAR 0 2
69915: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
// list := [ ] ;
69920: LD_ADDR_VAR 0 5
69924: PUSH
69925: EMPTY
69926: ST_TO_ADDR
// case d of 0 :
69927: LD_VAR 0 3
69931: PUSH
69932: LD_INT 0
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69940
69938: GO 70073
69940: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69941: LD_ADDR_VAR 0 5
69945: PUSH
69946: LD_VAR 0 1
69950: PUSH
69951: LD_INT 4
69953: MINUS
69954: PUSH
69955: LD_VAR 0 2
69959: PUSH
69960: LD_INT 4
69962: MINUS
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: LD_VAR 0 1
69976: PUSH
69977: LD_INT 3
69979: MINUS
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 4
70001: PLUS
70002: PUSH
70003: LD_VAR 0 2
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: LD_INT 3
70023: PLUS
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 3
70032: PLUS
70033: PUSH
70034: LD_INT 5
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: LD_VAR 0 1
70046: PUSH
70047: LD_VAR 0 2
70051: PUSH
70052: LD_INT 4
70054: PLUS
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// end ; 1 :
70071: GO 70771
70073: LD_INT 1
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70081
70079: GO 70214
70081: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70082: LD_ADDR_VAR 0 5
70086: PUSH
70087: LD_VAR 0 1
70091: PUSH
70092: LD_VAR 0 2
70096: PUSH
70097: LD_INT 4
70099: MINUS
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: LIST
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: LD_INT 3
70116: MINUS
70117: PUSH
70118: LD_VAR 0 2
70122: PUSH
70123: LD_INT 3
70125: MINUS
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 1
70139: PUSH
70140: LD_INT 4
70142: MINUS
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_VAR 0 1
70161: PUSH
70162: LD_VAR 0 2
70166: PUSH
70167: LD_INT 3
70169: PLUS
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: LD_VAR 0 1
70183: PUSH
70184: LD_INT 4
70186: PLUS
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: LD_INT 4
70195: PLUS
70196: PUSH
70197: LD_INT 5
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: ST_TO_ADDR
// end ; 2 :
70212: GO 70771
70214: LD_INT 2
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70222
70220: GO 70351
70222: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70223: LD_ADDR_VAR 0 5
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: LD_VAR 0 2
70237: PUSH
70238: LD_INT 3
70240: MINUS
70241: PUSH
70242: LD_INT 3
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 4
70257: PLUS
70258: PUSH
70259: LD_VAR 0 2
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: LD_VAR 0 1
70276: PUSH
70277: LD_VAR 0 2
70281: PUSH
70282: LD_INT 4
70284: PLUS
70285: PUSH
70286: LD_INT 0
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: LIST
70293: PUSH
70294: LD_VAR 0 1
70298: PUSH
70299: LD_INT 3
70301: MINUS
70302: PUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: LD_VAR 0 1
70320: PUSH
70321: LD_INT 4
70323: MINUS
70324: PUSH
70325: LD_VAR 0 2
70329: PUSH
70330: LD_INT 4
70332: MINUS
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: ST_TO_ADDR
// end ; 3 :
70349: GO 70771
70351: LD_INT 3
70353: DOUBLE
70354: EQUAL
70355: IFTRUE 70359
70357: GO 70492
70359: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70360: LD_ADDR_VAR 0 5
70364: PUSH
70365: LD_VAR 0 1
70369: PUSH
70370: LD_INT 3
70372: PLUS
70373: PUSH
70374: LD_VAR 0 2
70378: PUSH
70379: LD_INT 4
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: PUSH
70387: LD_VAR 0 1
70391: PUSH
70392: LD_INT 4
70394: PLUS
70395: PUSH
70396: LD_VAR 0 2
70400: PUSH
70401: LD_INT 4
70403: PLUS
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: PUSH
70413: LD_VAR 0 1
70417: PUSH
70418: LD_INT 4
70420: MINUS
70421: PUSH
70422: LD_VAR 0 2
70426: PUSH
70427: LD_INT 1
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: PUSH
70435: LD_VAR 0 1
70439: PUSH
70440: LD_VAR 0 2
70444: PUSH
70445: LD_INT 4
70447: MINUS
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: PUSH
70457: LD_VAR 0 1
70461: PUSH
70462: LD_INT 3
70464: MINUS
70465: PUSH
70466: LD_VAR 0 2
70470: PUSH
70471: LD_INT 3
70473: MINUS
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: ST_TO_ADDR
// end ; 4 :
70490: GO 70771
70492: LD_INT 4
70494: DOUBLE
70495: EQUAL
70496: IFTRUE 70500
70498: GO 70633
70500: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70501: LD_ADDR_VAR 0 5
70505: PUSH
70506: LD_VAR 0 1
70510: PUSH
70511: LD_VAR 0 2
70515: PUSH
70516: LD_INT 4
70518: PLUS
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_INT 3
70535: PLUS
70536: PUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_INT 3
70544: PLUS
70545: PUSH
70546: LD_INT 5
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: PUSH
70554: LD_VAR 0 1
70558: PUSH
70559: LD_INT 4
70561: PLUS
70562: PUSH
70563: LD_VAR 0 2
70567: PUSH
70568: LD_INT 4
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 1
70580: PUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_INT 3
70588: MINUS
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: LD_VAR 0 1
70602: PUSH
70603: LD_INT 4
70605: MINUS
70606: PUSH
70607: LD_VAR 0 2
70611: PUSH
70612: LD_INT 4
70614: MINUS
70615: PUSH
70616: LD_INT 2
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: LIST
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: ST_TO_ADDR
// end ; 5 :
70631: GO 70771
70633: LD_INT 5
70635: DOUBLE
70636: EQUAL
70637: IFTRUE 70641
70639: GO 70770
70641: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70642: LD_ADDR_VAR 0 5
70646: PUSH
70647: LD_VAR 0 1
70651: PUSH
70652: LD_INT 4
70654: MINUS
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: PUSH
70669: LD_VAR 0 1
70673: PUSH
70674: LD_VAR 0 2
70678: PUSH
70679: LD_INT 4
70681: MINUS
70682: PUSH
70683: LD_INT 3
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: LIST
70690: PUSH
70691: LD_VAR 0 1
70695: PUSH
70696: LD_INT 4
70698: PLUS
70699: PUSH
70700: LD_VAR 0 2
70704: PUSH
70705: LD_INT 4
70707: PLUS
70708: PUSH
70709: LD_INT 5
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: PUSH
70717: LD_VAR 0 1
70721: PUSH
70722: LD_INT 3
70724: PLUS
70725: PUSH
70726: LD_VAR 0 2
70730: PUSH
70731: LD_INT 4
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: PUSH
70739: LD_VAR 0 1
70743: PUSH
70744: LD_VAR 0 2
70748: PUSH
70749: LD_INT 3
70751: PLUS
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: ST_TO_ADDR
// end ; end ;
70768: GO 70771
70770: POP
// result := list ;
70771: LD_ADDR_VAR 0 4
70775: PUSH
70776: LD_VAR 0 5
70780: ST_TO_ADDR
// end ;
70781: LD_VAR 0 4
70785: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70786: LD_INT 0
70788: PPUSH
70789: PPUSH
70790: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70791: LD_VAR 0 1
70795: NOT
70796: PUSH
70797: LD_VAR 0 2
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: LD_INT 3
70810: PUSH
70811: LD_INT 4
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: IN
70820: NOT
70821: OR
70822: IFFALSE 70826
// exit ;
70824: GO 70918
// tmp := [ ] ;
70826: LD_ADDR_VAR 0 5
70830: PUSH
70831: EMPTY
70832: ST_TO_ADDR
// for i in units do
70833: LD_ADDR_VAR 0 4
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: FOR_IN
70844: IFFALSE 70887
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70846: LD_ADDR_VAR 0 5
70850: PUSH
70851: LD_VAR 0 5
70855: PPUSH
70856: LD_VAR 0 5
70860: PUSH
70861: LD_INT 1
70863: PLUS
70864: PPUSH
70865: LD_VAR 0 4
70869: PPUSH
70870: LD_VAR 0 2
70874: PPUSH
70875: CALL_OW 259
70879: PPUSH
70880: CALL_OW 2
70884: ST_TO_ADDR
70885: GO 70843
70887: POP
70888: POP
// if not tmp then
70889: LD_VAR 0 5
70893: NOT
70894: IFFALSE 70898
// exit ;
70896: GO 70918
// result := SortListByListDesc ( units , tmp ) ;
70898: LD_ADDR_VAR 0 3
70902: PUSH
70903: LD_VAR 0 1
70907: PPUSH
70908: LD_VAR 0 5
70912: PPUSH
70913: CALL_OW 77
70917: ST_TO_ADDR
// end ;
70918: LD_VAR 0 3
70922: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70923: LD_INT 0
70925: PPUSH
70926: PPUSH
70927: PPUSH
// result := false ;
70928: LD_ADDR_VAR 0 3
70932: PUSH
70933: LD_INT 0
70935: ST_TO_ADDR
// x := GetX ( building ) ;
70936: LD_ADDR_VAR 0 4
70940: PUSH
70941: LD_VAR 0 2
70945: PPUSH
70946: CALL_OW 250
70950: ST_TO_ADDR
// y := GetY ( building ) ;
70951: LD_ADDR_VAR 0 5
70955: PUSH
70956: LD_VAR 0 2
70960: PPUSH
70961: CALL_OW 251
70965: ST_TO_ADDR
// if not building or not x or not y then
70966: LD_VAR 0 2
70970: NOT
70971: PUSH
70972: LD_VAR 0 4
70976: NOT
70977: OR
70978: PUSH
70979: LD_VAR 0 5
70983: NOT
70984: OR
70985: IFFALSE 70989
// exit ;
70987: GO 71081
// if GetTaskList ( unit ) then
70989: LD_VAR 0 1
70993: PPUSH
70994: CALL_OW 437
70998: IFFALSE 71081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71000: LD_STRING e
71002: PUSH
71003: LD_VAR 0 1
71007: PPUSH
71008: CALL_OW 437
71012: PUSH
71013: LD_INT 1
71015: ARRAY
71016: PUSH
71017: LD_INT 1
71019: ARRAY
71020: EQUAL
71021: PUSH
71022: LD_VAR 0 4
71026: PUSH
71027: LD_VAR 0 1
71031: PPUSH
71032: CALL_OW 437
71036: PUSH
71037: LD_INT 1
71039: ARRAY
71040: PUSH
71041: LD_INT 2
71043: ARRAY
71044: EQUAL
71045: AND
71046: PUSH
71047: LD_VAR 0 5
71051: PUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: CALL_OW 437
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PUSH
71066: LD_INT 3
71068: ARRAY
71069: EQUAL
71070: AND
71071: IFFALSE 71081
// result := true end ;
71073: LD_ADDR_VAR 0 3
71077: PUSH
71078: LD_INT 1
71080: ST_TO_ADDR
// end ;
71081: LD_VAR 0 3
71085: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71086: LD_INT 0
71088: PPUSH
// result := false ;
71089: LD_ADDR_VAR 0 4
71093: PUSH
71094: LD_INT 0
71096: ST_TO_ADDR
// if GetTaskList ( unit ) then
71097: LD_VAR 0 1
71101: PPUSH
71102: CALL_OW 437
71106: IFFALSE 71189
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71108: LD_STRING M
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: CALL_OW 437
71120: PUSH
71121: LD_INT 1
71123: ARRAY
71124: PUSH
71125: LD_INT 1
71127: ARRAY
71128: EQUAL
71129: PUSH
71130: LD_VAR 0 2
71134: PUSH
71135: LD_VAR 0 1
71139: PPUSH
71140: CALL_OW 437
71144: PUSH
71145: LD_INT 1
71147: ARRAY
71148: PUSH
71149: LD_INT 2
71151: ARRAY
71152: EQUAL
71153: AND
71154: PUSH
71155: LD_VAR 0 3
71159: PUSH
71160: LD_VAR 0 1
71164: PPUSH
71165: CALL_OW 437
71169: PUSH
71170: LD_INT 1
71172: ARRAY
71173: PUSH
71174: LD_INT 3
71176: ARRAY
71177: EQUAL
71178: AND
71179: IFFALSE 71189
// result := true ;
71181: LD_ADDR_VAR 0 4
71185: PUSH
71186: LD_INT 1
71188: ST_TO_ADDR
// end ; end ;
71189: LD_VAR 0 4
71193: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71194: LD_INT 0
71196: PPUSH
71197: PPUSH
71198: PPUSH
71199: PPUSH
// if not unit or not area then
71200: LD_VAR 0 1
71204: NOT
71205: PUSH
71206: LD_VAR 0 2
71210: NOT
71211: OR
71212: IFFALSE 71216
// exit ;
71214: GO 71380
// tmp := AreaToList ( area , i ) ;
71216: LD_ADDR_VAR 0 6
71220: PUSH
71221: LD_VAR 0 2
71225: PPUSH
71226: LD_VAR 0 5
71230: PPUSH
71231: CALL_OW 517
71235: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71236: LD_ADDR_VAR 0 5
71240: PUSH
71241: DOUBLE
71242: LD_INT 1
71244: DEC
71245: ST_TO_ADDR
71246: LD_VAR 0 6
71250: PUSH
71251: LD_INT 1
71253: ARRAY
71254: PUSH
71255: FOR_TO
71256: IFFALSE 71378
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71258: LD_ADDR_VAR 0 7
71262: PUSH
71263: LD_VAR 0 6
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: PUSH
71272: LD_VAR 0 5
71276: ARRAY
71277: PUSH
71278: LD_VAR 0 6
71282: PUSH
71283: LD_INT 2
71285: ARRAY
71286: PUSH
71287: LD_VAR 0 5
71291: ARRAY
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71297: LD_VAR 0 7
71301: PUSH
71302: LD_INT 1
71304: ARRAY
71305: PPUSH
71306: LD_VAR 0 7
71310: PUSH
71311: LD_INT 2
71313: ARRAY
71314: PPUSH
71315: CALL_OW 428
71319: PUSH
71320: LD_INT 0
71322: EQUAL
71323: IFFALSE 71376
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71325: LD_VAR 0 1
71329: PPUSH
71330: LD_VAR 0 7
71334: PUSH
71335: LD_INT 1
71337: ARRAY
71338: PPUSH
71339: LD_VAR 0 7
71343: PUSH
71344: LD_INT 2
71346: ARRAY
71347: PPUSH
71348: LD_VAR 0 3
71352: PPUSH
71353: CALL_OW 48
// result := IsPlaced ( unit ) ;
71357: LD_ADDR_VAR 0 4
71361: PUSH
71362: LD_VAR 0 1
71366: PPUSH
71367: CALL_OW 305
71371: ST_TO_ADDR
// exit ;
71372: POP
71373: POP
71374: GO 71380
// end ; end ;
71376: GO 71255
71378: POP
71379: POP
// end ;
71380: LD_VAR 0 4
71384: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71385: LD_INT 0
71387: PPUSH
71388: PPUSH
71389: PPUSH
// if not side or side > 8 then
71390: LD_VAR 0 1
71394: NOT
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_INT 8
71403: GREATER
71404: OR
71405: IFFALSE 71409
// exit ;
71407: GO 71596
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71409: LD_ADDR_VAR 0 4
71413: PUSH
71414: LD_INT 22
71416: PUSH
71417: LD_VAR 0 1
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 21
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PPUSH
71440: CALL_OW 69
71444: ST_TO_ADDR
// if not tmp then
71445: LD_VAR 0 4
71449: NOT
71450: IFFALSE 71454
// exit ;
71452: GO 71596
// enable_addtolog := true ;
71454: LD_ADDR_OWVAR 81
71458: PUSH
71459: LD_INT 1
71461: ST_TO_ADDR
// AddToLog ( [ ) ;
71462: LD_STRING [
71464: PPUSH
71465: CALL_OW 561
// for i in tmp do
71469: LD_ADDR_VAR 0 3
71473: PUSH
71474: LD_VAR 0 4
71478: PUSH
71479: FOR_IN
71480: IFFALSE 71587
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71482: LD_STRING [
71484: PUSH
71485: LD_VAR 0 3
71489: PPUSH
71490: CALL_OW 266
71494: STR
71495: PUSH
71496: LD_STRING , 
71498: STR
71499: PUSH
71500: LD_VAR 0 3
71504: PPUSH
71505: CALL_OW 250
71509: STR
71510: PUSH
71511: LD_STRING , 
71513: STR
71514: PUSH
71515: LD_VAR 0 3
71519: PPUSH
71520: CALL_OW 251
71524: STR
71525: PUSH
71526: LD_STRING , 
71528: STR
71529: PUSH
71530: LD_VAR 0 3
71534: PPUSH
71535: CALL_OW 254
71539: STR
71540: PUSH
71541: LD_STRING , 
71543: STR
71544: PUSH
71545: LD_VAR 0 3
71549: PPUSH
71550: LD_INT 1
71552: PPUSH
71553: CALL_OW 268
71557: STR
71558: PUSH
71559: LD_STRING , 
71561: STR
71562: PUSH
71563: LD_VAR 0 3
71567: PPUSH
71568: LD_INT 2
71570: PPUSH
71571: CALL_OW 268
71575: STR
71576: PUSH
71577: LD_STRING ],
71579: STR
71580: PPUSH
71581: CALL_OW 561
// end ;
71585: GO 71479
71587: POP
71588: POP
// AddToLog ( ]; ) ;
71589: LD_STRING ];
71591: PPUSH
71592: CALL_OW 561
// end ;
71596: LD_VAR 0 2
71600: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71601: LD_INT 0
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
71607: PPUSH
// if not area or not rate or not max then
71608: LD_VAR 0 1
71612: NOT
71613: PUSH
71614: LD_VAR 0 2
71618: NOT
71619: OR
71620: PUSH
71621: LD_VAR 0 4
71625: NOT
71626: OR
71627: IFFALSE 71631
// exit ;
71629: GO 71823
// while 1 do
71631: LD_INT 1
71633: IFFALSE 71823
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71635: LD_ADDR_VAR 0 9
71639: PUSH
71640: LD_VAR 0 1
71644: PPUSH
71645: LD_INT 1
71647: PPUSH
71648: CALL_OW 287
71652: PUSH
71653: LD_INT 10
71655: MUL
71656: ST_TO_ADDR
// r := rate / 10 ;
71657: LD_ADDR_VAR 0 7
71661: PUSH
71662: LD_VAR 0 2
71666: PUSH
71667: LD_INT 10
71669: DIVREAL
71670: ST_TO_ADDR
// time := 1 1$00 ;
71671: LD_ADDR_VAR 0 8
71675: PUSH
71676: LD_INT 2100
71678: ST_TO_ADDR
// if amount < min then
71679: LD_VAR 0 9
71683: PUSH
71684: LD_VAR 0 3
71688: LESS
71689: IFFALSE 71707
// r := r * 2 else
71691: LD_ADDR_VAR 0 7
71695: PUSH
71696: LD_VAR 0 7
71700: PUSH
71701: LD_INT 2
71703: MUL
71704: ST_TO_ADDR
71705: GO 71733
// if amount > max then
71707: LD_VAR 0 9
71711: PUSH
71712: LD_VAR 0 4
71716: GREATER
71717: IFFALSE 71733
// r := r / 2 ;
71719: LD_ADDR_VAR 0 7
71723: PUSH
71724: LD_VAR 0 7
71728: PUSH
71729: LD_INT 2
71731: DIVREAL
71732: ST_TO_ADDR
// time := time / r ;
71733: LD_ADDR_VAR 0 8
71737: PUSH
71738: LD_VAR 0 8
71742: PUSH
71743: LD_VAR 0 7
71747: DIVREAL
71748: ST_TO_ADDR
// if time < 0 then
71749: LD_VAR 0 8
71753: PUSH
71754: LD_INT 0
71756: LESS
71757: IFFALSE 71774
// time := time * - 1 ;
71759: LD_ADDR_VAR 0 8
71763: PUSH
71764: LD_VAR 0 8
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: MUL
71773: ST_TO_ADDR
// wait ( time ) ;
71774: LD_VAR 0 8
71778: PPUSH
71779: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71783: LD_INT 35
71785: PPUSH
71786: LD_INT 875
71788: PPUSH
71789: CALL_OW 12
71793: PPUSH
71794: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71798: LD_INT 1
71800: PPUSH
71801: LD_INT 5
71803: PPUSH
71804: CALL_OW 12
71808: PPUSH
71809: LD_VAR 0 1
71813: PPUSH
71814: LD_INT 1
71816: PPUSH
71817: CALL_OW 55
// end ;
71821: GO 71631
// end ;
71823: LD_VAR 0 5
71827: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71828: LD_INT 0
71830: PPUSH
71831: PPUSH
71832: PPUSH
71833: PPUSH
71834: PPUSH
71835: PPUSH
71836: PPUSH
71837: PPUSH
// if not turrets or not factories then
71838: LD_VAR 0 1
71842: NOT
71843: PUSH
71844: LD_VAR 0 2
71848: NOT
71849: OR
71850: IFFALSE 71854
// exit ;
71852: GO 72161
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71854: LD_ADDR_VAR 0 10
71858: PUSH
71859: LD_INT 5
71861: PUSH
71862: LD_INT 6
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: LD_INT 4
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: PUSH
71882: LD_INT 5
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 24
71896: PUSH
71897: LD_INT 25
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 23
71906: PUSH
71907: LD_INT 27
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 42
71920: PUSH
71921: LD_INT 43
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 44
71930: PUSH
71931: LD_INT 46
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 45
71940: PUSH
71941: LD_INT 47
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: LIST
71957: ST_TO_ADDR
// result := [ ] ;
71958: LD_ADDR_VAR 0 3
71962: PUSH
71963: EMPTY
71964: ST_TO_ADDR
// for i in turrets do
71965: LD_ADDR_VAR 0 4
71969: PUSH
71970: LD_VAR 0 1
71974: PUSH
71975: FOR_IN
71976: IFFALSE 72159
// begin nat := GetNation ( i ) ;
71978: LD_ADDR_VAR 0 7
71982: PUSH
71983: LD_VAR 0 4
71987: PPUSH
71988: CALL_OW 248
71992: ST_TO_ADDR
// weapon := 0 ;
71993: LD_ADDR_VAR 0 8
71997: PUSH
71998: LD_INT 0
72000: ST_TO_ADDR
// if not nat then
72001: LD_VAR 0 7
72005: NOT
72006: IFFALSE 72010
// continue ;
72008: GO 71975
// for j in list [ nat ] do
72010: LD_ADDR_VAR 0 5
72014: PUSH
72015: LD_VAR 0 10
72019: PUSH
72020: LD_VAR 0 7
72024: ARRAY
72025: PUSH
72026: FOR_IN
72027: IFFALSE 72068
// if GetBWeapon ( i ) = j [ 1 ] then
72029: LD_VAR 0 4
72033: PPUSH
72034: CALL_OW 269
72038: PUSH
72039: LD_VAR 0 5
72043: PUSH
72044: LD_INT 1
72046: ARRAY
72047: EQUAL
72048: IFFALSE 72066
// begin weapon := j [ 2 ] ;
72050: LD_ADDR_VAR 0 8
72054: PUSH
72055: LD_VAR 0 5
72059: PUSH
72060: LD_INT 2
72062: ARRAY
72063: ST_TO_ADDR
// break ;
72064: GO 72068
// end ;
72066: GO 72026
72068: POP
72069: POP
// if not weapon then
72070: LD_VAR 0 8
72074: NOT
72075: IFFALSE 72079
// continue ;
72077: GO 71975
// for k in factories do
72079: LD_ADDR_VAR 0 6
72083: PUSH
72084: LD_VAR 0 2
72088: PUSH
72089: FOR_IN
72090: IFFALSE 72155
// begin weapons := AvailableWeaponList ( k ) ;
72092: LD_ADDR_VAR 0 9
72096: PUSH
72097: LD_VAR 0 6
72101: PPUSH
72102: CALL_OW 478
72106: ST_TO_ADDR
// if not weapons then
72107: LD_VAR 0 9
72111: NOT
72112: IFFALSE 72116
// continue ;
72114: GO 72089
// if weapon in weapons then
72116: LD_VAR 0 8
72120: PUSH
72121: LD_VAR 0 9
72125: IN
72126: IFFALSE 72153
// begin result := [ i , weapon ] ;
72128: LD_ADDR_VAR 0 3
72132: PUSH
72133: LD_VAR 0 4
72137: PUSH
72138: LD_VAR 0 8
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: ST_TO_ADDR
// exit ;
72147: POP
72148: POP
72149: POP
72150: POP
72151: GO 72161
// end ; end ;
72153: GO 72089
72155: POP
72156: POP
// end ;
72157: GO 71975
72159: POP
72160: POP
// end ;
72161: LD_VAR 0 3
72165: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72166: LD_INT 0
72168: PPUSH
// if not side or side > 8 then
72169: LD_VAR 0 3
72173: NOT
72174: PUSH
72175: LD_VAR 0 3
72179: PUSH
72180: LD_INT 8
72182: GREATER
72183: OR
72184: IFFALSE 72188
// exit ;
72186: GO 72247
// if not range then
72188: LD_VAR 0 4
72192: NOT
72193: IFFALSE 72204
// range := - 12 ;
72195: LD_ADDR_VAR 0 4
72199: PUSH
72200: LD_INT 12
72202: NEG
72203: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72204: LD_VAR 0 1
72208: PPUSH
72209: LD_VAR 0 2
72213: PPUSH
72214: LD_VAR 0 3
72218: PPUSH
72219: LD_VAR 0 4
72223: PPUSH
72224: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72228: LD_VAR 0 1
72232: PPUSH
72233: LD_VAR 0 2
72237: PPUSH
72238: LD_VAR 0 3
72242: PPUSH
72243: CALL_OW 331
// end ;
72247: LD_VAR 0 5
72251: RET
// export function Video ( mode ) ; begin
72252: LD_INT 0
72254: PPUSH
// ingame_video = mode ;
72255: LD_ADDR_OWVAR 52
72259: PUSH
72260: LD_VAR 0 1
72264: ST_TO_ADDR
// interface_hidden = mode ;
72265: LD_ADDR_OWVAR 54
72269: PUSH
72270: LD_VAR 0 1
72274: ST_TO_ADDR
// end ;
72275: LD_VAR 0 2
72279: RET
// export function Join ( array , element ) ; begin
72280: LD_INT 0
72282: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72283: LD_ADDR_VAR 0 3
72287: PUSH
72288: LD_VAR 0 1
72292: PPUSH
72293: LD_VAR 0 1
72297: PUSH
72298: LD_INT 1
72300: PLUS
72301: PPUSH
72302: LD_VAR 0 2
72306: PPUSH
72307: CALL_OW 1
72311: ST_TO_ADDR
// end ;
72312: LD_VAR 0 3
72316: RET
// export function JoinUnion ( array , element ) ; begin
72317: LD_INT 0
72319: PPUSH
// result := array union element ;
72320: LD_ADDR_VAR 0 3
72324: PUSH
72325: LD_VAR 0 1
72329: PUSH
72330: LD_VAR 0 2
72334: UNION
72335: ST_TO_ADDR
// end ;
72336: LD_VAR 0 3
72340: RET
// export function GetBehemoths ( side ) ; begin
72341: LD_INT 0
72343: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72344: LD_ADDR_VAR 0 2
72348: PUSH
72349: LD_INT 22
72351: PUSH
72352: LD_VAR 0 1
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 31
72363: PUSH
72364: LD_INT 25
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PPUSH
72375: CALL_OW 69
72379: ST_TO_ADDR
// end ;
72380: LD_VAR 0 2
72384: RET
// export function Shuffle ( array ) ; var i , index ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
// result := [ ] ;
72390: LD_ADDR_VAR 0 2
72394: PUSH
72395: EMPTY
72396: ST_TO_ADDR
// if not array then
72397: LD_VAR 0 1
72401: NOT
72402: IFFALSE 72406
// exit ;
72404: GO 72505
// Randomize ;
72406: CALL_OW 10
// for i = array downto 1 do
72410: LD_ADDR_VAR 0 3
72414: PUSH
72415: DOUBLE
72416: LD_VAR 0 1
72420: INC
72421: ST_TO_ADDR
72422: LD_INT 1
72424: PUSH
72425: FOR_DOWNTO
72426: IFFALSE 72503
// begin index := rand ( 1 , array ) ;
72428: LD_ADDR_VAR 0 4
72432: PUSH
72433: LD_INT 1
72435: PPUSH
72436: LD_VAR 0 1
72440: PPUSH
72441: CALL_OW 12
72445: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_VAR 0 2
72455: PPUSH
72456: LD_VAR 0 2
72460: PUSH
72461: LD_INT 1
72463: PLUS
72464: PPUSH
72465: LD_VAR 0 1
72469: PUSH
72470: LD_VAR 0 4
72474: ARRAY
72475: PPUSH
72476: CALL_OW 2
72480: ST_TO_ADDR
// array := Delete ( array , index ) ;
72481: LD_ADDR_VAR 0 1
72485: PUSH
72486: LD_VAR 0 1
72490: PPUSH
72491: LD_VAR 0 4
72495: PPUSH
72496: CALL_OW 3
72500: ST_TO_ADDR
// end ;
72501: GO 72425
72503: POP
72504: POP
// end ;
72505: LD_VAR 0 2
72509: RET
// export function GetBaseMaterials ( base ) ; begin
72510: LD_INT 0
72512: PPUSH
// result := [ 0 , 0 , 0 ] ;
72513: LD_ADDR_VAR 0 2
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: LIST
72531: ST_TO_ADDR
// if not base then
72532: LD_VAR 0 1
72536: NOT
72537: IFFALSE 72541
// exit ;
72539: GO 72590
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72541: LD_ADDR_VAR 0 2
72545: PUSH
72546: LD_VAR 0 1
72550: PPUSH
72551: LD_INT 1
72553: PPUSH
72554: CALL_OW 275
72558: PUSH
72559: LD_VAR 0 1
72563: PPUSH
72564: LD_INT 2
72566: PPUSH
72567: CALL_OW 275
72571: PUSH
72572: LD_VAR 0 1
72576: PPUSH
72577: LD_INT 3
72579: PPUSH
72580: CALL_OW 275
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// end ;
72590: LD_VAR 0 2
72594: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72595: LD_INT 0
72597: PPUSH
72598: PPUSH
// result := array ;
72599: LD_ADDR_VAR 0 3
72603: PUSH
72604: LD_VAR 0 1
72608: ST_TO_ADDR
// if size > 0 then
72609: LD_VAR 0 2
72613: PUSH
72614: LD_INT 0
72616: GREATER
72617: IFFALSE 72663
// for i := array downto size do
72619: LD_ADDR_VAR 0 4
72623: PUSH
72624: DOUBLE
72625: LD_VAR 0 1
72629: INC
72630: ST_TO_ADDR
72631: LD_VAR 0 2
72635: PUSH
72636: FOR_DOWNTO
72637: IFFALSE 72661
// result := Delete ( result , result ) ;
72639: LD_ADDR_VAR 0 3
72643: PUSH
72644: LD_VAR 0 3
72648: PPUSH
72649: LD_VAR 0 3
72653: PPUSH
72654: CALL_OW 3
72658: ST_TO_ADDR
72659: GO 72636
72661: POP
72662: POP
// end ;
72663: LD_VAR 0 3
72667: RET
// export function ComExit ( unit ) ; var tmp ; begin
72668: LD_INT 0
72670: PPUSH
72671: PPUSH
// if not IsInUnit ( unit ) then
72672: LD_VAR 0 1
72676: PPUSH
72677: CALL_OW 310
72681: NOT
72682: IFFALSE 72686
// exit ;
72684: GO 72746
// tmp := IsInUnit ( unit ) ;
72686: LD_ADDR_VAR 0 3
72690: PUSH
72691: LD_VAR 0 1
72695: PPUSH
72696: CALL_OW 310
72700: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72701: LD_VAR 0 3
72705: PPUSH
72706: CALL_OW 247
72710: PUSH
72711: LD_INT 2
72713: EQUAL
72714: IFFALSE 72727
// ComExitVehicle ( unit ) else
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 121
72725: GO 72736
// ComExitBuilding ( unit ) ;
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 122
// result := tmp ;
72736: LD_ADDR_VAR 0 2
72740: PUSH
72741: LD_VAR 0 3
72745: ST_TO_ADDR
// end ;
72746: LD_VAR 0 2
72750: RET
// export function ComExitAll ( units ) ; var i ; begin
72751: LD_INT 0
72753: PPUSH
72754: PPUSH
// if not units then
72755: LD_VAR 0 1
72759: NOT
72760: IFFALSE 72764
// exit ;
72762: GO 72790
// for i in units do
72764: LD_ADDR_VAR 0 3
72768: PUSH
72769: LD_VAR 0 1
72773: PUSH
72774: FOR_IN
72775: IFFALSE 72788
// ComExit ( i ) ;
72777: LD_VAR 0 3
72781: PPUSH
72782: CALL 72668 0 1
72786: GO 72774
72788: POP
72789: POP
// end ;
72790: LD_VAR 0 2
72794: RET
// export function ResetHc ; begin
72795: LD_INT 0
72797: PPUSH
// InitHc ;
72798: CALL_OW 19
// hc_importance := 0 ;
72802: LD_ADDR_OWVAR 32
72806: PUSH
72807: LD_INT 0
72809: ST_TO_ADDR
// end ;
72810: LD_VAR 0 1
72814: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72815: LD_INT 0
72817: PPUSH
72818: PPUSH
72819: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72820: LD_ADDR_VAR 0 6
72824: PUSH
72825: LD_VAR 0 1
72829: PUSH
72830: LD_VAR 0 3
72834: PLUS
72835: PUSH
72836: LD_INT 2
72838: DIV
72839: ST_TO_ADDR
// if _x < 0 then
72840: LD_VAR 0 6
72844: PUSH
72845: LD_INT 0
72847: LESS
72848: IFFALSE 72865
// _x := _x * - 1 ;
72850: LD_ADDR_VAR 0 6
72854: PUSH
72855: LD_VAR 0 6
72859: PUSH
72860: LD_INT 1
72862: NEG
72863: MUL
72864: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72865: LD_ADDR_VAR 0 7
72869: PUSH
72870: LD_VAR 0 2
72874: PUSH
72875: LD_VAR 0 4
72879: PLUS
72880: PUSH
72881: LD_INT 2
72883: DIV
72884: ST_TO_ADDR
// if _y < 0 then
72885: LD_VAR 0 7
72889: PUSH
72890: LD_INT 0
72892: LESS
72893: IFFALSE 72910
// _y := _y * - 1 ;
72895: LD_ADDR_VAR 0 7
72899: PUSH
72900: LD_VAR 0 7
72904: PUSH
72905: LD_INT 1
72907: NEG
72908: MUL
72909: ST_TO_ADDR
// result := [ _x , _y ] ;
72910: LD_ADDR_VAR 0 5
72914: PUSH
72915: LD_VAR 0 6
72919: PUSH
72920: LD_VAR 0 7
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: ST_TO_ADDR
// end ;
72929: LD_VAR 0 5
72933: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72934: LD_INT 0
72936: PPUSH
72937: PPUSH
72938: PPUSH
72939: PPUSH
// task := GetTaskList ( unit ) ;
72940: LD_ADDR_VAR 0 7
72944: PUSH
72945: LD_VAR 0 1
72949: PPUSH
72950: CALL_OW 437
72954: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72955: LD_VAR 0 7
72959: NOT
72960: PUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_VAR 0 2
72970: PPUSH
72971: CALL_OW 308
72975: NOT
72976: AND
72977: IFFALSE 72981
// exit ;
72979: GO 73099
// if IsInArea ( unit , area ) then
72981: LD_VAR 0 1
72985: PPUSH
72986: LD_VAR 0 2
72990: PPUSH
72991: CALL_OW 308
72995: IFFALSE 73013
// begin ComMoveToArea ( unit , goAway ) ;
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 3
73006: PPUSH
73007: CALL_OW 113
// exit ;
73011: GO 73099
// end ; if task [ 1 ] [ 1 ] <> M then
73013: LD_VAR 0 7
73017: PUSH
73018: LD_INT 1
73020: ARRAY
73021: PUSH
73022: LD_INT 1
73024: ARRAY
73025: PUSH
73026: LD_STRING M
73028: NONEQUAL
73029: IFFALSE 73033
// exit ;
73031: GO 73099
// x := task [ 1 ] [ 2 ] ;
73033: LD_ADDR_VAR 0 5
73037: PUSH
73038: LD_VAR 0 7
73042: PUSH
73043: LD_INT 1
73045: ARRAY
73046: PUSH
73047: LD_INT 2
73049: ARRAY
73050: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73051: LD_ADDR_VAR 0 6
73055: PUSH
73056: LD_VAR 0 7
73060: PUSH
73061: LD_INT 1
73063: ARRAY
73064: PUSH
73065: LD_INT 3
73067: ARRAY
73068: ST_TO_ADDR
// if InArea ( x , y , area ) then
73069: LD_VAR 0 5
73073: PPUSH
73074: LD_VAR 0 6
73078: PPUSH
73079: LD_VAR 0 2
73083: PPUSH
73084: CALL_OW 309
73088: IFFALSE 73099
// ComStop ( unit ) ;
73090: LD_VAR 0 1
73094: PPUSH
73095: CALL_OW 141
// end ;
73099: LD_VAR 0 4
73103: RET
// export function Abs ( value ) ; begin
73104: LD_INT 0
73106: PPUSH
// result := value ;
73107: LD_ADDR_VAR 0 2
73111: PUSH
73112: LD_VAR 0 1
73116: ST_TO_ADDR
// if value < 0 then
73117: LD_VAR 0 1
73121: PUSH
73122: LD_INT 0
73124: LESS
73125: IFFALSE 73142
// result := value * - 1 ;
73127: LD_ADDR_VAR 0 2
73131: PUSH
73132: LD_VAR 0 1
73136: PUSH
73137: LD_INT 1
73139: NEG
73140: MUL
73141: ST_TO_ADDR
// end ;
73142: LD_VAR 0 2
73146: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73147: LD_INT 0
73149: PPUSH
73150: PPUSH
73151: PPUSH
73152: PPUSH
73153: PPUSH
73154: PPUSH
73155: PPUSH
73156: PPUSH
// if not unit or not building then
73157: LD_VAR 0 1
73161: NOT
73162: PUSH
73163: LD_VAR 0 2
73167: NOT
73168: OR
73169: IFFALSE 73173
// exit ;
73171: GO 73399
// x := GetX ( building ) ;
73173: LD_ADDR_VAR 0 4
73177: PUSH
73178: LD_VAR 0 2
73182: PPUSH
73183: CALL_OW 250
73187: ST_TO_ADDR
// y := GetY ( building ) ;
73188: LD_ADDR_VAR 0 6
73192: PUSH
73193: LD_VAR 0 2
73197: PPUSH
73198: CALL_OW 251
73202: ST_TO_ADDR
// d := GetDir ( building ) ;
73203: LD_ADDR_VAR 0 8
73207: PUSH
73208: LD_VAR 0 2
73212: PPUSH
73213: CALL_OW 254
73217: ST_TO_ADDR
// r := 4 ;
73218: LD_ADDR_VAR 0 9
73222: PUSH
73223: LD_INT 4
73225: ST_TO_ADDR
// for i := 1 to 5 do
73226: LD_ADDR_VAR 0 10
73230: PUSH
73231: DOUBLE
73232: LD_INT 1
73234: DEC
73235: ST_TO_ADDR
73236: LD_INT 5
73238: PUSH
73239: FOR_TO
73240: IFFALSE 73397
// begin _x := ShiftX ( x , d , r + i ) ;
73242: LD_ADDR_VAR 0 5
73246: PUSH
73247: LD_VAR 0 4
73251: PPUSH
73252: LD_VAR 0 8
73256: PPUSH
73257: LD_VAR 0 9
73261: PUSH
73262: LD_VAR 0 10
73266: PLUS
73267: PPUSH
73268: CALL_OW 272
73272: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 6
73282: PPUSH
73283: LD_VAR 0 8
73287: PPUSH
73288: LD_VAR 0 9
73292: PUSH
73293: LD_VAR 0 10
73297: PLUS
73298: PPUSH
73299: CALL_OW 273
73303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73304: LD_VAR 0 5
73308: PPUSH
73309: LD_VAR 0 7
73313: PPUSH
73314: CALL_OW 488
73318: PUSH
73319: LD_VAR 0 5
73323: PPUSH
73324: LD_VAR 0 7
73328: PPUSH
73329: CALL_OW 428
73333: PPUSH
73334: CALL_OW 247
73338: PUSH
73339: LD_INT 3
73341: PUSH
73342: LD_INT 2
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: IN
73349: NOT
73350: AND
73351: IFFALSE 73395
// begin ComMoveXY ( unit , _x , _y ) ;
73353: LD_VAR 0 1
73357: PPUSH
73358: LD_VAR 0 5
73362: PPUSH
73363: LD_VAR 0 7
73367: PPUSH
73368: CALL_OW 111
// result := [ _x , _y ] ;
73372: LD_ADDR_VAR 0 3
73376: PUSH
73377: LD_VAR 0 5
73381: PUSH
73382: LD_VAR 0 7
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: ST_TO_ADDR
// exit ;
73391: POP
73392: POP
73393: GO 73399
// end ; end ;
73395: GO 73239
73397: POP
73398: POP
// end ;
73399: LD_VAR 0 3
73403: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73404: LD_INT 0
73406: PPUSH
73407: PPUSH
73408: PPUSH
// result := 0 ;
73409: LD_ADDR_VAR 0 3
73413: PUSH
73414: LD_INT 0
73416: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73417: LD_VAR 0 1
73421: PUSH
73422: LD_INT 0
73424: LESS
73425: PUSH
73426: LD_VAR 0 1
73430: PUSH
73431: LD_INT 8
73433: GREATER
73434: OR
73435: PUSH
73436: LD_VAR 0 2
73440: PUSH
73441: LD_INT 0
73443: LESS
73444: OR
73445: PUSH
73446: LD_VAR 0 2
73450: PUSH
73451: LD_INT 8
73453: GREATER
73454: OR
73455: IFFALSE 73459
// exit ;
73457: GO 73534
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73459: LD_ADDR_VAR 0 4
73463: PUSH
73464: LD_INT 22
73466: PUSH
73467: LD_VAR 0 2
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 69
73480: PUSH
73481: FOR_IN
73482: IFFALSE 73532
// begin un := UnitShoot ( i ) ;
73484: LD_ADDR_VAR 0 5
73488: PUSH
73489: LD_VAR 0 4
73493: PPUSH
73494: CALL_OW 504
73498: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73499: LD_VAR 0 5
73503: PPUSH
73504: CALL_OW 255
73508: PUSH
73509: LD_VAR 0 1
73513: EQUAL
73514: IFFALSE 73530
// begin result := un ;
73516: LD_ADDR_VAR 0 3
73520: PUSH
73521: LD_VAR 0 5
73525: ST_TO_ADDR
// exit ;
73526: POP
73527: POP
73528: GO 73534
// end ; end ;
73530: GO 73481
73532: POP
73533: POP
// end ;
73534: LD_VAR 0 3
73538: RET
// export function GetCargoBay ( units ) ; begin
73539: LD_INT 0
73541: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73542: LD_ADDR_VAR 0 2
73546: PUSH
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_INT 2
73554: PUSH
73555: LD_INT 34
73557: PUSH
73558: LD_INT 12
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 34
73567: PUSH
73568: LD_INT 51
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 34
73577: PUSH
73578: LD_INT 32
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 34
73587: PUSH
73588: LD_EXP 55
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: PPUSH
73604: CALL_OW 72
73608: ST_TO_ADDR
// end ;
73609: LD_VAR 0 2
73613: RET
