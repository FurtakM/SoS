// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 18985 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 916 0 0
// PrepareRussian ;
  27: CALL 3560 0 0
// PrepareLegion ;
  31: CALL 7641 0 0
// Action ;
  35: CALL 10908 0 0
// InitArt ;
  39: CALL 237 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// base_captured := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// russian_prepared := false ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// ru_can_attack := false ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_sib_bomb := false ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 5
  86: PUSH
  87: LD_INT 10
  89: PUSH
  90: LD_INT 25
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: ST_TO_ADDR
// player_res_art := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// player_artifact_ready := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// art_icon := art_use_atom ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 7
 127: ST_TO_ADDR
// time_res_art := 600 ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 600
 135: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 136: LD_ADDR_EXP 12
 140: PUSH
 141: LD_INT 21000
 143: ST_TO_ADDR
// mine_vulc := false ;
 144: LD_ADDR_EXP 13
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// medal_enabled := false ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dead_counter := 0 ;
 160: LD_ADDR_EXP 15
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// kill_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// veh_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// tech_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifact_progress := 0 ;
 200: LD_ADDR_EXP 7
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// event_legion_attack := 1 ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 1
 215: ST_TO_ADDR
// event_russian_attack := 2 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 2
 223: ST_TO_ADDR
// event_alliance_attack := 3 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 3
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// function InitArt ; begin
 237: LD_INT 0
 239: PPUSH
// SetArtifactRes ( your_side , true ) ;
 240: LD_OWVAR 2
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 467
// end ; end_of_file
 252: LD_VAR 0 1
 256: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 257: LD_INT 0
 259: PPUSH
 260: PPUSH
 261: PPUSH
 262: PPUSH
 263: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 7
 271: PUSH
 272: LD_INT 6
 274: PUSH
 275: LD_INT 5
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// us_force := [ ] ;
 289: LD_ADDR_EXP 24
 293: PUSH
 294: EMPTY
 295: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 296: LD_INT 17
 298: PPUSH
 299: CALL_OW 355
// PrepareAllianceAI ( ) ;
 303: CALL 16247 0 0
// uc_side := 1 ;
 307: LD_ADDR_OWVAR 20
 311: PUSH
 312: LD_INT 1
 314: ST_TO_ADDR
// uc_nation := nation_american ;
 315: LD_ADDR_OWVAR 21
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// hc_name :=  ;
 331: LD_ADDR_OWVAR 26
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_importance := 0 ;
 339: LD_ADDR_OWVAR 32
 343: PUSH
 344: LD_INT 0
 346: ST_TO_ADDR
// for i = 1 to 11 do
 347: LD_ADDR_VAR 0 2
 351: PUSH
 352: DOUBLE
 353: LD_INT 1
 355: DEC
 356: ST_TO_ADDR
 357: LD_INT 11
 359: PUSH
 360: FOR_TO
 361: IFFALSE 414
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 363: LD_INT 0
 365: PPUSH
 366: LD_INT 1
 368: PPUSH
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 12
 376: PPUSH
 377: LD_EXP 25
 381: PPUSH
 382: CALL_OW 380
// un := CreateHuman ;
 386: LD_ADDR_VAR 0 4
 390: PUSH
 391: CALL_OW 44
 395: ST_TO_ADDR
// us_force := us_force ^ un ;
 396: LD_ADDR_EXP 24
 400: PUSH
 401: LD_EXP 24
 405: PUSH
 406: LD_VAR 0 4
 410: ADD
 411: ST_TO_ADDR
// end ;
 412: GO 360
 414: POP
 415: POP
// hc_importance := 100 ;
 416: LD_ADDR_OWVAR 32
 420: PUSH
 421: LD_INT 100
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_EXP 25
 434: PPUSH
 435: CALL_OW 380
// us_commander := CreateHuman ;
 439: LD_ADDR_EXP 23
 443: PUSH
 444: CALL_OW 44
 448: ST_TO_ADDR
// player_commander := us_commander ;
 449: LD_ADDR_EXP 11
 453: PUSH
 454: LD_EXP 23
 458: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 459: LD_ADDR_VAR 0 5
 463: PUSH
 464: LD_STRING text
 466: PPUSH
 467: LD_INT 6
 469: PUSH
 470: LD_INT 5
 472: PUSH
 473: LD_INT 4
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: PPUSH
 487: LD_INT 6
 489: PUSH
 490: LD_INT 5
 492: PUSH
 493: LD_INT 4
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: LD_OWVAR 67
 505: ARRAY
 506: PPUSH
 507: LD_INT -5
 509: PUSH
 510: LD_EXP 23
 514: PUSH
 515: LD_INT -3
 517: PUSH
 518: LD_INT -2
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: LD_EXP 24
 531: ADD
 532: PPUSH
 533: LD_INT 1
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 2
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: LD_INT 1
 567: NEG
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PPUSH
 587: CALL_OW 42
 591: ST_TO_ADDR
// team := team ^ us_commander ;
 592: LD_ADDR_VAR 0 5
 596: PUSH
 597: LD_VAR 0 5
 601: PUSH
 602: LD_EXP 23
 606: ADD
 607: ST_TO_ADDR
// for i = 1 to team do
 608: LD_ADDR_VAR 0 2
 612: PUSH
 613: DOUBLE
 614: LD_INT 1
 616: DEC
 617: ST_TO_ADDR
 618: LD_VAR 0 5
 622: PUSH
 623: FOR_TO
 624: IFFALSE 649
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 626: LD_VAR 0 5
 630: PUSH
 631: LD_VAR 0 2
 635: ARRAY
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 49
 647: GO 623
 649: POP
 650: POP
// end ;
 651: LD_VAR 0 1
 655: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 656: LD_OWVAR 1
 660: PUSH
 661: LD_INT 73500
 663: LESS
 664: IFFALSE 691
 666: GO 668
 668: DISABLE
// begin enable ;
 669: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 670: LD_INT 1
 672: PPUSH
 673: LD_INT 5
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 24
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 55
// end ;
 691: END
// every 1 1$10 do var time , p , l ;
 692: GO 694
 694: DISABLE
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
// begin time := 0 0$44 ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_INT 1540
 707: ST_TO_ADDR
// l := 0 ;
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_INT 0
 715: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 716: LD_VAR 0 1
 720: PPUSH
 721: CALL_OW 67
// l := l + 1 ;
 725: LD_ADDR_VAR 0 3
 729: PUSH
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 1
 737: PLUS
 738: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 739: LD_INT 12
 741: PPUSH
 742: CALL_OW 435
 746: PUSH
 747: LD_INT 30
 749: LESS
 750: IFFALSE 809
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 773: LD_INT 1155
 775: PPUSH
 776: LD_INT 1540
 778: PPUSH
 779: CALL_OW 12
 783: PPUSH
 784: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 5
 793: PPUSH
 794: CALL_OW 12
 798: PPUSH
 799: LD_INT 12
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 1
 819: PPUSH
 820: CALL_OW 12
 824: ST_TO_ADDR
// if p then
 825: LD_VAR 0 2
 829: IFFALSE 864
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 831: LD_INT 105
 833: PPUSH
 834: LD_INT 350
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 4
 851: PPUSH
 852: CALL_OW 12
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 864: LD_VAR 0 3
 868: PUSH
 869: LD_INT 15
 871: PUSH
 872: LD_INT 13
 874: PUSH
 875: LD_INT 11
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_OWVAR 67
 887: ARRAY
 888: MOD
 889: PUSH
 890: LD_INT 0
 892: EQUAL
 893: IFFALSE 909
// time := time + 2 2$00 ;
 895: LD_ADDR_VAR 0 1
 899: PUSH
 900: LD_VAR 0 1
 904: PUSH
 905: LD_INT 4200
 907: PLUS
 908: ST_TO_ADDR
// end until false ;
 909: LD_INT 0
 911: IFFALSE 716
// end ; end_of_file
 913: PPOPN 3
 915: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 916: LD_INT 0
 918: PPUSH
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: LD_INT 22
 932: PUSH
 933: LD_INT 4
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: LD_INT 21
 942: PUSH
 943: LD_INT 3
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: CALL_OW 69
 958: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 959: LD_ADDR_VAR 0 4
 963: PUSH
 964: LD_INT 470
 966: PUSH
 967: LD_INT 370
 969: PUSH
 970: LD_INT 290
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: PUSH
 978: LD_OWVAR 67
 982: ARRAY
 983: ST_TO_ADDR
// case Difficulty of 2 :
 984: LD_OWVAR 67
 988: PUSH
 989: LD_INT 2
 991: DOUBLE
 992: EQUAL
 993: IFTRUE 997
 995: GO 1028
 997: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 998: LD_VAR 0 3
1002: PPUSH
1003: LD_INT 30
1005: PUSH
1006: LD_INT 32
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: PPUSH
1013: CALL_OW 72
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 65
// end ; 3 :
1026: GO 1104
1028: LD_INT 3
1030: DOUBLE
1031: EQUAL
1032: IFTRUE 1036
1034: GO 1103
1036: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1037: LD_VAR 0 3
1041: PPUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 32
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 72
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1065: LD_VAR 0 3
1069: PPUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 72
1084: PUSH
1085: LD_INT 1
1087: PPUSH
1088: LD_INT 3
1090: PPUSH
1091: CALL_OW 12
1095: ARRAY
1096: PPUSH
1097: CALL_OW 65
// end ; end ;
1101: GO 1104
1103: POP
// for i = 1 to filter do
1104: LD_ADDR_VAR 0 2
1108: PUSH
1109: DOUBLE
1110: LD_INT 1
1112: DEC
1113: ST_TO_ADDR
1114: LD_VAR 0 3
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1157
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1122: LD_VAR 0 3
1126: PUSH
1127: LD_VAR 0 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_INT 29
1140: NEG
1141: PPUSH
1142: LD_INT 29
1144: PPUSH
1145: CALL_OW 12
1149: PLUS
1150: PPUSH
1151: CALL_OW 234
1155: GO 1119
1157: POP
1158: POP
// SetBName ( us_depot , Vulcano1 ) ;
1159: LD_INT 50
1161: PPUSH
1162: LD_STRING Vulcano1
1164: PPUSH
1165: CALL_OW 500
// hc_importance := 0 ;
1169: LD_ADDR_OWVAR 32
1173: PUSH
1174: LD_INT 0
1176: ST_TO_ADDR
// uc_side := 3 ;
1177: LD_ADDR_OWVAR 20
1181: PUSH
1182: LD_INT 3
1184: ST_TO_ADDR
// uc_nation := nation_russian ;
1185: LD_ADDR_OWVAR 21
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// russian_in_base := [ ] ;
1193: LD_ADDR_VAR 0 7
1197: PUSH
1198: EMPTY
1199: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1200: LD_ADDR_VAR 0 2
1204: PUSH
1205: DOUBLE
1206: LD_INT 1
1208: DEC
1209: ST_TO_ADDR
1210: LD_INT 6
1212: PUSH
1213: LD_INT 6
1215: PUSH
1216: LD_INT 7
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_OWVAR 67
1228: ARRAY
1229: PUSH
1230: FOR_TO
1231: IFFALSE 1312
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 4
1241: PUSH
1242: LD_INT 5
1244: PUSH
1245: LD_INT 6
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: PUSH
1253: LD_OWVAR 67
1257: ARRAY
1258: PPUSH
1259: CALL_OW 380
// un := CreateHuman ;
1263: LD_ADDR_VAR 0 5
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: ADD
1288: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1289: LD_VAR 0 5
1293: PPUSH
1294: LD_INT 94
1296: PPUSH
1297: LD_INT 145
1299: PPUSH
1300: LD_INT 10
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 50
// end ;
1310: GO 1230
1312: POP
1313: POP
// end ;
1314: LD_VAR 0 1
1318: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1319: LD_INT 50
1321: PPUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL 1922 0 2
1329: PUSH
1330: LD_INT 40
1332: LESS
1333: IFFALSE 1530
1335: GO 1337
1337: DISABLE
1338: LD_INT 0
1340: PPUSH
1341: PPUSH
// begin uc_side := 4 ;
1342: LD_ADDR_OWVAR 20
1346: PUSH
1347: LD_INT 4
1349: ST_TO_ADDR
// uc_nation := nation_american ;
1350: LD_ADDR_OWVAR 21
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_importance := 0 ;
1358: LD_ADDR_OWVAR 32
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// for i = 1 to 7 do
1366: LD_ADDR_VAR 0 1
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_INT 7
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1444
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1382: LD_INT 0
1384: PPUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 3
1390: PPUSH
1391: CALL_OW 12
1395: PPUSH
1396: LD_EXP 25
1400: PPUSH
1401: CALL_OW 380
// un := CreateHuman ;
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: CALL_OW 44
1414: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1415: LD_VAR 0 2
1419: PPUSH
1420: LD_INT 7
1422: PPUSH
1423: LD_INT 0
1425: PPUSH
1426: CALL_OW 49
// SetLives ( un , 10 ) ;
1430: LD_VAR 0 2
1434: PPUSH
1435: LD_INT 10
1437: PPUSH
1438: CALL_OW 234
// end ;
1442: GO 1379
1444: POP
1445: POP
// for i = 1 to 5 do
1446: LD_ADDR_VAR 0 1
1450: PUSH
1451: DOUBLE
1452: LD_INT 1
1454: DEC
1455: ST_TO_ADDR
1456: LD_INT 5
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1528
// begin PrepareHuman ( false , 4 , us_skill ) ;
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 4
1467: PPUSH
1468: LD_EXP 25
1472: PPUSH
1473: CALL_OW 380
// SetDir ( un , 1 ) ;
1477: LD_VAR 0 2
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL_OW 233
// un := CreateHuman ;
1489: LD_ADDR_VAR 0 2
1493: PUSH
1494: CALL_OW 44
1498: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1499: LD_VAR 0 2
1503: PPUSH
1504: LD_INT 23
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// SetLives ( un , 10 ) ;
1514: LD_VAR 0 2
1518: PPUSH
1519: LD_INT 10
1521: PPUSH
1522: CALL_OW 234
// end ;
1526: GO 1459
1528: POP
1529: POP
// end ; end_of_file
1530: PPOPN 2
1532: END
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1533: LD_INT 0
1535: PPUSH
1536: PPUSH
1537: PPUSH
1538: PPUSH
// c := Rand ( 1 , 3 ) ;
1539: LD_ADDR_VAR 0 5
1543: PUSH
1544: LD_INT 1
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: CALL_OW 12
1554: ST_TO_ADDR
// for i = 1 to list do
1555: LD_ADDR_VAR 0 6
1559: PUSH
1560: DOUBLE
1561: LD_INT 1
1563: DEC
1564: ST_TO_ADDR
1565: LD_VAR 0 1
1569: PUSH
1570: FOR_TO
1571: IFFALSE 1753
// for ta in filter do
1573: LD_ADDR_VAR 0 4
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: FOR_IN
1584: IFFALSE 1749
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1586: LD_VAR 0 1
1590: PUSH
1591: LD_VAR 0 6
1595: ARRAY
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL_OW 296
1606: PUSH
1607: LD_INT 15
1609: LESSEQUAL
1610: IFFALSE 1747
// begin case c of 1 :
1612: LD_VAR 0 5
1616: PUSH
1617: LD_INT 1
1619: DOUBLE
1620: EQUAL
1621: IFTRUE 1625
1623: GO 1663
1625: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1626: LD_VAR 0 1
1630: PUSH
1631: LD_VAR 0 6
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 250
1646: PPUSH
1647: LD_VAR 0 4
1651: PPUSH
1652: CALL_OW 251
1656: PPUSH
1657: CALL_OW 154
1661: GO 1747
1663: LD_INT 2
1665: DOUBLE
1666: EQUAL
1667: IFTRUE 1671
1669: GO 1735
1671: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1672: LD_VAR 0 1
1676: PUSH
1677: LD_VAR 0 6
1681: ARRAY
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL_OW 250
1692: PUSH
1693: LD_INT 1
1695: NEG
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 12
1704: PLUS
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL_OW 251
1715: PUSH
1716: LD_INT 1
1718: NEG
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: CALL_OW 12
1727: PLUS
1728: PPUSH
1729: CALL_OW 153
1733: GO 1747
1735: LD_INT 3
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1746
1743: POP
// ; end ;
1744: GO 1747
1746: POP
// end ; end ;
1747: GO 1583
1749: POP
1750: POP
1751: GO 1570
1753: POP
1754: POP
// end ;
1755: LD_VAR 0 3
1759: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
1764: PPUSH
// for i = 1 to n do
1765: LD_ADDR_VAR 0 4
1769: PUSH
1770: DOUBLE
1771: LD_INT 1
1773: DEC
1774: ST_TO_ADDR
1775: LD_VAR 0 1
1779: PUSH
1780: FOR_TO
1781: IFFALSE 1915
// begin uc_side := 0 ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// uc_nation := 0 ;
1791: LD_ADDR_OWVAR 21
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// hc_class := class_apeman ;
1799: LD_ADDR_OWVAR 28
1803: PUSH
1804: LD_INT 12
1806: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1807: LD_ADDR_OWVAR 31
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: ST_TO_ADDR
// hc_name :=  ;
1830: LD_ADDR_OWVAR 26
1834: PUSH
1835: LD_STRING 
1837: ST_TO_ADDR
// hc_gallery :=  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_importance := 0 ;
1846: LD_ADDR_OWVAR 32
1850: PUSH
1851: LD_INT 0
1853: ST_TO_ADDR
// un := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 19
1871: PUSH
1872: LD_INT 20
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 1
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 12
1889: ARRAY
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1898: LD_INT 1155
1900: PPUSH
1901: LD_INT 5355
1903: PPUSH
1904: CALL_OW 12
1908: PPUSH
1909: CALL_OW 67
// end ;
1913: GO 1780
1915: POP
1916: POP
// end ;
1917: LD_VAR 0 2
1921: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1922: LD_INT 0
1924: PPUSH
1925: PPUSH
1926: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1927: LD_ADDR_VAR 0 4
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_VAR 0 2
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PPUSH
1944: CALL_OW 69
1948: PPUSH
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 74
1958: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1959: LD_ADDR_VAR 0 5
1963: PUSH
1964: LD_VAR 0 1
1968: PPUSH
1969: LD_VAR 0 4
1973: PPUSH
1974: CALL_OW 296
1978: ST_TO_ADDR
// if dist >= 9999 then
1979: LD_VAR 0 5
1983: PUSH
1984: LD_INT 9999
1986: GREATEREQUAL
1987: IFFALSE 2000
// result := - 1 else
1989: LD_ADDR_VAR 0 3
1993: PUSH
1994: LD_INT 1
1996: NEG
1997: ST_TO_ADDR
1998: GO 2010
// result := dist ;
2000: LD_ADDR_VAR 0 3
2004: PUSH
2005: LD_VAR 0 5
2009: ST_TO_ADDR
// end ;
2010: LD_VAR 0 3
2014: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2015: LD_INT 0
2017: PPUSH
2018: PPUSH
2019: PPUSH
2020: PPUSH
// tmp := 9999 ;
2021: LD_ADDR_VAR 0 5
2025: PUSH
2026: LD_INT 9999
2028: ST_TO_ADDR
// for i = 1 to plist do
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: DOUBLE
2035: LD_INT 1
2037: DEC
2038: ST_TO_ADDR
2039: LD_VAR 0 1
2043: PUSH
2044: FOR_TO
2045: IFFALSE 2119
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2047: LD_VAR 0 1
2051: PUSH
2052: LD_VAR 0 4
2056: ARRAY
2057: PPUSH
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL 1922 0 2
2067: PUSH
2068: LD_VAR 0 5
2072: LESS
2073: IFFALSE 2117
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 1
2084: PUSH
2085: LD_VAR 0 4
2089: ARRAY
2090: PPUSH
2091: LD_VAR 0 2
2095: PPUSH
2096: CALL 1922 0 2
2100: ST_TO_ADDR
// unit := plist [ i ] ;
2101: LD_ADDR_VAR 0 6
2105: PUSH
2106: LD_VAR 0 1
2110: PUSH
2111: LD_VAR 0 4
2115: ARRAY
2116: ST_TO_ADDR
// end ;
2117: GO 2044
2119: POP
2120: POP
// result := unit ;
2121: LD_ADDR_VAR 0 3
2125: PUSH
2126: LD_VAR 0 6
2130: ST_TO_ADDR
// end ;
2131: LD_VAR 0 3
2135: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2136: LD_INT 0
2138: PPUSH
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2143: LD_ADDR_VAR 0 2
2147: PUSH
2148: LD_INT 1000
2150: PUSH
2151: LD_INT 2500
2153: PUSH
2154: LD_INT 5000
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_OWVAR 67
2166: ARRAY
2167: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_VAR 0 2
2177: PUSH
2178: LD_INT 1
2180: NEG
2181: PUSH
2182: LD_INT 22
2184: PUSH
2185: LD_OWVAR 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: MUL
2213: PUSH
2214: LD_INT 30
2216: MUL
2217: PLUS
2218: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2219: LD_ADDR_VAR 0 2
2223: PUSH
2224: LD_VAR 0 2
2228: PUSH
2229: LD_EXP 16
2233: PUSH
2234: LD_INT 10
2236: MUL
2237: PLUS
2238: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: LD_VAR 0 2
2248: PUSH
2249: LD_INT 1
2251: NEG
2252: PUSH
2253: LD_EXP 16
2257: MUL
2258: PUSH
2259: LD_INT 20
2261: MUL
2262: PLUS
2263: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: LD_VAR 0 2
2273: PUSH
2274: LD_INT 1
2276: NEG
2277: PUSH
2278: LD_OWVAR 1
2282: PUSH
2283: LD_INT 35
2285: DIVREAL
2286: PUSH
2287: LD_INT 60
2289: DIVREAL
2290: MUL
2291: PUSH
2292: LD_INT 25
2294: MUL
2295: PLUS
2296: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_VAR 0 2
2306: PUSH
2307: LD_EXP 18
2311: PUSH
2312: LD_INT 15
2314: MUL
2315: PLUS
2316: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2317: LD_ADDR_VAR 0 2
2321: PUSH
2322: LD_VAR 0 2
2326: PUSH
2327: LD_INT 1
2329: NEG
2330: PUSH
2331: LD_EXP 19
2335: MUL
2336: PUSH
2337: LD_INT 1000
2339: MUL
2340: PLUS
2341: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_EXP 17
2356: PUSH
2357: LD_INT 5
2359: MUL
2360: PLUS
2361: ST_TO_ADDR
// result := points ;
2362: LD_ADDR_VAR 0 1
2366: PUSH
2367: LD_VAR 0 2
2371: ST_TO_ADDR
// end ; end_of_file
2372: LD_VAR 0 1
2376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL 32938 0 1
// if un = ru_cargo then
2386: LD_VAR 0 1
2390: PUSH
2391: LD_EXP 29
2395: EQUAL
2396: IFFALSE 2406
// ru_cargo := 0 ;
2398: LD_ADDR_EXP 29
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2406: LD_VAR 0 1
2410: PPUSH
2411: CALL_OW 255
2415: PUSH
2416: LD_OWVAR 2
2420: EQUAL
2421: IFFALSE 2437
// dead_counter := dead_counter + 1 ;
2423: LD_ADDR_EXP 15
2427: PUSH
2428: LD_EXP 15
2432: PUSH
2433: LD_INT 1
2435: PLUS
2436: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2437: LD_VAR 0 1
2441: PPUSH
2442: CALL_OW 255
2446: PUSH
2447: LD_INT 81
2449: PUSH
2450: LD_OWVAR 2
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: IN
2464: IFFALSE 2480
// kill_counter := kill_counter + 1 ;
2466: LD_ADDR_EXP 16
2470: PUSH
2471: LD_EXP 16
2475: PUSH
2476: LD_INT 1
2478: PLUS
2479: ST_TO_ADDR
// if un = player_commander then
2480: LD_VAR 0 1
2484: PUSH
2485: LD_EXP 11
2489: EQUAL
2490: IFFALSE 2499
// YouLost ( vulcano-lost ) ;
2492: LD_STRING vulcano-lost
2494: PPUSH
2495: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2499: LD_VAR 0 1
2503: PUSH
2504: LD_INT 22
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 21
2516: PUSH
2517: LD_INT 3
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: IN
2533: IFFALSE 2649
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2535: LD_VAR 0 1
2539: PPUSH
2540: CALL_OW 266
2544: PUSH
2545: LD_INT 33
2547: EQUAL
2548: PUSH
2549: LD_VAR 0 1
2553: PPUSH
2554: CALL_OW 266
2558: PUSH
2559: LD_INT 28
2561: EQUAL
2562: OR
2563: IFFALSE 2649
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2565: LD_ADDR_EXP 30
2569: PUSH
2570: LD_EXP 30
2574: PUSH
2575: LD_VAR 0 1
2579: PPUSH
2580: CALL_OW 266
2584: ADD
2585: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2586: LD_ADDR_EXP 30
2590: PUSH
2591: LD_EXP 30
2595: PUSH
2596: LD_VAR 0 1
2600: PPUSH
2601: CALL_OW 250
2605: ADD
2606: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2607: LD_ADDR_EXP 30
2611: PUSH
2612: LD_EXP 30
2616: PUSH
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL_OW 251
2626: ADD
2627: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2628: LD_ADDR_EXP 30
2632: PUSH
2633: LD_EXP 30
2637: PUSH
2638: LD_VAR 0 1
2642: PPUSH
2643: CALL_OW 254
2647: ADD
2648: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2649: LD_VAR 0 1
2653: PUSH
2654: LD_INT 22
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 21
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: IN
2683: IFFALSE 2827
// begin if GetBType ( un ) = b_barracks then
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: PUSH
2695: LD_INT 5
2697: EQUAL
2698: IFFALSE 2716
// legion_blist := legion_blist ^ b_armoury else
2700: LD_ADDR_EXP 38
2704: PUSH
2705: LD_EXP 38
2709: PUSH
2710: LD_INT 4
2712: ADD
2713: ST_TO_ADDR
2714: GO 2764
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2716: LD_VAR 0 1
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 1
2728: PUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: IN
2740: NOT
2741: IFFALSE 2764
// legion_blist := legion_blist ^ GetBType ( un ) ;
2743: LD_ADDR_EXP 38
2747: PUSH
2748: LD_EXP 38
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 266
2762: ADD
2763: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2764: LD_ADDR_EXP 38
2768: PUSH
2769: LD_EXP 38
2773: PUSH
2774: LD_VAR 0 1
2778: PPUSH
2779: CALL_OW 250
2783: ADD
2784: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2785: LD_ADDR_EXP 38
2789: PUSH
2790: LD_EXP 38
2794: PUSH
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 251
2804: ADD
2805: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2806: LD_ADDR_EXP 38
2810: PUSH
2811: LD_EXP 38
2815: PUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL_OW 254
2825: ADD
2826: ST_TO_ADDR
// end ; if un in legion_force then
2827: LD_VAR 0 1
2831: PUSH
2832: LD_EXP 35
2836: IN
2837: IFFALSE 2855
// legion_force := legion_force diff un ;
2839: LD_ADDR_EXP 35
2843: PUSH
2844: LD_EXP 35
2848: PUSH
2849: LD_VAR 0 1
2853: DIFF
2854: ST_TO_ADDR
// if un in ru_force then
2855: LD_VAR 0 1
2859: PUSH
2860: LD_EXP 27
2864: IN
2865: IFFALSE 2883
// ru_force := ru_force diff un ;
2867: LD_ADDR_EXP 27
2871: PUSH
2872: LD_EXP 27
2876: PUSH
2877: LD_VAR 0 1
2881: DIFF
2882: ST_TO_ADDR
// if un in al_force then
2883: LD_VAR 0 1
2887: PUSH
2888: LD_EXP 42
2892: IN
2893: IFFALSE 2911
// al_force := al_force diff un ;
2895: LD_ADDR_EXP 42
2899: PUSH
2900: LD_EXP 42
2904: PUSH
2905: LD_VAR 0 1
2909: DIFF
2910: ST_TO_ADDR
// end ;
2911: PPOPN 1
2913: END
// on BuildingComplete ( b ) do var i ;
2914: LD_INT 0
2916: PPUSH
// begin if GetSide ( b ) = 8 then
2917: LD_VAR 0 1
2921: PPUSH
2922: CALL_OW 255
2926: PUSH
2927: LD_INT 8
2929: EQUAL
2930: IFFALSE 2970
// for i = 1 to 4 do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 4
2944: PUSH
2945: FOR_TO
2946: IFFALSE 2968
// legion_blist := Delete ( legion_blist , 1 ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_INT 1
2960: PPUSH
2961: CALL_OW 3
2965: ST_TO_ADDR
2966: GO 2945
2968: POP
2969: POP
// if GetSide ( b ) = 3 then
2970: LD_VAR 0 1
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 3
2982: EQUAL
2983: IFFALSE 3023
// for i = 1 to 4 do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_INT 4
2997: PUSH
2998: FOR_TO
2999: IFFALSE 3021
// ru_blist := Delete ( ru_blist , 1 ) ;
3001: LD_ADDR_EXP 30
3005: PUSH
3006: LD_EXP 30
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: CALL_OW 3
3018: ST_TO_ADDR
3019: GO 2998
3021: POP
3022: POP
// end ;
3023: PPOPN 2
3025: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3026: LD_VAR 0 1
3030: PPUSH
3031: CALL_OW 264
3035: PUSH
3036: LD_INT 51
3038: PUSH
3039: LD_INT 48
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: NOT
3047: IFFALSE 3095
// begin if GetSide ( veh ) = 3 then
3049: LD_VAR 0 1
3053: PPUSH
3054: CALL_OW 255
3058: PUSH
3059: LD_INT 3
3061: EQUAL
3062: IFFALSE 3095
// begin ComMoveXY ( veh , 149 , 8 ) ;
3064: LD_VAR 0 1
3068: PPUSH
3069: LD_INT 149
3071: PPUSH
3072: LD_INT 8
3074: PPUSH
3075: CALL_OW 111
// ru_force := ru_force ^ veh ;
3079: LD_ADDR_EXP 27
3083: PUSH
3084: LD_EXP 27
3088: PUSH
3089: LD_VAR 0 1
3093: ADD
3094: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 264
3104: PUSH
3105: LD_INT 32
3107: PUSH
3108: LD_INT 31
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: IN
3115: NOT
3116: IFFALSE 3149
// begin if GetSide ( veh ) = 8 then
3118: LD_VAR 0 1
3122: PPUSH
3123: CALL_OW 255
3127: PUSH
3128: LD_INT 8
3130: EQUAL
3131: IFFALSE 3149
// legion_force := legion_force ^ veh ;
3133: LD_ADDR_EXP 35
3137: PUSH
3138: LD_EXP 35
3142: PUSH
3143: LD_VAR 0 1
3147: ADD
3148: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 255
3158: PUSH
3159: LD_INT 3
3161: EQUAL
3162: PUSH
3163: LD_EXP 29
3167: NOT
3168: AND
3169: PUSH
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 264
3179: PUSH
3180: LD_INT 51
3182: EQUAL
3183: AND
3184: IFFALSE 3196
// ru_cargo := veh ;
3186: LD_ADDR_EXP 29
3190: PUSH
3191: LD_VAR 0 1
3195: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3196: LD_VAR 0 1
3200: PPUSH
3201: CALL_OW 255
3205: PUSH
3206: LD_INT 7
3208: EQUAL
3209: PUSH
3210: LD_OWVAR 2
3214: PUSH
3215: LD_INT 7
3217: NONEQUAL
3218: AND
3219: IFFALSE 3237
// al_force := al_force ^ veh ;
3221: LD_ADDR_EXP 42
3225: PUSH
3226: LD_EXP 42
3230: PUSH
3231: LD_VAR 0 1
3235: ADD
3236: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3237: LD_VAR 0 1
3241: PPUSH
3242: CALL_OW 255
3246: PUSH
3247: LD_OWVAR 2
3251: EQUAL
3252: IFFALSE 3268
// veh_counter := veh_counter + 1 ;
3254: LD_ADDR_EXP 17
3258: PUSH
3259: LD_EXP 17
3263: PUSH
3264: LD_INT 1
3266: PLUS
3267: ST_TO_ADDR
// end ;
3268: PPOPN 2
3270: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 255
3280: PUSH
3281: LD_OWVAR 2
3285: NONEQUAL
3286: IFFALSE 3302
// sib_contamin_counter := sib_contamin_counter + 1 ;
3288: LD_ADDR_EXP 19
3292: PUSH
3293: LD_EXP 19
3297: PUSH
3298: LD_INT 1
3300: PLUS
3301: ST_TO_ADDR
// end ;
3302: PPOPN 3
3304: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3305: LD_VAR 0 2
3309: PPUSH
3310: CALL_OW 255
3314: PUSH
3315: LD_OWVAR 2
3319: EQUAL
3320: IFFALSE 3336
// tech_counter := tech_counter + 1 ;
3322: LD_ADDR_EXP 18
3326: PUSH
3327: LD_EXP 18
3331: PUSH
3332: LD_INT 1
3334: PLUS
3335: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3336: LD_VAR 0 1
3340: PUSH
3341: LD_INT 53
3343: EQUAL
3344: PUSH
3345: LD_OWVAR 2
3349: PUSH
3350: LD_INT 1
3352: EQUAL
3353: AND
3354: IFFALSE 3369
// SetTech ( 80 , 1 , state_researched ) ;
3356: LD_INT 80
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 322
// end ;
3369: PPOPN 2
3371: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: PUSH
3386: LD_VAR 0 1
3390: PPUSH
3391: CALL_OW 263
3395: PUSH
3396: LD_INT 2
3398: EQUAL
3399: AND
3400: IFFALSE 3411
// ComAutodestruct ( un ) ;
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL 69723 0 1
// end ;
3411: PPOPN 1
3413: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3414: LD_VAR 0 1
3418: PUSH
3419: LD_EXP 20
3423: DOUBLE
3424: EQUAL
3425: IFTRUE 3429
3427: GO 3436
3429: POP
// LegionAttack ( ) ; event_alliance_attack :
3430: CALL 10683 0 0
3434: GO 3471
3436: LD_EXP 22
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3453
3446: POP
// AllianceAttack ( ) ; event_russian_attack :
3447: CALL 18179 0 0
3451: GO 3471
3453: LD_EXP 21
3457: DOUBLE
3458: EQUAL
3459: IFTRUE 3463
3461: GO 3470
3463: POP
// RussianAttack ( ) ; end ;
3464: CALL 7150 0 0
3468: GO 3471
3470: POP
// end ;
3471: PPOPN 1
3473: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3474: LD_INT 25
3476: PUSH
3477: LD_INT 12
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: PUSH
3489: LD_INT 9
3491: LESS
3492: IFFALSE 3525
3494: GO 3496
3496: DISABLE
// begin enable ;
3497: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3498: LD_INT 8
3500: PUSH
3501: LD_INT 25
3503: PUSH
3504: LD_INT 12
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: PUSH
3516: LD_INT 0
3518: PLUS
3519: MINUS
3520: PPUSH
3521: CALL 1760 0 1
// end ;
3525: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3526: LD_VAR 0 1
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 3
3540: PPUSH
3541: CALL 33036 0 3
// end ;
3545: PPOPN 3
3547: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL 33044 0 1
// end ; end_of_file
3557: PPOPN 1
3559: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
3569: PPUSH
3570: PPUSH
3571: PPUSH
3572: PPUSH
// uc_side := 3 ;
3573: LD_ADDR_OWVAR 20
3577: PUSH
3578: LD_INT 3
3580: ST_TO_ADDR
// uc_nation := nation_russian ;
3581: LD_ADDR_OWVAR 21
3585: PUSH
3586: LD_INT 3
3588: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_INT 1
3625: ARRAY
3626: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_INT 22
3634: PUSH
3635: LD_INT 3
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 30
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 69
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3665: LD_ADDR_VAR 0 6
3669: PUSH
3670: LD_INT 22
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: LD_INT 30
3682: PUSH
3683: LD_INT 34
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PPUSH
3694: CALL_OW 69
3698: PUSH
3699: LD_INT 1
3701: ARRAY
3702: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3703: LD_ADDR_VAR 0 8
3707: PUSH
3708: LD_INT 22
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_INT 33
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3737: LD_ADDR_VAR 0 7
3741: PUSH
3742: LD_INT 22
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 30
3754: PUSH
3755: LD_INT 5
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PPUSH
3766: CALL_OW 69
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: ST_TO_ADDR
// ru_blist := [ ] ;
3775: LD_ADDR_EXP 30
3779: PUSH
3780: EMPTY
3781: ST_TO_ADDR
// ru_vlist := [ ] ;
3782: LD_ADDR_EXP 31
3786: PUSH
3787: EMPTY
3788: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3789: LD_ADDR_EXP 34
3793: PUSH
3794: LD_INT 183
3796: PUSH
3797: LD_INT 62
3799: PUSH
3800: LD_INT 147
3802: PUSH
3803: LD_INT 44
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3812: LD_INT 30
3814: PUSH
3815: LD_INT 34
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: LD_INT 1
3829: ARRAY
3830: PPUSH
3831: LD_EXP 34
3835: PUSH
3836: LD_INT 1
3838: ARRAY
3839: PPUSH
3840: LD_EXP 34
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: PPUSH
3849: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3853: LD_ADDR_EXP 32
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 6
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_OWVAR 67
3876: ARRAY
3877: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3878: LD_VAR 0 4
3882: PPUSH
3883: CALL_OW 274
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 3000
3893: PPUSH
3894: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3898: LD_VAR 0 4
3902: PPUSH
3903: CALL_OW 274
3907: PPUSH
3908: LD_INT 2
3910: PPUSH
3911: LD_INT 300
3913: PPUSH
3914: CALL_OW 277
// hc_gallery :=  ;
3918: LD_ADDR_OWVAR 33
3922: PUSH
3923: LD_STRING 
3925: ST_TO_ADDR
// hc_name :=  ;
3926: LD_ADDR_OWVAR 26
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_importance := 0 ;
3934: LD_ADDR_OWVAR 32
3938: PUSH
3939: LD_INT 0
3941: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3942: LD_ADDR_EXP 28
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: LD_INT 6
3952: PUSH
3953: LD_INT 7
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: PUSH
3961: LD_OWVAR 67
3965: ARRAY
3966: ST_TO_ADDR
// for i = 1 to 6 do
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: DOUBLE
3973: LD_INT 1
3975: DEC
3976: ST_TO_ADDR
3977: LD_INT 6
3979: PUSH
3980: FOR_TO
3981: IFFALSE 4139
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3983: LD_INT 0
3985: PPUSH
3986: LD_INT 9
3988: PPUSH
3989: LD_EXP 28
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 7
4017: PPUSH
4018: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 4
4027: PPUSH
4028: LD_EXP 28
4032: PPUSH
4033: CALL_OW 380
// un := CreateHuman ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 44
4046: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 24
4054: PPUSH
4055: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4059: LD_INT 0
4061: PPUSH
4062: LD_INT 3
4064: PPUSH
4065: LD_EXP 28
4069: PPUSH
4070: CALL_OW 380
// un := CreateHuman ;
4074: LD_ADDR_VAR 0 3
4078: PUSH
4079: CALL_OW 44
4083: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_VAR 0 5
4093: PPUSH
4094: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4098: LD_INT 0
4100: PPUSH
4101: LD_INT 2
4103: PPUSH
4104: LD_EXP 28
4108: PPUSH
4109: CALL_OW 380
// un := CreateHuman ;
4113: LD_ADDR_VAR 0 3
4117: PUSH
4118: CALL_OW 44
4122: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4123: LD_VAR 0 3
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: CALL_OW 52
// end ;
4137: GO 3980
4139: POP
4140: POP
// russian_prepared := true ;
4141: LD_ADDR_EXP 2
4145: PUSH
4146: LD_INT 1
4148: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4149: LD_VAR 0 5
4153: PPUSH
4154: LD_INT 21
4156: PPUSH
4157: LD_INT 3
4159: PPUSH
4160: LD_INT 3
4162: PPUSH
4163: LD_INT 51
4165: PPUSH
4166: CALL_OW 125
// end ;
4170: LD_VAR 0 1
4174: RET
// every 0 0$1 trigger legion_mines do var i , p ;
4175: LD_EXP 37
4179: IFFALSE 4391
4181: GO 4183
4183: DISABLE
4184: LD_INT 0
4186: PPUSH
4187: PPUSH
// begin enable ;
4188: ENABLE
// p := 1 ;
4189: LD_ADDR_VAR 0 2
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// for i = legion_mines div 2 downto 1 do
4197: LD_ADDR_VAR 0 1
4201: PUSH
4202: DOUBLE
4203: LD_EXP 37
4207: PUSH
4208: LD_INT 2
4210: DIV
4211: INC
4212: ST_TO_ADDR
4213: LD_INT 1
4215: PUSH
4216: FOR_DOWNTO
4217: IFFALSE 4389
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
4219: LD_EXP 37
4223: PUSH
4224: LD_VAR 0 2
4228: ARRAY
4229: PPUSH
4230: LD_EXP 37
4234: PUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: ARRAY
4244: PPUSH
4245: CALL_OW 428
4249: PUSH
4250: LD_INT 0
4252: GREATER
4253: IFFALSE 4387
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
4255: LD_EXP 37
4259: PUSH
4260: LD_VAR 0 2
4264: ARRAY
4265: PPUSH
4266: LD_EXP 37
4270: PUSH
4271: LD_VAR 0 2
4275: PUSH
4276: LD_INT 1
4278: PLUS
4279: ARRAY
4280: PPUSH
4281: CALL_OW 428
4285: PPUSH
4286: CALL_OW 255
4290: PUSH
4291: LD_EXP 40
4295: EQUAL
4296: IFFALSE 4373
// begin LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
4298: LD_EXP 37
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: LD_EXP 37
4313: PUSH
4314: LD_VAR 0 2
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: ARRAY
4323: PPUSH
4324: LD_INT 8
4326: PPUSH
4327: CALL_OW 456
// legion_mines := Delete ( legion_mines , p ) ;
4331: LD_ADDR_EXP 37
4335: PUSH
4336: LD_EXP 37
4340: PPUSH
4341: LD_VAR 0 2
4345: PPUSH
4346: CALL_OW 3
4350: ST_TO_ADDR
// legion_mines := Delete ( legion_mines , p ) ;
4351: LD_ADDR_EXP 37
4355: PUSH
4356: LD_EXP 37
4360: PPUSH
4361: LD_VAR 0 2
4365: PPUSH
4366: CALL_OW 3
4370: ST_TO_ADDR
// end else
4371: GO 4387
// p := p + 2 ;
4373: LD_ADDR_VAR 0 2
4377: PUSH
4378: LD_VAR 0 2
4382: PUSH
4383: LD_INT 2
4385: PLUS
4386: ST_TO_ADDR
// end ;
4387: GO 4216
4389: POP
4390: POP
// end ;
4391: PPOPN 2
4393: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4394: LD_INT 22
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 69
4408: PUSH
4409: LD_INT 0
4411: GREATER
4412: PUSH
4413: LD_EXP 2
4417: AND
4418: IFFALSE 6651
4420: GO 4422
4422: DISABLE
4423: LD_INT 0
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
4429: PPUSH
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
4438: PPUSH
4439: PPUSH
4440: PPUSH
// begin enable ;
4441: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 30
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PUSH
4476: LD_INT 1
4478: ARRAY
4479: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 22
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 30
4497: PUSH
4498: LD_INT 3
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PPUSH
4509: CALL_OW 69
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 30
4535: PUSH
4536: LD_INT 34
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: PUSH
4552: LD_INT 1
4554: ARRAY
4555: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 30
4573: PUSH
4574: LD_INT 33
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4590: LD_ADDR_VAR 0 8
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 5
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PPUSH
4619: CALL_OW 69
4623: PUSH
4624: LD_INT 1
4626: ARRAY
4627: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4628: LD_ADDR_VAR 0 5
4632: PUSH
4633: LD_INT 22
4635: PUSH
4636: LD_INT 3
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 21
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4662: LD_ADDR_VAR 0 6
4666: PUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 69
4695: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4696: LD_ADDR_VAR 0 7
4700: PUSH
4701: LD_INT 22
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 21
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 69
4729: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4730: LD_ADDR_VAR 0 9
4734: PUSH
4735: LD_VAR 0 7
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 72
4754: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4755: LD_ADDR_VAR 0 10
4759: PUSH
4760: LD_VAR 0 7
4764: PPUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 72
4779: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4780: LD_ADDR_VAR 0 11
4784: PUSH
4785: LD_VAR 0 7
4789: PPUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 4
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 72
4804: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4805: LD_INT 22
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 34
4817: PUSH
4818: LD_INT 51
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PPUSH
4829: CALL_OW 69
4833: PUSH
4834: LD_INT 0
4836: GREATER
4837: PUSH
4838: LD_EXP 29
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: AND
4847: IFFALSE 4887
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4849: LD_ADDR_EXP 29
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 34
4866: PUSH
4867: LD_INT 51
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 69
4882: PUSH
4883: LD_INT 1
4885: ARRAY
4886: ST_TO_ADDR
// if ru_cargo then
4887: LD_EXP 29
4891: IFFALSE 5231
// begin if IsInArea ( ru_cargo , ru_base ) then
4893: LD_EXP 29
4897: PPUSH
4898: LD_INT 9
4900: PPUSH
4901: CALL_OW 308
4905: IFFALSE 4984
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4907: LD_EXP 29
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: CALL_OW 289
4919: PUSH
4920: LD_INT 0
4922: EQUAL
4923: IFFALSE 4941
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4925: LD_EXP 29
4929: PPUSH
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 120
4939: GO 4982
// if not HasTask ( ru_cargo ) then
4941: LD_EXP 29
4945: PPUSH
4946: CALL_OW 314
4950: NOT
4951: IFFALSE 4982
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4953: LD_EXP 29
4957: PPUSH
4958: LD_VAR 0 1
4962: PPUSH
4963: CALL_OW 250
4967: PPUSH
4968: LD_VAR 0 1
4972: PPUSH
4973: CALL_OW 251
4977: PPUSH
4978: CALL_OW 111
// end else
4982: GO 5231
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4984: LD_EXP 29
4988: PPUSH
4989: CALL_OW 314
4993: NOT
4994: PUSH
4995: LD_EXP 29
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 289
5007: PUSH
5008: LD_INT 100
5010: LESS
5011: AND
5012: PUSH
5013: LD_EXP 29
5017: PPUSH
5018: LD_INT 10
5020: PPUSH
5021: CALL_OW 308
5025: NOT
5026: AND
5027: IFFALSE 5104
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5029: LD_ADDR_VAR 0 15
5033: PUSH
5034: LD_INT 11
5036: PPUSH
5037: CALL_OW 435
5041: ST_TO_ADDR
// if cr then
5042: LD_VAR 0 15
5046: IFFALSE 5077
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5048: LD_EXP 29
5052: PPUSH
5053: LD_VAR 0 15
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 15
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: CALL_OW 117
5075: GO 5104
// if not IsInArea ( ru_cargo , ru_crates ) then
5077: LD_EXP 29
5081: PPUSH
5082: LD_INT 11
5084: PPUSH
5085: CALL_OW 308
5089: NOT
5090: IFFALSE 5104
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5092: LD_EXP 29
5096: PPUSH
5097: LD_INT 11
5099: PPUSH
5100: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5104: LD_EXP 29
5108: PPUSH
5109: CALL_OW 314
5113: NOT
5114: PUSH
5115: LD_EXP 29
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: CALL_OW 308
5127: NOT
5128: AND
5129: PUSH
5130: LD_EXP 29
5134: PPUSH
5135: LD_INT 1
5137: PPUSH
5138: CALL_OW 289
5142: PUSH
5143: LD_INT 100
5145: EQUAL
5146: PUSH
5147: LD_OWVAR 2
5151: PPUSH
5152: LD_EXP 29
5156: PPUSH
5157: CALL_OW 292
5161: OR
5162: AND
5163: IFFALSE 5177
// ComMoveToArea ( ru_cargo , cargoa ) ;
5165: LD_EXP 29
5169: PPUSH
5170: LD_INT 10
5172: PPUSH
5173: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5177: LD_EXP 29
5181: PPUSH
5182: LD_INT 10
5184: PPUSH
5185: CALL_OW 308
5189: PUSH
5190: LD_VAR 0 8
5194: AND
5195: IFFALSE 5231
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5197: LD_VAR 0 7
5201: PPUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 9
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 72
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_INT 139
5223: PPUSH
5224: LD_INT 24
5226: PPUSH
5227: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5231: LD_EXP 29
5235: PUSH
5236: LD_INT 0
5238: EQUAL
5239: PUSH
5240: LD_VAR 0 2
5244: AND
5245: PUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: CALL_OW 461
5255: PUSH
5256: LD_INT 2
5258: EQUAL
5259: AND
5260: IFFALSE 5283
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 21
5269: PPUSH
5270: LD_INT 3
5272: PPUSH
5273: LD_INT 3
5275: PPUSH
5276: LD_INT 51
5278: PPUSH
5279: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: IFFALSE 5366
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5304: LD_VAR 0 7
5308: PPUSH
5309: LD_INT 25
5311: PUSH
5312: LD_INT 9
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 72
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_OWVAR 2
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: LD_INT 21
5341: PUSH
5342: LD_INT 3
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PPUSH
5357: CALL_OW 69
5361: PPUSH
5362: CALL 1533 0 2
// if ru_factory and ru_vlist > 0 then
5366: LD_VAR 0 2
5370: PUSH
5371: LD_EXP 31
5375: PUSH
5376: LD_INT 0
5378: GREATER
5379: AND
5380: IFFALSE 5480
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5382: LD_VAR 0 2
5386: PPUSH
5387: CALL_OW 461
5391: PUSH
5392: LD_INT 2
5394: EQUAL
5395: IFFALSE 5480
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5397: LD_VAR 0 2
5401: PPUSH
5402: LD_EXP 31
5406: PUSH
5407: LD_INT 1
5409: ARRAY
5410: PPUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_INT 2
5418: ARRAY
5419: PPUSH
5420: LD_EXP 31
5424: PUSH
5425: LD_INT 3
5427: ARRAY
5428: PPUSH
5429: LD_EXP 31
5433: PUSH
5434: LD_INT 4
5436: ARRAY
5437: PPUSH
5438: CALL_OW 125
// for i = 1 to 4 do
5442: LD_ADDR_VAR 0 12
5446: PUSH
5447: DOUBLE
5448: LD_INT 1
5450: DEC
5451: ST_TO_ADDR
5452: LD_INT 4
5454: PUSH
5455: FOR_TO
5456: IFFALSE 5478
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5458: LD_ADDR_EXP 31
5462: PUSH
5463: LD_EXP 31
5467: PPUSH
5468: LD_INT 1
5470: PPUSH
5471: CALL_OW 3
5475: ST_TO_ADDR
5476: GO 5455
5478: POP
5479: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5480: LD_INT 24
5482: PPUSH
5483: CALL_OW 461
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: PUSH
5492: LD_EXP 4
5496: AND
5497: IFFALSE 5525
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5499: LD_INT 25
5501: PPUSH
5502: LD_INT 3
5504: PPUSH
5505: CALL_OW 321
5509: PUSH
5510: LD_INT 1
5512: EQUAL
5513: IFFALSE 5525
// ComResearch ( ru_lab , tech_sibfiss ) ;
5515: LD_INT 24
5517: PPUSH
5518: LD_INT 25
5520: PPUSH
5521: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5525: LD_INT 25
5527: PPUSH
5528: LD_INT 3
5530: PPUSH
5531: CALL_OW 321
5535: PUSH
5536: LD_INT 2
5538: EQUAL
5539: PUSH
5540: LD_OWVAR 1
5544: PUSH
5545: LD_INT 10500
5547: MOD
5548: PUSH
5549: LD_INT 0
5551: EQUAL
5552: AND
5553: IFFALSE 5591
// if BuildingStatus ( ru_factory ) = bs_idle then
5555: LD_VAR 0 2
5559: PPUSH
5560: CALL_OW 461
5564: PUSH
5565: LD_INT 2
5567: EQUAL
5568: IFFALSE 5591
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5570: LD_VAR 0 2
5574: PPUSH
5575: LD_INT 23
5577: PPUSH
5578: LD_INT 3
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 48
5586: PPUSH
5587: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5591: LD_INT 22
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 34
5603: PUSH
5604: LD_INT 48
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL_OW 69
5619: PUSH
5620: LD_INT 0
5622: GREATER
5623: IFFALSE 5997
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5625: LD_ADDR_VAR 0 16
5629: PUSH
5630: LD_INT 22
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 48
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: CALL_OW 69
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5663: LD_VAR 0 16
5667: PPUSH
5668: LD_INT 9
5670: PPUSH
5671: CALL_OW 308
5675: IFFALSE 5693
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5677: LD_VAR 0 16
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 120
5691: GO 5997
// if not HasTask ( sib_bomb ) then
5693: LD_VAR 0 16
5697: PPUSH
5698: CALL_OW 314
5702: NOT
5703: IFFALSE 5997
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5705: LD_INT 22
5707: PUSH
5708: LD_OWVAR 2
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 30
5719: PUSH
5720: LD_INT 1
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PPUSH
5740: CALL_OW 256
5744: PUSH
5745: LD_INT 250
5747: GREATER
5748: IFFALSE 5841
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5750: LD_VAR 0 16
5754: PPUSH
5755: LD_INT 22
5757: PUSH
5758: LD_OWVAR 2
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 1
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: PPUSH
5790: CALL_OW 250
5794: PPUSH
5795: LD_INT 22
5797: PUSH
5798: LD_OWVAR 2
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 30
5809: PUSH
5810: LD_INT 1
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 69
5825: PUSH
5826: LD_INT 1
5828: ARRAY
5829: PPUSH
5830: CALL_OW 251
5834: PPUSH
5835: CALL_OW 116
5839: GO 5997
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5841: LD_INT 22
5843: PUSH
5844: LD_OWVAR 2
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 21
5855: PUSH
5856: LD_INT 3
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 69
5871: PUSH
5872: LD_INT 0
5874: GREATER
5875: IFFALSE 5968
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5877: LD_VAR 0 16
5881: PPUSH
5882: LD_INT 22
5884: PUSH
5885: LD_OWVAR 2
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 21
5896: PUSH
5897: LD_INT 3
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 69
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 250
5921: PPUSH
5922: LD_INT 22
5924: PUSH
5925: LD_OWVAR 2
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 21
5936: PUSH
5937: LD_INT 3
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: LD_INT 1
5955: ARRAY
5956: PPUSH
5957: CALL_OW 251
5961: PPUSH
5962: CALL_OW 116
5966: GO 5997
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5968: LD_VAR 0 16
5972: PPUSH
5973: LD_EXP 11
5977: PPUSH
5978: CALL_OW 250
5982: PPUSH
5983: LD_EXP 11
5987: PPUSH
5988: CALL_OW 251
5992: PPUSH
5993: CALL_OW 116
// end ; if ru_can_attack then
5997: LD_EXP 3
6001: IFFALSE 6149
// if ru_time > 0 0$00 then
6003: LD_EXP 33
6007: PUSH
6008: LD_INT 0
6010: GREATER
6011: IFFALSE 6029
// ru_time := ru_time - 0 0$03 else
6013: LD_ADDR_EXP 33
6017: PUSH
6018: LD_EXP 33
6022: PUSH
6023: LD_INT 105
6025: MINUS
6026: ST_TO_ADDR
6027: GO 6149
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6029: LD_ADDR_EXP 33
6033: PUSH
6034: LD_INT 20265
6036: PPUSH
6037: LD_INT 30765
6039: PPUSH
6040: CALL_OW 12
6044: ST_TO_ADDR
// for i = 1 to ru_amount do
6045: LD_ADDR_VAR 0 12
6049: PUSH
6050: DOUBLE
6051: LD_INT 1
6053: DEC
6054: ST_TO_ADDR
6055: LD_EXP 32
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6147
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6063: LD_ADDR_EXP 31
6067: PUSH
6068: LD_EXP 31
6072: PUSH
6073: LD_INT 23
6075: ADD
6076: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6077: LD_ADDR_EXP 31
6081: PUSH
6082: LD_EXP 31
6086: PUSH
6087: LD_INT 3
6089: ADD
6090: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6091: LD_ADDR_EXP 31
6095: PUSH
6096: LD_EXP 31
6100: PUSH
6101: LD_INT 3
6103: ADD
6104: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6105: LD_ADDR_EXP 31
6109: PUSH
6110: LD_EXP 31
6114: PUSH
6115: LD_INT 46
6117: PUSH
6118: LD_INT 45
6120: PUSH
6121: LD_INT 47
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 3
6137: PPUSH
6138: CALL_OW 14
6142: ARRAY
6143: ADD
6144: ST_TO_ADDR
// end ;
6145: GO 6060
6147: POP
6148: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6149: LD_VAR 0 4
6153: PPUSH
6154: LD_INT 35
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PPUSH
6164: CALL_OW 72
6168: PUSH
6169: LD_INT 0
6171: GREATER
6172: IFFALSE 6220
// if BuildingStatus ( ru_factory ) = bs_idle then
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 461
6183: PUSH
6184: LD_INT 2
6186: EQUAL
6187: IFFALSE 6220
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6189: LD_VAR 0 4
6193: PPUSH
6194: LD_INT 35
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 72
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: LD_INT 47
6215: PPUSH
6216: CALL_OW 148
// if ru_force >= ru_amount then
6220: LD_EXP 27
6224: PUSH
6225: LD_EXP 32
6229: GREATEREQUAL
6230: IFFALSE 6241
// RaiseSailEvent ( event_russian_attack ) ;
6232: LD_EXP 21
6236: PPUSH
6237: CALL_OW 427
// if ru_engs > 0 then
6241: LD_VAR 0 9
6245: PUSH
6246: LD_INT 0
6248: GREATER
6249: IFFALSE 6651
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: PUSH
6278: LD_INT 0
6280: GREATER
6281: IFFALSE 6436
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6283: LD_ADDR_VAR 0 14
6287: PUSH
6288: LD_VAR 0 5
6292: PPUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 24
6298: PUSH
6299: LD_INT 1000
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 72
6314: ST_TO_ADDR
// for i = 1 to ru_engs do
6315: LD_ADDR_VAR 0 12
6319: PUSH
6320: DOUBLE
6321: LD_INT 1
6323: DEC
6324: ST_TO_ADDR
6325: LD_VAR 0 9
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6432
// begin if IsInUnit ( ru_engs [ i ] ) then
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 310
6348: IFFALSE 6367
// ComExitBuilding ( ru_engs [ i ] ) else
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 122
6365: GO 6430
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 314
6382: NOT
6383: PUSH
6384: LD_VAR 0 9
6388: PUSH
6389: LD_VAR 0 12
6393: ARRAY
6394: PPUSH
6395: CALL_OW 256
6399: PUSH
6400: LD_INT 600
6402: GREATER
6403: AND
6404: IFFALSE 6430
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6406: LD_VAR 0 9
6410: PUSH
6411: LD_VAR 0 12
6415: ARRAY
6416: PPUSH
6417: LD_VAR 0 14
6421: PUSH
6422: LD_INT 1
6424: ARRAY
6425: PPUSH
6426: CALL_OW 130
// end ;
6430: GO 6330
6432: POP
6433: POP
// end else
6434: GO 6651
// begin if ru_blist = 0 then
6436: LD_EXP 30
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: IFFALSE 6526
// begin for i = 1 to ru_engs do
6446: LD_ADDR_VAR 0 12
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 9
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6522
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 314
6479: NOT
6480: PUSH
6481: LD_VAR 0 9
6485: PUSH
6486: LD_VAR 0 12
6490: ARRAY
6491: PPUSH
6492: CALL_OW 310
6496: NOT
6497: AND
6498: IFFALSE 6520
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6500: LD_VAR 0 9
6504: PUSH
6505: LD_VAR 0 12
6509: ARRAY
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 120
6520: GO 6461
6522: POP
6523: POP
// end else
6524: GO 6651
// begin for i = 1 to ru_engs do
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_VAR 0 9
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6649
// begin if IsInUnit ( ru_engs [ i ] ) then
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 310
6559: IFFALSE 6578
// ComExitBuilding ( ru_engs [ i ] ) else
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 122
6576: GO 6647
// if not HasTask ( ru_engs [ i ] ) then
6578: LD_VAR 0 9
6582: PUSH
6583: LD_VAR 0 12
6587: ARRAY
6588: PPUSH
6589: CALL_OW 314
6593: NOT
6594: IFFALSE 6647
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6596: LD_VAR 0 9
6600: PUSH
6601: LD_VAR 0 12
6605: ARRAY
6606: PPUSH
6607: LD_EXP 30
6611: PUSH
6612: LD_INT 1
6614: ARRAY
6615: PPUSH
6616: LD_EXP 30
6620: PUSH
6621: LD_INT 2
6623: ARRAY
6624: PPUSH
6625: LD_EXP 30
6629: PUSH
6630: LD_INT 3
6632: ARRAY
6633: PPUSH
6634: LD_EXP 30
6638: PUSH
6639: LD_INT 4
6641: ARRAY
6642: PPUSH
6643: CALL_OW 145
// end ;
6647: GO 6541
6649: POP
6650: POP
// end ; end ; end ; end ;
6651: PPOPN 16
6653: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6654: LD_EXP 2
6658: PUSH
6659: LD_INT 11
6661: PPUSH
6662: CALL_OW 435
6666: PUSH
6667: LD_INT 10
6669: LESS
6670: AND
6671: IFFALSE 6734
6673: GO 6675
6675: DISABLE
// begin enable ;
6676: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6677: LD_INT 1
6679: PPUSH
6680: LD_INT 5
6682: PPUSH
6683: CALL_OW 12
6687: PPUSH
6688: LD_INT 11
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6698: LD_INT 1505
6700: PPUSH
6701: LD_INT 2100
6703: PPUSH
6704: CALL_OW 12
6708: PPUSH
6709: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6713: LD_INT 1
6715: PPUSH
6716: LD_INT 5
6718: PPUSH
6719: CALL_OW 12
6723: PPUSH
6724: LD_INT 11
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 55
// end ;
6734: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6735: LD_EXP 4
6739: NOT
6740: IFFALSE 6855
6742: GO 6744
6744: DISABLE
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// begin enable ;
6749: ENABLE
// i := Rand ( 0 , 100 ) ;
6750: LD_ADDR_VAR 0 1
6754: PUSH
6755: LD_INT 0
6757: PPUSH
6758: LD_INT 100
6760: PPUSH
6761: CALL_OW 12
6765: ST_TO_ADDR
// case your_side of 1 :
6766: LD_OWVAR 2
6770: PUSH
6771: LD_INT 1
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6790
6779: POP
// tmp := 10 ; 2 :
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 10
6787: ST_TO_ADDR
6788: GO 6829
6790: LD_INT 2
6792: DOUBLE
6793: EQUAL
6794: IFTRUE 6798
6796: GO 6809
6798: POP
// tmp := 0 ; 7 :
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
6807: GO 6829
6809: LD_INT 7
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6828
6817: POP
// tmp := 15 ; end ;
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_INT 15
6825: ST_TO_ADDR
6826: GO 6829
6828: POP
// if i < chance_to_bomb + tmp then
6829: LD_VAR 0 1
6833: PUSH
6834: LD_EXP 5
6838: PUSH
6839: LD_VAR 0 2
6843: PLUS
6844: LESS
6845: IFFALSE 6855
// ru_sib_bomb := true ;
6847: LD_ADDR_EXP 4
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// end ;
6855: PPOPN 2
6857: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6858: LD_INT 22
6860: PUSH
6861: LD_OWVAR 2
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 34
6872: PUSH
6873: LD_INT 8
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 69
6888: IFFALSE 6901
6890: GO 6892
6892: DISABLE
// begin ru_sib_bomb := true ;
6893: LD_ADDR_EXP 4
6897: PUSH
6898: LD_INT 1
6900: ST_TO_ADDR
// end ;
6901: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6902: LD_INT 22
6904: PUSH
6905: LD_INT 3
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 30
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PPUSH
6926: CALL_OW 69
6930: IFFALSE 7029
6932: GO 6934
6934: DISABLE
6935: LD_INT 0
6937: PPUSH
// begin enable ;
6938: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6939: LD_ADDR_VAR 0 1
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 1
6956: PPUSH
6957: LD_INT 2
6959: PPUSH
6960: CALL_OW 12
6964: ARRAY
6965: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 30
6978: PUSH
6979: LD_INT 34
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: LD_EXP 34
7003: PUSH
7004: LD_VAR 0 1
7008: ARRAY
7009: PPUSH
7010: LD_EXP 34
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: LD_INT 1
7022: PLUS
7023: ARRAY
7024: PPUSH
7025: CALL_OW 243
// end ;
7029: PPOPN 1
7031: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7032: LD_INT 22
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 1
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 69
7060: IFFALSE 7147
7062: GO 7064
7064: DISABLE
7065: LD_INT 0
7067: PPUSH
// begin enable ;
7068: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7069: LD_ADDR_VAR 0 1
7073: PUSH
7074: LD_INT 22
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 274
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 6000
7122: PPUSH
7123: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 274
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: LD_INT 600
7142: PPUSH
7143: CALL_OW 276
// end ;
7147: PPOPN 1
7149: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
// units := ru_force ;
7158: LD_ADDR_VAR 0 3
7162: PUSH
7163: LD_EXP 27
7167: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7168: LD_ADDR_VAR 0 6
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 69
7201: ST_TO_ADDR
// ru_force := [ ] ;
7202: LD_ADDR_EXP 27
7206: PUSH
7207: EMPTY
7208: ST_TO_ADDR
// if not teleport then
7209: LD_VAR 0 6
7213: NOT
7214: IFFALSE 7256
// begin for i in units do
7216: LD_ADDR_VAR 0 5
7220: PUSH
7221: LD_VAR 0 3
7225: PUSH
7226: FOR_IN
7227: IFFALSE 7252
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7229: LD_VAR 0 5
7233: PPUSH
7234: LD_INT 150
7236: PPUSH
7237: LD_INT 65
7239: PPUSH
7240: LD_INT 12
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 483
7250: GO 7226
7252: POP
7253: POP
// end else
7254: GO 7351
// begin repeat for i = 1 to units do
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_VAR 0 3
7270: PUSH
7271: FOR_TO
7272: IFFALSE 7320
// if IsInArea ( units [ i ] , ru_base ) then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_VAR 0 5
7283: ARRAY
7284: PPUSH
7285: LD_INT 9
7287: PPUSH
7288: CALL_OW 308
7292: IFFALSE 7318
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7294: LD_VAR 0 3
7298: PUSH
7299: LD_VAR 0 5
7303: ARRAY
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 1
7312: ARRAY
7313: PPUSH
7314: CALL_OW 120
7318: GO 7271
7320: POP
7321: POP
// wait ( 0 0$10 ) ;
7322: LD_INT 350
7324: PPUSH
7325: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_INT 95
7336: PUSH
7337: LD_INT 9
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 72
7348: NOT
7349: IFFALSE 7256
// end ; p := rand ( 1 , 2 ) ;
7351: LD_ADDR_VAR 0 4
7355: PUSH
7356: LD_INT 1
7358: PPUSH
7359: LD_INT 2
7361: PPUSH
7362: CALL_OW 12
7366: ST_TO_ADDR
// case p of 1 :
7367: LD_VAR 0 4
7371: PUSH
7372: LD_INT 1
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7380
7378: GO 7434
7380: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7381: LD_ADDR_VAR 0 2
7385: PUSH
7386: LD_INT 159
7388: PUSH
7389: LD_INT 71
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 152
7398: PUSH
7399: LD_INT 99
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 119
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 104
7418: PUSH
7419: LD_INT 127
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 7497
7434: LD_INT 2
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7496
7442: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7443: LD_ADDR_VAR 0 2
7447: PUSH
7448: LD_INT 116
7450: PUSH
7451: LD_INT 36
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 91
7460: PUSH
7461: LD_INT 52
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 53
7470: PUSH
7471: LD_INT 67
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 58
7480: PUSH
7481: LD_INT 107
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 7497
7496: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7497: LD_INT 22
7499: PUSH
7500: LD_INT 7
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 69
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_INT 1
7519: GREATER
7520: AND
7521: IFFALSE 7552
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7523: LD_ADDR_VAR 0 2
7527: PUSH
7528: LD_INT 116
7530: PUSH
7531: LD_INT 36
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 91
7540: PUSH
7541: LD_INT 52
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7552: LD_INT 35
7554: PPUSH
7555: CALL_OW 67
// AgressiveMove ( units , path ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_VAR 0 2
7568: PPUSH
7569: CALL 76075 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_INT 50
7580: PUSH
7581: EMPTY
7582: LIST
7583: PPUSH
7584: CALL_OW 72
7588: NOT
7589: IFFALSE 7552
// end ; end_of_file
7591: LD_VAR 0 1
7595: RET
// export function RemoveLegion ; var i ; begin
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: LD_INT 22
7607: PUSH
7608: LD_INT 8
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PPUSH
7615: CALL_OW 69
7619: PUSH
7620: FOR_IN
7621: IFFALSE 7634
// RemoveUnit ( i ) ;
7623: LD_VAR 0 2
7627: PPUSH
7628: CALL_OW 64
7632: GO 7620
7634: POP
7635: POP
// end ;
7636: LD_VAR 0 1
7640: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7641: LD_INT 0
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 8
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 30
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 69
7686: PUSH
7687: LD_INT 1
7689: ARRAY
7690: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7691: LD_ADDR_VAR 0 8
7695: PUSH
7696: LD_INT 22
7698: PUSH
7699: LD_INT 8
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 30
7708: PUSH
7709: LD_INT 3
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 22
7736: PUSH
7737: LD_INT 8
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 6
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 8
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PUSH
7781: LD_INT 1
7783: ARRAY
7784: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7785: LD_ADDR_VAR 0 10
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 8
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 32
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: ST_TO_ADDR
// uc_side := 8 ;
7819: LD_ADDR_OWVAR 20
7823: PUSH
7824: LD_INT 8
7826: ST_TO_ADDR
// uc_nation := nation_arabian ;
7827: LD_ADDR_OWVAR 21
7831: PUSH
7832: LD_INT 2
7834: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7835: LD_ADDR_EXP 36
7839: PUSH
7840: LD_INT 5
7842: PUSH
7843: LD_INT 6
7845: PUSH
7846: LD_INT 7
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: LD_OWVAR 67
7858: ARRAY
7859: ST_TO_ADDR
// legion_blist := [ ] ;
7860: LD_ADDR_EXP 38
7864: PUSH
7865: EMPTY
7866: ST_TO_ADDR
// legion_vlist := [ ] ;
7867: LD_ADDR_EXP 39
7871: PUSH
7872: EMPTY
7873: ST_TO_ADDR
// legion_force := [ ] ;
7874: LD_ADDR_EXP 35
7878: PUSH
7879: EMPTY
7880: ST_TO_ADDR
// legion_enemy := - 1 ;
7881: LD_ADDR_EXP 40
7885: PUSH
7886: LD_INT 1
7888: NEG
7889: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7890: LD_VAR 0 6
7894: PPUSH
7895: CALL_OW 274
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: LD_INT 10000
7905: PPUSH
7906: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7910: LD_VAR 0 6
7914: PPUSH
7915: CALL_OW 274
7919: PPUSH
7920: LD_INT 3
7922: PPUSH
7923: LD_INT 1000
7925: PPUSH
7926: CALL_OW 277
// for i = 1 to l_towers do
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: DOUBLE
7936: LD_INT 1
7938: DEC
7939: ST_TO_ADDR
7940: LD_VAR 0 10
7944: PUSH
7945: FOR_TO
7946: IFFALSE 7995
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7948: LD_INT 0
7950: PPUSH
7951: LD_INT 1
7953: PPUSH
7954: LD_EXP 36
7958: PPUSH
7959: CALL_OW 380
// un := CreateHuman ;
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: CALL_OW 44
7972: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7973: LD_VAR 0 2
7977: PPUSH
7978: LD_VAR 0 10
7982: PUSH
7983: LD_VAR 0 3
7987: ARRAY
7988: PPUSH
7989: CALL_OW 52
// end ;
7993: GO 7945
7995: POP
7996: POP
// for i = 1 to 4 do
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: DOUBLE
8003: LD_INT 1
8005: DEC
8006: ST_TO_ADDR
8007: LD_INT 4
8009: PUSH
8010: FOR_TO
8011: IFFALSE 8104
// for p = 1 to 2 do
8013: LD_ADDR_VAR 0 7
8017: PUSH
8018: DOUBLE
8019: LD_INT 1
8021: DEC
8022: ST_TO_ADDR
8023: LD_INT 2
8025: PUSH
8026: FOR_TO
8027: IFFALSE 8100
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8029: LD_INT 0
8031: PPUSH
8032: LD_INT 8
8034: PPUSH
8035: LD_EXP 36
8039: PPUSH
8040: CALL_OW 380
// un := CreateHuman ;
8044: LD_ADDR_VAR 0 2
8048: PUSH
8049: CALL_OW 44
8053: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_INT 22
8061: PUSH
8062: LD_INT 8
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 30
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 69
8087: PUSH
8088: LD_VAR 0 7
8092: ARRAY
8093: PPUSH
8094: CALL_OW 52
// end ;
8098: GO 8026
8100: POP
8101: POP
8102: GO 8010
8104: POP
8105: POP
// for i = 1 to 4 do
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: DOUBLE
8112: LD_INT 1
8114: DEC
8115: ST_TO_ADDR
8116: LD_INT 4
8118: PUSH
8119: FOR_TO
8120: IFFALSE 8163
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8122: LD_INT 0
8124: PPUSH
8125: LD_INT 4
8127: PPUSH
8128: LD_EXP 36
8132: PPUSH
8133: CALL_OW 380
// un := CreateHuman ;
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: CALL_OW 44
8146: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_VAR 0 9
8156: PPUSH
8157: CALL_OW 52
// end ;
8161: GO 8119
8163: POP
8164: POP
// for i = 1 to 4 do
8165: LD_ADDR_VAR 0 3
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_INT 4
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8222
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8181: LD_INT 0
8183: PPUSH
8184: LD_INT 3
8186: PPUSH
8187: LD_EXP 36
8191: PPUSH
8192: CALL_OW 380
// un := CreateHuman ;
8196: LD_ADDR_VAR 0 2
8200: PUSH
8201: CALL_OW 44
8205: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8206: LD_VAR 0 2
8210: PPUSH
8211: LD_VAR 0 8
8215: PPUSH
8216: CALL_OW 52
// end ;
8220: GO 8178
8222: POP
8223: POP
// for i = 1 to 3 do
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: DOUBLE
8230: LD_INT 1
8232: DEC
8233: ST_TO_ADDR
8234: LD_INT 3
8236: PUSH
8237: FOR_TO
8238: IFFALSE 8281
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8240: LD_INT 0
8242: PPUSH
8243: LD_INT 2
8245: PPUSH
8246: LD_EXP 36
8250: PPUSH
8251: CALL_OW 380
// un := CreateHuman ;
8255: LD_ADDR_VAR 0 2
8259: PUSH
8260: CALL_OW 44
8264: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_VAR 0 6
8274: PPUSH
8275: CALL_OW 52
// end ;
8279: GO 8237
8281: POP
8282: POP
// for i = 1 to 3 do
8283: LD_ADDR_VAR 0 3
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_INT 3
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8407
// begin vc_chassis := ar_half_tracked ;
8299: LD_ADDR_OWVAR 37
8303: PUSH
8304: LD_INT 14
8306: ST_TO_ADDR
// vc_engine := engine_siberite ;
8307: LD_ADDR_OWVAR 39
8311: PUSH
8312: LD_INT 3
8314: ST_TO_ADDR
// vc_control := control_manual ;
8315: LD_ADDR_OWVAR 38
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8323: LD_ADDR_OWVAR 40
8327: PUSH
8328: LD_INT 31
8330: ST_TO_ADDR
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8341: LD_VAR 0 5
8345: PPUSH
8346: LD_INT 212
8348: PPUSH
8349: LD_INT 135
8351: PPUSH
8352: LD_INT 5
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8362: LD_INT 0
8364: PPUSH
8365: LD_INT 3
8367: PPUSH
8368: LD_EXP 36
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: PPUSH
8377: CALL_OW 380
// un := CreateHuman ;
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: CALL_OW 44
8390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 5
8400: PPUSH
8401: CALL_OW 52
// end ;
8405: GO 8296
8407: POP
8408: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8409: LD_INT 198
8411: PPUSH
8412: LD_INT 94
8414: PPUSH
8415: LD_INT 8
8417: PPUSH
8418: LD_INT 10
8420: PPUSH
8421: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8425: LD_INT 167
8427: PPUSH
8428: LD_INT 130
8430: PPUSH
8431: LD_INT 8
8433: PPUSH
8434: LD_INT 10
8436: PPUSH
8437: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_INT 25
8448: PPUSH
8449: LD_INT 0
8451: PPUSH
8452: CALL_OW 517
8456: ST_TO_ADDR
// legion_mines := [ ] ;
8457: LD_ADDR_EXP 37
8461: PUSH
8462: EMPTY
8463: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_VAR 0 4
8478: PUSH
8479: LD_INT 1
8481: ARRAY
8482: PUSH
8483: FOR_TO
8484: IFFALSE 8586
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8486: LD_VAR 0 4
8490: PUSH
8491: LD_INT 1
8493: ARRAY
8494: PUSH
8495: LD_VAR 0 3
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 4
8505: PUSH
8506: LD_INT 2
8508: ARRAY
8509: PUSH
8510: LD_VAR 0 3
8514: ARRAY
8515: PPUSH
8516: LD_INT 8
8518: PPUSH
8519: LD_INT 0
8521: PPUSH
8522: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8526: LD_ADDR_EXP 37
8530: PUSH
8531: LD_EXP 37
8535: PPUSH
8536: LD_EXP 37
8540: PUSH
8541: LD_INT 1
8543: PLUS
8544: PPUSH
8545: LD_VAR 0 4
8549: PUSH
8550: LD_INT 1
8552: ARRAY
8553: PUSH
8554: LD_VAR 0 3
8558: ARRAY
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PUSH
8569: LD_VAR 0 3
8573: ARRAY
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL_OW 1
8583: ST_TO_ADDR
// end ;
8584: GO 8483
8586: POP
8587: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8588: LD_ADDR_EXP 39
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: LD_INT 32
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: ST_TO_ADDR
// end ;
8611: LD_VAR 0 1
8615: RET
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8616: LD_OWVAR 1
8620: PUSH
8621: LD_INT 52500
8623: PUSH
8624: LD_INT 46200
8626: PUSH
8627: LD_INT 42000
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: PUSH
8635: LD_OWVAR 67
8639: ARRAY
8640: GREATEREQUAL
8641: IFFALSE 8819
8643: GO 8645
8645: DISABLE
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8650: LD_ADDR_VAR 0 1
8654: PUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 469
8662: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8663: LD_VAR 0 1
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 112
8674: EQUAL
8675: PUSH
8676: LD_VAR 0 1
8680: PUSH
8681: LD_INT 2
8683: ARRAY
8684: PUSH
8685: LD_INT 67
8687: EQUAL
8688: AND
8689: IFFALSE 8819
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8691: LD_ADDR_VAR 0 2
8695: PUSH
8696: LD_INT 22
8698: PUSH
8699: LD_INT 8
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 25
8708: PUSH
8709: LD_INT 2
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: ST_TO_ADDR
// if not un then
8725: LD_VAR 0 2
8729: NOT
8730: IFFALSE 8734
// exit ;
8732: GO 8819
// un := un [ 1 ] ;
8734: LD_ADDR_VAR 0 2
8738: PUSH
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 1
8746: ARRAY
8747: ST_TO_ADDR
// if IsInUnit ( un ) then
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 310
8757: IFFALSE 8768
// ComExitBuilding ( un ) ;
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_VAR 0 1
8777: PUSH
8778: LD_INT 1
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 1
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PPUSH
8791: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8795: LD_VAR 0 2
8799: PPUSH
8800: LD_INT 207
8802: PPUSH
8803: LD_INT 123
8805: PPUSH
8806: CALL_OW 171
// AddComUnload ( un ) ;
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 219
// end ; end ;
8819: PPOPN 2
8821: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8822: LD_INT 22
8824: PUSH
8825: LD_INT 8
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: PUSH
8837: LD_INT 0
8839: GREATER
8840: IFFALSE 10425
8842: GO 8844
8844: DISABLE
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
// begin enable ;
8864: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8865: LD_ADDR_VAR 0 8
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 8
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8903: LD_ADDR_VAR 0 9
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_INT 8
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 30
8920: PUSH
8921: LD_INT 3
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 69
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8941: LD_ADDR_VAR 0 10
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 2
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 6
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 30
8971: PUSH
8972: LD_INT 8
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: PUSH
8993: LD_INT 1
8995: ARRAY
8996: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8997: LD_ADDR_VAR 0 11
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 8
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 30
9014: PUSH
9015: LD_INT 32
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 69
9030: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9031: LD_ADDR_VAR 0 16
9035: PUSH
9036: LD_INT 22
9038: PUSH
9039: LD_INT 8
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 25
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9065: LD_ADDR_VAR 0 15
9069: PUSH
9070: LD_INT 22
9072: PUSH
9073: LD_INT 8
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9099: LD_ADDR_VAR 0 14
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_INT 8
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 25
9116: PUSH
9117: LD_INT 3
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9133: LD_ADDR_VAR 0 13
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_INT 8
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 25
9150: PUSH
9151: LD_INT 4
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: ST_TO_ADDR
// if l_eng then
9167: LD_VAR 0 16
9171: IFFALSE 9586
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_INT 22
9180: PUSH
9181: LD_INT 8
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 21
9190: PUSH
9191: LD_INT 3
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PPUSH
9202: CALL_OW 69
9206: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9207: LD_VAR 0 5
9211: PPUSH
9212: LD_INT 3
9214: PUSH
9215: LD_INT 24
9217: PUSH
9218: LD_INT 1000
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 72
9233: PUSH
9234: LD_INT 0
9236: GREATER
9237: IFFALSE 9371
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_VAR 0 5
9248: PPUSH
9249: LD_INT 3
9251: PUSH
9252: LD_INT 24
9254: PUSH
9255: LD_INT 1000
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 72
9270: ST_TO_ADDR
// for i = 1 to l_eng do
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: DOUBLE
9277: LD_INT 1
9279: DEC
9280: ST_TO_ADDR
9281: LD_VAR 0 16
9285: PUSH
9286: FOR_TO
9287: IFFALSE 9367
// if IsInUnit ( l_eng [ i ] ) then
9289: LD_VAR 0 16
9293: PUSH
9294: LD_VAR 0 2
9298: ARRAY
9299: PPUSH
9300: CALL_OW 310
9304: IFFALSE 9323
// ComExitBuilding ( l_eng [ i ] ) else
9306: LD_VAR 0 16
9310: PUSH
9311: LD_VAR 0 2
9315: ARRAY
9316: PPUSH
9317: CALL_OW 122
9321: GO 9365
// if not HasTask ( l_eng [ i ] ) then
9323: LD_VAR 0 16
9327: PUSH
9328: LD_VAR 0 2
9332: ARRAY
9333: PPUSH
9334: CALL_OW 314
9338: NOT
9339: IFFALSE 9365
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9341: LD_VAR 0 16
9345: PUSH
9346: LD_VAR 0 2
9350: ARRAY
9351: PPUSH
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: CALL_OW 130
9365: GO 9286
9367: POP
9368: POP
// end else
9369: GO 9586
// begin if legion_blist > 0 then
9371: LD_EXP 38
9375: PUSH
9376: LD_INT 0
9378: GREATER
9379: IFFALSE 9508
// begin for i = 1 to l_eng do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: DOUBLE
9387: LD_INT 1
9389: DEC
9390: ST_TO_ADDR
9391: LD_VAR 0 16
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9504
// if IsInUnit ( l_eng [ i ] ) then
9399: LD_VAR 0 16
9403: PUSH
9404: LD_VAR 0 2
9408: ARRAY
9409: PPUSH
9410: CALL_OW 310
9414: IFFALSE 9433
// ComExitBuilding ( l_eng [ i ] ) else
9416: LD_VAR 0 16
9420: PUSH
9421: LD_VAR 0 2
9425: ARRAY
9426: PPUSH
9427: CALL_OW 122
9431: GO 9502
// if not HasTask ( l_eng [ i ] ) then
9433: LD_VAR 0 16
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: PPUSH
9444: CALL_OW 314
9448: NOT
9449: IFFALSE 9502
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9451: LD_VAR 0 16
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: PPUSH
9462: LD_EXP 38
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: LD_EXP 38
9475: PUSH
9476: LD_INT 2
9478: ARRAY
9479: PPUSH
9480: LD_EXP 38
9484: PUSH
9485: LD_INT 3
9487: ARRAY
9488: PPUSH
9489: LD_EXP 38
9493: PUSH
9494: LD_INT 4
9496: ARRAY
9497: PPUSH
9498: CALL_OW 145
9502: GO 9396
9504: POP
9505: POP
// end else
9506: GO 9586
// for i = 1 to l_eng do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_VAR 0 16
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9584
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9526: LD_VAR 0 16
9530: PUSH
9531: LD_VAR 0 2
9535: ARRAY
9536: PPUSH
9537: CALL_OW 310
9541: NOT
9542: PUSH
9543: LD_VAR 0 16
9547: PUSH
9548: LD_VAR 0 2
9552: ARRAY
9553: PPUSH
9554: CALL_OW 314
9558: NOT
9559: AND
9560: IFFALSE 9582
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9562: LD_VAR 0 16
9566: PUSH
9567: LD_VAR 0 2
9571: ARRAY
9572: PPUSH
9573: LD_VAR 0 8
9577: PPUSH
9578: CALL_OW 120
9582: GO 9523
9584: POP
9585: POP
// end ; end ; if l_factory then
9586: LD_VAR 0 9
9590: IFFALSE 9990
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9592: LD_INT 22
9594: PUSH
9595: LD_INT 8
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 33
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: LD_INT 61
9617: PUSH
9618: EMPTY
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 69
9634: PUSH
9635: LD_INT 0
9637: GREATER
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 34
9651: PUSH
9652: LD_INT 31
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PUSH
9668: LD_INT 0
9670: GREATER
9671: AND
9672: IFFALSE 9792
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9674: LD_INT 22
9676: PUSH
9677: LD_INT 8
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 33
9686: PUSH
9687: LD_INT 2
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: LD_INT 61
9699: PUSH
9700: EMPTY
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 34
9733: PUSH
9734: LD_INT 31
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PUSH
9750: LD_INT 1
9752: PPUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 8
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 34
9765: PUSH
9766: LD_INT 31
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 69
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9792: LD_EXP 39
9796: PUSH
9797: LD_INT 0
9799: GREATER
9800: PUSH
9801: LD_VAR 0 9
9805: PPUSH
9806: CALL_OW 461
9810: PUSH
9811: LD_INT 2
9813: EQUAL
9814: AND
9815: IFFALSE 9900
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9817: LD_VAR 0 9
9821: PPUSH
9822: LD_EXP 39
9826: PUSH
9827: LD_INT 1
9829: ARRAY
9830: PPUSH
9831: LD_EXP 39
9835: PUSH
9836: LD_INT 2
9838: ARRAY
9839: PPUSH
9840: LD_EXP 39
9844: PUSH
9845: LD_INT 3
9847: ARRAY
9848: PPUSH
9849: LD_EXP 39
9853: PUSH
9854: LD_INT 4
9856: ARRAY
9857: PPUSH
9858: CALL_OW 125
// for i = 1 to 4 do
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: DOUBLE
9868: LD_INT 1
9870: DEC
9871: ST_TO_ADDR
9872: LD_INT 4
9874: PUSH
9875: FOR_TO
9876: IFFALSE 9898
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9878: LD_ADDR_EXP 39
9882: PUSH
9883: LD_EXP 39
9887: PPUSH
9888: LD_INT 1
9890: PPUSH
9891: CALL_OW 3
9895: ST_TO_ADDR
9896: GO 9875
9898: POP
9899: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9900: LD_VAR 0 11
9904: PPUSH
9905: LD_INT 35
9907: PUSH
9908: LD_INT 0
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 72
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: PUSH
9924: LD_VAR 0 9
9928: PPUSH
9929: CALL_OW 461
9933: PUSH
9934: LD_INT 2
9936: EQUAL
9937: AND
9938: IFFALSE 9990
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9940: LD_VAR 0 11
9944: PPUSH
9945: LD_INT 35
9947: PUSH
9948: LD_INT 0
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_INT 28
9966: PUSH
9967: LD_INT 27
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 1
9976: PPUSH
9977: LD_INT 2
9979: PPUSH
9980: CALL_OW 12
9984: ARRAY
9985: PPUSH
9986: CALL_OW 148
// end ; if legion_enemy > 0 then
9990: LD_EXP 40
9994: PUSH
9995: LD_INT 0
9997: GREATER
9998: IFFALSE 10283
// begin if tick mod 11 11$00 = 0 then
10000: LD_OWVAR 1
10004: PUSH
10005: LD_INT 23100
10007: MOD
10008: PUSH
10009: LD_INT 0
10011: EQUAL
10012: IFFALSE 10264
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10014: LD_ADDR_EXP 39
10018: PUSH
10019: LD_EXP 39
10023: PUSH
10024: LD_INT 13
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10039: LD_ADDR_EXP 39
10043: PUSH
10044: LD_EXP 39
10048: PUSH
10049: LD_INT 28
10051: PUSH
10052: LD_INT 27
10054: PUSH
10055: LD_INT 29
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 1
10065: PPUSH
10066: LD_INT 3
10068: PPUSH
10069: CALL_OW 12
10073: ARRAY
10074: ADD
10075: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10076: LD_ADDR_EXP 39
10080: PUSH
10081: LD_EXP 39
10085: PUSH
10086: LD_INT 13
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: LD_INT 2
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: ADD
10100: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10101: LD_ADDR_EXP 39
10105: PUSH
10106: LD_EXP 39
10110: PUSH
10111: LD_INT 28
10113: PUSH
10114: LD_INT 27
10116: PUSH
10117: LD_INT 29
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ARRAY
10136: ADD
10137: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10138: LD_ADDR_EXP 39
10142: PUSH
10143: LD_EXP 39
10147: PUSH
10148: LD_INT 13
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: ADD
10162: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10163: LD_ADDR_EXP 39
10167: PUSH
10168: LD_EXP 39
10172: PUSH
10173: LD_INT 28
10175: PUSH
10176: LD_EXP 63
10180: PUSH
10181: LD_INT 29
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 1
10191: PPUSH
10192: LD_INT 3
10194: PPUSH
10195: CALL_OW 12
10199: ARRAY
10200: ADD
10201: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10202: LD_ADDR_EXP 39
10206: PUSH
10207: LD_EXP 39
10211: PUSH
10212: LD_INT 13
10214: PUSH
10215: LD_INT 1
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: ADD
10226: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10227: LD_ADDR_EXP 39
10231: PUSH
10232: LD_EXP 39
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: LD_INT 27
10242: PUSH
10243: LD_INT 29
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 1
10253: PPUSH
10254: LD_INT 3
10256: PPUSH
10257: CALL_OW 12
10261: ARRAY
10262: ADD
10263: ST_TO_ADDR
// end ; if legion_force >= 7 then
10264: LD_EXP 35
10268: PUSH
10269: LD_INT 7
10271: GREATEREQUAL
10272: IFFALSE 10283
// RaiseSailEvent ( event_legion_attack ) ;
10274: LD_EXP 20
10278: PPUSH
10279: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10283: LD_INT 22
10285: PUSH
10286: LD_INT 8
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 34
10295: PUSH
10296: LD_INT 32
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: IFFALSE 10425
// begin if l_cargo = false then
10313: LD_VAR 0 17
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: IFFALSE 10357
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10323: LD_ADDR_VAR 0 17
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 8
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: LD_INT 32
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: ST_TO_ADDR
// if l_cargo then
10357: LD_VAR 0 17
10361: IFFALSE 10425
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10363: LD_ADDR_VAR 0 7
10367: PUSH
10368: LD_INT 14
10370: PPUSH
10371: CALL_OW 435
10375: ST_TO_ADDR
// if cr > 0 then
10376: LD_VAR 0 7
10380: PUSH
10381: LD_INT 0
10383: GREATER
10384: IFFALSE 10425
// if not HasTask ( l_cargo ) then
10386: LD_VAR 0 17
10390: PPUSH
10391: CALL_OW 314
10395: NOT
10396: IFFALSE 10425
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10398: LD_VAR 0 17
10402: PPUSH
10403: LD_VAR 0 7
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 7
10416: PUSH
10417: LD_INT 2
10419: ARRAY
10420: PPUSH
10421: CALL_OW 117
// end ; end ; end ;
10425: PPOPN 17
10427: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10428: LD_OWVAR 67
10432: PUSH
10433: LD_INT 1
10435: GREATER
10436: IFFALSE 10641
10438: GO 10440
10440: DISABLE
10441: LD_INT 0
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10447: LD_INT 35
10449: PPUSH
10450: LD_INT 12635
10452: PPUSH
10453: CALL_OW 12
10457: PPUSH
10458: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: LD_INT 22
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 4
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 69
10495: ST_TO_ADDR
// p := 1 ;
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10504: LD_ADDR_VAR 0 3
10508: PUSH
10509: LD_INT 116
10511: PUSH
10512: LD_INT 139
10514: PUSH
10515: LD_INT 69
10517: PUSH
10518: LD_INT 13
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: ST_TO_ADDR
// for i = 1 to 2 do
10527: LD_ADDR_VAR 0 1
10531: PUSH
10532: DOUBLE
10533: LD_INT 1
10535: DEC
10536: ST_TO_ADDR
10537: LD_INT 2
10539: PUSH
10540: FOR_TO
10541: IFFALSE 10639
// begin if IsInUnit ( sci [ i ] ) then
10543: LD_VAR 0 2
10547: PUSH
10548: LD_VAR 0 1
10552: ARRAY
10553: PPUSH
10554: CALL_OW 310
10558: IFFALSE 10575
// ComExitBuilding ( sci [ i ] ) ;
10560: LD_VAR 0 2
10564: PUSH
10565: LD_VAR 0 1
10569: ARRAY
10570: PPUSH
10571: CALL_OW 122
// Wait ( 0 0$03 ) ;
10575: LD_INT 105
10577: PPUSH
10578: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10582: LD_VAR 0 2
10586: PUSH
10587: LD_VAR 0 1
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 3
10597: PUSH
10598: LD_VAR 0 4
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 3
10608: PUSH
10609: LD_VAR 0 4
10613: PUSH
10614: LD_INT 1
10616: PLUS
10617: ARRAY
10618: PPUSH
10619: CALL_OW 158
// p := p + 2 ;
10623: LD_ADDR_VAR 0 4
10627: PUSH
10628: LD_VAR 0 4
10632: PUSH
10633: LD_INT 2
10635: PLUS
10636: ST_TO_ADDR
// end ;
10637: GO 10540
10639: POP
10640: POP
// end ;
10641: PPOPN 4
10643: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10644: LD_INT 14
10646: PPUSH
10647: CALL_OW 435
10651: PUSH
10652: LD_INT 20
10654: LESS
10655: IFFALSE 10682
10657: GO 10659
10659: DISABLE
// begin enable ;
10660: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10661: LD_INT 1
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 14
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 55
// end ;
10682: END
// export function LegionAttack ( ) ; var path , units ; begin
10683: LD_INT 0
10685: PPUSH
10686: PPUSH
10687: PPUSH
// units := legion_force ;
10688: LD_ADDR_VAR 0 3
10692: PUSH
10693: LD_EXP 35
10697: ST_TO_ADDR
// legion_force := [ ] ;
10698: LD_ADDR_EXP 35
10702: PUSH
10703: EMPTY
10704: ST_TO_ADDR
// case legion_enemy of 1 :
10705: LD_EXP 40
10709: PUSH
10710: LD_INT 1
10712: DOUBLE
10713: EQUAL
10714: IFTRUE 10718
10716: GO 10761
10718: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: LD_INT 174
10726: PUSH
10727: LD_INT 135
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 153
10736: PUSH
10737: LD_INT 146
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 118
10746: PUSH
10747: LD_INT 122
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: ST_TO_ADDR
10759: GO 10864
10761: LD_INT 2
10763: DOUBLE
10764: EQUAL
10765: IFTRUE 10769
10767: GO 10812
10769: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 164
10777: PUSH
10778: LD_INT 73
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 130
10787: PUSH
10788: LD_INT 48
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 96
10797: PUSH
10798: LD_INT 48
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: ST_TO_ADDR
10810: GO 10864
10812: LD_INT 7
10814: DOUBLE
10815: EQUAL
10816: IFTRUE 10820
10818: GO 10863
10820: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
10821: LD_ADDR_VAR 0 2
10825: PUSH
10826: LD_INT 174
10828: PUSH
10829: LD_INT 135
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 153
10838: PUSH
10839: LD_INT 146
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 118
10848: PUSH
10849: LD_INT 122
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: ST_TO_ADDR
10861: GO 10864
10863: POP
// repeat wait ( 0 0$1 ) ;
10864: LD_INT 35
10866: PPUSH
10867: CALL_OW 67
// AgressiveMove ( units , path ) ;
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_VAR 0 2
10880: PPUSH
10881: CALL 76075 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 50
10892: PUSH
10893: EMPTY
10894: LIST
10895: PPUSH
10896: CALL_OW 72
10900: NOT
10901: IFFALSE 10864
// end ; end_of_file
10903: LD_VAR 0 1
10907: RET
// export function Action ; var un , gamemode , speaker ; begin
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
10912: PPUSH
10913: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10914: LD_ADDR_OWVAR 67
10918: PUSH
10919: LD_INT 0
10921: PPUSH
10922: CALL_OW 426
10926: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 426
10939: ST_TO_ADDR
// if gamemode = 1 then
10940: LD_VAR 0 3
10944: PUSH
10945: LD_INT 1
10947: EQUAL
10948: IFFALSE 10972
// begin your_side := 1 ;
10950: LD_ADDR_OWVAR 2
10954: PUSH
10955: LD_INT 1
10957: ST_TO_ADDR
// legion_enemy := 1 ;
10958: LD_ADDR_EXP 40
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// PrepareAmerican ;
10966: CALL 257 0 0
// end else
10970: GO 11024
// if gamemode = 2 then
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 2
10979: EQUAL
10980: IFFALSE 11004
// begin your_side := 2 ;
10982: LD_ADDR_OWVAR 2
10986: PUSH
10987: LD_INT 2
10989: ST_TO_ADDR
// legion_enemy := 2 ;
10990: LD_ADDR_EXP 40
10994: PUSH
10995: LD_INT 2
10997: ST_TO_ADDR
// PrepareArabian ;
10998: CALL 18328 0 0
// end else
11002: GO 11024
// begin your_side := 7 ;
11004: LD_ADDR_OWVAR 2
11008: PUSH
11009: LD_INT 7
11011: ST_TO_ADDR
// legion_enemy := 7 ;
11012: LD_ADDR_EXP 40
11016: PUSH
11017: LD_INT 7
11019: ST_TO_ADDR
// PrepareAlliance ;
11020: CALL 15748 0 0
// end ; if your_side = 1 then
11024: LD_OWVAR 2
11028: PUSH
11029: LD_INT 1
11031: EQUAL
11032: IFFALSE 11510
// begin case Query ( QVul4 ) of 1 :
11034: LD_STRING QVul4
11036: PPUSH
11037: CALL_OW 97
11041: PUSH
11042: LD_INT 1
11044: DOUBLE
11045: EQUAL
11046: IFTRUE 11050
11048: GO 11053
11050: POP
// ; end ;
11051: GO 11054
11053: POP
// InGameOn ;
11054: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
11058: LD_INT 8
11060: PPUSH
11061: LD_INT 5
11063: PPUSH
11064: CALL_OW 86
// uc_side := 4 ;
11068: LD_ADDR_OWVAR 20
11072: PUSH
11073: LD_INT 4
11075: ST_TO_ADDR
// uc_nation := 1 ;
11076: LD_ADDR_OWVAR 21
11080: PUSH
11081: LD_INT 1
11083: ST_TO_ADDR
// hc_importance := 0 ;
11084: LD_ADDR_OWVAR 32
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11092: LD_INT 1
11094: PPUSH
11095: LD_INT 3
11097: PPUSH
11098: LD_EXP 25
11102: PPUSH
11103: CALL_OW 380
// un := CreateHuman ;
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: CALL_OW 44
11116: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
11117: LD_VAR 0 2
11121: PPUSH
11122: LD_INT 12
11124: PPUSH
11125: LD_INT 9
11127: PPUSH
11128: LD_INT 0
11130: PPUSH
11131: CALL_OW 48
// hc_name := Stuart Carey ;
11135: LD_ADDR_OWVAR 26
11139: PUSH
11140: LD_STRING Stuart Carey
11142: ST_TO_ADDR
// hc_class := 1 ;
11143: LD_ADDR_OWVAR 28
11147: PUSH
11148: LD_INT 1
11150: ST_TO_ADDR
// hc_gallery := vulcano ;
11151: LD_ADDR_OWVAR 33
11155: PUSH
11156: LD_STRING vulcano
11158: ST_TO_ADDR
// hc_face_number := 1 ;
11159: LD_ADDR_OWVAR 34
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// us_guy := CreateHuman ;
11167: LD_ADDR_EXP 26
11171: PUSH
11172: CALL_OW 44
11176: ST_TO_ADDR
// InitHc ;
11177: CALL_OW 19
// if rand ( 0 , 1 ) then
11181: LD_INT 0
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 12
11191: IFFALSE 11208
// PrepareHuman ( sex_male , 3 , 6 ) else
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 3
11198: PPUSH
11199: LD_INT 6
11201: PPUSH
11202: CALL_OW 380
11206: GO 11221
// PrepareHuman ( sex_female , 4 , 8 ) ;
11208: LD_INT 2
11210: PPUSH
11211: LD_INT 4
11213: PPUSH
11214: LD_INT 8
11216: PPUSH
11217: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11221: LD_VAR 0 2
11225: PPUSH
11226: LD_EXP 23
11230: PPUSH
11231: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11235: LD_EXP 23
11239: PPUSH
11240: LD_VAR 0 2
11244: PPUSH
11245: CALL_OW 119
// if GetSex ( un ) = sex_male then
11249: LD_VAR 0 2
11253: PPUSH
11254: CALL_OW 258
11258: PUSH
11259: LD_INT 1
11261: EQUAL
11262: IFFALSE 11345
// begin Say ( un , VD-un1 ) ;
11264: LD_VAR 0 2
11268: PPUSH
11269: LD_STRING VD-un1
11271: PPUSH
11272: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11276: LD_EXP 23
11280: PPUSH
11281: LD_STRING VDc-1
11283: PPUSH
11284: CALL_OW 88
// Say ( un , VD-un2 ) ;
11288: LD_VAR 0 2
11292: PPUSH
11293: LD_STRING VD-un2
11295: PPUSH
11296: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11300: LD_EXP 23
11304: PPUSH
11305: LD_STRING VDc-2
11307: PPUSH
11308: CALL_OW 88
// Say ( un , VD-un3 ) ;
11312: LD_VAR 0 2
11316: PPUSH
11317: LD_STRING VD-un3
11319: PPUSH
11320: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11324: LD_INT 7
11326: PPUSH
11327: CALL_OW 67
// Say ( un , VD-un4 ) ;
11331: LD_VAR 0 2
11335: PPUSH
11336: LD_STRING VD-un4
11338: PPUSH
11339: CALL_OW 88
// end else
11343: GO 11424
// begin Say ( un , VD-unf1 ) ;
11345: LD_VAR 0 2
11349: PPUSH
11350: LD_STRING VD-unf1
11352: PPUSH
11353: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11357: LD_EXP 23
11361: PPUSH
11362: LD_STRING VDc-1
11364: PPUSH
11365: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11369: LD_VAR 0 2
11373: PPUSH
11374: LD_STRING VD-unf2
11376: PPUSH
11377: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11381: LD_EXP 23
11385: PPUSH
11386: LD_STRING VDc-2
11388: PPUSH
11389: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_STRING VD-unf3
11400: PPUSH
11401: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11405: LD_INT 7
11407: PPUSH
11408: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11412: LD_VAR 0 2
11416: PPUSH
11417: LD_STRING VD-unf4
11419: PPUSH
11420: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11424: LD_VAR 0 2
11428: PPUSH
11429: LD_INT 2
11431: PPUSH
11432: LD_INT 2
11434: PPUSH
11435: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11439: LD_EXP 23
11443: PPUSH
11444: LD_STRING VDc-3
11446: PPUSH
11447: CALL_OW 88
// InGameOff ;
11451: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11455: LD_STRING CVulc1
11457: PPUSH
11458: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11462: LD_INT 35
11464: PPUSH
11465: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 250
11478: PUSH
11479: LD_INT 2
11481: EQUAL
11482: PUSH
11483: LD_VAR 0 2
11487: PPUSH
11488: CALL_OW 251
11492: PUSH
11493: LD_INT 2
11495: EQUAL
11496: AND
11497: IFFALSE 11462
// RemoveUnit ( un ) ;
11499: LD_VAR 0 2
11503: PPUSH
11504: CALL_OW 64
// end else
11508: GO 11887
// if your_side = 2 then
11510: LD_OWVAR 2
11514: PUSH
11515: LD_INT 2
11517: EQUAL
11518: IFFALSE 11734
// begin CenterNowOnUnits ( player_commander ) ;
11520: LD_EXP 11
11524: PPUSH
11525: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_INT 2
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 21
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PPUSH
11558: CALL_OW 69
11562: PUSH
11563: LD_EXP 55
11567: DIFF
11568: ST_TO_ADDR
// if speaker then
11569: LD_VAR 0 4
11573: IFFALSE 11725
// begin InGameOn ;
11575: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING VSd-1
11586: PPUSH
11587: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11591: LD_VAR 0 4
11595: PUSH
11596: LD_INT 1
11598: ARRAY
11599: PPUSH
11600: CALL_OW 258
11604: PUSH
11605: LD_INT 1
11607: EQUAL
11608: IFFALSE 11628
// Say ( speaker [ 1 ] , VAd-1 ) else
11610: LD_VAR 0 4
11614: PUSH
11615: LD_INT 1
11617: ARRAY
11618: PPUSH
11619: LD_STRING VAd-1
11621: PPUSH
11622: CALL_OW 88
11626: GO 11644
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11628: LD_VAR 0 4
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: LD_STRING VAfd-1
11639: PPUSH
11640: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11644: LD_EXP 55
11648: PPUSH
11649: LD_STRING VSd-2
11651: PPUSH
11652: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11656: LD_VAR 0 4
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PPUSH
11665: CALL_OW 258
11669: PUSH
11670: LD_INT 1
11672: EQUAL
11673: IFFALSE 11693
// Say ( speaker [ 1 ] , VAd-2 ) else
11675: LD_VAR 0 4
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: PPUSH
11684: LD_STRING VAd-2
11686: PPUSH
11687: CALL_OW 88
11691: GO 11709
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11693: LD_VAR 0 4
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_STRING VAfd-2
11704: PPUSH
11705: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11709: LD_EXP 55
11713: PPUSH
11714: LD_STRING VSd-3
11716: PPUSH
11717: CALL_OW 88
// InGameOff ;
11721: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11725: LD_STRING CVulc5
11727: PPUSH
11728: CALL_OW 337
// end else
11732: GO 11887
// if your_side = 7 then
11734: LD_OWVAR 2
11738: PUSH
11739: LD_INT 7
11741: EQUAL
11742: IFFALSE 11887
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11744: LD_ADDR_VAR 0 4
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_INT 7
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 21
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 69
11777: PUSH
11778: LD_EXP 41
11782: DIFF
11783: ST_TO_ADDR
// if speaker then
11784: LD_VAR 0 4
11788: IFFALSE 11880
// begin CenterNowOnUnits ( al_commander ) ;
11790: LD_EXP 41
11794: PPUSH
11795: CALL_OW 87
// InGameOn ;
11799: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11803: LD_EXP 41
11807: PPUSH
11808: LD_STRING VPd-1
11810: PPUSH
11811: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11815: LD_VAR 0 4
11819: PUSH
11820: LD_INT 1
11822: ARRAY
11823: PPUSH
11824: CALL_OW 258
11828: IFFALSE 11848
// Say ( speaker [ 1 ] , VPpd-1 ) else
11830: LD_VAR 0 4
11834: PUSH
11835: LD_INT 1
11837: ARRAY
11838: PPUSH
11839: LD_STRING VPpd-1
11841: PPUSH
11842: CALL_OW 88
11846: GO 11864
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11848: LD_VAR 0 4
11852: PUSH
11853: LD_INT 1
11855: ARRAY
11856: PPUSH
11857: LD_STRING VPpdf-1
11859: PPUSH
11860: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11864: LD_EXP 41
11868: PPUSH
11869: LD_STRING VPd-2
11871: PPUSH
11872: CALL_OW 88
// InGameOff ;
11876: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11880: LD_STRING CVulc7
11882: PPUSH
11883: CALL_OW 337
// end ; SaveForQuickRestart ;
11887: CALL_OW 22
// end ;
11891: LD_VAR 0 1
11895: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: IFFALSE 11968
11926: GO 11928
11928: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11929: LD_STRING CVulc6
11931: PPUSH
11932: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11936: LD_INT 52500
11938: PUSH
11939: LD_INT 47250
11941: PUSH
11942: LD_INT 42000
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: LD_OWVAR 67
11954: ARRAY
11955: PPUSH
11956: CALL_OW 67
// ru_can_attack := true ;
11960: LD_ADDR_EXP 3
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// end ;
11968: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11969: LD_INT 50
11971: PPUSH
11972: CALL_OW 255
11976: PUSH
11977: LD_INT 1
11979: EQUAL
11980: PUSH
11981: LD_INT 22
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 3
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: OR
12028: IFFALSE 12262
12030: GO 12032
12032: DISABLE
12033: LD_INT 0
12035: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12036: LD_STRING CVulc2
12038: PPUSH
12039: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_INT 22
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: PUSH
12077: LD_EXP 23
12081: DIFF
12082: ST_TO_ADDR
// DialogueOn ;
12083: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12087: LD_INT 10
12089: PPUSH
12090: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: CALL_OW 258
12107: PUSH
12108: LD_INT 1
12110: EQUAL
12111: IFFALSE 12131
// Say ( speaker [ 1 ] , VDb-1 ) else
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: LD_STRING VDb-1
12124: PPUSH
12125: CALL_OW 88
12129: GO 12147
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12131: LD_VAR 0 1
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PPUSH
12140: LD_STRING VDbf-1
12142: PPUSH
12143: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12147: LD_INT 10
12149: PPUSH
12150: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12154: LD_VAR 0 1
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PPUSH
12163: CALL_OW 258
12167: PUSH
12168: LD_INT 1
12170: EQUAL
12171: IFFALSE 12191
// Say ( speaker [ 1 ] , VDb-2 ) else
12173: LD_VAR 0 1
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: LD_STRING VDb-2
12184: PPUSH
12185: CALL_OW 88
12189: GO 12207
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12191: LD_VAR 0 1
12195: PUSH
12196: LD_INT 1
12198: ARRAY
12199: PPUSH
12200: LD_STRING VDbf-2
12202: PPUSH
12203: CALL_OW 88
// DWait ( 0 0$01 ) ;
12207: LD_INT 35
12209: PPUSH
12210: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12214: LD_EXP 23
12218: PPUSH
12219: LD_STRING VDb-com1
12221: PPUSH
12222: CALL_OW 88
// DialogueOff ;
12226: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12230: LD_INT 44100
12232: PUSH
12233: LD_INT 36750
12235: PUSH
12236: LD_INT 31500
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: LD_OWVAR 67
12248: ARRAY
12249: PPUSH
12250: CALL_OW 67
// ru_can_attack := true ;
12254: LD_ADDR_EXP 3
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// end ;
12262: PPOPN 1
12264: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12265: LD_INT 22
12267: PUSH
12268: LD_INT 7
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PPUSH
12289: CALL_OW 69
12293: IFFALSE 12330
12295: GO 12297
12297: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12298: LD_INT 42000
12300: PUSH
12301: LD_INT 34650
12303: PUSH
12304: LD_INT 29400
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_OWVAR 67
12316: ARRAY
12317: PPUSH
12318: CALL_OW 67
// ru_can_attack := true ;
12322: LD_ADDR_EXP 3
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// end ;
12330: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12331: LD_INT 58
12333: PPUSH
12334: CALL_OW 255
12338: PUSH
12339: LD_INT 1
12341: EQUAL
12342: IFFALSE 12549
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 25
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: ST_TO_ADDR
// DialogueOn ;
12384: CALL_OW 6
// if speaker then
12388: LD_VAR 0 1
12392: IFFALSE 12447
// if GetSex ( speaker [ 1 ] ) = sex_male then
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PPUSH
12403: CALL_OW 258
12407: PUSH
12408: LD_INT 1
12410: EQUAL
12411: IFFALSE 12431
// Say ( speaker [ 1 ] , VDe-1 ) else
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: LD_STRING VDe-1
12424: PPUSH
12425: CALL_OW 88
12429: GO 12447
// Say ( speaker [ 1 ] , VDef-1 ) ;
12431: LD_VAR 0 1
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: LD_STRING VDef-1
12442: PPUSH
12443: CALL_OW 88
// case Query ( SibNote ) of 1 :
12447: LD_STRING SibNote
12449: PPUSH
12450: CALL_OW 97
12454: PUSH
12455: LD_INT 1
12457: DOUBLE
12458: EQUAL
12459: IFTRUE 12463
12461: GO 12466
12463: POP
// ; end ;
12464: GO 12467
12466: POP
// if speaker then
12467: LD_VAR 0 1
12471: IFFALSE 12526
// if GetSex ( speaker [ 1 ] ) = sex_male then
12473: LD_VAR 0 1
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: PPUSH
12482: CALL_OW 258
12486: PUSH
12487: LD_INT 1
12489: EQUAL
12490: IFFALSE 12510
// Say ( speaker [ 1 ] , VDe-2 ) else
12492: LD_VAR 0 1
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_STRING VDe-2
12503: PPUSH
12504: CALL_OW 88
12508: GO 12526
// Say ( speaker [ 1 ] , VDef-2 ) ;
12510: LD_VAR 0 1
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PPUSH
12519: LD_STRING VDef-2
12521: PPUSH
12522: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12526: LD_EXP 23
12530: PPUSH
12531: LD_STRING VDc-4
12533: PPUSH
12534: CALL_OW 88
// DialogueOff ;
12538: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12542: LD_STRING CVulc3
12544: PPUSH
12545: CALL_OW 337
// end ;
12549: PPOPN 1
12551: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12552: LD_OWVAR 2
12556: PUSH
12557: LD_INT 1
12559: EQUAL
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: PUSH
12590: LD_INT 0
12592: GREATER
12593: AND
12594: IFFALSE 13028
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
12602: PPUSH
12603: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12604: LD_INT 245
12606: PPUSH
12607: LD_INT 1295
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 67
// DialogueOn ;
12619: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12623: LD_EXP 26
12627: PPUSH
12628: LD_STRING VDG-1
12630: PPUSH
12631: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12635: LD_EXP 23
12639: PPUSH
12640: LD_STRING VDc-5
12642: PPUSH
12643: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12647: LD_EXP 26
12651: PPUSH
12652: LD_STRING VDG-2
12654: PPUSH
12655: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12659: LD_EXP 23
12663: PPUSH
12664: LD_STRING VDc-6
12666: PPUSH
12667: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12671: LD_EXP 26
12675: PPUSH
12676: LD_STRING VDG-3
12678: PPUSH
12679: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12683: LD_EXP 23
12687: PPUSH
12688: LD_STRING VDc-7
12690: PPUSH
12691: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12695: LD_EXP 26
12699: PPUSH
12700: LD_STRING VDG-4
12702: PPUSH
12703: CALL_OW 94
// DialogueOff ;
12707: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12711: LD_STRING CVulc4
12713: PPUSH
12714: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12718: LD_INT 18900
12720: PUSH
12721: LD_INT 21000
12723: PUSH
12724: LD_INT 23100
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_OWVAR 67
12736: ARRAY
12737: PPUSH
12738: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: DOUBLE
12748: LD_INT 1
12750: DEC
12751: ST_TO_ADDR
12752: LD_INT 4
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: LD_INT 6
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_OWVAR 67
12770: ARRAY
12771: PUSH
12772: FOR_TO
12773: IFFALSE 13017
// begin uc_side := 1 ;
12775: LD_ADDR_OWVAR 20
12779: PUSH
12780: LD_INT 1
12782: ST_TO_ADDR
// uc_nation := 1 ;
12783: LD_ADDR_OWVAR 21
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 4
12799: PPUSH
12800: CALL_OW 12
12804: PPUSH
12805: LD_EXP 25
12809: PPUSH
12810: CALL_OW 380
// un := CreateHuman ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: CALL_OW 44
12823: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12824: LD_VAR 0 2
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: CALL_OW 233
// if GetClass ( un ) = 3 then
12836: LD_VAR 0 2
12840: PPUSH
12841: CALL_OW 257
12845: PUSH
12846: LD_INT 3
12848: EQUAL
12849: IFFALSE 13000
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12851: LD_ADDR_OWVAR 37
12855: PUSH
12856: LD_INT 2
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_VAR 0 1
12870: PUSH
12871: LD_INT 2
12873: MOD
12874: ARRAY
12875: ST_TO_ADDR
// vc_engine := engine_combustion ;
12876: LD_ADDR_OWVAR 39
12880: PUSH
12881: LD_INT 1
12883: ST_TO_ADDR
// vc_control := control_manual ;
12884: LD_ADDR_OWVAR 38
12888: PUSH
12889: LD_INT 1
12891: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12892: LD_ADDR_OWVAR 40
12896: PUSH
12897: LD_INT 9
12899: PUSH
12900: LD_INT 9
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: LD_INT 11
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 1
12917: PPUSH
12918: LD_INT 4
12920: PPUSH
12921: CALL_OW 12
12925: ARRAY
12926: ST_TO_ADDR
// veh := CreateVehicle ;
12927: LD_ADDR_VAR 0 3
12931: PUSH
12932: CALL_OW 45
12936: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 77
12956: PPUSH
12957: LD_INT 88
12959: PPUSH
12960: CALL_OW 12
12964: PPUSH
12965: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: LD_INT 0
12979: PPUSH
12980: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12984: LD_VAR 0 2
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: CALL_OW 52
// end else
12998: GO 13015
// PlaceUnitArea ( un , start_north , false ) ;
13000: LD_VAR 0 2
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_INT 0
13010: PPUSH
13011: CALL_OW 49
// end ;
13015: GO 12772
13017: POP
13018: POP
// CenterNowOnUnits ( un ) ;
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 87
// end ;
13028: PPOPN 3
13030: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13031: LD_INT 21
13033: PPUSH
13034: LD_INT 22
13036: PUSH
13037: LD_OWVAR 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 70
13050: IFFALSE 13371
13052: GO 13054
13054: DISABLE
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13059: LD_ADDR_VAR 0 2
13063: PUSH
13064: LD_INT 22
13066: PUSH
13067: LD_OWVAR 2
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: LD_INT 25
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 4
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: LD_EXP 11
13139: DIFF
13140: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13141: LD_ADDR_VAR 0 1
13145: PUSH
13146: LD_VAR 0 2
13150: PPUSH
13151: LD_INT 112
13153: PPUSH
13154: LD_INT 67
13156: PPUSH
13157: CALL_OW 73
13161: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 255
13171: PUSH
13172: LD_INT 7
13174: EQUAL
13175: IFFALSE 13218
// if GetSex ( un ) = sex_male then
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 258
13186: PUSH
13187: LD_INT 1
13189: EQUAL
13190: IFFALSE 13206
// Say ( un , VD-find-al ) else
13192: LD_VAR 0 1
13196: PPUSH
13197: LD_STRING VD-find-al
13199: PPUSH
13200: CALL_OW 88
13204: GO 13218
// Say ( un , VD-find-al-f ) ;
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_STRING VD-find-al-f
13213: PPUSH
13214: CALL_OW 88
// if GetSide ( un ) = 2 then
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 255
13227: PUSH
13228: LD_INT 2
13230: EQUAL
13231: IFFALSE 13274
// if GetSex ( un ) = sex_male then
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 258
13242: PUSH
13243: LD_INT 1
13245: EQUAL
13246: IFFALSE 13262
// Say ( un , VD-find-ar ) else
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_STRING VD-find-ar
13255: PPUSH
13256: CALL_OW 88
13260: GO 13274
// Say ( un , VD-find-ar-f ) ;
13262: LD_VAR 0 1
13266: PPUSH
13267: LD_STRING VD-find-ar-f
13269: PPUSH
13270: CALL_OW 88
// if GetSide ( un ) = 1 then
13274: LD_VAR 0 1
13278: PPUSH
13279: CALL_OW 255
13283: PUSH
13284: LD_INT 1
13286: EQUAL
13287: IFFALSE 13354
// begin if GetSex ( un ) = sex_male then
13289: LD_VAR 0 1
13293: PPUSH
13294: CALL_OW 258
13298: PUSH
13299: LD_INT 1
13301: EQUAL
13302: IFFALSE 13330
// begin Say ( un , VD-find-us ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_STRING VD-find-us
13311: PPUSH
13312: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13316: LD_VAR 0 1
13320: PPUSH
13321: LD_STRING VD-find-us2
13323: PPUSH
13324: CALL_OW 88
// end else
13328: GO 13354
// begin Say ( un , VD-find-us-f ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_STRING VD-find-us-f
13337: PPUSH
13338: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_STRING VD-find-us2-f
13349: PPUSH
13350: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13354: LD_INT 10
13356: PPUSH
13357: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13361: LD_INT 112
13363: PPUSH
13364: LD_INT 67
13366: PPUSH
13367: CALL_OW 86
// end ;
13371: PPOPN 2
13373: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13374: LD_EXP 8
13378: IFFALSE 13880
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
// begin if your_side = 1 then
13386: LD_OWVAR 2
13390: PUSH
13391: LD_INT 1
13393: EQUAL
13394: IFFALSE 13575
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 25
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: PUSH
13430: LD_EXP 23
13434: DIFF
13435: ST_TO_ADDR
// if not speaker then
13436: LD_VAR 0 1
13440: NOT
13441: IFFALSE 13445
// exit ;
13443: GO 13880
// if GetSex ( speaker [ 1 ] ) = sex_male then
13445: LD_VAR 0 1
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: CALL_OW 258
13458: PUSH
13459: LD_INT 1
13461: EQUAL
13462: IFFALSE 13482
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_STRING VD-us-sci-art-1
13475: PPUSH
13476: CALL_OW 88
13480: GO 13498
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: ARRAY
13490: PPUSH
13491: LD_STRING VD-us-fsci-art-1
13493: PPUSH
13494: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13498: LD_EXP 23
13502: PPUSH
13503: LD_STRING VDc-art1
13505: PPUSH
13506: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13510: LD_VAR 0 1
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: CALL_OW 258
13523: PUSH
13524: LD_INT 1
13526: EQUAL
13527: IFFALSE 13547
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: PPUSH
13538: LD_STRING VD-us-sci-art-2
13540: PPUSH
13541: CALL_OW 88
13545: GO 13563
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13547: LD_VAR 0 1
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: LD_STRING VD-us-fsci-art-2
13558: PPUSH
13559: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13563: LD_EXP 23
13567: PPUSH
13568: LD_STRING VDc-art2
13570: PPUSH
13571: CALL_OW 88
// end ; if your_side = 2 then
13575: LD_OWVAR 2
13579: PUSH
13580: LD_INT 2
13582: EQUAL
13583: IFFALSE 13687
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: LD_EXP 55
13623: DIFF
13624: ST_TO_ADDR
// if not speaker then
13625: LD_VAR 0 1
13629: NOT
13630: IFFALSE 13634
// exit ;
13632: GO 13880
// if GetSex ( speaker [ 1 ] ) = sex_male then
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PPUSH
13643: CALL_OW 258
13647: PUSH
13648: LD_INT 1
13650: EQUAL
13651: IFFALSE 13671
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13653: LD_VAR 0 1
13657: PUSH
13658: LD_INT 1
13660: ARRAY
13661: PPUSH
13662: LD_STRING VD-ar-sci-art-1
13664: PPUSH
13665: CALL_OW 88
13669: GO 13687
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: ARRAY
13679: PPUSH
13680: LD_STRING VD-ar-fsci-art-1
13682: PPUSH
13683: CALL_OW 88
// end ; if your_side = 7 then
13687: LD_OWVAR 2
13691: PUSH
13692: LD_INT 7
13694: EQUAL
13695: IFFALSE 13880
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13697: LD_ADDR_VAR 0 1
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: LD_EXP 41
13735: DIFF
13736: ST_TO_ADDR
// if speaker then
13737: LD_VAR 0 1
13741: IFFALSE 13873
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13743: LD_VAR 0 1
13747: PUSH
13748: LD_INT 1
13750: ARRAY
13751: PPUSH
13752: CALL_OW 258
13756: PUSH
13757: LD_INT 1
13759: EQUAL
13760: IFFALSE 13780
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13762: LD_VAR 0 1
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_STRING VD-al-sci-art-1
13773: PPUSH
13774: CALL_OW 88
13778: GO 13796
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13780: LD_VAR 0 1
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_STRING VD-al-fsci-art-1
13791: PPUSH
13792: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13796: LD_EXP 41
13800: PPUSH
13801: LD_STRING VPd-art-1
13803: PPUSH
13804: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13808: LD_VAR 0 1
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: PPUSH
13817: CALL_OW 258
13821: PUSH
13822: LD_INT 1
13824: EQUAL
13825: IFFALSE 13845
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13827: LD_VAR 0 1
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PPUSH
13836: LD_STRING VD-al-sci-art-2
13838: PPUSH
13839: CALL_OW 88
13843: GO 13861
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13845: LD_VAR 0 1
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: LD_STRING VD-al-fsci-art-2
13856: PPUSH
13857: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13861: LD_EXP 41
13865: PPUSH
13866: LD_STRING VPd-art-2
13868: PPUSH
13869: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13873: LD_STRING CVulc7out
13875: PPUSH
13876: CALL_OW 337
// end ; end ;
13880: PPOPN 1
13882: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13883: LD_INT 8
13885: PPUSH
13886: LD_INT 22
13888: PUSH
13889: LD_OWVAR 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 69
13902: PPUSH
13903: LD_INT 8
13905: PPUSH
13906: CALL 2015 0 2
13910: PPUSH
13911: CALL_OW 292
13915: IFFALSE 14058
13917: GO 13919
13919: DISABLE
13920: LD_INT 0
13922: PPUSH
// begin if your_side = 1 then
13923: LD_OWVAR 2
13927: PUSH
13928: LD_INT 1
13930: EQUAL
13931: IFFALSE 14014
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 69
13952: PUSH
13953: LD_EXP 23
13957: DIFF
13958: ST_TO_ADDR
// if speaker then
13959: LD_VAR 0 1
13963: IFFALSE 14014
// if GetSex ( speaker [ 1 ] ) then
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 258
13978: IFFALSE 13998
// Say ( speaker [ 1 ] , VD-legion-us ) else
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: LD_STRING VD-legion-us
13991: PPUSH
13992: CALL_OW 88
13996: GO 14014
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 1
14005: ARRAY
14006: PPUSH
14007: LD_STRING VD-legion-us-f
14009: PPUSH
14010: CALL_OW 88
// end ; if your_side = 2 then
14014: LD_OWVAR 2
14018: PUSH
14019: LD_INT 2
14021: EQUAL
14022: IFFALSE 14036
// Say ( ar_commander , VD-legion-ar ) ;
14024: LD_EXP 55
14028: PPUSH
14029: LD_STRING VD-legion-ar
14031: PPUSH
14032: CALL_OW 88
// if your_side = 7 then
14036: LD_OWVAR 2
14040: PUSH
14041: LD_INT 7
14043: EQUAL
14044: IFFALSE 14058
// Say ( al_commander , VD-legion-al ) ;
14046: LD_EXP 41
14050: PPUSH
14051: LD_STRING VD-legion-al
14053: PPUSH
14054: CALL_OW 88
// end ;
14058: PPOPN 1
14060: END
// every 0 0$01 trigger mine_vulc do
14061: LD_EXP 13
14065: IFFALSE 14082
14067: GO 14069
14069: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14070: LD_EXP 11
14074: PPUSH
14075: LD_STRING VD-vulc-mines
14077: PPUSH
14078: CALL_OW 88
// end ;
14082: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
14083: LD_OWVAR 67
14087: PUSH
14088: LD_INT 1
14090: GREATER
14091: IFFALSE 14210
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14101: LD_ADDR_VAR 0 1
14105: PUSH
14106: LD_INT 123
14108: PUSH
14109: LD_INT 95
14111: PUSH
14112: LD_INT 119
14114: PUSH
14115: LD_INT 89
14117: PUSH
14118: LD_INT 115
14120: PUSH
14121: LD_INT 81
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// p := 1 ;
14132: LD_ADDR_VAR 0 2
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// for i = 1 to 3 do
14140: LD_ADDR_VAR 0 3
14144: PUSH
14145: DOUBLE
14146: LD_INT 1
14148: DEC
14149: ST_TO_ADDR
14150: LD_INT 3
14152: PUSH
14153: FOR_TO
14154: IFFALSE 14208
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
14156: LD_VAR 0 1
14160: PUSH
14161: LD_VAR 0 2
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 1
14171: PUSH
14172: LD_VAR 0 2
14176: PUSH
14177: LD_INT 1
14179: PLUS
14180: ARRAY
14181: PPUSH
14182: LD_INT 8
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 454
// p := p + 2 ;
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_VAR 0 2
14201: PUSH
14202: LD_INT 2
14204: PLUS
14205: ST_TO_ADDR
// end ;
14206: GO 14153
14208: POP
14209: POP
// end ;
14210: PPOPN 3
14212: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14213: LD_OWVAR 67
14217: PUSH
14218: LD_INT 1
14220: GREATER
14221: PUSH
14222: LD_INT 22
14224: PPUSH
14225: LD_INT 22
14227: PUSH
14228: LD_OWVAR 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 70
14241: AND
14242: IFFALSE 14446
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
14250: PPUSH
14251: PPUSH
// begin enable ;
14252: ENABLE
// p := 1 ;
14253: LD_ADDR_VAR 0 1
14257: PUSH
14258: LD_INT 1
14260: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 123
14268: PUSH
14269: LD_INT 95
14271: PUSH
14272: LD_INT 119
14274: PUSH
14275: LD_INT 89
14277: PUSH
14278: LD_INT 115
14280: PUSH
14281: LD_INT 81
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: ST_TO_ADDR
// for i = 1 to 3 do
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_INT 3
14304: PUSH
14305: FOR_TO
14306: IFFALSE 14444
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14308: LD_VAR 0 3
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 3
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 1
14331: PLUS
14332: ARRAY
14333: PPUSH
14334: CALL_OW 428
14338: PUSH
14339: LD_INT 0
14341: GREATER
14342: IFFALSE 14428
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14344: LD_VAR 0 3
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: PPUSH
14355: LD_VAR 0 3
14359: PUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 1
14367: PLUS
14368: ARRAY
14369: PPUSH
14370: CALL_OW 428
14374: PPUSH
14375: CALL_OW 255
14379: PUSH
14380: LD_OWVAR 2
14384: EQUAL
14385: IFFALSE 14428
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14387: LD_VAR 0 3
14391: PUSH
14392: LD_VAR 0 1
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 3
14402: PUSH
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: ARRAY
14412: PPUSH
14413: LD_INT 8
14415: PPUSH
14416: CALL_OW 456
// mine_vulc := true ;
14420: LD_ADDR_EXP 13
14424: PUSH
14425: LD_INT 1
14427: ST_TO_ADDR
// end ; p := p + 2 ;
14428: LD_ADDR_VAR 0 1
14432: PUSH
14433: LD_VAR 0 1
14437: PUSH
14438: LD_INT 2
14440: PLUS
14441: ST_TO_ADDR
// end ;
14442: GO 14305
14444: POP
14445: POP
// end ;
14446: PPOPN 3
14448: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14449: LD_INT 22
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PUSH
14464: LD_INT 0
14466: EQUAL
14467: PUSH
14468: LD_OWVAR 2
14472: PUSH
14473: LD_INT 2
14475: NONEQUAL
14476: AND
14477: IFFALSE 14486
14479: GO 14481
14481: DISABLE
// Win ;
14482: CALL 14543 0 0
14486: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14487: LD_INT 2
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 8
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_INT 0
14522: EQUAL
14523: PUSH
14524: LD_OWVAR 2
14528: PUSH
14529: LD_INT 2
14531: EQUAL
14532: AND
14533: IFFALSE 14542
14535: GO 14537
14537: DISABLE
// Win ;
14538: CALL 14543 0 0
14542: END
// function Win ; var points ; begin
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
// case Query ( VulcWin ) of 1 :
14547: LD_STRING VulcWin
14549: PPUSH
14550: CALL_OW 97
14554: PUSH
14555: LD_INT 1
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14566
14563: POP
// ; end ;
14564: GO 14567
14566: POP
// if medal_enabled then
14567: LD_EXP 14
14571: IFFALSE 14585
// AddMedal ( vulc_1 , 1 ) else
14573: LD_STRING vulc_1
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 101
14583: GO 14596
// AddMedal ( vulc_1 , - 1 ) ;
14585: LD_STRING vulc_1
14587: PPUSH
14588: LD_INT 1
14590: NEG
14591: PPUSH
14592: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14596: LD_INT 22
14598: PUSH
14599: LD_INT 8
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: PUSH
14611: LD_INT 0
14613: EQUAL
14614: IFFALSE 14628
// AddMedal ( vulc_2 , 1 ) else
14616: LD_STRING vulc_2
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: CALL_OW 101
14626: GO 14639
// AddMedal ( vulc_2 , - 1 ) ;
14628: LD_STRING vulc_2
14630: PPUSH
14631: LD_INT 1
14633: NEG
14634: PPUSH
14635: CALL_OW 101
// points := CalculateCommanderPoints ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: CALL 2136 0 0
14648: ST_TO_ADDR
// if points >= 2000 then
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 2000
14656: GREATEREQUAL
14657: IFFALSE 14671
// AddMedal ( vulc_3 , 2 ) else
14659: LD_STRING vulc_3
14661: PPUSH
14662: LD_INT 2
14664: PPUSH
14665: CALL_OW 101
14669: GO 14704
// if points >= 0 then
14671: LD_VAR 0 2
14675: PUSH
14676: LD_INT 0
14678: GREATEREQUAL
14679: IFFALSE 14693
// AddMedal ( vulc_3 , 1 ) else
14681: LD_STRING vulc_3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 101
14691: GO 14704
// AddMedal ( vulc_3 , - 1 ) ;
14693: LD_STRING vulc_3
14695: PPUSH
14696: LD_INT 1
14698: NEG
14699: PPUSH
14700: CALL_OW 101
// GiveMedals ( MAIN ) ;
14704: LD_STRING MAIN
14706: PPUSH
14707: CALL_OW 102
// YouWin ;
14711: CALL_OW 103
// end ; end_of_file
14715: LD_VAR 0 1
14719: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14720: LD_INT 13
14722: PPUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 70
14737: PUSH
14738: LD_INT 0
14740: GREATER
14741: IFFALSE 14801
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
14749: PPUSH
// begin enable ;
14750: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_INT 13
14758: PPUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: PUSH
14774: FOR_IN
14775: IFFALSE 14799
// if GetLives ( i ) then
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 256
14786: IFFALSE 14797
// KillUnit ( i ) ;
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 66
14797: GO 14774
14799: POP
14800: POP
// end ;
14801: PPOPN 2
14803: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 255
14813: PUSH
14814: LD_OWVAR 2
14818: EQUAL
14819: IFFALSE 14829
// player_res_art := true ;
14821: LD_ADDR_EXP 6
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// end ;
14829: PPOPN 1
14831: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 7
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 8
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 30
14869: PUSH
14870: LD_INT 11
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: PUSH
14892: LD_EXP 6
14896: AND
14897: IFFALSE 15254
14899: GO 14901
14901: DISABLE
14902: LD_INT 0
14904: PPUSH
14905: PPUSH
// begin enable ;
14906: ENABLE
// xy := FindArtifact ( 1 ) ;
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: PPUSH
14915: CALL_OW 469
14919: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14920: LD_ADDR_VAR 0 2
14924: PUSH
14925: LD_INT 22
14927: PUSH
14928: LD_OWVAR 2
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 8
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 30
14952: PUSH
14953: LD_INT 7
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 11
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL_OW 69
14984: PPUSH
14985: LD_VAR 0 1
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: PPUSH
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 2
15001: ARRAY
15002: PPUSH
15003: CALL_OW 73
15007: ST_TO_ADDR
// if player_artifact_ready = false then
15008: LD_EXP 8
15012: PUSH
15013: LD_INT 0
15015: EQUAL
15016: IFFALSE 15130
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 1
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_VAR 0 1
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: PPUSH
15041: CALL_OW 297
15045: PUSH
15046: LD_INT 6
15048: LESS
15049: IFFALSE 15110
// begin if BuildingStatus ( lab ) = bs_idle then
15051: LD_VAR 0 2
15055: PPUSH
15056: CALL_OW 461
15060: PUSH
15061: LD_INT 2
15063: EQUAL
15064: IFFALSE 15088
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15066: LD_OWVAR 2
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_INT 2
15076: PPUSH
15077: LD_VAR 0 2
15081: PPUSH
15082: CALL_OW 468
15086: GO 15108
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15088: LD_OWVAR 2
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: LD_VAR 0 2
15103: PPUSH
15104: CALL_OW 468
// end else
15108: GO 15130
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15110: LD_OWVAR 2
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: LD_VAR 0 2
15125: PPUSH
15126: CALL_OW 468
// if player_artifact_ready then
15130: LD_EXP 8
15134: IFFALSE 15254
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15136: LD_VAR 0 2
15140: PPUSH
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: LD_VAR 0 1
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PPUSH
15159: CALL_OW 297
15163: PUSH
15164: LD_INT 6
15166: LESS
15167: IFFALSE 15232
// begin if BuildingStatus ( lab ) = bs_idle then
15169: LD_VAR 0 2
15173: PPUSH
15174: CALL_OW 461
15178: PUSH
15179: LD_INT 2
15181: EQUAL
15182: IFFALSE 15208
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15184: LD_OWVAR 2
15188: PPUSH
15189: LD_EXP 9
15193: PPUSH
15194: LD_INT 4
15196: PPUSH
15197: LD_VAR 0 2
15201: PPUSH
15202: CALL_OW 468
15206: GO 15230
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15208: LD_OWVAR 2
15212: PPUSH
15213: LD_EXP 9
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: CALL_OW 468
// end else
15230: GO 15254
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15232: LD_OWVAR 2
15236: PPUSH
15237: LD_EXP 9
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: LD_VAR 0 2
15249: PPUSH
15250: CALL_OW 468
// end ;
15254: PPOPN 2
15256: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15263: LD_ADDR_VAR 0 5
15267: PUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 469
15275: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15276: LD_ADDR_VAR 0 7
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_OWVAR 2
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 30
15298: PUSH
15299: LD_INT 8
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 11
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: PPUSH
15330: LD_VAR 0 5
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 5
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: PPUSH
15348: CALL_OW 73
15352: ST_TO_ADDR
// if icon = art_exp_left then
15353: LD_VAR 0 2
15357: PUSH
15358: LD_INT 1
15360: EQUAL
15361: IFFALSE 15414
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15363: LD_VAR 0 7
15367: PPUSH
15368: LD_EXP 10
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15380: LD_VAR 0 7
15384: PPUSH
15385: LD_EXP 7
15389: PPUSH
15390: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15394: LD_OWVAR 2
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 0
15404: PPUSH
15405: LD_VAR 0 7
15409: PPUSH
15410: CALL_OW 468
// end ; if icon = art_icon then
15414: LD_VAR 0 2
15418: PUSH
15419: LD_EXP 9
15423: EQUAL
15424: IFFALSE 15635
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15426: LD_VAR 0 3
15430: PUSH
15431: LD_INT 21
15433: PUSH
15434: LD_INT 3
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: IN
15446: IFFALSE 15635
// begin side := GetSide ( cr1 ) ;
15448: LD_ADDR_VAR 0 8
15452: PUSH
15453: LD_VAR 0 3
15457: PPUSH
15458: CALL_OW 255
15462: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15463: LD_INT 22
15465: PUSH
15466: LD_VAR 0 8
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 30
15477: PUSH
15478: LD_INT 28
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: LD_INT 0
15496: GREATER
15497: IFFALSE 15635
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15499: LD_ADDR_VAR 0 6
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_VAR 0 8
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 30
15521: PUSH
15522: LD_INT 26
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 27
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 28
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: FOR_IN
15565: IFFALSE 15578
// KillUnit ( i ) ;
15567: LD_VAR 0 6
15571: PPUSH
15572: CALL_OW 66
15576: GO 15564
15578: POP
15579: POP
// player_res_art := false ;
15580: LD_ADDR_EXP 6
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15588: LD_OWVAR 2
15592: PPUSH
15593: LD_EXP 9
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: LD_VAR 0 7
15605: PPUSH
15606: CALL_OW 468
// wait ( time_to_reuse ) ;
15610: LD_EXP 12
15614: PPUSH
15615: CALL_OW 67
// player_res_art := true ;
15619: LD_ADDR_EXP 6
15623: PUSH
15624: LD_INT 1
15626: ST_TO_ADDR
// medal_enabled := true ;
15627: LD_ADDR_EXP 14
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// end ; end ; end ; end ;
15635: PPOPN 8
15637: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 255
15647: PUSH
15648: LD_OWVAR 2
15652: EQUAL
15653: IFFALSE 15690
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15655: LD_OWVAR 2
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: LD_INT 0
15665: PPUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 468
// player_artifact_ready := true ;
15675: LD_ADDR_EXP 8
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15683: LD_STRING ArtVulcano
15685: PPUSH
15686: CALL_OW 339
// end ; end ;
15690: PPOPN 1
15692: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15693: LD_ADDR_EXP 7
15697: PUSH
15698: LD_VAR 0 2
15702: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15703: LD_OWVAR 2
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_INT 2
15713: PPUSH
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 468
// end ; end_of_file
15723: PPOPN 2
15725: END
// every 0 0$01 do
15726: GO 15728
15728: DISABLE
// begin enable ;
15729: ENABLE
// Display_Strings := [ #tick , tick ] ;
15730: LD_ADDR_OWVAR 47
15734: PUSH
15735: LD_STRING #tick
15737: PUSH
15738: LD_OWVAR 1
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
// end ; end_of_file
15747: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15748: LD_INT 0
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15755: LD_ADDR_EXP 43
15759: PUSH
15760: LD_INT 7
15762: PUSH
15763: LD_INT 6
15765: PUSH
15766: LD_INT 5
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: PUSH
15774: LD_OWVAR 67
15778: ARRAY
15779: ST_TO_ADDR
// al_force := [ ] ;
15780: LD_ADDR_EXP 42
15784: PUSH
15785: EMPTY
15786: ST_TO_ADDR
// RemoveAlliance ;
15787: CALL 16165 0 0
// ResetFog ;
15791: CALL_OW 335
// your_side := 7 ;
15795: LD_ADDR_OWVAR 2
15799: PUSH
15800: LD_INT 7
15802: ST_TO_ADDR
// uc_side := 7 ;
15803: LD_ADDR_OWVAR 20
15807: PUSH
15808: LD_INT 7
15810: ST_TO_ADDR
// hc_gallery :=  ;
15811: LD_ADDR_OWVAR 33
15815: PUSH
15816: LD_STRING 
15818: ST_TO_ADDR
// hc_name :=  ;
15819: LD_ADDR_OWVAR 26
15823: PUSH
15824: LD_STRING 
15826: ST_TO_ADDR
// hc_importance := 0 ;
15827: LD_ADDR_OWVAR 32
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// for i = 1 to 17 do
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: DOUBLE
15841: LD_INT 1
15843: DEC
15844: ST_TO_ADDR
15845: LD_INT 17
15847: PUSH
15848: FOR_TO
15849: IFFALSE 15929
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15851: LD_ADDR_OWVAR 21
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_INT 2
15871: PPUSH
15872: CALL_OW 12
15876: ARRAY
15877: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15878: LD_INT 0
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 4
15886: PPUSH
15887: CALL_OW 12
15891: PPUSH
15892: LD_EXP 43
15896: PPUSH
15897: CALL_OW 380
// un := CreateHuman ;
15901: LD_ADDR_VAR 0 4
15905: PUSH
15906: CALL_OW 44
15910: ST_TO_ADDR
// al_force := al_force ^ un ;
15911: LD_ADDR_EXP 42
15915: PUSH
15916: LD_EXP 42
15920: PUSH
15921: LD_VAR 0 4
15925: ADD
15926: ST_TO_ADDR
// end ;
15927: GO 15848
15929: POP
15930: POP
// hc_importance := 100 ;
15931: LD_ADDR_OWVAR 32
15935: PUSH
15936: LD_INT 100
15938: ST_TO_ADDR
// uc_nation := 1 ;
15939: LD_ADDR_OWVAR 21
15943: PUSH
15944: LD_INT 1
15946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15947: LD_INT 1
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: LD_EXP 43
15957: PPUSH
15958: CALL_OW 380
// al_commander := CreateHuman ;
15962: LD_ADDR_EXP 41
15966: PUSH
15967: CALL_OW 44
15971: ST_TO_ADDR
// player_commander := al_commander ;
15972: LD_ADDR_EXP 11
15976: PUSH
15977: LD_EXP 41
15981: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15982: LD_ADDR_VAR 0 5
15986: PUSH
15987: LD_STRING text
15989: PPUSH
15990: LD_INT 9
15992: PUSH
15993: LD_INT 9
15995: PUSH
15996: LD_INT 8
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: LD_OWVAR 67
16008: ARRAY
16009: PPUSH
16010: LD_INT 9
16012: PUSH
16013: LD_INT 9
16015: PUSH
16016: LD_INT 8
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: LD_OWVAR 67
16028: ARRAY
16029: PPUSH
16030: LD_INT -5
16032: PUSH
16033: LD_EXP 41
16037: PUSH
16038: LD_INT -3
16040: PUSH
16041: LD_INT -2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: LD_EXP 42
16054: ADD
16055: PPUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 3
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 4
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 9
16084: PUSH
16085: LD_INT 5
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 42
16100: ST_TO_ADDR
// team := team ^ al_commander ;
16101: LD_ADDR_VAR 0 5
16105: PUSH
16106: LD_VAR 0 5
16110: PUSH
16111: LD_EXP 41
16115: ADD
16116: ST_TO_ADDR
// for i = 1 to team do
16117: LD_ADDR_VAR 0 2
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_VAR 0 5
16131: PUSH
16132: FOR_TO
16133: IFFALSE 16158
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16135: LD_VAR 0 5
16139: PUSH
16140: LD_VAR 0 2
16144: ARRAY
16145: PPUSH
16146: LD_INT 15
16148: PPUSH
16149: LD_INT 0
16151: PPUSH
16152: CALL_OW 49
16156: GO 16132
16158: POP
16159: POP
// end ;
16160: LD_VAR 0 1
16164: RET
// export function RemoveAlliance ; var i ; begin
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16169: LD_INT 22
16171: PUSH
16172: LD_INT 7
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 30
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: PPUSH
16202: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 7
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PUSH
16226: FOR_IN
16227: IFFALSE 16240
// RemoveUnit ( i ) ;
16229: LD_VAR 0 2
16233: PPUSH
16234: CALL_OW 64
16238: GO 16226
16240: POP
16241: POP
// end ;
16242: LD_VAR 0 1
16246: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16253: LD_INT 31
16255: PPUSH
16256: LD_INT 7
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16266: LD_INT 32
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: LD_INT 2
16274: PPUSH
16275: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16279: LD_INT 59
16281: PPUSH
16282: LD_INT 7
16284: PPUSH
16285: LD_INT 2
16287: PPUSH
16288: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16292: LD_ADDR_EXP 43
16296: PUSH
16297: LD_INT 5
16299: PUSH
16300: LD_INT 6
16302: PUSH
16303: LD_INT 7
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: PUSH
16311: LD_OWVAR 67
16315: ARRAY
16316: ST_TO_ADDR
// al_force := [ ] ;
16317: LD_ADDR_EXP 42
16321: PUSH
16322: EMPTY
16323: ST_TO_ADDR
// al_vehs := [ ] ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: EMPTY
16330: ST_TO_ADDR
// uc_side := 7 ;
16331: LD_ADDR_OWVAR 20
16335: PUSH
16336: LD_INT 7
16338: ST_TO_ADDR
// uc_nation := 1 ;
16339: LD_ADDR_OWVAR 21
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// bc_type := b_oil_mine ;
16347: LD_ADDR_OWVAR 42
16351: PUSH
16352: LD_INT 29
16354: ST_TO_ADDR
// b := CreateBuilding ;
16355: LD_ADDR_VAR 0 4
16359: PUSH
16360: CALL_OW 46
16364: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16365: LD_VAR 0 4
16369: PPUSH
16370: LD_INT 61
16372: PPUSH
16373: LD_INT 7
16375: PPUSH
16376: LD_INT 0
16378: PPUSH
16379: LD_INT 0
16381: PPUSH
16382: CALL_OW 50
// bc_type := b_siberite_mine ;
16386: LD_ADDR_OWVAR 42
16390: PUSH
16391: LD_INT 30
16393: ST_TO_ADDR
// b := CreateBuilding ;
16394: LD_ADDR_VAR 0 4
16398: PUSH
16399: CALL_OW 46
16403: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16404: LD_VAR 0 4
16408: PPUSH
16409: LD_INT 69
16411: PPUSH
16412: LD_INT 13
16414: PPUSH
16415: LD_INT 0
16417: PPUSH
16418: LD_INT 0
16420: PPUSH
16421: CALL_OW 50
// hc_gallery :=  ;
16425: LD_ADDR_OWVAR 33
16429: PUSH
16430: LD_STRING 
16432: ST_TO_ADDR
// hc_name :=  ;
16433: LD_ADDR_OWVAR 26
16437: PUSH
16438: LD_STRING 
16440: ST_TO_ADDR
// hc_importance := 0 ;
16441: LD_ADDR_OWVAR 32
16445: PUSH
16446: LD_INT 0
16448: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_INT 7
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 30
16466: PUSH
16467: LD_INT 32
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PPUSH
16478: CALL_OW 69
16482: PUSH
16483: FOR_IN
16484: IFFALSE 16554
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16486: LD_ADDR_OWVAR 21
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 3
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ARRAY
16512: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16513: LD_INT 0
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_EXP 43
16523: PPUSH
16524: CALL_OW 380
// un := CreateHuman ;
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: CALL_OW 44
16537: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL_OW 52
// end ;
16552: GO 16483
16554: POP
16555: POP
// for i = 1 to 3 do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: DOUBLE
16562: LD_INT 1
16564: DEC
16565: ST_TO_ADDR
16566: LD_INT 3
16568: PUSH
16569: FOR_TO
16570: IFFALSE 16638
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16572: LD_ADDR_OWVAR 21
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 3
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: PPUSH
16590: LD_INT 2
16592: PPUSH
16593: CALL_OW 12
16597: ARRAY
16598: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16599: LD_INT 0
16601: PPUSH
16602: LD_INT 4
16604: PPUSH
16605: LD_EXP 43
16609: PPUSH
16610: CALL_OW 380
// un := CreateHuman ;
16614: LD_ADDR_VAR 0 3
16618: PUSH
16619: CALL_OW 44
16623: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 164
16631: PPUSH
16632: CALL_OW 52
// end ;
16636: GO 16569
16638: POP
16639: POP
// for i = 1 to 4 do
16640: LD_ADDR_VAR 0 2
16644: PUSH
16645: DOUBLE
16646: LD_INT 1
16648: DEC
16649: ST_TO_ADDR
16650: LD_INT 4
16652: PUSH
16653: FOR_TO
16654: IFFALSE 16745
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16656: LD_ADDR_OWVAR 21
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: LD_INT 3
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 1
16673: PPUSH
16674: LD_INT 2
16676: PPUSH
16677: CALL_OW 12
16681: ARRAY
16682: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16683: LD_INT 0
16685: PPUSH
16686: LD_INT 5
16688: PUSH
16689: LD_INT 9
16691: PUSH
16692: LD_INT 9
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PPUSH
16703: LD_INT 3
16705: PPUSH
16706: CALL_OW 12
16710: ARRAY
16711: PPUSH
16712: LD_EXP 43
16716: PPUSH
16717: CALL_OW 380
// un := CreateHuman ;
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: CALL_OW 44
16730: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_INT 173
16738: PPUSH
16739: CALL_OW 52
// end ;
16743: GO 16653
16745: POP
16746: POP
// for i = 1 to 4 do
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: DOUBLE
16753: LD_INT 1
16755: DEC
16756: ST_TO_ADDR
16757: LD_INT 4
16759: PUSH
16760: FOR_TO
16761: IFFALSE 16859
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: PPUSH
16781: LD_INT 2
16783: PPUSH
16784: CALL_OW 12
16788: ARRAY
16789: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16790: LD_INT 0
16792: PPUSH
16793: LD_INT 3
16795: PPUSH
16796: LD_EXP 43
16800: PPUSH
16801: CALL_OW 380
// un := CreateHuman ;
16805: LD_ADDR_VAR 0 3
16809: PUSH
16810: CALL_OW 44
16814: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 22
16822: PUSH
16823: LD_INT 7
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 30
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: PUSH
16849: LD_INT 1
16851: ARRAY
16852: PPUSH
16853: CALL_OW 52
// end ;
16857: GO 16760
16859: POP
16860: POP
// for i = 1 to 4 do
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: DOUBLE
16867: LD_INT 1
16869: DEC
16870: ST_TO_ADDR
16871: LD_INT 4
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16943
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16877: LD_ADDR_OWVAR 21
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: LD_INT 3
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: PPUSH
16895: LD_INT 2
16897: PPUSH
16898: CALL_OW 12
16902: ARRAY
16903: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16904: LD_INT 0
16906: PPUSH
16907: LD_INT 2
16909: PPUSH
16910: LD_EXP 43
16914: PPUSH
16915: CALL_OW 380
// un := CreateHuman ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: CALL_OW 44
16928: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_INT 162
16936: PPUSH
16937: CALL_OW 52
// end ;
16941: GO 16874
16943: POP
16944: POP
// uc_nation := 3 ;
16945: LD_ADDR_OWVAR 21
16949: PUSH
16950: LD_INT 3
16952: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16953: LD_ADDR_OWVAR 37
16957: PUSH
16958: LD_INT 21
16960: ST_TO_ADDR
// vc_engine := engine_siberite ;
16961: LD_ADDR_OWVAR 39
16965: PUSH
16966: LD_INT 3
16968: ST_TO_ADDR
// vc_control := control_computer ;
16969: LD_ADDR_OWVAR 38
16973: PUSH
16974: LD_INT 3
16976: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16977: LD_ADDR_OWVAR 40
16981: PUSH
16982: LD_INT 51
16984: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16985: CALL_OW 45
16989: PPUSH
16990: LD_INT 49
16992: PPUSH
16993: LD_INT 13
16995: PPUSH
16996: LD_INT 0
16998: PPUSH
16999: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17003: LD_ADDR_EXP 50
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 7
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 30
17020: PUSH
17021: LD_INT 33
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: DOUBLE
17043: LD_INT 1
17045: DEC
17046: ST_TO_ADDR
17047: LD_INT 22
17049: PUSH
17050: LD_INT 7
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 30
17059: PUSH
17060: LD_INT 33
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 35
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17151
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17093: LD_INT 22
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 30
17105: PUSH
17106: LD_INT 33
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 35
17115: PUSH
17116: LD_INT 0
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: PPUSH
17131: CALL_OW 69
17135: PUSH
17136: LD_VAR 0 2
17140: ARRAY
17141: PPUSH
17142: LD_INT 49
17144: PPUSH
17145: CALL_OW 208
17149: GO 17090
17151: POP
17152: POP
// end ;
17153: LD_VAR 0 1
17157: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17158: LD_OWVAR 2
17162: PUSH
17163: LD_INT 1
17165: EQUAL
17166: IFFALSE 18176
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
// begin enable ;
17177: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17178: LD_ADDR_EXP 54
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 7
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17212: LD_ADDR_EXP 52
17216: PUSH
17217: LD_INT 164
17219: PUSH
17220: LD_INT 197
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17227: LD_ADDR_EXP 51
17231: PUSH
17232: LD_INT 22
17234: PUSH
17235: LD_INT 7
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 30
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17265: LD_ADDR_EXP 53
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_INT 7
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17303: LD_INT 22
17305: PUSH
17306: LD_INT 7
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 51
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PPUSH
17327: CALL_OW 69
17331: IFFALSE 17371
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17333: LD_ADDR_EXP 49
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_INT 7
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 34
17350: PUSH
17351: LD_INT 51
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: PUSH
17367: LD_INT 1
17369: ARRAY
17370: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17371: LD_ADDR_EXP 45
17375: PUSH
17376: LD_INT 22
17378: PUSH
17379: LD_INT 7
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 25
17388: PUSH
17389: LD_INT 9
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17405: LD_ADDR_EXP 44
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_INT 7
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 25
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17439: LD_ADDR_EXP 46
17443: PUSH
17444: LD_INT 22
17446: PUSH
17447: LD_INT 7
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 25
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17473: LD_ADDR_EXP 47
17477: PUSH
17478: LD_INT 22
17480: PUSH
17481: LD_INT 7
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 25
17490: PUSH
17491: LD_INT 4
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PPUSH
17502: CALL_OW 69
17506: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17507: LD_EXP 45
17511: PPUSH
17512: LD_INT 81
17514: PUSH
17515: LD_INT 7
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 69
17526: PPUSH
17527: CALL 1533 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17531: LD_EXP 49
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: PUSH
17542: LD_EXP 49
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: CALL_OW 289
17554: PUSH
17555: LD_INT 100
17557: LESS
17558: AND
17559: IFFALSE 17607
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17561: LD_ADDR_VAR 0 4
17565: PUSH
17566: LD_INT 12
17568: PPUSH
17569: CALL_OW 435
17573: ST_TO_ADDR
// if cr then
17574: LD_VAR 0 4
17578: IFFALSE 17607
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17580: LD_EXP 49
17584: PPUSH
17585: LD_VAR 0 4
17589: PUSH
17590: LD_INT 1
17592: ARRAY
17593: PPUSH
17594: LD_VAR 0 4
17598: PUSH
17599: LD_INT 2
17601: ARRAY
17602: PPUSH
17603: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17607: LD_EXP 54
17611: PPUSH
17612: LD_INT 3
17614: PUSH
17615: LD_INT 24
17617: PUSH
17618: LD_INT 1000
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PPUSH
17629: CALL_OW 72
17633: IFFALSE 17763
// begin if al_eng then
17635: LD_EXP 44
17639: IFFALSE 17761
// for i = 1 to al_eng do
17641: LD_ADDR_VAR 0 1
17645: PUSH
17646: DOUBLE
17647: LD_INT 1
17649: DEC
17650: ST_TO_ADDR
17651: LD_EXP 44
17655: PUSH
17656: FOR_TO
17657: IFFALSE 17759
// if IsInUnit ( al_eng [ i ] ) then
17659: LD_EXP 44
17663: PUSH
17664: LD_VAR 0 1
17668: ARRAY
17669: PPUSH
17670: CALL_OW 310
17674: IFFALSE 17693
// ComExitBuilding ( al_eng [ i ] ) else
17676: LD_EXP 44
17680: PUSH
17681: LD_VAR 0 1
17685: ARRAY
17686: PPUSH
17687: CALL_OW 122
17691: GO 17757
// if not HasTask ( al_eng [ i ] ) then
17693: LD_EXP 44
17697: PUSH
17698: LD_VAR 0 1
17702: ARRAY
17703: PPUSH
17704: CALL_OW 314
17708: NOT
17709: IFFALSE 17757
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17711: LD_EXP 44
17715: PUSH
17716: LD_VAR 0 1
17720: ARRAY
17721: PPUSH
17722: LD_EXP 54
17726: PPUSH
17727: LD_INT 3
17729: PUSH
17730: LD_INT 24
17732: PUSH
17733: LD_INT 1000
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 72
17748: PUSH
17749: LD_INT 1
17751: ARRAY
17752: PPUSH
17753: CALL_OW 130
17757: GO 17656
17759: POP
17760: POP
// end else
17761: GO 17845
// if al_eng then
17763: LD_EXP 44
17767: IFFALSE 17845
// if not IsInUnit ( al_eng [ 1 ] ) then
17769: LD_EXP 44
17773: PUSH
17774: LD_INT 1
17776: ARRAY
17777: PPUSH
17778: CALL_OW 310
17782: NOT
17783: IFFALSE 17845
// for i = 1 to al_eng do
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: DOUBLE
17791: LD_INT 1
17793: DEC
17794: ST_TO_ADDR
17795: LD_EXP 44
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17843
// if not IsInUnit ( al_eng [ i ] ) then
17803: LD_EXP 44
17807: PUSH
17808: LD_VAR 0 1
17812: ARRAY
17813: PPUSH
17814: CALL_OW 310
17818: NOT
17819: IFFALSE 17841
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17821: LD_EXP 44
17825: PUSH
17826: LD_VAR 0 1
17830: ARRAY
17831: PPUSH
17832: LD_EXP 51
17836: PPUSH
17837: CALL_OW 120
17841: GO 17800
17843: POP
17844: POP
// if al_vehs then
17845: LD_EXP 48
17849: IFFALSE 17949
// if BuildingStatus ( al_fac ) = bs_idle then
17851: LD_EXP 53
17855: PPUSH
17856: CALL_OW 461
17860: PUSH
17861: LD_INT 2
17863: EQUAL
17864: IFFALSE 17949
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17866: LD_EXP 53
17870: PPUSH
17871: LD_EXP 48
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PPUSH
17880: LD_EXP 48
17884: PUSH
17885: LD_INT 2
17887: ARRAY
17888: PPUSH
17889: LD_EXP 48
17893: PUSH
17894: LD_INT 3
17896: ARRAY
17897: PPUSH
17898: LD_EXP 48
17902: PUSH
17903: LD_INT 4
17905: ARRAY
17906: PPUSH
17907: CALL_OW 125
// for i = 1 to 4 do
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_INT 4
17923: PUSH
17924: FOR_TO
17925: IFFALSE 17947
// al_vehs := Delete ( al_vehs , 1 ) ;
17927: LD_ADDR_EXP 48
17931: PUSH
17932: LD_EXP 48
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 3
17944: ST_TO_ADDR
17945: GO 17924
17947: POP
17948: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17949: LD_EXP 42
17953: PUSH
17954: LD_INT 0
17956: EQUAL
17957: PUSH
17958: LD_OWVAR 1
17962: PUSH
17963: LD_INT 23100
17965: MOD
17966: PUSH
17967: LD_INT 0
17969: EQUAL
17970: AND
17971: IFFALSE 18085
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
17973: LD_ADDR_VAR 0 1
17977: PUSH
17978: DOUBLE
17979: LD_INT 1
17981: DEC
17982: ST_TO_ADDR
17983: LD_INT 6
17985: PUSH
17986: LD_INT 7
17988: PUSH
17989: LD_INT 8
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: LD_OWVAR 67
18001: ARRAY
18002: PUSH
18003: FOR_TO
18004: IFFALSE 18083
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18006: LD_ADDR_EXP 48
18010: PUSH
18011: LD_EXP 48
18015: PUSH
18016: LD_INT 23
18018: ADD
18019: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18020: LD_ADDR_EXP 48
18024: PUSH
18025: LD_EXP 48
18029: PUSH
18030: LD_INT 1
18032: ADD
18033: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18034: LD_ADDR_EXP 48
18038: PUSH
18039: LD_EXP 48
18043: PUSH
18044: LD_INT 3
18046: ADD
18047: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18048: LD_ADDR_EXP 48
18052: PUSH
18053: LD_EXP 48
18057: PUSH
18058: LD_INT 46
18060: PUSH
18061: LD_INT 47
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: CALL_OW 12
18078: ARRAY
18079: ADD
18080: ST_TO_ADDR
// end ;
18081: GO 18003
18083: POP
18084: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18085: LD_INT 22
18087: PUSH
18088: LD_INT 7
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 34
18097: PUSH
18098: LD_INT 51
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PUSH
18114: LD_INT 0
18116: EQUAL
18117: IFFALSE 18140
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18119: LD_EXP 53
18123: PPUSH
18124: LD_INT 21
18126: PPUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_INT 3
18132: PPUSH
18133: LD_INT 51
18135: PPUSH
18136: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18140: LD_EXP 42
18144: PUSH
18145: LD_INT 6
18147: PUSH
18148: LD_INT 7
18150: PUSH
18151: LD_INT 8
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_OWVAR 67
18163: ARRAY
18164: GREATEREQUAL
18165: IFFALSE 18176
// RaiseSailEvent ( event_alliance_attack ) ;
18167: LD_EXP 22
18171: PPUSH
18172: CALL_OW 427
// end ;
18176: PPOPN 4
18178: END
// export function AllianceAttack ( ) ; var path , units ; begin
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
18183: PPUSH
// units := al_force ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_EXP 42
18193: ST_TO_ADDR
// al_force := [ ] ;
18194: LD_ADDR_EXP 42
18198: PUSH
18199: EMPTY
18200: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18201: LD_INT 0
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 12
18211: IFFALSE 18255
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_INT 49
18220: PUSH
18221: LD_INT 53
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 52
18230: PUSH
18231: LD_INT 90
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 63
18240: PUSH
18241: LD_INT 114
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: ST_TO_ADDR
18253: GO 18284
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18255: LD_ADDR_VAR 0 2
18259: PUSH
18260: LD_INT 89
18262: PUSH
18263: LD_INT 52
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 143
18272: PUSH
18273: LD_INT 50
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18284: LD_INT 35
18286: PPUSH
18287: CALL_OW 67
// AgressiveMove ( units , path ) ;
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL 76075 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_INT 50
18312: PUSH
18313: EMPTY
18314: LIST
18315: PPUSH
18316: CALL_OW 72
18320: NOT
18321: IFFALSE 18284
// end ; end_of_file
18323: LD_VAR 0 1
18327: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18335: LD_ADDR_EXP 57
18339: PUSH
18340: LD_INT 9
18342: PUSH
18343: LD_INT 8
18345: PUSH
18346: LD_INT 7
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_OWVAR 67
18358: ARRAY
18359: ST_TO_ADDR
// ar_force := [ ] ;
18360: LD_ADDR_EXP 56
18364: PUSH
18365: EMPTY
18366: ST_TO_ADDR
// RemoveAlliance ;
18367: CALL 16165 0 0
// RemoveEnvironmentArea ( evn ) ;
18371: LD_INT 17
18373: PPUSH
18374: CALL_OW 355
// your_side := 2 ;
18378: LD_ADDR_OWVAR 2
18382: PUSH
18383: LD_INT 2
18385: ST_TO_ADDR
// uc_side := 2 ;
18386: LD_ADDR_OWVAR 20
18390: PUSH
18391: LD_INT 2
18393: ST_TO_ADDR
// uc_nation := nation_arabian ;
18394: LD_ADDR_OWVAR 21
18398: PUSH
18399: LD_INT 2
18401: ST_TO_ADDR
// hc_gallery :=  ;
18402: LD_ADDR_OWVAR 33
18406: PUSH
18407: LD_STRING 
18409: ST_TO_ADDR
// hc_name :=  ;
18410: LD_ADDR_OWVAR 26
18414: PUSH
18415: LD_STRING 
18417: ST_TO_ADDR
// hc_importance := 0 ;
18418: LD_ADDR_OWVAR 32
18422: PUSH
18423: LD_INT 0
18425: ST_TO_ADDR
// for i = 1 to 20 do
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: DOUBLE
18432: LD_INT 1
18434: DEC
18435: ST_TO_ADDR
18436: LD_INT 20
18438: PUSH
18439: FOR_TO
18440: IFFALSE 18505
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18442: LD_INT 0
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: LD_INT 4
18450: PPUSH
18451: CALL_OW 12
18455: PPUSH
18456: LD_EXP 57
18460: PPUSH
18461: CALL_OW 380
// un := CreateHuman ;
18465: LD_ADDR_VAR 0 4
18469: PUSH
18470: CALL_OW 44
18474: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18475: LD_VAR 0 4
18479: PPUSH
18480: LD_INT 2
18482: PPUSH
18483: CALL_OW 233
// ar_force := ar_force ^ un ;
18487: LD_ADDR_EXP 56
18491: PUSH
18492: LD_EXP 56
18496: PUSH
18497: LD_VAR 0 4
18501: ADD
18502: ST_TO_ADDR
// end ;
18503: GO 18439
18505: POP
18506: POP
// hc_importance := 100 ;
18507: LD_ADDR_OWVAR 32
18511: PUSH
18512: LD_INT 100
18514: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 11
18520: PPUSH
18521: LD_EXP 57
18525: PPUSH
18526: CALL_OW 380
// ar_commander := CreateHuman ;
18530: LD_ADDR_EXP 55
18534: PUSH
18535: CALL_OW 44
18539: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18540: LD_EXP 55
18544: PPUSH
18545: LD_INT 2
18547: PPUSH
18548: CALL_OW 233
// player_commander := ar_commander ;
18552: LD_ADDR_EXP 11
18556: PUSH
18557: LD_EXP 55
18561: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18562: LD_ADDR_VAR 0 5
18566: PUSH
18567: LD_STRING text
18569: PPUSH
18570: LD_INT 14
18572: PUSH
18573: LD_INT 13
18575: PUSH
18576: LD_INT 12
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: LD_OWVAR 67
18588: ARRAY
18589: PPUSH
18590: LD_INT 14
18592: PUSH
18593: LD_INT 13
18595: PUSH
18596: LD_INT 12
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_OWVAR 67
18608: ARRAY
18609: PPUSH
18610: LD_INT -6
18612: PUSH
18613: LD_EXP 55
18617: PUSH
18618: LD_INT -2
18620: PUSH
18621: LD_INT -3
18623: PUSH
18624: LD_INT -5
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_EXP 56
18638: ADD
18639: PPUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 8
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 42
18680: ST_TO_ADDR
// team := team ^ ar_commander ;
18681: LD_ADDR_VAR 0 5
18685: PUSH
18686: LD_VAR 0 5
18690: PUSH
18691: LD_EXP 55
18695: ADD
18696: ST_TO_ADDR
// for i = 1 to 4 do
18697: LD_ADDR_VAR 0 2
18701: PUSH
18702: DOUBLE
18703: LD_INT 1
18705: DEC
18706: ST_TO_ADDR
18707: LD_INT 4
18709: PUSH
18710: FOR_TO
18711: IFFALSE 18813
// begin vc_chassis := ar_medium_trike ;
18713: LD_ADDR_OWVAR 37
18717: PUSH
18718: LD_INT 13
18720: ST_TO_ADDR
// vc_engine := engine_siberite ;
18721: LD_ADDR_OWVAR 39
18725: PUSH
18726: LD_INT 3
18728: ST_TO_ADDR
// vc_control := control_manual ;
18729: LD_ADDR_OWVAR 38
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
18737: LD_ADDR_OWVAR 40
18741: PUSH
18742: LD_INT 27
18744: PUSH
18745: LD_INT 32
18747: PUSH
18748: LD_EXP 64
18752: PUSH
18753: LD_INT 27
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: LD_VAR 0 2
18766: ARRAY
18767: ST_TO_ADDR
// un := CreateVehicle ;
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: CALL_OW 45
18777: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18778: LD_VAR 0 4
18782: PPUSH
18783: LD_INT 2
18785: PPUSH
18786: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
18790: LD_VAR 0 4
18794: PPUSH
18795: LD_INT 54
18797: PPUSH
18798: LD_INT 15
18800: PPUSH
18801: LD_INT 6
18803: PPUSH
18804: LD_INT 0
18806: PPUSH
18807: CALL_OW 50
// end ;
18811: GO 18710
18813: POP
18814: POP
// for i = 1 to team do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: DOUBLE
18821: LD_INT 1
18823: DEC
18824: ST_TO_ADDR
18825: LD_VAR 0 5
18829: PUSH
18830: FOR_TO
18831: IFFALSE 18928
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
18833: LD_INT 22
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 58
18845: PUSH
18846: EMPTY
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: IFFALSE 18905
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
18859: LD_VAR 0 5
18863: PUSH
18864: LD_VAR 0 2
18868: ARRAY
18869: PPUSH
18870: LD_INT 22
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 58
18882: PUSH
18883: EMPTY
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PPUSH
18899: CALL_OW 52
18903: GO 18926
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18905: LD_VAR 0 5
18909: PUSH
18910: LD_VAR 0 2
18914: ARRAY
18915: PPUSH
18916: LD_INT 16
18918: PPUSH
18919: LD_INT 0
18921: PPUSH
18922: CALL_OW 49
// end ;
18926: GO 18830
18928: POP
18929: POP
// uc_side := 0 ;
18930: LD_ADDR_OWVAR 20
18934: PUSH
18935: LD_INT 0
18937: ST_TO_ADDR
// uc_nation := 0 ;
18938: LD_ADDR_OWVAR 21
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// vc_chassis := 31 ;
18946: LD_ADDR_OWVAR 37
18950: PUSH
18951: LD_INT 31
18953: ST_TO_ADDR
// vc_control := control_rider ;
18954: LD_ADDR_OWVAR 38
18958: PUSH
18959: LD_INT 4
18961: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18962: CALL_OW 45
18966: PPUSH
18967: LD_INT 96
18969: PPUSH
18970: LD_INT 20
18972: PPUSH
18973: LD_INT 0
18975: PPUSH
18976: CALL_OW 48
// end ; end_of_file
18980: LD_VAR 0 1
18984: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18985: LD_INT 0
18987: PPUSH
// ar_miner := 81 ;
18988: LD_ADDR_EXP 65
18992: PUSH
18993: LD_INT 81
18995: ST_TO_ADDR
// ar_crane := 88 ;
18996: LD_ADDR_EXP 64
19000: PUSH
19001: LD_INT 88
19003: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19004: LD_ADDR_EXP 59
19008: PUSH
19009: LD_INT 89
19011: ST_TO_ADDR
// us_hack := 99 ;
19012: LD_ADDR_EXP 60
19016: PUSH
19017: LD_INT 99
19019: ST_TO_ADDR
// us_artillery := 97 ;
19020: LD_ADDR_EXP 61
19024: PUSH
19025: LD_INT 97
19027: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19028: LD_ADDR_EXP 62
19032: PUSH
19033: LD_INT 91
19035: ST_TO_ADDR
// ar_mortar := 92 ;
19036: LD_ADDR_EXP 63
19040: PUSH
19041: LD_INT 92
19043: ST_TO_ADDR
// ru_radar := 98 ;
19044: LD_ADDR_EXP 58
19048: PUSH
19049: LD_INT 98
19051: ST_TO_ADDR
// tech_Artillery := 80 ;
19052: LD_ADDR_EXP 66
19056: PUSH
19057: LD_INT 80
19059: ST_TO_ADDR
// tech_RadMat := 81 ;
19060: LD_ADDR_EXP 67
19064: PUSH
19065: LD_INT 81
19067: ST_TO_ADDR
// tech_BasicTools := 82 ;
19068: LD_ADDR_EXP 68
19072: PUSH
19073: LD_INT 82
19075: ST_TO_ADDR
// tech_Cargo := 83 ;
19076: LD_ADDR_EXP 69
19080: PUSH
19081: LD_INT 83
19083: ST_TO_ADDR
// tech_Track := 84 ;
19084: LD_ADDR_EXP 70
19088: PUSH
19089: LD_INT 84
19091: ST_TO_ADDR
// tech_Crane := 85 ;
19092: LD_ADDR_EXP 71
19096: PUSH
19097: LD_INT 85
19099: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19100: LD_ADDR_EXP 72
19104: PUSH
19105: LD_INT 86
19107: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19108: LD_ADDR_EXP 73
19112: PUSH
19113: LD_INT 87
19115: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19116: LD_ADDR_EXP 74
19120: PUSH
19121: LD_INT 88
19123: ST_TO_ADDR
// class_mastodont := 31 ;
19124: LD_ADDR_EXP 75
19128: PUSH
19129: LD_INT 31
19131: ST_TO_ADDR
// class_horse := 21 ;
19132: LD_ADDR_EXP 76
19136: PUSH
19137: LD_INT 21
19139: ST_TO_ADDR
// end ;
19140: LD_VAR 0 1
19144: RET
// every 1 do
19145: GO 19147
19147: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19148: CALL 18985 0 0
19152: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19153: LD_INT 0
19155: PPUSH
// if p2 = 100 then
19156: LD_VAR 0 2
19160: PUSH
19161: LD_INT 100
19163: EQUAL
19164: IFFALSE 20167
// begin if not StreamModeActive then
19166: LD_EXP 77
19170: NOT
19171: IFFALSE 19181
// StreamModeActive := true ;
19173: LD_ADDR_EXP 77
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 0 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 0
19188: EQUAL
19189: IFFALSE 19195
// InitStreamMode ;
19191: CALL 20327 0 0
// if p3 = 1 then
19195: LD_VAR 0 3
19199: PUSH
19200: LD_INT 1
19202: EQUAL
19203: IFFALSE 19213
// sRocket := true ;
19205: LD_ADDR_EXP 82
19209: PUSH
19210: LD_INT 1
19212: ST_TO_ADDR
// if p3 = 2 then
19213: LD_VAR 0 3
19217: PUSH
19218: LD_INT 2
19220: EQUAL
19221: IFFALSE 19231
// sSpeed := true ;
19223: LD_ADDR_EXP 81
19227: PUSH
19228: LD_INT 1
19230: ST_TO_ADDR
// if p3 = 3 then
19231: LD_VAR 0 3
19235: PUSH
19236: LD_INT 3
19238: EQUAL
19239: IFFALSE 19249
// sEngine := true ;
19241: LD_ADDR_EXP 83
19245: PUSH
19246: LD_INT 1
19248: ST_TO_ADDR
// if p3 = 4 then
19249: LD_VAR 0 3
19253: PUSH
19254: LD_INT 4
19256: EQUAL
19257: IFFALSE 19267
// sSpec := true ;
19259: LD_ADDR_EXP 80
19263: PUSH
19264: LD_INT 1
19266: ST_TO_ADDR
// if p3 = 5 then
19267: LD_VAR 0 3
19271: PUSH
19272: LD_INT 5
19274: EQUAL
19275: IFFALSE 19285
// sLevel := true ;
19277: LD_ADDR_EXP 84
19281: PUSH
19282: LD_INT 1
19284: ST_TO_ADDR
// if p3 = 6 then
19285: LD_VAR 0 3
19289: PUSH
19290: LD_INT 6
19292: EQUAL
19293: IFFALSE 19303
// sArmoury := true ;
19295: LD_ADDR_EXP 85
19299: PUSH
19300: LD_INT 1
19302: ST_TO_ADDR
// if p3 = 7 then
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 7
19310: EQUAL
19311: IFFALSE 19321
// sRadar := true ;
19313: LD_ADDR_EXP 86
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// if p3 = 8 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 8
19328: EQUAL
19329: IFFALSE 19339
// sBunker := true ;
19331: LD_ADDR_EXP 87
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// if p3 = 9 then
19339: LD_VAR 0 3
19343: PUSH
19344: LD_INT 9
19346: EQUAL
19347: IFFALSE 19357
// sHack := true ;
19349: LD_ADDR_EXP 88
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// if p3 = 10 then
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 10
19364: EQUAL
19365: IFFALSE 19375
// sFire := true ;
19367: LD_ADDR_EXP 89
19371: PUSH
19372: LD_INT 1
19374: ST_TO_ADDR
// if p3 = 11 then
19375: LD_VAR 0 3
19379: PUSH
19380: LD_INT 11
19382: EQUAL
19383: IFFALSE 19393
// sRefresh := true ;
19385: LD_ADDR_EXP 90
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if p3 = 12 then
19393: LD_VAR 0 3
19397: PUSH
19398: LD_INT 12
19400: EQUAL
19401: IFFALSE 19411
// sExp := true ;
19403: LD_ADDR_EXP 91
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if p3 = 13 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 13
19418: EQUAL
19419: IFFALSE 19429
// sDepot := true ;
19421: LD_ADDR_EXP 92
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// if p3 = 14 then
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 14
19436: EQUAL
19437: IFFALSE 19447
// sFlag := true ;
19439: LD_ADDR_EXP 93
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 15 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 15
19454: EQUAL
19455: IFFALSE 19465
// sKamikadze := true ;
19457: LD_ADDR_EXP 101
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// if p3 = 16 then
19465: LD_VAR 0 3
19469: PUSH
19470: LD_INT 16
19472: EQUAL
19473: IFFALSE 19483
// sTroll := true ;
19475: LD_ADDR_EXP 102
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if p3 = 17 then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 17
19490: EQUAL
19491: IFFALSE 19501
// sSlow := true ;
19493: LD_ADDR_EXP 103
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// if p3 = 18 then
19501: LD_VAR 0 3
19505: PUSH
19506: LD_INT 18
19508: EQUAL
19509: IFFALSE 19519
// sLack := true ;
19511: LD_ADDR_EXP 104
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if p3 = 19 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 19
19526: EQUAL
19527: IFFALSE 19537
// sTank := true ;
19529: LD_ADDR_EXP 106
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if p3 = 20 then
19537: LD_VAR 0 3
19541: PUSH
19542: LD_INT 20
19544: EQUAL
19545: IFFALSE 19555
// sRemote := true ;
19547: LD_ADDR_EXP 107
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// if p3 = 21 then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 21
19562: EQUAL
19563: IFFALSE 19573
// sPowell := true ;
19565: LD_ADDR_EXP 108
19569: PUSH
19570: LD_INT 1
19572: ST_TO_ADDR
// if p3 = 22 then
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 22
19580: EQUAL
19581: IFFALSE 19591
// sTeleport := true ;
19583: LD_ADDR_EXP 111
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if p3 = 23 then
19591: LD_VAR 0 3
19595: PUSH
19596: LD_INT 23
19598: EQUAL
19599: IFFALSE 19609
// sOilTower := true ;
19601: LD_ADDR_EXP 113
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// if p3 = 24 then
19609: LD_VAR 0 3
19613: PUSH
19614: LD_INT 24
19616: EQUAL
19617: IFFALSE 19627
// sShovel := true ;
19619: LD_ADDR_EXP 114
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// if p3 = 25 then
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 25
19634: EQUAL
19635: IFFALSE 19645
// sSheik := true ;
19637: LD_ADDR_EXP 115
19641: PUSH
19642: LD_INT 1
19644: ST_TO_ADDR
// if p3 = 26 then
19645: LD_VAR 0 3
19649: PUSH
19650: LD_INT 26
19652: EQUAL
19653: IFFALSE 19663
// sEarthquake := true ;
19655: LD_ADDR_EXP 117
19659: PUSH
19660: LD_INT 1
19662: ST_TO_ADDR
// if p3 = 27 then
19663: LD_VAR 0 3
19667: PUSH
19668: LD_INT 27
19670: EQUAL
19671: IFFALSE 19681
// sAI := true ;
19673: LD_ADDR_EXP 118
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// if p3 = 28 then
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 28
19688: EQUAL
19689: IFFALSE 19699
// sCargo := true ;
19691: LD_ADDR_EXP 121
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// if p3 = 29 then
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 29
19706: EQUAL
19707: IFFALSE 19717
// sDLaser := true ;
19709: LD_ADDR_EXP 122
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// if p3 = 30 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 30
19724: EQUAL
19725: IFFALSE 19735
// sExchange := true ;
19727: LD_ADDR_EXP 123
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 31 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 31
19742: EQUAL
19743: IFFALSE 19753
// sFac := true ;
19745: LD_ADDR_EXP 124
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 32 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 32
19760: EQUAL
19761: IFFALSE 19771
// sPower := true ;
19763: LD_ADDR_EXP 125
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 33 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 33
19778: EQUAL
19779: IFFALSE 19789
// sRandom := true ;
19781: LD_ADDR_EXP 126
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// if p3 = 34 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_INT 34
19796: EQUAL
19797: IFFALSE 19807
// sShield := true ;
19799: LD_ADDR_EXP 127
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// if p3 = 35 then
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 35
19814: EQUAL
19815: IFFALSE 19825
// sTime := true ;
19817: LD_ADDR_EXP 128
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// if p3 = 36 then
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 36
19832: EQUAL
19833: IFFALSE 19843
// sTools := true ;
19835: LD_ADDR_EXP 129
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 101 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 101
19850: EQUAL
19851: IFFALSE 19861
// sSold := true ;
19853: LD_ADDR_EXP 94
19857: PUSH
19858: LD_INT 1
19860: ST_TO_ADDR
// if p3 = 102 then
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 102
19868: EQUAL
19869: IFFALSE 19879
// sDiff := true ;
19871: LD_ADDR_EXP 95
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// if p3 = 103 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 103
19886: EQUAL
19887: IFFALSE 19897
// sFog := true ;
19889: LD_ADDR_EXP 98
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 104 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 104
19904: EQUAL
19905: IFFALSE 19915
// sReset := true ;
19907: LD_ADDR_EXP 99
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 105 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 105
19922: EQUAL
19923: IFFALSE 19933
// sSun := true ;
19925: LD_ADDR_EXP 100
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 106 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 106
19940: EQUAL
19941: IFFALSE 19951
// sTiger := true ;
19943: LD_ADDR_EXP 96
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 107 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 107
19958: EQUAL
19959: IFFALSE 19969
// sBomb := true ;
19961: LD_ADDR_EXP 97
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 108 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 108
19976: EQUAL
19977: IFFALSE 19987
// sWound := true ;
19979: LD_ADDR_EXP 105
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 109 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 109
19994: EQUAL
19995: IFFALSE 20005
// sBetray := true ;
19997: LD_ADDR_EXP 109
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 110 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 110
20012: EQUAL
20013: IFFALSE 20023
// sContamin := true ;
20015: LD_ADDR_EXP 110
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 111 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 111
20030: EQUAL
20031: IFFALSE 20041
// sOil := true ;
20033: LD_ADDR_EXP 112
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 112 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 112
20048: EQUAL
20049: IFFALSE 20059
// sStu := true ;
20051: LD_ADDR_EXP 116
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 113 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 113
20066: EQUAL
20067: IFFALSE 20077
// sBazooka := true ;
20069: LD_ADDR_EXP 119
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 114 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 114
20084: EQUAL
20085: IFFALSE 20095
// sMortar := true ;
20087: LD_ADDR_EXP 120
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 115 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 115
20102: EQUAL
20103: IFFALSE 20113
// sRanger := true ;
20105: LD_ADDR_EXP 130
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 116 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 116
20120: EQUAL
20121: IFFALSE 20131
// sComputer := true ;
20123: LD_ADDR_EXP 131
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 117 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 117
20138: EQUAL
20139: IFFALSE 20149
// s30 := true ;
20141: LD_ADDR_EXP 132
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 118 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 118
20156: EQUAL
20157: IFFALSE 20167
// s60 := true ;
20159: LD_ADDR_EXP 133
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// end ; if p2 = 101 then
20167: LD_VAR 0 2
20171: PUSH
20172: LD_INT 101
20174: EQUAL
20175: IFFALSE 20303
// begin case p3 of 1 :
20177: LD_VAR 0 3
20181: PUSH
20182: LD_INT 1
20184: DOUBLE
20185: EQUAL
20186: IFTRUE 20190
20188: GO 20197
20190: POP
// hHackUnlimitedResources ; 2 :
20191: CALL 31899 0 0
20195: GO 20303
20197: LD_INT 2
20199: DOUBLE
20200: EQUAL
20201: IFTRUE 20205
20203: GO 20212
20205: POP
// hHackSetLevel10 ; 3 :
20206: CALL 32032 0 0
20210: GO 20303
20212: LD_INT 3
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20227
20220: POP
// hHackSetLevel10YourUnits ; 4 :
20221: CALL 32117 0 0
20225: GO 20303
20227: LD_INT 4
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20242
20235: POP
// hHackInvincible ; 5 :
20236: CALL 32565 0 0
20240: GO 20303
20242: LD_INT 5
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20257
20250: POP
// hHackInvisible ; 6 :
20251: CALL 32676 0 0
20255: GO 20303
20257: LD_INT 6
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20272
20265: POP
// hHackChangeYourSide ; 7 :
20266: CALL 32733 0 0
20270: GO 20303
20272: LD_INT 7
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20287
20280: POP
// hHackChangeUnitSide ; 8 :
20281: CALL 32775 0 0
20285: GO 20303
20287: LD_INT 8
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20302
20295: POP
// hHackFog ; end ;
20296: CALL 32876 0 0
20300: GO 20303
20302: POP
// end ; end ;
20303: LD_VAR 0 7
20307: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20308: GO 20310
20310: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20311: LD_STRING initStreamRollete();
20313: PPUSH
20314: CALL_OW 559
// InitStreamMode ;
20318: CALL 20327 0 0
// DefineStreamItems ( ) ;
20322: CALL 20791 0 0
// end ;
20326: END
// function InitStreamMode ; begin
20327: LD_INT 0
20329: PPUSH
// streamModeActive := false ;
20330: LD_ADDR_EXP 77
20334: PUSH
20335: LD_INT 0
20337: ST_TO_ADDR
// normalCounter := 36 ;
20338: LD_ADDR_EXP 78
20342: PUSH
20343: LD_INT 36
20345: ST_TO_ADDR
// hardcoreCounter := 16 ;
20346: LD_ADDR_EXP 79
20350: PUSH
20351: LD_INT 16
20353: ST_TO_ADDR
// sRocket := false ;
20354: LD_ADDR_EXP 82
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// sSpeed := false ;
20362: LD_ADDR_EXP 81
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// sEngine := false ;
20370: LD_ADDR_EXP 83
20374: PUSH
20375: LD_INT 0
20377: ST_TO_ADDR
// sSpec := false ;
20378: LD_ADDR_EXP 80
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// sLevel := false ;
20386: LD_ADDR_EXP 84
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// sArmoury := false ;
20394: LD_ADDR_EXP 85
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// sRadar := false ;
20402: LD_ADDR_EXP 86
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sBunker := false ;
20410: LD_ADDR_EXP 87
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sHack := false ;
20418: LD_ADDR_EXP 88
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sFire := false ;
20426: LD_ADDR_EXP 89
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sRefresh := false ;
20434: LD_ADDR_EXP 90
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sExp := false ;
20442: LD_ADDR_EXP 91
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sDepot := false ;
20450: LD_ADDR_EXP 92
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sFlag := false ;
20458: LD_ADDR_EXP 93
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sKamikadze := false ;
20466: LD_ADDR_EXP 101
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sTroll := false ;
20474: LD_ADDR_EXP 102
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sSlow := false ;
20482: LD_ADDR_EXP 103
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sLack := false ;
20490: LD_ADDR_EXP 104
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sTank := false ;
20498: LD_ADDR_EXP 106
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sRemote := false ;
20506: LD_ADDR_EXP 107
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sPowell := false ;
20514: LD_ADDR_EXP 108
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sTeleport := false ;
20522: LD_ADDR_EXP 111
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sOilTower := false ;
20530: LD_ADDR_EXP 113
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sShovel := false ;
20538: LD_ADDR_EXP 114
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sSheik := false ;
20546: LD_ADDR_EXP 115
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sEarthquake := false ;
20554: LD_ADDR_EXP 117
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sAI := false ;
20562: LD_ADDR_EXP 118
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sCargo := false ;
20570: LD_ADDR_EXP 121
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sDLaser := false ;
20578: LD_ADDR_EXP 122
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sExchange := false ;
20586: LD_ADDR_EXP 123
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sFac := false ;
20594: LD_ADDR_EXP 124
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sPower := false ;
20602: LD_ADDR_EXP 125
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sRandom := false ;
20610: LD_ADDR_EXP 126
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sShield := false ;
20618: LD_ADDR_EXP 127
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sTime := false ;
20626: LD_ADDR_EXP 128
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sTools := false ;
20634: LD_ADDR_EXP 129
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sSold := false ;
20642: LD_ADDR_EXP 94
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sDiff := false ;
20650: LD_ADDR_EXP 95
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sFog := false ;
20658: LD_ADDR_EXP 98
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sReset := false ;
20666: LD_ADDR_EXP 99
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sSun := false ;
20674: LD_ADDR_EXP 100
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sTiger := false ;
20682: LD_ADDR_EXP 96
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sBomb := false ;
20690: LD_ADDR_EXP 97
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sWound := false ;
20698: LD_ADDR_EXP 105
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sBetray := false ;
20706: LD_ADDR_EXP 109
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sContamin := false ;
20714: LD_ADDR_EXP 110
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sOil := false ;
20722: LD_ADDR_EXP 112
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sStu := false ;
20730: LD_ADDR_EXP 116
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sBazooka := false ;
20738: LD_ADDR_EXP 119
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sMortar := false ;
20746: LD_ADDR_EXP 120
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sRanger := false ;
20754: LD_ADDR_EXP 130
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sComputer := false ;
20762: LD_ADDR_EXP 131
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// s30 := false ;
20770: LD_ADDR_EXP 132
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// s60 := false ;
20778: LD_ADDR_EXP 133
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// end ;
20786: LD_VAR 0 1
20790: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20791: LD_INT 0
20793: PPUSH
20794: PPUSH
20795: PPUSH
20796: PPUSH
20797: PPUSH
// result := [ ] ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: EMPTY
20804: ST_TO_ADDR
// if campaign_id = 1 then
20805: LD_OWVAR 69
20809: PUSH
20810: LD_INT 1
20812: EQUAL
20813: IFFALSE 23979
// begin case mission_number of 1 :
20815: LD_OWVAR 70
20819: PUSH
20820: LD_INT 1
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 20904
20828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20829: LD_ADDR_VAR 0 1
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: LD_INT 4
20839: PUSH
20840: LD_INT 11
20842: PUSH
20843: LD_INT 12
20845: PUSH
20846: LD_INT 15
20848: PUSH
20849: LD_INT 16
20851: PUSH
20852: LD_INT 22
20854: PUSH
20855: LD_INT 23
20857: PUSH
20858: LD_INT 26
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 101
20874: PUSH
20875: LD_INT 102
20877: PUSH
20878: LD_INT 106
20880: PUSH
20881: LD_INT 116
20883: PUSH
20884: LD_INT 117
20886: PUSH
20887: LD_INT 118
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: ST_TO_ADDR
20902: GO 23977
20904: LD_INT 2
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20996
20912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 4
20923: PUSH
20924: LD_INT 11
20926: PUSH
20927: LD_INT 12
20929: PUSH
20930: LD_INT 15
20932: PUSH
20933: LD_INT 16
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_INT 23
20941: PUSH
20942: LD_INT 26
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 101
20958: PUSH
20959: LD_INT 102
20961: PUSH
20962: LD_INT 105
20964: PUSH
20965: LD_INT 106
20967: PUSH
20968: LD_INT 108
20970: PUSH
20971: LD_INT 116
20973: PUSH
20974: LD_INT 117
20976: PUSH
20977: LD_INT 118
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: ST_TO_ADDR
20994: GO 23977
20996: LD_INT 3
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21092
21004: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21005: LD_ADDR_VAR 0 1
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: LD_INT 4
21015: PUSH
21016: LD_INT 5
21018: PUSH
21019: LD_INT 11
21021: PUSH
21022: LD_INT 12
21024: PUSH
21025: LD_INT 15
21027: PUSH
21028: LD_INT 16
21030: PUSH
21031: LD_INT 22
21033: PUSH
21034: LD_INT 26
21036: PUSH
21037: LD_INT 36
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 101
21054: PUSH
21055: LD_INT 102
21057: PUSH
21058: LD_INT 105
21060: PUSH
21061: LD_INT 106
21063: PUSH
21064: LD_INT 108
21066: PUSH
21067: LD_INT 116
21069: PUSH
21070: LD_INT 117
21072: PUSH
21073: LD_INT 118
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: ST_TO_ADDR
21090: GO 23977
21092: LD_INT 4
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21196
21100: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21101: LD_ADDR_VAR 0 1
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: LD_INT 4
21111: PUSH
21112: LD_INT 5
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 11
21120: PUSH
21121: LD_INT 12
21123: PUSH
21124: LD_INT 15
21126: PUSH
21127: LD_INT 16
21129: PUSH
21130: LD_INT 22
21132: PUSH
21133: LD_INT 23
21135: PUSH
21136: LD_INT 26
21138: PUSH
21139: LD_INT 36
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 101
21158: PUSH
21159: LD_INT 102
21161: PUSH
21162: LD_INT 105
21164: PUSH
21165: LD_INT 106
21167: PUSH
21168: LD_INT 108
21170: PUSH
21171: LD_INT 116
21173: PUSH
21174: LD_INT 117
21176: PUSH
21177: LD_INT 118
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: ST_TO_ADDR
21194: GO 23977
21196: LD_INT 5
21198: DOUBLE
21199: EQUAL
21200: IFTRUE 21204
21202: GO 21316
21204: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21205: LD_ADDR_VAR 0 1
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 4
21215: PUSH
21216: LD_INT 5
21218: PUSH
21219: LD_INT 6
21221: PUSH
21222: LD_INT 8
21224: PUSH
21225: LD_INT 11
21227: PUSH
21228: LD_INT 12
21230: PUSH
21231: LD_INT 15
21233: PUSH
21234: LD_INT 16
21236: PUSH
21237: LD_INT 22
21239: PUSH
21240: LD_INT 23
21242: PUSH
21243: LD_INT 25
21245: PUSH
21246: LD_INT 26
21248: PUSH
21249: LD_INT 36
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 109
21285: PUSH
21286: LD_INT 112
21288: PUSH
21289: LD_INT 116
21291: PUSH
21292: LD_INT 117
21294: PUSH
21295: LD_INT 118
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: ST_TO_ADDR
21314: GO 23977
21316: LD_INT 6
21318: DOUBLE
21319: EQUAL
21320: IFTRUE 21324
21322: GO 21456
21324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21325: LD_ADDR_VAR 0 1
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 4
21335: PUSH
21336: LD_INT 5
21338: PUSH
21339: LD_INT 6
21341: PUSH
21342: LD_INT 8
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 12
21350: PUSH
21351: LD_INT 15
21353: PUSH
21354: LD_INT 16
21356: PUSH
21357: LD_INT 20
21359: PUSH
21360: LD_INT 21
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 23
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 26
21374: PUSH
21375: LD_INT 30
21377: PUSH
21378: LD_INT 31
21380: PUSH
21381: LD_INT 32
21383: PUSH
21384: LD_INT 36
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 101
21410: PUSH
21411: LD_INT 102
21413: PUSH
21414: LD_INT 105
21416: PUSH
21417: LD_INT 106
21419: PUSH
21420: LD_INT 108
21422: PUSH
21423: LD_INT 109
21425: PUSH
21426: LD_INT 112
21428: PUSH
21429: LD_INT 116
21431: PUSH
21432: LD_INT 117
21434: PUSH
21435: LD_INT 118
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 23977
21456: LD_INT 7
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21576
21464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21465: LD_ADDR_VAR 0 1
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 4
21475: PUSH
21476: LD_INT 5
21478: PUSH
21479: LD_INT 7
21481: PUSH
21482: LD_INT 11
21484: PUSH
21485: LD_INT 12
21487: PUSH
21488: LD_INT 15
21490: PUSH
21491: LD_INT 16
21493: PUSH
21494: LD_INT 20
21496: PUSH
21497: LD_INT 21
21499: PUSH
21500: LD_INT 22
21502: PUSH
21503: LD_INT 23
21505: PUSH
21506: LD_INT 25
21508: PUSH
21509: LD_INT 26
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 101
21530: PUSH
21531: LD_INT 102
21533: PUSH
21534: LD_INT 103
21536: PUSH
21537: LD_INT 105
21539: PUSH
21540: LD_INT 106
21542: PUSH
21543: LD_INT 108
21545: PUSH
21546: LD_INT 112
21548: PUSH
21549: LD_INT 116
21551: PUSH
21552: LD_INT 117
21554: PUSH
21555: LD_INT 118
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: ST_TO_ADDR
21574: GO 23977
21576: LD_INT 8
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21724
21584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21585: LD_ADDR_VAR 0 1
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: LD_INT 5
21598: PUSH
21599: LD_INT 6
21601: PUSH
21602: LD_INT 7
21604: PUSH
21605: LD_INT 8
21607: PUSH
21608: LD_INT 11
21610: PUSH
21611: LD_INT 12
21613: PUSH
21614: LD_INT 15
21616: PUSH
21617: LD_INT 16
21619: PUSH
21620: LD_INT 20
21622: PUSH
21623: LD_INT 21
21625: PUSH
21626: LD_INT 22
21628: PUSH
21629: LD_INT 23
21631: PUSH
21632: LD_INT 25
21634: PUSH
21635: LD_INT 26
21637: PUSH
21638: LD_INT 30
21640: PUSH
21641: LD_INT 31
21643: PUSH
21644: LD_INT 32
21646: PUSH
21647: LD_INT 36
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 101
21674: PUSH
21675: LD_INT 102
21677: PUSH
21678: LD_INT 103
21680: PUSH
21681: LD_INT 105
21683: PUSH
21684: LD_INT 106
21686: PUSH
21687: LD_INT 108
21689: PUSH
21690: LD_INT 109
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 116
21698: PUSH
21699: LD_INT 117
21701: PUSH
21702: LD_INT 118
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: ST_TO_ADDR
21722: GO 23977
21724: LD_INT 9
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21880
21732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 4
21743: PUSH
21744: LD_INT 5
21746: PUSH
21747: LD_INT 6
21749: PUSH
21750: LD_INT 7
21752: PUSH
21753: LD_INT 8
21755: PUSH
21756: LD_INT 11
21758: PUSH
21759: LD_INT 12
21761: PUSH
21762: LD_INT 15
21764: PUSH
21765: LD_INT 16
21767: PUSH
21768: LD_INT 20
21770: PUSH
21771: LD_INT 21
21773: PUSH
21774: LD_INT 22
21776: PUSH
21777: LD_INT 23
21779: PUSH
21780: LD_INT 25
21782: PUSH
21783: LD_INT 26
21785: PUSH
21786: LD_INT 28
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 31
21794: PUSH
21795: LD_INT 32
21797: PUSH
21798: LD_INT 36
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 101
21826: PUSH
21827: LD_INT 102
21829: PUSH
21830: LD_INT 103
21832: PUSH
21833: LD_INT 105
21835: PUSH
21836: LD_INT 106
21838: PUSH
21839: LD_INT 108
21841: PUSH
21842: LD_INT 109
21844: PUSH
21845: LD_INT 112
21847: PUSH
21848: LD_INT 114
21850: PUSH
21851: LD_INT 116
21853: PUSH
21854: LD_INT 117
21856: PUSH
21857: LD_INT 118
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: ST_TO_ADDR
21878: GO 23977
21880: LD_INT 10
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 22084
21888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21889: LD_ADDR_VAR 0 1
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: LD_INT 10
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: LD_INT 14
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 17
21938: PUSH
21939: LD_INT 18
21941: PUSH
21942: LD_INT 19
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 24
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 26
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 32
21977: PUSH
21978: LD_INT 36
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 104
22023: PUSH
22024: LD_INT 105
22026: PUSH
22027: LD_INT 106
22029: PUSH
22030: LD_INT 107
22032: PUSH
22033: LD_INT 108
22035: PUSH
22036: LD_INT 109
22038: PUSH
22039: LD_INT 110
22041: PUSH
22042: LD_INT 111
22044: PUSH
22045: LD_INT 112
22047: PUSH
22048: LD_INT 114
22050: PUSH
22051: LD_INT 116
22053: PUSH
22054: LD_INT 117
22056: PUSH
22057: LD_INT 118
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: ST_TO_ADDR
22082: GO 23977
22084: LD_INT 11
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22296
22092: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22093: LD_ADDR_VAR 0 1
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 4
22106: PUSH
22107: LD_INT 5
22109: PUSH
22110: LD_INT 6
22112: PUSH
22113: LD_INT 7
22115: PUSH
22116: LD_INT 8
22118: PUSH
22119: LD_INT 9
22121: PUSH
22122: LD_INT 10
22124: PUSH
22125: LD_INT 11
22127: PUSH
22128: LD_INT 12
22130: PUSH
22131: LD_INT 13
22133: PUSH
22134: LD_INT 14
22136: PUSH
22137: LD_INT 15
22139: PUSH
22140: LD_INT 16
22142: PUSH
22143: LD_INT 17
22145: PUSH
22146: LD_INT 18
22148: PUSH
22149: LD_INT 19
22151: PUSH
22152: LD_INT 20
22154: PUSH
22155: LD_INT 21
22157: PUSH
22158: LD_INT 22
22160: PUSH
22161: LD_INT 23
22163: PUSH
22164: LD_INT 24
22166: PUSH
22167: LD_INT 25
22169: PUSH
22170: LD_INT 26
22172: PUSH
22173: LD_INT 28
22175: PUSH
22176: LD_INT 30
22178: PUSH
22179: LD_INT 31
22181: PUSH
22182: LD_INT 32
22184: PUSH
22185: LD_INT 34
22187: PUSH
22188: LD_INT 36
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 101
22226: PUSH
22227: LD_INT 102
22229: PUSH
22230: LD_INT 103
22232: PUSH
22233: LD_INT 104
22235: PUSH
22236: LD_INT 105
22238: PUSH
22239: LD_INT 106
22241: PUSH
22242: LD_INT 107
22244: PUSH
22245: LD_INT 108
22247: PUSH
22248: LD_INT 109
22250: PUSH
22251: LD_INT 110
22253: PUSH
22254: LD_INT 111
22256: PUSH
22257: LD_INT 112
22259: PUSH
22260: LD_INT 114
22262: PUSH
22263: LD_INT 116
22265: PUSH
22266: LD_INT 117
22268: PUSH
22269: LD_INT 118
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: ST_TO_ADDR
22294: GO 23977
22296: LD_INT 12
22298: DOUBLE
22299: EQUAL
22300: IFTRUE 22304
22302: GO 22524
22304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22305: LD_ADDR_VAR 0 1
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 6
22327: PUSH
22328: LD_INT 7
22330: PUSH
22331: LD_INT 8
22333: PUSH
22334: LD_INT 9
22336: PUSH
22337: LD_INT 10
22339: PUSH
22340: LD_INT 11
22342: PUSH
22343: LD_INT 12
22345: PUSH
22346: LD_INT 13
22348: PUSH
22349: LD_INT 14
22351: PUSH
22352: LD_INT 15
22354: PUSH
22355: LD_INT 16
22357: PUSH
22358: LD_INT 17
22360: PUSH
22361: LD_INT 18
22363: PUSH
22364: LD_INT 19
22366: PUSH
22367: LD_INT 20
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 22
22375: PUSH
22376: LD_INT 23
22378: PUSH
22379: LD_INT 24
22381: PUSH
22382: LD_INT 25
22384: PUSH
22385: LD_INT 26
22387: PUSH
22388: LD_INT 27
22390: PUSH
22391: LD_INT 28
22393: PUSH
22394: LD_INT 30
22396: PUSH
22397: LD_INT 31
22399: PUSH
22400: LD_INT 32
22402: PUSH
22403: LD_INT 33
22405: PUSH
22406: LD_INT 34
22408: PUSH
22409: LD_INT 36
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 101
22450: PUSH
22451: LD_INT 102
22453: PUSH
22454: LD_INT 103
22456: PUSH
22457: LD_INT 104
22459: PUSH
22460: LD_INT 105
22462: PUSH
22463: LD_INT 106
22465: PUSH
22466: LD_INT 107
22468: PUSH
22469: LD_INT 108
22471: PUSH
22472: LD_INT 109
22474: PUSH
22475: LD_INT 110
22477: PUSH
22478: LD_INT 111
22480: PUSH
22481: LD_INT 112
22483: PUSH
22484: LD_INT 113
22486: PUSH
22487: LD_INT 114
22489: PUSH
22490: LD_INT 116
22492: PUSH
22493: LD_INT 117
22495: PUSH
22496: LD_INT 118
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: ST_TO_ADDR
22522: GO 23977
22524: LD_INT 13
22526: DOUBLE
22527: EQUAL
22528: IFTRUE 22532
22530: GO 22740
22532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 3
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 8
22555: PUSH
22556: LD_INT 9
22558: PUSH
22559: LD_INT 10
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 14
22570: PUSH
22571: LD_INT 15
22573: PUSH
22574: LD_INT 16
22576: PUSH
22577: LD_INT 17
22579: PUSH
22580: LD_INT 18
22582: PUSH
22583: LD_INT 19
22585: PUSH
22586: LD_INT 20
22588: PUSH
22589: LD_INT 21
22591: PUSH
22592: LD_INT 22
22594: PUSH
22595: LD_INT 23
22597: PUSH
22598: LD_INT 24
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: LD_INT 27
22609: PUSH
22610: LD_INT 28
22612: PUSH
22613: LD_INT 30
22615: PUSH
22616: LD_INT 31
22618: PUSH
22619: LD_INT 32
22621: PUSH
22622: LD_INT 33
22624: PUSH
22625: LD_INT 34
22627: PUSH
22628: LD_INT 36
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 23977
22740: LD_INT 14
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22972
22748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22749: LD_ADDR_VAR 0 1
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: LD_INT 6
22771: PUSH
22772: LD_INT 7
22774: PUSH
22775: LD_INT 8
22777: PUSH
22778: LD_INT 9
22780: PUSH
22781: LD_INT 10
22783: PUSH
22784: LD_INT 11
22786: PUSH
22787: LD_INT 12
22789: PUSH
22790: LD_INT 13
22792: PUSH
22793: LD_INT 14
22795: PUSH
22796: LD_INT 15
22798: PUSH
22799: LD_INT 16
22801: PUSH
22802: LD_INT 17
22804: PUSH
22805: LD_INT 18
22807: PUSH
22808: LD_INT 19
22810: PUSH
22811: LD_INT 20
22813: PUSH
22814: LD_INT 21
22816: PUSH
22817: LD_INT 22
22819: PUSH
22820: LD_INT 23
22822: PUSH
22823: LD_INT 24
22825: PUSH
22826: LD_INT 25
22828: PUSH
22829: LD_INT 26
22831: PUSH
22832: LD_INT 27
22834: PUSH
22835: LD_INT 28
22837: PUSH
22838: LD_INT 29
22840: PUSH
22841: LD_INT 30
22843: PUSH
22844: LD_INT 31
22846: PUSH
22847: LD_INT 32
22849: PUSH
22850: LD_INT 33
22852: PUSH
22853: LD_INT 34
22855: PUSH
22856: LD_INT 36
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 101
22898: PUSH
22899: LD_INT 102
22901: PUSH
22902: LD_INT 103
22904: PUSH
22905: LD_INT 104
22907: PUSH
22908: LD_INT 105
22910: PUSH
22911: LD_INT 106
22913: PUSH
22914: LD_INT 107
22916: PUSH
22917: LD_INT 108
22919: PUSH
22920: LD_INT 109
22922: PUSH
22923: LD_INT 110
22925: PUSH
22926: LD_INT 111
22928: PUSH
22929: LD_INT 112
22931: PUSH
22932: LD_INT 113
22934: PUSH
22935: LD_INT 114
22937: PUSH
22938: LD_INT 116
22940: PUSH
22941: LD_INT 117
22943: PUSH
22944: LD_INT 118
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: ST_TO_ADDR
22970: GO 23977
22972: LD_INT 15
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 23204
22980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22981: LD_ADDR_VAR 0 1
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: LD_INT 4
22997: PUSH
22998: LD_INT 5
23000: PUSH
23001: LD_INT 6
23003: PUSH
23004: LD_INT 7
23006: PUSH
23007: LD_INT 8
23009: PUSH
23010: LD_INT 9
23012: PUSH
23013: LD_INT 10
23015: PUSH
23016: LD_INT 11
23018: PUSH
23019: LD_INT 12
23021: PUSH
23022: LD_INT 13
23024: PUSH
23025: LD_INT 14
23027: PUSH
23028: LD_INT 15
23030: PUSH
23031: LD_INT 16
23033: PUSH
23034: LD_INT 17
23036: PUSH
23037: LD_INT 18
23039: PUSH
23040: LD_INT 19
23042: PUSH
23043: LD_INT 20
23045: PUSH
23046: LD_INT 21
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_INT 23
23054: PUSH
23055: LD_INT 24
23057: PUSH
23058: LD_INT 25
23060: PUSH
23061: LD_INT 26
23063: PUSH
23064: LD_INT 27
23066: PUSH
23067: LD_INT 28
23069: PUSH
23070: LD_INT 29
23072: PUSH
23073: LD_INT 30
23075: PUSH
23076: LD_INT 31
23078: PUSH
23079: LD_INT 32
23081: PUSH
23082: LD_INT 33
23084: PUSH
23085: LD_INT 34
23087: PUSH
23088: LD_INT 36
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 101
23130: PUSH
23131: LD_INT 102
23133: PUSH
23134: LD_INT 103
23136: PUSH
23137: LD_INT 104
23139: PUSH
23140: LD_INT 105
23142: PUSH
23143: LD_INT 106
23145: PUSH
23146: LD_INT 107
23148: PUSH
23149: LD_INT 108
23151: PUSH
23152: LD_INT 109
23154: PUSH
23155: LD_INT 110
23157: PUSH
23158: LD_INT 111
23160: PUSH
23161: LD_INT 112
23163: PUSH
23164: LD_INT 113
23166: PUSH
23167: LD_INT 114
23169: PUSH
23170: LD_INT 116
23172: PUSH
23173: LD_INT 117
23175: PUSH
23176: LD_INT 118
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: ST_TO_ADDR
23202: GO 23977
23204: LD_INT 16
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23348
23212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23213: LD_ADDR_VAR 0 1
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 4
23223: PUSH
23224: LD_INT 5
23226: PUSH
23227: LD_INT 7
23229: PUSH
23230: LD_INT 11
23232: PUSH
23233: LD_INT 12
23235: PUSH
23236: LD_INT 15
23238: PUSH
23239: LD_INT 16
23241: PUSH
23242: LD_INT 20
23244: PUSH
23245: LD_INT 21
23247: PUSH
23248: LD_INT 22
23250: PUSH
23251: LD_INT 23
23253: PUSH
23254: LD_INT 25
23256: PUSH
23257: LD_INT 26
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: LD_INT 31
23265: PUSH
23266: LD_INT 32
23268: PUSH
23269: LD_INT 33
23271: PUSH
23272: LD_INT 34
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 101
23298: PUSH
23299: LD_INT 102
23301: PUSH
23302: LD_INT 103
23304: PUSH
23305: LD_INT 106
23307: PUSH
23308: LD_INT 108
23310: PUSH
23311: LD_INT 112
23313: PUSH
23314: LD_INT 113
23316: PUSH
23317: LD_INT 114
23319: PUSH
23320: LD_INT 116
23322: PUSH
23323: LD_INT 117
23325: PUSH
23326: LD_INT 118
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23977
23348: LD_INT 17
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23580
23356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23357: LD_ADDR_VAR 0 1
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 2
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: LD_INT 4
23373: PUSH
23374: LD_INT 5
23376: PUSH
23377: LD_INT 6
23379: PUSH
23380: LD_INT 7
23382: PUSH
23383: LD_INT 8
23385: PUSH
23386: LD_INT 9
23388: PUSH
23389: LD_INT 10
23391: PUSH
23392: LD_INT 11
23394: PUSH
23395: LD_INT 12
23397: PUSH
23398: LD_INT 13
23400: PUSH
23401: LD_INT 14
23403: PUSH
23404: LD_INT 15
23406: PUSH
23407: LD_INT 16
23409: PUSH
23410: LD_INT 17
23412: PUSH
23413: LD_INT 18
23415: PUSH
23416: LD_INT 19
23418: PUSH
23419: LD_INT 20
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 22
23427: PUSH
23428: LD_INT 23
23430: PUSH
23431: LD_INT 24
23433: PUSH
23434: LD_INT 25
23436: PUSH
23437: LD_INT 26
23439: PUSH
23440: LD_INT 27
23442: PUSH
23443: LD_INT 28
23445: PUSH
23446: LD_INT 29
23448: PUSH
23449: LD_INT 30
23451: PUSH
23452: LD_INT 31
23454: PUSH
23455: LD_INT 32
23457: PUSH
23458: LD_INT 33
23460: PUSH
23461: LD_INT 34
23463: PUSH
23464: LD_INT 36
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 101
23506: PUSH
23507: LD_INT 102
23509: PUSH
23510: LD_INT 103
23512: PUSH
23513: LD_INT 104
23515: PUSH
23516: LD_INT 105
23518: PUSH
23519: LD_INT 106
23521: PUSH
23522: LD_INT 107
23524: PUSH
23525: LD_INT 108
23527: PUSH
23528: LD_INT 109
23530: PUSH
23531: LD_INT 110
23533: PUSH
23534: LD_INT 111
23536: PUSH
23537: LD_INT 112
23539: PUSH
23540: LD_INT 113
23542: PUSH
23543: LD_INT 114
23545: PUSH
23546: LD_INT 116
23548: PUSH
23549: LD_INT 117
23551: PUSH
23552: LD_INT 118
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: ST_TO_ADDR
23578: GO 23977
23580: LD_INT 18
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23736
23588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23589: LD_ADDR_VAR 0 1
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 4
23599: PUSH
23600: LD_INT 5
23602: PUSH
23603: LD_INT 7
23605: PUSH
23606: LD_INT 11
23608: PUSH
23609: LD_INT 12
23611: PUSH
23612: LD_INT 15
23614: PUSH
23615: LD_INT 16
23617: PUSH
23618: LD_INT 20
23620: PUSH
23621: LD_INT 21
23623: PUSH
23624: LD_INT 22
23626: PUSH
23627: LD_INT 23
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 26
23635: PUSH
23636: LD_INT 30
23638: PUSH
23639: LD_INT 31
23641: PUSH
23642: LD_INT 32
23644: PUSH
23645: LD_INT 33
23647: PUSH
23648: LD_INT 34
23650: PUSH
23651: LD_INT 35
23653: PUSH
23654: LD_INT 36
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 101
23682: PUSH
23683: LD_INT 102
23685: PUSH
23686: LD_INT 103
23688: PUSH
23689: LD_INT 106
23691: PUSH
23692: LD_INT 108
23694: PUSH
23695: LD_INT 112
23697: PUSH
23698: LD_INT 113
23700: PUSH
23701: LD_INT 114
23703: PUSH
23704: LD_INT 115
23706: PUSH
23707: LD_INT 116
23709: PUSH
23710: LD_INT 117
23712: PUSH
23713: LD_INT 118
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 23977
23736: LD_INT 19
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23976
23744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 4
23761: PUSH
23762: LD_INT 5
23764: PUSH
23765: LD_INT 6
23767: PUSH
23768: LD_INT 7
23770: PUSH
23771: LD_INT 8
23773: PUSH
23774: LD_INT 9
23776: PUSH
23777: LD_INT 10
23779: PUSH
23780: LD_INT 11
23782: PUSH
23783: LD_INT 12
23785: PUSH
23786: LD_INT 13
23788: PUSH
23789: LD_INT 14
23791: PUSH
23792: LD_INT 15
23794: PUSH
23795: LD_INT 16
23797: PUSH
23798: LD_INT 17
23800: PUSH
23801: LD_INT 18
23803: PUSH
23804: LD_INT 19
23806: PUSH
23807: LD_INT 20
23809: PUSH
23810: LD_INT 21
23812: PUSH
23813: LD_INT 22
23815: PUSH
23816: LD_INT 23
23818: PUSH
23819: LD_INT 24
23821: PUSH
23822: LD_INT 25
23824: PUSH
23825: LD_INT 26
23827: PUSH
23828: LD_INT 27
23830: PUSH
23831: LD_INT 28
23833: PUSH
23834: LD_INT 29
23836: PUSH
23837: LD_INT 30
23839: PUSH
23840: LD_INT 31
23842: PUSH
23843: LD_INT 32
23845: PUSH
23846: LD_INT 33
23848: PUSH
23849: LD_INT 34
23851: PUSH
23852: LD_INT 35
23854: PUSH
23855: LD_INT 36
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 104
23907: PUSH
23908: LD_INT 105
23910: PUSH
23911: LD_INT 106
23913: PUSH
23914: LD_INT 107
23916: PUSH
23917: LD_INT 108
23919: PUSH
23920: LD_INT 109
23922: PUSH
23923: LD_INT 110
23925: PUSH
23926: LD_INT 111
23928: PUSH
23929: LD_INT 112
23931: PUSH
23932: LD_INT 113
23934: PUSH
23935: LD_INT 114
23937: PUSH
23938: LD_INT 115
23940: PUSH
23941: LD_INT 116
23943: PUSH
23944: LD_INT 117
23946: PUSH
23947: LD_INT 118
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: ST_TO_ADDR
23974: GO 23977
23976: POP
// end else
23977: GO 24208
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 4
23995: PUSH
23996: LD_INT 5
23998: PUSH
23999: LD_INT 6
24001: PUSH
24002: LD_INT 7
24004: PUSH
24005: LD_INT 8
24007: PUSH
24008: LD_INT 9
24010: PUSH
24011: LD_INT 10
24013: PUSH
24014: LD_INT 11
24016: PUSH
24017: LD_INT 12
24019: PUSH
24020: LD_INT 13
24022: PUSH
24023: LD_INT 14
24025: PUSH
24026: LD_INT 15
24028: PUSH
24029: LD_INT 16
24031: PUSH
24032: LD_INT 17
24034: PUSH
24035: LD_INT 18
24037: PUSH
24038: LD_INT 19
24040: PUSH
24041: LD_INT 20
24043: PUSH
24044: LD_INT 21
24046: PUSH
24047: LD_INT 22
24049: PUSH
24050: LD_INT 23
24052: PUSH
24053: LD_INT 24
24055: PUSH
24056: LD_INT 25
24058: PUSH
24059: LD_INT 26
24061: PUSH
24062: LD_INT 27
24064: PUSH
24065: LD_INT 28
24067: PUSH
24068: LD_INT 29
24070: PUSH
24071: LD_INT 30
24073: PUSH
24074: LD_INT 31
24076: PUSH
24077: LD_INT 32
24079: PUSH
24080: LD_INT 33
24082: PUSH
24083: LD_INT 34
24085: PUSH
24086: LD_INT 35
24088: PUSH
24089: LD_INT 36
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 101
24132: PUSH
24133: LD_INT 102
24135: PUSH
24136: LD_INT 103
24138: PUSH
24139: LD_INT 104
24141: PUSH
24142: LD_INT 105
24144: PUSH
24145: LD_INT 106
24147: PUSH
24148: LD_INT 107
24150: PUSH
24151: LD_INT 108
24153: PUSH
24154: LD_INT 109
24156: PUSH
24157: LD_INT 110
24159: PUSH
24160: LD_INT 111
24162: PUSH
24163: LD_INT 112
24165: PUSH
24166: LD_INT 113
24168: PUSH
24169: LD_INT 114
24171: PUSH
24172: LD_INT 115
24174: PUSH
24175: LD_INT 116
24177: PUSH
24178: LD_INT 117
24180: PUSH
24181: LD_INT 118
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: ST_TO_ADDR
// if result then
24208: LD_VAR 0 1
24212: IFFALSE 24501
// begin normal :=  ;
24214: LD_ADDR_VAR 0 3
24218: PUSH
24219: LD_STRING 
24221: ST_TO_ADDR
// hardcore :=  ;
24222: LD_ADDR_VAR 0 4
24226: PUSH
24227: LD_STRING 
24229: ST_TO_ADDR
// for i = 1 to normalCounter do
24230: LD_ADDR_VAR 0 5
24234: PUSH
24235: DOUBLE
24236: LD_INT 1
24238: DEC
24239: ST_TO_ADDR
24240: LD_EXP 78
24244: PUSH
24245: FOR_TO
24246: IFFALSE 24347
// begin tmp := 0 ;
24248: LD_ADDR_VAR 0 2
24252: PUSH
24253: LD_STRING 0
24255: ST_TO_ADDR
// if result [ 1 ] then
24256: LD_VAR 0 1
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: IFFALSE 24329
// if result [ 1 ] [ 1 ] = i then
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PUSH
24279: LD_VAR 0 5
24283: EQUAL
24284: IFFALSE 24329
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24286: LD_ADDR_VAR 0 1
24290: PUSH
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: LD_VAR 0 1
24303: PUSH
24304: LD_INT 1
24306: ARRAY
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: CALL_OW 3
24315: PPUSH
24316: CALL_OW 1
24320: ST_TO_ADDR
// tmp := 1 ;
24321: LD_ADDR_VAR 0 2
24325: PUSH
24326: LD_STRING 1
24328: ST_TO_ADDR
// end ; normal := normal & tmp ;
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_VAR 0 3
24338: PUSH
24339: LD_VAR 0 2
24343: STR
24344: ST_TO_ADDR
// end ;
24345: GO 24245
24347: POP
24348: POP
// for i = 1 to hardcoreCounter do
24349: LD_ADDR_VAR 0 5
24353: PUSH
24354: DOUBLE
24355: LD_INT 1
24357: DEC
24358: ST_TO_ADDR
24359: LD_EXP 79
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24470
// begin tmp := 0 ;
24367: LD_ADDR_VAR 0 2
24371: PUSH
24372: LD_STRING 0
24374: ST_TO_ADDR
// if result [ 2 ] then
24375: LD_VAR 0 1
24379: PUSH
24380: LD_INT 2
24382: ARRAY
24383: IFFALSE 24452
// if result [ 2 ] [ 1 ] = 100 + i then
24385: LD_VAR 0 1
24389: PUSH
24390: LD_INT 2
24392: ARRAY
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PUSH
24398: LD_INT 100
24400: PUSH
24401: LD_VAR 0 5
24405: PLUS
24406: EQUAL
24407: IFFALSE 24452
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24409: LD_ADDR_VAR 0 1
24413: PUSH
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_INT 2
24421: PPUSH
24422: LD_VAR 0 1
24426: PUSH
24427: LD_INT 2
24429: ARRAY
24430: PPUSH
24431: LD_INT 1
24433: PPUSH
24434: CALL_OW 3
24438: PPUSH
24439: CALL_OW 1
24443: ST_TO_ADDR
// tmp := 1 ;
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_STRING 1
24451: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24452: LD_ADDR_VAR 0 4
24456: PUSH
24457: LD_VAR 0 4
24461: PUSH
24462: LD_VAR 0 2
24466: STR
24467: ST_TO_ADDR
// end ;
24468: GO 24364
24470: POP
24471: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24472: LD_STRING getStreamItemsFromMission("
24474: PUSH
24475: LD_VAR 0 3
24479: STR
24480: PUSH
24481: LD_STRING ","
24483: STR
24484: PUSH
24485: LD_VAR 0 4
24489: STR
24490: PUSH
24491: LD_STRING ")
24493: STR
24494: PPUSH
24495: CALL_OW 559
// end else
24499: GO 24508
// ToLua ( getStreamItemsFromMission("","") ) ;
24501: LD_STRING getStreamItemsFromMission("","")
24503: PPUSH
24504: CALL_OW 559
// end ;
24508: LD_VAR 0 1
24512: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24513: LD_EXP 77
24517: PUSH
24518: LD_EXP 82
24522: AND
24523: IFFALSE 24647
24525: GO 24527
24527: DISABLE
24528: LD_INT 0
24530: PPUSH
24531: PPUSH
// begin enable ;
24532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24533: LD_ADDR_VAR 0 2
24537: PUSH
24538: LD_INT 22
24540: PUSH
24541: LD_OWVAR 2
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: LD_INT 34
24555: PUSH
24556: LD_INT 7
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 34
24565: PUSH
24566: LD_INT 45
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 34
24575: PUSH
24576: LD_INT 28
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 34
24585: PUSH
24586: LD_INT 47
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PPUSH
24604: CALL_OW 69
24608: ST_TO_ADDR
// if not tmp then
24609: LD_VAR 0 2
24613: NOT
24614: IFFALSE 24618
// exit ;
24616: GO 24647
// for i in tmp do
24618: LD_ADDR_VAR 0 1
24622: PUSH
24623: LD_VAR 0 2
24627: PUSH
24628: FOR_IN
24629: IFFALSE 24645
// begin SetLives ( i , 0 ) ;
24631: LD_VAR 0 1
24635: PPUSH
24636: LD_INT 0
24638: PPUSH
24639: CALL_OW 234
// end ;
24643: GO 24628
24645: POP
24646: POP
// end ;
24647: PPOPN 2
24649: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24650: LD_EXP 77
24654: PUSH
24655: LD_EXP 83
24659: AND
24660: IFFALSE 24744
24662: GO 24664
24664: DISABLE
24665: LD_INT 0
24667: PPUSH
24668: PPUSH
// begin enable ;
24669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24670: LD_ADDR_VAR 0 2
24674: PUSH
24675: LD_INT 22
24677: PUSH
24678: LD_OWVAR 2
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PPUSH
24701: CALL_OW 69
24705: ST_TO_ADDR
// if not tmp then
24706: LD_VAR 0 2
24710: NOT
24711: IFFALSE 24715
// exit ;
24713: GO 24744
// for i in tmp do
24715: LD_ADDR_VAR 0 1
24719: PUSH
24720: LD_VAR 0 2
24724: PUSH
24725: FOR_IN
24726: IFFALSE 24742
// begin SetLives ( i , 0 ) ;
24728: LD_VAR 0 1
24732: PPUSH
24733: LD_INT 0
24735: PPUSH
24736: CALL_OW 234
// end ;
24740: GO 24725
24742: POP
24743: POP
// end ;
24744: PPOPN 2
24746: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24747: LD_EXP 77
24751: PUSH
24752: LD_EXP 80
24756: AND
24757: IFFALSE 24850
24759: GO 24761
24761: DISABLE
24762: LD_INT 0
24764: PPUSH
// begin enable ;
24765: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24766: LD_ADDR_VAR 0 1
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_OWVAR 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: LD_INT 25
24788: PUSH
24789: LD_INT 5
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 25
24798: PUSH
24799: LD_INT 9
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 25
24808: PUSH
24809: LD_INT 8
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PPUSH
24826: CALL_OW 69
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24848
// begin SetClass ( i , 1 ) ;
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: CALL_OW 336
// end ;
24846: GO 24831
24848: POP
24849: POP
// end ;
24850: PPOPN 1
24852: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24853: LD_EXP 77
24857: PUSH
24858: LD_EXP 81
24862: AND
24863: PUSH
24864: LD_OWVAR 65
24868: PUSH
24869: LD_INT 7
24871: LESS
24872: AND
24873: IFFALSE 24887
24875: GO 24877
24877: DISABLE
// begin enable ;
24878: ENABLE
// game_speed := 7 ;
24879: LD_ADDR_OWVAR 65
24883: PUSH
24884: LD_INT 7
24886: ST_TO_ADDR
// end ;
24887: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24888: LD_EXP 77
24892: PUSH
24893: LD_EXP 84
24897: AND
24898: IFFALSE 25100
24900: GO 24902
24902: DISABLE
24903: LD_INT 0
24905: PPUSH
24906: PPUSH
24907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24908: LD_ADDR_VAR 0 3
24912: PUSH
24913: LD_INT 81
24915: PUSH
24916: LD_OWVAR 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 21
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 69
24943: ST_TO_ADDR
// if not tmp then
24944: LD_VAR 0 3
24948: NOT
24949: IFFALSE 24953
// exit ;
24951: GO 25100
// if tmp > 5 then
24953: LD_VAR 0 3
24957: PUSH
24958: LD_INT 5
24960: GREATER
24961: IFFALSE 24973
// k := 5 else
24963: LD_ADDR_VAR 0 2
24967: PUSH
24968: LD_INT 5
24970: ST_TO_ADDR
24971: GO 24983
// k := tmp ;
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_VAR 0 3
24982: ST_TO_ADDR
// for i := 1 to k do
24983: LD_ADDR_VAR 0 1
24987: PUSH
24988: DOUBLE
24989: LD_INT 1
24991: DEC
24992: ST_TO_ADDR
24993: LD_VAR 0 2
24997: PUSH
24998: FOR_TO
24999: IFFALSE 25098
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25001: LD_VAR 0 3
25005: PUSH
25006: LD_VAR 0 1
25010: ARRAY
25011: PPUSH
25012: LD_VAR 0 1
25016: PUSH
25017: LD_INT 4
25019: MOD
25020: PUSH
25021: LD_INT 1
25023: PLUS
25024: PPUSH
25025: CALL_OW 259
25029: PUSH
25030: LD_INT 10
25032: LESS
25033: IFFALSE 25096
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25035: LD_VAR 0 3
25039: PUSH
25040: LD_VAR 0 1
25044: ARRAY
25045: PPUSH
25046: LD_VAR 0 1
25050: PUSH
25051: LD_INT 4
25053: MOD
25054: PUSH
25055: LD_INT 1
25057: PLUS
25058: PPUSH
25059: LD_VAR 0 3
25063: PUSH
25064: LD_VAR 0 1
25068: ARRAY
25069: PPUSH
25070: LD_VAR 0 1
25074: PUSH
25075: LD_INT 4
25077: MOD
25078: PUSH
25079: LD_INT 1
25081: PLUS
25082: PPUSH
25083: CALL_OW 259
25087: PUSH
25088: LD_INT 1
25090: PLUS
25091: PPUSH
25092: CALL_OW 237
25096: GO 24998
25098: POP
25099: POP
// end ;
25100: PPOPN 3
25102: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25103: LD_EXP 77
25107: PUSH
25108: LD_EXP 85
25112: AND
25113: IFFALSE 25133
25115: GO 25117
25117: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25118: LD_INT 4
25120: PPUSH
25121: LD_OWVAR 2
25125: PPUSH
25126: LD_INT 0
25128: PPUSH
25129: CALL_OW 324
25133: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25134: LD_EXP 77
25138: PUSH
25139: LD_EXP 114
25143: AND
25144: IFFALSE 25164
25146: GO 25148
25148: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25149: LD_INT 19
25151: PPUSH
25152: LD_OWVAR 2
25156: PPUSH
25157: LD_INT 0
25159: PPUSH
25160: CALL_OW 324
25164: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25165: LD_EXP 77
25169: PUSH
25170: LD_EXP 86
25174: AND
25175: IFFALSE 25277
25177: GO 25179
25179: DISABLE
25180: LD_INT 0
25182: PPUSH
25183: PPUSH
// begin enable ;
25184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25185: LD_ADDR_VAR 0 2
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_OWVAR 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: PUSH
25205: LD_INT 34
25207: PUSH
25208: LD_INT 11
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_INT 30
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PPUSH
25234: CALL_OW 69
25238: ST_TO_ADDR
// if not tmp then
25239: LD_VAR 0 2
25243: NOT
25244: IFFALSE 25248
// exit ;
25246: GO 25277
// for i in tmp do
25248: LD_ADDR_VAR 0 1
25252: PUSH
25253: LD_VAR 0 2
25257: PUSH
25258: FOR_IN
25259: IFFALSE 25275
// begin SetLives ( i , 0 ) ;
25261: LD_VAR 0 1
25265: PPUSH
25266: LD_INT 0
25268: PPUSH
25269: CALL_OW 234
// end ;
25273: GO 25258
25275: POP
25276: POP
// end ;
25277: PPOPN 2
25279: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25280: LD_EXP 77
25284: PUSH
25285: LD_EXP 87
25289: AND
25290: IFFALSE 25310
25292: GO 25294
25294: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25295: LD_INT 32
25297: PPUSH
25298: LD_OWVAR 2
25302: PPUSH
25303: LD_INT 0
25305: PPUSH
25306: CALL_OW 324
25310: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25311: LD_EXP 77
25315: PUSH
25316: LD_EXP 88
25320: AND
25321: IFFALSE 25502
25323: GO 25325
25325: DISABLE
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
25330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25331: LD_ADDR_VAR 0 2
25335: PUSH
25336: LD_INT 22
25338: PUSH
25339: LD_OWVAR 2
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 33
25350: PUSH
25351: LD_INT 3
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PPUSH
25362: CALL_OW 69
25366: ST_TO_ADDR
// if not tmp then
25367: LD_VAR 0 2
25371: NOT
25372: IFFALSE 25376
// exit ;
25374: GO 25502
// side := 0 ;
25376: LD_ADDR_VAR 0 3
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
// for i := 1 to 8 do
25384: LD_ADDR_VAR 0 1
25388: PUSH
25389: DOUBLE
25390: LD_INT 1
25392: DEC
25393: ST_TO_ADDR
25394: LD_INT 8
25396: PUSH
25397: FOR_TO
25398: IFFALSE 25446
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25400: LD_OWVAR 2
25404: PUSH
25405: LD_VAR 0 1
25409: NONEQUAL
25410: PUSH
25411: LD_OWVAR 2
25415: PPUSH
25416: LD_VAR 0 1
25420: PPUSH
25421: CALL_OW 81
25425: PUSH
25426: LD_INT 2
25428: EQUAL
25429: AND
25430: IFFALSE 25444
// begin side := i ;
25432: LD_ADDR_VAR 0 3
25436: PUSH
25437: LD_VAR 0 1
25441: ST_TO_ADDR
// break ;
25442: GO 25446
// end ;
25444: GO 25397
25446: POP
25447: POP
// if not side then
25448: LD_VAR 0 3
25452: NOT
25453: IFFALSE 25457
// exit ;
25455: GO 25502
// for i := 1 to tmp do
25457: LD_ADDR_VAR 0 1
25461: PUSH
25462: DOUBLE
25463: LD_INT 1
25465: DEC
25466: ST_TO_ADDR
25467: LD_VAR 0 2
25471: PUSH
25472: FOR_TO
25473: IFFALSE 25500
// if Prob ( 60 ) then
25475: LD_INT 60
25477: PPUSH
25478: CALL_OW 13
25482: IFFALSE 25498
// SetSide ( i , side ) ;
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_VAR 0 3
25493: PPUSH
25494: CALL_OW 235
25498: GO 25472
25500: POP
25501: POP
// end ;
25502: PPOPN 3
25504: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25505: LD_EXP 77
25509: PUSH
25510: LD_EXP 90
25514: AND
25515: IFFALSE 25634
25517: GO 25519
25519: DISABLE
25520: LD_INT 0
25522: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25523: LD_ADDR_VAR 0 1
25527: PUSH
25528: LD_INT 22
25530: PUSH
25531: LD_OWVAR 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 3
25552: PUSH
25553: LD_INT 23
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: PPUSH
25572: CALL_OW 69
25576: PUSH
25577: FOR_IN
25578: IFFALSE 25632
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 257
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: LD_INT 3
25598: PUSH
25599: LD_INT 4
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: IN
25608: IFFALSE 25630
// SetClass ( un , rand ( 1 , 4 ) ) ;
25610: LD_VAR 0 1
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: LD_INT 4
25620: PPUSH
25621: CALL_OW 12
25625: PPUSH
25626: CALL_OW 336
25630: GO 25577
25632: POP
25633: POP
// end ;
25634: PPOPN 1
25636: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25637: LD_EXP 77
25641: PUSH
25642: LD_EXP 89
25646: AND
25647: IFFALSE 25726
25649: GO 25651
25651: DISABLE
25652: LD_INT 0
25654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 21
25674: PUSH
25675: LD_INT 3
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: ST_TO_ADDR
// if not tmp then
25691: LD_VAR 0 1
25695: NOT
25696: IFFALSE 25700
// exit ;
25698: GO 25726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25700: LD_VAR 0 1
25704: PUSH
25705: LD_INT 1
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 12
25717: ARRAY
25718: PPUSH
25719: LD_INT 100
25721: PPUSH
25722: CALL_OW 234
// end ;
25726: PPOPN 1
25728: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25729: LD_EXP 77
25733: PUSH
25734: LD_EXP 91
25738: AND
25739: IFFALSE 25837
25741: GO 25743
25743: DISABLE
25744: LD_INT 0
25746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 21
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 69
25782: ST_TO_ADDR
// if not tmp then
25783: LD_VAR 0 1
25787: NOT
25788: IFFALSE 25792
// exit ;
25790: GO 25837
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 1
25799: PPUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 12
25809: ARRAY
25810: PPUSH
25811: LD_INT 1
25813: PPUSH
25814: LD_INT 4
25816: PPUSH
25817: CALL_OW 12
25821: PPUSH
25822: LD_INT 3000
25824: PPUSH
25825: LD_INT 9000
25827: PPUSH
25828: CALL_OW 12
25832: PPUSH
25833: CALL_OW 492
// end ;
25837: PPOPN 1
25839: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25840: LD_EXP 77
25844: PUSH
25845: LD_EXP 92
25849: AND
25850: IFFALSE 25870
25852: GO 25854
25854: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25855: LD_INT 1
25857: PPUSH
25858: LD_OWVAR 2
25862: PPUSH
25863: LD_INT 0
25865: PPUSH
25866: CALL_OW 324
25870: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25871: LD_EXP 77
25875: PUSH
25876: LD_EXP 93
25880: AND
25881: IFFALSE 25964
25883: GO 25885
25885: DISABLE
25886: LD_INT 0
25888: PPUSH
25889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25890: LD_ADDR_VAR 0 2
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_OWVAR 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 21
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: ST_TO_ADDR
// if not tmp then
25926: LD_VAR 0 2
25930: NOT
25931: IFFALSE 25935
// exit ;
25933: GO 25964
// for i in tmp do
25935: LD_ADDR_VAR 0 1
25939: PUSH
25940: LD_VAR 0 2
25944: PUSH
25945: FOR_IN
25946: IFFALSE 25962
// SetBLevel ( i , 10 ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: LD_INT 10
25955: PPUSH
25956: CALL_OW 241
25960: GO 25945
25962: POP
25963: POP
// end ;
25964: PPOPN 2
25966: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25967: LD_EXP 77
25971: PUSH
25972: LD_EXP 94
25976: AND
25977: IFFALSE 26088
25979: GO 25981
25981: DISABLE
25982: LD_INT 0
25984: PPUSH
25985: PPUSH
25986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25987: LD_ADDR_VAR 0 3
25991: PUSH
25992: LD_INT 22
25994: PUSH
25995: LD_OWVAR 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL_OW 69
26022: ST_TO_ADDR
// if not tmp then
26023: LD_VAR 0 3
26027: NOT
26028: IFFALSE 26032
// exit ;
26030: GO 26088
// un := tmp [ rand ( 1 , tmp ) ] ;
26032: LD_ADDR_VAR 0 2
26036: PUSH
26037: LD_VAR 0 3
26041: PUSH
26042: LD_INT 1
26044: PPUSH
26045: LD_VAR 0 3
26049: PPUSH
26050: CALL_OW 12
26054: ARRAY
26055: ST_TO_ADDR
// if Crawls ( un ) then
26056: LD_VAR 0 2
26060: PPUSH
26061: CALL_OW 318
26065: IFFALSE 26076
// ComWalk ( un ) ;
26067: LD_VAR 0 2
26071: PPUSH
26072: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_INT 5
26083: PPUSH
26084: CALL_OW 336
// end ;
26088: PPOPN 3
26090: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26091: LD_EXP 77
26095: PUSH
26096: LD_EXP 95
26100: AND
26101: PUSH
26102: LD_OWVAR 67
26106: PUSH
26107: LD_INT 4
26109: LESS
26110: AND
26111: IFFALSE 26130
26113: GO 26115
26115: DISABLE
// begin Difficulty := Difficulty + 1 ;
26116: LD_ADDR_OWVAR 67
26120: PUSH
26121: LD_OWVAR 67
26125: PUSH
26126: LD_INT 1
26128: PLUS
26129: ST_TO_ADDR
// end ;
26130: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26131: LD_EXP 77
26135: PUSH
26136: LD_EXP 96
26140: AND
26141: IFFALSE 26244
26143: GO 26145
26145: DISABLE
26146: LD_INT 0
26148: PPUSH
// begin for i := 1 to 5 do
26149: LD_ADDR_VAR 0 1
26153: PUSH
26154: DOUBLE
26155: LD_INT 1
26157: DEC
26158: ST_TO_ADDR
26159: LD_INT 5
26161: PUSH
26162: FOR_TO
26163: IFFALSE 26242
// begin uc_nation := nation_nature ;
26165: LD_ADDR_OWVAR 21
26169: PUSH
26170: LD_INT 0
26172: ST_TO_ADDR
// uc_side := 0 ;
26173: LD_ADDR_OWVAR 20
26177: PUSH
26178: LD_INT 0
26180: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26181: LD_ADDR_OWVAR 29
26185: PUSH
26186: LD_INT 12
26188: PUSH
26189: LD_INT 12
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: ST_TO_ADDR
// hc_agressivity := 20 ;
26196: LD_ADDR_OWVAR 35
26200: PUSH
26201: LD_INT 20
26203: ST_TO_ADDR
// hc_class := class_tiger ;
26204: LD_ADDR_OWVAR 28
26208: PUSH
26209: LD_INT 14
26211: ST_TO_ADDR
// hc_gallery :=  ;
26212: LD_ADDR_OWVAR 33
26216: PUSH
26217: LD_STRING 
26219: ST_TO_ADDR
// hc_name :=  ;
26220: LD_ADDR_OWVAR 26
26224: PUSH
26225: LD_STRING 
26227: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26228: CALL_OW 44
26232: PPUSH
26233: LD_INT 0
26235: PPUSH
26236: CALL_OW 51
// end ;
26240: GO 26162
26242: POP
26243: POP
// end ;
26244: PPOPN 1
26246: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26247: LD_EXP 77
26251: PUSH
26252: LD_EXP 97
26256: AND
26257: IFFALSE 26266
26259: GO 26261
26261: DISABLE
// StreamSibBomb ;
26262: CALL 26267 0 0
26266: END
// export function StreamSibBomb ; var i , x , y ; begin
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
// result := false ;
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: LD_INT 0
26280: ST_TO_ADDR
// for i := 1 to 16 do
26281: LD_ADDR_VAR 0 2
26285: PUSH
26286: DOUBLE
26287: LD_INT 1
26289: DEC
26290: ST_TO_ADDR
26291: LD_INT 16
26293: PUSH
26294: FOR_TO
26295: IFFALSE 26494
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26297: LD_ADDR_VAR 0 3
26301: PUSH
26302: LD_INT 10
26304: PUSH
26305: LD_INT 20
26307: PUSH
26308: LD_INT 30
26310: PUSH
26311: LD_INT 40
26313: PUSH
26314: LD_INT 50
26316: PUSH
26317: LD_INT 60
26319: PUSH
26320: LD_INT 70
26322: PUSH
26323: LD_INT 80
26325: PUSH
26326: LD_INT 90
26328: PUSH
26329: LD_INT 100
26331: PUSH
26332: LD_INT 110
26334: PUSH
26335: LD_INT 120
26337: PUSH
26338: LD_INT 130
26340: PUSH
26341: LD_INT 140
26343: PUSH
26344: LD_INT 150
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PPUSH
26367: LD_INT 15
26369: PPUSH
26370: CALL_OW 12
26374: ARRAY
26375: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26376: LD_ADDR_VAR 0 4
26380: PUSH
26381: LD_INT 10
26383: PUSH
26384: LD_INT 20
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: LD_INT 40
26392: PUSH
26393: LD_INT 50
26395: PUSH
26396: LD_INT 60
26398: PUSH
26399: LD_INT 70
26401: PUSH
26402: LD_INT 80
26404: PUSH
26405: LD_INT 90
26407: PUSH
26408: LD_INT 100
26410: PUSH
26411: LD_INT 110
26413: PUSH
26414: LD_INT 120
26416: PUSH
26417: LD_INT 130
26419: PUSH
26420: LD_INT 140
26422: PUSH
26423: LD_INT 150
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PPUSH
26446: LD_INT 15
26448: PPUSH
26449: CALL_OW 12
26453: ARRAY
26454: ST_TO_ADDR
// if ValidHex ( x , y ) then
26455: LD_VAR 0 3
26459: PPUSH
26460: LD_VAR 0 4
26464: PPUSH
26465: CALL_OW 488
26469: IFFALSE 26492
// begin result := [ x , y ] ;
26471: LD_ADDR_VAR 0 1
26475: PUSH
26476: LD_VAR 0 3
26480: PUSH
26481: LD_VAR 0 4
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: ST_TO_ADDR
// break ;
26490: GO 26494
// end ; end ;
26492: GO 26294
26494: POP
26495: POP
// if result then
26496: LD_VAR 0 1
26500: IFFALSE 26560
// begin ToLua ( playSibBomb() ) ;
26502: LD_STRING playSibBomb()
26504: PPUSH
26505: CALL_OW 559
// wait ( 0 0$14 ) ;
26509: LD_INT 490
26511: PPUSH
26512: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26516: LD_VAR 0 1
26520: PUSH
26521: LD_INT 1
26523: ARRAY
26524: PPUSH
26525: LD_VAR 0 1
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: PPUSH
26534: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26538: LD_VAR 0 1
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: PPUSH
26547: LD_VAR 0 1
26551: PUSH
26552: LD_INT 2
26554: ARRAY
26555: PPUSH
26556: CALL_OW 429
// end ; end ;
26560: LD_VAR 0 1
26564: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26565: LD_EXP 77
26569: PUSH
26570: LD_EXP 99
26574: AND
26575: IFFALSE 26587
26577: GO 26579
26579: DISABLE
// YouLost (  ) ;
26580: LD_STRING 
26582: PPUSH
26583: CALL_OW 104
26587: END
// every 0 0$1 trigger StreamModeActive and sFog do
26588: LD_EXP 77
26592: PUSH
26593: LD_EXP 98
26597: AND
26598: IFFALSE 26612
26600: GO 26602
26602: DISABLE
// FogOff ( your_side ) ;
26603: LD_OWVAR 2
26607: PPUSH
26608: CALL_OW 344
26612: END
// every 0 0$1 trigger StreamModeActive and sSun do
26613: LD_EXP 77
26617: PUSH
26618: LD_EXP 100
26622: AND
26623: IFFALSE 26651
26625: GO 26627
26627: DISABLE
// begin solar_recharge_percent := 0 ;
26628: LD_ADDR_OWVAR 79
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26636: LD_INT 10500
26638: PPUSH
26639: CALL_OW 67
// solar_recharge_percent := 100 ;
26643: LD_ADDR_OWVAR 79
26647: PUSH
26648: LD_INT 100
26650: ST_TO_ADDR
// end ;
26651: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26652: LD_EXP 77
26656: PUSH
26657: LD_EXP 101
26661: AND
26662: IFFALSE 26901
26664: GO 26666
26666: DISABLE
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
26671: PPUSH
// begin tmp := [ ] ;
26672: LD_ADDR_VAR 0 3
26676: PUSH
26677: EMPTY
26678: ST_TO_ADDR
// for i := 1 to 6 do
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: DOUBLE
26685: LD_INT 1
26687: DEC
26688: ST_TO_ADDR
26689: LD_INT 6
26691: PUSH
26692: FOR_TO
26693: IFFALSE 26798
// begin uc_nation := nation_nature ;
26695: LD_ADDR_OWVAR 21
26699: PUSH
26700: LD_INT 0
26702: ST_TO_ADDR
// uc_side := 0 ;
26703: LD_ADDR_OWVAR 20
26707: PUSH
26708: LD_INT 0
26710: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26711: LD_ADDR_OWVAR 29
26715: PUSH
26716: LD_INT 12
26718: PUSH
26719: LD_INT 12
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: ST_TO_ADDR
// hc_agressivity := 20 ;
26726: LD_ADDR_OWVAR 35
26730: PUSH
26731: LD_INT 20
26733: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26734: LD_ADDR_OWVAR 28
26738: PUSH
26739: LD_INT 17
26741: ST_TO_ADDR
// hc_gallery :=  ;
26742: LD_ADDR_OWVAR 33
26746: PUSH
26747: LD_STRING 
26749: ST_TO_ADDR
// hc_name :=  ;
26750: LD_ADDR_OWVAR 26
26754: PUSH
26755: LD_STRING 
26757: ST_TO_ADDR
// un := CreateHuman ;
26758: LD_ADDR_VAR 0 2
26762: PUSH
26763: CALL_OW 44
26767: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26768: LD_VAR 0 2
26772: PPUSH
26773: LD_INT 1
26775: PPUSH
26776: CALL_OW 51
// tmp := tmp ^ un ;
26780: LD_ADDR_VAR 0 3
26784: PUSH
26785: LD_VAR 0 3
26789: PUSH
26790: LD_VAR 0 2
26794: ADD
26795: ST_TO_ADDR
// end ;
26796: GO 26692
26798: POP
26799: POP
// repeat wait ( 0 0$1 ) ;
26800: LD_INT 35
26802: PPUSH
26803: CALL_OW 67
// for un in tmp do
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: LD_VAR 0 3
26816: PUSH
26817: FOR_IN
26818: IFFALSE 26892
// begin if IsDead ( un ) then
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 301
26829: IFFALSE 26849
// begin tmp := tmp diff un ;
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_VAR 0 2
26845: DIFF
26846: ST_TO_ADDR
// continue ;
26847: GO 26817
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26849: LD_VAR 0 2
26853: PPUSH
26854: LD_INT 3
26856: PUSH
26857: LD_INT 22
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PPUSH
26871: CALL_OW 69
26875: PPUSH
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 74
26885: PPUSH
26886: CALL_OW 115
// end ;
26890: GO 26817
26892: POP
26893: POP
// until not tmp ;
26894: LD_VAR 0 3
26898: NOT
26899: IFFALSE 26800
// end ;
26901: PPOPN 3
26903: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26904: LD_EXP 77
26908: PUSH
26909: LD_EXP 102
26913: AND
26914: IFFALSE 26968
26916: GO 26918
26918: DISABLE
// begin ToLua ( displayTroll(); ) ;
26919: LD_STRING displayTroll();
26921: PPUSH
26922: CALL_OW 559
// wait ( 3 3$00 ) ;
26926: LD_INT 6300
26928: PPUSH
26929: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26933: LD_STRING hideTroll();
26935: PPUSH
26936: CALL_OW 559
// wait ( 1 1$00 ) ;
26940: LD_INT 2100
26942: PPUSH
26943: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26947: LD_STRING displayTroll();
26949: PPUSH
26950: CALL_OW 559
// wait ( 1 1$00 ) ;
26954: LD_INT 2100
26956: PPUSH
26957: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26961: LD_STRING hideTroll();
26963: PPUSH
26964: CALL_OW 559
// end ;
26968: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26969: LD_EXP 77
26973: PUSH
26974: LD_EXP 103
26978: AND
26979: IFFALSE 27042
26981: GO 26983
26983: DISABLE
26984: LD_INT 0
26986: PPUSH
// begin p := 0 ;
26987: LD_ADDR_VAR 0 1
26991: PUSH
26992: LD_INT 0
26994: ST_TO_ADDR
// repeat game_speed := 1 ;
26995: LD_ADDR_OWVAR 65
26999: PUSH
27000: LD_INT 1
27002: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27003: LD_INT 35
27005: PPUSH
27006: CALL_OW 67
// p := p + 1 ;
27010: LD_ADDR_VAR 0 1
27014: PUSH
27015: LD_VAR 0 1
27019: PUSH
27020: LD_INT 1
27022: PLUS
27023: ST_TO_ADDR
// until p >= 60 ;
27024: LD_VAR 0 1
27028: PUSH
27029: LD_INT 60
27031: GREATEREQUAL
27032: IFFALSE 26995
// game_speed := 4 ;
27034: LD_ADDR_OWVAR 65
27038: PUSH
27039: LD_INT 4
27041: ST_TO_ADDR
// end ;
27042: PPOPN 1
27044: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27045: LD_EXP 77
27049: PUSH
27050: LD_EXP 104
27054: AND
27055: IFFALSE 27201
27057: GO 27059
27059: DISABLE
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27064: LD_ADDR_VAR 0 1
27068: PUSH
27069: LD_INT 22
27071: PUSH
27072: LD_OWVAR 2
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 30
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 30
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PPUSH
27113: CALL_OW 69
27117: ST_TO_ADDR
// if not depot then
27118: LD_VAR 0 1
27122: NOT
27123: IFFALSE 27127
// exit ;
27125: GO 27201
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27127: LD_ADDR_VAR 0 2
27131: PUSH
27132: LD_VAR 0 1
27136: PUSH
27137: LD_INT 1
27139: PPUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 12
27149: ARRAY
27150: PPUSH
27151: CALL_OW 274
27155: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27156: LD_VAR 0 2
27160: PPUSH
27161: LD_INT 1
27163: PPUSH
27164: LD_INT 0
27166: PPUSH
27167: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27171: LD_VAR 0 2
27175: PPUSH
27176: LD_INT 2
27178: PPUSH
27179: LD_INT 0
27181: PPUSH
27182: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27186: LD_VAR 0 2
27190: PPUSH
27191: LD_INT 3
27193: PPUSH
27194: LD_INT 0
27196: PPUSH
27197: CALL_OW 277
// end ;
27201: PPOPN 2
27203: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27204: LD_EXP 77
27208: PUSH
27209: LD_EXP 105
27213: AND
27214: IFFALSE 27311
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27222: LD_ADDR_VAR 0 1
27226: PUSH
27227: LD_INT 22
27229: PUSH
27230: LD_OWVAR 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 21
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: LD_INT 23
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 69
27275: ST_TO_ADDR
// if not tmp then
27276: LD_VAR 0 1
27280: NOT
27281: IFFALSE 27285
// exit ;
27283: GO 27311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27285: LD_VAR 0 1
27289: PUSH
27290: LD_INT 1
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 12
27302: ARRAY
27303: PPUSH
27304: LD_INT 200
27306: PPUSH
27307: CALL_OW 234
// end ;
27311: PPOPN 1
27313: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27314: LD_EXP 77
27318: PUSH
27319: LD_EXP 106
27323: AND
27324: IFFALSE 27403
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27332: LD_ADDR_VAR 0 1
27336: PUSH
27337: LD_INT 22
27339: PUSH
27340: LD_OWVAR 2
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 21
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PPUSH
27363: CALL_OW 69
27367: ST_TO_ADDR
// if not tmp then
27368: LD_VAR 0 1
27372: NOT
27373: IFFALSE 27377
// exit ;
27375: GO 27403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27377: LD_VAR 0 1
27381: PUSH
27382: LD_INT 1
27384: PPUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 12
27394: ARRAY
27395: PPUSH
27396: LD_INT 60
27398: PPUSH
27399: CALL_OW 234
// end ;
27403: PPOPN 1
27405: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27406: LD_EXP 77
27410: PUSH
27411: LD_EXP 107
27415: AND
27416: IFFALSE 27515
27418: GO 27420
27420: DISABLE
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
// begin enable ;
27425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 61
27445: PUSH
27446: EMPTY
27447: LIST
27448: PUSH
27449: LD_INT 33
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 69
27468: ST_TO_ADDR
// if not tmp then
27469: LD_VAR 0 1
27473: NOT
27474: IFFALSE 27478
// exit ;
27476: GO 27515
// for i in tmp do
27478: LD_ADDR_VAR 0 2
27482: PUSH
27483: LD_VAR 0 1
27487: PUSH
27488: FOR_IN
27489: IFFALSE 27513
// if IsControledBy ( i ) then
27491: LD_VAR 0 2
27495: PPUSH
27496: CALL_OW 312
27500: IFFALSE 27511
// ComUnlink ( i ) ;
27502: LD_VAR 0 2
27506: PPUSH
27507: CALL_OW 136
27511: GO 27488
27513: POP
27514: POP
// end ;
27515: PPOPN 2
27517: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27518: LD_EXP 77
27522: PUSH
27523: LD_EXP 108
27527: AND
27528: IFFALSE 27668
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// begin ToLua ( displayPowell(); ) ;
27537: LD_STRING displayPowell();
27539: PPUSH
27540: CALL_OW 559
// uc_side := 0 ;
27544: LD_ADDR_OWVAR 20
27548: PUSH
27549: LD_INT 0
27551: ST_TO_ADDR
// uc_nation := 2 ;
27552: LD_ADDR_OWVAR 21
27556: PUSH
27557: LD_INT 2
27559: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27560: LD_ADDR_OWVAR 37
27564: PUSH
27565: LD_INT 14
27567: ST_TO_ADDR
// vc_engine := engine_siberite ;
27568: LD_ADDR_OWVAR 39
27572: PUSH
27573: LD_INT 3
27575: ST_TO_ADDR
// vc_control := control_apeman ;
27576: LD_ADDR_OWVAR 38
27580: PUSH
27581: LD_INT 5
27583: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27584: LD_ADDR_OWVAR 40
27588: PUSH
27589: LD_INT 29
27591: ST_TO_ADDR
// un := CreateVehicle ;
27592: LD_ADDR_VAR 0 2
27596: PUSH
27597: CALL_OW 45
27601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_INT 1
27609: PPUSH
27610: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27614: LD_INT 35
27616: PPUSH
27617: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27621: LD_VAR 0 2
27625: PPUSH
27626: LD_INT 22
27628: PUSH
27629: LD_OWVAR 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PPUSH
27638: CALL_OW 69
27642: PPUSH
27643: LD_VAR 0 2
27647: PPUSH
27648: CALL_OW 74
27652: PPUSH
27653: CALL_OW 115
// until IsDead ( un ) ;
27657: LD_VAR 0 2
27661: PPUSH
27662: CALL_OW 301
27666: IFFALSE 27614
// end ;
27668: PPOPN 2
27670: END
// every 0 0$1 trigger StreamModeActive and sStu do
27671: LD_EXP 77
27675: PUSH
27676: LD_EXP 116
27680: AND
27681: IFFALSE 27697
27683: GO 27685
27685: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27686: LD_STRING displayStucuk();
27688: PPUSH
27689: CALL_OW 559
// ResetFog ;
27693: CALL_OW 335
// end ;
27697: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27698: LD_EXP 77
27702: PUSH
27703: LD_EXP 109
27707: AND
27708: IFFALSE 27849
27710: GO 27712
27712: DISABLE
27713: LD_INT 0
27715: PPUSH
27716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27717: LD_ADDR_VAR 0 2
27721: PUSH
27722: LD_INT 22
27724: PUSH
27725: LD_OWVAR 2
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 21
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PPUSH
27748: CALL_OW 69
27752: ST_TO_ADDR
// if not tmp then
27753: LD_VAR 0 2
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 27849
// un := tmp [ rand ( 1 , tmp ) ] ;
27762: LD_ADDR_VAR 0 1
27766: PUSH
27767: LD_VAR 0 2
27771: PUSH
27772: LD_INT 1
27774: PPUSH
27775: LD_VAR 0 2
27779: PPUSH
27780: CALL_OW 12
27784: ARRAY
27785: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27786: LD_VAR 0 1
27790: PPUSH
27791: LD_INT 0
27793: PPUSH
27794: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27798: LD_VAR 0 1
27802: PPUSH
27803: LD_OWVAR 3
27807: PUSH
27808: LD_VAR 0 1
27812: DIFF
27813: PPUSH
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 74
27823: PPUSH
27824: CALL_OW 115
// wait ( 0 0$20 ) ;
27828: LD_INT 700
27830: PPUSH
27831: CALL_OW 67
// SetSide ( un , your_side ) ;
27835: LD_VAR 0 1
27839: PPUSH
27840: LD_OWVAR 2
27844: PPUSH
27845: CALL_OW 235
// end ;
27849: PPOPN 2
27851: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27852: LD_EXP 77
27856: PUSH
27857: LD_EXP 110
27861: AND
27862: IFFALSE 27968
27864: GO 27866
27866: DISABLE
27867: LD_INT 0
27869: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27870: LD_ADDR_VAR 0 1
27874: PUSH
27875: LD_INT 22
27877: PUSH
27878: LD_OWVAR 2
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: LD_INT 30
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: CALL_OW 69
27923: ST_TO_ADDR
// if not depot then
27924: LD_VAR 0 1
27928: NOT
27929: IFFALSE 27933
// exit ;
27931: GO 27968
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27933: LD_VAR 0 1
27937: PUSH
27938: LD_INT 1
27940: ARRAY
27941: PPUSH
27942: CALL_OW 250
27946: PPUSH
27947: LD_VAR 0 1
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: PPUSH
27956: CALL_OW 251
27960: PPUSH
27961: LD_INT 70
27963: PPUSH
27964: CALL_OW 495
// end ;
27968: PPOPN 1
27970: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27971: LD_EXP 77
27975: PUSH
27976: LD_EXP 111
27980: AND
27981: IFFALSE 28192
27983: GO 27985
27985: DISABLE
27986: LD_INT 0
27988: PPUSH
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27993: LD_ADDR_VAR 0 5
27997: PUSH
27998: LD_INT 22
28000: PUSH
28001: LD_OWVAR 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 21
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 69
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 5
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28192
// for i in tmp do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: LD_VAR 0 5
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28190
// begin d := rand ( 0 , 5 ) ;
28051: LD_ADDR_VAR 0 4
28055: PUSH
28056: LD_INT 0
28058: PPUSH
28059: LD_INT 5
28061: PPUSH
28062: CALL_OW 12
28066: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_VAR 0 1
28076: PPUSH
28077: CALL_OW 250
28081: PPUSH
28082: LD_VAR 0 4
28086: PPUSH
28087: LD_INT 3
28089: PPUSH
28090: LD_INT 12
28092: PPUSH
28093: CALL_OW 12
28097: PPUSH
28098: CALL_OW 272
28102: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL_OW 251
28117: PPUSH
28118: LD_VAR 0 4
28122: PPUSH
28123: LD_INT 3
28125: PPUSH
28126: LD_INT 12
28128: PPUSH
28129: CALL_OW 12
28133: PPUSH
28134: CALL_OW 273
28138: ST_TO_ADDR
// if ValidHex ( x , y ) then
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_VAR 0 3
28148: PPUSH
28149: CALL_OW 488
28153: IFFALSE 28188
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_VAR 0 2
28164: PPUSH
28165: LD_VAR 0 3
28169: PPUSH
28170: LD_INT 3
28172: PPUSH
28173: LD_INT 6
28175: PPUSH
28176: CALL_OW 12
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: CALL_OW 483
// end ;
28188: GO 28048
28190: POP
28191: POP
// end ;
28192: PPOPN 5
28194: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28195: LD_EXP 77
28199: PUSH
28200: LD_EXP 112
28204: AND
28205: IFFALSE 28299
28207: GO 28209
28209: DISABLE
28210: LD_INT 0
28212: PPUSH
28213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28214: LD_ADDR_VAR 0 2
28218: PUSH
28219: LD_INT 22
28221: PUSH
28222: LD_OWVAR 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 32
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 21
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: ST_TO_ADDR
// if not tmp then
28261: LD_VAR 0 2
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28299
// for i in tmp do
28270: LD_ADDR_VAR 0 1
28274: PUSH
28275: LD_VAR 0 2
28279: PUSH
28280: FOR_IN
28281: IFFALSE 28297
// SetFuel ( i , 0 ) ;
28283: LD_VAR 0 1
28287: PPUSH
28288: LD_INT 0
28290: PPUSH
28291: CALL_OW 240
28295: GO 28280
28297: POP
28298: POP
// end ;
28299: PPOPN 2
28301: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28302: LD_EXP 77
28306: PUSH
28307: LD_EXP 113
28311: AND
28312: IFFALSE 28378
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 30
28339: PUSH
28340: LD_INT 29
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 1
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28378
// DestroyUnit ( tmp [ 1 ] ) ;
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 1
28372: ARRAY
28373: PPUSH
28374: CALL_OW 65
// end ;
28378: PPOPN 1
28380: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28381: LD_EXP 77
28385: PUSH
28386: LD_EXP 115
28390: AND
28391: IFFALSE 28520
28393: GO 28395
28395: DISABLE
28396: LD_INT 0
28398: PPUSH
// begin uc_side := 0 ;
28399: LD_ADDR_OWVAR 20
28403: PUSH
28404: LD_INT 0
28406: ST_TO_ADDR
// uc_nation := nation_arabian ;
28407: LD_ADDR_OWVAR 21
28411: PUSH
28412: LD_INT 2
28414: ST_TO_ADDR
// hc_gallery :=  ;
28415: LD_ADDR_OWVAR 33
28419: PUSH
28420: LD_STRING 
28422: ST_TO_ADDR
// hc_name :=  ;
28423: LD_ADDR_OWVAR 26
28427: PUSH
28428: LD_STRING 
28430: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28431: LD_INT 1
28433: PPUSH
28434: LD_INT 11
28436: PPUSH
28437: LD_INT 10
28439: PPUSH
28440: CALL_OW 380
// un := CreateHuman ;
28444: LD_ADDR_VAR 0 1
28448: PUSH
28449: CALL_OW 44
28453: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28454: LD_VAR 0 1
28458: PPUSH
28459: LD_INT 1
28461: PPUSH
28462: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28466: LD_INT 35
28468: PPUSH
28469: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28473: LD_VAR 0 1
28477: PPUSH
28478: LD_INT 22
28480: PUSH
28481: LD_OWVAR 2
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: PPUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 74
28504: PPUSH
28505: CALL_OW 115
// until IsDead ( un ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 301
28518: IFFALSE 28466
// end ;
28520: PPOPN 1
28522: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28523: LD_EXP 77
28527: PUSH
28528: LD_EXP 117
28532: AND
28533: IFFALSE 28545
28535: GO 28537
28537: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28538: LD_STRING earthquake(getX(game), 0, 32)
28540: PPUSH
28541: CALL_OW 559
28545: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28546: LD_EXP 77
28550: PUSH
28551: LD_EXP 118
28555: AND
28556: IFFALSE 28647
28558: GO 28560
28560: DISABLE
28561: LD_INT 0
28563: PPUSH
// begin enable ;
28564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 33
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 1
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28621: LD_VAR 0 1
28625: PUSH
28626: LD_INT 1
28628: PPUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 12
28638: ARRAY
28639: PPUSH
28640: LD_INT 1
28642: PPUSH
28643: CALL_OW 234
// end ;
28647: PPOPN 1
28649: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28650: LD_EXP 77
28654: PUSH
28655: LD_EXP 119
28659: AND
28660: IFFALSE 28801
28662: GO 28664
28664: DISABLE
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
28669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: LD_INT 22
28677: PUSH
28678: LD_OWVAR 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 25
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 69
28705: ST_TO_ADDR
// if not tmp then
28706: LD_VAR 0 3
28710: NOT
28711: IFFALSE 28715
// exit ;
28713: GO 28801
// un := tmp [ rand ( 1 , tmp ) ] ;
28715: LD_ADDR_VAR 0 2
28719: PUSH
28720: LD_VAR 0 3
28724: PUSH
28725: LD_INT 1
28727: PPUSH
28728: LD_VAR 0 3
28732: PPUSH
28733: CALL_OW 12
28737: ARRAY
28738: ST_TO_ADDR
// if Crawls ( un ) then
28739: LD_VAR 0 2
28743: PPUSH
28744: CALL_OW 318
28748: IFFALSE 28759
// ComWalk ( un ) ;
28750: LD_VAR 0 2
28754: PPUSH
28755: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28759: LD_VAR 0 2
28763: PPUSH
28764: LD_INT 9
28766: PPUSH
28767: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28771: LD_INT 28
28773: PPUSH
28774: LD_OWVAR 2
28778: PPUSH
28779: LD_INT 2
28781: PPUSH
28782: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28786: LD_INT 29
28788: PPUSH
28789: LD_OWVAR 2
28793: PPUSH
28794: LD_INT 2
28796: PPUSH
28797: CALL_OW 322
// end ;
28801: PPOPN 3
28803: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28804: LD_EXP 77
28808: PUSH
28809: LD_EXP 120
28813: AND
28814: IFFALSE 28925
28816: GO 28818
28818: DISABLE
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
28823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_INT 22
28831: PUSH
28832: LD_OWVAR 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 25
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PPUSH
28855: CALL_OW 69
28859: ST_TO_ADDR
// if not tmp then
28860: LD_VAR 0 3
28864: NOT
28865: IFFALSE 28869
// exit ;
28867: GO 28925
// un := tmp [ rand ( 1 , tmp ) ] ;
28869: LD_ADDR_VAR 0 2
28873: PUSH
28874: LD_VAR 0 3
28878: PUSH
28879: LD_INT 1
28881: PPUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 12
28891: ARRAY
28892: ST_TO_ADDR
// if Crawls ( un ) then
28893: LD_VAR 0 2
28897: PPUSH
28898: CALL_OW 318
28902: IFFALSE 28913
// ComWalk ( un ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28913: LD_VAR 0 2
28917: PPUSH
28918: LD_INT 8
28920: PPUSH
28921: CALL_OW 336
// end ;
28925: PPOPN 3
28927: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28928: LD_EXP 77
28932: PUSH
28933: LD_EXP 121
28937: AND
28938: IFFALSE 29082
28940: GO 28942
28942: DISABLE
28943: LD_INT 0
28945: PPUSH
28946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_OWVAR 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 21
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 34
28979: PUSH
28980: LD_INT 12
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 34
28989: PUSH
28990: LD_INT 51
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 34
28999: PUSH
29000: LD_INT 32
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: PPUSH
29018: CALL_OW 69
29022: ST_TO_ADDR
// if not tmp then
29023: LD_VAR 0 2
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29082
// for i in tmp do
29032: LD_ADDR_VAR 0 1
29036: PUSH
29037: LD_VAR 0 2
29041: PUSH
29042: FOR_IN
29043: IFFALSE 29080
// if GetCargo ( i , mat_artifact ) = 0 then
29045: LD_VAR 0 1
29049: PPUSH
29050: LD_INT 4
29052: PPUSH
29053: CALL_OW 289
29057: PUSH
29058: LD_INT 0
29060: EQUAL
29061: IFFALSE 29078
// SetCargo ( i , mat_siberit , 100 ) ;
29063: LD_VAR 0 1
29067: PPUSH
29068: LD_INT 3
29070: PPUSH
29071: LD_INT 100
29073: PPUSH
29074: CALL_OW 290
29078: GO 29042
29080: POP
29081: POP
// end ;
29082: PPOPN 2
29084: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29085: LD_EXP 77
29089: PUSH
29090: LD_EXP 122
29094: AND
29095: IFFALSE 29278
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29104: LD_ADDR_VAR 0 2
29108: PUSH
29109: LD_INT 22
29111: PUSH
29112: LD_OWVAR 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ST_TO_ADDR
// if not tmp then
29126: LD_VAR 0 2
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29278
// for i := 1 to 2 do
29135: LD_ADDR_VAR 0 1
29139: PUSH
29140: DOUBLE
29141: LD_INT 1
29143: DEC
29144: ST_TO_ADDR
29145: LD_INT 2
29147: PUSH
29148: FOR_TO
29149: IFFALSE 29276
// begin uc_side := your_side ;
29151: LD_ADDR_OWVAR 20
29155: PUSH
29156: LD_OWVAR 2
29160: ST_TO_ADDR
// uc_nation := nation_american ;
29161: LD_ADDR_OWVAR 21
29165: PUSH
29166: LD_INT 1
29168: ST_TO_ADDR
// vc_chassis := us_morphling ;
29169: LD_ADDR_OWVAR 37
29173: PUSH
29174: LD_INT 5
29176: ST_TO_ADDR
// vc_engine := engine_siberite ;
29177: LD_ADDR_OWVAR 39
29181: PUSH
29182: LD_INT 3
29184: ST_TO_ADDR
// vc_control := control_computer ;
29185: LD_ADDR_OWVAR 38
29189: PUSH
29190: LD_INT 3
29192: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29193: LD_ADDR_OWVAR 40
29197: PUSH
29198: LD_INT 10
29200: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29201: LD_VAR 0 2
29205: PUSH
29206: LD_INT 1
29208: ARRAY
29209: PPUSH
29210: CALL_OW 310
29214: NOT
29215: IFFALSE 29262
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29217: CALL_OW 45
29221: PPUSH
29222: LD_VAR 0 2
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: PPUSH
29231: CALL_OW 250
29235: PPUSH
29236: LD_VAR 0 2
29240: PUSH
29241: LD_INT 1
29243: ARRAY
29244: PPUSH
29245: CALL_OW 251
29249: PPUSH
29250: LD_INT 12
29252: PPUSH
29253: LD_INT 1
29255: PPUSH
29256: CALL_OW 50
29260: GO 29274
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29262: CALL_OW 45
29266: PPUSH
29267: LD_INT 1
29269: PPUSH
29270: CALL_OW 51
// end ;
29274: GO 29148
29276: POP
29277: POP
// end ;
29278: PPOPN 2
29280: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29281: LD_EXP 77
29285: PUSH
29286: LD_EXP 123
29290: AND
29291: IFFALSE 29513
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29304: LD_ADDR_VAR 0 6
29308: PUSH
29309: LD_INT 22
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 21
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 23
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 69
29357: ST_TO_ADDR
// if not tmp then
29358: LD_VAR 0 6
29362: NOT
29363: IFFALSE 29367
// exit ;
29365: GO 29513
// s1 := rand ( 1 , 4 ) ;
29367: LD_ADDR_VAR 0 2
29371: PUSH
29372: LD_INT 1
29374: PPUSH
29375: LD_INT 4
29377: PPUSH
29378: CALL_OW 12
29382: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_VAR 0 6
29392: PUSH
29393: LD_INT 1
29395: ARRAY
29396: PPUSH
29397: LD_VAR 0 2
29401: PPUSH
29402: CALL_OW 259
29406: ST_TO_ADDR
// if s1 = 1 then
29407: LD_VAR 0 2
29411: PUSH
29412: LD_INT 1
29414: EQUAL
29415: IFFALSE 29435
// s2 := rand ( 2 , 4 ) else
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_INT 2
29424: PPUSH
29425: LD_INT 4
29427: PPUSH
29428: CALL_OW 12
29432: ST_TO_ADDR
29433: GO 29443
// s2 := 1 ;
29435: LD_ADDR_VAR 0 3
29439: PUSH
29440: LD_INT 1
29442: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29443: LD_ADDR_VAR 0 5
29447: PUSH
29448: LD_VAR 0 6
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: CALL_OW 259
29466: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29467: LD_VAR 0 6
29471: PUSH
29472: LD_INT 1
29474: ARRAY
29475: PPUSH
29476: LD_VAR 0 2
29480: PPUSH
29481: LD_VAR 0 5
29485: PPUSH
29486: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29490: LD_VAR 0 6
29494: PUSH
29495: LD_INT 1
29497: ARRAY
29498: PPUSH
29499: LD_VAR 0 3
29503: PPUSH
29504: LD_VAR 0 4
29508: PPUSH
29509: CALL_OW 237
// end ;
29513: PPOPN 6
29515: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29516: LD_EXP 77
29520: PUSH
29521: LD_EXP 124
29525: AND
29526: IFFALSE 29605
29528: GO 29530
29530: DISABLE
29531: LD_INT 0
29533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29534: LD_ADDR_VAR 0 1
29538: PUSH
29539: LD_INT 22
29541: PUSH
29542: LD_OWVAR 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 30
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: ST_TO_ADDR
// if not tmp then
29570: LD_VAR 0 1
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29579: LD_VAR 0 1
29583: PUSH
29584: LD_INT 1
29586: PPUSH
29587: LD_VAR 0 1
29591: PPUSH
29592: CALL_OW 12
29596: ARRAY
29597: PPUSH
29598: LD_INT 1
29600: PPUSH
29601: CALL_OW 234
// end ;
29605: PPOPN 1
29607: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29608: LD_EXP 77
29612: PUSH
29613: LD_EXP 125
29617: AND
29618: IFFALSE 29730
29620: GO 29622
29622: DISABLE
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_INT 22
29634: PUSH
29635: LD_OWVAR 2
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 30
29649: PUSH
29650: LD_INT 27
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 30
29659: PUSH
29660: LD_INT 26
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 28
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: ST_TO_ADDR
// if not tmp then
29692: LD_VAR 0 2
29696: NOT
29697: IFFALSE 29701
// exit ;
29699: GO 29730
// for i in tmp do
29701: LD_ADDR_VAR 0 1
29705: PUSH
29706: LD_VAR 0 2
29710: PUSH
29711: FOR_IN
29712: IFFALSE 29728
// SetLives ( i , 1 ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_INT 1
29721: PPUSH
29722: CALL_OW 234
29726: GO 29711
29728: POP
29729: POP
// end ;
29730: PPOPN 2
29732: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29733: LD_EXP 77
29737: PUSH
29738: LD_EXP 126
29742: AND
29743: IFFALSE 30030
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
29752: PPUSH
// begin i := rand ( 1 , 7 ) ;
29753: LD_ADDR_VAR 0 1
29757: PUSH
29758: LD_INT 1
29760: PPUSH
29761: LD_INT 7
29763: PPUSH
29764: CALL_OW 12
29768: ST_TO_ADDR
// case i of 1 :
29769: LD_VAR 0 1
29773: PUSH
29774: LD_INT 1
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29792
29782: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29783: LD_STRING earthquake(getX(game), 0, 32)
29785: PPUSH
29786: CALL_OW 559
29790: GO 30030
29792: LD_INT 2
29794: DOUBLE
29795: EQUAL
29796: IFTRUE 29800
29798: GO 29814
29800: POP
// begin ToLua ( displayStucuk(); ) ;
29801: LD_STRING displayStucuk();
29803: PPUSH
29804: CALL_OW 559
// ResetFog ;
29808: CALL_OW 335
// end ; 3 :
29812: GO 30030
29814: LD_INT 3
29816: DOUBLE
29817: EQUAL
29818: IFTRUE 29822
29820: GO 29926
29822: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29823: LD_ADDR_VAR 0 2
29827: PUSH
29828: LD_INT 22
29830: PUSH
29831: LD_OWVAR 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 25
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PPUSH
29854: CALL_OW 69
29858: ST_TO_ADDR
// if not tmp then
29859: LD_VAR 0 2
29863: NOT
29864: IFFALSE 29868
// exit ;
29866: GO 30030
// un := tmp [ rand ( 1 , tmp ) ] ;
29868: LD_ADDR_VAR 0 3
29872: PUSH
29873: LD_VAR 0 2
29877: PUSH
29878: LD_INT 1
29880: PPUSH
29881: LD_VAR 0 2
29885: PPUSH
29886: CALL_OW 12
29890: ARRAY
29891: ST_TO_ADDR
// if Crawls ( un ) then
29892: LD_VAR 0 3
29896: PPUSH
29897: CALL_OW 318
29901: IFFALSE 29912
// ComWalk ( un ) ;
29903: LD_VAR 0 3
29907: PPUSH
29908: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29912: LD_VAR 0 3
29916: PPUSH
29917: LD_INT 8
29919: PPUSH
29920: CALL_OW 336
// end ; 4 :
29924: GO 30030
29926: LD_INT 4
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 30008
29934: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29935: LD_ADDR_VAR 0 2
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 29
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PPUSH
29966: CALL_OW 69
29970: ST_TO_ADDR
// if not tmp then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30030
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29980: LD_VAR 0 2
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29993: LD_VAR 0 2
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: PPUSH
30002: CALL_OW 65
// end ; 5 .. 7 :
30006: GO 30030
30008: LD_INT 5
30010: DOUBLE
30011: GREATEREQUAL
30012: IFFALSE 30020
30014: LD_INT 7
30016: DOUBLE
30017: LESSEQUAL
30018: IFTRUE 30022
30020: GO 30029
30022: POP
// StreamSibBomb ; end ;
30023: CALL 26267 0 0
30027: GO 30030
30029: POP
// end ;
30030: PPOPN 3
30032: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30033: LD_EXP 77
30037: PUSH
30038: LD_EXP 127
30042: AND
30043: IFFALSE 30199
30045: GO 30047
30047: DISABLE
30048: LD_INT 0
30050: PPUSH
30051: PPUSH
30052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30053: LD_ADDR_VAR 0 2
30057: PUSH
30058: LD_INT 81
30060: PUSH
30061: LD_OWVAR 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: LD_INT 21
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PPUSH
30102: CALL_OW 69
30106: ST_TO_ADDR
// if not tmp then
30107: LD_VAR 0 2
30111: NOT
30112: IFFALSE 30116
// exit ;
30114: GO 30199
// p := 0 ;
30116: LD_ADDR_VAR 0 3
30120: PUSH
30121: LD_INT 0
30123: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30124: LD_INT 35
30126: PPUSH
30127: CALL_OW 67
// p := p + 1 ;
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_VAR 0 3
30140: PUSH
30141: LD_INT 1
30143: PLUS
30144: ST_TO_ADDR
// for i in tmp do
30145: LD_ADDR_VAR 0 1
30149: PUSH
30150: LD_VAR 0 2
30154: PUSH
30155: FOR_IN
30156: IFFALSE 30187
// if GetLives ( i ) < 1000 then
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL_OW 256
30167: PUSH
30168: LD_INT 1000
30170: LESS
30171: IFFALSE 30185
// SetLives ( i , 1000 ) ;
30173: LD_VAR 0 1
30177: PPUSH
30178: LD_INT 1000
30180: PPUSH
30181: CALL_OW 234
30185: GO 30155
30187: POP
30188: POP
// until p > 20 ;
30189: LD_VAR 0 3
30193: PUSH
30194: LD_INT 20
30196: GREATER
30197: IFFALSE 30124
// end ;
30199: PPOPN 3
30201: END
// every 0 0$1 trigger StreamModeActive and sTime do
30202: LD_EXP 77
30206: PUSH
30207: LD_EXP 128
30211: AND
30212: IFFALSE 30247
30214: GO 30216
30216: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30217: LD_INT 28
30219: PPUSH
30220: LD_OWVAR 2
30224: PPUSH
30225: LD_INT 2
30227: PPUSH
30228: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30232: LD_INT 30
30234: PPUSH
30235: LD_OWVAR 2
30239: PPUSH
30240: LD_INT 2
30242: PPUSH
30243: CALL_OW 322
// end ;
30247: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30248: LD_EXP 77
30252: PUSH
30253: LD_EXP 129
30257: AND
30258: IFFALSE 30379
30260: GO 30262
30262: DISABLE
30263: LD_INT 0
30265: PPUSH
30266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: LD_INT 22
30274: PUSH
30275: LD_OWVAR 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 21
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 23
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: PPUSH
30316: CALL_OW 69
30320: ST_TO_ADDR
// if not tmp then
30321: LD_VAR 0 2
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30379
// for i in tmp do
30330: LD_ADDR_VAR 0 1
30334: PUSH
30335: LD_VAR 0 2
30339: PUSH
30340: FOR_IN
30341: IFFALSE 30377
// begin if Crawls ( i ) then
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 318
30352: IFFALSE 30363
// ComWalk ( i ) ;
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 138
// SetClass ( i , 2 ) ;
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_INT 2
30370: PPUSH
30371: CALL_OW 336
// end ;
30375: GO 30340
30377: POP
30378: POP
// end ;
30379: PPOPN 2
30381: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30382: LD_EXP 77
30386: PUSH
30387: LD_EXP 130
30391: AND
30392: IFFALSE 30680
30394: GO 30396
30396: DISABLE
30397: LD_INT 0
30399: PPUSH
30400: PPUSH
30401: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30402: LD_OWVAR 2
30406: PPUSH
30407: LD_INT 9
30409: PPUSH
30410: LD_INT 1
30412: PPUSH
30413: LD_INT 1
30415: PPUSH
30416: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30420: LD_INT 9
30422: PPUSH
30423: LD_OWVAR 2
30427: PPUSH
30428: CALL_OW 343
// uc_side := 9 ;
30432: LD_ADDR_OWVAR 20
30436: PUSH
30437: LD_INT 9
30439: ST_TO_ADDR
// uc_nation := 2 ;
30440: LD_ADDR_OWVAR 21
30444: PUSH
30445: LD_INT 2
30447: ST_TO_ADDR
// hc_name := Dark Warrior ;
30448: LD_ADDR_OWVAR 26
30452: PUSH
30453: LD_STRING Dark Warrior
30455: ST_TO_ADDR
// hc_gallery :=  ;
30456: LD_ADDR_OWVAR 33
30460: PUSH
30461: LD_STRING 
30463: ST_TO_ADDR
// hc_noskilllimit := true ;
30464: LD_ADDR_OWVAR 76
30468: PUSH
30469: LD_INT 1
30471: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30472: LD_ADDR_OWVAR 31
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 30
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// un := CreateHuman ;
30495: LD_ADDR_VAR 0 3
30499: PUSH
30500: CALL_OW 44
30504: ST_TO_ADDR
// hc_noskilllimit := false ;
30505: LD_ADDR_OWVAR 76
30509: PUSH
30510: LD_INT 0
30512: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30513: LD_VAR 0 3
30517: PPUSH
30518: LD_INT 1
30520: PPUSH
30521: CALL_OW 51
// ToLua ( playRanger() ) ;
30525: LD_STRING playRanger()
30527: PPUSH
30528: CALL_OW 559
// p := 0 ;
30532: LD_ADDR_VAR 0 2
30536: PUSH
30537: LD_INT 0
30539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30540: LD_INT 35
30542: PPUSH
30543: CALL_OW 67
// p := p + 1 ;
30547: LD_ADDR_VAR 0 2
30551: PUSH
30552: LD_VAR 0 2
30556: PUSH
30557: LD_INT 1
30559: PLUS
30560: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30561: LD_VAR 0 3
30565: PPUSH
30566: CALL_OW 256
30570: PUSH
30571: LD_INT 1000
30573: LESS
30574: IFFALSE 30588
// SetLives ( un , 1000 ) ;
30576: LD_VAR 0 3
30580: PPUSH
30581: LD_INT 1000
30583: PPUSH
30584: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30588: LD_VAR 0 3
30592: PPUSH
30593: LD_INT 81
30595: PUSH
30596: LD_OWVAR 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 91
30607: PUSH
30608: LD_VAR 0 3
30612: PUSH
30613: LD_INT 30
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PPUSH
30625: CALL_OW 69
30629: PPUSH
30630: LD_VAR 0 3
30634: PPUSH
30635: CALL_OW 74
30639: PPUSH
30640: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30644: LD_VAR 0 2
30648: PUSH
30649: LD_INT 80
30651: GREATER
30652: PUSH
30653: LD_VAR 0 3
30657: PPUSH
30658: CALL_OW 301
30662: OR
30663: IFFALSE 30540
// if un then
30665: LD_VAR 0 3
30669: IFFALSE 30680
// RemoveUnit ( un ) ;
30671: LD_VAR 0 3
30675: PPUSH
30676: CALL_OW 64
// end ;
30680: PPOPN 3
30682: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30683: LD_EXP 131
30687: IFFALSE 30803
30689: GO 30691
30691: DISABLE
30692: LD_INT 0
30694: PPUSH
30695: PPUSH
30696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30697: LD_ADDR_VAR 0 2
30701: PUSH
30702: LD_INT 81
30704: PUSH
30705: LD_OWVAR 2
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 21
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PPUSH
30728: CALL_OW 69
30732: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30733: LD_STRING playComputer()
30735: PPUSH
30736: CALL_OW 559
// if not tmp then
30740: LD_VAR 0 2
30744: NOT
30745: IFFALSE 30749
// exit ;
30747: GO 30803
// for i in tmp do
30749: LD_ADDR_VAR 0 1
30753: PUSH
30754: LD_VAR 0 2
30758: PUSH
30759: FOR_IN
30760: IFFALSE 30801
// for j := 1 to 4 do
30762: LD_ADDR_VAR 0 3
30766: PUSH
30767: DOUBLE
30768: LD_INT 1
30770: DEC
30771: ST_TO_ADDR
30772: LD_INT 4
30774: PUSH
30775: FOR_TO
30776: IFFALSE 30797
// SetSkill ( i , j , 10 ) ;
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: LD_INT 10
30790: PPUSH
30791: CALL_OW 237
30795: GO 30775
30797: POP
30798: POP
30799: GO 30759
30801: POP
30802: POP
// end ;
30803: PPOPN 3
30805: END
// every 0 0$1 trigger s30 do var i , tmp ;
30806: LD_EXP 132
30810: IFFALSE 30879
30812: GO 30814
30814: DISABLE
30815: LD_INT 0
30817: PPUSH
30818: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30819: LD_ADDR_VAR 0 2
30823: PUSH
30824: LD_INT 22
30826: PUSH
30827: LD_OWVAR 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PPUSH
30836: CALL_OW 69
30840: ST_TO_ADDR
// if not tmp then
30841: LD_VAR 0 2
30845: NOT
30846: IFFALSE 30850
// exit ;
30848: GO 30879
// for i in tmp do
30850: LD_ADDR_VAR 0 1
30854: PUSH
30855: LD_VAR 0 2
30859: PUSH
30860: FOR_IN
30861: IFFALSE 30877
// SetLives ( i , 300 ) ;
30863: LD_VAR 0 1
30867: PPUSH
30868: LD_INT 300
30870: PPUSH
30871: CALL_OW 234
30875: GO 30860
30877: POP
30878: POP
// end ;
30879: PPOPN 2
30881: END
// every 0 0$1 trigger s60 do var i , tmp ;
30882: LD_EXP 133
30886: IFFALSE 30955
30888: GO 30890
30890: DISABLE
30891: LD_INT 0
30893: PPUSH
30894: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30895: LD_ADDR_VAR 0 2
30899: PUSH
30900: LD_INT 22
30902: PUSH
30903: LD_OWVAR 2
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PPUSH
30912: CALL_OW 69
30916: ST_TO_ADDR
// if not tmp then
30917: LD_VAR 0 2
30921: NOT
30922: IFFALSE 30926
// exit ;
30924: GO 30955
// for i in tmp do
30926: LD_ADDR_VAR 0 1
30930: PUSH
30931: LD_VAR 0 2
30935: PUSH
30936: FOR_IN
30937: IFFALSE 30953
// SetLives ( i , 600 ) ;
30939: LD_VAR 0 1
30943: PPUSH
30944: LD_INT 600
30946: PPUSH
30947: CALL_OW 234
30951: GO 30936
30953: POP
30954: POP
// end ;
30955: PPOPN 2
30957: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30958: LD_INT 0
30960: PPUSH
// case cmd of 301 :
30961: LD_VAR 0 1
30965: PUSH
30966: LD_INT 301
30968: DOUBLE
30969: EQUAL
30970: IFTRUE 30974
30972: GO 31006
30974: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30975: LD_VAR 0 6
30979: PPUSH
30980: LD_VAR 0 7
30984: PPUSH
30985: LD_VAR 0 8
30989: PPUSH
30990: LD_VAR 0 4
30994: PPUSH
30995: LD_VAR 0 5
30999: PPUSH
31000: CALL 32207 0 5
31004: GO 31127
31006: LD_INT 302
31008: DOUBLE
31009: EQUAL
31010: IFTRUE 31014
31012: GO 31051
31014: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31015: LD_VAR 0 6
31019: PPUSH
31020: LD_VAR 0 7
31024: PPUSH
31025: LD_VAR 0 8
31029: PPUSH
31030: LD_VAR 0 9
31034: PPUSH
31035: LD_VAR 0 4
31039: PPUSH
31040: LD_VAR 0 5
31044: PPUSH
31045: CALL 32298 0 6
31049: GO 31127
31051: LD_INT 303
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31096
31059: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31060: LD_VAR 0 6
31064: PPUSH
31065: LD_VAR 0 7
31069: PPUSH
31070: LD_VAR 0 8
31074: PPUSH
31075: LD_VAR 0 9
31079: PPUSH
31080: LD_VAR 0 4
31084: PPUSH
31085: LD_VAR 0 5
31089: PPUSH
31090: CALL 31132 0 6
31094: GO 31127
31096: LD_INT 304
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 31126
31104: POP
// hHackTeleport ( unit , x , y ) ; end ;
31105: LD_VAR 0 2
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: LD_VAR 0 5
31119: PPUSH
31120: CALL 32891 0 3
31124: GO 31127
31126: POP
// end ;
31127: LD_VAR 0 12
31131: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31132: LD_INT 0
31134: PPUSH
31135: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31136: LD_VAR 0 1
31140: PUSH
31141: LD_INT 1
31143: LESS
31144: PUSH
31145: LD_VAR 0 1
31149: PUSH
31150: LD_INT 3
31152: GREATER
31153: OR
31154: PUSH
31155: LD_VAR 0 5
31159: PPUSH
31160: LD_VAR 0 6
31164: PPUSH
31165: CALL_OW 428
31169: OR
31170: IFFALSE 31174
// exit ;
31172: GO 31894
// uc_side := your_side ;
31174: LD_ADDR_OWVAR 20
31178: PUSH
31179: LD_OWVAR 2
31183: ST_TO_ADDR
// uc_nation := nation ;
31184: LD_ADDR_OWVAR 21
31188: PUSH
31189: LD_VAR 0 1
31193: ST_TO_ADDR
// bc_level = 1 ;
31194: LD_ADDR_OWVAR 43
31198: PUSH
31199: LD_INT 1
31201: ST_TO_ADDR
// case btype of 1 :
31202: LD_VAR 0 2
31206: PUSH
31207: LD_INT 1
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31226
31215: POP
// bc_type := b_depot ; 2 :
31216: LD_ADDR_OWVAR 42
31220: PUSH
31221: LD_INT 0
31223: ST_TO_ADDR
31224: GO 31838
31226: LD_INT 2
31228: DOUBLE
31229: EQUAL
31230: IFTRUE 31234
31232: GO 31245
31234: POP
// bc_type := b_warehouse ; 3 :
31235: LD_ADDR_OWVAR 42
31239: PUSH
31240: LD_INT 1
31242: ST_TO_ADDR
31243: GO 31838
31245: LD_INT 3
31247: DOUBLE
31248: EQUAL
31249: IFTRUE 31253
31251: GO 31264
31253: POP
// bc_type := b_lab ; 4 .. 9 :
31254: LD_ADDR_OWVAR 42
31258: PUSH
31259: LD_INT 6
31261: ST_TO_ADDR
31262: GO 31838
31264: LD_INT 4
31266: DOUBLE
31267: GREATEREQUAL
31268: IFFALSE 31276
31270: LD_INT 9
31272: DOUBLE
31273: LESSEQUAL
31274: IFTRUE 31278
31276: GO 31330
31278: POP
// begin bc_type := b_lab_half ;
31279: LD_ADDR_OWVAR 42
31283: PUSH
31284: LD_INT 7
31286: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31287: LD_ADDR_OWVAR 44
31291: PUSH
31292: LD_INT 10
31294: PUSH
31295: LD_INT 11
31297: PUSH
31298: LD_INT 12
31300: PUSH
31301: LD_INT 15
31303: PUSH
31304: LD_INT 14
31306: PUSH
31307: LD_INT 13
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: LD_VAR 0 2
31322: PUSH
31323: LD_INT 3
31325: MINUS
31326: ARRAY
31327: ST_TO_ADDR
// end ; 10 .. 13 :
31328: GO 31838
31330: LD_INT 10
31332: DOUBLE
31333: GREATEREQUAL
31334: IFFALSE 31342
31336: LD_INT 13
31338: DOUBLE
31339: LESSEQUAL
31340: IFTRUE 31344
31342: GO 31421
31344: POP
// begin bc_type := b_lab_full ;
31345: LD_ADDR_OWVAR 42
31349: PUSH
31350: LD_INT 8
31352: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31353: LD_ADDR_OWVAR 44
31357: PUSH
31358: LD_INT 10
31360: PUSH
31361: LD_INT 12
31363: PUSH
31364: LD_INT 14
31366: PUSH
31367: LD_INT 13
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: LD_VAR 0 2
31380: PUSH
31381: LD_INT 9
31383: MINUS
31384: ARRAY
31385: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31386: LD_ADDR_OWVAR 45
31390: PUSH
31391: LD_INT 11
31393: PUSH
31394: LD_INT 15
31396: PUSH
31397: LD_INT 12
31399: PUSH
31400: LD_INT 15
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: PUSH
31409: LD_VAR 0 2
31413: PUSH
31414: LD_INT 9
31416: MINUS
31417: ARRAY
31418: ST_TO_ADDR
// end ; 14 :
31419: GO 31838
31421: LD_INT 14
31423: DOUBLE
31424: EQUAL
31425: IFTRUE 31429
31427: GO 31440
31429: POP
// bc_type := b_workshop ; 15 :
31430: LD_ADDR_OWVAR 42
31434: PUSH
31435: LD_INT 2
31437: ST_TO_ADDR
31438: GO 31838
31440: LD_INT 15
31442: DOUBLE
31443: EQUAL
31444: IFTRUE 31448
31446: GO 31459
31448: POP
// bc_type := b_factory ; 16 :
31449: LD_ADDR_OWVAR 42
31453: PUSH
31454: LD_INT 3
31456: ST_TO_ADDR
31457: GO 31838
31459: LD_INT 16
31461: DOUBLE
31462: EQUAL
31463: IFTRUE 31467
31465: GO 31478
31467: POP
// bc_type := b_ext_gun ; 17 :
31468: LD_ADDR_OWVAR 42
31472: PUSH
31473: LD_INT 17
31475: ST_TO_ADDR
31476: GO 31838
31478: LD_INT 17
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31514
31486: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31487: LD_ADDR_OWVAR 42
31491: PUSH
31492: LD_INT 19
31494: PUSH
31495: LD_INT 23
31497: PUSH
31498: LD_INT 19
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: PUSH
31506: LD_VAR 0 1
31510: ARRAY
31511: ST_TO_ADDR
31512: GO 31838
31514: LD_INT 18
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31533
31522: POP
// bc_type := b_ext_radar ; 19 :
31523: LD_ADDR_OWVAR 42
31527: PUSH
31528: LD_INT 20
31530: ST_TO_ADDR
31531: GO 31838
31533: LD_INT 19
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31552
31541: POP
// bc_type := b_ext_radio ; 20 :
31542: LD_ADDR_OWVAR 42
31546: PUSH
31547: LD_INT 22
31549: ST_TO_ADDR
31550: GO 31838
31552: LD_INT 20
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31571
31560: POP
// bc_type := b_ext_siberium ; 21 :
31561: LD_ADDR_OWVAR 42
31565: PUSH
31566: LD_INT 21
31568: ST_TO_ADDR
31569: GO 31838
31571: LD_INT 21
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31590
31579: POP
// bc_type := b_ext_computer ; 22 :
31580: LD_ADDR_OWVAR 42
31584: PUSH
31585: LD_INT 24
31587: ST_TO_ADDR
31588: GO 31838
31590: LD_INT 22
31592: DOUBLE
31593: EQUAL
31594: IFTRUE 31598
31596: GO 31609
31598: POP
// bc_type := b_ext_track ; 23 :
31599: LD_ADDR_OWVAR 42
31603: PUSH
31604: LD_INT 16
31606: ST_TO_ADDR
31607: GO 31838
31609: LD_INT 23
31611: DOUBLE
31612: EQUAL
31613: IFTRUE 31617
31615: GO 31628
31617: POP
// bc_type := b_ext_laser ; 24 :
31618: LD_ADDR_OWVAR 42
31622: PUSH
31623: LD_INT 25
31625: ST_TO_ADDR
31626: GO 31838
31628: LD_INT 24
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31647
31636: POP
// bc_type := b_control_tower ; 25 :
31637: LD_ADDR_OWVAR 42
31641: PUSH
31642: LD_INT 36
31644: ST_TO_ADDR
31645: GO 31838
31647: LD_INT 25
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31666
31655: POP
// bc_type := b_breastwork ; 26 :
31656: LD_ADDR_OWVAR 42
31660: PUSH
31661: LD_INT 31
31663: ST_TO_ADDR
31664: GO 31838
31666: LD_INT 26
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31685
31674: POP
// bc_type := b_bunker ; 27 :
31675: LD_ADDR_OWVAR 42
31679: PUSH
31680: LD_INT 32
31682: ST_TO_ADDR
31683: GO 31838
31685: LD_INT 27
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31704
31693: POP
// bc_type := b_turret ; 28 :
31694: LD_ADDR_OWVAR 42
31698: PUSH
31699: LD_INT 33
31701: ST_TO_ADDR
31702: GO 31838
31704: LD_INT 28
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31723
31712: POP
// bc_type := b_armoury ; 29 :
31713: LD_ADDR_OWVAR 42
31717: PUSH
31718: LD_INT 4
31720: ST_TO_ADDR
31721: GO 31838
31723: LD_INT 29
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31742
31731: POP
// bc_type := b_barracks ; 30 :
31732: LD_ADDR_OWVAR 42
31736: PUSH
31737: LD_INT 5
31739: ST_TO_ADDR
31740: GO 31838
31742: LD_INT 30
31744: DOUBLE
31745: EQUAL
31746: IFTRUE 31750
31748: GO 31761
31750: POP
// bc_type := b_solar_power ; 31 :
31751: LD_ADDR_OWVAR 42
31755: PUSH
31756: LD_INT 27
31758: ST_TO_ADDR
31759: GO 31838
31761: LD_INT 31
31763: DOUBLE
31764: EQUAL
31765: IFTRUE 31769
31767: GO 31780
31769: POP
// bc_type := b_oil_power ; 32 :
31770: LD_ADDR_OWVAR 42
31774: PUSH
31775: LD_INT 26
31777: ST_TO_ADDR
31778: GO 31838
31780: LD_INT 32
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31799
31788: POP
// bc_type := b_siberite_power ; 33 :
31789: LD_ADDR_OWVAR 42
31793: PUSH
31794: LD_INT 28
31796: ST_TO_ADDR
31797: GO 31838
31799: LD_INT 33
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31818
31807: POP
// bc_type := b_oil_mine ; 34 :
31808: LD_ADDR_OWVAR 42
31812: PUSH
31813: LD_INT 29
31815: ST_TO_ADDR
31816: GO 31838
31818: LD_INT 34
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 31837
31826: POP
// bc_type := b_siberite_mine ; end ;
31827: LD_ADDR_OWVAR 42
31831: PUSH
31832: LD_INT 30
31834: ST_TO_ADDR
31835: GO 31838
31837: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31838: LD_ADDR_VAR 0 8
31842: PUSH
31843: LD_VAR 0 5
31847: PPUSH
31848: LD_VAR 0 6
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 47
31862: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31863: LD_OWVAR 42
31867: PUSH
31868: LD_INT 32
31870: PUSH
31871: LD_INT 33
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: IN
31878: IFFALSE 31894
// PlaceWeaponTurret ( b , weapon ) ;
31880: LD_VAR 0 8
31884: PPUSH
31885: LD_VAR 0 4
31889: PPUSH
31890: CALL_OW 431
// end ;
31894: LD_VAR 0 7
31898: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31899: LD_INT 0
31901: PPUSH
31902: PPUSH
31903: PPUSH
31904: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31905: LD_ADDR_VAR 0 4
31909: PUSH
31910: LD_INT 22
31912: PUSH
31913: LD_OWVAR 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 30
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 30
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PPUSH
31954: CALL_OW 69
31958: ST_TO_ADDR
// if not tmp then
31959: LD_VAR 0 4
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 32027
// for i in tmp do
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_VAR 0 4
31977: PUSH
31978: FOR_IN
31979: IFFALSE 32025
// for j = 1 to 3 do
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: DOUBLE
31987: LD_INT 1
31989: DEC
31990: ST_TO_ADDR
31991: LD_INT 3
31993: PUSH
31994: FOR_TO
31995: IFFALSE 32021
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31997: LD_VAR 0 2
32001: PPUSH
32002: CALL_OW 274
32006: PPUSH
32007: LD_VAR 0 3
32011: PPUSH
32012: LD_INT 99999
32014: PPUSH
32015: CALL_OW 277
32019: GO 31994
32021: POP
32022: POP
32023: GO 31978
32025: POP
32026: POP
// end ;
32027: LD_VAR 0 1
32031: RET
// export function hHackSetLevel10 ; var i , j ; begin
32032: LD_INT 0
32034: PPUSH
32035: PPUSH
32036: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32037: LD_ADDR_VAR 0 2
32041: PUSH
32042: LD_INT 21
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PPUSH
32052: CALL_OW 69
32056: PUSH
32057: FOR_IN
32058: IFFALSE 32110
// if IsSelected ( i ) then
32060: LD_VAR 0 2
32064: PPUSH
32065: CALL_OW 306
32069: IFFALSE 32108
// begin for j := 1 to 4 do
32071: LD_ADDR_VAR 0 3
32075: PUSH
32076: DOUBLE
32077: LD_INT 1
32079: DEC
32080: ST_TO_ADDR
32081: LD_INT 4
32083: PUSH
32084: FOR_TO
32085: IFFALSE 32106
// SetSkill ( i , j , 10 ) ;
32087: LD_VAR 0 2
32091: PPUSH
32092: LD_VAR 0 3
32096: PPUSH
32097: LD_INT 10
32099: PPUSH
32100: CALL_OW 237
32104: GO 32084
32106: POP
32107: POP
// end ;
32108: GO 32057
32110: POP
32111: POP
// end ;
32112: LD_VAR 0 1
32116: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32117: LD_INT 0
32119: PPUSH
32120: PPUSH
32121: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32122: LD_ADDR_VAR 0 2
32126: PUSH
32127: LD_INT 22
32129: PUSH
32130: LD_OWVAR 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 21
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PPUSH
32153: CALL_OW 69
32157: PUSH
32158: FOR_IN
32159: IFFALSE 32200
// begin for j := 1 to 4 do
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: DOUBLE
32167: LD_INT 1
32169: DEC
32170: ST_TO_ADDR
32171: LD_INT 4
32173: PUSH
32174: FOR_TO
32175: IFFALSE 32196
// SetSkill ( i , j , 10 ) ;
32177: LD_VAR 0 2
32181: PPUSH
32182: LD_VAR 0 3
32186: PPUSH
32187: LD_INT 10
32189: PPUSH
32190: CALL_OW 237
32194: GO 32174
32196: POP
32197: POP
// end ;
32198: GO 32158
32200: POP
32201: POP
// end ;
32202: LD_VAR 0 1
32206: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32207: LD_INT 0
32209: PPUSH
// uc_side := your_side ;
32210: LD_ADDR_OWVAR 20
32214: PUSH
32215: LD_OWVAR 2
32219: ST_TO_ADDR
// uc_nation := nation ;
32220: LD_ADDR_OWVAR 21
32224: PUSH
32225: LD_VAR 0 1
32229: ST_TO_ADDR
// InitHc ;
32230: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32234: LD_INT 0
32236: PPUSH
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 3
32246: PPUSH
32247: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32251: LD_VAR 0 4
32255: PPUSH
32256: LD_VAR 0 5
32260: PPUSH
32261: CALL_OW 428
32265: PUSH
32266: LD_INT 0
32268: EQUAL
32269: IFFALSE 32293
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32271: CALL_OW 44
32275: PPUSH
32276: LD_VAR 0 4
32280: PPUSH
32281: LD_VAR 0 5
32285: PPUSH
32286: LD_INT 1
32288: PPUSH
32289: CALL_OW 48
// end ;
32293: LD_VAR 0 6
32297: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32298: LD_INT 0
32300: PPUSH
32301: PPUSH
// uc_side := your_side ;
32302: LD_ADDR_OWVAR 20
32306: PUSH
32307: LD_OWVAR 2
32311: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32312: LD_VAR 0 1
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: LD_INT 5
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: IN
32339: IFFALSE 32351
// uc_nation := nation_american else
32341: LD_ADDR_OWVAR 21
32345: PUSH
32346: LD_INT 1
32348: ST_TO_ADDR
32349: GO 32394
// if chassis in [ 11 , 12 , 13 , 14 ] then
32351: LD_VAR 0 1
32355: PUSH
32356: LD_INT 11
32358: PUSH
32359: LD_INT 12
32361: PUSH
32362: LD_INT 13
32364: PUSH
32365: LD_INT 14
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: IN
32374: IFFALSE 32386
// uc_nation := nation_arabian else
32376: LD_ADDR_OWVAR 21
32380: PUSH
32381: LD_INT 2
32383: ST_TO_ADDR
32384: GO 32394
// uc_nation := nation_russian ;
32386: LD_ADDR_OWVAR 21
32390: PUSH
32391: LD_INT 3
32393: ST_TO_ADDR
// vc_chassis := chassis ;
32394: LD_ADDR_OWVAR 37
32398: PUSH
32399: LD_VAR 0 1
32403: ST_TO_ADDR
// vc_engine := engine ;
32404: LD_ADDR_OWVAR 39
32408: PUSH
32409: LD_VAR 0 2
32413: ST_TO_ADDR
// vc_control := control ;
32414: LD_ADDR_OWVAR 38
32418: PUSH
32419: LD_VAR 0 3
32423: ST_TO_ADDR
// vc_weapon := weapon ;
32424: LD_ADDR_OWVAR 40
32428: PUSH
32429: LD_VAR 0 4
32433: ST_TO_ADDR
// un := CreateVehicle ;
32434: LD_ADDR_VAR 0 8
32438: PUSH
32439: CALL_OW 45
32443: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32444: LD_VAR 0 8
32448: PPUSH
32449: LD_INT 0
32451: PPUSH
32452: LD_INT 5
32454: PPUSH
32455: CALL_OW 12
32459: PPUSH
32460: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32464: LD_VAR 0 8
32468: PPUSH
32469: LD_VAR 0 5
32473: PPUSH
32474: LD_VAR 0 6
32478: PPUSH
32479: LD_INT 1
32481: PPUSH
32482: CALL_OW 48
// end ;
32486: LD_VAR 0 7
32490: RET
// export hInvincible ; every 1 do
32491: GO 32493
32493: DISABLE
// hInvincible := [ ] ;
32494: LD_ADDR_EXP 134
32498: PUSH
32499: EMPTY
32500: ST_TO_ADDR
32501: END
// every 10 do var i ;
32502: GO 32504
32504: DISABLE
32505: LD_INT 0
32507: PPUSH
// begin enable ;
32508: ENABLE
// if not hInvincible then
32509: LD_EXP 134
32513: NOT
32514: IFFALSE 32518
// exit ;
32516: GO 32562
// for i in hInvincible do
32518: LD_ADDR_VAR 0 1
32522: PUSH
32523: LD_EXP 134
32527: PUSH
32528: FOR_IN
32529: IFFALSE 32560
// if GetLives ( i ) < 1000 then
32531: LD_VAR 0 1
32535: PPUSH
32536: CALL_OW 256
32540: PUSH
32541: LD_INT 1000
32543: LESS
32544: IFFALSE 32558
// SetLives ( i , 1000 ) ;
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_INT 1000
32553: PPUSH
32554: CALL_OW 234
32558: GO 32528
32560: POP
32561: POP
// end ;
32562: PPOPN 1
32564: END
// export function hHackInvincible ; var i ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32569: LD_ADDR_VAR 0 2
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 21
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 21
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: PPUSH
32602: CALL_OW 69
32606: PUSH
32607: FOR_IN
32608: IFFALSE 32669
// if IsSelected ( i ) then
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 306
32619: IFFALSE 32667
// begin if i in hInvincible then
32621: LD_VAR 0 2
32625: PUSH
32626: LD_EXP 134
32630: IN
32631: IFFALSE 32651
// hInvincible := hInvincible diff i else
32633: LD_ADDR_EXP 134
32637: PUSH
32638: LD_EXP 134
32642: PUSH
32643: LD_VAR 0 2
32647: DIFF
32648: ST_TO_ADDR
32649: GO 32667
// hInvincible := hInvincible union i ;
32651: LD_ADDR_EXP 134
32655: PUSH
32656: LD_EXP 134
32660: PUSH
32661: LD_VAR 0 2
32665: UNION
32666: ST_TO_ADDR
// end ;
32667: GO 32607
32669: POP
32670: POP
// end ;
32671: LD_VAR 0 1
32675: RET
// export function hHackInvisible ; var i , j ; begin
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
32680: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32681: LD_ADDR_VAR 0 2
32685: PUSH
32686: LD_INT 21
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PPUSH
32696: CALL_OW 69
32700: PUSH
32701: FOR_IN
32702: IFFALSE 32726
// if IsSelected ( i ) then
32704: LD_VAR 0 2
32708: PPUSH
32709: CALL_OW 306
32713: IFFALSE 32724
// ComForceInvisible ( i ) ;
32715: LD_VAR 0 2
32719: PPUSH
32720: CALL_OW 496
32724: GO 32701
32726: POP
32727: POP
// end ;
32728: LD_VAR 0 1
32732: RET
// export function hHackChangeYourSide ; begin
32733: LD_INT 0
32735: PPUSH
// if your_side = 8 then
32736: LD_OWVAR 2
32740: PUSH
32741: LD_INT 8
32743: EQUAL
32744: IFFALSE 32756
// your_side := 0 else
32746: LD_ADDR_OWVAR 2
32750: PUSH
32751: LD_INT 0
32753: ST_TO_ADDR
32754: GO 32770
// your_side := your_side + 1 ;
32756: LD_ADDR_OWVAR 2
32760: PUSH
32761: LD_OWVAR 2
32765: PUSH
32766: LD_INT 1
32768: PLUS
32769: ST_TO_ADDR
// end ;
32770: LD_VAR 0 1
32774: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32775: LD_INT 0
32777: PPUSH
32778: PPUSH
32779: PPUSH
// for i in all_units do
32780: LD_ADDR_VAR 0 2
32784: PUSH
32785: LD_OWVAR 3
32789: PUSH
32790: FOR_IN
32791: IFFALSE 32869
// if IsSelected ( i ) then
32793: LD_VAR 0 2
32797: PPUSH
32798: CALL_OW 306
32802: IFFALSE 32867
// begin j := GetSide ( i ) ;
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_VAR 0 2
32813: PPUSH
32814: CALL_OW 255
32818: ST_TO_ADDR
// if j = 8 then
32819: LD_VAR 0 3
32823: PUSH
32824: LD_INT 8
32826: EQUAL
32827: IFFALSE 32839
// j := 0 else
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_INT 0
32836: ST_TO_ADDR
32837: GO 32853
// j := j + 1 ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_VAR 0 3
32848: PUSH
32849: LD_INT 1
32851: PLUS
32852: ST_TO_ADDR
// SetSide ( i , j ) ;
32853: LD_VAR 0 2
32857: PPUSH
32858: LD_VAR 0 3
32862: PPUSH
32863: CALL_OW 235
// end ;
32867: GO 32790
32869: POP
32870: POP
// end ;
32871: LD_VAR 0 1
32875: RET
// export function hHackFog ; begin
32876: LD_INT 0
32878: PPUSH
// FogOff ( true ) ;
32879: LD_INT 1
32881: PPUSH
32882: CALL_OW 344
// end ;
32886: LD_VAR 0 1
32890: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32891: LD_INT 0
32893: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32894: LD_VAR 0 1
32898: PPUSH
32899: LD_VAR 0 2
32903: PPUSH
32904: LD_VAR 0 3
32908: PPUSH
32909: LD_INT 1
32911: PPUSH
32912: LD_INT 1
32914: PPUSH
32915: CALL_OW 483
// CenterOnXY ( x , y ) ;
32919: LD_VAR 0 2
32923: PPUSH
32924: LD_VAR 0 3
32928: PPUSH
32929: CALL_OW 84
// end ; end_of_file
32933: LD_VAR 0 4
32937: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32938: LD_INT 0
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32944: LD_VAR 0 1
32948: PPUSH
32949: CALL_OW 264
32953: PUSH
32954: LD_EXP 62
32958: EQUAL
32959: IFFALSE 33031
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32961: LD_INT 68
32963: PPUSH
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 255
32973: PPUSH
32974: CALL_OW 321
32978: PUSH
32979: LD_INT 2
32981: EQUAL
32982: IFFALSE 32994
// eff := 70 else
32984: LD_ADDR_VAR 0 4
32988: PUSH
32989: LD_INT 70
32991: ST_TO_ADDR
32992: GO 33002
// eff := 30 ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_INT 30
33001: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 250
33011: PPUSH
33012: LD_VAR 0 1
33016: PPUSH
33017: CALL_OW 251
33021: PPUSH
33022: LD_VAR 0 4
33026: PPUSH
33027: CALL_OW 495
// end ; end ;
33031: LD_VAR 0 2
33035: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33036: LD_INT 0
33038: PPUSH
// end ;
33039: LD_VAR 0 4
33043: RET
// export function SOS_Command ( cmd ) ; begin
33044: LD_INT 0
33046: PPUSH
// end ;
33047: LD_VAR 0 2
33051: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33052: LD_INT 0
33054: PPUSH
// end ;
33055: LD_VAR 0 6
33059: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33060: LD_INT 0
33062: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33063: LD_VAR 0 1
33067: PUSH
33068: LD_INT 250
33070: EQUAL
33071: PUSH
33072: LD_VAR 0 2
33076: PPUSH
33077: CALL_OW 264
33081: PUSH
33082: LD_EXP 65
33086: EQUAL
33087: AND
33088: IFFALSE 33109
// MinerPlaceMine ( unit , x , y ) ;
33090: LD_VAR 0 2
33094: PPUSH
33095: LD_VAR 0 4
33099: PPUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: CALL 35458 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33109: LD_VAR 0 1
33113: PUSH
33114: LD_INT 251
33116: EQUAL
33117: PUSH
33118: LD_VAR 0 2
33122: PPUSH
33123: CALL_OW 264
33127: PUSH
33128: LD_EXP 65
33132: EQUAL
33133: AND
33134: IFFALSE 33155
// MinerDetonateMine ( unit , x , y ) ;
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 4
33145: PPUSH
33146: LD_VAR 0 5
33150: PPUSH
33151: CALL 35735 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33155: LD_VAR 0 1
33159: PUSH
33160: LD_INT 252
33162: EQUAL
33163: PUSH
33164: LD_VAR 0 2
33168: PPUSH
33169: CALL_OW 264
33173: PUSH
33174: LD_EXP 65
33178: EQUAL
33179: AND
33180: IFFALSE 33201
// MinerCreateMinefield ( unit , x , y ) ;
33182: LD_VAR 0 2
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: LD_VAR 0 5
33196: PPUSH
33197: CALL 36152 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33201: LD_VAR 0 1
33205: PUSH
33206: LD_INT 253
33208: EQUAL
33209: PUSH
33210: LD_VAR 0 2
33214: PPUSH
33215: CALL_OW 257
33219: PUSH
33220: LD_INT 5
33222: EQUAL
33223: AND
33224: IFFALSE 33245
// ComBinocular ( unit , x , y ) ;
33226: LD_VAR 0 2
33230: PPUSH
33231: LD_VAR 0 4
33235: PPUSH
33236: LD_VAR 0 5
33240: PPUSH
33241: CALL 36523 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33245: LD_VAR 0 1
33249: PUSH
33250: LD_INT 254
33252: EQUAL
33253: PUSH
33254: LD_VAR 0 2
33258: PPUSH
33259: CALL_OW 264
33263: PUSH
33264: LD_EXP 60
33268: EQUAL
33269: AND
33270: PUSH
33271: LD_VAR 0 3
33275: PPUSH
33276: CALL_OW 263
33280: PUSH
33281: LD_INT 3
33283: EQUAL
33284: AND
33285: IFFALSE 33301
// HackDestroyVehicle ( unit , selectedUnit ) ;
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_VAR 0 3
33296: PPUSH
33297: CALL 34818 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33301: LD_VAR 0 1
33305: PUSH
33306: LD_INT 255
33308: EQUAL
33309: PUSH
33310: LD_VAR 0 2
33314: PPUSH
33315: CALL_OW 264
33319: PUSH
33320: LD_INT 14
33322: PUSH
33323: LD_INT 53
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: IN
33330: AND
33331: PUSH
33332: LD_VAR 0 4
33336: PPUSH
33337: LD_VAR 0 5
33341: PPUSH
33342: CALL_OW 488
33346: AND
33347: IFFALSE 33371
// CutTreeXYR ( unit , x , y , 12 ) ;
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 4
33358: PPUSH
33359: LD_VAR 0 5
33363: PPUSH
33364: LD_INT 12
33366: PPUSH
33367: CALL 33384 0 4
// end ;
33371: LD_VAR 0 6
33375: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33376: LD_INT 0
33378: PPUSH
// end ;
33379: LD_VAR 0 4
33383: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33384: LD_INT 0
33386: PPUSH
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33395: LD_VAR 0 1
33399: NOT
33400: PUSH
33401: LD_VAR 0 2
33405: PPUSH
33406: LD_VAR 0 3
33410: PPUSH
33411: CALL_OW 488
33415: NOT
33416: OR
33417: PUSH
33418: LD_VAR 0 4
33422: NOT
33423: OR
33424: IFFALSE 33428
// exit ;
33426: GO 33768
// list := [ ] ;
33428: LD_ADDR_VAR 0 13
33432: PUSH
33433: EMPTY
33434: ST_TO_ADDR
// if x - r < 0 then
33435: LD_VAR 0 2
33439: PUSH
33440: LD_VAR 0 4
33444: MINUS
33445: PUSH
33446: LD_INT 0
33448: LESS
33449: IFFALSE 33461
// min_x := 0 else
33451: LD_ADDR_VAR 0 7
33455: PUSH
33456: LD_INT 0
33458: ST_TO_ADDR
33459: GO 33477
// min_x := x - r ;
33461: LD_ADDR_VAR 0 7
33465: PUSH
33466: LD_VAR 0 2
33470: PUSH
33471: LD_VAR 0 4
33475: MINUS
33476: ST_TO_ADDR
// if y - r < 0 then
33477: LD_VAR 0 3
33481: PUSH
33482: LD_VAR 0 4
33486: MINUS
33487: PUSH
33488: LD_INT 0
33490: LESS
33491: IFFALSE 33503
// min_y := 0 else
33493: LD_ADDR_VAR 0 8
33497: PUSH
33498: LD_INT 0
33500: ST_TO_ADDR
33501: GO 33519
// min_y := y - r ;
33503: LD_ADDR_VAR 0 8
33507: PUSH
33508: LD_VAR 0 3
33512: PUSH
33513: LD_VAR 0 4
33517: MINUS
33518: ST_TO_ADDR
// max_x := x + r ;
33519: LD_ADDR_VAR 0 9
33523: PUSH
33524: LD_VAR 0 2
33528: PUSH
33529: LD_VAR 0 4
33533: PLUS
33534: ST_TO_ADDR
// max_y := y + r ;
33535: LD_ADDR_VAR 0 10
33539: PUSH
33540: LD_VAR 0 3
33544: PUSH
33545: LD_VAR 0 4
33549: PLUS
33550: ST_TO_ADDR
// for _x = min_x to max_x do
33551: LD_ADDR_VAR 0 11
33555: PUSH
33556: DOUBLE
33557: LD_VAR 0 7
33561: DEC
33562: ST_TO_ADDR
33563: LD_VAR 0 9
33567: PUSH
33568: FOR_TO
33569: IFFALSE 33686
// for _y = min_y to max_y do
33571: LD_ADDR_VAR 0 12
33575: PUSH
33576: DOUBLE
33577: LD_VAR 0 8
33581: DEC
33582: ST_TO_ADDR
33583: LD_VAR 0 10
33587: PUSH
33588: FOR_TO
33589: IFFALSE 33682
// begin if not ValidHex ( _x , _y ) then
33591: LD_VAR 0 11
33595: PPUSH
33596: LD_VAR 0 12
33600: PPUSH
33601: CALL_OW 488
33605: NOT
33606: IFFALSE 33610
// continue ;
33608: GO 33588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33610: LD_VAR 0 11
33614: PPUSH
33615: LD_VAR 0 12
33619: PPUSH
33620: CALL_OW 351
33624: PUSH
33625: LD_VAR 0 11
33629: PPUSH
33630: LD_VAR 0 12
33634: PPUSH
33635: CALL_OW 554
33639: AND
33640: IFFALSE 33680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33642: LD_ADDR_VAR 0 13
33646: PUSH
33647: LD_VAR 0 13
33651: PPUSH
33652: LD_VAR 0 13
33656: PUSH
33657: LD_INT 1
33659: PLUS
33660: PPUSH
33661: LD_VAR 0 11
33665: PUSH
33666: LD_VAR 0 12
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PPUSH
33675: CALL_OW 2
33679: ST_TO_ADDR
// end ;
33680: GO 33588
33682: POP
33683: POP
33684: GO 33568
33686: POP
33687: POP
// if not list then
33688: LD_VAR 0 13
33692: NOT
33693: IFFALSE 33697
// exit ;
33695: GO 33768
// for i in list do
33697: LD_ADDR_VAR 0 6
33701: PUSH
33702: LD_VAR 0 13
33706: PUSH
33707: FOR_IN
33708: IFFALSE 33766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33710: LD_VAR 0 1
33714: PPUSH
33715: LD_STRING M
33717: PUSH
33718: LD_VAR 0 6
33722: PUSH
33723: LD_INT 1
33725: ARRAY
33726: PUSH
33727: LD_VAR 0 6
33731: PUSH
33732: LD_INT 2
33734: ARRAY
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: PUSH
33757: EMPTY
33758: LIST
33759: PPUSH
33760: CALL_OW 447
33764: GO 33707
33766: POP
33767: POP
// end ;
33768: LD_VAR 0 5
33772: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33773: LD_EXP 137
33777: NOT
33778: IFFALSE 33828
33780: GO 33782
33782: DISABLE
// begin initHack := true ;
33783: LD_ADDR_EXP 137
33787: PUSH
33788: LD_INT 1
33790: ST_TO_ADDR
// hackTanks := [ ] ;
33791: LD_ADDR_EXP 138
33795: PUSH
33796: EMPTY
33797: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33798: LD_ADDR_EXP 139
33802: PUSH
33803: EMPTY
33804: ST_TO_ADDR
// hackLimit := 3 ;
33805: LD_ADDR_EXP 140
33809: PUSH
33810: LD_INT 3
33812: ST_TO_ADDR
// hackDist := 12 ;
33813: LD_ADDR_EXP 141
33817: PUSH
33818: LD_INT 12
33820: ST_TO_ADDR
// hackCounter := [ ] ;
33821: LD_ADDR_EXP 142
33825: PUSH
33826: EMPTY
33827: ST_TO_ADDR
// end ;
33828: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33829: LD_EXP 137
33833: PUSH
33834: LD_INT 34
33836: PUSH
33837: LD_EXP 60
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PPUSH
33846: CALL_OW 69
33850: AND
33851: IFFALSE 34106
33853: GO 33855
33855: DISABLE
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
// begin enable ;
33860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33861: LD_ADDR_VAR 0 1
33865: PUSH
33866: LD_INT 34
33868: PUSH
33869: LD_EXP 60
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PPUSH
33878: CALL_OW 69
33882: PUSH
33883: FOR_IN
33884: IFFALSE 34104
// begin if not i in hackTanks then
33886: LD_VAR 0 1
33890: PUSH
33891: LD_EXP 138
33895: IN
33896: NOT
33897: IFFALSE 33980
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33899: LD_ADDR_EXP 138
33903: PUSH
33904: LD_EXP 138
33908: PPUSH
33909: LD_EXP 138
33913: PUSH
33914: LD_INT 1
33916: PLUS
33917: PPUSH
33918: LD_VAR 0 1
33922: PPUSH
33923: CALL_OW 1
33927: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33928: LD_ADDR_EXP 139
33932: PUSH
33933: LD_EXP 139
33937: PPUSH
33938: LD_EXP 139
33942: PUSH
33943: LD_INT 1
33945: PLUS
33946: PPUSH
33947: EMPTY
33948: PPUSH
33949: CALL_OW 1
33953: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33954: LD_ADDR_EXP 142
33958: PUSH
33959: LD_EXP 142
33963: PPUSH
33964: LD_EXP 142
33968: PUSH
33969: LD_INT 1
33971: PLUS
33972: PPUSH
33973: EMPTY
33974: PPUSH
33975: CALL_OW 1
33979: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 302
33989: NOT
33990: IFFALSE 34003
// begin HackUnlinkAll ( i ) ;
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL 34109 0 1
// continue ;
34001: GO 33883
// end ; HackCheckCapturedStatus ( i ) ;
34003: LD_VAR 0 1
34007: PPUSH
34008: CALL 34552 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34012: LD_ADDR_VAR 0 2
34016: PUSH
34017: LD_INT 81
34019: PUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 255
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 33
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 91
34046: PUSH
34047: LD_VAR 0 1
34051: PUSH
34052: LD_EXP 141
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 50
34064: PUSH
34065: EMPTY
34066: LIST
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 69
34078: ST_TO_ADDR
// if not tmp then
34079: LD_VAR 0 2
34083: NOT
34084: IFFALSE 34088
// continue ;
34086: GO 33883
// HackLink ( i , tmp ) ;
34088: LD_VAR 0 1
34092: PPUSH
34093: LD_VAR 0 2
34097: PPUSH
34098: CALL 34245 0 2
// end ;
34102: GO 33883
34104: POP
34105: POP
// end ;
34106: PPOPN 2
34108: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34109: LD_INT 0
34111: PPUSH
34112: PPUSH
34113: PPUSH
// if not hack in hackTanks then
34114: LD_VAR 0 1
34118: PUSH
34119: LD_EXP 138
34123: IN
34124: NOT
34125: IFFALSE 34129
// exit ;
34127: GO 34240
// index := GetElementIndex ( hackTanks , hack ) ;
34129: LD_ADDR_VAR 0 4
34133: PUSH
34134: LD_EXP 138
34138: PPUSH
34139: LD_VAR 0 1
34143: PPUSH
34144: CALL 41714 0 2
34148: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34149: LD_EXP 139
34153: PUSH
34154: LD_VAR 0 4
34158: ARRAY
34159: IFFALSE 34240
// begin for i in hackTanksCaptured [ index ] do
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_EXP 139
34170: PUSH
34171: LD_VAR 0 4
34175: ARRAY
34176: PUSH
34177: FOR_IN
34178: IFFALSE 34204
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34180: LD_VAR 0 3
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: LD_VAR 0 3
34193: PUSH
34194: LD_INT 2
34196: ARRAY
34197: PPUSH
34198: CALL_OW 235
34202: GO 34177
34204: POP
34205: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34206: LD_ADDR_EXP 139
34210: PUSH
34211: LD_EXP 139
34215: PPUSH
34216: LD_VAR 0 4
34220: PPUSH
34221: EMPTY
34222: PPUSH
34223: CALL_OW 1
34227: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34228: LD_VAR 0 1
34232: PPUSH
34233: LD_INT 0
34235: PPUSH
34236: CALL_OW 505
// end ; end ;
34240: LD_VAR 0 2
34244: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34245: LD_INT 0
34247: PPUSH
34248: PPUSH
34249: PPUSH
// if not hack in hackTanks or not vehicles then
34250: LD_VAR 0 1
34254: PUSH
34255: LD_EXP 138
34259: IN
34260: NOT
34261: PUSH
34262: LD_VAR 0 2
34266: NOT
34267: OR
34268: IFFALSE 34272
// exit ;
34270: GO 34547
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34272: LD_ADDR_VAR 0 2
34276: PUSH
34277: LD_VAR 0 1
34281: PPUSH
34282: LD_VAR 0 2
34286: PPUSH
34287: LD_INT 1
34289: PPUSH
34290: LD_INT 1
34292: PPUSH
34293: CALL 42364 0 4
34297: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34298: LD_ADDR_VAR 0 5
34302: PUSH
34303: LD_EXP 138
34307: PPUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL 41714 0 2
34317: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34318: LD_EXP 139
34322: PUSH
34323: LD_VAR 0 5
34327: ARRAY
34328: PUSH
34329: LD_EXP 140
34333: LESS
34334: IFFALSE 34523
// begin for i := 1 to vehicles do
34336: LD_ADDR_VAR 0 4
34340: PUSH
34341: DOUBLE
34342: LD_INT 1
34344: DEC
34345: ST_TO_ADDR
34346: LD_VAR 0 2
34350: PUSH
34351: FOR_TO
34352: IFFALSE 34521
// begin if hackTanksCaptured [ index ] = hackLimit then
34354: LD_EXP 139
34358: PUSH
34359: LD_VAR 0 5
34363: ARRAY
34364: PUSH
34365: LD_EXP 140
34369: EQUAL
34370: IFFALSE 34374
// break ;
34372: GO 34521
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34374: LD_ADDR_EXP 142
34378: PUSH
34379: LD_EXP 142
34383: PPUSH
34384: LD_VAR 0 5
34388: PPUSH
34389: LD_EXP 142
34393: PUSH
34394: LD_VAR 0 5
34398: ARRAY
34399: PUSH
34400: LD_INT 1
34402: PLUS
34403: PPUSH
34404: CALL_OW 1
34408: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34409: LD_ADDR_EXP 139
34413: PUSH
34414: LD_EXP 139
34418: PPUSH
34419: LD_VAR 0 5
34423: PUSH
34424: LD_EXP 139
34428: PUSH
34429: LD_VAR 0 5
34433: ARRAY
34434: PUSH
34435: LD_INT 1
34437: PLUS
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PPUSH
34443: LD_VAR 0 2
34447: PUSH
34448: LD_VAR 0 4
34452: ARRAY
34453: PUSH
34454: LD_VAR 0 2
34458: PUSH
34459: LD_VAR 0 4
34463: ARRAY
34464: PPUSH
34465: CALL_OW 255
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PPUSH
34474: CALL 41929 0 3
34478: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34479: LD_VAR 0 2
34483: PUSH
34484: LD_VAR 0 4
34488: ARRAY
34489: PPUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 255
34499: PPUSH
34500: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34504: LD_VAR 0 2
34508: PUSH
34509: LD_VAR 0 4
34513: ARRAY
34514: PPUSH
34515: CALL_OW 141
// end ;
34519: GO 34351
34521: POP
34522: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34523: LD_VAR 0 1
34527: PPUSH
34528: LD_EXP 139
34532: PUSH
34533: LD_VAR 0 5
34537: ARRAY
34538: PUSH
34539: LD_INT 0
34541: PLUS
34542: PPUSH
34543: CALL_OW 505
// end ;
34547: LD_VAR 0 3
34551: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34552: LD_INT 0
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
// if not hack in hackTanks then
34558: LD_VAR 0 1
34562: PUSH
34563: LD_EXP 138
34567: IN
34568: NOT
34569: IFFALSE 34573
// exit ;
34571: GO 34813
// index := GetElementIndex ( hackTanks , hack ) ;
34573: LD_ADDR_VAR 0 4
34577: PUSH
34578: LD_EXP 138
34582: PPUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL 41714 0 2
34592: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: DOUBLE
34599: LD_EXP 139
34603: PUSH
34604: LD_VAR 0 4
34608: ARRAY
34609: INC
34610: ST_TO_ADDR
34611: LD_INT 1
34613: PUSH
34614: FOR_DOWNTO
34615: IFFALSE 34787
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34617: LD_ADDR_VAR 0 5
34621: PUSH
34622: LD_EXP 139
34626: PUSH
34627: LD_VAR 0 4
34631: ARRAY
34632: PUSH
34633: LD_VAR 0 3
34637: ARRAY
34638: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34639: LD_VAR 0 5
34643: PUSH
34644: LD_INT 1
34646: ARRAY
34647: PPUSH
34648: CALL_OW 302
34652: NOT
34653: PUSH
34654: LD_VAR 0 5
34658: PUSH
34659: LD_INT 1
34661: ARRAY
34662: PPUSH
34663: CALL_OW 255
34667: PUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 255
34677: NONEQUAL
34678: OR
34679: IFFALSE 34785
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34681: LD_VAR 0 5
34685: PUSH
34686: LD_INT 1
34688: ARRAY
34689: PPUSH
34690: CALL_OW 305
34694: PUSH
34695: LD_VAR 0 5
34699: PUSH
34700: LD_INT 1
34702: ARRAY
34703: PPUSH
34704: CALL_OW 255
34708: PUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 255
34718: EQUAL
34719: AND
34720: IFFALSE 34744
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34722: LD_VAR 0 5
34726: PUSH
34727: LD_INT 1
34729: ARRAY
34730: PPUSH
34731: LD_VAR 0 5
34735: PUSH
34736: LD_INT 2
34738: ARRAY
34739: PPUSH
34740: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34744: LD_ADDR_EXP 139
34748: PUSH
34749: LD_EXP 139
34753: PPUSH
34754: LD_VAR 0 4
34758: PPUSH
34759: LD_EXP 139
34763: PUSH
34764: LD_VAR 0 4
34768: ARRAY
34769: PPUSH
34770: LD_VAR 0 3
34774: PPUSH
34775: CALL_OW 3
34779: PPUSH
34780: CALL_OW 1
34784: ST_TO_ADDR
// end ; end ;
34785: GO 34614
34787: POP
34788: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34789: LD_VAR 0 1
34793: PPUSH
34794: LD_EXP 139
34798: PUSH
34799: LD_VAR 0 4
34803: ARRAY
34804: PUSH
34805: LD_INT 0
34807: PLUS
34808: PPUSH
34809: CALL_OW 505
// end ;
34813: LD_VAR 0 2
34817: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34818: LD_INT 0
34820: PPUSH
34821: PPUSH
34822: PPUSH
34823: PPUSH
// if not hack in hackTanks then
34824: LD_VAR 0 1
34828: PUSH
34829: LD_EXP 138
34833: IN
34834: NOT
34835: IFFALSE 34839
// exit ;
34837: GO 34924
// index := GetElementIndex ( hackTanks , hack ) ;
34839: LD_ADDR_VAR 0 5
34843: PUSH
34844: LD_EXP 138
34848: PPUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL 41714 0 2
34858: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34859: LD_ADDR_VAR 0 4
34863: PUSH
34864: DOUBLE
34865: LD_INT 1
34867: DEC
34868: ST_TO_ADDR
34869: LD_EXP 139
34873: PUSH
34874: LD_VAR 0 5
34878: ARRAY
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34922
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34883: LD_EXP 139
34887: PUSH
34888: LD_VAR 0 5
34892: ARRAY
34893: PUSH
34894: LD_VAR 0 4
34898: ARRAY
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: PUSH
34904: LD_VAR 0 2
34908: EQUAL
34909: IFFALSE 34920
// KillUnit ( vehicle ) ;
34911: LD_VAR 0 2
34915: PPUSH
34916: CALL_OW 66
34920: GO 34880
34922: POP
34923: POP
// end ;
34924: LD_VAR 0 3
34928: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34929: LD_EXP 143
34933: NOT
34934: IFFALSE 34969
34936: GO 34938
34938: DISABLE
// begin initMiner := true ;
34939: LD_ADDR_EXP 143
34943: PUSH
34944: LD_INT 1
34946: ST_TO_ADDR
// minersList := [ ] ;
34947: LD_ADDR_EXP 144
34951: PUSH
34952: EMPTY
34953: ST_TO_ADDR
// minerMinesList := [ ] ;
34954: LD_ADDR_EXP 145
34958: PUSH
34959: EMPTY
34960: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34961: LD_ADDR_EXP 146
34965: PUSH
34966: LD_INT 5
34968: ST_TO_ADDR
// end ;
34969: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34970: LD_EXP 143
34974: PUSH
34975: LD_INT 34
34977: PUSH
34978: LD_EXP 65
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PPUSH
34987: CALL_OW 69
34991: AND
34992: IFFALSE 35455
34994: GO 34996
34996: DISABLE
34997: LD_INT 0
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
// begin enable ;
35003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35004: LD_ADDR_VAR 0 1
35008: PUSH
35009: LD_INT 34
35011: PUSH
35012: LD_EXP 65
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PPUSH
35021: CALL_OW 69
35025: PUSH
35026: FOR_IN
35027: IFFALSE 35099
// begin if not i in minersList then
35029: LD_VAR 0 1
35033: PUSH
35034: LD_EXP 144
35038: IN
35039: NOT
35040: IFFALSE 35097
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35042: LD_ADDR_EXP 144
35046: PUSH
35047: LD_EXP 144
35051: PPUSH
35052: LD_EXP 144
35056: PUSH
35057: LD_INT 1
35059: PLUS
35060: PPUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 1
35070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35071: LD_ADDR_EXP 145
35075: PUSH
35076: LD_EXP 145
35080: PPUSH
35081: LD_EXP 145
35085: PUSH
35086: LD_INT 1
35088: PLUS
35089: PPUSH
35090: EMPTY
35091: PPUSH
35092: CALL_OW 1
35096: ST_TO_ADDR
// end end ;
35097: GO 35026
35099: POP
35100: POP
// for i := minerMinesList downto 1 do
35101: LD_ADDR_VAR 0 1
35105: PUSH
35106: DOUBLE
35107: LD_EXP 145
35111: INC
35112: ST_TO_ADDR
35113: LD_INT 1
35115: PUSH
35116: FOR_DOWNTO
35117: IFFALSE 35453
// begin if IsLive ( minersList [ i ] ) then
35119: LD_EXP 144
35123: PUSH
35124: LD_VAR 0 1
35128: ARRAY
35129: PPUSH
35130: CALL_OW 300
35134: IFFALSE 35162
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35136: LD_EXP 144
35140: PUSH
35141: LD_VAR 0 1
35145: ARRAY
35146: PPUSH
35147: LD_EXP 145
35151: PUSH
35152: LD_VAR 0 1
35156: ARRAY
35157: PPUSH
35158: CALL_OW 505
// if not minerMinesList [ i ] then
35162: LD_EXP 145
35166: PUSH
35167: LD_VAR 0 1
35171: ARRAY
35172: NOT
35173: IFFALSE 35177
// continue ;
35175: GO 35116
// for j := minerMinesList [ i ] downto 1 do
35177: LD_ADDR_VAR 0 2
35181: PUSH
35182: DOUBLE
35183: LD_EXP 145
35187: PUSH
35188: LD_VAR 0 1
35192: ARRAY
35193: INC
35194: ST_TO_ADDR
35195: LD_INT 1
35197: PUSH
35198: FOR_DOWNTO
35199: IFFALSE 35449
// begin side := GetSide ( minersList [ i ] ) ;
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_EXP 144
35210: PUSH
35211: LD_VAR 0 1
35215: ARRAY
35216: PPUSH
35217: CALL_OW 255
35221: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35222: LD_ADDR_VAR 0 4
35226: PUSH
35227: LD_EXP 145
35231: PUSH
35232: LD_VAR 0 1
35236: ARRAY
35237: PUSH
35238: LD_VAR 0 2
35242: ARRAY
35243: PUSH
35244: LD_INT 1
35246: ARRAY
35247: PPUSH
35248: LD_EXP 145
35252: PUSH
35253: LD_VAR 0 1
35257: ARRAY
35258: PUSH
35259: LD_VAR 0 2
35263: ARRAY
35264: PUSH
35265: LD_INT 2
35267: ARRAY
35268: PPUSH
35269: CALL_OW 428
35273: ST_TO_ADDR
// if not tmp then
35274: LD_VAR 0 4
35278: NOT
35279: IFFALSE 35283
// continue ;
35281: GO 35198
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35283: LD_VAR 0 4
35287: PUSH
35288: LD_INT 81
35290: PUSH
35291: LD_VAR 0 3
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PPUSH
35300: CALL_OW 69
35304: IN
35305: PUSH
35306: LD_EXP 145
35310: PUSH
35311: LD_VAR 0 1
35315: ARRAY
35316: PUSH
35317: LD_VAR 0 2
35321: ARRAY
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PPUSH
35327: LD_EXP 145
35331: PUSH
35332: LD_VAR 0 1
35336: ARRAY
35337: PUSH
35338: LD_VAR 0 2
35342: ARRAY
35343: PUSH
35344: LD_INT 2
35346: ARRAY
35347: PPUSH
35348: CALL_OW 458
35352: AND
35353: IFFALSE 35447
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35355: LD_EXP 145
35359: PUSH
35360: LD_VAR 0 1
35364: ARRAY
35365: PUSH
35366: LD_VAR 0 2
35370: ARRAY
35371: PUSH
35372: LD_INT 1
35374: ARRAY
35375: PPUSH
35376: LD_EXP 145
35380: PUSH
35381: LD_VAR 0 1
35385: ARRAY
35386: PUSH
35387: LD_VAR 0 2
35391: ARRAY
35392: PUSH
35393: LD_INT 2
35395: ARRAY
35396: PPUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35406: LD_ADDR_EXP 145
35410: PUSH
35411: LD_EXP 145
35415: PPUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: LD_EXP 145
35425: PUSH
35426: LD_VAR 0 1
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 2
35436: PPUSH
35437: CALL_OW 3
35441: PPUSH
35442: CALL_OW 1
35446: ST_TO_ADDR
// end ; end ;
35447: GO 35198
35449: POP
35450: POP
// end ;
35451: GO 35116
35453: POP
35454: POP
// end ;
35455: PPOPN 4
35457: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35458: LD_INT 0
35460: PPUSH
35461: PPUSH
// result := false ;
35462: LD_ADDR_VAR 0 4
35466: PUSH
35467: LD_INT 0
35469: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35470: LD_VAR 0 1
35474: PPUSH
35475: CALL_OW 264
35479: PUSH
35480: LD_EXP 65
35484: EQUAL
35485: NOT
35486: IFFALSE 35490
// exit ;
35488: GO 35730
// index := GetElementIndex ( minersList , unit ) ;
35490: LD_ADDR_VAR 0 5
35494: PUSH
35495: LD_EXP 144
35499: PPUSH
35500: LD_VAR 0 1
35504: PPUSH
35505: CALL 41714 0 2
35509: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35510: LD_EXP 145
35514: PUSH
35515: LD_VAR 0 5
35519: ARRAY
35520: PUSH
35521: LD_EXP 146
35525: GREATEREQUAL
35526: IFFALSE 35530
// exit ;
35528: GO 35730
// ComMoveXY ( unit , x , y ) ;
35530: LD_VAR 0 1
35534: PPUSH
35535: LD_VAR 0 2
35539: PPUSH
35540: LD_VAR 0 3
35544: PPUSH
35545: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35549: LD_INT 35
35551: PPUSH
35552: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35556: LD_VAR 0 1
35560: PPUSH
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_VAR 0 3
35570: PPUSH
35571: CALL 72486 0 3
35575: NOT
35576: PUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 314
35586: AND
35587: IFFALSE 35591
// exit ;
35589: GO 35730
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 3
35600: PPUSH
35601: CALL_OW 428
35605: PUSH
35606: LD_VAR 0 1
35610: EQUAL
35611: PUSH
35612: LD_VAR 0 1
35616: PPUSH
35617: CALL_OW 314
35621: NOT
35622: AND
35623: IFFALSE 35549
// PlaySoundXY ( x , y , PlantMine ) ;
35625: LD_VAR 0 2
35629: PPUSH
35630: LD_VAR 0 3
35634: PPUSH
35635: LD_STRING PlantMine
35637: PPUSH
35638: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35642: LD_VAR 0 2
35646: PPUSH
35647: LD_VAR 0 3
35651: PPUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 255
35661: PPUSH
35662: LD_INT 0
35664: PPUSH
35665: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35669: LD_ADDR_EXP 145
35673: PUSH
35674: LD_EXP 145
35678: PPUSH
35679: LD_VAR 0 5
35683: PUSH
35684: LD_EXP 145
35688: PUSH
35689: LD_VAR 0 5
35693: ARRAY
35694: PUSH
35695: LD_INT 1
35697: PLUS
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PPUSH
35703: LD_VAR 0 2
35707: PUSH
35708: LD_VAR 0 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PPUSH
35717: CALL 41929 0 3
35721: ST_TO_ADDR
// result := true ;
35722: LD_ADDR_VAR 0 4
35726: PUSH
35727: LD_INT 1
35729: ST_TO_ADDR
// end ;
35730: LD_VAR 0 4
35734: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35735: LD_INT 0
35737: PPUSH
35738: PPUSH
35739: PPUSH
// if not unit in minersList then
35740: LD_VAR 0 1
35744: PUSH
35745: LD_EXP 144
35749: IN
35750: NOT
35751: IFFALSE 35755
// exit ;
35753: GO 36147
// index := GetElementIndex ( minersList , unit ) ;
35755: LD_ADDR_VAR 0 6
35759: PUSH
35760: LD_EXP 144
35764: PPUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL 41714 0 2
35774: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35775: LD_ADDR_VAR 0 5
35779: PUSH
35780: DOUBLE
35781: LD_EXP 145
35785: PUSH
35786: LD_VAR 0 6
35790: ARRAY
35791: INC
35792: ST_TO_ADDR
35793: LD_INT 1
35795: PUSH
35796: FOR_DOWNTO
35797: IFFALSE 35958
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35799: LD_EXP 145
35803: PUSH
35804: LD_VAR 0 6
35808: ARRAY
35809: PUSH
35810: LD_VAR 0 5
35814: ARRAY
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PUSH
35820: LD_VAR 0 2
35824: EQUAL
35825: PUSH
35826: LD_EXP 145
35830: PUSH
35831: LD_VAR 0 6
35835: ARRAY
35836: PUSH
35837: LD_VAR 0 5
35841: ARRAY
35842: PUSH
35843: LD_INT 2
35845: ARRAY
35846: PUSH
35847: LD_VAR 0 3
35851: EQUAL
35852: AND
35853: IFFALSE 35956
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35855: LD_EXP 145
35859: PUSH
35860: LD_VAR 0 6
35864: ARRAY
35865: PUSH
35866: LD_VAR 0 5
35870: ARRAY
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: PPUSH
35876: LD_EXP 145
35880: PUSH
35881: LD_VAR 0 6
35885: ARRAY
35886: PUSH
35887: LD_VAR 0 5
35891: ARRAY
35892: PUSH
35893: LD_INT 2
35895: ARRAY
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 255
35906: PPUSH
35907: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35911: LD_ADDR_EXP 145
35915: PUSH
35916: LD_EXP 145
35920: PPUSH
35921: LD_VAR 0 6
35925: PPUSH
35926: LD_EXP 145
35930: PUSH
35931: LD_VAR 0 6
35935: ARRAY
35936: PPUSH
35937: LD_VAR 0 5
35941: PPUSH
35942: CALL_OW 3
35946: PPUSH
35947: CALL_OW 1
35951: ST_TO_ADDR
// exit ;
35952: POP
35953: POP
35954: GO 36147
// end ; end ;
35956: GO 35796
35958: POP
35959: POP
// for i := minerMinesList [ index ] downto 1 do
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: DOUBLE
35966: LD_EXP 145
35970: PUSH
35971: LD_VAR 0 6
35975: ARRAY
35976: INC
35977: ST_TO_ADDR
35978: LD_INT 1
35980: PUSH
35981: FOR_DOWNTO
35982: IFFALSE 36145
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35984: LD_EXP 145
35988: PUSH
35989: LD_VAR 0 6
35993: ARRAY
35994: PUSH
35995: LD_VAR 0 5
35999: ARRAY
36000: PUSH
36001: LD_INT 1
36003: ARRAY
36004: PPUSH
36005: LD_EXP 145
36009: PUSH
36010: LD_VAR 0 6
36014: ARRAY
36015: PUSH
36016: LD_VAR 0 5
36020: ARRAY
36021: PUSH
36022: LD_INT 2
36024: ARRAY
36025: PPUSH
36026: LD_VAR 0 2
36030: PPUSH
36031: LD_VAR 0 3
36035: PPUSH
36036: CALL_OW 298
36040: PUSH
36041: LD_INT 6
36043: LESS
36044: IFFALSE 36143
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36046: LD_EXP 145
36050: PUSH
36051: LD_VAR 0 6
36055: ARRAY
36056: PUSH
36057: LD_VAR 0 5
36061: ARRAY
36062: PUSH
36063: LD_INT 1
36065: ARRAY
36066: PPUSH
36067: LD_EXP 145
36071: PUSH
36072: LD_VAR 0 6
36076: ARRAY
36077: PUSH
36078: LD_VAR 0 5
36082: ARRAY
36083: PUSH
36084: LD_INT 2
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 255
36097: PPUSH
36098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36102: LD_ADDR_EXP 145
36106: PUSH
36107: LD_EXP 145
36111: PPUSH
36112: LD_VAR 0 6
36116: PPUSH
36117: LD_EXP 145
36121: PUSH
36122: LD_VAR 0 6
36126: ARRAY
36127: PPUSH
36128: LD_VAR 0 5
36132: PPUSH
36133: CALL_OW 3
36137: PPUSH
36138: CALL_OW 1
36142: ST_TO_ADDR
// end ; end ;
36143: GO 35981
36145: POP
36146: POP
// end ;
36147: LD_VAR 0 4
36151: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36152: LD_INT 0
36154: PPUSH
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 264
36172: PUSH
36173: LD_EXP 65
36177: EQUAL
36178: NOT
36179: PUSH
36180: LD_VAR 0 1
36184: PUSH
36185: LD_EXP 144
36189: IN
36190: NOT
36191: OR
36192: IFFALSE 36196
// exit ;
36194: GO 36518
// index := GetElementIndex ( minersList , unit ) ;
36196: LD_ADDR_VAR 0 6
36200: PUSH
36201: LD_EXP 144
36205: PPUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL 41714 0 2
36215: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36216: LD_ADDR_VAR 0 8
36220: PUSH
36221: LD_EXP 146
36225: PUSH
36226: LD_EXP 145
36230: PUSH
36231: LD_VAR 0 6
36235: ARRAY
36236: MINUS
36237: ST_TO_ADDR
// if not minesFreeAmount then
36238: LD_VAR 0 8
36242: NOT
36243: IFFALSE 36247
// exit ;
36245: GO 36518
// tmp := [ ] ;
36247: LD_ADDR_VAR 0 7
36251: PUSH
36252: EMPTY
36253: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36254: LD_ADDR_VAR 0 5
36258: PUSH
36259: DOUBLE
36260: LD_INT 1
36262: DEC
36263: ST_TO_ADDR
36264: LD_VAR 0 8
36268: PUSH
36269: FOR_TO
36270: IFFALSE 36465
// begin _d := rand ( 0 , 5 ) ;
36272: LD_ADDR_VAR 0 11
36276: PUSH
36277: LD_INT 0
36279: PPUSH
36280: LD_INT 5
36282: PPUSH
36283: CALL_OW 12
36287: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36288: LD_ADDR_VAR 0 12
36292: PUSH
36293: LD_INT 2
36295: PPUSH
36296: LD_INT 6
36298: PPUSH
36299: CALL_OW 12
36303: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36304: LD_ADDR_VAR 0 9
36308: PUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: LD_VAR 0 11
36318: PPUSH
36319: LD_VAR 0 12
36323: PPUSH
36324: CALL_OW 272
36328: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36329: LD_ADDR_VAR 0 10
36333: PUSH
36334: LD_VAR 0 3
36338: PPUSH
36339: LD_VAR 0 11
36343: PPUSH
36344: LD_VAR 0 12
36348: PPUSH
36349: CALL_OW 273
36353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36354: LD_VAR 0 9
36358: PPUSH
36359: LD_VAR 0 10
36363: PPUSH
36364: CALL_OW 488
36368: PUSH
36369: LD_VAR 0 9
36373: PUSH
36374: LD_VAR 0 10
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_VAR 0 7
36387: IN
36388: NOT
36389: AND
36390: PUSH
36391: LD_VAR 0 9
36395: PPUSH
36396: LD_VAR 0 10
36400: PPUSH
36401: CALL_OW 458
36405: NOT
36406: AND
36407: IFFALSE 36449
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36409: LD_ADDR_VAR 0 7
36413: PUSH
36414: LD_VAR 0 7
36418: PPUSH
36419: LD_VAR 0 7
36423: PUSH
36424: LD_INT 1
36426: PLUS
36427: PPUSH
36428: LD_VAR 0 9
36432: PUSH
36433: LD_VAR 0 10
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: CALL_OW 1
36446: ST_TO_ADDR
36447: GO 36463
// i := i - 1 ;
36449: LD_ADDR_VAR 0 5
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_INT 1
36461: MINUS
36462: ST_TO_ADDR
// end ;
36463: GO 36269
36465: POP
36466: POP
// for i in tmp do
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: LD_VAR 0 7
36476: PUSH
36477: FOR_IN
36478: IFFALSE 36516
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36480: LD_VAR 0 1
36484: PPUSH
36485: LD_VAR 0 5
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PPUSH
36494: LD_VAR 0 5
36498: PUSH
36499: LD_INT 2
36501: ARRAY
36502: PPUSH
36503: CALL 35458 0 3
36507: NOT
36508: IFFALSE 36514
// exit ;
36510: POP
36511: POP
36512: GO 36518
36514: GO 36477
36516: POP
36517: POP
// end ;
36518: LD_VAR 0 4
36522: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36523: LD_INT 0
36525: PPUSH
36526: PPUSH
36527: PPUSH
36528: PPUSH
36529: PPUSH
36530: PPUSH
36531: PPUSH
// if not GetClass ( unit ) = class_sniper then
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 257
36541: PUSH
36542: LD_INT 5
36544: EQUAL
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 36938
// dist := 8 ;
36550: LD_ADDR_VAR 0 5
36554: PUSH
36555: LD_INT 8
36557: ST_TO_ADDR
// viewRange := 12 ;
36558: LD_ADDR_VAR 0 7
36562: PUSH
36563: LD_INT 12
36565: ST_TO_ADDR
// side := GetSide ( unit ) ;
36566: LD_ADDR_VAR 0 6
36570: PUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 255
36580: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36581: LD_INT 61
36583: PPUSH
36584: LD_VAR 0 6
36588: PPUSH
36589: CALL_OW 321
36593: PUSH
36594: LD_INT 2
36596: EQUAL
36597: IFFALSE 36607
// viewRange := 16 ;
36599: LD_ADDR_VAR 0 7
36603: PUSH
36604: LD_INT 16
36606: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36607: LD_VAR 0 1
36611: PPUSH
36612: LD_VAR 0 2
36616: PPUSH
36617: LD_VAR 0 3
36621: PPUSH
36622: CALL_OW 297
36626: PUSH
36627: LD_VAR 0 5
36631: GREATER
36632: IFFALSE 36711
// begin ComMoveXY ( unit , x , y ) ;
36634: LD_VAR 0 1
36638: PPUSH
36639: LD_VAR 0 2
36643: PPUSH
36644: LD_VAR 0 3
36648: PPUSH
36649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36653: LD_INT 35
36655: PPUSH
36656: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36660: LD_VAR 0 1
36664: PPUSH
36665: LD_VAR 0 2
36669: PPUSH
36670: LD_VAR 0 3
36674: PPUSH
36675: CALL 72486 0 3
36679: NOT
36680: IFFALSE 36684
// exit ;
36682: GO 36938
// until GetDistUnitXY ( unit , x , y ) < dist ;
36684: LD_VAR 0 1
36688: PPUSH
36689: LD_VAR 0 2
36693: PPUSH
36694: LD_VAR 0 3
36698: PPUSH
36699: CALL_OW 297
36703: PUSH
36704: LD_VAR 0 5
36708: LESS
36709: IFFALSE 36653
// end ; ComTurnXY ( unit , x , y ) ;
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: CALL_OW 118
// wait ( 5 ) ;
36730: LD_INT 5
36732: PPUSH
36733: CALL_OW 67
// _d := GetDir ( unit ) ;
36737: LD_ADDR_VAR 0 10
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 254
36751: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36752: LD_ADDR_VAR 0 8
36756: PUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 250
36766: PPUSH
36767: LD_VAR 0 10
36771: PPUSH
36772: LD_VAR 0 5
36776: PPUSH
36777: CALL_OW 272
36781: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 251
36796: PPUSH
36797: LD_VAR 0 10
36801: PPUSH
36802: LD_VAR 0 5
36806: PPUSH
36807: CALL_OW 273
36811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36812: LD_VAR 0 8
36816: PPUSH
36817: LD_VAR 0 9
36821: PPUSH
36822: CALL_OW 488
36826: NOT
36827: IFFALSE 36831
// exit ;
36829: GO 36938
// ComAnimCustom ( unit , 1 ) ;
36831: LD_VAR 0 1
36835: PPUSH
36836: LD_INT 1
36838: PPUSH
36839: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36843: LD_VAR 0 8
36847: PPUSH
36848: LD_VAR 0 9
36852: PPUSH
36853: LD_VAR 0 6
36857: PPUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: CALL_OW 330
// repeat wait ( 1 ) ;
36867: LD_INT 1
36869: PPUSH
36870: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36874: LD_VAR 0 1
36878: PPUSH
36879: CALL_OW 316
36883: PUSH
36884: LD_VAR 0 1
36888: PPUSH
36889: CALL_OW 314
36893: OR
36894: PUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 302
36904: NOT
36905: OR
36906: PUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 301
36916: OR
36917: IFFALSE 36867
// RemoveSeeing ( _x , _y , side ) ;
36919: LD_VAR 0 8
36923: PPUSH
36924: LD_VAR 0 9
36928: PPUSH
36929: LD_VAR 0 6
36933: PPUSH
36934: CALL_OW 331
// end ; end_of_file
36938: LD_VAR 0 4
36942: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36943: LD_INT 0
36945: PPUSH
36946: PPUSH
// if exist_mode then
36947: LD_VAR 0 2
36951: IFFALSE 36976
// unit := CreateCharacter ( prefix & ident ) else
36953: LD_ADDR_VAR 0 5
36957: PUSH
36958: LD_VAR 0 3
36962: PUSH
36963: LD_VAR 0 1
36967: STR
36968: PPUSH
36969: CALL_OW 34
36973: ST_TO_ADDR
36974: GO 36991
// unit := NewCharacter ( ident ) ;
36976: LD_ADDR_VAR 0 5
36980: PUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 25
36990: ST_TO_ADDR
// result := unit ;
36991: LD_ADDR_VAR 0 4
36995: PUSH
36996: LD_VAR 0 5
37000: ST_TO_ADDR
// end ;
37001: LD_VAR 0 4
37005: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37006: LD_INT 0
37008: PPUSH
37009: PPUSH
// if not side or not nation then
37010: LD_VAR 0 1
37014: NOT
37015: PUSH
37016: LD_VAR 0 2
37020: NOT
37021: OR
37022: IFFALSE 37026
// exit ;
37024: GO 37794
// case nation of nation_american :
37026: LD_VAR 0 2
37030: PUSH
37031: LD_INT 1
37033: DOUBLE
37034: EQUAL
37035: IFTRUE 37039
37037: GO 37253
37039: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37040: LD_ADDR_VAR 0 4
37044: PUSH
37045: LD_INT 35
37047: PUSH
37048: LD_INT 45
37050: PUSH
37051: LD_INT 46
37053: PUSH
37054: LD_INT 47
37056: PUSH
37057: LD_INT 82
37059: PUSH
37060: LD_INT 83
37062: PUSH
37063: LD_INT 84
37065: PUSH
37066: LD_INT 85
37068: PUSH
37069: LD_INT 86
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: LD_INT 6
37080: PUSH
37081: LD_INT 15
37083: PUSH
37084: LD_INT 16
37086: PUSH
37087: LD_INT 7
37089: PUSH
37090: LD_INT 12
37092: PUSH
37093: LD_INT 13
37095: PUSH
37096: LD_INT 10
37098: PUSH
37099: LD_INT 14
37101: PUSH
37102: LD_INT 20
37104: PUSH
37105: LD_INT 21
37107: PUSH
37108: LD_INT 22
37110: PUSH
37111: LD_INT 25
37113: PUSH
37114: LD_INT 32
37116: PUSH
37117: LD_INT 27
37119: PUSH
37120: LD_INT 36
37122: PUSH
37123: LD_INT 69
37125: PUSH
37126: LD_INT 39
37128: PUSH
37129: LD_INT 34
37131: PUSH
37132: LD_INT 40
37134: PUSH
37135: LD_INT 48
37137: PUSH
37138: LD_INT 49
37140: PUSH
37141: LD_INT 50
37143: PUSH
37144: LD_INT 51
37146: PUSH
37147: LD_INT 52
37149: PUSH
37150: LD_INT 53
37152: PUSH
37153: LD_INT 54
37155: PUSH
37156: LD_INT 55
37158: PUSH
37159: LD_INT 56
37161: PUSH
37162: LD_INT 57
37164: PUSH
37165: LD_INT 58
37167: PUSH
37168: LD_INT 59
37170: PUSH
37171: LD_INT 60
37173: PUSH
37174: LD_INT 61
37176: PUSH
37177: LD_INT 62
37179: PUSH
37180: LD_INT 80
37182: PUSH
37183: LD_INT 82
37185: PUSH
37186: LD_INT 83
37188: PUSH
37189: LD_INT 84
37191: PUSH
37192: LD_INT 85
37194: PUSH
37195: LD_INT 86
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
37251: GO 37718
37253: LD_INT 2
37255: DOUBLE
37256: EQUAL
37257: IFTRUE 37261
37259: GO 37487
37261: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37262: LD_ADDR_VAR 0 4
37266: PUSH
37267: LD_INT 35
37269: PUSH
37270: LD_INT 45
37272: PUSH
37273: LD_INT 46
37275: PUSH
37276: LD_INT 47
37278: PUSH
37279: LD_INT 82
37281: PUSH
37282: LD_INT 83
37284: PUSH
37285: LD_INT 84
37287: PUSH
37288: LD_INT 85
37290: PUSH
37291: LD_INT 87
37293: PUSH
37294: LD_INT 70
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 11
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 4
37308: PUSH
37309: LD_INT 5
37311: PUSH
37312: LD_INT 6
37314: PUSH
37315: LD_INT 15
37317: PUSH
37318: LD_INT 18
37320: PUSH
37321: LD_INT 7
37323: PUSH
37324: LD_INT 17
37326: PUSH
37327: LD_INT 8
37329: PUSH
37330: LD_INT 20
37332: PUSH
37333: LD_INT 21
37335: PUSH
37336: LD_INT 22
37338: PUSH
37339: LD_INT 72
37341: PUSH
37342: LD_INT 26
37344: PUSH
37345: LD_INT 69
37347: PUSH
37348: LD_INT 39
37350: PUSH
37351: LD_INT 40
37353: PUSH
37354: LD_INT 41
37356: PUSH
37357: LD_INT 42
37359: PUSH
37360: LD_INT 43
37362: PUSH
37363: LD_INT 48
37365: PUSH
37366: LD_INT 49
37368: PUSH
37369: LD_INT 50
37371: PUSH
37372: LD_INT 51
37374: PUSH
37375: LD_INT 52
37377: PUSH
37378: LD_INT 53
37380: PUSH
37381: LD_INT 54
37383: PUSH
37384: LD_INT 55
37386: PUSH
37387: LD_INT 56
37389: PUSH
37390: LD_INT 60
37392: PUSH
37393: LD_INT 61
37395: PUSH
37396: LD_INT 62
37398: PUSH
37399: LD_INT 66
37401: PUSH
37402: LD_INT 67
37404: PUSH
37405: LD_INT 68
37407: PUSH
37408: LD_INT 81
37410: PUSH
37411: LD_INT 82
37413: PUSH
37414: LD_INT 83
37416: PUSH
37417: LD_INT 84
37419: PUSH
37420: LD_INT 85
37422: PUSH
37423: LD_INT 87
37425: PUSH
37426: LD_INT 88
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
37485: GO 37718
37487: LD_INT 3
37489: DOUBLE
37490: EQUAL
37491: IFTRUE 37495
37493: GO 37717
37495: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: LD_INT 46
37503: PUSH
37504: LD_INT 47
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 82
37515: PUSH
37516: LD_INT 83
37518: PUSH
37519: LD_INT 84
37521: PUSH
37522: LD_INT 85
37524: PUSH
37525: LD_INT 86
37527: PUSH
37528: LD_INT 11
37530: PUSH
37531: LD_INT 9
37533: PUSH
37534: LD_INT 20
37536: PUSH
37537: LD_INT 19
37539: PUSH
37540: LD_INT 21
37542: PUSH
37543: LD_INT 24
37545: PUSH
37546: LD_INT 22
37548: PUSH
37549: LD_INT 25
37551: PUSH
37552: LD_INT 28
37554: PUSH
37555: LD_INT 29
37557: PUSH
37558: LD_INT 30
37560: PUSH
37561: LD_INT 31
37563: PUSH
37564: LD_INT 37
37566: PUSH
37567: LD_INT 38
37569: PUSH
37570: LD_INT 32
37572: PUSH
37573: LD_INT 27
37575: PUSH
37576: LD_INT 33
37578: PUSH
37579: LD_INT 69
37581: PUSH
37582: LD_INT 39
37584: PUSH
37585: LD_INT 34
37587: PUSH
37588: LD_INT 40
37590: PUSH
37591: LD_INT 71
37593: PUSH
37594: LD_INT 23
37596: PUSH
37597: LD_INT 44
37599: PUSH
37600: LD_INT 48
37602: PUSH
37603: LD_INT 49
37605: PUSH
37606: LD_INT 50
37608: PUSH
37609: LD_INT 51
37611: PUSH
37612: LD_INT 52
37614: PUSH
37615: LD_INT 53
37617: PUSH
37618: LD_INT 54
37620: PUSH
37621: LD_INT 55
37623: PUSH
37624: LD_INT 56
37626: PUSH
37627: LD_INT 57
37629: PUSH
37630: LD_INT 58
37632: PUSH
37633: LD_INT 59
37635: PUSH
37636: LD_INT 63
37638: PUSH
37639: LD_INT 64
37641: PUSH
37642: LD_INT 65
37644: PUSH
37645: LD_INT 82
37647: PUSH
37648: LD_INT 83
37650: PUSH
37651: LD_INT 84
37653: PUSH
37654: LD_INT 85
37656: PUSH
37657: LD_INT 86
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
37715: GO 37718
37717: POP
// if state > - 1 and state < 3 then
37718: LD_VAR 0 3
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: GREATER
37727: PUSH
37728: LD_VAR 0 3
37732: PUSH
37733: LD_INT 3
37735: LESS
37736: AND
37737: IFFALSE 37794
// for i in result do
37739: LD_ADDR_VAR 0 5
37743: PUSH
37744: LD_VAR 0 4
37748: PUSH
37749: FOR_IN
37750: IFFALSE 37792
// if GetTech ( i , side ) <> state then
37752: LD_VAR 0 5
37756: PPUSH
37757: LD_VAR 0 1
37761: PPUSH
37762: CALL_OW 321
37766: PUSH
37767: LD_VAR 0 3
37771: NONEQUAL
37772: IFFALSE 37790
// result := result diff i ;
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_VAR 0 4
37783: PUSH
37784: LD_VAR 0 5
37788: DIFF
37789: ST_TO_ADDR
37790: GO 37749
37792: POP
37793: POP
// end ;
37794: LD_VAR 0 4
37798: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37799: LD_INT 0
37801: PPUSH
37802: PPUSH
37803: PPUSH
// result := true ;
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: LD_INT 1
37811: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37812: LD_ADDR_VAR 0 5
37816: PUSH
37817: LD_VAR 0 2
37821: PPUSH
37822: CALL_OW 480
37826: ST_TO_ADDR
// if not tmp then
37827: LD_VAR 0 5
37831: NOT
37832: IFFALSE 37836
// exit ;
37834: GO 37885
// for i in tmp do
37836: LD_ADDR_VAR 0 4
37840: PUSH
37841: LD_VAR 0 5
37845: PUSH
37846: FOR_IN
37847: IFFALSE 37883
// if GetTech ( i , side ) <> state_researched then
37849: LD_VAR 0 4
37853: PPUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 321
37863: PUSH
37864: LD_INT 2
37866: NONEQUAL
37867: IFFALSE 37881
// begin result := false ;
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_INT 0
37876: ST_TO_ADDR
// exit ;
37877: POP
37878: POP
37879: GO 37885
// end ;
37881: GO 37846
37883: POP
37884: POP
// end ;
37885: LD_VAR 0 3
37889: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37890: LD_INT 0
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37905: LD_VAR 0 1
37909: NOT
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 257
37920: PUSH
37921: LD_INT 9
37923: NONEQUAL
37924: OR
37925: IFFALSE 37929
// exit ;
37927: GO 38502
// side := GetSide ( unit ) ;
37929: LD_ADDR_VAR 0 9
37933: PUSH
37934: LD_VAR 0 1
37938: PPUSH
37939: CALL_OW 255
37943: ST_TO_ADDR
// tech_space := tech_spacanom ;
37944: LD_ADDR_VAR 0 12
37948: PUSH
37949: LD_INT 29
37951: ST_TO_ADDR
// tech_time := tech_taurad ;
37952: LD_ADDR_VAR 0 13
37956: PUSH
37957: LD_INT 28
37959: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37960: LD_ADDR_VAR 0 11
37964: PUSH
37965: LD_VAR 0 1
37969: PPUSH
37970: CALL_OW 310
37974: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37975: LD_VAR 0 11
37979: PPUSH
37980: CALL_OW 247
37984: PUSH
37985: LD_INT 2
37987: EQUAL
37988: IFFALSE 37992
// exit ;
37990: GO 38502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37992: LD_ADDR_VAR 0 8
37996: PUSH
37997: LD_INT 81
37999: PUSH
38000: LD_VAR 0 9
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 21
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 69
38034: ST_TO_ADDR
// if not tmp then
38035: LD_VAR 0 8
38039: NOT
38040: IFFALSE 38044
// exit ;
38042: GO 38502
// if in_unit then
38044: LD_VAR 0 11
38048: IFFALSE 38072
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38050: LD_ADDR_VAR 0 10
38054: PUSH
38055: LD_VAR 0 8
38059: PPUSH
38060: LD_VAR 0 11
38064: PPUSH
38065: CALL_OW 74
38069: ST_TO_ADDR
38070: GO 38092
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38072: LD_ADDR_VAR 0 10
38076: PUSH
38077: LD_VAR 0 8
38081: PPUSH
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 74
38091: ST_TO_ADDR
// if not enemy then
38092: LD_VAR 0 10
38096: NOT
38097: IFFALSE 38101
// exit ;
38099: GO 38502
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38101: LD_VAR 0 11
38105: PUSH
38106: LD_VAR 0 11
38110: PPUSH
38111: LD_VAR 0 10
38115: PPUSH
38116: CALL_OW 296
38120: PUSH
38121: LD_INT 13
38123: GREATER
38124: AND
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: LD_VAR 0 10
38135: PPUSH
38136: CALL_OW 296
38140: PUSH
38141: LD_INT 12
38143: GREATER
38144: OR
38145: IFFALSE 38149
// exit ;
38147: GO 38502
// missile := [ 1 ] ;
38149: LD_ADDR_VAR 0 14
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38160: LD_VAR 0 9
38164: PPUSH
38165: LD_VAR 0 12
38169: PPUSH
38170: CALL_OW 325
38174: IFFALSE 38203
// missile := Insert ( missile , missile + 1 , 2 ) ;
38176: LD_ADDR_VAR 0 14
38180: PUSH
38181: LD_VAR 0 14
38185: PPUSH
38186: LD_VAR 0 14
38190: PUSH
38191: LD_INT 1
38193: PLUS
38194: PPUSH
38195: LD_INT 2
38197: PPUSH
38198: CALL_OW 2
38202: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38203: LD_VAR 0 9
38207: PPUSH
38208: LD_VAR 0 13
38212: PPUSH
38213: CALL_OW 325
38217: PUSH
38218: LD_VAR 0 10
38222: PPUSH
38223: CALL_OW 255
38227: PPUSH
38228: LD_VAR 0 13
38232: PPUSH
38233: CALL_OW 325
38237: NOT
38238: AND
38239: IFFALSE 38268
// missile := Insert ( missile , missile + 1 , 3 ) ;
38241: LD_ADDR_VAR 0 14
38245: PUSH
38246: LD_VAR 0 14
38250: PPUSH
38251: LD_VAR 0 14
38255: PUSH
38256: LD_INT 1
38258: PLUS
38259: PPUSH
38260: LD_INT 3
38262: PPUSH
38263: CALL_OW 2
38267: ST_TO_ADDR
// if missile < 2 then
38268: LD_VAR 0 14
38272: PUSH
38273: LD_INT 2
38275: LESS
38276: IFFALSE 38280
// exit ;
38278: GO 38502
// x := GetX ( enemy ) ;
38280: LD_ADDR_VAR 0 4
38284: PUSH
38285: LD_VAR 0 10
38289: PPUSH
38290: CALL_OW 250
38294: ST_TO_ADDR
// y := GetY ( enemy ) ;
38295: LD_ADDR_VAR 0 5
38299: PUSH
38300: LD_VAR 0 10
38304: PPUSH
38305: CALL_OW 251
38309: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38310: LD_ADDR_VAR 0 6
38314: PUSH
38315: LD_VAR 0 4
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PPUSH
38324: LD_INT 1
38326: PPUSH
38327: CALL_OW 12
38331: PLUS
38332: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 5
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PPUSH
38347: LD_INT 1
38349: PPUSH
38350: CALL_OW 12
38354: PLUS
38355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38356: LD_VAR 0 6
38360: PPUSH
38361: LD_VAR 0 7
38365: PPUSH
38366: CALL_OW 488
38370: NOT
38371: IFFALSE 38393
// begin _x := x ;
38373: LD_ADDR_VAR 0 6
38377: PUSH
38378: LD_VAR 0 4
38382: ST_TO_ADDR
// _y := y ;
38383: LD_ADDR_VAR 0 7
38387: PUSH
38388: LD_VAR 0 5
38392: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38393: LD_ADDR_VAR 0 3
38397: PUSH
38398: LD_INT 1
38400: PPUSH
38401: LD_VAR 0 14
38405: PPUSH
38406: CALL_OW 12
38410: ST_TO_ADDR
// case i of 1 :
38411: LD_VAR 0 3
38415: PUSH
38416: LD_INT 1
38418: DOUBLE
38419: EQUAL
38420: IFTRUE 38424
38422: GO 38441
38424: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38425: LD_VAR 0 1
38429: PPUSH
38430: LD_VAR 0 10
38434: PPUSH
38435: CALL_OW 115
38439: GO 38502
38441: LD_INT 2
38443: DOUBLE
38444: EQUAL
38445: IFTRUE 38449
38447: GO 38471
38449: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38450: LD_VAR 0 1
38454: PPUSH
38455: LD_VAR 0 6
38459: PPUSH
38460: LD_VAR 0 7
38464: PPUSH
38465: CALL_OW 153
38469: GO 38502
38471: LD_INT 3
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38501
38479: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_VAR 0 6
38489: PPUSH
38490: LD_VAR 0 7
38494: PPUSH
38495: CALL_OW 154
38499: GO 38502
38501: POP
// end ;
38502: LD_VAR 0 2
38506: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38507: LD_INT 0
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
// if not unit or not building then
38515: LD_VAR 0 1
38519: NOT
38520: PUSH
38521: LD_VAR 0 2
38525: NOT
38526: OR
38527: IFFALSE 38531
// exit ;
38529: GO 38689
// x := GetX ( building ) ;
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: CALL_OW 250
38545: ST_TO_ADDR
// y := GetY ( building ) ;
38546: LD_ADDR_VAR 0 6
38550: PUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: CALL_OW 251
38560: ST_TO_ADDR
// for i = 0 to 5 do
38561: LD_ADDR_VAR 0 4
38565: PUSH
38566: DOUBLE
38567: LD_INT 0
38569: DEC
38570: ST_TO_ADDR
38571: LD_INT 5
38573: PUSH
38574: FOR_TO
38575: IFFALSE 38687
// begin _x := ShiftX ( x , i , 3 ) ;
38577: LD_ADDR_VAR 0 7
38581: PUSH
38582: LD_VAR 0 5
38586: PPUSH
38587: LD_VAR 0 4
38591: PPUSH
38592: LD_INT 3
38594: PPUSH
38595: CALL_OW 272
38599: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38600: LD_ADDR_VAR 0 8
38604: PUSH
38605: LD_VAR 0 6
38609: PPUSH
38610: LD_VAR 0 4
38614: PPUSH
38615: LD_INT 3
38617: PPUSH
38618: CALL_OW 273
38622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38623: LD_VAR 0 7
38627: PPUSH
38628: LD_VAR 0 8
38632: PPUSH
38633: CALL_OW 488
38637: NOT
38638: IFFALSE 38642
// continue ;
38640: GO 38574
// if HexInfo ( _x , _y ) = 0 then
38642: LD_VAR 0 7
38646: PPUSH
38647: LD_VAR 0 8
38651: PPUSH
38652: CALL_OW 428
38656: PUSH
38657: LD_INT 0
38659: EQUAL
38660: IFFALSE 38685
// begin ComMoveXY ( unit , _x , _y ) ;
38662: LD_VAR 0 1
38666: PPUSH
38667: LD_VAR 0 7
38671: PPUSH
38672: LD_VAR 0 8
38676: PPUSH
38677: CALL_OW 111
// exit ;
38681: POP
38682: POP
38683: GO 38689
// end ; end ;
38685: GO 38574
38687: POP
38688: POP
// end ;
38689: LD_VAR 0 3
38693: RET
// export function ScanBase ( side , base_area ) ; begin
38694: LD_INT 0
38696: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38697: LD_ADDR_VAR 0 3
38701: PUSH
38702: LD_VAR 0 2
38706: PPUSH
38707: LD_INT 81
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PPUSH
38719: CALL_OW 70
38723: ST_TO_ADDR
// end ;
38724: LD_VAR 0 3
38728: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38729: LD_INT 0
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
// result := false ;
38735: LD_ADDR_VAR 0 2
38739: PUSH
38740: LD_INT 0
38742: ST_TO_ADDR
// side := GetSide ( unit ) ;
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 255
38757: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38758: LD_ADDR_VAR 0 4
38762: PUSH
38763: LD_VAR 0 1
38767: PPUSH
38768: CALL_OW 248
38772: ST_TO_ADDR
// case nat of 1 :
38773: LD_VAR 0 4
38777: PUSH
38778: LD_INT 1
38780: DOUBLE
38781: EQUAL
38782: IFTRUE 38786
38784: GO 38797
38786: POP
// tech := tech_lassight ; 2 :
38787: LD_ADDR_VAR 0 5
38791: PUSH
38792: LD_INT 12
38794: ST_TO_ADDR
38795: GO 38836
38797: LD_INT 2
38799: DOUBLE
38800: EQUAL
38801: IFTRUE 38805
38803: GO 38816
38805: POP
// tech := tech_mortar ; 3 :
38806: LD_ADDR_VAR 0 5
38810: PUSH
38811: LD_INT 41
38813: ST_TO_ADDR
38814: GO 38836
38816: LD_INT 3
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38835
38824: POP
// tech := tech_bazooka ; end ;
38825: LD_ADDR_VAR 0 5
38829: PUSH
38830: LD_INT 44
38832: ST_TO_ADDR
38833: GO 38836
38835: POP
// if Researched ( side , tech ) then
38836: LD_VAR 0 3
38840: PPUSH
38841: LD_VAR 0 5
38845: PPUSH
38846: CALL_OW 325
38850: IFFALSE 38877
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38852: LD_ADDR_VAR 0 2
38856: PUSH
38857: LD_INT 5
38859: PUSH
38860: LD_INT 8
38862: PUSH
38863: LD_INT 9
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: LD_VAR 0 4
38875: ARRAY
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 2
38881: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
// if not mines then
38887: LD_VAR 0 2
38891: NOT
38892: IFFALSE 38896
// exit ;
38894: GO 39040
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38896: LD_ADDR_VAR 0 5
38900: PUSH
38901: LD_INT 81
38903: PUSH
38904: LD_VAR 0 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 21
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PPUSH
38934: CALL_OW 69
38938: ST_TO_ADDR
// for i in mines do
38939: LD_ADDR_VAR 0 4
38943: PUSH
38944: LD_VAR 0 2
38948: PUSH
38949: FOR_IN
38950: IFFALSE 39038
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38952: LD_VAR 0 4
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: LD_VAR 0 4
38965: PUSH
38966: LD_INT 2
38968: ARRAY
38969: PPUSH
38970: CALL_OW 458
38974: NOT
38975: IFFALSE 38979
// continue ;
38977: GO 38949
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38979: LD_VAR 0 4
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 4
38992: PUSH
38993: LD_INT 2
38995: ARRAY
38996: PPUSH
38997: CALL_OW 428
39001: PUSH
39002: LD_VAR 0 5
39006: IN
39007: IFFALSE 39036
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39009: LD_VAR 0 4
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PPUSH
39018: LD_VAR 0 4
39022: PUSH
39023: LD_INT 2
39025: ARRAY
39026: PPUSH
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL_OW 456
// end ;
39036: GO 38949
39038: POP
39039: POP
// end ;
39040: LD_VAR 0 3
39044: RET
// export function Count ( array ) ; var i ; begin
39045: LD_INT 0
39047: PPUSH
39048: PPUSH
// result := 0 ;
39049: LD_ADDR_VAR 0 2
39053: PUSH
39054: LD_INT 0
39056: ST_TO_ADDR
// for i in array do
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_VAR 0 1
39066: PUSH
39067: FOR_IN
39068: IFFALSE 39092
// if i then
39070: LD_VAR 0 3
39074: IFFALSE 39090
// result := result + 1 ;
39076: LD_ADDR_VAR 0 2
39080: PUSH
39081: LD_VAR 0 2
39085: PUSH
39086: LD_INT 1
39088: PLUS
39089: ST_TO_ADDR
39090: GO 39067
39092: POP
39093: POP
// end ;
39094: LD_VAR 0 2
39098: RET
// export function IsEmpty ( building ) ; begin
39099: LD_INT 0
39101: PPUSH
// if not building then
39102: LD_VAR 0 1
39106: NOT
39107: IFFALSE 39111
// exit ;
39109: GO 39154
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39111: LD_ADDR_VAR 0 2
39115: PUSH
39116: LD_VAR 0 1
39120: PUSH
39121: LD_INT 22
39123: PUSH
39124: LD_VAR 0 1
39128: PPUSH
39129: CALL_OW 255
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 58
39140: PUSH
39141: EMPTY
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PPUSH
39148: CALL_OW 69
39152: IN
39153: ST_TO_ADDR
// end ;
39154: LD_VAR 0 2
39158: RET
// export function IsNotFull ( building ) ; begin
39159: LD_INT 0
39161: PPUSH
// if not building then
39162: LD_VAR 0 1
39166: NOT
39167: IFFALSE 39171
// exit ;
39169: GO 39190
// result := UnitsInside ( building ) < 6 ;
39171: LD_ADDR_VAR 0 2
39175: PUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 313
39185: PUSH
39186: LD_INT 6
39188: LESS
39189: ST_TO_ADDR
// end ;
39190: LD_VAR 0 2
39194: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39195: LD_INT 0
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
// tmp := [ ] ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: EMPTY
39207: ST_TO_ADDR
// list := [ ] ;
39208: LD_ADDR_VAR 0 5
39212: PUSH
39213: EMPTY
39214: ST_TO_ADDR
// for i = 16 to 25 do
39215: LD_ADDR_VAR 0 4
39219: PUSH
39220: DOUBLE
39221: LD_INT 16
39223: DEC
39224: ST_TO_ADDR
39225: LD_INT 25
39227: PUSH
39228: FOR_TO
39229: IFFALSE 39302
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39231: LD_ADDR_VAR 0 3
39235: PUSH
39236: LD_VAR 0 3
39240: PUSH
39241: LD_INT 22
39243: PUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 255
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 91
39260: PUSH
39261: LD_VAR 0 1
39265: PUSH
39266: LD_INT 6
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 30
39276: PUSH
39277: LD_VAR 0 4
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: PPUSH
39294: CALL_OW 69
39298: ADD
39299: ST_TO_ADDR
39300: GO 39228
39302: POP
39303: POP
// for i = 1 to tmp do
39304: LD_ADDR_VAR 0 4
39308: PUSH
39309: DOUBLE
39310: LD_INT 1
39312: DEC
39313: ST_TO_ADDR
39314: LD_VAR 0 3
39318: PUSH
39319: FOR_TO
39320: IFFALSE 39408
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 5
39331: PUSH
39332: LD_VAR 0 3
39336: PUSH
39337: LD_VAR 0 4
39341: ARRAY
39342: PPUSH
39343: CALL_OW 266
39347: PUSH
39348: LD_VAR 0 3
39352: PUSH
39353: LD_VAR 0 4
39357: ARRAY
39358: PPUSH
39359: CALL_OW 250
39363: PUSH
39364: LD_VAR 0 3
39368: PUSH
39369: LD_VAR 0 4
39373: ARRAY
39374: PPUSH
39375: CALL_OW 251
39379: PUSH
39380: LD_VAR 0 3
39384: PUSH
39385: LD_VAR 0 4
39389: ARRAY
39390: PPUSH
39391: CALL_OW 254
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: ADD
39405: ST_TO_ADDR
39406: GO 39319
39408: POP
39409: POP
// result := list ;
39410: LD_ADDR_VAR 0 2
39414: PUSH
39415: LD_VAR 0 5
39419: ST_TO_ADDR
// end ;
39420: LD_VAR 0 2
39424: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39425: LD_INT 0
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
// if not factory then
39434: LD_VAR 0 1
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 40036
// if control = control_apeman then
39443: LD_VAR 0 4
39447: PUSH
39448: LD_INT 5
39450: EQUAL
39451: IFFALSE 39560
// begin tmp := UnitsInside ( factory ) ;
39453: LD_ADDR_VAR 0 8
39457: PUSH
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 313
39467: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39468: LD_VAR 0 8
39472: PPUSH
39473: LD_INT 25
39475: PUSH
39476: LD_INT 12
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PPUSH
39483: CALL_OW 72
39487: NOT
39488: IFFALSE 39498
// control := control_manual ;
39490: LD_ADDR_VAR 0 4
39494: PUSH
39495: LD_INT 1
39497: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39498: LD_ADDR_VAR 0 8
39502: PUSH
39503: LD_VAR 0 1
39507: PPUSH
39508: CALL 39195 0 1
39512: ST_TO_ADDR
// if tmp then
39513: LD_VAR 0 8
39517: IFFALSE 39560
// begin for i in tmp do
39519: LD_ADDR_VAR 0 7
39523: PUSH
39524: LD_VAR 0 8
39528: PUSH
39529: FOR_IN
39530: IFFALSE 39558
// if i [ 1 ] = b_ext_radio then
39532: LD_VAR 0 7
39536: PUSH
39537: LD_INT 1
39539: ARRAY
39540: PUSH
39541: LD_INT 22
39543: EQUAL
39544: IFFALSE 39556
// begin control := control_remote ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_INT 2
39553: ST_TO_ADDR
// break ;
39554: GO 39558
// end ;
39556: GO 39529
39558: POP
39559: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39560: LD_VAR 0 1
39564: PPUSH
39565: LD_VAR 0 2
39569: PPUSH
39570: LD_VAR 0 3
39574: PPUSH
39575: LD_VAR 0 4
39579: PPUSH
39580: LD_VAR 0 5
39584: PPUSH
39585: CALL_OW 448
39589: IFFALSE 39624
// begin result := [ chassis , engine , control , weapon ] ;
39591: LD_ADDR_VAR 0 6
39595: PUSH
39596: LD_VAR 0 2
39600: PUSH
39601: LD_VAR 0 3
39605: PUSH
39606: LD_VAR 0 4
39610: PUSH
39611: LD_VAR 0 5
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// exit ;
39622: GO 40036
// end ; _chassis := AvailableChassisList ( factory ) ;
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 475
39638: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39639: LD_ADDR_VAR 0 11
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 476
39653: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39654: LD_ADDR_VAR 0 12
39658: PUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 477
39668: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39669: LD_ADDR_VAR 0 10
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 478
39683: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39684: LD_VAR 0 9
39688: NOT
39689: PUSH
39690: LD_VAR 0 11
39694: NOT
39695: OR
39696: PUSH
39697: LD_VAR 0 12
39701: NOT
39702: OR
39703: PUSH
39704: LD_VAR 0 10
39708: NOT
39709: OR
39710: IFFALSE 39745
// begin result := [ chassis , engine , control , weapon ] ;
39712: LD_ADDR_VAR 0 6
39716: PUSH
39717: LD_VAR 0 2
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: LD_VAR 0 4
39731: PUSH
39732: LD_VAR 0 5
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// exit ;
39743: GO 40036
// end ; if not chassis in _chassis then
39745: LD_VAR 0 2
39749: PUSH
39750: LD_VAR 0 9
39754: IN
39755: NOT
39756: IFFALSE 39782
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39758: LD_ADDR_VAR 0 2
39762: PUSH
39763: LD_VAR 0 9
39767: PUSH
39768: LD_INT 1
39770: PPUSH
39771: LD_VAR 0 9
39775: PPUSH
39776: CALL_OW 12
39780: ARRAY
39781: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: CALL 40041 0 2
39796: NOT
39797: IFFALSE 39856
// repeat engine := _engine [ 1 ] ;
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_VAR 0 11
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39813: LD_ADDR_VAR 0 11
39817: PUSH
39818: LD_VAR 0 11
39822: PPUSH
39823: LD_INT 1
39825: PPUSH
39826: CALL_OW 3
39830: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39831: LD_VAR 0 2
39835: PPUSH
39836: LD_VAR 0 3
39840: PPUSH
39841: CALL 40041 0 2
39845: PUSH
39846: LD_VAR 0 11
39850: PUSH
39851: EMPTY
39852: EQUAL
39853: OR
39854: IFFALSE 39799
// if not control in _control then
39856: LD_VAR 0 4
39860: PUSH
39861: LD_VAR 0 12
39865: IN
39866: NOT
39867: IFFALSE 39893
// control := _control [ rand ( 1 , _control ) ] ;
39869: LD_ADDR_VAR 0 4
39873: PUSH
39874: LD_VAR 0 12
39878: PUSH
39879: LD_INT 1
39881: PPUSH
39882: LD_VAR 0 12
39886: PPUSH
39887: CALL_OW 12
39891: ARRAY
39892: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39893: LD_VAR 0 2
39897: PPUSH
39898: LD_VAR 0 5
39902: PPUSH
39903: CALL 40261 0 2
39907: NOT
39908: IFFALSE 39967
// repeat weapon := _weapon [ 1 ] ;
39910: LD_ADDR_VAR 0 5
39914: PUSH
39915: LD_VAR 0 10
39919: PUSH
39920: LD_INT 1
39922: ARRAY
39923: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39924: LD_ADDR_VAR 0 10
39928: PUSH
39929: LD_VAR 0 10
39933: PPUSH
39934: LD_INT 1
39936: PPUSH
39937: CALL_OW 3
39941: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39942: LD_VAR 0 2
39946: PPUSH
39947: LD_VAR 0 5
39951: PPUSH
39952: CALL 40261 0 2
39956: PUSH
39957: LD_VAR 0 10
39961: PUSH
39962: EMPTY
39963: EQUAL
39964: OR
39965: IFFALSE 39910
// result := [ ] ;
39967: LD_ADDR_VAR 0 6
39971: PUSH
39972: EMPTY
39973: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39974: LD_VAR 0 1
39978: PPUSH
39979: LD_VAR 0 2
39983: PPUSH
39984: LD_VAR 0 3
39988: PPUSH
39989: LD_VAR 0 4
39993: PPUSH
39994: LD_VAR 0 5
39998: PPUSH
39999: CALL_OW 448
40003: IFFALSE 40036
// result := [ chassis , engine , control , weapon ] ;
40005: LD_ADDR_VAR 0 6
40009: PUSH
40010: LD_VAR 0 2
40014: PUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_VAR 0 4
40024: PUSH
40025: LD_VAR 0 5
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
// end ;
40036: LD_VAR 0 6
40040: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40041: LD_INT 0
40043: PPUSH
// if not chassis or not engine then
40044: LD_VAR 0 1
40048: NOT
40049: PUSH
40050: LD_VAR 0 2
40054: NOT
40055: OR
40056: IFFALSE 40060
// exit ;
40058: GO 40256
// case engine of engine_solar :
40060: LD_VAR 0 2
40064: PUSH
40065: LD_INT 2
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40111
40073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_INT 11
40081: PUSH
40082: LD_INT 12
40084: PUSH
40085: LD_INT 13
40087: PUSH
40088: LD_INT 14
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: ST_TO_ADDR
40109: GO 40240
40111: LD_INT 1
40113: DOUBLE
40114: EQUAL
40115: IFTRUE 40119
40117: GO 40181
40119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40120: LD_ADDR_VAR 0 3
40124: PUSH
40125: LD_INT 11
40127: PUSH
40128: LD_INT 12
40130: PUSH
40131: LD_INT 13
40133: PUSH
40134: LD_INT 14
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 3
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: LD_INT 5
40151: PUSH
40152: LD_INT 21
40154: PUSH
40155: LD_INT 23
40157: PUSH
40158: LD_INT 22
40160: PUSH
40161: LD_INT 24
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: ST_TO_ADDR
40179: GO 40240
40181: LD_INT 3
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40189
40187: GO 40239
40189: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40190: LD_ADDR_VAR 0 3
40194: PUSH
40195: LD_INT 13
40197: PUSH
40198: LD_INT 14
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 4
40209: PUSH
40210: LD_INT 5
40212: PUSH
40213: LD_INT 21
40215: PUSH
40216: LD_INT 22
40218: PUSH
40219: LD_INT 23
40221: PUSH
40222: LD_INT 24
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
40237: GO 40240
40239: POP
// result := ( chassis in result ) ;
40240: LD_ADDR_VAR 0 3
40244: PUSH
40245: LD_VAR 0 1
40249: PUSH
40250: LD_VAR 0 3
40254: IN
40255: ST_TO_ADDR
// end ;
40256: LD_VAR 0 3
40260: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40261: LD_INT 0
40263: PPUSH
// if not chassis or not weapon then
40264: LD_VAR 0 1
40268: NOT
40269: PUSH
40270: LD_VAR 0 2
40274: NOT
40275: OR
40276: IFFALSE 40280
// exit ;
40278: GO 41342
// case weapon of us_machine_gun :
40280: LD_VAR 0 2
40284: PUSH
40285: LD_INT 2
40287: DOUBLE
40288: EQUAL
40289: IFTRUE 40293
40291: GO 40323
40293: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40294: LD_ADDR_VAR 0 3
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: LD_INT 5
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
40321: GO 41326
40323: LD_INT 3
40325: DOUBLE
40326: EQUAL
40327: IFTRUE 40331
40329: GO 40361
40331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40332: LD_ADDR_VAR 0 3
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 4
40348: PUSH
40349: LD_INT 5
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: ST_TO_ADDR
40359: GO 41326
40361: LD_INT 11
40363: DOUBLE
40364: EQUAL
40365: IFTRUE 40369
40367: GO 40399
40369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 4
40386: PUSH
40387: LD_INT 5
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: ST_TO_ADDR
40397: GO 41326
40399: LD_INT 4
40401: DOUBLE
40402: EQUAL
40403: IFTRUE 40407
40405: GO 40433
40407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40408: LD_ADDR_VAR 0 3
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 4
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
40431: GO 41326
40433: LD_INT 5
40435: DOUBLE
40436: EQUAL
40437: IFTRUE 40441
40439: GO 40467
40441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40442: LD_ADDR_VAR 0 3
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 3
40452: PUSH
40453: LD_INT 4
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
40465: GO 41326
40467: LD_INT 9
40469: DOUBLE
40470: EQUAL
40471: IFTRUE 40475
40473: GO 40501
40475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40476: LD_ADDR_VAR 0 3
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 4
40489: PUSH
40490: LD_INT 5
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
40499: GO 41326
40501: LD_INT 7
40503: DOUBLE
40504: EQUAL
40505: IFTRUE 40509
40507: GO 40535
40509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40510: LD_ADDR_VAR 0 3
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: LD_INT 5
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: ST_TO_ADDR
40533: GO 41326
40535: LD_INT 12
40537: DOUBLE
40538: EQUAL
40539: IFTRUE 40543
40541: GO 40569
40543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40544: LD_ADDR_VAR 0 3
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 4
40557: PUSH
40558: LD_INT 5
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: ST_TO_ADDR
40567: GO 41326
40569: LD_INT 13
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40603
40577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: LD_INT 4
40591: PUSH
40592: LD_INT 5
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
40601: GO 41326
40603: LD_INT 14
40605: DOUBLE
40606: EQUAL
40607: IFTRUE 40611
40609: GO 40629
40611: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40612: LD_ADDR_VAR 0 3
40616: PUSH
40617: LD_INT 4
40619: PUSH
40620: LD_INT 5
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: ST_TO_ADDR
40627: GO 41326
40629: LD_INT 6
40631: DOUBLE
40632: EQUAL
40633: IFTRUE 40637
40635: GO 40655
40637: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: LD_INT 5
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: ST_TO_ADDR
40653: GO 41326
40655: LD_INT 10
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40681
40663: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: LD_INT 5
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: ST_TO_ADDR
40679: GO 41326
40681: LD_INT 22
40683: DOUBLE
40684: EQUAL
40685: IFTRUE 40689
40687: GO 40715
40689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: LD_INT 11
40697: PUSH
40698: LD_INT 12
40700: PUSH
40701: LD_INT 13
40703: PUSH
40704: LD_INT 14
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
40713: GO 41326
40715: LD_INT 23
40717: DOUBLE
40718: EQUAL
40719: IFTRUE 40723
40721: GO 40749
40723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_INT 11
40731: PUSH
40732: LD_INT 12
40734: PUSH
40735: LD_INT 13
40737: PUSH
40738: LD_INT 14
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
40747: GO 41326
40749: LD_INT 24
40751: DOUBLE
40752: EQUAL
40753: IFTRUE 40757
40755: GO 40783
40757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: LD_INT 11
40765: PUSH
40766: LD_INT 12
40768: PUSH
40769: LD_INT 13
40771: PUSH
40772: LD_INT 14
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: ST_TO_ADDR
40781: GO 41326
40783: LD_INT 30
40785: DOUBLE
40786: EQUAL
40787: IFTRUE 40791
40789: GO 40817
40791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40792: LD_ADDR_VAR 0 3
40796: PUSH
40797: LD_INT 11
40799: PUSH
40800: LD_INT 12
40802: PUSH
40803: LD_INT 13
40805: PUSH
40806: LD_INT 14
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
40815: GO 41326
40817: LD_INT 25
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40843
40825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 13
40833: PUSH
40834: LD_INT 14
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: ST_TO_ADDR
40841: GO 41326
40843: LD_INT 27
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40869
40851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 13
40859: PUSH
40860: LD_INT 14
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: ST_TO_ADDR
40867: GO 41326
40869: LD_EXP 63
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40905
40879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_INT 11
40887: PUSH
40888: LD_INT 12
40890: PUSH
40891: LD_INT 13
40893: PUSH
40894: LD_INT 14
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
40903: GO 41326
40905: LD_INT 28
40907: DOUBLE
40908: EQUAL
40909: IFTRUE 40913
40911: GO 40931
40913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40914: LD_ADDR_VAR 0 3
40918: PUSH
40919: LD_INT 13
40921: PUSH
40922: LD_INT 14
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: ST_TO_ADDR
40929: GO 41326
40931: LD_INT 29
40933: DOUBLE
40934: EQUAL
40935: IFTRUE 40939
40937: GO 40957
40939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40940: LD_ADDR_VAR 0 3
40944: PUSH
40945: LD_INT 13
40947: PUSH
40948: LD_INT 14
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: ST_TO_ADDR
40955: GO 41326
40957: LD_INT 31
40959: DOUBLE
40960: EQUAL
40961: IFTRUE 40965
40963: GO 40983
40965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_INT 13
40973: PUSH
40974: LD_INT 14
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: ST_TO_ADDR
40981: GO 41326
40983: LD_INT 26
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41009
40991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 13
40999: PUSH
41000: LD_INT 14
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: ST_TO_ADDR
41007: GO 41326
41009: LD_INT 42
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41043
41017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 21
41025: PUSH
41026: LD_INT 22
41028: PUSH
41029: LD_INT 23
41031: PUSH
41032: LD_INT 24
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: ST_TO_ADDR
41041: GO 41326
41043: LD_INT 43
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41051
41049: GO 41077
41051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_INT 21
41059: PUSH
41060: LD_INT 22
41062: PUSH
41063: LD_INT 23
41065: PUSH
41066: LD_INT 24
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
41075: GO 41326
41077: LD_INT 44
41079: DOUBLE
41080: EQUAL
41081: IFTRUE 41085
41083: GO 41111
41085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_INT 21
41093: PUSH
41094: LD_INT 22
41096: PUSH
41097: LD_INT 23
41099: PUSH
41100: LD_INT 24
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
41109: GO 41326
41111: LD_INT 45
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41119
41117: GO 41145
41119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_INT 21
41127: PUSH
41128: LD_INT 22
41130: PUSH
41131: LD_INT 23
41133: PUSH
41134: LD_INT 24
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
41143: GO 41326
41145: LD_INT 49
41147: DOUBLE
41148: EQUAL
41149: IFTRUE 41153
41151: GO 41179
41153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41154: LD_ADDR_VAR 0 3
41158: PUSH
41159: LD_INT 21
41161: PUSH
41162: LD_INT 22
41164: PUSH
41165: LD_INT 23
41167: PUSH
41168: LD_INT 24
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
41177: GO 41326
41179: LD_INT 51
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41187
41185: GO 41213
41187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: LD_INT 21
41195: PUSH
41196: LD_INT 22
41198: PUSH
41199: LD_INT 23
41201: PUSH
41202: LD_INT 24
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
41211: GO 41326
41213: LD_INT 52
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41247
41221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 21
41229: PUSH
41230: LD_INT 22
41232: PUSH
41233: LD_INT 23
41235: PUSH
41236: LD_INT 24
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
41245: GO 41326
41247: LD_INT 53
41249: DOUBLE
41250: EQUAL
41251: IFTRUE 41255
41253: GO 41273
41255: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_INT 23
41263: PUSH
41264: LD_INT 24
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: ST_TO_ADDR
41271: GO 41326
41273: LD_INT 46
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41281
41279: GO 41299
41281: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_INT 23
41289: PUSH
41290: LD_INT 24
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: ST_TO_ADDR
41297: GO 41326
41299: LD_INT 47
41301: DOUBLE
41302: EQUAL
41303: IFTRUE 41307
41305: GO 41325
41307: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_INT 23
41315: PUSH
41316: LD_INT 24
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: ST_TO_ADDR
41323: GO 41326
41325: POP
// result := ( chassis in result ) ;
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: LD_VAR 0 3
41340: IN
41341: ST_TO_ADDR
// end ;
41342: LD_VAR 0 3
41346: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41347: LD_INT 0
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
// result := array ;
41356: LD_ADDR_VAR 0 5
41360: PUSH
41361: LD_VAR 0 1
41365: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41366: LD_VAR 0 1
41370: NOT
41371: PUSH
41372: LD_VAR 0 2
41376: NOT
41377: OR
41378: PUSH
41379: LD_VAR 0 3
41383: NOT
41384: OR
41385: PUSH
41386: LD_VAR 0 2
41390: PUSH
41391: LD_VAR 0 1
41395: GREATER
41396: OR
41397: PUSH
41398: LD_VAR 0 3
41402: PUSH
41403: LD_VAR 0 1
41407: GREATER
41408: OR
41409: IFFALSE 41413
// exit ;
41411: GO 41709
// if direction then
41413: LD_VAR 0 4
41417: IFFALSE 41481
// begin d := 1 ;
41419: LD_ADDR_VAR 0 9
41423: PUSH
41424: LD_INT 1
41426: ST_TO_ADDR
// if i_from > i_to then
41427: LD_VAR 0 2
41431: PUSH
41432: LD_VAR 0 3
41436: GREATER
41437: IFFALSE 41463
// length := ( array - i_from ) + i_to else
41439: LD_ADDR_VAR 0 11
41443: PUSH
41444: LD_VAR 0 1
41448: PUSH
41449: LD_VAR 0 2
41453: MINUS
41454: PUSH
41455: LD_VAR 0 3
41459: PLUS
41460: ST_TO_ADDR
41461: GO 41479
// length := i_to - i_from ;
41463: LD_ADDR_VAR 0 11
41467: PUSH
41468: LD_VAR 0 3
41472: PUSH
41473: LD_VAR 0 2
41477: MINUS
41478: ST_TO_ADDR
// end else
41479: GO 41542
// begin d := - 1 ;
41481: LD_ADDR_VAR 0 9
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: ST_TO_ADDR
// if i_from > i_to then
41490: LD_VAR 0 2
41494: PUSH
41495: LD_VAR 0 3
41499: GREATER
41500: IFFALSE 41520
// length := i_from - i_to else
41502: LD_ADDR_VAR 0 11
41506: PUSH
41507: LD_VAR 0 2
41511: PUSH
41512: LD_VAR 0 3
41516: MINUS
41517: ST_TO_ADDR
41518: GO 41542
// length := ( array - i_to ) + i_from ;
41520: LD_ADDR_VAR 0 11
41524: PUSH
41525: LD_VAR 0 1
41529: PUSH
41530: LD_VAR 0 3
41534: MINUS
41535: PUSH
41536: LD_VAR 0 2
41540: PLUS
41541: ST_TO_ADDR
// end ; if not length then
41542: LD_VAR 0 11
41546: NOT
41547: IFFALSE 41551
// exit ;
41549: GO 41709
// tmp := array ;
41551: LD_ADDR_VAR 0 10
41555: PUSH
41556: LD_VAR 0 1
41560: ST_TO_ADDR
// for i = 1 to length do
41561: LD_ADDR_VAR 0 6
41565: PUSH
41566: DOUBLE
41567: LD_INT 1
41569: DEC
41570: ST_TO_ADDR
41571: LD_VAR 0 11
41575: PUSH
41576: FOR_TO
41577: IFFALSE 41697
// begin for j = 1 to array do
41579: LD_ADDR_VAR 0 7
41583: PUSH
41584: DOUBLE
41585: LD_INT 1
41587: DEC
41588: ST_TO_ADDR
41589: LD_VAR 0 1
41593: PUSH
41594: FOR_TO
41595: IFFALSE 41683
// begin k := j + d ;
41597: LD_ADDR_VAR 0 8
41601: PUSH
41602: LD_VAR 0 7
41606: PUSH
41607: LD_VAR 0 9
41611: PLUS
41612: ST_TO_ADDR
// if k > array then
41613: LD_VAR 0 8
41617: PUSH
41618: LD_VAR 0 1
41622: GREATER
41623: IFFALSE 41633
// k := 1 ;
41625: LD_ADDR_VAR 0 8
41629: PUSH
41630: LD_INT 1
41632: ST_TO_ADDR
// if not k then
41633: LD_VAR 0 8
41637: NOT
41638: IFFALSE 41650
// k := array ;
41640: LD_ADDR_VAR 0 8
41644: PUSH
41645: LD_VAR 0 1
41649: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41650: LD_ADDR_VAR 0 10
41654: PUSH
41655: LD_VAR 0 10
41659: PPUSH
41660: LD_VAR 0 8
41664: PPUSH
41665: LD_VAR 0 1
41669: PUSH
41670: LD_VAR 0 7
41674: ARRAY
41675: PPUSH
41676: CALL_OW 1
41680: ST_TO_ADDR
// end ;
41681: GO 41594
41683: POP
41684: POP
// array := tmp ;
41685: LD_ADDR_VAR 0 1
41689: PUSH
41690: LD_VAR 0 10
41694: ST_TO_ADDR
// end ;
41695: GO 41576
41697: POP
41698: POP
// result := array ;
41699: LD_ADDR_VAR 0 5
41703: PUSH
41704: LD_VAR 0 1
41708: ST_TO_ADDR
// end ;
41709: LD_VAR 0 5
41713: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41714: LD_INT 0
41716: PPUSH
41717: PPUSH
// result := 0 ;
41718: LD_ADDR_VAR 0 3
41722: PUSH
41723: LD_INT 0
41725: ST_TO_ADDR
// if not array or not value in array then
41726: LD_VAR 0 1
41730: NOT
41731: PUSH
41732: LD_VAR 0 2
41736: PUSH
41737: LD_VAR 0 1
41741: IN
41742: NOT
41743: OR
41744: IFFALSE 41748
// exit ;
41746: GO 41802
// for i = 1 to array do
41748: LD_ADDR_VAR 0 4
41752: PUSH
41753: DOUBLE
41754: LD_INT 1
41756: DEC
41757: ST_TO_ADDR
41758: LD_VAR 0 1
41762: PUSH
41763: FOR_TO
41764: IFFALSE 41800
// if value = array [ i ] then
41766: LD_VAR 0 2
41770: PUSH
41771: LD_VAR 0 1
41775: PUSH
41776: LD_VAR 0 4
41780: ARRAY
41781: EQUAL
41782: IFFALSE 41798
// begin result := i ;
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_VAR 0 4
41793: ST_TO_ADDR
// exit ;
41794: POP
41795: POP
41796: GO 41802
// end ;
41798: GO 41763
41800: POP
41801: POP
// end ;
41802: LD_VAR 0 3
41806: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41807: LD_INT 0
41809: PPUSH
// vc_chassis := chassis ;
41810: LD_ADDR_OWVAR 37
41814: PUSH
41815: LD_VAR 0 1
41819: ST_TO_ADDR
// vc_engine := engine ;
41820: LD_ADDR_OWVAR 39
41824: PUSH
41825: LD_VAR 0 2
41829: ST_TO_ADDR
// vc_control := control ;
41830: LD_ADDR_OWVAR 38
41834: PUSH
41835: LD_VAR 0 3
41839: ST_TO_ADDR
// vc_weapon := weapon ;
41840: LD_ADDR_OWVAR 40
41844: PUSH
41845: LD_VAR 0 4
41849: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41850: LD_ADDR_OWVAR 41
41854: PUSH
41855: LD_VAR 0 5
41859: ST_TO_ADDR
// end ;
41860: LD_VAR 0 6
41864: RET
// export function WantPlant ( unit ) ; var task ; begin
41865: LD_INT 0
41867: PPUSH
41868: PPUSH
// result := false ;
41869: LD_ADDR_VAR 0 2
41873: PUSH
41874: LD_INT 0
41876: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41877: LD_ADDR_VAR 0 3
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 437
41891: ST_TO_ADDR
// if task then
41892: LD_VAR 0 3
41896: IFFALSE 41924
// if task [ 1 ] [ 1 ] = p then
41898: LD_VAR 0 3
41902: PUSH
41903: LD_INT 1
41905: ARRAY
41906: PUSH
41907: LD_INT 1
41909: ARRAY
41910: PUSH
41911: LD_STRING p
41913: EQUAL
41914: IFFALSE 41924
// result := true ;
41916: LD_ADDR_VAR 0 2
41920: PUSH
41921: LD_INT 1
41923: ST_TO_ADDR
// end ;
41924: LD_VAR 0 2
41928: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
// if pos < 1 then
41935: LD_VAR 0 2
41939: PUSH
41940: LD_INT 1
41942: LESS
41943: IFFALSE 41947
// exit ;
41945: GO 42250
// if pos = 1 then
41947: LD_VAR 0 2
41951: PUSH
41952: LD_INT 1
41954: EQUAL
41955: IFFALSE 41988
// result := Replace ( arr , pos [ 1 ] , value ) else
41957: LD_ADDR_VAR 0 4
41961: PUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: LD_VAR 0 2
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 3
41980: PPUSH
41981: CALL_OW 1
41985: ST_TO_ADDR
41986: GO 42250
// begin tmp := arr ;
41988: LD_ADDR_VAR 0 6
41992: PUSH
41993: LD_VAR 0 1
41997: ST_TO_ADDR
// s_arr := [ tmp ] ;
41998: LD_ADDR_VAR 0 7
42002: PUSH
42003: LD_VAR 0 6
42007: PUSH
42008: EMPTY
42009: LIST
42010: ST_TO_ADDR
// for i = 1 to pos - 1 do
42011: LD_ADDR_VAR 0 5
42015: PUSH
42016: DOUBLE
42017: LD_INT 1
42019: DEC
42020: ST_TO_ADDR
42021: LD_VAR 0 2
42025: PUSH
42026: LD_INT 1
42028: MINUS
42029: PUSH
42030: FOR_TO
42031: IFFALSE 42076
// begin tmp := tmp [ pos [ i ] ] ;
42033: LD_ADDR_VAR 0 6
42037: PUSH
42038: LD_VAR 0 6
42042: PUSH
42043: LD_VAR 0 2
42047: PUSH
42048: LD_VAR 0 5
42052: ARRAY
42053: ARRAY
42054: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42055: LD_ADDR_VAR 0 7
42059: PUSH
42060: LD_VAR 0 7
42064: PUSH
42065: LD_VAR 0 6
42069: PUSH
42070: EMPTY
42071: LIST
42072: ADD
42073: ST_TO_ADDR
// end ;
42074: GO 42030
42076: POP
42077: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42078: LD_ADDR_VAR 0 6
42082: PUSH
42083: LD_VAR 0 6
42087: PPUSH
42088: LD_VAR 0 2
42092: PUSH
42093: LD_VAR 0 2
42097: ARRAY
42098: PPUSH
42099: LD_VAR 0 3
42103: PPUSH
42104: CALL_OW 1
42108: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42109: LD_ADDR_VAR 0 7
42113: PUSH
42114: LD_VAR 0 7
42118: PPUSH
42119: LD_VAR 0 7
42123: PPUSH
42124: LD_VAR 0 6
42128: PPUSH
42129: CALL_OW 1
42133: ST_TO_ADDR
// for i = s_arr downto 2 do
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: DOUBLE
42140: LD_VAR 0 7
42144: INC
42145: ST_TO_ADDR
42146: LD_INT 2
42148: PUSH
42149: FOR_DOWNTO
42150: IFFALSE 42234
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42152: LD_ADDR_VAR 0 6
42156: PUSH
42157: LD_VAR 0 7
42161: PUSH
42162: LD_VAR 0 5
42166: PUSH
42167: LD_INT 1
42169: MINUS
42170: ARRAY
42171: PPUSH
42172: LD_VAR 0 2
42176: PUSH
42177: LD_VAR 0 5
42181: PUSH
42182: LD_INT 1
42184: MINUS
42185: ARRAY
42186: PPUSH
42187: LD_VAR 0 7
42191: PUSH
42192: LD_VAR 0 5
42196: ARRAY
42197: PPUSH
42198: CALL_OW 1
42202: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42203: LD_ADDR_VAR 0 7
42207: PUSH
42208: LD_VAR 0 7
42212: PPUSH
42213: LD_VAR 0 5
42217: PUSH
42218: LD_INT 1
42220: MINUS
42221: PPUSH
42222: LD_VAR 0 6
42226: PPUSH
42227: CALL_OW 1
42231: ST_TO_ADDR
// end ;
42232: GO 42149
42234: POP
42235: POP
// result := s_arr [ 1 ] ;
42236: LD_ADDR_VAR 0 4
42240: PUSH
42241: LD_VAR 0 7
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: ST_TO_ADDR
// end ; end ;
42250: LD_VAR 0 4
42254: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
// if not list then
42259: LD_VAR 0 1
42263: NOT
42264: IFFALSE 42268
// exit ;
42266: GO 42359
// i := list [ pos1 ] ;
42268: LD_ADDR_VAR 0 5
42272: PUSH
42273: LD_VAR 0 1
42277: PUSH
42278: LD_VAR 0 2
42282: ARRAY
42283: ST_TO_ADDR
// if not i then
42284: LD_VAR 0 5
42288: NOT
42289: IFFALSE 42293
// exit ;
42291: GO 42359
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42293: LD_ADDR_VAR 0 1
42297: PUSH
42298: LD_VAR 0 1
42302: PPUSH
42303: LD_VAR 0 2
42307: PPUSH
42308: LD_VAR 0 1
42312: PUSH
42313: LD_VAR 0 3
42317: ARRAY
42318: PPUSH
42319: CALL_OW 1
42323: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42324: LD_ADDR_VAR 0 1
42328: PUSH
42329: LD_VAR 0 1
42333: PPUSH
42334: LD_VAR 0 3
42338: PPUSH
42339: LD_VAR 0 5
42343: PPUSH
42344: CALL_OW 1
42348: ST_TO_ADDR
// result := list ;
42349: LD_ADDR_VAR 0 4
42353: PUSH
42354: LD_VAR 0 1
42358: ST_TO_ADDR
// end ;
42359: LD_VAR 0 4
42363: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42364: LD_INT 0
42366: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42367: LD_ADDR_VAR 0 5
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 250
42381: PPUSH
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 251
42391: PPUSH
42392: LD_VAR 0 2
42396: PPUSH
42397: LD_VAR 0 3
42401: PPUSH
42402: LD_VAR 0 4
42406: PPUSH
42407: CALL 42417 0 5
42411: ST_TO_ADDR
// end ;
42412: LD_VAR 0 5
42416: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42417: LD_INT 0
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
// if not list then
42423: LD_VAR 0 3
42427: NOT
42428: IFFALSE 42432
// exit ;
42430: GO 42820
// result := [ ] ;
42432: LD_ADDR_VAR 0 6
42436: PUSH
42437: EMPTY
42438: ST_TO_ADDR
// for i in list do
42439: LD_ADDR_VAR 0 7
42443: PUSH
42444: LD_VAR 0 3
42448: PUSH
42449: FOR_IN
42450: IFFALSE 42652
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42452: LD_ADDR_VAR 0 9
42456: PUSH
42457: LD_VAR 0 7
42461: PPUSH
42462: LD_VAR 0 1
42466: PPUSH
42467: LD_VAR 0 2
42471: PPUSH
42472: CALL_OW 297
42476: ST_TO_ADDR
// if not result then
42477: LD_VAR 0 6
42481: NOT
42482: IFFALSE 42508
// result := [ [ i , tmp ] ] else
42484: LD_ADDR_VAR 0 6
42488: PUSH
42489: LD_VAR 0 7
42493: PUSH
42494: LD_VAR 0 9
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: EMPTY
42504: LIST
42505: ST_TO_ADDR
42506: GO 42650
// begin if result [ result ] [ 2 ] < tmp then
42508: LD_VAR 0 6
42512: PUSH
42513: LD_VAR 0 6
42517: ARRAY
42518: PUSH
42519: LD_INT 2
42521: ARRAY
42522: PUSH
42523: LD_VAR 0 9
42527: LESS
42528: IFFALSE 42570
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42530: LD_ADDR_VAR 0 6
42534: PUSH
42535: LD_VAR 0 6
42539: PPUSH
42540: LD_VAR 0 6
42544: PUSH
42545: LD_INT 1
42547: PLUS
42548: PPUSH
42549: LD_VAR 0 7
42553: PUSH
42554: LD_VAR 0 9
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PPUSH
42563: CALL_OW 2
42567: ST_TO_ADDR
42568: GO 42650
// for j = 1 to result do
42570: LD_ADDR_VAR 0 8
42574: PUSH
42575: DOUBLE
42576: LD_INT 1
42578: DEC
42579: ST_TO_ADDR
42580: LD_VAR 0 6
42584: PUSH
42585: FOR_TO
42586: IFFALSE 42648
// begin if tmp < result [ j ] [ 2 ] then
42588: LD_VAR 0 9
42592: PUSH
42593: LD_VAR 0 6
42597: PUSH
42598: LD_VAR 0 8
42602: ARRAY
42603: PUSH
42604: LD_INT 2
42606: ARRAY
42607: LESS
42608: IFFALSE 42646
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42610: LD_ADDR_VAR 0 6
42614: PUSH
42615: LD_VAR 0 6
42619: PPUSH
42620: LD_VAR 0 8
42624: PPUSH
42625: LD_VAR 0 7
42629: PUSH
42630: LD_VAR 0 9
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PPUSH
42639: CALL_OW 2
42643: ST_TO_ADDR
// break ;
42644: GO 42648
// end ; end ;
42646: GO 42585
42648: POP
42649: POP
// end ; end ;
42650: GO 42449
42652: POP
42653: POP
// if result and not asc then
42654: LD_VAR 0 6
42658: PUSH
42659: LD_VAR 0 4
42663: NOT
42664: AND
42665: IFFALSE 42740
// begin tmp := result ;
42667: LD_ADDR_VAR 0 9
42671: PUSH
42672: LD_VAR 0 6
42676: ST_TO_ADDR
// for i = tmp downto 1 do
42677: LD_ADDR_VAR 0 7
42681: PUSH
42682: DOUBLE
42683: LD_VAR 0 9
42687: INC
42688: ST_TO_ADDR
42689: LD_INT 1
42691: PUSH
42692: FOR_DOWNTO
42693: IFFALSE 42738
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42695: LD_ADDR_VAR 0 6
42699: PUSH
42700: LD_VAR 0 6
42704: PPUSH
42705: LD_VAR 0 9
42709: PUSH
42710: LD_VAR 0 7
42714: MINUS
42715: PUSH
42716: LD_INT 1
42718: PLUS
42719: PPUSH
42720: LD_VAR 0 9
42724: PUSH
42725: LD_VAR 0 7
42729: ARRAY
42730: PPUSH
42731: CALL_OW 1
42735: ST_TO_ADDR
42736: GO 42692
42738: POP
42739: POP
// end ; tmp := [ ] ;
42740: LD_ADDR_VAR 0 9
42744: PUSH
42745: EMPTY
42746: ST_TO_ADDR
// if mode then
42747: LD_VAR 0 5
42751: IFFALSE 42820
// begin for i = 1 to result do
42753: LD_ADDR_VAR 0 7
42757: PUSH
42758: DOUBLE
42759: LD_INT 1
42761: DEC
42762: ST_TO_ADDR
42763: LD_VAR 0 6
42767: PUSH
42768: FOR_TO
42769: IFFALSE 42808
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42771: LD_ADDR_VAR 0 9
42775: PUSH
42776: LD_VAR 0 9
42780: PPUSH
42781: LD_VAR 0 7
42785: PPUSH
42786: LD_VAR 0 6
42790: PUSH
42791: LD_VAR 0 7
42795: ARRAY
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PPUSH
42801: CALL_OW 1
42805: ST_TO_ADDR
42806: GO 42768
42808: POP
42809: POP
// result := tmp ;
42810: LD_ADDR_VAR 0 6
42814: PUSH
42815: LD_VAR 0 9
42819: ST_TO_ADDR
// end ; end ;
42820: LD_VAR 0 6
42824: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42825: LD_INT 0
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42833: LD_ADDR_VAR 0 5
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// if not x or not y then
42855: LD_VAR 0 2
42859: NOT
42860: PUSH
42861: LD_VAR 0 3
42865: NOT
42866: OR
42867: IFFALSE 42871
// exit ;
42869: GO 44523
// if not range then
42871: LD_VAR 0 4
42875: NOT
42876: IFFALSE 42886
// range := 10 ;
42878: LD_ADDR_VAR 0 4
42882: PUSH
42883: LD_INT 10
42885: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42886: LD_ADDR_VAR 0 8
42890: PUSH
42891: LD_INT 81
42893: PUSH
42894: LD_VAR 0 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 92
42905: PUSH
42906: LD_VAR 0 2
42910: PUSH
42911: LD_VAR 0 3
42915: PUSH
42916: LD_VAR 0 4
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: LD_INT 21
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: PPUSH
42949: CALL_OW 69
42953: ST_TO_ADDR
// if not tmp then
42954: LD_VAR 0 8
42958: NOT
42959: IFFALSE 42963
// exit ;
42961: GO 44523
// for i in tmp do
42963: LD_ADDR_VAR 0 6
42967: PUSH
42968: LD_VAR 0 8
42972: PUSH
42973: FOR_IN
42974: IFFALSE 44498
// begin points := [ 0 , 0 , 0 ] ;
42976: LD_ADDR_VAR 0 9
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// bpoints := 1 ;
42995: LD_ADDR_VAR 0 10
42999: PUSH
43000: LD_INT 1
43002: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 247
43012: PUSH
43013: LD_INT 1
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43021
43019: GO 43599
43021: POP
// begin if GetClass ( i ) = 1 then
43022: LD_VAR 0 6
43026: PPUSH
43027: CALL_OW 257
43031: PUSH
43032: LD_INT 1
43034: EQUAL
43035: IFFALSE 43056
// points := [ 10 , 5 , 3 ] ;
43037: LD_ADDR_VAR 0 9
43041: PUSH
43042: LD_INT 10
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43056: LD_VAR 0 6
43060: PPUSH
43061: CALL_OW 257
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: IN
43080: IFFALSE 43101
// points := [ 3 , 2 , 1 ] ;
43082: LD_ADDR_VAR 0 9
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43101: LD_VAR 0 6
43105: PPUSH
43106: CALL_OW 257
43110: PUSH
43111: LD_INT 5
43113: EQUAL
43114: IFFALSE 43135
// points := [ 130 , 5 , 2 ] ;
43116: LD_ADDR_VAR 0 9
43120: PUSH
43121: LD_INT 130
43123: PUSH
43124: LD_INT 5
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43135: LD_VAR 0 6
43139: PPUSH
43140: CALL_OW 257
43144: PUSH
43145: LD_INT 8
43147: EQUAL
43148: IFFALSE 43169
// points := [ 35 , 35 , 30 ] ;
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: LD_INT 35
43157: PUSH
43158: LD_INT 35
43160: PUSH
43161: LD_INT 30
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43169: LD_VAR 0 6
43173: PPUSH
43174: CALL_OW 257
43178: PUSH
43179: LD_INT 9
43181: EQUAL
43182: IFFALSE 43203
// points := [ 20 , 55 , 40 ] ;
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_INT 20
43191: PUSH
43192: LD_INT 55
43194: PUSH
43195: LD_INT 40
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 257
43212: PUSH
43213: LD_INT 12
43215: PUSH
43216: LD_INT 16
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: IN
43223: IFFALSE 43244
// points := [ 5 , 3 , 2 ] ;
43225: LD_ADDR_VAR 0 9
43229: PUSH
43230: LD_INT 5
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43244: LD_VAR 0 6
43248: PPUSH
43249: CALL_OW 257
43253: PUSH
43254: LD_INT 17
43256: EQUAL
43257: IFFALSE 43278
// points := [ 100 , 50 , 75 ] ;
43259: LD_ADDR_VAR 0 9
43263: PUSH
43264: LD_INT 100
43266: PUSH
43267: LD_INT 50
43269: PUSH
43270: LD_INT 75
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43278: LD_VAR 0 6
43282: PPUSH
43283: CALL_OW 257
43287: PUSH
43288: LD_INT 15
43290: EQUAL
43291: IFFALSE 43312
// points := [ 10 , 5 , 3 ] ;
43293: LD_ADDR_VAR 0 9
43297: PUSH
43298: LD_INT 10
43300: PUSH
43301: LD_INT 5
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43312: LD_VAR 0 6
43316: PPUSH
43317: CALL_OW 257
43321: PUSH
43322: LD_INT 14
43324: EQUAL
43325: IFFALSE 43346
// points := [ 10 , 0 , 0 ] ;
43327: LD_ADDR_VAR 0 9
43331: PUSH
43332: LD_INT 10
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43346: LD_VAR 0 6
43350: PPUSH
43351: CALL_OW 257
43355: PUSH
43356: LD_INT 11
43358: EQUAL
43359: IFFALSE 43380
// points := [ 30 , 10 , 5 ] ;
43361: LD_ADDR_VAR 0 9
43365: PUSH
43366: LD_INT 30
43368: PUSH
43369: LD_INT 10
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43380: LD_VAR 0 1
43384: PPUSH
43385: LD_INT 5
43387: PPUSH
43388: CALL_OW 321
43392: PUSH
43393: LD_INT 2
43395: EQUAL
43396: IFFALSE 43413
// bpoints := bpoints * 1.8 ;
43398: LD_ADDR_VAR 0 10
43402: PUSH
43403: LD_VAR 0 10
43407: PUSH
43408: LD_REAL  1.80000000000000E+0000
43411: MUL
43412: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43413: LD_VAR 0 6
43417: PPUSH
43418: CALL_OW 257
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: IN
43441: PUSH
43442: LD_VAR 0 1
43446: PPUSH
43447: LD_INT 51
43449: PPUSH
43450: CALL_OW 321
43454: PUSH
43455: LD_INT 2
43457: EQUAL
43458: AND
43459: IFFALSE 43476
// bpoints := bpoints * 1.2 ;
43461: LD_ADDR_VAR 0 10
43465: PUSH
43466: LD_VAR 0 10
43470: PUSH
43471: LD_REAL  1.20000000000000E+0000
43474: MUL
43475: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43476: LD_VAR 0 6
43480: PPUSH
43481: CALL_OW 257
43485: PUSH
43486: LD_INT 5
43488: PUSH
43489: LD_INT 7
43491: PUSH
43492: LD_INT 9
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: IN
43500: PUSH
43501: LD_VAR 0 1
43505: PPUSH
43506: LD_INT 52
43508: PPUSH
43509: CALL_OW 321
43513: PUSH
43514: LD_INT 2
43516: EQUAL
43517: AND
43518: IFFALSE 43535
// bpoints := bpoints * 1.5 ;
43520: LD_ADDR_VAR 0 10
43524: PUSH
43525: LD_VAR 0 10
43529: PUSH
43530: LD_REAL  1.50000000000000E+0000
43533: MUL
43534: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43535: LD_VAR 0 1
43539: PPUSH
43540: LD_INT 66
43542: PPUSH
43543: CALL_OW 321
43547: PUSH
43548: LD_INT 2
43550: EQUAL
43551: IFFALSE 43568
// bpoints := bpoints * 1.1 ;
43553: LD_ADDR_VAR 0 10
43557: PUSH
43558: LD_VAR 0 10
43562: PUSH
43563: LD_REAL  1.10000000000000E+0000
43566: MUL
43567: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43568: LD_ADDR_VAR 0 10
43572: PUSH
43573: LD_VAR 0 10
43577: PUSH
43578: LD_VAR 0 6
43582: PPUSH
43583: LD_INT 1
43585: PPUSH
43586: CALL_OW 259
43590: PUSH
43591: LD_REAL  1.15000000000000E+0000
43594: MUL
43595: MUL
43596: ST_TO_ADDR
// end ; unit_vehicle :
43597: GO 44427
43599: LD_INT 2
43601: DOUBLE
43602: EQUAL
43603: IFTRUE 43607
43605: GO 44415
43607: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43608: LD_VAR 0 6
43612: PPUSH
43613: CALL_OW 264
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 42
43623: PUSH
43624: LD_INT 24
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: IN
43632: IFFALSE 43653
// points := [ 25 , 5 , 3 ] ;
43634: LD_ADDR_VAR 0 9
43638: PUSH
43639: LD_INT 25
43641: PUSH
43642: LD_INT 5
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43653: LD_VAR 0 6
43657: PPUSH
43658: CALL_OW 264
43662: PUSH
43663: LD_INT 4
43665: PUSH
43666: LD_INT 43
43668: PUSH
43669: LD_INT 25
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: IN
43677: IFFALSE 43698
// points := [ 40 , 15 , 5 ] ;
43679: LD_ADDR_VAR 0 9
43683: PUSH
43684: LD_INT 40
43686: PUSH
43687: LD_INT 15
43689: PUSH
43690: LD_INT 5
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43698: LD_VAR 0 6
43702: PPUSH
43703: CALL_OW 264
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 23
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: IN
43718: IFFALSE 43739
// points := [ 7 , 25 , 8 ] ;
43720: LD_ADDR_VAR 0 9
43724: PUSH
43725: LD_INT 7
43727: PUSH
43728: LD_INT 25
43730: PUSH
43731: LD_INT 8
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43739: LD_VAR 0 6
43743: PPUSH
43744: CALL_OW 264
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: LD_INT 27
43754: PUSH
43755: LD_INT 44
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: IN
43763: IFFALSE 43784
// points := [ 14 , 50 , 16 ] ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 14
43772: PUSH
43773: LD_INT 50
43775: PUSH
43776: LD_INT 16
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43784: LD_VAR 0 6
43788: PPUSH
43789: CALL_OW 264
43793: PUSH
43794: LD_INT 6
43796: PUSH
43797: LD_INT 46
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: IN
43804: IFFALSE 43825
// points := [ 32 , 120 , 70 ] ;
43806: LD_ADDR_VAR 0 9
43810: PUSH
43811: LD_INT 32
43813: PUSH
43814: LD_INT 120
43816: PUSH
43817: LD_INT 70
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43825: LD_VAR 0 6
43829: PPUSH
43830: CALL_OW 264
43834: PUSH
43835: LD_INT 7
43837: PUSH
43838: LD_INT 28
43840: PUSH
43841: LD_INT 45
43843: PUSH
43844: LD_EXP 63
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: IN
43855: IFFALSE 43876
// points := [ 35 , 20 , 45 ] ;
43857: LD_ADDR_VAR 0 9
43861: PUSH
43862: LD_INT 35
43864: PUSH
43865: LD_INT 20
43867: PUSH
43868: LD_INT 45
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43876: LD_VAR 0 6
43880: PPUSH
43881: CALL_OW 264
43885: PUSH
43886: LD_INT 47
43888: PUSH
43889: EMPTY
43890: LIST
43891: IN
43892: IFFALSE 43913
// points := [ 67 , 45 , 75 ] ;
43894: LD_ADDR_VAR 0 9
43898: PUSH
43899: LD_INT 67
43901: PUSH
43902: LD_INT 45
43904: PUSH
43905: LD_INT 75
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43913: LD_VAR 0 6
43917: PPUSH
43918: CALL_OW 264
43922: PUSH
43923: LD_INT 26
43925: PUSH
43926: EMPTY
43927: LIST
43928: IN
43929: IFFALSE 43950
// points := [ 120 , 30 , 80 ] ;
43931: LD_ADDR_VAR 0 9
43935: PUSH
43936: LD_INT 120
43938: PUSH
43939: LD_INT 30
43941: PUSH
43942: LD_INT 80
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43950: LD_VAR 0 6
43954: PPUSH
43955: CALL_OW 264
43959: PUSH
43960: LD_INT 22
43962: PUSH
43963: EMPTY
43964: LIST
43965: IN
43966: IFFALSE 43987
// points := [ 40 , 1 , 1 ] ;
43968: LD_ADDR_VAR 0 9
43972: PUSH
43973: LD_INT 40
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43987: LD_VAR 0 6
43991: PPUSH
43992: CALL_OW 264
43996: PUSH
43997: LD_INT 29
43999: PUSH
44000: EMPTY
44001: LIST
44002: IN
44003: IFFALSE 44024
// points := [ 70 , 200 , 400 ] ;
44005: LD_ADDR_VAR 0 9
44009: PUSH
44010: LD_INT 70
44012: PUSH
44013: LD_INT 200
44015: PUSH
44016: LD_INT 400
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44024: LD_VAR 0 6
44028: PPUSH
44029: CALL_OW 264
44033: PUSH
44034: LD_INT 14
44036: PUSH
44037: LD_INT 53
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: IN
44044: IFFALSE 44065
// points := [ 40 , 10 , 20 ] ;
44046: LD_ADDR_VAR 0 9
44050: PUSH
44051: LD_INT 40
44053: PUSH
44054: LD_INT 10
44056: PUSH
44057: LD_INT 20
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44065: LD_VAR 0 6
44069: PPUSH
44070: CALL_OW 264
44074: PUSH
44075: LD_INT 9
44077: PUSH
44078: EMPTY
44079: LIST
44080: IN
44081: IFFALSE 44102
// points := [ 5 , 70 , 20 ] ;
44083: LD_ADDR_VAR 0 9
44087: PUSH
44088: LD_INT 5
44090: PUSH
44091: LD_INT 70
44093: PUSH
44094: LD_INT 20
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL_OW 264
44111: PUSH
44112: LD_INT 10
44114: PUSH
44115: EMPTY
44116: LIST
44117: IN
44118: IFFALSE 44139
// points := [ 35 , 110 , 70 ] ;
44120: LD_ADDR_VAR 0 9
44124: PUSH
44125: LD_INT 35
44127: PUSH
44128: LD_INT 110
44130: PUSH
44131: LD_INT 70
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44139: LD_VAR 0 6
44143: PPUSH
44144: CALL_OW 265
44148: PUSH
44149: LD_INT 25
44151: EQUAL
44152: IFFALSE 44173
// points := [ 80 , 65 , 100 ] ;
44154: LD_ADDR_VAR 0 9
44158: PUSH
44159: LD_INT 80
44161: PUSH
44162: LD_INT 65
44164: PUSH
44165: LD_INT 100
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44173: LD_VAR 0 6
44177: PPUSH
44178: CALL_OW 263
44182: PUSH
44183: LD_INT 1
44185: EQUAL
44186: IFFALSE 44221
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44188: LD_ADDR_VAR 0 10
44192: PUSH
44193: LD_VAR 0 10
44197: PUSH
44198: LD_VAR 0 6
44202: PPUSH
44203: CALL_OW 311
44207: PPUSH
44208: LD_INT 3
44210: PPUSH
44211: CALL_OW 259
44215: PUSH
44216: LD_INT 4
44218: MUL
44219: MUL
44220: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44221: LD_VAR 0 6
44225: PPUSH
44226: CALL_OW 263
44230: PUSH
44231: LD_INT 2
44233: EQUAL
44234: IFFALSE 44285
// begin j := IsControledBy ( i ) ;
44236: LD_ADDR_VAR 0 7
44240: PUSH
44241: LD_VAR 0 6
44245: PPUSH
44246: CALL_OW 312
44250: ST_TO_ADDR
// if j then
44251: LD_VAR 0 7
44255: IFFALSE 44285
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44257: LD_ADDR_VAR 0 10
44261: PUSH
44262: LD_VAR 0 10
44266: PUSH
44267: LD_VAR 0 7
44271: PPUSH
44272: LD_INT 3
44274: PPUSH
44275: CALL_OW 259
44279: PUSH
44280: LD_INT 3
44282: MUL
44283: MUL
44284: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44285: LD_VAR 0 6
44289: PPUSH
44290: CALL_OW 264
44294: PUSH
44295: LD_INT 5
44297: PUSH
44298: LD_INT 6
44300: PUSH
44301: LD_INT 46
44303: PUSH
44304: LD_INT 44
44306: PUSH
44307: LD_INT 47
44309: PUSH
44310: LD_INT 45
44312: PUSH
44313: LD_INT 28
44315: PUSH
44316: LD_INT 7
44318: PUSH
44319: LD_INT 27
44321: PUSH
44322: LD_INT 29
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: IN
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: LD_INT 52
44345: PPUSH
44346: CALL_OW 321
44350: PUSH
44351: LD_INT 2
44353: EQUAL
44354: AND
44355: IFFALSE 44372
// bpoints := bpoints * 1.2 ;
44357: LD_ADDR_VAR 0 10
44361: PUSH
44362: LD_VAR 0 10
44366: PUSH
44367: LD_REAL  1.20000000000000E+0000
44370: MUL
44371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44372: LD_VAR 0 6
44376: PPUSH
44377: CALL_OW 264
44381: PUSH
44382: LD_INT 6
44384: PUSH
44385: LD_INT 46
44387: PUSH
44388: LD_INT 47
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: IN
44396: IFFALSE 44413
// bpoints := bpoints * 1.2 ;
44398: LD_ADDR_VAR 0 10
44402: PUSH
44403: LD_VAR 0 10
44407: PUSH
44408: LD_REAL  1.20000000000000E+0000
44411: MUL
44412: ST_TO_ADDR
// end ; unit_building :
44413: GO 44427
44415: LD_INT 3
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44423
44421: GO 44426
44423: POP
// ; end ;
44424: GO 44427
44426: POP
// for j = 1 to 3 do
44427: LD_ADDR_VAR 0 7
44431: PUSH
44432: DOUBLE
44433: LD_INT 1
44435: DEC
44436: ST_TO_ADDR
44437: LD_INT 3
44439: PUSH
44440: FOR_TO
44441: IFFALSE 44494
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44443: LD_ADDR_VAR 0 5
44447: PUSH
44448: LD_VAR 0 5
44452: PPUSH
44453: LD_VAR 0 7
44457: PPUSH
44458: LD_VAR 0 5
44462: PUSH
44463: LD_VAR 0 7
44467: ARRAY
44468: PUSH
44469: LD_VAR 0 9
44473: PUSH
44474: LD_VAR 0 7
44478: ARRAY
44479: PUSH
44480: LD_VAR 0 10
44484: MUL
44485: PLUS
44486: PPUSH
44487: CALL_OW 1
44491: ST_TO_ADDR
44492: GO 44440
44494: POP
44495: POP
// end ;
44496: GO 42973
44498: POP
44499: POP
// result := Replace ( result , 4 , tmp ) ;
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: LD_VAR 0 5
44509: PPUSH
44510: LD_INT 4
44512: PPUSH
44513: LD_VAR 0 8
44517: PPUSH
44518: CALL_OW 1
44522: ST_TO_ADDR
// end ;
44523: LD_VAR 0 5
44527: RET
// export function DangerAtRange ( unit , range ) ; begin
44528: LD_INT 0
44530: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 255
44545: PPUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 250
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 251
44565: PPUSH
44566: LD_VAR 0 2
44570: PPUSH
44571: CALL 42825 0 4
44575: ST_TO_ADDR
// end ;
44576: LD_VAR 0 3
44580: RET
// export function DangerInArea ( side , area ) ; begin
44581: LD_INT 0
44583: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_VAR 0 2
44593: PPUSH
44594: LD_INT 81
44596: PUSH
44597: LD_VAR 0 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PPUSH
44606: CALL_OW 70
44610: ST_TO_ADDR
// end ;
44611: LD_VAR 0 3
44615: RET
// export function IsExtension ( b ) ; begin
44616: LD_INT 0
44618: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44619: LD_ADDR_VAR 0 2
44623: PUSH
44624: LD_VAR 0 1
44628: PUSH
44629: LD_INT 23
44631: PUSH
44632: LD_INT 20
44634: PUSH
44635: LD_INT 22
44637: PUSH
44638: LD_INT 17
44640: PUSH
44641: LD_INT 24
44643: PUSH
44644: LD_INT 21
44646: PUSH
44647: LD_INT 19
44649: PUSH
44650: LD_INT 16
44652: PUSH
44653: LD_INT 25
44655: PUSH
44656: LD_INT 18
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: IN
44671: ST_TO_ADDR
// end ;
44672: LD_VAR 0 2
44676: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
44681: PPUSH
// result := [ ] ;
44682: LD_ADDR_VAR 0 4
44686: PUSH
44687: EMPTY
44688: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44689: LD_ADDR_VAR 0 5
44693: PUSH
44694: LD_VAR 0 2
44698: PPUSH
44699: LD_INT 21
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PPUSH
44709: CALL_OW 70
44713: ST_TO_ADDR
// if not tmp then
44714: LD_VAR 0 5
44718: NOT
44719: IFFALSE 44723
// exit ;
44721: GO 44787
// if checkLink then
44723: LD_VAR 0 3
44727: IFFALSE 44777
// begin for i in tmp do
44729: LD_ADDR_VAR 0 6
44733: PUSH
44734: LD_VAR 0 5
44738: PUSH
44739: FOR_IN
44740: IFFALSE 44775
// if GetBase ( i ) <> base then
44742: LD_VAR 0 6
44746: PPUSH
44747: CALL_OW 274
44751: PUSH
44752: LD_VAR 0 1
44756: NONEQUAL
44757: IFFALSE 44773
// ComLinkToBase ( base , i ) ;
44759: LD_VAR 0 1
44763: PPUSH
44764: LD_VAR 0 6
44768: PPUSH
44769: CALL_OW 169
44773: GO 44739
44775: POP
44776: POP
// end ; result := tmp ;
44777: LD_ADDR_VAR 0 4
44781: PUSH
44782: LD_VAR 0 5
44786: ST_TO_ADDR
// end ;
44787: LD_VAR 0 4
44791: RET
// export function ComComplete ( units , b ) ; var i ; begin
44792: LD_INT 0
44794: PPUSH
44795: PPUSH
// if not units then
44796: LD_VAR 0 1
44800: NOT
44801: IFFALSE 44805
// exit ;
44803: GO 44895
// for i in units do
44805: LD_ADDR_VAR 0 4
44809: PUSH
44810: LD_VAR 0 1
44814: PUSH
44815: FOR_IN
44816: IFFALSE 44893
// if BuildingStatus ( b ) = bs_build then
44818: LD_VAR 0 2
44822: PPUSH
44823: CALL_OW 461
44827: PUSH
44828: LD_INT 1
44830: EQUAL
44831: IFFALSE 44891
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44833: LD_VAR 0 4
44837: PPUSH
44838: LD_STRING h
44840: PUSH
44841: LD_VAR 0 2
44845: PPUSH
44846: CALL_OW 250
44850: PUSH
44851: LD_VAR 0 2
44855: PPUSH
44856: CALL_OW 251
44860: PUSH
44861: LD_VAR 0 2
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: PPUSH
44887: CALL_OW 446
44891: GO 44815
44893: POP
44894: POP
// end ;
44895: LD_VAR 0 3
44899: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44900: LD_INT 0
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44908: LD_VAR 0 1
44912: NOT
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: CALL_OW 263
44923: PUSH
44924: LD_INT 2
44926: NONEQUAL
44927: OR
44928: IFFALSE 44932
// exit ;
44930: GO 45248
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44932: LD_ADDR_VAR 0 6
44936: PUSH
44937: LD_INT 22
44939: PUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 255
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 30
44959: PUSH
44960: LD_INT 36
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 34
44969: PUSH
44970: LD_INT 31
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PPUSH
44986: CALL_OW 69
44990: ST_TO_ADDR
// if not tmp then
44991: LD_VAR 0 6
44995: NOT
44996: IFFALSE 45000
// exit ;
44998: GO 45248
// result := [ ] ;
45000: LD_ADDR_VAR 0 2
45004: PUSH
45005: EMPTY
45006: ST_TO_ADDR
// for i in tmp do
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_VAR 0 6
45016: PUSH
45017: FOR_IN
45018: IFFALSE 45089
// begin t := UnitsInside ( i ) ;
45020: LD_ADDR_VAR 0 4
45024: PUSH
45025: LD_VAR 0 3
45029: PPUSH
45030: CALL_OW 313
45034: ST_TO_ADDR
// if t then
45035: LD_VAR 0 4
45039: IFFALSE 45087
// for j in t do
45041: LD_ADDR_VAR 0 7
45045: PUSH
45046: LD_VAR 0 4
45050: PUSH
45051: FOR_IN
45052: IFFALSE 45085
// result := Replace ( result , result + 1 , j ) ;
45054: LD_ADDR_VAR 0 2
45058: PUSH
45059: LD_VAR 0 2
45063: PPUSH
45064: LD_VAR 0 2
45068: PUSH
45069: LD_INT 1
45071: PLUS
45072: PPUSH
45073: LD_VAR 0 7
45077: PPUSH
45078: CALL_OW 1
45082: ST_TO_ADDR
45083: GO 45051
45085: POP
45086: POP
// end ;
45087: GO 45017
45089: POP
45090: POP
// if not result then
45091: LD_VAR 0 2
45095: NOT
45096: IFFALSE 45100
// exit ;
45098: GO 45248
// mech := result [ 1 ] ;
45100: LD_ADDR_VAR 0 5
45104: PUSH
45105: LD_VAR 0 2
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: ST_TO_ADDR
// if result > 1 then
45114: LD_VAR 0 2
45118: PUSH
45119: LD_INT 1
45121: GREATER
45122: IFFALSE 45234
// begin for i = 2 to result do
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: DOUBLE
45130: LD_INT 2
45132: DEC
45133: ST_TO_ADDR
45134: LD_VAR 0 2
45138: PUSH
45139: FOR_TO
45140: IFFALSE 45232
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45142: LD_ADDR_VAR 0 4
45146: PUSH
45147: LD_VAR 0 2
45151: PUSH
45152: LD_VAR 0 3
45156: ARRAY
45157: PPUSH
45158: LD_INT 3
45160: PPUSH
45161: CALL_OW 259
45165: PUSH
45166: LD_VAR 0 2
45170: PUSH
45171: LD_VAR 0 3
45175: ARRAY
45176: PPUSH
45177: CALL_OW 432
45181: MINUS
45182: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45183: LD_VAR 0 4
45187: PUSH
45188: LD_VAR 0 5
45192: PPUSH
45193: LD_INT 3
45195: PPUSH
45196: CALL_OW 259
45200: PUSH
45201: LD_VAR 0 5
45205: PPUSH
45206: CALL_OW 432
45210: MINUS
45211: GREATEREQUAL
45212: IFFALSE 45230
// mech := result [ i ] ;
45214: LD_ADDR_VAR 0 5
45218: PUSH
45219: LD_VAR 0 2
45223: PUSH
45224: LD_VAR 0 3
45228: ARRAY
45229: ST_TO_ADDR
// end ;
45230: GO 45139
45232: POP
45233: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45234: LD_VAR 0 1
45238: PPUSH
45239: LD_VAR 0 5
45243: PPUSH
45244: CALL_OW 135
// end ;
45248: LD_VAR 0 2
45252: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45253: LD_INT 0
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
// result := [ ] ;
45268: LD_ADDR_VAR 0 7
45272: PUSH
45273: EMPTY
45274: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 266
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: IN
45295: NOT
45296: IFFALSE 45300
// exit ;
45298: GO 46934
// if name then
45300: LD_VAR 0 3
45304: IFFALSE 45320
// SetBName ( base_dep , name ) ;
45306: LD_VAR 0 1
45310: PPUSH
45311: LD_VAR 0 3
45315: PPUSH
45316: CALL_OW 500
// base := GetBase ( base_dep ) ;
45320: LD_ADDR_VAR 0 15
45324: PUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: CALL_OW 274
45334: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45335: LD_ADDR_VAR 0 16
45339: PUSH
45340: LD_VAR 0 1
45344: PPUSH
45345: CALL_OW 255
45349: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45350: LD_ADDR_VAR 0 17
45354: PUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: CALL_OW 248
45364: ST_TO_ADDR
// if sources then
45365: LD_VAR 0 5
45369: IFFALSE 45416
// for i = 1 to 3 do
45371: LD_ADDR_VAR 0 8
45375: PUSH
45376: DOUBLE
45377: LD_INT 1
45379: DEC
45380: ST_TO_ADDR
45381: LD_INT 3
45383: PUSH
45384: FOR_TO
45385: IFFALSE 45414
// AddResourceType ( base , i , sources [ i ] ) ;
45387: LD_VAR 0 15
45391: PPUSH
45392: LD_VAR 0 8
45396: PPUSH
45397: LD_VAR 0 5
45401: PUSH
45402: LD_VAR 0 8
45406: ARRAY
45407: PPUSH
45408: CALL_OW 276
45412: GO 45384
45414: POP
45415: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45416: LD_ADDR_VAR 0 18
45420: PUSH
45421: LD_VAR 0 15
45425: PPUSH
45426: LD_VAR 0 2
45430: PPUSH
45431: LD_INT 1
45433: PPUSH
45434: CALL 44677 0 3
45438: ST_TO_ADDR
// InitHc ;
45439: CALL_OW 19
// InitUc ;
45443: CALL_OW 18
// uc_side := side ;
45447: LD_ADDR_OWVAR 20
45451: PUSH
45452: LD_VAR 0 16
45456: ST_TO_ADDR
// uc_nation := nation ;
45457: LD_ADDR_OWVAR 21
45461: PUSH
45462: LD_VAR 0 17
45466: ST_TO_ADDR
// if buildings then
45467: LD_VAR 0 18
45471: IFFALSE 46793
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45473: LD_ADDR_VAR 0 19
45477: PUSH
45478: LD_VAR 0 18
45482: PPUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 30
45488: PUSH
45489: LD_INT 29
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 30
45498: PUSH
45499: LD_INT 30
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: PPUSH
45511: CALL_OW 72
45515: ST_TO_ADDR
// if tmp then
45516: LD_VAR 0 19
45520: IFFALSE 45568
// for i in tmp do
45522: LD_ADDR_VAR 0 8
45526: PUSH
45527: LD_VAR 0 19
45531: PUSH
45532: FOR_IN
45533: IFFALSE 45566
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45535: LD_VAR 0 8
45539: PPUSH
45540: CALL_OW 250
45544: PPUSH
45545: LD_VAR 0 8
45549: PPUSH
45550: CALL_OW 251
45554: PPUSH
45555: LD_VAR 0 16
45559: PPUSH
45560: CALL_OW 441
45564: GO 45532
45566: POP
45567: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45568: LD_VAR 0 18
45572: PPUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_INT 32
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 30
45588: PUSH
45589: LD_INT 33
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: PPUSH
45601: CALL_OW 72
45605: IFFALSE 45693
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45607: LD_ADDR_VAR 0 8
45611: PUSH
45612: LD_VAR 0 18
45616: PPUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 30
45622: PUSH
45623: LD_INT 32
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 30
45632: PUSH
45633: LD_INT 33
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 72
45649: PUSH
45650: FOR_IN
45651: IFFALSE 45691
// begin if not GetBWeapon ( i ) then
45653: LD_VAR 0 8
45657: PPUSH
45658: CALL_OW 269
45662: NOT
45663: IFFALSE 45689
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45665: LD_VAR 0 8
45669: PPUSH
45670: LD_VAR 0 8
45674: PPUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: CALL 46939 0 2
45684: PPUSH
45685: CALL_OW 431
// end ;
45689: GO 45650
45691: POP
45692: POP
// end ; for i = 1 to personel do
45693: LD_ADDR_VAR 0 8
45697: PUSH
45698: DOUBLE
45699: LD_INT 1
45701: DEC
45702: ST_TO_ADDR
45703: LD_VAR 0 6
45707: PUSH
45708: FOR_TO
45709: IFFALSE 46773
// begin if i > 4 then
45711: LD_VAR 0 8
45715: PUSH
45716: LD_INT 4
45718: GREATER
45719: IFFALSE 45723
// break ;
45721: GO 46773
// case i of 1 :
45723: LD_VAR 0 8
45727: PUSH
45728: LD_INT 1
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45736
45734: GO 45816
45736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45737: LD_ADDR_VAR 0 12
45741: PUSH
45742: LD_VAR 0 18
45746: PPUSH
45747: LD_INT 22
45749: PUSH
45750: LD_VAR 0 16
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 58
45761: PUSH
45762: EMPTY
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 30
45770: PUSH
45771: LD_INT 32
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 30
45780: PUSH
45781: LD_INT 4
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 30
45790: PUSH
45791: LD_INT 5
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: PPUSH
45809: CALL_OW 72
45813: ST_TO_ADDR
45814: GO 46038
45816: LD_INT 2
45818: DOUBLE
45819: EQUAL
45820: IFTRUE 45824
45822: GO 45886
45824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45825: LD_ADDR_VAR 0 12
45829: PUSH
45830: LD_VAR 0 18
45834: PPUSH
45835: LD_INT 22
45837: PUSH
45838: LD_VAR 0 16
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 30
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 30
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PPUSH
45879: CALL_OW 72
45883: ST_TO_ADDR
45884: GO 46038
45886: LD_INT 3
45888: DOUBLE
45889: EQUAL
45890: IFTRUE 45894
45892: GO 45956
45894: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45895: LD_ADDR_VAR 0 12
45899: PUSH
45900: LD_VAR 0 18
45904: PPUSH
45905: LD_INT 22
45907: PUSH
45908: LD_VAR 0 16
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 30
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 30
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PPUSH
45949: CALL_OW 72
45953: ST_TO_ADDR
45954: GO 46038
45956: LD_INT 4
45958: DOUBLE
45959: EQUAL
45960: IFTRUE 45964
45962: GO 46037
45964: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45965: LD_ADDR_VAR 0 12
45969: PUSH
45970: LD_VAR 0 18
45974: PPUSH
45975: LD_INT 22
45977: PUSH
45978: LD_VAR 0 16
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 30
45992: PUSH
45993: LD_INT 6
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 30
46002: PUSH
46003: LD_INT 7
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 30
46012: PUSH
46013: LD_INT 8
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PPUSH
46030: CALL_OW 72
46034: ST_TO_ADDR
46035: GO 46038
46037: POP
// if i = 1 then
46038: LD_VAR 0 8
46042: PUSH
46043: LD_INT 1
46045: EQUAL
46046: IFFALSE 46157
// begin tmp := [ ] ;
46048: LD_ADDR_VAR 0 19
46052: PUSH
46053: EMPTY
46054: ST_TO_ADDR
// for j in f do
46055: LD_ADDR_VAR 0 9
46059: PUSH
46060: LD_VAR 0 12
46064: PUSH
46065: FOR_IN
46066: IFFALSE 46139
// if GetBType ( j ) = b_bunker then
46068: LD_VAR 0 9
46072: PPUSH
46073: CALL_OW 266
46077: PUSH
46078: LD_INT 32
46080: EQUAL
46081: IFFALSE 46108
// tmp := Insert ( tmp , 1 , j ) else
46083: LD_ADDR_VAR 0 19
46087: PUSH
46088: LD_VAR 0 19
46092: PPUSH
46093: LD_INT 1
46095: PPUSH
46096: LD_VAR 0 9
46100: PPUSH
46101: CALL_OW 2
46105: ST_TO_ADDR
46106: GO 46137
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46108: LD_ADDR_VAR 0 19
46112: PUSH
46113: LD_VAR 0 19
46117: PPUSH
46118: LD_VAR 0 19
46122: PUSH
46123: LD_INT 1
46125: PLUS
46126: PPUSH
46127: LD_VAR 0 9
46131: PPUSH
46132: CALL_OW 2
46136: ST_TO_ADDR
46137: GO 46065
46139: POP
46140: POP
// if tmp then
46141: LD_VAR 0 19
46145: IFFALSE 46157
// f := tmp ;
46147: LD_ADDR_VAR 0 12
46151: PUSH
46152: LD_VAR 0 19
46156: ST_TO_ADDR
// end ; x := personel [ i ] ;
46157: LD_ADDR_VAR 0 13
46161: PUSH
46162: LD_VAR 0 6
46166: PUSH
46167: LD_VAR 0 8
46171: ARRAY
46172: ST_TO_ADDR
// if x = - 1 then
46173: LD_VAR 0 13
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: EQUAL
46182: IFFALSE 46391
// begin for j in f do
46184: LD_ADDR_VAR 0 9
46188: PUSH
46189: LD_VAR 0 12
46193: PUSH
46194: FOR_IN
46195: IFFALSE 46387
// repeat InitHc ;
46197: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46201: LD_VAR 0 9
46205: PPUSH
46206: CALL_OW 266
46210: PUSH
46211: LD_INT 5
46213: EQUAL
46214: IFFALSE 46284
// begin if UnitsInside ( j ) < 3 then
46216: LD_VAR 0 9
46220: PPUSH
46221: CALL_OW 313
46225: PUSH
46226: LD_INT 3
46228: LESS
46229: IFFALSE 46265
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46231: LD_INT 0
46233: PPUSH
46234: LD_INT 5
46236: PUSH
46237: LD_INT 8
46239: PUSH
46240: LD_INT 9
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: LD_VAR 0 17
46252: ARRAY
46253: PPUSH
46254: LD_VAR 0 4
46258: PPUSH
46259: CALL_OW 380
46263: GO 46282
// PrepareHuman ( false , i , skill ) ;
46265: LD_INT 0
46267: PPUSH
46268: LD_VAR 0 8
46272: PPUSH
46273: LD_VAR 0 4
46277: PPUSH
46278: CALL_OW 380
// end else
46282: GO 46301
// PrepareHuman ( false , i , skill ) ;
46284: LD_INT 0
46286: PPUSH
46287: LD_VAR 0 8
46291: PPUSH
46292: LD_VAR 0 4
46296: PPUSH
46297: CALL_OW 380
// un := CreateHuman ;
46301: LD_ADDR_VAR 0 14
46305: PUSH
46306: CALL_OW 44
46310: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46311: LD_ADDR_VAR 0 7
46315: PUSH
46316: LD_VAR 0 7
46320: PPUSH
46321: LD_INT 1
46323: PPUSH
46324: LD_VAR 0 14
46328: PPUSH
46329: CALL_OW 2
46333: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46334: LD_VAR 0 14
46338: PPUSH
46339: LD_VAR 0 9
46343: PPUSH
46344: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46348: LD_VAR 0 9
46352: PPUSH
46353: CALL_OW 313
46357: PUSH
46358: LD_INT 6
46360: EQUAL
46361: PUSH
46362: LD_VAR 0 9
46366: PPUSH
46367: CALL_OW 266
46371: PUSH
46372: LD_INT 32
46374: PUSH
46375: LD_INT 31
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: IN
46382: OR
46383: IFFALSE 46197
46385: GO 46194
46387: POP
46388: POP
// end else
46389: GO 46771
// for j = 1 to x do
46391: LD_ADDR_VAR 0 9
46395: PUSH
46396: DOUBLE
46397: LD_INT 1
46399: DEC
46400: ST_TO_ADDR
46401: LD_VAR 0 13
46405: PUSH
46406: FOR_TO
46407: IFFALSE 46769
// begin InitHc ;
46409: CALL_OW 19
// if not f then
46413: LD_VAR 0 12
46417: NOT
46418: IFFALSE 46507
// begin PrepareHuman ( false , i , skill ) ;
46420: LD_INT 0
46422: PPUSH
46423: LD_VAR 0 8
46427: PPUSH
46428: LD_VAR 0 4
46432: PPUSH
46433: CALL_OW 380
// un := CreateHuman ;
46437: LD_ADDR_VAR 0 14
46441: PUSH
46442: CALL_OW 44
46446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46447: LD_ADDR_VAR 0 7
46451: PUSH
46452: LD_VAR 0 7
46456: PPUSH
46457: LD_INT 1
46459: PPUSH
46460: LD_VAR 0 14
46464: PPUSH
46465: CALL_OW 2
46469: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46470: LD_VAR 0 14
46474: PPUSH
46475: LD_VAR 0 1
46479: PPUSH
46480: CALL_OW 250
46484: PPUSH
46485: LD_VAR 0 1
46489: PPUSH
46490: CALL_OW 251
46494: PPUSH
46495: LD_INT 10
46497: PPUSH
46498: LD_INT 0
46500: PPUSH
46501: CALL_OW 50
// continue ;
46505: GO 46406
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46507: LD_VAR 0 12
46511: PUSH
46512: LD_INT 1
46514: ARRAY
46515: PPUSH
46516: CALL_OW 313
46520: PUSH
46521: LD_VAR 0 12
46525: PUSH
46526: LD_INT 1
46528: ARRAY
46529: PPUSH
46530: CALL_OW 266
46534: PUSH
46535: LD_INT 32
46537: PUSH
46538: LD_INT 31
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: IN
46545: AND
46546: PUSH
46547: LD_VAR 0 12
46551: PUSH
46552: LD_INT 1
46554: ARRAY
46555: PPUSH
46556: CALL_OW 313
46560: PUSH
46561: LD_INT 6
46563: EQUAL
46564: OR
46565: IFFALSE 46585
// f := Delete ( f , 1 ) ;
46567: LD_ADDR_VAR 0 12
46571: PUSH
46572: LD_VAR 0 12
46576: PPUSH
46577: LD_INT 1
46579: PPUSH
46580: CALL_OW 3
46584: ST_TO_ADDR
// if not f then
46585: LD_VAR 0 12
46589: NOT
46590: IFFALSE 46608
// begin x := x + 2 ;
46592: LD_ADDR_VAR 0 13
46596: PUSH
46597: LD_VAR 0 13
46601: PUSH
46602: LD_INT 2
46604: PLUS
46605: ST_TO_ADDR
// continue ;
46606: GO 46406
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46608: LD_VAR 0 12
46612: PUSH
46613: LD_INT 1
46615: ARRAY
46616: PPUSH
46617: CALL_OW 266
46621: PUSH
46622: LD_INT 5
46624: EQUAL
46625: IFFALSE 46699
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46627: LD_VAR 0 12
46631: PUSH
46632: LD_INT 1
46634: ARRAY
46635: PPUSH
46636: CALL_OW 313
46640: PUSH
46641: LD_INT 3
46643: LESS
46644: IFFALSE 46680
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46646: LD_INT 0
46648: PPUSH
46649: LD_INT 5
46651: PUSH
46652: LD_INT 8
46654: PUSH
46655: LD_INT 9
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: PUSH
46663: LD_VAR 0 17
46667: ARRAY
46668: PPUSH
46669: LD_VAR 0 4
46673: PPUSH
46674: CALL_OW 380
46678: GO 46697
// PrepareHuman ( false , i , skill ) ;
46680: LD_INT 0
46682: PPUSH
46683: LD_VAR 0 8
46687: PPUSH
46688: LD_VAR 0 4
46692: PPUSH
46693: CALL_OW 380
// end else
46697: GO 46716
// PrepareHuman ( false , i , skill ) ;
46699: LD_INT 0
46701: PPUSH
46702: LD_VAR 0 8
46706: PPUSH
46707: LD_VAR 0 4
46711: PPUSH
46712: CALL_OW 380
// un := CreateHuman ;
46716: LD_ADDR_VAR 0 14
46720: PUSH
46721: CALL_OW 44
46725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46726: LD_ADDR_VAR 0 7
46730: PUSH
46731: LD_VAR 0 7
46735: PPUSH
46736: LD_INT 1
46738: PPUSH
46739: LD_VAR 0 14
46743: PPUSH
46744: CALL_OW 2
46748: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46749: LD_VAR 0 14
46753: PPUSH
46754: LD_VAR 0 12
46758: PUSH
46759: LD_INT 1
46761: ARRAY
46762: PPUSH
46763: CALL_OW 52
// end ;
46767: GO 46406
46769: POP
46770: POP
// end ;
46771: GO 45708
46773: POP
46774: POP
// result := result ^ buildings ;
46775: LD_ADDR_VAR 0 7
46779: PUSH
46780: LD_VAR 0 7
46784: PUSH
46785: LD_VAR 0 18
46789: ADD
46790: ST_TO_ADDR
// end else
46791: GO 46934
// begin for i = 1 to personel do
46793: LD_ADDR_VAR 0 8
46797: PUSH
46798: DOUBLE
46799: LD_INT 1
46801: DEC
46802: ST_TO_ADDR
46803: LD_VAR 0 6
46807: PUSH
46808: FOR_TO
46809: IFFALSE 46932
// begin if i > 4 then
46811: LD_VAR 0 8
46815: PUSH
46816: LD_INT 4
46818: GREATER
46819: IFFALSE 46823
// break ;
46821: GO 46932
// x := personel [ i ] ;
46823: LD_ADDR_VAR 0 13
46827: PUSH
46828: LD_VAR 0 6
46832: PUSH
46833: LD_VAR 0 8
46837: ARRAY
46838: ST_TO_ADDR
// if x = - 1 then
46839: LD_VAR 0 13
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: EQUAL
46848: IFFALSE 46852
// continue ;
46850: GO 46808
// PrepareHuman ( false , i , skill ) ;
46852: LD_INT 0
46854: PPUSH
46855: LD_VAR 0 8
46859: PPUSH
46860: LD_VAR 0 4
46864: PPUSH
46865: CALL_OW 380
// un := CreateHuman ;
46869: LD_ADDR_VAR 0 14
46873: PUSH
46874: CALL_OW 44
46878: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46879: LD_VAR 0 14
46883: PPUSH
46884: LD_VAR 0 1
46888: PPUSH
46889: CALL_OW 250
46893: PPUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: CALL_OW 251
46903: PPUSH
46904: LD_INT 10
46906: PPUSH
46907: LD_INT 0
46909: PPUSH
46910: CALL_OW 50
// result := result ^ un ;
46914: LD_ADDR_VAR 0 7
46918: PUSH
46919: LD_VAR 0 7
46923: PUSH
46924: LD_VAR 0 14
46928: ADD
46929: ST_TO_ADDR
// end ;
46930: GO 46808
46932: POP
46933: POP
// end ; end ;
46934: LD_VAR 0 7
46938: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46939: LD_INT 0
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
// result := false ;
46957: LD_ADDR_VAR 0 3
46961: PUSH
46962: LD_INT 0
46964: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46965: LD_VAR 0 1
46969: NOT
46970: PUSH
46971: LD_VAR 0 1
46975: PPUSH
46976: CALL_OW 266
46980: PUSH
46981: LD_INT 32
46983: PUSH
46984: LD_INT 33
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: IN
46991: NOT
46992: OR
46993: IFFALSE 46997
// exit ;
46995: GO 48106
// nat := GetNation ( tower ) ;
46997: LD_ADDR_VAR 0 12
47001: PUSH
47002: LD_VAR 0 1
47006: PPUSH
47007: CALL_OW 248
47011: ST_TO_ADDR
// side := GetSide ( tower ) ;
47012: LD_ADDR_VAR 0 16
47016: PUSH
47017: LD_VAR 0 1
47021: PPUSH
47022: CALL_OW 255
47026: ST_TO_ADDR
// x := GetX ( tower ) ;
47027: LD_ADDR_VAR 0 10
47031: PUSH
47032: LD_VAR 0 1
47036: PPUSH
47037: CALL_OW 250
47041: ST_TO_ADDR
// y := GetY ( tower ) ;
47042: LD_ADDR_VAR 0 11
47046: PUSH
47047: LD_VAR 0 1
47051: PPUSH
47052: CALL_OW 251
47056: ST_TO_ADDR
// if not x or not y then
47057: LD_VAR 0 10
47061: NOT
47062: PUSH
47063: LD_VAR 0 11
47067: NOT
47068: OR
47069: IFFALSE 47073
// exit ;
47071: GO 48106
// weapon := 0 ;
47073: LD_ADDR_VAR 0 18
47077: PUSH
47078: LD_INT 0
47080: ST_TO_ADDR
// fac_list := [ ] ;
47081: LD_ADDR_VAR 0 17
47085: PUSH
47086: EMPTY
47087: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47088: LD_ADDR_VAR 0 6
47092: PUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 274
47102: PPUSH
47103: LD_VAR 0 2
47107: PPUSH
47108: LD_INT 0
47110: PPUSH
47111: CALL 44677 0 3
47115: PPUSH
47116: LD_INT 30
47118: PUSH
47119: LD_INT 3
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PPUSH
47126: CALL_OW 72
47130: ST_TO_ADDR
// if not factories then
47131: LD_VAR 0 6
47135: NOT
47136: IFFALSE 47140
// exit ;
47138: GO 48106
// for i in factories do
47140: LD_ADDR_VAR 0 8
47144: PUSH
47145: LD_VAR 0 6
47149: PUSH
47150: FOR_IN
47151: IFFALSE 47176
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47153: LD_ADDR_VAR 0 17
47157: PUSH
47158: LD_VAR 0 17
47162: PUSH
47163: LD_VAR 0 8
47167: PPUSH
47168: CALL_OW 478
47172: UNION
47173: ST_TO_ADDR
47174: GO 47150
47176: POP
47177: POP
// if not fac_list then
47178: LD_VAR 0 17
47182: NOT
47183: IFFALSE 47187
// exit ;
47185: GO 48106
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47187: LD_ADDR_VAR 0 5
47191: PUSH
47192: LD_INT 4
47194: PUSH
47195: LD_INT 5
47197: PUSH
47198: LD_INT 9
47200: PUSH
47201: LD_INT 10
47203: PUSH
47204: LD_INT 6
47206: PUSH
47207: LD_INT 7
47209: PUSH
47210: LD_INT 11
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 27
47224: PUSH
47225: LD_INT 28
47227: PUSH
47228: LD_INT 26
47230: PUSH
47231: LD_INT 30
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 43
47242: PUSH
47243: LD_INT 44
47245: PUSH
47246: LD_INT 46
47248: PUSH
47249: LD_INT 45
47251: PUSH
47252: LD_INT 47
47254: PUSH
47255: LD_INT 49
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: LD_VAR 0 12
47275: ARRAY
47276: ST_TO_ADDR
// list := list isect fac_list ;
47277: LD_ADDR_VAR 0 5
47281: PUSH
47282: LD_VAR 0 5
47286: PUSH
47287: LD_VAR 0 17
47291: ISECT
47292: ST_TO_ADDR
// if not list then
47293: LD_VAR 0 5
47297: NOT
47298: IFFALSE 47302
// exit ;
47300: GO 48106
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47302: LD_VAR 0 12
47306: PUSH
47307: LD_INT 3
47309: EQUAL
47310: PUSH
47311: LD_INT 49
47313: PUSH
47314: LD_VAR 0 5
47318: IN
47319: AND
47320: PUSH
47321: LD_INT 31
47323: PPUSH
47324: LD_VAR 0 16
47328: PPUSH
47329: CALL_OW 321
47333: PUSH
47334: LD_INT 2
47336: EQUAL
47337: AND
47338: IFFALSE 47398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47340: LD_INT 22
47342: PUSH
47343: LD_VAR 0 16
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 35
47354: PUSH
47355: LD_INT 49
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 91
47364: PUSH
47365: LD_VAR 0 1
47369: PUSH
47370: LD_INT 10
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: PPUSH
47383: CALL_OW 69
47387: NOT
47388: IFFALSE 47398
// weapon := ru_time_lapser ;
47390: LD_ADDR_VAR 0 18
47394: PUSH
47395: LD_INT 49
47397: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47398: LD_VAR 0 12
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: IN
47413: PUSH
47414: LD_INT 11
47416: PUSH
47417: LD_VAR 0 5
47421: IN
47422: PUSH
47423: LD_INT 30
47425: PUSH
47426: LD_VAR 0 5
47430: IN
47431: OR
47432: AND
47433: PUSH
47434: LD_INT 6
47436: PPUSH
47437: LD_VAR 0 16
47441: PPUSH
47442: CALL_OW 321
47446: PUSH
47447: LD_INT 2
47449: EQUAL
47450: AND
47451: IFFALSE 47616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47453: LD_INT 22
47455: PUSH
47456: LD_VAR 0 16
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 35
47470: PUSH
47471: LD_INT 11
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 35
47480: PUSH
47481: LD_INT 30
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 91
47495: PUSH
47496: LD_VAR 0 1
47500: PUSH
47501: LD_INT 18
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 69
47518: NOT
47519: PUSH
47520: LD_INT 22
47522: PUSH
47523: LD_VAR 0 16
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 30
47537: PUSH
47538: LD_INT 32
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 30
47547: PUSH
47548: LD_INT 33
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 91
47562: PUSH
47563: LD_VAR 0 1
47567: PUSH
47568: LD_INT 12
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: PPUSH
47584: CALL_OW 69
47588: PUSH
47589: LD_INT 2
47591: GREATER
47592: AND
47593: IFFALSE 47616
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47595: LD_ADDR_VAR 0 18
47599: PUSH
47600: LD_INT 11
47602: PUSH
47603: LD_INT 30
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_VAR 0 12
47614: ARRAY
47615: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47616: LD_VAR 0 18
47620: NOT
47621: PUSH
47622: LD_INT 40
47624: PPUSH
47625: LD_VAR 0 16
47629: PPUSH
47630: CALL_OW 321
47634: PUSH
47635: LD_INT 2
47637: EQUAL
47638: AND
47639: PUSH
47640: LD_INT 7
47642: PUSH
47643: LD_VAR 0 5
47647: IN
47648: PUSH
47649: LD_INT 28
47651: PUSH
47652: LD_VAR 0 5
47656: IN
47657: OR
47658: PUSH
47659: LD_INT 45
47661: PUSH
47662: LD_VAR 0 5
47666: IN
47667: OR
47668: AND
47669: IFFALSE 47923
// begin hex := GetHexInfo ( x , y ) ;
47671: LD_ADDR_VAR 0 4
47675: PUSH
47676: LD_VAR 0 10
47680: PPUSH
47681: LD_VAR 0 11
47685: PPUSH
47686: CALL_OW 546
47690: ST_TO_ADDR
// if hex [ 1 ] then
47691: LD_VAR 0 4
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: IFFALSE 47703
// exit ;
47701: GO 48106
// height := hex [ 2 ] ;
47703: LD_ADDR_VAR 0 15
47707: PUSH
47708: LD_VAR 0 4
47712: PUSH
47713: LD_INT 2
47715: ARRAY
47716: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47717: LD_ADDR_VAR 0 14
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 5
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: ST_TO_ADDR
// for i in tmp do
47740: LD_ADDR_VAR 0 8
47744: PUSH
47745: LD_VAR 0 14
47749: PUSH
47750: FOR_IN
47751: IFFALSE 47921
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47753: LD_ADDR_VAR 0 9
47757: PUSH
47758: LD_VAR 0 10
47762: PPUSH
47763: LD_VAR 0 8
47767: PPUSH
47768: LD_INT 5
47770: PPUSH
47771: CALL_OW 272
47775: PUSH
47776: LD_VAR 0 11
47780: PPUSH
47781: LD_VAR 0 8
47785: PPUSH
47786: LD_INT 5
47788: PPUSH
47789: CALL_OW 273
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47798: LD_VAR 0 9
47802: PUSH
47803: LD_INT 1
47805: ARRAY
47806: PPUSH
47807: LD_VAR 0 9
47811: PUSH
47812: LD_INT 2
47814: ARRAY
47815: PPUSH
47816: CALL_OW 488
47820: IFFALSE 47919
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47822: LD_ADDR_VAR 0 4
47826: PUSH
47827: LD_VAR 0 9
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: PPUSH
47836: LD_VAR 0 9
47840: PUSH
47841: LD_INT 2
47843: ARRAY
47844: PPUSH
47845: CALL_OW 546
47849: ST_TO_ADDR
// if hex [ 1 ] then
47850: LD_VAR 0 4
47854: PUSH
47855: LD_INT 1
47857: ARRAY
47858: IFFALSE 47862
// continue ;
47860: GO 47750
// h := hex [ 2 ] ;
47862: LD_ADDR_VAR 0 13
47866: PUSH
47867: LD_VAR 0 4
47871: PUSH
47872: LD_INT 2
47874: ARRAY
47875: ST_TO_ADDR
// if h + 7 < height then
47876: LD_VAR 0 13
47880: PUSH
47881: LD_INT 7
47883: PLUS
47884: PUSH
47885: LD_VAR 0 15
47889: LESS
47890: IFFALSE 47919
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47892: LD_ADDR_VAR 0 18
47896: PUSH
47897: LD_INT 7
47899: PUSH
47900: LD_INT 28
47902: PUSH
47903: LD_INT 45
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: PUSH
47911: LD_VAR 0 12
47915: ARRAY
47916: ST_TO_ADDR
// break ;
47917: GO 47921
// end ; end ; end ;
47919: GO 47750
47921: POP
47922: POP
// end ; if not weapon then
47923: LD_VAR 0 18
47927: NOT
47928: IFFALSE 47988
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47930: LD_ADDR_VAR 0 5
47934: PUSH
47935: LD_VAR 0 5
47939: PUSH
47940: LD_INT 11
47942: PUSH
47943: LD_INT 30
47945: PUSH
47946: LD_INT 49
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: DIFF
47954: ST_TO_ADDR
// if not list then
47955: LD_VAR 0 5
47959: NOT
47960: IFFALSE 47964
// exit ;
47962: GO 48106
// weapon := list [ rand ( 1 , list ) ] ;
47964: LD_ADDR_VAR 0 18
47968: PUSH
47969: LD_VAR 0 5
47973: PUSH
47974: LD_INT 1
47976: PPUSH
47977: LD_VAR 0 5
47981: PPUSH
47982: CALL_OW 12
47986: ARRAY
47987: ST_TO_ADDR
// end ; if weapon then
47988: LD_VAR 0 18
47992: IFFALSE 48106
// begin tmp := CostOfWeapon ( weapon ) ;
47994: LD_ADDR_VAR 0 14
47998: PUSH
47999: LD_VAR 0 18
48003: PPUSH
48004: CALL_OW 451
48008: ST_TO_ADDR
// j := GetBase ( tower ) ;
48009: LD_ADDR_VAR 0 9
48013: PUSH
48014: LD_VAR 0 1
48018: PPUSH
48019: CALL_OW 274
48023: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48024: LD_VAR 0 9
48028: PPUSH
48029: LD_INT 1
48031: PPUSH
48032: CALL_OW 275
48036: PUSH
48037: LD_VAR 0 14
48041: PUSH
48042: LD_INT 1
48044: ARRAY
48045: GREATEREQUAL
48046: PUSH
48047: LD_VAR 0 9
48051: PPUSH
48052: LD_INT 2
48054: PPUSH
48055: CALL_OW 275
48059: PUSH
48060: LD_VAR 0 14
48064: PUSH
48065: LD_INT 2
48067: ARRAY
48068: GREATEREQUAL
48069: AND
48070: PUSH
48071: LD_VAR 0 9
48075: PPUSH
48076: LD_INT 3
48078: PPUSH
48079: CALL_OW 275
48083: PUSH
48084: LD_VAR 0 14
48088: PUSH
48089: LD_INT 3
48091: ARRAY
48092: GREATEREQUAL
48093: AND
48094: IFFALSE 48106
// result := weapon ;
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_VAR 0 18
48105: ST_TO_ADDR
// end ; end ;
48106: LD_VAR 0 3
48110: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48111: LD_INT 0
48113: PPUSH
48114: PPUSH
// result := true ;
48115: LD_ADDR_VAR 0 3
48119: PUSH
48120: LD_INT 1
48122: ST_TO_ADDR
// if array1 = array2 then
48123: LD_VAR 0 1
48127: PUSH
48128: LD_VAR 0 2
48132: EQUAL
48133: IFFALSE 48193
// begin for i = 1 to array1 do
48135: LD_ADDR_VAR 0 4
48139: PUSH
48140: DOUBLE
48141: LD_INT 1
48143: DEC
48144: ST_TO_ADDR
48145: LD_VAR 0 1
48149: PUSH
48150: FOR_TO
48151: IFFALSE 48189
// if array1 [ i ] <> array2 [ i ] then
48153: LD_VAR 0 1
48157: PUSH
48158: LD_VAR 0 4
48162: ARRAY
48163: PUSH
48164: LD_VAR 0 2
48168: PUSH
48169: LD_VAR 0 4
48173: ARRAY
48174: NONEQUAL
48175: IFFALSE 48187
// begin result := false ;
48177: LD_ADDR_VAR 0 3
48181: PUSH
48182: LD_INT 0
48184: ST_TO_ADDR
// break ;
48185: GO 48189
// end ;
48187: GO 48150
48189: POP
48190: POP
// end else
48191: GO 48201
// result := false ;
48193: LD_ADDR_VAR 0 3
48197: PUSH
48198: LD_INT 0
48200: ST_TO_ADDR
// end ;
48201: LD_VAR 0 3
48205: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48206: LD_INT 0
48208: PPUSH
48209: PPUSH
// if not array1 or not array2 then
48210: LD_VAR 0 1
48214: NOT
48215: PUSH
48216: LD_VAR 0 2
48220: NOT
48221: OR
48222: IFFALSE 48226
// exit ;
48224: GO 48290
// result := true ;
48226: LD_ADDR_VAR 0 3
48230: PUSH
48231: LD_INT 1
48233: ST_TO_ADDR
// for i = 1 to array1 do
48234: LD_ADDR_VAR 0 4
48238: PUSH
48239: DOUBLE
48240: LD_INT 1
48242: DEC
48243: ST_TO_ADDR
48244: LD_VAR 0 1
48248: PUSH
48249: FOR_TO
48250: IFFALSE 48288
// if array1 [ i ] <> array2 [ i ] then
48252: LD_VAR 0 1
48256: PUSH
48257: LD_VAR 0 4
48261: ARRAY
48262: PUSH
48263: LD_VAR 0 2
48267: PUSH
48268: LD_VAR 0 4
48272: ARRAY
48273: NONEQUAL
48274: IFFALSE 48286
// begin result := false ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_INT 0
48283: ST_TO_ADDR
// break ;
48284: GO 48288
// end ;
48286: GO 48249
48288: POP
48289: POP
// end ;
48290: LD_VAR 0 3
48294: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48295: LD_INT 0
48297: PPUSH
48298: PPUSH
48299: PPUSH
// pom := GetBase ( fac ) ;
48300: LD_ADDR_VAR 0 5
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 274
48314: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48315: LD_ADDR_VAR 0 4
48319: PUSH
48320: LD_VAR 0 2
48324: PUSH
48325: LD_INT 1
48327: ARRAY
48328: PPUSH
48329: LD_VAR 0 2
48333: PUSH
48334: LD_INT 2
48336: ARRAY
48337: PPUSH
48338: LD_VAR 0 2
48342: PUSH
48343: LD_INT 3
48345: ARRAY
48346: PPUSH
48347: LD_VAR 0 2
48351: PUSH
48352: LD_INT 4
48354: ARRAY
48355: PPUSH
48356: CALL_OW 449
48360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48361: LD_ADDR_VAR 0 3
48365: PUSH
48366: LD_VAR 0 5
48370: PPUSH
48371: LD_INT 1
48373: PPUSH
48374: CALL_OW 275
48378: PUSH
48379: LD_VAR 0 4
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: GREATEREQUAL
48388: PUSH
48389: LD_VAR 0 5
48393: PPUSH
48394: LD_INT 2
48396: PPUSH
48397: CALL_OW 275
48401: PUSH
48402: LD_VAR 0 4
48406: PUSH
48407: LD_INT 2
48409: ARRAY
48410: GREATEREQUAL
48411: AND
48412: PUSH
48413: LD_VAR 0 5
48417: PPUSH
48418: LD_INT 3
48420: PPUSH
48421: CALL_OW 275
48425: PUSH
48426: LD_VAR 0 4
48430: PUSH
48431: LD_INT 3
48433: ARRAY
48434: GREATEREQUAL
48435: AND
48436: ST_TO_ADDR
// end ;
48437: LD_VAR 0 3
48441: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48442: LD_INT 0
48444: PPUSH
48445: PPUSH
48446: PPUSH
48447: PPUSH
// pom := GetBase ( building ) ;
48448: LD_ADDR_VAR 0 3
48452: PUSH
48453: LD_VAR 0 1
48457: PPUSH
48458: CALL_OW 274
48462: ST_TO_ADDR
// if not pom then
48463: LD_VAR 0 3
48467: NOT
48468: IFFALSE 48472
// exit ;
48470: GO 48642
// btype := GetBType ( building ) ;
48472: LD_ADDR_VAR 0 5
48476: PUSH
48477: LD_VAR 0 1
48481: PPUSH
48482: CALL_OW 266
48486: ST_TO_ADDR
// if btype = b_armoury then
48487: LD_VAR 0 5
48491: PUSH
48492: LD_INT 4
48494: EQUAL
48495: IFFALSE 48505
// btype := b_barracks ;
48497: LD_ADDR_VAR 0 5
48501: PUSH
48502: LD_INT 5
48504: ST_TO_ADDR
// if btype = b_depot then
48505: LD_VAR 0 5
48509: PUSH
48510: LD_INT 0
48512: EQUAL
48513: IFFALSE 48523
// btype := b_warehouse ;
48515: LD_ADDR_VAR 0 5
48519: PUSH
48520: LD_INT 1
48522: ST_TO_ADDR
// if btype = b_workshop then
48523: LD_VAR 0 5
48527: PUSH
48528: LD_INT 2
48530: EQUAL
48531: IFFALSE 48541
// btype := b_factory ;
48533: LD_ADDR_VAR 0 5
48537: PUSH
48538: LD_INT 3
48540: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48541: LD_ADDR_VAR 0 4
48545: PUSH
48546: LD_VAR 0 5
48550: PPUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 248
48560: PPUSH
48561: CALL_OW 450
48565: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48566: LD_ADDR_VAR 0 2
48570: PUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: LD_INT 1
48578: PPUSH
48579: CALL_OW 275
48583: PUSH
48584: LD_VAR 0 4
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: GREATEREQUAL
48593: PUSH
48594: LD_VAR 0 3
48598: PPUSH
48599: LD_INT 2
48601: PPUSH
48602: CALL_OW 275
48606: PUSH
48607: LD_VAR 0 4
48611: PUSH
48612: LD_INT 2
48614: ARRAY
48615: GREATEREQUAL
48616: AND
48617: PUSH
48618: LD_VAR 0 3
48622: PPUSH
48623: LD_INT 3
48625: PPUSH
48626: CALL_OW 275
48630: PUSH
48631: LD_VAR 0 4
48635: PUSH
48636: LD_INT 3
48638: ARRAY
48639: GREATEREQUAL
48640: AND
48641: ST_TO_ADDR
// end ;
48642: LD_VAR 0 2
48646: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48647: LD_INT 0
48649: PPUSH
48650: PPUSH
48651: PPUSH
// pom := GetBase ( building ) ;
48652: LD_ADDR_VAR 0 4
48656: PUSH
48657: LD_VAR 0 1
48661: PPUSH
48662: CALL_OW 274
48666: ST_TO_ADDR
// if not pom then
48667: LD_VAR 0 4
48671: NOT
48672: IFFALSE 48676
// exit ;
48674: GO 48777
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48676: LD_ADDR_VAR 0 5
48680: PUSH
48681: LD_VAR 0 2
48685: PPUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 248
48695: PPUSH
48696: CALL_OW 450
48700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_VAR 0 4
48710: PPUSH
48711: LD_INT 1
48713: PPUSH
48714: CALL_OW 275
48718: PUSH
48719: LD_VAR 0 5
48723: PUSH
48724: LD_INT 1
48726: ARRAY
48727: GREATEREQUAL
48728: PUSH
48729: LD_VAR 0 4
48733: PPUSH
48734: LD_INT 2
48736: PPUSH
48737: CALL_OW 275
48741: PUSH
48742: LD_VAR 0 5
48746: PUSH
48747: LD_INT 2
48749: ARRAY
48750: GREATEREQUAL
48751: AND
48752: PUSH
48753: LD_VAR 0 4
48757: PPUSH
48758: LD_INT 3
48760: PPUSH
48761: CALL_OW 275
48765: PUSH
48766: LD_VAR 0 5
48770: PUSH
48771: LD_INT 3
48773: ARRAY
48774: GREATEREQUAL
48775: AND
48776: ST_TO_ADDR
// end ;
48777: LD_VAR 0 3
48781: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48782: LD_INT 0
48784: PPUSH
48785: PPUSH
48786: PPUSH
48787: PPUSH
48788: PPUSH
48789: PPUSH
48790: PPUSH
48791: PPUSH
48792: PPUSH
48793: PPUSH
48794: PPUSH
// result := false ;
48795: LD_ADDR_VAR 0 8
48799: PUSH
48800: LD_INT 0
48802: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48803: LD_VAR 0 5
48807: NOT
48808: PUSH
48809: LD_VAR 0 1
48813: NOT
48814: OR
48815: PUSH
48816: LD_VAR 0 2
48820: NOT
48821: OR
48822: PUSH
48823: LD_VAR 0 3
48827: NOT
48828: OR
48829: IFFALSE 48833
// exit ;
48831: GO 49647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48833: LD_ADDR_VAR 0 14
48837: PUSH
48838: LD_VAR 0 1
48842: PPUSH
48843: LD_VAR 0 2
48847: PPUSH
48848: LD_VAR 0 3
48852: PPUSH
48853: LD_VAR 0 4
48857: PPUSH
48858: LD_VAR 0 5
48862: PUSH
48863: LD_INT 1
48865: ARRAY
48866: PPUSH
48867: CALL_OW 248
48871: PPUSH
48872: LD_INT 0
48874: PPUSH
48875: CALL 50884 0 6
48879: ST_TO_ADDR
// if not hexes then
48880: LD_VAR 0 14
48884: NOT
48885: IFFALSE 48889
// exit ;
48887: GO 49647
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48889: LD_ADDR_VAR 0 17
48893: PUSH
48894: LD_VAR 0 5
48898: PPUSH
48899: LD_INT 22
48901: PUSH
48902: LD_VAR 0 13
48906: PPUSH
48907: CALL_OW 255
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 30
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 30
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PPUSH
48948: CALL_OW 72
48952: ST_TO_ADDR
// for i = 1 to hexes do
48953: LD_ADDR_VAR 0 9
48957: PUSH
48958: DOUBLE
48959: LD_INT 1
48961: DEC
48962: ST_TO_ADDR
48963: LD_VAR 0 14
48967: PUSH
48968: FOR_TO
48969: IFFALSE 49645
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48971: LD_ADDR_VAR 0 13
48975: PUSH
48976: LD_VAR 0 14
48980: PUSH
48981: LD_VAR 0 9
48985: ARRAY
48986: PUSH
48987: LD_INT 1
48989: ARRAY
48990: PPUSH
48991: LD_VAR 0 14
48995: PUSH
48996: LD_VAR 0 9
49000: ARRAY
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PPUSH
49006: CALL_OW 428
49010: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49011: LD_VAR 0 14
49015: PUSH
49016: LD_VAR 0 9
49020: ARRAY
49021: PUSH
49022: LD_INT 1
49024: ARRAY
49025: PPUSH
49026: LD_VAR 0 14
49030: PUSH
49031: LD_VAR 0 9
49035: ARRAY
49036: PUSH
49037: LD_INT 2
49039: ARRAY
49040: PPUSH
49041: CALL_OW 351
49045: PUSH
49046: LD_VAR 0 14
49050: PUSH
49051: LD_VAR 0 9
49055: ARRAY
49056: PUSH
49057: LD_INT 1
49059: ARRAY
49060: PPUSH
49061: LD_VAR 0 14
49065: PUSH
49066: LD_VAR 0 9
49070: ARRAY
49071: PUSH
49072: LD_INT 2
49074: ARRAY
49075: PPUSH
49076: CALL_OW 488
49080: NOT
49081: OR
49082: PUSH
49083: LD_VAR 0 13
49087: PPUSH
49088: CALL_OW 247
49092: PUSH
49093: LD_INT 3
49095: EQUAL
49096: OR
49097: IFFALSE 49103
// exit ;
49099: POP
49100: POP
49101: GO 49647
// if not tmp then
49103: LD_VAR 0 13
49107: NOT
49108: IFFALSE 49112
// continue ;
49110: GO 48968
// result := true ;
49112: LD_ADDR_VAR 0 8
49116: PUSH
49117: LD_INT 1
49119: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49120: LD_VAR 0 6
49124: PUSH
49125: LD_VAR 0 13
49129: PPUSH
49130: CALL_OW 247
49134: PUSH
49135: LD_INT 2
49137: EQUAL
49138: AND
49139: PUSH
49140: LD_VAR 0 13
49144: PPUSH
49145: CALL_OW 263
49149: PUSH
49150: LD_INT 1
49152: EQUAL
49153: AND
49154: IFFALSE 49318
// begin if IsDrivenBy ( tmp ) then
49156: LD_VAR 0 13
49160: PPUSH
49161: CALL_OW 311
49165: IFFALSE 49169
// continue ;
49167: GO 48968
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49169: LD_VAR 0 6
49173: PPUSH
49174: LD_INT 3
49176: PUSH
49177: LD_INT 60
49179: PUSH
49180: EMPTY
49181: LIST
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 55
49192: PUSH
49193: EMPTY
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PPUSH
49204: CALL_OW 72
49208: IFFALSE 49316
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49210: LD_ADDR_VAR 0 18
49214: PUSH
49215: LD_VAR 0 6
49219: PPUSH
49220: LD_INT 3
49222: PUSH
49223: LD_INT 60
49225: PUSH
49226: EMPTY
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: LD_INT 55
49238: PUSH
49239: EMPTY
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PPUSH
49250: CALL_OW 72
49254: PUSH
49255: LD_INT 1
49257: ARRAY
49258: ST_TO_ADDR
// if IsInUnit ( driver ) then
49259: LD_VAR 0 18
49263: PPUSH
49264: CALL_OW 310
49268: IFFALSE 49279
// ComExit ( driver ) ;
49270: LD_VAR 0 18
49274: PPUSH
49275: CALL 74068 0 1
// AddComEnterUnit ( driver , tmp ) ;
49279: LD_VAR 0 18
49283: PPUSH
49284: LD_VAR 0 13
49288: PPUSH
49289: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49293: LD_VAR 0 18
49297: PPUSH
49298: LD_VAR 0 7
49302: PPUSH
49303: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49307: LD_VAR 0 18
49311: PPUSH
49312: CALL_OW 181
// end ; continue ;
49316: GO 48968
// end ; if not cleaners or not tmp in cleaners then
49318: LD_VAR 0 6
49322: NOT
49323: PUSH
49324: LD_VAR 0 13
49328: PUSH
49329: LD_VAR 0 6
49333: IN
49334: NOT
49335: OR
49336: IFFALSE 49643
// begin if dep then
49338: LD_VAR 0 17
49342: IFFALSE 49478
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49344: LD_ADDR_VAR 0 16
49348: PUSH
49349: LD_VAR 0 17
49353: PUSH
49354: LD_INT 1
49356: ARRAY
49357: PPUSH
49358: CALL_OW 250
49362: PPUSH
49363: LD_VAR 0 17
49367: PUSH
49368: LD_INT 1
49370: ARRAY
49371: PPUSH
49372: CALL_OW 254
49376: PPUSH
49377: LD_INT 5
49379: PPUSH
49380: CALL_OW 272
49384: PUSH
49385: LD_VAR 0 17
49389: PUSH
49390: LD_INT 1
49392: ARRAY
49393: PPUSH
49394: CALL_OW 251
49398: PPUSH
49399: LD_VAR 0 17
49403: PUSH
49404: LD_INT 1
49406: ARRAY
49407: PPUSH
49408: CALL_OW 254
49412: PPUSH
49413: LD_INT 5
49415: PPUSH
49416: CALL_OW 273
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49425: LD_VAR 0 16
49429: PUSH
49430: LD_INT 1
49432: ARRAY
49433: PPUSH
49434: LD_VAR 0 16
49438: PUSH
49439: LD_INT 2
49441: ARRAY
49442: PPUSH
49443: CALL_OW 488
49447: IFFALSE 49478
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49449: LD_VAR 0 13
49453: PPUSH
49454: LD_VAR 0 16
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 16
49467: PUSH
49468: LD_INT 2
49470: ARRAY
49471: PPUSH
49472: CALL_OW 111
// continue ;
49476: GO 48968
// end ; end ; r := GetDir ( tmp ) ;
49478: LD_ADDR_VAR 0 15
49482: PUSH
49483: LD_VAR 0 13
49487: PPUSH
49488: CALL_OW 254
49492: ST_TO_ADDR
// if r = 5 then
49493: LD_VAR 0 15
49497: PUSH
49498: LD_INT 5
49500: EQUAL
49501: IFFALSE 49511
// r := 0 ;
49503: LD_ADDR_VAR 0 15
49507: PUSH
49508: LD_INT 0
49510: ST_TO_ADDR
// for j = r to 5 do
49511: LD_ADDR_VAR 0 10
49515: PUSH
49516: DOUBLE
49517: LD_VAR 0 15
49521: DEC
49522: ST_TO_ADDR
49523: LD_INT 5
49525: PUSH
49526: FOR_TO
49527: IFFALSE 49641
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49529: LD_ADDR_VAR 0 11
49533: PUSH
49534: LD_VAR 0 13
49538: PPUSH
49539: CALL_OW 250
49543: PPUSH
49544: LD_VAR 0 10
49548: PPUSH
49549: LD_INT 2
49551: PPUSH
49552: CALL_OW 272
49556: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49557: LD_ADDR_VAR 0 12
49561: PUSH
49562: LD_VAR 0 13
49566: PPUSH
49567: CALL_OW 251
49571: PPUSH
49572: LD_VAR 0 10
49576: PPUSH
49577: LD_INT 2
49579: PPUSH
49580: CALL_OW 273
49584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49585: LD_VAR 0 11
49589: PPUSH
49590: LD_VAR 0 12
49594: PPUSH
49595: CALL_OW 488
49599: PUSH
49600: LD_VAR 0 11
49604: PPUSH
49605: LD_VAR 0 12
49609: PPUSH
49610: CALL_OW 428
49614: NOT
49615: AND
49616: IFFALSE 49639
// begin ComMoveXY ( tmp , _x , _y ) ;
49618: LD_VAR 0 13
49622: PPUSH
49623: LD_VAR 0 11
49627: PPUSH
49628: LD_VAR 0 12
49632: PPUSH
49633: CALL_OW 111
// break ;
49637: GO 49641
// end ; end ;
49639: GO 49526
49641: POP
49642: POP
// end ; end ;
49643: GO 48968
49645: POP
49646: POP
// end ;
49647: LD_VAR 0 8
49651: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49652: LD_INT 0
49654: PPUSH
// result := true ;
49655: LD_ADDR_VAR 0 3
49659: PUSH
49660: LD_INT 1
49662: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49663: LD_VAR 0 2
49667: PUSH
49668: LD_INT 24
49670: DOUBLE
49671: EQUAL
49672: IFTRUE 49682
49674: LD_INT 33
49676: DOUBLE
49677: EQUAL
49678: IFTRUE 49682
49680: GO 49707
49682: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49683: LD_ADDR_VAR 0 3
49687: PUSH
49688: LD_INT 32
49690: PPUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 321
49700: PUSH
49701: LD_INT 2
49703: EQUAL
49704: ST_TO_ADDR
49705: GO 50027
49707: LD_INT 20
49709: DOUBLE
49710: EQUAL
49711: IFTRUE 49715
49713: GO 49740
49715: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49716: LD_ADDR_VAR 0 3
49720: PUSH
49721: LD_INT 6
49723: PPUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 321
49733: PUSH
49734: LD_INT 2
49736: EQUAL
49737: ST_TO_ADDR
49738: GO 50027
49740: LD_INT 22
49742: DOUBLE
49743: EQUAL
49744: IFTRUE 49754
49746: LD_INT 36
49748: DOUBLE
49749: EQUAL
49750: IFTRUE 49754
49752: GO 49779
49754: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49755: LD_ADDR_VAR 0 3
49759: PUSH
49760: LD_INT 15
49762: PPUSH
49763: LD_VAR 0 1
49767: PPUSH
49768: CALL_OW 321
49772: PUSH
49773: LD_INT 2
49775: EQUAL
49776: ST_TO_ADDR
49777: GO 50027
49779: LD_INT 30
49781: DOUBLE
49782: EQUAL
49783: IFTRUE 49787
49785: GO 49812
49787: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: LD_INT 20
49795: PPUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 321
49805: PUSH
49806: LD_INT 2
49808: EQUAL
49809: ST_TO_ADDR
49810: GO 50027
49812: LD_INT 28
49814: DOUBLE
49815: EQUAL
49816: IFTRUE 49826
49818: LD_INT 21
49820: DOUBLE
49821: EQUAL
49822: IFTRUE 49826
49824: GO 49851
49826: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49827: LD_ADDR_VAR 0 3
49831: PUSH
49832: LD_INT 21
49834: PPUSH
49835: LD_VAR 0 1
49839: PPUSH
49840: CALL_OW 321
49844: PUSH
49845: LD_INT 2
49847: EQUAL
49848: ST_TO_ADDR
49849: GO 50027
49851: LD_INT 16
49853: DOUBLE
49854: EQUAL
49855: IFTRUE 49859
49857: GO 49886
49859: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49860: LD_ADDR_VAR 0 3
49864: PUSH
49865: LD_EXP 70
49869: PPUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 321
49879: PUSH
49880: LD_INT 2
49882: EQUAL
49883: ST_TO_ADDR
49884: GO 50027
49886: LD_INT 19
49888: DOUBLE
49889: EQUAL
49890: IFTRUE 49900
49892: LD_INT 23
49894: DOUBLE
49895: EQUAL
49896: IFTRUE 49900
49898: GO 49927
49900: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49901: LD_ADDR_VAR 0 3
49905: PUSH
49906: LD_EXP 69
49910: PPUSH
49911: LD_VAR 0 1
49915: PPUSH
49916: CALL_OW 321
49920: PUSH
49921: LD_INT 2
49923: EQUAL
49924: ST_TO_ADDR
49925: GO 50027
49927: LD_INT 17
49929: DOUBLE
49930: EQUAL
49931: IFTRUE 49935
49933: GO 49960
49935: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49936: LD_ADDR_VAR 0 3
49940: PUSH
49941: LD_INT 39
49943: PPUSH
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 321
49953: PUSH
49954: LD_INT 2
49956: EQUAL
49957: ST_TO_ADDR
49958: GO 50027
49960: LD_INT 18
49962: DOUBLE
49963: EQUAL
49964: IFTRUE 49968
49966: GO 49993
49968: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49969: LD_ADDR_VAR 0 3
49973: PUSH
49974: LD_INT 40
49976: PPUSH
49977: LD_VAR 0 1
49981: PPUSH
49982: CALL_OW 321
49986: PUSH
49987: LD_INT 2
49989: EQUAL
49990: ST_TO_ADDR
49991: GO 50027
49993: LD_INT 27
49995: DOUBLE
49996: EQUAL
49997: IFTRUE 50001
49999: GO 50026
50001: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50002: LD_ADDR_VAR 0 3
50006: PUSH
50007: LD_INT 35
50009: PPUSH
50010: LD_VAR 0 1
50014: PPUSH
50015: CALL_OW 321
50019: PUSH
50020: LD_INT 2
50022: EQUAL
50023: ST_TO_ADDR
50024: GO 50027
50026: POP
// end ;
50027: LD_VAR 0 3
50031: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50032: LD_INT 0
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
// result := false ;
50045: LD_ADDR_VAR 0 6
50049: PUSH
50050: LD_INT 0
50052: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50053: LD_VAR 0 1
50057: NOT
50058: PUSH
50059: LD_VAR 0 1
50063: PPUSH
50064: CALL_OW 266
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: IN
50079: NOT
50080: OR
50081: PUSH
50082: LD_VAR 0 2
50086: NOT
50087: OR
50088: PUSH
50089: LD_VAR 0 5
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 4
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: IN
50120: NOT
50121: OR
50122: PUSH
50123: LD_VAR 0 3
50127: PPUSH
50128: LD_VAR 0 4
50132: PPUSH
50133: CALL_OW 488
50137: NOT
50138: OR
50139: IFFALSE 50143
// exit ;
50141: GO 50879
// side := GetSide ( depot ) ;
50143: LD_ADDR_VAR 0 9
50147: PUSH
50148: LD_VAR 0 1
50152: PPUSH
50153: CALL_OW 255
50157: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50158: LD_VAR 0 9
50162: PPUSH
50163: LD_VAR 0 2
50167: PPUSH
50168: CALL 49652 0 2
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50879
// pom := GetBase ( depot ) ;
50177: LD_ADDR_VAR 0 10
50181: PUSH
50182: LD_VAR 0 1
50186: PPUSH
50187: CALL_OW 274
50191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50192: LD_ADDR_VAR 0 11
50196: PUSH
50197: LD_VAR 0 2
50201: PPUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL_OW 248
50211: PPUSH
50212: CALL_OW 450
50216: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50217: LD_VAR 0 10
50221: PPUSH
50222: LD_INT 1
50224: PPUSH
50225: CALL_OW 275
50229: PUSH
50230: LD_VAR 0 11
50234: PUSH
50235: LD_INT 1
50237: ARRAY
50238: GREATEREQUAL
50239: PUSH
50240: LD_VAR 0 10
50244: PPUSH
50245: LD_INT 2
50247: PPUSH
50248: CALL_OW 275
50252: PUSH
50253: LD_VAR 0 11
50257: PUSH
50258: LD_INT 2
50260: ARRAY
50261: GREATEREQUAL
50262: AND
50263: PUSH
50264: LD_VAR 0 10
50268: PPUSH
50269: LD_INT 3
50271: PPUSH
50272: CALL_OW 275
50276: PUSH
50277: LD_VAR 0 11
50281: PUSH
50282: LD_INT 3
50284: ARRAY
50285: GREATEREQUAL
50286: AND
50287: NOT
50288: IFFALSE 50292
// exit ;
50290: GO 50879
// if GetBType ( depot ) = b_depot then
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 266
50301: PUSH
50302: LD_INT 0
50304: EQUAL
50305: IFFALSE 50317
// dist := 28 else
50307: LD_ADDR_VAR 0 14
50311: PUSH
50312: LD_INT 28
50314: ST_TO_ADDR
50315: GO 50325
// dist := 36 ;
50317: LD_ADDR_VAR 0 14
50321: PUSH
50322: LD_INT 36
50324: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50325: LD_VAR 0 1
50329: PPUSH
50330: LD_VAR 0 3
50334: PPUSH
50335: LD_VAR 0 4
50339: PPUSH
50340: CALL_OW 297
50344: PUSH
50345: LD_VAR 0 14
50349: GREATER
50350: IFFALSE 50354
// exit ;
50352: GO 50879
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50354: LD_ADDR_VAR 0 12
50358: PUSH
50359: LD_VAR 0 2
50363: PPUSH
50364: LD_VAR 0 3
50368: PPUSH
50369: LD_VAR 0 4
50373: PPUSH
50374: LD_VAR 0 5
50378: PPUSH
50379: LD_VAR 0 1
50383: PPUSH
50384: CALL_OW 248
50388: PPUSH
50389: LD_INT 0
50391: PPUSH
50392: CALL 50884 0 6
50396: ST_TO_ADDR
// if not hexes then
50397: LD_VAR 0 12
50401: NOT
50402: IFFALSE 50406
// exit ;
50404: GO 50879
// hex := GetHexInfo ( x , y ) ;
50406: LD_ADDR_VAR 0 15
50410: PUSH
50411: LD_VAR 0 3
50415: PPUSH
50416: LD_VAR 0 4
50420: PPUSH
50421: CALL_OW 546
50425: ST_TO_ADDR
// if hex [ 1 ] then
50426: LD_VAR 0 15
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: IFFALSE 50438
// exit ;
50436: GO 50879
// height := hex [ 2 ] ;
50438: LD_ADDR_VAR 0 13
50442: PUSH
50443: LD_VAR 0 15
50447: PUSH
50448: LD_INT 2
50450: ARRAY
50451: ST_TO_ADDR
// for i = 1 to hexes do
50452: LD_ADDR_VAR 0 7
50456: PUSH
50457: DOUBLE
50458: LD_INT 1
50460: DEC
50461: ST_TO_ADDR
50462: LD_VAR 0 12
50466: PUSH
50467: FOR_TO
50468: IFFALSE 50798
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50470: LD_VAR 0 12
50474: PUSH
50475: LD_VAR 0 7
50479: ARRAY
50480: PUSH
50481: LD_INT 1
50483: ARRAY
50484: PPUSH
50485: LD_VAR 0 12
50489: PUSH
50490: LD_VAR 0 7
50494: ARRAY
50495: PUSH
50496: LD_INT 2
50498: ARRAY
50499: PPUSH
50500: CALL_OW 488
50504: NOT
50505: PUSH
50506: LD_VAR 0 12
50510: PUSH
50511: LD_VAR 0 7
50515: ARRAY
50516: PUSH
50517: LD_INT 1
50519: ARRAY
50520: PPUSH
50521: LD_VAR 0 12
50525: PUSH
50526: LD_VAR 0 7
50530: ARRAY
50531: PUSH
50532: LD_INT 2
50534: ARRAY
50535: PPUSH
50536: CALL_OW 428
50540: PUSH
50541: LD_INT 0
50543: GREATER
50544: OR
50545: PUSH
50546: LD_VAR 0 12
50550: PUSH
50551: LD_VAR 0 7
50555: ARRAY
50556: PUSH
50557: LD_INT 1
50559: ARRAY
50560: PPUSH
50561: LD_VAR 0 12
50565: PUSH
50566: LD_VAR 0 7
50570: ARRAY
50571: PUSH
50572: LD_INT 2
50574: ARRAY
50575: PPUSH
50576: CALL_OW 351
50580: OR
50581: IFFALSE 50587
// exit ;
50583: POP
50584: POP
50585: GO 50879
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50587: LD_ADDR_VAR 0 8
50591: PUSH
50592: LD_VAR 0 12
50596: PUSH
50597: LD_VAR 0 7
50601: ARRAY
50602: PUSH
50603: LD_INT 1
50605: ARRAY
50606: PPUSH
50607: LD_VAR 0 12
50611: PUSH
50612: LD_VAR 0 7
50616: ARRAY
50617: PUSH
50618: LD_INT 2
50620: ARRAY
50621: PPUSH
50622: CALL_OW 546
50626: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50627: LD_VAR 0 8
50631: PUSH
50632: LD_INT 1
50634: ARRAY
50635: PUSH
50636: LD_VAR 0 8
50640: PUSH
50641: LD_INT 2
50643: ARRAY
50644: PUSH
50645: LD_VAR 0 13
50649: PUSH
50650: LD_INT 2
50652: PLUS
50653: GREATER
50654: OR
50655: PUSH
50656: LD_VAR 0 8
50660: PUSH
50661: LD_INT 2
50663: ARRAY
50664: PUSH
50665: LD_VAR 0 13
50669: PUSH
50670: LD_INT 2
50672: MINUS
50673: LESS
50674: OR
50675: PUSH
50676: LD_VAR 0 8
50680: PUSH
50681: LD_INT 3
50683: ARRAY
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 8
50690: PUSH
50691: LD_INT 9
50693: PUSH
50694: LD_INT 10
50696: PUSH
50697: LD_INT 11
50699: PUSH
50700: LD_INT 12
50702: PUSH
50703: LD_INT 13
50705: PUSH
50706: LD_INT 16
50708: PUSH
50709: LD_INT 17
50711: PUSH
50712: LD_INT 18
50714: PUSH
50715: LD_INT 19
50717: PUSH
50718: LD_INT 20
50720: PUSH
50721: LD_INT 21
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: IN
50739: NOT
50740: OR
50741: PUSH
50742: LD_VAR 0 8
50746: PUSH
50747: LD_INT 5
50749: ARRAY
50750: NOT
50751: OR
50752: PUSH
50753: LD_VAR 0 8
50757: PUSH
50758: LD_INT 6
50760: ARRAY
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 7
50770: PUSH
50771: LD_INT 9
50773: PUSH
50774: LD_INT 10
50776: PUSH
50777: LD_INT 11
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: IN
50788: NOT
50789: OR
50790: IFFALSE 50796
// exit ;
50792: POP
50793: POP
50794: GO 50879
// end ;
50796: GO 50467
50798: POP
50799: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50800: LD_VAR 0 9
50804: PPUSH
50805: LD_VAR 0 3
50809: PPUSH
50810: LD_VAR 0 4
50814: PPUSH
50815: LD_INT 20
50817: PPUSH
50818: CALL 42825 0 4
50822: PUSH
50823: LD_INT 4
50825: ARRAY
50826: IFFALSE 50830
// exit ;
50828: GO 50879
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50830: LD_VAR 0 2
50834: PUSH
50835: LD_INT 29
50837: PUSH
50838: LD_INT 30
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: IN
50845: PUSH
50846: LD_VAR 0 3
50850: PPUSH
50851: LD_VAR 0 4
50855: PPUSH
50856: LD_VAR 0 9
50860: PPUSH
50861: CALL_OW 440
50865: NOT
50866: AND
50867: IFFALSE 50871
// exit ;
50869: GO 50879
// result := true ;
50871: LD_ADDR_VAR 0 6
50875: PUSH
50876: LD_INT 1
50878: ST_TO_ADDR
// end ;
50879: LD_VAR 0 6
50883: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50884: LD_INT 0
50886: PPUSH
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
50895: PPUSH
50896: PPUSH
50897: PPUSH
50898: PPUSH
50899: PPUSH
50900: PPUSH
50901: PPUSH
50902: PPUSH
50903: PPUSH
50904: PPUSH
50905: PPUSH
50906: PPUSH
50907: PPUSH
50908: PPUSH
50909: PPUSH
50910: PPUSH
50911: PPUSH
50912: PPUSH
50913: PPUSH
50914: PPUSH
50915: PPUSH
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
50925: PPUSH
50926: PPUSH
50927: PPUSH
50928: PPUSH
50929: PPUSH
50930: PPUSH
50931: PPUSH
50932: PPUSH
50933: PPUSH
50934: PPUSH
50935: PPUSH
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
// result = [ ] ;
50944: LD_ADDR_VAR 0 7
50948: PUSH
50949: EMPTY
50950: ST_TO_ADDR
// temp_list = [ ] ;
50951: LD_ADDR_VAR 0 9
50955: PUSH
50956: EMPTY
50957: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50958: LD_VAR 0 4
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: IN
50989: NOT
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: IN
51006: PUSH
51007: LD_VAR 0 5
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: IN
51026: NOT
51027: AND
51028: OR
51029: IFFALSE 51033
// exit ;
51031: GO 69424
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51033: LD_VAR 0 1
51037: PUSH
51038: LD_INT 6
51040: PUSH
51041: LD_INT 7
51043: PUSH
51044: LD_INT 8
51046: PUSH
51047: LD_INT 13
51049: PUSH
51050: LD_INT 12
51052: PUSH
51053: LD_INT 15
51055: PUSH
51056: LD_INT 11
51058: PUSH
51059: LD_INT 14
51061: PUSH
51062: LD_INT 10
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: IN
51076: IFFALSE 51086
// btype = b_lab ;
51078: LD_ADDR_VAR 0 1
51082: PUSH
51083: LD_INT 6
51085: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51086: LD_VAR 0 6
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: IN
51105: NOT
51106: PUSH
51107: LD_VAR 0 1
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: LD_INT 6
51126: PUSH
51127: LD_INT 36
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 5
51135: PUSH
51136: LD_INT 31
51138: PUSH
51139: LD_INT 32
51141: PUSH
51142: LD_INT 33
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: IN
51158: NOT
51159: PUSH
51160: LD_VAR 0 6
51164: PUSH
51165: LD_INT 1
51167: EQUAL
51168: AND
51169: OR
51170: PUSH
51171: LD_VAR 0 1
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: IN
51186: NOT
51187: PUSH
51188: LD_VAR 0 6
51192: PUSH
51193: LD_INT 2
51195: EQUAL
51196: AND
51197: OR
51198: IFFALSE 51208
// mode = 0 ;
51200: LD_ADDR_VAR 0 6
51204: PUSH
51205: LD_INT 0
51207: ST_TO_ADDR
// case mode of 0 :
51208: LD_VAR 0 6
51212: PUSH
51213: LD_INT 0
51215: DOUBLE
51216: EQUAL
51217: IFTRUE 51221
51219: GO 62674
51221: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51222: LD_ADDR_VAR 0 11
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51415: LD_ADDR_VAR 0 12
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51611: LD_ADDR_VAR 0 13
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51810: LD_ADDR_VAR 0 14
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52006: LD_ADDR_VAR 0 15
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52199: LD_ADDR_VAR 0 16
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 17
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 18
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52852: LD_ADDR_VAR 0 19
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53082: LD_ADDR_VAR 0 20
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53312: LD_ADDR_VAR 0 21
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53542: LD_ADDR_VAR 0 22
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53772: LD_ADDR_VAR 0 23
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54052: LD_ADDR_VAR 0 24
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54328: LD_ADDR_VAR 0 25
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54602: LD_ADDR_VAR 0 26
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54878: LD_ADDR_VAR 0 27
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55158: LD_ADDR_VAR 0 28
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55440: LD_ADDR_VAR 0 29
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 3
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55719: LD_ADDR_VAR 0 30
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55997: LD_ADDR_VAR 0 31
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56275: LD_ADDR_VAR 0 32
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56553: LD_ADDR_VAR 0 33
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56832: LD_ADDR_VAR 0 34
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57112: LD_ADDR_VAR 0 35
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57224: LD_ADDR_VAR 0 36
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57336: LD_ADDR_VAR 0 37
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57448: LD_ADDR_VAR 0 38
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57560: LD_ADDR_VAR 0 39
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57672: LD_ADDR_VAR 0 40
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57784: LD_ADDR_VAR 0 41
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58134: LD_ADDR_VAR 0 42
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58484: LD_ADDR_VAR 0 43
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58832: LD_ADDR_VAR 0 44
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59182: LD_ADDR_VAR 0 45
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59532: LD_ADDR_VAR 0 46
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59880: LD_ADDR_VAR 0 47
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60031: LD_ADDR_VAR 0 48
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60178: LD_ADDR_VAR 0 49
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60322: LD_ADDR_VAR 0 50
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60466: LD_ADDR_VAR 0 51
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60613: LD_ADDR_VAR 0 52
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60764: LD_ADDR_VAR 0 53
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60994: LD_ADDR_VAR 0 54
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61224: LD_ADDR_VAR 0 55
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61454: LD_ADDR_VAR 0 56
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 2
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61684: LD_ADDR_VAR 0 57
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61914: LD_ADDR_VAR 0 58
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62144: LD_ADDR_VAR 0 59
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62232: LD_ADDR_VAR 0 60
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62320: LD_ADDR_VAR 0 61
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62408: LD_ADDR_VAR 0 62
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62496: LD_ADDR_VAR 0 63
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62584: LD_ADDR_VAR 0 64
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// end ; 1 :
62672: GO 68569
62674: LD_INT 1
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62682
62680: GO 65305
62682: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62683: LD_ADDR_VAR 0 11
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62727: LD_ADDR_VAR 0 12
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62768: LD_ADDR_VAR 0 13
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62808: LD_ADDR_VAR 0 14
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62849: LD_ADDR_VAR 0 15
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 3
62867: NEG
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62893: LD_ADDR_VAR 0 16
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62939: LD_ADDR_VAR 0 17
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 3
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62983: LD_ADDR_VAR 0 18
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63024: LD_ADDR_VAR 0 19
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: LIST
63063: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63064: LD_ADDR_VAR 0 20
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63105: LD_ADDR_VAR 0 21
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63149: LD_ADDR_VAR 0 22
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 3
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: NEG
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: NEG
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63195: LD_ADDR_VAR 0 23
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63239: LD_ADDR_VAR 0 24
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 4
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63280: LD_ADDR_VAR 0 25
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 4
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 4
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63320: LD_ADDR_VAR 0 26
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 4
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63361: LD_ADDR_VAR 0 27
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63405: LD_ADDR_VAR 0 28
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 4
63436: NEG
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63451: LD_ADDR_VAR 0 29
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: LD_INT 3
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: LD_INT 4
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: LD_INT 4
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: LD_INT 3
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 5
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 5
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 4
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 6
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 6
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 5
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63606: LD_ADDR_VAR 0 30
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 5
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 5
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 6
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 6
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63749: LD_ADDR_VAR 0 31
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 4
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 5
63816: PUSH
63817: LD_INT 4
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 5
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 4
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 6
63846: PUSH
63847: LD_INT 5
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 6
63856: PUSH
63857: LD_INT 6
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 5
63866: PUSH
63867: LD_INT 6
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63888: LD_ADDR_VAR 0 32
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 4
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 5
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 5
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 4
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 6
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 6
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 5
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64031: LD_ADDR_VAR 0 33
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 4
64106: NEG
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 5
64117: NEG
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 5
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 5
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 6
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 6
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64186: LD_ADDR_VAR 0 34
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: LD_INT 3
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: LD_INT 4
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 4
64241: NEG
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 4
64253: NEG
64254: PUSH
64255: LD_INT 4
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 4
64265: NEG
64266: PUSH
64267: LD_INT 5
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 5
64277: NEG
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 5
64289: NEG
64290: PUSH
64291: LD_INT 5
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 5
64301: NEG
64302: PUSH
64303: LD_INT 6
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 6
64313: NEG
64314: PUSH
64315: LD_INT 5
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 6
64325: NEG
64326: PUSH
64327: LD_INT 6
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64349: LD_ADDR_VAR 0 41
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: LD_INT 3
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64393: LD_ADDR_VAR 0 42
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64434: LD_ADDR_VAR 0 43
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64474: LD_ADDR_VAR 0 44
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64515: LD_ADDR_VAR 0 45
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64559: LD_ADDR_VAR 0 46
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: LD_INT 3
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64605: LD_ADDR_VAR 0 47
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: LD_INT 3
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64638: LD_ADDR_VAR 0 48
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64669: LD_ADDR_VAR 0 49
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: LD_INT 2
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64698: LD_ADDR_VAR 0 50
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64727: LD_ADDR_VAR 0 51
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 2
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64758: LD_ADDR_VAR 0 52
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: NEG
64778: PUSH
64779: LD_INT 2
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64791: LD_ADDR_VAR 0 53
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: LD_INT 3
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64835: LD_ADDR_VAR 0 54
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64876: LD_ADDR_VAR 0 55
64880: PUSH
64881: LD_INT 3
64883: PUSH
64884: LD_INT 2
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64916: LD_ADDR_VAR 0 56
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64957: LD_ADDR_VAR 0 57
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 3
64986: NEG
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65001: LD_ADDR_VAR 0 58
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: LD_INT 3
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65047: LD_ADDR_VAR 0 59
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65091: LD_ADDR_VAR 0 60
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65132: LD_ADDR_VAR 0 61
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65172: LD_ADDR_VAR 0 62
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65213: LD_ADDR_VAR 0 63
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: LD_INT 1
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65257: LD_ADDR_VAR 0 64
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 2
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// end ; 2 :
65303: GO 68569
65305: LD_INT 2
65307: DOUBLE
65308: EQUAL
65309: IFTRUE 65313
65311: GO 68568
65313: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65314: LD_ADDR_VAR 0 29
65318: PUSH
65319: LD_INT 4
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 4
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 5
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 5
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: PUSH
65475: LD_INT 2
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: LD_INT 4
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 4
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: LD_INT 5
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 5
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: LD_INT 4
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 5
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 4
65653: NEG
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 4
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 4
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 4
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 4
65711: NEG
65712: PUSH
65713: LD_INT 5
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 3
65723: NEG
65724: PUSH
65725: LD_INT 4
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 3
65735: NEG
65736: PUSH
65737: LD_INT 3
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 5
65759: NEG
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 5
65771: NEG
65772: PUSH
65773: LD_INT 5
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 3
65783: NEG
65784: PUSH
65785: LD_INT 5
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 5
65795: NEG
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65852: LD_ADDR_VAR 0 30
65856: PUSH
65857: LD_INT 4
65859: PUSH
65860: LD_INT 4
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 5
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 5
65889: PUSH
65890: LD_INT 5
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 4
65899: PUSH
65900: LD_INT 5
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: LD_INT 4
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 5
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 5
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 4
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 4
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: LD_INT 2
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 4
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 4
66042: NEG
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 4
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 5
66098: NEG
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 5
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 5
66121: NEG
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 3
66144: NEG
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 3
66156: NEG
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 4
66204: NEG
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: LD_INT 4
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 4
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 4
66240: NEG
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 4
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 5
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 5
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: LD_INT 3
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: LD_INT 5
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66399: LD_ADDR_VAR 0 31
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: LD_INT 5
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 5
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 5
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: NEG
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 4
66555: NEG
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 4
66566: NEG
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: LD_INT 2
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: NEG
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 4
66601: NEG
66602: PUSH
66603: LD_INT 4
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: LD_INT 5
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 4
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 3
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 4
66649: NEG
66650: PUSH
66651: LD_INT 3
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 5
66661: NEG
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 5
66673: NEG
66674: PUSH
66675: LD_INT 5
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: LD_INT 5
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 5
66697: NEG
66698: PUSH
66699: LD_INT 3
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: LD_INT 3
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 4
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 4
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: LD_INT 4
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 5
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 5
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 4
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 3
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66949: LD_ADDR_VAR 0 32
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 4
66967: NEG
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: NEG
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: NEG
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 4
67001: NEG
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 5
67012: NEG
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 5
67023: NEG
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 5
67035: NEG
67036: PUSH
67037: LD_INT 2
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 3
67058: NEG
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: NEG
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: NEG
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 2
67094: NEG
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 3
67106: NEG
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 4
67118: NEG
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 4
67130: NEG
67131: PUSH
67132: LD_INT 4
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: NEG
67143: PUSH
67144: LD_INT 4
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 4
67154: NEG
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 4
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 5
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: LD_INT 4
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 3
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: LD_INT 4
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: LD_INT 5
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 2
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: LD_INT 5
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 1
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 2
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 2
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: LD_INT 4
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 5
67391: PUSH
67392: LD_INT 5
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 4
67401: PUSH
67402: LD_INT 5
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 3
67411: PUSH
67412: LD_INT 4
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 5
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67496: LD_ADDR_VAR 0 33
67500: PUSH
67501: LD_INT 4
67503: NEG
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: NEG
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 3
67539: NEG
67540: PUSH
67541: LD_INT 3
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 4
67551: NEG
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: LD_INT 4
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: LD_INT 5
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 5
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 5
67599: NEG
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 4
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: PUSH
67634: LD_INT 3
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 2
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 4
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 5
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 5
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 4
67836: PUSH
67837: LD_INT 4
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 4
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: LD_INT 5
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 5
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 2
67968: PUSH
67969: LD_INT 5
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 2
67978: NEG
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68034: LD_ADDR_VAR 0 34
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 4
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 5
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: NEG
68097: PUSH
68098: LD_INT 4
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: LD_INT 5
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: LD_INT 3
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: LD_INT 5
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 4
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 3
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: LD_INT 2
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 5
68256: PUSH
68257: LD_INT 4
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 5
68266: PUSH
68267: LD_INT 5
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: LD_INT 5
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 3
68286: PUSH
68287: LD_INT 4
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: PUSH
68307: LD_INT 3
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 3
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: LD_INT 4
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 2
68408: NEG
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 4
68419: NEG
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 4
68430: NEG
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 3
68453: NEG
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 4
68464: NEG
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 5
68475: NEG
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 5
68486: NEG
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 5
68498: NEG
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: NEG
68511: PUSH
68512: LD_INT 2
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: ST_TO_ADDR
// end ; end ;
68566: GO 68569
68568: POP
// case btype of b_depot , b_warehouse :
68569: LD_VAR 0 1
68573: PUSH
68574: LD_INT 0
68576: DOUBLE
68577: EQUAL
68578: IFTRUE 68588
68580: LD_INT 1
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68588
68586: GO 68789
68588: POP
// case nation of nation_american :
68589: LD_VAR 0 5
68593: PUSH
68594: LD_INT 1
68596: DOUBLE
68597: EQUAL
68598: IFTRUE 68602
68600: GO 68658
68602: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68603: LD_ADDR_VAR 0 9
68607: PUSH
68608: LD_VAR 0 11
68612: PUSH
68613: LD_VAR 0 12
68617: PUSH
68618: LD_VAR 0 13
68622: PUSH
68623: LD_VAR 0 14
68627: PUSH
68628: LD_VAR 0 15
68632: PUSH
68633: LD_VAR 0 16
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: PUSH
68646: LD_VAR 0 4
68650: PUSH
68651: LD_INT 1
68653: PLUS
68654: ARRAY
68655: ST_TO_ADDR
68656: GO 68787
68658: LD_INT 2
68660: DOUBLE
68661: EQUAL
68662: IFTRUE 68666
68664: GO 68722
68666: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68667: LD_ADDR_VAR 0 9
68671: PUSH
68672: LD_VAR 0 17
68676: PUSH
68677: LD_VAR 0 18
68681: PUSH
68682: LD_VAR 0 19
68686: PUSH
68687: LD_VAR 0 20
68691: PUSH
68692: LD_VAR 0 21
68696: PUSH
68697: LD_VAR 0 22
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: PUSH
68710: LD_VAR 0 4
68714: PUSH
68715: LD_INT 1
68717: PLUS
68718: ARRAY
68719: ST_TO_ADDR
68720: GO 68787
68722: LD_INT 3
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68730
68728: GO 68786
68730: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68731: LD_ADDR_VAR 0 9
68735: PUSH
68736: LD_VAR 0 23
68740: PUSH
68741: LD_VAR 0 24
68745: PUSH
68746: LD_VAR 0 25
68750: PUSH
68751: LD_VAR 0 26
68755: PUSH
68756: LD_VAR 0 27
68760: PUSH
68761: LD_VAR 0 28
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: PUSH
68774: LD_VAR 0 4
68778: PUSH
68779: LD_INT 1
68781: PLUS
68782: ARRAY
68783: ST_TO_ADDR
68784: GO 68787
68786: POP
68787: GO 69342
68789: LD_INT 2
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68803
68795: LD_INT 3
68797: DOUBLE
68798: EQUAL
68799: IFTRUE 68803
68801: GO 68859
68803: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68804: LD_ADDR_VAR 0 9
68808: PUSH
68809: LD_VAR 0 29
68813: PUSH
68814: LD_VAR 0 30
68818: PUSH
68819: LD_VAR 0 31
68823: PUSH
68824: LD_VAR 0 32
68828: PUSH
68829: LD_VAR 0 33
68833: PUSH
68834: LD_VAR 0 34
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: PUSH
68847: LD_VAR 0 4
68851: PUSH
68852: LD_INT 1
68854: PLUS
68855: ARRAY
68856: ST_TO_ADDR
68857: GO 69342
68859: LD_INT 16
68861: DOUBLE
68862: EQUAL
68863: IFTRUE 68921
68865: LD_INT 17
68867: DOUBLE
68868: EQUAL
68869: IFTRUE 68921
68871: LD_INT 18
68873: DOUBLE
68874: EQUAL
68875: IFTRUE 68921
68877: LD_INT 19
68879: DOUBLE
68880: EQUAL
68881: IFTRUE 68921
68883: LD_INT 22
68885: DOUBLE
68886: EQUAL
68887: IFTRUE 68921
68889: LD_INT 20
68891: DOUBLE
68892: EQUAL
68893: IFTRUE 68921
68895: LD_INT 21
68897: DOUBLE
68898: EQUAL
68899: IFTRUE 68921
68901: LD_INT 23
68903: DOUBLE
68904: EQUAL
68905: IFTRUE 68921
68907: LD_INT 24
68909: DOUBLE
68910: EQUAL
68911: IFTRUE 68921
68913: LD_INT 25
68915: DOUBLE
68916: EQUAL
68917: IFTRUE 68921
68919: GO 68977
68921: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68922: LD_ADDR_VAR 0 9
68926: PUSH
68927: LD_VAR 0 35
68931: PUSH
68932: LD_VAR 0 36
68936: PUSH
68937: LD_VAR 0 37
68941: PUSH
68942: LD_VAR 0 38
68946: PUSH
68947: LD_VAR 0 39
68951: PUSH
68952: LD_VAR 0 40
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: PUSH
68965: LD_VAR 0 4
68969: PUSH
68970: LD_INT 1
68972: PLUS
68973: ARRAY
68974: ST_TO_ADDR
68975: GO 69342
68977: LD_INT 6
68979: DOUBLE
68980: EQUAL
68981: IFTRUE 69033
68983: LD_INT 7
68985: DOUBLE
68986: EQUAL
68987: IFTRUE 69033
68989: LD_INT 8
68991: DOUBLE
68992: EQUAL
68993: IFTRUE 69033
68995: LD_INT 13
68997: DOUBLE
68998: EQUAL
68999: IFTRUE 69033
69001: LD_INT 12
69003: DOUBLE
69004: EQUAL
69005: IFTRUE 69033
69007: LD_INT 15
69009: DOUBLE
69010: EQUAL
69011: IFTRUE 69033
69013: LD_INT 11
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69033
69019: LD_INT 14
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69033
69025: LD_INT 10
69027: DOUBLE
69028: EQUAL
69029: IFTRUE 69033
69031: GO 69089
69033: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69034: LD_ADDR_VAR 0 9
69038: PUSH
69039: LD_VAR 0 41
69043: PUSH
69044: LD_VAR 0 42
69048: PUSH
69049: LD_VAR 0 43
69053: PUSH
69054: LD_VAR 0 44
69058: PUSH
69059: LD_VAR 0 45
69063: PUSH
69064: LD_VAR 0 46
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: PLUS
69085: ARRAY
69086: ST_TO_ADDR
69087: GO 69342
69089: LD_INT 36
69091: DOUBLE
69092: EQUAL
69093: IFTRUE 69097
69095: GO 69153
69097: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69098: LD_ADDR_VAR 0 9
69102: PUSH
69103: LD_VAR 0 47
69107: PUSH
69108: LD_VAR 0 48
69112: PUSH
69113: LD_VAR 0 49
69117: PUSH
69118: LD_VAR 0 50
69122: PUSH
69123: LD_VAR 0 51
69127: PUSH
69128: LD_VAR 0 52
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: PUSH
69141: LD_VAR 0 4
69145: PUSH
69146: LD_INT 1
69148: PLUS
69149: ARRAY
69150: ST_TO_ADDR
69151: GO 69342
69153: LD_INT 4
69155: DOUBLE
69156: EQUAL
69157: IFTRUE 69179
69159: LD_INT 5
69161: DOUBLE
69162: EQUAL
69163: IFTRUE 69179
69165: LD_INT 34
69167: DOUBLE
69168: EQUAL
69169: IFTRUE 69179
69171: LD_INT 37
69173: DOUBLE
69174: EQUAL
69175: IFTRUE 69179
69177: GO 69235
69179: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69180: LD_ADDR_VAR 0 9
69184: PUSH
69185: LD_VAR 0 53
69189: PUSH
69190: LD_VAR 0 54
69194: PUSH
69195: LD_VAR 0 55
69199: PUSH
69200: LD_VAR 0 56
69204: PUSH
69205: LD_VAR 0 57
69209: PUSH
69210: LD_VAR 0 58
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: PUSH
69223: LD_VAR 0 4
69227: PUSH
69228: LD_INT 1
69230: PLUS
69231: ARRAY
69232: ST_TO_ADDR
69233: GO 69342
69235: LD_INT 31
69237: DOUBLE
69238: EQUAL
69239: IFTRUE 69285
69241: LD_INT 32
69243: DOUBLE
69244: EQUAL
69245: IFTRUE 69285
69247: LD_INT 33
69249: DOUBLE
69250: EQUAL
69251: IFTRUE 69285
69253: LD_INT 27
69255: DOUBLE
69256: EQUAL
69257: IFTRUE 69285
69259: LD_INT 26
69261: DOUBLE
69262: EQUAL
69263: IFTRUE 69285
69265: LD_INT 28
69267: DOUBLE
69268: EQUAL
69269: IFTRUE 69285
69271: LD_INT 29
69273: DOUBLE
69274: EQUAL
69275: IFTRUE 69285
69277: LD_INT 30
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69285
69283: GO 69341
69285: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69286: LD_ADDR_VAR 0 9
69290: PUSH
69291: LD_VAR 0 59
69295: PUSH
69296: LD_VAR 0 60
69300: PUSH
69301: LD_VAR 0 61
69305: PUSH
69306: LD_VAR 0 62
69310: PUSH
69311: LD_VAR 0 63
69315: PUSH
69316: LD_VAR 0 64
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: PUSH
69329: LD_VAR 0 4
69333: PUSH
69334: LD_INT 1
69336: PLUS
69337: ARRAY
69338: ST_TO_ADDR
69339: GO 69342
69341: POP
// temp_list2 = [ ] ;
69342: LD_ADDR_VAR 0 10
69346: PUSH
69347: EMPTY
69348: ST_TO_ADDR
// for i in temp_list do
69349: LD_ADDR_VAR 0 8
69353: PUSH
69354: LD_VAR 0 9
69358: PUSH
69359: FOR_IN
69360: IFFALSE 69412
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69362: LD_ADDR_VAR 0 10
69366: PUSH
69367: LD_VAR 0 10
69371: PUSH
69372: LD_VAR 0 8
69376: PUSH
69377: LD_INT 1
69379: ARRAY
69380: PUSH
69381: LD_VAR 0 2
69385: PLUS
69386: PUSH
69387: LD_VAR 0 8
69391: PUSH
69392: LD_INT 2
69394: ARRAY
69395: PUSH
69396: LD_VAR 0 3
69400: PLUS
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: EMPTY
69407: LIST
69408: ADD
69409: ST_TO_ADDR
69410: GO 69359
69412: POP
69413: POP
// result = temp_list2 ;
69414: LD_ADDR_VAR 0 7
69418: PUSH
69419: LD_VAR 0 10
69423: ST_TO_ADDR
// end ;
69424: LD_VAR 0 7
69428: RET
// export function EnemyInRange ( unit , dist ) ; begin
69429: LD_INT 0
69431: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69432: LD_ADDR_VAR 0 3
69436: PUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: CALL_OW 255
69446: PPUSH
69447: LD_VAR 0 1
69451: PPUSH
69452: CALL_OW 250
69456: PPUSH
69457: LD_VAR 0 1
69461: PPUSH
69462: CALL_OW 251
69466: PPUSH
69467: LD_VAR 0 2
69471: PPUSH
69472: CALL 42825 0 4
69476: PUSH
69477: LD_INT 4
69479: ARRAY
69480: ST_TO_ADDR
// end ;
69481: LD_VAR 0 3
69485: RET
// export function PlayerSeeMe ( unit ) ; begin
69486: LD_INT 0
69488: PPUSH
// result := See ( your_side , unit ) ;
69489: LD_ADDR_VAR 0 2
69493: PUSH
69494: LD_OWVAR 2
69498: PPUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 292
69508: ST_TO_ADDR
// end ;
69509: LD_VAR 0 2
69513: RET
// export function ReverseDir ( unit ) ; begin
69514: LD_INT 0
69516: PPUSH
// if not unit then
69517: LD_VAR 0 1
69521: NOT
69522: IFFALSE 69526
// exit ;
69524: GO 69549
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69526: LD_ADDR_VAR 0 2
69530: PUSH
69531: LD_VAR 0 1
69535: PPUSH
69536: CALL_OW 254
69540: PUSH
69541: LD_INT 3
69543: PLUS
69544: PUSH
69545: LD_INT 6
69547: MOD
69548: ST_TO_ADDR
// end ;
69549: LD_VAR 0 2
69553: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69554: LD_INT 0
69556: PPUSH
69557: PPUSH
69558: PPUSH
69559: PPUSH
69560: PPUSH
// if not hexes then
69561: LD_VAR 0 2
69565: NOT
69566: IFFALSE 69570
// exit ;
69568: GO 69718
// dist := 9999 ;
69570: LD_ADDR_VAR 0 5
69574: PUSH
69575: LD_INT 9999
69577: ST_TO_ADDR
// for i = 1 to hexes do
69578: LD_ADDR_VAR 0 4
69582: PUSH
69583: DOUBLE
69584: LD_INT 1
69586: DEC
69587: ST_TO_ADDR
69588: LD_VAR 0 2
69592: PUSH
69593: FOR_TO
69594: IFFALSE 69706
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69596: LD_VAR 0 1
69600: PPUSH
69601: LD_VAR 0 2
69605: PUSH
69606: LD_VAR 0 4
69610: ARRAY
69611: PUSH
69612: LD_INT 1
69614: ARRAY
69615: PPUSH
69616: LD_VAR 0 2
69620: PUSH
69621: LD_VAR 0 4
69625: ARRAY
69626: PUSH
69627: LD_INT 2
69629: ARRAY
69630: PPUSH
69631: CALL_OW 297
69635: PUSH
69636: LD_VAR 0 5
69640: LESS
69641: IFFALSE 69704
// begin hex := hexes [ i ] ;
69643: LD_ADDR_VAR 0 7
69647: PUSH
69648: LD_VAR 0 2
69652: PUSH
69653: LD_VAR 0 4
69657: ARRAY
69658: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69659: LD_ADDR_VAR 0 5
69663: PUSH
69664: LD_VAR 0 1
69668: PPUSH
69669: LD_VAR 0 2
69673: PUSH
69674: LD_VAR 0 4
69678: ARRAY
69679: PUSH
69680: LD_INT 1
69682: ARRAY
69683: PPUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_VAR 0 4
69693: ARRAY
69694: PUSH
69695: LD_INT 2
69697: ARRAY
69698: PPUSH
69699: CALL_OW 297
69703: ST_TO_ADDR
// end ; end ;
69704: GO 69593
69706: POP
69707: POP
// result := hex ;
69708: LD_ADDR_VAR 0 3
69712: PUSH
69713: LD_VAR 0 7
69717: ST_TO_ADDR
// end ;
69718: LD_VAR 0 3
69722: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69723: LD_INT 0
69725: PPUSH
69726: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69727: LD_VAR 0 1
69731: NOT
69732: PUSH
69733: LD_VAR 0 1
69737: PUSH
69738: LD_INT 21
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 23
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PPUSH
69762: CALL_OW 69
69766: IN
69767: NOT
69768: OR
69769: IFFALSE 69773
// exit ;
69771: GO 69820
// for i = 1 to 3 do
69773: LD_ADDR_VAR 0 3
69777: PUSH
69778: DOUBLE
69779: LD_INT 1
69781: DEC
69782: ST_TO_ADDR
69783: LD_INT 3
69785: PUSH
69786: FOR_TO
69787: IFFALSE 69818
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69789: LD_VAR 0 1
69793: PPUSH
69794: CALL_OW 250
69798: PPUSH
69799: LD_VAR 0 1
69803: PPUSH
69804: CALL_OW 251
69808: PPUSH
69809: LD_INT 1
69811: PPUSH
69812: CALL_OW 453
69816: GO 69786
69818: POP
69819: POP
// end ;
69820: LD_VAR 0 2
69824: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69825: LD_INT 0
69827: PPUSH
69828: PPUSH
69829: PPUSH
69830: PPUSH
69831: PPUSH
69832: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69833: LD_VAR 0 1
69837: NOT
69838: PUSH
69839: LD_VAR 0 2
69843: NOT
69844: OR
69845: PUSH
69846: LD_VAR 0 1
69850: PPUSH
69851: CALL_OW 314
69855: OR
69856: IFFALSE 69860
// exit ;
69858: GO 70301
// x := GetX ( enemy_unit ) ;
69860: LD_ADDR_VAR 0 7
69864: PUSH
69865: LD_VAR 0 2
69869: PPUSH
69870: CALL_OW 250
69874: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69875: LD_ADDR_VAR 0 8
69879: PUSH
69880: LD_VAR 0 2
69884: PPUSH
69885: CALL_OW 251
69889: ST_TO_ADDR
// if not x or not y then
69890: LD_VAR 0 7
69894: NOT
69895: PUSH
69896: LD_VAR 0 8
69900: NOT
69901: OR
69902: IFFALSE 69906
// exit ;
69904: GO 70301
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69906: LD_ADDR_VAR 0 6
69910: PUSH
69911: LD_VAR 0 7
69915: PPUSH
69916: LD_INT 0
69918: PPUSH
69919: LD_INT 4
69921: PPUSH
69922: CALL_OW 272
69926: PUSH
69927: LD_VAR 0 8
69931: PPUSH
69932: LD_INT 0
69934: PPUSH
69935: LD_INT 4
69937: PPUSH
69938: CALL_OW 273
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_VAR 0 7
69951: PPUSH
69952: LD_INT 1
69954: PPUSH
69955: LD_INT 4
69957: PPUSH
69958: CALL_OW 272
69962: PUSH
69963: LD_VAR 0 8
69967: PPUSH
69968: LD_INT 1
69970: PPUSH
69971: LD_INT 4
69973: PPUSH
69974: CALL_OW 273
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_VAR 0 7
69987: PPUSH
69988: LD_INT 2
69990: PPUSH
69991: LD_INT 4
69993: PPUSH
69994: CALL_OW 272
69998: PUSH
69999: LD_VAR 0 8
70003: PPUSH
70004: LD_INT 2
70006: PPUSH
70007: LD_INT 4
70009: PPUSH
70010: CALL_OW 273
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_VAR 0 7
70023: PPUSH
70024: LD_INT 3
70026: PPUSH
70027: LD_INT 4
70029: PPUSH
70030: CALL_OW 272
70034: PUSH
70035: LD_VAR 0 8
70039: PPUSH
70040: LD_INT 3
70042: PPUSH
70043: LD_INT 4
70045: PPUSH
70046: CALL_OW 273
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_VAR 0 7
70059: PPUSH
70060: LD_INT 4
70062: PPUSH
70063: LD_INT 4
70065: PPUSH
70066: CALL_OW 272
70070: PUSH
70071: LD_VAR 0 8
70075: PPUSH
70076: LD_INT 4
70078: PPUSH
70079: LD_INT 4
70081: PPUSH
70082: CALL_OW 273
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_VAR 0 7
70095: PPUSH
70096: LD_INT 5
70098: PPUSH
70099: LD_INT 4
70101: PPUSH
70102: CALL_OW 272
70106: PUSH
70107: LD_VAR 0 8
70111: PPUSH
70112: LD_INT 5
70114: PPUSH
70115: LD_INT 4
70117: PPUSH
70118: CALL_OW 273
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: ST_TO_ADDR
// for i = tmp downto 1 do
70135: LD_ADDR_VAR 0 4
70139: PUSH
70140: DOUBLE
70141: LD_VAR 0 6
70145: INC
70146: ST_TO_ADDR
70147: LD_INT 1
70149: PUSH
70150: FOR_DOWNTO
70151: IFFALSE 70252
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70153: LD_VAR 0 6
70157: PUSH
70158: LD_VAR 0 4
70162: ARRAY
70163: PUSH
70164: LD_INT 1
70166: ARRAY
70167: PPUSH
70168: LD_VAR 0 6
70172: PUSH
70173: LD_VAR 0 4
70177: ARRAY
70178: PUSH
70179: LD_INT 2
70181: ARRAY
70182: PPUSH
70183: CALL_OW 488
70187: NOT
70188: PUSH
70189: LD_VAR 0 6
70193: PUSH
70194: LD_VAR 0 4
70198: ARRAY
70199: PUSH
70200: LD_INT 1
70202: ARRAY
70203: PPUSH
70204: LD_VAR 0 6
70208: PUSH
70209: LD_VAR 0 4
70213: ARRAY
70214: PUSH
70215: LD_INT 2
70217: ARRAY
70218: PPUSH
70219: CALL_OW 428
70223: PUSH
70224: LD_INT 0
70226: NONEQUAL
70227: OR
70228: IFFALSE 70250
// tmp := Delete ( tmp , i ) ;
70230: LD_ADDR_VAR 0 6
70234: PUSH
70235: LD_VAR 0 6
70239: PPUSH
70240: LD_VAR 0 4
70244: PPUSH
70245: CALL_OW 3
70249: ST_TO_ADDR
70250: GO 70150
70252: POP
70253: POP
// j := GetClosestHex ( unit , tmp ) ;
70254: LD_ADDR_VAR 0 5
70258: PUSH
70259: LD_VAR 0 1
70263: PPUSH
70264: LD_VAR 0 6
70268: PPUSH
70269: CALL 69554 0 2
70273: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70274: LD_VAR 0 1
70278: PPUSH
70279: LD_VAR 0 5
70283: PUSH
70284: LD_INT 1
70286: ARRAY
70287: PPUSH
70288: LD_VAR 0 5
70292: PUSH
70293: LD_INT 2
70295: ARRAY
70296: PPUSH
70297: CALL_OW 111
// end ;
70301: LD_VAR 0 3
70305: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70306: LD_INT 0
70308: PPUSH
70309: PPUSH
70310: PPUSH
// uc_side = 0 ;
70311: LD_ADDR_OWVAR 20
70315: PUSH
70316: LD_INT 0
70318: ST_TO_ADDR
// uc_nation = 0 ;
70319: LD_ADDR_OWVAR 21
70323: PUSH
70324: LD_INT 0
70326: ST_TO_ADDR
// InitHc_All ( ) ;
70327: CALL_OW 584
// InitVc ;
70331: CALL_OW 20
// if mastodonts then
70335: LD_VAR 0 6
70339: IFFALSE 70406
// for i = 1 to mastodonts do
70341: LD_ADDR_VAR 0 11
70345: PUSH
70346: DOUBLE
70347: LD_INT 1
70349: DEC
70350: ST_TO_ADDR
70351: LD_VAR 0 6
70355: PUSH
70356: FOR_TO
70357: IFFALSE 70404
// begin vc_chassis := 31 ;
70359: LD_ADDR_OWVAR 37
70363: PUSH
70364: LD_INT 31
70366: ST_TO_ADDR
// vc_control := control_rider ;
70367: LD_ADDR_OWVAR 38
70371: PUSH
70372: LD_INT 4
70374: ST_TO_ADDR
// animal := CreateVehicle ;
70375: LD_ADDR_VAR 0 12
70379: PUSH
70380: CALL_OW 45
70384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70385: LD_VAR 0 12
70389: PPUSH
70390: LD_VAR 0 8
70394: PPUSH
70395: LD_INT 0
70397: PPUSH
70398: CALL 72594 0 3
// end ;
70402: GO 70356
70404: POP
70405: POP
// if horses then
70406: LD_VAR 0 5
70410: IFFALSE 70477
// for i = 1 to horses do
70412: LD_ADDR_VAR 0 11
70416: PUSH
70417: DOUBLE
70418: LD_INT 1
70420: DEC
70421: ST_TO_ADDR
70422: LD_VAR 0 5
70426: PUSH
70427: FOR_TO
70428: IFFALSE 70475
// begin hc_class := 21 ;
70430: LD_ADDR_OWVAR 28
70434: PUSH
70435: LD_INT 21
70437: ST_TO_ADDR
// hc_gallery :=  ;
70438: LD_ADDR_OWVAR 33
70442: PUSH
70443: LD_STRING 
70445: ST_TO_ADDR
// animal := CreateHuman ;
70446: LD_ADDR_VAR 0 12
70450: PUSH
70451: CALL_OW 44
70455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70456: LD_VAR 0 12
70460: PPUSH
70461: LD_VAR 0 8
70465: PPUSH
70466: LD_INT 0
70468: PPUSH
70469: CALL 72594 0 3
// end ;
70473: GO 70427
70475: POP
70476: POP
// if birds then
70477: LD_VAR 0 1
70481: IFFALSE 70548
// for i = 1 to birds do
70483: LD_ADDR_VAR 0 11
70487: PUSH
70488: DOUBLE
70489: LD_INT 1
70491: DEC
70492: ST_TO_ADDR
70493: LD_VAR 0 1
70497: PUSH
70498: FOR_TO
70499: IFFALSE 70546
// begin hc_class = 18 ;
70501: LD_ADDR_OWVAR 28
70505: PUSH
70506: LD_INT 18
70508: ST_TO_ADDR
// hc_gallery =  ;
70509: LD_ADDR_OWVAR 33
70513: PUSH
70514: LD_STRING 
70516: ST_TO_ADDR
// animal := CreateHuman ;
70517: LD_ADDR_VAR 0 12
70521: PUSH
70522: CALL_OW 44
70526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70527: LD_VAR 0 12
70531: PPUSH
70532: LD_VAR 0 8
70536: PPUSH
70537: LD_INT 0
70539: PPUSH
70540: CALL 72594 0 3
// end ;
70544: GO 70498
70546: POP
70547: POP
// if tigers then
70548: LD_VAR 0 2
70552: IFFALSE 70636
// for i = 1 to tigers do
70554: LD_ADDR_VAR 0 11
70558: PUSH
70559: DOUBLE
70560: LD_INT 1
70562: DEC
70563: ST_TO_ADDR
70564: LD_VAR 0 2
70568: PUSH
70569: FOR_TO
70570: IFFALSE 70634
// begin hc_class = class_tiger ;
70572: LD_ADDR_OWVAR 28
70576: PUSH
70577: LD_INT 14
70579: ST_TO_ADDR
// hc_gallery =  ;
70580: LD_ADDR_OWVAR 33
70584: PUSH
70585: LD_STRING 
70587: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70588: LD_ADDR_OWVAR 35
70592: PUSH
70593: LD_INT 7
70595: NEG
70596: PPUSH
70597: LD_INT 7
70599: PPUSH
70600: CALL_OW 12
70604: ST_TO_ADDR
// animal := CreateHuman ;
70605: LD_ADDR_VAR 0 12
70609: PUSH
70610: CALL_OW 44
70614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70615: LD_VAR 0 12
70619: PPUSH
70620: LD_VAR 0 8
70624: PPUSH
70625: LD_INT 0
70627: PPUSH
70628: CALL 72594 0 3
// end ;
70632: GO 70569
70634: POP
70635: POP
// if apemans then
70636: LD_VAR 0 3
70640: IFFALSE 70763
// for i = 1 to apemans do
70642: LD_ADDR_VAR 0 11
70646: PUSH
70647: DOUBLE
70648: LD_INT 1
70650: DEC
70651: ST_TO_ADDR
70652: LD_VAR 0 3
70656: PUSH
70657: FOR_TO
70658: IFFALSE 70761
// begin hc_class = class_apeman ;
70660: LD_ADDR_OWVAR 28
70664: PUSH
70665: LD_INT 12
70667: ST_TO_ADDR
// hc_gallery =  ;
70668: LD_ADDR_OWVAR 33
70672: PUSH
70673: LD_STRING 
70675: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70676: LD_ADDR_OWVAR 35
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PPUSH
70685: LD_INT 2
70687: PPUSH
70688: CALL_OW 12
70692: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70693: LD_ADDR_OWVAR 31
70697: PUSH
70698: LD_INT 1
70700: PPUSH
70701: LD_INT 3
70703: PPUSH
70704: CALL_OW 12
70708: PUSH
70709: LD_INT 1
70711: PPUSH
70712: LD_INT 3
70714: PPUSH
70715: CALL_OW 12
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: ST_TO_ADDR
// animal := CreateHuman ;
70732: LD_ADDR_VAR 0 12
70736: PUSH
70737: CALL_OW 44
70741: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70742: LD_VAR 0 12
70746: PPUSH
70747: LD_VAR 0 8
70751: PPUSH
70752: LD_INT 0
70754: PPUSH
70755: CALL 72594 0 3
// end ;
70759: GO 70657
70761: POP
70762: POP
// if enchidnas then
70763: LD_VAR 0 4
70767: IFFALSE 70834
// for i = 1 to enchidnas do
70769: LD_ADDR_VAR 0 11
70773: PUSH
70774: DOUBLE
70775: LD_INT 1
70777: DEC
70778: ST_TO_ADDR
70779: LD_VAR 0 4
70783: PUSH
70784: FOR_TO
70785: IFFALSE 70832
// begin hc_class = 13 ;
70787: LD_ADDR_OWVAR 28
70791: PUSH
70792: LD_INT 13
70794: ST_TO_ADDR
// hc_gallery =  ;
70795: LD_ADDR_OWVAR 33
70799: PUSH
70800: LD_STRING 
70802: ST_TO_ADDR
// animal := CreateHuman ;
70803: LD_ADDR_VAR 0 12
70807: PUSH
70808: CALL_OW 44
70812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70813: LD_VAR 0 12
70817: PPUSH
70818: LD_VAR 0 8
70822: PPUSH
70823: LD_INT 0
70825: PPUSH
70826: CALL 72594 0 3
// end ;
70830: GO 70784
70832: POP
70833: POP
// if fishes then
70834: LD_VAR 0 7
70838: IFFALSE 70905
// for i = 1 to fishes do
70840: LD_ADDR_VAR 0 11
70844: PUSH
70845: DOUBLE
70846: LD_INT 1
70848: DEC
70849: ST_TO_ADDR
70850: LD_VAR 0 7
70854: PUSH
70855: FOR_TO
70856: IFFALSE 70903
// begin hc_class = 20 ;
70858: LD_ADDR_OWVAR 28
70862: PUSH
70863: LD_INT 20
70865: ST_TO_ADDR
// hc_gallery =  ;
70866: LD_ADDR_OWVAR 33
70870: PUSH
70871: LD_STRING 
70873: ST_TO_ADDR
// animal := CreateHuman ;
70874: LD_ADDR_VAR 0 12
70878: PUSH
70879: CALL_OW 44
70883: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70884: LD_VAR 0 12
70888: PPUSH
70889: LD_VAR 0 9
70893: PPUSH
70894: LD_INT 0
70896: PPUSH
70897: CALL 72594 0 3
// end ;
70901: GO 70855
70903: POP
70904: POP
// end ;
70905: LD_VAR 0 10
70909: RET
// export function WantHeal ( sci , unit ) ; begin
70910: LD_INT 0
70912: PPUSH
// if GetTaskList ( sci ) > 0 then
70913: LD_VAR 0 1
70917: PPUSH
70918: CALL_OW 437
70922: PUSH
70923: LD_INT 0
70925: GREATER
70926: IFFALSE 70996
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70928: LD_VAR 0 1
70932: PPUSH
70933: CALL_OW 437
70937: PUSH
70938: LD_INT 1
70940: ARRAY
70941: PUSH
70942: LD_INT 1
70944: ARRAY
70945: PUSH
70946: LD_STRING l
70948: EQUAL
70949: PUSH
70950: LD_VAR 0 1
70954: PPUSH
70955: CALL_OW 437
70959: PUSH
70960: LD_INT 1
70962: ARRAY
70963: PUSH
70964: LD_INT 4
70966: ARRAY
70967: PUSH
70968: LD_VAR 0 2
70972: EQUAL
70973: AND
70974: IFFALSE 70986
// result := true else
70976: LD_ADDR_VAR 0 3
70980: PUSH
70981: LD_INT 1
70983: ST_TO_ADDR
70984: GO 70994
// result := false ;
70986: LD_ADDR_VAR 0 3
70990: PUSH
70991: LD_INT 0
70993: ST_TO_ADDR
// end else
70994: GO 71004
// result := false ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_INT 0
71003: ST_TO_ADDR
// end ;
71004: LD_VAR 0 3
71008: RET
// export function HealTarget ( sci ) ; begin
71009: LD_INT 0
71011: PPUSH
// if not sci then
71012: LD_VAR 0 1
71016: NOT
71017: IFFALSE 71021
// exit ;
71019: GO 71086
// result := 0 ;
71021: LD_ADDR_VAR 0 2
71025: PUSH
71026: LD_INT 0
71028: ST_TO_ADDR
// if GetTaskList ( sci ) then
71029: LD_VAR 0 1
71033: PPUSH
71034: CALL_OW 437
71038: IFFALSE 71086
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71040: LD_VAR 0 1
71044: PPUSH
71045: CALL_OW 437
71049: PUSH
71050: LD_INT 1
71052: ARRAY
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PUSH
71058: LD_STRING l
71060: EQUAL
71061: IFFALSE 71086
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71063: LD_ADDR_VAR 0 2
71067: PUSH
71068: LD_VAR 0 1
71072: PPUSH
71073: CALL_OW 437
71077: PUSH
71078: LD_INT 1
71080: ARRAY
71081: PUSH
71082: LD_INT 4
71084: ARRAY
71085: ST_TO_ADDR
// end ;
71086: LD_VAR 0 2
71090: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71091: LD_INT 0
71093: PPUSH
71094: PPUSH
71095: PPUSH
71096: PPUSH
// if not base_units then
71097: LD_VAR 0 1
71101: NOT
71102: IFFALSE 71106
// exit ;
71104: GO 71193
// result := false ;
71106: LD_ADDR_VAR 0 2
71110: PUSH
71111: LD_INT 0
71113: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71114: LD_ADDR_VAR 0 5
71118: PUSH
71119: LD_VAR 0 1
71123: PPUSH
71124: LD_INT 21
71126: PUSH
71127: LD_INT 3
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PPUSH
71134: CALL_OW 72
71138: ST_TO_ADDR
// if not tmp then
71139: LD_VAR 0 5
71143: NOT
71144: IFFALSE 71148
// exit ;
71146: GO 71193
// for i in tmp do
71148: LD_ADDR_VAR 0 3
71152: PUSH
71153: LD_VAR 0 5
71157: PUSH
71158: FOR_IN
71159: IFFALSE 71191
// begin result := EnemyInRange ( i , 22 ) ;
71161: LD_ADDR_VAR 0 2
71165: PUSH
71166: LD_VAR 0 3
71170: PPUSH
71171: LD_INT 22
71173: PPUSH
71174: CALL 69429 0 2
71178: ST_TO_ADDR
// if result then
71179: LD_VAR 0 2
71183: IFFALSE 71189
// exit ;
71185: POP
71186: POP
71187: GO 71193
// end ;
71189: GO 71158
71191: POP
71192: POP
// end ;
71193: LD_VAR 0 2
71197: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71198: LD_INT 0
71200: PPUSH
71201: PPUSH
// if not units then
71202: LD_VAR 0 1
71206: NOT
71207: IFFALSE 71211
// exit ;
71209: GO 71281
// result := [ ] ;
71211: LD_ADDR_VAR 0 3
71215: PUSH
71216: EMPTY
71217: ST_TO_ADDR
// for i in units do
71218: LD_ADDR_VAR 0 4
71222: PUSH
71223: LD_VAR 0 1
71227: PUSH
71228: FOR_IN
71229: IFFALSE 71279
// if GetTag ( i ) = tag then
71231: LD_VAR 0 4
71235: PPUSH
71236: CALL_OW 110
71240: PUSH
71241: LD_VAR 0 2
71245: EQUAL
71246: IFFALSE 71277
// result := Replace ( result , result + 1 , i ) ;
71248: LD_ADDR_VAR 0 3
71252: PUSH
71253: LD_VAR 0 3
71257: PPUSH
71258: LD_VAR 0 3
71262: PUSH
71263: LD_INT 1
71265: PLUS
71266: PPUSH
71267: LD_VAR 0 4
71271: PPUSH
71272: CALL_OW 1
71276: ST_TO_ADDR
71277: GO 71228
71279: POP
71280: POP
// end ;
71281: LD_VAR 0 3
71285: RET
// export function IsDriver ( un ) ; begin
71286: LD_INT 0
71288: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71289: LD_ADDR_VAR 0 2
71293: PUSH
71294: LD_VAR 0 1
71298: PUSH
71299: LD_INT 55
71301: PUSH
71302: EMPTY
71303: LIST
71304: PPUSH
71305: CALL_OW 69
71309: IN
71310: ST_TO_ADDR
// end ;
71311: LD_VAR 0 2
71315: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71316: LD_INT 0
71318: PPUSH
71319: PPUSH
// list := [ ] ;
71320: LD_ADDR_VAR 0 5
71324: PUSH
71325: EMPTY
71326: ST_TO_ADDR
// case d of 0 :
71327: LD_VAR 0 3
71331: PUSH
71332: LD_INT 0
71334: DOUBLE
71335: EQUAL
71336: IFTRUE 71340
71338: GO 71473
71340: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71341: LD_ADDR_VAR 0 5
71345: PUSH
71346: LD_VAR 0 1
71350: PUSH
71351: LD_INT 4
71353: MINUS
71354: PUSH
71355: LD_VAR 0 2
71359: PUSH
71360: LD_INT 4
71362: MINUS
71363: PUSH
71364: LD_INT 2
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: PUSH
71372: LD_VAR 0 1
71376: PUSH
71377: LD_INT 3
71379: MINUS
71380: PUSH
71381: LD_VAR 0 2
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: PUSH
71394: LD_VAR 0 1
71398: PUSH
71399: LD_INT 4
71401: PLUS
71402: PUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 4
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: PUSH
71416: LD_VAR 0 1
71420: PUSH
71421: LD_INT 3
71423: PLUS
71424: PUSH
71425: LD_VAR 0 2
71429: PUSH
71430: LD_INT 3
71432: PLUS
71433: PUSH
71434: LD_INT 5
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 4
71454: PLUS
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: ST_TO_ADDR
// end ; 1 :
71471: GO 72171
71473: LD_INT 1
71475: DOUBLE
71476: EQUAL
71477: IFTRUE 71481
71479: GO 71614
71481: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71482: LD_ADDR_VAR 0 5
71486: PUSH
71487: LD_VAR 0 1
71491: PUSH
71492: LD_VAR 0 2
71496: PUSH
71497: LD_INT 4
71499: MINUS
71500: PUSH
71501: LD_INT 3
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: PUSH
71509: LD_VAR 0 1
71513: PUSH
71514: LD_INT 3
71516: MINUS
71517: PUSH
71518: LD_VAR 0 2
71522: PUSH
71523: LD_INT 3
71525: MINUS
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: PUSH
71535: LD_VAR 0 1
71539: PUSH
71540: LD_INT 4
71542: MINUS
71543: PUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: PUSH
71557: LD_VAR 0 1
71561: PUSH
71562: LD_VAR 0 2
71566: PUSH
71567: LD_INT 3
71569: PLUS
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: LIST
71578: PUSH
71579: LD_VAR 0 1
71583: PUSH
71584: LD_INT 4
71586: PLUS
71587: PUSH
71588: LD_VAR 0 2
71592: PUSH
71593: LD_INT 4
71595: PLUS
71596: PUSH
71597: LD_INT 5
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: LIST
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: ST_TO_ADDR
// end ; 2 :
71612: GO 72171
71614: LD_INT 2
71616: DOUBLE
71617: EQUAL
71618: IFTRUE 71622
71620: GO 71751
71622: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71623: LD_ADDR_VAR 0 5
71627: PUSH
71628: LD_VAR 0 1
71632: PUSH
71633: LD_VAR 0 2
71637: PUSH
71638: LD_INT 3
71640: MINUS
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: LIST
71649: PUSH
71650: LD_VAR 0 1
71654: PUSH
71655: LD_INT 4
71657: PLUS
71658: PUSH
71659: LD_VAR 0 2
71663: PUSH
71664: LD_INT 4
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: PUSH
71672: LD_VAR 0 1
71676: PUSH
71677: LD_VAR 0 2
71681: PUSH
71682: LD_INT 4
71684: PLUS
71685: PUSH
71686: LD_INT 0
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: PUSH
71694: LD_VAR 0 1
71698: PUSH
71699: LD_INT 3
71701: MINUS
71702: PUSH
71703: LD_VAR 0 2
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: LIST
71715: PUSH
71716: LD_VAR 0 1
71720: PUSH
71721: LD_INT 4
71723: MINUS
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_INT 4
71732: MINUS
71733: PUSH
71734: LD_INT 2
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: LIST
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: ST_TO_ADDR
// end ; 3 :
71749: GO 72171
71751: LD_INT 3
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71892
71759: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71760: LD_ADDR_VAR 0 5
71764: PUSH
71765: LD_VAR 0 1
71769: PUSH
71770: LD_INT 3
71772: PLUS
71773: PUSH
71774: LD_VAR 0 2
71778: PUSH
71779: LD_INT 4
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: LIST
71786: PUSH
71787: LD_VAR 0 1
71791: PUSH
71792: LD_INT 4
71794: PLUS
71795: PUSH
71796: LD_VAR 0 2
71800: PUSH
71801: LD_INT 4
71803: PLUS
71804: PUSH
71805: LD_INT 5
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: LIST
71812: PUSH
71813: LD_VAR 0 1
71817: PUSH
71818: LD_INT 4
71820: MINUS
71821: PUSH
71822: LD_VAR 0 2
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 1
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 4
71847: MINUS
71848: PUSH
71849: LD_INT 3
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: LIST
71856: PUSH
71857: LD_VAR 0 1
71861: PUSH
71862: LD_INT 3
71864: MINUS
71865: PUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_INT 3
71873: MINUS
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// end ; 4 :
71890: GO 72171
71892: LD_INT 4
71894: DOUBLE
71895: EQUAL
71896: IFTRUE 71900
71898: GO 72033
71900: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71901: LD_ADDR_VAR 0 5
71905: PUSH
71906: LD_VAR 0 1
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: LD_INT 4
71918: PLUS
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 3
71935: PLUS
71936: PUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 3
71944: PLUS
71945: PUSH
71946: LD_INT 5
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: PUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_INT 4
71961: PLUS
71962: PUSH
71963: LD_VAR 0 2
71967: PUSH
71968: LD_INT 4
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 3
71988: MINUS
71989: PUSH
71990: LD_INT 3
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: LD_VAR 0 1
72002: PUSH
72003: LD_INT 4
72005: MINUS
72006: PUSH
72007: LD_VAR 0 2
72011: PUSH
72012: LD_INT 4
72014: MINUS
72015: PUSH
72016: LD_INT 2
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: ST_TO_ADDR
// end ; 5 :
72031: GO 72171
72033: LD_INT 5
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72041
72039: GO 72170
72041: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72042: LD_ADDR_VAR 0 5
72046: PUSH
72047: LD_VAR 0 1
72051: PUSH
72052: LD_INT 4
72054: MINUS
72055: PUSH
72056: LD_VAR 0 2
72060: PUSH
72061: LD_INT 1
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: PUSH
72069: LD_VAR 0 1
72073: PUSH
72074: LD_VAR 0 2
72078: PUSH
72079: LD_INT 4
72081: MINUS
72082: PUSH
72083: LD_INT 3
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: LIST
72090: PUSH
72091: LD_VAR 0 1
72095: PUSH
72096: LD_INT 4
72098: PLUS
72099: PUSH
72100: LD_VAR 0 2
72104: PUSH
72105: LD_INT 4
72107: PLUS
72108: PUSH
72109: LD_INT 5
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: PUSH
72117: LD_VAR 0 1
72121: PUSH
72122: LD_INT 3
72124: PLUS
72125: PUSH
72126: LD_VAR 0 2
72130: PUSH
72131: LD_INT 4
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: LIST
72138: PUSH
72139: LD_VAR 0 1
72143: PUSH
72144: LD_VAR 0 2
72148: PUSH
72149: LD_INT 3
72151: PLUS
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: ST_TO_ADDR
// end ; end ;
72168: GO 72171
72170: POP
// result := list ;
72171: LD_ADDR_VAR 0 4
72175: PUSH
72176: LD_VAR 0 5
72180: ST_TO_ADDR
// end ;
72181: LD_VAR 0 4
72185: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72186: LD_INT 0
72188: PPUSH
72189: PPUSH
72190: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72191: LD_VAR 0 1
72195: NOT
72196: PUSH
72197: LD_VAR 0 2
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 4
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: IN
72220: NOT
72221: OR
72222: IFFALSE 72226
// exit ;
72224: GO 72318
// tmp := [ ] ;
72226: LD_ADDR_VAR 0 5
72230: PUSH
72231: EMPTY
72232: ST_TO_ADDR
// for i in units do
72233: LD_ADDR_VAR 0 4
72237: PUSH
72238: LD_VAR 0 1
72242: PUSH
72243: FOR_IN
72244: IFFALSE 72287
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72246: LD_ADDR_VAR 0 5
72250: PUSH
72251: LD_VAR 0 5
72255: PPUSH
72256: LD_VAR 0 5
72260: PUSH
72261: LD_INT 1
72263: PLUS
72264: PPUSH
72265: LD_VAR 0 4
72269: PPUSH
72270: LD_VAR 0 2
72274: PPUSH
72275: CALL_OW 259
72279: PPUSH
72280: CALL_OW 2
72284: ST_TO_ADDR
72285: GO 72243
72287: POP
72288: POP
// if not tmp then
72289: LD_VAR 0 5
72293: NOT
72294: IFFALSE 72298
// exit ;
72296: GO 72318
// result := SortListByListDesc ( units , tmp ) ;
72298: LD_ADDR_VAR 0 3
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: LD_VAR 0 5
72312: PPUSH
72313: CALL_OW 77
72317: ST_TO_ADDR
// end ;
72318: LD_VAR 0 3
72322: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72323: LD_INT 0
72325: PPUSH
72326: PPUSH
72327: PPUSH
// result := false ;
72328: LD_ADDR_VAR 0 3
72332: PUSH
72333: LD_INT 0
72335: ST_TO_ADDR
// x := GetX ( building ) ;
72336: LD_ADDR_VAR 0 4
72340: PUSH
72341: LD_VAR 0 2
72345: PPUSH
72346: CALL_OW 250
72350: ST_TO_ADDR
// y := GetY ( building ) ;
72351: LD_ADDR_VAR 0 5
72355: PUSH
72356: LD_VAR 0 2
72360: PPUSH
72361: CALL_OW 251
72365: ST_TO_ADDR
// if not building or not x or not y then
72366: LD_VAR 0 2
72370: NOT
72371: PUSH
72372: LD_VAR 0 4
72376: NOT
72377: OR
72378: PUSH
72379: LD_VAR 0 5
72383: NOT
72384: OR
72385: IFFALSE 72389
// exit ;
72387: GO 72481
// if GetTaskList ( unit ) then
72389: LD_VAR 0 1
72393: PPUSH
72394: CALL_OW 437
72398: IFFALSE 72481
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72400: LD_STRING e
72402: PUSH
72403: LD_VAR 0 1
72407: PPUSH
72408: CALL_OW 437
72412: PUSH
72413: LD_INT 1
72415: ARRAY
72416: PUSH
72417: LD_INT 1
72419: ARRAY
72420: EQUAL
72421: PUSH
72422: LD_VAR 0 4
72426: PUSH
72427: LD_VAR 0 1
72431: PPUSH
72432: CALL_OW 437
72436: PUSH
72437: LD_INT 1
72439: ARRAY
72440: PUSH
72441: LD_INT 2
72443: ARRAY
72444: EQUAL
72445: AND
72446: PUSH
72447: LD_VAR 0 5
72451: PUSH
72452: LD_VAR 0 1
72456: PPUSH
72457: CALL_OW 437
72461: PUSH
72462: LD_INT 1
72464: ARRAY
72465: PUSH
72466: LD_INT 3
72468: ARRAY
72469: EQUAL
72470: AND
72471: IFFALSE 72481
// result := true end ;
72473: LD_ADDR_VAR 0 3
72477: PUSH
72478: LD_INT 1
72480: ST_TO_ADDR
// end ;
72481: LD_VAR 0 3
72485: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72486: LD_INT 0
72488: PPUSH
// result := false ;
72489: LD_ADDR_VAR 0 4
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
// if GetTaskList ( unit ) then
72497: LD_VAR 0 1
72501: PPUSH
72502: CALL_OW 437
72506: IFFALSE 72589
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72508: LD_STRING M
72510: PUSH
72511: LD_VAR 0 1
72515: PPUSH
72516: CALL_OW 437
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: PUSH
72525: LD_INT 1
72527: ARRAY
72528: EQUAL
72529: PUSH
72530: LD_VAR 0 2
72534: PUSH
72535: LD_VAR 0 1
72539: PPUSH
72540: CALL_OW 437
72544: PUSH
72545: LD_INT 1
72547: ARRAY
72548: PUSH
72549: LD_INT 2
72551: ARRAY
72552: EQUAL
72553: AND
72554: PUSH
72555: LD_VAR 0 3
72559: PUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: CALL_OW 437
72569: PUSH
72570: LD_INT 1
72572: ARRAY
72573: PUSH
72574: LD_INT 3
72576: ARRAY
72577: EQUAL
72578: AND
72579: IFFALSE 72589
// result := true ;
72581: LD_ADDR_VAR 0 4
72585: PUSH
72586: LD_INT 1
72588: ST_TO_ADDR
// end ; end ;
72589: LD_VAR 0 4
72593: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72594: LD_INT 0
72596: PPUSH
72597: PPUSH
72598: PPUSH
72599: PPUSH
// if not unit or not area then
72600: LD_VAR 0 1
72604: NOT
72605: PUSH
72606: LD_VAR 0 2
72610: NOT
72611: OR
72612: IFFALSE 72616
// exit ;
72614: GO 72780
// tmp := AreaToList ( area , i ) ;
72616: LD_ADDR_VAR 0 6
72620: PUSH
72621: LD_VAR 0 2
72625: PPUSH
72626: LD_VAR 0 5
72630: PPUSH
72631: CALL_OW 517
72635: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72636: LD_ADDR_VAR 0 5
72640: PUSH
72641: DOUBLE
72642: LD_INT 1
72644: DEC
72645: ST_TO_ADDR
72646: LD_VAR 0 6
72650: PUSH
72651: LD_INT 1
72653: ARRAY
72654: PUSH
72655: FOR_TO
72656: IFFALSE 72778
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72658: LD_ADDR_VAR 0 7
72662: PUSH
72663: LD_VAR 0 6
72667: PUSH
72668: LD_INT 1
72670: ARRAY
72671: PUSH
72672: LD_VAR 0 5
72676: ARRAY
72677: PUSH
72678: LD_VAR 0 6
72682: PUSH
72683: LD_INT 2
72685: ARRAY
72686: PUSH
72687: LD_VAR 0 5
72691: ARRAY
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72697: LD_VAR 0 7
72701: PUSH
72702: LD_INT 1
72704: ARRAY
72705: PPUSH
72706: LD_VAR 0 7
72710: PUSH
72711: LD_INT 2
72713: ARRAY
72714: PPUSH
72715: CALL_OW 428
72719: PUSH
72720: LD_INT 0
72722: EQUAL
72723: IFFALSE 72776
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72725: LD_VAR 0 1
72729: PPUSH
72730: LD_VAR 0 7
72734: PUSH
72735: LD_INT 1
72737: ARRAY
72738: PPUSH
72739: LD_VAR 0 7
72743: PUSH
72744: LD_INT 2
72746: ARRAY
72747: PPUSH
72748: LD_VAR 0 3
72752: PPUSH
72753: CALL_OW 48
// result := IsPlaced ( unit ) ;
72757: LD_ADDR_VAR 0 4
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 305
72771: ST_TO_ADDR
// exit ;
72772: POP
72773: POP
72774: GO 72780
// end ; end ;
72776: GO 72655
72778: POP
72779: POP
// end ;
72780: LD_VAR 0 4
72784: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72785: LD_INT 0
72787: PPUSH
72788: PPUSH
72789: PPUSH
// if not side or side > 8 then
72790: LD_VAR 0 1
72794: NOT
72795: PUSH
72796: LD_VAR 0 1
72800: PUSH
72801: LD_INT 8
72803: GREATER
72804: OR
72805: IFFALSE 72809
// exit ;
72807: GO 72996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72809: LD_ADDR_VAR 0 4
72813: PUSH
72814: LD_INT 22
72816: PUSH
72817: LD_VAR 0 1
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: LD_INT 21
72828: PUSH
72829: LD_INT 3
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PPUSH
72840: CALL_OW 69
72844: ST_TO_ADDR
// if not tmp then
72845: LD_VAR 0 4
72849: NOT
72850: IFFALSE 72854
// exit ;
72852: GO 72996
// enable_addtolog := true ;
72854: LD_ADDR_OWVAR 81
72858: PUSH
72859: LD_INT 1
72861: ST_TO_ADDR
// AddToLog ( [ ) ;
72862: LD_STRING [
72864: PPUSH
72865: CALL_OW 561
// for i in tmp do
72869: LD_ADDR_VAR 0 3
72873: PUSH
72874: LD_VAR 0 4
72878: PUSH
72879: FOR_IN
72880: IFFALSE 72987
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72882: LD_STRING [
72884: PUSH
72885: LD_VAR 0 3
72889: PPUSH
72890: CALL_OW 266
72894: STR
72895: PUSH
72896: LD_STRING , 
72898: STR
72899: PUSH
72900: LD_VAR 0 3
72904: PPUSH
72905: CALL_OW 250
72909: STR
72910: PUSH
72911: LD_STRING , 
72913: STR
72914: PUSH
72915: LD_VAR 0 3
72919: PPUSH
72920: CALL_OW 251
72924: STR
72925: PUSH
72926: LD_STRING , 
72928: STR
72929: PUSH
72930: LD_VAR 0 3
72934: PPUSH
72935: CALL_OW 254
72939: STR
72940: PUSH
72941: LD_STRING , 
72943: STR
72944: PUSH
72945: LD_VAR 0 3
72949: PPUSH
72950: LD_INT 1
72952: PPUSH
72953: CALL_OW 268
72957: STR
72958: PUSH
72959: LD_STRING , 
72961: STR
72962: PUSH
72963: LD_VAR 0 3
72967: PPUSH
72968: LD_INT 2
72970: PPUSH
72971: CALL_OW 268
72975: STR
72976: PUSH
72977: LD_STRING ],
72979: STR
72980: PPUSH
72981: CALL_OW 561
// end ;
72985: GO 72879
72987: POP
72988: POP
// AddToLog ( ]; ) ;
72989: LD_STRING ];
72991: PPUSH
72992: CALL_OW 561
// end ;
72996: LD_VAR 0 2
73000: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73001: LD_INT 0
73003: PPUSH
73004: PPUSH
73005: PPUSH
73006: PPUSH
73007: PPUSH
// if not area or not rate or not max then
73008: LD_VAR 0 1
73012: NOT
73013: PUSH
73014: LD_VAR 0 2
73018: NOT
73019: OR
73020: PUSH
73021: LD_VAR 0 4
73025: NOT
73026: OR
73027: IFFALSE 73031
// exit ;
73029: GO 73223
// while 1 do
73031: LD_INT 1
73033: IFFALSE 73223
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73035: LD_ADDR_VAR 0 9
73039: PUSH
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_INT 1
73047: PPUSH
73048: CALL_OW 287
73052: PUSH
73053: LD_INT 10
73055: MUL
73056: ST_TO_ADDR
// r := rate / 10 ;
73057: LD_ADDR_VAR 0 7
73061: PUSH
73062: LD_VAR 0 2
73066: PUSH
73067: LD_INT 10
73069: DIVREAL
73070: ST_TO_ADDR
// time := 1 1$00 ;
73071: LD_ADDR_VAR 0 8
73075: PUSH
73076: LD_INT 2100
73078: ST_TO_ADDR
// if amount < min then
73079: LD_VAR 0 9
73083: PUSH
73084: LD_VAR 0 3
73088: LESS
73089: IFFALSE 73107
// r := r * 2 else
73091: LD_ADDR_VAR 0 7
73095: PUSH
73096: LD_VAR 0 7
73100: PUSH
73101: LD_INT 2
73103: MUL
73104: ST_TO_ADDR
73105: GO 73133
// if amount > max then
73107: LD_VAR 0 9
73111: PUSH
73112: LD_VAR 0 4
73116: GREATER
73117: IFFALSE 73133
// r := r / 2 ;
73119: LD_ADDR_VAR 0 7
73123: PUSH
73124: LD_VAR 0 7
73128: PUSH
73129: LD_INT 2
73131: DIVREAL
73132: ST_TO_ADDR
// time := time / r ;
73133: LD_ADDR_VAR 0 8
73137: PUSH
73138: LD_VAR 0 8
73142: PUSH
73143: LD_VAR 0 7
73147: DIVREAL
73148: ST_TO_ADDR
// if time < 0 then
73149: LD_VAR 0 8
73153: PUSH
73154: LD_INT 0
73156: LESS
73157: IFFALSE 73174
// time := time * - 1 ;
73159: LD_ADDR_VAR 0 8
73163: PUSH
73164: LD_VAR 0 8
73168: PUSH
73169: LD_INT 1
73171: NEG
73172: MUL
73173: ST_TO_ADDR
// wait ( time ) ;
73174: LD_VAR 0 8
73178: PPUSH
73179: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73183: LD_INT 35
73185: PPUSH
73186: LD_INT 875
73188: PPUSH
73189: CALL_OW 12
73193: PPUSH
73194: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73198: LD_INT 1
73200: PPUSH
73201: LD_INT 5
73203: PPUSH
73204: CALL_OW 12
73208: PPUSH
73209: LD_VAR 0 1
73213: PPUSH
73214: LD_INT 1
73216: PPUSH
73217: CALL_OW 55
// end ;
73221: GO 73031
// end ;
73223: LD_VAR 0 5
73227: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73228: LD_INT 0
73230: PPUSH
73231: PPUSH
73232: PPUSH
73233: PPUSH
73234: PPUSH
73235: PPUSH
73236: PPUSH
73237: PPUSH
// if not turrets or not factories then
73238: LD_VAR 0 1
73242: NOT
73243: PUSH
73244: LD_VAR 0 2
73248: NOT
73249: OR
73250: IFFALSE 73254
// exit ;
73252: GO 73561
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73254: LD_ADDR_VAR 0 10
73258: PUSH
73259: LD_INT 5
73261: PUSH
73262: LD_INT 6
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 2
73271: PUSH
73272: LD_INT 4
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 3
73281: PUSH
73282: LD_INT 5
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 24
73296: PUSH
73297: LD_INT 25
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 23
73306: PUSH
73307: LD_INT 27
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 42
73320: PUSH
73321: LD_INT 43
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 44
73330: PUSH
73331: LD_INT 46
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 45
73340: PUSH
73341: LD_INT 47
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: LIST
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: ST_TO_ADDR
// result := [ ] ;
73358: LD_ADDR_VAR 0 3
73362: PUSH
73363: EMPTY
73364: ST_TO_ADDR
// for i in turrets do
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_VAR 0 1
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73559
// begin nat := GetNation ( i ) ;
73378: LD_ADDR_VAR 0 7
73382: PUSH
73383: LD_VAR 0 4
73387: PPUSH
73388: CALL_OW 248
73392: ST_TO_ADDR
// weapon := 0 ;
73393: LD_ADDR_VAR 0 8
73397: PUSH
73398: LD_INT 0
73400: ST_TO_ADDR
// if not nat then
73401: LD_VAR 0 7
73405: NOT
73406: IFFALSE 73410
// continue ;
73408: GO 73375
// for j in list [ nat ] do
73410: LD_ADDR_VAR 0 5
73414: PUSH
73415: LD_VAR 0 10
73419: PUSH
73420: LD_VAR 0 7
73424: ARRAY
73425: PUSH
73426: FOR_IN
73427: IFFALSE 73468
// if GetBWeapon ( i ) = j [ 1 ] then
73429: LD_VAR 0 4
73433: PPUSH
73434: CALL_OW 269
73438: PUSH
73439: LD_VAR 0 5
73443: PUSH
73444: LD_INT 1
73446: ARRAY
73447: EQUAL
73448: IFFALSE 73466
// begin weapon := j [ 2 ] ;
73450: LD_ADDR_VAR 0 8
73454: PUSH
73455: LD_VAR 0 5
73459: PUSH
73460: LD_INT 2
73462: ARRAY
73463: ST_TO_ADDR
// break ;
73464: GO 73468
// end ;
73466: GO 73426
73468: POP
73469: POP
// if not weapon then
73470: LD_VAR 0 8
73474: NOT
73475: IFFALSE 73479
// continue ;
73477: GO 73375
// for k in factories do
73479: LD_ADDR_VAR 0 6
73483: PUSH
73484: LD_VAR 0 2
73488: PUSH
73489: FOR_IN
73490: IFFALSE 73555
// begin weapons := AvailableWeaponList ( k ) ;
73492: LD_ADDR_VAR 0 9
73496: PUSH
73497: LD_VAR 0 6
73501: PPUSH
73502: CALL_OW 478
73506: ST_TO_ADDR
// if not weapons then
73507: LD_VAR 0 9
73511: NOT
73512: IFFALSE 73516
// continue ;
73514: GO 73489
// if weapon in weapons then
73516: LD_VAR 0 8
73520: PUSH
73521: LD_VAR 0 9
73525: IN
73526: IFFALSE 73553
// begin result := [ i , weapon ] ;
73528: LD_ADDR_VAR 0 3
73532: PUSH
73533: LD_VAR 0 4
73537: PUSH
73538: LD_VAR 0 8
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: ST_TO_ADDR
// exit ;
73547: POP
73548: POP
73549: POP
73550: POP
73551: GO 73561
// end ; end ;
73553: GO 73489
73555: POP
73556: POP
// end ;
73557: GO 73375
73559: POP
73560: POP
// end ;
73561: LD_VAR 0 3
73565: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73566: LD_INT 0
73568: PPUSH
// if not side or side > 8 then
73569: LD_VAR 0 3
73573: NOT
73574: PUSH
73575: LD_VAR 0 3
73579: PUSH
73580: LD_INT 8
73582: GREATER
73583: OR
73584: IFFALSE 73588
// exit ;
73586: GO 73647
// if not range then
73588: LD_VAR 0 4
73592: NOT
73593: IFFALSE 73604
// range := - 12 ;
73595: LD_ADDR_VAR 0 4
73599: PUSH
73600: LD_INT 12
73602: NEG
73603: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73604: LD_VAR 0 1
73608: PPUSH
73609: LD_VAR 0 2
73613: PPUSH
73614: LD_VAR 0 3
73618: PPUSH
73619: LD_VAR 0 4
73623: PPUSH
73624: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73628: LD_VAR 0 1
73632: PPUSH
73633: LD_VAR 0 2
73637: PPUSH
73638: LD_VAR 0 3
73642: PPUSH
73643: CALL_OW 331
// end ;
73647: LD_VAR 0 5
73651: RET
// export function Video ( mode ) ; begin
73652: LD_INT 0
73654: PPUSH
// ingame_video = mode ;
73655: LD_ADDR_OWVAR 52
73659: PUSH
73660: LD_VAR 0 1
73664: ST_TO_ADDR
// interface_hidden = mode ;
73665: LD_ADDR_OWVAR 54
73669: PUSH
73670: LD_VAR 0 1
73674: ST_TO_ADDR
// end ;
73675: LD_VAR 0 2
73679: RET
// export function Join ( array , element ) ; begin
73680: LD_INT 0
73682: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73683: LD_ADDR_VAR 0 3
73687: PUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: LD_VAR 0 1
73697: PUSH
73698: LD_INT 1
73700: PLUS
73701: PPUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: CALL_OW 1
73711: ST_TO_ADDR
// end ;
73712: LD_VAR 0 3
73716: RET
// export function JoinUnion ( array , element ) ; begin
73717: LD_INT 0
73719: PPUSH
// result := array union element ;
73720: LD_ADDR_VAR 0 3
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_VAR 0 2
73734: UNION
73735: ST_TO_ADDR
// end ;
73736: LD_VAR 0 3
73740: RET
// export function GetBehemoths ( side ) ; begin
73741: LD_INT 0
73743: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73744: LD_ADDR_VAR 0 2
73748: PUSH
73749: LD_INT 22
73751: PUSH
73752: LD_VAR 0 1
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 31
73763: PUSH
73764: LD_INT 25
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PPUSH
73775: CALL_OW 69
73779: ST_TO_ADDR
// end ;
73780: LD_VAR 0 2
73784: RET
// export function Shuffle ( array ) ; var i , index ; begin
73785: LD_INT 0
73787: PPUSH
73788: PPUSH
73789: PPUSH
// result := [ ] ;
73790: LD_ADDR_VAR 0 2
73794: PUSH
73795: EMPTY
73796: ST_TO_ADDR
// if not array then
73797: LD_VAR 0 1
73801: NOT
73802: IFFALSE 73806
// exit ;
73804: GO 73905
// Randomize ;
73806: CALL_OW 10
// for i = array downto 1 do
73810: LD_ADDR_VAR 0 3
73814: PUSH
73815: DOUBLE
73816: LD_VAR 0 1
73820: INC
73821: ST_TO_ADDR
73822: LD_INT 1
73824: PUSH
73825: FOR_DOWNTO
73826: IFFALSE 73903
// begin index := rand ( 1 , array ) ;
73828: LD_ADDR_VAR 0 4
73832: PUSH
73833: LD_INT 1
73835: PPUSH
73836: LD_VAR 0 1
73840: PPUSH
73841: CALL_OW 12
73845: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73846: LD_ADDR_VAR 0 2
73850: PUSH
73851: LD_VAR 0 2
73855: PPUSH
73856: LD_VAR 0 2
73860: PUSH
73861: LD_INT 1
73863: PLUS
73864: PPUSH
73865: LD_VAR 0 1
73869: PUSH
73870: LD_VAR 0 4
73874: ARRAY
73875: PPUSH
73876: CALL_OW 2
73880: ST_TO_ADDR
// array := Delete ( array , index ) ;
73881: LD_ADDR_VAR 0 1
73885: PUSH
73886: LD_VAR 0 1
73890: PPUSH
73891: LD_VAR 0 4
73895: PPUSH
73896: CALL_OW 3
73900: ST_TO_ADDR
// end ;
73901: GO 73825
73903: POP
73904: POP
// end ;
73905: LD_VAR 0 2
73909: RET
// export function GetBaseMaterials ( base ) ; begin
73910: LD_INT 0
73912: PPUSH
// result := [ 0 , 0 , 0 ] ;
73913: LD_ADDR_VAR 0 2
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: LD_INT 0
73923: PUSH
73924: LD_INT 0
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: LIST
73931: ST_TO_ADDR
// if not base then
73932: LD_VAR 0 1
73936: NOT
73937: IFFALSE 73941
// exit ;
73939: GO 73990
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73941: LD_ADDR_VAR 0 2
73945: PUSH
73946: LD_VAR 0 1
73950: PPUSH
73951: LD_INT 1
73953: PPUSH
73954: CALL_OW 275
73958: PUSH
73959: LD_VAR 0 1
73963: PPUSH
73964: LD_INT 2
73966: PPUSH
73967: CALL_OW 275
73971: PUSH
73972: LD_VAR 0 1
73976: PPUSH
73977: LD_INT 3
73979: PPUSH
73980: CALL_OW 275
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: LIST
73989: ST_TO_ADDR
// end ;
73990: LD_VAR 0 2
73994: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
// result := array ;
73999: LD_ADDR_VAR 0 3
74003: PUSH
74004: LD_VAR 0 1
74008: ST_TO_ADDR
// if size > 0 then
74009: LD_VAR 0 2
74013: PUSH
74014: LD_INT 0
74016: GREATER
74017: IFFALSE 74063
// for i := array downto size do
74019: LD_ADDR_VAR 0 4
74023: PUSH
74024: DOUBLE
74025: LD_VAR 0 1
74029: INC
74030: ST_TO_ADDR
74031: LD_VAR 0 2
74035: PUSH
74036: FOR_DOWNTO
74037: IFFALSE 74061
// result := Delete ( result , result ) ;
74039: LD_ADDR_VAR 0 3
74043: PUSH
74044: LD_VAR 0 3
74048: PPUSH
74049: LD_VAR 0 3
74053: PPUSH
74054: CALL_OW 3
74058: ST_TO_ADDR
74059: GO 74036
74061: POP
74062: POP
// end ;
74063: LD_VAR 0 3
74067: RET
// export function ComExit ( unit ) ; var tmp ; begin
74068: LD_INT 0
74070: PPUSH
74071: PPUSH
// if not IsInUnit ( unit ) then
74072: LD_VAR 0 1
74076: PPUSH
74077: CALL_OW 310
74081: NOT
74082: IFFALSE 74086
// exit ;
74084: GO 74146
// tmp := IsInUnit ( unit ) ;
74086: LD_ADDR_VAR 0 3
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: CALL_OW 310
74100: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74101: LD_VAR 0 3
74105: PPUSH
74106: CALL_OW 247
74110: PUSH
74111: LD_INT 2
74113: EQUAL
74114: IFFALSE 74127
// ComExitVehicle ( unit ) else
74116: LD_VAR 0 1
74120: PPUSH
74121: CALL_OW 121
74125: GO 74136
// ComExitBuilding ( unit ) ;
74127: LD_VAR 0 1
74131: PPUSH
74132: CALL_OW 122
// result := tmp ;
74136: LD_ADDR_VAR 0 2
74140: PUSH
74141: LD_VAR 0 3
74145: ST_TO_ADDR
// end ;
74146: LD_VAR 0 2
74150: RET
// export function ComExitAll ( units ) ; var i ; begin
74151: LD_INT 0
74153: PPUSH
74154: PPUSH
// if not units then
74155: LD_VAR 0 1
74159: NOT
74160: IFFALSE 74164
// exit ;
74162: GO 74190
// for i in units do
74164: LD_ADDR_VAR 0 3
74168: PUSH
74169: LD_VAR 0 1
74173: PUSH
74174: FOR_IN
74175: IFFALSE 74188
// ComExit ( i ) ;
74177: LD_VAR 0 3
74181: PPUSH
74182: CALL 74068 0 1
74186: GO 74174
74188: POP
74189: POP
// end ;
74190: LD_VAR 0 2
74194: RET
// export function ResetHc ; begin
74195: LD_INT 0
74197: PPUSH
// InitHc ;
74198: CALL_OW 19
// hc_importance := 0 ;
74202: LD_ADDR_OWVAR 32
74206: PUSH
74207: LD_INT 0
74209: ST_TO_ADDR
// end ;
74210: LD_VAR 0 1
74214: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74215: LD_INT 0
74217: PPUSH
74218: PPUSH
74219: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74220: LD_ADDR_VAR 0 6
74224: PUSH
74225: LD_VAR 0 1
74229: PUSH
74230: LD_VAR 0 3
74234: PLUS
74235: PUSH
74236: LD_INT 2
74238: DIV
74239: ST_TO_ADDR
// if _x < 0 then
74240: LD_VAR 0 6
74244: PUSH
74245: LD_INT 0
74247: LESS
74248: IFFALSE 74265
// _x := _x * - 1 ;
74250: LD_ADDR_VAR 0 6
74254: PUSH
74255: LD_VAR 0 6
74259: PUSH
74260: LD_INT 1
74262: NEG
74263: MUL
74264: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74265: LD_ADDR_VAR 0 7
74269: PUSH
74270: LD_VAR 0 2
74274: PUSH
74275: LD_VAR 0 4
74279: PLUS
74280: PUSH
74281: LD_INT 2
74283: DIV
74284: ST_TO_ADDR
// if _y < 0 then
74285: LD_VAR 0 7
74289: PUSH
74290: LD_INT 0
74292: LESS
74293: IFFALSE 74310
// _y := _y * - 1 ;
74295: LD_ADDR_VAR 0 7
74299: PUSH
74300: LD_VAR 0 7
74304: PUSH
74305: LD_INT 1
74307: NEG
74308: MUL
74309: ST_TO_ADDR
// result := [ _x , _y ] ;
74310: LD_ADDR_VAR 0 5
74314: PUSH
74315: LD_VAR 0 6
74319: PUSH
74320: LD_VAR 0 7
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: ST_TO_ADDR
// end ;
74329: LD_VAR 0 5
74333: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74334: LD_INT 0
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
// task := GetTaskList ( unit ) ;
74340: LD_ADDR_VAR 0 7
74344: PUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: CALL_OW 437
74354: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74355: LD_VAR 0 7
74359: NOT
74360: PUSH
74361: LD_VAR 0 1
74365: PPUSH
74366: LD_VAR 0 2
74370: PPUSH
74371: CALL_OW 308
74375: NOT
74376: AND
74377: IFFALSE 74381
// exit ;
74379: GO 74499
// if IsInArea ( unit , area ) then
74381: LD_VAR 0 1
74385: PPUSH
74386: LD_VAR 0 2
74390: PPUSH
74391: CALL_OW 308
74395: IFFALSE 74413
// begin ComMoveToArea ( unit , goAway ) ;
74397: LD_VAR 0 1
74401: PPUSH
74402: LD_VAR 0 3
74406: PPUSH
74407: CALL_OW 113
// exit ;
74411: GO 74499
// end ; if task [ 1 ] [ 1 ] <> M then
74413: LD_VAR 0 7
74417: PUSH
74418: LD_INT 1
74420: ARRAY
74421: PUSH
74422: LD_INT 1
74424: ARRAY
74425: PUSH
74426: LD_STRING M
74428: NONEQUAL
74429: IFFALSE 74433
// exit ;
74431: GO 74499
// x := task [ 1 ] [ 2 ] ;
74433: LD_ADDR_VAR 0 5
74437: PUSH
74438: LD_VAR 0 7
74442: PUSH
74443: LD_INT 1
74445: ARRAY
74446: PUSH
74447: LD_INT 2
74449: ARRAY
74450: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74451: LD_ADDR_VAR 0 6
74455: PUSH
74456: LD_VAR 0 7
74460: PUSH
74461: LD_INT 1
74463: ARRAY
74464: PUSH
74465: LD_INT 3
74467: ARRAY
74468: ST_TO_ADDR
// if InArea ( x , y , area ) then
74469: LD_VAR 0 5
74473: PPUSH
74474: LD_VAR 0 6
74478: PPUSH
74479: LD_VAR 0 2
74483: PPUSH
74484: CALL_OW 309
74488: IFFALSE 74499
// ComStop ( unit ) ;
74490: LD_VAR 0 1
74494: PPUSH
74495: CALL_OW 141
// end ;
74499: LD_VAR 0 4
74503: RET
// export function Abs ( value ) ; begin
74504: LD_INT 0
74506: PPUSH
// result := value ;
74507: LD_ADDR_VAR 0 2
74511: PUSH
74512: LD_VAR 0 1
74516: ST_TO_ADDR
// if value < 0 then
74517: LD_VAR 0 1
74521: PUSH
74522: LD_INT 0
74524: LESS
74525: IFFALSE 74542
// result := value * - 1 ;
74527: LD_ADDR_VAR 0 2
74531: PUSH
74532: LD_VAR 0 1
74536: PUSH
74537: LD_INT 1
74539: NEG
74540: MUL
74541: ST_TO_ADDR
// end ;
74542: LD_VAR 0 2
74546: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74547: LD_INT 0
74549: PPUSH
74550: PPUSH
74551: PPUSH
74552: PPUSH
74553: PPUSH
74554: PPUSH
74555: PPUSH
74556: PPUSH
// if not unit or not building then
74557: LD_VAR 0 1
74561: NOT
74562: PUSH
74563: LD_VAR 0 2
74567: NOT
74568: OR
74569: IFFALSE 74573
// exit ;
74571: GO 74799
// x := GetX ( building ) ;
74573: LD_ADDR_VAR 0 4
74577: PUSH
74578: LD_VAR 0 2
74582: PPUSH
74583: CALL_OW 250
74587: ST_TO_ADDR
// y := GetY ( building ) ;
74588: LD_ADDR_VAR 0 6
74592: PUSH
74593: LD_VAR 0 2
74597: PPUSH
74598: CALL_OW 251
74602: ST_TO_ADDR
// d := GetDir ( building ) ;
74603: LD_ADDR_VAR 0 8
74607: PUSH
74608: LD_VAR 0 2
74612: PPUSH
74613: CALL_OW 254
74617: ST_TO_ADDR
// r := 4 ;
74618: LD_ADDR_VAR 0 9
74622: PUSH
74623: LD_INT 4
74625: ST_TO_ADDR
// for i := 1 to 5 do
74626: LD_ADDR_VAR 0 10
74630: PUSH
74631: DOUBLE
74632: LD_INT 1
74634: DEC
74635: ST_TO_ADDR
74636: LD_INT 5
74638: PUSH
74639: FOR_TO
74640: IFFALSE 74797
// begin _x := ShiftX ( x , d , r + i ) ;
74642: LD_ADDR_VAR 0 5
74646: PUSH
74647: LD_VAR 0 4
74651: PPUSH
74652: LD_VAR 0 8
74656: PPUSH
74657: LD_VAR 0 9
74661: PUSH
74662: LD_VAR 0 10
74666: PLUS
74667: PPUSH
74668: CALL_OW 272
74672: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74673: LD_ADDR_VAR 0 7
74677: PUSH
74678: LD_VAR 0 6
74682: PPUSH
74683: LD_VAR 0 8
74687: PPUSH
74688: LD_VAR 0 9
74692: PUSH
74693: LD_VAR 0 10
74697: PLUS
74698: PPUSH
74699: CALL_OW 273
74703: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74704: LD_VAR 0 5
74708: PPUSH
74709: LD_VAR 0 7
74713: PPUSH
74714: CALL_OW 488
74718: PUSH
74719: LD_VAR 0 5
74723: PPUSH
74724: LD_VAR 0 7
74728: PPUSH
74729: CALL_OW 428
74733: PPUSH
74734: CALL_OW 247
74738: PUSH
74739: LD_INT 3
74741: PUSH
74742: LD_INT 2
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: IN
74749: NOT
74750: AND
74751: IFFALSE 74795
// begin ComMoveXY ( unit , _x , _y ) ;
74753: LD_VAR 0 1
74757: PPUSH
74758: LD_VAR 0 5
74762: PPUSH
74763: LD_VAR 0 7
74767: PPUSH
74768: CALL_OW 111
// result := [ _x , _y ] ;
74772: LD_ADDR_VAR 0 3
74776: PUSH
74777: LD_VAR 0 5
74781: PUSH
74782: LD_VAR 0 7
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: ST_TO_ADDR
// exit ;
74791: POP
74792: POP
74793: GO 74799
// end ; end ;
74795: GO 74639
74797: POP
74798: POP
// end ;
74799: LD_VAR 0 3
74803: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74804: LD_INT 0
74806: PPUSH
74807: PPUSH
74808: PPUSH
// result := 0 ;
74809: LD_ADDR_VAR 0 3
74813: PUSH
74814: LD_INT 0
74816: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74817: LD_VAR 0 1
74821: PUSH
74822: LD_INT 0
74824: LESS
74825: PUSH
74826: LD_VAR 0 1
74830: PUSH
74831: LD_INT 8
74833: GREATER
74834: OR
74835: PUSH
74836: LD_VAR 0 2
74840: PUSH
74841: LD_INT 0
74843: LESS
74844: OR
74845: PUSH
74846: LD_VAR 0 2
74850: PUSH
74851: LD_INT 8
74853: GREATER
74854: OR
74855: IFFALSE 74859
// exit ;
74857: GO 74934
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74859: LD_ADDR_VAR 0 4
74863: PUSH
74864: LD_INT 22
74866: PUSH
74867: LD_VAR 0 2
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PPUSH
74876: CALL_OW 69
74880: PUSH
74881: FOR_IN
74882: IFFALSE 74932
// begin un := UnitShoot ( i ) ;
74884: LD_ADDR_VAR 0 5
74888: PUSH
74889: LD_VAR 0 4
74893: PPUSH
74894: CALL_OW 504
74898: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74899: LD_VAR 0 5
74903: PPUSH
74904: CALL_OW 255
74908: PUSH
74909: LD_VAR 0 1
74913: EQUAL
74914: IFFALSE 74930
// begin result := un ;
74916: LD_ADDR_VAR 0 3
74920: PUSH
74921: LD_VAR 0 5
74925: ST_TO_ADDR
// exit ;
74926: POP
74927: POP
74928: GO 74934
// end ; end ;
74930: GO 74881
74932: POP
74933: POP
// end ;
74934: LD_VAR 0 3
74938: RET
// export function GetCargoBay ( units ) ; begin
74939: LD_INT 0
74941: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74942: LD_ADDR_VAR 0 2
74946: PUSH
74947: LD_VAR 0 1
74951: PPUSH
74952: LD_INT 2
74954: PUSH
74955: LD_INT 34
74957: PUSH
74958: LD_INT 12
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: LD_INT 34
74967: PUSH
74968: LD_INT 51
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 34
74977: PUSH
74978: LD_INT 32
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 34
74987: PUSH
74988: LD_EXP 59
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: PPUSH
75004: CALL_OW 72
75008: ST_TO_ADDR
// end ;
75009: LD_VAR 0 2
75013: RET
// export function Negate ( value ) ; begin
75014: LD_INT 0
75016: PPUSH
// result := not value ;
75017: LD_ADDR_VAR 0 2
75021: PUSH
75022: LD_VAR 0 1
75026: NOT
75027: ST_TO_ADDR
// end ;
75028: LD_VAR 0 2
75032: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75033: LD_INT 0
75035: PPUSH
// if x1 = x2 then
75036: LD_VAR 0 1
75040: PUSH
75041: LD_VAR 0 3
75045: EQUAL
75046: IFFALSE 75080
// begin if y1 > y2 then
75048: LD_VAR 0 2
75052: PUSH
75053: LD_VAR 0 4
75057: GREATER
75058: IFFALSE 75070
// result := 0 else
75060: LD_ADDR_VAR 0 5
75064: PUSH
75065: LD_INT 0
75067: ST_TO_ADDR
75068: GO 75078
// result := 3 ;
75070: LD_ADDR_VAR 0 5
75074: PUSH
75075: LD_INT 3
75077: ST_TO_ADDR
// exit ;
75078: GO 75166
// end ; if y1 = y2 then
75080: LD_VAR 0 2
75084: PUSH
75085: LD_VAR 0 4
75089: EQUAL
75090: IFFALSE 75124
// begin if x1 > x2 then
75092: LD_VAR 0 1
75096: PUSH
75097: LD_VAR 0 3
75101: GREATER
75102: IFFALSE 75114
// result := 1 else
75104: LD_ADDR_VAR 0 5
75108: PUSH
75109: LD_INT 1
75111: ST_TO_ADDR
75112: GO 75122
// result := 4 ;
75114: LD_ADDR_VAR 0 5
75118: PUSH
75119: LD_INT 4
75121: ST_TO_ADDR
// exit ;
75122: GO 75166
// end ; if x1 > x2 and y1 > y2 then
75124: LD_VAR 0 1
75128: PUSH
75129: LD_VAR 0 3
75133: GREATER
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: LD_VAR 0 4
75144: GREATER
75145: AND
75146: IFFALSE 75158
// result := 2 else
75148: LD_ADDR_VAR 0 5
75152: PUSH
75153: LD_INT 2
75155: ST_TO_ADDR
75156: GO 75166
// result := 5 ;
75158: LD_ADDR_VAR 0 5
75162: PUSH
75163: LD_INT 5
75165: ST_TO_ADDR
// end ;
75166: LD_VAR 0 5
75170: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75171: LD_INT 0
75173: PPUSH
75174: PPUSH
// if not driver or not IsInUnit ( driver ) then
75175: LD_VAR 0 1
75179: NOT
75180: PUSH
75181: LD_VAR 0 1
75185: PPUSH
75186: CALL_OW 310
75190: NOT
75191: OR
75192: IFFALSE 75196
// exit ;
75194: GO 75286
// vehicle := IsInUnit ( driver ) ;
75196: LD_ADDR_VAR 0 3
75200: PUSH
75201: LD_VAR 0 1
75205: PPUSH
75206: CALL_OW 310
75210: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75211: LD_VAR 0 1
75215: PPUSH
75216: LD_STRING \
75218: PUSH
75219: LD_INT 0
75221: PUSH
75222: LD_INT 0
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: LD_INT 0
75230: PUSH
75231: LD_INT 0
75233: PUSH
75234: LD_INT 0
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: PUSH
75246: LD_STRING E
75248: PUSH
75249: LD_INT 0
75251: PUSH
75252: LD_INT 0
75254: PUSH
75255: LD_VAR 0 3
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: LD_INT 0
75265: PUSH
75266: LD_INT 0
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PPUSH
75282: CALL_OW 446
// end ;
75286: LD_VAR 0 2
75290: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75291: LD_INT 0
75293: PPUSH
75294: PPUSH
// if not driver or not IsInUnit ( driver ) then
75295: LD_VAR 0 1
75299: NOT
75300: PUSH
75301: LD_VAR 0 1
75305: PPUSH
75306: CALL_OW 310
75310: NOT
75311: OR
75312: IFFALSE 75316
// exit ;
75314: GO 75406
// vehicle := IsInUnit ( driver ) ;
75316: LD_ADDR_VAR 0 3
75320: PUSH
75321: LD_VAR 0 1
75325: PPUSH
75326: CALL_OW 310
75330: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75331: LD_VAR 0 1
75335: PPUSH
75336: LD_STRING \
75338: PUSH
75339: LD_INT 0
75341: PUSH
75342: LD_INT 0
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: LD_INT 0
75350: PUSH
75351: LD_INT 0
75353: PUSH
75354: LD_INT 0
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: PUSH
75366: LD_STRING E
75368: PUSH
75369: LD_INT 0
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: LD_VAR 0 3
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: LD_INT 0
75385: PUSH
75386: LD_INT 0
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PPUSH
75402: CALL_OW 447
// end ;
75406: LD_VAR 0 2
75410: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75411: LD_INT 0
75413: PPUSH
75414: PPUSH
75415: PPUSH
// tmp := [ ] ;
75416: LD_ADDR_VAR 0 5
75420: PUSH
75421: EMPTY
75422: ST_TO_ADDR
// for i in units do
75423: LD_ADDR_VAR 0 4
75427: PUSH
75428: LD_VAR 0 1
75432: PUSH
75433: FOR_IN
75434: IFFALSE 75472
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75436: LD_ADDR_VAR 0 5
75440: PUSH
75441: LD_VAR 0 5
75445: PPUSH
75446: LD_VAR 0 5
75450: PUSH
75451: LD_INT 1
75453: PLUS
75454: PPUSH
75455: LD_VAR 0 4
75459: PPUSH
75460: CALL_OW 256
75464: PPUSH
75465: CALL_OW 2
75469: ST_TO_ADDR
75470: GO 75433
75472: POP
75473: POP
// if not tmp then
75474: LD_VAR 0 5
75478: NOT
75479: IFFALSE 75483
// exit ;
75481: GO 75531
// if asc then
75483: LD_VAR 0 2
75487: IFFALSE 75511
// result := SortListByListAsc ( units , tmp ) else
75489: LD_ADDR_VAR 0 3
75493: PUSH
75494: LD_VAR 0 1
75498: PPUSH
75499: LD_VAR 0 5
75503: PPUSH
75504: CALL_OW 76
75508: ST_TO_ADDR
75509: GO 75531
// result := SortListByListDesc ( units , tmp ) ;
75511: LD_ADDR_VAR 0 3
75515: PUSH
75516: LD_VAR 0 1
75520: PPUSH
75521: LD_VAR 0 5
75525: PPUSH
75526: CALL_OW 77
75530: ST_TO_ADDR
// end ;
75531: LD_VAR 0 3
75535: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75536: LD_INT 0
75538: PPUSH
75539: PPUSH
// task := GetTaskList ( mech ) ;
75540: LD_ADDR_VAR 0 4
75544: PUSH
75545: LD_VAR 0 1
75549: PPUSH
75550: CALL_OW 437
75554: ST_TO_ADDR
// if not task then
75555: LD_VAR 0 4
75559: NOT
75560: IFFALSE 75564
// exit ;
75562: GO 75606
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75564: LD_ADDR_VAR 0 3
75568: PUSH
75569: LD_VAR 0 4
75573: PUSH
75574: LD_INT 1
75576: ARRAY
75577: PUSH
75578: LD_INT 1
75580: ARRAY
75581: PUSH
75582: LD_STRING r
75584: EQUAL
75585: PUSH
75586: LD_VAR 0 4
75590: PUSH
75591: LD_INT 1
75593: ARRAY
75594: PUSH
75595: LD_INT 4
75597: ARRAY
75598: PUSH
75599: LD_VAR 0 2
75603: EQUAL
75604: AND
75605: ST_TO_ADDR
// end ;
75606: LD_VAR 0 3
75610: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75611: LD_INT 0
75613: PPUSH
// SetDir ( unit , d ) ;
75614: LD_VAR 0 1
75618: PPUSH
75619: LD_VAR 0 4
75623: PPUSH
75624: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75628: LD_VAR 0 1
75632: PPUSH
75633: LD_VAR 0 2
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: LD_VAR 0 5
75647: PPUSH
75648: CALL_OW 48
// end ;
75652: LD_VAR 0 6
75656: RET
// export function ToNaturalNumber ( number ) ; begin
75657: LD_INT 0
75659: PPUSH
// result := number div 1 ;
75660: LD_ADDR_VAR 0 2
75664: PUSH
75665: LD_VAR 0 1
75669: PUSH
75670: LD_INT 1
75672: DIV
75673: ST_TO_ADDR
// if number < 0 then
75674: LD_VAR 0 1
75678: PUSH
75679: LD_INT 0
75681: LESS
75682: IFFALSE 75692
// result := 0 ;
75684: LD_ADDR_VAR 0 2
75688: PUSH
75689: LD_INT 0
75691: ST_TO_ADDR
// end ;
75692: LD_VAR 0 2
75696: RET
// export function SortByClass ( units , class ) ; var un ; begin
75697: LD_INT 0
75699: PPUSH
75700: PPUSH
// if not units or not class then
75701: LD_VAR 0 1
75705: NOT
75706: PUSH
75707: LD_VAR 0 2
75711: NOT
75712: OR
75713: IFFALSE 75717
// exit ;
75715: GO 75812
// result := [ ] ;
75717: LD_ADDR_VAR 0 3
75721: PUSH
75722: EMPTY
75723: ST_TO_ADDR
// for un in units do
75724: LD_ADDR_VAR 0 4
75728: PUSH
75729: LD_VAR 0 1
75733: PUSH
75734: FOR_IN
75735: IFFALSE 75810
// if GetClass ( un ) = class then
75737: LD_VAR 0 4
75741: PPUSH
75742: CALL_OW 257
75746: PUSH
75747: LD_VAR 0 2
75751: EQUAL
75752: IFFALSE 75779
// result := Insert ( result , 1 , un ) else
75754: LD_ADDR_VAR 0 3
75758: PUSH
75759: LD_VAR 0 3
75763: PPUSH
75764: LD_INT 1
75766: PPUSH
75767: LD_VAR 0 4
75771: PPUSH
75772: CALL_OW 2
75776: ST_TO_ADDR
75777: GO 75808
// result := Replace ( result , result + 1 , un ) ;
75779: LD_ADDR_VAR 0 3
75783: PUSH
75784: LD_VAR 0 3
75788: PPUSH
75789: LD_VAR 0 3
75793: PUSH
75794: LD_INT 1
75796: PLUS
75797: PPUSH
75798: LD_VAR 0 4
75802: PPUSH
75803: CALL_OW 1
75807: ST_TO_ADDR
75808: GO 75734
75810: POP
75811: POP
// end ;
75812: LD_VAR 0 3
75816: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75817: LD_INT 0
75819: PPUSH
75820: PPUSH
75821: PPUSH
75822: PPUSH
75823: PPUSH
75824: PPUSH
75825: PPUSH
// result := [ ] ;
75826: LD_ADDR_VAR 0 4
75830: PUSH
75831: EMPTY
75832: ST_TO_ADDR
// if x - r < 0 then
75833: LD_VAR 0 1
75837: PUSH
75838: LD_VAR 0 3
75842: MINUS
75843: PUSH
75844: LD_INT 0
75846: LESS
75847: IFFALSE 75859
// min_x := 0 else
75849: LD_ADDR_VAR 0 8
75853: PUSH
75854: LD_INT 0
75856: ST_TO_ADDR
75857: GO 75875
// min_x := x - r ;
75859: LD_ADDR_VAR 0 8
75863: PUSH
75864: LD_VAR 0 1
75868: PUSH
75869: LD_VAR 0 3
75873: MINUS
75874: ST_TO_ADDR
// if y - r < 0 then
75875: LD_VAR 0 2
75879: PUSH
75880: LD_VAR 0 3
75884: MINUS
75885: PUSH
75886: LD_INT 0
75888: LESS
75889: IFFALSE 75901
// min_y := 0 else
75891: LD_ADDR_VAR 0 7
75895: PUSH
75896: LD_INT 0
75898: ST_TO_ADDR
75899: GO 75917
// min_y := y - r ;
75901: LD_ADDR_VAR 0 7
75905: PUSH
75906: LD_VAR 0 2
75910: PUSH
75911: LD_VAR 0 3
75915: MINUS
75916: ST_TO_ADDR
// max_x := x + r ;
75917: LD_ADDR_VAR 0 9
75921: PUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_VAR 0 3
75931: PLUS
75932: ST_TO_ADDR
// max_y := y + r ;
75933: LD_ADDR_VAR 0 10
75937: PUSH
75938: LD_VAR 0 2
75942: PUSH
75943: LD_VAR 0 3
75947: PLUS
75948: ST_TO_ADDR
// for _x = min_x to max_x do
75949: LD_ADDR_VAR 0 5
75953: PUSH
75954: DOUBLE
75955: LD_VAR 0 8
75959: DEC
75960: ST_TO_ADDR
75961: LD_VAR 0 9
75965: PUSH
75966: FOR_TO
75967: IFFALSE 76068
// for _y = min_y to max_y do
75969: LD_ADDR_VAR 0 6
75973: PUSH
75974: DOUBLE
75975: LD_VAR 0 7
75979: DEC
75980: ST_TO_ADDR
75981: LD_VAR 0 10
75985: PUSH
75986: FOR_TO
75987: IFFALSE 76064
// begin if not ValidHex ( _x , _y ) then
75989: LD_VAR 0 5
75993: PPUSH
75994: LD_VAR 0 6
75998: PPUSH
75999: CALL_OW 488
76003: NOT
76004: IFFALSE 76008
// continue ;
76006: GO 75986
// if GetResourceTypeXY ( _x , _y ) then
76008: LD_VAR 0 5
76012: PPUSH
76013: LD_VAR 0 6
76017: PPUSH
76018: CALL_OW 283
76022: IFFALSE 76062
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76024: LD_ADDR_VAR 0 4
76028: PUSH
76029: LD_VAR 0 4
76033: PPUSH
76034: LD_VAR 0 4
76038: PUSH
76039: LD_INT 1
76041: PLUS
76042: PPUSH
76043: LD_VAR 0 5
76047: PUSH
76048: LD_VAR 0 6
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PPUSH
76057: CALL_OW 1
76061: ST_TO_ADDR
// end ;
76062: GO 75986
76064: POP
76065: POP
76066: GO 75966
76068: POP
76069: POP
// end ;
76070: LD_VAR 0 4
76074: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76075: LD_INT 0
76077: PPUSH
76078: PPUSH
76079: PPUSH
76080: PPUSH
76081: PPUSH
76082: PPUSH
// if not units then
76083: LD_VAR 0 1
76087: NOT
76088: IFFALSE 76092
// exit ;
76090: GO 76493
// result := UnitFilter ( units , [ f_ok ] ) ;
76092: LD_ADDR_VAR 0 3
76096: PUSH
76097: LD_VAR 0 1
76101: PPUSH
76102: LD_INT 50
76104: PUSH
76105: EMPTY
76106: LIST
76107: PPUSH
76108: CALL_OW 72
76112: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76113: LD_ADDR_VAR 0 7
76117: PUSH
76118: LD_VAR 0 1
76122: PUSH
76123: LD_INT 1
76125: ARRAY
76126: PPUSH
76127: CALL_OW 255
76131: ST_TO_ADDR
// if not result then
76132: LD_VAR 0 3
76136: NOT
76137: IFFALSE 76141
// exit ;
76139: GO 76493
// for i in result do
76141: LD_ADDR_VAR 0 4
76145: PUSH
76146: LD_VAR 0 3
76150: PUSH
76151: FOR_IN
76152: IFFALSE 76491
// begin tag := GetTag ( i ) + 1 ;
76154: LD_ADDR_VAR 0 8
76158: PUSH
76159: LD_VAR 0 4
76163: PPUSH
76164: CALL_OW 110
76168: PUSH
76169: LD_INT 1
76171: PLUS
76172: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76173: LD_ADDR_VAR 0 6
76177: PUSH
76178: LD_VAR 0 4
76182: PPUSH
76183: CALL_OW 250
76187: PPUSH
76188: LD_VAR 0 4
76192: PPUSH
76193: CALL_OW 251
76197: PPUSH
76198: LD_INT 6
76200: PPUSH
76201: CALL 75817 0 3
76205: ST_TO_ADDR
// if cr then
76206: LD_VAR 0 6
76210: IFFALSE 76249
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76212: LD_VAR 0 4
76216: PPUSH
76217: LD_VAR 0 6
76221: PUSH
76222: LD_INT 1
76224: ARRAY
76225: PUSH
76226: LD_INT 1
76228: ARRAY
76229: PPUSH
76230: LD_VAR 0 6
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PUSH
76239: LD_INT 2
76241: ARRAY
76242: PPUSH
76243: CALL_OW 116
76247: GO 76489
// if path > tag then
76249: LD_VAR 0 2
76253: PUSH
76254: LD_VAR 0 8
76258: GREATER
76259: IFFALSE 76437
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76261: LD_ADDR_VAR 0 5
76265: PUSH
76266: LD_INT 81
76268: PUSH
76269: LD_VAR 0 7
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PUSH
76278: LD_INT 91
76280: PUSH
76281: LD_VAR 0 4
76285: PUSH
76286: LD_INT 12
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: LIST
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: PPUSH
76298: CALL_OW 69
76302: ST_TO_ADDR
// if enemy then
76303: LD_VAR 0 5
76307: IFFALSE 76335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76309: LD_VAR 0 4
76313: PPUSH
76314: LD_VAR 0 5
76318: PPUSH
76319: LD_VAR 0 4
76323: PPUSH
76324: CALL_OW 74
76328: PPUSH
76329: CALL_OW 115
76333: GO 76435
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76335: LD_VAR 0 4
76339: PPUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_VAR 0 8
76349: ARRAY
76350: PUSH
76351: LD_INT 1
76353: ARRAY
76354: PPUSH
76355: LD_VAR 0 2
76359: PUSH
76360: LD_VAR 0 8
76364: ARRAY
76365: PUSH
76366: LD_INT 2
76368: ARRAY
76369: PPUSH
76370: CALL_OW 297
76374: PUSH
76375: LD_INT 6
76377: GREATER
76378: IFFALSE 76421
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76380: LD_VAR 0 4
76384: PPUSH
76385: LD_VAR 0 2
76389: PUSH
76390: LD_VAR 0 8
76394: ARRAY
76395: PUSH
76396: LD_INT 1
76398: ARRAY
76399: PPUSH
76400: LD_VAR 0 2
76404: PUSH
76405: LD_VAR 0 8
76409: ARRAY
76410: PUSH
76411: LD_INT 2
76413: ARRAY
76414: PPUSH
76415: CALL_OW 114
76419: GO 76435
// SetTag ( i , tag ) ;
76421: LD_VAR 0 4
76425: PPUSH
76426: LD_VAR 0 8
76430: PPUSH
76431: CALL_OW 109
// end else
76435: GO 76489
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76437: LD_ADDR_VAR 0 5
76441: PUSH
76442: LD_INT 81
76444: PUSH
76445: LD_VAR 0 7
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PPUSH
76454: CALL_OW 69
76458: ST_TO_ADDR
// if enemy then
76459: LD_VAR 0 5
76463: IFFALSE 76489
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76465: LD_VAR 0 4
76469: PPUSH
76470: LD_VAR 0 5
76474: PPUSH
76475: LD_VAR 0 4
76479: PPUSH
76480: CALL_OW 74
76484: PPUSH
76485: CALL_OW 115
// end ; end ;
76489: GO 76151
76491: POP
76492: POP
// end ; end_of_file
76493: LD_VAR 0 3
76497: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76498: LD_VAR 0 1
76502: PUSH
76503: LD_INT 200
76505: DOUBLE
76506: GREATEREQUAL
76507: IFFALSE 76515
76509: LD_INT 299
76511: DOUBLE
76512: LESSEQUAL
76513: IFTRUE 76517
76515: GO 76549
76517: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_VAR 0 2
76527: PPUSH
76528: LD_VAR 0 3
76532: PPUSH
76533: LD_VAR 0 4
76537: PPUSH
76538: LD_VAR 0 5
76542: PPUSH
76543: CALL 33060 0 5
76547: GO 76626
76549: LD_INT 300
76551: DOUBLE
76552: GREATEREQUAL
76553: IFFALSE 76561
76555: LD_INT 399
76557: DOUBLE
76558: LESSEQUAL
76559: IFTRUE 76563
76561: GO 76625
76563: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76564: LD_VAR 0 1
76568: PPUSH
76569: LD_VAR 0 2
76573: PPUSH
76574: LD_VAR 0 3
76578: PPUSH
76579: LD_VAR 0 4
76583: PPUSH
76584: LD_VAR 0 5
76588: PPUSH
76589: LD_VAR 0 6
76593: PPUSH
76594: LD_VAR 0 7
76598: PPUSH
76599: LD_VAR 0 8
76603: PPUSH
76604: LD_VAR 0 9
76608: PPUSH
76609: LD_VAR 0 10
76613: PPUSH
76614: LD_VAR 0 11
76618: PPUSH
76619: CALL 30958 0 11
76623: GO 76626
76625: POP
// end ;
76626: PPOPN 11
76628: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76629: LD_VAR 0 1
76633: PPUSH
76634: LD_VAR 0 2
76638: PPUSH
76639: LD_VAR 0 3
76643: PPUSH
76644: LD_VAR 0 4
76648: PPUSH
76649: LD_VAR 0 5
76653: PPUSH
76654: CALL 33052 0 5
// end ; end_of_file
76658: PPOPN 5
76660: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76661: LD_VAR 0 1
76665: PPUSH
76666: LD_VAR 0 2
76670: PPUSH
76671: LD_VAR 0 3
76675: PPUSH
76676: LD_VAR 0 4
76680: PPUSH
76681: LD_VAR 0 5
76685: PPUSH
76686: LD_VAR 0 6
76690: PPUSH
76691: CALL 19153 0 6
// end ;
76695: PPOPN 6
76697: END
