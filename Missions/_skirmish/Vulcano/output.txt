// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 880 0 0
// PrepareRussian ;
  23: CALL 3532 0 0
// PrepareLegion ;
  27: CALL 7063 0 0
// Action ;
  31: CALL 10742 0 0
// InitArt ;
  35: CALL 201 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 7
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 15
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 16
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// function InitArt ; begin
 201: LD_INT 0
 203: PPUSH
// SetArtifactRes ( your_side , true ) ;
 204: LD_OWVAR 2
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 467
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// us_force := [ ] ;
 253: LD_ADDR_EXP 20
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 260: LD_INT 17
 262: PPUSH
 263: CALL_OW 355
// PrepareAllianceAI ( ) ;
 267: CALL 16079 0 0
// uc_side := 1 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// uc_nation := nation_american ;
 279: LD_ADDR_OWVAR 21
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// hc_gallery :=  ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING 
 294: ST_TO_ADDR
// hc_name :=  ;
 295: LD_ADDR_OWVAR 26
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_importance := 0 ;
 303: LD_ADDR_OWVAR 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// for i = 1 to 11 do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_INT 11
 323: PUSH
 324: FOR_TO
 325: IFFALSE 378
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 327: LD_INT 0
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: PPUSH
 341: LD_EXP 21
 345: PPUSH
 346: CALL_OW 380
// un := CreateHuman ;
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// us_force := us_force ^ un ;
 360: LD_ADDR_EXP 20
 364: PUSH
 365: LD_EXP 20
 369: PUSH
 370: LD_VAR 0 4
 374: ADD
 375: ST_TO_ADDR
// end ;
 376: GO 324
 378: POP
 379: POP
// hc_importance := 100 ;
 380: LD_ADDR_OWVAR 32
 384: PUSH
 385: LD_INT 100
 387: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_EXP 21
 398: PPUSH
 399: CALL_OW 380
// us_commander := CreateHuman ;
 403: LD_ADDR_EXP 19
 407: PUSH
 408: CALL_OW 44
 412: ST_TO_ADDR
// player_commander := us_commander ;
 413: LD_ADDR_EXP 10
 417: PUSH
 418: LD_EXP 19
 422: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_STRING text
 430: PPUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: LD_OWVAR 67
 449: ARRAY
 450: PPUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 5
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PPUSH
 471: LD_INT -5
 473: PUSH
 474: LD_EXP 19
 478: PUSH
 479: LD_INT -3
 481: PUSH
 482: LD_INT -2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_EXP 20
 495: ADD
 496: PPUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 5
 525: PUSH
 526: LD_INT 5
 528: PUSH
 529: LD_INT 1
 531: NEG
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 42
 555: ST_TO_ADDR
// team := team ^ us_commander ;
 556: LD_ADDR_VAR 0 5
 560: PUSH
 561: LD_VAR 0 5
 565: PUSH
 566: LD_EXP 19
 570: ADD
 571: ST_TO_ADDR
// for i = 1 to team do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_VAR 0 5
 586: PUSH
 587: FOR_TO
 588: IFFALSE 613
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 590: LD_VAR 0 5
 594: PUSH
 595: LD_VAR 0 2
 599: ARRAY
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 587
 613: POP
 614: POP
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 620: LD_OWVAR 1
 624: PUSH
 625: LD_INT 73500
 627: LESS
 628: IFFALSE 655
 630: GO 632
 632: DISABLE
// begin enable ;
 633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 634: LD_INT 1
 636: PPUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 12
 644: PPUSH
 645: LD_INT 24
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL_OW 55
// end ;
 655: END
// every 1 1$10 do var time , p , l ;
 656: GO 658
 658: DISABLE
 659: LD_INT 0
 661: PPUSH
 662: PPUSH
 663: PPUSH
// begin time := 0 0$44 ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_INT 1540
 671: ST_TO_ADDR
// l := 0 ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 680: LD_VAR 0 1
 684: PPUSH
 685: CALL_OW 67
// l := l + 1 ;
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 703: LD_INT 12
 705: PPUSH
 706: CALL_OW 435
 710: PUSH
 711: LD_INT 30
 713: LESS
 714: IFFALSE 773
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 5
 721: PPUSH
 722: CALL_OW 12
 726: PPUSH
 727: LD_INT 12
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 737: LD_INT 1155
 739: PPUSH
 740: LD_INT 1540
 742: PPUSH
 743: CALL_OW 12
 747: PPUSH
 748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_INT 0
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL_OW 12
 788: ST_TO_ADDR
// if p then
 789: LD_VAR 0 2
 793: IFFALSE 828
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 795: LD_INT 105
 797: PPUSH
 798: LD_INT 350
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 15
 835: PUSH
 836: LD_INT 13
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_OWVAR 67
 851: ARRAY
 852: MOD
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: IFFALSE 873
// time := time + 2 2$00 ;
 859: LD_ADDR_VAR 0 1
 863: PUSH
 864: LD_VAR 0 1
 868: PUSH
 869: LD_INT 4200
 871: PLUS
 872: ST_TO_ADDR
// end until false ;
 873: LD_INT 0
 875: IFFALSE 680
// end ; end_of_file
 877: PPOPN 3
 879: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , p , russian_in_base ; begin
 880: LD_INT 0
 882: PPUSH
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 890: LD_ADDR_VAR 0 3
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 21
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 924: LD_ADDR_VAR 0 4
 928: PUSH
 929: LD_INT 470
 931: PUSH
 932: LD_INT 370
 934: PUSH
 935: LD_INT 290
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_OWVAR 67
 947: ARRAY
 948: ST_TO_ADDR
// case Difficulty of 2 :
 949: LD_OWVAR 67
 953: PUSH
 954: LD_INT 2
 956: DOUBLE
 957: EQUAL
 958: IFTRUE 962
 960: GO 993
 962: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: CALL_OW 65
// end ; 3 :
 991: GO 1069
 993: LD_INT 3
 995: DOUBLE
 996: EQUAL
 997: IFTRUE 1001
 999: GO 1068
1001: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1002: LD_VAR 0 3
1006: PPUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 32
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1030: LD_VAR 0 3
1034: PPUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 72
1049: PUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 3
1055: PPUSH
1056: CALL_OW 12
1060: ARRAY
1061: PPUSH
1062: CALL_OW 65
// end ; end ;
1066: GO 1069
1068: POP
// for i = 1 to filter do
1069: LD_ADDR_VAR 0 2
1073: PUSH
1074: DOUBLE
1075: LD_INT 1
1077: DEC
1078: ST_TO_ADDR
1079: LD_VAR 0 3
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1122
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1087: LD_VAR 0 3
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 4
1102: PUSH
1103: LD_INT 29
1105: NEG
1106: PPUSH
1107: LD_INT 29
1109: PPUSH
1110: CALL_OW 12
1114: PLUS
1115: PPUSH
1116: CALL_OW 234
1120: GO 1084
1122: POP
1123: POP
// SetBName ( us_depot , Vulcano1 ) ;
1124: LD_INT 50
1126: PPUSH
1127: LD_STRING Vulcano1
1129: PPUSH
1130: CALL_OW 500
// hc_importance := 0 ;
1134: LD_ADDR_OWVAR 32
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// uc_side := 3 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// uc_nation := nation_russian ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 3
1157: ST_TO_ADDR
// russian_in_base := [ ] ;
1158: LD_ADDR_VAR 0 8
1162: PUSH
1163: EMPTY
1164: ST_TO_ADDR
// area := RandPointsFromArea ( 82 , 137 , 106 , 152 , 10 ) ;
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_INT 82
1172: PPUSH
1173: LD_INT 137
1175: PPUSH
1176: LD_INT 106
1178: PPUSH
1179: LD_INT 152
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: CALL 1562 0 5
1189: ST_TO_ADDR
// p := 1 ;
1190: LD_ADDR_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_INT 6
1210: PUSH
1211: LD_INT 6
1213: PUSH
1214: LD_INT 7
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_OWVAR 67
1226: ARRAY
1227: PUSH
1228: FOR_TO
1229: IFFALSE 1341
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1231: LD_INT 0
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 4
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_OWVAR 67
1255: ARRAY
1256: PPUSH
1257: CALL_OW 380
// un := CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1271: LD_ADDR_VAR 0 8
1275: PUSH
1276: LD_VAR 0 8
1280: PUSH
1281: LD_VAR 0 5
1285: ADD
1286: ST_TO_ADDR
// PlaceUnitXY ( un , area [ p ] , area [ p + 1 ] , false ) ;
1287: LD_VAR 0 5
1291: PPUSH
1292: LD_VAR 0 6
1296: PUSH
1297: LD_VAR 0 7
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 7
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 48
// p := p + 2 ;
1325: LD_ADDR_VAR 0 7
1329: PUSH
1330: LD_VAR 0 7
1334: PUSH
1335: LD_INT 2
1337: PLUS
1338: ST_TO_ADDR
// end ;
1339: GO 1228
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1348: LD_INT 50
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 2052 0 2
1358: PUSH
1359: LD_INT 40
1361: LESS
1362: IFFALSE 1559
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
// begin uc_side := 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// uc_nation := nation_american ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_importance := 0 ;
1387: LD_ADDR_OWVAR 32
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// for i = 1 to 7 do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: DOUBLE
1401: LD_INT 1
1403: DEC
1404: ST_TO_ADDR
1405: LD_INT 7
1407: PUSH
1408: FOR_TO
1409: IFFALSE 1473
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 12
1424: PPUSH
1425: LD_EXP 21
1429: PPUSH
1430: CALL_OW 380
// un := CreateHuman ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: CALL_OW 44
1443: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 7
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// SetLives ( un , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 234
// end ;
1471: GO 1408
1473: POP
1474: POP
// for i = 1 to 5 do
1475: LD_ADDR_VAR 0 1
1479: PUSH
1480: DOUBLE
1481: LD_INT 1
1483: DEC
1484: ST_TO_ADDR
1485: LD_INT 5
1487: PUSH
1488: FOR_TO
1489: IFFALSE 1557
// begin PrepareHuman ( false , 4 , us_skill ) ;
1491: LD_INT 0
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: LD_EXP 21
1501: PPUSH
1502: CALL_OW 380
// SetDir ( un , 1 ) ;
1506: LD_VAR 0 2
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 233
// un := CreateHuman ;
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 23
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// SetLives ( un , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_INT 10
1550: PPUSH
1551: CALL_OW 234
// end ;
1555: GO 1488
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 2
1561: END
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
// list := [ ] ;
1567: LD_ADDR_VAR 0 7
1571: PUSH
1572: EMPTY
1573: ST_TO_ADDR
// for i = 1 to num do
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_VAR 0 5
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1646
// begin list := list ^ Rand ( x1 , x2 ) ;
1592: LD_ADDR_VAR 0 7
1596: PUSH
1597: LD_VAR 0 7
1601: PUSH
1602: LD_VAR 0 1
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 12
1616: ADD
1617: ST_TO_ADDR
// list := list ^ Rand ( y1 , y2 ) ;
1618: LD_ADDR_VAR 0 7
1622: PUSH
1623: LD_VAR 0 7
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL_OW 12
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1589
1646: POP
1647: POP
// result := list ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: LD_VAR 0 7
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 6
1662: RET
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1663: LD_INT 0
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// c := Rand ( 1 , 3 ) ;
1669: LD_ADDR_VAR 0 5
1673: PUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 12
1684: ST_TO_ADDR
// for i = 1 to list do
1685: LD_ADDR_VAR 0 6
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_VAR 0 1
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1883
// for ta in filter do
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: FOR_IN
1714: IFFALSE 1879
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_VAR 0 6
1725: ARRAY
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 296
1736: PUSH
1737: LD_INT 15
1739: LESSEQUAL
1740: IFFALSE 1877
// begin case c of 1 :
1742: LD_VAR 0 5
1746: PUSH
1747: LD_INT 1
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1793
1755: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1756: LD_VAR 0 1
1760: PUSH
1761: LD_VAR 0 6
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 250
1776: PPUSH
1777: LD_VAR 0 4
1781: PPUSH
1782: CALL_OW 251
1786: PPUSH
1787: CALL_OW 154
1791: GO 1877
1793: LD_INT 2
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1865
1801: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1802: LD_VAR 0 1
1806: PUSH
1807: LD_VAR 0 6
1811: ARRAY
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL_OW 250
1822: PUSH
1823: LD_INT 1
1825: NEG
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL_OW 12
1834: PLUS
1835: PPUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 251
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: PLUS
1858: PPUSH
1859: CALL_OW 153
1863: GO 1877
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1876
1873: POP
// ; end ;
1874: GO 1877
1876: POP
// end ; end ;
1877: GO 1713
1879: POP
1880: POP
1881: GO 1700
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// for i = 1 to n do
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 1
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2045
// begin uc_side := 0 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// uc_nation := 0 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 0
1928: ST_TO_ADDR
// hc_class := class_apeman ;
1929: LD_ADDR_OWVAR 28
1933: PUSH
1934: LD_INT 12
1936: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1937: LD_ADDR_OWVAR 31
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_name :=  ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING 
1967: ST_TO_ADDR
// hc_gallery :=  ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING 
1975: ST_TO_ADDR
// hc_importance := 0 ;
1976: LD_ADDR_OWVAR 32
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// un := CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 19
2001: PUSH
2002: LD_INT 20
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: CALL_OW 12
2019: ARRAY
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2028: LD_INT 1155
2030: PPUSH
2031: LD_INT 5355
2033: PPUSH
2034: CALL_OW 12
2038: PPUSH
2039: CALL_OW 67
// end ;
2043: GO 1910
2045: POP
2046: POP
// end ;
2047: LD_VAR 0 2
2051: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2052: LD_INT 0
2054: PPUSH
2055: PPUSH
2056: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2057: LD_ADDR_VAR 0 4
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: CALL_OW 74
2088: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_VAR 0 1
2098: PPUSH
2099: LD_VAR 0 4
2103: PPUSH
2104: CALL_OW 296
2108: ST_TO_ADDR
// if dist >= 9999 then
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 9999
2116: GREATEREQUAL
2117: IFFALSE 2130
// result := - 1 else
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: LD_INT 1
2126: NEG
2127: ST_TO_ADDR
2128: GO 2140
// result := dist ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 5
2139: ST_TO_ADDR
// end ;
2140: LD_VAR 0 3
2144: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// tmp := 9999 ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_INT 9999
2158: ST_TO_ADDR
// for i = 1 to plist do
2159: LD_ADDR_VAR 0 4
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2249
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2177: LD_VAR 0 1
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PPUSH
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL 2052 0 2
2197: PUSH
2198: LD_VAR 0 5
2202: LESS
2203: IFFALSE 2247
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 4
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL 2052 0 2
2230: ST_TO_ADDR
// unit := plist [ i ] ;
2231: LD_ADDR_VAR 0 6
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_VAR 0 4
2245: ARRAY
2246: ST_TO_ADDR
// end ;
2247: GO 2174
2249: POP
2250: POP
// result := unit ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: LD_VAR 0 6
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 3
2265: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_INT 1000
2280: PUSH
2281: LD_INT 2500
2283: PUSH
2284: LD_INT 5000
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_OWVAR 67
2296: ARRAY
2297: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 2
2307: PUSH
2308: LD_INT 1
2310: NEG
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_OWVAR 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PPUSH
2338: CALL_OW 69
2342: MUL
2343: PUSH
2344: LD_INT 30
2346: MUL
2347: PLUS
2348: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_INT 10
2366: MUL
2367: PLUS
2368: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_VAR 0 2
2378: PUSH
2379: LD_INT 1
2381: NEG
2382: PUSH
2383: LD_EXP 15
2387: MUL
2388: PUSH
2389: LD_INT 20
2391: MUL
2392: PLUS
2393: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_OWVAR 1
2412: PUSH
2413: LD_INT 35
2415: DIVREAL
2416: PUSH
2417: LD_INT 60
2419: DIVREAL
2420: MUL
2421: PUSH
2422: LD_INT 25
2424: MUL
2425: PLUS
2426: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PUSH
2437: LD_EXP 17
2441: PUSH
2442: LD_INT 15
2444: MUL
2445: PLUS
2446: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: NEG
2460: PUSH
2461: LD_EXP 18
2465: MUL
2466: PUSH
2467: LD_INT 1000
2469: MUL
2470: PLUS
2471: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_INT 5
2489: MUL
2490: PLUS
2491: ST_TO_ADDR
// result := points ;
2492: LD_ADDR_VAR 0 1
2496: PUSH
2497: LD_VAR 0 2
2501: ST_TO_ADDR
// end ; end_of_file
2502: LD_VAR 0 1
2506: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL 31943 0 1
// if GetSide ( un ) = your_side then
2516: LD_VAR 0 1
2520: PPUSH
2521: CALL_OW 255
2525: PUSH
2526: LD_OWVAR 2
2530: EQUAL
2531: IFFALSE 2547
// dead_counter := dead_counter + 1 ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: LD_EXP 14
2542: PUSH
2543: LD_INT 1
2545: PLUS
2546: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 81
2559: PUSH
2560: LD_OWVAR 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: IN
2574: IFFALSE 2590
// kill_counter := kill_counter + 1 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_EXP 15
2585: PUSH
2586: LD_INT 1
2588: PLUS
2589: ST_TO_ADDR
// if un = player_commander then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 10
2599: EQUAL
2600: IFFALSE 2609
// YouLost ( vulcano-lost ) ;
2602: LD_STRING vulcano-lost
2604: PPUSH
2605: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: IN
2643: IFFALSE 2759
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_INT 33
2657: EQUAL
2658: PUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 266
2668: PUSH
2669: LD_INT 28
2671: EQUAL
2672: OR
2673: IFFALSE 2759
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_EXP 26
2684: PUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: ADD
2695: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_EXP 26
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: CALL_OW 250
2715: ADD
2716: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2717: LD_ADDR_EXP 26
2721: PUSH
2722: LD_EXP 26
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 251
2736: ADD
2737: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2738: LD_ADDR_EXP 26
2742: PUSH
2743: LD_EXP 26
2747: PUSH
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL_OW 254
2757: ADD
2758: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2759: LD_VAR 0 1
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 8
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: IN
2793: IFFALSE 2937
// begin if GetBType ( un ) = b_barracks then
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 266
2804: PUSH
2805: LD_INT 5
2807: EQUAL
2808: IFFALSE 2826
// legion_blist := legion_blist ^ b_armoury else
2810: LD_ADDR_EXP 34
2814: PUSH
2815: LD_EXP 34
2819: PUSH
2820: LD_INT 4
2822: ADD
2823: ST_TO_ADDR
2824: GO 2874
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 6
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: IN
2850: NOT
2851: IFFALSE 2874
// legion_blist := legion_blist ^ GetBType ( un ) ;
2853: LD_ADDR_EXP 34
2857: PUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 266
2872: ADD
2873: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: LD_EXP 34
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 250
2893: ADD
2894: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2895: LD_ADDR_EXP 34
2899: PUSH
2900: LD_EXP 34
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 251
2914: ADD
2915: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2916: LD_ADDR_EXP 34
2920: PUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 254
2935: ADD
2936: ST_TO_ADDR
// end ; if un in legion_force then
2937: LD_VAR 0 1
2941: PUSH
2942: LD_EXP 31
2946: IN
2947: IFFALSE 2965
// legion_force := legion_force diff un ;
2949: LD_ADDR_EXP 31
2953: PUSH
2954: LD_EXP 31
2958: PUSH
2959: LD_VAR 0 1
2963: DIFF
2964: ST_TO_ADDR
// if un in ru_force then
2965: LD_VAR 0 1
2969: PUSH
2970: LD_EXP 23
2974: IN
2975: IFFALSE 2993
// ru_force := ru_force diff un ;
2977: LD_ADDR_EXP 23
2981: PUSH
2982: LD_EXP 23
2986: PUSH
2987: LD_VAR 0 1
2991: DIFF
2992: ST_TO_ADDR
// if un in al_force then
2993: LD_VAR 0 1
2997: PUSH
2998: LD_EXP 38
3002: IN
3003: IFFALSE 3021
// al_force := al_force diff un ;
3005: LD_ADDR_EXP 38
3009: PUSH
3010: LD_EXP 38
3014: PUSH
3015: LD_VAR 0 1
3019: DIFF
3020: ST_TO_ADDR
// end ;
3021: PPOPN 1
3023: END
// on BuildingComplete ( b ) do var i ;
3024: LD_INT 0
3026: PPUSH
// begin if GetSide ( b ) = 8 then
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 255
3036: PUSH
3037: LD_INT 8
3039: EQUAL
3040: IFFALSE 3080
// for i = 1 to 4 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 4
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3078
// legion_blist := Delete ( legion_blist , 1 ) ;
3058: LD_ADDR_EXP 34
3062: PUSH
3063: LD_EXP 34
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
3076: GO 3055
3078: POP
3079: POP
// if GetSide ( b ) = 3 then
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: PUSH
3090: LD_INT 3
3092: EQUAL
3093: IFFALSE 3133
// for i = 1 to 4 do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_INT 4
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3131
// ru_blist := Delete ( ru_blist , 1 ) ;
3111: LD_ADDR_EXP 26
3115: PUSH
3116: LD_EXP 26
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 3
3128: ST_TO_ADDR
3129: GO 3108
3131: POP
3132: POP
// end ;
3133: PPOPN 2
3135: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 264
3145: PUSH
3146: LD_INT 51
3148: PUSH
3149: LD_INT 48
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: IN
3156: NOT
3157: IFFALSE 3205
// begin if GetSide ( veh ) = 3 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 3
3171: EQUAL
3172: IFFALSE 3205
// begin ComMoveXY ( veh , 149 , 8 ) ;
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 149
3181: PPUSH
3182: LD_INT 8
3184: PPUSH
3185: CALL_OW 111
// ru_force := ru_force ^ veh ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 1
3203: ADD
3204: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 31
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: IN
3225: NOT
3226: IFFALSE 3259
// begin if GetSide ( veh ) = 8 then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 255
3237: PUSH
3238: LD_INT 8
3240: EQUAL
3241: IFFALSE 3259
// legion_force := legion_force ^ veh ;
3243: LD_ADDR_EXP 31
3247: PUSH
3248: LD_EXP 31
3252: PUSH
3253: LD_VAR 0 1
3257: ADD
3258: ST_TO_ADDR
// end ; if GetSide ( veh ) = 7 and your_side <> 7 then
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 255
3268: PUSH
3269: LD_INT 7
3271: EQUAL
3272: PUSH
3273: LD_OWVAR 2
3277: PUSH
3278: LD_INT 7
3280: NONEQUAL
3281: AND
3282: IFFALSE 3300
// al_force := al_force ^ veh ;
3284: LD_ADDR_EXP 38
3288: PUSH
3289: LD_EXP 38
3293: PUSH
3294: LD_VAR 0 1
3298: ADD
3299: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 255
3309: PUSH
3310: LD_OWVAR 2
3314: EQUAL
3315: IFFALSE 3331
// veh_counter := veh_counter + 1 ;
3317: LD_ADDR_EXP 16
3321: PUSH
3322: LD_EXP 16
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: ST_TO_ADDR
// end ;
3331: PPOPN 2
3333: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 255
3343: PUSH
3344: LD_OWVAR 2
3348: NONEQUAL
3349: IFFALSE 3365
// sib_contamin_counter := sib_contamin_counter + 1 ;
3351: LD_ADDR_EXP 18
3355: PUSH
3356: LD_EXP 18
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: ST_TO_ADDR
// end ;
3365: PPOPN 3
3367: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL_OW 255
3377: PUSH
3378: LD_OWVAR 2
3382: EQUAL
3383: IFFALSE 3399
// tech_counter := tech_counter + 1 ;
3385: LD_ADDR_EXP 17
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3399: LD_VAR 0 1
3403: PUSH
3404: LD_INT 53
3406: EQUAL
3407: PUSH
3408: LD_OWVAR 2
3412: PUSH
3413: LD_INT 1
3415: EQUAL
3416: AND
3417: IFFALSE 3432
// SetTech ( 80 , 1 , state_researched ) ;
3419: LD_INT 80
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// end ;
3432: PPOPN 2
3434: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do var i ;
3435: LD_INT 25
3437: PUSH
3438: LD_INT 12
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 9
3452: LESS
3453: IFFALSE 3495
3455: GO 3457
3457: DISABLE
3458: LD_INT 0
3460: PPUSH
// begin enable ;
3461: ENABLE
// i := FilterAllUnits ( [ f_class , class_apeman ] ) ;
3462: LD_ADDR_VAR 0 1
3466: PUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 12
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 69
3481: ST_TO_ADDR
// PrepareApeman ( 8 - i ) ;
3482: LD_INT 8
3484: PUSH
3485: LD_VAR 0 1
3489: MINUS
3490: PPUSH
3491: CALL 1890 0 1
// end ;
3495: PPOPN 1
3497: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL 32041 0 3
// end ;
3517: PPOPN 3
3519: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL 32049 0 1
// end ; end_of_file
3529: PPOPN 1
3531: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side := 3 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 3
3552: ST_TO_ADDR
// uc_nation := nation_russian ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 30
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 69
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 30
3654: PUSH
3655: LD_INT 34
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 69
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 22
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// ru_blist := [ ] ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// ru_vlist := [ ] ;
3754: LD_ADDR_EXP 27
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3761: LD_ADDR_EXP 30
3765: PUSH
3766: LD_INT 183
3768: PUSH
3769: LD_INT 62
3771: PUSH
3772: LD_INT 147
3774: PUSH
3775: LD_INT 44
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3784: LD_INT 30
3786: PUSH
3787: LD_INT 34
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_EXP 30
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_EXP 30
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3825: LD_ADDR_EXP 28
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 3000
3865: PPUSH
3866: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: LD_INT 300
3885: PPUSH
3886: CALL_OW 277
// hc_gallery :=  ;
3890: LD_ADDR_OWVAR 33
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// hc_name :=  ;
3898: LD_ADDR_OWVAR 26
3902: PUSH
3903: LD_STRING 
3905: ST_TO_ADDR
// hc_importance := 0 ;
3906: LD_ADDR_OWVAR 32
3910: PUSH
3911: LD_INT 0
3913: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3914: LD_ADDR_EXP 24
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: LD_INT 7
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: ST_TO_ADDR
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4111
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 9
3960: PPUSH
3961: LD_EXP 24
3965: PPUSH
3966: CALL_OW 380
// un := CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3994: LD_INT 0
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_EXP 24
4004: PPUSH
4005: CALL_OW 380
// un := CreateHuman ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 24
4026: PPUSH
4027: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4031: LD_INT 0
4033: PPUSH
4034: LD_INT 3
4036: PPUSH
4037: LD_EXP 24
4041: PPUSH
4042: CALL_OW 380
// un := CreateHuman ;
4046: LD_ADDR_VAR 0 3
4050: PUSH
4051: CALL_OW 44
4055: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_VAR 0 5
4065: PPUSH
4066: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: LD_EXP 24
4080: PPUSH
4081: CALL_OW 380
// un := CreateHuman ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: CALL_OW 44
4094: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4095: LD_VAR 0 3
4099: PPUSH
4100: LD_VAR 0 4
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3952
4111: POP
4112: POP
// russian_prepared := true ;
4113: LD_ADDR_EXP 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_INT 21
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_INT 51
4137: PPUSH
4138: CALL_OW 125
// end ;
4142: LD_VAR 0 1
4146: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , p , cr , sib_bomb ;
4147: LD_INT 22
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: PUSH
4162: LD_INT 0
4164: GREATER
4165: PUSH
4166: LD_EXP 2
4170: AND
4171: IFFALSE 6634
4173: GO 4175
4175: DISABLE
4176: LD_INT 0
4178: PPUSH
4179: PPUSH
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
4194: PPUSH
// begin enable ;
4195: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 69
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 3
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 30
4289: PUSH
4290: LD_INT 34
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 69
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_INT 22
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 69
4343: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4344: LD_ADDR_VAR 0 8
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 69
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 5
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 21
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PPUSH
4479: CALL_OW 69
4483: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 72
4508: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4509: LD_ADDR_VAR 0 10
4513: PUSH
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4534: LD_ADDR_VAR 0 11
4538: PUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 4
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 51
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: GREATER
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_INT 0
4599: EQUAL
4600: AND
4601: IFFALSE 4641
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4603: LD_ADDR_EXP 25
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 34
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 69
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: ST_TO_ADDR
// if ru_cargo then
4641: LD_EXP 25
4645: IFFALSE 4943
// begin if IsInArea ( ru_cargo , ru_base ) then
4647: LD_EXP 25
4651: PPUSH
4652: LD_INT 9
4654: PPUSH
4655: CALL_OW 308
4659: IFFALSE 4738
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4661: LD_EXP 25
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: CALL_OW 289
4673: PUSH
4674: LD_INT 0
4676: EQUAL
4677: IFFALSE 4695
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4679: LD_EXP 25
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 120
4693: GO 4736
// if not HasTask ( ru_cargo ) then
4695: LD_EXP 25
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4736
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4707: LD_EXP 25
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 250
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 251
4731: PPUSH
4732: CALL_OW 111
// end else
4736: GO 4943
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 then
4738: LD_EXP 25
4742: PPUSH
4743: CALL_OW 314
4747: NOT
4748: PUSH
4749: LD_EXP 25
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 289
4761: PUSH
4762: LD_INT 100
4764: LESS
4765: AND
4766: IFFALSE 4832
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4768: LD_ADDR_VAR 0 16
4772: PUSH
4773: LD_INT 11
4775: PPUSH
4776: CALL_OW 435
4780: ST_TO_ADDR
// if cr > 0 then
4781: LD_VAR 0 16
4785: PUSH
4786: LD_INT 0
4788: GREATER
4789: IFFALSE 4820
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4791: LD_EXP 25
4795: PPUSH
4796: LD_VAR 0 16
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: PPUSH
4805: LD_VAR 0 16
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 117
4818: GO 4832
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4820: LD_EXP 25
4824: PPUSH
4825: LD_INT 11
4827: PPUSH
4828: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and GetCargo ( ru_cargo , mat_cans ) = 100 then
4832: LD_EXP 25
4836: PPUSH
4837: CALL_OW 314
4841: NOT
4842: PUSH
4843: LD_EXP 25
4847: PPUSH
4848: LD_INT 10
4850: PPUSH
4851: CALL_OW 308
4855: NOT
4856: AND
4857: PUSH
4858: LD_EXP 25
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 289
4870: PUSH
4871: LD_INT 100
4873: EQUAL
4874: AND
4875: IFFALSE 4889
// ComMoveToArea ( ru_cargo , cargoa ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_INT 10
4884: PPUSH
4885: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4889: LD_EXP 25
4893: PPUSH
4894: LD_INT 10
4896: PPUSH
4897: CALL_OW 308
4901: PUSH
4902: LD_VAR 0 8
4906: AND
4907: IFFALSE 4943
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4909: LD_VAR 0 7
4913: PPUSH
4914: LD_INT 25
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 72
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 139
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4943: LD_EXP 25
4947: PUSH
4948: LD_INT 0
4950: EQUAL
4951: PUSH
4952: LD_VAR 0 2
4956: AND
4957: PUSH
4958: LD_VAR 0 2
4962: PPUSH
4963: CALL_OW 461
4967: PUSH
4968: LD_INT 2
4970: EQUAL
4971: AND
4972: IFFALSE 4995
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4974: LD_VAR 0 2
4978: PPUSH
4979: LD_INT 21
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 51
4990: PPUSH
4991: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 72
5014: IFFALSE 5078
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PPUSH
5036: LD_INT 22
5038: PUSH
5039: LD_OWVAR 2
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: CALL 1663 0 2
// if ru_factory and ru_vlist > 0 then
5078: LD_VAR 0 2
5082: PUSH
5083: LD_EXP 27
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: AND
5092: IFFALSE 5192
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 461
5103: PUSH
5104: LD_INT 2
5106: EQUAL
5107: IFFALSE 5192
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_EXP 27
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_EXP 27
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_EXP 27
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 27
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: PPUSH
5150: CALL_OW 125
// for i = 1 to 4 do
5154: LD_ADDR_VAR 0 12
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_INT 4
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5190
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5170: LD_ADDR_EXP 27
5174: PUSH
5175: LD_EXP 27
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 3
5187: ST_TO_ADDR
5188: GO 5167
5190: POP
5191: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5192: LD_INT 24
5194: PPUSH
5195: CALL_OW 461
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: PUSH
5204: LD_EXP 4
5208: AND
5209: IFFALSE 5237
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5211: LD_INT 25
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL_OW 321
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5237
// ComResearch ( ru_lab , tech_sibfiss ) ;
5227: LD_INT 24
5229: PPUSH
5230: LD_INT 25
5232: PPUSH
5233: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5237: LD_INT 25
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 321
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: PUSH
5252: LD_OWVAR 1
5256: PUSH
5257: LD_INT 10500
5259: MOD
5260: PUSH
5261: LD_INT 0
5263: EQUAL
5264: AND
5265: IFFALSE 5303
// if BuildingStatus ( ru_factory ) = bs_idle then
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 461
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5303
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 48
5298: PPUSH
5299: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 48
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5709
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5337: LD_ADDR_VAR 0 17
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 34
5354: PUSH
5355: LD_INT 48
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PPUSH
5366: CALL_OW 69
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5375: LD_VAR 0 17
5379: PPUSH
5380: LD_INT 9
5382: PPUSH
5383: CALL_OW 308
5387: IFFALSE 5405
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5389: LD_VAR 0 17
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 120
5403: GO 5709
// if not HasTask ( sib_bomb ) then
5405: LD_VAR 0 17
5409: PPUSH
5410: CALL_OW 314
5414: NOT
5415: IFFALSE 5709
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5417: LD_INT 22
5419: PUSH
5420: LD_OWVAR 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 30
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: CALL_OW 256
5456: PUSH
5457: LD_INT 250
5459: GREATER
5460: IFFALSE 5553
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5462: LD_VAR 0 17
5466: PPUSH
5467: LD_INT 22
5469: PUSH
5470: LD_OWVAR 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL_OW 69
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: CALL_OW 250
5506: PPUSH
5507: LD_INT 22
5509: PUSH
5510: LD_OWVAR 2
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 251
5546: PPUSH
5547: CALL_OW 116
5551: GO 5709
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5553: LD_INT 22
5555: PUSH
5556: LD_OWVAR 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: IFFALSE 5680
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5589: LD_VAR 0 17
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_OWVAR 2
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 250
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_OWVAR 2
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: CALL_OW 251
5673: PPUSH
5674: CALL_OW 116
5678: GO 5709
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5680: LD_VAR 0 17
5684: PPUSH
5685: LD_EXP 10
5689: PPUSH
5690: CALL_OW 250
5694: PPUSH
5695: LD_EXP 10
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
// end ; if ru_can_attack then
5709: LD_EXP 3
5713: IFFALSE 5861
// if ru_time > 0 0$00 then
5715: LD_EXP 29
5719: PUSH
5720: LD_INT 0
5722: GREATER
5723: IFFALSE 5741
// ru_time := ru_time - 0 0$01 else
5725: LD_ADDR_EXP 29
5729: PUSH
5730: LD_EXP 29
5734: PUSH
5735: LD_INT 35
5737: MINUS
5738: ST_TO_ADDR
5739: GO 5861
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5741: LD_ADDR_EXP 29
5745: PUSH
5746: LD_INT 20265
5748: PPUSH
5749: LD_INT 30765
5751: PPUSH
5752: CALL_OW 12
5756: ST_TO_ADDR
// for i = 1 to ru_amount do
5757: LD_ADDR_VAR 0 12
5761: PUSH
5762: DOUBLE
5763: LD_INT 1
5765: DEC
5766: ST_TO_ADDR
5767: LD_EXP 28
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5859
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5775: LD_ADDR_EXP 27
5779: PUSH
5780: LD_EXP 27
5784: PUSH
5785: LD_INT 23
5787: ADD
5788: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5789: LD_ADDR_EXP 27
5793: PUSH
5794: LD_EXP 27
5798: PUSH
5799: LD_INT 3
5801: ADD
5802: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5803: LD_ADDR_EXP 27
5807: PUSH
5808: LD_EXP 27
5812: PUSH
5813: LD_INT 3
5815: ADD
5816: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5817: LD_ADDR_EXP 27
5821: PUSH
5822: LD_EXP 27
5826: PUSH
5827: LD_INT 46
5829: PUSH
5830: LD_INT 45
5832: PUSH
5833: LD_INT 47
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: CALL_OW 14
5854: ARRAY
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5772
5859: POP
5860: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5861: LD_VAR 0 4
5865: PPUSH
5866: LD_INT 35
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 72
5880: PUSH
5881: LD_INT 0
5883: GREATER
5884: IFFALSE 5932
// if BuildingStatus ( ru_factory ) = bs_idle then
5886: LD_VAR 0 2
5890: PPUSH
5891: CALL_OW 461
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: IFFALSE 5932
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_INT 35
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 72
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 47
5927: PPUSH
5928: CALL_OW 148
// if ru_force = ru_amount then
5932: LD_EXP 23
5936: PUSH
5937: LD_EXP 28
5941: EQUAL
5942: IFFALSE 6074
// begin for i = 1 to ru_force do
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_EXP 23
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6070
// if IsInArea ( ru_force [ i ] , ru_base ) then
5962: LD_EXP 23
5966: PUSH
5967: LD_VAR 0 12
5971: ARRAY
5972: PPUSH
5973: LD_INT 9
5975: PPUSH
5976: CALL_OW 308
5980: IFFALSE 6004
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
5982: LD_EXP 23
5986: PUSH
5987: LD_VAR 0 12
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 120
6002: GO 6068
// if not HasTask ( ru_force [ i ] ) then
6004: LD_EXP 23
6008: PUSH
6009: LD_VAR 0 12
6013: ARRAY
6014: PPUSH
6015: CALL_OW 314
6019: NOT
6020: IFFALSE 6068
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6022: LD_EXP 23
6026: PUSH
6027: LD_VAR 0 12
6031: ARRAY
6032: PPUSH
6033: LD_INT 81
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PPUSH
6048: LD_EXP 23
6052: PUSH
6053: LD_VAR 0 12
6057: ARRAY
6058: PPUSH
6059: CALL_OW 74
6063: PPUSH
6064: CALL_OW 115
6068: GO 5959
6070: POP
6071: POP
// end else
6072: GO 6224
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6074: LD_EXP 23
6078: PPUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 95
6084: PUSH
6085: LD_INT 18
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 72
6100: PUSH
6101: LD_INT 0
6103: GREATER
6104: IFFALSE 6224
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6106: LD_ADDR_VAR 0 13
6110: PUSH
6111: LD_EXP 23
6115: PPUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 95
6121: PUSH
6122: LD_INT 18
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 72
6137: ST_TO_ADDR
// for i = 1 to tmp do
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_VAR 0 13
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6222
// if not HasTask ( tmp [ i ] ) then
6156: LD_VAR 0 13
6160: PUSH
6161: LD_VAR 0 12
6165: ARRAY
6166: PPUSH
6167: CALL_OW 314
6171: NOT
6172: IFFALSE 6220
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6174: LD_EXP 23
6178: PUSH
6179: LD_VAR 0 12
6183: ARRAY
6184: PPUSH
6185: LD_INT 81
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PPUSH
6200: LD_EXP 23
6204: PUSH
6205: LD_VAR 0 12
6209: ARRAY
6210: PPUSH
6211: CALL_OW 74
6215: PPUSH
6216: CALL_OW 115
6220: GO 6153
6222: POP
6223: POP
// end ; if ru_engs > 0 then
6224: LD_VAR 0 9
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: IFFALSE 6634
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6234: LD_VAR 0 5
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: IFFALSE 6419
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6266: LD_ADDR_VAR 0 14
6270: PUSH
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: LD_INT 1000
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 72
6297: ST_TO_ADDR
// for i = 1 to ru_engs do
6298: LD_ADDR_VAR 0 12
6302: PUSH
6303: DOUBLE
6304: LD_INT 1
6306: DEC
6307: ST_TO_ADDR
6308: LD_VAR 0 9
6312: PUSH
6313: FOR_TO
6314: IFFALSE 6415
// begin if IsInUnit ( ru_engs [ i ] ) then
6316: LD_VAR 0 9
6320: PUSH
6321: LD_VAR 0 12
6325: ARRAY
6326: PPUSH
6327: CALL_OW 310
6331: IFFALSE 6350
// ComExitBuilding ( ru_engs [ i ] ) else
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 122
6348: GO 6413
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 314
6365: NOT
6366: PUSH
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 256
6382: PUSH
6383: LD_INT 600
6385: GREATER
6386: AND
6387: IFFALSE 6413
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6389: LD_VAR 0 9
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 14
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PPUSH
6409: CALL_OW 130
// end ;
6413: GO 6313
6415: POP
6416: POP
// end else
6417: GO 6634
// begin if ru_blist = 0 then
6419: LD_EXP 26
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6509
// begin for i = 1 to ru_engs do
6429: LD_ADDR_VAR 0 12
6433: PUSH
6434: DOUBLE
6435: LD_INT 1
6437: DEC
6438: ST_TO_ADDR
6439: LD_VAR 0 9
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6505
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6447: LD_VAR 0 9
6451: PUSH
6452: LD_VAR 0 12
6456: ARRAY
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 310
6479: NOT
6480: AND
6481: IFFALSE 6503
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6483: LD_VAR 0 9
6487: PUSH
6488: LD_VAR 0 12
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 120
6503: GO 6444
6505: POP
6506: POP
// end else
6507: GO 6634
// begin for i = 1 to ru_engs do
6509: LD_ADDR_VAR 0 12
6513: PUSH
6514: DOUBLE
6515: LD_INT 1
6517: DEC
6518: ST_TO_ADDR
6519: LD_VAR 0 9
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6632
// begin if IsInUnit ( ru_engs [ i ] ) then
6527: LD_VAR 0 9
6531: PUSH
6532: LD_VAR 0 12
6536: ARRAY
6537: PPUSH
6538: CALL_OW 310
6542: IFFALSE 6561
// ComExitBuilding ( ru_engs [ i ] ) else
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 122
6559: GO 6630
// if not HasTask ( ru_engs [ i ] ) then
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 314
6576: NOT
6577: IFFALSE 6630
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6579: LD_VAR 0 9
6583: PUSH
6584: LD_VAR 0 12
6588: ARRAY
6589: PPUSH
6590: LD_EXP 26
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: PPUSH
6599: LD_EXP 26
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: LD_EXP 26
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: LD_EXP 26
6621: PUSH
6622: LD_INT 4
6624: ARRAY
6625: PPUSH
6626: CALL_OW 145
// end ;
6630: GO 6524
6632: POP
6633: POP
// end ; end ; end ; end ;
6634: PPOPN 17
6636: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 20 do
6637: LD_EXP 2
6641: PUSH
6642: LD_INT 11
6644: PPUSH
6645: CALL_OW 435
6649: PUSH
6650: LD_INT 20
6652: LESS
6653: AND
6654: IFFALSE 6717
6656: GO 6658
6658: DISABLE
// begin enable ;
6659: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6660: LD_INT 1
6662: PPUSH
6663: LD_INT 5
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: LD_INT 11
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6681: LD_INT 1505
6683: PPUSH
6684: LD_INT 2100
6686: PPUSH
6687: CALL_OW 12
6691: PPUSH
6692: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 5
6701: PPUSH
6702: CALL_OW 12
6706: PPUSH
6707: LD_INT 11
6709: PPUSH
6710: LD_INT 1
6712: PPUSH
6713: CALL_OW 55
// end ;
6717: END
// every 15 15$00 + 25 25$00 trigger ru_sib_bomb = false do var i , tmp ;
6718: LD_EXP 4
6722: PUSH
6723: LD_INT 0
6725: EQUAL
6726: IFFALSE 6841
6728: GO 6730
6730: DISABLE
6731: LD_INT 0
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// i := Rand ( 0 , 100 ) ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 0
6743: PPUSH
6744: LD_INT 100
6746: PPUSH
6747: CALL_OW 12
6751: ST_TO_ADDR
// case your_side of 1 :
6752: LD_OWVAR 2
6756: PUSH
6757: LD_INT 1
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 10 ; 2 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 10
6773: ST_TO_ADDR
6774: GO 6815
6776: LD_INT 2
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 0 ; 7 :
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
6793: GO 6815
6795: LD_INT 7
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6814
6803: POP
// tmp := 15 ; end ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_INT 15
6811: ST_TO_ADDR
6812: GO 6815
6814: POP
// if i < chance_to_bomb + tmp then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_EXP 5
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: LESS
6831: IFFALSE 6841
// ru_sib_bomb := true ;
6833: LD_ADDR_EXP 4
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: PPOPN 2
6843: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6844: LD_INT 22
6846: PUSH
6847: LD_OWVAR 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IFFALSE 6887
6876: GO 6878
6878: DISABLE
// begin ru_sib_bomb := true ;
6879: LD_ADDR_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// end ;
6887: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6888: LD_INT 22
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 34
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IFFALSE 7015
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin enable ;
6924: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 2
6945: PPUSH
6946: CALL_OW 12
6950: ARRAY
6951: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6952: LD_INT 22
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PPUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_VAR 0 1
6994: ARRAY
6995: PPUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: CALL_OW 243
// end ; end_of_file
7015: PPOPN 1
7017: END
// export function RemoveLegion ; var i ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7022: LD_ADDR_VAR 0 2
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7056
// RemoveUnit ( i ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL_OW 64
7054: GO 7042
7056: POP
7057: POP
// end ;
7058: LD_VAR 0 1
7062: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , p , l_depot , l_factory , l_lab , l_towers ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 8
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 30
7181: PUSH
7182: LD_INT 8
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7207: LD_ADDR_VAR 0 10
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 8
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 30
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// uc_side := 8 ;
7241: LD_ADDR_OWVAR 20
7245: PUSH
7246: LD_INT 8
7248: ST_TO_ADDR
// uc_nation := nation_arabian ;
7249: LD_ADDR_OWVAR 21
7253: PUSH
7254: LD_INT 2
7256: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_OWVAR 67
7280: ARRAY
7281: ST_TO_ADDR
// legion_blist := [ ] ;
7282: LD_ADDR_EXP 34
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// legion_vlist := [ ] ;
7289: LD_ADDR_EXP 35
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// legion_force := [ ] ;
7296: LD_ADDR_EXP 31
7300: PUSH
7301: EMPTY
7302: ST_TO_ADDR
// legion_enemy := - 1 ;
7303: LD_ADDR_EXP 36
7307: PUSH
7308: LD_INT 1
7310: NEG
7311: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 274
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 10000
7327: PPUSH
7328: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7332: LD_VAR 0 7
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 1000
7347: PPUSH
7348: CALL_OW 277
// for i = 1 to l_towers do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_VAR 0 10
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7417
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_EXP 32
7380: PPUSH
7381: CALL_OW 380
// un := CreateHuman ;
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: PPUSH
7411: CALL_OW 52
// end ;
7415: GO 7367
7417: POP
7418: POP
// for i = 1 to 4 do
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 4
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7526
// for p = 1 to 2 do
7435: LD_ADDR_VAR 0 6
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 2
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7522
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7451: LD_INT 0
7453: PPUSH
7454: LD_INT 8
7456: PPUSH
7457: LD_EXP 32
7461: PPUSH
7462: CALL_OW 380
// un := CreateHuman ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_VAR 0 6
7514: ARRAY
7515: PPUSH
7516: CALL_OW 52
// end ;
7520: GO 7448
7522: POP
7523: POP
7524: GO 7432
7526: POP
7527: POP
// for i = 1 to 4 do
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: DOUBLE
7534: LD_INT 1
7536: DEC
7537: ST_TO_ADDR
7538: LD_INT 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7585
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 4
7549: PPUSH
7550: LD_EXP 32
7554: PPUSH
7555: CALL_OW 380
// un := CreateHuman ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 52
// end ;
7583: GO 7541
7585: POP
7586: POP
// for i = 1 to 6 do
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 6
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7644
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_EXP 32
7613: PPUSH
7614: CALL_OW 380
// un := CreateHuman ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: CALL_OW 44
7627: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 8
7637: PPUSH
7638: CALL_OW 52
// end ;
7642: GO 7600
7644: POP
7645: POP
// for i = 1 to 5 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 5
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7703
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7662: LD_INT 0
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_EXP 32
7672: PPUSH
7673: CALL_OW 380
// un := CreateHuman ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: CALL_OW 44
7686: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 7
7696: PPUSH
7697: CALL_OW 52
// end ;
7701: GO 7659
7703: POP
7704: POP
// tmp := RandPointsFromArea ( 199 , 134 , 216 , 141 , 6 ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 199
7712: PPUSH
7713: LD_INT 134
7715: PPUSH
7716: LD_INT 216
7718: PPUSH
7719: LD_INT 141
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: CALL 1562 0 5
7729: ST_TO_ADDR
// p := 1 ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// for i = 1 to 3 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 3
7750: PUSH
7751: FOR_TO
7752: IFFALSE 8005
// begin vc_chassis := ar_half_tracked ;
7754: LD_ADDR_OWVAR 37
7758: PUSH
7759: LD_INT 14
7761: ST_TO_ADDR
// vc_engine := engine_siberite ;
7762: LD_ADDR_OWVAR 39
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// vc_control := control_manual ;
7770: LD_ADDR_OWVAR 38
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_INT 31
7785: ST_TO_ADDR
// veh := CreateVehicle ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: CALL_OW 45
7795: ST_TO_ADDR
// if HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 4
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: PPUSH
7822: CALL_OW 428
7826: PUSH
7827: LD_INT 0
7829: EQUAL
7830: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) else
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_VAR 0 4
7841: PUSH
7842: LD_VAR 0 6
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 4
7852: PUSH
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: ARRAY
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: CALL_OW 48
7870: GO 7960
// begin repeat p := p + 2 ;
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 2
7884: PLUS
7885: ST_TO_ADDR
// until HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 ;
7886: LD_VAR 0 4
7890: PUSH
7891: LD_VAR 0 6
7895: ARRAY
7896: PPUSH
7897: LD_VAR 0 4
7901: PUSH
7902: LD_VAR 0 6
7906: PUSH
7907: LD_INT 1
7909: PLUS
7910: ARRAY
7911: PPUSH
7912: CALL_OW 428
7916: PUSH
7917: LD_INT 0
7919: EQUAL
7920: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_VAR 0 4
7931: PUSH
7932: LD_VAR 0 6
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ARRAY
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// end ; PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 3
7965: PPUSH
7966: LD_EXP 32
7970: PUSH
7971: LD_INT 1
7973: PLUS
7974: PPUSH
7975: CALL_OW 380
// un := CreateHuman ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: CALL_OW 44
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 52
// end ;
8003: GO 7751
8005: POP
8006: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8007: LD_INT 198
8009: PPUSH
8010: LD_INT 94
8012: PPUSH
8013: LD_INT 8
8015: PPUSH
8016: LD_INT 10
8018: PPUSH
8019: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8023: LD_INT 167
8025: PPUSH
8026: LD_INT 130
8028: PPUSH
8029: LD_INT 8
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 330
// legion_mines := [ ] ;
8039: LD_ADDR_EXP 33
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// legion_mines := RandPointsFromArea ( 176 , 122 , 188 , 126 , 6 ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_INT 176
8053: PPUSH
8054: LD_INT 122
8056: PPUSH
8057: LD_INT 188
8059: PPUSH
8060: LD_INT 126
8062: PPUSH
8063: LD_INT 6
8065: PPUSH
8066: CALL 1562 0 5
8070: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 197 , 91 , 205 , 96 , 4 ) ;
8071: LD_ADDR_EXP 33
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 197
8083: PPUSH
8084: LD_INT 91
8086: PPUSH
8087: LD_INT 205
8089: PPUSH
8090: LD_INT 96
8092: PPUSH
8093: LD_INT 4
8095: PPUSH
8096: CALL 1562 0 5
8100: ADD
8101: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 184 , 151 , 178 , 130 , 9 ) ;
8102: LD_ADDR_EXP 33
8106: PUSH
8107: LD_EXP 33
8111: PUSH
8112: LD_INT 184
8114: PPUSH
8115: LD_INT 151
8117: PPUSH
8118: LD_INT 178
8120: PPUSH
8121: LD_INT 130
8123: PPUSH
8124: LD_INT 9
8126: PPUSH
8127: CALL 1562 0 5
8131: ADD
8132: ST_TO_ADDR
// if Difficulty > 1 then
8133: LD_OWVAR 67
8137: PUSH
8138: LD_INT 1
8140: GREATER
8141: IFFALSE 8174
// legion_mines := legion_mines ^ RandPointsFromArea ( 166 , 126 , 181 , 136 , 5 ) ;
8143: LD_ADDR_EXP 33
8147: PUSH
8148: LD_EXP 33
8152: PUSH
8153: LD_INT 166
8155: PPUSH
8156: LD_INT 126
8158: PPUSH
8159: LD_INT 181
8161: PPUSH
8162: LD_INT 136
8164: PPUSH
8165: LD_INT 5
8167: PPUSH
8168: CALL 1562 0 5
8172: ADD
8173: ST_TO_ADDR
// p := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// for i = 1 to 24 do
8182: LD_ADDR_VAR 0 3
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_INT 24
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8250
// begin PlaceMine ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 , 0 ) ;
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 6
8207: ARRAY
8208: PPUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 1
8221: PLUS
8222: ARRAY
8223: PPUSH
8224: LD_INT 8
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 454
// p := p + 2 ;
8234: LD_ADDR_VAR 0 6
8238: PUSH
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 2
8246: PLUS
8247: ST_TO_ADDR
// end ;
8248: GO 8195
8250: POP
8251: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8252: LD_ADDR_EXP 35
8256: PUSH
8257: LD_INT 13
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 1
8279: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8280: LD_INT 22
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: LD_INT 0
8297: GREATER
8298: IFFALSE 10484
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin enable ;
8322: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 30
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 30
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8399: LD_ADDR_VAR 0 10
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 6
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8489: LD_ADDR_VAR 0 16
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8523: LD_ADDR_VAR 0 15
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8591: LD_ADDR_VAR 0 13
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 25
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if l_eng then
8625: LD_VAR 0 16
8629: IFFALSE 9044
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 1000
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 72
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8829
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 5
8706: PPUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1000
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: ST_TO_ADDR
// for i = 1 to l_eng do
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 16
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8825
// if IsInUnit ( l_eng [ i ] ) then
8747: LD_VAR 0 16
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PPUSH
8758: CALL_OW 310
8762: IFFALSE 8781
// ComExitBuilding ( l_eng [ i ] ) else
8764: LD_VAR 0 16
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 122
8779: GO 8823
// if not HasTask ( l_eng [ i ] ) then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_VAR 0 2
8790: ARRAY
8791: PPUSH
8792: CALL_OW 314
8796: NOT
8797: IFFALSE 8823
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
8799: LD_VAR 0 16
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 130
8823: GO 8744
8825: POP
8826: POP
// end else
8827: GO 9044
// begin if legion_blist > 0 then
8829: LD_EXP 34
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8966
// begin for i = 1 to l_eng do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 16
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8962
// if IsInUnit ( l_eng [ i ] ) then
8857: LD_VAR 0 16
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: PPUSH
8868: CALL_OW 310
8872: IFFALSE 8891
// ComExitBuilding ( l_eng [ i ] ) else
8874: LD_VAR 0 16
8878: PUSH
8879: LD_VAR 0 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 122
8889: GO 8960
// if not HasTask ( l_eng [ i ] ) then
8891: LD_VAR 0 16
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 314
8906: NOT
8907: IFFALSE 8960
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
8909: LD_VAR 0 16
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PPUSH
8920: LD_EXP 34
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_EXP 34
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PPUSH
8938: LD_EXP 34
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PPUSH
8947: LD_EXP 34
8951: PUSH
8952: LD_INT 4
8954: ARRAY
8955: PPUSH
8956: CALL_OW 145
8960: GO 8854
8962: POP
8963: POP
// end else
8964: GO 9044
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9042
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: NOT
9000: PUSH
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: AND
9018: IFFALSE 9040
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9020: LD_VAR 0 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 120
9040: GO 8981
9042: POP
9043: POP
// end ; end ; if l_factory then
9044: LD_VAR 0 9
9048: IFFALSE 9448
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9050: LD_INT 22
9052: PUSH
9053: LD_INT 8
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: LD_INT 61
9075: PUSH
9076: EMPTY
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 8
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 34
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9250
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9132: LD_INT 22
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 61
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 8
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: CALL_OW 12
9244: ARRAY
9245: PPUSH
9246: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9250: LD_EXP 35
9254: PUSH
9255: LD_INT 0
9257: GREATER
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: AND
9273: IFFALSE 9358
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9275: LD_VAR 0 9
9279: PPUSH
9280: LD_EXP 35
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_EXP 35
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: LD_EXP 35
9302: PUSH
9303: LD_INT 3
9305: ARRAY
9306: PPUSH
9307: LD_EXP 35
9311: PUSH
9312: LD_INT 4
9314: ARRAY
9315: PPUSH
9316: CALL_OW 125
// for i = 1 to 4 do
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9356
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9336: LD_ADDR_EXP 35
9340: PUSH
9341: LD_EXP 35
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 3
9353: ST_TO_ADDR
9354: GO 9333
9356: POP
9357: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9358: LD_VAR 0 11
9362: PPUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_INT 0
9380: GREATER
9381: PUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9448
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9398: LD_VAR 0 11
9402: PPUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 72
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_INT 28
9424: PUSH
9425: LD_INT 27
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: CALL_OW 12
9442: ARRAY
9443: PPUSH
9444: CALL_OW 148
// end ; if legion_enemy > 0 then
9448: LD_EXP 36
9452: PUSH
9453: LD_INT 0
9455: GREATER
9456: IFFALSE 10036
// begin if tick mod 11 11$00 = 0 then
9458: LD_OWVAR 1
9462: PUSH
9463: LD_INT 23100
9465: MOD
9466: PUSH
9467: LD_INT 0
9469: EQUAL
9470: IFFALSE 9720
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9472: LD_ADDR_EXP 35
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ADD
9496: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9497: LD_ADDR_EXP 35
9501: PUSH
9502: LD_EXP 35
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 27
9512: PUSH
9513: LD_INT 29
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ADD
9533: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9534: LD_ADDR_EXP 35
9538: PUSH
9539: LD_EXP 35
9543: PUSH
9544: LD_INT 13
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ADD
9558: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9559: LD_ADDR_EXP 35
9563: PUSH
9564: LD_EXP 35
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 27
9574: PUSH
9575: LD_INT 29
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 12
9593: ARRAY
9594: ADD
9595: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9596: LD_ADDR_EXP 35
9600: PUSH
9601: LD_EXP 35
9605: PUSH
9606: LD_INT 13
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: ADD
9620: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9621: LD_ADDR_EXP 35
9625: PUSH
9626: LD_EXP 35
9630: PUSH
9631: LD_INT 28
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 29
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: ADD
9657: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9658: LD_ADDR_EXP 35
9662: PUSH
9663: LD_EXP 35
9667: PUSH
9668: LD_INT 13
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ADD
9682: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9683: LD_ADDR_EXP 35
9687: PUSH
9688: LD_EXP 35
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 27
9698: PUSH
9699: LD_INT 29
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 12
9717: ARRAY
9718: ADD
9719: ST_TO_ADDR
// end ; if legion_force >= 7 then
9720: LD_EXP 31
9724: PUSH
9725: LD_INT 7
9727: GREATEREQUAL
9728: IFFALSE 9911
// begin for i = 1 to legion_force do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_EXP 31
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9909
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9748: LD_EXP 31
9752: PUSH
9753: LD_VAR 0 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 314
9763: NOT
9764: PUSH
9765: LD_EXP 31
9769: PUSH
9770: LD_VAR 0 2
9774: ARRAY
9775: PPUSH
9776: CALL_OW 110
9780: PUSH
9781: LD_INT 11
9783: NONEQUAL
9784: AND
9785: IFFALSE 9907
// begin case legion_enemy of 1 :
9787: LD_EXP 36
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9824
9800: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
9801: LD_EXP 31
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: PPUSH
9812: LD_INT 142
9814: PPUSH
9815: LD_INT 144
9817: PPUSH
9818: CALL_OW 111
9822: GO 9889
9824: LD_INT 2
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9856
9832: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
9833: LD_EXP 31
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PPUSH
9844: LD_INT 101
9846: PPUSH
9847: LD_INT 34
9849: PPUSH
9850: CALL_OW 111
9854: GO 9889
9856: LD_INT 7
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9888
9864: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
9865: LD_EXP 31
9869: PUSH
9870: LD_VAR 0 2
9874: ARRAY
9875: PPUSH
9876: LD_INT 173
9878: PPUSH
9879: LD_INT 127
9881: PPUSH
9882: CALL_OW 111
9886: GO 9889
9888: POP
// SetTag ( legion_force [ i ] , 11 ) ;
9889: LD_EXP 31
9893: PUSH
9894: LD_VAR 0 2
9898: ARRAY
9899: PPUSH
9900: LD_INT 11
9902: PPUSH
9903: CALL_OW 109
// end ; end ;
9907: GO 9745
9909: POP
9910: POP
// end ; if legion_force then
9911: LD_EXP 31
9915: IFFALSE 10036
// begin tmp := legion_force ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_EXP 31
9926: ST_TO_ADDR
// for i = 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 3
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10034
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 314
9960: NOT
9961: PUSH
9962: LD_EXP 31
9966: PUSH
9967: LD_VAR 0 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 110
9977: PUSH
9978: LD_INT 11
9980: EQUAL
9981: AND
9982: IFFALSE 10032
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
9984: LD_VAR 0 3
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 22
9997: PUSH
9998: LD_EXP 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 74
10027: PPUSH
10028: CALL_OW 115
10032: GO 9942
10034: POP
10035: POP
// end ; end ; p := 1 ;
10036: LD_ADDR_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// for i = 1 to 24 do
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 24
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10188
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
10060: LD_EXP 33
10064: PUSH
10065: LD_VAR 0 6
10069: ARRAY
10070: PPUSH
10071: LD_EXP 33
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ARRAY
10085: PPUSH
10086: CALL_OW 428
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: IFFALSE 10172
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
10096: LD_EXP 33
10100: PUSH
10101: LD_VAR 0 6
10105: ARRAY
10106: PPUSH
10107: LD_EXP 33
10111: PUSH
10112: LD_VAR 0 6
10116: PUSH
10117: LD_INT 1
10119: PLUS
10120: ARRAY
10121: PPUSH
10122: CALL_OW 428
10126: PPUSH
10127: CALL_OW 255
10131: PUSH
10132: LD_EXP 36
10136: EQUAL
10137: IFFALSE 10172
// LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
10139: LD_EXP 33
10143: PUSH
10144: LD_VAR 0 6
10148: ARRAY
10149: PPUSH
10150: LD_EXP 33
10154: PUSH
10155: LD_VAR 0 6
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 8
10167: PPUSH
10168: CALL_OW 456
// p := p + 2 ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 2
10184: PLUS
10185: ST_TO_ADDR
// end ;
10186: GO 10057
10188: POP
10189: POP
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10190: LD_INT 22
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: IFFALSE 10332
// begin if l_cargo = false then
10220: LD_VAR 0 17
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10264
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10230: LD_ADDR_VAR 0 17
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 8
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if l_cargo then
10264: LD_VAR 0 17
10268: IFFALSE 10332
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_INT 14
10277: PPUSH
10278: CALL_OW 435
10282: ST_TO_ADDR
// if cr > 0 then
10283: LD_VAR 0 7
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10332
// if not HasTask ( l_cargo ) then
10293: LD_VAR 0 17
10297: PPUSH
10298: CALL_OW 314
10302: NOT
10303: IFFALSE 10332
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10305: LD_VAR 0 17
10309: PPUSH
10310: LD_VAR 0 7
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_VAR 0 7
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: CALL_OW 117
// end ; end ; if tick = [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] and FindArtifact ( 1 ) [ 1 ] = 112 and FindArtifact ( 1 ) [ 2 ] = 67 then
10332: LD_OWVAR 1
10336: PUSH
10337: LD_INT 52500
10339: PUSH
10340: LD_INT 46200
10342: PUSH
10343: LD_INT 42000
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: LD_OWVAR 67
10355: ARRAY
10356: EQUAL
10357: PUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 469
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PUSH
10370: LD_INT 112
10372: EQUAL
10373: AND
10374: PUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 469
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PUSH
10387: LD_INT 67
10389: EQUAL
10390: AND
10391: IFFALSE 10484
// begin un := l_eng [ 1 ] ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: ST_TO_ADDR
// if IsInUnit ( un ) then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 310
10416: IFFALSE 10427
// ComExitBuilding ( un ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 122
// AddComCollect ( un , FindArtifact ( 1 ) [ 1 ] , FindArtifact ( 1 ) [ 2 ] ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 469
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 469
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 207
10467: PPUSH
10468: LD_INT 123
10470: PPUSH
10471: CALL_OW 171
// AddComUnload ( un ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 219
// end ; end ;
10484: PPOPN 17
10486: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10487: LD_OWVAR 67
10491: PUSH
10492: LD_INT 1
10494: GREATER
10495: IFFALSE 10700
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10506: LD_INT 35
10508: PPUSH
10509: LD_INT 12635
10511: PPUSH
10512: CALL_OW 12
10516: PPUSH
10517: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// p := 1 ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 139
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 13
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// for i = 1 to 2 do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_INT 2
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10698
// begin if IsInUnit ( sci [ i ] ) then
10602: LD_VAR 0 2
10606: PUSH
10607: LD_VAR 0 1
10611: ARRAY
10612: PPUSH
10613: CALL_OW 310
10617: IFFALSE 10634
// ComExitBuilding ( sci [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// Wait ( 0 0$03 ) ;
10634: LD_INT 105
10636: PPUSH
10637: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10641: LD_VAR 0 2
10645: PUSH
10646: LD_VAR 0 1
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 3
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ARRAY
10677: PPUSH
10678: CALL_OW 158
// p := p + 2 ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 2
10694: PLUS
10695: ST_TO_ADDR
// end ;
10696: GO 10599
10698: POP
10699: POP
// end ;
10700: PPOPN 4
10702: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10703: LD_INT 14
10705: PPUSH
10706: CALL_OW 435
10710: PUSH
10711: LD_INT 20
10713: LESS
10714: IFFALSE 10741
10716: GO 10718
10718: DISABLE
// begin enable ;
10719: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10720: LD_INT 1
10722: PPUSH
10723: LD_INT 5
10725: PPUSH
10726: CALL_OW 12
10730: PPUSH
10731: LD_INT 14
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 55
// end ; end_of_file
10741: END
// export function Action ; var un , gamemode , speaker ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10748: LD_ADDR_OWVAR 67
10752: PUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 426
10760: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 426
10773: ST_TO_ADDR
// if gamemode = 1 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 1
10781: EQUAL
10782: IFFALSE 10806
// begin your_side := 1 ;
10784: LD_ADDR_OWVAR 2
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// legion_enemy := 1 ;
10792: LD_ADDR_EXP 36
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// PrepareAmerican ;
10800: CALL 221 0 0
// end else
10804: GO 10858
// if gamemode = 2 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: IFFALSE 10838
// begin your_side := 2 ;
10816: LD_ADDR_OWVAR 2
10820: PUSH
10821: LD_INT 2
10823: ST_TO_ADDR
// legion_enemy := 2 ;
10824: LD_ADDR_EXP 36
10828: PUSH
10829: LD_INT 2
10831: ST_TO_ADDR
// PrepareArabian ;
10832: CALL 18169 0 0
// end else
10836: GO 10858
// begin your_side := 7 ;
10838: LD_ADDR_OWVAR 2
10842: PUSH
10843: LD_INT 7
10845: ST_TO_ADDR
// legion_enemy := 7 ;
10846: LD_ADDR_EXP 36
10850: PUSH
10851: LD_INT 7
10853: ST_TO_ADDR
// PrepareAlliance ;
10854: CALL 15580 0 0
// end ; if your_side = 1 then
10858: LD_OWVAR 2
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 11344
// begin case Query ( QVul4 ) of 1 :
10868: LD_STRING QVul4
10870: PPUSH
10871: CALL_OW 97
10875: PUSH
10876: LD_INT 1
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10892: LD_INT 8
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 86
// uc_side := 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation := 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_importance := 0 ;
10918: LD_ADDR_OWVAR 32
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_EXP 21
10936: PPUSH
10937: CALL_OW 380
// un := CreateHuman ;
10941: LD_ADDR_VAR 0 2
10945: PUSH
10946: CALL_OW 44
10950: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_INT 12
10958: PPUSH
10959: LD_INT 9
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 48
// hc_name := Stuart Carey ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING Stuart Carey
10976: ST_TO_ADDR
// hc_class := 1 ;
10977: LD_ADDR_OWVAR 28
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// hc_gallery := vulcano ;
10985: LD_ADDR_OWVAR 33
10989: PUSH
10990: LD_STRING vulcano
10992: ST_TO_ADDR
// hc_face_number := 1 ;
10993: LD_ADDR_OWVAR 34
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// us_guy := CreateHuman ;
11001: LD_ADDR_EXP 22
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// InitHc ;
11011: CALL_OW 19
// if rand ( 0 , 1 ) then
11015: LD_INT 0
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 12
11025: IFFALSE 11042
// PrepareHuman ( sex_male , 3 , 6 ) else
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 3
11032: PPUSH
11033: LD_INT 6
11035: PPUSH
11036: CALL_OW 380
11040: GO 11055
// PrepareHuman ( sex_female , 4 , 8 ) ;
11042: LD_INT 2
11044: PPUSH
11045: LD_INT 4
11047: PPUSH
11048: LD_INT 8
11050: PPUSH
11051: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_EXP 19
11064: PPUSH
11065: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11069: LD_EXP 19
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 119
// if GetSex ( un ) = sex_male then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 258
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11179
// begin Say ( un , VD-un1 ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_STRING VD-un1
11105: PPUSH
11106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11110: LD_EXP 19
11114: PPUSH
11115: LD_STRING VDc-1
11117: PPUSH
11118: CALL_OW 88
// Say ( un , VD-un2 ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_STRING VD-un2
11129: PPUSH
11130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11134: LD_EXP 19
11138: PPUSH
11139: LD_STRING VDc-2
11141: PPUSH
11142: CALL_OW 88
// Say ( un , VD-un3 ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_STRING VD-un3
11153: PPUSH
11154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11158: LD_INT 7
11160: PPUSH
11161: CALL_OW 67
// Say ( un , VD-un4 ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_STRING VD-un4
11172: PPUSH
11173: CALL_OW 88
// end else
11177: GO 11258
// begin Say ( un , VD-unf1 ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_STRING VD-unf1
11186: PPUSH
11187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11191: LD_EXP 19
11195: PPUSH
11196: LD_STRING VDc-1
11198: PPUSH
11199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_STRING VD-unf2
11210: PPUSH
11211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11215: LD_EXP 19
11219: PPUSH
11220: LD_STRING VDc-2
11222: PPUSH
11223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING VD-unf3
11234: PPUSH
11235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11239: LD_INT 7
11241: PPUSH
11242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_STRING VD-unf4
11253: PPUSH
11254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11273: LD_EXP 19
11277: PPUSH
11278: LD_STRING VDc-3
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11289: LD_STRING CVulc1
11291: PPUSH
11292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL_OW 250
11312: PUSH
11313: LD_INT 2
11315: EQUAL
11316: PUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 251
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: AND
11331: IFFALSE 11296
// RemoveUnit ( un ) ;
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 64
// end else
11342: GO 11721
// if your_side = 2 then
11344: LD_OWVAR 2
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: IFFALSE 11568
// begin CenterNowOnUnits ( player_commander ) ;
11354: LD_EXP 10
11358: PPUSH
11359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PUSH
11397: LD_EXP 51
11401: DIFF
11402: ST_TO_ADDR
// if speaker then
11403: LD_VAR 0 4
11407: IFFALSE 11559
// begin InGameOn ;
11409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11413: LD_EXP 51
11417: PPUSH
11418: LD_STRING VSd-1
11420: PPUSH
11421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11425: LD_VAR 0 4
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: CALL_OW 258
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11462
// Say ( speaker [ 1 ] , VAd-1 ) else
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_STRING VAd-1
11455: PPUSH
11456: CALL_OW 88
11460: GO 11478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 1
11469: ARRAY
11470: PPUSH
11471: LD_STRING VAfd-1
11473: PPUSH
11474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11478: LD_EXP 51
11482: PPUSH
11483: LD_STRING VSd-2
11485: PPUSH
11486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 258
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11527
// Say ( speaker [ 1 ] , VAd-2 ) else
11509: LD_VAR 0 4
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_STRING VAd-2
11520: PPUSH
11521: CALL_OW 88
11525: GO 11543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11527: LD_VAR 0 4
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_STRING VAfd-2
11538: PPUSH
11539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11543: LD_EXP 51
11547: PPUSH
11548: LD_STRING VSd-3
11550: PPUSH
11551: CALL_OW 88
// InGameOff ;
11555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11559: LD_STRING CVulc5
11561: PPUSH
11562: CALL_OW 337
// end else
11566: GO 11721
// if your_side = 7 then
11568: LD_OWVAR 2
11572: PUSH
11573: LD_INT 7
11575: EQUAL
11576: IFFALSE 11721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 7
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 37
11616: DIFF
11617: ST_TO_ADDR
// if speaker then
11618: LD_VAR 0 4
11622: IFFALSE 11714
// begin CenterNowOnUnits ( al_commander ) ;
11624: LD_EXP 37
11628: PPUSH
11629: CALL_OW 87
// InGameOn ;
11633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11637: LD_EXP 37
11641: PPUSH
11642: LD_STRING VPd-1
11644: PPUSH
11645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 258
11662: IFFALSE 11682
// Say ( speaker [ 1 ] , VPpd-1 ) else
11664: LD_VAR 0 4
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PPUSH
11673: LD_STRING VPpd-1
11675: PPUSH
11676: CALL_OW 88
11680: GO 11698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: LD_STRING VPpdf-1
11693: PPUSH
11694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11698: LD_EXP 37
11702: PPUSH
11703: LD_STRING VPd-2
11705: PPUSH
11706: CALL_OW 88
// InGameOff ;
11710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11714: LD_STRING CVulc7
11716: PPUSH
11717: CALL_OW 337
// end ; SaveForQuickRestart ;
11721: CALL_OW 22
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11730: LD_INT 22
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: IFFALSE 11802
11760: GO 11762
11762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11763: LD_STRING CVulc6
11765: PPUSH
11766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11770: LD_INT 52500
11772: PUSH
11773: LD_INT 47250
11775: PUSH
11776: LD_INT 42000
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL_OW 67
// ru_can_attack := true ;
11794: LD_ADDR_EXP 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11803: LD_INT 50
11805: PPUSH
11806: CALL_OW 255
11810: PUSH
11811: LD_INT 1
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: OR
11862: IFFALSE 12096
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11870: LD_STRING CVulc2
11872: PPUSH
11873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PUSH
11911: LD_EXP 19
11915: DIFF
11916: ST_TO_ADDR
// DialogueOn ;
11917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 258
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: IFFALSE 11965
// Say ( speaker [ 1 ] , VDb-1 ) else
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_STRING VDb-1
11958: PPUSH
11959: CALL_OW 88
11963: GO 11981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_STRING VDbf-1
11976: PPUSH
11977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11981: LD_INT 10
11983: PPUSH
11984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 258
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: IFFALSE 12025
// Say ( speaker [ 1 ] , VDb-2 ) else
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_STRING VDb-2
12018: PPUSH
12019: CALL_OW 88
12023: GO 12041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_STRING VDbf-2
12036: PPUSH
12037: CALL_OW 88
// DWait ( 0 0$01 ) ;
12041: LD_INT 35
12043: PPUSH
12044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12048: LD_EXP 19
12052: PPUSH
12053: LD_STRING VDb-com1
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12064: LD_INT 44100
12066: PUSH
12067: LD_INT 36750
12069: PUSH
12070: LD_INT 31500
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_OWVAR 67
12082: ARRAY
12083: PPUSH
12084: CALL_OW 67
// ru_can_attack := true ;
12088: LD_ADDR_EXP 3
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// end ;
12096: PPOPN 1
12098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12099: LD_INT 22
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: IFFALSE 12164
12129: GO 12131
12131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12132: LD_INT 42000
12134: PUSH
12135: LD_INT 34650
12137: PUSH
12138: LD_INT 29400
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_OWVAR 67
12150: ARRAY
12151: PPUSH
12152: CALL_OW 67
// ru_can_attack := true ;
12156: LD_ADDR_EXP 3
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// end ;
12164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 255
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12383
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: ST_TO_ADDR
// DialogueOn ;
12218: CALL_OW 6
// if speaker then
12222: LD_VAR 0 1
12226: IFFALSE 12281
// if GetSex ( speaker [ 1 ] ) = sex_male then
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 258
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12265
// Say ( speaker [ 1 ] , VDe-1 ) else
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_STRING VDe-1
12258: PPUSH
12259: CALL_OW 88
12263: GO 12281
// Say ( speaker [ 1 ] , VDef-1 ) ;
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING VDef-1
12276: PPUSH
12277: CALL_OW 88
// case Query ( SibNote ) of 1 :
12281: LD_STRING SibNote
12283: PPUSH
12284: CALL_OW 97
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12300
12297: POP
// ; end ;
12298: GO 12301
12300: POP
// if speaker then
12301: LD_VAR 0 1
12305: IFFALSE 12360
// if GetSex ( speaker [ 1 ] ) = sex_male then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 258
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12344
// Say ( speaker [ 1 ] , VDe-2 ) else
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_STRING VDe-2
12337: PPUSH
12338: CALL_OW 88
12342: GO 12360
// Say ( speaker [ 1 ] , VDef-2 ) ;
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: LD_STRING VDef-2
12355: PPUSH
12356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12360: LD_EXP 19
12364: PPUSH
12365: LD_STRING VDc-4
12367: PPUSH
12368: CALL_OW 88
// DialogueOff ;
12372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12376: LD_STRING CVulc3
12378: PPUSH
12379: CALL_OW 337
// end ;
12383: PPOPN 1
12385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12386: LD_OWVAR 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PUSH
12424: LD_INT 0
12426: GREATER
12427: AND
12428: IFFALSE 12862
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12438: LD_INT 245
12440: PPUSH
12441: LD_INT 1295
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING VDG-1
12464: PPUSH
12465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12469: LD_EXP 19
12473: PPUSH
12474: LD_STRING VDc-5
12476: PPUSH
12477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12481: LD_EXP 22
12485: PPUSH
12486: LD_STRING VDG-2
12488: PPUSH
12489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12493: LD_EXP 19
12497: PPUSH
12498: LD_STRING VDc-6
12500: PPUSH
12501: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12505: LD_EXP 22
12509: PPUSH
12510: LD_STRING VDG-3
12512: PPUSH
12513: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12517: LD_EXP 19
12521: PPUSH
12522: LD_STRING VDc-7
12524: PPUSH
12525: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12529: LD_EXP 22
12533: PPUSH
12534: LD_STRING VDG-4
12536: PPUSH
12537: CALL_OW 94
// DialogueOff ;
12541: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12545: LD_STRING CVulc4
12547: PPUSH
12548: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12552: LD_INT 18900
12554: PUSH
12555: LD_INT 21000
12557: PUSH
12558: LD_INT 23100
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_OWVAR 67
12570: ARRAY
12571: PPUSH
12572: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_OWVAR 67
12604: ARRAY
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12851
// begin uc_side := 1 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// uc_nation := 1 ;
12617: LD_ADDR_OWVAR 21
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12625: LD_INT 0
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 4
12633: PPUSH
12634: CALL_OW 12
12638: PPUSH
12639: LD_EXP 21
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: CALL_OW 233
// if GetClass ( un ) = 3 then
12670: LD_VAR 0 2
12674: PPUSH
12675: CALL_OW 257
12679: PUSH
12680: LD_INT 3
12682: EQUAL
12683: IFFALSE 12834
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12685: LD_ADDR_OWVAR 37
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: MOD
12708: ARRAY
12709: ST_TO_ADDR
// vc_engine := engine_combustion ;
12710: LD_ADDR_OWVAR 39
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// vc_control := control_manual ;
12718: LD_ADDR_OWVAR 38
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12726: LD_ADDR_OWVAR 40
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 9
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 12
12759: ARRAY
12760: ST_TO_ADDR
// veh := CreateVehicle ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: CALL_OW 45
12770: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 2
12778: PPUSH
12779: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 77
12790: PPUSH
12791: LD_INT 88
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end else
12832: GO 12849
// PlaceUnitArea ( un , start_north , false ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 49
// end ;
12849: GO 12606
12851: POP
12852: POP
// CenterNowOnUnits ( un ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 87
// end ;
12862: PPOPN 3
12864: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12865: LD_INT 21
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 70
12884: IFFALSE 13205
12886: GO 12888
12888: DISABLE
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 10
12973: DIFF
12974: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 112
12987: PPUSH
12988: LD_INT 67
12990: PPUSH
12991: CALL_OW 73
12995: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 7
13008: EQUAL
13009: IFFALSE 13052
// if GetSex ( un ) = sex_male then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 258
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: IFFALSE 13040
// Say ( un , VD-find-al ) else
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_STRING VD-find-al
13033: PPUSH
13034: CALL_OW 88
13038: GO 13052
// Say ( un , VD-find-al-f ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_STRING VD-find-al-f
13047: PPUSH
13048: CALL_OW 88
// if GetSide ( un ) = 2 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 255
13061: PUSH
13062: LD_INT 2
13064: EQUAL
13065: IFFALSE 13108
// if GetSex ( un ) = sex_male then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 258
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13096
// Say ( un , VD-find-ar ) else
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_STRING VD-find-ar
13089: PPUSH
13090: CALL_OW 88
13094: GO 13108
// Say ( un , VD-find-ar-f ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_STRING VD-find-ar-f
13103: PPUSH
13104: CALL_OW 88
// if GetSide ( un ) = 1 then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13188
// begin if GetSex ( un ) = sex_male then
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 258
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13164
// begin Say ( un , VD-find-us ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_STRING VD-find-us
13145: PPUSH
13146: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_STRING VD-find-us2
13157: PPUSH
13158: CALL_OW 88
// end else
13162: GO 13188
// begin Say ( un , VD-find-us-f ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_STRING VD-find-us-f
13171: PPUSH
13172: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13176: LD_VAR 0 1
13180: PPUSH
13181: LD_STRING VD-find-us2-f
13183: PPUSH
13184: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13188: LD_INT 10
13190: PPUSH
13191: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13195: LD_INT 112
13197: PPUSH
13198: LD_INT 67
13200: PPUSH
13201: CALL_OW 86
// end ;
13205: PPOPN 2
13207: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13208: LD_EXP 7
13212: IFFALSE 13714
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin if your_side = 1 then
13220: LD_OWVAR 2
13224: PUSH
13225: LD_INT 1
13227: EQUAL
13228: IFFALSE 13409
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 4
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: PUSH
13264: LD_EXP 19
13268: DIFF
13269: ST_TO_ADDR
// if not speaker then
13270: LD_VAR 0 1
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 258
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: IFFALSE 13316
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_STRING VD-us-sci-art-1
13309: PPUSH
13310: CALL_OW 88
13314: GO 13332
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING VD-us-fsci-art-1
13327: PPUSH
13328: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13332: LD_EXP 19
13336: PPUSH
13337: LD_STRING VDc-art1
13339: PPUSH
13340: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 258
13357: PUSH
13358: LD_INT 1
13360: EQUAL
13361: IFFALSE 13381
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13363: LD_VAR 0 1
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_STRING VD-us-sci-art-2
13374: PPUSH
13375: CALL_OW 88
13379: GO 13397
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13381: LD_VAR 0 1
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: LD_STRING VD-us-fsci-art-2
13392: PPUSH
13393: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13397: LD_EXP 19
13401: PPUSH
13402: LD_STRING VDc-art2
13404: PPUSH
13405: CALL_OW 88
// end ; if your_side = 2 then
13409: LD_OWVAR 2
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13521
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: LD_EXP 51
13457: DIFF
13458: ST_TO_ADDR
// if not speaker then
13459: LD_VAR 0 1
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 258
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13505
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING VD-ar-sci-art-1
13498: PPUSH
13499: CALL_OW 88
13503: GO 13521
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_STRING VD-ar-fsci-art-1
13516: PPUSH
13517: CALL_OW 88
// end ; if your_side = 7 then
13521: LD_OWVAR 2
13525: PUSH
13526: LD_INT 7
13528: EQUAL
13529: IFFALSE 13714
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 7
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 25
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_EXP 37
13569: DIFF
13570: ST_TO_ADDR
// if speaker then
13571: LD_VAR 0 1
13575: IFFALSE 13707
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 258
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13614
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_STRING VD-al-sci-art-1
13607: PPUSH
13608: CALL_OW 88
13612: GO 13630
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING VD-al-fsci-art-1
13625: PPUSH
13626: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13630: LD_EXP 37
13634: PPUSH
13635: LD_STRING VPd-art-1
13637: PPUSH
13638: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 258
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13679
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13661: LD_VAR 0 1
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_STRING VD-al-sci-art-2
13672: PPUSH
13673: CALL_OW 88
13677: GO 13695
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_STRING VD-al-fsci-art-2
13690: PPUSH
13691: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13695: LD_EXP 37
13699: PPUSH
13700: LD_STRING VPd-art-2
13702: PPUSH
13703: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13707: LD_STRING CVulc7out
13709: PPUSH
13710: CALL_OW 337
// end ; end ;
13714: PPOPN 1
13716: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13717: LD_INT 8
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_OWVAR 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL 2145 0 2
13744: PPUSH
13745: CALL_OW 292
13749: IFFALSE 13892
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin if your_side = 1 then
13757: LD_OWVAR 2
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: IFFALSE 13848
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: PUSH
13787: LD_EXP 19
13791: DIFF
13792: ST_TO_ADDR
// if speaker then
13793: LD_VAR 0 1
13797: IFFALSE 13848
// if GetSex ( speaker [ 1 ] ) then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 258
13812: IFFALSE 13832
// Say ( speaker [ 1 ] , VD-legion-us ) else
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING VD-legion-us
13825: PPUSH
13826: CALL_OW 88
13830: GO 13848
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13832: LD_VAR 0 1
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: LD_STRING VD-legion-us-f
13843: PPUSH
13844: CALL_OW 88
// end ; if your_side = 2 then
13848: LD_OWVAR 2
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13870
// Say ( ar_commander , VD-legion-ar ) ;
13858: LD_EXP 51
13862: PPUSH
13863: LD_STRING VD-legion-ar
13865: PPUSH
13866: CALL_OW 88
// if your_side = 7 then
13870: LD_OWVAR 2
13874: PUSH
13875: LD_INT 7
13877: EQUAL
13878: IFFALSE 13892
// Say ( al_commander , VD-legion-al ) ;
13880: LD_EXP 37
13884: PPUSH
13885: LD_STRING VD-legion-al
13887: PPUSH
13888: CALL_OW 88
// end ;
13892: PPOPN 1
13894: END
// every 0 0$01 trigger mine_vulc do
13895: LD_EXP 12
13899: IFFALSE 13916
13901: GO 13903
13903: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13904: LD_EXP 10
13908: PPUSH
13909: LD_STRING VD-vulc-mines
13911: PPUSH
13912: CALL_OW 88
// end ;
13916: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13917: LD_OWVAR 67
13921: PUSH
13922: LD_INT 1
13924: GREATER
13925: IFFALSE 14044
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 123
13942: PUSH
13943: LD_INT 95
13945: PUSH
13946: LD_INT 119
13948: PUSH
13949: LD_INT 89
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 81
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// p := 1 ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i = 1 to 3 do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14042
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13990: LD_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ARRAY
14015: PPUSH
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 454
// p := p + 2 ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 2
14038: PLUS
14039: ST_TO_ADDR
// end ;
14040: GO 13987
14042: POP
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 1
14054: GREATER
14055: PUSH
14056: LD_INT 22
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 70
14075: AND
14076: IFFALSE 14280
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
// begin enable ;
14086: ENABLE
// p := 1 ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 123
14102: PUSH
14103: LD_INT 95
14105: PUSH
14106: LD_INT 119
14108: PUSH
14109: LD_INT 89
14111: PUSH
14112: LD_INT 115
14114: PUSH
14115: LD_INT 81
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i = 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14278
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14142: LD_VAR 0 3
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: PLUS
14166: ARRAY
14167: PPUSH
14168: CALL_OW 428
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14262
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14178: LD_VAR 0 3
14182: PUSH
14183: LD_VAR 0 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 1
14201: PLUS
14202: ARRAY
14203: PPUSH
14204: CALL_OW 428
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_OWVAR 2
14218: EQUAL
14219: IFFALSE 14262
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14221: LD_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 3
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PLUS
14245: ARRAY
14246: PPUSH
14247: LD_INT 8
14249: PPUSH
14250: CALL_OW 456
// mine_vulc := true ;
14254: LD_ADDR_EXP 12
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// end ; p := p + 2 ;
14262: LD_ADDR_VAR 0 1
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PLUS
14275: ST_TO_ADDR
// end ;
14276: GO 14139
14278: POP
14279: POP
// end ;
14280: PPOPN 3
14282: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14283: LD_INT 22
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: LD_INT 0
14300: EQUAL
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: LD_INT 2
14309: NONEQUAL
14310: AND
14311: IFFALSE 14320
14313: GO 14315
14315: DISABLE
// Win ;
14316: CALL 14377 0 0
14320: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14321: LD_INT 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_INT 0
14356: EQUAL
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: AND
14367: IFFALSE 14376
14369: GO 14371
14371: DISABLE
// Win ;
14372: CALL 14377 0 0
14376: END
// function Win ; var points ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
// case Query ( VulcWin ) of 1 :
14381: LD_STRING VulcWin
14383: PPUSH
14384: CALL_OW 97
14388: PUSH
14389: LD_INT 1
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14400
14397: POP
// ; end ;
14398: GO 14401
14400: POP
// if medal_enabled then
14401: LD_EXP 13
14405: IFFALSE 14419
// AddMedal ( vulc_1 , 1 ) else
14407: LD_STRING vulc_1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 101
14417: GO 14430
// AddMedal ( vulc_1 , - 1 ) ;
14419: LD_STRING vulc_1
14421: PPUSH
14422: LD_INT 1
14424: NEG
14425: PPUSH
14426: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14430: LD_INT 22
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14462
// AddMedal ( vulc_2 , 1 ) else
14450: LD_STRING vulc_2
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 101
14460: GO 14473
// AddMedal ( vulc_2 , - 1 ) ;
14462: LD_STRING vulc_2
14464: PPUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: CALL_OW 101
// points := CalculateCommanderPoints ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: CALL 2266 0 0
14482: ST_TO_ADDR
// if points >= 2000 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_INT 2000
14490: GREATEREQUAL
14491: IFFALSE 14505
// AddMedal ( vulc_3 , 2 ) else
14493: LD_STRING vulc_3
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: CALL_OW 101
14503: GO 14538
// if points >= 0 then
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 0
14512: GREATEREQUAL
14513: IFFALSE 14527
// AddMedal ( vulc_3 , 1 ) else
14515: LD_STRING vulc_3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 101
14525: GO 14538
// AddMedal ( vulc_3 , - 1 ) ;
14527: LD_STRING vulc_3
14529: PPUSH
14530: LD_INT 1
14532: NEG
14533: PPUSH
14534: CALL_OW 101
// GiveMedals ( MAIN ) ;
14538: LD_STRING MAIN
14540: PPUSH
14541: CALL_OW 102
// YouWin ;
14545: CALL_OW 103
// end ; end_of_file
14549: LD_VAR 0 1
14553: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14554: LD_INT 13
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin enable ;
14584: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_INT 13
14592: PPUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14640
// if GetLives ( i ) > 4 then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 256
14620: PUSH
14621: LD_INT 4
14623: GREATER
14624: IFFALSE 14638
// SetLives ( i , 4 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL_OW 234
14638: GO 14608
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_OWVAR 2
14659: EQUAL
14660: IFFALSE 14670
// player_res_art := true ;
14662: LD_ADDR_EXP 6
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// end ;
14670: PPOPN 1
14672: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var x , y , lab ;
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 7
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PUSH
14733: LD_EXP 6
14737: AND
14738: IFFALSE 15093
14740: GO 14742
14742: DISABLE
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin enable ;
14748: ENABLE
// x := FindArtifact ( 1 ) [ 1 ] ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 469
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 469
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_OWVAR 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 73
14862: ST_TO_ADDR
// if player_artifact_ready = false then
14863: LD_EXP 7
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14977
// if GetDistUnitXY ( lab , x , y ) < 6 then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 297
14892: PUSH
14893: LD_INT 6
14895: LESS
14896: IFFALSE 14957
// begin if BuildingStatus ( lab ) = bs_idle then
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 461
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14935
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 468
14933: GO 14955
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14935: LD_OWVAR 2
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 468
// end else
14955: GO 14977
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14957: LD_OWVAR 2
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 468
// if player_artifact_ready then
14977: LD_EXP 7
14981: IFFALSE 15093
// if GetDistUnitXY ( lab , x , y ) < 6 then
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: PUSH
15003: LD_INT 6
15005: LESS
15006: IFFALSE 15071
// begin if BuildingStatus ( lab ) = bs_idle then
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 461
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15047
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15023: LD_OWVAR 2
15027: PPUSH
15028: LD_EXP 8
15032: PPUSH
15033: LD_INT 4
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 468
15045: GO 15069
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15047: LD_OWVAR 2
15051: PPUSH
15052: LD_EXP 8
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: CALL_OW 468
// end else
15069: GO 15093
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_EXP 8
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 468
// end ;
15093: PPOPN 3
15095: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var x , y , i , lab , side ;
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin x := FindArtifact ( 1 ) [ 1 ] ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 469
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 469
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
15137: LD_ADDR_VAR 0 8
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 11
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 6
15200: PPUSH
15201: CALL_OW 73
15205: ST_TO_ADDR
// if icon = art_exp_left then
15206: LD_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15253
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15216: LD_VAR 0 8
15220: PPUSH
15221: LD_EXP 9
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 486
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15233: LD_OWVAR 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: LD_VAR 0 8
15248: PPUSH
15249: CALL_OW 468
// end ; if icon = art_icon then
15253: LD_VAR 0 2
15257: PUSH
15258: LD_EXP 8
15262: EQUAL
15263: IFFALSE 15477
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: IN
15285: IFFALSE 15477
// begin side := GetSide ( cr1 ) ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 255
15301: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15302: LD_INT 22
15304: PUSH
15305: LD_VAR 0 9
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 0
15335: GREATER
15336: IFFALSE 15477
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 30
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 7
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// player_res_art := false ;
15422: LD_ADDR_EXP 6
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15430: LD_OWVAR 2
15434: PPUSH
15435: LD_EXP 8
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 8
15447: PPUSH
15448: CALL_OW 468
// Wait ( time_to_reuse ) ;
15452: LD_EXP 11
15456: PPUSH
15457: CALL_OW 67
// player_res_art := true ;
15461: LD_ADDR_EXP 6
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// medal_enabled := true ;
15469: LD_ADDR_EXP 13
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; end ; end ; end ;
15477: PPOPN 9
15479: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_OWVAR 2
15494: EQUAL
15495: IFFALSE 15532
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 468
// player_artifact_ready := true ;
15517: LD_ADDR_EXP 7
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15525: LD_STRING ArtVulcano
15527: PPUSH
15528: CALL_OW 339
// end ; end ;
15532: PPOPN 1
15534: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15535: LD_OWVAR 2
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 468
// end ; end_of_file
15555: PPOPN 2
15557: END
// every 0 0$01 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// Display_Strings := [ #tick , tick ] ;
15562: LD_ADDR_OWVAR 47
15566: PUSH
15567: LD_STRING #tick
15569: PUSH
15570: LD_OWVAR 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
// end ; end_of_file
15579: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15587: LD_ADDR_EXP 39
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: ST_TO_ADDR
// al_force := [ ] ;
15612: LD_ADDR_EXP 38
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// RemoveAlliance ;
15619: CALL 15997 0 0
// ResetFog ;
15623: CALL_OW 335
// your_side := 7 ;
15627: LD_ADDR_OWVAR 2
15631: PUSH
15632: LD_INT 7
15634: ST_TO_ADDR
// uc_side := 7 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 7
15642: ST_TO_ADDR
// hc_gallery :=  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name :=  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// hc_importance := 0 ;
15659: LD_ADDR_OWVAR 32
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// for i = 1 to 17 do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_INT 17
15679: PUSH
15680: FOR_TO
15681: IFFALSE 15761
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15683: LD_ADDR_OWVAR 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15710: LD_INT 0
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 4
15718: PPUSH
15719: CALL_OW 12
15723: PPUSH
15724: LD_EXP 39
15728: PPUSH
15729: CALL_OW 380
// un := CreateHuman ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: CALL_OW 44
15742: ST_TO_ADDR
// al_force := al_force ^ un ;
15743: LD_ADDR_EXP 38
15747: PUSH
15748: LD_EXP 38
15752: PUSH
15753: LD_VAR 0 4
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15680
15761: POP
15762: POP
// hc_importance := 100 ;
15763: LD_ADDR_OWVAR 32
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// uc_nation := 1 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_EXP 39
15789: PPUSH
15790: CALL_OW 380
// al_commander := CreateHuman ;
15794: LD_ADDR_EXP 37
15798: PUSH
15799: CALL_OW 44
15803: ST_TO_ADDR
// player_commander := al_commander ;
15804: LD_ADDR_EXP 10
15808: PUSH
15809: LD_EXP 37
15813: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_STRING text
15821: PPUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 9
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: LD_OWVAR 67
15840: ARRAY
15841: PPUSH
15842: LD_INT 9
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_OWVAR 67
15860: ARRAY
15861: PPUSH
15862: LD_INT -5
15864: PUSH
15865: LD_EXP 37
15869: PUSH
15870: LD_INT -3
15872: PUSH
15873: LD_INT -2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_EXP 38
15886: ADD
15887: PPUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 42
15932: ST_TO_ADDR
// team := team ^ al_commander ;
15933: LD_ADDR_VAR 0 5
15937: PUSH
15938: LD_VAR 0 5
15942: PUSH
15943: LD_EXP 37
15947: ADD
15948: ST_TO_ADDR
// for i = 1 to team do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 5
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15990
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 15
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 49
15988: GO 15964
15990: POP
15991: POP
// end ;
15992: LD_VAR 0 1
15996: RET
// export function RemoveAlliance ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16001: LD_INT 22
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16072
// RemoveUnit ( i ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 64
16070: GO 16058
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16085: LD_INT 31
16087: PPUSH
16088: LD_INT 7
16090: PPUSH
16091: LD_INT 2
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16098: LD_INT 32
16100: PPUSH
16101: LD_INT 7
16103: PPUSH
16104: LD_INT 2
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16111: LD_INT 59
16113: PPUSH
16114: LD_INT 7
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16124: LD_ADDR_EXP 39
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_OWVAR 67
16147: ARRAY
16148: ST_TO_ADDR
// al_force := [ ] ;
16149: LD_ADDR_EXP 38
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// al_vehs := [ ] ;
16156: LD_ADDR_EXP 44
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// uc_side := 7 ;
16163: LD_ADDR_OWVAR 20
16167: PUSH
16168: LD_INT 7
16170: ST_TO_ADDR
// uc_nation := 1 ;
16171: LD_ADDR_OWVAR 21
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// bc_type := b_oil_mine ;
16179: LD_ADDR_OWVAR 42
16183: PUSH
16184: LD_INT 29
16186: ST_TO_ADDR
// b := CreateBuilding ;
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: CALL_OW 46
16196: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 61
16204: PPUSH
16205: LD_INT 7
16207: PPUSH
16208: LD_INT 0
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 50
// bc_type := b_siberite_mine ;
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 30
16225: ST_TO_ADDR
// b := CreateBuilding ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: CALL_OW 46
16235: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 69
16243: PPUSH
16244: LD_INT 13
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 50
// hc_gallery :=  ;
16257: LD_ADDR_OWVAR 33
16261: PUSH
16262: LD_STRING 
16264: ST_TO_ADDR
// hc_name :=  ;
16265: LD_ADDR_OWVAR 26
16269: PUSH
16270: LD_STRING 
16272: ST_TO_ADDR
// hc_importance := 0 ;
16273: LD_ADDR_OWVAR 32
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_INT 7
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16386
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16318: LD_ADDR_OWVAR 21
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 12
16343: ARRAY
16344: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_EXP 39
16355: PPUSH
16356: CALL_OW 380
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 52
// end ;
16384: GO 16315
16386: POP
16387: POP
// for i = 1 to 3 do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: DOUBLE
16394: LD_INT 1
16396: DEC
16397: ST_TO_ADDR
16398: LD_INT 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16470
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 4
16436: PPUSH
16437: LD_EXP 39
16441: PPUSH
16442: CALL_OW 380
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 164
16463: PPUSH
16464: CALL_OW 52
// end ;
16468: GO 16401
16470: POP
16471: POP
// for i = 1 to 6 do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 6
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16577
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16488: LD_ADDR_OWVAR 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 9
16523: PUSH
16524: LD_INT 9
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 3
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_EXP 39
16548: PPUSH
16549: CALL_OW 380
// un := CreateHuman ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: CALL_OW 44
16562: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 173
16570: PPUSH
16571: CALL_OW 52
// end ;
16575: GO 16485
16577: POP
16578: POP
// for i = 1 to 6 do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_INT 6
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16691
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16595: LD_ADDR_OWVAR 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_EXP 39
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 52
// end ;
16689: GO 16592
16691: POP
16692: POP
// for i = 1 to 4 do
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_INT 4
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16775
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16709: LD_ADDR_OWVAR 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_EXP 39
16746: PPUSH
16747: CALL_OW 380
// un := CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 162
16768: PPUSH
16769: CALL_OW 52
// end ;
16773: GO 16706
16775: POP
16776: POP
// uc_nation := 3 ;
16777: LD_ADDR_OWVAR 21
16781: PUSH
16782: LD_INT 3
16784: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16785: LD_ADDR_OWVAR 37
16789: PUSH
16790: LD_INT 21
16792: ST_TO_ADDR
// vc_engine := engine_siberite ;
16793: LD_ADDR_OWVAR 39
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// vc_control := control_computer ;
16801: LD_ADDR_OWVAR 38
16805: PUSH
16806: LD_INT 3
16808: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16809: LD_ADDR_OWVAR 40
16813: PUSH
16814: LD_INT 51
16816: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16817: CALL_OW 45
16821: PPUSH
16822: LD_INT 49
16824: PPUSH
16825: LD_INT 13
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16835: LD_ADDR_EXP 46
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 33
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 22
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 35
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16983
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16925: LD_INT 22
16927: PUSH
16928: LD_INT 7
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 35
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: PUSH
16968: LD_VAR 0 2
16972: ARRAY
16973: PPUSH
16974: LD_INT 49
16976: PPUSH
16977: CALL_OW 208
16981: GO 16922
16983: POP
16984: POP
// end ;
16985: LD_VAR 0 1
16989: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$01 trigger your_side = 1 do var i , un , veh , cr ;
16990: LD_OWVAR 2
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: IFFALSE 18166
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
// begin enable ;
17009: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17010: LD_ADDR_EXP 50
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 7
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17044: LD_ADDR_EXP 48
17048: PUSH
17049: LD_INT 164
17051: PUSH
17052: LD_INT 197
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17059: LD_ADDR_EXP 47
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17097: LD_ADDR_EXP 49
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 7
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PPUSH
17159: CALL_OW 69
17163: IFFALSE 17203
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17165: LD_ADDR_EXP 45
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 7
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17203: LD_ADDR_EXP 41
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17237: LD_ADDR_EXP 40
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 7
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17271: LD_ADDR_EXP 42
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 7
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 4
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17339: LD_EXP 41
17343: PPUSH
17344: LD_INT 81
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PPUSH
17359: CALL 1663 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17363: LD_EXP 45
17367: PPUSH
17368: CALL_OW 314
17372: NOT
17373: PUSH
17374: LD_EXP 45
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 289
17386: PUSH
17387: LD_INT 100
17389: LESS
17390: AND
17391: IFFALSE 17439
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: LD_INT 12
17400: PPUSH
17401: CALL_OW 435
17405: ST_TO_ADDR
// if cr then
17406: LD_VAR 0 4
17410: IFFALSE 17439
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 4
17430: PUSH
17431: LD_INT 2
17433: ARRAY
17434: PPUSH
17435: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17439: LD_EXP 50
17443: PPUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 1000
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: IFFALSE 17595
// begin if al_eng then
17467: LD_EXP 40
17471: IFFALSE 17593
// for i = 1 to al_eng do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_EXP 40
17487: PUSH
17488: FOR_TO
17489: IFFALSE 17591
// if IsInUnit ( al_eng [ i ] ) then
17491: LD_EXP 40
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17525
// ComExitBuilding ( al_eng [ i ] ) else
17508: LD_EXP 40
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PPUSH
17519: CALL_OW 122
17523: GO 17589
// if not HasTask ( al_eng [ i ] ) then
17525: LD_EXP 40
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: IFFALSE 17589
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17543: LD_EXP 40
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: PPUSH
17554: LD_EXP 50
17558: PPUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 1000
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 130
17589: GO 17488
17591: POP
17592: POP
// end else
17593: GO 17677
// if al_eng then
17595: LD_EXP 40
17599: IFFALSE 17677
// if not IsInUnit ( al_eng [ 1 ] ) then
17601: LD_EXP 40
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 310
17614: NOT
17615: IFFALSE 17677
// for i = 1 to al_eng do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: DOUBLE
17623: LD_INT 1
17625: DEC
17626: ST_TO_ADDR
17627: LD_EXP 40
17631: PUSH
17632: FOR_TO
17633: IFFALSE 17675
// if not IsInUnit ( al_eng [ i ] ) then
17635: LD_EXP 40
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 310
17650: NOT
17651: IFFALSE 17673
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_EXP 47
17668: PPUSH
17669: CALL_OW 120
17673: GO 17632
17675: POP
17676: POP
// if al_vehs then
17677: LD_EXP 44
17681: IFFALSE 17781
// if BuildingStatus ( al_fac ) = bs_idle then
17683: LD_EXP 49
17687: PPUSH
17688: CALL_OW 461
17692: PUSH
17693: LD_INT 2
17695: EQUAL
17696: IFFALSE 17781
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17698: LD_EXP 49
17702: PPUSH
17703: LD_EXP 44
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_EXP 44
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_EXP 44
17725: PUSH
17726: LD_INT 3
17728: ARRAY
17729: PPUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_INT 4
17737: ARRAY
17738: PPUSH
17739: CALL_OW 125
// for i = 1 to 4 do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_INT 4
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17779
// al_vehs := Delete ( al_vehs , 1 ) ;
17759: LD_ADDR_EXP 44
17763: PUSH
17764: LD_EXP 44
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 3
17776: ST_TO_ADDR
17777: GO 17756
17779: POP
17780: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17781: LD_EXP 38
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_OWVAR 1
17794: PUSH
17795: LD_INT 23100
17797: MOD
17798: PUSH
17799: LD_INT 0
17801: EQUAL
17802: AND
17803: IFFALSE 17917
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17915
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17838: LD_ADDR_EXP 44
17842: PUSH
17843: LD_EXP 44
17847: PUSH
17848: LD_INT 23
17850: ADD
17851: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17852: LD_ADDR_EXP 44
17856: PUSH
17857: LD_EXP 44
17861: PUSH
17862: LD_INT 1
17864: ADD
17865: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17866: LD_ADDR_EXP 44
17870: PUSH
17871: LD_EXP 44
17875: PUSH
17876: LD_INT 3
17878: ADD
17879: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17880: LD_ADDR_EXP 44
17884: PUSH
17885: LD_EXP 44
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 47
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ADD
17912: ST_TO_ADDR
// end ;
17913: GO 17835
17915: POP
17916: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17917: LD_INT 22
17919: PUSH
17920: LD_INT 7
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 51
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17972
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17951: LD_EXP 49
17955: PPUSH
17956: LD_INT 21
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 51
17967: PPUSH
17968: CALL_OW 125
// if al_force and tick mod 25200 = 0 then
17972: LD_EXP 38
17976: PUSH
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 25200
17984: MOD
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18053
// begin for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 38
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18051
// if GetTag ( al_force [ i ] ) <> 11 then
18010: LD_EXP 38
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: NONEQUAL
18029: IFFALSE 18049
// SetTag ( al_force [ i ] , 11 ) ;
18031: LD_EXP 38
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_INT 11
18044: PPUSH
18045: CALL_OW 109
18049: GO 18007
18051: POP
18052: POP
// end ; if al_force then
18053: LD_EXP 38
18057: IFFALSE 18166
// for i = 1 to al_force do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 38
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18164
// begin if GetTag ( al_force [ i ] ) = 11 then
18077: LD_EXP 38
18081: PUSH
18082: LD_VAR 0 1
18086: ARRAY
18087: PPUSH
18088: CALL_OW 110
18092: PUSH
18093: LD_INT 11
18095: EQUAL
18096: IFFALSE 18162
// begin if not HasTask ( al_force [ i ] ) then
18098: LD_EXP 38
18102: PUSH
18103: LD_VAR 0 1
18107: ARRAY
18108: PPUSH
18109: CALL_OW 314
18113: NOT
18114: IFFALSE 18162
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18116: LD_EXP 38
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_EXP 38
18146: PUSH
18147: LD_VAR 0 1
18151: ARRAY
18152: PPUSH
18153: CALL_OW 74
18157: PPUSH
18158: CALL_OW 115
// end ; end ;
18162: GO 18074
18164: POP
18165: POP
// end ; end_of_file
18166: PPOPN 4
18168: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18176: LD_ADDR_EXP 53
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 7
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_OWVAR 67
18199: ARRAY
18200: ST_TO_ADDR
// ar_force := [ ] ;
18201: LD_ADDR_EXP 52
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// RemoveAlliance ;
18208: CALL 15997 0 0
// RemoveEnvironmentArea ( evn ) ;
18212: LD_INT 17
18214: PPUSH
18215: CALL_OW 355
// your_side := 2 ;
18219: LD_ADDR_OWVAR 2
18223: PUSH
18224: LD_INT 2
18226: ST_TO_ADDR
// uc_side := 2 ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_INT 2
18234: ST_TO_ADDR
// uc_nation := nation_arabian ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_INT 2
18242: ST_TO_ADDR
// hc_gallery :=  ;
18243: LD_ADDR_OWVAR 33
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// hc_name :=  ;
18251: LD_ADDR_OWVAR 26
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hc_importance := 0 ;
18259: LD_ADDR_OWVAR 32
18263: PUSH
18264: LD_INT 0
18266: ST_TO_ADDR
// for i = 1 to 20 do
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 20
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18346
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18283: LD_INT 0
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: LD_INT 4
18291: PPUSH
18292: CALL_OW 12
18296: PPUSH
18297: LD_EXP 53
18301: PPUSH
18302: CALL_OW 380
// un := CreateHuman ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: CALL_OW 44
18315: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 233
// ar_force := ar_force ^ un ;
18328: LD_ADDR_EXP 52
18332: PUSH
18333: LD_EXP 52
18337: PUSH
18338: LD_VAR 0 4
18342: ADD
18343: ST_TO_ADDR
// end ;
18344: GO 18280
18346: POP
18347: POP
// hc_importance := 100 ;
18348: LD_ADDR_OWVAR 32
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 11
18361: PPUSH
18362: LD_EXP 53
18366: PPUSH
18367: CALL_OW 380
// ar_commander := CreateHuman ;
18371: LD_ADDR_EXP 51
18375: PUSH
18376: CALL_OW 44
18380: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18381: LD_EXP 51
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 233
// player_commander := ar_commander ;
18393: LD_ADDR_EXP 10
18397: PUSH
18398: LD_EXP 51
18402: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_STRING text
18410: PPUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: PPUSH
18431: LD_INT 14
18433: PUSH
18434: LD_INT 13
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_OWVAR 67
18449: ARRAY
18450: PPUSH
18451: LD_INT -5
18453: PUSH
18454: LD_EXP 51
18458: PUSH
18459: LD_INT -3
18461: PUSH
18462: LD_INT -2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_EXP 52
18475: ADD
18476: PPUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 8
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 42
18517: ST_TO_ADDR
// team := team ^ ar_commander ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_EXP 51
18532: ADD
18533: ST_TO_ADDR
// for i = 1 to team do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_VAR 0 5
18548: PUSH
18549: FOR_TO
18550: IFFALSE 18575
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18552: LD_VAR 0 5
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PPUSH
18563: LD_INT 16
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL_OW 49
18573: GO 18549
18575: POP
18576: POP
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 0 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// vc_chassis := 31 ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 31
18600: ST_TO_ADDR
// vc_control := control_rider ;
18601: LD_ADDR_OWVAR 38
18605: PUSH
18606: LD_INT 4
18608: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18609: CALL_OW 45
18613: PPUSH
18614: LD_INT 96
18616: PPUSH
18617: LD_INT 20
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 48
// end ; end_of_file
18627: LD_VAR 0 1
18631: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18632: LD_INT 0
18634: PPUSH
// ar_miner := 81 ;
18635: LD_ADDR_EXP 61
18639: PUSH
18640: LD_INT 81
18642: ST_TO_ADDR
// ar_crane := 88 ;
18643: LD_ADDR_EXP 60
18647: PUSH
18648: LD_INT 88
18650: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18651: LD_ADDR_EXP 55
18655: PUSH
18656: LD_INT 89
18658: ST_TO_ADDR
// us_hack := 99 ;
18659: LD_ADDR_EXP 56
18663: PUSH
18664: LD_INT 99
18666: ST_TO_ADDR
// us_artillery := 97 ;
18667: LD_ADDR_EXP 57
18671: PUSH
18672: LD_INT 97
18674: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18675: LD_ADDR_EXP 58
18679: PUSH
18680: LD_INT 91
18682: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18683: LD_ADDR_EXP 59
18687: PUSH
18688: LD_INT 92
18690: ST_TO_ADDR
// ru_radar := 98 ;
18691: LD_ADDR_EXP 54
18695: PUSH
18696: LD_INT 98
18698: ST_TO_ADDR
// tech_Artillery := 80 ;
18699: LD_ADDR_EXP 62
18703: PUSH
18704: LD_INT 80
18706: ST_TO_ADDR
// tech_RadMat := 81 ;
18707: LD_ADDR_EXP 63
18711: PUSH
18712: LD_INT 81
18714: ST_TO_ADDR
// tech_BasicTools := 82 ;
18715: LD_ADDR_EXP 64
18719: PUSH
18720: LD_INT 82
18722: ST_TO_ADDR
// tech_Cargo := 83 ;
18723: LD_ADDR_EXP 65
18727: PUSH
18728: LD_INT 83
18730: ST_TO_ADDR
// tech_Track := 84 ;
18731: LD_ADDR_EXP 66
18735: PUSH
18736: LD_INT 84
18738: ST_TO_ADDR
// tech_Crane := 85 ;
18739: LD_ADDR_EXP 67
18743: PUSH
18744: LD_INT 85
18746: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18747: LD_ADDR_EXP 68
18751: PUSH
18752: LD_INT 86
18754: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18755: LD_ADDR_EXP 69
18759: PUSH
18760: LD_INT 87
18762: ST_TO_ADDR
// end ;
18763: LD_VAR 0 1
18767: RET
// every 1 do
18768: GO 18770
18770: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18771: CALL 18632 0 0
18775: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18776: LD_VAR 0 2
18780: PUSH
18781: LD_INT 100
18783: EQUAL
18784: IFFALSE 19733
// begin if not StreamModeActive then
18786: LD_EXP 70
18790: NOT
18791: IFFALSE 18801
// StreamModeActive := true ;
18793: LD_ADDR_EXP 70
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 0 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 0
18808: EQUAL
18809: IFFALSE 18815
// InitStreamMode ;
18811: CALL 19891 0 0
// if p3 = 1 then
18815: LD_VAR 0 3
18819: PUSH
18820: LD_INT 1
18822: EQUAL
18823: IFFALSE 18833
// sRocket := true ;
18825: LD_ADDR_EXP 75
18829: PUSH
18830: LD_INT 1
18832: ST_TO_ADDR
// if p3 = 2 then
18833: LD_VAR 0 3
18837: PUSH
18838: LD_INT 2
18840: EQUAL
18841: IFFALSE 18851
// sSpeed := true ;
18843: LD_ADDR_EXP 74
18847: PUSH
18848: LD_INT 1
18850: ST_TO_ADDR
// if p3 = 3 then
18851: LD_VAR 0 3
18855: PUSH
18856: LD_INT 3
18858: EQUAL
18859: IFFALSE 18869
// sEngine := true ;
18861: LD_ADDR_EXP 76
18865: PUSH
18866: LD_INT 1
18868: ST_TO_ADDR
// if p3 = 4 then
18869: LD_VAR 0 3
18873: PUSH
18874: LD_INT 4
18876: EQUAL
18877: IFFALSE 18887
// sSpec := true ;
18879: LD_ADDR_EXP 73
18883: PUSH
18884: LD_INT 1
18886: ST_TO_ADDR
// if p3 = 5 then
18887: LD_VAR 0 3
18891: PUSH
18892: LD_INT 5
18894: EQUAL
18895: IFFALSE 18905
// sLevel := true ;
18897: LD_ADDR_EXP 77
18901: PUSH
18902: LD_INT 1
18904: ST_TO_ADDR
// if p3 = 6 then
18905: LD_VAR 0 3
18909: PUSH
18910: LD_INT 6
18912: EQUAL
18913: IFFALSE 18923
// sArmoury := true ;
18915: LD_ADDR_EXP 78
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// if p3 = 7 then
18923: LD_VAR 0 3
18927: PUSH
18928: LD_INT 7
18930: EQUAL
18931: IFFALSE 18941
// sRadar := true ;
18933: LD_ADDR_EXP 79
18937: PUSH
18938: LD_INT 1
18940: ST_TO_ADDR
// if p3 = 8 then
18941: LD_VAR 0 3
18945: PUSH
18946: LD_INT 8
18948: EQUAL
18949: IFFALSE 18959
// sBunker := true ;
18951: LD_ADDR_EXP 80
18955: PUSH
18956: LD_INT 1
18958: ST_TO_ADDR
// if p3 = 9 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 9
18966: EQUAL
18967: IFFALSE 18977
// sHack := true ;
18969: LD_ADDR_EXP 81
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 10 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 10
18984: EQUAL
18985: IFFALSE 18995
// sFire := true ;
18987: LD_ADDR_EXP 82
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 11 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 11
19002: EQUAL
19003: IFFALSE 19013
// sRefresh := true ;
19005: LD_ADDR_EXP 83
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 12 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 12
19020: EQUAL
19021: IFFALSE 19031
// sExp := true ;
19023: LD_ADDR_EXP 84
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 13 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 13
19038: EQUAL
19039: IFFALSE 19049
// sDepot := true ;
19041: LD_ADDR_EXP 85
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 14 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 14
19056: EQUAL
19057: IFFALSE 19067
// sFlag := true ;
19059: LD_ADDR_EXP 86
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 15 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 15
19074: EQUAL
19075: IFFALSE 19085
// sKamikadze := true ;
19077: LD_ADDR_EXP 94
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 16 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 16
19092: EQUAL
19093: IFFALSE 19103
// sTroll := true ;
19095: LD_ADDR_EXP 95
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 17 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 17
19110: EQUAL
19111: IFFALSE 19121
// sSlow := true ;
19113: LD_ADDR_EXP 96
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 18 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 18
19128: EQUAL
19129: IFFALSE 19139
// sLack := true ;
19131: LD_ADDR_EXP 97
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 19 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 19
19146: EQUAL
19147: IFFALSE 19157
// sTank := true ;
19149: LD_ADDR_EXP 99
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 20 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 20
19164: EQUAL
19165: IFFALSE 19175
// sRemote := true ;
19167: LD_ADDR_EXP 100
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 21 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 21
19182: EQUAL
19183: IFFALSE 19193
// sPowell := true ;
19185: LD_ADDR_EXP 101
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 22 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 22
19200: EQUAL
19201: IFFALSE 19211
// sTeleport := true ;
19203: LD_ADDR_EXP 104
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 23 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 23
19218: EQUAL
19219: IFFALSE 19229
// sOilTower := true ;
19221: LD_ADDR_EXP 106
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 24 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 24
19236: EQUAL
19237: IFFALSE 19247
// sShovel := true ;
19239: LD_ADDR_EXP 107
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 25 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 25
19254: EQUAL
19255: IFFALSE 19265
// sSheik := true ;
19257: LD_ADDR_EXP 108
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 26 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 26
19272: EQUAL
19273: IFFALSE 19283
// sEarthquake := true ;
19275: LD_ADDR_EXP 110
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 27 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 27
19290: EQUAL
19291: IFFALSE 19301
// sAI := true ;
19293: LD_ADDR_EXP 111
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 28 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 28
19308: EQUAL
19309: IFFALSE 19319
// sCargo := true ;
19311: LD_ADDR_EXP 114
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 29 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 29
19326: EQUAL
19327: IFFALSE 19337
// sDLaser := true ;
19329: LD_ADDR_EXP 115
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 30 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 30
19344: EQUAL
19345: IFFALSE 19355
// sExchange := true ;
19347: LD_ADDR_EXP 116
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 31 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 31
19362: EQUAL
19363: IFFALSE 19373
// sFac := true ;
19365: LD_ADDR_EXP 117
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 32 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 32
19380: EQUAL
19381: IFFALSE 19391
// sPower := true ;
19383: LD_ADDR_EXP 118
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 33 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 33
19398: EQUAL
19399: IFFALSE 19409
// sRandom := true ;
19401: LD_ADDR_EXP 119
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 34 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 34
19416: EQUAL
19417: IFFALSE 19427
// sShield := true ;
19419: LD_ADDR_EXP 120
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 35 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 35
19434: EQUAL
19435: IFFALSE 19445
// sTime := true ;
19437: LD_ADDR_EXP 121
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 36 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 36
19452: EQUAL
19453: IFFALSE 19463
// sTools := true ;
19455: LD_ADDR_EXP 122
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 101 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 101
19470: EQUAL
19471: IFFALSE 19481
// sSold := true ;
19473: LD_ADDR_EXP 87
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 102 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 102
19488: EQUAL
19489: IFFALSE 19499
// sDiff := true ;
19491: LD_ADDR_EXP 88
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 103 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 103
19506: EQUAL
19507: IFFALSE 19517
// sFog := true ;
19509: LD_ADDR_EXP 91
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 104 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 104
19524: EQUAL
19525: IFFALSE 19535
// sReset := true ;
19527: LD_ADDR_EXP 92
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 105 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 105
19542: EQUAL
19543: IFFALSE 19553
// sSun := true ;
19545: LD_ADDR_EXP 93
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 106 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 106
19560: EQUAL
19561: IFFALSE 19571
// sTiger := true ;
19563: LD_ADDR_EXP 89
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 107 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 107
19578: EQUAL
19579: IFFALSE 19589
// sBomb := true ;
19581: LD_ADDR_EXP 90
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 108 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 108
19596: EQUAL
19597: IFFALSE 19607
// sWound := true ;
19599: LD_ADDR_EXP 98
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 109 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 109
19614: EQUAL
19615: IFFALSE 19625
// sBetray := true ;
19617: LD_ADDR_EXP 102
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 110 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 110
19632: EQUAL
19633: IFFALSE 19643
// sContamin := true ;
19635: LD_ADDR_EXP 103
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 111 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 111
19650: EQUAL
19651: IFFALSE 19661
// sOil := true ;
19653: LD_ADDR_EXP 105
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 112 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 112
19668: EQUAL
19669: IFFALSE 19679
// sStu := true ;
19671: LD_ADDR_EXP 109
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 113 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 113
19686: EQUAL
19687: IFFALSE 19697
// sBazooka := true ;
19689: LD_ADDR_EXP 112
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 114 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 114
19704: EQUAL
19705: IFFALSE 19715
// sMortar := true ;
19707: LD_ADDR_EXP 113
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 115 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 115
19722: EQUAL
19723: IFFALSE 19733
// sRanger := true ;
19725: LD_ADDR_EXP 123
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// end ; if p2 = 101 then
19733: LD_VAR 0 2
19737: PUSH
19738: LD_INT 101
19740: EQUAL
19741: IFFALSE 19869
// begin case p3 of 1 :
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 1
19750: DOUBLE
19751: EQUAL
19752: IFTRUE 19756
19754: GO 19763
19756: POP
// hHackUnlimitedResources ; 2 :
19757: CALL 30904 0 0
19761: GO 19869
19763: LD_INT 2
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19778
19771: POP
// hHackSetLevel10 ; 3 :
19772: CALL 31037 0 0
19776: GO 19869
19778: LD_INT 3
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19793
19786: POP
// hHackSetLevel10YourUnits ; 4 :
19787: CALL 31122 0 0
19791: GO 19869
19793: LD_INT 4
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19808
19801: POP
// hHackInvincible ; 5 :
19802: CALL 31570 0 0
19806: GO 19869
19808: LD_INT 5
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19823
19816: POP
// hHackInvisible ; 6 :
19817: CALL 31681 0 0
19821: GO 19869
19823: LD_INT 6
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19838
19831: POP
// hHackChangeYourSide ; 7 :
19832: CALL 31738 0 0
19836: GO 19869
19838: LD_INT 7
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19853
19846: POP
// hHackChangeUnitSide ; 8 :
19847: CALL 31780 0 0
19851: GO 19869
19853: LD_INT 8
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19868
19861: POP
// hHackFog ; end ;
19862: CALL 31881 0 0
19866: GO 19869
19868: POP
// end ; end ;
19869: PPOPN 6
19871: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19872: GO 19874
19874: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19875: LD_STRING initStreamRollete();
19877: PPUSH
19878: CALL_OW 559
// InitStreamMode ;
19882: CALL 19891 0 0
// DefineStreamItems ( ) ;
19886: CALL 20331 0 0
// end ;
19890: END
// function InitStreamMode ; begin
19891: LD_INT 0
19893: PPUSH
// streamModeActive := false ;
19894: LD_ADDR_EXP 70
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// normalCounter := 36 ;
19902: LD_ADDR_EXP 71
19906: PUSH
19907: LD_INT 36
19909: ST_TO_ADDR
// hardcoreCounter := 16 ;
19910: LD_ADDR_EXP 72
19914: PUSH
19915: LD_INT 16
19917: ST_TO_ADDR
// sRocket := false ;
19918: LD_ADDR_EXP 75
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sSpeed := false ;
19926: LD_ADDR_EXP 74
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sEngine := false ;
19934: LD_ADDR_EXP 76
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sSpec := false ;
19942: LD_ADDR_EXP 73
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sLevel := false ;
19950: LD_ADDR_EXP 77
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sArmoury := false ;
19958: LD_ADDR_EXP 78
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sRadar := false ;
19966: LD_ADDR_EXP 79
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sBunker := false ;
19974: LD_ADDR_EXP 80
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sHack := false ;
19982: LD_ADDR_EXP 81
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sFire := false ;
19990: LD_ADDR_EXP 82
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sRefresh := false ;
19998: LD_ADDR_EXP 83
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sExp := false ;
20006: LD_ADDR_EXP 84
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sDepot := false ;
20014: LD_ADDR_EXP 85
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sFlag := false ;
20022: LD_ADDR_EXP 86
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sKamikadze := false ;
20030: LD_ADDR_EXP 94
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sTroll := false ;
20038: LD_ADDR_EXP 95
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sSlow := false ;
20046: LD_ADDR_EXP 96
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sLack := false ;
20054: LD_ADDR_EXP 97
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sTank := false ;
20062: LD_ADDR_EXP 99
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sRemote := false ;
20070: LD_ADDR_EXP 100
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sPowell := false ;
20078: LD_ADDR_EXP 101
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sTeleport := false ;
20086: LD_ADDR_EXP 104
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sOilTower := false ;
20094: LD_ADDR_EXP 106
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sShovel := false ;
20102: LD_ADDR_EXP 107
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sSheik := false ;
20110: LD_ADDR_EXP 108
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sEarthquake := false ;
20118: LD_ADDR_EXP 110
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sAI := false ;
20126: LD_ADDR_EXP 111
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sCargo := false ;
20134: LD_ADDR_EXP 114
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sDLaser := false ;
20142: LD_ADDR_EXP 115
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sExchange := false ;
20150: LD_ADDR_EXP 116
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sFac := false ;
20158: LD_ADDR_EXP 117
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sPower := false ;
20166: LD_ADDR_EXP 118
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sRandom := false ;
20174: LD_ADDR_EXP 119
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sShield := false ;
20182: LD_ADDR_EXP 120
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sTime := false ;
20190: LD_ADDR_EXP 121
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sTools := false ;
20198: LD_ADDR_EXP 122
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sSold := false ;
20206: LD_ADDR_EXP 87
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sDiff := false ;
20214: LD_ADDR_EXP 88
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sFog := false ;
20222: LD_ADDR_EXP 91
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sReset := false ;
20230: LD_ADDR_EXP 92
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sSun := false ;
20238: LD_ADDR_EXP 93
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sTiger := false ;
20246: LD_ADDR_EXP 89
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sBomb := false ;
20254: LD_ADDR_EXP 90
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sWound := false ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sBetray := false ;
20270: LD_ADDR_EXP 102
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sContamin := false ;
20278: LD_ADDR_EXP 103
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sOil := false ;
20286: LD_ADDR_EXP 105
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sStu := false ;
20294: LD_ADDR_EXP 109
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sBazooka := false ;
20302: LD_ADDR_EXP 112
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sMortar := false ;
20310: LD_ADDR_EXP 113
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sRanger := false ;
20318: LD_ADDR_EXP 123
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// end ;
20326: LD_VAR 0 1
20330: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20331: LD_INT 0
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
// result := [ ] ;
20338: LD_ADDR_VAR 0 1
20342: PUSH
20343: EMPTY
20344: ST_TO_ADDR
// if campaign_id = 1 then
20345: LD_OWVAR 69
20349: PUSH
20350: LD_INT 1
20352: EQUAL
20353: IFFALSE 23291
// begin case mission_number of 1 :
20355: LD_OWVAR 70
20359: PUSH
20360: LD_INT 1
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20432
20368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20369: LD_ADDR_VAR 0 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 4
20379: PUSH
20380: LD_INT 11
20382: PUSH
20383: LD_INT 12
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 16
20391: PUSH
20392: LD_INT 22
20394: PUSH
20395: LD_INT 23
20397: PUSH
20398: LD_INT 26
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 101
20414: PUSH
20415: LD_INT 102
20417: PUSH
20418: LD_INT 106
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: ST_TO_ADDR
20430: GO 23289
20432: LD_INT 2
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20512
20440: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20441: LD_ADDR_VAR 0 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 4
20451: PUSH
20452: LD_INT 11
20454: PUSH
20455: LD_INT 12
20457: PUSH
20458: LD_INT 15
20460: PUSH
20461: LD_INT 16
20463: PUSH
20464: LD_INT 22
20466: PUSH
20467: LD_INT 23
20469: PUSH
20470: LD_INT 26
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 101
20486: PUSH
20487: LD_INT 102
20489: PUSH
20490: LD_INT 105
20492: PUSH
20493: LD_INT 106
20495: PUSH
20496: LD_INT 108
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
20510: GO 23289
20512: LD_INT 3
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20596
20520: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20521: LD_ADDR_VAR 0 1
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 4
20531: PUSH
20532: LD_INT 5
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 15
20543: PUSH
20544: LD_INT 16
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_INT 26
20552: PUSH
20553: LD_INT 36
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 101
20570: PUSH
20571: LD_INT 102
20573: PUSH
20574: LD_INT 105
20576: PUSH
20577: LD_INT 106
20579: PUSH
20580: LD_INT 108
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 23289
20596: LD_INT 4
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20688
20604: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20605: LD_ADDR_VAR 0 1
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 8
20621: PUSH
20622: LD_INT 11
20624: PUSH
20625: LD_INT 12
20627: PUSH
20628: LD_INT 15
20630: PUSH
20631: LD_INT 16
20633: PUSH
20634: LD_INT 22
20636: PUSH
20637: LD_INT 23
20639: PUSH
20640: LD_INT 26
20642: PUSH
20643: LD_INT 36
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 101
20662: PUSH
20663: LD_INT 102
20665: PUSH
20666: LD_INT 105
20668: PUSH
20669: LD_INT 106
20671: PUSH
20672: LD_INT 108
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: ST_TO_ADDR
20686: GO 23289
20688: LD_INT 5
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20796
20696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20697: LD_ADDR_VAR 0 1
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 4
20707: PUSH
20708: LD_INT 5
20710: PUSH
20711: LD_INT 6
20713: PUSH
20714: LD_INT 8
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 25
20737: PUSH
20738: LD_INT 26
20740: PUSH
20741: LD_INT 36
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 101
20762: PUSH
20763: LD_INT 102
20765: PUSH
20766: LD_INT 105
20768: PUSH
20769: LD_INT 106
20771: PUSH
20772: LD_INT 108
20774: PUSH
20775: LD_INT 109
20777: PUSH
20778: LD_INT 112
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: ST_TO_ADDR
20794: GO 23289
20796: LD_INT 6
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20924
20804: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20805: LD_ADDR_VAR 0 1
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 4
20815: PUSH
20816: LD_INT 5
20818: PUSH
20819: LD_INT 6
20821: PUSH
20822: LD_INT 8
20824: PUSH
20825: LD_INT 11
20827: PUSH
20828: LD_INT 12
20830: PUSH
20831: LD_INT 15
20833: PUSH
20834: LD_INT 16
20836: PUSH
20837: LD_INT 20
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_INT 23
20848: PUSH
20849: LD_INT 25
20851: PUSH
20852: LD_INT 26
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 31
20860: PUSH
20861: LD_INT 32
20863: PUSH
20864: LD_INT 36
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 101
20890: PUSH
20891: LD_INT 102
20893: PUSH
20894: LD_INT 105
20896: PUSH
20897: LD_INT 106
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 109
20905: PUSH
20906: LD_INT 112
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
20922: GO 23289
20924: LD_INT 7
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 21032
20932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 4
20943: PUSH
20944: LD_INT 5
20946: PUSH
20947: LD_INT 7
20949: PUSH
20950: LD_INT 11
20952: PUSH
20953: LD_INT 12
20955: PUSH
20956: LD_INT 15
20958: PUSH
20959: LD_INT 16
20961: PUSH
20962: LD_INT 20
20964: PUSH
20965: LD_INT 21
20967: PUSH
20968: LD_INT 22
20970: PUSH
20971: LD_INT 23
20973: PUSH
20974: LD_INT 25
20976: PUSH
20977: LD_INT 26
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 101
20998: PUSH
20999: LD_INT 102
21001: PUSH
21002: LD_INT 103
21004: PUSH
21005: LD_INT 105
21007: PUSH
21008: LD_INT 106
21010: PUSH
21011: LD_INT 108
21013: PUSH
21014: LD_INT 112
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: ST_TO_ADDR
21030: GO 23289
21032: LD_INT 8
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21168
21040: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: LD_INT 4
21051: PUSH
21052: LD_INT 5
21054: PUSH
21055: LD_INT 6
21057: PUSH
21058: LD_INT 7
21060: PUSH
21061: LD_INT 8
21063: PUSH
21064: LD_INT 11
21066: PUSH
21067: LD_INT 12
21069: PUSH
21070: LD_INT 15
21072: PUSH
21073: LD_INT 16
21075: PUSH
21076: LD_INT 20
21078: PUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 22
21084: PUSH
21085: LD_INT 23
21087: PUSH
21088: LD_INT 25
21090: PUSH
21091: LD_INT 26
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 31
21099: PUSH
21100: LD_INT 32
21102: PUSH
21103: LD_INT 36
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 103
21136: PUSH
21137: LD_INT 105
21139: PUSH
21140: LD_INT 106
21142: PUSH
21143: LD_INT 108
21145: PUSH
21146: LD_INT 109
21148: PUSH
21149: LD_INT 112
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: ST_TO_ADDR
21166: GO 23289
21168: LD_INT 9
21170: DOUBLE
21171: EQUAL
21172: IFTRUE 21176
21174: GO 21312
21176: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 4
21187: PUSH
21188: LD_INT 5
21190: PUSH
21191: LD_INT 6
21193: PUSH
21194: LD_INT 7
21196: PUSH
21197: LD_INT 8
21199: PUSH
21200: LD_INT 11
21202: PUSH
21203: LD_INT 12
21205: PUSH
21206: LD_INT 15
21208: PUSH
21209: LD_INT 16
21211: PUSH
21212: LD_INT 20
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_INT 23
21223: PUSH
21224: LD_INT 25
21226: PUSH
21227: LD_INT 26
21229: PUSH
21230: LD_INT 28
21232: PUSH
21233: LD_INT 30
21235: PUSH
21236: LD_INT 31
21238: PUSH
21239: LD_INT 32
21241: PUSH
21242: LD_INT 36
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 103
21276: PUSH
21277: LD_INT 105
21279: PUSH
21280: LD_INT 106
21282: PUSH
21283: LD_INT 108
21285: PUSH
21286: LD_INT 109
21288: PUSH
21289: LD_INT 112
21291: PUSH
21292: LD_INT 114
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 23289
21312: LD_INT 10
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21504
21320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21321: LD_ADDR_VAR 0 1
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 6
21337: PUSH
21338: LD_INT 7
21340: PUSH
21341: LD_INT 8
21343: PUSH
21344: LD_INT 9
21346: PUSH
21347: LD_INT 10
21349: PUSH
21350: LD_INT 11
21352: PUSH
21353: LD_INT 12
21355: PUSH
21356: LD_INT 13
21358: PUSH
21359: LD_INT 14
21361: PUSH
21362: LD_INT 15
21364: PUSH
21365: LD_INT 16
21367: PUSH
21368: LD_INT 17
21370: PUSH
21371: LD_INT 18
21373: PUSH
21374: LD_INT 19
21376: PUSH
21377: LD_INT 20
21379: PUSH
21380: LD_INT 21
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_INT 23
21388: PUSH
21389: LD_INT 24
21391: PUSH
21392: LD_INT 25
21394: PUSH
21395: LD_INT 26
21397: PUSH
21398: LD_INT 28
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 31
21406: PUSH
21407: LD_INT 32
21409: PUSH
21410: LD_INT 36
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 103
21452: PUSH
21453: LD_INT 104
21455: PUSH
21456: LD_INT 105
21458: PUSH
21459: LD_INT 106
21461: PUSH
21462: LD_INT 107
21464: PUSH
21465: LD_INT 108
21467: PUSH
21468: LD_INT 109
21470: PUSH
21471: LD_INT 110
21473: PUSH
21474: LD_INT 111
21476: PUSH
21477: LD_INT 112
21479: PUSH
21480: LD_INT 114
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 23289
21504: LD_INT 11
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21704
21512: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21513: LD_ADDR_VAR 0 1
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: LD_INT 4
21526: PUSH
21527: LD_INT 5
21529: PUSH
21530: LD_INT 6
21532: PUSH
21533: LD_INT 7
21535: PUSH
21536: LD_INT 8
21538: PUSH
21539: LD_INT 9
21541: PUSH
21542: LD_INT 10
21544: PUSH
21545: LD_INT 11
21547: PUSH
21548: LD_INT 12
21550: PUSH
21551: LD_INT 13
21553: PUSH
21554: LD_INT 14
21556: PUSH
21557: LD_INT 15
21559: PUSH
21560: LD_INT 16
21562: PUSH
21563: LD_INT 17
21565: PUSH
21566: LD_INT 18
21568: PUSH
21569: LD_INT 19
21571: PUSH
21572: LD_INT 20
21574: PUSH
21575: LD_INT 21
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_INT 23
21583: PUSH
21584: LD_INT 24
21586: PUSH
21587: LD_INT 25
21589: PUSH
21590: LD_INT 26
21592: PUSH
21593: LD_INT 28
21595: PUSH
21596: LD_INT 30
21598: PUSH
21599: LD_INT 31
21601: PUSH
21602: LD_INT 32
21604: PUSH
21605: LD_INT 34
21607: PUSH
21608: LD_INT 36
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 101
21646: PUSH
21647: LD_INT 102
21649: PUSH
21650: LD_INT 103
21652: PUSH
21653: LD_INT 104
21655: PUSH
21656: LD_INT 105
21658: PUSH
21659: LD_INT 106
21661: PUSH
21662: LD_INT 107
21664: PUSH
21665: LD_INT 108
21667: PUSH
21668: LD_INT 109
21670: PUSH
21671: LD_INT 110
21673: PUSH
21674: LD_INT 111
21676: PUSH
21677: LD_INT 112
21679: PUSH
21680: LD_INT 114
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: ST_TO_ADDR
21702: GO 23289
21704: LD_INT 12
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21920
21712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21713: LD_ADDR_VAR 0 1
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 3
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 5
21732: PUSH
21733: LD_INT 6
21735: PUSH
21736: LD_INT 7
21738: PUSH
21739: LD_INT 8
21741: PUSH
21742: LD_INT 9
21744: PUSH
21745: LD_INT 10
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 12
21753: PUSH
21754: LD_INT 13
21756: PUSH
21757: LD_INT 14
21759: PUSH
21760: LD_INT 15
21762: PUSH
21763: LD_INT 16
21765: PUSH
21766: LD_INT 17
21768: PUSH
21769: LD_INT 18
21771: PUSH
21772: LD_INT 19
21774: PUSH
21775: LD_INT 20
21777: PUSH
21778: LD_INT 21
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 24
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 26
21795: PUSH
21796: LD_INT 27
21798: PUSH
21799: LD_INT 28
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: LD_INT 31
21807: PUSH
21808: LD_INT 32
21810: PUSH
21811: LD_INT 33
21813: PUSH
21814: LD_INT 34
21816: PUSH
21817: LD_INT 36
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 101
21858: PUSH
21859: LD_INT 102
21861: PUSH
21862: LD_INT 103
21864: PUSH
21865: LD_INT 104
21867: PUSH
21868: LD_INT 105
21870: PUSH
21871: LD_INT 106
21873: PUSH
21874: LD_INT 107
21876: PUSH
21877: LD_INT 108
21879: PUSH
21880: LD_INT 109
21882: PUSH
21883: LD_INT 110
21885: PUSH
21886: LD_INT 111
21888: PUSH
21889: LD_INT 112
21891: PUSH
21892: LD_INT 113
21894: PUSH
21895: LD_INT 114
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: ST_TO_ADDR
21918: GO 23289
21920: LD_INT 13
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 22124
21928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21929: LD_ADDR_VAR 0 1
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 4
21945: PUSH
21946: LD_INT 5
21948: PUSH
21949: LD_INT 8
21951: PUSH
21952: LD_INT 9
21954: PUSH
21955: LD_INT 10
21957: PUSH
21958: LD_INT 11
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: LD_INT 14
21966: PUSH
21967: LD_INT 15
21969: PUSH
21970: LD_INT 16
21972: PUSH
21973: LD_INT 17
21975: PUSH
21976: LD_INT 18
21978: PUSH
21979: LD_INT 19
21981: PUSH
21982: LD_INT 20
21984: PUSH
21985: LD_INT 21
21987: PUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 24
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 26
22002: PUSH
22003: LD_INT 27
22005: PUSH
22006: LD_INT 28
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 31
22014: PUSH
22015: LD_INT 32
22017: PUSH
22018: LD_INT 33
22020: PUSH
22021: LD_INT 34
22023: PUSH
22024: LD_INT 36
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 103
22068: PUSH
22069: LD_INT 104
22071: PUSH
22072: LD_INT 105
22074: PUSH
22075: LD_INT 106
22077: PUSH
22078: LD_INT 107
22080: PUSH
22081: LD_INT 108
22083: PUSH
22084: LD_INT 109
22086: PUSH
22087: LD_INT 110
22089: PUSH
22090: LD_INT 111
22092: PUSH
22093: LD_INT 112
22095: PUSH
22096: LD_INT 113
22098: PUSH
22099: LD_INT 114
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: ST_TO_ADDR
22122: GO 23289
22124: LD_INT 14
22126: DOUBLE
22127: EQUAL
22128: IFTRUE 22132
22130: GO 22344
22132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22133: LD_ADDR_VAR 0 1
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 4
22149: PUSH
22150: LD_INT 5
22152: PUSH
22153: LD_INT 6
22155: PUSH
22156: LD_INT 7
22158: PUSH
22159: LD_INT 8
22161: PUSH
22162: LD_INT 9
22164: PUSH
22165: LD_INT 10
22167: PUSH
22168: LD_INT 11
22170: PUSH
22171: LD_INT 12
22173: PUSH
22174: LD_INT 13
22176: PUSH
22177: LD_INT 14
22179: PUSH
22180: LD_INT 15
22182: PUSH
22183: LD_INT 16
22185: PUSH
22186: LD_INT 17
22188: PUSH
22189: LD_INT 18
22191: PUSH
22192: LD_INT 19
22194: PUSH
22195: LD_INT 20
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 24
22209: PUSH
22210: LD_INT 25
22212: PUSH
22213: LD_INT 26
22215: PUSH
22216: LD_INT 27
22218: PUSH
22219: LD_INT 28
22221: PUSH
22222: LD_INT 29
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 31
22230: PUSH
22231: LD_INT 32
22233: PUSH
22234: LD_INT 33
22236: PUSH
22237: LD_INT 34
22239: PUSH
22240: LD_INT 36
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 101
22282: PUSH
22283: LD_INT 102
22285: PUSH
22286: LD_INT 103
22288: PUSH
22289: LD_INT 104
22291: PUSH
22292: LD_INT 105
22294: PUSH
22295: LD_INT 106
22297: PUSH
22298: LD_INT 107
22300: PUSH
22301: LD_INT 108
22303: PUSH
22304: LD_INT 109
22306: PUSH
22307: LD_INT 110
22309: PUSH
22310: LD_INT 111
22312: PUSH
22313: LD_INT 112
22315: PUSH
22316: LD_INT 113
22318: PUSH
22319: LD_INT 114
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: ST_TO_ADDR
22342: GO 23289
22344: LD_INT 15
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22564
22352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 3
22366: PUSH
22367: LD_INT 4
22369: PUSH
22370: LD_INT 5
22372: PUSH
22373: LD_INT 6
22375: PUSH
22376: LD_INT 7
22378: PUSH
22379: LD_INT 8
22381: PUSH
22382: LD_INT 9
22384: PUSH
22385: LD_INT 10
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: LD_INT 12
22393: PUSH
22394: LD_INT 13
22396: PUSH
22397: LD_INT 14
22399: PUSH
22400: LD_INT 15
22402: PUSH
22403: LD_INT 16
22405: PUSH
22406: LD_INT 17
22408: PUSH
22409: LD_INT 18
22411: PUSH
22412: LD_INT 19
22414: PUSH
22415: LD_INT 20
22417: PUSH
22418: LD_INT 21
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_INT 23
22426: PUSH
22427: LD_INT 24
22429: PUSH
22430: LD_INT 25
22432: PUSH
22433: LD_INT 26
22435: PUSH
22436: LD_INT 27
22438: PUSH
22439: LD_INT 28
22441: PUSH
22442: LD_INT 29
22444: PUSH
22445: LD_INT 30
22447: PUSH
22448: LD_INT 31
22450: PUSH
22451: LD_INT 32
22453: PUSH
22454: LD_INT 33
22456: PUSH
22457: LD_INT 34
22459: PUSH
22460: LD_INT 36
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 101
22502: PUSH
22503: LD_INT 102
22505: PUSH
22506: LD_INT 103
22508: PUSH
22509: LD_INT 104
22511: PUSH
22512: LD_INT 105
22514: PUSH
22515: LD_INT 106
22517: PUSH
22518: LD_INT 107
22520: PUSH
22521: LD_INT 108
22523: PUSH
22524: LD_INT 109
22526: PUSH
22527: LD_INT 110
22529: PUSH
22530: LD_INT 111
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 113
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: ST_TO_ADDR
22562: GO 23289
22564: LD_INT 16
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22696
22572: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22573: LD_ADDR_VAR 0 1
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 4
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: LD_INT 7
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 12
22595: PUSH
22596: LD_INT 15
22598: PUSH
22599: LD_INT 16
22601: PUSH
22602: LD_INT 20
22604: PUSH
22605: LD_INT 21
22607: PUSH
22608: LD_INT 22
22610: PUSH
22611: LD_INT 23
22613: PUSH
22614: LD_INT 25
22616: PUSH
22617: LD_INT 26
22619: PUSH
22620: LD_INT 30
22622: PUSH
22623: LD_INT 31
22625: PUSH
22626: LD_INT 32
22628: PUSH
22629: LD_INT 33
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 101
22658: PUSH
22659: LD_INT 102
22661: PUSH
22662: LD_INT 103
22664: PUSH
22665: LD_INT 106
22667: PUSH
22668: LD_INT 108
22670: PUSH
22671: LD_INT 112
22673: PUSH
22674: LD_INT 113
22676: PUSH
22677: LD_INT 114
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 23289
22696: LD_INT 17
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22916
22704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: LD_INT 6
22727: PUSH
22728: LD_INT 7
22730: PUSH
22731: LD_INT 8
22733: PUSH
22734: LD_INT 9
22736: PUSH
22737: LD_INT 10
22739: PUSH
22740: LD_INT 11
22742: PUSH
22743: LD_INT 12
22745: PUSH
22746: LD_INT 13
22748: PUSH
22749: LD_INT 14
22751: PUSH
22752: LD_INT 15
22754: PUSH
22755: LD_INT 16
22757: PUSH
22758: LD_INT 17
22760: PUSH
22761: LD_INT 18
22763: PUSH
22764: LD_INT 19
22766: PUSH
22767: LD_INT 20
22769: PUSH
22770: LD_INT 21
22772: PUSH
22773: LD_INT 22
22775: PUSH
22776: LD_INT 23
22778: PUSH
22779: LD_INT 24
22781: PUSH
22782: LD_INT 25
22784: PUSH
22785: LD_INT 26
22787: PUSH
22788: LD_INT 27
22790: PUSH
22791: LD_INT 28
22793: PUSH
22794: LD_INT 29
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 31
22802: PUSH
22803: LD_INT 32
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: LD_INT 34
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 101
22854: PUSH
22855: LD_INT 102
22857: PUSH
22858: LD_INT 103
22860: PUSH
22861: LD_INT 104
22863: PUSH
22864: LD_INT 105
22866: PUSH
22867: LD_INT 106
22869: PUSH
22870: LD_INT 107
22872: PUSH
22873: LD_INT 108
22875: PUSH
22876: LD_INT 109
22878: PUSH
22879: LD_INT 110
22881: PUSH
22882: LD_INT 111
22884: PUSH
22885: LD_INT 112
22887: PUSH
22888: LD_INT 113
22890: PUSH
22891: LD_INT 114
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: ST_TO_ADDR
22914: GO 23289
22916: LD_INT 18
22918: DOUBLE
22919: EQUAL
22920: IFTRUE 22924
22922: GO 23060
22924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22925: LD_ADDR_VAR 0 1
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: LD_INT 4
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: LD_INT 7
22941: PUSH
22942: LD_INT 11
22944: PUSH
22945: LD_INT 12
22947: PUSH
22948: LD_INT 15
22950: PUSH
22951: LD_INT 16
22953: PUSH
22954: LD_INT 20
22956: PUSH
22957: LD_INT 21
22959: PUSH
22960: LD_INT 22
22962: PUSH
22963: LD_INT 23
22965: PUSH
22966: LD_INT 25
22968: PUSH
22969: LD_INT 26
22971: PUSH
22972: LD_INT 30
22974: PUSH
22975: LD_INT 31
22977: PUSH
22978: LD_INT 32
22980: PUSH
22981: LD_INT 33
22983: PUSH
22984: LD_INT 34
22986: PUSH
22987: LD_INT 35
22989: PUSH
22990: LD_INT 36
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 101
23018: PUSH
23019: LD_INT 102
23021: PUSH
23022: LD_INT 103
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 108
23030: PUSH
23031: LD_INT 112
23033: PUSH
23034: LD_INT 113
23036: PUSH
23037: LD_INT 114
23039: PUSH
23040: LD_INT 115
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: ST_TO_ADDR
23058: GO 23289
23060: LD_INT 19
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23288
23068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23069: LD_ADDR_VAR 0 1
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 3
23082: PUSH
23083: LD_INT 4
23085: PUSH
23086: LD_INT 5
23088: PUSH
23089: LD_INT 6
23091: PUSH
23092: LD_INT 7
23094: PUSH
23095: LD_INT 8
23097: PUSH
23098: LD_INT 9
23100: PUSH
23101: LD_INT 10
23103: PUSH
23104: LD_INT 11
23106: PUSH
23107: LD_INT 12
23109: PUSH
23110: LD_INT 13
23112: PUSH
23113: LD_INT 14
23115: PUSH
23116: LD_INT 15
23118: PUSH
23119: LD_INT 16
23121: PUSH
23122: LD_INT 17
23124: PUSH
23125: LD_INT 18
23127: PUSH
23128: LD_INT 19
23130: PUSH
23131: LD_INT 20
23133: PUSH
23134: LD_INT 21
23136: PUSH
23137: LD_INT 22
23139: PUSH
23140: LD_INT 23
23142: PUSH
23143: LD_INT 24
23145: PUSH
23146: LD_INT 25
23148: PUSH
23149: LD_INT 26
23151: PUSH
23152: LD_INT 27
23154: PUSH
23155: LD_INT 28
23157: PUSH
23158: LD_INT 29
23160: PUSH
23161: LD_INT 30
23163: PUSH
23164: LD_INT 31
23166: PUSH
23167: LD_INT 32
23169: PUSH
23170: LD_INT 33
23172: PUSH
23173: LD_INT 34
23175: PUSH
23176: LD_INT 35
23178: PUSH
23179: LD_INT 36
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 101
23222: PUSH
23223: LD_INT 102
23225: PUSH
23226: LD_INT 103
23228: PUSH
23229: LD_INT 104
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 107
23240: PUSH
23241: LD_INT 108
23243: PUSH
23244: LD_INT 109
23246: PUSH
23247: LD_INT 110
23249: PUSH
23250: LD_INT 111
23252: PUSH
23253: LD_INT 112
23255: PUSH
23256: LD_INT 113
23258: PUSH
23259: LD_INT 114
23261: PUSH
23262: LD_INT 115
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: ST_TO_ADDR
23286: GO 23289
23288: POP
// end else
23289: GO 23508
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23291: LD_ADDR_VAR 0 1
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 4
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: LD_INT 6
23313: PUSH
23314: LD_INT 7
23316: PUSH
23317: LD_INT 8
23319: PUSH
23320: LD_INT 9
23322: PUSH
23323: LD_INT 10
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 13
23334: PUSH
23335: LD_INT 14
23337: PUSH
23338: LD_INT 15
23340: PUSH
23341: LD_INT 16
23343: PUSH
23344: LD_INT 17
23346: PUSH
23347: LD_INT 18
23349: PUSH
23350: LD_INT 19
23352: PUSH
23353: LD_INT 20
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 23
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: LD_INT 25
23370: PUSH
23371: LD_INT 26
23373: PUSH
23374: LD_INT 27
23376: PUSH
23377: LD_INT 28
23379: PUSH
23380: LD_INT 29
23382: PUSH
23383: LD_INT 30
23385: PUSH
23386: LD_INT 31
23388: PUSH
23389: LD_INT 32
23391: PUSH
23392: LD_INT 33
23394: PUSH
23395: LD_INT 34
23397: PUSH
23398: LD_INT 35
23400: PUSH
23401: LD_INT 36
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 101
23444: PUSH
23445: LD_INT 102
23447: PUSH
23448: LD_INT 103
23450: PUSH
23451: LD_INT 104
23453: PUSH
23454: LD_INT 105
23456: PUSH
23457: LD_INT 106
23459: PUSH
23460: LD_INT 107
23462: PUSH
23463: LD_INT 108
23465: PUSH
23466: LD_INT 109
23468: PUSH
23469: LD_INT 110
23471: PUSH
23472: LD_INT 111
23474: PUSH
23475: LD_INT 112
23477: PUSH
23478: LD_INT 113
23480: PUSH
23481: LD_INT 114
23483: PUSH
23484: LD_INT 115
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: ST_TO_ADDR
// if result then
23508: LD_VAR 0 1
23512: IFFALSE 23801
// begin normal :=  ;
23514: LD_ADDR_VAR 0 3
23518: PUSH
23519: LD_STRING 
23521: ST_TO_ADDR
// hardcore :=  ;
23522: LD_ADDR_VAR 0 4
23526: PUSH
23527: LD_STRING 
23529: ST_TO_ADDR
// for i = 1 to normalCounter do
23530: LD_ADDR_VAR 0 5
23534: PUSH
23535: DOUBLE
23536: LD_INT 1
23538: DEC
23539: ST_TO_ADDR
23540: LD_EXP 71
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23647
// begin tmp := 0 ;
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_STRING 0
23555: ST_TO_ADDR
// if result [ 1 ] then
23556: LD_VAR 0 1
23560: PUSH
23561: LD_INT 1
23563: ARRAY
23564: IFFALSE 23629
// if result [ 1 ] [ 1 ] = i then
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 1
23573: ARRAY
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PUSH
23579: LD_VAR 0 5
23583: EQUAL
23584: IFFALSE 23629
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23586: LD_ADDR_VAR 0 1
23590: PUSH
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_INT 1
23598: PPUSH
23599: LD_VAR 0 1
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: LD_INT 1
23610: PPUSH
23611: CALL_OW 3
23615: PPUSH
23616: CALL_OW 1
23620: ST_TO_ADDR
// tmp := 1 ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_STRING 1
23628: ST_TO_ADDR
// end ; normal := normal & tmp ;
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_VAR 0 3
23638: PUSH
23639: LD_VAR 0 2
23643: STR
23644: ST_TO_ADDR
// end ;
23645: GO 23545
23647: POP
23648: POP
// for i = 1 to hardcoreCounter do
23649: LD_ADDR_VAR 0 5
23653: PUSH
23654: DOUBLE
23655: LD_INT 1
23657: DEC
23658: ST_TO_ADDR
23659: LD_EXP 72
23663: PUSH
23664: FOR_TO
23665: IFFALSE 23770
// begin tmp := 0 ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_STRING 0
23674: ST_TO_ADDR
// if result [ 2 ] then
23675: LD_VAR 0 1
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: IFFALSE 23752
// if result [ 2 ] [ 1 ] = 100 + i then
23685: LD_VAR 0 1
23689: PUSH
23690: LD_INT 2
23692: ARRAY
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: PUSH
23698: LD_INT 100
23700: PUSH
23701: LD_VAR 0 5
23705: PLUS
23706: EQUAL
23707: IFFALSE 23752
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23709: LD_ADDR_VAR 0 1
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_INT 2
23721: PPUSH
23722: LD_VAR 0 1
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: PPUSH
23731: LD_INT 1
23733: PPUSH
23734: CALL_OW 3
23738: PPUSH
23739: CALL_OW 1
23743: ST_TO_ADDR
// tmp := 1 ;
23744: LD_ADDR_VAR 0 2
23748: PUSH
23749: LD_STRING 1
23751: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 4
23761: PUSH
23762: LD_VAR 0 2
23766: STR
23767: ST_TO_ADDR
// end ;
23768: GO 23664
23770: POP
23771: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23772: LD_STRING getStreamItemsFromMission("
23774: PUSH
23775: LD_VAR 0 3
23779: STR
23780: PUSH
23781: LD_STRING ","
23783: STR
23784: PUSH
23785: LD_VAR 0 4
23789: STR
23790: PUSH
23791: LD_STRING ")
23793: STR
23794: PPUSH
23795: CALL_OW 559
// end else
23799: GO 23808
// ToLua ( getStreamItemsFromMission("","") ) ;
23801: LD_STRING getStreamItemsFromMission("","")
23803: PPUSH
23804: CALL_OW 559
// end ;
23808: LD_VAR 0 1
23812: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23813: LD_EXP 70
23817: PUSH
23818: LD_EXP 75
23822: AND
23823: IFFALSE 23947
23825: GO 23827
23827: DISABLE
23828: LD_INT 0
23830: PPUSH
23831: PPUSH
// begin enable ;
23832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23833: LD_ADDR_VAR 0 2
23837: PUSH
23838: LD_INT 22
23840: PUSH
23841: LD_OWVAR 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 34
23855: PUSH
23856: LD_INT 7
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 34
23865: PUSH
23866: LD_INT 45
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 34
23875: PUSH
23876: LD_INT 28
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 47
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23947
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23945
// begin SetLives ( i , 0 ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 0
23938: PPUSH
23939: CALL_OW 234
// end ;
23943: GO 23928
23945: POP
23946: POP
// end ;
23947: PPOPN 2
23949: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23950: LD_EXP 70
23954: PUSH
23955: LD_EXP 76
23959: AND
23960: IFFALSE 24044
23962: GO 23964
23964: DISABLE
23965: LD_INT 0
23967: PPUSH
23968: PPUSH
// begin enable ;
23969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_INT 22
23977: PUSH
23978: LD_OWVAR 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 32
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: ST_TO_ADDR
// if not tmp then
24006: LD_VAR 0 2
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24044
// for i in tmp do
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 2
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24042
// begin SetLives ( i , 0 ) ;
24028: LD_VAR 0 1
24032: PPUSH
24033: LD_INT 0
24035: PPUSH
24036: CALL_OW 234
// end ;
24040: GO 24025
24042: POP
24043: POP
// end ;
24044: PPOPN 2
24046: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24047: LD_EXP 70
24051: PUSH
24052: LD_EXP 73
24056: AND
24057: IFFALSE 24150
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
// begin enable ;
24065: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24066: LD_ADDR_VAR 0 1
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 25
24088: PUSH
24089: LD_INT 5
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 25
24098: PUSH
24099: LD_INT 9
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 8
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PPUSH
24126: CALL_OW 69
24130: PUSH
24131: FOR_IN
24132: IFFALSE 24148
// begin SetClass ( i , 1 ) ;
24134: LD_VAR 0 1
24138: PPUSH
24139: LD_INT 1
24141: PPUSH
24142: CALL_OW 336
// end ;
24146: GO 24131
24148: POP
24149: POP
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24153: LD_EXP 70
24157: PUSH
24158: LD_EXP 74
24162: AND
24163: PUSH
24164: LD_OWVAR 65
24168: PUSH
24169: LD_INT 7
24171: LESS
24172: AND
24173: IFFALSE 24187
24175: GO 24177
24177: DISABLE
// begin enable ;
24178: ENABLE
// game_speed := 7 ;
24179: LD_ADDR_OWVAR 65
24183: PUSH
24184: LD_INT 7
24186: ST_TO_ADDR
// end ;
24187: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24188: LD_EXP 70
24192: PUSH
24193: LD_EXP 77
24197: AND
24198: IFFALSE 24400
24200: GO 24202
24202: DISABLE
24203: LD_INT 0
24205: PPUSH
24206: PPUSH
24207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24208: LD_ADDR_VAR 0 3
24212: PUSH
24213: LD_INT 81
24215: PUSH
24216: LD_OWVAR 2
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 21
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 69
24243: ST_TO_ADDR
// if not tmp then
24244: LD_VAR 0 3
24248: NOT
24249: IFFALSE 24253
// exit ;
24251: GO 24400
// if tmp > 5 then
24253: LD_VAR 0 3
24257: PUSH
24258: LD_INT 5
24260: GREATER
24261: IFFALSE 24273
// k := 5 else
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 5
24270: ST_TO_ADDR
24271: GO 24283
// k := tmp ;
24273: LD_ADDR_VAR 0 2
24277: PUSH
24278: LD_VAR 0 3
24282: ST_TO_ADDR
// for i := 1 to k do
24283: LD_ADDR_VAR 0 1
24287: PUSH
24288: DOUBLE
24289: LD_INT 1
24291: DEC
24292: ST_TO_ADDR
24293: LD_VAR 0 2
24297: PUSH
24298: FOR_TO
24299: IFFALSE 24398
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24301: LD_VAR 0 3
24305: PUSH
24306: LD_VAR 0 1
24310: ARRAY
24311: PPUSH
24312: LD_VAR 0 1
24316: PUSH
24317: LD_INT 4
24319: MOD
24320: PUSH
24321: LD_INT 1
24323: PLUS
24324: PPUSH
24325: CALL_OW 259
24329: PUSH
24330: LD_INT 10
24332: LESS
24333: IFFALSE 24396
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24335: LD_VAR 0 3
24339: PUSH
24340: LD_VAR 0 1
24344: ARRAY
24345: PPUSH
24346: LD_VAR 0 1
24350: PUSH
24351: LD_INT 4
24353: MOD
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: PPUSH
24359: LD_VAR 0 3
24363: PUSH
24364: LD_VAR 0 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 1
24374: PUSH
24375: LD_INT 4
24377: MOD
24378: PUSH
24379: LD_INT 1
24381: PLUS
24382: PPUSH
24383: CALL_OW 259
24387: PUSH
24388: LD_INT 1
24390: PLUS
24391: PPUSH
24392: CALL_OW 237
24396: GO 24298
24398: POP
24399: POP
// end ;
24400: PPOPN 3
24402: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24403: LD_EXP 70
24407: PUSH
24408: LD_EXP 78
24412: AND
24413: IFFALSE 24433
24415: GO 24417
24417: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24418: LD_INT 4
24420: PPUSH
24421: LD_OWVAR 2
24425: PPUSH
24426: LD_INT 0
24428: PPUSH
24429: CALL_OW 324
24433: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24434: LD_EXP 70
24438: PUSH
24439: LD_EXP 107
24443: AND
24444: IFFALSE 24464
24446: GO 24448
24448: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24449: LD_INT 19
24451: PPUSH
24452: LD_OWVAR 2
24456: PPUSH
24457: LD_INT 0
24459: PPUSH
24460: CALL_OW 324
24464: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24465: LD_EXP 70
24469: PUSH
24470: LD_EXP 79
24474: AND
24475: IFFALSE 24577
24477: GO 24479
24479: DISABLE
24480: LD_INT 0
24482: PPUSH
24483: PPUSH
// begin enable ;
24484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_OWVAR 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 34
24507: PUSH
24508: LD_INT 11
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 34
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PPUSH
24534: CALL_OW 69
24538: ST_TO_ADDR
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24577
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24575
// begin SetLives ( i , 0 ) ;
24561: LD_VAR 0 1
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: CALL_OW 234
// end ;
24573: GO 24558
24575: POP
24576: POP
// end ;
24577: PPOPN 2
24579: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24580: LD_EXP 70
24584: PUSH
24585: LD_EXP 80
24589: AND
24590: IFFALSE 24610
24592: GO 24594
24594: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24595: LD_INT 32
24597: PPUSH
24598: LD_OWVAR 2
24602: PPUSH
24603: LD_INT 0
24605: PPUSH
24606: CALL_OW 324
24610: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24611: LD_EXP 70
24615: PUSH
24616: LD_EXP 81
24620: AND
24621: IFFALSE 24802
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
24629: PPUSH
24630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_OWVAR 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 33
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PPUSH
24662: CALL_OW 69
24666: ST_TO_ADDR
// if not tmp then
24667: LD_VAR 0 2
24671: NOT
24672: IFFALSE 24676
// exit ;
24674: GO 24802
// side := 0 ;
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 0
24683: ST_TO_ADDR
// for i := 1 to 8 do
24684: LD_ADDR_VAR 0 1
24688: PUSH
24689: DOUBLE
24690: LD_INT 1
24692: DEC
24693: ST_TO_ADDR
24694: LD_INT 8
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24746
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24700: LD_OWVAR 2
24704: PUSH
24705: LD_VAR 0 1
24709: NONEQUAL
24710: PUSH
24711: LD_OWVAR 2
24715: PPUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 81
24725: PUSH
24726: LD_INT 2
24728: EQUAL
24729: AND
24730: IFFALSE 24744
// begin side := i ;
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_VAR 0 1
24741: ST_TO_ADDR
// break ;
24742: GO 24746
// end ;
24744: GO 24697
24746: POP
24747: POP
// if not side then
24748: LD_VAR 0 3
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 24802
// for i := 1 to tmp do
24757: LD_ADDR_VAR 0 1
24761: PUSH
24762: DOUBLE
24763: LD_INT 1
24765: DEC
24766: ST_TO_ADDR
24767: LD_VAR 0 2
24771: PUSH
24772: FOR_TO
24773: IFFALSE 24800
// if Prob ( 60 ) then
24775: LD_INT 60
24777: PPUSH
24778: CALL_OW 13
24782: IFFALSE 24798
// SetSide ( i , side ) ;
24784: LD_VAR 0 1
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: CALL_OW 235
24798: GO 24772
24800: POP
24801: POP
// end ;
24802: PPOPN 3
24804: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24805: LD_EXP 70
24809: PUSH
24810: LD_EXP 83
24814: AND
24815: IFFALSE 24934
24817: GO 24819
24819: DISABLE
24820: LD_INT 0
24822: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24823: LD_ADDR_VAR 0 1
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 21
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 3
24852: PUSH
24853: LD_INT 23
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 69
24876: PUSH
24877: FOR_IN
24878: IFFALSE 24932
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24880: LD_VAR 0 1
24884: PPUSH
24885: CALL_OW 257
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: LD_INT 4
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: IN
24908: IFFALSE 24930
// SetClass ( un , rand ( 1 , 4 ) ) ;
24910: LD_VAR 0 1
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: LD_INT 4
24920: PPUSH
24921: CALL_OW 12
24925: PPUSH
24926: CALL_OW 336
24930: GO 24877
24932: POP
24933: POP
// end ;
24934: PPOPN 1
24936: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24937: LD_EXP 70
24941: PUSH
24942: LD_EXP 82
24946: AND
24947: IFFALSE 25026
24949: GO 24951
24951: DISABLE
24952: LD_INT 0
24954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24955: LD_ADDR_VAR 0 1
24959: PUSH
24960: LD_INT 22
24962: PUSH
24963: LD_OWVAR 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 69
24990: ST_TO_ADDR
// if not tmp then
24991: LD_VAR 0 1
24995: NOT
24996: IFFALSE 25000
// exit ;
24998: GO 25026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25000: LD_VAR 0 1
25004: PUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_VAR 0 1
25012: PPUSH
25013: CALL_OW 12
25017: ARRAY
25018: PPUSH
25019: LD_INT 100
25021: PPUSH
25022: CALL_OW 234
// end ;
25026: PPOPN 1
25028: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25029: LD_EXP 70
25033: PUSH
25034: LD_EXP 84
25038: AND
25039: IFFALSE 25137
25041: GO 25043
25043: DISABLE
25044: LD_INT 0
25046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25047: LD_ADDR_VAR 0 1
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_OWVAR 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 21
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 69
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 1
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25137
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25092: LD_VAR 0 1
25096: PUSH
25097: LD_INT 1
25099: PPUSH
25100: LD_VAR 0 1
25104: PPUSH
25105: CALL_OW 12
25109: ARRAY
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: LD_INT 4
25116: PPUSH
25117: CALL_OW 12
25121: PPUSH
25122: LD_INT 3000
25124: PPUSH
25125: LD_INT 9000
25127: PPUSH
25128: CALL_OW 12
25132: PPUSH
25133: CALL_OW 492
// end ;
25137: PPOPN 1
25139: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25140: LD_EXP 70
25144: PUSH
25145: LD_EXP 85
25149: AND
25150: IFFALSE 25170
25152: GO 25154
25154: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25155: LD_INT 1
25157: PPUSH
25158: LD_OWVAR 2
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 324
25170: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25171: LD_EXP 70
25175: PUSH
25176: LD_EXP 86
25180: AND
25181: IFFALSE 25264
25183: GO 25185
25185: DISABLE
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_INT 22
25197: PUSH
25198: LD_OWVAR 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 21
25209: PUSH
25210: LD_INT 3
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PPUSH
25221: CALL_OW 69
25225: ST_TO_ADDR
// if not tmp then
25226: LD_VAR 0 2
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 25264
// for i in tmp do
25235: LD_ADDR_VAR 0 1
25239: PUSH
25240: LD_VAR 0 2
25244: PUSH
25245: FOR_IN
25246: IFFALSE 25262
// SetBLevel ( i , 10 ) ;
25248: LD_VAR 0 1
25252: PPUSH
25253: LD_INT 10
25255: PPUSH
25256: CALL_OW 241
25260: GO 25245
25262: POP
25263: POP
// end ;
25264: PPOPN 2
25266: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25267: LD_EXP 70
25271: PUSH
25272: LD_EXP 87
25276: AND
25277: IFFALSE 25388
25279: GO 25281
25281: DISABLE
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: LD_INT 22
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 25
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 69
25322: ST_TO_ADDR
// if not tmp then
25323: LD_VAR 0 3
25327: NOT
25328: IFFALSE 25332
// exit ;
25330: GO 25388
// un := tmp [ rand ( 1 , tmp ) ] ;
25332: LD_ADDR_VAR 0 2
25336: PUSH
25337: LD_VAR 0 3
25341: PUSH
25342: LD_INT 1
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: CALL_OW 12
25354: ARRAY
25355: ST_TO_ADDR
// if Crawls ( un ) then
25356: LD_VAR 0 2
25360: PPUSH
25361: CALL_OW 318
25365: IFFALSE 25376
// ComWalk ( un ) ;
25367: LD_VAR 0 2
25371: PPUSH
25372: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_INT 5
25383: PPUSH
25384: CALL_OW 336
// end ;
25388: PPOPN 3
25390: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25391: LD_EXP 70
25395: PUSH
25396: LD_EXP 88
25400: AND
25401: PUSH
25402: LD_OWVAR 67
25406: PUSH
25407: LD_INT 3
25409: LESS
25410: AND
25411: IFFALSE 25430
25413: GO 25415
25415: DISABLE
// Difficulty := Difficulty + 1 ;
25416: LD_ADDR_OWVAR 67
25420: PUSH
25421: LD_OWVAR 67
25425: PUSH
25426: LD_INT 1
25428: PLUS
25429: ST_TO_ADDR
25430: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25431: LD_EXP 70
25435: PUSH
25436: LD_EXP 89
25440: AND
25441: IFFALSE 25544
25443: GO 25445
25445: DISABLE
25446: LD_INT 0
25448: PPUSH
// begin for i := 1 to 5 do
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: DOUBLE
25455: LD_INT 1
25457: DEC
25458: ST_TO_ADDR
25459: LD_INT 5
25461: PUSH
25462: FOR_TO
25463: IFFALSE 25542
// begin uc_nation := nation_nature ;
25465: LD_ADDR_OWVAR 21
25469: PUSH
25470: LD_INT 0
25472: ST_TO_ADDR
// uc_side := 0 ;
25473: LD_ADDR_OWVAR 20
25477: PUSH
25478: LD_INT 0
25480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25481: LD_ADDR_OWVAR 29
25485: PUSH
25486: LD_INT 12
25488: PUSH
25489: LD_INT 12
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: ST_TO_ADDR
// hc_agressivity := 20 ;
25496: LD_ADDR_OWVAR 35
25500: PUSH
25501: LD_INT 20
25503: ST_TO_ADDR
// hc_class := class_tiger ;
25504: LD_ADDR_OWVAR 28
25508: PUSH
25509: LD_INT 14
25511: ST_TO_ADDR
// hc_gallery :=  ;
25512: LD_ADDR_OWVAR 33
25516: PUSH
25517: LD_STRING 
25519: ST_TO_ADDR
// hc_name :=  ;
25520: LD_ADDR_OWVAR 26
25524: PUSH
25525: LD_STRING 
25527: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25528: CALL_OW 44
25532: PPUSH
25533: LD_INT 0
25535: PPUSH
25536: CALL_OW 51
// end ;
25540: GO 25462
25542: POP
25543: POP
// end ;
25544: PPOPN 1
25546: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25547: LD_EXP 70
25551: PUSH
25552: LD_EXP 90
25556: AND
25557: IFFALSE 25566
25559: GO 25561
25561: DISABLE
// StreamSibBomb ;
25562: CALL 25567 0 0
25566: END
// export function StreamSibBomb ; var i , x , y ; begin
25567: LD_INT 0
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
// result := false ;
25573: LD_ADDR_VAR 0 1
25577: PUSH
25578: LD_INT 0
25580: ST_TO_ADDR
// for i := 1 to 16 do
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: DOUBLE
25587: LD_INT 1
25589: DEC
25590: ST_TO_ADDR
25591: LD_INT 16
25593: PUSH
25594: FOR_TO
25595: IFFALSE 25794
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 10
25604: PUSH
25605: LD_INT 20
25607: PUSH
25608: LD_INT 30
25610: PUSH
25611: LD_INT 40
25613: PUSH
25614: LD_INT 50
25616: PUSH
25617: LD_INT 60
25619: PUSH
25620: LD_INT 70
25622: PUSH
25623: LD_INT 80
25625: PUSH
25626: LD_INT 90
25628: PUSH
25629: LD_INT 100
25631: PUSH
25632: LD_INT 110
25634: PUSH
25635: LD_INT 120
25637: PUSH
25638: LD_INT 130
25640: PUSH
25641: LD_INT 140
25643: PUSH
25644: LD_INT 150
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: PPUSH
25667: LD_INT 15
25669: PPUSH
25670: CALL_OW 12
25674: ARRAY
25675: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25676: LD_ADDR_VAR 0 4
25680: PUSH
25681: LD_INT 10
25683: PUSH
25684: LD_INT 20
25686: PUSH
25687: LD_INT 30
25689: PUSH
25690: LD_INT 40
25692: PUSH
25693: LD_INT 50
25695: PUSH
25696: LD_INT 60
25698: PUSH
25699: LD_INT 70
25701: PUSH
25702: LD_INT 80
25704: PUSH
25705: LD_INT 90
25707: PUSH
25708: LD_INT 100
25710: PUSH
25711: LD_INT 110
25713: PUSH
25714: LD_INT 120
25716: PUSH
25717: LD_INT 130
25719: PUSH
25720: LD_INT 140
25722: PUSH
25723: LD_INT 150
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PPUSH
25746: LD_INT 15
25748: PPUSH
25749: CALL_OW 12
25753: ARRAY
25754: ST_TO_ADDR
// if ValidHex ( x , y ) then
25755: LD_VAR 0 3
25759: PPUSH
25760: LD_VAR 0 4
25764: PPUSH
25765: CALL_OW 488
25769: IFFALSE 25792
// begin result := [ x , y ] ;
25771: LD_ADDR_VAR 0 1
25775: PUSH
25776: LD_VAR 0 3
25780: PUSH
25781: LD_VAR 0 4
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: ST_TO_ADDR
// break ;
25790: GO 25794
// end ; end ;
25792: GO 25594
25794: POP
25795: POP
// if result then
25796: LD_VAR 0 1
25800: IFFALSE 25860
// begin ToLua ( playSibBomb() ) ;
25802: LD_STRING playSibBomb()
25804: PPUSH
25805: CALL_OW 559
// wait ( 0 0$14 ) ;
25809: LD_INT 490
25811: PPUSH
25812: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25816: LD_VAR 0 1
25820: PUSH
25821: LD_INT 1
25823: ARRAY
25824: PPUSH
25825: LD_VAR 0 1
25829: PUSH
25830: LD_INT 2
25832: ARRAY
25833: PPUSH
25834: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25838: LD_VAR 0 1
25842: PUSH
25843: LD_INT 1
25845: ARRAY
25846: PPUSH
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 2
25854: ARRAY
25855: PPUSH
25856: CALL_OW 429
// end ; end ;
25860: LD_VAR 0 1
25864: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25865: LD_EXP 70
25869: PUSH
25870: LD_EXP 92
25874: AND
25875: IFFALSE 25887
25877: GO 25879
25879: DISABLE
// YouLost (  ) ;
25880: LD_STRING 
25882: PPUSH
25883: CALL_OW 104
25887: END
// every 0 0$1 trigger StreamModeActive and sFog do
25888: LD_EXP 70
25892: PUSH
25893: LD_EXP 91
25897: AND
25898: IFFALSE 25912
25900: GO 25902
25902: DISABLE
// FogOff ( your_side ) ;
25903: LD_OWVAR 2
25907: PPUSH
25908: CALL_OW 344
25912: END
// every 0 0$1 trigger StreamModeActive and sSun do
25913: LD_EXP 70
25917: PUSH
25918: LD_EXP 93
25922: AND
25923: IFFALSE 25951
25925: GO 25927
25927: DISABLE
// begin solar_recharge_percent := 0 ;
25928: LD_ADDR_OWVAR 79
25932: PUSH
25933: LD_INT 0
25935: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25936: LD_INT 10500
25938: PPUSH
25939: CALL_OW 67
// solar_recharge_percent := 100 ;
25943: LD_ADDR_OWVAR 79
25947: PUSH
25948: LD_INT 100
25950: ST_TO_ADDR
// end ;
25951: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25952: LD_EXP 70
25956: PUSH
25957: LD_EXP 94
25961: AND
25962: IFFALSE 26201
25964: GO 25966
25966: DISABLE
25967: LD_INT 0
25969: PPUSH
25970: PPUSH
25971: PPUSH
// begin tmp := [ ] ;
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: EMPTY
25978: ST_TO_ADDR
// for i := 1 to 6 do
25979: LD_ADDR_VAR 0 1
25983: PUSH
25984: DOUBLE
25985: LD_INT 1
25987: DEC
25988: ST_TO_ADDR
25989: LD_INT 6
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26098
// begin uc_nation := nation_nature ;
25995: LD_ADDR_OWVAR 21
25999: PUSH
26000: LD_INT 0
26002: ST_TO_ADDR
// uc_side := 0 ;
26003: LD_ADDR_OWVAR 20
26007: PUSH
26008: LD_INT 0
26010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26011: LD_ADDR_OWVAR 29
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 12
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// hc_agressivity := 20 ;
26026: LD_ADDR_OWVAR 35
26030: PUSH
26031: LD_INT 20
26033: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26034: LD_ADDR_OWVAR 28
26038: PUSH
26039: LD_INT 17
26041: ST_TO_ADDR
// hc_gallery :=  ;
26042: LD_ADDR_OWVAR 33
26046: PUSH
26047: LD_STRING 
26049: ST_TO_ADDR
// hc_name :=  ;
26050: LD_ADDR_OWVAR 26
26054: PUSH
26055: LD_STRING 
26057: ST_TO_ADDR
// un := CreateHuman ;
26058: LD_ADDR_VAR 0 2
26062: PUSH
26063: CALL_OW 44
26067: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26068: LD_VAR 0 2
26072: PPUSH
26073: LD_INT 1
26075: PPUSH
26076: CALL_OW 51
// tmp := tmp ^ un ;
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_VAR 0 3
26089: PUSH
26090: LD_VAR 0 2
26094: ADD
26095: ST_TO_ADDR
// end ;
26096: GO 25992
26098: POP
26099: POP
// repeat wait ( 0 0$1 ) ;
26100: LD_INT 35
26102: PPUSH
26103: CALL_OW 67
// for un in tmp do
26107: LD_ADDR_VAR 0 2
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: FOR_IN
26118: IFFALSE 26192
// begin if IsDead ( un ) then
26120: LD_VAR 0 2
26124: PPUSH
26125: CALL_OW 301
26129: IFFALSE 26149
// begin tmp := tmp diff un ;
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_VAR 0 3
26140: PUSH
26141: LD_VAR 0 2
26145: DIFF
26146: ST_TO_ADDR
// continue ;
26147: GO 26117
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26149: LD_VAR 0 2
26153: PPUSH
26154: LD_INT 3
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PPUSH
26171: CALL_OW 69
26175: PPUSH
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 74
26185: PPUSH
26186: CALL_OW 115
// end ;
26190: GO 26117
26192: POP
26193: POP
// until not tmp ;
26194: LD_VAR 0 3
26198: NOT
26199: IFFALSE 26100
// end ;
26201: PPOPN 3
26203: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26204: LD_EXP 70
26208: PUSH
26209: LD_EXP 95
26213: AND
26214: IFFALSE 26268
26216: GO 26218
26218: DISABLE
// begin ToLua ( displayTroll(); ) ;
26219: LD_STRING displayTroll();
26221: PPUSH
26222: CALL_OW 559
// wait ( 3 3$00 ) ;
26226: LD_INT 6300
26228: PPUSH
26229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26233: LD_STRING hideTroll();
26235: PPUSH
26236: CALL_OW 559
// wait ( 1 1$00 ) ;
26240: LD_INT 2100
26242: PPUSH
26243: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26247: LD_STRING displayTroll();
26249: PPUSH
26250: CALL_OW 559
// wait ( 1 1$00 ) ;
26254: LD_INT 2100
26256: PPUSH
26257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26261: LD_STRING hideTroll();
26263: PPUSH
26264: CALL_OW 559
// end ;
26268: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26269: LD_EXP 70
26273: PUSH
26274: LD_EXP 96
26278: AND
26279: IFFALSE 26342
26281: GO 26283
26283: DISABLE
26284: LD_INT 0
26286: PPUSH
// begin p := 0 ;
26287: LD_ADDR_VAR 0 1
26291: PUSH
26292: LD_INT 0
26294: ST_TO_ADDR
// repeat game_speed := 1 ;
26295: LD_ADDR_OWVAR 65
26299: PUSH
26300: LD_INT 1
26302: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26303: LD_INT 35
26305: PPUSH
26306: CALL_OW 67
// p := p + 1 ;
26310: LD_ADDR_VAR 0 1
26314: PUSH
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 1
26322: PLUS
26323: ST_TO_ADDR
// until p >= 60 ;
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 60
26331: GREATEREQUAL
26332: IFFALSE 26295
// game_speed := 4 ;
26334: LD_ADDR_OWVAR 65
26338: PUSH
26339: LD_INT 4
26341: ST_TO_ADDR
// end ;
26342: PPOPN 1
26344: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26345: LD_EXP 70
26349: PUSH
26350: LD_EXP 97
26354: AND
26355: IFFALSE 26501
26357: GO 26359
26359: DISABLE
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26364: LD_ADDR_VAR 0 1
26368: PUSH
26369: LD_INT 22
26371: PUSH
26372: LD_OWVAR 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 30
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 30
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PPUSH
26413: CALL_OW 69
26417: ST_TO_ADDR
// if not depot then
26418: LD_VAR 0 1
26422: NOT
26423: IFFALSE 26427
// exit ;
26425: GO 26501
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26427: LD_ADDR_VAR 0 2
26431: PUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_INT 1
26439: PPUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 12
26449: ARRAY
26450: PPUSH
26451: CALL_OW 274
26455: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26456: LD_VAR 0 2
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26471: LD_VAR 0 2
26475: PPUSH
26476: LD_INT 2
26478: PPUSH
26479: LD_INT 0
26481: PPUSH
26482: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26486: LD_VAR 0 2
26490: PPUSH
26491: LD_INT 3
26493: PPUSH
26494: LD_INT 0
26496: PPUSH
26497: CALL_OW 277
// end ;
26501: PPOPN 2
26503: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26504: LD_EXP 70
26508: PUSH
26509: LD_EXP 98
26513: AND
26514: IFFALSE 26611
26516: GO 26518
26518: DISABLE
26519: LD_INT 0
26521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26522: LD_ADDR_VAR 0 1
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_OWVAR 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 21
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 3
26551: PUSH
26552: LD_INT 23
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: ST_TO_ADDR
// if not tmp then
26576: LD_VAR 0 1
26580: NOT
26581: IFFALSE 26585
// exit ;
26583: GO 26611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26585: LD_VAR 0 1
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 12
26602: ARRAY
26603: PPUSH
26604: LD_INT 200
26606: PPUSH
26607: CALL_OW 234
// end ;
26611: PPOPN 1
26613: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26614: LD_EXP 70
26618: PUSH
26619: LD_EXP 99
26623: AND
26624: IFFALSE 26703
26626: GO 26628
26628: DISABLE
26629: LD_INT 0
26631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: LD_INT 22
26639: PUSH
26640: LD_OWVAR 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 69
26667: ST_TO_ADDR
// if not tmp then
26668: LD_VAR 0 1
26672: NOT
26673: IFFALSE 26677
// exit ;
26675: GO 26703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26677: LD_VAR 0 1
26681: PUSH
26682: LD_INT 1
26684: PPUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 12
26694: ARRAY
26695: PPUSH
26696: LD_INT 60
26698: PPUSH
26699: CALL_OW 234
// end ;
26703: PPOPN 1
26705: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26706: LD_EXP 70
26710: PUSH
26711: LD_EXP 100
26715: AND
26716: IFFALSE 26815
26718: GO 26720
26720: DISABLE
26721: LD_INT 0
26723: PPUSH
26724: PPUSH
// begin enable ;
26725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26726: LD_ADDR_VAR 0 1
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_OWVAR 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 61
26745: PUSH
26746: EMPTY
26747: LIST
26748: PUSH
26749: LD_INT 33
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: PPUSH
26764: CALL_OW 69
26768: ST_TO_ADDR
// if not tmp then
26769: LD_VAR 0 1
26773: NOT
26774: IFFALSE 26778
// exit ;
26776: GO 26815
// for i in tmp do
26778: LD_ADDR_VAR 0 2
26782: PUSH
26783: LD_VAR 0 1
26787: PUSH
26788: FOR_IN
26789: IFFALSE 26813
// if IsControledBy ( i ) then
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 312
26800: IFFALSE 26811
// ComUnlink ( i ) ;
26802: LD_VAR 0 2
26806: PPUSH
26807: CALL_OW 136
26811: GO 26788
26813: POP
26814: POP
// end ;
26815: PPOPN 2
26817: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26818: LD_EXP 70
26822: PUSH
26823: LD_EXP 101
26827: AND
26828: IFFALSE 26968
26830: GO 26832
26832: DISABLE
26833: LD_INT 0
26835: PPUSH
26836: PPUSH
// begin ToLua ( displayPowell(); ) ;
26837: LD_STRING displayPowell();
26839: PPUSH
26840: CALL_OW 559
// uc_side := 0 ;
26844: LD_ADDR_OWVAR 20
26848: PUSH
26849: LD_INT 0
26851: ST_TO_ADDR
// uc_nation := 2 ;
26852: LD_ADDR_OWVAR 21
26856: PUSH
26857: LD_INT 2
26859: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26860: LD_ADDR_OWVAR 37
26864: PUSH
26865: LD_INT 14
26867: ST_TO_ADDR
// vc_engine := engine_siberite ;
26868: LD_ADDR_OWVAR 39
26872: PUSH
26873: LD_INT 3
26875: ST_TO_ADDR
// vc_control := control_apeman ;
26876: LD_ADDR_OWVAR 38
26880: PUSH
26881: LD_INT 5
26883: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26884: LD_ADDR_OWVAR 40
26888: PUSH
26889: LD_INT 29
26891: ST_TO_ADDR
// un := CreateVehicle ;
26892: LD_ADDR_VAR 0 2
26896: PUSH
26897: CALL_OW 45
26901: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26914: LD_INT 35
26916: PPUSH
26917: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26921: LD_VAR 0 2
26925: PPUSH
26926: LD_INT 22
26928: PUSH
26929: LD_OWVAR 2
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PPUSH
26938: CALL_OW 69
26942: PPUSH
26943: LD_VAR 0 2
26947: PPUSH
26948: CALL_OW 74
26952: PPUSH
26953: CALL_OW 115
// until IsDead ( un ) ;
26957: LD_VAR 0 2
26961: PPUSH
26962: CALL_OW 301
26966: IFFALSE 26914
// end ;
26968: PPOPN 2
26970: END
// every 0 0$1 trigger StreamModeActive and sStu do
26971: LD_EXP 70
26975: PUSH
26976: LD_EXP 109
26980: AND
26981: IFFALSE 26997
26983: GO 26985
26985: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26986: LD_STRING displayStucuk();
26988: PPUSH
26989: CALL_OW 559
// ResetFog ;
26993: CALL_OW 335
// end ;
26997: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26998: LD_EXP 70
27002: PUSH
27003: LD_EXP 102
27007: AND
27008: IFFALSE 27149
27010: GO 27012
27012: DISABLE
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27017: LD_ADDR_VAR 0 2
27021: PUSH
27022: LD_INT 22
27024: PUSH
27025: LD_OWVAR 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 21
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: ST_TO_ADDR
// if not tmp then
27053: LD_VAR 0 2
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27149
// un := tmp [ rand ( 1 , tmp ) ] ;
27062: LD_ADDR_VAR 0 1
27066: PUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_INT 1
27074: PPUSH
27075: LD_VAR 0 2
27079: PPUSH
27080: CALL_OW 12
27084: ARRAY
27085: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_INT 0
27093: PPUSH
27094: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27098: LD_VAR 0 1
27102: PPUSH
27103: LD_OWVAR 3
27107: PUSH
27108: LD_VAR 0 1
27112: DIFF
27113: PPUSH
27114: LD_VAR 0 1
27118: PPUSH
27119: CALL_OW 74
27123: PPUSH
27124: CALL_OW 115
// wait ( 0 0$20 ) ;
27128: LD_INT 700
27130: PPUSH
27131: CALL_OW 67
// SetSide ( un , your_side ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_OWVAR 2
27144: PPUSH
27145: CALL_OW 235
// end ;
27149: PPOPN 2
27151: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27152: LD_EXP 70
27156: PUSH
27157: LD_EXP 103
27161: AND
27162: IFFALSE 27268
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 30
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 30
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PPUSH
27219: CALL_OW 69
27223: ST_TO_ADDR
// if not depot then
27224: LD_VAR 0 1
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27268
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: PPUSH
27242: CALL_OW 250
27246: PPUSH
27247: LD_VAR 0 1
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: PPUSH
27256: CALL_OW 251
27260: PPUSH
27261: LD_INT 70
27263: PPUSH
27264: CALL_OW 495
// end ;
27268: PPOPN 1
27270: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27271: LD_EXP 70
27275: PUSH
27276: LD_EXP 104
27280: AND
27281: IFFALSE 27492
27283: GO 27285
27285: DISABLE
27286: LD_INT 0
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
27292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27293: LD_ADDR_VAR 0 5
27297: PUSH
27298: LD_INT 22
27300: PUSH
27301: LD_OWVAR 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 21
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PPUSH
27324: CALL_OW 69
27328: ST_TO_ADDR
// if not tmp then
27329: LD_VAR 0 5
27333: NOT
27334: IFFALSE 27338
// exit ;
27336: GO 27492
// for i in tmp do
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: FOR_IN
27349: IFFALSE 27490
// begin d := rand ( 0 , 5 ) ;
27351: LD_ADDR_VAR 0 4
27355: PUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 5
27361: PPUSH
27362: CALL_OW 12
27366: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27367: LD_ADDR_VAR 0 2
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 250
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_INT 3
27389: PPUSH
27390: LD_INT 12
27392: PPUSH
27393: CALL_OW 12
27397: PPUSH
27398: CALL_OW 272
27402: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 251
27417: PPUSH
27418: LD_VAR 0 4
27422: PPUSH
27423: LD_INT 3
27425: PPUSH
27426: LD_INT 12
27428: PPUSH
27429: CALL_OW 12
27433: PPUSH
27434: CALL_OW 273
27438: ST_TO_ADDR
// if ValidHex ( x , y ) then
27439: LD_VAR 0 2
27443: PPUSH
27444: LD_VAR 0 3
27448: PPUSH
27449: CALL_OW 488
27453: IFFALSE 27488
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: LD_INT 3
27472: PPUSH
27473: LD_INT 6
27475: PPUSH
27476: CALL_OW 12
27480: PPUSH
27481: LD_INT 1
27483: PPUSH
27484: CALL_OW 483
// end ;
27488: GO 27348
27490: POP
27491: POP
// end ;
27492: PPOPN 5
27494: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27495: LD_EXP 70
27499: PUSH
27500: LD_EXP 105
27504: AND
27505: IFFALSE 27599
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 32
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 21
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: ST_TO_ADDR
// if not tmp then
27561: LD_VAR 0 2
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27599
// for i in tmp do
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_VAR 0 2
27579: PUSH
27580: FOR_IN
27581: IFFALSE 27597
// SetFuel ( i , 0 ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_INT 0
27590: PPUSH
27591: CALL_OW 240
27595: GO 27580
27597: POP
27598: POP
// end ;
27599: PPOPN 2
27601: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27602: LD_EXP 70
27606: PUSH
27607: LD_EXP 106
27611: AND
27612: IFFALSE 27678
27614: GO 27616
27616: DISABLE
27617: LD_INT 0
27619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: LD_INT 22
27627: PUSH
27628: LD_OWVAR 2
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 30
27639: PUSH
27640: LD_INT 29
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 69
27655: ST_TO_ADDR
// if not tmp then
27656: LD_VAR 0 1
27660: NOT
27661: IFFALSE 27665
// exit ;
27663: GO 27678
// DestroyUnit ( tmp [ 1 ] ) ;
27665: LD_VAR 0 1
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: CALL_OW 65
// end ;
27678: PPOPN 1
27680: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27681: LD_EXP 70
27685: PUSH
27686: LD_EXP 108
27690: AND
27691: IFFALSE 27820
27693: GO 27695
27695: DISABLE
27696: LD_INT 0
27698: PPUSH
// begin uc_side := 0 ;
27699: LD_ADDR_OWVAR 20
27703: PUSH
27704: LD_INT 0
27706: ST_TO_ADDR
// uc_nation := nation_arabian ;
27707: LD_ADDR_OWVAR 21
27711: PUSH
27712: LD_INT 2
27714: ST_TO_ADDR
// hc_gallery :=  ;
27715: LD_ADDR_OWVAR 33
27719: PUSH
27720: LD_STRING 
27722: ST_TO_ADDR
// hc_name :=  ;
27723: LD_ADDR_OWVAR 26
27727: PUSH
27728: LD_STRING 
27730: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27731: LD_INT 1
27733: PPUSH
27734: LD_INT 11
27736: PPUSH
27737: LD_INT 10
27739: PPUSH
27740: CALL_OW 380
// un := CreateHuman ;
27744: LD_ADDR_VAR 0 1
27748: PUSH
27749: CALL_OW 44
27753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27754: LD_VAR 0 1
27758: PPUSH
27759: LD_INT 1
27761: PPUSH
27762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27766: LD_INT 35
27768: PPUSH
27769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_INT 22
27780: PUSH
27781: LD_OWVAR 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: PPUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 74
27804: PPUSH
27805: CALL_OW 115
// until IsDead ( un ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: CALL_OW 301
27818: IFFALSE 27766
// end ;
27820: PPOPN 1
27822: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27823: LD_EXP 70
27827: PUSH
27828: LD_EXP 110
27832: AND
27833: IFFALSE 27845
27835: GO 27837
27837: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27838: LD_STRING earthquake(getX(game), 0, 32)
27840: PPUSH
27841: CALL_OW 559
27845: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27846: LD_EXP 70
27850: PUSH
27851: LD_EXP 111
27855: AND
27856: IFFALSE 27947
27858: GO 27860
27860: DISABLE
27861: LD_INT 0
27863: PPUSH
// begin enable ;
27864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27865: LD_ADDR_VAR 0 1
27869: PUSH
27870: LD_INT 22
27872: PUSH
27873: LD_OWVAR 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 21
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 33
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 69
27911: ST_TO_ADDR
// if not tmp then
27912: LD_VAR 0 1
27916: NOT
27917: IFFALSE 27921
// exit ;
27919: GO 27947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27921: LD_VAR 0 1
27925: PUSH
27926: LD_INT 1
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 12
27938: ARRAY
27939: PPUSH
27940: LD_INT 1
27942: PPUSH
27943: CALL_OW 234
// end ;
27947: PPOPN 1
27949: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27950: LD_EXP 70
27954: PUSH
27955: LD_EXP 112
27959: AND
27960: IFFALSE 28101
27962: GO 27964
27964: DISABLE
27965: LD_INT 0
27967: PPUSH
27968: PPUSH
27969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27970: LD_ADDR_VAR 0 3
27974: PUSH
27975: LD_INT 22
27977: PUSH
27978: LD_OWVAR 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 25
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: ST_TO_ADDR
// if not tmp then
28006: LD_VAR 0 3
28010: NOT
28011: IFFALSE 28015
// exit ;
28013: GO 28101
// un := tmp [ rand ( 1 , tmp ) ] ;
28015: LD_ADDR_VAR 0 2
28019: PUSH
28020: LD_VAR 0 3
28024: PUSH
28025: LD_INT 1
28027: PPUSH
28028: LD_VAR 0 3
28032: PPUSH
28033: CALL_OW 12
28037: ARRAY
28038: ST_TO_ADDR
// if Crawls ( un ) then
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 318
28048: IFFALSE 28059
// ComWalk ( un ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28059: LD_VAR 0 2
28063: PPUSH
28064: LD_INT 9
28066: PPUSH
28067: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28071: LD_INT 28
28073: PPUSH
28074: LD_OWVAR 2
28078: PPUSH
28079: LD_INT 2
28081: PPUSH
28082: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28086: LD_INT 29
28088: PPUSH
28089: LD_OWVAR 2
28093: PPUSH
28094: LD_INT 2
28096: PPUSH
28097: CALL_OW 322
// end ;
28101: PPOPN 3
28103: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28104: LD_EXP 70
28108: PUSH
28109: LD_EXP 113
28113: AND
28114: IFFALSE 28225
28116: GO 28118
28118: DISABLE
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 25
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 69
28159: ST_TO_ADDR
// if not tmp then
28160: LD_VAR 0 3
28164: NOT
28165: IFFALSE 28169
// exit ;
28167: GO 28225
// un := tmp [ rand ( 1 , tmp ) ] ;
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: LD_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL_OW 12
28191: ARRAY
28192: ST_TO_ADDR
// if Crawls ( un ) then
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 318
28202: IFFALSE 28213
// ComWalk ( un ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_INT 8
28220: PPUSH
28221: CALL_OW 336
// end ;
28225: PPOPN 3
28227: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28228: LD_EXP 70
28232: PUSH
28233: LD_EXP 114
28237: AND
28238: IFFALSE 28382
28240: GO 28242
28242: DISABLE
28243: LD_INT 0
28245: PPUSH
28246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28247: LD_ADDR_VAR 0 2
28251: PUSH
28252: LD_INT 22
28254: PUSH
28255: LD_OWVAR 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: LD_INT 34
28279: PUSH
28280: LD_INT 12
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 34
28289: PUSH
28290: LD_INT 51
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 34
28299: PUSH
28300: LD_INT 32
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: PPUSH
28318: CALL_OW 69
28322: ST_TO_ADDR
// if not tmp then
28323: LD_VAR 0 2
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28382
// for i in tmp do
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: LD_VAR 0 2
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28380
// if GetCargo ( i , mat_artifact ) = 0 then
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_INT 4
28352: PPUSH
28353: CALL_OW 289
28357: PUSH
28358: LD_INT 0
28360: EQUAL
28361: IFFALSE 28378
// SetCargo ( i , mat_siberit , 100 ) ;
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_INT 3
28370: PPUSH
28371: LD_INT 100
28373: PPUSH
28374: CALL_OW 290
28378: GO 28342
28380: POP
28381: POP
// end ;
28382: PPOPN 2
28384: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28385: LD_EXP 70
28389: PUSH
28390: LD_EXP 115
28394: AND
28395: IFFALSE 28578
28397: GO 28399
28399: DISABLE
28400: LD_INT 0
28402: PPUSH
28403: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28404: LD_ADDR_VAR 0 2
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_OWVAR 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL_OW 69
28425: ST_TO_ADDR
// if not tmp then
28426: LD_VAR 0 2
28430: NOT
28431: IFFALSE 28435
// exit ;
28433: GO 28578
// for i := 1 to 2 do
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: DOUBLE
28441: LD_INT 1
28443: DEC
28444: ST_TO_ADDR
28445: LD_INT 2
28447: PUSH
28448: FOR_TO
28449: IFFALSE 28576
// begin uc_side := your_side ;
28451: LD_ADDR_OWVAR 20
28455: PUSH
28456: LD_OWVAR 2
28460: ST_TO_ADDR
// uc_nation := nation_american ;
28461: LD_ADDR_OWVAR 21
28465: PUSH
28466: LD_INT 1
28468: ST_TO_ADDR
// vc_chassis := us_morphling ;
28469: LD_ADDR_OWVAR 37
28473: PUSH
28474: LD_INT 5
28476: ST_TO_ADDR
// vc_engine := engine_siberite ;
28477: LD_ADDR_OWVAR 39
28481: PUSH
28482: LD_INT 3
28484: ST_TO_ADDR
// vc_control := control_computer ;
28485: LD_ADDR_OWVAR 38
28489: PUSH
28490: LD_INT 3
28492: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28493: LD_ADDR_OWVAR 40
28497: PUSH
28498: LD_INT 10
28500: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28501: LD_VAR 0 2
28505: PUSH
28506: LD_INT 1
28508: ARRAY
28509: PPUSH
28510: CALL_OW 310
28514: NOT
28515: IFFALSE 28562
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28517: CALL_OW 45
28521: PPUSH
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: PPUSH
28531: CALL_OW 250
28535: PPUSH
28536: LD_VAR 0 2
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: CALL_OW 251
28549: PPUSH
28550: LD_INT 12
28552: PPUSH
28553: LD_INT 1
28555: PPUSH
28556: CALL_OW 50
28560: GO 28574
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28562: CALL_OW 45
28566: PPUSH
28567: LD_INT 1
28569: PPUSH
28570: CALL_OW 51
// end ;
28574: GO 28448
28576: POP
28577: POP
// end ;
28578: PPOPN 2
28580: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28581: LD_EXP 70
28585: PUSH
28586: LD_EXP 116
28590: AND
28591: IFFALSE 28813
28593: GO 28595
28595: DISABLE
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28604: LD_ADDR_VAR 0 6
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_OWVAR 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 21
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 3
28633: PUSH
28634: LD_INT 23
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: PPUSH
28653: CALL_OW 69
28657: ST_TO_ADDR
// if not tmp then
28658: LD_VAR 0 6
28662: NOT
28663: IFFALSE 28667
// exit ;
28665: GO 28813
// s1 := rand ( 1 , 4 ) ;
28667: LD_ADDR_VAR 0 2
28671: PUSH
28672: LD_INT 1
28674: PPUSH
28675: LD_INT 4
28677: PPUSH
28678: CALL_OW 12
28682: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28683: LD_ADDR_VAR 0 4
28687: PUSH
28688: LD_VAR 0 6
28692: PUSH
28693: LD_INT 1
28695: ARRAY
28696: PPUSH
28697: LD_VAR 0 2
28701: PPUSH
28702: CALL_OW 259
28706: ST_TO_ADDR
// if s1 = 1 then
28707: LD_VAR 0 2
28711: PUSH
28712: LD_INT 1
28714: EQUAL
28715: IFFALSE 28735
// s2 := rand ( 2 , 4 ) else
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 2
28724: PPUSH
28725: LD_INT 4
28727: PPUSH
28728: CALL_OW 12
28732: ST_TO_ADDR
28733: GO 28743
// s2 := 1 ;
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28743: LD_ADDR_VAR 0 5
28747: PUSH
28748: LD_VAR 0 6
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 259
28766: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28767: LD_VAR 0 6
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 2
28780: PPUSH
28781: LD_VAR 0 5
28785: PPUSH
28786: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28790: LD_VAR 0 6
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PPUSH
28799: LD_VAR 0 3
28803: PPUSH
28804: LD_VAR 0 4
28808: PPUSH
28809: CALL_OW 237
// end ;
28813: PPOPN 6
28815: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28816: LD_EXP 70
28820: PUSH
28821: LD_EXP 117
28825: AND
28826: IFFALSE 28905
28828: GO 28830
28830: DISABLE
28831: LD_INT 0
28833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28834: LD_ADDR_VAR 0 1
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: LD_OWVAR 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 30
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: ST_TO_ADDR
// if not tmp then
28870: LD_VAR 0 1
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 28905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28879: LD_VAR 0 1
28883: PUSH
28884: LD_INT 1
28886: PPUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: CALL_OW 12
28896: ARRAY
28897: PPUSH
28898: LD_INT 1
28900: PPUSH
28901: CALL_OW 234
// end ;
28905: PPOPN 1
28907: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28908: LD_EXP 70
28912: PUSH
28913: LD_EXP 118
28917: AND
28918: IFFALSE 29030
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28927: LD_ADDR_VAR 0 2
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 30
28949: PUSH
28950: LD_INT 27
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: LD_INT 26
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 30
28969: PUSH
28970: LD_INT 28
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PPUSH
28987: CALL_OW 69
28991: ST_TO_ADDR
// if not tmp then
28992: LD_VAR 0 2
28996: NOT
28997: IFFALSE 29001
// exit ;
28999: GO 29030
// for i in tmp do
29001: LD_ADDR_VAR 0 1
29005: PUSH
29006: LD_VAR 0 2
29010: PUSH
29011: FOR_IN
29012: IFFALSE 29028
// SetLives ( i , 1 ) ;
29014: LD_VAR 0 1
29018: PPUSH
29019: LD_INT 1
29021: PPUSH
29022: CALL_OW 234
29026: GO 29011
29028: POP
29029: POP
// end ;
29030: PPOPN 2
29032: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29033: LD_EXP 70
29037: PUSH
29038: LD_EXP 119
29042: AND
29043: IFFALSE 29317
29045: GO 29047
29047: DISABLE
29048: LD_INT 0
29050: PPUSH
29051: PPUSH
29052: PPUSH
// begin i := rand ( 1 , 7 ) ;
29053: LD_ADDR_VAR 0 1
29057: PUSH
29058: LD_INT 1
29060: PPUSH
29061: LD_INT 7
29063: PPUSH
29064: CALL_OW 12
29068: ST_TO_ADDR
// case i of 1 :
29069: LD_VAR 0 1
29073: PUSH
29074: LD_INT 1
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29092
29082: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29083: LD_STRING earthquake(getX(game), 0, 32)
29085: PPUSH
29086: CALL_OW 559
29090: GO 29317
29092: LD_INT 2
29094: DOUBLE
29095: EQUAL
29096: IFTRUE 29100
29098: GO 29114
29100: POP
// begin ToLua ( displayStucuk(); ) ;
29101: LD_STRING displayStucuk();
29103: PPUSH
29104: CALL_OW 559
// ResetFog ;
29108: CALL_OW 335
// end ; 3 :
29112: GO 29317
29114: LD_INT 3
29116: DOUBLE
29117: EQUAL
29118: IFTRUE 29122
29120: GO 29226
29122: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29123: LD_ADDR_VAR 0 2
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_OWVAR 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 25
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: ST_TO_ADDR
// if not tmp then
29159: LD_VAR 0 2
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29317
// un := tmp [ rand ( 1 , tmp ) ] ;
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: LD_VAR 0 2
29177: PUSH
29178: LD_INT 1
29180: PPUSH
29181: LD_VAR 0 2
29185: PPUSH
29186: CALL_OW 12
29190: ARRAY
29191: ST_TO_ADDR
// if Crawls ( un ) then
29192: LD_VAR 0 3
29196: PPUSH
29197: CALL_OW 318
29201: IFFALSE 29212
// ComWalk ( un ) ;
29203: LD_VAR 0 3
29207: PPUSH
29208: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29212: LD_VAR 0 3
29216: PPUSH
29217: LD_INT 8
29219: PPUSH
29220: CALL_OW 336
// end ; 4 :
29224: GO 29317
29226: LD_INT 4
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29295
29234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29235: LD_ADDR_VAR 0 2
29239: PUSH
29240: LD_INT 22
29242: PUSH
29243: LD_OWVAR 2
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 30
29254: PUSH
29255: LD_INT 29
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PPUSH
29266: CALL_OW 69
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 2
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29317
// DestroyUnit ( tmp [ 1 ] ) ;
29280: LD_VAR 0 2
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 65
// end ; 5 .. 7 :
29293: GO 29317
29295: LD_INT 5
29297: DOUBLE
29298: GREATEREQUAL
29299: IFFALSE 29307
29301: LD_INT 7
29303: DOUBLE
29304: LESSEQUAL
29305: IFTRUE 29309
29307: GO 29316
29309: POP
// StreamSibBomb ; end ;
29310: CALL 25567 0 0
29314: GO 29317
29316: POP
// end ;
29317: PPOPN 3
29319: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29320: LD_EXP 70
29324: PUSH
29325: LD_EXP 120
29329: AND
29330: IFFALSE 29486
29332: GO 29334
29334: DISABLE
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29340: LD_ADDR_VAR 0 2
29344: PUSH
29345: LD_INT 81
29347: PUSH
29348: LD_OWVAR 2
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 21
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 21
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PPUSH
29389: CALL_OW 69
29393: ST_TO_ADDR
// if not tmp then
29394: LD_VAR 0 2
29398: NOT
29399: IFFALSE 29403
// exit ;
29401: GO 29486
// p := 0 ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_INT 0
29410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29411: LD_INT 35
29413: PPUSH
29414: CALL_OW 67
// p := p + 1 ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_VAR 0 3
29427: PUSH
29428: LD_INT 1
29430: PLUS
29431: ST_TO_ADDR
// for i in tmp do
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: LD_VAR 0 2
29441: PUSH
29442: FOR_IN
29443: IFFALSE 29474
// if GetLives ( i ) < 1000 then
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 256
29454: PUSH
29455: LD_INT 1000
29457: LESS
29458: IFFALSE 29472
// SetLives ( i , 1000 ) ;
29460: LD_VAR 0 1
29464: PPUSH
29465: LD_INT 1000
29467: PPUSH
29468: CALL_OW 234
29472: GO 29442
29474: POP
29475: POP
// until p > 20 ;
29476: LD_VAR 0 3
29480: PUSH
29481: LD_INT 20
29483: GREATER
29484: IFFALSE 29411
// end ;
29486: PPOPN 3
29488: END
// every 0 0$1 trigger StreamModeActive and sTime do
29489: LD_EXP 70
29493: PUSH
29494: LD_EXP 121
29498: AND
29499: IFFALSE 29534
29501: GO 29503
29503: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29504: LD_INT 28
29506: PPUSH
29507: LD_OWVAR 2
29511: PPUSH
29512: LD_INT 2
29514: PPUSH
29515: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29519: LD_INT 30
29521: PPUSH
29522: LD_OWVAR 2
29526: PPUSH
29527: LD_INT 2
29529: PPUSH
29530: CALL_OW 322
// end ;
29534: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29535: LD_EXP 70
29539: PUSH
29540: LD_EXP 122
29544: AND
29545: IFFALSE 29666
29547: GO 29549
29549: DISABLE
29550: LD_INT 0
29552: PPUSH
29553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29554: LD_ADDR_VAR 0 2
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 21
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 23
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 2
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29666
// for i in tmp do
29617: LD_ADDR_VAR 0 1
29621: PUSH
29622: LD_VAR 0 2
29626: PUSH
29627: FOR_IN
29628: IFFALSE 29664
// begin if Crawls ( i ) then
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL_OW 318
29639: IFFALSE 29650
// ComWalk ( i ) ;
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 138
// SetClass ( i , 2 ) ;
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_INT 2
29657: PPUSH
29658: CALL_OW 336
// end ;
29662: GO 29627
29664: POP
29665: POP
// end ;
29666: PPOPN 2
29668: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29669: LD_EXP 70
29673: PUSH
29674: LD_EXP 123
29678: AND
29679: IFFALSE 29960
29681: GO 29683
29683: DISABLE
29684: LD_INT 0
29686: PPUSH
29687: PPUSH
29688: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29689: LD_OWVAR 2
29693: PPUSH
29694: LD_INT 9
29696: PPUSH
29697: LD_INT 1
29699: PPUSH
29700: LD_INT 1
29702: PPUSH
29703: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29707: LD_INT 9
29709: PPUSH
29710: LD_OWVAR 2
29714: PPUSH
29715: CALL_OW 343
// uc_side := 9 ;
29719: LD_ADDR_OWVAR 20
29723: PUSH
29724: LD_INT 9
29726: ST_TO_ADDR
// uc_nation := 2 ;
29727: LD_ADDR_OWVAR 21
29731: PUSH
29732: LD_INT 2
29734: ST_TO_ADDR
// hc_name := Dark Warrior ;
29735: LD_ADDR_OWVAR 26
29739: PUSH
29740: LD_STRING Dark Warrior
29742: ST_TO_ADDR
// hc_gallery :=  ;
29743: LD_ADDR_OWVAR 33
29747: PUSH
29748: LD_STRING 
29750: ST_TO_ADDR
// hc_noskilllimit := true ;
29751: LD_ADDR_OWVAR 76
29755: PUSH
29756: LD_INT 1
29758: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29759: LD_ADDR_OWVAR 31
29763: PUSH
29764: LD_INT 30
29766: PUSH
29767: LD_INT 30
29769: PUSH
29770: LD_INT 30
29772: PUSH
29773: LD_INT 30
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// un := CreateHuman ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: CALL_OW 44
29791: ST_TO_ADDR
// hc_noskilllimit := false ;
29792: LD_ADDR_OWVAR 76
29796: PUSH
29797: LD_INT 0
29799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29800: LD_VAR 0 3
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: CALL_OW 51
// p := 0 ;
29812: LD_ADDR_VAR 0 2
29816: PUSH
29817: LD_INT 0
29819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29820: LD_INT 35
29822: PPUSH
29823: CALL_OW 67
// p := p + 1 ;
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: PLUS
29840: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29841: LD_VAR 0 3
29845: PPUSH
29846: CALL_OW 256
29850: PUSH
29851: LD_INT 1000
29853: LESS
29854: IFFALSE 29868
// SetLives ( un , 1000 ) ;
29856: LD_VAR 0 3
29860: PPUSH
29861: LD_INT 1000
29863: PPUSH
29864: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29868: LD_VAR 0 3
29872: PPUSH
29873: LD_INT 81
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 91
29887: PUSH
29888: LD_VAR 0 3
29892: PUSH
29893: LD_INT 30
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PPUSH
29905: CALL_OW 69
29909: PPUSH
29910: LD_VAR 0 3
29914: PPUSH
29915: CALL_OW 74
29919: PPUSH
29920: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29924: LD_VAR 0 2
29928: PUSH
29929: LD_INT 60
29931: GREATER
29932: PUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: CALL_OW 301
29942: OR
29943: IFFALSE 29820
// if un then
29945: LD_VAR 0 3
29949: IFFALSE 29960
// RemoveUnit ( un ) ;
29951: LD_VAR 0 3
29955: PPUSH
29956: CALL_OW 64
// end ;
29960: PPOPN 3
29962: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29963: LD_INT 0
29965: PPUSH
// case cmd of 301 :
29966: LD_VAR 0 1
29970: PUSH
29971: LD_INT 301
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30011
29979: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29980: LD_VAR 0 6
29984: PPUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 8
29994: PPUSH
29995: LD_VAR 0 4
29999: PPUSH
30000: LD_VAR 0 5
30004: PPUSH
30005: CALL 31212 0 5
30009: GO 30132
30011: LD_INT 302
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30056
30019: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30020: LD_VAR 0 6
30024: PPUSH
30025: LD_VAR 0 7
30029: PPUSH
30030: LD_VAR 0 8
30034: PPUSH
30035: LD_VAR 0 9
30039: PPUSH
30040: LD_VAR 0 4
30044: PPUSH
30045: LD_VAR 0 5
30049: PPUSH
30050: CALL 31303 0 6
30054: GO 30132
30056: LD_INT 303
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30101
30064: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30065: LD_VAR 0 6
30069: PPUSH
30070: LD_VAR 0 7
30074: PPUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: LD_VAR 0 9
30084: PPUSH
30085: LD_VAR 0 4
30089: PPUSH
30090: LD_VAR 0 5
30094: PPUSH
30095: CALL 30137 0 6
30099: GO 30132
30101: LD_INT 304
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30131
30109: POP
// hHackTeleport ( unit , x , y ) ; end ;
30110: LD_VAR 0 2
30114: PPUSH
30115: LD_VAR 0 4
30119: PPUSH
30120: LD_VAR 0 5
30124: PPUSH
30125: CALL 31896 0 3
30129: GO 30132
30131: POP
// end ;
30132: LD_VAR 0 12
30136: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 1
30148: LESS
30149: PUSH
30150: LD_VAR 0 1
30154: PUSH
30155: LD_INT 3
30157: GREATER
30158: OR
30159: PUSH
30160: LD_VAR 0 5
30164: PPUSH
30165: LD_VAR 0 6
30169: PPUSH
30170: CALL_OW 428
30174: OR
30175: IFFALSE 30179
// exit ;
30177: GO 30899
// uc_side := your_side ;
30179: LD_ADDR_OWVAR 20
30183: PUSH
30184: LD_OWVAR 2
30188: ST_TO_ADDR
// uc_nation := nation ;
30189: LD_ADDR_OWVAR 21
30193: PUSH
30194: LD_VAR 0 1
30198: ST_TO_ADDR
// bc_level = 1 ;
30199: LD_ADDR_OWVAR 43
30203: PUSH
30204: LD_INT 1
30206: ST_TO_ADDR
// case btype of 1 :
30207: LD_VAR 0 2
30211: PUSH
30212: LD_INT 1
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30231
30220: POP
// bc_type := b_depot ; 2 :
30221: LD_ADDR_OWVAR 42
30225: PUSH
30226: LD_INT 0
30228: ST_TO_ADDR
30229: GO 30843
30231: LD_INT 2
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30250
30239: POP
// bc_type := b_warehouse ; 3 :
30240: LD_ADDR_OWVAR 42
30244: PUSH
30245: LD_INT 1
30247: ST_TO_ADDR
30248: GO 30843
30250: LD_INT 3
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30269
30258: POP
// bc_type := b_lab ; 4 .. 9 :
30259: LD_ADDR_OWVAR 42
30263: PUSH
30264: LD_INT 6
30266: ST_TO_ADDR
30267: GO 30843
30269: LD_INT 4
30271: DOUBLE
30272: GREATEREQUAL
30273: IFFALSE 30281
30275: LD_INT 9
30277: DOUBLE
30278: LESSEQUAL
30279: IFTRUE 30283
30281: GO 30335
30283: POP
// begin bc_type := b_lab_half ;
30284: LD_ADDR_OWVAR 42
30288: PUSH
30289: LD_INT 7
30291: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30292: LD_ADDR_OWVAR 44
30296: PUSH
30297: LD_INT 10
30299: PUSH
30300: LD_INT 11
30302: PUSH
30303: LD_INT 12
30305: PUSH
30306: LD_INT 15
30308: PUSH
30309: LD_INT 14
30311: PUSH
30312: LD_INT 13
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: LD_INT 3
30330: MINUS
30331: ARRAY
30332: ST_TO_ADDR
// end ; 10 .. 13 :
30333: GO 30843
30335: LD_INT 10
30337: DOUBLE
30338: GREATEREQUAL
30339: IFFALSE 30347
30341: LD_INT 13
30343: DOUBLE
30344: LESSEQUAL
30345: IFTRUE 30349
30347: GO 30426
30349: POP
// begin bc_type := b_lab_full ;
30350: LD_ADDR_OWVAR 42
30354: PUSH
30355: LD_INT 8
30357: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30358: LD_ADDR_OWVAR 44
30362: PUSH
30363: LD_INT 10
30365: PUSH
30366: LD_INT 12
30368: PUSH
30369: LD_INT 14
30371: PUSH
30372: LD_INT 13
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: LD_VAR 0 2
30385: PUSH
30386: LD_INT 9
30388: MINUS
30389: ARRAY
30390: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30391: LD_ADDR_OWVAR 45
30395: PUSH
30396: LD_INT 11
30398: PUSH
30399: LD_INT 15
30401: PUSH
30402: LD_INT 12
30404: PUSH
30405: LD_INT 15
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: PUSH
30414: LD_VAR 0 2
30418: PUSH
30419: LD_INT 9
30421: MINUS
30422: ARRAY
30423: ST_TO_ADDR
// end ; 14 :
30424: GO 30843
30426: LD_INT 14
30428: DOUBLE
30429: EQUAL
30430: IFTRUE 30434
30432: GO 30445
30434: POP
// bc_type := b_workshop ; 15 :
30435: LD_ADDR_OWVAR 42
30439: PUSH
30440: LD_INT 2
30442: ST_TO_ADDR
30443: GO 30843
30445: LD_INT 15
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30464
30453: POP
// bc_type := b_factory ; 16 :
30454: LD_ADDR_OWVAR 42
30458: PUSH
30459: LD_INT 3
30461: ST_TO_ADDR
30462: GO 30843
30464: LD_INT 16
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30483
30472: POP
// bc_type := b_ext_gun ; 17 :
30473: LD_ADDR_OWVAR 42
30477: PUSH
30478: LD_INT 17
30480: ST_TO_ADDR
30481: GO 30843
30483: LD_INT 17
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30519
30491: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 19
30499: PUSH
30500: LD_INT 23
30502: PUSH
30503: LD_INT 19
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: LD_VAR 0 1
30515: ARRAY
30516: ST_TO_ADDR
30517: GO 30843
30519: LD_INT 18
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30538
30527: POP
// bc_type := b_ext_radar ; 19 :
30528: LD_ADDR_OWVAR 42
30532: PUSH
30533: LD_INT 20
30535: ST_TO_ADDR
30536: GO 30843
30538: LD_INT 19
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30557
30546: POP
// bc_type := b_ext_radio ; 20 :
30547: LD_ADDR_OWVAR 42
30551: PUSH
30552: LD_INT 22
30554: ST_TO_ADDR
30555: GO 30843
30557: LD_INT 20
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30576
30565: POP
// bc_type := b_ext_siberium ; 21 :
30566: LD_ADDR_OWVAR 42
30570: PUSH
30571: LD_INT 21
30573: ST_TO_ADDR
30574: GO 30843
30576: LD_INT 21
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30595
30584: POP
// bc_type := b_ext_computer ; 22 :
30585: LD_ADDR_OWVAR 42
30589: PUSH
30590: LD_INT 24
30592: ST_TO_ADDR
30593: GO 30843
30595: LD_INT 22
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30614
30603: POP
// bc_type := b_ext_track ; 23 :
30604: LD_ADDR_OWVAR 42
30608: PUSH
30609: LD_INT 16
30611: ST_TO_ADDR
30612: GO 30843
30614: LD_INT 23
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30633
30622: POP
// bc_type := b_ext_laser ; 24 :
30623: LD_ADDR_OWVAR 42
30627: PUSH
30628: LD_INT 25
30630: ST_TO_ADDR
30631: GO 30843
30633: LD_INT 24
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30652
30641: POP
// bc_type := b_control_tower ; 25 :
30642: LD_ADDR_OWVAR 42
30646: PUSH
30647: LD_INT 36
30649: ST_TO_ADDR
30650: GO 30843
30652: LD_INT 25
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30671
30660: POP
// bc_type := b_breastwork ; 26 :
30661: LD_ADDR_OWVAR 42
30665: PUSH
30666: LD_INT 31
30668: ST_TO_ADDR
30669: GO 30843
30671: LD_INT 26
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30690
30679: POP
// bc_type := b_bunker ; 27 :
30680: LD_ADDR_OWVAR 42
30684: PUSH
30685: LD_INT 32
30687: ST_TO_ADDR
30688: GO 30843
30690: LD_INT 27
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// bc_type := b_turret ; 28 :
30699: LD_ADDR_OWVAR 42
30703: PUSH
30704: LD_INT 33
30706: ST_TO_ADDR
30707: GO 30843
30709: LD_INT 28
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30728
30717: POP
// bc_type := b_armoury ; 29 :
30718: LD_ADDR_OWVAR 42
30722: PUSH
30723: LD_INT 4
30725: ST_TO_ADDR
30726: GO 30843
30728: LD_INT 29
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30747
30736: POP
// bc_type := b_barracks ; 30 :
30737: LD_ADDR_OWVAR 42
30741: PUSH
30742: LD_INT 5
30744: ST_TO_ADDR
30745: GO 30843
30747: LD_INT 30
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30766
30755: POP
// bc_type := b_solar_power ; 31 :
30756: LD_ADDR_OWVAR 42
30760: PUSH
30761: LD_INT 27
30763: ST_TO_ADDR
30764: GO 30843
30766: LD_INT 31
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30785
30774: POP
// bc_type := b_oil_power ; 32 :
30775: LD_ADDR_OWVAR 42
30779: PUSH
30780: LD_INT 26
30782: ST_TO_ADDR
30783: GO 30843
30785: LD_INT 32
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30804
30793: POP
// bc_type := b_siberite_power ; 33 :
30794: LD_ADDR_OWVAR 42
30798: PUSH
30799: LD_INT 28
30801: ST_TO_ADDR
30802: GO 30843
30804: LD_INT 33
30806: DOUBLE
30807: EQUAL
30808: IFTRUE 30812
30810: GO 30823
30812: POP
// bc_type := b_oil_mine ; 34 :
30813: LD_ADDR_OWVAR 42
30817: PUSH
30818: LD_INT 29
30820: ST_TO_ADDR
30821: GO 30843
30823: LD_INT 34
30825: DOUBLE
30826: EQUAL
30827: IFTRUE 30831
30829: GO 30842
30831: POP
// bc_type := b_siberite_mine ; end ;
30832: LD_ADDR_OWVAR 42
30836: PUSH
30837: LD_INT 30
30839: ST_TO_ADDR
30840: GO 30843
30842: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30843: LD_ADDR_VAR 0 8
30847: PUSH
30848: LD_VAR 0 5
30852: PPUSH
30853: LD_VAR 0 6
30857: PPUSH
30858: LD_VAR 0 3
30862: PPUSH
30863: CALL_OW 47
30867: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30868: LD_OWVAR 42
30872: PUSH
30873: LD_INT 32
30875: PUSH
30876: LD_INT 33
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: IN
30883: IFFALSE 30899
// PlaceWeaponTurret ( b , weapon ) ;
30885: LD_VAR 0 8
30889: PPUSH
30890: LD_VAR 0 4
30894: PPUSH
30895: CALL_OW 431
// end ;
30899: LD_VAR 0 7
30903: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30910: LD_ADDR_VAR 0 4
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PPUSH
30959: CALL_OW 69
30963: ST_TO_ADDR
// if not tmp then
30964: LD_VAR 0 4
30968: NOT
30969: IFFALSE 30973
// exit ;
30971: GO 31032
// for i in tmp do
30973: LD_ADDR_VAR 0 2
30977: PUSH
30978: LD_VAR 0 4
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31030
// for j = 1 to 3 do
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: DOUBLE
30992: LD_INT 1
30994: DEC
30995: ST_TO_ADDR
30996: LD_INT 3
30998: PUSH
30999: FOR_TO
31000: IFFALSE 31026
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31002: LD_VAR 0 2
31006: PPUSH
31007: CALL_OW 274
31011: PPUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: LD_INT 99999
31019: PPUSH
31020: CALL_OW 277
31024: GO 30999
31026: POP
31027: POP
31028: GO 30983
31030: POP
31031: POP
// end ;
31032: LD_VAR 0 1
31036: RET
// export function hHackSetLevel10 ; var i , j ; begin
31037: LD_INT 0
31039: PPUSH
31040: PPUSH
31041: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31042: LD_ADDR_VAR 0 2
31046: PUSH
31047: LD_INT 21
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: PUSH
31062: FOR_IN
31063: IFFALSE 31115
// if IsSelected ( i ) then
31065: LD_VAR 0 2
31069: PPUSH
31070: CALL_OW 306
31074: IFFALSE 31113
// begin for j := 1 to 4 do
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: DOUBLE
31082: LD_INT 1
31084: DEC
31085: ST_TO_ADDR
31086: LD_INT 4
31088: PUSH
31089: FOR_TO
31090: IFFALSE 31111
// SetSkill ( i , j , 10 ) ;
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_VAR 0 3
31101: PPUSH
31102: LD_INT 10
31104: PPUSH
31105: CALL_OW 237
31109: GO 31089
31111: POP
31112: POP
// end ;
31113: GO 31062
31115: POP
31116: POP
// end ;
31117: LD_VAR 0 1
31121: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31127: LD_ADDR_VAR 0 2
31131: PUSH
31132: LD_INT 22
31134: PUSH
31135: LD_OWVAR 2
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31205
// begin for j := 1 to 4 do
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: DOUBLE
31172: LD_INT 1
31174: DEC
31175: ST_TO_ADDR
31176: LD_INT 4
31178: PUSH
31179: FOR_TO
31180: IFFALSE 31201
// SetSkill ( i , j , 10 ) ;
31182: LD_VAR 0 2
31186: PPUSH
31187: LD_VAR 0 3
31191: PPUSH
31192: LD_INT 10
31194: PPUSH
31195: CALL_OW 237
31199: GO 31179
31201: POP
31202: POP
// end ;
31203: GO 31163
31205: POP
31206: POP
// end ;
31207: LD_VAR 0 1
31211: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31212: LD_INT 0
31214: PPUSH
// uc_side := your_side ;
31215: LD_ADDR_OWVAR 20
31219: PUSH
31220: LD_OWVAR 2
31224: ST_TO_ADDR
// uc_nation := nation ;
31225: LD_ADDR_OWVAR 21
31229: PUSH
31230: LD_VAR 0 1
31234: ST_TO_ADDR
// InitHc ;
31235: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31239: LD_INT 0
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31256: LD_VAR 0 4
31260: PPUSH
31261: LD_VAR 0 5
31265: PPUSH
31266: CALL_OW 428
31270: PUSH
31271: LD_INT 0
31273: EQUAL
31274: IFFALSE 31298
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31276: CALL_OW 44
31280: PPUSH
31281: LD_VAR 0 4
31285: PPUSH
31286: LD_VAR 0 5
31290: PPUSH
31291: LD_INT 1
31293: PPUSH
31294: CALL_OW 48
// end ;
31298: LD_VAR 0 6
31302: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
// uc_side := your_side ;
31307: LD_ADDR_OWVAR 20
31311: PUSH
31312: LD_OWVAR 2
31316: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31317: LD_VAR 0 1
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: IN
31344: IFFALSE 31356
// uc_nation := nation_american else
31346: LD_ADDR_OWVAR 21
31350: PUSH
31351: LD_INT 1
31353: ST_TO_ADDR
31354: GO 31399
// if chassis in [ 11 , 12 , 13 , 14 ] then
31356: LD_VAR 0 1
31360: PUSH
31361: LD_INT 11
31363: PUSH
31364: LD_INT 12
31366: PUSH
31367: LD_INT 13
31369: PUSH
31370: LD_INT 14
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: IN
31379: IFFALSE 31391
// uc_nation := nation_arabian else
31381: LD_ADDR_OWVAR 21
31385: PUSH
31386: LD_INT 2
31388: ST_TO_ADDR
31389: GO 31399
// uc_nation := nation_russian ;
31391: LD_ADDR_OWVAR 21
31395: PUSH
31396: LD_INT 3
31398: ST_TO_ADDR
// vc_chassis := chassis ;
31399: LD_ADDR_OWVAR 37
31403: PUSH
31404: LD_VAR 0 1
31408: ST_TO_ADDR
// vc_engine := engine ;
31409: LD_ADDR_OWVAR 39
31413: PUSH
31414: LD_VAR 0 2
31418: ST_TO_ADDR
// vc_control := control ;
31419: LD_ADDR_OWVAR 38
31423: PUSH
31424: LD_VAR 0 3
31428: ST_TO_ADDR
// vc_weapon := weapon ;
31429: LD_ADDR_OWVAR 40
31433: PUSH
31434: LD_VAR 0 4
31438: ST_TO_ADDR
// un := CreateVehicle ;
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: CALL_OW 45
31448: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_INT 0
31456: PPUSH
31457: LD_INT 5
31459: PPUSH
31460: CALL_OW 12
31464: PPUSH
31465: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31469: LD_VAR 0 8
31473: PPUSH
31474: LD_VAR 0 5
31478: PPUSH
31479: LD_VAR 0 6
31483: PPUSH
31484: LD_INT 1
31486: PPUSH
31487: CALL_OW 48
// end ;
31491: LD_VAR 0 7
31495: RET
// export hInvincible ; every 1 do
31496: GO 31498
31498: DISABLE
// hInvincible := [ ] ;
31499: LD_ADDR_EXP 124
31503: PUSH
31504: EMPTY
31505: ST_TO_ADDR
31506: END
// every 10 do var i ;
31507: GO 31509
31509: DISABLE
31510: LD_INT 0
31512: PPUSH
// begin enable ;
31513: ENABLE
// if not hInvincible then
31514: LD_EXP 124
31518: NOT
31519: IFFALSE 31523
// exit ;
31521: GO 31567
// for i in hInvincible do
31523: LD_ADDR_VAR 0 1
31527: PUSH
31528: LD_EXP 124
31532: PUSH
31533: FOR_IN
31534: IFFALSE 31565
// if GetLives ( i ) < 1000 then
31536: LD_VAR 0 1
31540: PPUSH
31541: CALL_OW 256
31545: PUSH
31546: LD_INT 1000
31548: LESS
31549: IFFALSE 31563
// SetLives ( i , 1000 ) ;
31551: LD_VAR 0 1
31555: PPUSH
31556: LD_INT 1000
31558: PPUSH
31559: CALL_OW 234
31563: GO 31533
31565: POP
31566: POP
// end ;
31567: PPOPN 1
31569: END
// export function hHackInvincible ; var i ; begin
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31574: LD_ADDR_VAR 0 2
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 21
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: PPUSH
31607: CALL_OW 69
31611: PUSH
31612: FOR_IN
31613: IFFALSE 31674
// if IsSelected ( i ) then
31615: LD_VAR 0 2
31619: PPUSH
31620: CALL_OW 306
31624: IFFALSE 31672
// begin if i in hInvincible then
31626: LD_VAR 0 2
31630: PUSH
31631: LD_EXP 124
31635: IN
31636: IFFALSE 31656
// hInvincible := hInvincible diff i else
31638: LD_ADDR_EXP 124
31642: PUSH
31643: LD_EXP 124
31647: PUSH
31648: LD_VAR 0 2
31652: DIFF
31653: ST_TO_ADDR
31654: GO 31672
// hInvincible := hInvincible union i ;
31656: LD_ADDR_EXP 124
31660: PUSH
31661: LD_EXP 124
31665: PUSH
31666: LD_VAR 0 2
31670: UNION
31671: ST_TO_ADDR
// end ;
31672: GO 31612
31674: POP
31675: POP
// end ;
31676: LD_VAR 0 1
31680: RET
// export function hHackInvisible ; var i , j ; begin
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
31685: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31686: LD_ADDR_VAR 0 2
31690: PUSH
31691: LD_INT 21
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PPUSH
31701: CALL_OW 69
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31731
// if IsSelected ( i ) then
31709: LD_VAR 0 2
31713: PPUSH
31714: CALL_OW 306
31718: IFFALSE 31729
// ComForceInvisible ( i ) ;
31720: LD_VAR 0 2
31724: PPUSH
31725: CALL_OW 496
31729: GO 31706
31731: POP
31732: POP
// end ;
31733: LD_VAR 0 1
31737: RET
// export function hHackChangeYourSide ; begin
31738: LD_INT 0
31740: PPUSH
// if your_side = 8 then
31741: LD_OWVAR 2
31745: PUSH
31746: LD_INT 8
31748: EQUAL
31749: IFFALSE 31761
// your_side := 0 else
31751: LD_ADDR_OWVAR 2
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
31759: GO 31775
// your_side := your_side + 1 ;
31761: LD_ADDR_OWVAR 2
31765: PUSH
31766: LD_OWVAR 2
31770: PUSH
31771: LD_INT 1
31773: PLUS
31774: ST_TO_ADDR
// end ;
31775: LD_VAR 0 1
31779: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31780: LD_INT 0
31782: PPUSH
31783: PPUSH
31784: PPUSH
// for i in all_units do
31785: LD_ADDR_VAR 0 2
31789: PUSH
31790: LD_OWVAR 3
31794: PUSH
31795: FOR_IN
31796: IFFALSE 31874
// if IsSelected ( i ) then
31798: LD_VAR 0 2
31802: PPUSH
31803: CALL_OW 306
31807: IFFALSE 31872
// begin j := GetSide ( i ) ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_VAR 0 2
31818: PPUSH
31819: CALL_OW 255
31823: ST_TO_ADDR
// if j = 8 then
31824: LD_VAR 0 3
31828: PUSH
31829: LD_INT 8
31831: EQUAL
31832: IFFALSE 31844
// j := 0 else
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
31842: GO 31858
// j := j + 1 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_VAR 0 3
31853: PUSH
31854: LD_INT 1
31856: PLUS
31857: ST_TO_ADDR
// SetSide ( i , j ) ;
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_VAR 0 3
31867: PPUSH
31868: CALL_OW 235
// end ;
31872: GO 31795
31874: POP
31875: POP
// end ;
31876: LD_VAR 0 1
31880: RET
// export function hHackFog ; begin
31881: LD_INT 0
31883: PPUSH
// FogOff ( true ) ;
31884: LD_INT 1
31886: PPUSH
31887: CALL_OW 344
// end ;
31891: LD_VAR 0 1
31895: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31896: LD_INT 0
31898: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31899: LD_VAR 0 1
31903: PPUSH
31904: LD_VAR 0 2
31908: PPUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: LD_INT 1
31919: PPUSH
31920: CALL_OW 483
// CenterOnXY ( x , y ) ;
31924: LD_VAR 0 2
31928: PPUSH
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL_OW 84
// end ; end_of_file
31938: LD_VAR 0 4
31942: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 264
31958: PUSH
31959: LD_EXP 58
31963: EQUAL
31964: IFFALSE 32036
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31966: LD_INT 68
31968: PPUSH
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 255
31978: PPUSH
31979: CALL_OW 321
31983: PUSH
31984: LD_INT 2
31986: EQUAL
31987: IFFALSE 31999
// eff := 70 else
31989: LD_ADDR_VAR 0 4
31993: PUSH
31994: LD_INT 70
31996: ST_TO_ADDR
31997: GO 32007
// eff := 30 ;
31999: LD_ADDR_VAR 0 4
32003: PUSH
32004: LD_INT 30
32006: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32007: LD_VAR 0 1
32011: PPUSH
32012: CALL_OW 250
32016: PPUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: CALL_OW 251
32026: PPUSH
32027: LD_VAR 0 4
32031: PPUSH
32032: CALL_OW 495
// end ; end ;
32036: LD_VAR 0 2
32040: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32041: LD_INT 0
32043: PPUSH
// end ;
32044: LD_VAR 0 4
32048: RET
// export function SOS_Command ( cmd ) ; begin
32049: LD_INT 0
32051: PPUSH
// end ;
32052: LD_VAR 0 2
32056: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32057: LD_INT 0
32059: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32060: LD_VAR 0 1
32064: PUSH
32065: LD_INT 250
32067: EQUAL
32068: PUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: CALL_OW 264
32078: PUSH
32079: LD_EXP 61
32083: EQUAL
32084: AND
32085: IFFALSE 32106
// MinerPlaceMine ( unit , x , y ) ;
32087: LD_VAR 0 2
32091: PPUSH
32092: LD_VAR 0 4
32096: PPUSH
32097: LD_VAR 0 5
32101: PPUSH
32102: CALL 34447 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32106: LD_VAR 0 1
32110: PUSH
32111: LD_INT 251
32113: EQUAL
32114: PUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 264
32124: PUSH
32125: LD_EXP 61
32129: EQUAL
32130: AND
32131: IFFALSE 32152
// MinerDetonateMine ( unit , x , y ) ;
32133: LD_VAR 0 2
32137: PPUSH
32138: LD_VAR 0 4
32142: PPUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: CALL 34724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32152: LD_VAR 0 1
32156: PUSH
32157: LD_INT 252
32159: EQUAL
32160: PUSH
32161: LD_VAR 0 2
32165: PPUSH
32166: CALL_OW 264
32170: PUSH
32171: LD_EXP 61
32175: EQUAL
32176: AND
32177: IFFALSE 32198
// MinerCreateMinefield ( unit , x , y ) ;
32179: LD_VAR 0 2
32183: PPUSH
32184: LD_VAR 0 4
32188: PPUSH
32189: LD_VAR 0 5
32193: PPUSH
32194: CALL 35141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32198: LD_VAR 0 1
32202: PUSH
32203: LD_INT 253
32205: EQUAL
32206: PUSH
32207: LD_VAR 0 2
32211: PPUSH
32212: CALL_OW 257
32216: PUSH
32217: LD_INT 5
32219: EQUAL
32220: AND
32221: IFFALSE 32242
// ComBinocular ( unit , x , y ) ;
32223: LD_VAR 0 2
32227: PPUSH
32228: LD_VAR 0 4
32232: PPUSH
32233: LD_VAR 0 5
32237: PPUSH
32238: CALL 35512 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32242: LD_VAR 0 1
32246: PUSH
32247: LD_INT 254
32249: EQUAL
32250: PUSH
32251: LD_VAR 0 2
32255: PPUSH
32256: CALL_OW 264
32260: PUSH
32261: LD_EXP 56
32265: EQUAL
32266: AND
32267: PUSH
32268: LD_VAR 0 3
32272: PPUSH
32273: CALL_OW 263
32277: PUSH
32278: LD_INT 3
32280: EQUAL
32281: AND
32282: IFFALSE 32298
// HackDestroyVehicle ( unit , selectedUnit ) ;
32284: LD_VAR 0 2
32288: PPUSH
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL 33807 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32298: LD_VAR 0 1
32302: PUSH
32303: LD_INT 255
32305: EQUAL
32306: PUSH
32307: LD_VAR 0 2
32311: PPUSH
32312: CALL_OW 264
32316: PUSH
32317: LD_INT 14
32319: PUSH
32320: LD_INT 53
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: IN
32327: AND
32328: PUSH
32329: LD_VAR 0 4
32333: PPUSH
32334: LD_VAR 0 5
32338: PPUSH
32339: CALL_OW 488
32343: AND
32344: IFFALSE 32368
// CutTreeXYR ( unit , x , y , 12 ) ;
32346: LD_VAR 0 2
32350: PPUSH
32351: LD_VAR 0 4
32355: PPUSH
32356: LD_VAR 0 5
32360: PPUSH
32361: LD_INT 12
32363: PPUSH
32364: CALL 32373 0 4
// end ;
32368: LD_VAR 0 6
32372: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32373: LD_INT 0
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32384: LD_VAR 0 1
32388: NOT
32389: PUSH
32390: LD_VAR 0 2
32394: PPUSH
32395: LD_VAR 0 3
32399: PPUSH
32400: CALL_OW 488
32404: NOT
32405: OR
32406: PUSH
32407: LD_VAR 0 4
32411: NOT
32412: OR
32413: IFFALSE 32417
// exit ;
32415: GO 32757
// list := [ ] ;
32417: LD_ADDR_VAR 0 13
32421: PUSH
32422: EMPTY
32423: ST_TO_ADDR
// if x - r < 0 then
32424: LD_VAR 0 2
32428: PUSH
32429: LD_VAR 0 4
32433: MINUS
32434: PUSH
32435: LD_INT 0
32437: LESS
32438: IFFALSE 32450
// min_x := 0 else
32440: LD_ADDR_VAR 0 7
32444: PUSH
32445: LD_INT 0
32447: ST_TO_ADDR
32448: GO 32466
// min_x := x - r ;
32450: LD_ADDR_VAR 0 7
32454: PUSH
32455: LD_VAR 0 2
32459: PUSH
32460: LD_VAR 0 4
32464: MINUS
32465: ST_TO_ADDR
// if y - r < 0 then
32466: LD_VAR 0 3
32470: PUSH
32471: LD_VAR 0 4
32475: MINUS
32476: PUSH
32477: LD_INT 0
32479: LESS
32480: IFFALSE 32492
// min_y := 0 else
32482: LD_ADDR_VAR 0 8
32486: PUSH
32487: LD_INT 0
32489: ST_TO_ADDR
32490: GO 32508
// min_y := y - r ;
32492: LD_ADDR_VAR 0 8
32496: PUSH
32497: LD_VAR 0 3
32501: PUSH
32502: LD_VAR 0 4
32506: MINUS
32507: ST_TO_ADDR
// max_x := x + r ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: LD_VAR 0 2
32517: PUSH
32518: LD_VAR 0 4
32522: PLUS
32523: ST_TO_ADDR
// max_y := y + r ;
32524: LD_ADDR_VAR 0 10
32528: PUSH
32529: LD_VAR 0 3
32533: PUSH
32534: LD_VAR 0 4
32538: PLUS
32539: ST_TO_ADDR
// for _x = min_x to max_x do
32540: LD_ADDR_VAR 0 11
32544: PUSH
32545: DOUBLE
32546: LD_VAR 0 7
32550: DEC
32551: ST_TO_ADDR
32552: LD_VAR 0 9
32556: PUSH
32557: FOR_TO
32558: IFFALSE 32675
// for _y = min_y to max_y do
32560: LD_ADDR_VAR 0 12
32564: PUSH
32565: DOUBLE
32566: LD_VAR 0 8
32570: DEC
32571: ST_TO_ADDR
32572: LD_VAR 0 10
32576: PUSH
32577: FOR_TO
32578: IFFALSE 32671
// begin if not ValidHex ( _x , _y ) then
32580: LD_VAR 0 11
32584: PPUSH
32585: LD_VAR 0 12
32589: PPUSH
32590: CALL_OW 488
32594: NOT
32595: IFFALSE 32599
// continue ;
32597: GO 32577
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32599: LD_VAR 0 11
32603: PPUSH
32604: LD_VAR 0 12
32608: PPUSH
32609: CALL_OW 351
32613: PUSH
32614: LD_VAR 0 11
32618: PPUSH
32619: LD_VAR 0 12
32623: PPUSH
32624: CALL_OW 554
32628: AND
32629: IFFALSE 32669
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32631: LD_ADDR_VAR 0 13
32635: PUSH
32636: LD_VAR 0 13
32640: PPUSH
32641: LD_VAR 0 13
32645: PUSH
32646: LD_INT 1
32648: PLUS
32649: PPUSH
32650: LD_VAR 0 11
32654: PUSH
32655: LD_VAR 0 12
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PPUSH
32664: CALL_OW 2
32668: ST_TO_ADDR
// end ;
32669: GO 32577
32671: POP
32672: POP
32673: GO 32557
32675: POP
32676: POP
// if not list then
32677: LD_VAR 0 13
32681: NOT
32682: IFFALSE 32686
// exit ;
32684: GO 32757
// for i in list do
32686: LD_ADDR_VAR 0 6
32690: PUSH
32691: LD_VAR 0 13
32695: PUSH
32696: FOR_IN
32697: IFFALSE 32755
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32699: LD_VAR 0 1
32703: PPUSH
32704: LD_STRING M
32706: PUSH
32707: LD_VAR 0 6
32711: PUSH
32712: LD_INT 1
32714: ARRAY
32715: PUSH
32716: LD_VAR 0 6
32720: PUSH
32721: LD_INT 2
32723: ARRAY
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: PPUSH
32749: CALL_OW 447
32753: GO 32696
32755: POP
32756: POP
// end ;
32757: LD_VAR 0 5
32761: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32762: LD_EXP 125
32766: NOT
32767: IFFALSE 32817
32769: GO 32771
32771: DISABLE
// begin initHack := true ;
32772: LD_ADDR_EXP 125
32776: PUSH
32777: LD_INT 1
32779: ST_TO_ADDR
// hackTanks := [ ] ;
32780: LD_ADDR_EXP 126
32784: PUSH
32785: EMPTY
32786: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32787: LD_ADDR_EXP 127
32791: PUSH
32792: EMPTY
32793: ST_TO_ADDR
// hackLimit := 3 ;
32794: LD_ADDR_EXP 128
32798: PUSH
32799: LD_INT 3
32801: ST_TO_ADDR
// hackDist := 12 ;
32802: LD_ADDR_EXP 129
32806: PUSH
32807: LD_INT 12
32809: ST_TO_ADDR
// hackCounter := [ ] ;
32810: LD_ADDR_EXP 130
32814: PUSH
32815: EMPTY
32816: ST_TO_ADDR
// end ;
32817: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32818: LD_EXP 125
32822: PUSH
32823: LD_INT 34
32825: PUSH
32826: LD_EXP 56
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PPUSH
32835: CALL_OW 69
32839: AND
32840: IFFALSE 33095
32842: GO 32844
32844: DISABLE
32845: LD_INT 0
32847: PPUSH
32848: PPUSH
// begin enable ;
32849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32850: LD_ADDR_VAR 0 1
32854: PUSH
32855: LD_INT 34
32857: PUSH
32858: LD_EXP 56
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PPUSH
32867: CALL_OW 69
32871: PUSH
32872: FOR_IN
32873: IFFALSE 33093
// begin if not i in hackTanks then
32875: LD_VAR 0 1
32879: PUSH
32880: LD_EXP 126
32884: IN
32885: NOT
32886: IFFALSE 32969
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32888: LD_ADDR_EXP 126
32892: PUSH
32893: LD_EXP 126
32897: PPUSH
32898: LD_EXP 126
32902: PUSH
32903: LD_INT 1
32905: PLUS
32906: PPUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 1
32916: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32917: LD_ADDR_EXP 127
32921: PUSH
32922: LD_EXP 127
32926: PPUSH
32927: LD_EXP 127
32931: PUSH
32932: LD_INT 1
32934: PLUS
32935: PPUSH
32936: EMPTY
32937: PPUSH
32938: CALL_OW 1
32942: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32943: LD_ADDR_EXP 130
32947: PUSH
32948: LD_EXP 130
32952: PPUSH
32953: LD_EXP 130
32957: PUSH
32958: LD_INT 1
32960: PLUS
32961: PPUSH
32962: EMPTY
32963: PPUSH
32964: CALL_OW 1
32968: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32969: LD_VAR 0 1
32973: PPUSH
32974: CALL_OW 302
32978: NOT
32979: IFFALSE 32992
// begin HackUnlinkAll ( i ) ;
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL 33098 0 1
// continue ;
32990: GO 32872
// end ; HackCheckCapturedStatus ( i ) ;
32992: LD_VAR 0 1
32996: PPUSH
32997: CALL 33541 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33001: LD_ADDR_VAR 0 2
33005: PUSH
33006: LD_INT 81
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 255
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 33
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 91
33035: PUSH
33036: LD_VAR 0 1
33040: PUSH
33041: LD_EXP 129
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 50
33053: PUSH
33054: EMPTY
33055: LIST
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PPUSH
33063: CALL_OW 69
33067: ST_TO_ADDR
// if not tmp then
33068: LD_VAR 0 2
33072: NOT
33073: IFFALSE 33077
// continue ;
33075: GO 32872
// HackLink ( i , tmp ) ;
33077: LD_VAR 0 1
33081: PPUSH
33082: LD_VAR 0 2
33086: PPUSH
33087: CALL 33234 0 2
// end ;
33091: GO 32872
33093: POP
33094: POP
// end ;
33095: PPOPN 2
33097: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33098: LD_INT 0
33100: PPUSH
33101: PPUSH
33102: PPUSH
// if not hack in hackTanks then
33103: LD_VAR 0 1
33107: PUSH
33108: LD_EXP 126
33112: IN
33113: NOT
33114: IFFALSE 33118
// exit ;
33116: GO 33229
// index := GetElementIndex ( hackTanks , hack ) ;
33118: LD_ADDR_VAR 0 4
33122: PUSH
33123: LD_EXP 126
33127: PPUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL 40663 0 2
33137: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33138: LD_EXP 127
33142: PUSH
33143: LD_VAR 0 4
33147: ARRAY
33148: IFFALSE 33229
// begin for i in hackTanksCaptured [ index ] do
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: LD_EXP 127
33159: PUSH
33160: LD_VAR 0 4
33164: ARRAY
33165: PUSH
33166: FOR_IN
33167: IFFALSE 33193
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33169: LD_VAR 0 3
33173: PUSH
33174: LD_INT 1
33176: ARRAY
33177: PPUSH
33178: LD_VAR 0 3
33182: PUSH
33183: LD_INT 2
33185: ARRAY
33186: PPUSH
33187: CALL_OW 235
33191: GO 33166
33193: POP
33194: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33195: LD_ADDR_EXP 127
33199: PUSH
33200: LD_EXP 127
33204: PPUSH
33205: LD_VAR 0 4
33209: PPUSH
33210: EMPTY
33211: PPUSH
33212: CALL_OW 1
33216: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33217: LD_VAR 0 1
33221: PPUSH
33222: LD_INT 0
33224: PPUSH
33225: CALL_OW 505
// end ; end ;
33229: LD_VAR 0 2
33233: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33234: LD_INT 0
33236: PPUSH
33237: PPUSH
33238: PPUSH
// if not hack in hackTanks or not vehicles then
33239: LD_VAR 0 1
33243: PUSH
33244: LD_EXP 126
33248: IN
33249: NOT
33250: PUSH
33251: LD_VAR 0 2
33255: NOT
33256: OR
33257: IFFALSE 33261
// exit ;
33259: GO 33536
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33261: LD_ADDR_VAR 0 2
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: LD_INT 1
33278: PPUSH
33279: LD_INT 1
33281: PPUSH
33282: CALL 41313 0 4
33286: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33287: LD_ADDR_VAR 0 5
33291: PUSH
33292: LD_EXP 126
33296: PPUSH
33297: LD_VAR 0 1
33301: PPUSH
33302: CALL 40663 0 2
33306: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33307: LD_EXP 127
33311: PUSH
33312: LD_VAR 0 5
33316: ARRAY
33317: PUSH
33318: LD_EXP 128
33322: LESS
33323: IFFALSE 33512
// begin for i := 1 to vehicles do
33325: LD_ADDR_VAR 0 4
33329: PUSH
33330: DOUBLE
33331: LD_INT 1
33333: DEC
33334: ST_TO_ADDR
33335: LD_VAR 0 2
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33510
// begin if hackTanksCaptured [ index ] = hackLimit then
33343: LD_EXP 127
33347: PUSH
33348: LD_VAR 0 5
33352: ARRAY
33353: PUSH
33354: LD_EXP 128
33358: EQUAL
33359: IFFALSE 33363
// break ;
33361: GO 33510
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33363: LD_ADDR_EXP 130
33367: PUSH
33368: LD_EXP 130
33372: PPUSH
33373: LD_VAR 0 5
33377: PPUSH
33378: LD_EXP 130
33382: PUSH
33383: LD_VAR 0 5
33387: ARRAY
33388: PUSH
33389: LD_INT 1
33391: PLUS
33392: PPUSH
33393: CALL_OW 1
33397: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33398: LD_ADDR_EXP 127
33402: PUSH
33403: LD_EXP 127
33407: PPUSH
33408: LD_VAR 0 5
33412: PUSH
33413: LD_EXP 127
33417: PUSH
33418: LD_VAR 0 5
33422: ARRAY
33423: PUSH
33424: LD_INT 1
33426: PLUS
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: LD_VAR 0 2
33436: PUSH
33437: LD_VAR 0 4
33441: ARRAY
33442: PUSH
33443: LD_VAR 0 2
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PPUSH
33454: CALL_OW 255
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PPUSH
33463: CALL 40878 0 3
33467: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33468: LD_VAR 0 2
33472: PUSH
33473: LD_VAR 0 4
33477: ARRAY
33478: PPUSH
33479: LD_VAR 0 1
33483: PPUSH
33484: CALL_OW 255
33488: PPUSH
33489: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33493: LD_VAR 0 2
33497: PUSH
33498: LD_VAR 0 4
33502: ARRAY
33503: PPUSH
33504: CALL_OW 141
// end ;
33508: GO 33340
33510: POP
33511: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33512: LD_VAR 0 1
33516: PPUSH
33517: LD_EXP 127
33521: PUSH
33522: LD_VAR 0 5
33526: ARRAY
33527: PUSH
33528: LD_INT 0
33530: PLUS
33531: PPUSH
33532: CALL_OW 505
// end ;
33536: LD_VAR 0 3
33540: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33541: LD_INT 0
33543: PPUSH
33544: PPUSH
33545: PPUSH
33546: PPUSH
// if not hack in hackTanks then
33547: LD_VAR 0 1
33551: PUSH
33552: LD_EXP 126
33556: IN
33557: NOT
33558: IFFALSE 33562
// exit ;
33560: GO 33802
// index := GetElementIndex ( hackTanks , hack ) ;
33562: LD_ADDR_VAR 0 4
33566: PUSH
33567: LD_EXP 126
33571: PPUSH
33572: LD_VAR 0 1
33576: PPUSH
33577: CALL 40663 0 2
33581: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: DOUBLE
33588: LD_EXP 127
33592: PUSH
33593: LD_VAR 0 4
33597: ARRAY
33598: INC
33599: ST_TO_ADDR
33600: LD_INT 1
33602: PUSH
33603: FOR_DOWNTO
33604: IFFALSE 33776
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33606: LD_ADDR_VAR 0 5
33610: PUSH
33611: LD_EXP 127
33615: PUSH
33616: LD_VAR 0 4
33620: ARRAY
33621: PUSH
33622: LD_VAR 0 3
33626: ARRAY
33627: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33628: LD_VAR 0 5
33632: PUSH
33633: LD_INT 1
33635: ARRAY
33636: PPUSH
33637: CALL_OW 302
33641: NOT
33642: PUSH
33643: LD_VAR 0 5
33647: PUSH
33648: LD_INT 1
33650: ARRAY
33651: PPUSH
33652: CALL_OW 255
33656: PUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 255
33666: NONEQUAL
33667: OR
33668: IFFALSE 33774
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33670: LD_VAR 0 5
33674: PUSH
33675: LD_INT 1
33677: ARRAY
33678: PPUSH
33679: CALL_OW 305
33683: PUSH
33684: LD_VAR 0 5
33688: PUSH
33689: LD_INT 1
33691: ARRAY
33692: PPUSH
33693: CALL_OW 255
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 255
33707: EQUAL
33708: AND
33709: IFFALSE 33733
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33711: LD_VAR 0 5
33715: PUSH
33716: LD_INT 1
33718: ARRAY
33719: PPUSH
33720: LD_VAR 0 5
33724: PUSH
33725: LD_INT 2
33727: ARRAY
33728: PPUSH
33729: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33733: LD_ADDR_EXP 127
33737: PUSH
33738: LD_EXP 127
33742: PPUSH
33743: LD_VAR 0 4
33747: PPUSH
33748: LD_EXP 127
33752: PUSH
33753: LD_VAR 0 4
33757: ARRAY
33758: PPUSH
33759: LD_VAR 0 3
33763: PPUSH
33764: CALL_OW 3
33768: PPUSH
33769: CALL_OW 1
33773: ST_TO_ADDR
// end ; end ;
33774: GO 33603
33776: POP
33777: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33778: LD_VAR 0 1
33782: PPUSH
33783: LD_EXP 127
33787: PUSH
33788: LD_VAR 0 4
33792: ARRAY
33793: PUSH
33794: LD_INT 0
33796: PLUS
33797: PPUSH
33798: CALL_OW 505
// end ;
33802: LD_VAR 0 2
33806: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33807: LD_INT 0
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
// if not hack in hackTanks then
33813: LD_VAR 0 1
33817: PUSH
33818: LD_EXP 126
33822: IN
33823: NOT
33824: IFFALSE 33828
// exit ;
33826: GO 33913
// index := GetElementIndex ( hackTanks , hack ) ;
33828: LD_ADDR_VAR 0 5
33832: PUSH
33833: LD_EXP 126
33837: PPUSH
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL 40663 0 2
33847: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33848: LD_ADDR_VAR 0 4
33852: PUSH
33853: DOUBLE
33854: LD_INT 1
33856: DEC
33857: ST_TO_ADDR
33858: LD_EXP 127
33862: PUSH
33863: LD_VAR 0 5
33867: ARRAY
33868: PUSH
33869: FOR_TO
33870: IFFALSE 33911
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33872: LD_EXP 127
33876: PUSH
33877: LD_VAR 0 5
33881: ARRAY
33882: PUSH
33883: LD_VAR 0 4
33887: ARRAY
33888: PUSH
33889: LD_INT 1
33891: ARRAY
33892: PUSH
33893: LD_VAR 0 2
33897: EQUAL
33898: IFFALSE 33909
// KillUnit ( vehicle ) ;
33900: LD_VAR 0 2
33904: PPUSH
33905: CALL_OW 66
33909: GO 33869
33911: POP
33912: POP
// end ;
33913: LD_VAR 0 3
33917: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33918: LD_EXP 131
33922: NOT
33923: IFFALSE 33958
33925: GO 33927
33927: DISABLE
// begin initMiner := true ;
33928: LD_ADDR_EXP 131
33932: PUSH
33933: LD_INT 1
33935: ST_TO_ADDR
// minersList := [ ] ;
33936: LD_ADDR_EXP 132
33940: PUSH
33941: EMPTY
33942: ST_TO_ADDR
// minerMinesList := [ ] ;
33943: LD_ADDR_EXP 133
33947: PUSH
33948: EMPTY
33949: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33950: LD_ADDR_EXP 134
33954: PUSH
33955: LD_INT 5
33957: ST_TO_ADDR
// end ;
33958: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33959: LD_EXP 131
33963: PUSH
33964: LD_INT 34
33966: PUSH
33967: LD_EXP 61
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 69
33980: AND
33981: IFFALSE 34444
33983: GO 33985
33985: DISABLE
33986: LD_INT 0
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
// begin enable ;
33992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33993: LD_ADDR_VAR 0 1
33997: PUSH
33998: LD_INT 34
34000: PUSH
34001: LD_EXP 61
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PPUSH
34010: CALL_OW 69
34014: PUSH
34015: FOR_IN
34016: IFFALSE 34088
// begin if not i in minersList then
34018: LD_VAR 0 1
34022: PUSH
34023: LD_EXP 132
34027: IN
34028: NOT
34029: IFFALSE 34086
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34031: LD_ADDR_EXP 132
34035: PUSH
34036: LD_EXP 132
34040: PPUSH
34041: LD_EXP 132
34045: PUSH
34046: LD_INT 1
34048: PLUS
34049: PPUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 1
34059: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34060: LD_ADDR_EXP 133
34064: PUSH
34065: LD_EXP 133
34069: PPUSH
34070: LD_EXP 133
34074: PUSH
34075: LD_INT 1
34077: PLUS
34078: PPUSH
34079: EMPTY
34080: PPUSH
34081: CALL_OW 1
34085: ST_TO_ADDR
// end end ;
34086: GO 34015
34088: POP
34089: POP
// for i := minerMinesList downto 1 do
34090: LD_ADDR_VAR 0 1
34094: PUSH
34095: DOUBLE
34096: LD_EXP 133
34100: INC
34101: ST_TO_ADDR
34102: LD_INT 1
34104: PUSH
34105: FOR_DOWNTO
34106: IFFALSE 34442
// begin if IsLive ( minersList [ i ] ) then
34108: LD_EXP 132
34112: PUSH
34113: LD_VAR 0 1
34117: ARRAY
34118: PPUSH
34119: CALL_OW 300
34123: IFFALSE 34151
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34125: LD_EXP 132
34129: PUSH
34130: LD_VAR 0 1
34134: ARRAY
34135: PPUSH
34136: LD_EXP 133
34140: PUSH
34141: LD_VAR 0 1
34145: ARRAY
34146: PPUSH
34147: CALL_OW 505
// if not minerMinesList [ i ] then
34151: LD_EXP 133
34155: PUSH
34156: LD_VAR 0 1
34160: ARRAY
34161: NOT
34162: IFFALSE 34166
// continue ;
34164: GO 34105
// for j := minerMinesList [ i ] downto 1 do
34166: LD_ADDR_VAR 0 2
34170: PUSH
34171: DOUBLE
34172: LD_EXP 133
34176: PUSH
34177: LD_VAR 0 1
34181: ARRAY
34182: INC
34183: ST_TO_ADDR
34184: LD_INT 1
34186: PUSH
34187: FOR_DOWNTO
34188: IFFALSE 34438
// begin side := GetSide ( minersList [ i ] ) ;
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: LD_EXP 132
34199: PUSH
34200: LD_VAR 0 1
34204: ARRAY
34205: PPUSH
34206: CALL_OW 255
34210: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34211: LD_ADDR_VAR 0 4
34215: PUSH
34216: LD_EXP 133
34220: PUSH
34221: LD_VAR 0 1
34225: ARRAY
34226: PUSH
34227: LD_VAR 0 2
34231: ARRAY
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: PPUSH
34237: LD_EXP 133
34241: PUSH
34242: LD_VAR 0 1
34246: ARRAY
34247: PUSH
34248: LD_VAR 0 2
34252: ARRAY
34253: PUSH
34254: LD_INT 2
34256: ARRAY
34257: PPUSH
34258: CALL_OW 428
34262: ST_TO_ADDR
// if not tmp then
34263: LD_VAR 0 4
34267: NOT
34268: IFFALSE 34272
// continue ;
34270: GO 34187
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34272: LD_VAR 0 4
34276: PUSH
34277: LD_INT 81
34279: PUSH
34280: LD_VAR 0 3
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: IN
34294: PUSH
34295: LD_EXP 133
34299: PUSH
34300: LD_VAR 0 1
34304: ARRAY
34305: PUSH
34306: LD_VAR 0 2
34310: ARRAY
34311: PUSH
34312: LD_INT 1
34314: ARRAY
34315: PPUSH
34316: LD_EXP 133
34320: PUSH
34321: LD_VAR 0 1
34325: ARRAY
34326: PUSH
34327: LD_VAR 0 2
34331: ARRAY
34332: PUSH
34333: LD_INT 2
34335: ARRAY
34336: PPUSH
34337: CALL_OW 458
34341: AND
34342: IFFALSE 34436
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34344: LD_EXP 133
34348: PUSH
34349: LD_VAR 0 1
34353: ARRAY
34354: PUSH
34355: LD_VAR 0 2
34359: ARRAY
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: PPUSH
34365: LD_EXP 133
34369: PUSH
34370: LD_VAR 0 1
34374: ARRAY
34375: PUSH
34376: LD_VAR 0 2
34380: ARRAY
34381: PUSH
34382: LD_INT 2
34384: ARRAY
34385: PPUSH
34386: LD_VAR 0 3
34390: PPUSH
34391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34395: LD_ADDR_EXP 133
34399: PUSH
34400: LD_EXP 133
34404: PPUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_EXP 133
34414: PUSH
34415: LD_VAR 0 1
34419: ARRAY
34420: PPUSH
34421: LD_VAR 0 2
34425: PPUSH
34426: CALL_OW 3
34430: PPUSH
34431: CALL_OW 1
34435: ST_TO_ADDR
// end ; end ;
34436: GO 34187
34438: POP
34439: POP
// end ;
34440: GO 34105
34442: POP
34443: POP
// end ;
34444: PPOPN 4
34446: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34447: LD_INT 0
34449: PPUSH
34450: PPUSH
// result := false ;
34451: LD_ADDR_VAR 0 4
34455: PUSH
34456: LD_INT 0
34458: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34459: LD_VAR 0 1
34463: PPUSH
34464: CALL_OW 264
34468: PUSH
34469: LD_EXP 61
34473: EQUAL
34474: NOT
34475: IFFALSE 34479
// exit ;
34477: GO 34719
// index := GetElementIndex ( minersList , unit ) ;
34479: LD_ADDR_VAR 0 5
34483: PUSH
34484: LD_EXP 132
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL 40663 0 2
34498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34499: LD_EXP 133
34503: PUSH
34504: LD_VAR 0 5
34508: ARRAY
34509: PUSH
34510: LD_EXP 134
34514: GREATEREQUAL
34515: IFFALSE 34519
// exit ;
34517: GO 34719
// ComMoveXY ( unit , x , y ) ;
34519: LD_VAR 0 1
34523: PPUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34538: LD_INT 35
34540: PPUSH
34541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34545: LD_VAR 0 1
34549: PPUSH
34550: LD_VAR 0 2
34554: PPUSH
34555: LD_VAR 0 3
34559: PPUSH
34560: CALL 70727 0 3
34564: NOT
34565: PUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 314
34575: AND
34576: IFFALSE 34580
// exit ;
34578: GO 34719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34580: LD_VAR 0 2
34584: PPUSH
34585: LD_VAR 0 3
34589: PPUSH
34590: CALL_OW 428
34594: PUSH
34595: LD_VAR 0 1
34599: EQUAL
34600: PUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 314
34610: NOT
34611: AND
34612: IFFALSE 34538
// PlaySoundXY ( x , y , PlantMine ) ;
34614: LD_VAR 0 2
34618: PPUSH
34619: LD_VAR 0 3
34623: PPUSH
34624: LD_STRING PlantMine
34626: PPUSH
34627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34631: LD_VAR 0 2
34635: PPUSH
34636: LD_VAR 0 3
34640: PPUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: CALL_OW 255
34650: PPUSH
34651: LD_INT 0
34653: PPUSH
34654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34658: LD_ADDR_EXP 133
34662: PUSH
34663: LD_EXP 133
34667: PPUSH
34668: LD_VAR 0 5
34672: PUSH
34673: LD_EXP 133
34677: PUSH
34678: LD_VAR 0 5
34682: ARRAY
34683: PUSH
34684: LD_INT 1
34686: PLUS
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PPUSH
34692: LD_VAR 0 2
34696: PUSH
34697: LD_VAR 0 3
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PPUSH
34706: CALL 40878 0 3
34710: ST_TO_ADDR
// result := true ;
34711: LD_ADDR_VAR 0 4
34715: PUSH
34716: LD_INT 1
34718: ST_TO_ADDR
// end ;
34719: LD_VAR 0 4
34723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34724: LD_INT 0
34726: PPUSH
34727: PPUSH
34728: PPUSH
// if not unit in minersList then
34729: LD_VAR 0 1
34733: PUSH
34734: LD_EXP 132
34738: IN
34739: NOT
34740: IFFALSE 34744
// exit ;
34742: GO 35136
// index := GetElementIndex ( minersList , unit ) ;
34744: LD_ADDR_VAR 0 6
34748: PUSH
34749: LD_EXP 132
34753: PPUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL 40663 0 2
34763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: DOUBLE
34770: LD_EXP 133
34774: PUSH
34775: LD_VAR 0 6
34779: ARRAY
34780: INC
34781: ST_TO_ADDR
34782: LD_INT 1
34784: PUSH
34785: FOR_DOWNTO
34786: IFFALSE 34947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34788: LD_EXP 133
34792: PUSH
34793: LD_VAR 0 6
34797: ARRAY
34798: PUSH
34799: LD_VAR 0 5
34803: ARRAY
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: PUSH
34809: LD_VAR 0 2
34813: EQUAL
34814: PUSH
34815: LD_EXP 133
34819: PUSH
34820: LD_VAR 0 6
34824: ARRAY
34825: PUSH
34826: LD_VAR 0 5
34830: ARRAY
34831: PUSH
34832: LD_INT 2
34834: ARRAY
34835: PUSH
34836: LD_VAR 0 3
34840: EQUAL
34841: AND
34842: IFFALSE 34945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34844: LD_EXP 133
34848: PUSH
34849: LD_VAR 0 6
34853: ARRAY
34854: PUSH
34855: LD_VAR 0 5
34859: ARRAY
34860: PUSH
34861: LD_INT 1
34863: ARRAY
34864: PPUSH
34865: LD_EXP 133
34869: PUSH
34870: LD_VAR 0 6
34874: ARRAY
34875: PUSH
34876: LD_VAR 0 5
34880: ARRAY
34881: PUSH
34882: LD_INT 2
34884: ARRAY
34885: PPUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 255
34895: PPUSH
34896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34900: LD_ADDR_EXP 133
34904: PUSH
34905: LD_EXP 133
34909: PPUSH
34910: LD_VAR 0 6
34914: PPUSH
34915: LD_EXP 133
34919: PUSH
34920: LD_VAR 0 6
34924: ARRAY
34925: PPUSH
34926: LD_VAR 0 5
34930: PPUSH
34931: CALL_OW 3
34935: PPUSH
34936: CALL_OW 1
34940: ST_TO_ADDR
// exit ;
34941: POP
34942: POP
34943: GO 35136
// end ; end ;
34945: GO 34785
34947: POP
34948: POP
// for i := minerMinesList [ index ] downto 1 do
34949: LD_ADDR_VAR 0 5
34953: PUSH
34954: DOUBLE
34955: LD_EXP 133
34959: PUSH
34960: LD_VAR 0 6
34964: ARRAY
34965: INC
34966: ST_TO_ADDR
34967: LD_INT 1
34969: PUSH
34970: FOR_DOWNTO
34971: IFFALSE 35134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34973: LD_EXP 133
34977: PUSH
34978: LD_VAR 0 6
34982: ARRAY
34983: PUSH
34984: LD_VAR 0 5
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: PPUSH
34994: LD_EXP 133
34998: PUSH
34999: LD_VAR 0 6
35003: ARRAY
35004: PUSH
35005: LD_VAR 0 5
35009: ARRAY
35010: PUSH
35011: LD_INT 2
35013: ARRAY
35014: PPUSH
35015: LD_VAR 0 2
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: CALL_OW 298
35029: PUSH
35030: LD_INT 6
35032: LESS
35033: IFFALSE 35132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35035: LD_EXP 133
35039: PUSH
35040: LD_VAR 0 6
35044: ARRAY
35045: PUSH
35046: LD_VAR 0 5
35050: ARRAY
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: PPUSH
35056: LD_EXP 133
35060: PUSH
35061: LD_VAR 0 6
35065: ARRAY
35066: PUSH
35067: LD_VAR 0 5
35071: ARRAY
35072: PUSH
35073: LD_INT 2
35075: ARRAY
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 255
35086: PPUSH
35087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35091: LD_ADDR_EXP 133
35095: PUSH
35096: LD_EXP 133
35100: PPUSH
35101: LD_VAR 0 6
35105: PPUSH
35106: LD_EXP 133
35110: PUSH
35111: LD_VAR 0 6
35115: ARRAY
35116: PPUSH
35117: LD_VAR 0 5
35121: PPUSH
35122: CALL_OW 3
35126: PPUSH
35127: CALL_OW 1
35131: ST_TO_ADDR
// end ; end ;
35132: GO 34970
35134: POP
35135: POP
// end ;
35136: LD_VAR 0 4
35140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 264
35161: PUSH
35162: LD_EXP 61
35166: EQUAL
35167: NOT
35168: PUSH
35169: LD_VAR 0 1
35173: PUSH
35174: LD_EXP 132
35178: IN
35179: NOT
35180: OR
35181: IFFALSE 35185
// exit ;
35183: GO 35507
// index := GetElementIndex ( minersList , unit ) ;
35185: LD_ADDR_VAR 0 6
35189: PUSH
35190: LD_EXP 132
35194: PPUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL 40663 0 2
35204: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35205: LD_ADDR_VAR 0 8
35209: PUSH
35210: LD_EXP 134
35214: PUSH
35215: LD_EXP 133
35219: PUSH
35220: LD_VAR 0 6
35224: ARRAY
35225: MINUS
35226: ST_TO_ADDR
// if not minesFreeAmount then
35227: LD_VAR 0 8
35231: NOT
35232: IFFALSE 35236
// exit ;
35234: GO 35507
// tmp := [ ] ;
35236: LD_ADDR_VAR 0 7
35240: PUSH
35241: EMPTY
35242: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35243: LD_ADDR_VAR 0 5
35247: PUSH
35248: DOUBLE
35249: LD_INT 1
35251: DEC
35252: ST_TO_ADDR
35253: LD_VAR 0 8
35257: PUSH
35258: FOR_TO
35259: IFFALSE 35454
// begin _d := rand ( 0 , 5 ) ;
35261: LD_ADDR_VAR 0 11
35265: PUSH
35266: LD_INT 0
35268: PPUSH
35269: LD_INT 5
35271: PPUSH
35272: CALL_OW 12
35276: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35277: LD_ADDR_VAR 0 12
35281: PUSH
35282: LD_INT 2
35284: PPUSH
35285: LD_INT 6
35287: PPUSH
35288: CALL_OW 12
35292: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_VAR 0 2
35302: PPUSH
35303: LD_VAR 0 11
35307: PPUSH
35308: LD_VAR 0 12
35312: PPUSH
35313: CALL_OW 272
35317: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35318: LD_ADDR_VAR 0 10
35322: PUSH
35323: LD_VAR 0 3
35327: PPUSH
35328: LD_VAR 0 11
35332: PPUSH
35333: LD_VAR 0 12
35337: PPUSH
35338: CALL_OW 273
35342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35343: LD_VAR 0 9
35347: PPUSH
35348: LD_VAR 0 10
35352: PPUSH
35353: CALL_OW 488
35357: PUSH
35358: LD_VAR 0 9
35362: PUSH
35363: LD_VAR 0 10
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_VAR 0 7
35376: IN
35377: NOT
35378: AND
35379: PUSH
35380: LD_VAR 0 9
35384: PPUSH
35385: LD_VAR 0 10
35389: PPUSH
35390: CALL_OW 458
35394: NOT
35395: AND
35396: IFFALSE 35438
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35398: LD_ADDR_VAR 0 7
35402: PUSH
35403: LD_VAR 0 7
35407: PPUSH
35408: LD_VAR 0 7
35412: PUSH
35413: LD_INT 1
35415: PLUS
35416: PPUSH
35417: LD_VAR 0 9
35421: PUSH
35422: LD_VAR 0 10
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PPUSH
35431: CALL_OW 1
35435: ST_TO_ADDR
35436: GO 35452
// i := i - 1 ;
35438: LD_ADDR_VAR 0 5
35442: PUSH
35443: LD_VAR 0 5
35447: PUSH
35448: LD_INT 1
35450: MINUS
35451: ST_TO_ADDR
// end ;
35452: GO 35258
35454: POP
35455: POP
// for i in tmp do
35456: LD_ADDR_VAR 0 5
35460: PUSH
35461: LD_VAR 0 7
35465: PUSH
35466: FOR_IN
35467: IFFALSE 35505
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35469: LD_VAR 0 1
35473: PPUSH
35474: LD_VAR 0 5
35478: PUSH
35479: LD_INT 1
35481: ARRAY
35482: PPUSH
35483: LD_VAR 0 5
35487: PUSH
35488: LD_INT 2
35490: ARRAY
35491: PPUSH
35492: CALL 34447 0 3
35496: NOT
35497: IFFALSE 35503
// exit ;
35499: POP
35500: POP
35501: GO 35507
35503: GO 35466
35505: POP
35506: POP
// end ;
35507: LD_VAR 0 4
35511: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35512: LD_INT 0
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
// if not GetClass ( unit ) = class_sniper then
35521: LD_VAR 0 1
35525: PPUSH
35526: CALL_OW 257
35530: PUSH
35531: LD_INT 5
35533: EQUAL
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 35927
// dist := 8 ;
35539: LD_ADDR_VAR 0 5
35543: PUSH
35544: LD_INT 8
35546: ST_TO_ADDR
// viewRange := 12 ;
35547: LD_ADDR_VAR 0 7
35551: PUSH
35552: LD_INT 12
35554: ST_TO_ADDR
// side := GetSide ( unit ) ;
35555: LD_ADDR_VAR 0 6
35559: PUSH
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 255
35569: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35570: LD_INT 61
35572: PPUSH
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 321
35582: PUSH
35583: LD_INT 2
35585: EQUAL
35586: IFFALSE 35596
// viewRange := 16 ;
35588: LD_ADDR_VAR 0 7
35592: PUSH
35593: LD_INT 16
35595: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35596: LD_VAR 0 1
35600: PPUSH
35601: LD_VAR 0 2
35605: PPUSH
35606: LD_VAR 0 3
35610: PPUSH
35611: CALL_OW 297
35615: PUSH
35616: LD_VAR 0 5
35620: GREATER
35621: IFFALSE 35700
// begin ComMoveXY ( unit , x , y ) ;
35623: LD_VAR 0 1
35627: PPUSH
35628: LD_VAR 0 2
35632: PPUSH
35633: LD_VAR 0 3
35637: PPUSH
35638: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35642: LD_INT 35
35644: PPUSH
35645: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35649: LD_VAR 0 1
35653: PPUSH
35654: LD_VAR 0 2
35658: PPUSH
35659: LD_VAR 0 3
35663: PPUSH
35664: CALL 70727 0 3
35668: NOT
35669: IFFALSE 35673
// exit ;
35671: GO 35927
// until GetDistUnitXY ( unit , x , y ) < dist ;
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 2
35682: PPUSH
35683: LD_VAR 0 3
35687: PPUSH
35688: CALL_OW 297
35692: PUSH
35693: LD_VAR 0 5
35697: LESS
35698: IFFALSE 35642
// end ; ComTurnXY ( unit , x , y ) ;
35700: LD_VAR 0 1
35704: PPUSH
35705: LD_VAR 0 2
35709: PPUSH
35710: LD_VAR 0 3
35714: PPUSH
35715: CALL_OW 118
// wait ( 5 ) ;
35719: LD_INT 5
35721: PPUSH
35722: CALL_OW 67
// _d := GetDir ( unit ) ;
35726: LD_ADDR_VAR 0 10
35730: PUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 254
35740: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35741: LD_ADDR_VAR 0 8
35745: PUSH
35746: LD_VAR 0 1
35750: PPUSH
35751: CALL_OW 250
35755: PPUSH
35756: LD_VAR 0 10
35760: PPUSH
35761: LD_VAR 0 5
35765: PPUSH
35766: CALL_OW 272
35770: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35771: LD_ADDR_VAR 0 9
35775: PUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 251
35785: PPUSH
35786: LD_VAR 0 10
35790: PPUSH
35791: LD_VAR 0 5
35795: PPUSH
35796: CALL_OW 273
35800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35801: LD_VAR 0 8
35805: PPUSH
35806: LD_VAR 0 9
35810: PPUSH
35811: CALL_OW 488
35815: NOT
35816: IFFALSE 35820
// exit ;
35818: GO 35927
// ComAnimCustom ( unit , 1 ) ;
35820: LD_VAR 0 1
35824: PPUSH
35825: LD_INT 1
35827: PPUSH
35828: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35832: LD_VAR 0 8
35836: PPUSH
35837: LD_VAR 0 9
35841: PPUSH
35842: LD_VAR 0 6
35846: PPUSH
35847: LD_VAR 0 7
35851: PPUSH
35852: CALL_OW 330
// repeat wait ( 1 ) ;
35856: LD_INT 1
35858: PPUSH
35859: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 316
35872: PUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 314
35882: OR
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 302
35893: NOT
35894: OR
35895: PUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 301
35905: OR
35906: IFFALSE 35856
// RemoveSeeing ( _x , _y , side ) ;
35908: LD_VAR 0 8
35912: PPUSH
35913: LD_VAR 0 9
35917: PPUSH
35918: LD_VAR 0 6
35922: PPUSH
35923: CALL_OW 331
// end ; end_of_file
35927: LD_VAR 0 4
35931: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
// if exist_mode then
35936: LD_VAR 0 2
35940: IFFALSE 35965
// unit := CreateCharacter ( prefix & ident ) else
35942: LD_ADDR_VAR 0 5
35946: PUSH
35947: LD_VAR 0 3
35951: PUSH
35952: LD_VAR 0 1
35956: STR
35957: PPUSH
35958: CALL_OW 34
35962: ST_TO_ADDR
35963: GO 35980
// unit := NewCharacter ( ident ) ;
35965: LD_ADDR_VAR 0 5
35969: PUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: CALL_OW 25
35979: ST_TO_ADDR
// result := unit ;
35980: LD_ADDR_VAR 0 4
35984: PUSH
35985: LD_VAR 0 5
35989: ST_TO_ADDR
// end ;
35990: LD_VAR 0 4
35994: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35995: LD_INT 0
35997: PPUSH
35998: PPUSH
// if not side or not nation then
35999: LD_VAR 0 1
36003: NOT
36004: PUSH
36005: LD_VAR 0 2
36009: NOT
36010: OR
36011: IFFALSE 36015
// exit ;
36013: GO 36779
// case nation of nation_american :
36015: LD_VAR 0 2
36019: PUSH
36020: LD_INT 1
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36028
36026: GO 36242
36028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36029: LD_ADDR_VAR 0 4
36033: PUSH
36034: LD_INT 35
36036: PUSH
36037: LD_INT 45
36039: PUSH
36040: LD_INT 46
36042: PUSH
36043: LD_INT 47
36045: PUSH
36046: LD_INT 82
36048: PUSH
36049: LD_INT 83
36051: PUSH
36052: LD_INT 84
36054: PUSH
36055: LD_INT 85
36057: PUSH
36058: LD_INT 86
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: LD_INT 6
36069: PUSH
36070: LD_INT 15
36072: PUSH
36073: LD_INT 16
36075: PUSH
36076: LD_INT 7
36078: PUSH
36079: LD_INT 12
36081: PUSH
36082: LD_INT 13
36084: PUSH
36085: LD_INT 10
36087: PUSH
36088: LD_INT 14
36090: PUSH
36091: LD_INT 20
36093: PUSH
36094: LD_INT 21
36096: PUSH
36097: LD_INT 22
36099: PUSH
36100: LD_INT 25
36102: PUSH
36103: LD_INT 32
36105: PUSH
36106: LD_INT 27
36108: PUSH
36109: LD_INT 36
36111: PUSH
36112: LD_INT 69
36114: PUSH
36115: LD_INT 39
36117: PUSH
36118: LD_INT 34
36120: PUSH
36121: LD_INT 40
36123: PUSH
36124: LD_INT 48
36126: PUSH
36127: LD_INT 49
36129: PUSH
36130: LD_INT 50
36132: PUSH
36133: LD_INT 51
36135: PUSH
36136: LD_INT 52
36138: PUSH
36139: LD_INT 53
36141: PUSH
36142: LD_INT 54
36144: PUSH
36145: LD_INT 55
36147: PUSH
36148: LD_INT 56
36150: PUSH
36151: LD_INT 57
36153: PUSH
36154: LD_INT 58
36156: PUSH
36157: LD_INT 59
36159: PUSH
36160: LD_INT 60
36162: PUSH
36163: LD_INT 61
36165: PUSH
36166: LD_INT 62
36168: PUSH
36169: LD_INT 80
36171: PUSH
36172: LD_INT 82
36174: PUSH
36175: LD_INT 83
36177: PUSH
36178: LD_INT 84
36180: PUSH
36181: LD_INT 85
36183: PUSH
36184: LD_INT 86
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: ST_TO_ADDR
36240: GO 36703
36242: LD_INT 2
36244: DOUBLE
36245: EQUAL
36246: IFTRUE 36250
36248: GO 36472
36250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36251: LD_ADDR_VAR 0 4
36255: PUSH
36256: LD_INT 35
36258: PUSH
36259: LD_INT 45
36261: PUSH
36262: LD_INT 46
36264: PUSH
36265: LD_INT 47
36267: PUSH
36268: LD_INT 82
36270: PUSH
36271: LD_INT 83
36273: PUSH
36274: LD_INT 84
36276: PUSH
36277: LD_INT 85
36279: PUSH
36280: LD_INT 87
36282: PUSH
36283: LD_INT 70
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 11
36291: PUSH
36292: LD_INT 3
36294: PUSH
36295: LD_INT 4
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: LD_INT 6
36303: PUSH
36304: LD_INT 15
36306: PUSH
36307: LD_INT 18
36309: PUSH
36310: LD_INT 7
36312: PUSH
36313: LD_INT 17
36315: PUSH
36316: LD_INT 8
36318: PUSH
36319: LD_INT 20
36321: PUSH
36322: LD_INT 21
36324: PUSH
36325: LD_INT 22
36327: PUSH
36328: LD_INT 72
36330: PUSH
36331: LD_INT 26
36333: PUSH
36334: LD_INT 69
36336: PUSH
36337: LD_INT 39
36339: PUSH
36340: LD_INT 40
36342: PUSH
36343: LD_INT 41
36345: PUSH
36346: LD_INT 42
36348: PUSH
36349: LD_INT 43
36351: PUSH
36352: LD_INT 48
36354: PUSH
36355: LD_INT 49
36357: PUSH
36358: LD_INT 50
36360: PUSH
36361: LD_INT 51
36363: PUSH
36364: LD_INT 52
36366: PUSH
36367: LD_INT 53
36369: PUSH
36370: LD_INT 54
36372: PUSH
36373: LD_INT 55
36375: PUSH
36376: LD_INT 56
36378: PUSH
36379: LD_INT 60
36381: PUSH
36382: LD_INT 61
36384: PUSH
36385: LD_INT 62
36387: PUSH
36388: LD_INT 66
36390: PUSH
36391: LD_INT 67
36393: PUSH
36394: LD_INT 68
36396: PUSH
36397: LD_INT 81
36399: PUSH
36400: LD_INT 82
36402: PUSH
36403: LD_INT 83
36405: PUSH
36406: LD_INT 84
36408: PUSH
36409: LD_INT 85
36411: PUSH
36412: LD_INT 87
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
36470: GO 36703
36472: LD_INT 3
36474: DOUBLE
36475: EQUAL
36476: IFTRUE 36480
36478: GO 36702
36480: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36481: LD_ADDR_VAR 0 4
36485: PUSH
36486: LD_INT 46
36488: PUSH
36489: LD_INT 47
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 82
36500: PUSH
36501: LD_INT 83
36503: PUSH
36504: LD_INT 84
36506: PUSH
36507: LD_INT 85
36509: PUSH
36510: LD_INT 86
36512: PUSH
36513: LD_INT 11
36515: PUSH
36516: LD_INT 9
36518: PUSH
36519: LD_INT 20
36521: PUSH
36522: LD_INT 19
36524: PUSH
36525: LD_INT 21
36527: PUSH
36528: LD_INT 24
36530: PUSH
36531: LD_INT 22
36533: PUSH
36534: LD_INT 25
36536: PUSH
36537: LD_INT 28
36539: PUSH
36540: LD_INT 29
36542: PUSH
36543: LD_INT 30
36545: PUSH
36546: LD_INT 31
36548: PUSH
36549: LD_INT 37
36551: PUSH
36552: LD_INT 38
36554: PUSH
36555: LD_INT 32
36557: PUSH
36558: LD_INT 27
36560: PUSH
36561: LD_INT 33
36563: PUSH
36564: LD_INT 69
36566: PUSH
36567: LD_INT 39
36569: PUSH
36570: LD_INT 34
36572: PUSH
36573: LD_INT 40
36575: PUSH
36576: LD_INT 71
36578: PUSH
36579: LD_INT 23
36581: PUSH
36582: LD_INT 44
36584: PUSH
36585: LD_INT 48
36587: PUSH
36588: LD_INT 49
36590: PUSH
36591: LD_INT 50
36593: PUSH
36594: LD_INT 51
36596: PUSH
36597: LD_INT 52
36599: PUSH
36600: LD_INT 53
36602: PUSH
36603: LD_INT 54
36605: PUSH
36606: LD_INT 55
36608: PUSH
36609: LD_INT 56
36611: PUSH
36612: LD_INT 57
36614: PUSH
36615: LD_INT 58
36617: PUSH
36618: LD_INT 59
36620: PUSH
36621: LD_INT 63
36623: PUSH
36624: LD_INT 64
36626: PUSH
36627: LD_INT 65
36629: PUSH
36630: LD_INT 82
36632: PUSH
36633: LD_INT 83
36635: PUSH
36636: LD_INT 84
36638: PUSH
36639: LD_INT 85
36641: PUSH
36642: LD_INT 86
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: ST_TO_ADDR
36700: GO 36703
36702: POP
// if state > - 1 and state < 3 then
36703: LD_VAR 0 3
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: GREATER
36712: PUSH
36713: LD_VAR 0 3
36717: PUSH
36718: LD_INT 3
36720: LESS
36721: AND
36722: IFFALSE 36779
// for i in result do
36724: LD_ADDR_VAR 0 5
36728: PUSH
36729: LD_VAR 0 4
36733: PUSH
36734: FOR_IN
36735: IFFALSE 36777
// if GetTech ( i , side ) <> state then
36737: LD_VAR 0 5
36741: PPUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 321
36751: PUSH
36752: LD_VAR 0 3
36756: NONEQUAL
36757: IFFALSE 36775
// result := result diff i ;
36759: LD_ADDR_VAR 0 4
36763: PUSH
36764: LD_VAR 0 4
36768: PUSH
36769: LD_VAR 0 5
36773: DIFF
36774: ST_TO_ADDR
36775: GO 36734
36777: POP
36778: POP
// end ;
36779: LD_VAR 0 4
36783: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36784: LD_INT 0
36786: PPUSH
36787: PPUSH
36788: PPUSH
// result := true ;
36789: LD_ADDR_VAR 0 3
36793: PUSH
36794: LD_INT 1
36796: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36797: LD_ADDR_VAR 0 5
36801: PUSH
36802: LD_VAR 0 2
36806: PPUSH
36807: CALL_OW 480
36811: ST_TO_ADDR
// if not tmp then
36812: LD_VAR 0 5
36816: NOT
36817: IFFALSE 36821
// exit ;
36819: GO 36870
// for i in tmp do
36821: LD_ADDR_VAR 0 4
36825: PUSH
36826: LD_VAR 0 5
36830: PUSH
36831: FOR_IN
36832: IFFALSE 36868
// if GetTech ( i , side ) <> state_researched then
36834: LD_VAR 0 4
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 321
36848: PUSH
36849: LD_INT 2
36851: NONEQUAL
36852: IFFALSE 36866
// begin result := false ;
36854: LD_ADDR_VAR 0 3
36858: PUSH
36859: LD_INT 0
36861: ST_TO_ADDR
// exit ;
36862: POP
36863: POP
36864: GO 36870
// end ;
36866: GO 36831
36868: POP
36869: POP
// end ;
36870: LD_VAR 0 3
36874: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36875: LD_INT 0
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36890: LD_VAR 0 1
36894: NOT
36895: PUSH
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL_OW 257
36905: PUSH
36906: LD_INT 9
36908: NONEQUAL
36909: OR
36910: IFFALSE 36914
// exit ;
36912: GO 37487
// side := GetSide ( unit ) ;
36914: LD_ADDR_VAR 0 9
36918: PUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 255
36928: ST_TO_ADDR
// tech_space := tech_spacanom ;
36929: LD_ADDR_VAR 0 12
36933: PUSH
36934: LD_INT 29
36936: ST_TO_ADDR
// tech_time := tech_taurad ;
36937: LD_ADDR_VAR 0 13
36941: PUSH
36942: LD_INT 28
36944: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36945: LD_ADDR_VAR 0 11
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 310
36959: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36960: LD_VAR 0 11
36964: PPUSH
36965: CALL_OW 247
36969: PUSH
36970: LD_INT 2
36972: EQUAL
36973: IFFALSE 36977
// exit ;
36975: GO 37487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36977: LD_ADDR_VAR 0 8
36981: PUSH
36982: LD_INT 81
36984: PUSH
36985: LD_VAR 0 9
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: LD_INT 21
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PPUSH
37015: CALL_OW 69
37019: ST_TO_ADDR
// if not tmp then
37020: LD_VAR 0 8
37024: NOT
37025: IFFALSE 37029
// exit ;
37027: GO 37487
// if in_unit then
37029: LD_VAR 0 11
37033: IFFALSE 37057
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37035: LD_ADDR_VAR 0 10
37039: PUSH
37040: LD_VAR 0 8
37044: PPUSH
37045: LD_VAR 0 11
37049: PPUSH
37050: CALL_OW 74
37054: ST_TO_ADDR
37055: GO 37077
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37057: LD_ADDR_VAR 0 10
37061: PUSH
37062: LD_VAR 0 8
37066: PPUSH
37067: LD_VAR 0 1
37071: PPUSH
37072: CALL_OW 74
37076: ST_TO_ADDR
// if not enemy then
37077: LD_VAR 0 10
37081: NOT
37082: IFFALSE 37086
// exit ;
37084: GO 37487
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37086: LD_VAR 0 11
37090: PUSH
37091: LD_VAR 0 11
37095: PPUSH
37096: LD_VAR 0 10
37100: PPUSH
37101: CALL_OW 296
37105: PUSH
37106: LD_INT 13
37108: GREATER
37109: AND
37110: PUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: LD_VAR 0 10
37120: PPUSH
37121: CALL_OW 296
37125: PUSH
37126: LD_INT 12
37128: GREATER
37129: OR
37130: IFFALSE 37134
// exit ;
37132: GO 37487
// missile := [ 1 ] ;
37134: LD_ADDR_VAR 0 14
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37145: LD_VAR 0 9
37149: PPUSH
37150: LD_VAR 0 12
37154: PPUSH
37155: CALL_OW 325
37159: IFFALSE 37188
// missile := Insert ( missile , missile + 1 , 2 ) ;
37161: LD_ADDR_VAR 0 14
37165: PUSH
37166: LD_VAR 0 14
37170: PPUSH
37171: LD_VAR 0 14
37175: PUSH
37176: LD_INT 1
37178: PLUS
37179: PPUSH
37180: LD_INT 2
37182: PPUSH
37183: CALL_OW 2
37187: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37188: LD_VAR 0 9
37192: PPUSH
37193: LD_VAR 0 13
37197: PPUSH
37198: CALL_OW 325
37202: PUSH
37203: LD_VAR 0 10
37207: PPUSH
37208: CALL_OW 255
37212: PPUSH
37213: LD_VAR 0 13
37217: PPUSH
37218: CALL_OW 325
37222: NOT
37223: AND
37224: IFFALSE 37253
// missile := Insert ( missile , missile + 1 , 3 ) ;
37226: LD_ADDR_VAR 0 14
37230: PUSH
37231: LD_VAR 0 14
37235: PPUSH
37236: LD_VAR 0 14
37240: PUSH
37241: LD_INT 1
37243: PLUS
37244: PPUSH
37245: LD_INT 3
37247: PPUSH
37248: CALL_OW 2
37252: ST_TO_ADDR
// if missile < 2 then
37253: LD_VAR 0 14
37257: PUSH
37258: LD_INT 2
37260: LESS
37261: IFFALSE 37265
// exit ;
37263: GO 37487
// x := GetX ( enemy ) ;
37265: LD_ADDR_VAR 0 4
37269: PUSH
37270: LD_VAR 0 10
37274: PPUSH
37275: CALL_OW 250
37279: ST_TO_ADDR
// y := GetY ( enemy ) ;
37280: LD_ADDR_VAR 0 5
37284: PUSH
37285: LD_VAR 0 10
37289: PPUSH
37290: CALL_OW 251
37294: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37295: LD_ADDR_VAR 0 6
37299: PUSH
37300: LD_VAR 0 4
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PPUSH
37309: LD_INT 1
37311: PPUSH
37312: CALL_OW 12
37316: PLUS
37317: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37318: LD_ADDR_VAR 0 7
37322: PUSH
37323: LD_VAR 0 5
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PPUSH
37332: LD_INT 1
37334: PPUSH
37335: CALL_OW 12
37339: PLUS
37340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37341: LD_VAR 0 6
37345: PPUSH
37346: LD_VAR 0 7
37350: PPUSH
37351: CALL_OW 488
37355: NOT
37356: IFFALSE 37378
// begin _x := x ;
37358: LD_ADDR_VAR 0 6
37362: PUSH
37363: LD_VAR 0 4
37367: ST_TO_ADDR
// _y := y ;
37368: LD_ADDR_VAR 0 7
37372: PUSH
37373: LD_VAR 0 5
37377: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_INT 1
37385: PPUSH
37386: LD_VAR 0 14
37390: PPUSH
37391: CALL_OW 12
37395: ST_TO_ADDR
// case i of 1 :
37396: LD_VAR 0 3
37400: PUSH
37401: LD_INT 1
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37409
37407: GO 37426
37409: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37410: LD_VAR 0 1
37414: PPUSH
37415: LD_VAR 0 10
37419: PPUSH
37420: CALL_OW 115
37424: GO 37487
37426: LD_INT 2
37428: DOUBLE
37429: EQUAL
37430: IFTRUE 37434
37432: GO 37456
37434: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37435: LD_VAR 0 1
37439: PPUSH
37440: LD_VAR 0 6
37444: PPUSH
37445: LD_VAR 0 7
37449: PPUSH
37450: CALL_OW 153
37454: GO 37487
37456: LD_INT 3
37458: DOUBLE
37459: EQUAL
37460: IFTRUE 37464
37462: GO 37486
37464: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37465: LD_VAR 0 1
37469: PPUSH
37470: LD_VAR 0 6
37474: PPUSH
37475: LD_VAR 0 7
37479: PPUSH
37480: CALL_OW 154
37484: GO 37487
37486: POP
// end ;
37487: LD_VAR 0 2
37491: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
// if not unit or not building then
37500: LD_VAR 0 1
37504: NOT
37505: PUSH
37506: LD_VAR 0 2
37510: NOT
37511: OR
37512: IFFALSE 37516
// exit ;
37514: GO 37674
// x := GetX ( building ) ;
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: LD_VAR 0 2
37525: PPUSH
37526: CALL_OW 250
37530: ST_TO_ADDR
// y := GetY ( building ) ;
37531: LD_ADDR_VAR 0 6
37535: PUSH
37536: LD_VAR 0 2
37540: PPUSH
37541: CALL_OW 251
37545: ST_TO_ADDR
// for i = 0 to 5 do
37546: LD_ADDR_VAR 0 4
37550: PUSH
37551: DOUBLE
37552: LD_INT 0
37554: DEC
37555: ST_TO_ADDR
37556: LD_INT 5
37558: PUSH
37559: FOR_TO
37560: IFFALSE 37672
// begin _x := ShiftX ( x , i , 3 ) ;
37562: LD_ADDR_VAR 0 7
37566: PUSH
37567: LD_VAR 0 5
37571: PPUSH
37572: LD_VAR 0 4
37576: PPUSH
37577: LD_INT 3
37579: PPUSH
37580: CALL_OW 272
37584: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37585: LD_ADDR_VAR 0 8
37589: PUSH
37590: LD_VAR 0 6
37594: PPUSH
37595: LD_VAR 0 4
37599: PPUSH
37600: LD_INT 3
37602: PPUSH
37603: CALL_OW 273
37607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37608: LD_VAR 0 7
37612: PPUSH
37613: LD_VAR 0 8
37617: PPUSH
37618: CALL_OW 488
37622: NOT
37623: IFFALSE 37627
// continue ;
37625: GO 37559
// if HexInfo ( _x , _y ) = 0 then
37627: LD_VAR 0 7
37631: PPUSH
37632: LD_VAR 0 8
37636: PPUSH
37637: CALL_OW 428
37641: PUSH
37642: LD_INT 0
37644: EQUAL
37645: IFFALSE 37670
// begin ComMoveXY ( unit , _x , _y ) ;
37647: LD_VAR 0 1
37651: PPUSH
37652: LD_VAR 0 7
37656: PPUSH
37657: LD_VAR 0 8
37661: PPUSH
37662: CALL_OW 111
// exit ;
37666: POP
37667: POP
37668: GO 37674
// end ; end ;
37670: GO 37559
37672: POP
37673: POP
// end ;
37674: LD_VAR 0 3
37678: RET
// export function ScanBase ( side , base_area ) ; begin
37679: LD_INT 0
37681: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37682: LD_ADDR_VAR 0 3
37686: PUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_INT 81
37694: PUSH
37695: LD_VAR 0 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PPUSH
37704: CALL_OW 70
37708: ST_TO_ADDR
// end ;
37709: LD_VAR 0 3
37713: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
// result := false ;
37720: LD_ADDR_VAR 0 2
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// side := GetSide ( unit ) ;
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_VAR 0 1
37737: PPUSH
37738: CALL_OW 255
37742: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37743: LD_ADDR_VAR 0 4
37747: PUSH
37748: LD_VAR 0 1
37752: PPUSH
37753: CALL_OW 248
37757: ST_TO_ADDR
// case nat of 1 :
37758: LD_VAR 0 4
37762: PUSH
37763: LD_INT 1
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 37782
37771: POP
// tech := tech_lassight ; 2 :
37772: LD_ADDR_VAR 0 5
37776: PUSH
37777: LD_INT 12
37779: ST_TO_ADDR
37780: GO 37821
37782: LD_INT 2
37784: DOUBLE
37785: EQUAL
37786: IFTRUE 37790
37788: GO 37801
37790: POP
// tech := tech_mortar ; 3 :
37791: LD_ADDR_VAR 0 5
37795: PUSH
37796: LD_INT 41
37798: ST_TO_ADDR
37799: GO 37821
37801: LD_INT 3
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 37820
37809: POP
// tech := tech_bazooka ; end ;
37810: LD_ADDR_VAR 0 5
37814: PUSH
37815: LD_INT 44
37817: ST_TO_ADDR
37818: GO 37821
37820: POP
// if Researched ( side , tech ) then
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 5
37830: PPUSH
37831: CALL_OW 325
37835: IFFALSE 37862
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37837: LD_ADDR_VAR 0 2
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: LD_INT 8
37847: PUSH
37848: LD_INT 9
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PUSH
37856: LD_VAR 0 4
37860: ARRAY
37861: ST_TO_ADDR
// end ;
37862: LD_VAR 0 2
37866: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37867: LD_INT 0
37869: PPUSH
37870: PPUSH
37871: PPUSH
// if not mines then
37872: LD_VAR 0 2
37876: NOT
37877: IFFALSE 37881
// exit ;
37879: GO 38025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37881: LD_ADDR_VAR 0 5
37885: PUSH
37886: LD_INT 81
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 21
37903: PUSH
37904: LD_INT 3
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PPUSH
37919: CALL_OW 69
37923: ST_TO_ADDR
// for i in mines do
37924: LD_ADDR_VAR 0 4
37928: PUSH
37929: LD_VAR 0 2
37933: PUSH
37934: FOR_IN
37935: IFFALSE 38023
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37937: LD_VAR 0 4
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 4
37950: PUSH
37951: LD_INT 2
37953: ARRAY
37954: PPUSH
37955: CALL_OW 458
37959: NOT
37960: IFFALSE 37964
// continue ;
37962: GO 37934
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37964: LD_VAR 0 4
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PPUSH
37973: LD_VAR 0 4
37977: PUSH
37978: LD_INT 2
37980: ARRAY
37981: PPUSH
37982: CALL_OW 428
37986: PUSH
37987: LD_VAR 0 5
37991: IN
37992: IFFALSE 38021
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37994: LD_VAR 0 4
37998: PUSH
37999: LD_INT 1
38001: ARRAY
38002: PPUSH
38003: LD_VAR 0 4
38007: PUSH
38008: LD_INT 2
38010: ARRAY
38011: PPUSH
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 456
// end ;
38021: GO 37934
38023: POP
38024: POP
// end ;
38025: LD_VAR 0 3
38029: RET
// export function Count ( array ) ; var i ; begin
38030: LD_INT 0
38032: PPUSH
38033: PPUSH
// result := 0 ;
38034: LD_ADDR_VAR 0 2
38038: PUSH
38039: LD_INT 0
38041: ST_TO_ADDR
// for i in array do
38042: LD_ADDR_VAR 0 3
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: FOR_IN
38053: IFFALSE 38077
// if i then
38055: LD_VAR 0 3
38059: IFFALSE 38075
// result := result + 1 ;
38061: LD_ADDR_VAR 0 2
38065: PUSH
38066: LD_VAR 0 2
38070: PUSH
38071: LD_INT 1
38073: PLUS
38074: ST_TO_ADDR
38075: GO 38052
38077: POP
38078: POP
// end ;
38079: LD_VAR 0 2
38083: RET
// export function IsEmpty ( building ) ; begin
38084: LD_INT 0
38086: PPUSH
// if not building then
38087: LD_VAR 0 1
38091: NOT
38092: IFFALSE 38096
// exit ;
38094: GO 38139
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38096: LD_ADDR_VAR 0 2
38100: PUSH
38101: LD_VAR 0 1
38105: PUSH
38106: LD_INT 22
38108: PUSH
38109: LD_VAR 0 1
38113: PPUSH
38114: CALL_OW 255
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 58
38125: PUSH
38126: EMPTY
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PPUSH
38133: CALL_OW 69
38137: IN
38138: ST_TO_ADDR
// end ;
38139: LD_VAR 0 2
38143: RET
// export function IsNotFull ( building ) ; begin
38144: LD_INT 0
38146: PPUSH
// if not building then
38147: LD_VAR 0 1
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 38175
// result := UnitsInside ( building ) < 6 ;
38156: LD_ADDR_VAR 0 2
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 313
38170: PUSH
38171: LD_INT 6
38173: LESS
38174: ST_TO_ADDR
// end ;
38175: LD_VAR 0 2
38179: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38180: LD_INT 0
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
// tmp := [ ] ;
38186: LD_ADDR_VAR 0 3
38190: PUSH
38191: EMPTY
38192: ST_TO_ADDR
// list := [ ] ;
38193: LD_ADDR_VAR 0 5
38197: PUSH
38198: EMPTY
38199: ST_TO_ADDR
// for i = 16 to 25 do
38200: LD_ADDR_VAR 0 4
38204: PUSH
38205: DOUBLE
38206: LD_INT 16
38208: DEC
38209: ST_TO_ADDR
38210: LD_INT 25
38212: PUSH
38213: FOR_TO
38214: IFFALSE 38287
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38216: LD_ADDR_VAR 0 3
38220: PUSH
38221: LD_VAR 0 3
38225: PUSH
38226: LD_INT 22
38228: PUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 255
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 91
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: LD_INT 6
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 30
38261: PUSH
38262: LD_VAR 0 4
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: PPUSH
38279: CALL_OW 69
38283: ADD
38284: ST_TO_ADDR
38285: GO 38213
38287: POP
38288: POP
// for i = 1 to tmp do
38289: LD_ADDR_VAR 0 4
38293: PUSH
38294: DOUBLE
38295: LD_INT 1
38297: DEC
38298: ST_TO_ADDR
38299: LD_VAR 0 3
38303: PUSH
38304: FOR_TO
38305: IFFALSE 38393
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38307: LD_ADDR_VAR 0 5
38311: PUSH
38312: LD_VAR 0 5
38316: PUSH
38317: LD_VAR 0 3
38321: PUSH
38322: LD_VAR 0 4
38326: ARRAY
38327: PPUSH
38328: CALL_OW 266
38332: PUSH
38333: LD_VAR 0 3
38337: PUSH
38338: LD_VAR 0 4
38342: ARRAY
38343: PPUSH
38344: CALL_OW 250
38348: PUSH
38349: LD_VAR 0 3
38353: PUSH
38354: LD_VAR 0 4
38358: ARRAY
38359: PPUSH
38360: CALL_OW 251
38364: PUSH
38365: LD_VAR 0 3
38369: PUSH
38370: LD_VAR 0 4
38374: ARRAY
38375: PPUSH
38376: CALL_OW 254
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: ADD
38390: ST_TO_ADDR
38391: GO 38304
38393: POP
38394: POP
// result := list ;
38395: LD_ADDR_VAR 0 2
38399: PUSH
38400: LD_VAR 0 5
38404: ST_TO_ADDR
// end ;
38405: LD_VAR 0 2
38409: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38410: LD_INT 0
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
// if not factory then
38419: LD_VAR 0 1
38423: NOT
38424: IFFALSE 38428
// exit ;
38426: GO 39021
// if control = control_apeman then
38428: LD_VAR 0 4
38432: PUSH
38433: LD_INT 5
38435: EQUAL
38436: IFFALSE 38545
// begin tmp := UnitsInside ( factory ) ;
38438: LD_ADDR_VAR 0 8
38442: PUSH
38443: LD_VAR 0 1
38447: PPUSH
38448: CALL_OW 313
38452: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38453: LD_VAR 0 8
38457: PPUSH
38458: LD_INT 25
38460: PUSH
38461: LD_INT 12
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PPUSH
38468: CALL_OW 72
38472: NOT
38473: IFFALSE 38483
// control := control_manual ;
38475: LD_ADDR_VAR 0 4
38479: PUSH
38480: LD_INT 1
38482: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38483: LD_ADDR_VAR 0 8
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL 38180 0 1
38497: ST_TO_ADDR
// if tmp then
38498: LD_VAR 0 8
38502: IFFALSE 38545
// begin for i in tmp do
38504: LD_ADDR_VAR 0 7
38508: PUSH
38509: LD_VAR 0 8
38513: PUSH
38514: FOR_IN
38515: IFFALSE 38543
// if i [ 1 ] = b_ext_radio then
38517: LD_VAR 0 7
38521: PUSH
38522: LD_INT 1
38524: ARRAY
38525: PUSH
38526: LD_INT 22
38528: EQUAL
38529: IFFALSE 38541
// begin control := control_remote ;
38531: LD_ADDR_VAR 0 4
38535: PUSH
38536: LD_INT 2
38538: ST_TO_ADDR
// break ;
38539: GO 38543
// end ;
38541: GO 38514
38543: POP
38544: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_VAR 0 2
38554: PPUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: LD_VAR 0 4
38564: PPUSH
38565: LD_VAR 0 5
38569: PPUSH
38570: CALL_OW 448
38574: IFFALSE 38609
// begin result := [ chassis , engine , control , weapon ] ;
38576: LD_ADDR_VAR 0 6
38580: PUSH
38581: LD_VAR 0 2
38585: PUSH
38586: LD_VAR 0 3
38590: PUSH
38591: LD_VAR 0 4
38595: PUSH
38596: LD_VAR 0 5
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// exit ;
38607: GO 39021
// end ; _chassis := AvailableChassisList ( factory ) ;
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: LD_VAR 0 1
38618: PPUSH
38619: CALL_OW 475
38623: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38624: LD_ADDR_VAR 0 11
38628: PUSH
38629: LD_VAR 0 1
38633: PPUSH
38634: CALL_OW 476
38638: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38639: LD_ADDR_VAR 0 12
38643: PUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 477
38653: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38654: LD_ADDR_VAR 0 10
38658: PUSH
38659: LD_VAR 0 1
38663: PPUSH
38664: CALL_OW 478
38668: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38669: LD_VAR 0 9
38673: NOT
38674: PUSH
38675: LD_VAR 0 11
38679: NOT
38680: OR
38681: PUSH
38682: LD_VAR 0 12
38686: NOT
38687: OR
38688: PUSH
38689: LD_VAR 0 10
38693: NOT
38694: OR
38695: IFFALSE 38730
// begin result := [ chassis , engine , control , weapon ] ;
38697: LD_ADDR_VAR 0 6
38701: PUSH
38702: LD_VAR 0 2
38706: PUSH
38707: LD_VAR 0 3
38711: PUSH
38712: LD_VAR 0 4
38716: PUSH
38717: LD_VAR 0 5
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// exit ;
38728: GO 39021
// end ; if not chassis in _chassis then
38730: LD_VAR 0 2
38734: PUSH
38735: LD_VAR 0 9
38739: IN
38740: NOT
38741: IFFALSE 38767
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38743: LD_ADDR_VAR 0 2
38747: PUSH
38748: LD_VAR 0 9
38752: PUSH
38753: LD_INT 1
38755: PPUSH
38756: LD_VAR 0 9
38760: PPUSH
38761: CALL_OW 12
38765: ARRAY
38766: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38767: LD_VAR 0 2
38771: PPUSH
38772: LD_VAR 0 3
38776: PPUSH
38777: CALL 39026 0 2
38781: NOT
38782: IFFALSE 38841
// repeat engine := _engine [ 1 ] ;
38784: LD_ADDR_VAR 0 3
38788: PUSH
38789: LD_VAR 0 11
38793: PUSH
38794: LD_INT 1
38796: ARRAY
38797: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38798: LD_ADDR_VAR 0 11
38802: PUSH
38803: LD_VAR 0 11
38807: PPUSH
38808: LD_INT 1
38810: PPUSH
38811: CALL_OW 3
38815: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38816: LD_VAR 0 2
38820: PPUSH
38821: LD_VAR 0 3
38825: PPUSH
38826: CALL 39026 0 2
38830: PUSH
38831: LD_VAR 0 11
38835: PUSH
38836: EMPTY
38837: EQUAL
38838: OR
38839: IFFALSE 38784
// if not control in _control then
38841: LD_VAR 0 4
38845: PUSH
38846: LD_VAR 0 12
38850: IN
38851: NOT
38852: IFFALSE 38878
// control := _control [ rand ( 1 , _control ) ] ;
38854: LD_ADDR_VAR 0 4
38858: PUSH
38859: LD_VAR 0 12
38863: PUSH
38864: LD_INT 1
38866: PPUSH
38867: LD_VAR 0 12
38871: PPUSH
38872: CALL_OW 12
38876: ARRAY
38877: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38878: LD_VAR 0 2
38882: PPUSH
38883: LD_VAR 0 5
38887: PPUSH
38888: CALL 39246 0 2
38892: NOT
38893: IFFALSE 38952
// repeat weapon := _weapon [ 1 ] ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_VAR 0 10
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38909: LD_ADDR_VAR 0 10
38913: PUSH
38914: LD_VAR 0 10
38918: PPUSH
38919: LD_INT 1
38921: PPUSH
38922: CALL_OW 3
38926: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 5
38936: PPUSH
38937: CALL 39246 0 2
38941: PUSH
38942: LD_VAR 0 10
38946: PUSH
38947: EMPTY
38948: EQUAL
38949: OR
38950: IFFALSE 38895
// result := [ ] ;
38952: LD_ADDR_VAR 0 6
38956: PUSH
38957: EMPTY
38958: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_VAR 0 2
38968: PPUSH
38969: LD_VAR 0 3
38973: PPUSH
38974: LD_VAR 0 4
38978: PPUSH
38979: LD_VAR 0 5
38983: PPUSH
38984: CALL_OW 448
38988: IFFALSE 39021
// result := [ chassis , engine , control , weapon ] ;
38990: LD_ADDR_VAR 0 6
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_VAR 0 3
39004: PUSH
39005: LD_VAR 0 4
39009: PUSH
39010: LD_VAR 0 5
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 6
39025: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39026: LD_INT 0
39028: PPUSH
// if not chassis or not engine then
39029: LD_VAR 0 1
39033: NOT
39034: PUSH
39035: LD_VAR 0 2
39039: NOT
39040: OR
39041: IFFALSE 39045
// exit ;
39043: GO 39241
// case engine of engine_solar :
39045: LD_VAR 0 2
39049: PUSH
39050: LD_INT 2
39052: DOUBLE
39053: EQUAL
39054: IFTRUE 39058
39056: GO 39096
39058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_INT 11
39066: PUSH
39067: LD_INT 12
39069: PUSH
39070: LD_INT 13
39072: PUSH
39073: LD_INT 14
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
39094: GO 39225
39096: LD_INT 1
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39104
39102: GO 39166
39104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39105: LD_ADDR_VAR 0 3
39109: PUSH
39110: LD_INT 11
39112: PUSH
39113: LD_INT 12
39115: PUSH
39116: LD_INT 13
39118: PUSH
39119: LD_INT 14
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: LD_INT 5
39136: PUSH
39137: LD_INT 21
39139: PUSH
39140: LD_INT 23
39142: PUSH
39143: LD_INT 22
39145: PUSH
39146: LD_INT 24
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
39164: GO 39225
39166: LD_INT 3
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39224
39174: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39175: LD_ADDR_VAR 0 3
39179: PUSH
39180: LD_INT 13
39182: PUSH
39183: LD_INT 14
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: LD_INT 5
39197: PUSH
39198: LD_INT 21
39200: PUSH
39201: LD_INT 22
39203: PUSH
39204: LD_INT 23
39206: PUSH
39207: LD_INT 24
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: ST_TO_ADDR
39222: GO 39225
39224: POP
// result := ( chassis in result ) ;
39225: LD_ADDR_VAR 0 3
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: LD_VAR 0 3
39239: IN
39240: ST_TO_ADDR
// end ;
39241: LD_VAR 0 3
39245: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39246: LD_INT 0
39248: PPUSH
// if not chassis or not weapon then
39249: LD_VAR 0 1
39253: NOT
39254: PUSH
39255: LD_VAR 0 2
39259: NOT
39260: OR
39261: IFFALSE 39265
// exit ;
39263: GO 40291
// case weapon of us_machine_gun :
39265: LD_VAR 0 2
39269: PUSH
39270: LD_INT 2
39272: DOUBLE
39273: EQUAL
39274: IFTRUE 39278
39276: GO 39308
39278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39279: LD_ADDR_VAR 0 3
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 3
39292: PUSH
39293: LD_INT 4
39295: PUSH
39296: LD_INT 5
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
39306: GO 40275
39308: LD_INT 3
39310: DOUBLE
39311: EQUAL
39312: IFTRUE 39316
39314: GO 39346
39316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39317: LD_ADDR_VAR 0 3
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: LD_INT 4
39333: PUSH
39334: LD_INT 5
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
39344: GO 40275
39346: LD_INT 11
39348: DOUBLE
39349: EQUAL
39350: IFTRUE 39354
39352: GO 39384
39354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39355: LD_ADDR_VAR 0 3
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 4
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
39382: GO 40275
39384: LD_INT 4
39386: DOUBLE
39387: EQUAL
39388: IFTRUE 39392
39390: GO 39418
39392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39393: LD_ADDR_VAR 0 3
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: LD_INT 5
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
39416: GO 40275
39418: LD_INT 5
39420: DOUBLE
39421: EQUAL
39422: IFTRUE 39426
39424: GO 39452
39426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39427: LD_ADDR_VAR 0 3
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 3
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 5
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
39450: GO 40275
39452: LD_INT 9
39454: DOUBLE
39455: EQUAL
39456: IFTRUE 39460
39458: GO 39486
39460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 3
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: LD_INT 5
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: ST_TO_ADDR
39484: GO 40275
39486: LD_INT 7
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39494
39492: GO 39520
39494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39495: LD_ADDR_VAR 0 3
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 4
39508: PUSH
39509: LD_INT 5
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
39518: GO 40275
39520: LD_INT 12
39522: DOUBLE
39523: EQUAL
39524: IFTRUE 39528
39526: GO 39554
39528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39529: LD_ADDR_VAR 0 3
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: LD_INT 5
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
39552: GO 40275
39554: LD_INT 13
39556: DOUBLE
39557: EQUAL
39558: IFTRUE 39562
39560: GO 39588
39562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 3
39573: PUSH
39574: LD_INT 4
39576: PUSH
39577: LD_INT 5
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
39586: GO 40275
39588: LD_INT 14
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39614
39596: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 4
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: ST_TO_ADDR
39612: GO 40275
39614: LD_INT 6
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39640
39622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 4
39630: PUSH
39631: LD_INT 5
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: ST_TO_ADDR
39638: GO 40275
39640: LD_INT 10
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39666
39648: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_INT 4
39656: PUSH
39657: LD_INT 5
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: ST_TO_ADDR
39664: GO 40275
39666: LD_INT 22
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39700
39674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_INT 11
39682: PUSH
39683: LD_INT 12
39685: PUSH
39686: LD_INT 13
39688: PUSH
39689: LD_INT 14
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
39698: GO 40275
39700: LD_INT 23
39702: DOUBLE
39703: EQUAL
39704: IFTRUE 39708
39706: GO 39734
39708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39709: LD_ADDR_VAR 0 3
39713: PUSH
39714: LD_INT 11
39716: PUSH
39717: LD_INT 12
39719: PUSH
39720: LD_INT 13
39722: PUSH
39723: LD_INT 14
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
39732: GO 40275
39734: LD_INT 24
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39742
39740: GO 39768
39742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39743: LD_ADDR_VAR 0 3
39747: PUSH
39748: LD_INT 11
39750: PUSH
39751: LD_INT 12
39753: PUSH
39754: LD_INT 13
39756: PUSH
39757: LD_INT 14
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
39766: GO 40275
39768: LD_INT 30
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 39802
39776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 11
39784: PUSH
39785: LD_INT 12
39787: PUSH
39788: LD_INT 13
39790: PUSH
39791: LD_INT 14
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: ST_TO_ADDR
39800: GO 40275
39802: LD_INT 25
39804: DOUBLE
39805: EQUAL
39806: IFTRUE 39810
39808: GO 39828
39810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_INT 13
39818: PUSH
39819: LD_INT 14
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 40275
39828: LD_INT 27
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39854
39836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 13
39844: PUSH
39845: LD_INT 14
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: ST_TO_ADDR
39852: GO 40275
39854: LD_INT 28
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39862
39860: GO 39880
39862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_INT 13
39870: PUSH
39871: LD_INT 14
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: ST_TO_ADDR
39878: GO 40275
39880: LD_INT 29
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39888
39886: GO 39906
39888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 13
39896: PUSH
39897: LD_INT 14
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: ST_TO_ADDR
39904: GO 40275
39906: LD_INT 31
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39914
39912: GO 39932
39914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_INT 13
39922: PUSH
39923: LD_INT 14
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: ST_TO_ADDR
39930: GO 40275
39932: LD_INT 26
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39940
39938: GO 39958
39940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_INT 13
39948: PUSH
39949: LD_INT 14
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: ST_TO_ADDR
39956: GO 40275
39958: LD_INT 42
39960: DOUBLE
39961: EQUAL
39962: IFTRUE 39966
39964: GO 39992
39966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 21
39974: PUSH
39975: LD_INT 22
39977: PUSH
39978: LD_INT 23
39980: PUSH
39981: LD_INT 24
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: ST_TO_ADDR
39990: GO 40275
39992: LD_INT 43
39994: DOUBLE
39995: EQUAL
39996: IFTRUE 40000
39998: GO 40026
40000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40001: LD_ADDR_VAR 0 3
40005: PUSH
40006: LD_INT 21
40008: PUSH
40009: LD_INT 22
40011: PUSH
40012: LD_INT 23
40014: PUSH
40015: LD_INT 24
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
40024: GO 40275
40026: LD_INT 44
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40034
40032: GO 40060
40034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40035: LD_ADDR_VAR 0 3
40039: PUSH
40040: LD_INT 21
40042: PUSH
40043: LD_INT 22
40045: PUSH
40046: LD_INT 23
40048: PUSH
40049: LD_INT 24
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
40058: GO 40275
40060: LD_INT 45
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40094
40068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_INT 21
40076: PUSH
40077: LD_INT 22
40079: PUSH
40080: LD_INT 23
40082: PUSH
40083: LD_INT 24
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
40092: GO 40275
40094: LD_INT 49
40096: DOUBLE
40097: EQUAL
40098: IFTRUE 40102
40100: GO 40128
40102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_INT 21
40110: PUSH
40111: LD_INT 22
40113: PUSH
40114: LD_INT 23
40116: PUSH
40117: LD_INT 24
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
40126: GO 40275
40128: LD_INT 51
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40162
40136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_INT 21
40144: PUSH
40145: LD_INT 22
40147: PUSH
40148: LD_INT 23
40150: PUSH
40151: LD_INT 24
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
40160: GO 40275
40162: LD_INT 52
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40170
40168: GO 40196
40170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40171: LD_ADDR_VAR 0 3
40175: PUSH
40176: LD_INT 21
40178: PUSH
40179: LD_INT 22
40181: PUSH
40182: LD_INT 23
40184: PUSH
40185: LD_INT 24
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
40194: GO 40275
40196: LD_INT 53
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40222
40204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: LD_INT 23
40212: PUSH
40213: LD_INT 24
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: ST_TO_ADDR
40220: GO 40275
40222: LD_INT 46
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40248
40230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 23
40238: PUSH
40239: LD_INT 24
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: ST_TO_ADDR
40246: GO 40275
40248: LD_INT 47
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40274
40256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 23
40264: PUSH
40265: LD_INT 24
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: ST_TO_ADDR
40272: GO 40275
40274: POP
// result := ( chassis in result ) ;
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_VAR 0 1
40284: PUSH
40285: LD_VAR 0 3
40289: IN
40290: ST_TO_ADDR
// end ;
40291: LD_VAR 0 3
40295: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40296: LD_INT 0
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
// result := array ;
40305: LD_ADDR_VAR 0 5
40309: PUSH
40310: LD_VAR 0 1
40314: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40315: LD_VAR 0 1
40319: NOT
40320: PUSH
40321: LD_VAR 0 2
40325: NOT
40326: OR
40327: PUSH
40328: LD_VAR 0 3
40332: NOT
40333: OR
40334: PUSH
40335: LD_VAR 0 2
40339: PUSH
40340: LD_VAR 0 1
40344: GREATER
40345: OR
40346: PUSH
40347: LD_VAR 0 3
40351: PUSH
40352: LD_VAR 0 1
40356: GREATER
40357: OR
40358: IFFALSE 40362
// exit ;
40360: GO 40658
// if direction then
40362: LD_VAR 0 4
40366: IFFALSE 40430
// begin d := 1 ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_INT 1
40375: ST_TO_ADDR
// if i_from > i_to then
40376: LD_VAR 0 2
40380: PUSH
40381: LD_VAR 0 3
40385: GREATER
40386: IFFALSE 40412
// length := ( array - i_from ) + i_to else
40388: LD_ADDR_VAR 0 11
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: LD_VAR 0 2
40402: MINUS
40403: PUSH
40404: LD_VAR 0 3
40408: PLUS
40409: ST_TO_ADDR
40410: GO 40428
// length := i_to - i_from ;
40412: LD_ADDR_VAR 0 11
40416: PUSH
40417: LD_VAR 0 3
40421: PUSH
40422: LD_VAR 0 2
40426: MINUS
40427: ST_TO_ADDR
// end else
40428: GO 40491
// begin d := - 1 ;
40430: LD_ADDR_VAR 0 9
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: ST_TO_ADDR
// if i_from > i_to then
40439: LD_VAR 0 2
40443: PUSH
40444: LD_VAR 0 3
40448: GREATER
40449: IFFALSE 40469
// length := i_from - i_to else
40451: LD_ADDR_VAR 0 11
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_VAR 0 3
40465: MINUS
40466: ST_TO_ADDR
40467: GO 40491
// length := ( array - i_to ) + i_from ;
40469: LD_ADDR_VAR 0 11
40473: PUSH
40474: LD_VAR 0 1
40478: PUSH
40479: LD_VAR 0 3
40483: MINUS
40484: PUSH
40485: LD_VAR 0 2
40489: PLUS
40490: ST_TO_ADDR
// end ; if not length then
40491: LD_VAR 0 11
40495: NOT
40496: IFFALSE 40500
// exit ;
40498: GO 40658
// tmp := array ;
40500: LD_ADDR_VAR 0 10
40504: PUSH
40505: LD_VAR 0 1
40509: ST_TO_ADDR
// for i = 1 to length do
40510: LD_ADDR_VAR 0 6
40514: PUSH
40515: DOUBLE
40516: LD_INT 1
40518: DEC
40519: ST_TO_ADDR
40520: LD_VAR 0 11
40524: PUSH
40525: FOR_TO
40526: IFFALSE 40646
// begin for j = 1 to array do
40528: LD_ADDR_VAR 0 7
40532: PUSH
40533: DOUBLE
40534: LD_INT 1
40536: DEC
40537: ST_TO_ADDR
40538: LD_VAR 0 1
40542: PUSH
40543: FOR_TO
40544: IFFALSE 40632
// begin k := j + d ;
40546: LD_ADDR_VAR 0 8
40550: PUSH
40551: LD_VAR 0 7
40555: PUSH
40556: LD_VAR 0 9
40560: PLUS
40561: ST_TO_ADDR
// if k > array then
40562: LD_VAR 0 8
40566: PUSH
40567: LD_VAR 0 1
40571: GREATER
40572: IFFALSE 40582
// k := 1 ;
40574: LD_ADDR_VAR 0 8
40578: PUSH
40579: LD_INT 1
40581: ST_TO_ADDR
// if not k then
40582: LD_VAR 0 8
40586: NOT
40587: IFFALSE 40599
// k := array ;
40589: LD_ADDR_VAR 0 8
40593: PUSH
40594: LD_VAR 0 1
40598: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40599: LD_ADDR_VAR 0 10
40603: PUSH
40604: LD_VAR 0 10
40608: PPUSH
40609: LD_VAR 0 8
40613: PPUSH
40614: LD_VAR 0 1
40618: PUSH
40619: LD_VAR 0 7
40623: ARRAY
40624: PPUSH
40625: CALL_OW 1
40629: ST_TO_ADDR
// end ;
40630: GO 40543
40632: POP
40633: POP
// array := tmp ;
40634: LD_ADDR_VAR 0 1
40638: PUSH
40639: LD_VAR 0 10
40643: ST_TO_ADDR
// end ;
40644: GO 40525
40646: POP
40647: POP
// result := array ;
40648: LD_ADDR_VAR 0 5
40652: PUSH
40653: LD_VAR 0 1
40657: ST_TO_ADDR
// end ;
40658: LD_VAR 0 5
40662: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40663: LD_INT 0
40665: PPUSH
40666: PPUSH
// result := 0 ;
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_INT 0
40674: ST_TO_ADDR
// if not array or not value in array then
40675: LD_VAR 0 1
40679: NOT
40680: PUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 1
40690: IN
40691: NOT
40692: OR
40693: IFFALSE 40697
// exit ;
40695: GO 40751
// for i = 1 to array do
40697: LD_ADDR_VAR 0 4
40701: PUSH
40702: DOUBLE
40703: LD_INT 1
40705: DEC
40706: ST_TO_ADDR
40707: LD_VAR 0 1
40711: PUSH
40712: FOR_TO
40713: IFFALSE 40749
// if value = array [ i ] then
40715: LD_VAR 0 2
40719: PUSH
40720: LD_VAR 0 1
40724: PUSH
40725: LD_VAR 0 4
40729: ARRAY
40730: EQUAL
40731: IFFALSE 40747
// begin result := i ;
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: LD_VAR 0 4
40742: ST_TO_ADDR
// exit ;
40743: POP
40744: POP
40745: GO 40751
// end ;
40747: GO 40712
40749: POP
40750: POP
// end ;
40751: LD_VAR 0 3
40755: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40756: LD_INT 0
40758: PPUSH
// vc_chassis := chassis ;
40759: LD_ADDR_OWVAR 37
40763: PUSH
40764: LD_VAR 0 1
40768: ST_TO_ADDR
// vc_engine := engine ;
40769: LD_ADDR_OWVAR 39
40773: PUSH
40774: LD_VAR 0 2
40778: ST_TO_ADDR
// vc_control := control ;
40779: LD_ADDR_OWVAR 38
40783: PUSH
40784: LD_VAR 0 3
40788: ST_TO_ADDR
// vc_weapon := weapon ;
40789: LD_ADDR_OWVAR 40
40793: PUSH
40794: LD_VAR 0 4
40798: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40799: LD_ADDR_OWVAR 41
40803: PUSH
40804: LD_VAR 0 5
40808: ST_TO_ADDR
// end ;
40809: LD_VAR 0 6
40813: RET
// export function WantPlant ( unit ) ; var task ; begin
40814: LD_INT 0
40816: PPUSH
40817: PPUSH
// result := false ;
40818: LD_ADDR_VAR 0 2
40822: PUSH
40823: LD_INT 0
40825: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 437
40840: ST_TO_ADDR
// if task then
40841: LD_VAR 0 3
40845: IFFALSE 40873
// if task [ 1 ] [ 1 ] = p then
40847: LD_VAR 0 3
40851: PUSH
40852: LD_INT 1
40854: ARRAY
40855: PUSH
40856: LD_INT 1
40858: ARRAY
40859: PUSH
40860: LD_STRING p
40862: EQUAL
40863: IFFALSE 40873
// result := true ;
40865: LD_ADDR_VAR 0 2
40869: PUSH
40870: LD_INT 1
40872: ST_TO_ADDR
// end ;
40873: LD_VAR 0 2
40877: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40878: LD_INT 0
40880: PPUSH
40881: PPUSH
40882: PPUSH
40883: PPUSH
// if pos < 1 then
40884: LD_VAR 0 2
40888: PUSH
40889: LD_INT 1
40891: LESS
40892: IFFALSE 40896
// exit ;
40894: GO 41199
// if pos = 1 then
40896: LD_VAR 0 2
40900: PUSH
40901: LD_INT 1
40903: EQUAL
40904: IFFALSE 40937
// result := Replace ( arr , pos [ 1 ] , value ) else
40906: LD_ADDR_VAR 0 4
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_VAR 0 2
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: PPUSH
40925: LD_VAR 0 3
40929: PPUSH
40930: CALL_OW 1
40934: ST_TO_ADDR
40935: GO 41199
// begin tmp := arr ;
40937: LD_ADDR_VAR 0 6
40941: PUSH
40942: LD_VAR 0 1
40946: ST_TO_ADDR
// s_arr := [ tmp ] ;
40947: LD_ADDR_VAR 0 7
40951: PUSH
40952: LD_VAR 0 6
40956: PUSH
40957: EMPTY
40958: LIST
40959: ST_TO_ADDR
// for i = 1 to pos - 1 do
40960: LD_ADDR_VAR 0 5
40964: PUSH
40965: DOUBLE
40966: LD_INT 1
40968: DEC
40969: ST_TO_ADDR
40970: LD_VAR 0 2
40974: PUSH
40975: LD_INT 1
40977: MINUS
40978: PUSH
40979: FOR_TO
40980: IFFALSE 41025
// begin tmp := tmp [ pos [ i ] ] ;
40982: LD_ADDR_VAR 0 6
40986: PUSH
40987: LD_VAR 0 6
40991: PUSH
40992: LD_VAR 0 2
40996: PUSH
40997: LD_VAR 0 5
41001: ARRAY
41002: ARRAY
41003: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41004: LD_ADDR_VAR 0 7
41008: PUSH
41009: LD_VAR 0 7
41013: PUSH
41014: LD_VAR 0 6
41018: PUSH
41019: EMPTY
41020: LIST
41021: ADD
41022: ST_TO_ADDR
// end ;
41023: GO 40979
41025: POP
41026: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41027: LD_ADDR_VAR 0 6
41031: PUSH
41032: LD_VAR 0 6
41036: PPUSH
41037: LD_VAR 0 2
41041: PUSH
41042: LD_VAR 0 2
41046: ARRAY
41047: PPUSH
41048: LD_VAR 0 3
41052: PPUSH
41053: CALL_OW 1
41057: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: LD_VAR 0 7
41067: PPUSH
41068: LD_VAR 0 7
41072: PPUSH
41073: LD_VAR 0 6
41077: PPUSH
41078: CALL_OW 1
41082: ST_TO_ADDR
// for i = s_arr downto 2 do
41083: LD_ADDR_VAR 0 5
41087: PUSH
41088: DOUBLE
41089: LD_VAR 0 7
41093: INC
41094: ST_TO_ADDR
41095: LD_INT 2
41097: PUSH
41098: FOR_DOWNTO
41099: IFFALSE 41183
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41101: LD_ADDR_VAR 0 6
41105: PUSH
41106: LD_VAR 0 7
41110: PUSH
41111: LD_VAR 0 5
41115: PUSH
41116: LD_INT 1
41118: MINUS
41119: ARRAY
41120: PPUSH
41121: LD_VAR 0 2
41125: PUSH
41126: LD_VAR 0 5
41130: PUSH
41131: LD_INT 1
41133: MINUS
41134: ARRAY
41135: PPUSH
41136: LD_VAR 0 7
41140: PUSH
41141: LD_VAR 0 5
41145: ARRAY
41146: PPUSH
41147: CALL_OW 1
41151: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41152: LD_ADDR_VAR 0 7
41156: PUSH
41157: LD_VAR 0 7
41161: PPUSH
41162: LD_VAR 0 5
41166: PUSH
41167: LD_INT 1
41169: MINUS
41170: PPUSH
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 1
41180: ST_TO_ADDR
// end ;
41181: GO 41098
41183: POP
41184: POP
// result := s_arr [ 1 ] ;
41185: LD_ADDR_VAR 0 4
41189: PUSH
41190: LD_VAR 0 7
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: ST_TO_ADDR
// end ; end ;
41199: LD_VAR 0 4
41203: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
// if not list then
41208: LD_VAR 0 1
41212: NOT
41213: IFFALSE 41217
// exit ;
41215: GO 41308
// i := list [ pos1 ] ;
41217: LD_ADDR_VAR 0 5
41221: PUSH
41222: LD_VAR 0 1
41226: PUSH
41227: LD_VAR 0 2
41231: ARRAY
41232: ST_TO_ADDR
// if not i then
41233: LD_VAR 0 5
41237: NOT
41238: IFFALSE 41242
// exit ;
41240: GO 41308
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41242: LD_ADDR_VAR 0 1
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: LD_VAR 0 2
41256: PPUSH
41257: LD_VAR 0 1
41261: PUSH
41262: LD_VAR 0 3
41266: ARRAY
41267: PPUSH
41268: CALL_OW 1
41272: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41273: LD_ADDR_VAR 0 1
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 3
41287: PPUSH
41288: LD_VAR 0 5
41292: PPUSH
41293: CALL_OW 1
41297: ST_TO_ADDR
// result := list ;
41298: LD_ADDR_VAR 0 4
41302: PUSH
41303: LD_VAR 0 1
41307: ST_TO_ADDR
// end ;
41308: LD_VAR 0 4
41312: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41313: LD_INT 0
41315: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41316: LD_ADDR_VAR 0 5
41320: PUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 250
41330: PPUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: CALL_OW 251
41340: PPUSH
41341: LD_VAR 0 2
41345: PPUSH
41346: LD_VAR 0 3
41350: PPUSH
41351: LD_VAR 0 4
41355: PPUSH
41356: CALL 41366 0 5
41360: ST_TO_ADDR
// end ;
41361: LD_VAR 0 5
41365: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41366: LD_INT 0
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
// if not list then
41372: LD_VAR 0 3
41376: NOT
41377: IFFALSE 41381
// exit ;
41379: GO 41769
// result := [ ] ;
41381: LD_ADDR_VAR 0 6
41385: PUSH
41386: EMPTY
41387: ST_TO_ADDR
// for i in list do
41388: LD_ADDR_VAR 0 7
41392: PUSH
41393: LD_VAR 0 3
41397: PUSH
41398: FOR_IN
41399: IFFALSE 41601
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41401: LD_ADDR_VAR 0 9
41405: PUSH
41406: LD_VAR 0 7
41410: PPUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: LD_VAR 0 2
41420: PPUSH
41421: CALL_OW 297
41425: ST_TO_ADDR
// if not result then
41426: LD_VAR 0 6
41430: NOT
41431: IFFALSE 41457
// result := [ [ i , tmp ] ] else
41433: LD_ADDR_VAR 0 6
41437: PUSH
41438: LD_VAR 0 7
41442: PUSH
41443: LD_VAR 0 9
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: EMPTY
41453: LIST
41454: ST_TO_ADDR
41455: GO 41599
// begin if result [ result ] [ 2 ] < tmp then
41457: LD_VAR 0 6
41461: PUSH
41462: LD_VAR 0 6
41466: ARRAY
41467: PUSH
41468: LD_INT 2
41470: ARRAY
41471: PUSH
41472: LD_VAR 0 9
41476: LESS
41477: IFFALSE 41519
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41479: LD_ADDR_VAR 0 6
41483: PUSH
41484: LD_VAR 0 6
41488: PPUSH
41489: LD_VAR 0 6
41493: PUSH
41494: LD_INT 1
41496: PLUS
41497: PPUSH
41498: LD_VAR 0 7
41502: PUSH
41503: LD_VAR 0 9
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PPUSH
41512: CALL_OW 2
41516: ST_TO_ADDR
41517: GO 41599
// for j = 1 to result do
41519: LD_ADDR_VAR 0 8
41523: PUSH
41524: DOUBLE
41525: LD_INT 1
41527: DEC
41528: ST_TO_ADDR
41529: LD_VAR 0 6
41533: PUSH
41534: FOR_TO
41535: IFFALSE 41597
// begin if tmp < result [ j ] [ 2 ] then
41537: LD_VAR 0 9
41541: PUSH
41542: LD_VAR 0 6
41546: PUSH
41547: LD_VAR 0 8
41551: ARRAY
41552: PUSH
41553: LD_INT 2
41555: ARRAY
41556: LESS
41557: IFFALSE 41595
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41559: LD_ADDR_VAR 0 6
41563: PUSH
41564: LD_VAR 0 6
41568: PPUSH
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_VAR 0 7
41578: PUSH
41579: LD_VAR 0 9
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PPUSH
41588: CALL_OW 2
41592: ST_TO_ADDR
// break ;
41593: GO 41597
// end ; end ;
41595: GO 41534
41597: POP
41598: POP
// end ; end ;
41599: GO 41398
41601: POP
41602: POP
// if result and not asc then
41603: LD_VAR 0 6
41607: PUSH
41608: LD_VAR 0 4
41612: NOT
41613: AND
41614: IFFALSE 41689
// begin tmp := result ;
41616: LD_ADDR_VAR 0 9
41620: PUSH
41621: LD_VAR 0 6
41625: ST_TO_ADDR
// for i = tmp downto 1 do
41626: LD_ADDR_VAR 0 7
41630: PUSH
41631: DOUBLE
41632: LD_VAR 0 9
41636: INC
41637: ST_TO_ADDR
41638: LD_INT 1
41640: PUSH
41641: FOR_DOWNTO
41642: IFFALSE 41687
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41644: LD_ADDR_VAR 0 6
41648: PUSH
41649: LD_VAR 0 6
41653: PPUSH
41654: LD_VAR 0 9
41658: PUSH
41659: LD_VAR 0 7
41663: MINUS
41664: PUSH
41665: LD_INT 1
41667: PLUS
41668: PPUSH
41669: LD_VAR 0 9
41673: PUSH
41674: LD_VAR 0 7
41678: ARRAY
41679: PPUSH
41680: CALL_OW 1
41684: ST_TO_ADDR
41685: GO 41641
41687: POP
41688: POP
// end ; tmp := [ ] ;
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: EMPTY
41695: ST_TO_ADDR
// if mode then
41696: LD_VAR 0 5
41700: IFFALSE 41769
// begin for i = 1 to result do
41702: LD_ADDR_VAR 0 7
41706: PUSH
41707: DOUBLE
41708: LD_INT 1
41710: DEC
41711: ST_TO_ADDR
41712: LD_VAR 0 6
41716: PUSH
41717: FOR_TO
41718: IFFALSE 41757
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41720: LD_ADDR_VAR 0 9
41724: PUSH
41725: LD_VAR 0 9
41729: PPUSH
41730: LD_VAR 0 7
41734: PPUSH
41735: LD_VAR 0 6
41739: PUSH
41740: LD_VAR 0 7
41744: ARRAY
41745: PUSH
41746: LD_INT 1
41748: ARRAY
41749: PPUSH
41750: CALL_OW 1
41754: ST_TO_ADDR
41755: GO 41717
41757: POP
41758: POP
// result := tmp ;
41759: LD_ADDR_VAR 0 6
41763: PUSH
41764: LD_VAR 0 9
41768: ST_TO_ADDR
// end ; end ;
41769: LD_VAR 0 6
41773: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41774: LD_INT 0
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41782: LD_ADDR_VAR 0 5
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// if not x or not y then
41804: LD_VAR 0 2
41808: NOT
41809: PUSH
41810: LD_VAR 0 3
41814: NOT
41815: OR
41816: IFFALSE 41820
// exit ;
41818: GO 43466
// if not range then
41820: LD_VAR 0 4
41824: NOT
41825: IFFALSE 41835
// range := 10 ;
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: LD_INT 10
41834: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41835: LD_ADDR_VAR 0 8
41839: PUSH
41840: LD_INT 81
41842: PUSH
41843: LD_VAR 0 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 92
41854: PUSH
41855: LD_VAR 0 2
41859: PUSH
41860: LD_VAR 0 3
41864: PUSH
41865: LD_VAR 0 4
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: LD_INT 21
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: PPUSH
41898: CALL_OW 69
41902: ST_TO_ADDR
// if not tmp then
41903: LD_VAR 0 8
41907: NOT
41908: IFFALSE 41912
// exit ;
41910: GO 43466
// for i in tmp do
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_VAR 0 8
41921: PUSH
41922: FOR_IN
41923: IFFALSE 43441
// begin points := [ 0 , 0 , 0 ] ;
41925: LD_ADDR_VAR 0 9
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: ST_TO_ADDR
// bpoints := 1 ;
41944: LD_ADDR_VAR 0 10
41948: PUSH
41949: LD_INT 1
41951: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41952: LD_VAR 0 6
41956: PPUSH
41957: CALL_OW 247
41961: PUSH
41962: LD_INT 1
41964: DOUBLE
41965: EQUAL
41966: IFTRUE 41970
41968: GO 42548
41970: POP
// begin if GetClass ( i ) = 1 then
41971: LD_VAR 0 6
41975: PPUSH
41976: CALL_OW 257
41980: PUSH
41981: LD_INT 1
41983: EQUAL
41984: IFFALSE 42005
// points := [ 10 , 5 , 3 ] ;
41986: LD_ADDR_VAR 0 9
41990: PUSH
41991: LD_INT 10
41993: PUSH
41994: LD_INT 5
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42005: LD_VAR 0 6
42009: PPUSH
42010: CALL_OW 257
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 4
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: IN
42029: IFFALSE 42050
// points := [ 3 , 2 , 1 ] ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42050: LD_VAR 0 6
42054: PPUSH
42055: CALL_OW 257
42059: PUSH
42060: LD_INT 5
42062: EQUAL
42063: IFFALSE 42084
// points := [ 130 , 5 , 2 ] ;
42065: LD_ADDR_VAR 0 9
42069: PUSH
42070: LD_INT 130
42072: PUSH
42073: LD_INT 5
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42084: LD_VAR 0 6
42088: PPUSH
42089: CALL_OW 257
42093: PUSH
42094: LD_INT 8
42096: EQUAL
42097: IFFALSE 42118
// points := [ 35 , 35 , 30 ] ;
42099: LD_ADDR_VAR 0 9
42103: PUSH
42104: LD_INT 35
42106: PUSH
42107: LD_INT 35
42109: PUSH
42110: LD_INT 30
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42118: LD_VAR 0 6
42122: PPUSH
42123: CALL_OW 257
42127: PUSH
42128: LD_INT 9
42130: EQUAL
42131: IFFALSE 42152
// points := [ 20 , 55 , 40 ] ;
42133: LD_ADDR_VAR 0 9
42137: PUSH
42138: LD_INT 20
42140: PUSH
42141: LD_INT 55
42143: PUSH
42144: LD_INT 40
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42152: LD_VAR 0 6
42156: PPUSH
42157: CALL_OW 257
42161: PUSH
42162: LD_INT 12
42164: PUSH
42165: LD_INT 16
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: IN
42172: IFFALSE 42193
// points := [ 5 , 3 , 2 ] ;
42174: LD_ADDR_VAR 0 9
42178: PUSH
42179: LD_INT 5
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42193: LD_VAR 0 6
42197: PPUSH
42198: CALL_OW 257
42202: PUSH
42203: LD_INT 17
42205: EQUAL
42206: IFFALSE 42227
// points := [ 100 , 50 , 75 ] ;
42208: LD_ADDR_VAR 0 9
42212: PUSH
42213: LD_INT 100
42215: PUSH
42216: LD_INT 50
42218: PUSH
42219: LD_INT 75
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42227: LD_VAR 0 6
42231: PPUSH
42232: CALL_OW 257
42236: PUSH
42237: LD_INT 15
42239: EQUAL
42240: IFFALSE 42261
// points := [ 10 , 5 , 3 ] ;
42242: LD_ADDR_VAR 0 9
42246: PUSH
42247: LD_INT 10
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42261: LD_VAR 0 6
42265: PPUSH
42266: CALL_OW 257
42270: PUSH
42271: LD_INT 14
42273: EQUAL
42274: IFFALSE 42295
// points := [ 10 , 0 , 0 ] ;
42276: LD_ADDR_VAR 0 9
42280: PUSH
42281: LD_INT 10
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42295: LD_VAR 0 6
42299: PPUSH
42300: CALL_OW 257
42304: PUSH
42305: LD_INT 11
42307: EQUAL
42308: IFFALSE 42329
// points := [ 30 , 10 , 5 ] ;
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_INT 30
42317: PUSH
42318: LD_INT 10
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42329: LD_VAR 0 1
42333: PPUSH
42334: LD_INT 5
42336: PPUSH
42337: CALL_OW 321
42341: PUSH
42342: LD_INT 2
42344: EQUAL
42345: IFFALSE 42362
// bpoints := bpoints * 1.8 ;
42347: LD_ADDR_VAR 0 10
42351: PUSH
42352: LD_VAR 0 10
42356: PUSH
42357: LD_REAL  1.80000000000000E+0000
42360: MUL
42361: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42362: LD_VAR 0 6
42366: PPUSH
42367: CALL_OW 257
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: LD_INT 4
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: IN
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: LD_INT 51
42398: PPUSH
42399: CALL_OW 321
42403: PUSH
42404: LD_INT 2
42406: EQUAL
42407: AND
42408: IFFALSE 42425
// bpoints := bpoints * 1.2 ;
42410: LD_ADDR_VAR 0 10
42414: PUSH
42415: LD_VAR 0 10
42419: PUSH
42420: LD_REAL  1.20000000000000E+0000
42423: MUL
42424: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42425: LD_VAR 0 6
42429: PPUSH
42430: CALL_OW 257
42434: PUSH
42435: LD_INT 5
42437: PUSH
42438: LD_INT 7
42440: PUSH
42441: LD_INT 9
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: IN
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: LD_INT 52
42457: PPUSH
42458: CALL_OW 321
42462: PUSH
42463: LD_INT 2
42465: EQUAL
42466: AND
42467: IFFALSE 42484
// bpoints := bpoints * 1.5 ;
42469: LD_ADDR_VAR 0 10
42473: PUSH
42474: LD_VAR 0 10
42478: PUSH
42479: LD_REAL  1.50000000000000E+0000
42482: MUL
42483: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_INT 66
42491: PPUSH
42492: CALL_OW 321
42496: PUSH
42497: LD_INT 2
42499: EQUAL
42500: IFFALSE 42517
// bpoints := bpoints * 1.1 ;
42502: LD_ADDR_VAR 0 10
42506: PUSH
42507: LD_VAR 0 10
42511: PUSH
42512: LD_REAL  1.10000000000000E+0000
42515: MUL
42516: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42517: LD_ADDR_VAR 0 10
42521: PUSH
42522: LD_VAR 0 10
42526: PUSH
42527: LD_VAR 0 6
42531: PPUSH
42532: LD_INT 1
42534: PPUSH
42535: CALL_OW 259
42539: PUSH
42540: LD_REAL  1.15000000000000E+0000
42543: MUL
42544: MUL
42545: ST_TO_ADDR
// end ; unit_vehicle :
42546: GO 43370
42548: LD_INT 2
42550: DOUBLE
42551: EQUAL
42552: IFTRUE 42556
42554: GO 43358
42556: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42557: LD_VAR 0 6
42561: PPUSH
42562: CALL_OW 264
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 42
42572: PUSH
42573: LD_INT 24
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: IN
42581: IFFALSE 42602
// points := [ 25 , 5 , 3 ] ;
42583: LD_ADDR_VAR 0 9
42587: PUSH
42588: LD_INT 25
42590: PUSH
42591: LD_INT 5
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42602: LD_VAR 0 6
42606: PPUSH
42607: CALL_OW 264
42611: PUSH
42612: LD_INT 4
42614: PUSH
42615: LD_INT 43
42617: PUSH
42618: LD_INT 25
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: IN
42626: IFFALSE 42647
// points := [ 40 , 15 , 5 ] ;
42628: LD_ADDR_VAR 0 9
42632: PUSH
42633: LD_INT 40
42635: PUSH
42636: LD_INT 15
42638: PUSH
42639: LD_INT 5
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42647: LD_VAR 0 6
42651: PPUSH
42652: CALL_OW 264
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: LD_INT 23
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: IN
42667: IFFALSE 42688
// points := [ 7 , 25 , 8 ] ;
42669: LD_ADDR_VAR 0 9
42673: PUSH
42674: LD_INT 7
42676: PUSH
42677: LD_INT 25
42679: PUSH
42680: LD_INT 8
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42688: LD_VAR 0 6
42692: PPUSH
42693: CALL_OW 264
42697: PUSH
42698: LD_INT 5
42700: PUSH
42701: LD_INT 27
42703: PUSH
42704: LD_INT 44
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: IN
42712: IFFALSE 42733
// points := [ 14 , 50 , 16 ] ;
42714: LD_ADDR_VAR 0 9
42718: PUSH
42719: LD_INT 14
42721: PUSH
42722: LD_INT 50
42724: PUSH
42725: LD_INT 16
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42733: LD_VAR 0 6
42737: PPUSH
42738: CALL_OW 264
42742: PUSH
42743: LD_INT 6
42745: PUSH
42746: LD_INT 46
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: IN
42753: IFFALSE 42774
// points := [ 32 , 120 , 70 ] ;
42755: LD_ADDR_VAR 0 9
42759: PUSH
42760: LD_INT 32
42762: PUSH
42763: LD_INT 120
42765: PUSH
42766: LD_INT 70
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42774: LD_VAR 0 6
42778: PPUSH
42779: CALL_OW 264
42783: PUSH
42784: LD_INT 7
42786: PUSH
42787: LD_INT 28
42789: PUSH
42790: LD_INT 45
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: IN
42798: IFFALSE 42819
// points := [ 35 , 20 , 45 ] ;
42800: LD_ADDR_VAR 0 9
42804: PUSH
42805: LD_INT 35
42807: PUSH
42808: LD_INT 20
42810: PUSH
42811: LD_INT 45
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42819: LD_VAR 0 6
42823: PPUSH
42824: CALL_OW 264
42828: PUSH
42829: LD_INT 47
42831: PUSH
42832: EMPTY
42833: LIST
42834: IN
42835: IFFALSE 42856
// points := [ 67 , 45 , 75 ] ;
42837: LD_ADDR_VAR 0 9
42841: PUSH
42842: LD_INT 67
42844: PUSH
42845: LD_INT 45
42847: PUSH
42848: LD_INT 75
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42856: LD_VAR 0 6
42860: PPUSH
42861: CALL_OW 264
42865: PUSH
42866: LD_INT 26
42868: PUSH
42869: EMPTY
42870: LIST
42871: IN
42872: IFFALSE 42893
// points := [ 120 , 30 , 80 ] ;
42874: LD_ADDR_VAR 0 9
42878: PUSH
42879: LD_INT 120
42881: PUSH
42882: LD_INT 30
42884: PUSH
42885: LD_INT 80
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42893: LD_VAR 0 6
42897: PPUSH
42898: CALL_OW 264
42902: PUSH
42903: LD_INT 22
42905: PUSH
42906: EMPTY
42907: LIST
42908: IN
42909: IFFALSE 42930
// points := [ 40 , 1 , 1 ] ;
42911: LD_ADDR_VAR 0 9
42915: PUSH
42916: LD_INT 40
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42930: LD_VAR 0 6
42934: PPUSH
42935: CALL_OW 264
42939: PUSH
42940: LD_INT 29
42942: PUSH
42943: EMPTY
42944: LIST
42945: IN
42946: IFFALSE 42967
// points := [ 70 , 200 , 400 ] ;
42948: LD_ADDR_VAR 0 9
42952: PUSH
42953: LD_INT 70
42955: PUSH
42956: LD_INT 200
42958: PUSH
42959: LD_INT 400
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42967: LD_VAR 0 6
42971: PPUSH
42972: CALL_OW 264
42976: PUSH
42977: LD_INT 14
42979: PUSH
42980: LD_INT 53
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: IN
42987: IFFALSE 43008
// points := [ 40 , 10 , 20 ] ;
42989: LD_ADDR_VAR 0 9
42993: PUSH
42994: LD_INT 40
42996: PUSH
42997: LD_INT 10
42999: PUSH
43000: LD_INT 20
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43008: LD_VAR 0 6
43012: PPUSH
43013: CALL_OW 264
43017: PUSH
43018: LD_INT 9
43020: PUSH
43021: EMPTY
43022: LIST
43023: IN
43024: IFFALSE 43045
// points := [ 5 , 70 , 20 ] ;
43026: LD_ADDR_VAR 0 9
43030: PUSH
43031: LD_INT 5
43033: PUSH
43034: LD_INT 70
43036: PUSH
43037: LD_INT 20
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43045: LD_VAR 0 6
43049: PPUSH
43050: CALL_OW 264
43054: PUSH
43055: LD_INT 10
43057: PUSH
43058: EMPTY
43059: LIST
43060: IN
43061: IFFALSE 43082
// points := [ 35 , 110 , 70 ] ;
43063: LD_ADDR_VAR 0 9
43067: PUSH
43068: LD_INT 35
43070: PUSH
43071: LD_INT 110
43073: PUSH
43074: LD_INT 70
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43082: LD_VAR 0 6
43086: PPUSH
43087: CALL_OW 265
43091: PUSH
43092: LD_INT 25
43094: EQUAL
43095: IFFALSE 43116
// points := [ 80 , 65 , 100 ] ;
43097: LD_ADDR_VAR 0 9
43101: PUSH
43102: LD_INT 80
43104: PUSH
43105: LD_INT 65
43107: PUSH
43108: LD_INT 100
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43116: LD_VAR 0 6
43120: PPUSH
43121: CALL_OW 263
43125: PUSH
43126: LD_INT 1
43128: EQUAL
43129: IFFALSE 43164
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43131: LD_ADDR_VAR 0 10
43135: PUSH
43136: LD_VAR 0 10
43140: PUSH
43141: LD_VAR 0 6
43145: PPUSH
43146: CALL_OW 311
43150: PPUSH
43151: LD_INT 3
43153: PPUSH
43154: CALL_OW 259
43158: PUSH
43159: LD_INT 4
43161: MUL
43162: MUL
43163: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43164: LD_VAR 0 6
43168: PPUSH
43169: CALL_OW 263
43173: PUSH
43174: LD_INT 2
43176: EQUAL
43177: IFFALSE 43228
// begin j := IsControledBy ( i ) ;
43179: LD_ADDR_VAR 0 7
43183: PUSH
43184: LD_VAR 0 6
43188: PPUSH
43189: CALL_OW 312
43193: ST_TO_ADDR
// if j then
43194: LD_VAR 0 7
43198: IFFALSE 43228
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43200: LD_ADDR_VAR 0 10
43204: PUSH
43205: LD_VAR 0 10
43209: PUSH
43210: LD_VAR 0 7
43214: PPUSH
43215: LD_INT 3
43217: PPUSH
43218: CALL_OW 259
43222: PUSH
43223: LD_INT 3
43225: MUL
43226: MUL
43227: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43228: LD_VAR 0 6
43232: PPUSH
43233: CALL_OW 264
43237: PUSH
43238: LD_INT 5
43240: PUSH
43241: LD_INT 6
43243: PUSH
43244: LD_INT 46
43246: PUSH
43247: LD_INT 44
43249: PUSH
43250: LD_INT 47
43252: PUSH
43253: LD_INT 45
43255: PUSH
43256: LD_INT 28
43258: PUSH
43259: LD_INT 7
43261: PUSH
43262: LD_INT 27
43264: PUSH
43265: LD_INT 29
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: IN
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_INT 52
43288: PPUSH
43289: CALL_OW 321
43293: PUSH
43294: LD_INT 2
43296: EQUAL
43297: AND
43298: IFFALSE 43315
// bpoints := bpoints * 1.2 ;
43300: LD_ADDR_VAR 0 10
43304: PUSH
43305: LD_VAR 0 10
43309: PUSH
43310: LD_REAL  1.20000000000000E+0000
43313: MUL
43314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43315: LD_VAR 0 6
43319: PPUSH
43320: CALL_OW 264
43324: PUSH
43325: LD_INT 6
43327: PUSH
43328: LD_INT 46
43330: PUSH
43331: LD_INT 47
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: IN
43339: IFFALSE 43356
// bpoints := bpoints * 1.2 ;
43341: LD_ADDR_VAR 0 10
43345: PUSH
43346: LD_VAR 0 10
43350: PUSH
43351: LD_REAL  1.20000000000000E+0000
43354: MUL
43355: ST_TO_ADDR
// end ; unit_building :
43356: GO 43370
43358: LD_INT 3
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43366
43364: GO 43369
43366: POP
// ; end ;
43367: GO 43370
43369: POP
// for j = 1 to 3 do
43370: LD_ADDR_VAR 0 7
43374: PUSH
43375: DOUBLE
43376: LD_INT 1
43378: DEC
43379: ST_TO_ADDR
43380: LD_INT 3
43382: PUSH
43383: FOR_TO
43384: IFFALSE 43437
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43386: LD_ADDR_VAR 0 5
43390: PUSH
43391: LD_VAR 0 5
43395: PPUSH
43396: LD_VAR 0 7
43400: PPUSH
43401: LD_VAR 0 5
43405: PUSH
43406: LD_VAR 0 7
43410: ARRAY
43411: PUSH
43412: LD_VAR 0 9
43416: PUSH
43417: LD_VAR 0 7
43421: ARRAY
43422: PUSH
43423: LD_VAR 0 10
43427: MUL
43428: PLUS
43429: PPUSH
43430: CALL_OW 1
43434: ST_TO_ADDR
43435: GO 43383
43437: POP
43438: POP
// end ;
43439: GO 41922
43441: POP
43442: POP
// result := Replace ( result , 4 , tmp ) ;
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: LD_VAR 0 5
43452: PPUSH
43453: LD_INT 4
43455: PPUSH
43456: LD_VAR 0 8
43460: PPUSH
43461: CALL_OW 1
43465: ST_TO_ADDR
// end ;
43466: LD_VAR 0 5
43470: RET
// export function DangerAtRange ( unit , range ) ; begin
43471: LD_INT 0
43473: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_VAR 0 1
43483: PPUSH
43484: CALL_OW 255
43488: PPUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 250
43498: PPUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 251
43508: PPUSH
43509: LD_VAR 0 2
43513: PPUSH
43514: CALL 41774 0 4
43518: ST_TO_ADDR
// end ;
43519: LD_VAR 0 3
43523: RET
// export function DangerInArea ( side , area ) ; begin
43524: LD_INT 0
43526: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: LD_INT 81
43539: PUSH
43540: LD_VAR 0 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PPUSH
43549: CALL_OW 70
43553: ST_TO_ADDR
// end ;
43554: LD_VAR 0 3
43558: RET
// export function IsExtension ( b ) ; begin
43559: LD_INT 0
43561: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43562: LD_ADDR_VAR 0 2
43566: PUSH
43567: LD_VAR 0 1
43571: PUSH
43572: LD_INT 23
43574: PUSH
43575: LD_INT 20
43577: PUSH
43578: LD_INT 22
43580: PUSH
43581: LD_INT 17
43583: PUSH
43584: LD_INT 24
43586: PUSH
43587: LD_INT 21
43589: PUSH
43590: LD_INT 19
43592: PUSH
43593: LD_INT 16
43595: PUSH
43596: LD_INT 25
43598: PUSH
43599: LD_INT 18
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: IN
43614: ST_TO_ADDR
// end ;
43615: LD_VAR 0 2
43619: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43620: LD_INT 0
43622: PPUSH
43623: PPUSH
43624: PPUSH
// result := [ ] ;
43625: LD_ADDR_VAR 0 3
43629: PUSH
43630: EMPTY
43631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43632: LD_ADDR_VAR 0 4
43636: PUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: LD_INT 21
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PPUSH
43652: CALL_OW 70
43656: ST_TO_ADDR
// if not tmp then
43657: LD_VAR 0 4
43661: NOT
43662: IFFALSE 43666
// exit ;
43664: GO 43724
// for i in tmp do
43666: LD_ADDR_VAR 0 5
43670: PUSH
43671: LD_VAR 0 4
43675: PUSH
43676: FOR_IN
43677: IFFALSE 43712
// if GetBase ( i ) <> base then
43679: LD_VAR 0 5
43683: PPUSH
43684: CALL_OW 274
43688: PUSH
43689: LD_VAR 0 1
43693: NONEQUAL
43694: IFFALSE 43710
// ComLinkToBase ( base , i ) ;
43696: LD_VAR 0 1
43700: PPUSH
43701: LD_VAR 0 5
43705: PPUSH
43706: CALL_OW 169
43710: GO 43676
43712: POP
43713: POP
// result := tmp ;
43714: LD_ADDR_VAR 0 3
43718: PUSH
43719: LD_VAR 0 4
43723: ST_TO_ADDR
// end ;
43724: LD_VAR 0 3
43728: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43729: LD_INT 0
43731: PPUSH
43732: PPUSH
// if BuildingStatus ( b ) = bs_build then
43733: LD_VAR 0 2
43737: PPUSH
43738: CALL_OW 461
43742: PUSH
43743: LD_INT 1
43745: EQUAL
43746: IFFALSE 43806
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43748: LD_VAR 0 1
43752: PPUSH
43753: LD_STRING h
43755: PUSH
43756: LD_VAR 0 2
43760: PPUSH
43761: CALL_OW 250
43765: PUSH
43766: LD_VAR 0 2
43770: PPUSH
43771: CALL_OW 251
43775: PUSH
43776: LD_VAR 0 2
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: PPUSH
43802: CALL_OW 446
// end ;
43806: LD_VAR 0 3
43810: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43811: LD_INT 0
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43819: LD_VAR 0 1
43823: NOT
43824: PUSH
43825: LD_VAR 0 1
43829: PPUSH
43830: CALL_OW 263
43834: PUSH
43835: LD_INT 2
43837: EQUAL
43838: NOT
43839: OR
43840: IFFALSE 43844
// exit ;
43842: GO 44160
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43844: LD_ADDR_VAR 0 6
43848: PUSH
43849: LD_INT 22
43851: PUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 255
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 30
43871: PUSH
43872: LD_INT 36
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 34
43881: PUSH
43882: LD_INT 31
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PPUSH
43898: CALL_OW 69
43902: ST_TO_ADDR
// if not tmp then
43903: LD_VAR 0 6
43907: NOT
43908: IFFALSE 43912
// exit ;
43910: GO 44160
// result := [ ] ;
43912: LD_ADDR_VAR 0 2
43916: PUSH
43917: EMPTY
43918: ST_TO_ADDR
// for i in tmp do
43919: LD_ADDR_VAR 0 3
43923: PUSH
43924: LD_VAR 0 6
43928: PUSH
43929: FOR_IN
43930: IFFALSE 44001
// begin t := UnitsInside ( i ) ;
43932: LD_ADDR_VAR 0 4
43936: PUSH
43937: LD_VAR 0 3
43941: PPUSH
43942: CALL_OW 313
43946: ST_TO_ADDR
// if t then
43947: LD_VAR 0 4
43951: IFFALSE 43999
// for j in t do
43953: LD_ADDR_VAR 0 7
43957: PUSH
43958: LD_VAR 0 4
43962: PUSH
43963: FOR_IN
43964: IFFALSE 43997
// result := Insert ( result , result + 1 , j ) ;
43966: LD_ADDR_VAR 0 2
43970: PUSH
43971: LD_VAR 0 2
43975: PPUSH
43976: LD_VAR 0 2
43980: PUSH
43981: LD_INT 1
43983: PLUS
43984: PPUSH
43985: LD_VAR 0 7
43989: PPUSH
43990: CALL_OW 2
43994: ST_TO_ADDR
43995: GO 43963
43997: POP
43998: POP
// end ;
43999: GO 43929
44001: POP
44002: POP
// if not result then
44003: LD_VAR 0 2
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 44160
// mech := result [ 1 ] ;
44012: LD_ADDR_VAR 0 5
44016: PUSH
44017: LD_VAR 0 2
44021: PUSH
44022: LD_INT 1
44024: ARRAY
44025: ST_TO_ADDR
// if result > 1 then
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 1
44033: GREATER
44034: IFFALSE 44146
// for i = 2 to result do
44036: LD_ADDR_VAR 0 3
44040: PUSH
44041: DOUBLE
44042: LD_INT 2
44044: DEC
44045: ST_TO_ADDR
44046: LD_VAR 0 2
44050: PUSH
44051: FOR_TO
44052: IFFALSE 44144
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44054: LD_ADDR_VAR 0 4
44058: PUSH
44059: LD_VAR 0 2
44063: PUSH
44064: LD_VAR 0 3
44068: ARRAY
44069: PPUSH
44070: LD_INT 3
44072: PPUSH
44073: CALL_OW 259
44077: PUSH
44078: LD_VAR 0 2
44082: PUSH
44083: LD_VAR 0 3
44087: ARRAY
44088: PPUSH
44089: CALL_OW 432
44093: MINUS
44094: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44095: LD_VAR 0 4
44099: PUSH
44100: LD_VAR 0 5
44104: PPUSH
44105: LD_INT 3
44107: PPUSH
44108: CALL_OW 259
44112: PUSH
44113: LD_VAR 0 5
44117: PPUSH
44118: CALL_OW 432
44122: MINUS
44123: GREATEREQUAL
44124: IFFALSE 44142
// mech := result [ i ] ;
44126: LD_ADDR_VAR 0 5
44130: PUSH
44131: LD_VAR 0 2
44135: PUSH
44136: LD_VAR 0 3
44140: ARRAY
44141: ST_TO_ADDR
// end ;
44142: GO 44051
44144: POP
44145: POP
// ComLinkTo ( vehicle , mech ) ;
44146: LD_VAR 0 1
44150: PPUSH
44151: LD_VAR 0 5
44155: PPUSH
44156: CALL_OW 135
// end ;
44160: LD_VAR 0 2
44164: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
// result := [ ] ;
44180: LD_ADDR_VAR 0 7
44184: PUSH
44185: EMPTY
44186: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44187: LD_VAR 0 1
44191: PPUSH
44192: CALL_OW 266
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: IN
44207: NOT
44208: IFFALSE 44212
// exit ;
44210: GO 45843
// if name then
44212: LD_VAR 0 3
44216: IFFALSE 44232
// SetBName ( base_dep , name ) ;
44218: LD_VAR 0 1
44222: PPUSH
44223: LD_VAR 0 3
44227: PPUSH
44228: CALL_OW 500
// base := GetBase ( base_dep ) ;
44232: LD_ADDR_VAR 0 15
44236: PUSH
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 274
44246: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44247: LD_ADDR_VAR 0 16
44251: PUSH
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 255
44261: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44262: LD_ADDR_VAR 0 17
44266: PUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 248
44276: ST_TO_ADDR
// if sources then
44277: LD_VAR 0 5
44281: IFFALSE 44328
// for i = 1 to 3 do
44283: LD_ADDR_VAR 0 8
44287: PUSH
44288: DOUBLE
44289: LD_INT 1
44291: DEC
44292: ST_TO_ADDR
44293: LD_INT 3
44295: PUSH
44296: FOR_TO
44297: IFFALSE 44326
// AddResourceType ( base , i , sources [ i ] ) ;
44299: LD_VAR 0 15
44303: PPUSH
44304: LD_VAR 0 8
44308: PPUSH
44309: LD_VAR 0 5
44313: PUSH
44314: LD_VAR 0 8
44318: ARRAY
44319: PPUSH
44320: CALL_OW 276
44324: GO 44296
44326: POP
44327: POP
// buildings := GetBaseBuildings ( base , area ) ;
44328: LD_ADDR_VAR 0 18
44332: PUSH
44333: LD_VAR 0 15
44337: PPUSH
44338: LD_VAR 0 2
44342: PPUSH
44343: CALL 43620 0 2
44347: ST_TO_ADDR
// InitHc ;
44348: CALL_OW 19
// InitUc ;
44352: CALL_OW 18
// uc_side := side ;
44356: LD_ADDR_OWVAR 20
44360: PUSH
44361: LD_VAR 0 16
44365: ST_TO_ADDR
// uc_nation := nation ;
44366: LD_ADDR_OWVAR 21
44370: PUSH
44371: LD_VAR 0 17
44375: ST_TO_ADDR
// if buildings then
44376: LD_VAR 0 18
44380: IFFALSE 45702
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44382: LD_ADDR_VAR 0 19
44386: PUSH
44387: LD_VAR 0 18
44391: PPUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 30
44397: PUSH
44398: LD_INT 29
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 30
44407: PUSH
44408: LD_INT 30
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: PPUSH
44420: CALL_OW 72
44424: ST_TO_ADDR
// if tmp then
44425: LD_VAR 0 19
44429: IFFALSE 44477
// for i in tmp do
44431: LD_ADDR_VAR 0 8
44435: PUSH
44436: LD_VAR 0 19
44440: PUSH
44441: FOR_IN
44442: IFFALSE 44475
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44444: LD_VAR 0 8
44448: PPUSH
44449: CALL_OW 250
44453: PPUSH
44454: LD_VAR 0 8
44458: PPUSH
44459: CALL_OW 251
44463: PPUSH
44464: LD_VAR 0 16
44468: PPUSH
44469: CALL_OW 441
44473: GO 44441
44475: POP
44476: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44477: LD_VAR 0 18
44481: PPUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 30
44487: PUSH
44488: LD_INT 32
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 30
44497: PUSH
44498: LD_INT 33
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: PPUSH
44510: CALL_OW 72
44514: IFFALSE 44602
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44516: LD_ADDR_VAR 0 8
44520: PUSH
44521: LD_VAR 0 18
44525: PPUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 30
44531: PUSH
44532: LD_INT 32
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 30
44541: PUSH
44542: LD_INT 33
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: PPUSH
44554: CALL_OW 72
44558: PUSH
44559: FOR_IN
44560: IFFALSE 44600
// begin if not GetBWeapon ( i ) then
44562: LD_VAR 0 8
44566: PPUSH
44567: CALL_OW 269
44571: NOT
44572: IFFALSE 44598
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44574: LD_VAR 0 8
44578: PPUSH
44579: LD_VAR 0 8
44583: PPUSH
44584: LD_VAR 0 2
44588: PPUSH
44589: CALL 45848 0 2
44593: PPUSH
44594: CALL_OW 431
// end ;
44598: GO 44559
44600: POP
44601: POP
// end ; for i = 1 to personel do
44602: LD_ADDR_VAR 0 8
44606: PUSH
44607: DOUBLE
44608: LD_INT 1
44610: DEC
44611: ST_TO_ADDR
44612: LD_VAR 0 6
44616: PUSH
44617: FOR_TO
44618: IFFALSE 45682
// begin if i > 4 then
44620: LD_VAR 0 8
44624: PUSH
44625: LD_INT 4
44627: GREATER
44628: IFFALSE 44632
// break ;
44630: GO 45682
// case i of 1 :
44632: LD_VAR 0 8
44636: PUSH
44637: LD_INT 1
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44725
44645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44646: LD_ADDR_VAR 0 12
44650: PUSH
44651: LD_VAR 0 18
44655: PPUSH
44656: LD_INT 22
44658: PUSH
44659: LD_VAR 0 16
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 58
44670: PUSH
44671: EMPTY
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 30
44679: PUSH
44680: LD_INT 32
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 30
44689: PUSH
44690: LD_INT 4
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 30
44699: PUSH
44700: LD_INT 5
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: PPUSH
44718: CALL_OW 72
44722: ST_TO_ADDR
44723: GO 44947
44725: LD_INT 2
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44795
44733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44734: LD_ADDR_VAR 0 12
44738: PUSH
44739: LD_VAR 0 18
44743: PPUSH
44744: LD_INT 22
44746: PUSH
44747: LD_VAR 0 16
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 30
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 30
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PPUSH
44788: CALL_OW 72
44792: ST_TO_ADDR
44793: GO 44947
44795: LD_INT 3
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44803
44801: GO 44865
44803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44804: LD_ADDR_VAR 0 12
44808: PUSH
44809: LD_VAR 0 18
44813: PPUSH
44814: LD_INT 22
44816: PUSH
44817: LD_VAR 0 16
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 30
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 30
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PPUSH
44858: CALL_OW 72
44862: ST_TO_ADDR
44863: GO 44947
44865: LD_INT 4
44867: DOUBLE
44868: EQUAL
44869: IFTRUE 44873
44871: GO 44946
44873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44874: LD_ADDR_VAR 0 12
44878: PUSH
44879: LD_VAR 0 18
44883: PPUSH
44884: LD_INT 22
44886: PUSH
44887: LD_VAR 0 16
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 30
44901: PUSH
44902: LD_INT 6
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 30
44911: PUSH
44912: LD_INT 7
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 30
44921: PUSH
44922: LD_INT 8
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PPUSH
44939: CALL_OW 72
44943: ST_TO_ADDR
44944: GO 44947
44946: POP
// if i = 1 then
44947: LD_VAR 0 8
44951: PUSH
44952: LD_INT 1
44954: EQUAL
44955: IFFALSE 45066
// begin tmp := [ ] ;
44957: LD_ADDR_VAR 0 19
44961: PUSH
44962: EMPTY
44963: ST_TO_ADDR
// for j in f do
44964: LD_ADDR_VAR 0 9
44968: PUSH
44969: LD_VAR 0 12
44973: PUSH
44974: FOR_IN
44975: IFFALSE 45048
// if GetBType ( j ) = b_bunker then
44977: LD_VAR 0 9
44981: PPUSH
44982: CALL_OW 266
44986: PUSH
44987: LD_INT 32
44989: EQUAL
44990: IFFALSE 45017
// tmp := Insert ( tmp , 1 , j ) else
44992: LD_ADDR_VAR 0 19
44996: PUSH
44997: LD_VAR 0 19
45001: PPUSH
45002: LD_INT 1
45004: PPUSH
45005: LD_VAR 0 9
45009: PPUSH
45010: CALL_OW 2
45014: ST_TO_ADDR
45015: GO 45046
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45017: LD_ADDR_VAR 0 19
45021: PUSH
45022: LD_VAR 0 19
45026: PPUSH
45027: LD_VAR 0 19
45031: PUSH
45032: LD_INT 1
45034: PLUS
45035: PPUSH
45036: LD_VAR 0 9
45040: PPUSH
45041: CALL_OW 2
45045: ST_TO_ADDR
45046: GO 44974
45048: POP
45049: POP
// if tmp then
45050: LD_VAR 0 19
45054: IFFALSE 45066
// f := tmp ;
45056: LD_ADDR_VAR 0 12
45060: PUSH
45061: LD_VAR 0 19
45065: ST_TO_ADDR
// end ; x := personel [ i ] ;
45066: LD_ADDR_VAR 0 13
45070: PUSH
45071: LD_VAR 0 6
45075: PUSH
45076: LD_VAR 0 8
45080: ARRAY
45081: ST_TO_ADDR
// if x = - 1 then
45082: LD_VAR 0 13
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: EQUAL
45091: IFFALSE 45300
// begin for j in f do
45093: LD_ADDR_VAR 0 9
45097: PUSH
45098: LD_VAR 0 12
45102: PUSH
45103: FOR_IN
45104: IFFALSE 45296
// repeat InitHc ;
45106: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45110: LD_VAR 0 9
45114: PPUSH
45115: CALL_OW 266
45119: PUSH
45120: LD_INT 5
45122: EQUAL
45123: IFFALSE 45193
// begin if UnitsInside ( j ) < 3 then
45125: LD_VAR 0 9
45129: PPUSH
45130: CALL_OW 313
45134: PUSH
45135: LD_INT 3
45137: LESS
45138: IFFALSE 45174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45140: LD_INT 0
45142: PPUSH
45143: LD_INT 5
45145: PUSH
45146: LD_INT 8
45148: PUSH
45149: LD_INT 9
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: PUSH
45157: LD_VAR 0 17
45161: ARRAY
45162: PPUSH
45163: LD_VAR 0 4
45167: PPUSH
45168: CALL_OW 380
45172: GO 45191
// PrepareHuman ( false , i , skill ) ;
45174: LD_INT 0
45176: PPUSH
45177: LD_VAR 0 8
45181: PPUSH
45182: LD_VAR 0 4
45186: PPUSH
45187: CALL_OW 380
// end else
45191: GO 45210
// PrepareHuman ( false , i , skill ) ;
45193: LD_INT 0
45195: PPUSH
45196: LD_VAR 0 8
45200: PPUSH
45201: LD_VAR 0 4
45205: PPUSH
45206: CALL_OW 380
// un := CreateHuman ;
45210: LD_ADDR_VAR 0 14
45214: PUSH
45215: CALL_OW 44
45219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45220: LD_ADDR_VAR 0 7
45224: PUSH
45225: LD_VAR 0 7
45229: PPUSH
45230: LD_INT 1
45232: PPUSH
45233: LD_VAR 0 14
45237: PPUSH
45238: CALL_OW 2
45242: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45243: LD_VAR 0 14
45247: PPUSH
45248: LD_VAR 0 9
45252: PPUSH
45253: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45257: LD_VAR 0 9
45261: PPUSH
45262: CALL_OW 313
45266: PUSH
45267: LD_INT 6
45269: EQUAL
45270: PUSH
45271: LD_VAR 0 9
45275: PPUSH
45276: CALL_OW 266
45280: PUSH
45281: LD_INT 32
45283: PUSH
45284: LD_INT 31
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: IN
45291: OR
45292: IFFALSE 45106
45294: GO 45103
45296: POP
45297: POP
// end else
45298: GO 45680
// for j = 1 to x do
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: DOUBLE
45306: LD_INT 1
45308: DEC
45309: ST_TO_ADDR
45310: LD_VAR 0 13
45314: PUSH
45315: FOR_TO
45316: IFFALSE 45678
// begin InitHc ;
45318: CALL_OW 19
// if not f then
45322: LD_VAR 0 12
45326: NOT
45327: IFFALSE 45416
// begin PrepareHuman ( false , i , skill ) ;
45329: LD_INT 0
45331: PPUSH
45332: LD_VAR 0 8
45336: PPUSH
45337: LD_VAR 0 4
45341: PPUSH
45342: CALL_OW 380
// un := CreateHuman ;
45346: LD_ADDR_VAR 0 14
45350: PUSH
45351: CALL_OW 44
45355: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45356: LD_ADDR_VAR 0 7
45360: PUSH
45361: LD_VAR 0 7
45365: PPUSH
45366: LD_INT 1
45368: PPUSH
45369: LD_VAR 0 14
45373: PPUSH
45374: CALL_OW 2
45378: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45379: LD_VAR 0 14
45383: PPUSH
45384: LD_VAR 0 1
45388: PPUSH
45389: CALL_OW 250
45393: PPUSH
45394: LD_VAR 0 1
45398: PPUSH
45399: CALL_OW 251
45403: PPUSH
45404: LD_INT 10
45406: PPUSH
45407: LD_INT 0
45409: PPUSH
45410: CALL_OW 50
// continue ;
45414: GO 45315
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45416: LD_VAR 0 12
45420: PUSH
45421: LD_INT 1
45423: ARRAY
45424: PPUSH
45425: CALL_OW 313
45429: PUSH
45430: LD_VAR 0 12
45434: PUSH
45435: LD_INT 1
45437: ARRAY
45438: PPUSH
45439: CALL_OW 266
45443: PUSH
45444: LD_INT 32
45446: PUSH
45447: LD_INT 31
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: IN
45454: AND
45455: PUSH
45456: LD_VAR 0 12
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: PPUSH
45465: CALL_OW 313
45469: PUSH
45470: LD_INT 6
45472: EQUAL
45473: OR
45474: IFFALSE 45494
// f := Delete ( f , 1 ) ;
45476: LD_ADDR_VAR 0 12
45480: PUSH
45481: LD_VAR 0 12
45485: PPUSH
45486: LD_INT 1
45488: PPUSH
45489: CALL_OW 3
45493: ST_TO_ADDR
// if not f then
45494: LD_VAR 0 12
45498: NOT
45499: IFFALSE 45517
// begin x := x + 2 ;
45501: LD_ADDR_VAR 0 13
45505: PUSH
45506: LD_VAR 0 13
45510: PUSH
45511: LD_INT 2
45513: PLUS
45514: ST_TO_ADDR
// continue ;
45515: GO 45315
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45517: LD_VAR 0 12
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: CALL_OW 266
45530: PUSH
45531: LD_INT 5
45533: EQUAL
45534: IFFALSE 45608
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45536: LD_VAR 0 12
45540: PUSH
45541: LD_INT 1
45543: ARRAY
45544: PPUSH
45545: CALL_OW 313
45549: PUSH
45550: LD_INT 3
45552: LESS
45553: IFFALSE 45589
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45555: LD_INT 0
45557: PPUSH
45558: LD_INT 5
45560: PUSH
45561: LD_INT 8
45563: PUSH
45564: LD_INT 9
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: PUSH
45572: LD_VAR 0 17
45576: ARRAY
45577: PPUSH
45578: LD_VAR 0 4
45582: PPUSH
45583: CALL_OW 380
45587: GO 45606
// PrepareHuman ( false , i , skill ) ;
45589: LD_INT 0
45591: PPUSH
45592: LD_VAR 0 8
45596: PPUSH
45597: LD_VAR 0 4
45601: PPUSH
45602: CALL_OW 380
// end else
45606: GO 45625
// PrepareHuman ( false , i , skill ) ;
45608: LD_INT 0
45610: PPUSH
45611: LD_VAR 0 8
45615: PPUSH
45616: LD_VAR 0 4
45620: PPUSH
45621: CALL_OW 380
// un := CreateHuman ;
45625: LD_ADDR_VAR 0 14
45629: PUSH
45630: CALL_OW 44
45634: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45635: LD_ADDR_VAR 0 7
45639: PUSH
45640: LD_VAR 0 7
45644: PPUSH
45645: LD_INT 1
45647: PPUSH
45648: LD_VAR 0 14
45652: PPUSH
45653: CALL_OW 2
45657: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45658: LD_VAR 0 14
45662: PPUSH
45663: LD_VAR 0 12
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: PPUSH
45672: CALL_OW 52
// end ;
45676: GO 45315
45678: POP
45679: POP
// end ;
45680: GO 44617
45682: POP
45683: POP
// result := result ^ buildings ;
45684: LD_ADDR_VAR 0 7
45688: PUSH
45689: LD_VAR 0 7
45693: PUSH
45694: LD_VAR 0 18
45698: ADD
45699: ST_TO_ADDR
// end else
45700: GO 45843
// begin for i = 1 to personel do
45702: LD_ADDR_VAR 0 8
45706: PUSH
45707: DOUBLE
45708: LD_INT 1
45710: DEC
45711: ST_TO_ADDR
45712: LD_VAR 0 6
45716: PUSH
45717: FOR_TO
45718: IFFALSE 45841
// begin if i > 4 then
45720: LD_VAR 0 8
45724: PUSH
45725: LD_INT 4
45727: GREATER
45728: IFFALSE 45732
// break ;
45730: GO 45841
// x := personel [ i ] ;
45732: LD_ADDR_VAR 0 13
45736: PUSH
45737: LD_VAR 0 6
45741: PUSH
45742: LD_VAR 0 8
45746: ARRAY
45747: ST_TO_ADDR
// if x = - 1 then
45748: LD_VAR 0 13
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: EQUAL
45757: IFFALSE 45761
// continue ;
45759: GO 45717
// PrepareHuman ( false , i , skill ) ;
45761: LD_INT 0
45763: PPUSH
45764: LD_VAR 0 8
45768: PPUSH
45769: LD_VAR 0 4
45773: PPUSH
45774: CALL_OW 380
// un := CreateHuman ;
45778: LD_ADDR_VAR 0 14
45782: PUSH
45783: CALL_OW 44
45787: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45788: LD_VAR 0 14
45792: PPUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: CALL_OW 250
45802: PPUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 251
45812: PPUSH
45813: LD_INT 10
45815: PPUSH
45816: LD_INT 0
45818: PPUSH
45819: CALL_OW 50
// result := result ^ un ;
45823: LD_ADDR_VAR 0 7
45827: PUSH
45828: LD_VAR 0 7
45832: PUSH
45833: LD_VAR 0 14
45837: ADD
45838: ST_TO_ADDR
// end ;
45839: GO 45717
45841: POP
45842: POP
// end ; end ;
45843: LD_VAR 0 7
45847: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45848: LD_INT 0
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
// result := false ;
45866: LD_ADDR_VAR 0 3
45870: PUSH
45871: LD_INT 0
45873: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45874: LD_VAR 0 1
45878: NOT
45879: PUSH
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 266
45889: PUSH
45890: LD_INT 32
45892: PUSH
45893: LD_INT 33
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: IN
45900: NOT
45901: OR
45902: IFFALSE 45906
// exit ;
45904: GO 47042
// nat := GetNation ( tower ) ;
45906: LD_ADDR_VAR 0 12
45910: PUSH
45911: LD_VAR 0 1
45915: PPUSH
45916: CALL_OW 248
45920: ST_TO_ADDR
// side := GetSide ( tower ) ;
45921: LD_ADDR_VAR 0 16
45925: PUSH
45926: LD_VAR 0 1
45930: PPUSH
45931: CALL_OW 255
45935: ST_TO_ADDR
// x := GetX ( tower ) ;
45936: LD_ADDR_VAR 0 10
45940: PUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 250
45950: ST_TO_ADDR
// y := GetY ( tower ) ;
45951: LD_ADDR_VAR 0 11
45955: PUSH
45956: LD_VAR 0 1
45960: PPUSH
45961: CALL_OW 251
45965: ST_TO_ADDR
// if not x or not y then
45966: LD_VAR 0 10
45970: NOT
45971: PUSH
45972: LD_VAR 0 11
45976: NOT
45977: OR
45978: IFFALSE 45982
// exit ;
45980: GO 47042
// weapon := 0 ;
45982: LD_ADDR_VAR 0 18
45986: PUSH
45987: LD_INT 0
45989: ST_TO_ADDR
// fac_list := [ ] ;
45990: LD_ADDR_VAR 0 17
45994: PUSH
45995: EMPTY
45996: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45997: LD_ADDR_VAR 0 6
46001: PUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: CALL_OW 274
46011: PPUSH
46012: LD_VAR 0 2
46016: PPUSH
46017: CALL 43620 0 2
46021: PPUSH
46022: LD_INT 30
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PPUSH
46032: CALL_OW 72
46036: ST_TO_ADDR
// if not factories then
46037: LD_VAR 0 6
46041: NOT
46042: IFFALSE 46046
// exit ;
46044: GO 47042
// for i in factories do
46046: LD_ADDR_VAR 0 8
46050: PUSH
46051: LD_VAR 0 6
46055: PUSH
46056: FOR_IN
46057: IFFALSE 46082
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46059: LD_ADDR_VAR 0 17
46063: PUSH
46064: LD_VAR 0 17
46068: PUSH
46069: LD_VAR 0 8
46073: PPUSH
46074: CALL_OW 478
46078: UNION
46079: ST_TO_ADDR
46080: GO 46056
46082: POP
46083: POP
// if not fac_list then
46084: LD_VAR 0 17
46088: NOT
46089: IFFALSE 46093
// exit ;
46091: GO 47042
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46093: LD_ADDR_VAR 0 5
46097: PUSH
46098: LD_INT 4
46100: PUSH
46101: LD_INT 5
46103: PUSH
46104: LD_INT 9
46106: PUSH
46107: LD_INT 10
46109: PUSH
46110: LD_INT 6
46112: PUSH
46113: LD_INT 7
46115: PUSH
46116: LD_INT 11
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 27
46130: PUSH
46131: LD_INT 28
46133: PUSH
46134: LD_INT 26
46136: PUSH
46137: LD_INT 30
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 43
46148: PUSH
46149: LD_INT 44
46151: PUSH
46152: LD_INT 46
46154: PUSH
46155: LD_INT 45
46157: PUSH
46158: LD_INT 47
46160: PUSH
46161: LD_INT 49
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: PUSH
46177: LD_VAR 0 12
46181: ARRAY
46182: ST_TO_ADDR
// for i in list do
46183: LD_ADDR_VAR 0 8
46187: PUSH
46188: LD_VAR 0 5
46192: PUSH
46193: FOR_IN
46194: IFFALSE 46227
// if not i in fac_list then
46196: LD_VAR 0 8
46200: PUSH
46201: LD_VAR 0 17
46205: IN
46206: NOT
46207: IFFALSE 46225
// list := list diff i ;
46209: LD_ADDR_VAR 0 5
46213: PUSH
46214: LD_VAR 0 5
46218: PUSH
46219: LD_VAR 0 8
46223: DIFF
46224: ST_TO_ADDR
46225: GO 46193
46227: POP
46228: POP
// if not list then
46229: LD_VAR 0 5
46233: NOT
46234: IFFALSE 46238
// exit ;
46236: GO 47042
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46238: LD_VAR 0 12
46242: PUSH
46243: LD_INT 3
46245: EQUAL
46246: PUSH
46247: LD_INT 49
46249: PUSH
46250: LD_VAR 0 5
46254: IN
46255: AND
46256: PUSH
46257: LD_INT 31
46259: PPUSH
46260: LD_VAR 0 16
46264: PPUSH
46265: CALL_OW 321
46269: PUSH
46270: LD_INT 2
46272: EQUAL
46273: AND
46274: IFFALSE 46334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46276: LD_INT 22
46278: PUSH
46279: LD_VAR 0 16
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 35
46290: PUSH
46291: LD_INT 49
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 91
46300: PUSH
46301: LD_VAR 0 1
46305: PUSH
46306: LD_INT 10
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: PPUSH
46319: CALL_OW 69
46323: NOT
46324: IFFALSE 46334
// weapon := ru_time_lapser ;
46326: LD_ADDR_VAR 0 18
46330: PUSH
46331: LD_INT 49
46333: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46334: LD_VAR 0 12
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: IN
46349: PUSH
46350: LD_INT 11
46352: PUSH
46353: LD_VAR 0 5
46357: IN
46358: PUSH
46359: LD_INT 30
46361: PUSH
46362: LD_VAR 0 5
46366: IN
46367: OR
46368: AND
46369: PUSH
46370: LD_INT 6
46372: PPUSH
46373: LD_VAR 0 16
46377: PPUSH
46378: CALL_OW 321
46382: PUSH
46383: LD_INT 2
46385: EQUAL
46386: AND
46387: IFFALSE 46552
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46389: LD_INT 22
46391: PUSH
46392: LD_VAR 0 16
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 35
46406: PUSH
46407: LD_INT 11
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 35
46416: PUSH
46417: LD_INT 30
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 91
46431: PUSH
46432: LD_VAR 0 1
46436: PUSH
46437: LD_INT 18
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: PPUSH
46450: CALL_OW 69
46454: NOT
46455: PUSH
46456: LD_INT 22
46458: PUSH
46459: LD_VAR 0 16
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 30
46473: PUSH
46474: LD_INT 32
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 30
46483: PUSH
46484: LD_INT 33
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 91
46498: PUSH
46499: LD_VAR 0 1
46503: PUSH
46504: LD_INT 12
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: PUSH
46517: EMPTY
46518: LIST
46519: PPUSH
46520: CALL_OW 69
46524: PUSH
46525: LD_INT 2
46527: GREATER
46528: AND
46529: IFFALSE 46552
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46531: LD_ADDR_VAR 0 18
46535: PUSH
46536: LD_INT 11
46538: PUSH
46539: LD_INT 30
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_VAR 0 12
46550: ARRAY
46551: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46552: LD_VAR 0 18
46556: NOT
46557: PUSH
46558: LD_INT 40
46560: PPUSH
46561: LD_VAR 0 16
46565: PPUSH
46566: CALL_OW 321
46570: PUSH
46571: LD_INT 2
46573: EQUAL
46574: AND
46575: PUSH
46576: LD_INT 7
46578: PUSH
46579: LD_VAR 0 5
46583: IN
46584: PUSH
46585: LD_INT 28
46587: PUSH
46588: LD_VAR 0 5
46592: IN
46593: OR
46594: PUSH
46595: LD_INT 45
46597: PUSH
46598: LD_VAR 0 5
46602: IN
46603: OR
46604: AND
46605: IFFALSE 46859
// begin hex := GetHexInfo ( x , y ) ;
46607: LD_ADDR_VAR 0 4
46611: PUSH
46612: LD_VAR 0 10
46616: PPUSH
46617: LD_VAR 0 11
46621: PPUSH
46622: CALL_OW 546
46626: ST_TO_ADDR
// if hex [ 1 ] then
46627: LD_VAR 0 4
46631: PUSH
46632: LD_INT 1
46634: ARRAY
46635: IFFALSE 46639
// exit ;
46637: GO 47042
// height := hex [ 2 ] ;
46639: LD_ADDR_VAR 0 15
46643: PUSH
46644: LD_VAR 0 4
46648: PUSH
46649: LD_INT 2
46651: ARRAY
46652: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46653: LD_ADDR_VAR 0 14
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: LD_INT 5
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// for i in tmp do
46676: LD_ADDR_VAR 0 8
46680: PUSH
46681: LD_VAR 0 14
46685: PUSH
46686: FOR_IN
46687: IFFALSE 46857
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46689: LD_ADDR_VAR 0 9
46693: PUSH
46694: LD_VAR 0 10
46698: PPUSH
46699: LD_VAR 0 8
46703: PPUSH
46704: LD_INT 5
46706: PPUSH
46707: CALL_OW 272
46711: PUSH
46712: LD_VAR 0 11
46716: PPUSH
46717: LD_VAR 0 8
46721: PPUSH
46722: LD_INT 5
46724: PPUSH
46725: CALL_OW 273
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46734: LD_VAR 0 9
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PPUSH
46743: LD_VAR 0 9
46747: PUSH
46748: LD_INT 2
46750: ARRAY
46751: PPUSH
46752: CALL_OW 488
46756: IFFALSE 46855
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46758: LD_ADDR_VAR 0 4
46762: PUSH
46763: LD_VAR 0 9
46767: PUSH
46768: LD_INT 1
46770: ARRAY
46771: PPUSH
46772: LD_VAR 0 9
46776: PUSH
46777: LD_INT 2
46779: ARRAY
46780: PPUSH
46781: CALL_OW 546
46785: ST_TO_ADDR
// if hex [ 1 ] then
46786: LD_VAR 0 4
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: IFFALSE 46798
// continue ;
46796: GO 46686
// h := hex [ 2 ] ;
46798: LD_ADDR_VAR 0 13
46802: PUSH
46803: LD_VAR 0 4
46807: PUSH
46808: LD_INT 2
46810: ARRAY
46811: ST_TO_ADDR
// if h + 7 < height then
46812: LD_VAR 0 13
46816: PUSH
46817: LD_INT 7
46819: PLUS
46820: PUSH
46821: LD_VAR 0 15
46825: LESS
46826: IFFALSE 46855
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46828: LD_ADDR_VAR 0 18
46832: PUSH
46833: LD_INT 7
46835: PUSH
46836: LD_INT 28
46838: PUSH
46839: LD_INT 45
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: PUSH
46847: LD_VAR 0 12
46851: ARRAY
46852: ST_TO_ADDR
// break ;
46853: GO 46857
// end ; end ; end ;
46855: GO 46686
46857: POP
46858: POP
// end ; if not weapon then
46859: LD_VAR 0 18
46863: NOT
46864: IFFALSE 46924
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46866: LD_ADDR_VAR 0 5
46870: PUSH
46871: LD_VAR 0 5
46875: PUSH
46876: LD_INT 11
46878: PUSH
46879: LD_INT 30
46881: PUSH
46882: LD_INT 49
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: DIFF
46890: ST_TO_ADDR
// if not list then
46891: LD_VAR 0 5
46895: NOT
46896: IFFALSE 46900
// exit ;
46898: GO 47042
// weapon := list [ rand ( 1 , list ) ] ;
46900: LD_ADDR_VAR 0 18
46904: PUSH
46905: LD_VAR 0 5
46909: PUSH
46910: LD_INT 1
46912: PPUSH
46913: LD_VAR 0 5
46917: PPUSH
46918: CALL_OW 12
46922: ARRAY
46923: ST_TO_ADDR
// end ; if weapon then
46924: LD_VAR 0 18
46928: IFFALSE 47042
// begin tmp := CostOfWeapon ( weapon ) ;
46930: LD_ADDR_VAR 0 14
46934: PUSH
46935: LD_VAR 0 18
46939: PPUSH
46940: CALL_OW 451
46944: ST_TO_ADDR
// j := GetBase ( tower ) ;
46945: LD_ADDR_VAR 0 9
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 274
46959: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46960: LD_VAR 0 9
46964: PPUSH
46965: LD_INT 1
46967: PPUSH
46968: CALL_OW 275
46972: PUSH
46973: LD_VAR 0 14
46977: PUSH
46978: LD_INT 1
46980: ARRAY
46981: GREATEREQUAL
46982: PUSH
46983: LD_VAR 0 9
46987: PPUSH
46988: LD_INT 2
46990: PPUSH
46991: CALL_OW 275
46995: PUSH
46996: LD_VAR 0 14
47000: PUSH
47001: LD_INT 2
47003: ARRAY
47004: GREATEREQUAL
47005: AND
47006: PUSH
47007: LD_VAR 0 9
47011: PPUSH
47012: LD_INT 3
47014: PPUSH
47015: CALL_OW 275
47019: PUSH
47020: LD_VAR 0 14
47024: PUSH
47025: LD_INT 3
47027: ARRAY
47028: GREATEREQUAL
47029: AND
47030: IFFALSE 47042
// result := weapon ;
47032: LD_ADDR_VAR 0 3
47036: PUSH
47037: LD_VAR 0 18
47041: ST_TO_ADDR
// end ; end ;
47042: LD_VAR 0 3
47046: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
// result := true ;
47051: LD_ADDR_VAR 0 3
47055: PUSH
47056: LD_INT 1
47058: ST_TO_ADDR
// if array1 = array2 then
47059: LD_VAR 0 1
47063: PUSH
47064: LD_VAR 0 2
47068: EQUAL
47069: IFFALSE 47129
// begin for i = 1 to array1 do
47071: LD_ADDR_VAR 0 4
47075: PUSH
47076: DOUBLE
47077: LD_INT 1
47079: DEC
47080: ST_TO_ADDR
47081: LD_VAR 0 1
47085: PUSH
47086: FOR_TO
47087: IFFALSE 47125
// if array1 [ i ] <> array2 [ i ] then
47089: LD_VAR 0 1
47093: PUSH
47094: LD_VAR 0 4
47098: ARRAY
47099: PUSH
47100: LD_VAR 0 2
47104: PUSH
47105: LD_VAR 0 4
47109: ARRAY
47110: NONEQUAL
47111: IFFALSE 47123
// begin result := false ;
47113: LD_ADDR_VAR 0 3
47117: PUSH
47118: LD_INT 0
47120: ST_TO_ADDR
// break ;
47121: GO 47125
// end ;
47123: GO 47086
47125: POP
47126: POP
// end else
47127: GO 47137
// result := false ;
47129: LD_ADDR_VAR 0 3
47133: PUSH
47134: LD_INT 0
47136: ST_TO_ADDR
// end ;
47137: LD_VAR 0 3
47141: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47142: LD_INT 0
47144: PPUSH
47145: PPUSH
47146: PPUSH
// pom := GetBase ( fac ) ;
47147: LD_ADDR_VAR 0 5
47151: PUSH
47152: LD_VAR 0 1
47156: PPUSH
47157: CALL_OW 274
47161: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47162: LD_ADDR_VAR 0 4
47166: PUSH
47167: LD_VAR 0 2
47171: PUSH
47172: LD_INT 1
47174: ARRAY
47175: PPUSH
47176: LD_VAR 0 2
47180: PUSH
47181: LD_INT 2
47183: ARRAY
47184: PPUSH
47185: LD_VAR 0 2
47189: PUSH
47190: LD_INT 3
47192: ARRAY
47193: PPUSH
47194: LD_VAR 0 2
47198: PUSH
47199: LD_INT 4
47201: ARRAY
47202: PPUSH
47203: CALL_OW 449
47207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47208: LD_ADDR_VAR 0 3
47212: PUSH
47213: LD_VAR 0 5
47217: PPUSH
47218: LD_INT 1
47220: PPUSH
47221: CALL_OW 275
47225: PUSH
47226: LD_VAR 0 4
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: GREATEREQUAL
47235: PUSH
47236: LD_VAR 0 5
47240: PPUSH
47241: LD_INT 2
47243: PPUSH
47244: CALL_OW 275
47248: PUSH
47249: LD_VAR 0 4
47253: PUSH
47254: LD_INT 2
47256: ARRAY
47257: GREATEREQUAL
47258: AND
47259: PUSH
47260: LD_VAR 0 5
47264: PPUSH
47265: LD_INT 3
47267: PPUSH
47268: CALL_OW 275
47272: PUSH
47273: LD_VAR 0 4
47277: PUSH
47278: LD_INT 3
47280: ARRAY
47281: GREATEREQUAL
47282: AND
47283: ST_TO_ADDR
// end ;
47284: LD_VAR 0 3
47288: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47289: LD_INT 0
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
// pom := GetBase ( building ) ;
47295: LD_ADDR_VAR 0 3
47299: PUSH
47300: LD_VAR 0 1
47304: PPUSH
47305: CALL_OW 274
47309: ST_TO_ADDR
// if not pom then
47310: LD_VAR 0 3
47314: NOT
47315: IFFALSE 47319
// exit ;
47317: GO 47489
// btype := GetBType ( building ) ;
47319: LD_ADDR_VAR 0 5
47323: PUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 266
47333: ST_TO_ADDR
// if btype = b_armoury then
47334: LD_VAR 0 5
47338: PUSH
47339: LD_INT 4
47341: EQUAL
47342: IFFALSE 47352
// btype := b_barracks ;
47344: LD_ADDR_VAR 0 5
47348: PUSH
47349: LD_INT 5
47351: ST_TO_ADDR
// if btype = b_depot then
47352: LD_VAR 0 5
47356: PUSH
47357: LD_INT 0
47359: EQUAL
47360: IFFALSE 47370
// btype := b_warehouse ;
47362: LD_ADDR_VAR 0 5
47366: PUSH
47367: LD_INT 1
47369: ST_TO_ADDR
// if btype = b_workshop then
47370: LD_VAR 0 5
47374: PUSH
47375: LD_INT 2
47377: EQUAL
47378: IFFALSE 47388
// btype := b_factory ;
47380: LD_ADDR_VAR 0 5
47384: PUSH
47385: LD_INT 3
47387: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47388: LD_ADDR_VAR 0 4
47392: PUSH
47393: LD_VAR 0 5
47397: PPUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: CALL_OW 248
47407: PPUSH
47408: CALL_OW 450
47412: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47413: LD_ADDR_VAR 0 2
47417: PUSH
47418: LD_VAR 0 3
47422: PPUSH
47423: LD_INT 1
47425: PPUSH
47426: CALL_OW 275
47430: PUSH
47431: LD_VAR 0 4
47435: PUSH
47436: LD_INT 1
47438: ARRAY
47439: GREATEREQUAL
47440: PUSH
47441: LD_VAR 0 3
47445: PPUSH
47446: LD_INT 2
47448: PPUSH
47449: CALL_OW 275
47453: PUSH
47454: LD_VAR 0 4
47458: PUSH
47459: LD_INT 2
47461: ARRAY
47462: GREATEREQUAL
47463: AND
47464: PUSH
47465: LD_VAR 0 3
47469: PPUSH
47470: LD_INT 3
47472: PPUSH
47473: CALL_OW 275
47477: PUSH
47478: LD_VAR 0 4
47482: PUSH
47483: LD_INT 3
47485: ARRAY
47486: GREATEREQUAL
47487: AND
47488: ST_TO_ADDR
// end ;
47489: LD_VAR 0 2
47493: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
47498: PPUSH
// pom := GetBase ( building ) ;
47499: LD_ADDR_VAR 0 4
47503: PUSH
47504: LD_VAR 0 1
47508: PPUSH
47509: CALL_OW 274
47513: ST_TO_ADDR
// if not pom then
47514: LD_VAR 0 4
47518: NOT
47519: IFFALSE 47523
// exit ;
47521: GO 47624
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47523: LD_ADDR_VAR 0 5
47527: PUSH
47528: LD_VAR 0 2
47532: PPUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 248
47542: PPUSH
47543: CALL_OW 450
47547: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_VAR 0 4
47557: PPUSH
47558: LD_INT 1
47560: PPUSH
47561: CALL_OW 275
47565: PUSH
47566: LD_VAR 0 5
47570: PUSH
47571: LD_INT 1
47573: ARRAY
47574: GREATEREQUAL
47575: PUSH
47576: LD_VAR 0 4
47580: PPUSH
47581: LD_INT 2
47583: PPUSH
47584: CALL_OW 275
47588: PUSH
47589: LD_VAR 0 5
47593: PUSH
47594: LD_INT 2
47596: ARRAY
47597: GREATEREQUAL
47598: AND
47599: PUSH
47600: LD_VAR 0 4
47604: PPUSH
47605: LD_INT 3
47607: PPUSH
47608: CALL_OW 275
47612: PUSH
47613: LD_VAR 0 5
47617: PUSH
47618: LD_INT 3
47620: ARRAY
47621: GREATEREQUAL
47622: AND
47623: ST_TO_ADDR
// end ;
47624: LD_VAR 0 3
47628: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47629: LD_INT 0
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
// result := false ;
47641: LD_ADDR_VAR 0 6
47645: PUSH
47646: LD_INT 0
47648: ST_TO_ADDR
// if not base or not btype or not x or not y then
47649: LD_VAR 0 1
47653: NOT
47654: PUSH
47655: LD_VAR 0 2
47659: NOT
47660: OR
47661: PUSH
47662: LD_VAR 0 3
47666: NOT
47667: OR
47668: PUSH
47669: LD_VAR 0 4
47673: NOT
47674: OR
47675: IFFALSE 47679
// exit ;
47677: GO 48288
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47679: LD_ADDR_VAR 0 12
47683: PUSH
47684: LD_VAR 0 2
47688: PPUSH
47689: LD_VAR 0 3
47693: PPUSH
47694: LD_VAR 0 4
47698: PPUSH
47699: LD_VAR 0 5
47703: PPUSH
47704: LD_VAR 0 1
47708: PUSH
47709: LD_INT 1
47711: ARRAY
47712: PPUSH
47713: CALL_OW 248
47717: PPUSH
47718: LD_INT 0
47720: PPUSH
47721: CALL 49125 0 6
47725: ST_TO_ADDR
// if not hexes then
47726: LD_VAR 0 12
47730: NOT
47731: IFFALSE 47735
// exit ;
47733: GO 48288
// for i = 1 to hexes do
47735: LD_ADDR_VAR 0 7
47739: PUSH
47740: DOUBLE
47741: LD_INT 1
47743: DEC
47744: ST_TO_ADDR
47745: LD_VAR 0 12
47749: PUSH
47750: FOR_TO
47751: IFFALSE 48286
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47753: LD_ADDR_VAR 0 11
47757: PUSH
47758: LD_VAR 0 12
47762: PUSH
47763: LD_VAR 0 7
47767: ARRAY
47768: PUSH
47769: LD_INT 1
47771: ARRAY
47772: PPUSH
47773: LD_VAR 0 12
47777: PUSH
47778: LD_VAR 0 7
47782: ARRAY
47783: PUSH
47784: LD_INT 2
47786: ARRAY
47787: PPUSH
47788: CALL_OW 428
47792: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47793: LD_VAR 0 12
47797: PUSH
47798: LD_VAR 0 7
47802: ARRAY
47803: PUSH
47804: LD_INT 1
47806: ARRAY
47807: PPUSH
47808: LD_VAR 0 12
47812: PUSH
47813: LD_VAR 0 7
47817: ARRAY
47818: PUSH
47819: LD_INT 2
47821: ARRAY
47822: PPUSH
47823: CALL_OW 351
47827: PUSH
47828: LD_VAR 0 12
47832: PUSH
47833: LD_VAR 0 7
47837: ARRAY
47838: PUSH
47839: LD_INT 1
47841: ARRAY
47842: PPUSH
47843: LD_VAR 0 12
47847: PUSH
47848: LD_VAR 0 7
47852: ARRAY
47853: PUSH
47854: LD_INT 2
47856: ARRAY
47857: PPUSH
47858: CALL_OW 488
47862: NOT
47863: OR
47864: PUSH
47865: LD_VAR 0 11
47869: PPUSH
47870: CALL_OW 247
47874: PUSH
47875: LD_INT 3
47877: EQUAL
47878: OR
47879: IFFALSE 47885
// exit ;
47881: POP
47882: POP
47883: GO 48288
// if not tmp or not tmp in base then
47885: LD_VAR 0 11
47889: NOT
47890: PUSH
47891: LD_VAR 0 11
47895: PUSH
47896: LD_VAR 0 1
47900: IN
47901: NOT
47902: OR
47903: IFFALSE 47907
// continue ;
47905: GO 47750
// result := true ;
47907: LD_ADDR_VAR 0 6
47911: PUSH
47912: LD_INT 1
47914: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47915: LD_ADDR_VAR 0 15
47919: PUSH
47920: LD_VAR 0 1
47924: PPUSH
47925: LD_INT 22
47927: PUSH
47928: LD_VAR 0 11
47932: PPUSH
47933: CALL_OW 255
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 30
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 30
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PPUSH
47974: CALL_OW 72
47978: ST_TO_ADDR
// if dep then
47979: LD_VAR 0 15
47983: IFFALSE 48119
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47985: LD_ADDR_VAR 0 14
47989: PUSH
47990: LD_VAR 0 15
47994: PUSH
47995: LD_INT 1
47997: ARRAY
47998: PPUSH
47999: CALL_OW 250
48003: PPUSH
48004: LD_VAR 0 15
48008: PUSH
48009: LD_INT 1
48011: ARRAY
48012: PPUSH
48013: CALL_OW 254
48017: PPUSH
48018: LD_INT 5
48020: PPUSH
48021: CALL_OW 272
48025: PUSH
48026: LD_VAR 0 15
48030: PUSH
48031: LD_INT 1
48033: ARRAY
48034: PPUSH
48035: CALL_OW 251
48039: PPUSH
48040: LD_VAR 0 15
48044: PUSH
48045: LD_INT 1
48047: ARRAY
48048: PPUSH
48049: CALL_OW 254
48053: PPUSH
48054: LD_INT 5
48056: PPUSH
48057: CALL_OW 273
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48066: LD_VAR 0 14
48070: PUSH
48071: LD_INT 1
48073: ARRAY
48074: PPUSH
48075: LD_VAR 0 14
48079: PUSH
48080: LD_INT 2
48082: ARRAY
48083: PPUSH
48084: CALL_OW 488
48088: IFFALSE 48119
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48090: LD_VAR 0 11
48094: PPUSH
48095: LD_VAR 0 14
48099: PUSH
48100: LD_INT 1
48102: ARRAY
48103: PPUSH
48104: LD_VAR 0 14
48108: PUSH
48109: LD_INT 2
48111: ARRAY
48112: PPUSH
48113: CALL_OW 111
// continue ;
48117: GO 47750
// end ; end ; r := GetDir ( tmp ) ;
48119: LD_ADDR_VAR 0 13
48123: PUSH
48124: LD_VAR 0 11
48128: PPUSH
48129: CALL_OW 254
48133: ST_TO_ADDR
// if r = 5 then
48134: LD_VAR 0 13
48138: PUSH
48139: LD_INT 5
48141: EQUAL
48142: IFFALSE 48152
// r := 0 ;
48144: LD_ADDR_VAR 0 13
48148: PUSH
48149: LD_INT 0
48151: ST_TO_ADDR
// for j = r to 5 do
48152: LD_ADDR_VAR 0 8
48156: PUSH
48157: DOUBLE
48158: LD_VAR 0 13
48162: DEC
48163: ST_TO_ADDR
48164: LD_INT 5
48166: PUSH
48167: FOR_TO
48168: IFFALSE 48282
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48170: LD_ADDR_VAR 0 9
48174: PUSH
48175: LD_VAR 0 11
48179: PPUSH
48180: CALL_OW 250
48184: PPUSH
48185: LD_VAR 0 8
48189: PPUSH
48190: LD_INT 2
48192: PPUSH
48193: CALL_OW 272
48197: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48198: LD_ADDR_VAR 0 10
48202: PUSH
48203: LD_VAR 0 11
48207: PPUSH
48208: CALL_OW 251
48212: PPUSH
48213: LD_VAR 0 8
48217: PPUSH
48218: LD_INT 2
48220: PPUSH
48221: CALL_OW 273
48225: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48226: LD_VAR 0 9
48230: PPUSH
48231: LD_VAR 0 10
48235: PPUSH
48236: CALL_OW 488
48240: PUSH
48241: LD_VAR 0 9
48245: PPUSH
48246: LD_VAR 0 10
48250: PPUSH
48251: CALL_OW 428
48255: NOT
48256: AND
48257: IFFALSE 48280
// begin ComMoveXY ( tmp , _x , _y ) ;
48259: LD_VAR 0 11
48263: PPUSH
48264: LD_VAR 0 9
48268: PPUSH
48269: LD_VAR 0 10
48273: PPUSH
48274: CALL_OW 111
// break ;
48278: GO 48282
// end ; end ;
48280: GO 48167
48282: POP
48283: POP
// end ;
48284: GO 47750
48286: POP
48287: POP
// end ;
48288: LD_VAR 0 6
48292: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48293: LD_INT 0
48295: PPUSH
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
48301: PPUSH
48302: PPUSH
48303: PPUSH
48304: PPUSH
// result := false ;
48305: LD_ADDR_VAR 0 6
48309: PUSH
48310: LD_INT 0
48312: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48313: LD_VAR 0 1
48317: NOT
48318: PUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 266
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: IN
48339: NOT
48340: OR
48341: PUSH
48342: LD_VAR 0 2
48346: NOT
48347: OR
48348: PUSH
48349: LD_VAR 0 5
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 5
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: IN
48380: NOT
48381: OR
48382: PUSH
48383: LD_VAR 0 3
48387: PPUSH
48388: LD_VAR 0 4
48392: PPUSH
48393: CALL_OW 488
48397: NOT
48398: OR
48399: IFFALSE 48403
// exit ;
48401: GO 49120
// pom := GetBase ( depot ) ;
48403: LD_ADDR_VAR 0 10
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: CALL_OW 274
48417: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48418: LD_ADDR_VAR 0 11
48422: PUSH
48423: LD_VAR 0 2
48427: PPUSH
48428: LD_VAR 0 1
48432: PPUSH
48433: CALL_OW 248
48437: PPUSH
48438: CALL_OW 450
48442: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48443: LD_VAR 0 10
48447: PPUSH
48448: LD_INT 1
48450: PPUSH
48451: CALL_OW 275
48455: PUSH
48456: LD_VAR 0 11
48460: PUSH
48461: LD_INT 1
48463: ARRAY
48464: GREATEREQUAL
48465: PUSH
48466: LD_VAR 0 10
48470: PPUSH
48471: LD_INT 2
48473: PPUSH
48474: CALL_OW 275
48478: PUSH
48479: LD_VAR 0 11
48483: PUSH
48484: LD_INT 2
48486: ARRAY
48487: GREATEREQUAL
48488: AND
48489: PUSH
48490: LD_VAR 0 10
48494: PPUSH
48495: LD_INT 3
48497: PPUSH
48498: CALL_OW 275
48502: PUSH
48503: LD_VAR 0 11
48507: PUSH
48508: LD_INT 3
48510: ARRAY
48511: GREATEREQUAL
48512: AND
48513: NOT
48514: IFFALSE 48518
// exit ;
48516: GO 49120
// if GetBType ( depot ) = b_depot then
48518: LD_VAR 0 1
48522: PPUSH
48523: CALL_OW 266
48527: PUSH
48528: LD_INT 0
48530: EQUAL
48531: IFFALSE 48543
// dist := 28 else
48533: LD_ADDR_VAR 0 14
48537: PUSH
48538: LD_INT 28
48540: ST_TO_ADDR
48541: GO 48551
// dist := 36 ;
48543: LD_ADDR_VAR 0 14
48547: PUSH
48548: LD_INT 36
48550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48551: LD_VAR 0 1
48555: PPUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: LD_VAR 0 4
48565: PPUSH
48566: CALL_OW 297
48570: PUSH
48571: LD_VAR 0 14
48575: GREATER
48576: IFFALSE 48580
// exit ;
48578: GO 49120
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48580: LD_ADDR_VAR 0 12
48584: PUSH
48585: LD_VAR 0 2
48589: PPUSH
48590: LD_VAR 0 3
48594: PPUSH
48595: LD_VAR 0 4
48599: PPUSH
48600: LD_VAR 0 5
48604: PPUSH
48605: LD_VAR 0 1
48609: PPUSH
48610: CALL_OW 248
48614: PPUSH
48615: LD_INT 0
48617: PPUSH
48618: CALL 49125 0 6
48622: ST_TO_ADDR
// if not hexes then
48623: LD_VAR 0 12
48627: NOT
48628: IFFALSE 48632
// exit ;
48630: GO 49120
// hex := GetHexInfo ( x , y ) ;
48632: LD_ADDR_VAR 0 15
48636: PUSH
48637: LD_VAR 0 3
48641: PPUSH
48642: LD_VAR 0 4
48646: PPUSH
48647: CALL_OW 546
48651: ST_TO_ADDR
// if hex [ 1 ] then
48652: LD_VAR 0 15
48656: PUSH
48657: LD_INT 1
48659: ARRAY
48660: IFFALSE 48664
// exit ;
48662: GO 49120
// height := hex [ 2 ] ;
48664: LD_ADDR_VAR 0 13
48668: PUSH
48669: LD_VAR 0 15
48673: PUSH
48674: LD_INT 2
48676: ARRAY
48677: ST_TO_ADDR
// for i = 1 to hexes do
48678: LD_ADDR_VAR 0 7
48682: PUSH
48683: DOUBLE
48684: LD_INT 1
48686: DEC
48687: ST_TO_ADDR
48688: LD_VAR 0 12
48692: PUSH
48693: FOR_TO
48694: IFFALSE 49024
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48696: LD_VAR 0 12
48700: PUSH
48701: LD_VAR 0 7
48705: ARRAY
48706: PUSH
48707: LD_INT 1
48709: ARRAY
48710: PPUSH
48711: LD_VAR 0 12
48715: PUSH
48716: LD_VAR 0 7
48720: ARRAY
48721: PUSH
48722: LD_INT 2
48724: ARRAY
48725: PPUSH
48726: CALL_OW 488
48730: NOT
48731: PUSH
48732: LD_VAR 0 12
48736: PUSH
48737: LD_VAR 0 7
48741: ARRAY
48742: PUSH
48743: LD_INT 1
48745: ARRAY
48746: PPUSH
48747: LD_VAR 0 12
48751: PUSH
48752: LD_VAR 0 7
48756: ARRAY
48757: PUSH
48758: LD_INT 2
48760: ARRAY
48761: PPUSH
48762: CALL_OW 428
48766: PUSH
48767: LD_INT 0
48769: GREATER
48770: OR
48771: PUSH
48772: LD_VAR 0 12
48776: PUSH
48777: LD_VAR 0 7
48781: ARRAY
48782: PUSH
48783: LD_INT 1
48785: ARRAY
48786: PPUSH
48787: LD_VAR 0 12
48791: PUSH
48792: LD_VAR 0 7
48796: ARRAY
48797: PUSH
48798: LD_INT 2
48800: ARRAY
48801: PPUSH
48802: CALL_OW 351
48806: OR
48807: IFFALSE 48813
// exit ;
48809: POP
48810: POP
48811: GO 49120
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48813: LD_ADDR_VAR 0 8
48817: PUSH
48818: LD_VAR 0 12
48822: PUSH
48823: LD_VAR 0 7
48827: ARRAY
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: PPUSH
48833: LD_VAR 0 12
48837: PUSH
48838: LD_VAR 0 7
48842: ARRAY
48843: PUSH
48844: LD_INT 2
48846: ARRAY
48847: PPUSH
48848: CALL_OW 546
48852: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48853: LD_VAR 0 8
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PUSH
48862: LD_VAR 0 8
48866: PUSH
48867: LD_INT 2
48869: ARRAY
48870: PUSH
48871: LD_VAR 0 13
48875: PUSH
48876: LD_INT 2
48878: PLUS
48879: GREATER
48880: OR
48881: PUSH
48882: LD_VAR 0 8
48886: PUSH
48887: LD_INT 2
48889: ARRAY
48890: PUSH
48891: LD_VAR 0 13
48895: PUSH
48896: LD_INT 2
48898: MINUS
48899: LESS
48900: OR
48901: PUSH
48902: LD_VAR 0 8
48906: PUSH
48907: LD_INT 3
48909: ARRAY
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 8
48916: PUSH
48917: LD_INT 9
48919: PUSH
48920: LD_INT 10
48922: PUSH
48923: LD_INT 11
48925: PUSH
48926: LD_INT 12
48928: PUSH
48929: LD_INT 13
48931: PUSH
48932: LD_INT 16
48934: PUSH
48935: LD_INT 17
48937: PUSH
48938: LD_INT 18
48940: PUSH
48941: LD_INT 19
48943: PUSH
48944: LD_INT 20
48946: PUSH
48947: LD_INT 21
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: IN
48965: NOT
48966: OR
48967: PUSH
48968: LD_VAR 0 8
48972: PUSH
48973: LD_INT 5
48975: ARRAY
48976: NOT
48977: OR
48978: PUSH
48979: LD_VAR 0 8
48983: PUSH
48984: LD_INT 6
48986: ARRAY
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 7
48996: PUSH
48997: LD_INT 9
48999: PUSH
49000: LD_INT 10
49002: PUSH
49003: LD_INT 11
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: IN
49014: NOT
49015: OR
49016: IFFALSE 49022
// exit ;
49018: POP
49019: POP
49020: GO 49120
// end ;
49022: GO 48693
49024: POP
49025: POP
// side := GetSide ( depot ) ;
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 1
49035: PPUSH
49036: CALL_OW 255
49040: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49041: LD_VAR 0 9
49045: PPUSH
49046: LD_VAR 0 3
49050: PPUSH
49051: LD_VAR 0 4
49055: PPUSH
49056: LD_INT 20
49058: PPUSH
49059: CALL 41774 0 4
49063: PUSH
49064: LD_INT 4
49066: ARRAY
49067: IFFALSE 49071
// exit ;
49069: GO 49120
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49071: LD_VAR 0 2
49075: PUSH
49076: LD_INT 29
49078: PUSH
49079: LD_INT 30
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: IN
49086: PUSH
49087: LD_VAR 0 3
49091: PPUSH
49092: LD_VAR 0 4
49096: PPUSH
49097: LD_VAR 0 9
49101: PPUSH
49102: CALL_OW 440
49106: NOT
49107: AND
49108: IFFALSE 49112
// exit ;
49110: GO 49120
// result := true ;
49112: LD_ADDR_VAR 0 6
49116: PUSH
49117: LD_INT 1
49119: ST_TO_ADDR
// end ;
49120: LD_VAR 0 6
49124: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49125: LD_INT 0
49127: PPUSH
49128: PPUSH
49129: PPUSH
49130: PPUSH
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
49145: PPUSH
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
49151: PPUSH
49152: PPUSH
49153: PPUSH
49154: PPUSH
49155: PPUSH
49156: PPUSH
49157: PPUSH
49158: PPUSH
49159: PPUSH
49160: PPUSH
49161: PPUSH
49162: PPUSH
49163: PPUSH
49164: PPUSH
49165: PPUSH
49166: PPUSH
49167: PPUSH
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
// result = [ ] ;
49185: LD_ADDR_VAR 0 7
49189: PUSH
49190: EMPTY
49191: ST_TO_ADDR
// temp_list = [ ] ;
49192: LD_ADDR_VAR 0 9
49196: PUSH
49197: EMPTY
49198: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49199: LD_VAR 0 4
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: LD_INT 4
49218: PUSH
49219: LD_INT 5
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: IN
49230: NOT
49231: PUSH
49232: LD_VAR 0 1
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: IN
49247: PUSH
49248: LD_VAR 0 5
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: IN
49267: NOT
49268: AND
49269: OR
49270: IFFALSE 49274
// exit ;
49272: GO 67665
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49274: LD_VAR 0 1
49278: PUSH
49279: LD_INT 6
49281: PUSH
49282: LD_INT 7
49284: PUSH
49285: LD_INT 8
49287: PUSH
49288: LD_INT 13
49290: PUSH
49291: LD_INT 12
49293: PUSH
49294: LD_INT 15
49296: PUSH
49297: LD_INT 11
49299: PUSH
49300: LD_INT 14
49302: PUSH
49303: LD_INT 10
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: IN
49317: IFFALSE 49327
// btype = b_lab ;
49319: LD_ADDR_VAR 0 1
49323: PUSH
49324: LD_INT 6
49326: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49327: LD_VAR 0 6
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: IN
49346: NOT
49347: PUSH
49348: LD_VAR 0 1
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: LD_INT 6
49367: PUSH
49368: LD_INT 36
49370: PUSH
49371: LD_INT 4
49373: PUSH
49374: LD_INT 5
49376: PUSH
49377: LD_INT 31
49379: PUSH
49380: LD_INT 32
49382: PUSH
49383: LD_INT 33
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: IN
49399: NOT
49400: PUSH
49401: LD_VAR 0 6
49405: PUSH
49406: LD_INT 1
49408: EQUAL
49409: AND
49410: OR
49411: PUSH
49412: LD_VAR 0 1
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: IN
49427: NOT
49428: PUSH
49429: LD_VAR 0 6
49433: PUSH
49434: LD_INT 2
49436: EQUAL
49437: AND
49438: OR
49439: IFFALSE 49449
// mode = 0 ;
49441: LD_ADDR_VAR 0 6
49445: PUSH
49446: LD_INT 0
49448: ST_TO_ADDR
// case mode of 0 :
49449: LD_VAR 0 6
49453: PUSH
49454: LD_INT 0
49456: DOUBLE
49457: EQUAL
49458: IFTRUE 49462
49460: GO 60915
49462: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49463: LD_ADDR_VAR 0 11
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49656: LD_ADDR_VAR 0 12
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49852: LD_ADDR_VAR 0 13
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50051: LD_ADDR_VAR 0 14
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 3
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50247: LD_ADDR_VAR 0 15
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50440: LD_ADDR_VAR 0 16
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50633: LD_ADDR_VAR 0 17
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 18
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51093: LD_ADDR_VAR 0 19
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 20
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51553: LD_ADDR_VAR 0 21
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51783: LD_ADDR_VAR 0 22
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52013: LD_ADDR_VAR 0 23
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52293: LD_ADDR_VAR 0 24
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52569: LD_ADDR_VAR 0 25
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52843: LD_ADDR_VAR 0 26
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53119: LD_ADDR_VAR 0 27
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53399: LD_ADDR_VAR 0 28
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53681: LD_ADDR_VAR 0 29
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53960: LD_ADDR_VAR 0 30
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54238: LD_ADDR_VAR 0 31
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54516: LD_ADDR_VAR 0 32
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54794: LD_ADDR_VAR 0 33
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55073: LD_ADDR_VAR 0 34
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55353: LD_ADDR_VAR 0 35
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55465: LD_ADDR_VAR 0 36
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55577: LD_ADDR_VAR 0 37
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55689: LD_ADDR_VAR 0 38
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55801: LD_ADDR_VAR 0 39
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55913: LD_ADDR_VAR 0 40
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56025: LD_ADDR_VAR 0 41
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56375: LD_ADDR_VAR 0 42
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56725: LD_ADDR_VAR 0 43
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57073: LD_ADDR_VAR 0 44
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57423: LD_ADDR_VAR 0 45
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57773: LD_ADDR_VAR 0 46
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58121: LD_ADDR_VAR 0 47
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58272: LD_ADDR_VAR 0 48
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58419: LD_ADDR_VAR 0 49
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58563: LD_ADDR_VAR 0 50
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58707: LD_ADDR_VAR 0 51
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58854: LD_ADDR_VAR 0 52
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59005: LD_ADDR_VAR 0 53
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59235: LD_ADDR_VAR 0 54
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59465: LD_ADDR_VAR 0 55
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59695: LD_ADDR_VAR 0 56
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59925: LD_ADDR_VAR 0 57
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60155: LD_ADDR_VAR 0 58
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60385: LD_ADDR_VAR 0 59
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60473: LD_ADDR_VAR 0 60
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60561: LD_ADDR_VAR 0 61
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60649: LD_ADDR_VAR 0 62
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60737: LD_ADDR_VAR 0 63
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60825: LD_ADDR_VAR 0 64
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// end ; 1 :
60913: GO 66810
60915: LD_INT 1
60917: DOUBLE
60918: EQUAL
60919: IFTRUE 60923
60921: GO 63546
60923: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60924: LD_ADDR_VAR 0 11
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60968: LD_ADDR_VAR 0 12
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61009: LD_ADDR_VAR 0 13
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61049: LD_ADDR_VAR 0 14
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61090: LD_ADDR_VAR 0 15
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61134: LD_ADDR_VAR 0 16
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 3
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 3
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61180: LD_ADDR_VAR 0 17
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61224: LD_ADDR_VAR 0 18
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61265: LD_ADDR_VAR 0 19
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61305: LD_ADDR_VAR 0 20
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 3
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61346: LD_ADDR_VAR 0 21
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61390: LD_ADDR_VAR 0 22
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61436: LD_ADDR_VAR 0 23
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 4
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61480: LD_ADDR_VAR 0 24
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61521: LD_ADDR_VAR 0 25
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 4
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61561: LD_ADDR_VAR 0 26
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 3
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61602: LD_ADDR_VAR 0 27
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61646: LD_ADDR_VAR 0 28
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 4
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 4
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61692: LD_ADDR_VAR 0 29
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: LD_INT 5
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 5
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 6
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 6
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 5
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61847: LD_ADDR_VAR 0 30
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 4
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 4
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 5
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 5
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 5
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 6
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 6
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61990: LD_ADDR_VAR 0 31
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 4
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: LD_INT 4
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 5
62057: PUSH
62058: LD_INT 4
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 5
62067: PUSH
62068: LD_INT 5
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: LD_INT 5
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 6
62087: PUSH
62088: LD_INT 5
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 6
62097: PUSH
62098: LD_INT 6
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 5
62107: PUSH
62108: LD_INT 6
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62129: LD_ADDR_VAR 0 32
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 4
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 3
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 5
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 6
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 6
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62272: LD_ADDR_VAR 0 33
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 3
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 4
62324: NEG
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 4
62335: NEG
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 4
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 5
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 5
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 6
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 6
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62427: LD_ADDR_VAR 0 34
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 4
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: LD_INT 4
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: NEG
62507: PUSH
62508: LD_INT 5
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 5
62518: NEG
62519: PUSH
62520: LD_INT 4
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 5
62530: NEG
62531: PUSH
62532: LD_INT 5
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 5
62542: NEG
62543: PUSH
62544: LD_INT 6
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 6
62554: NEG
62555: PUSH
62556: LD_INT 5
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 6
62566: NEG
62567: PUSH
62568: LD_INT 6
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62590: LD_ADDR_VAR 0 41
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62634: LD_ADDR_VAR 0 42
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62675: LD_ADDR_VAR 0 43
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62715: LD_ADDR_VAR 0 44
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62756: LD_ADDR_VAR 0 45
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: NEG
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62800: LD_ADDR_VAR 0 46
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: LD_INT 2
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: LD_INT 3
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: NEG
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62846: LD_ADDR_VAR 0 47
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62879: LD_ADDR_VAR 0 48
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62910: LD_ADDR_VAR 0 49
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62939: LD_ADDR_VAR 0 50
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62968: LD_ADDR_VAR 0 51
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62999: LD_ADDR_VAR 0 52
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63032: LD_ADDR_VAR 0 53
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 3
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63076: LD_ADDR_VAR 0 54
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: LIST
63116: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63117: LD_ADDR_VAR 0 55
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 3
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63157: LD_ADDR_VAR 0 56
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63198: LD_ADDR_VAR 0 57
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: LIST
63241: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63242: LD_ADDR_VAR 0 58
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 3
63261: NEG
63262: PUSH
63263: LD_INT 2
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63288: LD_ADDR_VAR 0 59
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 2
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63332: LD_ADDR_VAR 0 60
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63373: LD_ADDR_VAR 0 61
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63413: LD_ADDR_VAR 0 62
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63454: LD_ADDR_VAR 0 63
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63498: LD_ADDR_VAR 0 64
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: ST_TO_ADDR
// end ; 2 :
63544: GO 66810
63546: LD_INT 2
63548: DOUBLE
63549: EQUAL
63550: IFTRUE 63554
63552: GO 66809
63554: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63555: LD_ADDR_VAR 0 29
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 4
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 5
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: LD_INT 3
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: LD_INT 3
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 4
63685: PUSH
63686: LD_INT 4
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 4
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 4
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 5
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 5
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: NEG
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 4
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 4
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 4
63940: NEG
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: LD_INT 5
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: LD_INT 4
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 4
63988: NEG
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: LD_INT 4
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 5
64012: NEG
64013: PUSH
64014: LD_INT 5
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: LD_INT 5
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 5
64036: NEG
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64093: LD_ADDR_VAR 0 30
64097: PUSH
64098: LD_INT 4
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 5
64120: PUSH
64121: LD_INT 4
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 5
64130: PUSH
64131: LD_INT 5
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 4
64140: PUSH
64141: LD_INT 5
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: LD_INT 3
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 5
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 5
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 4
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 4
64283: NEG
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 4
64294: NEG
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: NEG
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 4
64328: NEG
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 5
64339: NEG
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 5
64350: NEG
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 5
64362: NEG
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 3
64385: NEG
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 3
64397: NEG
64398: PUSH
64399: LD_INT 4
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: LD_INT 3
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 4
64457: NEG
64458: PUSH
64459: LD_INT 4
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: LD_INT 4
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 4
64481: NEG
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 4
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 5
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 4
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 3
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 3
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 4
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: LD_INT 5
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: LD_INT 5
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64640: LD_ADDR_VAR 0 31
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 4
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 5
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 5
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 5
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 3
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 3
64785: NEG
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 4
64796: NEG
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 4
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 4
64819: NEG
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 4
64842: NEG
64843: PUSH
64844: LD_INT 4
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 4
64854: NEG
64855: PUSH
64856: LD_INT 5
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: LD_INT 4
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: LD_INT 3
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 4
64890: NEG
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 5
64902: NEG
64903: PUSH
64904: LD_INT 4
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 5
64914: NEG
64915: PUSH
64916: LD_INT 5
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: LD_INT 5
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 5
64938: NEG
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 4
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 4
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 4
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 5
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 4
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 5
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65190: LD_ADDR_VAR 0 32
65194: PUSH
65195: LD_INT 4
65197: NEG
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 4
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 4
65242: NEG
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 5
65253: NEG
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 5
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 5
65276: NEG
65277: PUSH
65278: LD_INT 2
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 3
65299: NEG
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: NEG
65312: PUSH
65313: LD_INT 4
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 2
65323: NEG
65324: PUSH
65325: LD_INT 3
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: NEG
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 3
65347: NEG
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 4
65359: NEG
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 4
65371: NEG
65372: PUSH
65373: LD_INT 4
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 4
65395: NEG
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 4
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 5
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 4
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 5
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: LD_INT 5
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 4
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 5
65632: PUSH
65633: LD_INT 5
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 4
65642: PUSH
65643: LD_INT 5
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: LD_INT 4
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 5
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: LD_INT 5
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65737: LD_ADDR_VAR 0 33
65741: PUSH
65742: LD_INT 4
65744: NEG
65745: PUSH
65746: LD_INT 4
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 4
65756: NEG
65757: PUSH
65758: LD_INT 5
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: LD_INT 4
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 3
65780: NEG
65781: PUSH
65782: LD_INT 3
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 4
65792: NEG
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 5
65804: NEG
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 5
65816: NEG
65817: PUSH
65818: LD_INT 5
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: LD_INT 5
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 5
65840: NEG
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 3
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 4
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 2
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: LD_INT 3
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 4
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 5
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 4
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 3
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 3
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 5
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: LD_INT 3
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: LD_INT 4
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 4
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: LD_INT 4
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 4
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 4
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: LD_INT 5
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 5
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 4
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: LD_INT 5
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: LD_INT 3
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66275: LD_ADDR_VAR 0 34
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 4
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: LD_INT 5
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 4
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 3
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: LD_INT 4
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 5
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: NEG
66373: PUSH
66374: LD_INT 5
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 4
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 4
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: LD_INT 2
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 4
66477: PUSH
66478: LD_INT 4
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 4
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 5
66497: PUSH
66498: LD_INT 4
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 5
66507: PUSH
66508: LD_INT 5
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 4
66517: PUSH
66518: LD_INT 5
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 3
66537: PUSH
66538: LD_INT 3
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 5
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: LD_INT 5
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 4
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 4
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 2
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 4
66671: NEG
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 3
66694: NEG
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 5
66716: NEG
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 5
66727: NEG
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 5
66739: NEG
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: NEG
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: ST_TO_ADDR
// end ; end ;
66807: GO 66810
66809: POP
// case btype of b_depot , b_warehouse :
66810: LD_VAR 0 1
66814: PUSH
66815: LD_INT 0
66817: DOUBLE
66818: EQUAL
66819: IFTRUE 66829
66821: LD_INT 1
66823: DOUBLE
66824: EQUAL
66825: IFTRUE 66829
66827: GO 67030
66829: POP
// case nation of nation_american :
66830: LD_VAR 0 5
66834: PUSH
66835: LD_INT 1
66837: DOUBLE
66838: EQUAL
66839: IFTRUE 66843
66841: GO 66899
66843: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66844: LD_ADDR_VAR 0 9
66848: PUSH
66849: LD_VAR 0 11
66853: PUSH
66854: LD_VAR 0 12
66858: PUSH
66859: LD_VAR 0 13
66863: PUSH
66864: LD_VAR 0 14
66868: PUSH
66869: LD_VAR 0 15
66873: PUSH
66874: LD_VAR 0 16
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: PUSH
66887: LD_VAR 0 4
66891: PUSH
66892: LD_INT 1
66894: PLUS
66895: ARRAY
66896: ST_TO_ADDR
66897: GO 67028
66899: LD_INT 2
66901: DOUBLE
66902: EQUAL
66903: IFTRUE 66907
66905: GO 66963
66907: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66908: LD_ADDR_VAR 0 9
66912: PUSH
66913: LD_VAR 0 17
66917: PUSH
66918: LD_VAR 0 18
66922: PUSH
66923: LD_VAR 0 19
66927: PUSH
66928: LD_VAR 0 20
66932: PUSH
66933: LD_VAR 0 21
66937: PUSH
66938: LD_VAR 0 22
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 4
66955: PUSH
66956: LD_INT 1
66958: PLUS
66959: ARRAY
66960: ST_TO_ADDR
66961: GO 67028
66963: LD_INT 3
66965: DOUBLE
66966: EQUAL
66967: IFTRUE 66971
66969: GO 67027
66971: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66972: LD_ADDR_VAR 0 9
66976: PUSH
66977: LD_VAR 0 23
66981: PUSH
66982: LD_VAR 0 24
66986: PUSH
66987: LD_VAR 0 25
66991: PUSH
66992: LD_VAR 0 26
66996: PUSH
66997: LD_VAR 0 27
67001: PUSH
67002: LD_VAR 0 28
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: PUSH
67015: LD_VAR 0 4
67019: PUSH
67020: LD_INT 1
67022: PLUS
67023: ARRAY
67024: ST_TO_ADDR
67025: GO 67028
67027: POP
67028: GO 67583
67030: LD_INT 2
67032: DOUBLE
67033: EQUAL
67034: IFTRUE 67044
67036: LD_INT 3
67038: DOUBLE
67039: EQUAL
67040: IFTRUE 67044
67042: GO 67100
67044: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67045: LD_ADDR_VAR 0 9
67049: PUSH
67050: LD_VAR 0 29
67054: PUSH
67055: LD_VAR 0 30
67059: PUSH
67060: LD_VAR 0 31
67064: PUSH
67065: LD_VAR 0 32
67069: PUSH
67070: LD_VAR 0 33
67074: PUSH
67075: LD_VAR 0 34
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: PUSH
67088: LD_VAR 0 4
67092: PUSH
67093: LD_INT 1
67095: PLUS
67096: ARRAY
67097: ST_TO_ADDR
67098: GO 67583
67100: LD_INT 16
67102: DOUBLE
67103: EQUAL
67104: IFTRUE 67162
67106: LD_INT 17
67108: DOUBLE
67109: EQUAL
67110: IFTRUE 67162
67112: LD_INT 18
67114: DOUBLE
67115: EQUAL
67116: IFTRUE 67162
67118: LD_INT 19
67120: DOUBLE
67121: EQUAL
67122: IFTRUE 67162
67124: LD_INT 22
67126: DOUBLE
67127: EQUAL
67128: IFTRUE 67162
67130: LD_INT 20
67132: DOUBLE
67133: EQUAL
67134: IFTRUE 67162
67136: LD_INT 21
67138: DOUBLE
67139: EQUAL
67140: IFTRUE 67162
67142: LD_INT 23
67144: DOUBLE
67145: EQUAL
67146: IFTRUE 67162
67148: LD_INT 24
67150: DOUBLE
67151: EQUAL
67152: IFTRUE 67162
67154: LD_INT 25
67156: DOUBLE
67157: EQUAL
67158: IFTRUE 67162
67160: GO 67218
67162: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67163: LD_ADDR_VAR 0 9
67167: PUSH
67168: LD_VAR 0 35
67172: PUSH
67173: LD_VAR 0 36
67177: PUSH
67178: LD_VAR 0 37
67182: PUSH
67183: LD_VAR 0 38
67187: PUSH
67188: LD_VAR 0 39
67192: PUSH
67193: LD_VAR 0 40
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: PUSH
67206: LD_VAR 0 4
67210: PUSH
67211: LD_INT 1
67213: PLUS
67214: ARRAY
67215: ST_TO_ADDR
67216: GO 67583
67218: LD_INT 6
67220: DOUBLE
67221: EQUAL
67222: IFTRUE 67274
67224: LD_INT 7
67226: DOUBLE
67227: EQUAL
67228: IFTRUE 67274
67230: LD_INT 8
67232: DOUBLE
67233: EQUAL
67234: IFTRUE 67274
67236: LD_INT 13
67238: DOUBLE
67239: EQUAL
67240: IFTRUE 67274
67242: LD_INT 12
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67274
67248: LD_INT 15
67250: DOUBLE
67251: EQUAL
67252: IFTRUE 67274
67254: LD_INT 11
67256: DOUBLE
67257: EQUAL
67258: IFTRUE 67274
67260: LD_INT 14
67262: DOUBLE
67263: EQUAL
67264: IFTRUE 67274
67266: LD_INT 10
67268: DOUBLE
67269: EQUAL
67270: IFTRUE 67274
67272: GO 67330
67274: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67275: LD_ADDR_VAR 0 9
67279: PUSH
67280: LD_VAR 0 41
67284: PUSH
67285: LD_VAR 0 42
67289: PUSH
67290: LD_VAR 0 43
67294: PUSH
67295: LD_VAR 0 44
67299: PUSH
67300: LD_VAR 0 45
67304: PUSH
67305: LD_VAR 0 46
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 4
67322: PUSH
67323: LD_INT 1
67325: PLUS
67326: ARRAY
67327: ST_TO_ADDR
67328: GO 67583
67330: LD_INT 36
67332: DOUBLE
67333: EQUAL
67334: IFTRUE 67338
67336: GO 67394
67338: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67339: LD_ADDR_VAR 0 9
67343: PUSH
67344: LD_VAR 0 47
67348: PUSH
67349: LD_VAR 0 48
67353: PUSH
67354: LD_VAR 0 49
67358: PUSH
67359: LD_VAR 0 50
67363: PUSH
67364: LD_VAR 0 51
67368: PUSH
67369: LD_VAR 0 52
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: LD_VAR 0 4
67386: PUSH
67387: LD_INT 1
67389: PLUS
67390: ARRAY
67391: ST_TO_ADDR
67392: GO 67583
67394: LD_INT 4
67396: DOUBLE
67397: EQUAL
67398: IFTRUE 67420
67400: LD_INT 5
67402: DOUBLE
67403: EQUAL
67404: IFTRUE 67420
67406: LD_INT 34
67408: DOUBLE
67409: EQUAL
67410: IFTRUE 67420
67412: LD_INT 37
67414: DOUBLE
67415: EQUAL
67416: IFTRUE 67420
67418: GO 67476
67420: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67421: LD_ADDR_VAR 0 9
67425: PUSH
67426: LD_VAR 0 53
67430: PUSH
67431: LD_VAR 0 54
67435: PUSH
67436: LD_VAR 0 55
67440: PUSH
67441: LD_VAR 0 56
67445: PUSH
67446: LD_VAR 0 57
67450: PUSH
67451: LD_VAR 0 58
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: PUSH
67464: LD_VAR 0 4
67468: PUSH
67469: LD_INT 1
67471: PLUS
67472: ARRAY
67473: ST_TO_ADDR
67474: GO 67583
67476: LD_INT 31
67478: DOUBLE
67479: EQUAL
67480: IFTRUE 67526
67482: LD_INT 32
67484: DOUBLE
67485: EQUAL
67486: IFTRUE 67526
67488: LD_INT 33
67490: DOUBLE
67491: EQUAL
67492: IFTRUE 67526
67494: LD_INT 27
67496: DOUBLE
67497: EQUAL
67498: IFTRUE 67526
67500: LD_INT 26
67502: DOUBLE
67503: EQUAL
67504: IFTRUE 67526
67506: LD_INT 28
67508: DOUBLE
67509: EQUAL
67510: IFTRUE 67526
67512: LD_INT 29
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67526
67518: LD_INT 30
67520: DOUBLE
67521: EQUAL
67522: IFTRUE 67526
67524: GO 67582
67526: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67527: LD_ADDR_VAR 0 9
67531: PUSH
67532: LD_VAR 0 59
67536: PUSH
67537: LD_VAR 0 60
67541: PUSH
67542: LD_VAR 0 61
67546: PUSH
67547: LD_VAR 0 62
67551: PUSH
67552: LD_VAR 0 63
67556: PUSH
67557: LD_VAR 0 64
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: PUSH
67570: LD_VAR 0 4
67574: PUSH
67575: LD_INT 1
67577: PLUS
67578: ARRAY
67579: ST_TO_ADDR
67580: GO 67583
67582: POP
// temp_list2 = [ ] ;
67583: LD_ADDR_VAR 0 10
67587: PUSH
67588: EMPTY
67589: ST_TO_ADDR
// for i in temp_list do
67590: LD_ADDR_VAR 0 8
67594: PUSH
67595: LD_VAR 0 9
67599: PUSH
67600: FOR_IN
67601: IFFALSE 67653
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67603: LD_ADDR_VAR 0 10
67607: PUSH
67608: LD_VAR 0 10
67612: PUSH
67613: LD_VAR 0 8
67617: PUSH
67618: LD_INT 1
67620: ARRAY
67621: PUSH
67622: LD_VAR 0 2
67626: PLUS
67627: PUSH
67628: LD_VAR 0 8
67632: PUSH
67633: LD_INT 2
67635: ARRAY
67636: PUSH
67637: LD_VAR 0 3
67641: PLUS
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: EMPTY
67648: LIST
67649: ADD
67650: ST_TO_ADDR
67651: GO 67600
67653: POP
67654: POP
// result = temp_list2 ;
67655: LD_ADDR_VAR 0 7
67659: PUSH
67660: LD_VAR 0 10
67664: ST_TO_ADDR
// end ;
67665: LD_VAR 0 7
67669: RET
// export function EnemyInRange ( unit , dist ) ; begin
67670: LD_INT 0
67672: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67673: LD_ADDR_VAR 0 3
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: CALL_OW 255
67687: PPUSH
67688: LD_VAR 0 1
67692: PPUSH
67693: CALL_OW 250
67697: PPUSH
67698: LD_VAR 0 1
67702: PPUSH
67703: CALL_OW 251
67707: PPUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: CALL 41774 0 4
67717: PUSH
67718: LD_INT 4
67720: ARRAY
67721: ST_TO_ADDR
// end ;
67722: LD_VAR 0 3
67726: RET
// export function PlayerSeeMe ( unit ) ; begin
67727: LD_INT 0
67729: PPUSH
// result := See ( your_side , unit ) ;
67730: LD_ADDR_VAR 0 2
67734: PUSH
67735: LD_OWVAR 2
67739: PPUSH
67740: LD_VAR 0 1
67744: PPUSH
67745: CALL_OW 292
67749: ST_TO_ADDR
// end ;
67750: LD_VAR 0 2
67754: RET
// export function ReverseDir ( unit ) ; begin
67755: LD_INT 0
67757: PPUSH
// if not unit then
67758: LD_VAR 0 1
67762: NOT
67763: IFFALSE 67767
// exit ;
67765: GO 67790
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67767: LD_ADDR_VAR 0 2
67771: PUSH
67772: LD_VAR 0 1
67776: PPUSH
67777: CALL_OW 254
67781: PUSH
67782: LD_INT 3
67784: PLUS
67785: PUSH
67786: LD_INT 6
67788: MOD
67789: ST_TO_ADDR
// end ;
67790: LD_VAR 0 2
67794: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67795: LD_INT 0
67797: PPUSH
67798: PPUSH
67799: PPUSH
67800: PPUSH
67801: PPUSH
// if not hexes then
67802: LD_VAR 0 2
67806: NOT
67807: IFFALSE 67811
// exit ;
67809: GO 67959
// dist := 9999 ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: LD_INT 9999
67818: ST_TO_ADDR
// for i = 1 to hexes do
67819: LD_ADDR_VAR 0 4
67823: PUSH
67824: DOUBLE
67825: LD_INT 1
67827: DEC
67828: ST_TO_ADDR
67829: LD_VAR 0 2
67833: PUSH
67834: FOR_TO
67835: IFFALSE 67947
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67837: LD_VAR 0 1
67841: PPUSH
67842: LD_VAR 0 2
67846: PUSH
67847: LD_VAR 0 4
67851: ARRAY
67852: PUSH
67853: LD_INT 1
67855: ARRAY
67856: PPUSH
67857: LD_VAR 0 2
67861: PUSH
67862: LD_VAR 0 4
67866: ARRAY
67867: PUSH
67868: LD_INT 2
67870: ARRAY
67871: PPUSH
67872: CALL_OW 297
67876: PUSH
67877: LD_VAR 0 5
67881: LESS
67882: IFFALSE 67945
// begin hex := hexes [ i ] ;
67884: LD_ADDR_VAR 0 7
67888: PUSH
67889: LD_VAR 0 2
67893: PUSH
67894: LD_VAR 0 4
67898: ARRAY
67899: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67900: LD_ADDR_VAR 0 5
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_VAR 0 2
67914: PUSH
67915: LD_VAR 0 4
67919: ARRAY
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: PPUSH
67925: LD_VAR 0 2
67929: PUSH
67930: LD_VAR 0 4
67934: ARRAY
67935: PUSH
67936: LD_INT 2
67938: ARRAY
67939: PPUSH
67940: CALL_OW 297
67944: ST_TO_ADDR
// end ; end ;
67945: GO 67834
67947: POP
67948: POP
// result := hex ;
67949: LD_ADDR_VAR 0 3
67953: PUSH
67954: LD_VAR 0 7
67958: ST_TO_ADDR
// end ;
67959: LD_VAR 0 3
67963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67964: LD_INT 0
67966: PPUSH
67967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67968: LD_VAR 0 1
67972: NOT
67973: PUSH
67974: LD_VAR 0 1
67978: PUSH
67979: LD_INT 21
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 23
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PPUSH
68003: CALL_OW 69
68007: IN
68008: NOT
68009: OR
68010: IFFALSE 68014
// exit ;
68012: GO 68061
// for i = 1 to 3 do
68014: LD_ADDR_VAR 0 3
68018: PUSH
68019: DOUBLE
68020: LD_INT 1
68022: DEC
68023: ST_TO_ADDR
68024: LD_INT 3
68026: PUSH
68027: FOR_TO
68028: IFFALSE 68059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68030: LD_VAR 0 1
68034: PPUSH
68035: CALL_OW 250
68039: PPUSH
68040: LD_VAR 0 1
68044: PPUSH
68045: CALL_OW 251
68049: PPUSH
68050: LD_INT 1
68052: PPUSH
68053: CALL_OW 453
68057: GO 68027
68059: POP
68060: POP
// end ;
68061: LD_VAR 0 2
68065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68066: LD_INT 0
68068: PPUSH
68069: PPUSH
68070: PPUSH
68071: PPUSH
68072: PPUSH
68073: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68074: LD_VAR 0 1
68078: NOT
68079: PUSH
68080: LD_VAR 0 2
68084: NOT
68085: OR
68086: PUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: CALL_OW 314
68096: OR
68097: IFFALSE 68101
// exit ;
68099: GO 68542
// x := GetX ( enemy_unit ) ;
68101: LD_ADDR_VAR 0 7
68105: PUSH
68106: LD_VAR 0 2
68110: PPUSH
68111: CALL_OW 250
68115: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68116: LD_ADDR_VAR 0 8
68120: PUSH
68121: LD_VAR 0 2
68125: PPUSH
68126: CALL_OW 251
68130: ST_TO_ADDR
// if not x or not y then
68131: LD_VAR 0 7
68135: NOT
68136: PUSH
68137: LD_VAR 0 8
68141: NOT
68142: OR
68143: IFFALSE 68147
// exit ;
68145: GO 68542
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68147: LD_ADDR_VAR 0 6
68151: PUSH
68152: LD_VAR 0 7
68156: PPUSH
68157: LD_INT 0
68159: PPUSH
68160: LD_INT 4
68162: PPUSH
68163: CALL_OW 272
68167: PUSH
68168: LD_VAR 0 8
68172: PPUSH
68173: LD_INT 0
68175: PPUSH
68176: LD_INT 4
68178: PPUSH
68179: CALL_OW 273
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_VAR 0 7
68192: PPUSH
68193: LD_INT 1
68195: PPUSH
68196: LD_INT 4
68198: PPUSH
68199: CALL_OW 272
68203: PUSH
68204: LD_VAR 0 8
68208: PPUSH
68209: LD_INT 1
68211: PPUSH
68212: LD_INT 4
68214: PPUSH
68215: CALL_OW 273
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_VAR 0 7
68228: PPUSH
68229: LD_INT 2
68231: PPUSH
68232: LD_INT 4
68234: PPUSH
68235: CALL_OW 272
68239: PUSH
68240: LD_VAR 0 8
68244: PPUSH
68245: LD_INT 2
68247: PPUSH
68248: LD_INT 4
68250: PPUSH
68251: CALL_OW 273
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_VAR 0 7
68264: PPUSH
68265: LD_INT 3
68267: PPUSH
68268: LD_INT 4
68270: PPUSH
68271: CALL_OW 272
68275: PUSH
68276: LD_VAR 0 8
68280: PPUSH
68281: LD_INT 3
68283: PPUSH
68284: LD_INT 4
68286: PPUSH
68287: CALL_OW 273
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_VAR 0 7
68300: PPUSH
68301: LD_INT 4
68303: PPUSH
68304: LD_INT 4
68306: PPUSH
68307: CALL_OW 272
68311: PUSH
68312: LD_VAR 0 8
68316: PPUSH
68317: LD_INT 4
68319: PPUSH
68320: LD_INT 4
68322: PPUSH
68323: CALL_OW 273
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_VAR 0 7
68336: PPUSH
68337: LD_INT 5
68339: PPUSH
68340: LD_INT 4
68342: PPUSH
68343: CALL_OW 272
68347: PUSH
68348: LD_VAR 0 8
68352: PPUSH
68353: LD_INT 5
68355: PPUSH
68356: LD_INT 4
68358: PPUSH
68359: CALL_OW 273
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// for i = tmp downto 1 do
68376: LD_ADDR_VAR 0 4
68380: PUSH
68381: DOUBLE
68382: LD_VAR 0 6
68386: INC
68387: ST_TO_ADDR
68388: LD_INT 1
68390: PUSH
68391: FOR_DOWNTO
68392: IFFALSE 68493
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68394: LD_VAR 0 6
68398: PUSH
68399: LD_VAR 0 4
68403: ARRAY
68404: PUSH
68405: LD_INT 1
68407: ARRAY
68408: PPUSH
68409: LD_VAR 0 6
68413: PUSH
68414: LD_VAR 0 4
68418: ARRAY
68419: PUSH
68420: LD_INT 2
68422: ARRAY
68423: PPUSH
68424: CALL_OW 488
68428: NOT
68429: PUSH
68430: LD_VAR 0 6
68434: PUSH
68435: LD_VAR 0 4
68439: ARRAY
68440: PUSH
68441: LD_INT 1
68443: ARRAY
68444: PPUSH
68445: LD_VAR 0 6
68449: PUSH
68450: LD_VAR 0 4
68454: ARRAY
68455: PUSH
68456: LD_INT 2
68458: ARRAY
68459: PPUSH
68460: CALL_OW 428
68464: PUSH
68465: LD_INT 0
68467: NONEQUAL
68468: OR
68469: IFFALSE 68491
// tmp := Delete ( tmp , i ) ;
68471: LD_ADDR_VAR 0 6
68475: PUSH
68476: LD_VAR 0 6
68480: PPUSH
68481: LD_VAR 0 4
68485: PPUSH
68486: CALL_OW 3
68490: ST_TO_ADDR
68491: GO 68391
68493: POP
68494: POP
// j := GetClosestHex ( unit , tmp ) ;
68495: LD_ADDR_VAR 0 5
68499: PUSH
68500: LD_VAR 0 1
68504: PPUSH
68505: LD_VAR 0 6
68509: PPUSH
68510: CALL 67795 0 2
68514: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_VAR 0 5
68524: PUSH
68525: LD_INT 1
68527: ARRAY
68528: PPUSH
68529: LD_VAR 0 5
68533: PUSH
68534: LD_INT 2
68536: ARRAY
68537: PPUSH
68538: CALL_OW 111
// end ;
68542: LD_VAR 0 3
68546: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68547: LD_INT 0
68549: PPUSH
68550: PPUSH
68551: PPUSH
// uc_side = 0 ;
68552: LD_ADDR_OWVAR 20
68556: PUSH
68557: LD_INT 0
68559: ST_TO_ADDR
// uc_nation = 0 ;
68560: LD_ADDR_OWVAR 21
68564: PUSH
68565: LD_INT 0
68567: ST_TO_ADDR
// InitHc_All ( ) ;
68568: CALL_OW 584
// InitVc ;
68572: CALL_OW 20
// if mastodonts then
68576: LD_VAR 0 6
68580: IFFALSE 68647
// for i = 1 to mastodonts do
68582: LD_ADDR_VAR 0 11
68586: PUSH
68587: DOUBLE
68588: LD_INT 1
68590: DEC
68591: ST_TO_ADDR
68592: LD_VAR 0 6
68596: PUSH
68597: FOR_TO
68598: IFFALSE 68645
// begin vc_chassis := 31 ;
68600: LD_ADDR_OWVAR 37
68604: PUSH
68605: LD_INT 31
68607: ST_TO_ADDR
// vc_control := control_rider ;
68608: LD_ADDR_OWVAR 38
68612: PUSH
68613: LD_INT 4
68615: ST_TO_ADDR
// animal := CreateVehicle ;
68616: LD_ADDR_VAR 0 12
68620: PUSH
68621: CALL_OW 45
68625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68626: LD_VAR 0 12
68630: PPUSH
68631: LD_VAR 0 8
68635: PPUSH
68636: LD_INT 0
68638: PPUSH
68639: CALL 70835 0 3
// end ;
68643: GO 68597
68645: POP
68646: POP
// if horses then
68647: LD_VAR 0 5
68651: IFFALSE 68718
// for i = 1 to horses do
68653: LD_ADDR_VAR 0 11
68657: PUSH
68658: DOUBLE
68659: LD_INT 1
68661: DEC
68662: ST_TO_ADDR
68663: LD_VAR 0 5
68667: PUSH
68668: FOR_TO
68669: IFFALSE 68716
// begin hc_class := 21 ;
68671: LD_ADDR_OWVAR 28
68675: PUSH
68676: LD_INT 21
68678: ST_TO_ADDR
// hc_gallery :=  ;
68679: LD_ADDR_OWVAR 33
68683: PUSH
68684: LD_STRING 
68686: ST_TO_ADDR
// animal := CreateHuman ;
68687: LD_ADDR_VAR 0 12
68691: PUSH
68692: CALL_OW 44
68696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68697: LD_VAR 0 12
68701: PPUSH
68702: LD_VAR 0 8
68706: PPUSH
68707: LD_INT 0
68709: PPUSH
68710: CALL 70835 0 3
// end ;
68714: GO 68668
68716: POP
68717: POP
// if birds then
68718: LD_VAR 0 1
68722: IFFALSE 68789
// for i = 1 to birds do
68724: LD_ADDR_VAR 0 11
68728: PUSH
68729: DOUBLE
68730: LD_INT 1
68732: DEC
68733: ST_TO_ADDR
68734: LD_VAR 0 1
68738: PUSH
68739: FOR_TO
68740: IFFALSE 68787
// begin hc_class = 18 ;
68742: LD_ADDR_OWVAR 28
68746: PUSH
68747: LD_INT 18
68749: ST_TO_ADDR
// hc_gallery =  ;
68750: LD_ADDR_OWVAR 33
68754: PUSH
68755: LD_STRING 
68757: ST_TO_ADDR
// animal := CreateHuman ;
68758: LD_ADDR_VAR 0 12
68762: PUSH
68763: CALL_OW 44
68767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68768: LD_VAR 0 12
68772: PPUSH
68773: LD_VAR 0 8
68777: PPUSH
68778: LD_INT 0
68780: PPUSH
68781: CALL 70835 0 3
// end ;
68785: GO 68739
68787: POP
68788: POP
// if tigers then
68789: LD_VAR 0 2
68793: IFFALSE 68877
// for i = 1 to tigers do
68795: LD_ADDR_VAR 0 11
68799: PUSH
68800: DOUBLE
68801: LD_INT 1
68803: DEC
68804: ST_TO_ADDR
68805: LD_VAR 0 2
68809: PUSH
68810: FOR_TO
68811: IFFALSE 68875
// begin hc_class = class_tiger ;
68813: LD_ADDR_OWVAR 28
68817: PUSH
68818: LD_INT 14
68820: ST_TO_ADDR
// hc_gallery =  ;
68821: LD_ADDR_OWVAR 33
68825: PUSH
68826: LD_STRING 
68828: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68829: LD_ADDR_OWVAR 35
68833: PUSH
68834: LD_INT 7
68836: NEG
68837: PPUSH
68838: LD_INT 7
68840: PPUSH
68841: CALL_OW 12
68845: ST_TO_ADDR
// animal := CreateHuman ;
68846: LD_ADDR_VAR 0 12
68850: PUSH
68851: CALL_OW 44
68855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68856: LD_VAR 0 12
68860: PPUSH
68861: LD_VAR 0 8
68865: PPUSH
68866: LD_INT 0
68868: PPUSH
68869: CALL 70835 0 3
// end ;
68873: GO 68810
68875: POP
68876: POP
// if apemans then
68877: LD_VAR 0 3
68881: IFFALSE 69004
// for i = 1 to apemans do
68883: LD_ADDR_VAR 0 11
68887: PUSH
68888: DOUBLE
68889: LD_INT 1
68891: DEC
68892: ST_TO_ADDR
68893: LD_VAR 0 3
68897: PUSH
68898: FOR_TO
68899: IFFALSE 69002
// begin hc_class = class_apeman ;
68901: LD_ADDR_OWVAR 28
68905: PUSH
68906: LD_INT 12
68908: ST_TO_ADDR
// hc_gallery =  ;
68909: LD_ADDR_OWVAR 33
68913: PUSH
68914: LD_STRING 
68916: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68917: LD_ADDR_OWVAR 35
68921: PUSH
68922: LD_INT 5
68924: NEG
68925: PPUSH
68926: LD_INT 5
68928: PPUSH
68929: CALL_OW 12
68933: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68934: LD_ADDR_OWVAR 31
68938: PUSH
68939: LD_INT 1
68941: PPUSH
68942: LD_INT 3
68944: PPUSH
68945: CALL_OW 12
68949: PUSH
68950: LD_INT 1
68952: PPUSH
68953: LD_INT 3
68955: PPUSH
68956: CALL_OW 12
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: ST_TO_ADDR
// animal := CreateHuman ;
68973: LD_ADDR_VAR 0 12
68977: PUSH
68978: CALL_OW 44
68982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68983: LD_VAR 0 12
68987: PPUSH
68988: LD_VAR 0 8
68992: PPUSH
68993: LD_INT 0
68995: PPUSH
68996: CALL 70835 0 3
// end ;
69000: GO 68898
69002: POP
69003: POP
// if enchidnas then
69004: LD_VAR 0 4
69008: IFFALSE 69075
// for i = 1 to enchidnas do
69010: LD_ADDR_VAR 0 11
69014: PUSH
69015: DOUBLE
69016: LD_INT 1
69018: DEC
69019: ST_TO_ADDR
69020: LD_VAR 0 4
69024: PUSH
69025: FOR_TO
69026: IFFALSE 69073
// begin hc_class = 13 ;
69028: LD_ADDR_OWVAR 28
69032: PUSH
69033: LD_INT 13
69035: ST_TO_ADDR
// hc_gallery =  ;
69036: LD_ADDR_OWVAR 33
69040: PUSH
69041: LD_STRING 
69043: ST_TO_ADDR
// animal := CreateHuman ;
69044: LD_ADDR_VAR 0 12
69048: PUSH
69049: CALL_OW 44
69053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69054: LD_VAR 0 12
69058: PPUSH
69059: LD_VAR 0 8
69063: PPUSH
69064: LD_INT 0
69066: PPUSH
69067: CALL 70835 0 3
// end ;
69071: GO 69025
69073: POP
69074: POP
// if fishes then
69075: LD_VAR 0 7
69079: IFFALSE 69146
// for i = 1 to fishes do
69081: LD_ADDR_VAR 0 11
69085: PUSH
69086: DOUBLE
69087: LD_INT 1
69089: DEC
69090: ST_TO_ADDR
69091: LD_VAR 0 7
69095: PUSH
69096: FOR_TO
69097: IFFALSE 69144
// begin hc_class = 20 ;
69099: LD_ADDR_OWVAR 28
69103: PUSH
69104: LD_INT 20
69106: ST_TO_ADDR
// hc_gallery =  ;
69107: LD_ADDR_OWVAR 33
69111: PUSH
69112: LD_STRING 
69114: ST_TO_ADDR
// animal := CreateHuman ;
69115: LD_ADDR_VAR 0 12
69119: PUSH
69120: CALL_OW 44
69124: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69125: LD_VAR 0 12
69129: PPUSH
69130: LD_VAR 0 9
69134: PPUSH
69135: LD_INT 0
69137: PPUSH
69138: CALL 70835 0 3
// end ;
69142: GO 69096
69144: POP
69145: POP
// end ;
69146: LD_VAR 0 10
69150: RET
// export function WantHeal ( sci , unit ) ; begin
69151: LD_INT 0
69153: PPUSH
// if GetTaskList ( sci ) > 0 then
69154: LD_VAR 0 1
69158: PPUSH
69159: CALL_OW 437
69163: PUSH
69164: LD_INT 0
69166: GREATER
69167: IFFALSE 69237
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69169: LD_VAR 0 1
69173: PPUSH
69174: CALL_OW 437
69178: PUSH
69179: LD_INT 1
69181: ARRAY
69182: PUSH
69183: LD_INT 1
69185: ARRAY
69186: PUSH
69187: LD_STRING l
69189: EQUAL
69190: PUSH
69191: LD_VAR 0 1
69195: PPUSH
69196: CALL_OW 437
69200: PUSH
69201: LD_INT 1
69203: ARRAY
69204: PUSH
69205: LD_INT 4
69207: ARRAY
69208: PUSH
69209: LD_VAR 0 2
69213: EQUAL
69214: AND
69215: IFFALSE 69227
// result := true else
69217: LD_ADDR_VAR 0 3
69221: PUSH
69222: LD_INT 1
69224: ST_TO_ADDR
69225: GO 69235
// result := false ;
69227: LD_ADDR_VAR 0 3
69231: PUSH
69232: LD_INT 0
69234: ST_TO_ADDR
// end else
69235: GO 69245
// result := false ;
69237: LD_ADDR_VAR 0 3
69241: PUSH
69242: LD_INT 0
69244: ST_TO_ADDR
// end ;
69245: LD_VAR 0 3
69249: RET
// export function HealTarget ( sci ) ; begin
69250: LD_INT 0
69252: PPUSH
// if not sci then
69253: LD_VAR 0 1
69257: NOT
69258: IFFALSE 69262
// exit ;
69260: GO 69327
// result := 0 ;
69262: LD_ADDR_VAR 0 2
69266: PUSH
69267: LD_INT 0
69269: ST_TO_ADDR
// if GetTaskList ( sci ) then
69270: LD_VAR 0 1
69274: PPUSH
69275: CALL_OW 437
69279: IFFALSE 69327
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69281: LD_VAR 0 1
69285: PPUSH
69286: CALL_OW 437
69290: PUSH
69291: LD_INT 1
69293: ARRAY
69294: PUSH
69295: LD_INT 1
69297: ARRAY
69298: PUSH
69299: LD_STRING l
69301: EQUAL
69302: IFFALSE 69327
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69304: LD_ADDR_VAR 0 2
69308: PUSH
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 437
69318: PUSH
69319: LD_INT 1
69321: ARRAY
69322: PUSH
69323: LD_INT 4
69325: ARRAY
69326: ST_TO_ADDR
// end ;
69327: LD_VAR 0 2
69331: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69332: LD_INT 0
69334: PPUSH
69335: PPUSH
69336: PPUSH
69337: PPUSH
// if not base_units then
69338: LD_VAR 0 1
69342: NOT
69343: IFFALSE 69347
// exit ;
69345: GO 69434
// result := false ;
69347: LD_ADDR_VAR 0 2
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69355: LD_ADDR_VAR 0 5
69359: PUSH
69360: LD_VAR 0 1
69364: PPUSH
69365: LD_INT 21
69367: PUSH
69368: LD_INT 3
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PPUSH
69375: CALL_OW 72
69379: ST_TO_ADDR
// if not tmp then
69380: LD_VAR 0 5
69384: NOT
69385: IFFALSE 69389
// exit ;
69387: GO 69434
// for i in tmp do
69389: LD_ADDR_VAR 0 3
69393: PUSH
69394: LD_VAR 0 5
69398: PUSH
69399: FOR_IN
69400: IFFALSE 69432
// begin result := EnemyInRange ( i , 22 ) ;
69402: LD_ADDR_VAR 0 2
69406: PUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: LD_INT 22
69414: PPUSH
69415: CALL 67670 0 2
69419: ST_TO_ADDR
// if result then
69420: LD_VAR 0 2
69424: IFFALSE 69430
// exit ;
69426: POP
69427: POP
69428: GO 69434
// end ;
69430: GO 69399
69432: POP
69433: POP
// end ;
69434: LD_VAR 0 2
69438: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69439: LD_INT 0
69441: PPUSH
69442: PPUSH
// if not units then
69443: LD_VAR 0 1
69447: NOT
69448: IFFALSE 69452
// exit ;
69450: GO 69522
// result := [ ] ;
69452: LD_ADDR_VAR 0 3
69456: PUSH
69457: EMPTY
69458: ST_TO_ADDR
// for i in units do
69459: LD_ADDR_VAR 0 4
69463: PUSH
69464: LD_VAR 0 1
69468: PUSH
69469: FOR_IN
69470: IFFALSE 69520
// if GetTag ( i ) = tag then
69472: LD_VAR 0 4
69476: PPUSH
69477: CALL_OW 110
69481: PUSH
69482: LD_VAR 0 2
69486: EQUAL
69487: IFFALSE 69518
// result := Insert ( result , result + 1 , i ) ;
69489: LD_ADDR_VAR 0 3
69493: PUSH
69494: LD_VAR 0 3
69498: PPUSH
69499: LD_VAR 0 3
69503: PUSH
69504: LD_INT 1
69506: PLUS
69507: PPUSH
69508: LD_VAR 0 4
69512: PPUSH
69513: CALL_OW 2
69517: ST_TO_ADDR
69518: GO 69469
69520: POP
69521: POP
// end ;
69522: LD_VAR 0 3
69526: RET
// export function IsDriver ( un ) ; begin
69527: LD_INT 0
69529: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69530: LD_ADDR_VAR 0 2
69534: PUSH
69535: LD_VAR 0 1
69539: PUSH
69540: LD_INT 55
69542: PUSH
69543: EMPTY
69544: LIST
69545: PPUSH
69546: CALL_OW 69
69550: IN
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 2
69556: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
// list := [ ] ;
69561: LD_ADDR_VAR 0 5
69565: PUSH
69566: EMPTY
69567: ST_TO_ADDR
// case d of 0 :
69568: LD_VAR 0 3
69572: PUSH
69573: LD_INT 0
69575: DOUBLE
69576: EQUAL
69577: IFTRUE 69581
69579: GO 69714
69581: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69582: LD_ADDR_VAR 0 5
69586: PUSH
69587: LD_VAR 0 1
69591: PUSH
69592: LD_INT 4
69594: MINUS
69595: PUSH
69596: LD_VAR 0 2
69600: PUSH
69601: LD_INT 4
69603: MINUS
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: PUSH
69613: LD_VAR 0 1
69617: PUSH
69618: LD_INT 3
69620: MINUS
69621: PUSH
69622: LD_VAR 0 2
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: PUSH
69635: LD_VAR 0 1
69639: PUSH
69640: LD_INT 4
69642: PLUS
69643: PUSH
69644: LD_VAR 0 2
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: LIST
69656: PUSH
69657: LD_VAR 0 1
69661: PUSH
69662: LD_INT 3
69664: PLUS
69665: PUSH
69666: LD_VAR 0 2
69670: PUSH
69671: LD_INT 3
69673: PLUS
69674: PUSH
69675: LD_INT 5
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: PUSH
69683: LD_VAR 0 1
69687: PUSH
69688: LD_VAR 0 2
69692: PUSH
69693: LD_INT 4
69695: PLUS
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: ST_TO_ADDR
// end ; 1 :
69712: GO 70412
69714: LD_INT 1
69716: DOUBLE
69717: EQUAL
69718: IFTRUE 69722
69720: GO 69855
69722: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69723: LD_ADDR_VAR 0 5
69727: PUSH
69728: LD_VAR 0 1
69732: PUSH
69733: LD_VAR 0 2
69737: PUSH
69738: LD_INT 4
69740: MINUS
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: PUSH
69750: LD_VAR 0 1
69754: PUSH
69755: LD_INT 3
69757: MINUS
69758: PUSH
69759: LD_VAR 0 2
69763: PUSH
69764: LD_INT 3
69766: MINUS
69767: PUSH
69768: LD_INT 2
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: PUSH
69776: LD_VAR 0 1
69780: PUSH
69781: LD_INT 4
69783: MINUS
69784: PUSH
69785: LD_VAR 0 2
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: LIST
69797: PUSH
69798: LD_VAR 0 1
69802: PUSH
69803: LD_VAR 0 2
69807: PUSH
69808: LD_INT 3
69810: PLUS
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: LIST
69819: PUSH
69820: LD_VAR 0 1
69824: PUSH
69825: LD_INT 4
69827: PLUS
69828: PUSH
69829: LD_VAR 0 2
69833: PUSH
69834: LD_INT 4
69836: PLUS
69837: PUSH
69838: LD_INT 5
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: ST_TO_ADDR
// end ; 2 :
69853: GO 70412
69855: LD_INT 2
69857: DOUBLE
69858: EQUAL
69859: IFTRUE 69863
69861: GO 69992
69863: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69864: LD_ADDR_VAR 0 5
69868: PUSH
69869: LD_VAR 0 1
69873: PUSH
69874: LD_VAR 0 2
69878: PUSH
69879: LD_INT 3
69881: MINUS
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: PUSH
69891: LD_VAR 0 1
69895: PUSH
69896: LD_INT 4
69898: PLUS
69899: PUSH
69900: LD_VAR 0 2
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: PUSH
69913: LD_VAR 0 1
69917: PUSH
69918: LD_VAR 0 2
69922: PUSH
69923: LD_INT 4
69925: PLUS
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: LIST
69934: PUSH
69935: LD_VAR 0 1
69939: PUSH
69940: LD_INT 3
69942: MINUS
69943: PUSH
69944: LD_VAR 0 2
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: LIST
69956: PUSH
69957: LD_VAR 0 1
69961: PUSH
69962: LD_INT 4
69964: MINUS
69965: PUSH
69966: LD_VAR 0 2
69970: PUSH
69971: LD_INT 4
69973: MINUS
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: ST_TO_ADDR
// end ; 3 :
69990: GO 70412
69992: LD_INT 3
69994: DOUBLE
69995: EQUAL
69996: IFTRUE 70000
69998: GO 70133
70000: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70001: LD_ADDR_VAR 0 5
70005: PUSH
70006: LD_VAR 0 1
70010: PUSH
70011: LD_INT 3
70013: PLUS
70014: PUSH
70015: LD_VAR 0 2
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: PUSH
70028: LD_VAR 0 1
70032: PUSH
70033: LD_INT 4
70035: PLUS
70036: PUSH
70037: LD_VAR 0 2
70041: PUSH
70042: LD_INT 4
70044: PLUS
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: LIST
70053: PUSH
70054: LD_VAR 0 1
70058: PUSH
70059: LD_INT 4
70061: MINUS
70062: PUSH
70063: LD_VAR 0 2
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: LIST
70075: PUSH
70076: LD_VAR 0 1
70080: PUSH
70081: LD_VAR 0 2
70085: PUSH
70086: LD_INT 4
70088: MINUS
70089: PUSH
70090: LD_INT 3
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: LIST
70097: PUSH
70098: LD_VAR 0 1
70102: PUSH
70103: LD_INT 3
70105: MINUS
70106: PUSH
70107: LD_VAR 0 2
70111: PUSH
70112: LD_INT 3
70114: MINUS
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: LIST
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: ST_TO_ADDR
// end ; 4 :
70131: GO 70412
70133: LD_INT 4
70135: DOUBLE
70136: EQUAL
70137: IFTRUE 70141
70139: GO 70274
70141: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70142: LD_ADDR_VAR 0 5
70146: PUSH
70147: LD_VAR 0 1
70151: PUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_INT 4
70159: PLUS
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: PUSH
70169: LD_VAR 0 1
70173: PUSH
70174: LD_INT 3
70176: PLUS
70177: PUSH
70178: LD_VAR 0 2
70182: PUSH
70183: LD_INT 3
70185: PLUS
70186: PUSH
70187: LD_INT 5
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: LIST
70194: PUSH
70195: LD_VAR 0 1
70199: PUSH
70200: LD_INT 4
70202: PLUS
70203: PUSH
70204: LD_VAR 0 2
70208: PUSH
70209: LD_INT 4
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: LIST
70216: PUSH
70217: LD_VAR 0 1
70221: PUSH
70222: LD_VAR 0 2
70226: PUSH
70227: LD_INT 3
70229: MINUS
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: LIST
70238: PUSH
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 4
70246: MINUS
70247: PUSH
70248: LD_VAR 0 2
70252: PUSH
70253: LD_INT 4
70255: MINUS
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: ST_TO_ADDR
// end ; 5 :
70272: GO 70412
70274: LD_INT 5
70276: DOUBLE
70277: EQUAL
70278: IFTRUE 70282
70280: GO 70411
70282: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70283: LD_ADDR_VAR 0 5
70287: PUSH
70288: LD_VAR 0 1
70292: PUSH
70293: LD_INT 4
70295: MINUS
70296: PUSH
70297: LD_VAR 0 2
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: PUSH
70310: LD_VAR 0 1
70314: PUSH
70315: LD_VAR 0 2
70319: PUSH
70320: LD_INT 4
70322: MINUS
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: PUSH
70332: LD_VAR 0 1
70336: PUSH
70337: LD_INT 4
70339: PLUS
70340: PUSH
70341: LD_VAR 0 2
70345: PUSH
70346: LD_INT 4
70348: PLUS
70349: PUSH
70350: LD_INT 5
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: PUSH
70358: LD_VAR 0 1
70362: PUSH
70363: LD_INT 3
70365: PLUS
70366: PUSH
70367: LD_VAR 0 2
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: LIST
70379: PUSH
70380: LD_VAR 0 1
70384: PUSH
70385: LD_VAR 0 2
70389: PUSH
70390: LD_INT 3
70392: PLUS
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: ST_TO_ADDR
// end ; end ;
70409: GO 70412
70411: POP
// result := list ;
70412: LD_ADDR_VAR 0 4
70416: PUSH
70417: LD_VAR 0 5
70421: ST_TO_ADDR
// end ;
70422: LD_VAR 0 4
70426: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70427: LD_INT 0
70429: PPUSH
70430: PPUSH
70431: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70432: LD_VAR 0 1
70436: NOT
70437: PUSH
70438: LD_VAR 0 2
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: LD_INT 4
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: IN
70461: NOT
70462: OR
70463: IFFALSE 70467
// exit ;
70465: GO 70559
// tmp := [ ] ;
70467: LD_ADDR_VAR 0 5
70471: PUSH
70472: EMPTY
70473: ST_TO_ADDR
// for i in units do
70474: LD_ADDR_VAR 0 4
70478: PUSH
70479: LD_VAR 0 1
70483: PUSH
70484: FOR_IN
70485: IFFALSE 70528
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70487: LD_ADDR_VAR 0 5
70491: PUSH
70492: LD_VAR 0 5
70496: PPUSH
70497: LD_VAR 0 5
70501: PUSH
70502: LD_INT 1
70504: PLUS
70505: PPUSH
70506: LD_VAR 0 4
70510: PPUSH
70511: LD_VAR 0 2
70515: PPUSH
70516: CALL_OW 259
70520: PPUSH
70521: CALL_OW 2
70525: ST_TO_ADDR
70526: GO 70484
70528: POP
70529: POP
// if not tmp then
70530: LD_VAR 0 5
70534: NOT
70535: IFFALSE 70539
// exit ;
70537: GO 70559
// result := SortListByListDesc ( units , tmp ) ;
70539: LD_ADDR_VAR 0 3
70543: PUSH
70544: LD_VAR 0 1
70548: PPUSH
70549: LD_VAR 0 5
70553: PPUSH
70554: CALL_OW 77
70558: ST_TO_ADDR
// end ;
70559: LD_VAR 0 3
70563: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
70568: PPUSH
// result := false ;
70569: LD_ADDR_VAR 0 3
70573: PUSH
70574: LD_INT 0
70576: ST_TO_ADDR
// x := GetX ( building ) ;
70577: LD_ADDR_VAR 0 4
70581: PUSH
70582: LD_VAR 0 2
70586: PPUSH
70587: CALL_OW 250
70591: ST_TO_ADDR
// y := GetY ( building ) ;
70592: LD_ADDR_VAR 0 5
70596: PUSH
70597: LD_VAR 0 2
70601: PPUSH
70602: CALL_OW 251
70606: ST_TO_ADDR
// if not building or not x or not y then
70607: LD_VAR 0 2
70611: NOT
70612: PUSH
70613: LD_VAR 0 4
70617: NOT
70618: OR
70619: PUSH
70620: LD_VAR 0 5
70624: NOT
70625: OR
70626: IFFALSE 70630
// exit ;
70628: GO 70722
// if GetTaskList ( unit ) then
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 437
70639: IFFALSE 70722
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70641: LD_STRING e
70643: PUSH
70644: LD_VAR 0 1
70648: PPUSH
70649: CALL_OW 437
70653: PUSH
70654: LD_INT 1
70656: ARRAY
70657: PUSH
70658: LD_INT 1
70660: ARRAY
70661: EQUAL
70662: PUSH
70663: LD_VAR 0 4
70667: PUSH
70668: LD_VAR 0 1
70672: PPUSH
70673: CALL_OW 437
70677: PUSH
70678: LD_INT 1
70680: ARRAY
70681: PUSH
70682: LD_INT 2
70684: ARRAY
70685: EQUAL
70686: AND
70687: PUSH
70688: LD_VAR 0 5
70692: PUSH
70693: LD_VAR 0 1
70697: PPUSH
70698: CALL_OW 437
70702: PUSH
70703: LD_INT 1
70705: ARRAY
70706: PUSH
70707: LD_INT 3
70709: ARRAY
70710: EQUAL
70711: AND
70712: IFFALSE 70722
// result := true end ;
70714: LD_ADDR_VAR 0 3
70718: PUSH
70719: LD_INT 1
70721: ST_TO_ADDR
// end ;
70722: LD_VAR 0 3
70726: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70727: LD_INT 0
70729: PPUSH
// result := false ;
70730: LD_ADDR_VAR 0 4
70734: PUSH
70735: LD_INT 0
70737: ST_TO_ADDR
// if GetTaskList ( unit ) then
70738: LD_VAR 0 1
70742: PPUSH
70743: CALL_OW 437
70747: IFFALSE 70830
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70749: LD_STRING M
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 437
70761: PUSH
70762: LD_INT 1
70764: ARRAY
70765: PUSH
70766: LD_INT 1
70768: ARRAY
70769: EQUAL
70770: PUSH
70771: LD_VAR 0 2
70775: PUSH
70776: LD_VAR 0 1
70780: PPUSH
70781: CALL_OW 437
70785: PUSH
70786: LD_INT 1
70788: ARRAY
70789: PUSH
70790: LD_INT 2
70792: ARRAY
70793: EQUAL
70794: AND
70795: PUSH
70796: LD_VAR 0 3
70800: PUSH
70801: LD_VAR 0 1
70805: PPUSH
70806: CALL_OW 437
70810: PUSH
70811: LD_INT 1
70813: ARRAY
70814: PUSH
70815: LD_INT 3
70817: ARRAY
70818: EQUAL
70819: AND
70820: IFFALSE 70830
// result := true ;
70822: LD_ADDR_VAR 0 4
70826: PUSH
70827: LD_INT 1
70829: ST_TO_ADDR
// end ; end ;
70830: LD_VAR 0 4
70834: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
70839: PPUSH
70840: PPUSH
// if not unit or not area then
70841: LD_VAR 0 1
70845: NOT
70846: PUSH
70847: LD_VAR 0 2
70851: NOT
70852: OR
70853: IFFALSE 70857
// exit ;
70855: GO 71021
// tmp := AreaToList ( area , i ) ;
70857: LD_ADDR_VAR 0 6
70861: PUSH
70862: LD_VAR 0 2
70866: PPUSH
70867: LD_VAR 0 5
70871: PPUSH
70872: CALL_OW 517
70876: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70877: LD_ADDR_VAR 0 5
70881: PUSH
70882: DOUBLE
70883: LD_INT 1
70885: DEC
70886: ST_TO_ADDR
70887: LD_VAR 0 6
70891: PUSH
70892: LD_INT 1
70894: ARRAY
70895: PUSH
70896: FOR_TO
70897: IFFALSE 71019
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70899: LD_ADDR_VAR 0 7
70903: PUSH
70904: LD_VAR 0 6
70908: PUSH
70909: LD_INT 1
70911: ARRAY
70912: PUSH
70913: LD_VAR 0 5
70917: ARRAY
70918: PUSH
70919: LD_VAR 0 6
70923: PUSH
70924: LD_INT 2
70926: ARRAY
70927: PUSH
70928: LD_VAR 0 5
70932: ARRAY
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70938: LD_VAR 0 7
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PPUSH
70947: LD_VAR 0 7
70951: PUSH
70952: LD_INT 2
70954: ARRAY
70955: PPUSH
70956: CALL_OW 428
70960: PUSH
70961: LD_INT 0
70963: EQUAL
70964: IFFALSE 71017
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70966: LD_VAR 0 1
70970: PPUSH
70971: LD_VAR 0 7
70975: PUSH
70976: LD_INT 1
70978: ARRAY
70979: PPUSH
70980: LD_VAR 0 7
70984: PUSH
70985: LD_INT 2
70987: ARRAY
70988: PPUSH
70989: LD_VAR 0 3
70993: PPUSH
70994: CALL_OW 48
// result := IsPlaced ( unit ) ;
70998: LD_ADDR_VAR 0 4
71002: PUSH
71003: LD_VAR 0 1
71007: PPUSH
71008: CALL_OW 305
71012: ST_TO_ADDR
// exit ;
71013: POP
71014: POP
71015: GO 71021
// end ; end ;
71017: GO 70896
71019: POP
71020: POP
// end ;
71021: LD_VAR 0 4
71025: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71026: LD_INT 0
71028: PPUSH
71029: PPUSH
71030: PPUSH
// if not side or side > 8 then
71031: LD_VAR 0 1
71035: NOT
71036: PUSH
71037: LD_VAR 0 1
71041: PUSH
71042: LD_INT 8
71044: GREATER
71045: OR
71046: IFFALSE 71050
// exit ;
71048: GO 71237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71050: LD_ADDR_VAR 0 4
71054: PUSH
71055: LD_INT 22
71057: PUSH
71058: LD_VAR 0 1
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 21
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PPUSH
71081: CALL_OW 69
71085: ST_TO_ADDR
// if not tmp then
71086: LD_VAR 0 4
71090: NOT
71091: IFFALSE 71095
// exit ;
71093: GO 71237
// enable_addtolog := true ;
71095: LD_ADDR_OWVAR 81
71099: PUSH
71100: LD_INT 1
71102: ST_TO_ADDR
// AddToLog ( [ ) ;
71103: LD_STRING [
71105: PPUSH
71106: CALL_OW 561
// for i in tmp do
71110: LD_ADDR_VAR 0 3
71114: PUSH
71115: LD_VAR 0 4
71119: PUSH
71120: FOR_IN
71121: IFFALSE 71228
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71123: LD_STRING [
71125: PUSH
71126: LD_VAR 0 3
71130: PPUSH
71131: CALL_OW 266
71135: STR
71136: PUSH
71137: LD_STRING , 
71139: STR
71140: PUSH
71141: LD_VAR 0 3
71145: PPUSH
71146: CALL_OW 250
71150: STR
71151: PUSH
71152: LD_STRING , 
71154: STR
71155: PUSH
71156: LD_VAR 0 3
71160: PPUSH
71161: CALL_OW 251
71165: STR
71166: PUSH
71167: LD_STRING , 
71169: STR
71170: PUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: CALL_OW 254
71180: STR
71181: PUSH
71182: LD_STRING , 
71184: STR
71185: PUSH
71186: LD_VAR 0 3
71190: PPUSH
71191: LD_INT 1
71193: PPUSH
71194: CALL_OW 268
71198: STR
71199: PUSH
71200: LD_STRING , 
71202: STR
71203: PUSH
71204: LD_VAR 0 3
71208: PPUSH
71209: LD_INT 2
71211: PPUSH
71212: CALL_OW 268
71216: STR
71217: PUSH
71218: LD_STRING ],
71220: STR
71221: PPUSH
71222: CALL_OW 561
// end ;
71226: GO 71120
71228: POP
71229: POP
// AddToLog ( ]; ) ;
71230: LD_STRING ];
71232: PPUSH
71233: CALL_OW 561
// end ;
71237: LD_VAR 0 2
71241: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71242: LD_INT 0
71244: PPUSH
71245: PPUSH
71246: PPUSH
71247: PPUSH
71248: PPUSH
// if not area or not rate or not max then
71249: LD_VAR 0 1
71253: NOT
71254: PUSH
71255: LD_VAR 0 2
71259: NOT
71260: OR
71261: PUSH
71262: LD_VAR 0 4
71266: NOT
71267: OR
71268: IFFALSE 71272
// exit ;
71270: GO 71464
// while 1 do
71272: LD_INT 1
71274: IFFALSE 71464
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71276: LD_ADDR_VAR 0 9
71280: PUSH
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_INT 1
71288: PPUSH
71289: CALL_OW 287
71293: PUSH
71294: LD_INT 10
71296: MUL
71297: ST_TO_ADDR
// r := rate / 10 ;
71298: LD_ADDR_VAR 0 7
71302: PUSH
71303: LD_VAR 0 2
71307: PUSH
71308: LD_INT 10
71310: DIVREAL
71311: ST_TO_ADDR
// time := 1 1$00 ;
71312: LD_ADDR_VAR 0 8
71316: PUSH
71317: LD_INT 2100
71319: ST_TO_ADDR
// if amount < min then
71320: LD_VAR 0 9
71324: PUSH
71325: LD_VAR 0 3
71329: LESS
71330: IFFALSE 71348
// r := r * 2 else
71332: LD_ADDR_VAR 0 7
71336: PUSH
71337: LD_VAR 0 7
71341: PUSH
71342: LD_INT 2
71344: MUL
71345: ST_TO_ADDR
71346: GO 71374
// if amount > max then
71348: LD_VAR 0 9
71352: PUSH
71353: LD_VAR 0 4
71357: GREATER
71358: IFFALSE 71374
// r := r / 2 ;
71360: LD_ADDR_VAR 0 7
71364: PUSH
71365: LD_VAR 0 7
71369: PUSH
71370: LD_INT 2
71372: DIVREAL
71373: ST_TO_ADDR
// time := time / r ;
71374: LD_ADDR_VAR 0 8
71378: PUSH
71379: LD_VAR 0 8
71383: PUSH
71384: LD_VAR 0 7
71388: DIVREAL
71389: ST_TO_ADDR
// if time < 0 then
71390: LD_VAR 0 8
71394: PUSH
71395: LD_INT 0
71397: LESS
71398: IFFALSE 71415
// time := time * - 1 ;
71400: LD_ADDR_VAR 0 8
71404: PUSH
71405: LD_VAR 0 8
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: MUL
71414: ST_TO_ADDR
// wait ( time ) ;
71415: LD_VAR 0 8
71419: PPUSH
71420: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71424: LD_INT 35
71426: PPUSH
71427: LD_INT 875
71429: PPUSH
71430: CALL_OW 12
71434: PPUSH
71435: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71439: LD_INT 1
71441: PPUSH
71442: LD_INT 5
71444: PPUSH
71445: CALL_OW 12
71449: PPUSH
71450: LD_VAR 0 1
71454: PPUSH
71455: LD_INT 1
71457: PPUSH
71458: CALL_OW 55
// end ;
71462: GO 71272
// end ;
71464: LD_VAR 0 5
71468: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71469: LD_INT 0
71471: PPUSH
71472: PPUSH
71473: PPUSH
71474: PPUSH
71475: PPUSH
71476: PPUSH
71477: PPUSH
71478: PPUSH
// if not turrets or not factories then
71479: LD_VAR 0 1
71483: NOT
71484: PUSH
71485: LD_VAR 0 2
71489: NOT
71490: OR
71491: IFFALSE 71495
// exit ;
71493: GO 71802
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71495: LD_ADDR_VAR 0 10
71499: PUSH
71500: LD_INT 5
71502: PUSH
71503: LD_INT 6
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 2
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 5
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 24
71537: PUSH
71538: LD_INT 25
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 23
71547: PUSH
71548: LD_INT 27
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 42
71561: PUSH
71562: LD_INT 43
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 44
71571: PUSH
71572: LD_INT 46
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 45
71581: PUSH
71582: LD_INT 47
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: LIST
71598: ST_TO_ADDR
// result := [ ] ;
71599: LD_ADDR_VAR 0 3
71603: PUSH
71604: EMPTY
71605: ST_TO_ADDR
// for i in turrets do
71606: LD_ADDR_VAR 0 4
71610: PUSH
71611: LD_VAR 0 1
71615: PUSH
71616: FOR_IN
71617: IFFALSE 71800
// begin nat := GetNation ( i ) ;
71619: LD_ADDR_VAR 0 7
71623: PUSH
71624: LD_VAR 0 4
71628: PPUSH
71629: CALL_OW 248
71633: ST_TO_ADDR
// weapon := 0 ;
71634: LD_ADDR_VAR 0 8
71638: PUSH
71639: LD_INT 0
71641: ST_TO_ADDR
// if not nat then
71642: LD_VAR 0 7
71646: NOT
71647: IFFALSE 71651
// continue ;
71649: GO 71616
// for j in list [ nat ] do
71651: LD_ADDR_VAR 0 5
71655: PUSH
71656: LD_VAR 0 10
71660: PUSH
71661: LD_VAR 0 7
71665: ARRAY
71666: PUSH
71667: FOR_IN
71668: IFFALSE 71709
// if GetBWeapon ( i ) = j [ 1 ] then
71670: LD_VAR 0 4
71674: PPUSH
71675: CALL_OW 269
71679: PUSH
71680: LD_VAR 0 5
71684: PUSH
71685: LD_INT 1
71687: ARRAY
71688: EQUAL
71689: IFFALSE 71707
// begin weapon := j [ 2 ] ;
71691: LD_ADDR_VAR 0 8
71695: PUSH
71696: LD_VAR 0 5
71700: PUSH
71701: LD_INT 2
71703: ARRAY
71704: ST_TO_ADDR
// break ;
71705: GO 71709
// end ;
71707: GO 71667
71709: POP
71710: POP
// if not weapon then
71711: LD_VAR 0 8
71715: NOT
71716: IFFALSE 71720
// continue ;
71718: GO 71616
// for k in factories do
71720: LD_ADDR_VAR 0 6
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: FOR_IN
71731: IFFALSE 71796
// begin weapons := AvailableWeaponList ( k ) ;
71733: LD_ADDR_VAR 0 9
71737: PUSH
71738: LD_VAR 0 6
71742: PPUSH
71743: CALL_OW 478
71747: ST_TO_ADDR
// if not weapons then
71748: LD_VAR 0 9
71752: NOT
71753: IFFALSE 71757
// continue ;
71755: GO 71730
// if weapon in weapons then
71757: LD_VAR 0 8
71761: PUSH
71762: LD_VAR 0 9
71766: IN
71767: IFFALSE 71794
// begin result := [ i , weapon ] ;
71769: LD_ADDR_VAR 0 3
71773: PUSH
71774: LD_VAR 0 4
71778: PUSH
71779: LD_VAR 0 8
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: ST_TO_ADDR
// exit ;
71788: POP
71789: POP
71790: POP
71791: POP
71792: GO 71802
// end ; end ;
71794: GO 71730
71796: POP
71797: POP
// end ;
71798: GO 71616
71800: POP
71801: POP
// end ;
71802: LD_VAR 0 3
71806: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71807: LD_INT 0
71809: PPUSH
// if not side or side > 8 then
71810: LD_VAR 0 3
71814: NOT
71815: PUSH
71816: LD_VAR 0 3
71820: PUSH
71821: LD_INT 8
71823: GREATER
71824: OR
71825: IFFALSE 71829
// exit ;
71827: GO 71888
// if not range then
71829: LD_VAR 0 4
71833: NOT
71834: IFFALSE 71845
// range := - 12 ;
71836: LD_ADDR_VAR 0 4
71840: PUSH
71841: LD_INT 12
71843: NEG
71844: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71845: LD_VAR 0 1
71849: PPUSH
71850: LD_VAR 0 2
71854: PPUSH
71855: LD_VAR 0 3
71859: PPUSH
71860: LD_VAR 0 4
71864: PPUSH
71865: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71869: LD_VAR 0 1
71873: PPUSH
71874: LD_VAR 0 2
71878: PPUSH
71879: LD_VAR 0 3
71883: PPUSH
71884: CALL_OW 331
// end ;
71888: LD_VAR 0 5
71892: RET
// export function Video ( mode ) ; begin
71893: LD_INT 0
71895: PPUSH
// ingame_video = mode ;
71896: LD_ADDR_OWVAR 52
71900: PUSH
71901: LD_VAR 0 1
71905: ST_TO_ADDR
// interface_hidden = mode ;
71906: LD_ADDR_OWVAR 54
71910: PUSH
71911: LD_VAR 0 1
71915: ST_TO_ADDR
// end ;
71916: LD_VAR 0 2
71920: RET
// export function Join ( array , element ) ; begin
71921: LD_INT 0
71923: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71924: LD_ADDR_VAR 0 3
71928: PUSH
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_VAR 0 1
71938: PUSH
71939: LD_INT 1
71941: PLUS
71942: PPUSH
71943: LD_VAR 0 2
71947: PPUSH
71948: CALL_OW 1
71952: ST_TO_ADDR
// end ;
71953: LD_VAR 0 3
71957: RET
// export function JoinUnion ( array , element ) ; begin
71958: LD_INT 0
71960: PPUSH
// result := array union element ;
71961: LD_ADDR_VAR 0 3
71965: PUSH
71966: LD_VAR 0 1
71970: PUSH
71971: LD_VAR 0 2
71975: UNION
71976: ST_TO_ADDR
// end ;
71977: LD_VAR 0 3
71981: RET
// export function GetBehemoths ( side ) ; begin
71982: LD_INT 0
71984: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71985: LD_ADDR_VAR 0 2
71989: PUSH
71990: LD_INT 22
71992: PUSH
71993: LD_VAR 0 1
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 31
72004: PUSH
72005: LD_INT 25
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PPUSH
72016: CALL_OW 69
72020: ST_TO_ADDR
// end ;
72021: LD_VAR 0 2
72025: RET
// export function Shuffle ( array ) ; var i , index ; begin
72026: LD_INT 0
72028: PPUSH
72029: PPUSH
72030: PPUSH
// result := [ ] ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: EMPTY
72037: ST_TO_ADDR
// if not array then
72038: LD_VAR 0 1
72042: NOT
72043: IFFALSE 72047
// exit ;
72045: GO 72146
// Randomize ;
72047: CALL_OW 10
// for i = array downto 1 do
72051: LD_ADDR_VAR 0 3
72055: PUSH
72056: DOUBLE
72057: LD_VAR 0 1
72061: INC
72062: ST_TO_ADDR
72063: LD_INT 1
72065: PUSH
72066: FOR_DOWNTO
72067: IFFALSE 72144
// begin index := rand ( 1 , array ) ;
72069: LD_ADDR_VAR 0 4
72073: PUSH
72074: LD_INT 1
72076: PPUSH
72077: LD_VAR 0 1
72081: PPUSH
72082: CALL_OW 12
72086: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72087: LD_ADDR_VAR 0 2
72091: PUSH
72092: LD_VAR 0 2
72096: PPUSH
72097: LD_VAR 0 2
72101: PUSH
72102: LD_INT 1
72104: PLUS
72105: PPUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_VAR 0 4
72115: ARRAY
72116: PPUSH
72117: CALL_OW 2
72121: ST_TO_ADDR
// array := Delete ( array , index ) ;
72122: LD_ADDR_VAR 0 1
72126: PUSH
72127: LD_VAR 0 1
72131: PPUSH
72132: LD_VAR 0 4
72136: PPUSH
72137: CALL_OW 3
72141: ST_TO_ADDR
// end ;
72142: GO 72066
72144: POP
72145: POP
// end ;
72146: LD_VAR 0 2
72150: RET
// export function GetBaseMaterials ( base ) ; begin
72151: LD_INT 0
72153: PPUSH
// result := [ 0 , 0 , 0 ] ;
72154: LD_ADDR_VAR 0 2
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: LIST
72172: ST_TO_ADDR
// if not base then
72173: LD_VAR 0 1
72177: NOT
72178: IFFALSE 72182
// exit ;
72180: GO 72231
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72182: LD_ADDR_VAR 0 2
72186: PUSH
72187: LD_VAR 0 1
72191: PPUSH
72192: LD_INT 1
72194: PPUSH
72195: CALL_OW 275
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: LD_INT 2
72207: PPUSH
72208: CALL_OW 275
72212: PUSH
72213: LD_VAR 0 1
72217: PPUSH
72218: LD_INT 3
72220: PPUSH
72221: CALL_OW 275
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: ST_TO_ADDR
// end ;
72231: LD_VAR 0 2
72235: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72236: LD_INT 0
72238: PPUSH
72239: PPUSH
// result := array ;
72240: LD_ADDR_VAR 0 3
72244: PUSH
72245: LD_VAR 0 1
72249: ST_TO_ADDR
// if size > 0 then
72250: LD_VAR 0 2
72254: PUSH
72255: LD_INT 0
72257: GREATER
72258: IFFALSE 72304
// for i := array downto size do
72260: LD_ADDR_VAR 0 4
72264: PUSH
72265: DOUBLE
72266: LD_VAR 0 1
72270: INC
72271: ST_TO_ADDR
72272: LD_VAR 0 2
72276: PUSH
72277: FOR_DOWNTO
72278: IFFALSE 72302
// result := Delete ( result , result ) ;
72280: LD_ADDR_VAR 0 3
72284: PUSH
72285: LD_VAR 0 3
72289: PPUSH
72290: LD_VAR 0 3
72294: PPUSH
72295: CALL_OW 3
72299: ST_TO_ADDR
72300: GO 72277
72302: POP
72303: POP
// end ;
72304: LD_VAR 0 3
72308: RET
// export function ComExit ( unit ) ; var tmp ; begin
72309: LD_INT 0
72311: PPUSH
72312: PPUSH
// if not IsInUnit ( unit ) then
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 310
72322: NOT
72323: IFFALSE 72327
// exit ;
72325: GO 72387
// tmp := IsInUnit ( unit ) ;
72327: LD_ADDR_VAR 0 3
72331: PUSH
72332: LD_VAR 0 1
72336: PPUSH
72337: CALL_OW 310
72341: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72342: LD_VAR 0 3
72346: PPUSH
72347: CALL_OW 247
72351: PUSH
72352: LD_INT 2
72354: EQUAL
72355: IFFALSE 72368
// ComExitVehicle ( unit ) else
72357: LD_VAR 0 1
72361: PPUSH
72362: CALL_OW 121
72366: GO 72377
// ComExitBuilding ( unit ) ;
72368: LD_VAR 0 1
72372: PPUSH
72373: CALL_OW 122
// result := tmp ;
72377: LD_ADDR_VAR 0 2
72381: PUSH
72382: LD_VAR 0 3
72386: ST_TO_ADDR
// end ;
72387: LD_VAR 0 2
72391: RET
// export function ResetHc ; begin
72392: LD_INT 0
72394: PPUSH
// InitHc ;
72395: CALL_OW 19
// hc_importance := 0 ;
72399: LD_ADDR_OWVAR 32
72403: PUSH
72404: LD_INT 0
72406: ST_TO_ADDR
// end ;
72407: LD_VAR 0 1
72411: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72412: LD_INT 0
72414: PPUSH
72415: PPUSH
72416: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72417: LD_ADDR_VAR 0 6
72421: PUSH
72422: LD_VAR 0 1
72426: PUSH
72427: LD_VAR 0 3
72431: PLUS
72432: PUSH
72433: LD_INT 2
72435: DIV
72436: ST_TO_ADDR
// if _x < 0 then
72437: LD_VAR 0 6
72441: PUSH
72442: LD_INT 0
72444: LESS
72445: IFFALSE 72462
// _x := _x * - 1 ;
72447: LD_ADDR_VAR 0 6
72451: PUSH
72452: LD_VAR 0 6
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: MUL
72461: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72462: LD_ADDR_VAR 0 7
72466: PUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_VAR 0 4
72476: PLUS
72477: PUSH
72478: LD_INT 2
72480: DIV
72481: ST_TO_ADDR
// if _y < 0 then
72482: LD_VAR 0 7
72486: PUSH
72487: LD_INT 0
72489: LESS
72490: IFFALSE 72507
// _y := _y * - 1 ;
72492: LD_ADDR_VAR 0 7
72496: PUSH
72497: LD_VAR 0 7
72501: PUSH
72502: LD_INT 1
72504: NEG
72505: MUL
72506: ST_TO_ADDR
// result := [ _x , _y ] ;
72507: LD_ADDR_VAR 0 5
72511: PUSH
72512: LD_VAR 0 6
72516: PUSH
72517: LD_VAR 0 7
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: ST_TO_ADDR
// end ;
72526: LD_VAR 0 5
72530: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72531: LD_INT 0
72533: PPUSH
72534: PPUSH
72535: PPUSH
72536: PPUSH
// task := GetTaskList ( unit ) ;
72537: LD_ADDR_VAR 0 7
72541: PUSH
72542: LD_VAR 0 1
72546: PPUSH
72547: CALL_OW 437
72551: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72552: LD_VAR 0 7
72556: NOT
72557: PUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: LD_VAR 0 2
72567: PPUSH
72568: CALL_OW 308
72572: NOT
72573: AND
72574: IFFALSE 72578
// exit ;
72576: GO 72696
// if IsInArea ( unit , area ) then
72578: LD_VAR 0 1
72582: PPUSH
72583: LD_VAR 0 2
72587: PPUSH
72588: CALL_OW 308
72592: IFFALSE 72610
// begin ComMoveToArea ( unit , goAway ) ;
72594: LD_VAR 0 1
72598: PPUSH
72599: LD_VAR 0 3
72603: PPUSH
72604: CALL_OW 113
// exit ;
72608: GO 72696
// end ; if task [ 1 ] [ 1 ] <> M then
72610: LD_VAR 0 7
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PUSH
72619: LD_INT 1
72621: ARRAY
72622: PUSH
72623: LD_STRING M
72625: NONEQUAL
72626: IFFALSE 72630
// exit ;
72628: GO 72696
// x := task [ 1 ] [ 2 ] ;
72630: LD_ADDR_VAR 0 5
72634: PUSH
72635: LD_VAR 0 7
72639: PUSH
72640: LD_INT 1
72642: ARRAY
72643: PUSH
72644: LD_INT 2
72646: ARRAY
72647: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72648: LD_ADDR_VAR 0 6
72652: PUSH
72653: LD_VAR 0 7
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: PUSH
72662: LD_INT 3
72664: ARRAY
72665: ST_TO_ADDR
// if InArea ( x , y , area ) then
72666: LD_VAR 0 5
72670: PPUSH
72671: LD_VAR 0 6
72675: PPUSH
72676: LD_VAR 0 2
72680: PPUSH
72681: CALL_OW 309
72685: IFFALSE 72696
// ComStop ( unit ) ;
72687: LD_VAR 0 1
72691: PPUSH
72692: CALL_OW 141
// end ;
72696: LD_VAR 0 4
72700: RET
// export function Abs ( value ) ; begin
72701: LD_INT 0
72703: PPUSH
// result := value ;
72704: LD_ADDR_VAR 0 2
72708: PUSH
72709: LD_VAR 0 1
72713: ST_TO_ADDR
// if value < 0 then
72714: LD_VAR 0 1
72718: PUSH
72719: LD_INT 0
72721: LESS
72722: IFFALSE 72739
// result := value * - 1 ;
72724: LD_ADDR_VAR 0 2
72728: PUSH
72729: LD_VAR 0 1
72733: PUSH
72734: LD_INT 1
72736: NEG
72737: MUL
72738: ST_TO_ADDR
// end ;
72739: LD_VAR 0 2
72743: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72744: LD_INT 0
72746: PPUSH
72747: PPUSH
72748: PPUSH
72749: PPUSH
72750: PPUSH
72751: PPUSH
72752: PPUSH
72753: PPUSH
// if not unit or not building then
72754: LD_VAR 0 1
72758: NOT
72759: PUSH
72760: LD_VAR 0 2
72764: NOT
72765: OR
72766: IFFALSE 72770
// exit ;
72768: GO 72996
// x := GetX ( building ) ;
72770: LD_ADDR_VAR 0 4
72774: PUSH
72775: LD_VAR 0 2
72779: PPUSH
72780: CALL_OW 250
72784: ST_TO_ADDR
// y := GetY ( building ) ;
72785: LD_ADDR_VAR 0 6
72789: PUSH
72790: LD_VAR 0 2
72794: PPUSH
72795: CALL_OW 251
72799: ST_TO_ADDR
// d := GetDir ( building ) ;
72800: LD_ADDR_VAR 0 8
72804: PUSH
72805: LD_VAR 0 2
72809: PPUSH
72810: CALL_OW 254
72814: ST_TO_ADDR
// r := 4 ;
72815: LD_ADDR_VAR 0 9
72819: PUSH
72820: LD_INT 4
72822: ST_TO_ADDR
// for i := 1 to 5 do
72823: LD_ADDR_VAR 0 10
72827: PUSH
72828: DOUBLE
72829: LD_INT 1
72831: DEC
72832: ST_TO_ADDR
72833: LD_INT 5
72835: PUSH
72836: FOR_TO
72837: IFFALSE 72994
// begin _x := ShiftX ( x , d , r + i ) ;
72839: LD_ADDR_VAR 0 5
72843: PUSH
72844: LD_VAR 0 4
72848: PPUSH
72849: LD_VAR 0 8
72853: PPUSH
72854: LD_VAR 0 9
72858: PUSH
72859: LD_VAR 0 10
72863: PLUS
72864: PPUSH
72865: CALL_OW 272
72869: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72870: LD_ADDR_VAR 0 7
72874: PUSH
72875: LD_VAR 0 6
72879: PPUSH
72880: LD_VAR 0 8
72884: PPUSH
72885: LD_VAR 0 9
72889: PUSH
72890: LD_VAR 0 10
72894: PLUS
72895: PPUSH
72896: CALL_OW 273
72900: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72901: LD_VAR 0 5
72905: PPUSH
72906: LD_VAR 0 7
72910: PPUSH
72911: CALL_OW 488
72915: PUSH
72916: LD_VAR 0 5
72920: PPUSH
72921: LD_VAR 0 7
72925: PPUSH
72926: CALL_OW 428
72930: PPUSH
72931: CALL_OW 247
72935: PUSH
72936: LD_INT 3
72938: PUSH
72939: LD_INT 2
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: IN
72946: NOT
72947: AND
72948: IFFALSE 72992
// begin ComMoveXY ( unit , _x , _y ) ;
72950: LD_VAR 0 1
72954: PPUSH
72955: LD_VAR 0 5
72959: PPUSH
72960: LD_VAR 0 7
72964: PPUSH
72965: CALL_OW 111
// result := [ _x , _y ] ;
72969: LD_ADDR_VAR 0 3
72973: PUSH
72974: LD_VAR 0 5
72978: PUSH
72979: LD_VAR 0 7
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: ST_TO_ADDR
// exit ;
72988: POP
72989: POP
72990: GO 72996
// end ; end ;
72992: GO 72836
72994: POP
72995: POP
// end ;
72996: LD_VAR 0 3
73000: RET
