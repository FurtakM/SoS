// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 19641 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 1106 0 0
// PrepareRussian ;
  27: CALL 3778 0 0
// PrepareLegion ;
  31: CALL 8061 0 0
// Action ;
  35: CALL 11571 0 0
// InitArt ;
  39: CALL 245 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 15
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// base_captured := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// russian_prepared := false ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_can_attack := false ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// ru_sib_bomb := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 10
  97: PUSH
  98: LD_INT 25
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: PUSH
 106: LD_OWVAR 67
 110: ARRAY
 111: ST_TO_ADDR
// player_res_art := false ;
 112: LD_ADDR_EXP 6
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_artifact_ready := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// art_icon := art_use_atom ;
 128: LD_ADDR_EXP 9
 132: PUSH
 133: LD_INT 7
 135: ST_TO_ADDR
// time_res_art := 600 ;
 136: LD_ADDR_EXP 10
 140: PUSH
 141: LD_INT 600
 143: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 144: LD_ADDR_EXP 12
 148: PUSH
 149: LD_INT 21000
 151: ST_TO_ADDR
// mine_vulc := false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// medal_enabled := false ;
 160: LD_ADDR_EXP 14
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dead_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// kill_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// veh_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// tech_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 200: LD_ADDR_EXP 20
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_progress := 0 ;
 208: LD_ADDR_EXP 7
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// event_legion_attack := 1 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// event_russian_attack := 2 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// event_alliance_attack := 3 ;
 232: LD_ADDR_EXP 23
 236: PUSH
 237: LD_INT 3
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// function InitArt ; begin
 245: LD_INT 0
 247: PPUSH
// SetArtifactRes ( your_side , true ) ;
 248: LD_OWVAR 2
 252: PPUSH
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 467
// end ; end_of_file
 260: LD_VAR 0 1
 264: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
 271: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 6
 282: PUSH
 283: LD_INT 5
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_OWVAR 67
 295: ARRAY
 296: ST_TO_ADDR
// us_force := [ ] ;
 297: LD_ADDR_EXP 25
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 304: LD_INT 17
 306: PPUSH
 307: CALL_OW 355
// PrepareAllianceAI ( ) ;
 311: CALL 16942 0 0
// uc_side := 1 ;
 315: LD_ADDR_OWVAR 20
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// uc_nation := nation_american ;
 323: LD_ADDR_OWVAR 21
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// hc_gallery :=  ;
 331: LD_ADDR_OWVAR 33
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_name :=  ;
 339: LD_ADDR_OWVAR 26
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// hc_importance := 0 ;
 347: LD_ADDR_OWVAR 32
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// for i = 1 to 11 do
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: DOUBLE
 361: LD_INT 1
 363: DEC
 364: ST_TO_ADDR
 365: LD_INT 11
 367: PUSH
 368: FOR_TO
 369: IFFALSE 422
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 371: LD_INT 0
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 12
 384: PPUSH
 385: LD_EXP 26
 389: PPUSH
 390: CALL_OW 380
// un := CreateHuman ;
 394: LD_ADDR_VAR 0 4
 398: PUSH
 399: CALL_OW 44
 403: ST_TO_ADDR
// us_force := us_force ^ un ;
 404: LD_ADDR_EXP 25
 408: PUSH
 409: LD_EXP 25
 413: PUSH
 414: LD_VAR 0 4
 418: ADD
 419: ST_TO_ADDR
// end ;
 420: GO 368
 422: POP
 423: POP
// hc_importance := 100 ;
 424: LD_ADDR_OWVAR 32
 428: PUSH
 429: LD_INT 100
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_EXP 26
 442: PPUSH
 443: CALL_OW 380
// us_commander := CreateHuman ;
 447: LD_ADDR_EXP 24
 451: PUSH
 452: CALL_OW 44
 456: ST_TO_ADDR
// player_commander := us_commander ;
 457: LD_ADDR_EXP 11
 461: PUSH
 462: LD_EXP 24
 466: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 467: LD_ADDR_VAR 0 5
 471: PUSH
 472: LD_STRING text
 474: PPUSH
 475: LD_INT 7
 477: PUSH
 478: LD_INT 6
 480: PUSH
 481: LD_INT 5
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: LD_INT 7
 497: PUSH
 498: LD_INT 6
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: PPUSH
 515: LD_INT -5
 517: PUSH
 518: LD_EXP 24
 522: PUSH
 523: LD_INT -3
 525: PUSH
 526: LD_INT -2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_EXP 25
 539: ADD
 540: PPUSH
 541: LD_INT 1
 543: PUSH
 544: LD_INT 3
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 2
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 4
 566: PUSH
 567: LD_INT 1
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: LD_INT 5
 579: PUSH
 580: LD_INT 1
 582: NEG
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_OWVAR 67
 593: ARRAY
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: PPUSH
 602: CALL_OW 42
 606: ST_TO_ADDR
// team := team ^ us_commander ;
 607: LD_ADDR_VAR 0 5
 611: PUSH
 612: LD_VAR 0 5
 616: PUSH
 617: LD_EXP 24
 621: ADD
 622: ST_TO_ADDR
// for i = 1 to team do
 623: LD_ADDR_VAR 0 2
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 5
 637: PUSH
 638: FOR_TO
 639: IFFALSE 839
// begin if GetClass ( team [ i ] ) = class_mechanic then
 641: LD_VAR 0 5
 645: PUSH
 646: LD_VAR 0 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 257
 656: PUSH
 657: LD_INT 3
 659: EQUAL
 660: IFFALSE 801
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 662: LD_ADDR_OWVAR 37
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: PUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 3
 688: MOD
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// vc_engine := engine_siberite ;
 695: LD_ADDR_OWVAR 39
 699: PUSH
 700: LD_INT 3
 702: ST_TO_ADDR
// vc_control := control_manual ;
 703: LD_ADDR_OWVAR 38
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 711: LD_ADDR_OWVAR 40
 715: PUSH
 716: LD_INT 4
 718: PUSH
 719: LD_INT 5
 721: PUSH
 722: LD_INT 9
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 3
 735: PPUSH
 736: CALL_OW 12
 740: ARRAY
 741: ST_TO_ADDR
// un := CreateVehicle ;
 742: LD_ADDR_VAR 0 4
 746: PUSH
 747: CALL_OW 45
 751: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 752: LD_VAR 0 4
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 764: LD_VAR 0 4
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 779: LD_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: ARRAY
 789: PPUSH
 790: LD_VAR 0 4
 794: PPUSH
 795: CALL_OW 52
// end else
 799: GO 837
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 801: LD_VAR 0 5
 805: PUSH
 806: LD_VAR 0 2
 810: ARRAY
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// ComHold ( team [ i ] ) ;
 822: LD_VAR 0 5
 826: PUSH
 827: LD_VAR 0 2
 831: ARRAY
 832: PPUSH
 833: CALL_OW 140
// end ; end ;
 837: GO 638
 839: POP
 840: POP
// end ;
 841: LD_VAR 0 1
 845: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 846: LD_OWVAR 1
 850: PUSH
 851: LD_INT 73500
 853: LESS
 854: IFFALSE 881
 856: GO 858
 858: DISABLE
// begin enable ;
 859: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 5
 865: PPUSH
 866: CALL_OW 12
 870: PPUSH
 871: LD_INT 23
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL_OW 55
// end ;
 881: END
// every 1 1$10 do var time , p , l ;
 882: GO 884
 884: DISABLE
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// begin time := 0 0$44 ;
 890: LD_ADDR_VAR 0 1
 894: PUSH
 895: LD_INT 1540
 897: ST_TO_ADDR
// l := 0 ;
 898: LD_ADDR_VAR 0 3
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 906: LD_VAR 0 1
 910: PPUSH
 911: CALL_OW 67
// l := l + 1 ;
 915: LD_ADDR_VAR 0 3
 919: PUSH
 920: LD_VAR 0 3
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 929: LD_INT 12
 931: PPUSH
 932: CALL_OW 435
 936: PUSH
 937: LD_INT 20
 939: LESS
 940: IFFALSE 999
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 942: LD_INT 1
 944: PPUSH
 945: LD_INT 5
 947: PPUSH
 948: CALL_OW 12
 952: PPUSH
 953: LD_INT 12
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 963: LD_INT 1365
 965: PPUSH
 966: LD_INT 1680
 968: PPUSH
 969: CALL_OW 12
 973: PPUSH
 974: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 12
1014: ST_TO_ADDR
// if p then
1015: LD_VAR 0 2
1019: IFFALSE 1054
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1021: LD_INT 315
1023: PPUSH
1024: LD_INT 700
1026: PPUSH
1027: CALL_OW 12
1031: PPUSH
1032: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1036: LD_INT 1
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: CALL_OW 12
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 15
1061: PUSH
1062: LD_INT 13
1064: PUSH
1065: LD_INT 11
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_OWVAR 67
1077: ARRAY
1078: MOD
1079: PUSH
1080: LD_INT 0
1082: EQUAL
1083: IFFALSE 1099
// time := time + 2 2$00 ;
1085: LD_ADDR_VAR 0 1
1089: PUSH
1090: LD_VAR 0 1
1094: PUSH
1095: LD_INT 4200
1097: PLUS
1098: ST_TO_ADDR
// end until false ;
1099: LD_INT 0
1101: IFFALSE 906
// end ; end_of_file
1103: PPOPN 3
1105: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1106: LD_INT 0
1108: PPUSH
1109: PPUSH
1110: PPUSH
1111: PPUSH
1112: PPUSH
1113: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1114: LD_ADDR_VAR 0 3
1118: PUSH
1119: LD_INT 22
1121: PUSH
1122: LD_INT 4
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 21
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 69
1147: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1148: LD_ADDR_VAR 0 4
1152: PUSH
1153: LD_INT 470
1155: PUSH
1156: LD_INT 370
1158: PUSH
1159: LD_INT 290
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: PUSH
1167: LD_OWVAR 67
1171: ARRAY
1172: ST_TO_ADDR
// case Difficulty of 2 :
1173: LD_OWVAR 67
1177: PUSH
1178: LD_INT 2
1180: DOUBLE
1181: EQUAL
1182: IFTRUE 1186
1184: GO 1217
1186: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1187: LD_VAR 0 3
1191: PPUSH
1192: LD_INT 30
1194: PUSH
1195: LD_INT 32
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 72
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 65
// end ; 3 :
1215: GO 1293
1217: LD_INT 3
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1292
1225: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1226: LD_VAR 0 3
1230: PPUSH
1231: LD_INT 30
1233: PUSH
1234: LD_INT 32
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1254: LD_VAR 0 3
1258: PPUSH
1259: LD_INT 30
1261: PUSH
1262: LD_INT 27
1264: PUSH
1265: EMPTY
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 72
1273: PUSH
1274: LD_INT 1
1276: PPUSH
1277: LD_INT 3
1279: PPUSH
1280: CALL_OW 12
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// end ; end ;
1290: GO 1293
1292: POP
// for i = 1 to filter do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: DOUBLE
1299: LD_INT 1
1301: DEC
1302: ST_TO_ADDR
1303: LD_VAR 0 3
1307: PUSH
1308: FOR_TO
1309: IFFALSE 1346
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1311: LD_VAR 0 3
1315: PUSH
1316: LD_VAR 0 2
1320: ARRAY
1321: PPUSH
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 29
1329: NEG
1330: PPUSH
1331: LD_INT 29
1333: PPUSH
1334: CALL_OW 12
1338: PLUS
1339: PPUSH
1340: CALL_OW 234
1344: GO 1308
1346: POP
1347: POP
// SetBName ( us_depot , Vulcano1 ) ;
1348: LD_INT 50
1350: PPUSH
1351: LD_STRING Vulcano1
1353: PPUSH
1354: CALL_OW 500
// hc_importance := 0 ;
1358: LD_ADDR_OWVAR 32
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// uc_side := 3 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 3
1373: ST_TO_ADDR
// uc_nation := nation_russian ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 3
1381: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1382: LD_ADDR_OWVAR 37
1386: PUSH
1387: LD_INT 22
1389: ST_TO_ADDR
// vc_engine := engine_combustion ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_INT 1
1397: ST_TO_ADDR
// vc_control := control_manual ;
1398: LD_ADDR_OWVAR 38
1402: PUSH
1403: LD_INT 1
1405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_INT 51
1413: ST_TO_ADDR
// un := CreateVehicle ;
1414: LD_ADDR_VAR 0 5
1418: PUSH
1419: CALL_OW 45
1423: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1424: LD_VAR 0 5
1428: PPUSH
1429: LD_INT 97
1431: PPUSH
1432: LD_INT 138
1434: PPUSH
1435: LD_INT 0
1437: PPUSH
1438: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1442: LD_VAR 0 5
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: LD_INT 100
1452: PPUSH
1453: CALL_OW 290
// SetFuel ( un , 45 ) ;
1457: LD_VAR 0 5
1461: PPUSH
1462: LD_INT 45
1464: PPUSH
1465: CALL_OW 240
// un := CreateVehicle ;
1469: LD_ADDR_VAR 0 5
1473: PUSH
1474: CALL_OW 45
1478: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1479: LD_VAR 0 5
1483: PPUSH
1484: LD_INT 109
1486: PPUSH
1487: LD_INT 154
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1497: LD_VAR 0 5
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 100
1507: PPUSH
1508: CALL_OW 290
// SetDir ( un , 1 ) ;
1512: LD_VAR 0 5
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 233
// SetFuel ( un , 50 ) ;
1524: LD_VAR 0 5
1528: PPUSH
1529: LD_INT 50
1531: PPUSH
1532: CALL_OW 240
// russians_in_base := [ ] ;
1536: LD_ADDR_EXP 28
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1543: LD_ADDR_VAR 0 2
1547: PUSH
1548: DOUBLE
1549: LD_INT 1
1551: DEC
1552: ST_TO_ADDR
1553: LD_INT 6
1555: PUSH
1556: LD_INT 6
1558: PUSH
1559: LD_INT 7
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_OWVAR 67
1571: ARRAY
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1576: LD_INT 0
1578: PPUSH
1579: LD_INT 1
1581: PPUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 6
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_OWVAR 67
1600: ARRAY
1601: PPUSH
1602: CALL_OW 380
// un := CreateHuman ;
1606: LD_ADDR_VAR 0 5
1610: PUSH
1611: CALL_OW 44
1615: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1616: LD_ADDR_EXP 28
1620: PUSH
1621: LD_EXP 28
1625: PUSH
1626: LD_VAR 0 5
1630: ADD
1631: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 94
1639: PPUSH
1640: LD_INT 145
1642: PPUSH
1643: LD_INT 10
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 50
// end ;
1653: GO 1573
1655: POP
1656: POP
// end ;
1657: LD_VAR 0 1
1661: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1662: LD_EXP 28
1666: PPUSH
1667: LD_INT 101
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: IFFALSE 1747
1683: GO 1685
1685: DISABLE
1686: LD_INT 0
1688: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1689: LD_ADDR_VAR 0 1
1693: PUSH
1694: LD_EXP 28
1698: PPUSH
1699: LD_INT 101
1701: PUSH
1702: LD_INT 1
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PPUSH
1709: CALL_OW 72
1713: PUSH
1714: LD_INT 1
1716: ARRAY
1717: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1718: LD_EXP 28
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 250
1732: PPUSH
1733: LD_VAR 0 1
1737: PPUSH
1738: CALL_OW 251
1742: PPUSH
1743: CALL_OW 114
// end ;
1747: PPOPN 1
1749: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1750: LD_INT 50
1752: PPUSH
1753: LD_INT 1
1755: PPUSH
1756: CALL 2126 0 2
1760: PUSH
1761: LD_INT 40
1763: LESS
1764: IFFALSE 1961
1766: GO 1768
1768: DISABLE
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
// begin uc_side := 4 ;
1773: LD_ADDR_OWVAR 20
1777: PUSH
1778: LD_INT 4
1780: ST_TO_ADDR
// uc_nation := nation_american ;
1781: LD_ADDR_OWVAR 21
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// hc_importance := 0 ;
1789: LD_ADDR_OWVAR 32
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// for i = 1 to 7 do
1797: LD_ADDR_VAR 0 1
1801: PUSH
1802: DOUBLE
1803: LD_INT 1
1805: DEC
1806: ST_TO_ADDR
1807: LD_INT 7
1809: PUSH
1810: FOR_TO
1811: IFFALSE 1875
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1813: LD_INT 0
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 3
1821: PPUSH
1822: CALL_OW 12
1826: PPUSH
1827: LD_EXP 26
1831: PPUSH
1832: CALL_OW 380
// un := CreateHuman ;
1836: LD_ADDR_VAR 0 2
1840: PUSH
1841: CALL_OW 44
1845: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 7
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 49
// SetLives ( un , 10 ) ;
1861: LD_VAR 0 2
1865: PPUSH
1866: LD_INT 10
1868: PPUSH
1869: CALL_OW 234
// end ;
1873: GO 1810
1875: POP
1876: POP
// for i = 1 to 5 do
1877: LD_ADDR_VAR 0 1
1881: PUSH
1882: DOUBLE
1883: LD_INT 1
1885: DEC
1886: ST_TO_ADDR
1887: LD_INT 5
1889: PUSH
1890: FOR_TO
1891: IFFALSE 1959
// begin PrepareHuman ( false , 4 , us_skill ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 4
1898: PPUSH
1899: LD_EXP 26
1903: PPUSH
1904: CALL_OW 380
// SetDir ( un , 1 ) ;
1908: LD_VAR 0 2
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: CALL_OW 233
// un := CreateHuman ;
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: CALL_OW 44
1929: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1930: LD_VAR 0 2
1934: PPUSH
1935: LD_INT 22
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 49
// SetLives ( un , 10 ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_INT 10
1952: PPUSH
1953: CALL_OW 234
// end ;
1957: GO 1890
1959: POP
1960: POP
// end ; end_of_file
1961: PPOPN 2
1963: END
// export function PrepareApeman ( n ) ; var un , i ; begin
1964: LD_INT 0
1966: PPUSH
1967: PPUSH
1968: PPUSH
// for i = 1 to n do
1969: LD_ADDR_VAR 0 4
1973: PUSH
1974: DOUBLE
1975: LD_INT 1
1977: DEC
1978: ST_TO_ADDR
1979: LD_VAR 0 1
1983: PUSH
1984: FOR_TO
1985: IFFALSE 2119
// begin uc_side := 0 ;
1987: LD_ADDR_OWVAR 20
1991: PUSH
1992: LD_INT 0
1994: ST_TO_ADDR
// uc_nation := 0 ;
1995: LD_ADDR_OWVAR 21
1999: PUSH
2000: LD_INT 0
2002: ST_TO_ADDR
// hc_class := class_apeman ;
2003: LD_ADDR_OWVAR 28
2007: PUSH
2008: LD_INT 12
2010: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2011: LD_ADDR_OWVAR 31
2015: PUSH
2016: LD_INT 0
2018: PUSH
2019: LD_INT 0
2021: PUSH
2022: LD_INT 0
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: ST_TO_ADDR
// hc_name :=  ;
2034: LD_ADDR_OWVAR 26
2038: PUSH
2039: LD_STRING 
2041: ST_TO_ADDR
// hc_gallery :=  ;
2042: LD_ADDR_OWVAR 33
2046: PUSH
2047: LD_STRING 
2049: ST_TO_ADDR
// hc_importance := 0 ;
2050: LD_ADDR_OWVAR 32
2054: PUSH
2055: LD_INT 0
2057: ST_TO_ADDR
// un := CreateHuman ;
2058: LD_ADDR_VAR 0 3
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2068: LD_VAR 0 3
2072: PPUSH
2073: LD_INT 19
2075: PUSH
2076: LD_INT 20
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: CALL_OW 12
2093: ARRAY
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2102: LD_INT 1155
2104: PPUSH
2105: LD_INT 5355
2107: PPUSH
2108: CALL_OW 12
2112: PPUSH
2113: CALL_OW 67
// end ;
2117: GO 1984
2119: POP
2120: POP
// end ;
2121: LD_VAR 0 2
2125: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2126: LD_INT 0
2128: PPUSH
2129: PPUSH
2130: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_INT 22
2138: PUSH
2139: LD_VAR 0 2
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 69
2152: PPUSH
2153: LD_VAR 0 1
2157: PPUSH
2158: CALL_OW 74
2162: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2163: LD_ADDR_VAR 0 5
2167: PUSH
2168: LD_VAR 0 1
2172: PPUSH
2173: LD_VAR 0 4
2177: PPUSH
2178: CALL_OW 296
2182: ST_TO_ADDR
// if dist >= 9999 then
2183: LD_VAR 0 5
2187: PUSH
2188: LD_INT 9999
2190: GREATEREQUAL
2191: IFFALSE 2204
// result := - 1 else
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: LD_INT 1
2200: NEG
2201: ST_TO_ADDR
2202: GO 2214
// result := dist ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_VAR 0 5
2213: ST_TO_ADDR
// end ;
2214: LD_VAR 0 3
2218: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
// tmp := 9999 ;
2225: LD_ADDR_VAR 0 5
2229: PUSH
2230: LD_INT 9999
2232: ST_TO_ADDR
// for i = 1 to plist do
2233: LD_ADDR_VAR 0 4
2237: PUSH
2238: DOUBLE
2239: LD_INT 1
2241: DEC
2242: ST_TO_ADDR
2243: LD_VAR 0 1
2247: PUSH
2248: FOR_TO
2249: IFFALSE 2323
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2251: LD_VAR 0 1
2255: PUSH
2256: LD_VAR 0 4
2260: ARRAY
2261: PPUSH
2262: LD_VAR 0 2
2266: PPUSH
2267: CALL 2126 0 2
2271: PUSH
2272: LD_VAR 0 5
2276: LESS
2277: IFFALSE 2321
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2279: LD_ADDR_VAR 0 5
2283: PUSH
2284: LD_VAR 0 1
2288: PUSH
2289: LD_VAR 0 4
2293: ARRAY
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL 2126 0 2
2304: ST_TO_ADDR
// unit := plist [ i ] ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 1
2314: PUSH
2315: LD_VAR 0 4
2319: ARRAY
2320: ST_TO_ADDR
// end ;
2321: GO 2248
2323: POP
2324: POP
// result := unit ;
2325: LD_ADDR_VAR 0 3
2329: PUSH
2330: LD_VAR 0 6
2334: ST_TO_ADDR
// end ;
2335: LD_VAR 0 3
2339: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2340: LD_INT 0
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 1000
2354: PUSH
2355: LD_INT 2500
2357: PUSH
2358: LD_INT 5000
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: LD_OWVAR 67
2370: ARRAY
2371: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: LD_VAR 0 2
2381: PUSH
2382: LD_INT 1
2384: NEG
2385: PUSH
2386: LD_INT 22
2388: PUSH
2389: LD_OWVAR 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PPUSH
2412: CALL_OW 69
2416: MUL
2417: PUSH
2418: LD_INT 30
2420: MUL
2421: PLUS
2422: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_EXP 17
2437: PUSH
2438: LD_INT 10
2440: MUL
2441: PLUS
2442: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_VAR 0 2
2452: PUSH
2453: LD_INT 1
2455: NEG
2456: PUSH
2457: LD_EXP 17
2461: MUL
2462: PUSH
2463: LD_INT 20
2465: MUL
2466: PLUS
2467: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2468: LD_ADDR_VAR 0 2
2472: PUSH
2473: LD_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: NEG
2481: PUSH
2482: LD_OWVAR 1
2486: PUSH
2487: LD_INT 35
2489: DIVREAL
2490: PUSH
2491: LD_INT 60
2493: DIVREAL
2494: MUL
2495: PUSH
2496: LD_INT 25
2498: MUL
2499: PLUS
2500: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2501: LD_ADDR_VAR 0 2
2505: PUSH
2506: LD_VAR 0 2
2510: PUSH
2511: LD_EXP 19
2515: PUSH
2516: LD_INT 15
2518: MUL
2519: PLUS
2520: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: LD_VAR 0 2
2530: PUSH
2531: LD_INT 1
2533: NEG
2534: PUSH
2535: LD_EXP 20
2539: MUL
2540: PUSH
2541: LD_INT 1000
2543: MUL
2544: PLUS
2545: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_VAR 0 2
2555: PUSH
2556: LD_EXP 18
2560: PUSH
2561: LD_INT 5
2563: MUL
2564: PLUS
2565: ST_TO_ADDR
// result := points ;
2566: LD_ADDR_VAR 0 1
2570: PUSH
2571: LD_VAR 0 2
2575: ST_TO_ADDR
// end ; end_of_file
2576: LD_VAR 0 1
2580: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2581: LD_VAR 0 1
2585: PPUSH
2586: CALL 34151 0 1
// if un = ru_cargo then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 31
2599: EQUAL
2600: IFFALSE 2610
// ru_cargo := 0 ;
2602: LD_ADDR_EXP 31
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 255
2619: PUSH
2620: LD_OWVAR 2
2624: EQUAL
2625: IFFALSE 2641
// dead_counter := dead_counter + 1 ;
2627: LD_ADDR_EXP 16
2631: PUSH
2632: LD_EXP 16
2636: PUSH
2637: LD_INT 1
2639: PLUS
2640: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 81
2653: PUSH
2654: LD_OWVAR 2
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PPUSH
2663: CALL_OW 69
2667: IN
2668: IFFALSE 2684
// kill_counter := kill_counter + 1 ;
2670: LD_ADDR_EXP 17
2674: PUSH
2675: LD_EXP 17
2679: PUSH
2680: LD_INT 1
2682: PLUS
2683: ST_TO_ADDR
// if un = player_commander then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 11
2693: EQUAL
2694: IFFALSE 2703
// YouLost ( vulcano-lost ) ;
2696: LD_STRING vulcano-lost
2698: PPUSH
2699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2703: LD_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 3
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 21
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: IN
2737: IFFALSE 2853
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2739: LD_VAR 0 1
2743: PPUSH
2744: CALL_OW 266
2748: PUSH
2749: LD_INT 33
2751: EQUAL
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 266
2762: PUSH
2763: LD_INT 28
2765: EQUAL
2766: OR
2767: IFFALSE 2853
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2769: LD_ADDR_EXP 32
2773: PUSH
2774: LD_EXP 32
2778: PUSH
2779: LD_VAR 0 1
2783: PPUSH
2784: CALL_OW 266
2788: ADD
2789: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2790: LD_ADDR_EXP 32
2794: PUSH
2795: LD_EXP 32
2799: PUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: CALL_OW 250
2809: ADD
2810: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2811: LD_ADDR_EXP 32
2815: PUSH
2816: LD_EXP 32
2820: PUSH
2821: LD_VAR 0 1
2825: PPUSH
2826: CALL_OW 251
2830: ADD
2831: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2832: LD_ADDR_EXP 32
2836: PUSH
2837: LD_EXP 32
2841: PUSH
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL_OW 254
2851: ADD
2852: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2853: LD_VAR 0 1
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 8
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 21
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: IN
2887: IFFALSE 3031
// begin if GetBType ( un ) = b_barracks then
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 266
2898: PUSH
2899: LD_INT 5
2901: EQUAL
2902: IFFALSE 2920
// legion_blist := legion_blist ^ b_armoury else
2904: LD_ADDR_EXP 40
2908: PUSH
2909: LD_EXP 40
2913: PUSH
2914: LD_INT 4
2916: ADD
2917: ST_TO_ADDR
2918: GO 2968
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL_OW 266
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 6
2935: PUSH
2936: LD_INT 8
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: IN
2944: NOT
2945: IFFALSE 2968
// legion_blist := legion_blist ^ GetBType ( un ) ;
2947: LD_ADDR_EXP 40
2951: PUSH
2952: LD_EXP 40
2956: PUSH
2957: LD_VAR 0 1
2961: PPUSH
2962: CALL_OW 266
2966: ADD
2967: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_EXP 40
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 250
2987: ADD
2988: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2989: LD_ADDR_EXP 40
2993: PUSH
2994: LD_EXP 40
2998: PUSH
2999: LD_VAR 0 1
3003: PPUSH
3004: CALL_OW 251
3008: ADD
3009: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3010: LD_ADDR_EXP 40
3014: PUSH
3015: LD_EXP 40
3019: PUSH
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 254
3029: ADD
3030: ST_TO_ADDR
// end ; if un in legion_force then
3031: LD_VAR 0 1
3035: PUSH
3036: LD_EXP 37
3040: IN
3041: IFFALSE 3059
// legion_force := legion_force diff un ;
3043: LD_ADDR_EXP 37
3047: PUSH
3048: LD_EXP 37
3052: PUSH
3053: LD_VAR 0 1
3057: DIFF
3058: ST_TO_ADDR
// if un in ru_force then
3059: LD_VAR 0 1
3063: PUSH
3064: LD_EXP 29
3068: IN
3069: IFFALSE 3087
// ru_force := ru_force diff un ;
3071: LD_ADDR_EXP 29
3075: PUSH
3076: LD_EXP 29
3080: PUSH
3081: LD_VAR 0 1
3085: DIFF
3086: ST_TO_ADDR
// if un in al_force then
3087: LD_VAR 0 1
3091: PUSH
3092: LD_EXP 44
3096: IN
3097: IFFALSE 3115
// al_force := al_force diff un ;
3099: LD_ADDR_EXP 44
3103: PUSH
3104: LD_EXP 44
3108: PUSH
3109: LD_VAR 0 1
3113: DIFF
3114: ST_TO_ADDR
// end ;
3115: PPOPN 1
3117: END
// on BuildingComplete ( b ) do var i ;
3118: LD_INT 0
3120: PPUSH
// begin if GetSide ( b ) = 8 then
3121: LD_VAR 0 1
3125: PPUSH
3126: CALL_OW 255
3130: PUSH
3131: LD_INT 8
3133: EQUAL
3134: IFFALSE 3174
// for i = 1 to 4 do
3136: LD_ADDR_VAR 0 2
3140: PUSH
3141: DOUBLE
3142: LD_INT 1
3144: DEC
3145: ST_TO_ADDR
3146: LD_INT 4
3148: PUSH
3149: FOR_TO
3150: IFFALSE 3172
// legion_blist := Delete ( legion_blist , 1 ) ;
3152: LD_ADDR_EXP 40
3156: PUSH
3157: LD_EXP 40
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 3
3169: ST_TO_ADDR
3170: GO 3149
3172: POP
3173: POP
// if GetSide ( b ) = 3 then
3174: LD_VAR 0 1
3178: PPUSH
3179: CALL_OW 255
3183: PUSH
3184: LD_INT 3
3186: EQUAL
3187: IFFALSE 3227
// for i = 1 to 4 do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 4
3201: PUSH
3202: FOR_TO
3203: IFFALSE 3225
// ru_blist := Delete ( ru_blist , 1 ) ;
3205: LD_ADDR_EXP 32
3209: PUSH
3210: LD_EXP 32
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL_OW 3
3222: ST_TO_ADDR
3223: GO 3202
3225: POP
3226: POP
// end ;
3227: PPOPN 2
3229: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3230: LD_VAR 0 1
3234: PPUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: CALL 34273 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 264
3253: PUSH
3254: LD_INT 51
3256: PUSH
3257: LD_INT 48
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: IN
3264: NOT
3265: IFFALSE 3313
// begin if GetSide ( veh ) = 3 then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 255
3276: PUSH
3277: LD_INT 3
3279: EQUAL
3280: IFFALSE 3313
// begin ComMoveXY ( veh , 149 , 8 ) ;
3282: LD_VAR 0 1
3286: PPUSH
3287: LD_INT 149
3289: PPUSH
3290: LD_INT 8
3292: PPUSH
3293: CALL_OW 111
// ru_force := ru_force ^ veh ;
3297: LD_ADDR_EXP 29
3301: PUSH
3302: LD_EXP 29
3306: PUSH
3307: LD_VAR 0 1
3311: ADD
3312: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3313: LD_VAR 0 1
3317: PPUSH
3318: CALL_OW 264
3322: PUSH
3323: LD_INT 32
3325: PUSH
3326: LD_INT 31
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: IN
3333: NOT
3334: IFFALSE 3367
// begin if GetSide ( veh ) = 8 then
3336: LD_VAR 0 1
3340: PPUSH
3341: CALL_OW 255
3345: PUSH
3346: LD_INT 8
3348: EQUAL
3349: IFFALSE 3367
// legion_force := legion_force ^ veh ;
3351: LD_ADDR_EXP 37
3355: PUSH
3356: LD_EXP 37
3360: PUSH
3361: LD_VAR 0 1
3365: ADD
3366: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 255
3376: PUSH
3377: LD_INT 3
3379: EQUAL
3380: PUSH
3381: LD_EXP 31
3385: NOT
3386: AND
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 264
3397: PUSH
3398: LD_INT 51
3400: EQUAL
3401: AND
3402: IFFALSE 3414
// ru_cargo := veh ;
3404: LD_ADDR_EXP 31
3408: PUSH
3409: LD_VAR 0 1
3413: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 7
3426: EQUAL
3427: PUSH
3428: LD_OWVAR 2
3432: PUSH
3433: LD_INT 7
3435: NONEQUAL
3436: AND
3437: IFFALSE 3455
// al_force := al_force ^ veh ;
3439: LD_ADDR_EXP 44
3443: PUSH
3444: LD_EXP 44
3448: PUSH
3449: LD_VAR 0 1
3453: ADD
3454: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3455: LD_VAR 0 1
3459: PPUSH
3460: CALL_OW 255
3464: PUSH
3465: LD_OWVAR 2
3469: EQUAL
3470: IFFALSE 3486
// veh_counter := veh_counter + 1 ;
3472: LD_ADDR_EXP 18
3476: PUSH
3477: LD_EXP 18
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: PPOPN 2
3488: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3489: LD_VAR 0 1
3493: PPUSH
3494: CALL_OW 255
3498: PUSH
3499: LD_OWVAR 2
3503: NONEQUAL
3504: IFFALSE 3520
// sib_contamin_counter := sib_contamin_counter + 1 ;
3506: LD_ADDR_EXP 20
3510: PUSH
3511: LD_EXP 20
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// end ;
3520: PPOPN 3
3522: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3523: LD_VAR 0 2
3527: PPUSH
3528: CALL_OW 255
3532: PUSH
3533: LD_OWVAR 2
3537: EQUAL
3538: IFFALSE 3554
// tech_counter := tech_counter + 1 ;
3540: LD_ADDR_EXP 19
3544: PUSH
3545: LD_EXP 19
3549: PUSH
3550: LD_INT 1
3552: PLUS
3553: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3554: LD_VAR 0 1
3558: PUSH
3559: LD_INT 53
3561: EQUAL
3562: PUSH
3563: LD_OWVAR 2
3567: PUSH
3568: LD_INT 1
3570: EQUAL
3571: AND
3572: IFFALSE 3587
// SetTech ( 80 , 1 , state_researched ) ;
3574: LD_INT 80
3576: PPUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 2
3582: PPUSH
3583: CALL_OW 322
// end ;
3587: PPOPN 2
3589: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 255
3599: PUSH
3600: LD_INT 8
3602: EQUAL
3603: PUSH
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 263
3613: PUSH
3614: LD_INT 2
3616: EQUAL
3617: AND
3618: IFFALSE 3629
// ComAutodestruct ( un ) ;
3620: LD_VAR 0 1
3624: PPUSH
3625: CALL 71571 0 1
// end ;
3629: PPOPN 1
3631: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3632: LD_VAR 0 1
3636: PUSH
3637: LD_EXP 21
3641: DOUBLE
3642: EQUAL
3643: IFTRUE 3647
3645: GO 3654
3647: POP
// LegionAttack ( ) ; event_alliance_attack :
3648: CALL 11361 0 0
3652: GO 3689
3654: LD_EXP 23
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3671
3664: POP
// AllianceAttack ( ) ; event_russian_attack :
3665: CALL 18850 0 0
3669: GO 3689
3671: LD_EXP 22
3675: DOUBLE
3676: EQUAL
3677: IFTRUE 3681
3679: GO 3688
3681: POP
// RussianAttack ( ) ; end ;
3682: CALL 7585 0 0
3686: GO 3689
3688: POP
// end ;
3689: PPOPN 1
3691: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3692: LD_INT 25
3694: PUSH
3695: LD_INT 12
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PPUSH
3702: CALL_OW 69
3706: PUSH
3707: LD_INT 9
3709: LESS
3710: IFFALSE 3743
3712: GO 3714
3714: DISABLE
// begin enable ;
3715: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3716: LD_INT 8
3718: PUSH
3719: LD_INT 25
3721: PUSH
3722: LD_INT 12
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PPUSH
3729: CALL_OW 69
3733: PUSH
3734: LD_INT 0
3736: PLUS
3737: MINUS
3738: PPUSH
3739: CALL 1964 0 1
// end ;
3743: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3744: LD_VAR 0 1
3748: PPUSH
3749: LD_VAR 0 2
3753: PPUSH
3754: LD_VAR 0 3
3758: PPUSH
3759: CALL 34249 0 3
// end ;
3763: PPOPN 3
3765: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3766: LD_VAR 0 1
3770: PPUSH
3771: CALL 34257 0 1
// end ; end_of_file
3775: PPOPN 1
3777: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3778: LD_INT 0
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// uc_side := 3 ;
3791: LD_ADDR_OWVAR 20
3795: PUSH
3796: LD_INT 3
3798: ST_TO_ADDR
// uc_nation := nation_russian ;
3799: LD_ADDR_OWVAR 21
3803: PUSH
3804: LD_INT 3
3806: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3807: LD_ADDR_VAR 0 4
3811: PUSH
3812: LD_INT 22
3814: PUSH
3815: LD_INT 3
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 30
3824: PUSH
3825: LD_INT 1
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 69
3840: PUSH
3841: LD_INT 1
3843: ARRAY
3844: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3845: LD_ADDR_VAR 0 5
3849: PUSH
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 30
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3883: LD_ADDR_VAR 0 6
3887: PUSH
3888: LD_INT 22
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: LD_INT 30
3900: PUSH
3901: LD_INT 34
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 69
3916: PUSH
3917: LD_INT 1
3919: ARRAY
3920: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3921: LD_ADDR_VAR 0 8
3925: PUSH
3926: LD_INT 22
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 30
3938: PUSH
3939: LD_INT 33
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PPUSH
3950: CALL_OW 69
3954: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3955: LD_ADDR_VAR 0 7
3959: PUSH
3960: LD_INT 22
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: LD_INT 30
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 69
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: ST_TO_ADDR
// ru_blist := [ ] ;
3993: LD_ADDR_EXP 32
3997: PUSH
3998: EMPTY
3999: ST_TO_ADDR
// ru_vlist := [ ] ;
4000: LD_ADDR_EXP 33
4004: PUSH
4005: EMPTY
4006: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4007: LD_ADDR_EXP 36
4011: PUSH
4012: LD_INT 183
4014: PUSH
4015: LD_INT 62
4017: PUSH
4018: LD_INT 147
4020: PUSH
4021: LD_INT 44
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4030: LD_INT 30
4032: PUSH
4033: LD_INT 34
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PPUSH
4040: CALL_OW 69
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: PPUSH
4049: LD_EXP 36
4053: PUSH
4054: LD_INT 1
4056: ARRAY
4057: PPUSH
4058: LD_EXP 36
4062: PUSH
4063: LD_INT 2
4065: ARRAY
4066: PPUSH
4067: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4071: LD_ADDR_EXP 34
4075: PUSH
4076: LD_INT 4
4078: PUSH
4079: LD_INT 5
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4096: LD_VAR 0 4
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 3000
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4116: LD_VAR 0 4
4120: PPUSH
4121: CALL_OW 274
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: LD_INT 300
4131: PPUSH
4132: CALL_OW 277
// hc_gallery :=  ;
4136: LD_ADDR_OWVAR 33
4140: PUSH
4141: LD_STRING 
4143: ST_TO_ADDR
// hc_name :=  ;
4144: LD_ADDR_OWVAR 26
4148: PUSH
4149: LD_STRING 
4151: ST_TO_ADDR
// hc_importance := 0 ;
4152: LD_ADDR_OWVAR 32
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4160: LD_ADDR_EXP 30
4164: PUSH
4165: LD_INT 5
4167: PUSH
4168: LD_INT 6
4170: PUSH
4171: LD_INT 7
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_OWVAR 67
4183: ARRAY
4184: ST_TO_ADDR
// for i = 1 to 6 do
4185: LD_ADDR_VAR 0 2
4189: PUSH
4190: DOUBLE
4191: LD_INT 1
4193: DEC
4194: ST_TO_ADDR
4195: LD_INT 6
4197: PUSH
4198: FOR_TO
4199: IFFALSE 4357
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4201: LD_INT 0
4203: PPUSH
4204: LD_INT 9
4206: PPUSH
4207: LD_EXP 30
4211: PPUSH
4212: CALL_OW 380
// un := CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_VAR 0 7
4235: PPUSH
4236: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 4
4245: PPUSH
4246: LD_EXP 30
4250: PPUSH
4251: CALL_OW 380
// un := CreateHuman ;
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4265: LD_VAR 0 3
4269: PPUSH
4270: LD_INT 24
4272: PPUSH
4273: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4277: LD_INT 0
4279: PPUSH
4280: LD_INT 3
4282: PPUSH
4283: LD_EXP 30
4287: PPUSH
4288: CALL_OW 380
// un := CreateHuman ;
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: CALL_OW 44
4301: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 5
4311: PPUSH
4312: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4316: LD_INT 0
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: LD_EXP 30
4326: PPUSH
4327: CALL_OW 380
// un := CreateHuman ;
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: CALL_OW 44
4340: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_VAR 0 4
4350: PPUSH
4351: CALL_OW 52
// end ;
4355: GO 4198
4357: POP
4358: POP
// if Difficulty > 1 then
4359: LD_OWVAR 67
4363: PUSH
4364: LD_INT 1
4366: GREATER
4367: IFFALSE 4400
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4369: LD_ADDR_VAR 0 3
4373: PUSH
4374: LD_INT 3
4376: PPUSH
4377: LD_INT 160
4379: PPUSH
4380: LD_INT 36
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL 78826 0 4
4390: ST_TO_ADDR
// ComHold ( un ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: CALL_OW 140
// end ; russian_prepared := true ;
4400: LD_ADDR_EXP 2
4404: PUSH
4405: LD_INT 1
4407: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4408: LD_VAR 0 5
4412: PPUSH
4413: LD_INT 21
4415: PPUSH
4416: LD_INT 3
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: LD_INT 51
4424: PPUSH
4425: CALL_OW 125
// end ;
4429: LD_VAR 0 1
4433: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4434: LD_INT 22
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 69
4448: PUSH
4449: LD_INT 0
4451: GREATER
4452: PUSH
4453: LD_EXP 2
4457: AND
4458: IFFALSE 6608
4460: GO 4462
4462: DISABLE
4463: LD_INT 0
4465: PPUSH
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
// begin enable ;
4481: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 30
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PPUSH
4511: CALL_OW 69
4515: PUSH
4516: LD_INT 1
4518: ARRAY
4519: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 30
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 30
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_INT 1
4594: ARRAY
4595: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 30
4613: PUSH
4614: LD_INT 33
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4630: LD_ADDR_VAR 0 8
4634: PUSH
4635: LD_INT 22
4637: PUSH
4638: LD_INT 3
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 30
4647: PUSH
4648: LD_INT 5
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PPUSH
4659: CALL_OW 69
4663: PUSH
4664: LD_INT 1
4666: ARRAY
4667: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: LD_INT 22
4675: PUSH
4676: LD_INT 3
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 21
4685: PUSH
4686: LD_INT 3
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 69
4701: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4702: LD_ADDR_VAR 0 6
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 3
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 21
4719: PUSH
4720: LD_INT 2
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PPUSH
4731: CALL_OW 69
4735: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4736: LD_ADDR_VAR 0 7
4740: PUSH
4741: LD_INT 22
4743: PUSH
4744: LD_INT 3
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 21
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 69
4769: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4770: LD_ADDR_VAR 0 9
4774: PUSH
4775: LD_VAR 0 7
4779: PPUSH
4780: LD_INT 25
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 72
4794: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4795: LD_ADDR_VAR 0 10
4799: PUSH
4800: LD_VAR 0 7
4804: PPUSH
4805: LD_INT 25
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PPUSH
4815: CALL_OW 72
4819: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4820: LD_ADDR_VAR 0 11
4824: PUSH
4825: LD_VAR 0 7
4829: PPUSH
4830: LD_INT 25
4832: PUSH
4833: LD_INT 4
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 72
4844: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4845: LD_INT 22
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 34
4857: PUSH
4858: LD_INT 51
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: PUSH
4874: LD_INT 0
4876: GREATER
4877: PUSH
4878: LD_EXP 31
4882: PUSH
4883: LD_INT 0
4885: EQUAL
4886: AND
4887: IFFALSE 4927
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4889: LD_ADDR_EXP 31
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 3
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 34
4906: PUSH
4907: LD_INT 51
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PPUSH
4918: CALL_OW 69
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: ST_TO_ADDR
// if ru_cargo then
4927: LD_EXP 31
4931: IFFALSE 5271
// begin if IsInArea ( ru_cargo , ru_base ) then
4933: LD_EXP 31
4937: PPUSH
4938: LD_INT 9
4940: PPUSH
4941: CALL_OW 308
4945: IFFALSE 5024
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4947: LD_EXP 31
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 289
4959: PUSH
4960: LD_INT 0
4962: EQUAL
4963: IFFALSE 4981
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4965: LD_EXP 31
4969: PPUSH
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 120
4979: GO 5022
// if not HasTask ( ru_cargo ) then
4981: LD_EXP 31
4985: PPUSH
4986: CALL_OW 314
4990: NOT
4991: IFFALSE 5022
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4993: LD_EXP 31
4997: PPUSH
4998: LD_VAR 0 1
5002: PPUSH
5003: CALL_OW 250
5007: PPUSH
5008: LD_VAR 0 1
5012: PPUSH
5013: CALL_OW 251
5017: PPUSH
5018: CALL_OW 111
// end else
5022: GO 5271
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5024: LD_EXP 31
5028: PPUSH
5029: CALL_OW 314
5033: NOT
5034: PUSH
5035: LD_EXP 31
5039: PPUSH
5040: LD_INT 1
5042: PPUSH
5043: CALL_OW 289
5047: PUSH
5048: LD_INT 100
5050: LESS
5051: AND
5052: PUSH
5053: LD_EXP 31
5057: PPUSH
5058: LD_INT 10
5060: PPUSH
5061: CALL_OW 308
5065: NOT
5066: AND
5067: IFFALSE 5144
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5069: LD_ADDR_VAR 0 15
5073: PUSH
5074: LD_INT 11
5076: PPUSH
5077: CALL_OW 435
5081: ST_TO_ADDR
// if cr then
5082: LD_VAR 0 15
5086: IFFALSE 5117
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5088: LD_EXP 31
5092: PPUSH
5093: LD_VAR 0 15
5097: PUSH
5098: LD_INT 1
5100: ARRAY
5101: PPUSH
5102: LD_VAR 0 15
5106: PUSH
5107: LD_INT 2
5109: ARRAY
5110: PPUSH
5111: CALL_OW 117
5115: GO 5144
// if not IsInArea ( ru_cargo , ru_crates ) then
5117: LD_EXP 31
5121: PPUSH
5122: LD_INT 11
5124: PPUSH
5125: CALL_OW 308
5129: NOT
5130: IFFALSE 5144
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5132: LD_EXP 31
5136: PPUSH
5137: LD_INT 11
5139: PPUSH
5140: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5144: LD_EXP 31
5148: PPUSH
5149: CALL_OW 314
5153: NOT
5154: PUSH
5155: LD_EXP 31
5159: PPUSH
5160: LD_INT 10
5162: PPUSH
5163: CALL_OW 308
5167: NOT
5168: AND
5169: PUSH
5170: LD_EXP 31
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 289
5182: PUSH
5183: LD_INT 100
5185: EQUAL
5186: PUSH
5187: LD_OWVAR 2
5191: PPUSH
5192: LD_EXP 31
5196: PPUSH
5197: CALL_OW 292
5201: OR
5202: AND
5203: IFFALSE 5217
// ComMoveToArea ( ru_cargo , cargoa ) ;
5205: LD_EXP 31
5209: PPUSH
5210: LD_INT 10
5212: PPUSH
5213: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5217: LD_EXP 31
5221: PPUSH
5222: LD_INT 10
5224: PPUSH
5225: CALL_OW 308
5229: PUSH
5230: LD_VAR 0 8
5234: AND
5235: IFFALSE 5271
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5237: LD_VAR 0 7
5241: PPUSH
5242: LD_INT 25
5244: PUSH
5245: LD_INT 9
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 72
5256: PUSH
5257: LD_INT 1
5259: ARRAY
5260: PPUSH
5261: LD_INT 139
5263: PPUSH
5264: LD_INT 24
5266: PPUSH
5267: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5271: LD_EXP 31
5275: PUSH
5276: LD_INT 0
5278: EQUAL
5279: PUSH
5280: LD_VAR 0 2
5284: AND
5285: PUSH
5286: LD_VAR 0 2
5290: PPUSH
5291: CALL_OW 461
5295: PUSH
5296: LD_INT 2
5298: EQUAL
5299: AND
5300: IFFALSE 5323
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5302: LD_VAR 0 2
5306: PPUSH
5307: LD_INT 21
5309: PPUSH
5310: LD_INT 3
5312: PPUSH
5313: LD_INT 3
5315: PPUSH
5316: LD_INT 51
5318: PPUSH
5319: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5323: LD_VAR 0 2
5327: PUSH
5328: LD_EXP 33
5332: PUSH
5333: LD_INT 0
5335: GREATER
5336: AND
5337: IFFALSE 5437
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5339: LD_VAR 0 2
5343: PPUSH
5344: CALL_OW 461
5348: PUSH
5349: LD_INT 2
5351: EQUAL
5352: IFFALSE 5437
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5354: LD_VAR 0 2
5358: PPUSH
5359: LD_EXP 33
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: LD_EXP 33
5372: PUSH
5373: LD_INT 2
5375: ARRAY
5376: PPUSH
5377: LD_EXP 33
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: LD_EXP 33
5390: PUSH
5391: LD_INT 4
5393: ARRAY
5394: PPUSH
5395: CALL_OW 125
// for i = 1 to 4 do
5399: LD_ADDR_VAR 0 12
5403: PUSH
5404: DOUBLE
5405: LD_INT 1
5407: DEC
5408: ST_TO_ADDR
5409: LD_INT 4
5411: PUSH
5412: FOR_TO
5413: IFFALSE 5435
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5415: LD_ADDR_EXP 33
5419: PUSH
5420: LD_EXP 33
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: CALL_OW 3
5432: ST_TO_ADDR
5433: GO 5412
5435: POP
5436: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5437: LD_INT 24
5439: PPUSH
5440: CALL_OW 461
5444: PUSH
5445: LD_INT 2
5447: EQUAL
5448: PUSH
5449: LD_EXP 4
5453: AND
5454: IFFALSE 5482
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5456: LD_INT 25
5458: PPUSH
5459: LD_INT 3
5461: PPUSH
5462: CALL_OW 321
5466: PUSH
5467: LD_INT 1
5469: EQUAL
5470: IFFALSE 5482
// ComResearch ( ru_lab , tech_sibfiss ) ;
5472: LD_INT 24
5474: PPUSH
5475: LD_INT 25
5477: PPUSH
5478: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5482: LD_INT 25
5484: PPUSH
5485: LD_INT 3
5487: PPUSH
5488: CALL_OW 321
5492: PUSH
5493: LD_INT 2
5495: EQUAL
5496: PUSH
5497: LD_OWVAR 1
5501: PUSH
5502: LD_INT 10500
5504: MOD
5505: PUSH
5506: LD_INT 0
5508: EQUAL
5509: AND
5510: IFFALSE 5548
// if BuildingStatus ( ru_factory ) = bs_idle then
5512: LD_VAR 0 2
5516: PPUSH
5517: CALL_OW 461
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5548
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: LD_INT 23
5534: PPUSH
5535: LD_INT 3
5537: PPUSH
5538: LD_INT 3
5540: PPUSH
5541: LD_INT 48
5543: PPUSH
5544: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5548: LD_INT 22
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 34
5560: PUSH
5561: LD_INT 48
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 69
5576: PUSH
5577: LD_INT 0
5579: GREATER
5580: IFFALSE 5954
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5582: LD_ADDR_VAR 0 16
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 34
5599: PUSH
5600: LD_INT 48
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PUSH
5616: LD_INT 1
5618: ARRAY
5619: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5620: LD_VAR 0 16
5624: PPUSH
5625: LD_INT 9
5627: PPUSH
5628: CALL_OW 308
5632: IFFALSE 5650
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5634: LD_VAR 0 16
5638: PPUSH
5639: LD_VAR 0 3
5643: PPUSH
5644: CALL_OW 120
5648: GO 5954
// if not HasTask ( sib_bomb ) then
5650: LD_VAR 0 16
5654: PPUSH
5655: CALL_OW 314
5659: NOT
5660: IFFALSE 5954
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5662: LD_INT 22
5664: PUSH
5665: LD_OWVAR 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 30
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PPUSH
5688: CALL_OW 69
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PPUSH
5697: CALL_OW 256
5701: PUSH
5702: LD_INT 250
5704: GREATER
5705: IFFALSE 5798
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5707: LD_VAR 0 16
5711: PPUSH
5712: LD_INT 22
5714: PUSH
5715: LD_OWVAR 2
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 30
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 69
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: CALL_OW 250
5751: PPUSH
5752: LD_INT 22
5754: PUSH
5755: LD_OWVAR 2
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 30
5766: PUSH
5767: LD_INT 1
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PPUSH
5778: CALL_OW 69
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: CALL_OW 251
5791: PPUSH
5792: CALL_OW 116
5796: GO 5954
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 21
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 0
5831: GREATER
5832: IFFALSE 5925
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5834: LD_VAR 0 16
5838: PPUSH
5839: LD_INT 22
5841: PUSH
5842: LD_OWVAR 2
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 21
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PPUSH
5865: CALL_OW 69
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: PPUSH
5874: CALL_OW 250
5878: PPUSH
5879: LD_INT 22
5881: PUSH
5882: LD_OWVAR 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 21
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 69
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 251
5918: PPUSH
5919: CALL_OW 116
5923: GO 5954
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5925: LD_VAR 0 16
5929: PPUSH
5930: LD_EXP 11
5934: PPUSH
5935: CALL_OW 250
5939: PPUSH
5940: LD_EXP 11
5944: PPUSH
5945: CALL_OW 251
5949: PPUSH
5950: CALL_OW 116
// end ; if ru_can_attack then
5954: LD_EXP 3
5958: IFFALSE 6106
// if ru_time > 0 0$00 then
5960: LD_EXP 35
5964: PUSH
5965: LD_INT 0
5967: GREATER
5968: IFFALSE 5986
// ru_time := ru_time - 0 0$03 else
5970: LD_ADDR_EXP 35
5974: PUSH
5975: LD_EXP 35
5979: PUSH
5980: LD_INT 105
5982: MINUS
5983: ST_TO_ADDR
5984: GO 6106
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5986: LD_ADDR_EXP 35
5990: PUSH
5991: LD_INT 20265
5993: PPUSH
5994: LD_INT 30765
5996: PPUSH
5997: CALL_OW 12
6001: ST_TO_ADDR
// for i = 1 to ru_amount do
6002: LD_ADDR_VAR 0 12
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_EXP 34
6016: PUSH
6017: FOR_TO
6018: IFFALSE 6104
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6020: LD_ADDR_EXP 33
6024: PUSH
6025: LD_EXP 33
6029: PUSH
6030: LD_INT 23
6032: ADD
6033: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6034: LD_ADDR_EXP 33
6038: PUSH
6039: LD_EXP 33
6043: PUSH
6044: LD_INT 3
6046: ADD
6047: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6048: LD_ADDR_EXP 33
6052: PUSH
6053: LD_EXP 33
6057: PUSH
6058: LD_INT 3
6060: ADD
6061: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6062: LD_ADDR_EXP 33
6066: PUSH
6067: LD_EXP 33
6071: PUSH
6072: LD_INT 46
6074: PUSH
6075: LD_INT 45
6077: PUSH
6078: LD_INT 47
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 1
6088: PPUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 14
6099: ARRAY
6100: ADD
6101: ST_TO_ADDR
// end ;
6102: GO 6017
6104: POP
6105: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6106: LD_VAR 0 4
6110: PPUSH
6111: LD_INT 35
6113: PUSH
6114: LD_INT 0
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 72
6125: PUSH
6126: LD_INT 0
6128: GREATER
6129: IFFALSE 6177
// if BuildingStatus ( ru_factory ) = bs_idle then
6131: LD_VAR 0 2
6135: PPUSH
6136: CALL_OW 461
6140: PUSH
6141: LD_INT 2
6143: EQUAL
6144: IFFALSE 6177
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6146: LD_VAR 0 4
6150: PPUSH
6151: LD_INT 35
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 72
6165: PUSH
6166: LD_INT 1
6168: ARRAY
6169: PPUSH
6170: LD_INT 47
6172: PPUSH
6173: CALL_OW 148
// if ru_force >= ru_amount then
6177: LD_EXP 29
6181: PUSH
6182: LD_EXP 34
6186: GREATEREQUAL
6187: IFFALSE 6198
// RaiseSailEvent ( event_russian_attack ) ;
6189: LD_EXP 22
6193: PPUSH
6194: CALL_OW 427
// if ru_engs > 0 then
6198: LD_VAR 0 9
6202: PUSH
6203: LD_INT 0
6205: GREATER
6206: IFFALSE 6608
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6208: LD_VAR 0 5
6212: PPUSH
6213: LD_INT 3
6215: PUSH
6216: LD_INT 24
6218: PUSH
6219: LD_INT 1000
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PPUSH
6230: CALL_OW 72
6234: PUSH
6235: LD_INT 0
6237: GREATER
6238: IFFALSE 6393
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6240: LD_ADDR_VAR 0 14
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 3
6252: PUSH
6253: LD_INT 24
6255: PUSH
6256: LD_INT 1000
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 72
6271: ST_TO_ADDR
// for i = 1 to ru_engs do
6272: LD_ADDR_VAR 0 12
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_VAR 0 9
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6389
// begin if IsInUnit ( ru_engs [ i ] ) then
6290: LD_VAR 0 9
6294: PUSH
6295: LD_VAR 0 12
6299: ARRAY
6300: PPUSH
6301: CALL_OW 310
6305: IFFALSE 6324
// ComExitBuilding ( ru_engs [ i ] ) else
6307: LD_VAR 0 9
6311: PUSH
6312: LD_VAR 0 12
6316: ARRAY
6317: PPUSH
6318: CALL_OW 122
6322: GO 6387
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6324: LD_VAR 0 9
6328: PUSH
6329: LD_VAR 0 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 314
6339: NOT
6340: PUSH
6341: LD_VAR 0 9
6345: PUSH
6346: LD_VAR 0 12
6350: ARRAY
6351: PPUSH
6352: CALL_OW 256
6356: PUSH
6357: LD_INT 600
6359: GREATER
6360: AND
6361: IFFALSE 6387
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6363: LD_VAR 0 9
6367: PUSH
6368: LD_VAR 0 12
6372: ARRAY
6373: PPUSH
6374: LD_VAR 0 14
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: CALL_OW 130
// end ;
6387: GO 6287
6389: POP
6390: POP
// end else
6391: GO 6608
// begin if ru_blist = 0 then
6393: LD_EXP 32
6397: PUSH
6398: LD_INT 0
6400: EQUAL
6401: IFFALSE 6483
// begin for i = 1 to ru_engs do
6403: LD_ADDR_VAR 0 12
6407: PUSH
6408: DOUBLE
6409: LD_INT 1
6411: DEC
6412: ST_TO_ADDR
6413: LD_VAR 0 9
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6479
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6421: LD_VAR 0 9
6425: PUSH
6426: LD_VAR 0 12
6430: ARRAY
6431: PPUSH
6432: CALL_OW 314
6436: NOT
6437: PUSH
6438: LD_VAR 0 9
6442: PUSH
6443: LD_VAR 0 12
6447: ARRAY
6448: PPUSH
6449: CALL_OW 310
6453: NOT
6454: AND
6455: IFFALSE 6477
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6457: LD_VAR 0 9
6461: PUSH
6462: LD_VAR 0 12
6466: ARRAY
6467: PPUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 120
6477: GO 6418
6479: POP
6480: POP
// end else
6481: GO 6608
// begin for i = 1 to ru_engs do
6483: LD_ADDR_VAR 0 12
6487: PUSH
6488: DOUBLE
6489: LD_INT 1
6491: DEC
6492: ST_TO_ADDR
6493: LD_VAR 0 9
6497: PUSH
6498: FOR_TO
6499: IFFALSE 6606
// begin if IsInUnit ( ru_engs [ i ] ) then
6501: LD_VAR 0 9
6505: PUSH
6506: LD_VAR 0 12
6510: ARRAY
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6535
// ComExitBuilding ( ru_engs [ i ] ) else
6518: LD_VAR 0 9
6522: PUSH
6523: LD_VAR 0 12
6527: ARRAY
6528: PPUSH
6529: CALL_OW 122
6533: GO 6604
// if not HasTask ( ru_engs [ i ] ) then
6535: LD_VAR 0 9
6539: PUSH
6540: LD_VAR 0 12
6544: ARRAY
6545: PPUSH
6546: CALL_OW 314
6550: NOT
6551: IFFALSE 6604
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6553: LD_VAR 0 9
6557: PUSH
6558: LD_VAR 0 12
6562: ARRAY
6563: PPUSH
6564: LD_EXP 32
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_EXP 32
6577: PUSH
6578: LD_INT 2
6580: ARRAY
6581: PPUSH
6582: LD_EXP 32
6586: PUSH
6587: LD_INT 3
6589: ARRAY
6590: PPUSH
6591: LD_EXP 32
6595: PUSH
6596: LD_INT 4
6598: ARRAY
6599: PPUSH
6600: CALL_OW 145
// end ;
6604: GO 6498
6606: POP
6607: POP
// end ; end ; end ; end ;
6608: PPOPN 16
6610: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6611: LD_EXP 2
6615: PUSH
6616: LD_INT 11
6618: PPUSH
6619: CALL_OW 435
6623: PUSH
6624: LD_INT 10
6626: LESS
6627: AND
6628: IFFALSE 6691
6630: GO 6632
6632: DISABLE
// begin enable ;
6633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6634: LD_INT 1
6636: PPUSH
6637: LD_INT 5
6639: PPUSH
6640: CALL_OW 12
6644: PPUSH
6645: LD_INT 11
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6655: LD_INT 1505
6657: PPUSH
6658: LD_INT 2100
6660: PPUSH
6661: CALL_OW 12
6665: PPUSH
6666: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6670: LD_INT 1
6672: PPUSH
6673: LD_INT 5
6675: PPUSH
6676: CALL_OW 12
6680: PPUSH
6681: LD_INT 11
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 55
// end ;
6691: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6692: LD_EXP 4
6696: NOT
6697: IFFALSE 6812
6699: GO 6701
6701: DISABLE
6702: LD_INT 0
6704: PPUSH
6705: PPUSH
// begin enable ;
6706: ENABLE
// i := Rand ( 0 , 100 ) ;
6707: LD_ADDR_VAR 0 1
6711: PUSH
6712: LD_INT 0
6714: PPUSH
6715: LD_INT 100
6717: PPUSH
6718: CALL_OW 12
6722: ST_TO_ADDR
// case your_side of 1 :
6723: LD_OWVAR 2
6727: PUSH
6728: LD_INT 1
6730: DOUBLE
6731: EQUAL
6732: IFTRUE 6736
6734: GO 6747
6736: POP
// tmp := 10 ; 2 :
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: LD_INT 10
6744: ST_TO_ADDR
6745: GO 6786
6747: LD_INT 2
6749: DOUBLE
6750: EQUAL
6751: IFTRUE 6755
6753: GO 6766
6755: POP
// tmp := 0 ; 7 :
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
6764: GO 6786
6766: LD_INT 7
6768: DOUBLE
6769: EQUAL
6770: IFTRUE 6774
6772: GO 6785
6774: POP
// tmp := 15 ; end ;
6775: LD_ADDR_VAR 0 2
6779: PUSH
6780: LD_INT 15
6782: ST_TO_ADDR
6783: GO 6786
6785: POP
// if i < chance_to_bomb + tmp then
6786: LD_VAR 0 1
6790: PUSH
6791: LD_EXP 5
6795: PUSH
6796: LD_VAR 0 2
6800: PLUS
6801: LESS
6802: IFFALSE 6812
// ru_sib_bomb := true ;
6804: LD_ADDR_EXP 4
6808: PUSH
6809: LD_INT 1
6811: ST_TO_ADDR
// end ;
6812: PPOPN 2
6814: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6815: LD_INT 22
6817: PUSH
6818: LD_OWVAR 2
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 34
6829: PUSH
6830: LD_INT 8
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PPUSH
6841: CALL_OW 69
6845: IFFALSE 6858
6847: GO 6849
6849: DISABLE
// begin ru_sib_bomb := true ;
6850: LD_ADDR_EXP 4
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// end ;
6858: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6859: LD_INT 22
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 30
6871: PUSH
6872: LD_INT 34
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PPUSH
6883: CALL_OW 69
6887: IFFALSE 6986
6889: GO 6891
6891: DISABLE
6892: LD_INT 0
6894: PPUSH
// begin enable ;
6895: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6896: LD_ADDR_VAR 0 1
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: LD_INT 3
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 1
6913: PPUSH
6914: LD_INT 2
6916: PPUSH
6917: CALL_OW 12
6921: ARRAY
6922: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6923: LD_INT 22
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 30
6935: PUSH
6936: LD_INT 34
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PUSH
6952: LD_INT 1
6954: ARRAY
6955: PPUSH
6956: LD_EXP 36
6960: PUSH
6961: LD_VAR 0 1
6965: ARRAY
6966: PPUSH
6967: LD_EXP 36
6971: PUSH
6972: LD_VAR 0 1
6976: PUSH
6977: LD_INT 1
6979: PLUS
6980: ARRAY
6981: PPUSH
6982: CALL_OW 243
// end ;
6986: PPOPN 1
6988: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6989: LD_OWVAR 1
6993: PUSH
6994: LD_INT 58800
6996: PUSH
6997: LD_INT 52500
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_OWVAR 67
7008: PUSH
7009: LD_INT 1
7011: MINUS
7012: ARRAY
7013: GREATEREQUAL
7014: PUSH
7015: LD_OWVAR 67
7019: PUSH
7020: LD_INT 1
7022: GREATER
7023: AND
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 69
7039: AND
7040: IFFALSE 7464
7042: GO 7044
7044: DISABLE
7045: LD_INT 0
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
// begin enable ;
7052: ENABLE
// if tick > 60 60$00 then
7053: LD_OWVAR 1
7057: PUSH
7058: LD_INT 126000
7060: GREATER
7061: IFFALSE 7064
// disable ;
7063: DISABLE
// tmp := [ ] ;
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: EMPTY
7070: ST_TO_ADDR
// for i := 1 to 8 do
7071: LD_ADDR_VAR 0 1
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_INT 8
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7246
// begin uc_side := 6 ;
7087: LD_ADDR_OWVAR 20
7091: PUSH
7092: LD_INT 6
7094: ST_TO_ADDR
// uc_nation := 3 ;
7095: LD_ADDR_OWVAR 21
7099: PUSH
7100: LD_INT 3
7102: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7103: LD_ADDR_OWVAR 37
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 23
7113: PUSH
7114: LD_INT 24
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: PUSH
7122: LD_VAR 0 1
7126: PUSH
7127: LD_INT 3
7129: MOD
7130: PUSH
7131: LD_INT 1
7133: PLUS
7134: ARRAY
7135: ST_TO_ADDR
// vc_engine := engine_siberite ;
7136: LD_ADDR_OWVAR 39
7140: PUSH
7141: LD_INT 3
7143: ST_TO_ADDR
// vc_control := control_computer ;
7144: LD_ADDR_OWVAR 38
7148: PUSH
7149: LD_INT 3
7151: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7152: LD_ADDR_OWVAR 40
7156: PUSH
7157: LD_INT 45
7159: PUSH
7160: LD_EXP 68
7164: PUSH
7165: LD_INT 47
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 3
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// un := CreateVehicle ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7197: LD_VAR 0 2
7201: PPUSH
7202: LD_INT 2
7204: PPUSH
7205: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7209: LD_VAR 0 2
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: LD_VAR 0 3
7233: PPUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: CALL 75472 0 2
7243: ST_TO_ADDR
// end ;
7244: GO 7084
7246: POP
7247: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7248: LD_INT 22
7250: PUSH
7251: LD_OWVAR 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 92
7262: PUSH
7263: LD_INT 58
7265: PUSH
7266: LD_INT 15
7268: PUSH
7269: LD_INT 18
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 69
7286: PUSH
7287: LD_INT 1
7289: GREATER
7290: IFFALSE 7302
// p := 2 else
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_INT 2
7299: ST_TO_ADDR
7300: GO 7310
// p := 1 ;
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// case p of 1 :
7310: LD_VAR 0 4
7314: PUSH
7315: LD_INT 1
7317: DOUBLE
7318: EQUAL
7319: IFTRUE 7323
7321: GO 7388
7323: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7324: LD_ADDR_VAR 0 5
7328: PUSH
7329: LD_INT 29
7331: PUSH
7332: LD_INT 29
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 49
7341: PUSH
7342: LD_INT 70
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 49
7351: PUSH
7352: LD_INT 70
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 61
7361: PUSH
7362: LD_INT 110
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 74
7371: PUSH
7372: LD_INT 129
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: ST_TO_ADDR
7386: GO 7440
7388: LD_INT 2
7390: DOUBLE
7391: EQUAL
7392: IFTRUE 7396
7394: GO 7439
7396: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7397: LD_ADDR_VAR 0 5
7401: PUSH
7402: LD_INT 24
7404: PUSH
7405: LD_INT 23
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 49
7414: PUSH
7415: LD_INT 39
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 52
7424: PUSH
7425: LD_INT 27
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: ST_TO_ADDR
7437: GO 7440
7439: POP
// repeat wait ( 0 0$1 ) ;
7440: LD_INT 35
7442: PPUSH
7443: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7447: LD_VAR 0 3
7451: PPUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: CALL 78068 0 2
7461: NOT
7462: IFFALSE 7440
// end ;
7464: PPOPN 5
7466: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7467: LD_INT 22
7469: PUSH
7470: LD_INT 3
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 30
7479: PUSH
7480: LD_INT 1
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PPUSH
7491: CALL_OW 69
7495: IFFALSE 7582
7497: GO 7499
7499: DISABLE
7500: LD_INT 0
7502: PPUSH
// begin enable ;
7503: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7504: LD_ADDR_VAR 0 1
7508: PUSH
7509: LD_INT 22
7511: PUSH
7512: LD_INT 3
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 30
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: PUSH
7538: LD_INT 1
7540: ARRAY
7541: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 274
7551: PPUSH
7552: LD_INT 1
7554: PPUSH
7555: LD_INT 6000
7557: PPUSH
7558: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 274
7571: PPUSH
7572: LD_INT 2
7574: PPUSH
7575: LD_INT 600
7577: PPUSH
7578: CALL_OW 276
// end ;
7582: PPOPN 1
7584: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7585: LD_INT 0
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// units := ru_force ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_EXP 29
7602: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7603: LD_ADDR_VAR 0 6
7607: PUSH
7608: LD_INT 22
7610: PUSH
7611: LD_INT 3
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 30
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: ST_TO_ADDR
// ru_force := [ ] ;
7637: LD_ADDR_EXP 29
7641: PUSH
7642: EMPTY
7643: ST_TO_ADDR
// if not teleport then
7644: LD_VAR 0 6
7648: NOT
7649: IFFALSE 7691
// begin for i in units do
7651: LD_ADDR_VAR 0 5
7655: PUSH
7656: LD_VAR 0 3
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7687
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7664: LD_VAR 0 5
7668: PPUSH
7669: LD_INT 150
7671: PPUSH
7672: LD_INT 65
7674: PPUSH
7675: LD_INT 12
7677: PPUSH
7678: LD_INT 1
7680: PPUSH
7681: CALL_OW 483
7685: GO 7661
7687: POP
7688: POP
// end else
7689: GO 7786
// begin repeat for i = 1 to units do
7691: LD_ADDR_VAR 0 5
7695: PUSH
7696: DOUBLE
7697: LD_INT 1
7699: DEC
7700: ST_TO_ADDR
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_TO
7707: IFFALSE 7755
// if IsInArea ( units [ i ] , ru_base ) then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_VAR 0 5
7718: ARRAY
7719: PPUSH
7720: LD_INT 9
7722: PPUSH
7723: CALL_OW 308
7727: IFFALSE 7753
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7729: LD_VAR 0 3
7733: PUSH
7734: LD_VAR 0 5
7738: ARRAY
7739: PPUSH
7740: LD_VAR 0 6
7744: PUSH
7745: LD_INT 1
7747: ARRAY
7748: PPUSH
7749: CALL_OW 120
7753: GO 7706
7755: POP
7756: POP
// wait ( 0 0$10 ) ;
7757: LD_INT 350
7759: PPUSH
7760: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7764: LD_VAR 0 3
7768: PPUSH
7769: LD_INT 95
7771: PUSH
7772: LD_INT 9
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 72
7783: NOT
7784: IFFALSE 7691
// end ; p := rand ( 1 , 2 ) ;
7786: LD_ADDR_VAR 0 4
7790: PUSH
7791: LD_INT 1
7793: PPUSH
7794: LD_INT 2
7796: PPUSH
7797: CALL_OW 12
7801: ST_TO_ADDR
// case p of 1 :
7802: LD_VAR 0 4
7806: PUSH
7807: LD_INT 1
7809: DOUBLE
7810: EQUAL
7811: IFTRUE 7815
7813: GO 7869
7815: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7816: LD_ADDR_VAR 0 2
7820: PUSH
7821: LD_INT 159
7823: PUSH
7824: LD_INT 71
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 152
7833: PUSH
7834: LD_INT 99
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 107
7843: PUSH
7844: LD_INT 119
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 104
7853: PUSH
7854: LD_INT 127
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: ST_TO_ADDR
7867: GO 7932
7869: LD_INT 2
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7877
7875: GO 7931
7877: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_INT 116
7885: PUSH
7886: LD_INT 36
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_INT 52
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 53
7905: PUSH
7906: LD_INT 67
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 58
7915: PUSH
7916: LD_INT 107
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: ST_TO_ADDR
7929: GO 7932
7931: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7932: LD_INT 22
7934: PUSH
7935: LD_INT 7
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PUSH
7947: LD_VAR 0 4
7951: PUSH
7952: LD_INT 1
7954: GREATER
7955: AND
7956: IFFALSE 7987
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7958: LD_ADDR_VAR 0 2
7962: PUSH
7963: LD_INT 116
7965: PUSH
7966: LD_INT 36
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_INT 52
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7987: LD_INT 35
7989: PPUSH
7990: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7994: LD_VAR 0 3
7998: PPUSH
7999: LD_VAR 0 2
8003: PPUSH
8004: CALL 78068 0 2
8008: NOT
8009: IFFALSE 7987
// end ; end_of_file
8011: LD_VAR 0 1
8015: RET
// export function RemoveLegion ; var i ; begin
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_INT 8
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PUSH
8040: FOR_IN
8041: IFFALSE 8054
// RemoveUnit ( i ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: CALL_OW 64
8052: GO 8040
8054: POP
8055: POP
// end ;
8056: LD_VAR 0 1
8060: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8061: LD_INT 0
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8073: LD_ADDR_VAR 0 6
8077: PUSH
8078: LD_INT 22
8080: PUSH
8081: LD_INT 8
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 30
8090: PUSH
8091: LD_INT 1
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: PUSH
8107: LD_INT 1
8109: ARRAY
8110: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8111: LD_ADDR_VAR 0 8
8115: PUSH
8116: LD_INT 22
8118: PUSH
8119: LD_INT 8
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 30
8128: PUSH
8129: LD_INT 3
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 69
8144: PUSH
8145: LD_INT 1
8147: ARRAY
8148: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 8
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 6
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 8
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_INT 1
8203: ARRAY
8204: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8205: LD_ADDR_VAR 0 10
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 32
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: ST_TO_ADDR
// uc_side := 8 ;
8239: LD_ADDR_OWVAR 20
8243: PUSH
8244: LD_INT 8
8246: ST_TO_ADDR
// uc_nation := nation_arabian ;
8247: LD_ADDR_OWVAR 21
8251: PUSH
8252: LD_INT 2
8254: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8255: LD_ADDR_EXP 38
8259: PUSH
8260: LD_INT 5
8262: PUSH
8263: LD_INT 6
8265: PUSH
8266: LD_INT 7
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: LD_OWVAR 67
8278: ARRAY
8279: ST_TO_ADDR
// legion_blist := [ ] ;
8280: LD_ADDR_EXP 40
8284: PUSH
8285: EMPTY
8286: ST_TO_ADDR
// legion_vlist := [ ] ;
8287: LD_ADDR_EXP 41
8291: PUSH
8292: EMPTY
8293: ST_TO_ADDR
// legion_force := [ ] ;
8294: LD_ADDR_EXP 37
8298: PUSH
8299: EMPTY
8300: ST_TO_ADDR
// legion_enemy := - 1 ;
8301: LD_ADDR_EXP 42
8305: PUSH
8306: LD_INT 1
8308: NEG
8309: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8310: LD_VAR 0 6
8314: PPUSH
8315: CALL_OW 274
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: LD_INT 10000
8325: PPUSH
8326: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8330: LD_VAR 0 6
8334: PPUSH
8335: CALL_OW 274
8339: PPUSH
8340: LD_INT 3
8342: PPUSH
8343: LD_INT 1000
8345: PPUSH
8346: CALL_OW 277
// for i = 1 to l_towers do
8350: LD_ADDR_VAR 0 3
8354: PUSH
8355: DOUBLE
8356: LD_INT 1
8358: DEC
8359: ST_TO_ADDR
8360: LD_VAR 0 10
8364: PUSH
8365: FOR_TO
8366: IFFALSE 8415
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8368: LD_INT 0
8370: PPUSH
8371: LD_INT 1
8373: PPUSH
8374: LD_EXP 38
8378: PPUSH
8379: CALL_OW 380
// un := CreateHuman ;
8383: LD_ADDR_VAR 0 2
8387: PUSH
8388: CALL_OW 44
8392: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8393: LD_VAR 0 2
8397: PPUSH
8398: LD_VAR 0 10
8402: PUSH
8403: LD_VAR 0 3
8407: ARRAY
8408: PPUSH
8409: CALL_OW 52
// end ;
8413: GO 8365
8415: POP
8416: POP
// for i = 1 to 4 do
8417: LD_ADDR_VAR 0 3
8421: PUSH
8422: DOUBLE
8423: LD_INT 1
8425: DEC
8426: ST_TO_ADDR
8427: LD_INT 4
8429: PUSH
8430: FOR_TO
8431: IFFALSE 8524
// for p = 1 to 2 do
8433: LD_ADDR_VAR 0 7
8437: PUSH
8438: DOUBLE
8439: LD_INT 1
8441: DEC
8442: ST_TO_ADDR
8443: LD_INT 2
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8520
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8449: LD_INT 0
8451: PPUSH
8452: LD_INT 8
8454: PPUSH
8455: LD_EXP 38
8459: PPUSH
8460: CALL_OW 380
// un := CreateHuman ;
8464: LD_ADDR_VAR 0 2
8468: PUSH
8469: CALL_OW 44
8473: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_INT 22
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 30
8491: PUSH
8492: LD_INT 5
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL_OW 69
8507: PUSH
8508: LD_VAR 0 7
8512: ARRAY
8513: PPUSH
8514: CALL_OW 52
// end ;
8518: GO 8446
8520: POP
8521: POP
8522: GO 8430
8524: POP
8525: POP
// for i = 1 to 4 do
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_INT 4
8538: PUSH
8539: FOR_TO
8540: IFFALSE 8583
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8542: LD_INT 0
8544: PPUSH
8545: LD_INT 4
8547: PPUSH
8548: LD_EXP 38
8552: PPUSH
8553: CALL_OW 380
// un := CreateHuman ;
8557: LD_ADDR_VAR 0 2
8561: PUSH
8562: CALL_OW 44
8566: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8567: LD_VAR 0 2
8571: PPUSH
8572: LD_VAR 0 9
8576: PPUSH
8577: CALL_OW 52
// end ;
8581: GO 8539
8583: POP
8584: POP
// for i = 1 to 4 do
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_INT 4
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8642
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8601: LD_INT 0
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_EXP 38
8611: PPUSH
8612: CALL_OW 380
// un := CreateHuman ;
8616: LD_ADDR_VAR 0 2
8620: PUSH
8621: CALL_OW 44
8625: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8626: LD_VAR 0 2
8630: PPUSH
8631: LD_VAR 0 8
8635: PPUSH
8636: CALL_OW 52
// end ;
8640: GO 8598
8642: POP
8643: POP
// for i = 1 to 3 do
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: DOUBLE
8650: LD_INT 1
8652: DEC
8653: ST_TO_ADDR
8654: LD_INT 3
8656: PUSH
8657: FOR_TO
8658: IFFALSE 8701
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8660: LD_INT 0
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: LD_EXP 38
8670: PPUSH
8671: CALL_OW 380
// un := CreateHuman ;
8675: LD_ADDR_VAR 0 2
8679: PUSH
8680: CALL_OW 44
8684: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8685: LD_VAR 0 2
8689: PPUSH
8690: LD_VAR 0 6
8694: PPUSH
8695: CALL_OW 52
// end ;
8699: GO 8657
8701: POP
8702: POP
// for i = 1 to 3 do
8703: LD_ADDR_VAR 0 3
8707: PUSH
8708: DOUBLE
8709: LD_INT 1
8711: DEC
8712: ST_TO_ADDR
8713: LD_INT 3
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8827
// begin vc_chassis := ar_half_tracked ;
8719: LD_ADDR_OWVAR 37
8723: PUSH
8724: LD_INT 14
8726: ST_TO_ADDR
// vc_engine := engine_siberite ;
8727: LD_ADDR_OWVAR 39
8731: PUSH
8732: LD_INT 3
8734: ST_TO_ADDR
// vc_control := control_manual ;
8735: LD_ADDR_OWVAR 38
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8743: LD_ADDR_OWVAR 40
8747: PUSH
8748: LD_INT 31
8750: ST_TO_ADDR
// veh := CreateVehicle ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: CALL_OW 45
8760: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8761: LD_VAR 0 5
8765: PPUSH
8766: LD_INT 212
8768: PPUSH
8769: LD_INT 135
8771: PPUSH
8772: LD_INT 5
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8782: LD_INT 0
8784: PPUSH
8785: LD_INT 3
8787: PPUSH
8788: LD_EXP 38
8792: PUSH
8793: LD_INT 1
8795: PLUS
8796: PPUSH
8797: CALL_OW 380
// un := CreateHuman ;
8801: LD_ADDR_VAR 0 2
8805: PUSH
8806: CALL_OW 44
8810: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 5
8820: PPUSH
8821: CALL_OW 52
// end ;
8825: GO 8716
8827: POP
8828: POP
// PrepareSoldier ( false , 8 ) ;
8829: LD_INT 0
8831: PPUSH
8832: LD_INT 8
8834: PPUSH
8835: CALL_OW 381
// hc_class := class_sniper ;
8839: LD_ADDR_OWVAR 28
8843: PUSH
8844: LD_INT 5
8846: ST_TO_ADDR
// un := CreateHuman ;
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: CALL_OW 44
8856: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_INT 4
8864: PPUSH
8865: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_INT 136
8876: PPUSH
8877: LD_INT 92
8879: PPUSH
8880: CALL_OW 428
8884: PPUSH
8885: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8889: LD_INT 198
8891: PPUSH
8892: LD_INT 94
8894: PPUSH
8895: LD_INT 8
8897: PPUSH
8898: LD_INT 10
8900: PPUSH
8901: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8905: LD_INT 167
8907: PPUSH
8908: LD_INT 130
8910: PPUSH
8911: LD_INT 8
8913: PPUSH
8914: LD_INT 10
8916: PPUSH
8917: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8921: LD_ADDR_VAR 0 4
8925: PUSH
8926: LD_INT 24
8928: PPUSH
8929: LD_INT 0
8931: PPUSH
8932: CALL_OW 517
8936: ST_TO_ADDR
// legion_mines := [ ] ;
8937: LD_ADDR_EXP 39
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8944: LD_ADDR_VAR 0 3
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_VAR 0 4
8958: PUSH
8959: LD_INT 1
8961: ARRAY
8962: PUSH
8963: FOR_TO
8964: IFFALSE 9066
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8966: LD_VAR 0 4
8970: PUSH
8971: LD_INT 1
8973: ARRAY
8974: PUSH
8975: LD_VAR 0 3
8979: ARRAY
8980: PPUSH
8981: LD_VAR 0 4
8985: PUSH
8986: LD_INT 2
8988: ARRAY
8989: PUSH
8990: LD_VAR 0 3
8994: ARRAY
8995: PPUSH
8996: LD_INT 8
8998: PPUSH
8999: LD_INT 0
9001: PPUSH
9002: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9006: LD_ADDR_EXP 39
9010: PUSH
9011: LD_EXP 39
9015: PPUSH
9016: LD_EXP 39
9020: PUSH
9021: LD_INT 1
9023: PLUS
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 2
9047: ARRAY
9048: PUSH
9049: LD_VAR 0 3
9053: ARRAY
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 1
9063: ST_TO_ADDR
// end ;
9064: GO 8963
9066: POP
9067: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9068: LD_ADDR_EXP 41
9072: PUSH
9073: LD_INT 13
9075: PUSH
9076: LD_INT 3
9078: PUSH
9079: LD_INT 2
9081: PUSH
9082: LD_INT 32
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// end ;
9091: LD_VAR 0 1
9095: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9096: LD_EXP 39
9100: PUSH
9101: LD_INT 24
9103: PPUSH
9104: LD_INT 22
9106: PUSH
9107: LD_OWVAR 2
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: AND
9121: IFFALSE 9288
9123: GO 9125
9125: DISABLE
9126: LD_INT 0
9128: PPUSH
9129: PPUSH
// begin enable ;
9130: ENABLE
// for i := legion_mines downto 1 do
9131: LD_ADDR_VAR 0 1
9135: PUSH
9136: DOUBLE
9137: LD_EXP 39
9141: INC
9142: ST_TO_ADDR
9143: LD_INT 1
9145: PUSH
9146: FOR_DOWNTO
9147: IFFALSE 9286
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: LD_EXP 39
9158: PUSH
9159: LD_VAR 0 1
9163: ARRAY
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_EXP 39
9173: PUSH
9174: LD_VAR 0 1
9178: ARRAY
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL_OW 428
9188: ST_TO_ADDR
// if un then
9189: LD_VAR 0 2
9193: IFFALSE 9284
// if GetSide ( un ) = legion_enemy then
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 255
9204: PUSH
9205: LD_EXP 42
9209: EQUAL
9210: IFFALSE 9284
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9212: LD_EXP 39
9216: PUSH
9217: LD_VAR 0 1
9221: ARRAY
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PPUSH
9227: LD_EXP 39
9231: PUSH
9232: LD_VAR 0 1
9236: ARRAY
9237: PUSH
9238: LD_INT 2
9240: ARRAY
9241: PPUSH
9242: LD_INT 8
9244: PPUSH
9245: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9249: LD_ADDR_EXP 39
9253: PUSH
9254: LD_EXP 39
9258: PPUSH
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 3
9268: ST_TO_ADDR
// if not mine_vulc then
9269: LD_EXP 13
9273: NOT
9274: IFFALSE 9284
// mine_vulc := true ;
9276: LD_ADDR_EXP 13
9280: PUSH
9281: LD_INT 1
9283: ST_TO_ADDR
// end ; end ;
9284: GO 9146
9286: POP
9287: POP
// end ;
9288: PPOPN 2
9290: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9291: LD_OWVAR 1
9295: PUSH
9296: LD_INT 52500
9298: PUSH
9299: LD_INT 46200
9301: PUSH
9302: LD_INT 42000
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: LD_OWVAR 67
9314: ARRAY
9315: GREATEREQUAL
9316: IFFALSE 9494
9318: GO 9320
9320: DISABLE
9321: LD_INT 0
9323: PPUSH
9324: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: CALL_OW 469
9337: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9338: LD_VAR 0 1
9342: PUSH
9343: LD_INT 1
9345: ARRAY
9346: PUSH
9347: LD_INT 112
9349: EQUAL
9350: PUSH
9351: LD_VAR 0 1
9355: PUSH
9356: LD_INT 2
9358: ARRAY
9359: PUSH
9360: LD_INT 67
9362: EQUAL
9363: AND
9364: IFFALSE 9494
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_INT 22
9373: PUSH
9374: LD_INT 8
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 25
9383: PUSH
9384: LD_INT 2
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 69
9399: ST_TO_ADDR
// if not un then
9400: LD_VAR 0 2
9404: NOT
9405: IFFALSE 9409
// exit ;
9407: GO 9494
// un := un [ 1 ] ;
9409: LD_ADDR_VAR 0 2
9413: PUSH
9414: LD_VAR 0 2
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: ST_TO_ADDR
// if IsInUnit ( un ) then
9423: LD_VAR 0 2
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9443
// ComExitBuilding ( un ) ;
9434: LD_VAR 0 2
9438: PPUSH
9439: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_VAR 0 1
9452: PUSH
9453: LD_INT 1
9455: ARRAY
9456: PPUSH
9457: LD_VAR 0 1
9461: PUSH
9462: LD_INT 2
9464: ARRAY
9465: PPUSH
9466: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9470: LD_VAR 0 2
9474: PPUSH
9475: LD_INT 207
9477: PPUSH
9478: LD_INT 123
9480: PPUSH
9481: CALL_OW 171
// AddComUnload ( un ) ;
9485: LD_VAR 0 2
9489: PPUSH
9490: CALL_OW 219
// end ; end ;
9494: PPOPN 2
9496: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9497: LD_INT 22
9499: PUSH
9500: LD_INT 8
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 69
9511: PUSH
9512: LD_INT 0
9514: GREATER
9515: IFFALSE 11103
9517: GO 9519
9519: DISABLE
9520: LD_INT 0
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
// begin enable ;
9539: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9540: LD_ADDR_VAR 0 8
9544: PUSH
9545: LD_INT 22
9547: PUSH
9548: LD_INT 8
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 30
9557: PUSH
9558: LD_INT 1
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 69
9573: PUSH
9574: LD_INT 1
9576: ARRAY
9577: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9578: LD_ADDR_VAR 0 9
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 8
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 30
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9616: LD_ADDR_VAR 0 10
9620: PUSH
9621: LD_INT 22
9623: PUSH
9624: LD_INT 8
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: LD_INT 30
9636: PUSH
9637: LD_INT 6
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 30
9646: PUSH
9647: LD_INT 8
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PUSH
9668: LD_INT 1
9670: ARRAY
9671: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9672: LD_ADDR_VAR 0 11
9676: PUSH
9677: LD_INT 22
9679: PUSH
9680: LD_INT 8
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 30
9689: PUSH
9690: LD_INT 32
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9706: LD_ADDR_VAR 0 16
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_INT 8
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: LD_INT 25
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL_OW 69
9739: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9740: LD_ADDR_VAR 0 15
9744: PUSH
9745: LD_INT 22
9747: PUSH
9748: LD_INT 8
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 25
9757: PUSH
9758: LD_INT 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL_OW 69
9773: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9774: LD_ADDR_VAR 0 14
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 25
9791: PUSH
9792: LD_INT 3
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 69
9807: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9808: LD_ADDR_VAR 0 13
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 8
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 25
9825: PUSH
9826: LD_INT 4
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 69
9841: ST_TO_ADDR
// if l_eng then
9842: LD_VAR 0 16
9846: IFFALSE 10264
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9848: LD_ADDR_VAR 0 5
9852: PUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 22
9858: PUSH
9859: LD_INT 8
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 21
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 70
9884: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9885: LD_VAR 0 5
9889: PPUSH
9890: LD_INT 3
9892: PUSH
9893: LD_INT 24
9895: PUSH
9896: LD_INT 1000
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 72
9911: PUSH
9912: LD_INT 0
9914: GREATER
9915: IFFALSE 10049
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_VAR 0 5
9926: PPUSH
9927: LD_INT 3
9929: PUSH
9930: LD_INT 24
9932: PUSH
9933: LD_INT 1000
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 72
9948: ST_TO_ADDR
// for i = 1 to l_eng do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_VAR 0 16
9963: PUSH
9964: FOR_TO
9965: IFFALSE 10045
// if IsInUnit ( l_eng [ i ] ) then
9967: LD_VAR 0 16
9971: PUSH
9972: LD_VAR 0 2
9976: ARRAY
9977: PPUSH
9978: CALL_OW 310
9982: IFFALSE 10001
// ComExitBuilding ( l_eng [ i ] ) else
9984: LD_VAR 0 16
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: CALL_OW 122
9999: GO 10043
// if not HasTask ( l_eng [ i ] ) then
10001: LD_VAR 0 16
10005: PUSH
10006: LD_VAR 0 2
10010: ARRAY
10011: PPUSH
10012: CALL_OW 314
10016: NOT
10017: IFFALSE 10043
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10019: LD_VAR 0 16
10023: PUSH
10024: LD_VAR 0 2
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: CALL_OW 130
10043: GO 9964
10045: POP
10046: POP
// end else
10047: GO 10264
// begin if legion_blist > 0 then
10049: LD_EXP 40
10053: PUSH
10054: LD_INT 0
10056: GREATER
10057: IFFALSE 10186
// begin for i = 1 to l_eng do
10059: LD_ADDR_VAR 0 2
10063: PUSH
10064: DOUBLE
10065: LD_INT 1
10067: DEC
10068: ST_TO_ADDR
10069: LD_VAR 0 16
10073: PUSH
10074: FOR_TO
10075: IFFALSE 10182
// if IsInUnit ( l_eng [ i ] ) then
10077: LD_VAR 0 16
10081: PUSH
10082: LD_VAR 0 2
10086: ARRAY
10087: PPUSH
10088: CALL_OW 310
10092: IFFALSE 10111
// ComExitBuilding ( l_eng [ i ] ) else
10094: LD_VAR 0 16
10098: PUSH
10099: LD_VAR 0 2
10103: ARRAY
10104: PPUSH
10105: CALL_OW 122
10109: GO 10180
// if not HasTask ( l_eng [ i ] ) then
10111: LD_VAR 0 16
10115: PUSH
10116: LD_VAR 0 2
10120: ARRAY
10121: PPUSH
10122: CALL_OW 314
10126: NOT
10127: IFFALSE 10180
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10129: LD_VAR 0 16
10133: PUSH
10134: LD_VAR 0 2
10138: ARRAY
10139: PPUSH
10140: LD_EXP 40
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PPUSH
10149: LD_EXP 40
10153: PUSH
10154: LD_INT 2
10156: ARRAY
10157: PPUSH
10158: LD_EXP 40
10162: PUSH
10163: LD_INT 3
10165: ARRAY
10166: PPUSH
10167: LD_EXP 40
10171: PUSH
10172: LD_INT 4
10174: ARRAY
10175: PPUSH
10176: CALL_OW 145
10180: GO 10074
10182: POP
10183: POP
// end else
10184: GO 10264
// for i = 1 to l_eng do
10186: LD_ADDR_VAR 0 2
10190: PUSH
10191: DOUBLE
10192: LD_INT 1
10194: DEC
10195: ST_TO_ADDR
10196: LD_VAR 0 16
10200: PUSH
10201: FOR_TO
10202: IFFALSE 10262
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10204: LD_VAR 0 16
10208: PUSH
10209: LD_VAR 0 2
10213: ARRAY
10214: PPUSH
10215: CALL_OW 310
10219: NOT
10220: PUSH
10221: LD_VAR 0 16
10225: PUSH
10226: LD_VAR 0 2
10230: ARRAY
10231: PPUSH
10232: CALL_OW 314
10236: NOT
10237: AND
10238: IFFALSE 10260
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10240: LD_VAR 0 16
10244: PUSH
10245: LD_VAR 0 2
10249: ARRAY
10250: PPUSH
10251: LD_VAR 0 8
10255: PPUSH
10256: CALL_OW 120
10260: GO 10201
10262: POP
10263: POP
// end ; end ; if l_factory then
10264: LD_VAR 0 9
10268: IFFALSE 10668
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10270: LD_INT 22
10272: PUSH
10273: LD_INT 8
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 33
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: LD_INT 61
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: PPUSH
10308: CALL_OW 69
10312: PUSH
10313: LD_INT 0
10315: GREATER
10316: PUSH
10317: LD_INT 22
10319: PUSH
10320: LD_INT 8
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 34
10329: PUSH
10330: LD_INT 31
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PPUSH
10341: CALL_OW 69
10345: PUSH
10346: LD_INT 0
10348: GREATER
10349: AND
10350: IFFALSE 10470
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10352: LD_INT 22
10354: PUSH
10355: LD_INT 8
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 33
10364: PUSH
10365: LD_INT 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 3
10374: PUSH
10375: LD_INT 61
10377: PUSH
10378: EMPTY
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 69
10394: PUSH
10395: LD_INT 1
10397: ARRAY
10398: PPUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 8
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 34
10411: PUSH
10412: LD_INT 31
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 34
10443: PUSH
10444: LD_INT 31
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: PPUSH
10460: CALL_OW 12
10464: ARRAY
10465: PPUSH
10466: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10470: LD_EXP 41
10474: PUSH
10475: LD_INT 0
10477: GREATER
10478: PUSH
10479: LD_VAR 0 9
10483: PPUSH
10484: CALL_OW 461
10488: PUSH
10489: LD_INT 2
10491: EQUAL
10492: AND
10493: IFFALSE 10578
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10495: LD_VAR 0 9
10499: PPUSH
10500: LD_EXP 41
10504: PUSH
10505: LD_INT 1
10507: ARRAY
10508: PPUSH
10509: LD_EXP 41
10513: PUSH
10514: LD_INT 2
10516: ARRAY
10517: PPUSH
10518: LD_EXP 41
10522: PUSH
10523: LD_INT 3
10525: ARRAY
10526: PPUSH
10527: LD_EXP 41
10531: PUSH
10532: LD_INT 4
10534: ARRAY
10535: PPUSH
10536: CALL_OW 125
// for i = 1 to 4 do
10540: LD_ADDR_VAR 0 2
10544: PUSH
10545: DOUBLE
10546: LD_INT 1
10548: DEC
10549: ST_TO_ADDR
10550: LD_INT 4
10552: PUSH
10553: FOR_TO
10554: IFFALSE 10576
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10556: LD_ADDR_EXP 41
10560: PUSH
10561: LD_EXP 41
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 3
10573: ST_TO_ADDR
10574: GO 10553
10576: POP
10577: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10578: LD_VAR 0 11
10582: PPUSH
10583: LD_INT 35
10585: PUSH
10586: LD_INT 0
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 72
10597: PUSH
10598: LD_INT 0
10600: GREATER
10601: PUSH
10602: LD_VAR 0 9
10606: PPUSH
10607: CALL_OW 461
10611: PUSH
10612: LD_INT 2
10614: EQUAL
10615: AND
10616: IFFALSE 10668
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10618: LD_VAR 0 11
10622: PPUSH
10623: LD_INT 35
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PPUSH
10633: CALL_OW 72
10637: PUSH
10638: LD_INT 1
10640: ARRAY
10641: PPUSH
10642: LD_INT 28
10644: PUSH
10645: LD_INT 27
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 1
10654: PPUSH
10655: LD_INT 2
10657: PPUSH
10658: CALL_OW 12
10662: ARRAY
10663: PPUSH
10664: CALL_OW 148
// end ; if legion_enemy > 0 then
10668: LD_EXP 42
10672: PUSH
10673: LD_INT 0
10675: GREATER
10676: IFFALSE 10961
// begin if tick mod 11 11$00 = 0 then
10678: LD_OWVAR 1
10682: PUSH
10683: LD_INT 23100
10685: MOD
10686: PUSH
10687: LD_INT 0
10689: EQUAL
10690: IFFALSE 10942
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10692: LD_ADDR_EXP 41
10696: PUSH
10697: LD_EXP 41
10701: PUSH
10702: LD_INT 13
10704: PUSH
10705: LD_INT 1
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: ADD
10716: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10717: LD_ADDR_EXP 41
10721: PUSH
10722: LD_EXP 41
10726: PUSH
10727: LD_INT 28
10729: PUSH
10730: LD_INT 27
10732: PUSH
10733: LD_INT 29
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ADD
10753: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10754: LD_ADDR_EXP 41
10758: PUSH
10759: LD_EXP 41
10763: PUSH
10764: LD_INT 13
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: ADD
10778: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10779: LD_ADDR_EXP 41
10783: PUSH
10784: LD_EXP 41
10788: PUSH
10789: LD_INT 28
10791: PUSH
10792: LD_INT 27
10794: PUSH
10795: LD_INT 29
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 1
10805: PPUSH
10806: LD_INT 3
10808: PPUSH
10809: CALL_OW 12
10813: ARRAY
10814: ADD
10815: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10816: LD_ADDR_EXP 41
10820: PUSH
10821: LD_EXP 41
10825: PUSH
10826: LD_INT 13
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: ADD
10840: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10841: LD_ADDR_EXP 41
10845: PUSH
10846: LD_EXP 41
10850: PUSH
10851: LD_INT 28
10853: PUSH
10854: LD_EXP 65
10858: PUSH
10859: LD_INT 29
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 1
10869: PPUSH
10870: LD_INT 3
10872: PPUSH
10873: CALL_OW 12
10877: ARRAY
10878: ADD
10879: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10880: LD_ADDR_EXP 41
10884: PUSH
10885: LD_EXP 41
10889: PUSH
10890: LD_INT 13
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: ADD
10904: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10905: LD_ADDR_EXP 41
10909: PUSH
10910: LD_EXP 41
10914: PUSH
10915: LD_INT 28
10917: PUSH
10918: LD_INT 27
10920: PUSH
10921: LD_INT 29
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 1
10931: PPUSH
10932: LD_INT 3
10934: PPUSH
10935: CALL_OW 12
10939: ARRAY
10940: ADD
10941: ST_TO_ADDR
// end ; if legion_force >= 8 then
10942: LD_EXP 37
10946: PUSH
10947: LD_INT 8
10949: GREATEREQUAL
10950: IFFALSE 10961
// RaiseSailEvent ( event_legion_attack ) ;
10952: LD_EXP 21
10956: PPUSH
10957: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10961: LD_INT 22
10963: PUSH
10964: LD_INT 8
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 34
10973: PUSH
10974: LD_INT 32
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PPUSH
10985: CALL_OW 69
10989: IFFALSE 11103
// begin if l_cargo = false then
10991: LD_VAR 0 17
10995: PUSH
10996: LD_INT 0
10998: EQUAL
10999: IFFALSE 11035
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11001: LD_ADDR_VAR 0 17
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 8
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 34
11018: PUSH
11019: LD_INT 32
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: ST_TO_ADDR
// if l_cargo then
11035: LD_VAR 0 17
11039: IFFALSE 11103
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11041: LD_ADDR_VAR 0 7
11045: PUSH
11046: LD_INT 14
11048: PPUSH
11049: CALL_OW 435
11053: ST_TO_ADDR
// if cr > 0 then
11054: LD_VAR 0 7
11058: PUSH
11059: LD_INT 0
11061: GREATER
11062: IFFALSE 11103
// if not HasTask ( l_cargo ) then
11064: LD_VAR 0 17
11068: PPUSH
11069: CALL_OW 314
11073: NOT
11074: IFFALSE 11103
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11076: LD_VAR 0 17
11080: PPUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PPUSH
11090: LD_VAR 0 7
11094: PUSH
11095: LD_INT 2
11097: ARRAY
11098: PPUSH
11099: CALL_OW 117
// end ; end ; end ;
11103: PPOPN 17
11105: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11106: LD_OWVAR 67
11110: PUSH
11111: LD_INT 1
11113: GREATER
11114: IFFALSE 11319
11116: GO 11118
11118: DISABLE
11119: LD_INT 0
11121: PPUSH
11122: PPUSH
11123: PPUSH
11124: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11125: LD_INT 35
11127: PPUSH
11128: LD_INT 12635
11130: PPUSH
11131: CALL_OW 12
11135: PPUSH
11136: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11140: LD_ADDR_VAR 0 2
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 8
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: ST_TO_ADDR
// p := 1 ;
11174: LD_ADDR_VAR 0 4
11178: PUSH
11179: LD_INT 1
11181: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11182: LD_ADDR_VAR 0 3
11186: PUSH
11187: LD_INT 116
11189: PUSH
11190: LD_INT 139
11192: PUSH
11193: LD_INT 69
11195: PUSH
11196: LD_INT 13
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: ST_TO_ADDR
// for i = 1 to 2 do
11205: LD_ADDR_VAR 0 1
11209: PUSH
11210: DOUBLE
11211: LD_INT 1
11213: DEC
11214: ST_TO_ADDR
11215: LD_INT 2
11217: PUSH
11218: FOR_TO
11219: IFFALSE 11317
// begin if IsInUnit ( sci [ i ] ) then
11221: LD_VAR 0 2
11225: PUSH
11226: LD_VAR 0 1
11230: ARRAY
11231: PPUSH
11232: CALL_OW 310
11236: IFFALSE 11253
// ComExitBuilding ( sci [ i ] ) ;
11238: LD_VAR 0 2
11242: PUSH
11243: LD_VAR 0 1
11247: ARRAY
11248: PPUSH
11249: CALL_OW 122
// Wait ( 0 0$03 ) ;
11253: LD_INT 105
11255: PPUSH
11256: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11260: LD_VAR 0 2
11264: PUSH
11265: LD_VAR 0 1
11269: ARRAY
11270: PPUSH
11271: LD_VAR 0 3
11275: PUSH
11276: LD_VAR 0 4
11280: ARRAY
11281: PPUSH
11282: LD_VAR 0 3
11286: PUSH
11287: LD_VAR 0 4
11291: PUSH
11292: LD_INT 1
11294: PLUS
11295: ARRAY
11296: PPUSH
11297: CALL_OW 158
// p := p + 2 ;
11301: LD_ADDR_VAR 0 4
11305: PUSH
11306: LD_VAR 0 4
11310: PUSH
11311: LD_INT 2
11313: PLUS
11314: ST_TO_ADDR
// end ;
11315: GO 11218
11317: POP
11318: POP
// end ;
11319: PPOPN 4
11321: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11322: LD_INT 14
11324: PPUSH
11325: CALL_OW 435
11329: PUSH
11330: LD_INT 20
11332: LESS
11333: IFFALSE 11360
11335: GO 11337
11337: DISABLE
// begin enable ;
11338: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11339: LD_INT 1
11341: PPUSH
11342: LD_INT 5
11344: PPUSH
11345: CALL_OW 12
11349: PPUSH
11350: LD_INT 14
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 55
// end ;
11360: END
// export function LegionAttack ( ) ; var path , units ; begin
11361: LD_INT 0
11363: PPUSH
11364: PPUSH
11365: PPUSH
// units := legion_force ;
11366: LD_ADDR_VAR 0 3
11370: PUSH
11371: LD_EXP 37
11375: ST_TO_ADDR
// legion_force := [ ] ;
11376: LD_ADDR_EXP 37
11380: PUSH
11381: EMPTY
11382: ST_TO_ADDR
// case legion_enemy of 1 :
11383: LD_EXP 42
11387: PUSH
11388: LD_INT 1
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11439
11396: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: LD_INT 174
11404: PUSH
11405: LD_INT 135
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 153
11414: PUSH
11415: LD_INT 146
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 118
11424: PUSH
11425: LD_INT 122
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: ST_TO_ADDR
11437: GO 11542
11439: LD_INT 2
11441: DOUBLE
11442: EQUAL
11443: IFTRUE 11447
11445: GO 11490
11447: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11448: LD_ADDR_VAR 0 2
11452: PUSH
11453: LD_INT 164
11455: PUSH
11456: LD_INT 73
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 130
11465: PUSH
11466: LD_INT 48
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 96
11475: PUSH
11476: LD_INT 48
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: ST_TO_ADDR
11488: GO 11542
11490: LD_INT 7
11492: DOUBLE
11493: EQUAL
11494: IFTRUE 11498
11496: GO 11541
11498: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: LD_INT 174
11506: PUSH
11507: LD_INT 135
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 153
11516: PUSH
11517: LD_INT 146
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 118
11526: PUSH
11527: LD_INT 122
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: ST_TO_ADDR
11539: GO 11542
11541: POP
// repeat wait ( 0 0$1 ) ;
11542: LD_INT 35
11544: PPUSH
11545: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL 78068 0 2
11563: NOT
11564: IFFALSE 11542
// end ; end_of_file
11566: LD_VAR 0 1
11570: RET
// export function Action ; var un , gamemode , speaker ; begin
11571: LD_INT 0
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
// if debug then
11577: LD_EXP 15
11581: IFFALSE 11608
// begin Difficulty := 2 ;
11583: LD_ADDR_OWVAR 67
11587: PUSH
11588: LD_INT 2
11590: ST_TO_ADDR
// gamemode := 3 ;
11591: LD_ADDR_VAR 0 3
11595: PUSH
11596: LD_INT 3
11598: ST_TO_ADDR
// FogOff ( 7 ) ;
11599: LD_INT 7
11601: PPUSH
11602: CALL_OW 344
// end else
11606: GO 11634
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11608: LD_ADDR_OWVAR 67
11612: PUSH
11613: LD_INT 0
11615: PPUSH
11616: CALL_OW 426
11620: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11621: LD_ADDR_VAR 0 3
11625: PUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 426
11633: ST_TO_ADDR
// end ; if gamemode = 1 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 1
11641: EQUAL
11642: IFFALSE 11666
// begin your_side := 1 ;
11644: LD_ADDR_OWVAR 2
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// legion_enemy := 1 ;
11652: LD_ADDR_EXP 42
11656: PUSH
11657: LD_INT 1
11659: ST_TO_ADDR
// PrepareAmerican ;
11660: CALL 265 0 0
// end else
11664: GO 11718
// if gamemode = 2 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 2
11673: EQUAL
11674: IFFALSE 11698
// begin your_side := 2 ;
11676: LD_ADDR_OWVAR 2
11680: PUSH
11681: LD_INT 2
11683: ST_TO_ADDR
// legion_enemy := 2 ;
11684: LD_ADDR_EXP 42
11688: PUSH
11689: LD_INT 2
11691: ST_TO_ADDR
// PrepareArabian ;
11692: CALL 18984 0 0
// end else
11696: GO 11718
// begin your_side := 7 ;
11698: LD_ADDR_OWVAR 2
11702: PUSH
11703: LD_INT 7
11705: ST_TO_ADDR
// legion_enemy := 7 ;
11706: LD_ADDR_EXP 42
11710: PUSH
11711: LD_INT 7
11713: ST_TO_ADDR
// PrepareAlliance ;
11714: CALL 16168 0 0
// end ; if your_side = 1 then
11718: LD_OWVAR 2
11722: PUSH
11723: LD_INT 1
11725: EQUAL
11726: IFFALSE 12302
// begin Query ( QVul4 ) ;
11728: LD_STRING QVul4
11730: PPUSH
11731: CALL_OW 97
// InGameOn ;
11735: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11739: LD_INT 8
11741: PPUSH
11742: LD_INT 5
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: LD_INT 12
11750: PPUSH
11751: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11755: LD_INT 8
11757: PPUSH
11758: LD_INT 5
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11768: LD_INT 98
11770: PPUSH
11771: LD_INT 148
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: LD_INT 2
11779: PPUSH
11780: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11784: LD_INT 98
11786: PPUSH
11787: LD_INT 148
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11797: LD_INT 8
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: CALL_OW 86
// uc_side := 4 ;
11807: LD_ADDR_OWVAR 20
11811: PUSH
11812: LD_INT 4
11814: ST_TO_ADDR
// uc_nation := 1 ;
11815: LD_ADDR_OWVAR 21
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// hc_importance := 0 ;
11823: LD_ADDR_OWVAR 32
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: LD_EXP 26
11841: PPUSH
11842: CALL_OW 380
// un := CreateHuman ;
11846: LD_ADDR_VAR 0 2
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11856: LD_VAR 0 2
11860: PPUSH
11861: LD_INT 19
11863: PPUSH
11864: LD_INT 23
11866: PPUSH
11867: LD_INT 0
11869: PPUSH
11870: CALL_OW 48
// hc_name := Stuart Carey ;
11874: LD_ADDR_OWVAR 26
11878: PUSH
11879: LD_STRING Stuart Carey
11881: ST_TO_ADDR
// hc_class := 1 ;
11882: LD_ADDR_OWVAR 28
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// hc_gallery := vulcano ;
11890: LD_ADDR_OWVAR 33
11894: PUSH
11895: LD_STRING vulcano
11897: ST_TO_ADDR
// hc_face_number := 1 ;
11898: LD_ADDR_OWVAR 34
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// us_guy := CreateHuman ;
11906: LD_ADDR_EXP 27
11910: PUSH
11911: CALL_OW 44
11915: ST_TO_ADDR
// InitHc ;
11916: CALL_OW 19
// if rand ( 0 , 1 ) then
11920: LD_INT 0
11922: PPUSH
11923: LD_INT 1
11925: PPUSH
11926: CALL_OW 12
11930: IFFALSE 11947
// PrepareHuman ( sex_male , 3 , 6 ) else
11932: LD_INT 1
11934: PPUSH
11935: LD_INT 3
11937: PPUSH
11938: LD_INT 6
11940: PPUSH
11941: CALL_OW 380
11945: GO 11960
// PrepareHuman ( sex_female , 4 , 8 ) ;
11947: LD_INT 2
11949: PPUSH
11950: LD_INT 4
11952: PPUSH
11953: LD_INT 8
11955: PPUSH
11956: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_INT 12
11967: PPUSH
11968: LD_INT 10
11970: PPUSH
11971: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11975: LD_EXP 24
11979: PPUSH
11980: LD_VAR 0 2
11984: PPUSH
11985: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11989: LD_INT 105
11991: PPUSH
11992: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
11996: LD_INT 4
11998: PPUSH
11999: LD_EXP 24
12003: PPUSH
12004: CALL_OW 292
12008: PUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: LD_INT 12
12016: PPUSH
12017: LD_INT 10
12019: PPUSH
12020: CALL_OW 307
12024: OR
12025: IFFALSE 11989
// ComTurnUnit ( un , us_commander ) ;
12027: LD_VAR 0 2
12031: PPUSH
12032: LD_EXP 24
12036: PPUSH
12037: CALL_OW 119
// if GetSex ( un ) = sex_male then
12041: LD_VAR 0 2
12045: PPUSH
12046: CALL_OW 258
12050: PUSH
12051: LD_INT 1
12053: EQUAL
12054: IFFALSE 12137
// begin Say ( un , VD-un1 ) ;
12056: LD_VAR 0 2
12060: PPUSH
12061: LD_STRING VD-un1
12063: PPUSH
12064: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12068: LD_EXP 24
12072: PPUSH
12073: LD_STRING VDc-1
12075: PPUSH
12076: CALL_OW 88
// Say ( un , VD-un2 ) ;
12080: LD_VAR 0 2
12084: PPUSH
12085: LD_STRING VD-un2
12087: PPUSH
12088: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12092: LD_EXP 24
12096: PPUSH
12097: LD_STRING VDc-2
12099: PPUSH
12100: CALL_OW 88
// Say ( un , VD-un3 ) ;
12104: LD_VAR 0 2
12108: PPUSH
12109: LD_STRING VD-un3
12111: PPUSH
12112: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12116: LD_INT 7
12118: PPUSH
12119: CALL_OW 67
// Say ( un , VD-un4 ) ;
12123: LD_VAR 0 2
12127: PPUSH
12128: LD_STRING VD-un4
12130: PPUSH
12131: CALL_OW 88
// end else
12135: GO 12216
// begin Say ( un , VD-unf1 ) ;
12137: LD_VAR 0 2
12141: PPUSH
12142: LD_STRING VD-unf1
12144: PPUSH
12145: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12149: LD_EXP 24
12153: PPUSH
12154: LD_STRING VDc-1
12156: PPUSH
12157: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12161: LD_VAR 0 2
12165: PPUSH
12166: LD_STRING VD-unf2
12168: PPUSH
12169: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12173: LD_EXP 24
12177: PPUSH
12178: LD_STRING VDc-2
12180: PPUSH
12181: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12185: LD_VAR 0 2
12189: PPUSH
12190: LD_STRING VD-unf3
12192: PPUSH
12193: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12197: LD_INT 7
12199: PPUSH
12200: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12204: LD_VAR 0 2
12208: PPUSH
12209: LD_STRING VD-unf4
12211: PPUSH
12212: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12216: LD_VAR 0 2
12220: PPUSH
12221: LD_INT 2
12223: PPUSH
12224: LD_INT 2
12226: PPUSH
12227: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12231: LD_EXP 24
12235: PPUSH
12236: LD_STRING VDc-3
12238: PPUSH
12239: CALL_OW 88
// InGameOff ;
12243: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12247: LD_STRING CVulc1
12249: PPUSH
12250: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12254: LD_INT 35
12256: PPUSH
12257: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 250
12270: PUSH
12271: LD_INT 2
12273: EQUAL
12274: PUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: CALL_OW 251
12284: PUSH
12285: LD_INT 2
12287: EQUAL
12288: AND
12289: IFFALSE 12254
// RemoveUnit ( un ) ;
12291: LD_VAR 0 2
12295: PPUSH
12296: CALL_OW 64
// end else
12300: GO 12679
// if your_side = 2 then
12302: LD_OWVAR 2
12306: PUSH
12307: LD_INT 2
12309: EQUAL
12310: IFFALSE 12526
// begin CenterNowOnUnits ( player_commander ) ;
12312: LD_EXP 11
12316: PPUSH
12317: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12321: LD_ADDR_VAR 0 4
12325: PUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_EXP 57
12359: DIFF
12360: ST_TO_ADDR
// if speaker then
12361: LD_VAR 0 4
12365: IFFALSE 12517
// begin InGameOn ;
12367: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12371: LD_EXP 57
12375: PPUSH
12376: LD_STRING VSd-1
12378: PPUSH
12379: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12383: LD_VAR 0 4
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: PPUSH
12392: CALL_OW 258
12396: PUSH
12397: LD_INT 1
12399: EQUAL
12400: IFFALSE 12420
// Say ( speaker [ 1 ] , VAd-1 ) else
12402: LD_VAR 0 4
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: LD_STRING VAd-1
12413: PPUSH
12414: CALL_OW 88
12418: GO 12436
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12420: LD_VAR 0 4
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: LD_STRING VAfd-1
12431: PPUSH
12432: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12436: LD_EXP 57
12440: PPUSH
12441: LD_STRING VSd-2
12443: PPUSH
12444: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12448: LD_VAR 0 4
12452: PUSH
12453: LD_INT 1
12455: ARRAY
12456: PPUSH
12457: CALL_OW 258
12461: PUSH
12462: LD_INT 1
12464: EQUAL
12465: IFFALSE 12485
// Say ( speaker [ 1 ] , VAd-2 ) else
12467: LD_VAR 0 4
12471: PUSH
12472: LD_INT 1
12474: ARRAY
12475: PPUSH
12476: LD_STRING VAd-2
12478: PPUSH
12479: CALL_OW 88
12483: GO 12501
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12485: LD_VAR 0 4
12489: PUSH
12490: LD_INT 1
12492: ARRAY
12493: PPUSH
12494: LD_STRING VAfd-2
12496: PPUSH
12497: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12501: LD_EXP 57
12505: PPUSH
12506: LD_STRING VSd-3
12508: PPUSH
12509: CALL_OW 88
// InGameOff ;
12513: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12517: LD_STRING CVulc5
12519: PPUSH
12520: CALL_OW 337
// end else
12524: GO 12679
// if your_side = 7 then
12526: LD_OWVAR 2
12530: PUSH
12531: LD_INT 7
12533: EQUAL
12534: IFFALSE 12679
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12536: LD_ADDR_VAR 0 4
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_INT 7
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 21
12553: PUSH
12554: LD_INT 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: PUSH
12570: LD_EXP 43
12574: DIFF
12575: ST_TO_ADDR
// if speaker then
12576: LD_VAR 0 4
12580: IFFALSE 12672
// begin CenterNowOnUnits ( al_commander ) ;
12582: LD_EXP 43
12586: PPUSH
12587: CALL_OW 87
// InGameOn ;
12591: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12595: LD_EXP 43
12599: PPUSH
12600: LD_STRING VPd-1
12602: PPUSH
12603: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12607: LD_VAR 0 4
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PPUSH
12616: CALL_OW 258
12620: IFFALSE 12640
// Say ( speaker [ 1 ] , VPpd-1 ) else
12622: LD_VAR 0 4
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: LD_STRING VPpd-1
12633: PPUSH
12634: CALL_OW 88
12638: GO 12656
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12640: LD_VAR 0 4
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: LD_STRING VPpdf-1
12651: PPUSH
12652: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12656: LD_EXP 43
12660: PPUSH
12661: LD_STRING VPd-2
12663: PPUSH
12664: CALL_OW 88
// InGameOff ;
12668: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12672: LD_STRING CVulc7
12674: PPUSH
12675: CALL_OW 337
// end ; SaveForQuickRestart ;
12679: CALL_OW 22
// end ;
12683: LD_VAR 0 1
12687: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12688: LD_INT 22
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: IFFALSE 12760
12718: GO 12720
12720: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12721: LD_STRING CVulc6
12723: PPUSH
12724: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12728: LD_INT 52500
12730: PUSH
12731: LD_INT 47250
12733: PUSH
12734: LD_INT 42000
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_OWVAR 67
12746: ARRAY
12747: PPUSH
12748: CALL_OW 67
// ru_can_attack := true ;
12752: LD_ADDR_EXP 3
12756: PUSH
12757: LD_INT 1
12759: ST_TO_ADDR
// end ;
12760: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12761: LD_INT 50
12763: PPUSH
12764: CALL_OW 255
12768: PUSH
12769: LD_INT 1
12771: EQUAL
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 2
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 3
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 30
12798: PUSH
12799: LD_INT 1
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: OR
12820: IFFALSE 13054
12822: GO 12824
12824: DISABLE
12825: LD_INT 0
12827: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12828: LD_STRING CVulc2
12830: PPUSH
12831: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12835: LD_ADDR_VAR 0 1
12839: PUSH
12840: LD_INT 22
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 25
12852: PUSH
12853: LD_INT 2
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PPUSH
12864: CALL_OW 69
12868: PUSH
12869: LD_EXP 24
12873: DIFF
12874: ST_TO_ADDR
// DialogueOn ;
12875: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12879: LD_INT 10
12881: PPUSH
12882: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12886: LD_VAR 0 1
12890: PUSH
12891: LD_INT 1
12893: ARRAY
12894: PPUSH
12895: CALL_OW 258
12899: PUSH
12900: LD_INT 1
12902: EQUAL
12903: IFFALSE 12923
// Say ( speaker [ 1 ] , VDb-1 ) else
12905: LD_VAR 0 1
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_STRING VDb-1
12916: PPUSH
12917: CALL_OW 88
12921: GO 12939
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12923: LD_VAR 0 1
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PPUSH
12932: LD_STRING VDbf-1
12934: PPUSH
12935: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12939: LD_INT 10
12941: PPUSH
12942: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: ARRAY
12954: PPUSH
12955: CALL_OW 258
12959: PUSH
12960: LD_INT 1
12962: EQUAL
12963: IFFALSE 12983
// Say ( speaker [ 1 ] , VDb-2 ) else
12965: LD_VAR 0 1
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: LD_STRING VDb-2
12976: PPUSH
12977: CALL_OW 88
12981: GO 12999
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PPUSH
12992: LD_STRING VDbf-2
12994: PPUSH
12995: CALL_OW 88
// DWait ( 0 0$01 ) ;
12999: LD_INT 35
13001: PPUSH
13002: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13006: LD_EXP 24
13010: PPUSH
13011: LD_STRING VDb-com1
13013: PPUSH
13014: CALL_OW 88
// DialogueOff ;
13018: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13022: LD_INT 44100
13024: PUSH
13025: LD_INT 36750
13027: PUSH
13028: LD_INT 31500
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: LD_OWVAR 67
13040: ARRAY
13041: PPUSH
13042: CALL_OW 67
// ru_can_attack := true ;
13046: LD_ADDR_EXP 3
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// end ;
13054: PPOPN 1
13056: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13057: LD_INT 22
13059: PUSH
13060: LD_INT 7
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: IFFALSE 13122
13087: GO 13089
13089: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13090: LD_INT 42000
13092: PUSH
13093: LD_INT 34650
13095: PUSH
13096: LD_INT 29400
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_OWVAR 67
13108: ARRAY
13109: PPUSH
13110: CALL_OW 67
// ru_can_attack := true ;
13114: LD_ADDR_EXP 3
13118: PUSH
13119: LD_INT 1
13121: ST_TO_ADDR
// end ;
13122: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13123: LD_INT 58
13125: PPUSH
13126: CALL_OW 255
13130: PUSH
13131: LD_INT 1
13133: EQUAL
13134: IFFALSE 13341
13136: GO 13138
13138: DISABLE
13139: LD_INT 0
13141: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13142: LD_ADDR_VAR 0 1
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 25
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 69
13175: ST_TO_ADDR
// DialogueOn ;
13176: CALL_OW 6
// if speaker then
13180: LD_VAR 0 1
13184: IFFALSE 13239
// if GetSex ( speaker [ 1 ] ) = sex_male then
13186: LD_VAR 0 1
13190: PUSH
13191: LD_INT 1
13193: ARRAY
13194: PPUSH
13195: CALL_OW 258
13199: PUSH
13200: LD_INT 1
13202: EQUAL
13203: IFFALSE 13223
// Say ( speaker [ 1 ] , VDe-1 ) else
13205: LD_VAR 0 1
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: PPUSH
13214: LD_STRING VDe-1
13216: PPUSH
13217: CALL_OW 88
13221: GO 13239
// Say ( speaker [ 1 ] , VDef-1 ) ;
13223: LD_VAR 0 1
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: PPUSH
13232: LD_STRING VDef-1
13234: PPUSH
13235: CALL_OW 88
// case Query ( SibNote ) of 1 :
13239: LD_STRING SibNote
13241: PPUSH
13242: CALL_OW 97
13246: PUSH
13247: LD_INT 1
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13258
13255: POP
// ; end ;
13256: GO 13259
13258: POP
// if speaker then
13259: LD_VAR 0 1
13263: IFFALSE 13318
// if GetSex ( speaker [ 1 ] ) = sex_male then
13265: LD_VAR 0 1
13269: PUSH
13270: LD_INT 1
13272: ARRAY
13273: PPUSH
13274: CALL_OW 258
13278: PUSH
13279: LD_INT 1
13281: EQUAL
13282: IFFALSE 13302
// Say ( speaker [ 1 ] , VDe-2 ) else
13284: LD_VAR 0 1
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PPUSH
13293: LD_STRING VDe-2
13295: PPUSH
13296: CALL_OW 88
13300: GO 13318
// Say ( speaker [ 1 ] , VDef-2 ) ;
13302: LD_VAR 0 1
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: PPUSH
13311: LD_STRING VDef-2
13313: PPUSH
13314: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13318: LD_EXP 24
13322: PPUSH
13323: LD_STRING VDc-4
13325: PPUSH
13326: CALL_OW 88
// DialogueOff ;
13330: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13334: LD_STRING CVulc3
13336: PPUSH
13337: CALL_OW 337
// end ;
13341: PPOPN 1
13343: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13344: LD_OWVAR 2
13348: PUSH
13349: LD_INT 1
13351: EQUAL
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 30
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 69
13381: PUSH
13382: LD_INT 0
13384: GREATER
13385: AND
13386: IFFALSE 13820
13388: GO 13390
13390: DISABLE
13391: LD_INT 0
13393: PPUSH
13394: PPUSH
13395: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13396: LD_INT 245
13398: PPUSH
13399: LD_INT 1295
13401: PPUSH
13402: CALL_OW 12
13406: PPUSH
13407: CALL_OW 67
// DialogueOn ;
13411: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13415: LD_EXP 27
13419: PPUSH
13420: LD_STRING VDG-1
13422: PPUSH
13423: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13427: LD_EXP 24
13431: PPUSH
13432: LD_STRING VDc-5
13434: PPUSH
13435: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13439: LD_EXP 27
13443: PPUSH
13444: LD_STRING VDG-2
13446: PPUSH
13447: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13451: LD_EXP 24
13455: PPUSH
13456: LD_STRING VDc-6
13458: PPUSH
13459: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13463: LD_EXP 27
13467: PPUSH
13468: LD_STRING VDG-3
13470: PPUSH
13471: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13475: LD_EXP 24
13479: PPUSH
13480: LD_STRING VDc-7
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13487: LD_EXP 27
13491: PPUSH
13492: LD_STRING VDG-4
13494: PPUSH
13495: CALL_OW 94
// DialogueOff ;
13499: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13503: LD_STRING CVulc4
13505: PPUSH
13506: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13510: LD_INT 18900
13512: PUSH
13513: LD_INT 21000
13515: PUSH
13516: LD_INT 23100
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PUSH
13524: LD_OWVAR 67
13528: ARRAY
13529: PPUSH
13530: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13534: LD_ADDR_VAR 0 1
13538: PUSH
13539: DOUBLE
13540: LD_INT 1
13542: DEC
13543: ST_TO_ADDR
13544: LD_INT 4
13546: PUSH
13547: LD_INT 5
13549: PUSH
13550: LD_INT 6
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_OWVAR 67
13562: ARRAY
13563: PUSH
13564: FOR_TO
13565: IFFALSE 13809
// begin uc_side := 1 ;
13567: LD_ADDR_OWVAR 20
13571: PUSH
13572: LD_INT 1
13574: ST_TO_ADDR
// uc_nation := 1 ;
13575: LD_ADDR_OWVAR 21
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13583: LD_INT 0
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: LD_INT 4
13591: PPUSH
13592: CALL_OW 12
13596: PPUSH
13597: LD_EXP 26
13601: PPUSH
13602: CALL_OW 380
// un := CreateHuman ;
13606: LD_ADDR_VAR 0 2
13610: PUSH
13611: CALL_OW 44
13615: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13616: LD_VAR 0 2
13620: PPUSH
13621: LD_INT 2
13623: PPUSH
13624: CALL_OW 233
// if GetClass ( un ) = 3 then
13628: LD_VAR 0 2
13632: PPUSH
13633: CALL_OW 257
13637: PUSH
13638: LD_INT 3
13640: EQUAL
13641: IFFALSE 13792
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13643: LD_ADDR_OWVAR 37
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 3
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 2
13665: MOD
13666: ARRAY
13667: ST_TO_ADDR
// vc_engine := engine_combustion ;
13668: LD_ADDR_OWVAR 39
13672: PUSH
13673: LD_INT 1
13675: ST_TO_ADDR
// vc_control := control_manual ;
13676: LD_ADDR_OWVAR 38
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13684: LD_ADDR_OWVAR 40
13688: PUSH
13689: LD_INT 9
13691: PUSH
13692: LD_INT 9
13694: PUSH
13695: LD_INT 5
13697: PUSH
13698: LD_INT 11
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 1
13709: PPUSH
13710: LD_INT 4
13712: PPUSH
13713: CALL_OW 12
13717: ARRAY
13718: ST_TO_ADDR
// veh := CreateVehicle ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: CALL_OW 45
13728: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13729: LD_VAR 0 3
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13741: LD_VAR 0 3
13745: PPUSH
13746: LD_INT 77
13748: PPUSH
13749: LD_INT 88
13751: PPUSH
13752: CALL_OW 12
13756: PPUSH
13757: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: LD_INT 0
13771: PPUSH
13772: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: CALL_OW 52
// end else
13790: GO 13807
// PlaceUnitArea ( un , start_north , false ) ;
13792: LD_VAR 0 2
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: CALL_OW 49
// end ;
13807: GO 13564
13809: POP
13810: POP
// CenterNowOnUnits ( un ) ;
13811: LD_VAR 0 2
13815: PPUSH
13816: CALL_OW 87
// end ;
13820: PPOPN 3
13822: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13823: LD_INT 21
13825: PPUSH
13826: LD_INT 22
13828: PUSH
13829: LD_OWVAR 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 70
13842: IFFALSE 14163
13844: GO 13846
13846: DISABLE
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 25
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 3
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 69
13926: PUSH
13927: LD_EXP 11
13931: DIFF
13932: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_VAR 0 2
13942: PPUSH
13943: LD_INT 112
13945: PPUSH
13946: LD_INT 67
13948: PPUSH
13949: CALL_OW 73
13953: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 255
13963: PUSH
13964: LD_INT 7
13966: EQUAL
13967: IFFALSE 14010
// if GetSex ( un ) = sex_male then
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 258
13978: PUSH
13979: LD_INT 1
13981: EQUAL
13982: IFFALSE 13998
// Say ( un , VD-find-al ) else
13984: LD_VAR 0 1
13988: PPUSH
13989: LD_STRING VD-find-al
13991: PPUSH
13992: CALL_OW 88
13996: GO 14010
// Say ( un , VD-find-al-f ) ;
13998: LD_VAR 0 1
14002: PPUSH
14003: LD_STRING VD-find-al-f
14005: PPUSH
14006: CALL_OW 88
// if GetSide ( un ) = 2 then
14010: LD_VAR 0 1
14014: PPUSH
14015: CALL_OW 255
14019: PUSH
14020: LD_INT 2
14022: EQUAL
14023: IFFALSE 14066
// if GetSex ( un ) = sex_male then
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 258
14034: PUSH
14035: LD_INT 1
14037: EQUAL
14038: IFFALSE 14054
// Say ( un , VD-find-ar ) else
14040: LD_VAR 0 1
14044: PPUSH
14045: LD_STRING VD-find-ar
14047: PPUSH
14048: CALL_OW 88
14052: GO 14066
// Say ( un , VD-find-ar-f ) ;
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_STRING VD-find-ar-f
14061: PPUSH
14062: CALL_OW 88
// if GetSide ( un ) = 1 then
14066: LD_VAR 0 1
14070: PPUSH
14071: CALL_OW 255
14075: PUSH
14076: LD_INT 1
14078: EQUAL
14079: IFFALSE 14146
// begin if GetSex ( un ) = sex_male then
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 258
14090: PUSH
14091: LD_INT 1
14093: EQUAL
14094: IFFALSE 14122
// begin Say ( un , VD-find-us ) ;
14096: LD_VAR 0 1
14100: PPUSH
14101: LD_STRING VD-find-us
14103: PPUSH
14104: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14108: LD_VAR 0 1
14112: PPUSH
14113: LD_STRING VD-find-us2
14115: PPUSH
14116: CALL_OW 88
// end else
14120: GO 14146
// begin Say ( un , VD-find-us-f ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_STRING VD-find-us-f
14129: PPUSH
14130: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_STRING VD-find-us2-f
14141: PPUSH
14142: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14146: LD_INT 10
14148: PPUSH
14149: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14153: LD_INT 112
14155: PPUSH
14156: LD_INT 67
14158: PPUSH
14159: CALL_OW 86
// end ;
14163: PPOPN 2
14165: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14166: LD_EXP 8
14170: IFFALSE 14672
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
// begin if your_side = 1 then
14178: LD_OWVAR 2
14182: PUSH
14183: LD_INT 1
14185: EQUAL
14186: IFFALSE 14367
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14188: LD_ADDR_VAR 0 1
14192: PUSH
14193: LD_INT 22
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 25
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: PUSH
14222: LD_EXP 24
14226: DIFF
14227: ST_TO_ADDR
// if not speaker then
14228: LD_VAR 0 1
14232: NOT
14233: IFFALSE 14237
// exit ;
14235: GO 14672
// if GetSex ( speaker [ 1 ] ) = sex_male then
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: ARRAY
14245: PPUSH
14246: CALL_OW 258
14250: PUSH
14251: LD_INT 1
14253: EQUAL
14254: IFFALSE 14274
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14256: LD_VAR 0 1
14260: PUSH
14261: LD_INT 1
14263: ARRAY
14264: PPUSH
14265: LD_STRING VD-us-sci-art-1
14267: PPUSH
14268: CALL_OW 88
14272: GO 14290
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: PPUSH
14283: LD_STRING VD-us-fsci-art-1
14285: PPUSH
14286: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14290: LD_EXP 24
14294: PPUSH
14295: LD_STRING VDc-art1
14297: PPUSH
14298: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 1
14309: ARRAY
14310: PPUSH
14311: CALL_OW 258
14315: PUSH
14316: LD_INT 1
14318: EQUAL
14319: IFFALSE 14339
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14321: LD_VAR 0 1
14325: PUSH
14326: LD_INT 1
14328: ARRAY
14329: PPUSH
14330: LD_STRING VD-us-sci-art-2
14332: PPUSH
14333: CALL_OW 88
14337: GO 14355
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14339: LD_VAR 0 1
14343: PUSH
14344: LD_INT 1
14346: ARRAY
14347: PPUSH
14348: LD_STRING VD-us-fsci-art-2
14350: PPUSH
14351: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14355: LD_EXP 24
14359: PPUSH
14360: LD_STRING VDc-art2
14362: PPUSH
14363: CALL_OW 88
// end ; if your_side = 2 then
14367: LD_OWVAR 2
14371: PUSH
14372: LD_INT 2
14374: EQUAL
14375: IFFALSE 14479
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 25
14394: PUSH
14395: LD_INT 4
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 69
14410: PUSH
14411: LD_EXP 57
14415: DIFF
14416: ST_TO_ADDR
// if not speaker then
14417: LD_VAR 0 1
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14672
// if GetSex ( speaker [ 1 ] ) = sex_male then
14426: LD_VAR 0 1
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 258
14439: PUSH
14440: LD_INT 1
14442: EQUAL
14443: IFFALSE 14463
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14445: LD_VAR 0 1
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: LD_STRING VD-ar-sci-art-1
14456: PPUSH
14457: CALL_OW 88
14461: GO 14479
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14463: LD_VAR 0 1
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_STRING VD-ar-fsci-art-1
14474: PPUSH
14475: CALL_OW 88
// end ; if your_side = 7 then
14479: LD_OWVAR 2
14483: PUSH
14484: LD_INT 7
14486: EQUAL
14487: IFFALSE 14672
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_INT 7
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 25
14506: PUSH
14507: LD_INT 4
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: PUSH
14523: LD_EXP 43
14527: DIFF
14528: ST_TO_ADDR
// if speaker then
14529: LD_VAR 0 1
14533: IFFALSE 14665
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14535: LD_VAR 0 1
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PPUSH
14544: CALL_OW 258
14548: PUSH
14549: LD_INT 1
14551: EQUAL
14552: IFFALSE 14572
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14554: LD_VAR 0 1
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: LD_STRING VD-al-sci-art-1
14565: PPUSH
14566: CALL_OW 88
14570: GO 14588
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14572: LD_VAR 0 1
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: PPUSH
14581: LD_STRING VD-al-fsci-art-1
14583: PPUSH
14584: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14588: LD_EXP 43
14592: PPUSH
14593: LD_STRING VPd-art-1
14595: PPUSH
14596: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14600: LD_VAR 0 1
14604: PUSH
14605: LD_INT 1
14607: ARRAY
14608: PPUSH
14609: CALL_OW 258
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: IFFALSE 14637
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14619: LD_VAR 0 1
14623: PUSH
14624: LD_INT 1
14626: ARRAY
14627: PPUSH
14628: LD_STRING VD-al-sci-art-2
14630: PPUSH
14631: CALL_OW 88
14635: GO 14653
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14637: LD_VAR 0 1
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PPUSH
14646: LD_STRING VD-al-fsci-art-2
14648: PPUSH
14649: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14653: LD_EXP 43
14657: PPUSH
14658: LD_STRING VPd-art-2
14660: PPUSH
14661: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14665: LD_STRING CVulc7out
14667: PPUSH
14668: CALL_OW 337
// end ; end ;
14672: PPOPN 1
14674: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14675: LD_INT 22
14677: PUSH
14678: LD_OWVAR 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 101
14689: PUSH
14690: LD_INT 8
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PPUSH
14701: CALL_OW 69
14705: IFFALSE 14848
14707: GO 14709
14709: DISABLE
14710: LD_INT 0
14712: PPUSH
// begin if your_side = 1 then
14713: LD_OWVAR 2
14717: PUSH
14718: LD_INT 1
14720: EQUAL
14721: IFFALSE 14804
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: PUSH
14743: LD_EXP 24
14747: DIFF
14748: ST_TO_ADDR
// if speaker then
14749: LD_VAR 0 1
14753: IFFALSE 14804
// if GetSex ( speaker [ 1 ] ) then
14755: LD_VAR 0 1
14759: PUSH
14760: LD_INT 1
14762: ARRAY
14763: PPUSH
14764: CALL_OW 258
14768: IFFALSE 14788
// Say ( speaker [ 1 ] , VD-legion-us ) else
14770: LD_VAR 0 1
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PPUSH
14779: LD_STRING VD-legion-us
14781: PPUSH
14782: CALL_OW 88
14786: GO 14804
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14788: LD_VAR 0 1
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_STRING VD-legion-us-f
14799: PPUSH
14800: CALL_OW 88
// end ; if your_side = 2 then
14804: LD_OWVAR 2
14808: PUSH
14809: LD_INT 2
14811: EQUAL
14812: IFFALSE 14826
// Say ( ar_commander , VD-legion-ar ) ;
14814: LD_EXP 57
14818: PPUSH
14819: LD_STRING VD-legion-ar
14821: PPUSH
14822: CALL_OW 88
// if your_side = 7 then
14826: LD_OWVAR 2
14830: PUSH
14831: LD_INT 7
14833: EQUAL
14834: IFFALSE 14848
// Say ( al_commander , VD-legion-al ) ;
14836: LD_EXP 43
14840: PPUSH
14841: LD_STRING VD-legion-al
14843: PPUSH
14844: CALL_OW 88
// end ;
14848: PPOPN 1
14850: END
// every 0 0$01 trigger mine_vulc do
14851: LD_EXP 13
14855: IFFALSE 14872
14857: GO 14859
14859: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14860: LD_EXP 11
14864: PPUSH
14865: LD_STRING VD-vulc-mines
14867: PPUSH
14868: CALL_OW 88
// end ;
14872: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14873: LD_INT 22
14875: PUSH
14876: LD_INT 3
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: LD_INT 0
14890: EQUAL
14891: PUSH
14892: LD_OWVAR 2
14896: PUSH
14897: LD_INT 2
14899: NONEQUAL
14900: AND
14901: IFFALSE 14910
14903: GO 14905
14905: DISABLE
// Win ;
14906: CALL 14967 0 0
14910: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14911: LD_INT 2
14913: PUSH
14914: LD_INT 22
14916: PUSH
14917: LD_INT 8
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 69
14943: PUSH
14944: LD_INT 0
14946: EQUAL
14947: PUSH
14948: LD_OWVAR 2
14952: PUSH
14953: LD_INT 2
14955: EQUAL
14956: AND
14957: IFFALSE 14966
14959: GO 14961
14961: DISABLE
// Win ;
14962: CALL 14967 0 0
14966: END
// function Win ; var points ; begin
14967: LD_INT 0
14969: PPUSH
14970: PPUSH
// case Query ( VulcWin ) of 1 :
14971: LD_STRING VulcWin
14973: PPUSH
14974: CALL_OW 97
14978: PUSH
14979: LD_INT 1
14981: DOUBLE
14982: EQUAL
14983: IFTRUE 14987
14985: GO 14990
14987: POP
// ; end ;
14988: GO 14991
14990: POP
// if medal_enabled then
14991: LD_EXP 14
14995: IFFALSE 15009
// AddMedal ( vulc_1 , 1 ) else
14997: LD_STRING vulc_1
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: CALL_OW 101
15007: GO 15020
// AddMedal ( vulc_1 , - 1 ) ;
15009: LD_STRING vulc_1
15011: PPUSH
15012: LD_INT 1
15014: NEG
15015: PPUSH
15016: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15020: LD_INT 22
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 69
15034: PUSH
15035: LD_INT 0
15037: EQUAL
15038: IFFALSE 15052
// AddMedal ( vulc_2 , 1 ) else
15040: LD_STRING vulc_2
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 101
15050: GO 15063
// AddMedal ( vulc_2 , - 1 ) ;
15052: LD_STRING vulc_2
15054: PPUSH
15055: LD_INT 1
15057: NEG
15058: PPUSH
15059: CALL_OW 101
// points := CalculateCommanderPoints ;
15063: LD_ADDR_VAR 0 2
15067: PUSH
15068: CALL 2340 0 0
15072: ST_TO_ADDR
// if points >= 2000 then
15073: LD_VAR 0 2
15077: PUSH
15078: LD_INT 2000
15080: GREATEREQUAL
15081: IFFALSE 15095
// AddMedal ( vulc_3 , 2 ) else
15083: LD_STRING vulc_3
15085: PPUSH
15086: LD_INT 2
15088: PPUSH
15089: CALL_OW 101
15093: GO 15128
// if points >= 0 then
15095: LD_VAR 0 2
15099: PUSH
15100: LD_INT 0
15102: GREATEREQUAL
15103: IFFALSE 15117
// AddMedal ( vulc_3 , 1 ) else
15105: LD_STRING vulc_3
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 101
15115: GO 15128
// AddMedal ( vulc_3 , - 1 ) ;
15117: LD_STRING vulc_3
15119: PPUSH
15120: LD_INT 1
15122: NEG
15123: PPUSH
15124: CALL_OW 101
// GiveMedals ( MAIN ) ;
15128: LD_STRING MAIN
15130: PPUSH
15131: CALL_OW 102
// YouWin ;
15135: CALL_OW 103
// end ; end_of_file
15139: LD_VAR 0 1
15143: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15144: LD_INT 13
15146: PPUSH
15147: LD_INT 21
15149: PUSH
15150: LD_INT 1
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 70
15161: IFFALSE 15221
15163: GO 15165
15165: DISABLE
15166: LD_INT 0
15168: PPUSH
15169: PPUSH
// begin enable ;
15170: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15171: LD_ADDR_VAR 0 1
15175: PUSH
15176: LD_INT 13
15178: PPUSH
15179: LD_INT 21
15181: PUSH
15182: LD_INT 1
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 70
15193: PUSH
15194: FOR_IN
15195: IFFALSE 15219
// if GetLives ( i ) then
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 256
15206: IFFALSE 15217
// KillUnit ( i ) ;
15208: LD_VAR 0 1
15212: PPUSH
15213: CALL_OW 66
15217: GO 15194
15219: POP
15220: POP
// end ;
15221: PPOPN 2
15223: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 255
15233: PUSH
15234: LD_OWVAR 2
15238: EQUAL
15239: IFFALSE 15249
// player_res_art := true ;
15241: LD_ADDR_EXP 6
15245: PUSH
15246: LD_INT 1
15248: ST_TO_ADDR
// end ;
15249: PPOPN 1
15251: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15252: LD_INT 22
15254: PUSH
15255: LD_OWVAR 2
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 2
15266: PUSH
15267: LD_INT 30
15269: PUSH
15270: LD_INT 7
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 30
15279: PUSH
15280: LD_INT 8
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 30
15289: PUSH
15290: LD_INT 11
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 69
15311: PUSH
15312: LD_EXP 6
15316: AND
15317: IFFALSE 15674
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
15325: PPUSH
// begin enable ;
15326: ENABLE
// xy := FindArtifact ( 1 ) ;
15327: LD_ADDR_VAR 0 1
15331: PUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 469
15339: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15340: LD_ADDR_VAR 0 2
15344: PUSH
15345: LD_INT 22
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 30
15362: PUSH
15363: LD_INT 8
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: LD_INT 7
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 30
15382: PUSH
15383: LD_INT 11
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: PPUSH
15405: LD_VAR 0 1
15409: PUSH
15410: LD_INT 1
15412: ARRAY
15413: PPUSH
15414: LD_VAR 0 1
15418: PUSH
15419: LD_INT 2
15421: ARRAY
15422: PPUSH
15423: CALL_OW 73
15427: ST_TO_ADDR
// if player_artifact_ready = false then
15428: LD_EXP 8
15432: PUSH
15433: LD_INT 0
15435: EQUAL
15436: IFFALSE 15550
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15438: LD_VAR 0 2
15442: PPUSH
15443: LD_VAR 0 1
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: LD_VAR 0 1
15456: PUSH
15457: LD_INT 2
15459: ARRAY
15460: PPUSH
15461: CALL_OW 297
15465: PUSH
15466: LD_INT 6
15468: LESS
15469: IFFALSE 15530
// begin if BuildingStatus ( lab ) = bs_idle then
15471: LD_VAR 0 2
15475: PPUSH
15476: CALL_OW 461
15480: PUSH
15481: LD_INT 2
15483: EQUAL
15484: IFFALSE 15508
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15486: LD_OWVAR 2
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 468
15506: GO 15528
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15508: LD_OWVAR 2
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_VAR 0 2
15523: PPUSH
15524: CALL_OW 468
// end else
15528: GO 15550
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15530: LD_OWVAR 2
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 2
15545: PPUSH
15546: CALL_OW 468
// if player_artifact_ready then
15550: LD_EXP 8
15554: IFFALSE 15674
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 1
15568: ARRAY
15569: PPUSH
15570: LD_VAR 0 1
15574: PUSH
15575: LD_INT 2
15577: ARRAY
15578: PPUSH
15579: CALL_OW 297
15583: PUSH
15584: LD_INT 6
15586: LESS
15587: IFFALSE 15652
// begin if BuildingStatus ( lab ) = bs_idle then
15589: LD_VAR 0 2
15593: PPUSH
15594: CALL_OW 461
15598: PUSH
15599: LD_INT 2
15601: EQUAL
15602: IFFALSE 15628
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15604: LD_OWVAR 2
15608: PPUSH
15609: LD_EXP 9
15613: PPUSH
15614: LD_INT 4
15616: PPUSH
15617: LD_VAR 0 2
15621: PPUSH
15622: CALL_OW 468
15626: GO 15650
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15628: LD_OWVAR 2
15632: PPUSH
15633: LD_EXP 9
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 468
// end else
15650: GO 15674
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15652: LD_OWVAR 2
15656: PPUSH
15657: LD_EXP 9
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: CALL_OW 468
// end ;
15674: PPOPN 2
15676: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15683: LD_ADDR_VAR 0 5
15687: PUSH
15688: LD_INT 1
15690: PPUSH
15691: CALL_OW 469
15695: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15696: LD_ADDR_VAR 0 7
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_OWVAR 2
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 2
15715: PUSH
15716: LD_INT 30
15718: PUSH
15719: LD_INT 8
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 30
15728: PUSH
15729: LD_INT 11
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PPUSH
15750: LD_VAR 0 5
15754: PUSH
15755: LD_INT 1
15757: ARRAY
15758: PPUSH
15759: LD_VAR 0 5
15763: PUSH
15764: LD_INT 2
15766: ARRAY
15767: PPUSH
15768: CALL_OW 73
15772: ST_TO_ADDR
// if icon = art_exp_left then
15773: LD_VAR 0 2
15777: PUSH
15778: LD_INT 1
15780: EQUAL
15781: IFFALSE 15834
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15783: LD_VAR 0 7
15787: PPUSH
15788: LD_EXP 10
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15800: LD_VAR 0 7
15804: PPUSH
15805: LD_EXP 7
15809: PPUSH
15810: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15814: LD_OWVAR 2
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 0
15824: PPUSH
15825: LD_VAR 0 7
15829: PPUSH
15830: CALL_OW 468
// end ; if icon = art_icon then
15834: LD_VAR 0 2
15838: PUSH
15839: LD_EXP 9
15843: EQUAL
15844: IFFALSE 16077
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15846: LD_VAR 0 3
15850: PUSH
15851: LD_INT 21
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: IN
15866: IFFALSE 16077
// begin side := GetSide ( cr1 ) ;
15868: LD_ADDR_VAR 0 8
15872: PUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 255
15882: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15883: LD_INT 22
15885: PUSH
15886: LD_VAR 0 8
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 30
15897: PUSH
15898: LD_INT 28
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 69
15913: PUSH
15914: LD_INT 0
15916: GREATER
15917: IFFALSE 16077
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15919: LD_ADDR_VAR 0 6
15923: PUSH
15924: LD_INT 22
15926: PUSH
15927: LD_VAR 0 8
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 2
15938: PUSH
15939: LD_INT 30
15941: PUSH
15942: LD_INT 26
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 30
15951: PUSH
15952: LD_INT 27
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 28
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: PUSH
15984: FOR_IN
15985: IFFALSE 15998
// KillUnit ( i ) ;
15987: LD_VAR 0 6
15991: PPUSH
15992: CALL_OW 66
15996: GO 15984
15998: POP
15999: POP
// medal_enabled := true ;
16000: LD_ADDR_EXP 14
16004: PUSH
16005: LD_INT 1
16007: ST_TO_ADDR
// player_res_art := false ;
16008: LD_ADDR_EXP 6
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16016: LD_OWVAR 2
16020: PPUSH
16021: LD_EXP 9
16025: PPUSH
16026: LD_INT 1
16028: PPUSH
16029: LD_VAR 0 7
16033: PPUSH
16034: CALL_OW 468
// wait ( time_to_reuse ) ;
16038: LD_EXP 12
16042: PPUSH
16043: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16047: LD_OWVAR 2
16051: PPUSH
16052: LD_EXP 9
16056: PPUSH
16057: LD_INT 4
16059: PPUSH
16060: LD_VAR 0 7
16064: PPUSH
16065: CALL_OW 468
// player_res_art := true ;
16069: LD_ADDR_EXP 6
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// end ; end ; end ; end ;
16077: PPOPN 8
16079: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL_OW 255
16089: PUSH
16090: LD_OWVAR 2
16094: EQUAL
16095: IFFALSE 16132
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16097: LD_OWVAR 2
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: LD_INT 0
16107: PPUSH
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 468
// player_artifact_ready := true ;
16117: LD_ADDR_EXP 8
16121: PUSH
16122: LD_INT 1
16124: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16125: LD_STRING ArtVulcano
16127: PPUSH
16128: CALL_OW 339
// end ; end ;
16132: PPOPN 1
16134: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16135: LD_ADDR_EXP 7
16139: PUSH
16140: LD_VAR 0 2
16144: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16145: LD_OWVAR 2
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: LD_INT 2
16155: PPUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 468
// end ; end_of_file end_of_file
16165: PPOPN 2
16167: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
16174: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16175: LD_ADDR_EXP 45
16179: PUSH
16180: LD_INT 7
16182: PUSH
16183: LD_INT 6
16185: PUSH
16186: LD_INT 5
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: LD_OWVAR 67
16198: ARRAY
16199: ST_TO_ADDR
// al_force := [ ] ;
16200: LD_ADDR_EXP 44
16204: PUSH
16205: EMPTY
16206: ST_TO_ADDR
// RemoveAlliance ;
16207: CALL 16860 0 0
// ResetFog ;
16211: CALL_OW 335
// your_side := 7 ;
16215: LD_ADDR_OWVAR 2
16219: PUSH
16220: LD_INT 7
16222: ST_TO_ADDR
// uc_side := 7 ;
16223: LD_ADDR_OWVAR 20
16227: PUSH
16228: LD_INT 7
16230: ST_TO_ADDR
// hc_gallery :=  ;
16231: LD_ADDR_OWVAR 33
16235: PUSH
16236: LD_STRING 
16238: ST_TO_ADDR
// hc_name :=  ;
16239: LD_ADDR_OWVAR 26
16243: PUSH
16244: LD_STRING 
16246: ST_TO_ADDR
// hc_importance := 0 ;
16247: LD_ADDR_OWVAR 32
16251: PUSH
16252: LD_INT 0
16254: ST_TO_ADDR
// for i = 1 to 17 do
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_INT 17
16267: PUSH
16268: FOR_TO
16269: IFFALSE 16349
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16271: LD_ADDR_OWVAR 21
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PPUSH
16289: LD_INT 2
16291: PPUSH
16292: CALL_OW 12
16296: ARRAY
16297: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16298: LD_INT 0
16300: PPUSH
16301: LD_INT 1
16303: PPUSH
16304: LD_INT 4
16306: PPUSH
16307: CALL_OW 12
16311: PPUSH
16312: LD_EXP 45
16316: PPUSH
16317: CALL_OW 380
// un := CreateHuman ;
16321: LD_ADDR_VAR 0 4
16325: PUSH
16326: CALL_OW 44
16330: ST_TO_ADDR
// al_force := al_force ^ un ;
16331: LD_ADDR_EXP 44
16335: PUSH
16336: LD_EXP 44
16340: PUSH
16341: LD_VAR 0 4
16345: ADD
16346: ST_TO_ADDR
// end ;
16347: GO 16268
16349: POP
16350: POP
// hc_importance := 100 ;
16351: LD_ADDR_OWVAR 32
16355: PUSH
16356: LD_INT 100
16358: ST_TO_ADDR
// uc_nation := 1 ;
16359: LD_ADDR_OWVAR 21
16363: PUSH
16364: LD_INT 1
16366: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16367: LD_INT 1
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: LD_EXP 45
16377: PPUSH
16378: CALL_OW 380
// al_commander := CreateHuman ;
16382: LD_ADDR_EXP 43
16386: PUSH
16387: CALL_OW 44
16391: ST_TO_ADDR
// player_commander := al_commander ;
16392: LD_ADDR_EXP 11
16396: PUSH
16397: LD_EXP 43
16401: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16402: LD_ADDR_VAR 0 5
16406: PUSH
16407: LD_STRING text
16409: PPUSH
16410: LD_INT 9
16412: PUSH
16413: LD_INT 9
16415: PUSH
16416: LD_INT 8
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_OWVAR 67
16428: ARRAY
16429: PPUSH
16430: LD_INT 9
16432: PUSH
16433: LD_INT 9
16435: PUSH
16436: LD_INT 8
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: PUSH
16444: LD_OWVAR 67
16448: ARRAY
16449: PPUSH
16450: LD_INT -5
16452: PUSH
16453: LD_EXP 43
16457: PUSH
16458: LD_INT -3
16460: PUSH
16461: LD_INT -2
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: PUSH
16470: LD_EXP 44
16474: ADD
16475: PPUSH
16476: LD_INT 1
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 4
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 9
16504: PUSH
16505: LD_INT 5
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 42
16520: ST_TO_ADDR
// team := team ^ al_commander ;
16521: LD_ADDR_VAR 0 5
16525: PUSH
16526: LD_VAR 0 5
16530: PUSH
16531: LD_EXP 43
16535: ADD
16536: ST_TO_ADDR
// for i = 1 to team do
16537: LD_ADDR_VAR 0 2
16541: PUSH
16542: DOUBLE
16543: LD_INT 1
16545: DEC
16546: ST_TO_ADDR
16547: LD_VAR 0 5
16551: PUSH
16552: FOR_TO
16553: IFFALSE 16853
// begin if GetClass ( team [ i ] ) = class_mechanic then
16555: LD_VAR 0 5
16559: PUSH
16560: LD_VAR 0 2
16564: ARRAY
16565: PPUSH
16566: CALL_OW 257
16570: PUSH
16571: LD_INT 3
16573: EQUAL
16574: IFFALSE 16830
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16576: LD_ADDR_OWVAR 21
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: LD_INT 3
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 2
16596: PPUSH
16597: CALL_OW 12
16601: ARRAY
16602: ST_TO_ADDR
// if uc_nation = 1 then
16603: LD_OWVAR 21
16607: PUSH
16608: LD_INT 1
16610: EQUAL
16611: IFFALSE 16695
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16613: LD_ADDR_OWVAR 37
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: LD_INT 4
16623: PUSH
16624: LD_INT 5
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: LIST
16631: PUSH
16632: LD_VAR 0 2
16636: PUSH
16637: LD_INT 3
16639: MOD
16640: PUSH
16641: LD_INT 1
16643: PLUS
16644: ARRAY
16645: ST_TO_ADDR
// vc_engine := engine_siberite ;
16646: LD_ADDR_OWVAR 39
16650: PUSH
16651: LD_INT 3
16653: ST_TO_ADDR
// vc_control := control_manual ;
16654: LD_ADDR_OWVAR 38
16658: PUSH
16659: LD_INT 1
16661: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16662: LD_ADDR_OWVAR 40
16666: PUSH
16667: LD_INT 4
16669: PUSH
16670: LD_INT 5
16672: PUSH
16673: LD_INT 9
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 1
16683: PPUSH
16684: LD_INT 3
16686: PPUSH
16687: CALL_OW 12
16691: ARRAY
16692: ST_TO_ADDR
// end else
16693: GO 16771
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16695: LD_ADDR_OWVAR 37
16699: PUSH
16700: LD_INT 21
16702: PUSH
16703: LD_INT 23
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_VAR 0 2
16714: PUSH
16715: LD_INT 2
16717: MOD
16718: PUSH
16719: LD_INT 1
16721: PLUS
16722: ARRAY
16723: ST_TO_ADDR
// vc_engine := engine_siberite ;
16724: LD_ADDR_OWVAR 39
16728: PUSH
16729: LD_INT 3
16731: ST_TO_ADDR
// vc_control := control_manual ;
16732: LD_ADDR_OWVAR 38
16736: PUSH
16737: LD_INT 1
16739: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16740: LD_ADDR_OWVAR 40
16744: PUSH
16745: LD_INT 44
16747: PUSH
16748: LD_INT 45
16750: PUSH
16751: LD_INT 43
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: PPUSH
16762: LD_INT 3
16764: PPUSH
16765: CALL_OW 12
16769: ARRAY
16770: ST_TO_ADDR
// end ; un := CreateVehicle ;
16771: LD_ADDR_VAR 0 4
16775: PUSH
16776: CALL_OW 45
16780: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16781: LD_VAR 0 4
16785: PPUSH
16786: LD_INT 5
16788: PPUSH
16789: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16793: LD_VAR 0 4
16797: PPUSH
16798: LD_INT 15
16800: PPUSH
16801: LD_INT 0
16803: PPUSH
16804: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16808: LD_VAR 0 5
16812: PUSH
16813: LD_VAR 0 2
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 4
16823: PPUSH
16824: CALL_OW 52
// end else
16828: GO 16851
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16830: LD_VAR 0 5
16834: PUSH
16835: LD_VAR 0 2
16839: ARRAY
16840: PPUSH
16841: LD_INT 15
16843: PPUSH
16844: LD_INT 0
16846: PPUSH
16847: CALL_OW 49
// end ;
16851: GO 16552
16853: POP
16854: POP
// end ;
16855: LD_VAR 0 1
16859: RET
// export function RemoveAlliance ; var i ; begin
16860: LD_INT 0
16862: PPUSH
16863: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16864: LD_INT 22
16866: PUSH
16867: LD_INT 7
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PPUSH
16888: CALL_OW 69
16892: PUSH
16893: LD_INT 1
16895: ARRAY
16896: PPUSH
16897: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_INT 22
16908: PUSH
16909: LD_INT 7
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PPUSH
16916: CALL_OW 69
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16935
// RemoveUnit ( i ) ;
16924: LD_VAR 0 2
16928: PPUSH
16929: CALL_OW 64
16933: GO 16921
16935: POP
16936: POP
// end ;
16937: LD_VAR 0 1
16941: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16942: LD_INT 0
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16948: LD_INT 31
16950: PPUSH
16951: LD_INT 7
16953: PPUSH
16954: LD_INT 2
16956: PPUSH
16957: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16961: LD_INT 32
16963: PPUSH
16964: LD_INT 7
16966: PPUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16974: LD_INT 59
16976: PPUSH
16977: LD_INT 7
16979: PPUSH
16980: LD_INT 2
16982: PPUSH
16983: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16987: LD_ADDR_EXP 45
16991: PUSH
16992: LD_INT 5
16994: PUSH
16995: LD_INT 6
16997: PUSH
16998: LD_INT 7
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: PUSH
17006: LD_OWVAR 67
17010: ARRAY
17011: ST_TO_ADDR
// al_force := [ ] ;
17012: LD_ADDR_EXP 44
17016: PUSH
17017: EMPTY
17018: ST_TO_ADDR
// al_vehs := [ ] ;
17019: LD_ADDR_EXP 50
17023: PUSH
17024: EMPTY
17025: ST_TO_ADDR
// uc_side := 7 ;
17026: LD_ADDR_OWVAR 20
17030: PUSH
17031: LD_INT 7
17033: ST_TO_ADDR
// uc_nation := 1 ;
17034: LD_ADDR_OWVAR 21
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// bc_type := b_oil_mine ;
17042: LD_ADDR_OWVAR 42
17046: PUSH
17047: LD_INT 29
17049: ST_TO_ADDR
// b := CreateBuilding ;
17050: LD_ADDR_VAR 0 4
17054: PUSH
17055: CALL_OW 46
17059: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17060: LD_VAR 0 4
17064: PPUSH
17065: LD_INT 61
17067: PPUSH
17068: LD_INT 7
17070: PPUSH
17071: LD_INT 0
17073: PPUSH
17074: LD_INT 0
17076: PPUSH
17077: CALL_OW 50
// bc_type := b_siberite_mine ;
17081: LD_ADDR_OWVAR 42
17085: PUSH
17086: LD_INT 30
17088: ST_TO_ADDR
// b := CreateBuilding ;
17089: LD_ADDR_VAR 0 4
17093: PUSH
17094: CALL_OW 46
17098: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17099: LD_VAR 0 4
17103: PPUSH
17104: LD_INT 69
17106: PPUSH
17107: LD_INT 13
17109: PPUSH
17110: LD_INT 0
17112: PPUSH
17113: LD_INT 0
17115: PPUSH
17116: CALL_OW 50
// hc_gallery :=  ;
17120: LD_ADDR_OWVAR 33
17124: PUSH
17125: LD_STRING 
17127: ST_TO_ADDR
// hc_name :=  ;
17128: LD_ADDR_OWVAR 26
17132: PUSH
17133: LD_STRING 
17135: ST_TO_ADDR
// hc_importance := 0 ;
17136: LD_ADDR_OWVAR 32
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17144: LD_ADDR_VAR 0 2
17148: PUSH
17149: LD_INT 22
17151: PUSH
17152: LD_INT 7
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 30
17161: PUSH
17162: LD_INT 32
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: PUSH
17178: FOR_IN
17179: IFFALSE 17249
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17181: LD_ADDR_OWVAR 21
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 1
17198: PPUSH
17199: LD_INT 2
17201: PPUSH
17202: CALL_OW 12
17206: ARRAY
17207: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17208: LD_INT 0
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_EXP 45
17218: PPUSH
17219: CALL_OW 380
// un := CreateHuman ;
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: CALL_OW 44
17232: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17233: LD_VAR 0 3
17237: PPUSH
17238: LD_VAR 0 2
17242: PPUSH
17243: CALL_OW 52
// end ;
17247: GO 17178
17249: POP
17250: POP
// for i = 1 to 3 do
17251: LD_ADDR_VAR 0 2
17255: PUSH
17256: DOUBLE
17257: LD_INT 1
17259: DEC
17260: ST_TO_ADDR
17261: LD_INT 3
17263: PUSH
17264: FOR_TO
17265: IFFALSE 17333
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17267: LD_ADDR_OWVAR 21
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 1
17284: PPUSH
17285: LD_INT 2
17287: PPUSH
17288: CALL_OW 12
17292: ARRAY
17293: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17294: LD_INT 0
17296: PPUSH
17297: LD_INT 4
17299: PPUSH
17300: LD_EXP 45
17304: PPUSH
17305: CALL_OW 380
// un := CreateHuman ;
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: CALL_OW 44
17318: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17319: LD_VAR 0 3
17323: PPUSH
17324: LD_INT 164
17326: PPUSH
17327: CALL_OW 52
// end ;
17331: GO 17264
17333: POP
17334: POP
// for i = 1 to 4 do
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: DOUBLE
17341: LD_INT 1
17343: DEC
17344: ST_TO_ADDR
17345: LD_INT 4
17347: PUSH
17348: FOR_TO
17349: IFFALSE 17440
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17351: LD_ADDR_OWVAR 21
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 1
17368: PPUSH
17369: LD_INT 2
17371: PPUSH
17372: CALL_OW 12
17376: ARRAY
17377: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17378: LD_INT 0
17380: PPUSH
17381: LD_INT 5
17383: PUSH
17384: LD_INT 9
17386: PUSH
17387: LD_INT 9
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_INT 3
17400: PPUSH
17401: CALL_OW 12
17405: ARRAY
17406: PPUSH
17407: LD_EXP 45
17411: PPUSH
17412: CALL_OW 380
// un := CreateHuman ;
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: CALL_OW 44
17425: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17426: LD_VAR 0 3
17430: PPUSH
17431: LD_INT 173
17433: PPUSH
17434: CALL_OW 52
// end ;
17438: GO 17348
17440: POP
17441: POP
// for i = 1 to 4 do
17442: LD_ADDR_VAR 0 2
17446: PUSH
17447: DOUBLE
17448: LD_INT 1
17450: DEC
17451: ST_TO_ADDR
17452: LD_INT 4
17454: PUSH
17455: FOR_TO
17456: IFFALSE 17554
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17458: LD_ADDR_OWVAR 21
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 3
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PPUSH
17476: LD_INT 2
17478: PPUSH
17479: CALL_OW 12
17483: ARRAY
17484: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17485: LD_INT 0
17487: PPUSH
17488: LD_INT 3
17490: PPUSH
17491: LD_EXP 45
17495: PPUSH
17496: CALL_OW 380
// un := CreateHuman ;
17500: LD_ADDR_VAR 0 3
17504: PUSH
17505: CALL_OW 44
17509: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17510: LD_VAR 0 3
17514: PPUSH
17515: LD_INT 22
17517: PUSH
17518: LD_INT 7
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 69
17543: PUSH
17544: LD_INT 1
17546: ARRAY
17547: PPUSH
17548: CALL_OW 52
// end ;
17552: GO 17455
17554: POP
17555: POP
// for i = 1 to 4 do
17556: LD_ADDR_VAR 0 2
17560: PUSH
17561: DOUBLE
17562: LD_INT 1
17564: DEC
17565: ST_TO_ADDR
17566: LD_INT 4
17568: PUSH
17569: FOR_TO
17570: IFFALSE 17638
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17572: LD_ADDR_OWVAR 21
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: PPUSH
17590: LD_INT 2
17592: PPUSH
17593: CALL_OW 12
17597: ARRAY
17598: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17599: LD_INT 0
17601: PPUSH
17602: LD_INT 2
17604: PPUSH
17605: LD_EXP 45
17609: PPUSH
17610: CALL_OW 380
// un := CreateHuman ;
17614: LD_ADDR_VAR 0 3
17618: PUSH
17619: CALL_OW 44
17623: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17624: LD_VAR 0 3
17628: PPUSH
17629: LD_INT 162
17631: PPUSH
17632: CALL_OW 52
// end ;
17636: GO 17569
17638: POP
17639: POP
// uc_nation := 3 ;
17640: LD_ADDR_OWVAR 21
17644: PUSH
17645: LD_INT 3
17647: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17648: LD_ADDR_OWVAR 37
17652: PUSH
17653: LD_INT 21
17655: ST_TO_ADDR
// vc_engine := engine_siberite ;
17656: LD_ADDR_OWVAR 39
17660: PUSH
17661: LD_INT 3
17663: ST_TO_ADDR
// vc_control := control_computer ;
17664: LD_ADDR_OWVAR 38
17668: PUSH
17669: LD_INT 3
17671: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17672: LD_ADDR_OWVAR 40
17676: PUSH
17677: LD_INT 51
17679: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17680: CALL_OW 45
17684: PPUSH
17685: LD_INT 49
17687: PPUSH
17688: LD_INT 13
17690: PPUSH
17691: LD_INT 0
17693: PPUSH
17694: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17698: LD_ADDR_EXP 52
17702: PUSH
17703: LD_INT 22
17705: PUSH
17706: LD_INT 7
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 30
17715: PUSH
17716: LD_INT 33
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 69
17731: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17732: LD_ADDR_VAR 0 2
17736: PUSH
17737: DOUBLE
17738: LD_INT 1
17740: DEC
17741: ST_TO_ADDR
17742: LD_INT 22
17744: PUSH
17745: LD_INT 7
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 30
17754: PUSH
17755: LD_INT 33
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 35
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: PUSH
17785: FOR_TO
17786: IFFALSE 17846
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17788: LD_INT 22
17790: PUSH
17791: LD_INT 7
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 30
17800: PUSH
17801: LD_INT 33
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 35
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: PPUSH
17826: CALL_OW 69
17830: PUSH
17831: LD_VAR 0 2
17835: ARRAY
17836: PPUSH
17837: LD_INT 49
17839: PPUSH
17840: CALL_OW 208
17844: GO 17785
17846: POP
17847: POP
// end ;
17848: LD_VAR 0 1
17852: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17853: LD_OWVAR 2
17857: PUSH
17858: LD_INT 1
17860: EQUAL
17861: IFFALSE 18847
17863: GO 17865
17865: DISABLE
17866: LD_INT 0
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin enable ;
17872: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17873: LD_ADDR_EXP 56
17877: PUSH
17878: LD_INT 22
17880: PUSH
17881: LD_INT 7
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 21
17890: PUSH
17891: LD_INT 3
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PPUSH
17902: CALL_OW 69
17906: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17907: LD_ADDR_EXP 54
17911: PUSH
17912: LD_INT 164
17914: PUSH
17915: LD_INT 197
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17922: LD_ADDR_EXP 53
17926: PUSH
17927: LD_INT 22
17929: PUSH
17930: LD_INT 7
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 30
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: PUSH
17956: LD_INT 1
17958: ARRAY
17959: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17960: LD_ADDR_EXP 55
17964: PUSH
17965: LD_INT 22
17967: PUSH
17968: LD_INT 7
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 30
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: PUSH
17994: LD_INT 1
17996: ARRAY
17997: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17998: LD_INT 22
18000: PUSH
18001: LD_INT 7
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 34
18010: PUSH
18011: LD_INT 51
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 69
18026: IFFALSE 18066
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18028: LD_ADDR_EXP 51
18032: PUSH
18033: LD_INT 22
18035: PUSH
18036: LD_INT 7
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 34
18045: PUSH
18046: LD_INT 51
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PPUSH
18057: CALL_OW 69
18061: PUSH
18062: LD_INT 1
18064: ARRAY
18065: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18066: LD_ADDR_EXP 47
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_INT 7
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 25
18083: PUSH
18084: LD_INT 9
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18100: LD_ADDR_EXP 46
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_INT 7
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 25
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18134: LD_ADDR_EXP 48
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_INT 7
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 25
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18168: LD_ADDR_EXP 49
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 7
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 4
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18202: LD_EXP 51
18206: PPUSH
18207: CALL_OW 314
18211: NOT
18212: PUSH
18213: LD_EXP 51
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 289
18225: PUSH
18226: LD_INT 100
18228: LESS
18229: AND
18230: IFFALSE 18278
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18232: LD_ADDR_VAR 0 4
18236: PUSH
18237: LD_INT 12
18239: PPUSH
18240: CALL_OW 435
18244: ST_TO_ADDR
// if cr then
18245: LD_VAR 0 4
18249: IFFALSE 18278
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18251: LD_EXP 51
18255: PPUSH
18256: LD_VAR 0 4
18260: PUSH
18261: LD_INT 1
18263: ARRAY
18264: PPUSH
18265: LD_VAR 0 4
18269: PUSH
18270: LD_INT 2
18272: ARRAY
18273: PPUSH
18274: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18278: LD_EXP 56
18282: PPUSH
18283: LD_INT 3
18285: PUSH
18286: LD_INT 24
18288: PUSH
18289: LD_INT 1000
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 72
18304: IFFALSE 18434
// begin if al_eng then
18306: LD_EXP 46
18310: IFFALSE 18432
// for i = 1 to al_eng do
18312: LD_ADDR_VAR 0 1
18316: PUSH
18317: DOUBLE
18318: LD_INT 1
18320: DEC
18321: ST_TO_ADDR
18322: LD_EXP 46
18326: PUSH
18327: FOR_TO
18328: IFFALSE 18430
// if IsInUnit ( al_eng [ i ] ) then
18330: LD_EXP 46
18334: PUSH
18335: LD_VAR 0 1
18339: ARRAY
18340: PPUSH
18341: CALL_OW 310
18345: IFFALSE 18364
// ComExitBuilding ( al_eng [ i ] ) else
18347: LD_EXP 46
18351: PUSH
18352: LD_VAR 0 1
18356: ARRAY
18357: PPUSH
18358: CALL_OW 122
18362: GO 18428
// if not HasTask ( al_eng [ i ] ) then
18364: LD_EXP 46
18368: PUSH
18369: LD_VAR 0 1
18373: ARRAY
18374: PPUSH
18375: CALL_OW 314
18379: NOT
18380: IFFALSE 18428
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18382: LD_EXP 46
18386: PUSH
18387: LD_VAR 0 1
18391: ARRAY
18392: PPUSH
18393: LD_EXP 56
18397: PPUSH
18398: LD_INT 3
18400: PUSH
18401: LD_INT 24
18403: PUSH
18404: LD_INT 1000
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 72
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: PPUSH
18424: CALL_OW 130
18428: GO 18327
18430: POP
18431: POP
// end else
18432: GO 18516
// if al_eng then
18434: LD_EXP 46
18438: IFFALSE 18516
// if not IsInUnit ( al_eng [ 1 ] ) then
18440: LD_EXP 46
18444: PUSH
18445: LD_INT 1
18447: ARRAY
18448: PPUSH
18449: CALL_OW 310
18453: NOT
18454: IFFALSE 18516
// for i = 1 to al_eng do
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: DOUBLE
18462: LD_INT 1
18464: DEC
18465: ST_TO_ADDR
18466: LD_EXP 46
18470: PUSH
18471: FOR_TO
18472: IFFALSE 18514
// if not IsInUnit ( al_eng [ i ] ) then
18474: LD_EXP 46
18478: PUSH
18479: LD_VAR 0 1
18483: ARRAY
18484: PPUSH
18485: CALL_OW 310
18489: NOT
18490: IFFALSE 18512
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18492: LD_EXP 46
18496: PUSH
18497: LD_VAR 0 1
18501: ARRAY
18502: PPUSH
18503: LD_EXP 53
18507: PPUSH
18508: CALL_OW 120
18512: GO 18471
18514: POP
18515: POP
// if al_vehs then
18516: LD_EXP 50
18520: IFFALSE 18620
// if BuildingStatus ( al_fac ) = bs_idle then
18522: LD_EXP 55
18526: PPUSH
18527: CALL_OW 461
18531: PUSH
18532: LD_INT 2
18534: EQUAL
18535: IFFALSE 18620
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18537: LD_EXP 55
18541: PPUSH
18542: LD_EXP 50
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: PPUSH
18551: LD_EXP 50
18555: PUSH
18556: LD_INT 2
18558: ARRAY
18559: PPUSH
18560: LD_EXP 50
18564: PUSH
18565: LD_INT 3
18567: ARRAY
18568: PPUSH
18569: LD_EXP 50
18573: PUSH
18574: LD_INT 4
18576: ARRAY
18577: PPUSH
18578: CALL_OW 125
// for i = 1 to 4 do
18582: LD_ADDR_VAR 0 1
18586: PUSH
18587: DOUBLE
18588: LD_INT 1
18590: DEC
18591: ST_TO_ADDR
18592: LD_INT 4
18594: PUSH
18595: FOR_TO
18596: IFFALSE 18618
// al_vehs := Delete ( al_vehs , 1 ) ;
18598: LD_ADDR_EXP 50
18602: PUSH
18603: LD_EXP 50
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: CALL_OW 3
18615: ST_TO_ADDR
18616: GO 18595
18618: POP
18619: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18620: LD_EXP 44
18624: PUSH
18625: LD_INT 0
18627: EQUAL
18628: PUSH
18629: LD_OWVAR 1
18633: PUSH
18634: LD_INT 23100
18636: MOD
18637: PUSH
18638: LD_INT 0
18640: EQUAL
18641: AND
18642: IFFALSE 18756
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18644: LD_ADDR_VAR 0 1
18648: PUSH
18649: DOUBLE
18650: LD_INT 1
18652: DEC
18653: ST_TO_ADDR
18654: LD_INT 6
18656: PUSH
18657: LD_INT 7
18659: PUSH
18660: LD_INT 8
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_OWVAR 67
18672: ARRAY
18673: PUSH
18674: FOR_TO
18675: IFFALSE 18754
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18677: LD_ADDR_EXP 50
18681: PUSH
18682: LD_EXP 50
18686: PUSH
18687: LD_INT 23
18689: ADD
18690: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18691: LD_ADDR_EXP 50
18695: PUSH
18696: LD_EXP 50
18700: PUSH
18701: LD_INT 1
18703: ADD
18704: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18705: LD_ADDR_EXP 50
18709: PUSH
18710: LD_EXP 50
18714: PUSH
18715: LD_INT 3
18717: ADD
18718: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18719: LD_ADDR_EXP 50
18723: PUSH
18724: LD_EXP 50
18728: PUSH
18729: LD_INT 46
18731: PUSH
18732: LD_INT 47
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: PPUSH
18742: LD_INT 2
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: ADD
18751: ST_TO_ADDR
// end ;
18752: GO 18674
18754: POP
18755: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18756: LD_INT 22
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 34
18768: PUSH
18769: LD_INT 51
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: PUSH
18785: LD_INT 0
18787: EQUAL
18788: IFFALSE 18811
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18790: LD_EXP 55
18794: PPUSH
18795: LD_INT 21
18797: PPUSH
18798: LD_INT 1
18800: PPUSH
18801: LD_INT 3
18803: PPUSH
18804: LD_INT 51
18806: PPUSH
18807: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18811: LD_EXP 44
18815: PUSH
18816: LD_INT 6
18818: PUSH
18819: LD_INT 7
18821: PUSH
18822: LD_INT 8
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: PUSH
18830: LD_OWVAR 67
18834: ARRAY
18835: GREATEREQUAL
18836: IFFALSE 18847
// RaiseSailEvent ( event_alliance_attack ) ;
18838: LD_EXP 23
18842: PPUSH
18843: CALL_OW 427
// end ;
18847: PPOPN 4
18849: END
// export function AllianceAttack ( ) ; var path , units ; begin
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
18854: PPUSH
// units := al_force ;
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_EXP 44
18864: ST_TO_ADDR
// al_force := [ ] ;
18865: LD_ADDR_EXP 44
18869: PUSH
18870: EMPTY
18871: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18872: LD_INT 0
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: CALL_OW 12
18882: IFFALSE 18926
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18884: LD_ADDR_VAR 0 2
18888: PUSH
18889: LD_INT 49
18891: PUSH
18892: LD_INT 53
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 52
18901: PUSH
18902: LD_INT 90
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 63
18911: PUSH
18912: LD_INT 114
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: ST_TO_ADDR
18924: GO 18955
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18926: LD_ADDR_VAR 0 2
18930: PUSH
18931: LD_INT 89
18933: PUSH
18934: LD_INT 52
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 143
18943: PUSH
18944: LD_INT 50
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18955: LD_INT 35
18957: PPUSH
18958: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18962: LD_VAR 0 3
18966: PPUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL 78068 0 2
18976: NOT
18977: IFFALSE 18955
// end ; end_of_file
18979: LD_VAR 0 1
18983: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18991: LD_ADDR_EXP 59
18995: PUSH
18996: LD_INT 9
18998: PUSH
18999: LD_INT 8
19001: PUSH
19002: LD_INT 7
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: LIST
19009: PUSH
19010: LD_OWVAR 67
19014: ARRAY
19015: ST_TO_ADDR
// ar_force := [ ] ;
19016: LD_ADDR_EXP 58
19020: PUSH
19021: EMPTY
19022: ST_TO_ADDR
// RemoveAlliance ;
19023: CALL 16860 0 0
// RemoveEnvironmentArea ( evn ) ;
19027: LD_INT 17
19029: PPUSH
19030: CALL_OW 355
// your_side := 2 ;
19034: LD_ADDR_OWVAR 2
19038: PUSH
19039: LD_INT 2
19041: ST_TO_ADDR
// uc_side := 2 ;
19042: LD_ADDR_OWVAR 20
19046: PUSH
19047: LD_INT 2
19049: ST_TO_ADDR
// uc_nation := nation_arabian ;
19050: LD_ADDR_OWVAR 21
19054: PUSH
19055: LD_INT 2
19057: ST_TO_ADDR
// hc_gallery :=  ;
19058: LD_ADDR_OWVAR 33
19062: PUSH
19063: LD_STRING 
19065: ST_TO_ADDR
// hc_name :=  ;
19066: LD_ADDR_OWVAR 26
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// hc_importance := 0 ;
19074: LD_ADDR_OWVAR 32
19078: PUSH
19079: LD_INT 0
19081: ST_TO_ADDR
// for i = 1 to 20 do
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: DOUBLE
19088: LD_INT 1
19090: DEC
19091: ST_TO_ADDR
19092: LD_INT 20
19094: PUSH
19095: FOR_TO
19096: IFFALSE 19161
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19098: LD_INT 0
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_INT 4
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: LD_EXP 59
19116: PPUSH
19117: CALL_OW 380
// un := CreateHuman ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: CALL_OW 44
19130: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19131: LD_VAR 0 4
19135: PPUSH
19136: LD_INT 2
19138: PPUSH
19139: CALL_OW 233
// ar_force := ar_force ^ un ;
19143: LD_ADDR_EXP 58
19147: PUSH
19148: LD_EXP 58
19152: PUSH
19153: LD_VAR 0 4
19157: ADD
19158: ST_TO_ADDR
// end ;
19159: GO 19095
19161: POP
19162: POP
// hc_importance := 100 ;
19163: LD_ADDR_OWVAR 32
19167: PUSH
19168: LD_INT 100
19170: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19171: LD_INT 1
19173: PPUSH
19174: LD_INT 11
19176: PPUSH
19177: LD_EXP 59
19181: PPUSH
19182: CALL_OW 380
// ar_commander := CreateHuman ;
19186: LD_ADDR_EXP 57
19190: PUSH
19191: CALL_OW 44
19195: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19196: LD_EXP 57
19200: PPUSH
19201: LD_INT 2
19203: PPUSH
19204: CALL_OW 233
// player_commander := ar_commander ;
19208: LD_ADDR_EXP 11
19212: PUSH
19213: LD_EXP 57
19217: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19218: LD_ADDR_VAR 0 5
19222: PUSH
19223: LD_STRING text
19225: PPUSH
19226: LD_INT 14
19228: PUSH
19229: LD_INT 13
19231: PUSH
19232: LD_INT 12
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: PUSH
19240: LD_OWVAR 67
19244: ARRAY
19245: PPUSH
19246: LD_INT 14
19248: PUSH
19249: LD_INT 13
19251: PUSH
19252: LD_INT 12
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: LD_OWVAR 67
19264: ARRAY
19265: PPUSH
19266: LD_INT -6
19268: PUSH
19269: LD_EXP 57
19273: PUSH
19274: LD_INT -2
19276: PUSH
19277: LD_INT -3
19279: PUSH
19280: LD_INT -5
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: LD_EXP 58
19294: ADD
19295: PPUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 4
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 8
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: PPUSH
19332: CALL_OW 42
19336: ST_TO_ADDR
// team := team ^ ar_commander ;
19337: LD_ADDR_VAR 0 5
19341: PUSH
19342: LD_VAR 0 5
19346: PUSH
19347: LD_EXP 57
19351: ADD
19352: ST_TO_ADDR
// for i = 1 to 4 do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: DOUBLE
19359: LD_INT 1
19361: DEC
19362: ST_TO_ADDR
19363: LD_INT 4
19365: PUSH
19366: FOR_TO
19367: IFFALSE 19469
// begin vc_chassis := ar_medium_trike ;
19369: LD_ADDR_OWVAR 37
19373: PUSH
19374: LD_INT 13
19376: ST_TO_ADDR
// vc_engine := engine_siberite ;
19377: LD_ADDR_OWVAR 39
19381: PUSH
19382: LD_INT 3
19384: ST_TO_ADDR
// vc_control := control_manual ;
19385: LD_ADDR_OWVAR 38
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19393: LD_ADDR_OWVAR 40
19397: PUSH
19398: LD_INT 27
19400: PUSH
19401: LD_INT 32
19403: PUSH
19404: LD_EXP 66
19408: PUSH
19409: LD_INT 27
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: LD_VAR 0 2
19422: ARRAY
19423: ST_TO_ADDR
// un := CreateVehicle ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: CALL_OW 45
19433: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19434: LD_VAR 0 4
19438: PPUSH
19439: LD_INT 2
19441: PPUSH
19442: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_INT 54
19453: PPUSH
19454: LD_INT 15
19456: PPUSH
19457: LD_INT 6
19459: PPUSH
19460: LD_INT 0
19462: PPUSH
19463: CALL_OW 50
// end ;
19467: GO 19366
19469: POP
19470: POP
// for i = 1 to team do
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: DOUBLE
19477: LD_INT 1
19479: DEC
19480: ST_TO_ADDR
19481: LD_VAR 0 5
19485: PUSH
19486: FOR_TO
19487: IFFALSE 19584
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19489: LD_INT 22
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 58
19501: PUSH
19502: EMPTY
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 69
19513: IFFALSE 19561
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19515: LD_VAR 0 5
19519: PUSH
19520: LD_VAR 0 2
19524: ARRAY
19525: PPUSH
19526: LD_INT 22
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 58
19538: PUSH
19539: EMPTY
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: PUSH
19551: LD_INT 1
19553: ARRAY
19554: PPUSH
19555: CALL_OW 52
19559: GO 19582
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19561: LD_VAR 0 5
19565: PUSH
19566: LD_VAR 0 2
19570: ARRAY
19571: PPUSH
19572: LD_INT 16
19574: PPUSH
19575: LD_INT 0
19577: PPUSH
19578: CALL_OW 49
// end ;
19582: GO 19486
19584: POP
19585: POP
// uc_side := 0 ;
19586: LD_ADDR_OWVAR 20
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// uc_nation := 0 ;
19594: LD_ADDR_OWVAR 21
19598: PUSH
19599: LD_INT 0
19601: ST_TO_ADDR
// vc_chassis := 31 ;
19602: LD_ADDR_OWVAR 37
19606: PUSH
19607: LD_INT 31
19609: ST_TO_ADDR
// vc_control := control_rider ;
19610: LD_ADDR_OWVAR 38
19614: PUSH
19615: LD_INT 4
19617: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19618: CALL_OW 45
19622: PPUSH
19623: LD_INT 96
19625: PPUSH
19626: LD_INT 20
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 48
// end ; end_of_file
19636: LD_VAR 0 1
19640: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19641: LD_INT 0
19643: PPUSH
// ar_miner := 81 ;
19644: LD_ADDR_EXP 67
19648: PUSH
19649: LD_INT 81
19651: ST_TO_ADDR
// ar_crane := 88 ;
19652: LD_ADDR_EXP 66
19656: PUSH
19657: LD_INT 88
19659: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19660: LD_ADDR_EXP 61
19664: PUSH
19665: LD_INT 89
19667: ST_TO_ADDR
// us_hack := 99 ;
19668: LD_ADDR_EXP 62
19672: PUSH
19673: LD_INT 99
19675: ST_TO_ADDR
// us_artillery := 97 ;
19676: LD_ADDR_EXP 63
19680: PUSH
19681: LD_INT 97
19683: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19684: LD_ADDR_EXP 64
19688: PUSH
19689: LD_INT 91
19691: ST_TO_ADDR
// ar_mortar := 92 ;
19692: LD_ADDR_EXP 65
19696: PUSH
19697: LD_INT 92
19699: ST_TO_ADDR
// ru_flamethrower := 93 ;
19700: LD_ADDR_EXP 68
19704: PUSH
19705: LD_INT 93
19707: ST_TO_ADDR
// ru_radar := 98 ;
19708: LD_ADDR_EXP 60
19712: PUSH
19713: LD_INT 98
19715: ST_TO_ADDR
// tech_Artillery := 80 ;
19716: LD_ADDR_EXP 69
19720: PUSH
19721: LD_INT 80
19723: ST_TO_ADDR
// tech_RadMat := 81 ;
19724: LD_ADDR_EXP 70
19728: PUSH
19729: LD_INT 81
19731: ST_TO_ADDR
// tech_BasicTools := 82 ;
19732: LD_ADDR_EXP 71
19736: PUSH
19737: LD_INT 82
19739: ST_TO_ADDR
// tech_Cargo := 83 ;
19740: LD_ADDR_EXP 72
19744: PUSH
19745: LD_INT 83
19747: ST_TO_ADDR
// tech_Track := 84 ;
19748: LD_ADDR_EXP 73
19752: PUSH
19753: LD_INT 84
19755: ST_TO_ADDR
// tech_Crane := 85 ;
19756: LD_ADDR_EXP 74
19760: PUSH
19761: LD_INT 85
19763: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19764: LD_ADDR_EXP 75
19768: PUSH
19769: LD_INT 86
19771: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19772: LD_ADDR_EXP 76
19776: PUSH
19777: LD_INT 87
19779: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19780: LD_ADDR_EXP 77
19784: PUSH
19785: LD_INT 88
19787: ST_TO_ADDR
// class_mastodont := 31 ;
19788: LD_ADDR_EXP 78
19792: PUSH
19793: LD_INT 31
19795: ST_TO_ADDR
// class_horse := 21 ;
19796: LD_ADDR_EXP 79
19800: PUSH
19801: LD_INT 21
19803: ST_TO_ADDR
// end ;
19804: LD_VAR 0 1
19808: RET
// every 1 do
19809: GO 19811
19811: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19812: CALL 19641 0 0
19816: END
// every 0 0$1 do
19817: GO 19819
19819: DISABLE
// begin enable ;
19820: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19821: LD_STRING updateTimer(
19823: PUSH
19824: LD_OWVAR 1
19828: STR
19829: PUSH
19830: LD_STRING );
19832: STR
19833: PPUSH
19834: CALL_OW 559
// end ;
19838: END
// export function SOS_MapStart ( ) ; begin
19839: LD_INT 0
19841: PPUSH
// if streamModeActive then
19842: LD_EXP 80
19846: IFFALSE 19855
// DefineStreamItems ( true ) ;
19848: LD_INT 1
19850: PPUSH
19851: CALL 21505 0 1
// UpdateFactoryWaypoints ( ) ;
19855: CALL 35089 0 0
// end ;
19859: LD_VAR 0 1
19863: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19864: LD_INT 0
19866: PPUSH
// if p2 = 100 then
19867: LD_VAR 0 2
19871: PUSH
19872: LD_INT 100
19874: EQUAL
19875: IFFALSE 20878
// begin if not StreamModeActive then
19877: LD_EXP 80
19881: NOT
19882: IFFALSE 19892
// StreamModeActive := true ;
19884: LD_ADDR_EXP 80
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// if p3 = 0 then
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 0
19899: EQUAL
19900: IFFALSE 19906
// InitStreamMode ;
19902: CALL 21041 0 0
// if p3 = 1 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 1
19913: EQUAL
19914: IFFALSE 19924
// sRocket := true ;
19916: LD_ADDR_EXP 85
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 2 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 2
19931: EQUAL
19932: IFFALSE 19942
// sSpeed := true ;
19934: LD_ADDR_EXP 84
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 3 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 3
19949: EQUAL
19950: IFFALSE 19960
// sEngine := true ;
19952: LD_ADDR_EXP 86
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 4 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 4
19967: EQUAL
19968: IFFALSE 19978
// sSpec := true ;
19970: LD_ADDR_EXP 83
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 5 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 5
19985: EQUAL
19986: IFFALSE 19996
// sLevel := true ;
19988: LD_ADDR_EXP 87
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 6 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 6
20003: EQUAL
20004: IFFALSE 20014
// sArmoury := true ;
20006: LD_ADDR_EXP 88
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 7 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 7
20021: EQUAL
20022: IFFALSE 20032
// sRadar := true ;
20024: LD_ADDR_EXP 89
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 8 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 8
20039: EQUAL
20040: IFFALSE 20050
// sBunker := true ;
20042: LD_ADDR_EXP 90
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 9 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 9
20057: EQUAL
20058: IFFALSE 20068
// sHack := true ;
20060: LD_ADDR_EXP 91
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 10 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 10
20075: EQUAL
20076: IFFALSE 20086
// sFire := true ;
20078: LD_ADDR_EXP 92
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 11 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 11
20093: EQUAL
20094: IFFALSE 20104
// sRefresh := true ;
20096: LD_ADDR_EXP 93
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 12 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 12
20111: EQUAL
20112: IFFALSE 20122
// sExp := true ;
20114: LD_ADDR_EXP 94
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 13 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 13
20129: EQUAL
20130: IFFALSE 20140
// sDepot := true ;
20132: LD_ADDR_EXP 95
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 14 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 14
20147: EQUAL
20148: IFFALSE 20158
// sFlag := true ;
20150: LD_ADDR_EXP 96
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 15 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 15
20165: EQUAL
20166: IFFALSE 20176
// sKamikadze := true ;
20168: LD_ADDR_EXP 104
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 16 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 16
20183: EQUAL
20184: IFFALSE 20194
// sTroll := true ;
20186: LD_ADDR_EXP 105
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 17 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 17
20201: EQUAL
20202: IFFALSE 20212
// sSlow := true ;
20204: LD_ADDR_EXP 106
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 18 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 18
20219: EQUAL
20220: IFFALSE 20230
// sLack := true ;
20222: LD_ADDR_EXP 107
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 19 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 19
20237: EQUAL
20238: IFFALSE 20248
// sTank := true ;
20240: LD_ADDR_EXP 109
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 20 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 20
20255: EQUAL
20256: IFFALSE 20266
// sRemote := true ;
20258: LD_ADDR_EXP 110
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 21 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 21
20273: EQUAL
20274: IFFALSE 20284
// sPowell := true ;
20276: LD_ADDR_EXP 111
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 22 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 22
20291: EQUAL
20292: IFFALSE 20302
// sTeleport := true ;
20294: LD_ADDR_EXP 114
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 23 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 23
20309: EQUAL
20310: IFFALSE 20320
// sOilTower := true ;
20312: LD_ADDR_EXP 116
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 24 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 24
20327: EQUAL
20328: IFFALSE 20338
// sShovel := true ;
20330: LD_ADDR_EXP 117
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 25 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 25
20345: EQUAL
20346: IFFALSE 20356
// sSheik := true ;
20348: LD_ADDR_EXP 118
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 26 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 26
20363: EQUAL
20364: IFFALSE 20374
// sEarthquake := true ;
20366: LD_ADDR_EXP 120
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 27 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 27
20381: EQUAL
20382: IFFALSE 20392
// sAI := true ;
20384: LD_ADDR_EXP 121
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 28 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 28
20399: EQUAL
20400: IFFALSE 20410
// sCargo := true ;
20402: LD_ADDR_EXP 124
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 29 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 29
20417: EQUAL
20418: IFFALSE 20428
// sDLaser := true ;
20420: LD_ADDR_EXP 125
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 30 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 30
20435: EQUAL
20436: IFFALSE 20446
// sExchange := true ;
20438: LD_ADDR_EXP 126
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 31 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 31
20453: EQUAL
20454: IFFALSE 20464
// sFac := true ;
20456: LD_ADDR_EXP 127
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 32 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 32
20471: EQUAL
20472: IFFALSE 20482
// sPower := true ;
20474: LD_ADDR_EXP 128
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 33 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 33
20489: EQUAL
20490: IFFALSE 20500
// sRandom := true ;
20492: LD_ADDR_EXP 129
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 34 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 34
20507: EQUAL
20508: IFFALSE 20518
// sShield := true ;
20510: LD_ADDR_EXP 130
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 35 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 35
20525: EQUAL
20526: IFFALSE 20536
// sTime := true ;
20528: LD_ADDR_EXP 131
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 36 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 36
20543: EQUAL
20544: IFFALSE 20554
// sTools := true ;
20546: LD_ADDR_EXP 132
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 101 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 101
20561: EQUAL
20562: IFFALSE 20572
// sSold := true ;
20564: LD_ADDR_EXP 97
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 102 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 102
20579: EQUAL
20580: IFFALSE 20590
// sDiff := true ;
20582: LD_ADDR_EXP 98
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 103 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 103
20597: EQUAL
20598: IFFALSE 20608
// sFog := true ;
20600: LD_ADDR_EXP 101
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 104 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 104
20615: EQUAL
20616: IFFALSE 20626
// sReset := true ;
20618: LD_ADDR_EXP 102
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 105 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 105
20633: EQUAL
20634: IFFALSE 20644
// sSun := true ;
20636: LD_ADDR_EXP 103
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 106 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 106
20651: EQUAL
20652: IFFALSE 20662
// sTiger := true ;
20654: LD_ADDR_EXP 99
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 107 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 107
20669: EQUAL
20670: IFFALSE 20680
// sBomb := true ;
20672: LD_ADDR_EXP 100
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 108 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 108
20687: EQUAL
20688: IFFALSE 20698
// sWound := true ;
20690: LD_ADDR_EXP 108
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 109 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 109
20705: EQUAL
20706: IFFALSE 20716
// sBetray := true ;
20708: LD_ADDR_EXP 112
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 110 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 110
20723: EQUAL
20724: IFFALSE 20734
// sContamin := true ;
20726: LD_ADDR_EXP 113
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 111 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 111
20741: EQUAL
20742: IFFALSE 20752
// sOil := true ;
20744: LD_ADDR_EXP 115
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 112 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 112
20759: EQUAL
20760: IFFALSE 20770
// sStu := true ;
20762: LD_ADDR_EXP 119
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 113 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 113
20777: EQUAL
20778: IFFALSE 20788
// sBazooka := true ;
20780: LD_ADDR_EXP 122
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 114 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 114
20795: EQUAL
20796: IFFALSE 20806
// sMortar := true ;
20798: LD_ADDR_EXP 123
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 115 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 115
20813: EQUAL
20814: IFFALSE 20824
// sRanger := true ;
20816: LD_ADDR_EXP 133
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 116 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 116
20831: EQUAL
20832: IFFALSE 20842
// sComputer := true ;
20834: LD_ADDR_EXP 134
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 117 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 117
20849: EQUAL
20850: IFFALSE 20860
// s30 := true ;
20852: LD_ADDR_EXP 135
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 118 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 118
20867: EQUAL
20868: IFFALSE 20878
// s60 := true ;
20870: LD_ADDR_EXP 136
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// end ; if p2 = 101 then
20878: LD_VAR 0 2
20882: PUSH
20883: LD_INT 101
20885: EQUAL
20886: IFFALSE 21014
// begin case p3 of 1 :
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 1
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20908
20901: POP
// hHackUnlimitedResources ; 2 :
20902: CALL 33112 0 0
20906: GO 21014
20908: LD_INT 2
20910: DOUBLE
20911: EQUAL
20912: IFTRUE 20916
20914: GO 20923
20916: POP
// hHackSetLevel10 ; 3 :
20917: CALL 33245 0 0
20921: GO 21014
20923: LD_INT 3
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 20938
20931: POP
// hHackSetLevel10YourUnits ; 4 :
20932: CALL 33330 0 0
20936: GO 21014
20938: LD_INT 4
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 20953
20946: POP
// hHackInvincible ; 5 :
20947: CALL 33778 0 0
20951: GO 21014
20953: LD_INT 5
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20968
20961: POP
// hHackInvisible ; 6 :
20962: CALL 33889 0 0
20966: GO 21014
20968: LD_INT 6
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 20983
20976: POP
// hHackChangeYourSide ; 7 :
20977: CALL 33946 0 0
20981: GO 21014
20983: LD_INT 7
20985: DOUBLE
20986: EQUAL
20987: IFTRUE 20991
20989: GO 20998
20991: POP
// hHackChangeUnitSide ; 8 :
20992: CALL 33988 0 0
20996: GO 21014
20998: LD_INT 8
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21013
21006: POP
// hHackFog ; end ;
21007: CALL 34089 0 0
21011: GO 21014
21013: POP
// end ; end ;
21014: LD_VAR 0 7
21018: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21019: GO 21021
21021: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21022: LD_STRING initStreamRollete();
21024: PPUSH
21025: CALL_OW 559
// InitStreamMode ;
21029: CALL 21041 0 0
// DefineStreamItems ( false ) ;
21033: LD_INT 0
21035: PPUSH
21036: CALL 21505 0 1
// end ;
21040: END
// function InitStreamMode ; begin
21041: LD_INT 0
21043: PPUSH
// streamModeActive := false ;
21044: LD_ADDR_EXP 80
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// normalCounter := 36 ;
21052: LD_ADDR_EXP 81
21056: PUSH
21057: LD_INT 36
21059: ST_TO_ADDR
// hardcoreCounter := 18 ;
21060: LD_ADDR_EXP 82
21064: PUSH
21065: LD_INT 18
21067: ST_TO_ADDR
// sRocket := false ;
21068: LD_ADDR_EXP 85
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sSpeed := false ;
21076: LD_ADDR_EXP 84
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sEngine := false ;
21084: LD_ADDR_EXP 86
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sSpec := false ;
21092: LD_ADDR_EXP 83
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sLevel := false ;
21100: LD_ADDR_EXP 87
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sArmoury := false ;
21108: LD_ADDR_EXP 88
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sRadar := false ;
21116: LD_ADDR_EXP 89
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sBunker := false ;
21124: LD_ADDR_EXP 90
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sHack := false ;
21132: LD_ADDR_EXP 91
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sFire := false ;
21140: LD_ADDR_EXP 92
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sRefresh := false ;
21148: LD_ADDR_EXP 93
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sExp := false ;
21156: LD_ADDR_EXP 94
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sDepot := false ;
21164: LD_ADDR_EXP 95
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sFlag := false ;
21172: LD_ADDR_EXP 96
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sKamikadze := false ;
21180: LD_ADDR_EXP 104
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sTroll := false ;
21188: LD_ADDR_EXP 105
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// sSlow := false ;
21196: LD_ADDR_EXP 106
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// sLack := false ;
21204: LD_ADDR_EXP 107
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// sTank := false ;
21212: LD_ADDR_EXP 109
21216: PUSH
21217: LD_INT 0
21219: ST_TO_ADDR
// sRemote := false ;
21220: LD_ADDR_EXP 110
21224: PUSH
21225: LD_INT 0
21227: ST_TO_ADDR
// sPowell := false ;
21228: LD_ADDR_EXP 111
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// sTeleport := false ;
21236: LD_ADDR_EXP 114
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// sOilTower := false ;
21244: LD_ADDR_EXP 116
21248: PUSH
21249: LD_INT 0
21251: ST_TO_ADDR
// sShovel := false ;
21252: LD_ADDR_EXP 117
21256: PUSH
21257: LD_INT 0
21259: ST_TO_ADDR
// sSheik := false ;
21260: LD_ADDR_EXP 118
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// sEarthquake := false ;
21268: LD_ADDR_EXP 120
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// sAI := false ;
21276: LD_ADDR_EXP 121
21280: PUSH
21281: LD_INT 0
21283: ST_TO_ADDR
// sCargo := false ;
21284: LD_ADDR_EXP 124
21288: PUSH
21289: LD_INT 0
21291: ST_TO_ADDR
// sDLaser := false ;
21292: LD_ADDR_EXP 125
21296: PUSH
21297: LD_INT 0
21299: ST_TO_ADDR
// sExchange := false ;
21300: LD_ADDR_EXP 126
21304: PUSH
21305: LD_INT 0
21307: ST_TO_ADDR
// sFac := false ;
21308: LD_ADDR_EXP 127
21312: PUSH
21313: LD_INT 0
21315: ST_TO_ADDR
// sPower := false ;
21316: LD_ADDR_EXP 128
21320: PUSH
21321: LD_INT 0
21323: ST_TO_ADDR
// sRandom := false ;
21324: LD_ADDR_EXP 129
21328: PUSH
21329: LD_INT 0
21331: ST_TO_ADDR
// sShield := false ;
21332: LD_ADDR_EXP 130
21336: PUSH
21337: LD_INT 0
21339: ST_TO_ADDR
// sTime := false ;
21340: LD_ADDR_EXP 131
21344: PUSH
21345: LD_INT 0
21347: ST_TO_ADDR
// sTools := false ;
21348: LD_ADDR_EXP 132
21352: PUSH
21353: LD_INT 0
21355: ST_TO_ADDR
// sSold := false ;
21356: LD_ADDR_EXP 97
21360: PUSH
21361: LD_INT 0
21363: ST_TO_ADDR
// sDiff := false ;
21364: LD_ADDR_EXP 98
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
// sFog := false ;
21372: LD_ADDR_EXP 101
21376: PUSH
21377: LD_INT 0
21379: ST_TO_ADDR
// sReset := false ;
21380: LD_ADDR_EXP 102
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// sSun := false ;
21388: LD_ADDR_EXP 103
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// sTiger := false ;
21396: LD_ADDR_EXP 99
21400: PUSH
21401: LD_INT 0
21403: ST_TO_ADDR
// sBomb := false ;
21404: LD_ADDR_EXP 100
21408: PUSH
21409: LD_INT 0
21411: ST_TO_ADDR
// sWound := false ;
21412: LD_ADDR_EXP 108
21416: PUSH
21417: LD_INT 0
21419: ST_TO_ADDR
// sBetray := false ;
21420: LD_ADDR_EXP 112
21424: PUSH
21425: LD_INT 0
21427: ST_TO_ADDR
// sContamin := false ;
21428: LD_ADDR_EXP 113
21432: PUSH
21433: LD_INT 0
21435: ST_TO_ADDR
// sOil := false ;
21436: LD_ADDR_EXP 115
21440: PUSH
21441: LD_INT 0
21443: ST_TO_ADDR
// sStu := false ;
21444: LD_ADDR_EXP 119
21448: PUSH
21449: LD_INT 0
21451: ST_TO_ADDR
// sBazooka := false ;
21452: LD_ADDR_EXP 122
21456: PUSH
21457: LD_INT 0
21459: ST_TO_ADDR
// sMortar := false ;
21460: LD_ADDR_EXP 123
21464: PUSH
21465: LD_INT 0
21467: ST_TO_ADDR
// sRanger := false ;
21468: LD_ADDR_EXP 133
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// sComputer := false ;
21476: LD_ADDR_EXP 134
21480: PUSH
21481: LD_INT 0
21483: ST_TO_ADDR
// s30 := false ;
21484: LD_ADDR_EXP 135
21488: PUSH
21489: LD_INT 0
21491: ST_TO_ADDR
// s60 := false ;
21492: LD_ADDR_EXP 136
21496: PUSH
21497: LD_INT 0
21499: ST_TO_ADDR
// end ;
21500: LD_VAR 0 1
21504: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
// result := [ ] ;
21514: LD_ADDR_VAR 0 2
21518: PUSH
21519: EMPTY
21520: ST_TO_ADDR
// if campaign_id = 1 then
21521: LD_OWVAR 69
21525: PUSH
21526: LD_INT 1
21528: EQUAL
21529: IFFALSE 24695
// begin case mission_number of 1 :
21531: LD_OWVAR 70
21535: PUSH
21536: LD_INT 1
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21620
21544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 4
21555: PUSH
21556: LD_INT 11
21558: PUSH
21559: LD_INT 12
21561: PUSH
21562: LD_INT 15
21564: PUSH
21565: LD_INT 16
21567: PUSH
21568: LD_INT 22
21570: PUSH
21571: LD_INT 23
21573: PUSH
21574: LD_INT 26
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 101
21590: PUSH
21591: LD_INT 102
21593: PUSH
21594: LD_INT 106
21596: PUSH
21597: LD_INT 116
21599: PUSH
21600: LD_INT 117
21602: PUSH
21603: LD_INT 118
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: ST_TO_ADDR
21618: GO 24693
21620: LD_INT 2
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21712
21628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21629: LD_ADDR_VAR 0 2
21633: PUSH
21634: LD_INT 2
21636: PUSH
21637: LD_INT 4
21639: PUSH
21640: LD_INT 11
21642: PUSH
21643: LD_INT 12
21645: PUSH
21646: LD_INT 15
21648: PUSH
21649: LD_INT 16
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_INT 23
21657: PUSH
21658: LD_INT 26
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 101
21674: PUSH
21675: LD_INT 102
21677: PUSH
21678: LD_INT 105
21680: PUSH
21681: LD_INT 106
21683: PUSH
21684: LD_INT 108
21686: PUSH
21687: LD_INT 116
21689: PUSH
21690: LD_INT 117
21692: PUSH
21693: LD_INT 118
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: ST_TO_ADDR
21710: GO 24693
21712: LD_INT 3
21714: DOUBLE
21715: EQUAL
21716: IFTRUE 21720
21718: GO 21808
21720: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21721: LD_ADDR_VAR 0 2
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 4
21731: PUSH
21732: LD_INT 5
21734: PUSH
21735: LD_INT 11
21737: PUSH
21738: LD_INT 12
21740: PUSH
21741: LD_INT 15
21743: PUSH
21744: LD_INT 16
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 26
21752: PUSH
21753: LD_INT 36
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 101
21770: PUSH
21771: LD_INT 102
21773: PUSH
21774: LD_INT 105
21776: PUSH
21777: LD_INT 106
21779: PUSH
21780: LD_INT 108
21782: PUSH
21783: LD_INT 116
21785: PUSH
21786: LD_INT 117
21788: PUSH
21789: LD_INT 118
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: ST_TO_ADDR
21806: GO 24693
21808: LD_INT 4
21810: DOUBLE
21811: EQUAL
21812: IFTRUE 21816
21814: GO 21912
21816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21817: LD_ADDR_VAR 0 2
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: LD_INT 4
21827: PUSH
21828: LD_INT 5
21830: PUSH
21831: LD_INT 8
21833: PUSH
21834: LD_INT 11
21836: PUSH
21837: LD_INT 12
21839: PUSH
21840: LD_INT 15
21842: PUSH
21843: LD_INT 16
21845: PUSH
21846: LD_INT 22
21848: PUSH
21849: LD_INT 23
21851: PUSH
21852: LD_INT 26
21854: PUSH
21855: LD_INT 36
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 101
21874: PUSH
21875: LD_INT 102
21877: PUSH
21878: LD_INT 105
21880: PUSH
21881: LD_INT 106
21883: PUSH
21884: LD_INT 108
21886: PUSH
21887: LD_INT 116
21889: PUSH
21890: LD_INT 117
21892: PUSH
21893: LD_INT 118
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: ST_TO_ADDR
21910: GO 24693
21912: LD_INT 5
21914: DOUBLE
21915: EQUAL
21916: IFTRUE 21920
21918: GO 22032
21920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21921: LD_ADDR_VAR 0 2
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 4
21931: PUSH
21932: LD_INT 5
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 8
21940: PUSH
21941: LD_INT 11
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: LD_INT 15
21949: PUSH
21950: LD_INT 16
21952: PUSH
21953: LD_INT 22
21955: PUSH
21956: LD_INT 23
21958: PUSH
21959: LD_INT 25
21961: PUSH
21962: LD_INT 26
21964: PUSH
21965: LD_INT 36
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 101
21986: PUSH
21987: LD_INT 102
21989: PUSH
21990: LD_INT 105
21992: PUSH
21993: LD_INT 106
21995: PUSH
21996: LD_INT 108
21998: PUSH
21999: LD_INT 109
22001: PUSH
22002: LD_INT 112
22004: PUSH
22005: LD_INT 116
22007: PUSH
22008: LD_INT 117
22010: PUSH
22011: LD_INT 118
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: ST_TO_ADDR
22030: GO 24693
22032: LD_INT 6
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22172
22040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22041: LD_ADDR_VAR 0 2
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 4
22051: PUSH
22052: LD_INT 5
22054: PUSH
22055: LD_INT 6
22057: PUSH
22058: LD_INT 8
22060: PUSH
22061: LD_INT 11
22063: PUSH
22064: LD_INT 12
22066: PUSH
22067: LD_INT 15
22069: PUSH
22070: LD_INT 16
22072: PUSH
22073: LD_INT 20
22075: PUSH
22076: LD_INT 21
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_INT 23
22084: PUSH
22085: LD_INT 25
22087: PUSH
22088: LD_INT 26
22090: PUSH
22091: LD_INT 30
22093: PUSH
22094: LD_INT 31
22096: PUSH
22097: LD_INT 32
22099: PUSH
22100: LD_INT 36
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 101
22126: PUSH
22127: LD_INT 102
22129: PUSH
22130: LD_INT 105
22132: PUSH
22133: LD_INT 106
22135: PUSH
22136: LD_INT 108
22138: PUSH
22139: LD_INT 109
22141: PUSH
22142: LD_INT 112
22144: PUSH
22145: LD_INT 116
22147: PUSH
22148: LD_INT 117
22150: PUSH
22151: LD_INT 118
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: ST_TO_ADDR
22170: GO 24693
22172: LD_INT 7
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22292
22180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: LD_INT 4
22191: PUSH
22192: LD_INT 5
22194: PUSH
22195: LD_INT 7
22197: PUSH
22198: LD_INT 11
22200: PUSH
22201: LD_INT 12
22203: PUSH
22204: LD_INT 15
22206: PUSH
22207: LD_INT 16
22209: PUSH
22210: LD_INT 20
22212: PUSH
22213: LD_INT 21
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 25
22224: PUSH
22225: LD_INT 26
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 101
22246: PUSH
22247: LD_INT 102
22249: PUSH
22250: LD_INT 103
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 108
22261: PUSH
22262: LD_INT 112
22264: PUSH
22265: LD_INT 116
22267: PUSH
22268: LD_INT 117
22270: PUSH
22271: LD_INT 118
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: ST_TO_ADDR
22290: GO 24693
22292: LD_INT 8
22294: DOUBLE
22295: EQUAL
22296: IFTRUE 22300
22298: GO 22440
22300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22301: LD_ADDR_VAR 0 2
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: LD_INT 4
22311: PUSH
22312: LD_INT 5
22314: PUSH
22315: LD_INT 6
22317: PUSH
22318: LD_INT 7
22320: PUSH
22321: LD_INT 8
22323: PUSH
22324: LD_INT 11
22326: PUSH
22327: LD_INT 12
22329: PUSH
22330: LD_INT 15
22332: PUSH
22333: LD_INT 16
22335: PUSH
22336: LD_INT 20
22338: PUSH
22339: LD_INT 21
22341: PUSH
22342: LD_INT 22
22344: PUSH
22345: LD_INT 23
22347: PUSH
22348: LD_INT 25
22350: PUSH
22351: LD_INT 26
22353: PUSH
22354: LD_INT 30
22356: PUSH
22357: LD_INT 31
22359: PUSH
22360: LD_INT 32
22362: PUSH
22363: LD_INT 36
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 101
22390: PUSH
22391: LD_INT 102
22393: PUSH
22394: LD_INT 103
22396: PUSH
22397: LD_INT 105
22399: PUSH
22400: LD_INT 106
22402: PUSH
22403: LD_INT 108
22405: PUSH
22406: LD_INT 109
22408: PUSH
22409: LD_INT 112
22411: PUSH
22412: LD_INT 116
22414: PUSH
22415: LD_INT 117
22417: PUSH
22418: LD_INT 118
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: ST_TO_ADDR
22438: GO 24693
22440: LD_INT 9
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22596
22448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22449: LD_ADDR_VAR 0 2
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 4
22459: PUSH
22460: LD_INT 5
22462: PUSH
22463: LD_INT 6
22465: PUSH
22466: LD_INT 7
22468: PUSH
22469: LD_INT 8
22471: PUSH
22472: LD_INT 11
22474: PUSH
22475: LD_INT 12
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 16
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 25
22498: PUSH
22499: LD_INT 26
22501: PUSH
22502: LD_INT 28
22504: PUSH
22505: LD_INT 30
22507: PUSH
22508: LD_INT 31
22510: PUSH
22511: LD_INT 32
22513: PUSH
22514: LD_INT 36
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 101
22542: PUSH
22543: LD_INT 102
22545: PUSH
22546: LD_INT 103
22548: PUSH
22549: LD_INT 105
22551: PUSH
22552: LD_INT 106
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 109
22560: PUSH
22561: LD_INT 112
22563: PUSH
22564: LD_INT 114
22566: PUSH
22567: LD_INT 116
22569: PUSH
22570: LD_INT 117
22572: PUSH
22573: LD_INT 118
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: ST_TO_ADDR
22594: GO 24693
22596: LD_INT 10
22598: DOUBLE
22599: EQUAL
22600: IFTRUE 22604
22602: GO 22800
22604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 4
22615: PUSH
22616: LD_INT 5
22618: PUSH
22619: LD_INT 6
22621: PUSH
22622: LD_INT 7
22624: PUSH
22625: LD_INT 8
22627: PUSH
22628: LD_INT 9
22630: PUSH
22631: LD_INT 10
22633: PUSH
22634: LD_INT 11
22636: PUSH
22637: LD_INT 12
22639: PUSH
22640: LD_INT 13
22642: PUSH
22643: LD_INT 14
22645: PUSH
22646: LD_INT 15
22648: PUSH
22649: LD_INT 16
22651: PUSH
22652: LD_INT 17
22654: PUSH
22655: LD_INT 18
22657: PUSH
22658: LD_INT 19
22660: PUSH
22661: LD_INT 20
22663: PUSH
22664: LD_INT 21
22666: PUSH
22667: LD_INT 22
22669: PUSH
22670: LD_INT 23
22672: PUSH
22673: LD_INT 24
22675: PUSH
22676: LD_INT 25
22678: PUSH
22679: LD_INT 26
22681: PUSH
22682: LD_INT 28
22684: PUSH
22685: LD_INT 30
22687: PUSH
22688: LD_INT 31
22690: PUSH
22691: LD_INT 32
22693: PUSH
22694: LD_INT 36
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 101
22730: PUSH
22731: LD_INT 102
22733: PUSH
22734: LD_INT 103
22736: PUSH
22737: LD_INT 104
22739: PUSH
22740: LD_INT 105
22742: PUSH
22743: LD_INT 106
22745: PUSH
22746: LD_INT 107
22748: PUSH
22749: LD_INT 108
22751: PUSH
22752: LD_INT 109
22754: PUSH
22755: LD_INT 110
22757: PUSH
22758: LD_INT 111
22760: PUSH
22761: LD_INT 112
22763: PUSH
22764: LD_INT 114
22766: PUSH
22767: LD_INT 116
22769: PUSH
22770: LD_INT 117
22772: PUSH
22773: LD_INT 118
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: ST_TO_ADDR
22798: GO 24693
22800: LD_INT 11
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 23012
22808: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22809: LD_ADDR_VAR 0 2
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: LD_INT 6
22828: PUSH
22829: LD_INT 7
22831: PUSH
22832: LD_INT 8
22834: PUSH
22835: LD_INT 9
22837: PUSH
22838: LD_INT 10
22840: PUSH
22841: LD_INT 11
22843: PUSH
22844: LD_INT 12
22846: PUSH
22847: LD_INT 13
22849: PUSH
22850: LD_INT 14
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 16
22858: PUSH
22859: LD_INT 17
22861: PUSH
22862: LD_INT 18
22864: PUSH
22865: LD_INT 19
22867: PUSH
22868: LD_INT 20
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_INT 23
22879: PUSH
22880: LD_INT 24
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 26
22888: PUSH
22889: LD_INT 28
22891: PUSH
22892: LD_INT 30
22894: PUSH
22895: LD_INT 31
22897: PUSH
22898: LD_INT 32
22900: PUSH
22901: LD_INT 34
22903: PUSH
22904: LD_INT 36
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 101
22942: PUSH
22943: LD_INT 102
22945: PUSH
22946: LD_INT 103
22948: PUSH
22949: LD_INT 104
22951: PUSH
22952: LD_INT 105
22954: PUSH
22955: LD_INT 106
22957: PUSH
22958: LD_INT 107
22960: PUSH
22961: LD_INT 108
22963: PUSH
22964: LD_INT 109
22966: PUSH
22967: LD_INT 110
22969: PUSH
22970: LD_INT 111
22972: PUSH
22973: LD_INT 112
22975: PUSH
22976: LD_INT 114
22978: PUSH
22979: LD_INT 116
22981: PUSH
22982: LD_INT 117
22984: PUSH
22985: LD_INT 118
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: ST_TO_ADDR
23010: GO 24693
23012: LD_INT 12
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23240
23020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23021: LD_ADDR_VAR 0 2
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: LD_INT 4
23037: PUSH
23038: LD_INT 5
23040: PUSH
23041: LD_INT 6
23043: PUSH
23044: LD_INT 7
23046: PUSH
23047: LD_INT 8
23049: PUSH
23050: LD_INT 9
23052: PUSH
23053: LD_INT 10
23055: PUSH
23056: LD_INT 11
23058: PUSH
23059: LD_INT 12
23061: PUSH
23062: LD_INT 13
23064: PUSH
23065: LD_INT 14
23067: PUSH
23068: LD_INT 15
23070: PUSH
23071: LD_INT 16
23073: PUSH
23074: LD_INT 17
23076: PUSH
23077: LD_INT 18
23079: PUSH
23080: LD_INT 19
23082: PUSH
23083: LD_INT 20
23085: PUSH
23086: LD_INT 21
23088: PUSH
23089: LD_INT 22
23091: PUSH
23092: LD_INT 23
23094: PUSH
23095: LD_INT 24
23097: PUSH
23098: LD_INT 25
23100: PUSH
23101: LD_INT 26
23103: PUSH
23104: LD_INT 27
23106: PUSH
23107: LD_INT 28
23109: PUSH
23110: LD_INT 30
23112: PUSH
23113: LD_INT 31
23115: PUSH
23116: LD_INT 32
23118: PUSH
23119: LD_INT 33
23121: PUSH
23122: LD_INT 34
23124: PUSH
23125: LD_INT 36
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 101
23166: PUSH
23167: LD_INT 102
23169: PUSH
23170: LD_INT 103
23172: PUSH
23173: LD_INT 104
23175: PUSH
23176: LD_INT 105
23178: PUSH
23179: LD_INT 106
23181: PUSH
23182: LD_INT 107
23184: PUSH
23185: LD_INT 108
23187: PUSH
23188: LD_INT 109
23190: PUSH
23191: LD_INT 110
23193: PUSH
23194: LD_INT 111
23196: PUSH
23197: LD_INT 112
23199: PUSH
23200: LD_INT 113
23202: PUSH
23203: LD_INT 114
23205: PUSH
23206: LD_INT 116
23208: PUSH
23209: LD_INT 117
23211: PUSH
23212: LD_INT 118
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: ST_TO_ADDR
23238: GO 24693
23240: LD_INT 13
23242: DOUBLE
23243: EQUAL
23244: IFTRUE 23248
23246: GO 23456
23248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: LD_INT 4
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 8
23271: PUSH
23272: LD_INT 9
23274: PUSH
23275: LD_INT 10
23277: PUSH
23278: LD_INT 11
23280: PUSH
23281: LD_INT 12
23283: PUSH
23284: LD_INT 14
23286: PUSH
23287: LD_INT 15
23289: PUSH
23290: LD_INT 16
23292: PUSH
23293: LD_INT 17
23295: PUSH
23296: LD_INT 18
23298: PUSH
23299: LD_INT 19
23301: PUSH
23302: LD_INT 20
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 22
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 25
23319: PUSH
23320: LD_INT 26
23322: PUSH
23323: LD_INT 27
23325: PUSH
23326: LD_INT 28
23328: PUSH
23329: LD_INT 30
23331: PUSH
23332: LD_INT 31
23334: PUSH
23335: LD_INT 32
23337: PUSH
23338: LD_INT 33
23340: PUSH
23341: LD_INT 34
23343: PUSH
23344: LD_INT 36
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 101
23382: PUSH
23383: LD_INT 102
23385: PUSH
23386: LD_INT 103
23388: PUSH
23389: LD_INT 104
23391: PUSH
23392: LD_INT 105
23394: PUSH
23395: LD_INT 106
23397: PUSH
23398: LD_INT 107
23400: PUSH
23401: LD_INT 108
23403: PUSH
23404: LD_INT 109
23406: PUSH
23407: LD_INT 110
23409: PUSH
23410: LD_INT 111
23412: PUSH
23413: LD_INT 112
23415: PUSH
23416: LD_INT 113
23418: PUSH
23419: LD_INT 114
23421: PUSH
23422: LD_INT 116
23424: PUSH
23425: LD_INT 117
23427: PUSH
23428: LD_INT 118
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: ST_TO_ADDR
23454: GO 24693
23456: LD_INT 14
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23688
23464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: LD_INT 5
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: LD_INT 8
23493: PUSH
23494: LD_INT 9
23496: PUSH
23497: LD_INT 10
23499: PUSH
23500: LD_INT 11
23502: PUSH
23503: LD_INT 12
23505: PUSH
23506: LD_INT 13
23508: PUSH
23509: LD_INT 14
23511: PUSH
23512: LD_INT 15
23514: PUSH
23515: LD_INT 16
23517: PUSH
23518: LD_INT 17
23520: PUSH
23521: LD_INT 18
23523: PUSH
23524: LD_INT 19
23526: PUSH
23527: LD_INT 20
23529: PUSH
23530: LD_INT 21
23532: PUSH
23533: LD_INT 22
23535: PUSH
23536: LD_INT 23
23538: PUSH
23539: LD_INT 24
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 26
23547: PUSH
23548: LD_INT 27
23550: PUSH
23551: LD_INT 28
23553: PUSH
23554: LD_INT 29
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 31
23562: PUSH
23563: LD_INT 32
23565: PUSH
23566: LD_INT 33
23568: PUSH
23569: LD_INT 34
23571: PUSH
23572: LD_INT 36
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 101
23614: PUSH
23615: LD_INT 102
23617: PUSH
23618: LD_INT 103
23620: PUSH
23621: LD_INT 104
23623: PUSH
23624: LD_INT 105
23626: PUSH
23627: LD_INT 106
23629: PUSH
23630: LD_INT 107
23632: PUSH
23633: LD_INT 108
23635: PUSH
23636: LD_INT 109
23638: PUSH
23639: LD_INT 110
23641: PUSH
23642: LD_INT 111
23644: PUSH
23645: LD_INT 112
23647: PUSH
23648: LD_INT 113
23650: PUSH
23651: LD_INT 114
23653: PUSH
23654: LD_INT 116
23656: PUSH
23657: LD_INT 117
23659: PUSH
23660: LD_INT 118
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: ST_TO_ADDR
23686: GO 24693
23688: LD_INT 15
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23920
23696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 3
23710: PUSH
23711: LD_INT 4
23713: PUSH
23714: LD_INT 5
23716: PUSH
23717: LD_INT 6
23719: PUSH
23720: LD_INT 7
23722: PUSH
23723: LD_INT 8
23725: PUSH
23726: LD_INT 9
23728: PUSH
23729: LD_INT 10
23731: PUSH
23732: LD_INT 11
23734: PUSH
23735: LD_INT 12
23737: PUSH
23738: LD_INT 13
23740: PUSH
23741: LD_INT 14
23743: PUSH
23744: LD_INT 15
23746: PUSH
23747: LD_INT 16
23749: PUSH
23750: LD_INT 17
23752: PUSH
23753: LD_INT 18
23755: PUSH
23756: LD_INT 19
23758: PUSH
23759: LD_INT 20
23761: PUSH
23762: LD_INT 21
23764: PUSH
23765: LD_INT 22
23767: PUSH
23768: LD_INT 23
23770: PUSH
23771: LD_INT 24
23773: PUSH
23774: LD_INT 25
23776: PUSH
23777: LD_INT 26
23779: PUSH
23780: LD_INT 27
23782: PUSH
23783: LD_INT 28
23785: PUSH
23786: LD_INT 29
23788: PUSH
23789: LD_INT 30
23791: PUSH
23792: LD_INT 31
23794: PUSH
23795: LD_INT 32
23797: PUSH
23798: LD_INT 33
23800: PUSH
23801: LD_INT 34
23803: PUSH
23804: LD_INT 36
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 101
23846: PUSH
23847: LD_INT 102
23849: PUSH
23850: LD_INT 103
23852: PUSH
23853: LD_INT 104
23855: PUSH
23856: LD_INT 105
23858: PUSH
23859: LD_INT 106
23861: PUSH
23862: LD_INT 107
23864: PUSH
23865: LD_INT 108
23867: PUSH
23868: LD_INT 109
23870: PUSH
23871: LD_INT 110
23873: PUSH
23874: LD_INT 111
23876: PUSH
23877: LD_INT 112
23879: PUSH
23880: LD_INT 113
23882: PUSH
23883: LD_INT 114
23885: PUSH
23886: LD_INT 116
23888: PUSH
23889: LD_INT 117
23891: PUSH
23892: LD_INT 118
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: ST_TO_ADDR
23918: GO 24693
23920: LD_INT 16
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23928
23926: GO 24064
23928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 4
23939: PUSH
23940: LD_INT 5
23942: PUSH
23943: LD_INT 7
23945: PUSH
23946: LD_INT 11
23948: PUSH
23949: LD_INT 12
23951: PUSH
23952: LD_INT 15
23954: PUSH
23955: LD_INT 16
23957: PUSH
23958: LD_INT 20
23960: PUSH
23961: LD_INT 21
23963: PUSH
23964: LD_INT 22
23966: PUSH
23967: LD_INT 23
23969: PUSH
23970: LD_INT 25
23972: PUSH
23973: LD_INT 26
23975: PUSH
23976: LD_INT 30
23978: PUSH
23979: LD_INT 31
23981: PUSH
23982: LD_INT 32
23984: PUSH
23985: LD_INT 33
23987: PUSH
23988: LD_INT 34
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 108
24026: PUSH
24027: LD_INT 112
24029: PUSH
24030: LD_INT 113
24032: PUSH
24033: LD_INT 114
24035: PUSH
24036: LD_INT 116
24038: PUSH
24039: LD_INT 117
24041: PUSH
24042: LD_INT 118
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: ST_TO_ADDR
24062: GO 24693
24064: LD_INT 17
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24296
24072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 3
24086: PUSH
24087: LD_INT 4
24089: PUSH
24090: LD_INT 5
24092: PUSH
24093: LD_INT 6
24095: PUSH
24096: LD_INT 7
24098: PUSH
24099: LD_INT 8
24101: PUSH
24102: LD_INT 9
24104: PUSH
24105: LD_INT 10
24107: PUSH
24108: LD_INT 11
24110: PUSH
24111: LD_INT 12
24113: PUSH
24114: LD_INT 13
24116: PUSH
24117: LD_INT 14
24119: PUSH
24120: LD_INT 15
24122: PUSH
24123: LD_INT 16
24125: PUSH
24126: LD_INT 17
24128: PUSH
24129: LD_INT 18
24131: PUSH
24132: LD_INT 19
24134: PUSH
24135: LD_INT 20
24137: PUSH
24138: LD_INT 21
24140: PUSH
24141: LD_INT 22
24143: PUSH
24144: LD_INT 23
24146: PUSH
24147: LD_INT 24
24149: PUSH
24150: LD_INT 25
24152: PUSH
24153: LD_INT 26
24155: PUSH
24156: LD_INT 27
24158: PUSH
24159: LD_INT 28
24161: PUSH
24162: LD_INT 29
24164: PUSH
24165: LD_INT 30
24167: PUSH
24168: LD_INT 31
24170: PUSH
24171: LD_INT 32
24173: PUSH
24174: LD_INT 33
24176: PUSH
24177: LD_INT 34
24179: PUSH
24180: LD_INT 36
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 101
24222: PUSH
24223: LD_INT 102
24225: PUSH
24226: LD_INT 103
24228: PUSH
24229: LD_INT 104
24231: PUSH
24232: LD_INT 105
24234: PUSH
24235: LD_INT 106
24237: PUSH
24238: LD_INT 107
24240: PUSH
24241: LD_INT 108
24243: PUSH
24244: LD_INT 109
24246: PUSH
24247: LD_INT 110
24249: PUSH
24250: LD_INT 111
24252: PUSH
24253: LD_INT 112
24255: PUSH
24256: LD_INT 113
24258: PUSH
24259: LD_INT 114
24261: PUSH
24262: LD_INT 116
24264: PUSH
24265: LD_INT 117
24267: PUSH
24268: LD_INT 118
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: ST_TO_ADDR
24294: GO 24693
24296: LD_INT 18
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24452
24304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24305: LD_ADDR_VAR 0 2
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 4
24315: PUSH
24316: LD_INT 5
24318: PUSH
24319: LD_INT 7
24321: PUSH
24322: LD_INT 11
24324: PUSH
24325: LD_INT 12
24327: PUSH
24328: LD_INT 15
24330: PUSH
24331: LD_INT 16
24333: PUSH
24334: LD_INT 20
24336: PUSH
24337: LD_INT 21
24339: PUSH
24340: LD_INT 22
24342: PUSH
24343: LD_INT 23
24345: PUSH
24346: LD_INT 25
24348: PUSH
24349: LD_INT 26
24351: PUSH
24352: LD_INT 30
24354: PUSH
24355: LD_INT 31
24357: PUSH
24358: LD_INT 32
24360: PUSH
24361: LD_INT 33
24363: PUSH
24364: LD_INT 34
24366: PUSH
24367: LD_INT 35
24369: PUSH
24370: LD_INT 36
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 101
24398: PUSH
24399: LD_INT 102
24401: PUSH
24402: LD_INT 103
24404: PUSH
24405: LD_INT 106
24407: PUSH
24408: LD_INT 108
24410: PUSH
24411: LD_INT 112
24413: PUSH
24414: LD_INT 113
24416: PUSH
24417: LD_INT 114
24419: PUSH
24420: LD_INT 115
24422: PUSH
24423: LD_INT 116
24425: PUSH
24426: LD_INT 117
24428: PUSH
24429: LD_INT 118
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: ST_TO_ADDR
24450: GO 24693
24452: LD_INT 19
24454: DOUBLE
24455: EQUAL
24456: IFTRUE 24460
24458: GO 24692
24460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24461: LD_ADDR_VAR 0 2
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 3
24474: PUSH
24475: LD_INT 4
24477: PUSH
24478: LD_INT 5
24480: PUSH
24481: LD_INT 6
24483: PUSH
24484: LD_INT 7
24486: PUSH
24487: LD_INT 8
24489: PUSH
24490: LD_INT 9
24492: PUSH
24493: LD_INT 10
24495: PUSH
24496: LD_INT 11
24498: PUSH
24499: LD_INT 12
24501: PUSH
24502: LD_INT 13
24504: PUSH
24505: LD_INT 14
24507: PUSH
24508: LD_INT 15
24510: PUSH
24511: LD_INT 16
24513: PUSH
24514: LD_INT 17
24516: PUSH
24517: LD_INT 18
24519: PUSH
24520: LD_INT 19
24522: PUSH
24523: LD_INT 20
24525: PUSH
24526: LD_INT 21
24528: PUSH
24529: LD_INT 22
24531: PUSH
24532: LD_INT 23
24534: PUSH
24535: LD_INT 24
24537: PUSH
24538: LD_INT 25
24540: PUSH
24541: LD_INT 26
24543: PUSH
24544: LD_INT 27
24546: PUSH
24547: LD_INT 28
24549: PUSH
24550: LD_INT 29
24552: PUSH
24553: LD_INT 30
24555: PUSH
24556: LD_INT 31
24558: PUSH
24559: LD_INT 32
24561: PUSH
24562: LD_INT 33
24564: PUSH
24565: LD_INT 34
24567: PUSH
24568: LD_INT 35
24570: PUSH
24571: LD_INT 36
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 101
24614: PUSH
24615: LD_INT 102
24617: PUSH
24618: LD_INT 103
24620: PUSH
24621: LD_INT 104
24623: PUSH
24624: LD_INT 105
24626: PUSH
24627: LD_INT 106
24629: PUSH
24630: LD_INT 107
24632: PUSH
24633: LD_INT 108
24635: PUSH
24636: LD_INT 109
24638: PUSH
24639: LD_INT 110
24641: PUSH
24642: LD_INT 111
24644: PUSH
24645: LD_INT 112
24647: PUSH
24648: LD_INT 113
24650: PUSH
24651: LD_INT 114
24653: PUSH
24654: LD_INT 115
24656: PUSH
24657: LD_INT 116
24659: PUSH
24660: LD_INT 117
24662: PUSH
24663: LD_INT 118
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: ST_TO_ADDR
24690: GO 24693
24692: POP
// end else
24693: GO 24924
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24695: LD_ADDR_VAR 0 2
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 3
24708: PUSH
24709: LD_INT 4
24711: PUSH
24712: LD_INT 5
24714: PUSH
24715: LD_INT 6
24717: PUSH
24718: LD_INT 7
24720: PUSH
24721: LD_INT 8
24723: PUSH
24724: LD_INT 9
24726: PUSH
24727: LD_INT 10
24729: PUSH
24730: LD_INT 11
24732: PUSH
24733: LD_INT 12
24735: PUSH
24736: LD_INT 13
24738: PUSH
24739: LD_INT 14
24741: PUSH
24742: LD_INT 15
24744: PUSH
24745: LD_INT 16
24747: PUSH
24748: LD_INT 17
24750: PUSH
24751: LD_INT 18
24753: PUSH
24754: LD_INT 19
24756: PUSH
24757: LD_INT 20
24759: PUSH
24760: LD_INT 21
24762: PUSH
24763: LD_INT 22
24765: PUSH
24766: LD_INT 23
24768: PUSH
24769: LD_INT 24
24771: PUSH
24772: LD_INT 25
24774: PUSH
24775: LD_INT 26
24777: PUSH
24778: LD_INT 27
24780: PUSH
24781: LD_INT 28
24783: PUSH
24784: LD_INT 29
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 31
24792: PUSH
24793: LD_INT 32
24795: PUSH
24796: LD_INT 33
24798: PUSH
24799: LD_INT 34
24801: PUSH
24802: LD_INT 35
24804: PUSH
24805: LD_INT 36
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 101
24848: PUSH
24849: LD_INT 102
24851: PUSH
24852: LD_INT 103
24854: PUSH
24855: LD_INT 104
24857: PUSH
24858: LD_INT 105
24860: PUSH
24861: LD_INT 106
24863: PUSH
24864: LD_INT 107
24866: PUSH
24867: LD_INT 108
24869: PUSH
24870: LD_INT 109
24872: PUSH
24873: LD_INT 110
24875: PUSH
24876: LD_INT 111
24878: PUSH
24879: LD_INT 112
24881: PUSH
24882: LD_INT 113
24884: PUSH
24885: LD_INT 114
24887: PUSH
24888: LD_INT 115
24890: PUSH
24891: LD_INT 116
24893: PUSH
24894: LD_INT 117
24896: PUSH
24897: LD_INT 118
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: ST_TO_ADDR
// if result then
24924: LD_VAR 0 2
24928: IFFALSE 25714
// begin normal :=  ;
24930: LD_ADDR_VAR 0 5
24934: PUSH
24935: LD_STRING 
24937: ST_TO_ADDR
// hardcore :=  ;
24938: LD_ADDR_VAR 0 6
24942: PUSH
24943: LD_STRING 
24945: ST_TO_ADDR
// active :=  ;
24946: LD_ADDR_VAR 0 7
24950: PUSH
24951: LD_STRING 
24953: ST_TO_ADDR
// for i = 1 to normalCounter do
24954: LD_ADDR_VAR 0 8
24958: PUSH
24959: DOUBLE
24960: LD_INT 1
24962: DEC
24963: ST_TO_ADDR
24964: LD_EXP 81
24968: PUSH
24969: FOR_TO
24970: IFFALSE 25071
// begin tmp := 0 ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_STRING 0
24979: ST_TO_ADDR
// if result [ 1 ] then
24980: LD_VAR 0 2
24984: PUSH
24985: LD_INT 1
24987: ARRAY
24988: IFFALSE 25053
// if result [ 1 ] [ 1 ] = i then
24990: LD_VAR 0 2
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: PUSH
24999: LD_INT 1
25001: ARRAY
25002: PUSH
25003: LD_VAR 0 8
25007: EQUAL
25008: IFFALSE 25053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25010: LD_ADDR_VAR 0 2
25014: PUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_INT 1
25022: PPUSH
25023: LD_VAR 0 2
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PPUSH
25032: LD_INT 1
25034: PPUSH
25035: CALL_OW 3
25039: PPUSH
25040: CALL_OW 1
25044: ST_TO_ADDR
// tmp := 1 ;
25045: LD_ADDR_VAR 0 3
25049: PUSH
25050: LD_STRING 1
25052: ST_TO_ADDR
// end ; normal := normal & tmp ;
25053: LD_ADDR_VAR 0 5
25057: PUSH
25058: LD_VAR 0 5
25062: PUSH
25063: LD_VAR 0 3
25067: STR
25068: ST_TO_ADDR
// end ;
25069: GO 24969
25071: POP
25072: POP
// for i = 1 to hardcoreCounter do
25073: LD_ADDR_VAR 0 8
25077: PUSH
25078: DOUBLE
25079: LD_INT 1
25081: DEC
25082: ST_TO_ADDR
25083: LD_EXP 82
25087: PUSH
25088: FOR_TO
25089: IFFALSE 25194
// begin tmp := 0 ;
25091: LD_ADDR_VAR 0 3
25095: PUSH
25096: LD_STRING 0
25098: ST_TO_ADDR
// if result [ 2 ] then
25099: LD_VAR 0 2
25103: PUSH
25104: LD_INT 2
25106: ARRAY
25107: IFFALSE 25176
// if result [ 2 ] [ 1 ] = 100 + i then
25109: LD_VAR 0 2
25113: PUSH
25114: LD_INT 2
25116: ARRAY
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PUSH
25122: LD_INT 100
25124: PUSH
25125: LD_VAR 0 8
25129: PLUS
25130: EQUAL
25131: IFFALSE 25176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: LD_VAR 0 2
25142: PPUSH
25143: LD_INT 2
25145: PPUSH
25146: LD_VAR 0 2
25150: PUSH
25151: LD_INT 2
25153: ARRAY
25154: PPUSH
25155: LD_INT 1
25157: PPUSH
25158: CALL_OW 3
25162: PPUSH
25163: CALL_OW 1
25167: ST_TO_ADDR
// tmp := 1 ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_STRING 1
25175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25176: LD_ADDR_VAR 0 6
25180: PUSH
25181: LD_VAR 0 6
25185: PUSH
25186: LD_VAR 0 3
25190: STR
25191: ST_TO_ADDR
// end ;
25192: GO 25088
25194: POP
25195: POP
// if isGameLoad then
25196: LD_VAR 0 1
25200: IFFALSE 25675
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25202: LD_ADDR_VAR 0 4
25206: PUSH
25207: LD_EXP 85
25211: PUSH
25212: LD_EXP 84
25216: PUSH
25217: LD_EXP 86
25221: PUSH
25222: LD_EXP 83
25226: PUSH
25227: LD_EXP 87
25231: PUSH
25232: LD_EXP 88
25236: PUSH
25237: LD_EXP 89
25241: PUSH
25242: LD_EXP 90
25246: PUSH
25247: LD_EXP 91
25251: PUSH
25252: LD_EXP 92
25256: PUSH
25257: LD_EXP 93
25261: PUSH
25262: LD_EXP 94
25266: PUSH
25267: LD_EXP 95
25271: PUSH
25272: LD_EXP 96
25276: PUSH
25277: LD_EXP 104
25281: PUSH
25282: LD_EXP 105
25286: PUSH
25287: LD_EXP 106
25291: PUSH
25292: LD_EXP 107
25296: PUSH
25297: LD_EXP 109
25301: PUSH
25302: LD_EXP 110
25306: PUSH
25307: LD_EXP 111
25311: PUSH
25312: LD_EXP 114
25316: PUSH
25317: LD_EXP 116
25321: PUSH
25322: LD_EXP 117
25326: PUSH
25327: LD_EXP 118
25331: PUSH
25332: LD_EXP 120
25336: PUSH
25337: LD_EXP 121
25341: PUSH
25342: LD_EXP 124
25346: PUSH
25347: LD_EXP 125
25351: PUSH
25352: LD_EXP 126
25356: PUSH
25357: LD_EXP 127
25361: PUSH
25362: LD_EXP 128
25366: PUSH
25367: LD_EXP 129
25371: PUSH
25372: LD_EXP 130
25376: PUSH
25377: LD_EXP 131
25381: PUSH
25382: LD_EXP 132
25386: PUSH
25387: LD_EXP 97
25391: PUSH
25392: LD_EXP 98
25396: PUSH
25397: LD_EXP 101
25401: PUSH
25402: LD_EXP 102
25406: PUSH
25407: LD_EXP 103
25411: PUSH
25412: LD_EXP 99
25416: PUSH
25417: LD_EXP 100
25421: PUSH
25422: LD_EXP 108
25426: PUSH
25427: LD_EXP 112
25431: PUSH
25432: LD_EXP 113
25436: PUSH
25437: LD_EXP 115
25441: PUSH
25442: LD_EXP 119
25446: PUSH
25447: LD_EXP 122
25451: PUSH
25452: LD_EXP 123
25456: PUSH
25457: LD_EXP 133
25461: PUSH
25462: LD_EXP 134
25466: PUSH
25467: LD_EXP 135
25471: PUSH
25472: LD_EXP 136
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: ST_TO_ADDR
// tmp :=  ;
25533: LD_ADDR_VAR 0 3
25537: PUSH
25538: LD_STRING 
25540: ST_TO_ADDR
// for i = 1 to normalCounter do
25541: LD_ADDR_VAR 0 8
25545: PUSH
25546: DOUBLE
25547: LD_INT 1
25549: DEC
25550: ST_TO_ADDR
25551: LD_EXP 81
25555: PUSH
25556: FOR_TO
25557: IFFALSE 25593
// begin if flags [ i ] then
25559: LD_VAR 0 4
25563: PUSH
25564: LD_VAR 0 8
25568: ARRAY
25569: IFFALSE 25591
// tmp := tmp & i & ; ;
25571: LD_ADDR_VAR 0 3
25575: PUSH
25576: LD_VAR 0 3
25580: PUSH
25581: LD_VAR 0 8
25585: STR
25586: PUSH
25587: LD_STRING ;
25589: STR
25590: ST_TO_ADDR
// end ;
25591: GO 25556
25593: POP
25594: POP
// for i = 1 to hardcoreCounter do
25595: LD_ADDR_VAR 0 8
25599: PUSH
25600: DOUBLE
25601: LD_INT 1
25603: DEC
25604: ST_TO_ADDR
25605: LD_EXP 82
25609: PUSH
25610: FOR_TO
25611: IFFALSE 25657
// begin if flags [ normalCounter + i ] then
25613: LD_VAR 0 4
25617: PUSH
25618: LD_EXP 81
25622: PUSH
25623: LD_VAR 0 8
25627: PLUS
25628: ARRAY
25629: IFFALSE 25655
// tmp := tmp & ( 100 + i ) & ; ;
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_VAR 0 3
25640: PUSH
25641: LD_INT 100
25643: PUSH
25644: LD_VAR 0 8
25648: PLUS
25649: STR
25650: PUSH
25651: LD_STRING ;
25653: STR
25654: ST_TO_ADDR
// end ;
25655: GO 25610
25657: POP
25658: POP
// if tmp then
25659: LD_VAR 0 3
25663: IFFALSE 25675
// active := tmp ;
25665: LD_ADDR_VAR 0 7
25669: PUSH
25670: LD_VAR 0 3
25674: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25675: LD_STRING getStreamItemsFromMission("
25677: PUSH
25678: LD_VAR 0 5
25682: STR
25683: PUSH
25684: LD_STRING ","
25686: STR
25687: PUSH
25688: LD_VAR 0 6
25692: STR
25693: PUSH
25694: LD_STRING ","
25696: STR
25697: PUSH
25698: LD_VAR 0 7
25702: STR
25703: PUSH
25704: LD_STRING ")
25706: STR
25707: PPUSH
25708: CALL_OW 559
// end else
25712: GO 25721
// ToLua ( getStreamItemsFromMission("","","") ) ;
25714: LD_STRING getStreamItemsFromMission("","","")
25716: PPUSH
25717: CALL_OW 559
// end ;
25721: LD_VAR 0 2
25725: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25726: LD_EXP 80
25730: PUSH
25731: LD_EXP 85
25735: AND
25736: IFFALSE 25860
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
// begin enable ;
25745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25746: LD_ADDR_VAR 0 2
25750: PUSH
25751: LD_INT 22
25753: PUSH
25754: LD_OWVAR 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 34
25768: PUSH
25769: LD_INT 7
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 34
25778: PUSH
25779: LD_INT 45
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 34
25788: PUSH
25789: LD_INT 28
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 34
25798: PUSH
25799: LD_INT 47
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: ST_TO_ADDR
// if not tmp then
25822: LD_VAR 0 2
25826: NOT
25827: IFFALSE 25831
// exit ;
25829: GO 25860
// for i in tmp do
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: FOR_IN
25842: IFFALSE 25858
// begin SetLives ( i , 0 ) ;
25844: LD_VAR 0 1
25848: PPUSH
25849: LD_INT 0
25851: PPUSH
25852: CALL_OW 234
// end ;
25856: GO 25841
25858: POP
25859: POP
// end ;
25860: PPOPN 2
25862: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25863: LD_EXP 80
25867: PUSH
25868: LD_EXP 86
25872: AND
25873: IFFALSE 25957
25875: GO 25877
25877: DISABLE
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
// begin enable ;
25882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25883: LD_ADDR_VAR 0 2
25887: PUSH
25888: LD_INT 22
25890: PUSH
25891: LD_OWVAR 2
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 32
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL_OW 69
25918: ST_TO_ADDR
// if not tmp then
25919: LD_VAR 0 2
25923: NOT
25924: IFFALSE 25928
// exit ;
25926: GO 25957
// for i in tmp do
25928: LD_ADDR_VAR 0 1
25932: PUSH
25933: LD_VAR 0 2
25937: PUSH
25938: FOR_IN
25939: IFFALSE 25955
// begin SetLives ( i , 0 ) ;
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_INT 0
25948: PPUSH
25949: CALL_OW 234
// end ;
25953: GO 25938
25955: POP
25956: POP
// end ;
25957: PPOPN 2
25959: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25960: LD_EXP 80
25964: PUSH
25965: LD_EXP 83
25969: AND
25970: IFFALSE 26063
25972: GO 25974
25974: DISABLE
25975: LD_INT 0
25977: PPUSH
// begin enable ;
25978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25979: LD_ADDR_VAR 0 1
25983: PUSH
25984: LD_INT 22
25986: PUSH
25987: LD_OWVAR 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 25
26001: PUSH
26002: LD_INT 5
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 25
26011: PUSH
26012: LD_INT 9
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 8
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 69
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26061
// begin SetClass ( i , 1 ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 1
26054: PPUSH
26055: CALL_OW 336
// end ;
26059: GO 26044
26061: POP
26062: POP
// end ;
26063: PPOPN 1
26065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26066: LD_EXP 80
26070: PUSH
26071: LD_EXP 84
26075: AND
26076: PUSH
26077: LD_OWVAR 65
26081: PUSH
26082: LD_INT 7
26084: LESS
26085: AND
26086: IFFALSE 26100
26088: GO 26090
26090: DISABLE
// begin enable ;
26091: ENABLE
// game_speed := 7 ;
26092: LD_ADDR_OWVAR 65
26096: PUSH
26097: LD_INT 7
26099: ST_TO_ADDR
// end ;
26100: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26101: LD_EXP 80
26105: PUSH
26106: LD_EXP 87
26110: AND
26111: IFFALSE 26313
26113: GO 26115
26115: DISABLE
26116: LD_INT 0
26118: PPUSH
26119: PPUSH
26120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26121: LD_ADDR_VAR 0 3
26125: PUSH
26126: LD_INT 81
26128: PUSH
26129: LD_OWVAR 2
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 21
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: ST_TO_ADDR
// if not tmp then
26157: LD_VAR 0 3
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26313
// if tmp > 5 then
26166: LD_VAR 0 3
26170: PUSH
26171: LD_INT 5
26173: GREATER
26174: IFFALSE 26186
// k := 5 else
26176: LD_ADDR_VAR 0 2
26180: PUSH
26181: LD_INT 5
26183: ST_TO_ADDR
26184: GO 26196
// k := tmp ;
26186: LD_ADDR_VAR 0 2
26190: PUSH
26191: LD_VAR 0 3
26195: ST_TO_ADDR
// for i := 1 to k do
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: DOUBLE
26202: LD_INT 1
26204: DEC
26205: ST_TO_ADDR
26206: LD_VAR 0 2
26210: PUSH
26211: FOR_TO
26212: IFFALSE 26311
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26214: LD_VAR 0 3
26218: PUSH
26219: LD_VAR 0 1
26223: ARRAY
26224: PPUSH
26225: LD_VAR 0 1
26229: PUSH
26230: LD_INT 4
26232: MOD
26233: PUSH
26234: LD_INT 1
26236: PLUS
26237: PPUSH
26238: CALL_OW 259
26242: PUSH
26243: LD_INT 10
26245: LESS
26246: IFFALSE 26309
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26248: LD_VAR 0 3
26252: PUSH
26253: LD_VAR 0 1
26257: ARRAY
26258: PPUSH
26259: LD_VAR 0 1
26263: PUSH
26264: LD_INT 4
26266: MOD
26267: PUSH
26268: LD_INT 1
26270: PLUS
26271: PPUSH
26272: LD_VAR 0 3
26276: PUSH
26277: LD_VAR 0 1
26281: ARRAY
26282: PPUSH
26283: LD_VAR 0 1
26287: PUSH
26288: LD_INT 4
26290: MOD
26291: PUSH
26292: LD_INT 1
26294: PLUS
26295: PPUSH
26296: CALL_OW 259
26300: PUSH
26301: LD_INT 1
26303: PLUS
26304: PPUSH
26305: CALL_OW 237
26309: GO 26211
26311: POP
26312: POP
// end ;
26313: PPOPN 3
26315: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26316: LD_EXP 80
26320: PUSH
26321: LD_EXP 88
26325: AND
26326: IFFALSE 26346
26328: GO 26330
26330: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26331: LD_INT 4
26333: PPUSH
26334: LD_OWVAR 2
26338: PPUSH
26339: LD_INT 0
26341: PPUSH
26342: CALL_OW 324
26346: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26347: LD_EXP 80
26351: PUSH
26352: LD_EXP 117
26356: AND
26357: IFFALSE 26377
26359: GO 26361
26361: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26362: LD_INT 19
26364: PPUSH
26365: LD_OWVAR 2
26369: PPUSH
26370: LD_INT 0
26372: PPUSH
26373: CALL_OW 324
26377: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26378: LD_EXP 80
26382: PUSH
26383: LD_EXP 89
26387: AND
26388: IFFALSE 26490
26390: GO 26392
26392: DISABLE
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
// begin enable ;
26397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_INT 22
26405: PUSH
26406: LD_OWVAR 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 34
26420: PUSH
26421: LD_INT 11
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PPUSH
26447: CALL_OW 69
26451: ST_TO_ADDR
// if not tmp then
26452: LD_VAR 0 2
26456: NOT
26457: IFFALSE 26461
// exit ;
26459: GO 26490
// for i in tmp do
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: LD_VAR 0 2
26470: PUSH
26471: FOR_IN
26472: IFFALSE 26488
// begin SetLives ( i , 0 ) ;
26474: LD_VAR 0 1
26478: PPUSH
26479: LD_INT 0
26481: PPUSH
26482: CALL_OW 234
// end ;
26486: GO 26471
26488: POP
26489: POP
// end ;
26490: PPOPN 2
26492: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26493: LD_EXP 80
26497: PUSH
26498: LD_EXP 90
26502: AND
26503: IFFALSE 26523
26505: GO 26507
26507: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26508: LD_INT 32
26510: PPUSH
26511: LD_OWVAR 2
26515: PPUSH
26516: LD_INT 0
26518: PPUSH
26519: CALL_OW 324
26523: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26524: LD_EXP 80
26528: PUSH
26529: LD_EXP 91
26533: AND
26534: IFFALSE 26715
26536: GO 26538
26538: DISABLE
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
26543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26544: LD_ADDR_VAR 0 2
26548: PUSH
26549: LD_INT 22
26551: PUSH
26552: LD_OWVAR 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 33
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PPUSH
26575: CALL_OW 69
26579: ST_TO_ADDR
// if not tmp then
26580: LD_VAR 0 2
26584: NOT
26585: IFFALSE 26589
// exit ;
26587: GO 26715
// side := 0 ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_INT 0
26596: ST_TO_ADDR
// for i := 1 to 8 do
26597: LD_ADDR_VAR 0 1
26601: PUSH
26602: DOUBLE
26603: LD_INT 1
26605: DEC
26606: ST_TO_ADDR
26607: LD_INT 8
26609: PUSH
26610: FOR_TO
26611: IFFALSE 26659
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26613: LD_OWVAR 2
26617: PUSH
26618: LD_VAR 0 1
26622: NONEQUAL
26623: PUSH
26624: LD_OWVAR 2
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 81
26638: PUSH
26639: LD_INT 2
26641: EQUAL
26642: AND
26643: IFFALSE 26657
// begin side := i ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_VAR 0 1
26654: ST_TO_ADDR
// break ;
26655: GO 26659
// end ;
26657: GO 26610
26659: POP
26660: POP
// if not side then
26661: LD_VAR 0 3
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 26715
// for i := 1 to tmp do
26670: LD_ADDR_VAR 0 1
26674: PUSH
26675: DOUBLE
26676: LD_INT 1
26678: DEC
26679: ST_TO_ADDR
26680: LD_VAR 0 2
26684: PUSH
26685: FOR_TO
26686: IFFALSE 26713
// if Prob ( 60 ) then
26688: LD_INT 60
26690: PPUSH
26691: CALL_OW 13
26695: IFFALSE 26711
// SetSide ( i , side ) ;
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_VAR 0 3
26706: PPUSH
26707: CALL_OW 235
26711: GO 26685
26713: POP
26714: POP
// end ;
26715: PPOPN 3
26717: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26718: LD_EXP 80
26722: PUSH
26723: LD_EXP 93
26727: AND
26728: IFFALSE 26847
26730: GO 26732
26732: DISABLE
26733: LD_INT 0
26735: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26736: LD_ADDR_VAR 0 1
26740: PUSH
26741: LD_INT 22
26743: PUSH
26744: LD_OWVAR 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 3
26765: PUSH
26766: LD_INT 23
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 69
26789: PUSH
26790: FOR_IN
26791: IFFALSE 26845
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 257
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 4
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: IN
26821: IFFALSE 26843
// SetClass ( un , rand ( 1 , 4 ) ) ;
26823: LD_VAR 0 1
26827: PPUSH
26828: LD_INT 1
26830: PPUSH
26831: LD_INT 4
26833: PPUSH
26834: CALL_OW 12
26838: PPUSH
26839: CALL_OW 336
26843: GO 26790
26845: POP
26846: POP
// end ;
26847: PPOPN 1
26849: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26850: LD_EXP 80
26854: PUSH
26855: LD_EXP 92
26859: AND
26860: IFFALSE 26939
26862: GO 26864
26864: DISABLE
26865: LD_INT 0
26867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_INT 22
26875: PUSH
26876: LD_OWVAR 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 21
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: ST_TO_ADDR
// if not tmp then
26904: LD_VAR 0 1
26908: NOT
26909: IFFALSE 26913
// exit ;
26911: GO 26939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26913: LD_VAR 0 1
26917: PUSH
26918: LD_INT 1
26920: PPUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 12
26930: ARRAY
26931: PPUSH
26932: LD_INT 100
26934: PPUSH
26935: CALL_OW 234
// end ;
26939: PPOPN 1
26941: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26942: LD_EXP 80
26946: PUSH
26947: LD_EXP 94
26951: AND
26952: IFFALSE 27050
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26960: LD_ADDR_VAR 0 1
26964: PUSH
26965: LD_INT 22
26967: PUSH
26968: LD_OWVAR 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: ST_TO_ADDR
// if not tmp then
26996: LD_VAR 0 1
27000: NOT
27001: IFFALSE 27005
// exit ;
27003: GO 27050
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27005: LD_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: PPUSH
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 12
27022: ARRAY
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: LD_INT 4
27029: PPUSH
27030: CALL_OW 12
27034: PPUSH
27035: LD_INT 3000
27037: PPUSH
27038: LD_INT 9000
27040: PPUSH
27041: CALL_OW 12
27045: PPUSH
27046: CALL_OW 492
// end ;
27050: PPOPN 1
27052: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27053: LD_EXP 80
27057: PUSH
27058: LD_EXP 95
27062: AND
27063: IFFALSE 27083
27065: GO 27067
27067: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27068: LD_INT 1
27070: PPUSH
27071: LD_OWVAR 2
27075: PPUSH
27076: LD_INT 0
27078: PPUSH
27079: CALL_OW 324
27083: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27084: LD_EXP 80
27088: PUSH
27089: LD_EXP 96
27093: AND
27094: IFFALSE 27177
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
27102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27103: LD_ADDR_VAR 0 2
27107: PUSH
27108: LD_INT 22
27110: PUSH
27111: LD_OWVAR 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 21
27122: PUSH
27123: LD_INT 3
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PPUSH
27134: CALL_OW 69
27138: ST_TO_ADDR
// if not tmp then
27139: LD_VAR 0 2
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27177
// for i in tmp do
27148: LD_ADDR_VAR 0 1
27152: PUSH
27153: LD_VAR 0 2
27157: PUSH
27158: FOR_IN
27159: IFFALSE 27175
// SetBLevel ( i , 10 ) ;
27161: LD_VAR 0 1
27165: PPUSH
27166: LD_INT 10
27168: PPUSH
27169: CALL_OW 241
27173: GO 27158
27175: POP
27176: POP
// end ;
27177: PPOPN 2
27179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27180: LD_EXP 80
27184: PUSH
27185: LD_EXP 97
27189: AND
27190: IFFALSE 27301
27192: GO 27194
27194: DISABLE
27195: LD_INT 0
27197: PPUSH
27198: PPUSH
27199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27200: LD_ADDR_VAR 0 3
27204: PUSH
27205: LD_INT 22
27207: PUSH
27208: LD_OWVAR 2
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 25
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 69
27235: ST_TO_ADDR
// if not tmp then
27236: LD_VAR 0 3
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 27301
// un := tmp [ rand ( 1 , tmp ) ] ;
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: LD_VAR 0 3
27254: PUSH
27255: LD_INT 1
27257: PPUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: CALL_OW 12
27267: ARRAY
27268: ST_TO_ADDR
// if Crawls ( un ) then
27269: LD_VAR 0 2
27273: PPUSH
27274: CALL_OW 318
27278: IFFALSE 27289
// ComWalk ( un ) ;
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27289: LD_VAR 0 2
27293: PPUSH
27294: LD_INT 5
27296: PPUSH
27297: CALL_OW 336
// end ;
27301: PPOPN 3
27303: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27304: LD_EXP 80
27308: PUSH
27309: LD_EXP 98
27313: AND
27314: PUSH
27315: LD_OWVAR 67
27319: PUSH
27320: LD_INT 4
27322: LESS
27323: AND
27324: IFFALSE 27343
27326: GO 27328
27328: DISABLE
// begin Difficulty := Difficulty + 1 ;
27329: LD_ADDR_OWVAR 67
27333: PUSH
27334: LD_OWVAR 67
27338: PUSH
27339: LD_INT 1
27341: PLUS
27342: ST_TO_ADDR
// end ;
27343: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27344: LD_EXP 80
27348: PUSH
27349: LD_EXP 99
27353: AND
27354: IFFALSE 27457
27356: GO 27358
27358: DISABLE
27359: LD_INT 0
27361: PPUSH
// begin for i := 1 to 5 do
27362: LD_ADDR_VAR 0 1
27366: PUSH
27367: DOUBLE
27368: LD_INT 1
27370: DEC
27371: ST_TO_ADDR
27372: LD_INT 5
27374: PUSH
27375: FOR_TO
27376: IFFALSE 27455
// begin uc_nation := nation_nature ;
27378: LD_ADDR_OWVAR 21
27382: PUSH
27383: LD_INT 0
27385: ST_TO_ADDR
// uc_side := 0 ;
27386: LD_ADDR_OWVAR 20
27390: PUSH
27391: LD_INT 0
27393: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27394: LD_ADDR_OWVAR 29
27398: PUSH
27399: LD_INT 12
27401: PUSH
27402: LD_INT 12
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: ST_TO_ADDR
// hc_agressivity := 20 ;
27409: LD_ADDR_OWVAR 35
27413: PUSH
27414: LD_INT 20
27416: ST_TO_ADDR
// hc_class := class_tiger ;
27417: LD_ADDR_OWVAR 28
27421: PUSH
27422: LD_INT 14
27424: ST_TO_ADDR
// hc_gallery :=  ;
27425: LD_ADDR_OWVAR 33
27429: PUSH
27430: LD_STRING 
27432: ST_TO_ADDR
// hc_name :=  ;
27433: LD_ADDR_OWVAR 26
27437: PUSH
27438: LD_STRING 
27440: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27441: CALL_OW 44
27445: PPUSH
27446: LD_INT 0
27448: PPUSH
27449: CALL_OW 51
// end ;
27453: GO 27375
27455: POP
27456: POP
// end ;
27457: PPOPN 1
27459: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27460: LD_EXP 80
27464: PUSH
27465: LD_EXP 100
27469: AND
27470: IFFALSE 27479
27472: GO 27474
27474: DISABLE
// StreamSibBomb ;
27475: CALL 27480 0 0
27479: END
// export function StreamSibBomb ; var i , x , y ; begin
27480: LD_INT 0
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
// result := false ;
27486: LD_ADDR_VAR 0 1
27490: PUSH
27491: LD_INT 0
27493: ST_TO_ADDR
// for i := 1 to 16 do
27494: LD_ADDR_VAR 0 2
27498: PUSH
27499: DOUBLE
27500: LD_INT 1
27502: DEC
27503: ST_TO_ADDR
27504: LD_INT 16
27506: PUSH
27507: FOR_TO
27508: IFFALSE 27707
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27510: LD_ADDR_VAR 0 3
27514: PUSH
27515: LD_INT 10
27517: PUSH
27518: LD_INT 20
27520: PUSH
27521: LD_INT 30
27523: PUSH
27524: LD_INT 40
27526: PUSH
27527: LD_INT 50
27529: PUSH
27530: LD_INT 60
27532: PUSH
27533: LD_INT 70
27535: PUSH
27536: LD_INT 80
27538: PUSH
27539: LD_INT 90
27541: PUSH
27542: LD_INT 100
27544: PUSH
27545: LD_INT 110
27547: PUSH
27548: LD_INT 120
27550: PUSH
27551: LD_INT 130
27553: PUSH
27554: LD_INT 140
27556: PUSH
27557: LD_INT 150
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PPUSH
27580: LD_INT 15
27582: PPUSH
27583: CALL_OW 12
27587: ARRAY
27588: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_INT 10
27596: PUSH
27597: LD_INT 20
27599: PUSH
27600: LD_INT 30
27602: PUSH
27603: LD_INT 40
27605: PUSH
27606: LD_INT 50
27608: PUSH
27609: LD_INT 60
27611: PUSH
27612: LD_INT 70
27614: PUSH
27615: LD_INT 80
27617: PUSH
27618: LD_INT 90
27620: PUSH
27621: LD_INT 100
27623: PUSH
27624: LD_INT 110
27626: PUSH
27627: LD_INT 120
27629: PUSH
27630: LD_INT 130
27632: PUSH
27633: LD_INT 140
27635: PUSH
27636: LD_INT 150
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: PPUSH
27659: LD_INT 15
27661: PPUSH
27662: CALL_OW 12
27666: ARRAY
27667: ST_TO_ADDR
// if ValidHex ( x , y ) then
27668: LD_VAR 0 3
27672: PPUSH
27673: LD_VAR 0 4
27677: PPUSH
27678: CALL_OW 488
27682: IFFALSE 27705
// begin result := [ x , y ] ;
27684: LD_ADDR_VAR 0 1
27688: PUSH
27689: LD_VAR 0 3
27693: PUSH
27694: LD_VAR 0 4
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// break ;
27703: GO 27707
// end ; end ;
27705: GO 27507
27707: POP
27708: POP
// if result then
27709: LD_VAR 0 1
27713: IFFALSE 27773
// begin ToLua ( playSibBomb() ) ;
27715: LD_STRING playSibBomb()
27717: PPUSH
27718: CALL_OW 559
// wait ( 0 0$14 ) ;
27722: LD_INT 490
27724: PPUSH
27725: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27729: LD_VAR 0 1
27733: PUSH
27734: LD_INT 1
27736: ARRAY
27737: PPUSH
27738: LD_VAR 0 1
27742: PUSH
27743: LD_INT 2
27745: ARRAY
27746: PPUSH
27747: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27751: LD_VAR 0 1
27755: PUSH
27756: LD_INT 1
27758: ARRAY
27759: PPUSH
27760: LD_VAR 0 1
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: PPUSH
27769: CALL_OW 429
// end ; end ;
27773: LD_VAR 0 1
27777: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27778: LD_EXP 80
27782: PUSH
27783: LD_EXP 102
27787: AND
27788: IFFALSE 27800
27790: GO 27792
27792: DISABLE
// YouLost (  ) ;
27793: LD_STRING 
27795: PPUSH
27796: CALL_OW 104
27800: END
// every 0 0$1 trigger StreamModeActive and sFog do
27801: LD_EXP 80
27805: PUSH
27806: LD_EXP 101
27810: AND
27811: IFFALSE 27825
27813: GO 27815
27815: DISABLE
// FogOff ( your_side ) ;
27816: LD_OWVAR 2
27820: PPUSH
27821: CALL_OW 344
27825: END
// every 0 0$1 trigger StreamModeActive and sSun do
27826: LD_EXP 80
27830: PUSH
27831: LD_EXP 103
27835: AND
27836: IFFALSE 27864
27838: GO 27840
27840: DISABLE
// begin solar_recharge_percent := 0 ;
27841: LD_ADDR_OWVAR 79
27845: PUSH
27846: LD_INT 0
27848: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27849: LD_INT 10500
27851: PPUSH
27852: CALL_OW 67
// solar_recharge_percent := 100 ;
27856: LD_ADDR_OWVAR 79
27860: PUSH
27861: LD_INT 100
27863: ST_TO_ADDR
// end ;
27864: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27865: LD_EXP 80
27869: PUSH
27870: LD_EXP 104
27874: AND
27875: IFFALSE 28114
27877: GO 27879
27879: DISABLE
27880: LD_INT 0
27882: PPUSH
27883: PPUSH
27884: PPUSH
// begin tmp := [ ] ;
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: EMPTY
27891: ST_TO_ADDR
// for i := 1 to 6 do
27892: LD_ADDR_VAR 0 1
27896: PUSH
27897: DOUBLE
27898: LD_INT 1
27900: DEC
27901: ST_TO_ADDR
27902: LD_INT 6
27904: PUSH
27905: FOR_TO
27906: IFFALSE 28011
// begin uc_nation := nation_nature ;
27908: LD_ADDR_OWVAR 21
27912: PUSH
27913: LD_INT 0
27915: ST_TO_ADDR
// uc_side := 0 ;
27916: LD_ADDR_OWVAR 20
27920: PUSH
27921: LD_INT 0
27923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27924: LD_ADDR_OWVAR 29
27928: PUSH
27929: LD_INT 12
27931: PUSH
27932: LD_INT 12
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: ST_TO_ADDR
// hc_agressivity := 20 ;
27939: LD_ADDR_OWVAR 35
27943: PUSH
27944: LD_INT 20
27946: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27947: LD_ADDR_OWVAR 28
27951: PUSH
27952: LD_INT 17
27954: ST_TO_ADDR
// hc_gallery :=  ;
27955: LD_ADDR_OWVAR 33
27959: PUSH
27960: LD_STRING 
27962: ST_TO_ADDR
// hc_name :=  ;
27963: LD_ADDR_OWVAR 26
27967: PUSH
27968: LD_STRING 
27970: ST_TO_ADDR
// un := CreateHuman ;
27971: LD_ADDR_VAR 0 2
27975: PUSH
27976: CALL_OW 44
27980: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27981: LD_VAR 0 2
27985: PPUSH
27986: LD_INT 1
27988: PPUSH
27989: CALL_OW 51
// tmp := tmp ^ un ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_VAR 0 3
28002: PUSH
28003: LD_VAR 0 2
28007: ADD
28008: ST_TO_ADDR
// end ;
28009: GO 27905
28011: POP
28012: POP
// repeat wait ( 0 0$1 ) ;
28013: LD_INT 35
28015: PPUSH
28016: CALL_OW 67
// for un in tmp do
28020: LD_ADDR_VAR 0 2
28024: PUSH
28025: LD_VAR 0 3
28029: PUSH
28030: FOR_IN
28031: IFFALSE 28105
// begin if IsDead ( un ) then
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 301
28042: IFFALSE 28062
// begin tmp := tmp diff un ;
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_VAR 0 3
28053: PUSH
28054: LD_VAR 0 2
28058: DIFF
28059: ST_TO_ADDR
// continue ;
28060: GO 28030
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28062: LD_VAR 0 2
28066: PPUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 22
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PPUSH
28084: CALL_OW 69
28088: PPUSH
28089: LD_VAR 0 2
28093: PPUSH
28094: CALL_OW 74
28098: PPUSH
28099: CALL_OW 115
// end ;
28103: GO 28030
28105: POP
28106: POP
// until not tmp ;
28107: LD_VAR 0 3
28111: NOT
28112: IFFALSE 28013
// end ;
28114: PPOPN 3
28116: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28117: LD_EXP 80
28121: PUSH
28122: LD_EXP 105
28126: AND
28127: IFFALSE 28181
28129: GO 28131
28131: DISABLE
// begin ToLua ( displayTroll(); ) ;
28132: LD_STRING displayTroll();
28134: PPUSH
28135: CALL_OW 559
// wait ( 3 3$00 ) ;
28139: LD_INT 6300
28141: PPUSH
28142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28146: LD_STRING hideTroll();
28148: PPUSH
28149: CALL_OW 559
// wait ( 1 1$00 ) ;
28153: LD_INT 2100
28155: PPUSH
28156: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28160: LD_STRING displayTroll();
28162: PPUSH
28163: CALL_OW 559
// wait ( 1 1$00 ) ;
28167: LD_INT 2100
28169: PPUSH
28170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28174: LD_STRING hideTroll();
28176: PPUSH
28177: CALL_OW 559
// end ;
28181: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28182: LD_EXP 80
28186: PUSH
28187: LD_EXP 106
28191: AND
28192: IFFALSE 28255
28194: GO 28196
28196: DISABLE
28197: LD_INT 0
28199: PPUSH
// begin p := 0 ;
28200: LD_ADDR_VAR 0 1
28204: PUSH
28205: LD_INT 0
28207: ST_TO_ADDR
// repeat game_speed := 1 ;
28208: LD_ADDR_OWVAR 65
28212: PUSH
28213: LD_INT 1
28215: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28216: LD_INT 35
28218: PPUSH
28219: CALL_OW 67
// p := p + 1 ;
28223: LD_ADDR_VAR 0 1
28227: PUSH
28228: LD_VAR 0 1
28232: PUSH
28233: LD_INT 1
28235: PLUS
28236: ST_TO_ADDR
// until p >= 60 ;
28237: LD_VAR 0 1
28241: PUSH
28242: LD_INT 60
28244: GREATEREQUAL
28245: IFFALSE 28208
// game_speed := 4 ;
28247: LD_ADDR_OWVAR 65
28251: PUSH
28252: LD_INT 4
28254: ST_TO_ADDR
// end ;
28255: PPOPN 1
28257: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28258: LD_EXP 80
28262: PUSH
28263: LD_EXP 107
28267: AND
28268: IFFALSE 28414
28270: GO 28272
28272: DISABLE
28273: LD_INT 0
28275: PPUSH
28276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28277: LD_ADDR_VAR 0 1
28281: PUSH
28282: LD_INT 22
28284: PUSH
28285: LD_OWVAR 2
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: LD_INT 30
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 30
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 69
28330: ST_TO_ADDR
// if not depot then
28331: LD_VAR 0 1
28335: NOT
28336: IFFALSE 28340
// exit ;
28338: GO 28414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28340: LD_ADDR_VAR 0 2
28344: PUSH
28345: LD_VAR 0 1
28349: PUSH
28350: LD_INT 1
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 12
28362: ARRAY
28363: PPUSH
28364: CALL_OW 274
28368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28369: LD_VAR 0 2
28373: PPUSH
28374: LD_INT 1
28376: PPUSH
28377: LD_INT 0
28379: PPUSH
28380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_INT 2
28391: PPUSH
28392: LD_INT 0
28394: PPUSH
28395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28399: LD_VAR 0 2
28403: PPUSH
28404: LD_INT 3
28406: PPUSH
28407: LD_INT 0
28409: PPUSH
28410: CALL_OW 277
// end ;
28414: PPOPN 2
28416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28417: LD_EXP 80
28421: PUSH
28422: LD_EXP 108
28426: AND
28427: IFFALSE 28524
28429: GO 28431
28431: DISABLE
28432: LD_INT 0
28434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_OWVAR 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 21
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: LD_INT 23
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 69
28488: ST_TO_ADDR
// if not tmp then
28489: LD_VAR 0 1
28493: NOT
28494: IFFALSE 28498
// exit ;
28496: GO 28524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28498: LD_VAR 0 1
28502: PUSH
28503: LD_INT 1
28505: PPUSH
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL_OW 12
28515: ARRAY
28516: PPUSH
28517: LD_INT 200
28519: PPUSH
28520: CALL_OW 234
// end ;
28524: PPOPN 1
28526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28527: LD_EXP 80
28531: PUSH
28532: LD_EXP 109
28536: AND
28537: IFFALSE 28616
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28545: LD_ADDR_VAR 0 1
28549: PUSH
28550: LD_INT 22
28552: PUSH
28553: LD_OWVAR 2
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 21
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PPUSH
28576: CALL_OW 69
28580: ST_TO_ADDR
// if not tmp then
28581: LD_VAR 0 1
28585: NOT
28586: IFFALSE 28590
// exit ;
28588: GO 28616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28590: LD_VAR 0 1
28594: PUSH
28595: LD_INT 1
28597: PPUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 12
28607: ARRAY
28608: PPUSH
28609: LD_INT 60
28611: PPUSH
28612: CALL_OW 234
// end ;
28616: PPOPN 1
28618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28619: LD_EXP 80
28623: PUSH
28624: LD_EXP 110
28628: AND
28629: IFFALSE 28728
28631: GO 28633
28633: DISABLE
28634: LD_INT 0
28636: PPUSH
28637: PPUSH
// begin enable ;
28638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28639: LD_ADDR_VAR 0 1
28643: PUSH
28644: LD_INT 22
28646: PUSH
28647: LD_OWVAR 2
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 61
28658: PUSH
28659: EMPTY
28660: LIST
28661: PUSH
28662: LD_INT 33
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PPUSH
28677: CALL_OW 69
28681: ST_TO_ADDR
// if not tmp then
28682: LD_VAR 0 1
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 28728
// for i in tmp do
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: LD_VAR 0 1
28700: PUSH
28701: FOR_IN
28702: IFFALSE 28726
// if IsControledBy ( i ) then
28704: LD_VAR 0 2
28708: PPUSH
28709: CALL_OW 312
28713: IFFALSE 28724
// ComUnlink ( i ) ;
28715: LD_VAR 0 2
28719: PPUSH
28720: CALL_OW 136
28724: GO 28701
28726: POP
28727: POP
// end ;
28728: PPOPN 2
28730: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28731: LD_EXP 80
28735: PUSH
28736: LD_EXP 111
28740: AND
28741: IFFALSE 28881
28743: GO 28745
28745: DISABLE
28746: LD_INT 0
28748: PPUSH
28749: PPUSH
// begin ToLua ( displayPowell(); ) ;
28750: LD_STRING displayPowell();
28752: PPUSH
28753: CALL_OW 559
// uc_side := 0 ;
28757: LD_ADDR_OWVAR 20
28761: PUSH
28762: LD_INT 0
28764: ST_TO_ADDR
// uc_nation := 2 ;
28765: LD_ADDR_OWVAR 21
28769: PUSH
28770: LD_INT 2
28772: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28773: LD_ADDR_OWVAR 37
28777: PUSH
28778: LD_INT 14
28780: ST_TO_ADDR
// vc_engine := engine_siberite ;
28781: LD_ADDR_OWVAR 39
28785: PUSH
28786: LD_INT 3
28788: ST_TO_ADDR
// vc_control := control_apeman ;
28789: LD_ADDR_OWVAR 38
28793: PUSH
28794: LD_INT 5
28796: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28797: LD_ADDR_OWVAR 40
28801: PUSH
28802: LD_INT 29
28804: ST_TO_ADDR
// un := CreateVehicle ;
28805: LD_ADDR_VAR 0 2
28809: PUSH
28810: CALL_OW 45
28814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_INT 1
28822: PPUSH
28823: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28827: LD_INT 35
28829: PPUSH
28830: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_INT 22
28841: PUSH
28842: LD_OWVAR 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PPUSH
28851: CALL_OW 69
28855: PPUSH
28856: LD_VAR 0 2
28860: PPUSH
28861: CALL_OW 74
28865: PPUSH
28866: CALL_OW 115
// until IsDead ( un ) ;
28870: LD_VAR 0 2
28874: PPUSH
28875: CALL_OW 301
28879: IFFALSE 28827
// end ;
28881: PPOPN 2
28883: END
// every 0 0$1 trigger StreamModeActive and sStu do
28884: LD_EXP 80
28888: PUSH
28889: LD_EXP 119
28893: AND
28894: IFFALSE 28910
28896: GO 28898
28898: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28899: LD_STRING displayStucuk();
28901: PPUSH
28902: CALL_OW 559
// ResetFog ;
28906: CALL_OW 335
// end ;
28910: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28911: LD_EXP 80
28915: PUSH
28916: LD_EXP 112
28920: AND
28921: IFFALSE 29062
28923: GO 28925
28925: DISABLE
28926: LD_INT 0
28928: PPUSH
28929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28930: LD_ADDR_VAR 0 2
28934: PUSH
28935: LD_INT 22
28937: PUSH
28938: LD_OWVAR 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 21
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: ST_TO_ADDR
// if not tmp then
28966: LD_VAR 0 2
28970: NOT
28971: IFFALSE 28975
// exit ;
28973: GO 29062
// un := tmp [ rand ( 1 , tmp ) ] ;
28975: LD_ADDR_VAR 0 1
28979: PUSH
28980: LD_VAR 0 2
28984: PUSH
28985: LD_INT 1
28987: PPUSH
28988: LD_VAR 0 2
28992: PPUSH
28993: CALL_OW 12
28997: ARRAY
28998: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28999: LD_VAR 0 1
29003: PPUSH
29004: LD_INT 0
29006: PPUSH
29007: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29011: LD_VAR 0 1
29015: PPUSH
29016: LD_OWVAR 3
29020: PUSH
29021: LD_VAR 0 1
29025: DIFF
29026: PPUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: CALL_OW 74
29036: PPUSH
29037: CALL_OW 115
// wait ( 0 0$20 ) ;
29041: LD_INT 700
29043: PPUSH
29044: CALL_OW 67
// SetSide ( un , your_side ) ;
29048: LD_VAR 0 1
29052: PPUSH
29053: LD_OWVAR 2
29057: PPUSH
29058: CALL_OW 235
// end ;
29062: PPOPN 2
29064: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29065: LD_EXP 80
29069: PUSH
29070: LD_EXP 113
29074: AND
29075: IFFALSE 29181
29077: GO 29079
29079: DISABLE
29080: LD_INT 0
29082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29083: LD_ADDR_VAR 0 1
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_OWVAR 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: LD_INT 30
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 30
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PPUSH
29132: CALL_OW 69
29136: ST_TO_ADDR
// if not depot then
29137: LD_VAR 0 1
29141: NOT
29142: IFFALSE 29146
// exit ;
29144: GO 29181
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29146: LD_VAR 0 1
29150: PUSH
29151: LD_INT 1
29153: ARRAY
29154: PPUSH
29155: CALL_OW 250
29159: PPUSH
29160: LD_VAR 0 1
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PPUSH
29169: CALL_OW 251
29173: PPUSH
29174: LD_INT 70
29176: PPUSH
29177: CALL_OW 495
// end ;
29181: PPOPN 1
29183: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29184: LD_EXP 80
29188: PUSH
29189: LD_EXP 114
29193: AND
29194: IFFALSE 29405
29196: GO 29198
29198: DISABLE
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29206: LD_ADDR_VAR 0 5
29210: PUSH
29211: LD_INT 22
29213: PUSH
29214: LD_OWVAR 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 21
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: ST_TO_ADDR
// if not tmp then
29242: LD_VAR 0 5
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29405
// for i in tmp do
29251: LD_ADDR_VAR 0 1
29255: PUSH
29256: LD_VAR 0 5
29260: PUSH
29261: FOR_IN
29262: IFFALSE 29403
// begin d := rand ( 0 , 5 ) ;
29264: LD_ADDR_VAR 0 4
29268: PUSH
29269: LD_INT 0
29271: PPUSH
29272: LD_INT 5
29274: PPUSH
29275: CALL_OW 12
29279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 250
29294: PPUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: LD_INT 3
29302: PPUSH
29303: LD_INT 12
29305: PPUSH
29306: CALL_OW 12
29310: PPUSH
29311: CALL_OW 272
29315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 251
29330: PPUSH
29331: LD_VAR 0 4
29335: PPUSH
29336: LD_INT 3
29338: PPUSH
29339: LD_INT 12
29341: PPUSH
29342: CALL_OW 12
29346: PPUSH
29347: CALL_OW 273
29351: ST_TO_ADDR
// if ValidHex ( x , y ) then
29352: LD_VAR 0 2
29356: PPUSH
29357: LD_VAR 0 3
29361: PPUSH
29362: CALL_OW 488
29366: IFFALSE 29401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29368: LD_VAR 0 1
29372: PPUSH
29373: LD_VAR 0 2
29377: PPUSH
29378: LD_VAR 0 3
29382: PPUSH
29383: LD_INT 3
29385: PPUSH
29386: LD_INT 6
29388: PPUSH
29389: CALL_OW 12
29393: PPUSH
29394: LD_INT 1
29396: PPUSH
29397: CALL_OW 483
// end ;
29401: GO 29261
29403: POP
29404: POP
// end ;
29405: PPOPN 5
29407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29408: LD_EXP 80
29412: PUSH
29413: LD_EXP 115
29417: AND
29418: IFFALSE 29512
29420: GO 29422
29422: DISABLE
29423: LD_INT 0
29425: PPUSH
29426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29427: LD_ADDR_VAR 0 2
29431: PUSH
29432: LD_INT 22
29434: PUSH
29435: LD_OWVAR 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 32
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 21
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 2
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 29512
// for i in tmp do
29483: LD_ADDR_VAR 0 1
29487: PUSH
29488: LD_VAR 0 2
29492: PUSH
29493: FOR_IN
29494: IFFALSE 29510
// SetFuel ( i , 0 ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_INT 0
29503: PPUSH
29504: CALL_OW 240
29508: GO 29493
29510: POP
29511: POP
// end ;
29512: PPOPN 2
29514: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29515: LD_EXP 80
29519: PUSH
29520: LD_EXP 116
29524: AND
29525: IFFALSE 29591
29527: GO 29529
29529: DISABLE
29530: LD_INT 0
29532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29533: LD_ADDR_VAR 0 1
29537: PUSH
29538: LD_INT 22
29540: PUSH
29541: LD_OWVAR 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 30
29552: PUSH
29553: LD_INT 29
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 69
29568: ST_TO_ADDR
// if not tmp then
29569: LD_VAR 0 1
29573: NOT
29574: IFFALSE 29578
// exit ;
29576: GO 29591
// DestroyUnit ( tmp [ 1 ] ) ;
29578: LD_VAR 0 1
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PPUSH
29587: CALL_OW 65
// end ;
29591: PPOPN 1
29593: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29594: LD_EXP 80
29598: PUSH
29599: LD_EXP 118
29603: AND
29604: IFFALSE 29733
29606: GO 29608
29608: DISABLE
29609: LD_INT 0
29611: PPUSH
// begin uc_side := 0 ;
29612: LD_ADDR_OWVAR 20
29616: PUSH
29617: LD_INT 0
29619: ST_TO_ADDR
// uc_nation := nation_arabian ;
29620: LD_ADDR_OWVAR 21
29624: PUSH
29625: LD_INT 2
29627: ST_TO_ADDR
// hc_gallery :=  ;
29628: LD_ADDR_OWVAR 33
29632: PUSH
29633: LD_STRING 
29635: ST_TO_ADDR
// hc_name :=  ;
29636: LD_ADDR_OWVAR 26
29640: PUSH
29641: LD_STRING 
29643: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29644: LD_INT 1
29646: PPUSH
29647: LD_INT 11
29649: PPUSH
29650: LD_INT 10
29652: PPUSH
29653: CALL_OW 380
// un := CreateHuman ;
29657: LD_ADDR_VAR 0 1
29661: PUSH
29662: CALL_OW 44
29666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_INT 1
29674: PPUSH
29675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29679: LD_INT 35
29681: PPUSH
29682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29686: LD_VAR 0 1
29690: PPUSH
29691: LD_INT 22
29693: PUSH
29694: LD_OWVAR 2
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 69
29707: PPUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 74
29717: PPUSH
29718: CALL_OW 115
// until IsDead ( un ) ;
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 301
29731: IFFALSE 29679
// end ;
29733: PPOPN 1
29735: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29736: LD_EXP 80
29740: PUSH
29741: LD_EXP 120
29745: AND
29746: IFFALSE 29758
29748: GO 29750
29750: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29751: LD_STRING earthquake(getX(game), 0, 32)
29753: PPUSH
29754: CALL_OW 559
29758: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29759: LD_EXP 80
29763: PUSH
29764: LD_EXP 121
29768: AND
29769: IFFALSE 29860
29771: GO 29773
29773: DISABLE
29774: LD_INT 0
29776: PPUSH
// begin enable ;
29777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: LD_INT 22
29785: PUSH
29786: LD_OWVAR 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 21
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 33
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: PPUSH
29820: CALL_OW 69
29824: ST_TO_ADDR
// if not tmp then
29825: LD_VAR 0 1
29829: NOT
29830: IFFALSE 29834
// exit ;
29832: GO 29860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29834: LD_VAR 0 1
29838: PUSH
29839: LD_INT 1
29841: PPUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 12
29851: ARRAY
29852: PPUSH
29853: LD_INT 1
29855: PPUSH
29856: CALL_OW 234
// end ;
29860: PPOPN 1
29862: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29863: LD_EXP 80
29867: PUSH
29868: LD_EXP 122
29872: AND
29873: IFFALSE 30014
29875: GO 29877
29877: DISABLE
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
29882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: LD_INT 22
29890: PUSH
29891: LD_OWVAR 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 25
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: CALL_OW 69
29918: ST_TO_ADDR
// if not tmp then
29919: LD_VAR 0 3
29923: NOT
29924: IFFALSE 29928
// exit ;
29926: GO 30014
// un := tmp [ rand ( 1 , tmp ) ] ;
29928: LD_ADDR_VAR 0 2
29932: PUSH
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 1
29940: PPUSH
29941: LD_VAR 0 3
29945: PPUSH
29946: CALL_OW 12
29950: ARRAY
29951: ST_TO_ADDR
// if Crawls ( un ) then
29952: LD_VAR 0 2
29956: PPUSH
29957: CALL_OW 318
29961: IFFALSE 29972
// ComWalk ( un ) ;
29963: LD_VAR 0 2
29967: PPUSH
29968: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29972: LD_VAR 0 2
29976: PPUSH
29977: LD_INT 9
29979: PPUSH
29980: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29984: LD_INT 28
29986: PPUSH
29987: LD_OWVAR 2
29991: PPUSH
29992: LD_INT 2
29994: PPUSH
29995: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29999: LD_INT 29
30001: PPUSH
30002: LD_OWVAR 2
30006: PPUSH
30007: LD_INT 2
30009: PPUSH
30010: CALL_OW 322
// end ;
30014: PPOPN 3
30016: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30017: LD_EXP 80
30021: PUSH
30022: LD_EXP 123
30026: AND
30027: IFFALSE 30138
30029: GO 30031
30031: DISABLE
30032: LD_INT 0
30034: PPUSH
30035: PPUSH
30036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30037: LD_ADDR_VAR 0 3
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_OWVAR 2
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 25
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PPUSH
30068: CALL_OW 69
30072: ST_TO_ADDR
// if not tmp then
30073: LD_VAR 0 3
30077: NOT
30078: IFFALSE 30082
// exit ;
30080: GO 30138
// un := tmp [ rand ( 1 , tmp ) ] ;
30082: LD_ADDR_VAR 0 2
30086: PUSH
30087: LD_VAR 0 3
30091: PUSH
30092: LD_INT 1
30094: PPUSH
30095: LD_VAR 0 3
30099: PPUSH
30100: CALL_OW 12
30104: ARRAY
30105: ST_TO_ADDR
// if Crawls ( un ) then
30106: LD_VAR 0 2
30110: PPUSH
30111: CALL_OW 318
30115: IFFALSE 30126
// ComWalk ( un ) ;
30117: LD_VAR 0 2
30121: PPUSH
30122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30126: LD_VAR 0 2
30130: PPUSH
30131: LD_INT 8
30133: PPUSH
30134: CALL_OW 336
// end ;
30138: PPOPN 3
30140: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30141: LD_EXP 80
30145: PUSH
30146: LD_EXP 124
30150: AND
30151: IFFALSE 30295
30153: GO 30155
30155: DISABLE
30156: LD_INT 0
30158: PPUSH
30159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30160: LD_ADDR_VAR 0 2
30164: PUSH
30165: LD_INT 22
30167: PUSH
30168: LD_OWVAR 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 21
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 34
30192: PUSH
30193: LD_INT 12
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 34
30202: PUSH
30203: LD_INT 51
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 34
30212: PUSH
30213: LD_INT 32
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: ST_TO_ADDR
// if not tmp then
30236: LD_VAR 0 2
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30295
// for i in tmp do
30245: LD_ADDR_VAR 0 1
30249: PUSH
30250: LD_VAR 0 2
30254: PUSH
30255: FOR_IN
30256: IFFALSE 30293
// if GetCargo ( i , mat_artifact ) = 0 then
30258: LD_VAR 0 1
30262: PPUSH
30263: LD_INT 4
30265: PPUSH
30266: CALL_OW 289
30270: PUSH
30271: LD_INT 0
30273: EQUAL
30274: IFFALSE 30291
// SetCargo ( i , mat_siberit , 100 ) ;
30276: LD_VAR 0 1
30280: PPUSH
30281: LD_INT 3
30283: PPUSH
30284: LD_INT 100
30286: PPUSH
30287: CALL_OW 290
30291: GO 30255
30293: POP
30294: POP
// end ;
30295: PPOPN 2
30297: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30298: LD_EXP 80
30302: PUSH
30303: LD_EXP 125
30307: AND
30308: IFFALSE 30491
30310: GO 30312
30312: DISABLE
30313: LD_INT 0
30315: PPUSH
30316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30317: LD_ADDR_VAR 0 2
30321: PUSH
30322: LD_INT 22
30324: PUSH
30325: LD_OWVAR 2
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PPUSH
30334: CALL_OW 69
30338: ST_TO_ADDR
// if not tmp then
30339: LD_VAR 0 2
30343: NOT
30344: IFFALSE 30348
// exit ;
30346: GO 30491
// for i := 1 to 2 do
30348: LD_ADDR_VAR 0 1
30352: PUSH
30353: DOUBLE
30354: LD_INT 1
30356: DEC
30357: ST_TO_ADDR
30358: LD_INT 2
30360: PUSH
30361: FOR_TO
30362: IFFALSE 30489
// begin uc_side := your_side ;
30364: LD_ADDR_OWVAR 20
30368: PUSH
30369: LD_OWVAR 2
30373: ST_TO_ADDR
// uc_nation := nation_american ;
30374: LD_ADDR_OWVAR 21
30378: PUSH
30379: LD_INT 1
30381: ST_TO_ADDR
// vc_chassis := us_morphling ;
30382: LD_ADDR_OWVAR 37
30386: PUSH
30387: LD_INT 5
30389: ST_TO_ADDR
// vc_engine := engine_siberite ;
30390: LD_ADDR_OWVAR 39
30394: PUSH
30395: LD_INT 3
30397: ST_TO_ADDR
// vc_control := control_computer ;
30398: LD_ADDR_OWVAR 38
30402: PUSH
30403: LD_INT 3
30405: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30406: LD_ADDR_OWVAR 40
30410: PUSH
30411: LD_INT 10
30413: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30414: LD_VAR 0 2
30418: PUSH
30419: LD_INT 1
30421: ARRAY
30422: PPUSH
30423: CALL_OW 310
30427: NOT
30428: IFFALSE 30475
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30430: CALL_OW 45
30434: PPUSH
30435: LD_VAR 0 2
30439: PUSH
30440: LD_INT 1
30442: ARRAY
30443: PPUSH
30444: CALL_OW 250
30448: PPUSH
30449: LD_VAR 0 2
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: CALL_OW 251
30462: PPUSH
30463: LD_INT 12
30465: PPUSH
30466: LD_INT 1
30468: PPUSH
30469: CALL_OW 50
30473: GO 30487
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30475: CALL_OW 45
30479: PPUSH
30480: LD_INT 1
30482: PPUSH
30483: CALL_OW 51
// end ;
30487: GO 30361
30489: POP
30490: POP
// end ;
30491: PPOPN 2
30493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30494: LD_EXP 80
30498: PUSH
30499: LD_EXP 126
30503: AND
30504: IFFALSE 30726
30506: GO 30508
30508: DISABLE
30509: LD_INT 0
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30517: LD_ADDR_VAR 0 6
30521: PUSH
30522: LD_INT 22
30524: PUSH
30525: LD_OWVAR 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 21
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: LD_INT 23
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: PPUSH
30566: CALL_OW 69
30570: ST_TO_ADDR
// if not tmp then
30571: LD_VAR 0 6
30575: NOT
30576: IFFALSE 30580
// exit ;
30578: GO 30726
// s1 := rand ( 1 , 4 ) ;
30580: LD_ADDR_VAR 0 2
30584: PUSH
30585: LD_INT 1
30587: PPUSH
30588: LD_INT 4
30590: PPUSH
30591: CALL_OW 12
30595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30596: LD_ADDR_VAR 0 4
30600: PUSH
30601: LD_VAR 0 6
30605: PUSH
30606: LD_INT 1
30608: ARRAY
30609: PPUSH
30610: LD_VAR 0 2
30614: PPUSH
30615: CALL_OW 259
30619: ST_TO_ADDR
// if s1 = 1 then
30620: LD_VAR 0 2
30624: PUSH
30625: LD_INT 1
30627: EQUAL
30628: IFFALSE 30648
// s2 := rand ( 2 , 4 ) else
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 2
30637: PPUSH
30638: LD_INT 4
30640: PPUSH
30641: CALL_OW 12
30645: ST_TO_ADDR
30646: GO 30656
// s2 := 1 ;
30648: LD_ADDR_VAR 0 3
30652: PUSH
30653: LD_INT 1
30655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30656: LD_ADDR_VAR 0 5
30660: PUSH
30661: LD_VAR 0 6
30665: PUSH
30666: LD_INT 1
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 3
30674: PPUSH
30675: CALL_OW 259
30679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30680: LD_VAR 0 6
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PPUSH
30689: LD_VAR 0 2
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30703: LD_VAR 0 6
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 3
30716: PPUSH
30717: LD_VAR 0 4
30721: PPUSH
30722: CALL_OW 237
// end ;
30726: PPOPN 6
30728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30729: LD_EXP 80
30733: PUSH
30734: LD_EXP 127
30738: AND
30739: IFFALSE 30818
30741: GO 30743
30743: DISABLE
30744: LD_INT 0
30746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30747: LD_ADDR_VAR 0 1
30751: PUSH
30752: LD_INT 22
30754: PUSH
30755: LD_OWVAR 2
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PPUSH
30778: CALL_OW 69
30782: ST_TO_ADDR
// if not tmp then
30783: LD_VAR 0 1
30787: NOT
30788: IFFALSE 30792
// exit ;
30790: GO 30818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30792: LD_VAR 0 1
30796: PUSH
30797: LD_INT 1
30799: PPUSH
30800: LD_VAR 0 1
30804: PPUSH
30805: CALL_OW 12
30809: ARRAY
30810: PPUSH
30811: LD_INT 1
30813: PPUSH
30814: CALL_OW 234
// end ;
30818: PPOPN 1
30820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30821: LD_EXP 80
30825: PUSH
30826: LD_EXP 128
30830: AND
30831: IFFALSE 30943
30833: GO 30835
30835: DISABLE
30836: LD_INT 0
30838: PPUSH
30839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: LD_INT 22
30847: PUSH
30848: LD_OWVAR 2
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 30
30862: PUSH
30863: LD_INT 27
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 26
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 28
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PPUSH
30900: CALL_OW 69
30904: ST_TO_ADDR
// if not tmp then
30905: LD_VAR 0 2
30909: NOT
30910: IFFALSE 30914
// exit ;
30912: GO 30943
// for i in tmp do
30914: LD_ADDR_VAR 0 1
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: FOR_IN
30925: IFFALSE 30941
// SetLives ( i , 1 ) ;
30927: LD_VAR 0 1
30931: PPUSH
30932: LD_INT 1
30934: PPUSH
30935: CALL_OW 234
30939: GO 30924
30941: POP
30942: POP
// end ;
30943: PPOPN 2
30945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30946: LD_EXP 80
30950: PUSH
30951: LD_EXP 129
30955: AND
30956: IFFALSE 31243
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
30964: PPUSH
30965: PPUSH
// begin i := rand ( 1 , 7 ) ;
30966: LD_ADDR_VAR 0 1
30970: PUSH
30971: LD_INT 1
30973: PPUSH
30974: LD_INT 7
30976: PPUSH
30977: CALL_OW 12
30981: ST_TO_ADDR
// case i of 1 :
30982: LD_VAR 0 1
30986: PUSH
30987: LD_INT 1
30989: DOUBLE
30990: EQUAL
30991: IFTRUE 30995
30993: GO 31005
30995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30996: LD_STRING earthquake(getX(game), 0, 32)
30998: PPUSH
30999: CALL_OW 559
31003: GO 31243
31005: LD_INT 2
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31013
31011: GO 31027
31013: POP
// begin ToLua ( displayStucuk(); ) ;
31014: LD_STRING displayStucuk();
31016: PPUSH
31017: CALL_OW 559
// ResetFog ;
31021: CALL_OW 335
// end ; 3 :
31025: GO 31243
31027: LD_INT 3
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31139
31035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: LD_INT 22
31043: PUSH
31044: LD_OWVAR 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 25
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PPUSH
31067: CALL_OW 69
31071: ST_TO_ADDR
// if not tmp then
31072: LD_VAR 0 2
31076: NOT
31077: IFFALSE 31081
// exit ;
31079: GO 31243
// un := tmp [ rand ( 1 , tmp ) ] ;
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_VAR 0 2
31090: PUSH
31091: LD_INT 1
31093: PPUSH
31094: LD_VAR 0 2
31098: PPUSH
31099: CALL_OW 12
31103: ARRAY
31104: ST_TO_ADDR
// if Crawls ( un ) then
31105: LD_VAR 0 3
31109: PPUSH
31110: CALL_OW 318
31114: IFFALSE 31125
// ComWalk ( un ) ;
31116: LD_VAR 0 3
31120: PPUSH
31121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31125: LD_VAR 0 3
31129: PPUSH
31130: LD_INT 8
31132: PPUSH
31133: CALL_OW 336
// end ; 4 :
31137: GO 31243
31139: LD_INT 4
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31221
31147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31148: LD_ADDR_VAR 0 2
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_OWVAR 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 30
31167: PUSH
31168: LD_INT 29
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: ST_TO_ADDR
// if not tmp then
31184: LD_VAR 0 2
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 31243
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31193: LD_VAR 0 2
31197: PUSH
31198: LD_INT 1
31200: ARRAY
31201: PPUSH
31202: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 1
31213: ARRAY
31214: PPUSH
31215: CALL_OW 65
// end ; 5 .. 7 :
31219: GO 31243
31221: LD_INT 5
31223: DOUBLE
31224: GREATEREQUAL
31225: IFFALSE 31233
31227: LD_INT 7
31229: DOUBLE
31230: LESSEQUAL
31231: IFTRUE 31235
31233: GO 31242
31235: POP
// StreamSibBomb ; end ;
31236: CALL 27480 0 0
31240: GO 31243
31242: POP
// end ;
31243: PPOPN 3
31245: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31246: LD_EXP 80
31250: PUSH
31251: LD_EXP 130
31255: AND
31256: IFFALSE 31412
31258: GO 31260
31260: DISABLE
31261: LD_INT 0
31263: PPUSH
31264: PPUSH
31265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31266: LD_ADDR_VAR 0 2
31270: PUSH
31271: LD_INT 81
31273: PUSH
31274: LD_OWVAR 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 21
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 21
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PPUSH
31315: CALL_OW 69
31319: ST_TO_ADDR
// if not tmp then
31320: LD_VAR 0 2
31324: NOT
31325: IFFALSE 31329
// exit ;
31327: GO 31412
// p := 0 ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31337: LD_INT 35
31339: PPUSH
31340: CALL_OW 67
// p := p + 1 ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: ST_TO_ADDR
// for i in tmp do
31358: LD_ADDR_VAR 0 1
31362: PUSH
31363: LD_VAR 0 2
31367: PUSH
31368: FOR_IN
31369: IFFALSE 31400
// if GetLives ( i ) < 1000 then
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 256
31380: PUSH
31381: LD_INT 1000
31383: LESS
31384: IFFALSE 31398
// SetLives ( i , 1000 ) ;
31386: LD_VAR 0 1
31390: PPUSH
31391: LD_INT 1000
31393: PPUSH
31394: CALL_OW 234
31398: GO 31368
31400: POP
31401: POP
// until p > 20 ;
31402: LD_VAR 0 3
31406: PUSH
31407: LD_INT 20
31409: GREATER
31410: IFFALSE 31337
// end ;
31412: PPOPN 3
31414: END
// every 0 0$1 trigger StreamModeActive and sTime do
31415: LD_EXP 80
31419: PUSH
31420: LD_EXP 131
31424: AND
31425: IFFALSE 31460
31427: GO 31429
31429: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31430: LD_INT 28
31432: PPUSH
31433: LD_OWVAR 2
31437: PPUSH
31438: LD_INT 2
31440: PPUSH
31441: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31445: LD_INT 30
31447: PPUSH
31448: LD_OWVAR 2
31452: PPUSH
31453: LD_INT 2
31455: PPUSH
31456: CALL_OW 322
// end ;
31460: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31461: LD_EXP 80
31465: PUSH
31466: LD_EXP 132
31470: AND
31471: IFFALSE 31592
31473: GO 31475
31475: DISABLE
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31480: LD_ADDR_VAR 0 2
31484: PUSH
31485: LD_INT 22
31487: PUSH
31488: LD_OWVAR 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 21
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: LD_INT 23
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: PPUSH
31529: CALL_OW 69
31533: ST_TO_ADDR
// if not tmp then
31534: LD_VAR 0 2
31538: NOT
31539: IFFALSE 31543
// exit ;
31541: GO 31592
// for i in tmp do
31543: LD_ADDR_VAR 0 1
31547: PUSH
31548: LD_VAR 0 2
31552: PUSH
31553: FOR_IN
31554: IFFALSE 31590
// begin if Crawls ( i ) then
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 318
31565: IFFALSE 31576
// ComWalk ( i ) ;
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 138
// SetClass ( i , 2 ) ;
31576: LD_VAR 0 1
31580: PPUSH
31581: LD_INT 2
31583: PPUSH
31584: CALL_OW 336
// end ;
31588: GO 31553
31590: POP
31591: POP
// end ;
31592: PPOPN 2
31594: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31595: LD_EXP 80
31599: PUSH
31600: LD_EXP 133
31604: AND
31605: IFFALSE 31893
31607: GO 31609
31609: DISABLE
31610: LD_INT 0
31612: PPUSH
31613: PPUSH
31614: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31615: LD_OWVAR 2
31619: PPUSH
31620: LD_INT 9
31622: PPUSH
31623: LD_INT 1
31625: PPUSH
31626: LD_INT 1
31628: PPUSH
31629: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31633: LD_INT 9
31635: PPUSH
31636: LD_OWVAR 2
31640: PPUSH
31641: CALL_OW 343
// uc_side := 9 ;
31645: LD_ADDR_OWVAR 20
31649: PUSH
31650: LD_INT 9
31652: ST_TO_ADDR
// uc_nation := 2 ;
31653: LD_ADDR_OWVAR 21
31657: PUSH
31658: LD_INT 2
31660: ST_TO_ADDR
// hc_name := Dark Warrior ;
31661: LD_ADDR_OWVAR 26
31665: PUSH
31666: LD_STRING Dark Warrior
31668: ST_TO_ADDR
// hc_gallery :=  ;
31669: LD_ADDR_OWVAR 33
31673: PUSH
31674: LD_STRING 
31676: ST_TO_ADDR
// hc_noskilllimit := true ;
31677: LD_ADDR_OWVAR 76
31681: PUSH
31682: LD_INT 1
31684: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31685: LD_ADDR_OWVAR 31
31689: PUSH
31690: LD_INT 30
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: LD_INT 30
31698: PUSH
31699: LD_INT 30
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
// un := CreateHuman ;
31708: LD_ADDR_VAR 0 3
31712: PUSH
31713: CALL_OW 44
31717: ST_TO_ADDR
// hc_noskilllimit := false ;
31718: LD_ADDR_OWVAR 76
31722: PUSH
31723: LD_INT 0
31725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31726: LD_VAR 0 3
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 51
// ToLua ( playRanger() ) ;
31738: LD_STRING playRanger()
31740: PPUSH
31741: CALL_OW 559
// p := 0 ;
31745: LD_ADDR_VAR 0 2
31749: PUSH
31750: LD_INT 0
31752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31753: LD_INT 35
31755: PPUSH
31756: CALL_OW 67
// p := p + 1 ;
31760: LD_ADDR_VAR 0 2
31764: PUSH
31765: LD_VAR 0 2
31769: PUSH
31770: LD_INT 1
31772: PLUS
31773: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31774: LD_VAR 0 3
31778: PPUSH
31779: CALL_OW 256
31783: PUSH
31784: LD_INT 1000
31786: LESS
31787: IFFALSE 31801
// SetLives ( un , 1000 ) ;
31789: LD_VAR 0 3
31793: PPUSH
31794: LD_INT 1000
31796: PPUSH
31797: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31801: LD_VAR 0 3
31805: PPUSH
31806: LD_INT 81
31808: PUSH
31809: LD_OWVAR 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 91
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_INT 30
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 69
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL_OW 74
31852: PPUSH
31853: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31857: LD_VAR 0 2
31861: PUSH
31862: LD_INT 80
31864: GREATER
31865: PUSH
31866: LD_VAR 0 3
31870: PPUSH
31871: CALL_OW 301
31875: OR
31876: IFFALSE 31753
// if un then
31878: LD_VAR 0 3
31882: IFFALSE 31893
// RemoveUnit ( un ) ;
31884: LD_VAR 0 3
31888: PPUSH
31889: CALL_OW 64
// end ;
31893: PPOPN 3
31895: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31896: LD_EXP 134
31900: IFFALSE 32016
31902: GO 31904
31904: DISABLE
31905: LD_INT 0
31907: PPUSH
31908: PPUSH
31909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31910: LD_ADDR_VAR 0 2
31914: PUSH
31915: LD_INT 81
31917: PUSH
31918: LD_OWVAR 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 21
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PPUSH
31941: CALL_OW 69
31945: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31946: LD_STRING playComputer()
31948: PPUSH
31949: CALL_OW 559
// if not tmp then
31953: LD_VAR 0 2
31957: NOT
31958: IFFALSE 31962
// exit ;
31960: GO 32016
// for i in tmp do
31962: LD_ADDR_VAR 0 1
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: FOR_IN
31973: IFFALSE 32014
// for j := 1 to 4 do
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: DOUBLE
31981: LD_INT 1
31983: DEC
31984: ST_TO_ADDR
31985: LD_INT 4
31987: PUSH
31988: FOR_TO
31989: IFFALSE 32010
// SetSkill ( i , j , 10 ) ;
31991: LD_VAR 0 1
31995: PPUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: LD_INT 10
32003: PPUSH
32004: CALL_OW 237
32008: GO 31988
32010: POP
32011: POP
32012: GO 31972
32014: POP
32015: POP
// end ;
32016: PPOPN 3
32018: END
// every 0 0$1 trigger s30 do var i , tmp ;
32019: LD_EXP 135
32023: IFFALSE 32092
32025: GO 32027
32027: DISABLE
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32032: LD_ADDR_VAR 0 2
32036: PUSH
32037: LD_INT 22
32039: PUSH
32040: LD_OWVAR 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PPUSH
32049: CALL_OW 69
32053: ST_TO_ADDR
// if not tmp then
32054: LD_VAR 0 2
32058: NOT
32059: IFFALSE 32063
// exit ;
32061: GO 32092
// for i in tmp do
32063: LD_ADDR_VAR 0 1
32067: PUSH
32068: LD_VAR 0 2
32072: PUSH
32073: FOR_IN
32074: IFFALSE 32090
// SetLives ( i , 300 ) ;
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_INT 300
32083: PPUSH
32084: CALL_OW 234
32088: GO 32073
32090: POP
32091: POP
// end ;
32092: PPOPN 2
32094: END
// every 0 0$1 trigger s60 do var i , tmp ;
32095: LD_EXP 136
32099: IFFALSE 32168
32101: GO 32103
32103: DISABLE
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32108: LD_ADDR_VAR 0 2
32112: PUSH
32113: LD_INT 22
32115: PUSH
32116: LD_OWVAR 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PPUSH
32125: CALL_OW 69
32129: ST_TO_ADDR
// if not tmp then
32130: LD_VAR 0 2
32134: NOT
32135: IFFALSE 32139
// exit ;
32137: GO 32168
// for i in tmp do
32139: LD_ADDR_VAR 0 1
32143: PUSH
32144: LD_VAR 0 2
32148: PUSH
32149: FOR_IN
32150: IFFALSE 32166
// SetLives ( i , 600 ) ;
32152: LD_VAR 0 1
32156: PPUSH
32157: LD_INT 600
32159: PPUSH
32160: CALL_OW 234
32164: GO 32149
32166: POP
32167: POP
// end ;
32168: PPOPN 2
32170: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32171: LD_INT 0
32173: PPUSH
// case cmd of 301 :
32174: LD_VAR 0 1
32178: PUSH
32179: LD_INT 301
32181: DOUBLE
32182: EQUAL
32183: IFTRUE 32187
32185: GO 32219
32187: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32188: LD_VAR 0 6
32192: PPUSH
32193: LD_VAR 0 7
32197: PPUSH
32198: LD_VAR 0 8
32202: PPUSH
32203: LD_VAR 0 4
32207: PPUSH
32208: LD_VAR 0 5
32212: PPUSH
32213: CALL 33420 0 5
32217: GO 32340
32219: LD_INT 302
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32264
32227: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32228: LD_VAR 0 6
32232: PPUSH
32233: LD_VAR 0 7
32237: PPUSH
32238: LD_VAR 0 8
32242: PPUSH
32243: LD_VAR 0 9
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 33511 0 6
32262: GO 32340
32264: LD_INT 303
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32309
32272: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32273: LD_VAR 0 6
32277: PPUSH
32278: LD_VAR 0 7
32282: PPUSH
32283: LD_VAR 0 8
32287: PPUSH
32288: LD_VAR 0 9
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL 32345 0 6
32307: GO 32340
32309: LD_INT 304
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32339
32317: POP
// hHackTeleport ( unit , x , y ) ; end ;
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 4
32327: PPUSH
32328: LD_VAR 0 5
32332: PPUSH
32333: CALL 34104 0 3
32337: GO 32340
32339: POP
// end ;
32340: LD_VAR 0 12
32344: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32345: LD_INT 0
32347: PPUSH
32348: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32349: LD_VAR 0 1
32353: PUSH
32354: LD_INT 1
32356: LESS
32357: PUSH
32358: LD_VAR 0 1
32362: PUSH
32363: LD_INT 3
32365: GREATER
32366: OR
32367: PUSH
32368: LD_VAR 0 5
32372: PPUSH
32373: LD_VAR 0 6
32377: PPUSH
32378: CALL_OW 428
32382: OR
32383: IFFALSE 32387
// exit ;
32385: GO 33107
// uc_side := your_side ;
32387: LD_ADDR_OWVAR 20
32391: PUSH
32392: LD_OWVAR 2
32396: ST_TO_ADDR
// uc_nation := nation ;
32397: LD_ADDR_OWVAR 21
32401: PUSH
32402: LD_VAR 0 1
32406: ST_TO_ADDR
// bc_level = 1 ;
32407: LD_ADDR_OWVAR 43
32411: PUSH
32412: LD_INT 1
32414: ST_TO_ADDR
// case btype of 1 :
32415: LD_VAR 0 2
32419: PUSH
32420: LD_INT 1
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32428
32426: GO 32439
32428: POP
// bc_type := b_depot ; 2 :
32429: LD_ADDR_OWVAR 42
32433: PUSH
32434: LD_INT 0
32436: ST_TO_ADDR
32437: GO 33051
32439: LD_INT 2
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32458
32447: POP
// bc_type := b_warehouse ; 3 :
32448: LD_ADDR_OWVAR 42
32452: PUSH
32453: LD_INT 1
32455: ST_TO_ADDR
32456: GO 33051
32458: LD_INT 3
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32477
32466: POP
// bc_type := b_lab ; 4 .. 9 :
32467: LD_ADDR_OWVAR 42
32471: PUSH
32472: LD_INT 6
32474: ST_TO_ADDR
32475: GO 33051
32477: LD_INT 4
32479: DOUBLE
32480: GREATEREQUAL
32481: IFFALSE 32489
32483: LD_INT 9
32485: DOUBLE
32486: LESSEQUAL
32487: IFTRUE 32491
32489: GO 32543
32491: POP
// begin bc_type := b_lab_half ;
32492: LD_ADDR_OWVAR 42
32496: PUSH
32497: LD_INT 7
32499: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32500: LD_ADDR_OWVAR 44
32504: PUSH
32505: LD_INT 10
32507: PUSH
32508: LD_INT 11
32510: PUSH
32511: LD_INT 12
32513: PUSH
32514: LD_INT 15
32516: PUSH
32517: LD_INT 14
32519: PUSH
32520: LD_INT 13
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: PUSH
32531: LD_VAR 0 2
32535: PUSH
32536: LD_INT 3
32538: MINUS
32539: ARRAY
32540: ST_TO_ADDR
// end ; 10 .. 13 :
32541: GO 33051
32543: LD_INT 10
32545: DOUBLE
32546: GREATEREQUAL
32547: IFFALSE 32555
32549: LD_INT 13
32551: DOUBLE
32552: LESSEQUAL
32553: IFTRUE 32557
32555: GO 32634
32557: POP
// begin bc_type := b_lab_full ;
32558: LD_ADDR_OWVAR 42
32562: PUSH
32563: LD_INT 8
32565: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32566: LD_ADDR_OWVAR 44
32570: PUSH
32571: LD_INT 10
32573: PUSH
32574: LD_INT 12
32576: PUSH
32577: LD_INT 14
32579: PUSH
32580: LD_INT 13
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: PUSH
32589: LD_VAR 0 2
32593: PUSH
32594: LD_INT 9
32596: MINUS
32597: ARRAY
32598: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32599: LD_ADDR_OWVAR 45
32603: PUSH
32604: LD_INT 11
32606: PUSH
32607: LD_INT 15
32609: PUSH
32610: LD_INT 12
32612: PUSH
32613: LD_INT 15
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: PUSH
32622: LD_VAR 0 2
32626: PUSH
32627: LD_INT 9
32629: MINUS
32630: ARRAY
32631: ST_TO_ADDR
// end ; 14 :
32632: GO 33051
32634: LD_INT 14
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32653
32642: POP
// bc_type := b_workshop ; 15 :
32643: LD_ADDR_OWVAR 42
32647: PUSH
32648: LD_INT 2
32650: ST_TO_ADDR
32651: GO 33051
32653: LD_INT 15
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32672
32661: POP
// bc_type := b_factory ; 16 :
32662: LD_ADDR_OWVAR 42
32666: PUSH
32667: LD_INT 3
32669: ST_TO_ADDR
32670: GO 33051
32672: LD_INT 16
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32691
32680: POP
// bc_type := b_ext_gun ; 17 :
32681: LD_ADDR_OWVAR 42
32685: PUSH
32686: LD_INT 17
32688: ST_TO_ADDR
32689: GO 33051
32691: LD_INT 17
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32699
32697: GO 32727
32699: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32700: LD_ADDR_OWVAR 42
32704: PUSH
32705: LD_INT 19
32707: PUSH
32708: LD_INT 23
32710: PUSH
32711: LD_INT 19
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: PUSH
32719: LD_VAR 0 1
32723: ARRAY
32724: ST_TO_ADDR
32725: GO 33051
32727: LD_INT 18
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32746
32735: POP
// bc_type := b_ext_radar ; 19 :
32736: LD_ADDR_OWVAR 42
32740: PUSH
32741: LD_INT 20
32743: ST_TO_ADDR
32744: GO 33051
32746: LD_INT 19
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32765
32754: POP
// bc_type := b_ext_radio ; 20 :
32755: LD_ADDR_OWVAR 42
32759: PUSH
32760: LD_INT 22
32762: ST_TO_ADDR
32763: GO 33051
32765: LD_INT 20
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32784
32773: POP
// bc_type := b_ext_siberium ; 21 :
32774: LD_ADDR_OWVAR 42
32778: PUSH
32779: LD_INT 21
32781: ST_TO_ADDR
32782: GO 33051
32784: LD_INT 21
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32803
32792: POP
// bc_type := b_ext_computer ; 22 :
32793: LD_ADDR_OWVAR 42
32797: PUSH
32798: LD_INT 24
32800: ST_TO_ADDR
32801: GO 33051
32803: LD_INT 22
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32822
32811: POP
// bc_type := b_ext_track ; 23 :
32812: LD_ADDR_OWVAR 42
32816: PUSH
32817: LD_INT 16
32819: ST_TO_ADDR
32820: GO 33051
32822: LD_INT 23
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32841
32830: POP
// bc_type := b_ext_laser ; 24 :
32831: LD_ADDR_OWVAR 42
32835: PUSH
32836: LD_INT 25
32838: ST_TO_ADDR
32839: GO 33051
32841: LD_INT 24
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32860
32849: POP
// bc_type := b_control_tower ; 25 :
32850: LD_ADDR_OWVAR 42
32854: PUSH
32855: LD_INT 36
32857: ST_TO_ADDR
32858: GO 33051
32860: LD_INT 25
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// bc_type := b_breastwork ; 26 :
32869: LD_ADDR_OWVAR 42
32873: PUSH
32874: LD_INT 31
32876: ST_TO_ADDR
32877: GO 33051
32879: LD_INT 26
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32898
32887: POP
// bc_type := b_bunker ; 27 :
32888: LD_ADDR_OWVAR 42
32892: PUSH
32893: LD_INT 32
32895: ST_TO_ADDR
32896: GO 33051
32898: LD_INT 27
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32917
32906: POP
// bc_type := b_turret ; 28 :
32907: LD_ADDR_OWVAR 42
32911: PUSH
32912: LD_INT 33
32914: ST_TO_ADDR
32915: GO 33051
32917: LD_INT 28
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32936
32925: POP
// bc_type := b_armoury ; 29 :
32926: LD_ADDR_OWVAR 42
32930: PUSH
32931: LD_INT 4
32933: ST_TO_ADDR
32934: GO 33051
32936: LD_INT 29
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_barracks ; 30 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 5
32952: ST_TO_ADDR
32953: GO 33051
32955: LD_INT 30
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_solar_power ; 31 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 27
32971: ST_TO_ADDR
32972: GO 33051
32974: LD_INT 31
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_oil_power ; 32 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 26
32990: ST_TO_ADDR
32991: GO 33051
32993: LD_INT 32
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33012
33001: POP
// bc_type := b_siberite_power ; 33 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 28
33009: ST_TO_ADDR
33010: GO 33051
33012: LD_INT 33
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33031
33020: POP
// bc_type := b_oil_mine ; 34 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 29
33028: ST_TO_ADDR
33029: GO 33051
33031: LD_INT 34
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33050
33039: POP
// bc_type := b_siberite_mine ; end ;
33040: LD_ADDR_OWVAR 42
33044: PUSH
33045: LD_INT 30
33047: ST_TO_ADDR
33048: GO 33051
33050: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33051: LD_ADDR_VAR 0 8
33055: PUSH
33056: LD_VAR 0 5
33060: PPUSH
33061: LD_VAR 0 6
33065: PPUSH
33066: LD_VAR 0 3
33070: PPUSH
33071: CALL_OW 47
33075: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33076: LD_OWVAR 42
33080: PUSH
33081: LD_INT 32
33083: PUSH
33084: LD_INT 33
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: IN
33091: IFFALSE 33107
// PlaceWeaponTurret ( b , weapon ) ;
33093: LD_VAR 0 8
33097: PPUSH
33098: LD_VAR 0 4
33102: PPUSH
33103: CALL_OW 431
// end ;
33107: LD_VAR 0 7
33111: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33118: LD_ADDR_VAR 0 4
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_OWVAR 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 30
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 30
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PPUSH
33167: CALL_OW 69
33171: ST_TO_ADDR
// if not tmp then
33172: LD_VAR 0 4
33176: NOT
33177: IFFALSE 33181
// exit ;
33179: GO 33240
// for i in tmp do
33181: LD_ADDR_VAR 0 2
33185: PUSH
33186: LD_VAR 0 4
33190: PUSH
33191: FOR_IN
33192: IFFALSE 33238
// for j = 1 to 3 do
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: DOUBLE
33200: LD_INT 1
33202: DEC
33203: ST_TO_ADDR
33204: LD_INT 3
33206: PUSH
33207: FOR_TO
33208: IFFALSE 33234
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33210: LD_VAR 0 2
33214: PPUSH
33215: CALL_OW 274
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_INT 99999
33227: PPUSH
33228: CALL_OW 277
33232: GO 33207
33234: POP
33235: POP
33236: GO 33191
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 1
33244: RET
// export function hHackSetLevel10 ; var i , j ; begin
33245: LD_INT 0
33247: PPUSH
33248: PPUSH
33249: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33250: LD_ADDR_VAR 0 2
33254: PUSH
33255: LD_INT 21
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 69
33269: PUSH
33270: FOR_IN
33271: IFFALSE 33323
// if IsSelected ( i ) then
33273: LD_VAR 0 2
33277: PPUSH
33278: CALL_OW 306
33282: IFFALSE 33321
// begin for j := 1 to 4 do
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: DOUBLE
33290: LD_INT 1
33292: DEC
33293: ST_TO_ADDR
33294: LD_INT 4
33296: PUSH
33297: FOR_TO
33298: IFFALSE 33319
// SetSkill ( i , j , 10 ) ;
33300: LD_VAR 0 2
33304: PPUSH
33305: LD_VAR 0 3
33309: PPUSH
33310: LD_INT 10
33312: PPUSH
33313: CALL_OW 237
33317: GO 33297
33319: POP
33320: POP
// end ;
33321: GO 33270
33323: POP
33324: POP
// end ;
33325: LD_VAR 0 1
33329: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33330: LD_INT 0
33332: PPUSH
33333: PPUSH
33334: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33335: LD_ADDR_VAR 0 2
33339: PUSH
33340: LD_INT 22
33342: PUSH
33343: LD_OWVAR 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 21
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PPUSH
33366: CALL_OW 69
33370: PUSH
33371: FOR_IN
33372: IFFALSE 33413
// begin for j := 1 to 4 do
33374: LD_ADDR_VAR 0 3
33378: PUSH
33379: DOUBLE
33380: LD_INT 1
33382: DEC
33383: ST_TO_ADDR
33384: LD_INT 4
33386: PUSH
33387: FOR_TO
33388: IFFALSE 33409
// SetSkill ( i , j , 10 ) ;
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 3
33399: PPUSH
33400: LD_INT 10
33402: PPUSH
33403: CALL_OW 237
33407: GO 33387
33409: POP
33410: POP
// end ;
33411: GO 33371
33413: POP
33414: POP
// end ;
33415: LD_VAR 0 1
33419: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33420: LD_INT 0
33422: PPUSH
// uc_side := your_side ;
33423: LD_ADDR_OWVAR 20
33427: PUSH
33428: LD_OWVAR 2
33432: ST_TO_ADDR
// uc_nation := nation ;
33433: LD_ADDR_OWVAR 21
33437: PUSH
33438: LD_VAR 0 1
33442: ST_TO_ADDR
// InitHc ;
33443: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33447: LD_INT 0
33449: PPUSH
33450: LD_VAR 0 2
33454: PPUSH
33455: LD_VAR 0 3
33459: PPUSH
33460: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33464: LD_VAR 0 4
33468: PPUSH
33469: LD_VAR 0 5
33473: PPUSH
33474: CALL_OW 428
33478: PUSH
33479: LD_INT 0
33481: EQUAL
33482: IFFALSE 33506
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33484: CALL_OW 44
33488: PPUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: LD_VAR 0 5
33498: PPUSH
33499: LD_INT 1
33501: PPUSH
33502: CALL_OW 48
// end ;
33506: LD_VAR 0 6
33510: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
// uc_side := your_side ;
33515: LD_ADDR_OWVAR 20
33519: PUSH
33520: LD_OWVAR 2
33524: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33525: LD_VAR 0 1
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 4
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: IN
33552: IFFALSE 33564
// uc_nation := nation_american else
33554: LD_ADDR_OWVAR 21
33558: PUSH
33559: LD_INT 1
33561: ST_TO_ADDR
33562: GO 33607
// if chassis in [ 11 , 12 , 13 , 14 ] then
33564: LD_VAR 0 1
33568: PUSH
33569: LD_INT 11
33571: PUSH
33572: LD_INT 12
33574: PUSH
33575: LD_INT 13
33577: PUSH
33578: LD_INT 14
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: IN
33587: IFFALSE 33599
// uc_nation := nation_arabian else
33589: LD_ADDR_OWVAR 21
33593: PUSH
33594: LD_INT 2
33596: ST_TO_ADDR
33597: GO 33607
// uc_nation := nation_russian ;
33599: LD_ADDR_OWVAR 21
33603: PUSH
33604: LD_INT 3
33606: ST_TO_ADDR
// vc_chassis := chassis ;
33607: LD_ADDR_OWVAR 37
33611: PUSH
33612: LD_VAR 0 1
33616: ST_TO_ADDR
// vc_engine := engine ;
33617: LD_ADDR_OWVAR 39
33621: PUSH
33622: LD_VAR 0 2
33626: ST_TO_ADDR
// vc_control := control ;
33627: LD_ADDR_OWVAR 38
33631: PUSH
33632: LD_VAR 0 3
33636: ST_TO_ADDR
// vc_weapon := weapon ;
33637: LD_ADDR_OWVAR 40
33641: PUSH
33642: LD_VAR 0 4
33646: ST_TO_ADDR
// un := CreateVehicle ;
33647: LD_ADDR_VAR 0 8
33651: PUSH
33652: CALL_OW 45
33656: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33657: LD_VAR 0 8
33661: PPUSH
33662: LD_INT 0
33664: PPUSH
33665: LD_INT 5
33667: PPUSH
33668: CALL_OW 12
33672: PPUSH
33673: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33677: LD_VAR 0 8
33681: PPUSH
33682: LD_VAR 0 5
33686: PPUSH
33687: LD_VAR 0 6
33691: PPUSH
33692: LD_INT 1
33694: PPUSH
33695: CALL_OW 48
// end ;
33699: LD_VAR 0 7
33703: RET
// export hInvincible ; every 1 do
33704: GO 33706
33706: DISABLE
// hInvincible := [ ] ;
33707: LD_ADDR_EXP 137
33711: PUSH
33712: EMPTY
33713: ST_TO_ADDR
33714: END
// every 10 do var i ;
33715: GO 33717
33717: DISABLE
33718: LD_INT 0
33720: PPUSH
// begin enable ;
33721: ENABLE
// if not hInvincible then
33722: LD_EXP 137
33726: NOT
33727: IFFALSE 33731
// exit ;
33729: GO 33775
// for i in hInvincible do
33731: LD_ADDR_VAR 0 1
33735: PUSH
33736: LD_EXP 137
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33773
// if GetLives ( i ) < 1000 then
33744: LD_VAR 0 1
33748: PPUSH
33749: CALL_OW 256
33753: PUSH
33754: LD_INT 1000
33756: LESS
33757: IFFALSE 33771
// SetLives ( i , 1000 ) ;
33759: LD_VAR 0 1
33763: PPUSH
33764: LD_INT 1000
33766: PPUSH
33767: CALL_OW 234
33771: GO 33741
33773: POP
33774: POP
// end ;
33775: PPOPN 1
33777: END
// export function hHackInvincible ; var i ; begin
33778: LD_INT 0
33780: PPUSH
33781: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33782: LD_ADDR_VAR 0 2
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 21
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 21
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: PPUSH
33815: CALL_OW 69
33819: PUSH
33820: FOR_IN
33821: IFFALSE 33882
// if IsSelected ( i ) then
33823: LD_VAR 0 2
33827: PPUSH
33828: CALL_OW 306
33832: IFFALSE 33880
// begin if i in hInvincible then
33834: LD_VAR 0 2
33838: PUSH
33839: LD_EXP 137
33843: IN
33844: IFFALSE 33864
// hInvincible := hInvincible diff i else
33846: LD_ADDR_EXP 137
33850: PUSH
33851: LD_EXP 137
33855: PUSH
33856: LD_VAR 0 2
33860: DIFF
33861: ST_TO_ADDR
33862: GO 33880
// hInvincible := hInvincible union i ;
33864: LD_ADDR_EXP 137
33868: PUSH
33869: LD_EXP 137
33873: PUSH
33874: LD_VAR 0 2
33878: UNION
33879: ST_TO_ADDR
// end ;
33880: GO 33820
33882: POP
33883: POP
// end ;
33884: LD_VAR 0 1
33888: RET
// export function hHackInvisible ; var i , j ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
33893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33894: LD_ADDR_VAR 0 2
33898: PUSH
33899: LD_INT 21
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PPUSH
33909: CALL_OW 69
33913: PUSH
33914: FOR_IN
33915: IFFALSE 33939
// if IsSelected ( i ) then
33917: LD_VAR 0 2
33921: PPUSH
33922: CALL_OW 306
33926: IFFALSE 33937
// ComForceInvisible ( i ) ;
33928: LD_VAR 0 2
33932: PPUSH
33933: CALL_OW 496
33937: GO 33914
33939: POP
33940: POP
// end ;
33941: LD_VAR 0 1
33945: RET
// export function hHackChangeYourSide ; begin
33946: LD_INT 0
33948: PPUSH
// if your_side = 8 then
33949: LD_OWVAR 2
33953: PUSH
33954: LD_INT 8
33956: EQUAL
33957: IFFALSE 33969
// your_side := 0 else
33959: LD_ADDR_OWVAR 2
33963: PUSH
33964: LD_INT 0
33966: ST_TO_ADDR
33967: GO 33983
// your_side := your_side + 1 ;
33969: LD_ADDR_OWVAR 2
33973: PUSH
33974: LD_OWVAR 2
33978: PUSH
33979: LD_INT 1
33981: PLUS
33982: ST_TO_ADDR
// end ;
33983: LD_VAR 0 1
33987: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33988: LD_INT 0
33990: PPUSH
33991: PPUSH
33992: PPUSH
// for i in all_units do
33993: LD_ADDR_VAR 0 2
33997: PUSH
33998: LD_OWVAR 3
34002: PUSH
34003: FOR_IN
34004: IFFALSE 34082
// if IsSelected ( i ) then
34006: LD_VAR 0 2
34010: PPUSH
34011: CALL_OW 306
34015: IFFALSE 34080
// begin j := GetSide ( i ) ;
34017: LD_ADDR_VAR 0 3
34021: PUSH
34022: LD_VAR 0 2
34026: PPUSH
34027: CALL_OW 255
34031: ST_TO_ADDR
// if j = 8 then
34032: LD_VAR 0 3
34036: PUSH
34037: LD_INT 8
34039: EQUAL
34040: IFFALSE 34052
// j := 0 else
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_INT 0
34049: ST_TO_ADDR
34050: GO 34066
// j := j + 1 ;
34052: LD_ADDR_VAR 0 3
34056: PUSH
34057: LD_VAR 0 3
34061: PUSH
34062: LD_INT 1
34064: PLUS
34065: ST_TO_ADDR
// SetSide ( i , j ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: LD_VAR 0 3
34075: PPUSH
34076: CALL_OW 235
// end ;
34080: GO 34003
34082: POP
34083: POP
// end ;
34084: LD_VAR 0 1
34088: RET
// export function hHackFog ; begin
34089: LD_INT 0
34091: PPUSH
// FogOff ( true ) ;
34092: LD_INT 1
34094: PPUSH
34095: CALL_OW 344
// end ;
34099: LD_VAR 0 1
34103: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34104: LD_INT 0
34106: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34107: LD_VAR 0 1
34111: PPUSH
34112: LD_VAR 0 2
34116: PPUSH
34117: LD_VAR 0 3
34121: PPUSH
34122: LD_INT 1
34124: PPUSH
34125: LD_INT 1
34127: PPUSH
34128: CALL_OW 483
// CenterOnXY ( x , y ) ;
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 84
// end ; end_of_file
34146: LD_VAR 0 4
34150: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34151: LD_INT 0
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_EXP 64
34171: EQUAL
34172: IFFALSE 34244
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34174: LD_INT 68
34176: PPUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: CALL_OW 255
34186: PPUSH
34187: CALL_OW 321
34191: PUSH
34192: LD_INT 2
34194: EQUAL
34195: IFFALSE 34207
// eff := 70 else
34197: LD_ADDR_VAR 0 4
34201: PUSH
34202: LD_INT 70
34204: ST_TO_ADDR
34205: GO 34215
// eff := 30 ;
34207: LD_ADDR_VAR 0 4
34211: PUSH
34212: LD_INT 30
34214: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 250
34224: PPUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 251
34234: PPUSH
34235: LD_VAR 0 4
34239: PPUSH
34240: CALL_OW 495
// end ; end ;
34244: LD_VAR 0 2
34248: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34249: LD_INT 0
34251: PPUSH
// end ;
34252: LD_VAR 0 4
34256: RET
// export function SOS_Command ( cmd ) ; begin
34257: LD_INT 0
34259: PPUSH
// end ;
34260: LD_VAR 0 2
34264: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34265: LD_INT 0
34267: PPUSH
// end ;
34268: LD_VAR 0 6
34272: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34273: LD_INT 0
34275: PPUSH
34276: PPUSH
// if not vehicle or not factory then
34277: LD_VAR 0 1
34281: NOT
34282: PUSH
34283: LD_VAR 0 2
34287: NOT
34288: OR
34289: IFFALSE 34293
// exit ;
34291: GO 34524
// if factoryWaypoints >= factory then
34293: LD_EXP 138
34297: PUSH
34298: LD_VAR 0 2
34302: GREATEREQUAL
34303: IFFALSE 34524
// if factoryWaypoints [ factory ] then
34305: LD_EXP 138
34309: PUSH
34310: LD_VAR 0 2
34314: ARRAY
34315: IFFALSE 34524
// begin if GetControl ( vehicle ) = control_manual then
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL_OW 263
34326: PUSH
34327: LD_INT 1
34329: EQUAL
34330: IFFALSE 34411
// begin driver := IsDrivenBy ( vehicle ) ;
34332: LD_ADDR_VAR 0 4
34336: PUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 311
34346: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34347: LD_VAR 0 4
34351: PPUSH
34352: LD_EXP 138
34356: PUSH
34357: LD_VAR 0 2
34361: ARRAY
34362: PUSH
34363: LD_INT 3
34365: ARRAY
34366: PPUSH
34367: LD_EXP 138
34371: PUSH
34372: LD_VAR 0 2
34376: ARRAY
34377: PUSH
34378: LD_INT 4
34380: ARRAY
34381: PPUSH
34382: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34386: LD_VAR 0 4
34390: PPUSH
34391: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34395: LD_VAR 0 4
34399: PPUSH
34400: LD_VAR 0 2
34404: PPUSH
34405: CALL_OW 180
// end else
34409: GO 34524
// if GetControl ( vehicle ) = control_remote then
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 263
34420: PUSH
34421: LD_INT 2
34423: EQUAL
34424: IFFALSE 34485
// begin wait ( 0 0$2 ) ;
34426: LD_INT 70
34428: PPUSH
34429: CALL_OW 67
// if Connect ( vehicle ) then
34433: LD_VAR 0 1
34437: PPUSH
34438: CALL 46748 0 1
34442: IFFALSE 34483
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34444: LD_VAR 0 1
34448: PPUSH
34449: LD_EXP 138
34453: PUSH
34454: LD_VAR 0 2
34458: ARRAY
34459: PUSH
34460: LD_INT 3
34462: ARRAY
34463: PPUSH
34464: LD_EXP 138
34468: PUSH
34469: LD_VAR 0 2
34473: ARRAY
34474: PUSH
34475: LD_INT 4
34477: ARRAY
34478: PPUSH
34479: CALL_OW 171
// end else
34483: GO 34524
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_EXP 138
34494: PUSH
34495: LD_VAR 0 2
34499: ARRAY
34500: PUSH
34501: LD_INT 3
34503: ARRAY
34504: PPUSH
34505: LD_EXP 138
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 4
34518: ARRAY
34519: PPUSH
34520: CALL_OW 171
// end ; end ;
34524: LD_VAR 0 3
34528: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34529: LD_INT 0
34531: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34532: LD_VAR 0 1
34536: PUSH
34537: LD_INT 250
34539: EQUAL
34540: PUSH
34541: LD_VAR 0 2
34545: PPUSH
34546: CALL_OW 264
34550: PUSH
34551: LD_EXP 67
34555: EQUAL
34556: AND
34557: IFFALSE 34578
// MinerPlaceMine ( unit , x , y ) ;
34559: LD_VAR 0 2
34563: PPUSH
34564: LD_VAR 0 4
34568: PPUSH
34569: LD_VAR 0 5
34573: PPUSH
34574: CALL 37306 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 251
34585: EQUAL
34586: PUSH
34587: LD_VAR 0 2
34591: PPUSH
34592: CALL_OW 264
34596: PUSH
34597: LD_EXP 67
34601: EQUAL
34602: AND
34603: IFFALSE 34624
// MinerDetonateMine ( unit , x , y ) ;
34605: LD_VAR 0 2
34609: PPUSH
34610: LD_VAR 0 4
34614: PPUSH
34615: LD_VAR 0 5
34619: PPUSH
34620: CALL 37583 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34624: LD_VAR 0 1
34628: PUSH
34629: LD_INT 252
34631: EQUAL
34632: PUSH
34633: LD_VAR 0 2
34637: PPUSH
34638: CALL_OW 264
34642: PUSH
34643: LD_EXP 67
34647: EQUAL
34648: AND
34649: IFFALSE 34670
// MinerCreateMinefield ( unit , x , y ) ;
34651: LD_VAR 0 2
34655: PPUSH
34656: LD_VAR 0 4
34660: PPUSH
34661: LD_VAR 0 5
34665: PPUSH
34666: CALL 38000 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34670: LD_VAR 0 1
34674: PUSH
34675: LD_INT 253
34677: EQUAL
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: CALL_OW 257
34688: PUSH
34689: LD_INT 5
34691: EQUAL
34692: AND
34693: IFFALSE 34714
// ComBinocular ( unit , x , y ) ;
34695: LD_VAR 0 2
34699: PPUSH
34700: LD_VAR 0 4
34704: PPUSH
34705: LD_VAR 0 5
34709: PPUSH
34710: CALL 38371 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34714: LD_VAR 0 1
34718: PUSH
34719: LD_INT 254
34721: EQUAL
34722: PUSH
34723: LD_VAR 0 2
34727: PPUSH
34728: CALL_OW 264
34732: PUSH
34733: LD_EXP 62
34737: EQUAL
34738: AND
34739: PUSH
34740: LD_VAR 0 3
34744: PPUSH
34745: CALL_OW 263
34749: PUSH
34750: LD_INT 3
34752: EQUAL
34753: AND
34754: IFFALSE 34770
// HackDestroyVehicle ( unit , selectedUnit ) ;
34756: LD_VAR 0 2
34760: PPUSH
34761: LD_VAR 0 3
34765: PPUSH
34766: CALL 36666 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34770: LD_VAR 0 1
34774: PUSH
34775: LD_INT 255
34777: EQUAL
34778: PUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: CALL_OW 264
34788: PUSH
34789: LD_INT 14
34791: PUSH
34792: LD_INT 53
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: IN
34799: AND
34800: PUSH
34801: LD_VAR 0 4
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: CALL_OW 488
34815: AND
34816: IFFALSE 34840
// CutTreeXYR ( unit , x , y , 12 ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 4
34827: PPUSH
34828: LD_VAR 0 5
34832: PPUSH
34833: LD_INT 12
34835: PPUSH
34836: CALL 35232 0 4
// if cmd = 256 then
34840: LD_VAR 0 1
34844: PUSH
34845: LD_INT 256
34847: EQUAL
34848: IFFALSE 34869
// SetFactoryWaypoint ( unit , x , y ) ;
34850: LD_VAR 0 2
34854: PPUSH
34855: LD_VAR 0 4
34859: PPUSH
34860: LD_VAR 0 5
34864: PPUSH
34865: CALL 34874 0 3
// end ;
34869: LD_VAR 0 6
34873: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34874: LD_INT 0
34876: PPUSH
34877: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34878: LD_VAR 0 1
34882: NOT
34883: PUSH
34884: LD_VAR 0 2
34888: PPUSH
34889: LD_VAR 0 3
34893: PPUSH
34894: CALL_OW 488
34898: NOT
34899: OR
34900: PUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 266
34910: PUSH
34911: LD_INT 3
34913: NONEQUAL
34914: PUSH
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 247
34924: PUSH
34925: LD_INT 1
34927: EQUAL
34928: NOT
34929: AND
34930: OR
34931: IFFALSE 34935
// exit ;
34933: GO 35084
// if GetType ( factory ) = unit_human then
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 247
34944: PUSH
34945: LD_INT 1
34947: EQUAL
34948: IFFALSE 34965
// factory := IsInUnit ( factory ) ;
34950: LD_ADDR_VAR 0 1
34954: PUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 310
34964: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 266
34974: PUSH
34975: LD_INT 3
34977: NONEQUAL
34978: IFFALSE 34982
// exit ;
34980: GO 35084
// if HexInfo ( x , y ) = factory then
34982: LD_VAR 0 2
34986: PPUSH
34987: LD_VAR 0 3
34991: PPUSH
34992: CALL_OW 428
34996: PUSH
34997: LD_VAR 0 1
35001: EQUAL
35002: IFFALSE 35029
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35004: LD_ADDR_EXP 138
35008: PUSH
35009: LD_EXP 138
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: LD_INT 0
35021: PPUSH
35022: CALL_OW 1
35026: ST_TO_ADDR
35027: GO 35080
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35029: LD_ADDR_EXP 138
35033: PUSH
35034: LD_EXP 138
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL_OW 255
35053: PUSH
35054: LD_VAR 0 1
35058: PUSH
35059: LD_VAR 0 2
35063: PUSH
35064: LD_VAR 0 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: PPUSH
35075: CALL_OW 1
35079: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35080: CALL 35089 0 0
// end ;
35084: LD_VAR 0 4
35088: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35089: LD_INT 0
35091: PPUSH
35092: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35093: LD_STRING resetFactoryWaypoint();
35095: PPUSH
35096: CALL_OW 559
// if factoryWaypoints then
35100: LD_EXP 138
35104: IFFALSE 35227
// begin for i := 1 to factoryWaypoints do
35106: LD_ADDR_VAR 0 2
35110: PUSH
35111: DOUBLE
35112: LD_INT 1
35114: DEC
35115: ST_TO_ADDR
35116: LD_EXP 138
35120: PUSH
35121: FOR_TO
35122: IFFALSE 35225
// if factoryWaypoints [ i ] then
35124: LD_EXP 138
35128: PUSH
35129: LD_VAR 0 2
35133: ARRAY
35134: IFFALSE 35223
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35136: LD_STRING setFactoryWaypointXY(
35138: PUSH
35139: LD_EXP 138
35143: PUSH
35144: LD_VAR 0 2
35148: ARRAY
35149: PUSH
35150: LD_INT 1
35152: ARRAY
35153: STR
35154: PUSH
35155: LD_STRING ,
35157: STR
35158: PUSH
35159: LD_EXP 138
35163: PUSH
35164: LD_VAR 0 2
35168: ARRAY
35169: PUSH
35170: LD_INT 2
35172: ARRAY
35173: STR
35174: PUSH
35175: LD_STRING ,
35177: STR
35178: PUSH
35179: LD_EXP 138
35183: PUSH
35184: LD_VAR 0 2
35188: ARRAY
35189: PUSH
35190: LD_INT 3
35192: ARRAY
35193: STR
35194: PUSH
35195: LD_STRING ,
35197: STR
35198: PUSH
35199: LD_EXP 138
35203: PUSH
35204: LD_VAR 0 2
35208: ARRAY
35209: PUSH
35210: LD_INT 4
35212: ARRAY
35213: STR
35214: PUSH
35215: LD_STRING )
35217: STR
35218: PPUSH
35219: CALL_OW 559
35223: GO 35121
35225: POP
35226: POP
// end ; end ;
35227: LD_VAR 0 1
35231: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35232: LD_INT 0
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35243: LD_VAR 0 1
35247: NOT
35248: PUSH
35249: LD_VAR 0 2
35253: PPUSH
35254: LD_VAR 0 3
35258: PPUSH
35259: CALL_OW 488
35263: NOT
35264: OR
35265: PUSH
35266: LD_VAR 0 4
35270: NOT
35271: OR
35272: IFFALSE 35276
// exit ;
35274: GO 35616
// list := [ ] ;
35276: LD_ADDR_VAR 0 13
35280: PUSH
35281: EMPTY
35282: ST_TO_ADDR
// if x - r < 0 then
35283: LD_VAR 0 2
35287: PUSH
35288: LD_VAR 0 4
35292: MINUS
35293: PUSH
35294: LD_INT 0
35296: LESS
35297: IFFALSE 35309
// min_x := 0 else
35299: LD_ADDR_VAR 0 7
35303: PUSH
35304: LD_INT 0
35306: ST_TO_ADDR
35307: GO 35325
// min_x := x - r ;
35309: LD_ADDR_VAR 0 7
35313: PUSH
35314: LD_VAR 0 2
35318: PUSH
35319: LD_VAR 0 4
35323: MINUS
35324: ST_TO_ADDR
// if y - r < 0 then
35325: LD_VAR 0 3
35329: PUSH
35330: LD_VAR 0 4
35334: MINUS
35335: PUSH
35336: LD_INT 0
35338: LESS
35339: IFFALSE 35351
// min_y := 0 else
35341: LD_ADDR_VAR 0 8
35345: PUSH
35346: LD_INT 0
35348: ST_TO_ADDR
35349: GO 35367
// min_y := y - r ;
35351: LD_ADDR_VAR 0 8
35355: PUSH
35356: LD_VAR 0 3
35360: PUSH
35361: LD_VAR 0 4
35365: MINUS
35366: ST_TO_ADDR
// max_x := x + r ;
35367: LD_ADDR_VAR 0 9
35371: PUSH
35372: LD_VAR 0 2
35376: PUSH
35377: LD_VAR 0 4
35381: PLUS
35382: ST_TO_ADDR
// max_y := y + r ;
35383: LD_ADDR_VAR 0 10
35387: PUSH
35388: LD_VAR 0 3
35392: PUSH
35393: LD_VAR 0 4
35397: PLUS
35398: ST_TO_ADDR
// for _x = min_x to max_x do
35399: LD_ADDR_VAR 0 11
35403: PUSH
35404: DOUBLE
35405: LD_VAR 0 7
35409: DEC
35410: ST_TO_ADDR
35411: LD_VAR 0 9
35415: PUSH
35416: FOR_TO
35417: IFFALSE 35534
// for _y = min_y to max_y do
35419: LD_ADDR_VAR 0 12
35423: PUSH
35424: DOUBLE
35425: LD_VAR 0 8
35429: DEC
35430: ST_TO_ADDR
35431: LD_VAR 0 10
35435: PUSH
35436: FOR_TO
35437: IFFALSE 35530
// begin if not ValidHex ( _x , _y ) then
35439: LD_VAR 0 11
35443: PPUSH
35444: LD_VAR 0 12
35448: PPUSH
35449: CALL_OW 488
35453: NOT
35454: IFFALSE 35458
// continue ;
35456: GO 35436
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35458: LD_VAR 0 11
35462: PPUSH
35463: LD_VAR 0 12
35467: PPUSH
35468: CALL_OW 351
35472: PUSH
35473: LD_VAR 0 11
35477: PPUSH
35478: LD_VAR 0 12
35482: PPUSH
35483: CALL_OW 554
35487: AND
35488: IFFALSE 35528
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35490: LD_ADDR_VAR 0 13
35494: PUSH
35495: LD_VAR 0 13
35499: PPUSH
35500: LD_VAR 0 13
35504: PUSH
35505: LD_INT 1
35507: PLUS
35508: PPUSH
35509: LD_VAR 0 11
35513: PUSH
35514: LD_VAR 0 12
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PPUSH
35523: CALL_OW 2
35527: ST_TO_ADDR
// end ;
35528: GO 35436
35530: POP
35531: POP
35532: GO 35416
35534: POP
35535: POP
// if not list then
35536: LD_VAR 0 13
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35616
// for i in list do
35545: LD_ADDR_VAR 0 6
35549: PUSH
35550: LD_VAR 0 13
35554: PUSH
35555: FOR_IN
35556: IFFALSE 35614
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35558: LD_VAR 0 1
35562: PPUSH
35563: LD_STRING M
35565: PUSH
35566: LD_VAR 0 6
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PUSH
35575: LD_VAR 0 6
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: PPUSH
35608: CALL_OW 447
35612: GO 35555
35614: POP
35615: POP
// end ;
35616: LD_VAR 0 5
35620: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35621: LD_EXP 139
35625: NOT
35626: IFFALSE 35676
35628: GO 35630
35630: DISABLE
// begin initHack := true ;
35631: LD_ADDR_EXP 139
35635: PUSH
35636: LD_INT 1
35638: ST_TO_ADDR
// hackTanks := [ ] ;
35639: LD_ADDR_EXP 140
35643: PUSH
35644: EMPTY
35645: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35646: LD_ADDR_EXP 141
35650: PUSH
35651: EMPTY
35652: ST_TO_ADDR
// hackLimit := 3 ;
35653: LD_ADDR_EXP 142
35657: PUSH
35658: LD_INT 3
35660: ST_TO_ADDR
// hackDist := 12 ;
35661: LD_ADDR_EXP 143
35665: PUSH
35666: LD_INT 12
35668: ST_TO_ADDR
// hackCounter := [ ] ;
35669: LD_ADDR_EXP 144
35673: PUSH
35674: EMPTY
35675: ST_TO_ADDR
// end ;
35676: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35677: LD_EXP 139
35681: PUSH
35682: LD_INT 34
35684: PUSH
35685: LD_EXP 62
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PPUSH
35694: CALL_OW 69
35698: AND
35699: IFFALSE 35954
35701: GO 35703
35703: DISABLE
35704: LD_INT 0
35706: PPUSH
35707: PPUSH
// begin enable ;
35708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35709: LD_ADDR_VAR 0 1
35713: PUSH
35714: LD_INT 34
35716: PUSH
35717: LD_EXP 62
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PPUSH
35726: CALL_OW 69
35730: PUSH
35731: FOR_IN
35732: IFFALSE 35952
// begin if not i in hackTanks then
35734: LD_VAR 0 1
35738: PUSH
35739: LD_EXP 140
35743: IN
35744: NOT
35745: IFFALSE 35828
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35747: LD_ADDR_EXP 140
35751: PUSH
35752: LD_EXP 140
35756: PPUSH
35757: LD_EXP 140
35761: PUSH
35762: LD_INT 1
35764: PLUS
35765: PPUSH
35766: LD_VAR 0 1
35770: PPUSH
35771: CALL_OW 1
35775: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35776: LD_ADDR_EXP 141
35780: PUSH
35781: LD_EXP 141
35785: PPUSH
35786: LD_EXP 141
35790: PUSH
35791: LD_INT 1
35793: PLUS
35794: PPUSH
35795: EMPTY
35796: PPUSH
35797: CALL_OW 1
35801: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35802: LD_ADDR_EXP 144
35806: PUSH
35807: LD_EXP 144
35811: PPUSH
35812: LD_EXP 144
35816: PUSH
35817: LD_INT 1
35819: PLUS
35820: PPUSH
35821: EMPTY
35822: PPUSH
35823: CALL_OW 1
35827: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 302
35837: NOT
35838: IFFALSE 35851
// begin HackUnlinkAll ( i ) ;
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL 35957 0 1
// continue ;
35849: GO 35731
// end ; HackCheckCapturedStatus ( i ) ;
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL 36400 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35860: LD_ADDR_VAR 0 2
35864: PUSH
35865: LD_INT 81
35867: PUSH
35868: LD_VAR 0 1
35872: PPUSH
35873: CALL_OW 255
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 33
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 91
35894: PUSH
35895: LD_VAR 0 1
35899: PUSH
35900: LD_EXP 143
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 50
35912: PUSH
35913: EMPTY
35914: LIST
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PPUSH
35922: CALL_OW 69
35926: ST_TO_ADDR
// if not tmp then
35927: LD_VAR 0 2
35931: NOT
35932: IFFALSE 35936
// continue ;
35934: GO 35731
// HackLink ( i , tmp ) ;
35936: LD_VAR 0 1
35940: PPUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: CALL 36093 0 2
// end ;
35950: GO 35731
35952: POP
35953: POP
// end ;
35954: PPOPN 2
35956: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35957: LD_INT 0
35959: PPUSH
35960: PPUSH
35961: PPUSH
// if not hack in hackTanks then
35962: LD_VAR 0 1
35966: PUSH
35967: LD_EXP 140
35971: IN
35972: NOT
35973: IFFALSE 35977
// exit ;
35975: GO 36088
// index := GetElementIndex ( hackTanks , hack ) ;
35977: LD_ADDR_VAR 0 4
35981: PUSH
35982: LD_EXP 140
35986: PPUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL 43562 0 2
35996: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35997: LD_EXP 141
36001: PUSH
36002: LD_VAR 0 4
36006: ARRAY
36007: IFFALSE 36088
// begin for i in hackTanksCaptured [ index ] do
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_EXP 141
36018: PUSH
36019: LD_VAR 0 4
36023: ARRAY
36024: PUSH
36025: FOR_IN
36026: IFFALSE 36052
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36028: LD_VAR 0 3
36032: PUSH
36033: LD_INT 1
36035: ARRAY
36036: PPUSH
36037: LD_VAR 0 3
36041: PUSH
36042: LD_INT 2
36044: ARRAY
36045: PPUSH
36046: CALL_OW 235
36050: GO 36025
36052: POP
36053: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36054: LD_ADDR_EXP 141
36058: PUSH
36059: LD_EXP 141
36063: PPUSH
36064: LD_VAR 0 4
36068: PPUSH
36069: EMPTY
36070: PPUSH
36071: CALL_OW 1
36075: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36076: LD_VAR 0 1
36080: PPUSH
36081: LD_INT 0
36083: PPUSH
36084: CALL_OW 505
// end ; end ;
36088: LD_VAR 0 2
36092: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36093: LD_INT 0
36095: PPUSH
36096: PPUSH
36097: PPUSH
// if not hack in hackTanks or not vehicles then
36098: LD_VAR 0 1
36102: PUSH
36103: LD_EXP 140
36107: IN
36108: NOT
36109: PUSH
36110: LD_VAR 0 2
36114: NOT
36115: OR
36116: IFFALSE 36120
// exit ;
36118: GO 36395
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36120: LD_ADDR_VAR 0 2
36124: PUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: LD_VAR 0 2
36134: PPUSH
36135: LD_INT 1
36137: PPUSH
36138: LD_INT 1
36140: PPUSH
36141: CALL 44212 0 4
36145: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36146: LD_ADDR_VAR 0 5
36150: PUSH
36151: LD_EXP 140
36155: PPUSH
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL 43562 0 2
36165: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36166: LD_EXP 141
36170: PUSH
36171: LD_VAR 0 5
36175: ARRAY
36176: PUSH
36177: LD_EXP 142
36181: LESS
36182: IFFALSE 36371
// begin for i := 1 to vehicles do
36184: LD_ADDR_VAR 0 4
36188: PUSH
36189: DOUBLE
36190: LD_INT 1
36192: DEC
36193: ST_TO_ADDR
36194: LD_VAR 0 2
36198: PUSH
36199: FOR_TO
36200: IFFALSE 36369
// begin if hackTanksCaptured [ index ] = hackLimit then
36202: LD_EXP 141
36206: PUSH
36207: LD_VAR 0 5
36211: ARRAY
36212: PUSH
36213: LD_EXP 142
36217: EQUAL
36218: IFFALSE 36222
// break ;
36220: GO 36369
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36222: LD_ADDR_EXP 144
36226: PUSH
36227: LD_EXP 144
36231: PPUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: LD_EXP 144
36241: PUSH
36242: LD_VAR 0 5
36246: ARRAY
36247: PUSH
36248: LD_INT 1
36250: PLUS
36251: PPUSH
36252: CALL_OW 1
36256: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36257: LD_ADDR_EXP 141
36261: PUSH
36262: LD_EXP 141
36266: PPUSH
36267: LD_VAR 0 5
36271: PUSH
36272: LD_EXP 141
36276: PUSH
36277: LD_VAR 0 5
36281: ARRAY
36282: PUSH
36283: LD_INT 1
36285: PLUS
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PPUSH
36291: LD_VAR 0 2
36295: PUSH
36296: LD_VAR 0 4
36300: ARRAY
36301: PUSH
36302: LD_VAR 0 2
36306: PUSH
36307: LD_VAR 0 4
36311: ARRAY
36312: PPUSH
36313: CALL_OW 255
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PPUSH
36322: CALL 43777 0 3
36326: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36327: LD_VAR 0 2
36331: PUSH
36332: LD_VAR 0 4
36336: ARRAY
36337: PPUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: CALL_OW 255
36347: PPUSH
36348: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36352: LD_VAR 0 2
36356: PUSH
36357: LD_VAR 0 4
36361: ARRAY
36362: PPUSH
36363: CALL_OW 141
// end ;
36367: GO 36199
36369: POP
36370: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36371: LD_VAR 0 1
36375: PPUSH
36376: LD_EXP 141
36380: PUSH
36381: LD_VAR 0 5
36385: ARRAY
36386: PUSH
36387: LD_INT 0
36389: PLUS
36390: PPUSH
36391: CALL_OW 505
// end ;
36395: LD_VAR 0 3
36399: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36400: LD_INT 0
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
// if not hack in hackTanks then
36406: LD_VAR 0 1
36410: PUSH
36411: LD_EXP 140
36415: IN
36416: NOT
36417: IFFALSE 36421
// exit ;
36419: GO 36661
// index := GetElementIndex ( hackTanks , hack ) ;
36421: LD_ADDR_VAR 0 4
36425: PUSH
36426: LD_EXP 140
36430: PPUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL 43562 0 2
36440: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: DOUBLE
36447: LD_EXP 141
36451: PUSH
36452: LD_VAR 0 4
36456: ARRAY
36457: INC
36458: ST_TO_ADDR
36459: LD_INT 1
36461: PUSH
36462: FOR_DOWNTO
36463: IFFALSE 36635
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36465: LD_ADDR_VAR 0 5
36469: PUSH
36470: LD_EXP 141
36474: PUSH
36475: LD_VAR 0 4
36479: ARRAY
36480: PUSH
36481: LD_VAR 0 3
36485: ARRAY
36486: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36487: LD_VAR 0 5
36491: PUSH
36492: LD_INT 1
36494: ARRAY
36495: PPUSH
36496: CALL_OW 302
36500: NOT
36501: PUSH
36502: LD_VAR 0 5
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: CALL_OW 255
36515: PUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 255
36525: NONEQUAL
36526: OR
36527: IFFALSE 36633
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36529: LD_VAR 0 5
36533: PUSH
36534: LD_INT 1
36536: ARRAY
36537: PPUSH
36538: CALL_OW 305
36542: PUSH
36543: LD_VAR 0 5
36547: PUSH
36548: LD_INT 1
36550: ARRAY
36551: PPUSH
36552: CALL_OW 255
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 255
36566: EQUAL
36567: AND
36568: IFFALSE 36592
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36570: LD_VAR 0 5
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: PPUSH
36579: LD_VAR 0 5
36583: PUSH
36584: LD_INT 2
36586: ARRAY
36587: PPUSH
36588: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36592: LD_ADDR_EXP 141
36596: PUSH
36597: LD_EXP 141
36601: PPUSH
36602: LD_VAR 0 4
36606: PPUSH
36607: LD_EXP 141
36611: PUSH
36612: LD_VAR 0 4
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 3
36622: PPUSH
36623: CALL_OW 3
36627: PPUSH
36628: CALL_OW 1
36632: ST_TO_ADDR
// end ; end ;
36633: GO 36462
36635: POP
36636: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36637: LD_VAR 0 1
36641: PPUSH
36642: LD_EXP 141
36646: PUSH
36647: LD_VAR 0 4
36651: ARRAY
36652: PUSH
36653: LD_INT 0
36655: PLUS
36656: PPUSH
36657: CALL_OW 505
// end ;
36661: LD_VAR 0 2
36665: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36666: LD_INT 0
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
// if not hack in hackTanks then
36672: LD_VAR 0 1
36676: PUSH
36677: LD_EXP 140
36681: IN
36682: NOT
36683: IFFALSE 36687
// exit ;
36685: GO 36772
// index := GetElementIndex ( hackTanks , hack ) ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_EXP 140
36696: PPUSH
36697: LD_VAR 0 1
36701: PPUSH
36702: CALL 43562 0 2
36706: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: DOUBLE
36713: LD_INT 1
36715: DEC
36716: ST_TO_ADDR
36717: LD_EXP 141
36721: PUSH
36722: LD_VAR 0 5
36726: ARRAY
36727: PUSH
36728: FOR_TO
36729: IFFALSE 36770
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36731: LD_EXP 141
36735: PUSH
36736: LD_VAR 0 5
36740: ARRAY
36741: PUSH
36742: LD_VAR 0 4
36746: ARRAY
36747: PUSH
36748: LD_INT 1
36750: ARRAY
36751: PUSH
36752: LD_VAR 0 2
36756: EQUAL
36757: IFFALSE 36768
// KillUnit ( vehicle ) ;
36759: LD_VAR 0 2
36763: PPUSH
36764: CALL_OW 66
36768: GO 36728
36770: POP
36771: POP
// end ;
36772: LD_VAR 0 3
36776: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36777: LD_EXP 145
36781: NOT
36782: IFFALSE 36817
36784: GO 36786
36786: DISABLE
// begin initMiner := true ;
36787: LD_ADDR_EXP 145
36791: PUSH
36792: LD_INT 1
36794: ST_TO_ADDR
// minersList := [ ] ;
36795: LD_ADDR_EXP 146
36799: PUSH
36800: EMPTY
36801: ST_TO_ADDR
// minerMinesList := [ ] ;
36802: LD_ADDR_EXP 147
36806: PUSH
36807: EMPTY
36808: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36809: LD_ADDR_EXP 148
36813: PUSH
36814: LD_INT 5
36816: ST_TO_ADDR
// end ;
36817: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36818: LD_EXP 145
36822: PUSH
36823: LD_INT 34
36825: PUSH
36826: LD_EXP 67
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PPUSH
36835: CALL_OW 69
36839: AND
36840: IFFALSE 37303
36842: GO 36844
36844: DISABLE
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
// begin enable ;
36851: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36852: LD_ADDR_VAR 0 1
36856: PUSH
36857: LD_INT 34
36859: PUSH
36860: LD_EXP 67
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PPUSH
36869: CALL_OW 69
36873: PUSH
36874: FOR_IN
36875: IFFALSE 36947
// begin if not i in minersList then
36877: LD_VAR 0 1
36881: PUSH
36882: LD_EXP 146
36886: IN
36887: NOT
36888: IFFALSE 36945
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36890: LD_ADDR_EXP 146
36894: PUSH
36895: LD_EXP 146
36899: PPUSH
36900: LD_EXP 146
36904: PUSH
36905: LD_INT 1
36907: PLUS
36908: PPUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 1
36918: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36919: LD_ADDR_EXP 147
36923: PUSH
36924: LD_EXP 147
36928: PPUSH
36929: LD_EXP 147
36933: PUSH
36934: LD_INT 1
36936: PLUS
36937: PPUSH
36938: EMPTY
36939: PPUSH
36940: CALL_OW 1
36944: ST_TO_ADDR
// end end ;
36945: GO 36874
36947: POP
36948: POP
// for i := minerMinesList downto 1 do
36949: LD_ADDR_VAR 0 1
36953: PUSH
36954: DOUBLE
36955: LD_EXP 147
36959: INC
36960: ST_TO_ADDR
36961: LD_INT 1
36963: PUSH
36964: FOR_DOWNTO
36965: IFFALSE 37301
// begin if IsLive ( minersList [ i ] ) then
36967: LD_EXP 146
36971: PUSH
36972: LD_VAR 0 1
36976: ARRAY
36977: PPUSH
36978: CALL_OW 300
36982: IFFALSE 37010
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36984: LD_EXP 146
36988: PUSH
36989: LD_VAR 0 1
36993: ARRAY
36994: PPUSH
36995: LD_EXP 147
36999: PUSH
37000: LD_VAR 0 1
37004: ARRAY
37005: PPUSH
37006: CALL_OW 505
// if not minerMinesList [ i ] then
37010: LD_EXP 147
37014: PUSH
37015: LD_VAR 0 1
37019: ARRAY
37020: NOT
37021: IFFALSE 37025
// continue ;
37023: GO 36964
// for j := minerMinesList [ i ] downto 1 do
37025: LD_ADDR_VAR 0 2
37029: PUSH
37030: DOUBLE
37031: LD_EXP 147
37035: PUSH
37036: LD_VAR 0 1
37040: ARRAY
37041: INC
37042: ST_TO_ADDR
37043: LD_INT 1
37045: PUSH
37046: FOR_DOWNTO
37047: IFFALSE 37297
// begin side := GetSide ( minersList [ i ] ) ;
37049: LD_ADDR_VAR 0 3
37053: PUSH
37054: LD_EXP 146
37058: PUSH
37059: LD_VAR 0 1
37063: ARRAY
37064: PPUSH
37065: CALL_OW 255
37069: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37070: LD_ADDR_VAR 0 4
37074: PUSH
37075: LD_EXP 147
37079: PUSH
37080: LD_VAR 0 1
37084: ARRAY
37085: PUSH
37086: LD_VAR 0 2
37090: ARRAY
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_EXP 147
37100: PUSH
37101: LD_VAR 0 1
37105: ARRAY
37106: PUSH
37107: LD_VAR 0 2
37111: ARRAY
37112: PUSH
37113: LD_INT 2
37115: ARRAY
37116: PPUSH
37117: CALL_OW 428
37121: ST_TO_ADDR
// if not tmp then
37122: LD_VAR 0 4
37126: NOT
37127: IFFALSE 37131
// continue ;
37129: GO 37046
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37131: LD_VAR 0 4
37135: PUSH
37136: LD_INT 81
37138: PUSH
37139: LD_VAR 0 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PPUSH
37148: CALL_OW 69
37152: IN
37153: PUSH
37154: LD_EXP 147
37158: PUSH
37159: LD_VAR 0 1
37163: ARRAY
37164: PUSH
37165: LD_VAR 0 2
37169: ARRAY
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: PPUSH
37175: LD_EXP 147
37179: PUSH
37180: LD_VAR 0 1
37184: ARRAY
37185: PUSH
37186: LD_VAR 0 2
37190: ARRAY
37191: PUSH
37192: LD_INT 2
37194: ARRAY
37195: PPUSH
37196: CALL_OW 458
37200: AND
37201: IFFALSE 37295
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37203: LD_EXP 147
37207: PUSH
37208: LD_VAR 0 1
37212: ARRAY
37213: PUSH
37214: LD_VAR 0 2
37218: ARRAY
37219: PUSH
37220: LD_INT 1
37222: ARRAY
37223: PPUSH
37224: LD_EXP 147
37228: PUSH
37229: LD_VAR 0 1
37233: ARRAY
37234: PUSH
37235: LD_VAR 0 2
37239: ARRAY
37240: PUSH
37241: LD_INT 2
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 3
37249: PPUSH
37250: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37254: LD_ADDR_EXP 147
37258: PUSH
37259: LD_EXP 147
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: LD_EXP 147
37273: PUSH
37274: LD_VAR 0 1
37278: ARRAY
37279: PPUSH
37280: LD_VAR 0 2
37284: PPUSH
37285: CALL_OW 3
37289: PPUSH
37290: CALL_OW 1
37294: ST_TO_ADDR
// end ; end ;
37295: GO 37046
37297: POP
37298: POP
// end ;
37299: GO 36964
37301: POP
37302: POP
// end ;
37303: PPOPN 4
37305: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37306: LD_INT 0
37308: PPUSH
37309: PPUSH
// result := false ;
37310: LD_ADDR_VAR 0 4
37314: PUSH
37315: LD_INT 0
37317: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 264
37327: PUSH
37328: LD_EXP 67
37332: EQUAL
37333: NOT
37334: IFFALSE 37338
// exit ;
37336: GO 37578
// index := GetElementIndex ( minersList , unit ) ;
37338: LD_ADDR_VAR 0 5
37342: PUSH
37343: LD_EXP 146
37347: PPUSH
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL 43562 0 2
37357: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37358: LD_EXP 147
37362: PUSH
37363: LD_VAR 0 5
37367: ARRAY
37368: PUSH
37369: LD_EXP 148
37373: GREATEREQUAL
37374: IFFALSE 37378
// exit ;
37376: GO 37578
// ComMoveXY ( unit , x , y ) ;
37378: LD_VAR 0 1
37382: PPUSH
37383: LD_VAR 0 2
37387: PPUSH
37388: LD_VAR 0 3
37392: PPUSH
37393: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37397: LD_INT 35
37399: PPUSH
37400: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37404: LD_VAR 0 1
37408: PPUSH
37409: LD_VAR 0 2
37413: PPUSH
37414: LD_VAR 0 3
37418: PPUSH
37419: CALL 74281 0 3
37423: NOT
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 314
37434: AND
37435: IFFALSE 37439
// exit ;
37437: GO 37578
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37439: LD_VAR 0 2
37443: PPUSH
37444: LD_VAR 0 3
37448: PPUSH
37449: CALL_OW 428
37453: PUSH
37454: LD_VAR 0 1
37458: EQUAL
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 314
37469: NOT
37470: AND
37471: IFFALSE 37397
// PlaySoundXY ( x , y , PlantMine ) ;
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_STRING PlantMine
37485: PPUSH
37486: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37490: LD_VAR 0 2
37494: PPUSH
37495: LD_VAR 0 3
37499: PPUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 255
37509: PPUSH
37510: LD_INT 0
37512: PPUSH
37513: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37517: LD_ADDR_EXP 147
37521: PUSH
37522: LD_EXP 147
37526: PPUSH
37527: LD_VAR 0 5
37531: PUSH
37532: LD_EXP 147
37536: PUSH
37537: LD_VAR 0 5
37541: ARRAY
37542: PUSH
37543: LD_INT 1
37545: PLUS
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PPUSH
37551: LD_VAR 0 2
37555: PUSH
37556: LD_VAR 0 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PPUSH
37565: CALL 43777 0 3
37569: ST_TO_ADDR
// result := true ;
37570: LD_ADDR_VAR 0 4
37574: PUSH
37575: LD_INT 1
37577: ST_TO_ADDR
// end ;
37578: LD_VAR 0 4
37582: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37583: LD_INT 0
37585: PPUSH
37586: PPUSH
37587: PPUSH
// if not unit in minersList then
37588: LD_VAR 0 1
37592: PUSH
37593: LD_EXP 146
37597: IN
37598: NOT
37599: IFFALSE 37603
// exit ;
37601: GO 37995
// index := GetElementIndex ( minersList , unit ) ;
37603: LD_ADDR_VAR 0 6
37607: PUSH
37608: LD_EXP 146
37612: PPUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL 43562 0 2
37622: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37623: LD_ADDR_VAR 0 5
37627: PUSH
37628: DOUBLE
37629: LD_EXP 147
37633: PUSH
37634: LD_VAR 0 6
37638: ARRAY
37639: INC
37640: ST_TO_ADDR
37641: LD_INT 1
37643: PUSH
37644: FOR_DOWNTO
37645: IFFALSE 37806
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37647: LD_EXP 147
37651: PUSH
37652: LD_VAR 0 6
37656: ARRAY
37657: PUSH
37658: LD_VAR 0 5
37662: ARRAY
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: PUSH
37668: LD_VAR 0 2
37672: EQUAL
37673: PUSH
37674: LD_EXP 147
37678: PUSH
37679: LD_VAR 0 6
37683: ARRAY
37684: PUSH
37685: LD_VAR 0 5
37689: ARRAY
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: PUSH
37695: LD_VAR 0 3
37699: EQUAL
37700: AND
37701: IFFALSE 37804
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37703: LD_EXP 147
37707: PUSH
37708: LD_VAR 0 6
37712: ARRAY
37713: PUSH
37714: LD_VAR 0 5
37718: ARRAY
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: PPUSH
37724: LD_EXP 147
37728: PUSH
37729: LD_VAR 0 6
37733: ARRAY
37734: PUSH
37735: LD_VAR 0 5
37739: ARRAY
37740: PUSH
37741: LD_INT 2
37743: ARRAY
37744: PPUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 255
37754: PPUSH
37755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37759: LD_ADDR_EXP 147
37763: PUSH
37764: LD_EXP 147
37768: PPUSH
37769: LD_VAR 0 6
37773: PPUSH
37774: LD_EXP 147
37778: PUSH
37779: LD_VAR 0 6
37783: ARRAY
37784: PPUSH
37785: LD_VAR 0 5
37789: PPUSH
37790: CALL_OW 3
37794: PPUSH
37795: CALL_OW 1
37799: ST_TO_ADDR
// exit ;
37800: POP
37801: POP
37802: GO 37995
// end ; end ;
37804: GO 37644
37806: POP
37807: POP
// for i := minerMinesList [ index ] downto 1 do
37808: LD_ADDR_VAR 0 5
37812: PUSH
37813: DOUBLE
37814: LD_EXP 147
37818: PUSH
37819: LD_VAR 0 6
37823: ARRAY
37824: INC
37825: ST_TO_ADDR
37826: LD_INT 1
37828: PUSH
37829: FOR_DOWNTO
37830: IFFALSE 37993
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37832: LD_EXP 147
37836: PUSH
37837: LD_VAR 0 6
37841: ARRAY
37842: PUSH
37843: LD_VAR 0 5
37847: ARRAY
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PPUSH
37853: LD_EXP 147
37857: PUSH
37858: LD_VAR 0 6
37862: ARRAY
37863: PUSH
37864: LD_VAR 0 5
37868: ARRAY
37869: PUSH
37870: LD_INT 2
37872: ARRAY
37873: PPUSH
37874: LD_VAR 0 2
37878: PPUSH
37879: LD_VAR 0 3
37883: PPUSH
37884: CALL_OW 298
37888: PUSH
37889: LD_INT 6
37891: LESS
37892: IFFALSE 37991
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37894: LD_EXP 147
37898: PUSH
37899: LD_VAR 0 6
37903: ARRAY
37904: PUSH
37905: LD_VAR 0 5
37909: ARRAY
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: LD_EXP 147
37919: PUSH
37920: LD_VAR 0 6
37924: ARRAY
37925: PUSH
37926: LD_VAR 0 5
37930: ARRAY
37931: PUSH
37932: LD_INT 2
37934: ARRAY
37935: PPUSH
37936: LD_VAR 0 1
37940: PPUSH
37941: CALL_OW 255
37945: PPUSH
37946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37950: LD_ADDR_EXP 147
37954: PUSH
37955: LD_EXP 147
37959: PPUSH
37960: LD_VAR 0 6
37964: PPUSH
37965: LD_EXP 147
37969: PUSH
37970: LD_VAR 0 6
37974: ARRAY
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 3
37985: PPUSH
37986: CALL_OW 1
37990: ST_TO_ADDR
// end ; end ;
37991: GO 37829
37993: POP
37994: POP
// end ;
37995: LD_VAR 0 4
37999: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38000: LD_INT 0
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38011: LD_VAR 0 1
38015: PPUSH
38016: CALL_OW 264
38020: PUSH
38021: LD_EXP 67
38025: EQUAL
38026: NOT
38027: PUSH
38028: LD_VAR 0 1
38032: PUSH
38033: LD_EXP 146
38037: IN
38038: NOT
38039: OR
38040: IFFALSE 38044
// exit ;
38042: GO 38366
// index := GetElementIndex ( minersList , unit ) ;
38044: LD_ADDR_VAR 0 6
38048: PUSH
38049: LD_EXP 146
38053: PPUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: CALL 43562 0 2
38063: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38064: LD_ADDR_VAR 0 8
38068: PUSH
38069: LD_EXP 148
38073: PUSH
38074: LD_EXP 147
38078: PUSH
38079: LD_VAR 0 6
38083: ARRAY
38084: MINUS
38085: ST_TO_ADDR
// if not minesFreeAmount then
38086: LD_VAR 0 8
38090: NOT
38091: IFFALSE 38095
// exit ;
38093: GO 38366
// tmp := [ ] ;
38095: LD_ADDR_VAR 0 7
38099: PUSH
38100: EMPTY
38101: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: DOUBLE
38108: LD_INT 1
38110: DEC
38111: ST_TO_ADDR
38112: LD_VAR 0 8
38116: PUSH
38117: FOR_TO
38118: IFFALSE 38313
// begin _d := rand ( 0 , 5 ) ;
38120: LD_ADDR_VAR 0 11
38124: PUSH
38125: LD_INT 0
38127: PPUSH
38128: LD_INT 5
38130: PPUSH
38131: CALL_OW 12
38135: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38136: LD_ADDR_VAR 0 12
38140: PUSH
38141: LD_INT 2
38143: PPUSH
38144: LD_INT 6
38146: PPUSH
38147: CALL_OW 12
38151: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38152: LD_ADDR_VAR 0 9
38156: PUSH
38157: LD_VAR 0 2
38161: PPUSH
38162: LD_VAR 0 11
38166: PPUSH
38167: LD_VAR 0 12
38171: PPUSH
38172: CALL_OW 272
38176: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38177: LD_ADDR_VAR 0 10
38181: PUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: LD_VAR 0 11
38191: PPUSH
38192: LD_VAR 0 12
38196: PPUSH
38197: CALL_OW 273
38201: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38202: LD_VAR 0 9
38206: PPUSH
38207: LD_VAR 0 10
38211: PPUSH
38212: CALL_OW 488
38216: PUSH
38217: LD_VAR 0 9
38221: PUSH
38222: LD_VAR 0 10
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_VAR 0 7
38235: IN
38236: NOT
38237: AND
38238: PUSH
38239: LD_VAR 0 9
38243: PPUSH
38244: LD_VAR 0 10
38248: PPUSH
38249: CALL_OW 458
38253: NOT
38254: AND
38255: IFFALSE 38297
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38257: LD_ADDR_VAR 0 7
38261: PUSH
38262: LD_VAR 0 7
38266: PPUSH
38267: LD_VAR 0 7
38271: PUSH
38272: LD_INT 1
38274: PLUS
38275: PPUSH
38276: LD_VAR 0 9
38280: PUSH
38281: LD_VAR 0 10
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PPUSH
38290: CALL_OW 1
38294: ST_TO_ADDR
38295: GO 38311
// i := i - 1 ;
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_VAR 0 5
38306: PUSH
38307: LD_INT 1
38309: MINUS
38310: ST_TO_ADDR
// end ;
38311: GO 38117
38313: POP
38314: POP
// for i in tmp do
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 7
38324: PUSH
38325: FOR_IN
38326: IFFALSE 38364
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38328: LD_VAR 0 1
38332: PPUSH
38333: LD_VAR 0 5
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: LD_VAR 0 5
38346: PUSH
38347: LD_INT 2
38349: ARRAY
38350: PPUSH
38351: CALL 37306 0 3
38355: NOT
38356: IFFALSE 38362
// exit ;
38358: POP
38359: POP
38360: GO 38366
38362: GO 38325
38364: POP
38365: POP
// end ;
38366: LD_VAR 0 4
38370: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38371: LD_INT 0
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
// if not GetClass ( unit ) = class_sniper then
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 257
38389: PUSH
38390: LD_INT 5
38392: EQUAL
38393: NOT
38394: IFFALSE 38398
// exit ;
38396: GO 38786
// dist := 8 ;
38398: LD_ADDR_VAR 0 5
38402: PUSH
38403: LD_INT 8
38405: ST_TO_ADDR
// viewRange := 12 ;
38406: LD_ADDR_VAR 0 7
38410: PUSH
38411: LD_INT 12
38413: ST_TO_ADDR
// side := GetSide ( unit ) ;
38414: LD_ADDR_VAR 0 6
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 255
38428: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38429: LD_INT 61
38431: PPUSH
38432: LD_VAR 0 6
38436: PPUSH
38437: CALL_OW 321
38441: PUSH
38442: LD_INT 2
38444: EQUAL
38445: IFFALSE 38455
// viewRange := 16 ;
38447: LD_ADDR_VAR 0 7
38451: PUSH
38452: LD_INT 16
38454: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38455: LD_VAR 0 1
38459: PPUSH
38460: LD_VAR 0 2
38464: PPUSH
38465: LD_VAR 0 3
38469: PPUSH
38470: CALL_OW 297
38474: PUSH
38475: LD_VAR 0 5
38479: GREATER
38480: IFFALSE 38559
// begin ComMoveXY ( unit , x , y ) ;
38482: LD_VAR 0 1
38486: PPUSH
38487: LD_VAR 0 2
38491: PPUSH
38492: LD_VAR 0 3
38496: PPUSH
38497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38501: LD_INT 35
38503: PPUSH
38504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38508: LD_VAR 0 1
38512: PPUSH
38513: LD_VAR 0 2
38517: PPUSH
38518: LD_VAR 0 3
38522: PPUSH
38523: CALL 74281 0 3
38527: NOT
38528: IFFALSE 38532
// exit ;
38530: GO 38786
// until GetDistUnitXY ( unit , x , y ) < dist ;
38532: LD_VAR 0 1
38536: PPUSH
38537: LD_VAR 0 2
38541: PPUSH
38542: LD_VAR 0 3
38546: PPUSH
38547: CALL_OW 297
38551: PUSH
38552: LD_VAR 0 5
38556: LESS
38557: IFFALSE 38501
// end ; ComTurnXY ( unit , x , y ) ;
38559: LD_VAR 0 1
38563: PPUSH
38564: LD_VAR 0 2
38568: PPUSH
38569: LD_VAR 0 3
38573: PPUSH
38574: CALL_OW 118
// wait ( 5 ) ;
38578: LD_INT 5
38580: PPUSH
38581: CALL_OW 67
// _d := GetDir ( unit ) ;
38585: LD_ADDR_VAR 0 10
38589: PUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 254
38599: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38600: LD_ADDR_VAR 0 8
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 250
38614: PPUSH
38615: LD_VAR 0 10
38619: PPUSH
38620: LD_VAR 0 5
38624: PPUSH
38625: CALL_OW 272
38629: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38630: LD_ADDR_VAR 0 9
38634: PUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 251
38644: PPUSH
38645: LD_VAR 0 10
38649: PPUSH
38650: LD_VAR 0 5
38654: PPUSH
38655: CALL_OW 273
38659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38660: LD_VAR 0 8
38664: PPUSH
38665: LD_VAR 0 9
38669: PPUSH
38670: CALL_OW 488
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 38786
// ComAnimCustom ( unit , 1 ) ;
38679: LD_VAR 0 1
38683: PPUSH
38684: LD_INT 1
38686: PPUSH
38687: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38691: LD_VAR 0 8
38695: PPUSH
38696: LD_VAR 0 9
38700: PPUSH
38701: LD_VAR 0 6
38705: PPUSH
38706: LD_VAR 0 7
38710: PPUSH
38711: CALL_OW 330
// repeat wait ( 1 ) ;
38715: LD_INT 1
38717: PPUSH
38718: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38722: LD_VAR 0 1
38726: PPUSH
38727: CALL_OW 316
38731: PUSH
38732: LD_VAR 0 1
38736: PPUSH
38737: CALL_OW 314
38741: OR
38742: PUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: CALL_OW 302
38752: NOT
38753: OR
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 301
38764: OR
38765: IFFALSE 38715
// RemoveSeeing ( _x , _y , side ) ;
38767: LD_VAR 0 8
38771: PPUSH
38772: LD_VAR 0 9
38776: PPUSH
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 331
// end ; end_of_file
38786: LD_VAR 0 4
38790: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
// if exist_mode then
38795: LD_VAR 0 2
38799: IFFALSE 38824
// unit := CreateCharacter ( prefix & ident ) else
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 3
38810: PUSH
38811: LD_VAR 0 1
38815: STR
38816: PPUSH
38817: CALL_OW 34
38821: ST_TO_ADDR
38822: GO 38839
// unit := NewCharacter ( ident ) ;
38824: LD_ADDR_VAR 0 5
38828: PUSH
38829: LD_VAR 0 1
38833: PPUSH
38834: CALL_OW 25
38838: ST_TO_ADDR
// result := unit ;
38839: LD_ADDR_VAR 0 4
38843: PUSH
38844: LD_VAR 0 5
38848: ST_TO_ADDR
// end ;
38849: LD_VAR 0 4
38853: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38854: LD_INT 0
38856: PPUSH
38857: PPUSH
// if not side or not nation then
38858: LD_VAR 0 1
38862: NOT
38863: PUSH
38864: LD_VAR 0 2
38868: NOT
38869: OR
38870: IFFALSE 38874
// exit ;
38872: GO 39642
// case nation of nation_american :
38874: LD_VAR 0 2
38878: PUSH
38879: LD_INT 1
38881: DOUBLE
38882: EQUAL
38883: IFTRUE 38887
38885: GO 39101
38887: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38888: LD_ADDR_VAR 0 4
38892: PUSH
38893: LD_INT 35
38895: PUSH
38896: LD_INT 45
38898: PUSH
38899: LD_INT 46
38901: PUSH
38902: LD_INT 47
38904: PUSH
38905: LD_INT 82
38907: PUSH
38908: LD_INT 83
38910: PUSH
38911: LD_INT 84
38913: PUSH
38914: LD_INT 85
38916: PUSH
38917: LD_INT 86
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 6
38928: PUSH
38929: LD_INT 15
38931: PUSH
38932: LD_INT 16
38934: PUSH
38935: LD_INT 7
38937: PUSH
38938: LD_INT 12
38940: PUSH
38941: LD_INT 13
38943: PUSH
38944: LD_INT 10
38946: PUSH
38947: LD_INT 14
38949: PUSH
38950: LD_INT 20
38952: PUSH
38953: LD_INT 21
38955: PUSH
38956: LD_INT 22
38958: PUSH
38959: LD_INT 25
38961: PUSH
38962: LD_INT 32
38964: PUSH
38965: LD_INT 27
38967: PUSH
38968: LD_INT 36
38970: PUSH
38971: LD_INT 69
38973: PUSH
38974: LD_INT 39
38976: PUSH
38977: LD_INT 34
38979: PUSH
38980: LD_INT 40
38982: PUSH
38983: LD_INT 48
38985: PUSH
38986: LD_INT 49
38988: PUSH
38989: LD_INT 50
38991: PUSH
38992: LD_INT 51
38994: PUSH
38995: LD_INT 52
38997: PUSH
38998: LD_INT 53
39000: PUSH
39001: LD_INT 54
39003: PUSH
39004: LD_INT 55
39006: PUSH
39007: LD_INT 56
39009: PUSH
39010: LD_INT 57
39012: PUSH
39013: LD_INT 58
39015: PUSH
39016: LD_INT 59
39018: PUSH
39019: LD_INT 60
39021: PUSH
39022: LD_INT 61
39024: PUSH
39025: LD_INT 62
39027: PUSH
39028: LD_INT 80
39030: PUSH
39031: LD_INT 82
39033: PUSH
39034: LD_INT 83
39036: PUSH
39037: LD_INT 84
39039: PUSH
39040: LD_INT 85
39042: PUSH
39043: LD_INT 86
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
39099: GO 39566
39101: LD_INT 2
39103: DOUBLE
39104: EQUAL
39105: IFTRUE 39109
39107: GO 39335
39109: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39110: LD_ADDR_VAR 0 4
39114: PUSH
39115: LD_INT 35
39117: PUSH
39118: LD_INT 45
39120: PUSH
39121: LD_INT 46
39123: PUSH
39124: LD_INT 47
39126: PUSH
39127: LD_INT 82
39129: PUSH
39130: LD_INT 83
39132: PUSH
39133: LD_INT 84
39135: PUSH
39136: LD_INT 85
39138: PUSH
39139: LD_INT 87
39141: PUSH
39142: LD_INT 70
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: LD_INT 11
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: LD_INT 4
39156: PUSH
39157: LD_INT 5
39159: PUSH
39160: LD_INT 6
39162: PUSH
39163: LD_INT 15
39165: PUSH
39166: LD_INT 18
39168: PUSH
39169: LD_INT 7
39171: PUSH
39172: LD_INT 17
39174: PUSH
39175: LD_INT 8
39177: PUSH
39178: LD_INT 20
39180: PUSH
39181: LD_INT 21
39183: PUSH
39184: LD_INT 22
39186: PUSH
39187: LD_INT 72
39189: PUSH
39190: LD_INT 26
39192: PUSH
39193: LD_INT 69
39195: PUSH
39196: LD_INT 39
39198: PUSH
39199: LD_INT 40
39201: PUSH
39202: LD_INT 41
39204: PUSH
39205: LD_INT 42
39207: PUSH
39208: LD_INT 43
39210: PUSH
39211: LD_INT 48
39213: PUSH
39214: LD_INT 49
39216: PUSH
39217: LD_INT 50
39219: PUSH
39220: LD_INT 51
39222: PUSH
39223: LD_INT 52
39225: PUSH
39226: LD_INT 53
39228: PUSH
39229: LD_INT 54
39231: PUSH
39232: LD_INT 55
39234: PUSH
39235: LD_INT 56
39237: PUSH
39238: LD_INT 60
39240: PUSH
39241: LD_INT 61
39243: PUSH
39244: LD_INT 62
39246: PUSH
39247: LD_INT 66
39249: PUSH
39250: LD_INT 67
39252: PUSH
39253: LD_INT 68
39255: PUSH
39256: LD_INT 81
39258: PUSH
39259: LD_INT 82
39261: PUSH
39262: LD_INT 83
39264: PUSH
39265: LD_INT 84
39267: PUSH
39268: LD_INT 85
39270: PUSH
39271: LD_INT 87
39273: PUSH
39274: LD_INT 88
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
39333: GO 39566
39335: LD_INT 3
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39565
39343: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39344: LD_ADDR_VAR 0 4
39348: PUSH
39349: LD_INT 46
39351: PUSH
39352: LD_INT 47
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: LD_INT 82
39363: PUSH
39364: LD_INT 83
39366: PUSH
39367: LD_INT 84
39369: PUSH
39370: LD_INT 85
39372: PUSH
39373: LD_INT 86
39375: PUSH
39376: LD_INT 11
39378: PUSH
39379: LD_INT 9
39381: PUSH
39382: LD_INT 20
39384: PUSH
39385: LD_INT 19
39387: PUSH
39388: LD_INT 21
39390: PUSH
39391: LD_INT 24
39393: PUSH
39394: LD_INT 22
39396: PUSH
39397: LD_INT 25
39399: PUSH
39400: LD_INT 28
39402: PUSH
39403: LD_INT 29
39405: PUSH
39406: LD_INT 30
39408: PUSH
39409: LD_INT 31
39411: PUSH
39412: LD_INT 37
39414: PUSH
39415: LD_INT 38
39417: PUSH
39418: LD_INT 32
39420: PUSH
39421: LD_INT 27
39423: PUSH
39424: LD_INT 33
39426: PUSH
39427: LD_INT 69
39429: PUSH
39430: LD_INT 39
39432: PUSH
39433: LD_INT 34
39435: PUSH
39436: LD_INT 40
39438: PUSH
39439: LD_INT 71
39441: PUSH
39442: LD_INT 23
39444: PUSH
39445: LD_INT 44
39447: PUSH
39448: LD_INT 48
39450: PUSH
39451: LD_INT 49
39453: PUSH
39454: LD_INT 50
39456: PUSH
39457: LD_INT 51
39459: PUSH
39460: LD_INT 52
39462: PUSH
39463: LD_INT 53
39465: PUSH
39466: LD_INT 54
39468: PUSH
39469: LD_INT 55
39471: PUSH
39472: LD_INT 56
39474: PUSH
39475: LD_INT 57
39477: PUSH
39478: LD_INT 58
39480: PUSH
39481: LD_INT 59
39483: PUSH
39484: LD_INT 63
39486: PUSH
39487: LD_INT 64
39489: PUSH
39490: LD_INT 65
39492: PUSH
39493: LD_INT 82
39495: PUSH
39496: LD_INT 83
39498: PUSH
39499: LD_INT 84
39501: PUSH
39502: LD_INT 85
39504: PUSH
39505: LD_INT 86
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: ST_TO_ADDR
39563: GO 39566
39565: POP
// if state > - 1 and state < 3 then
39566: LD_VAR 0 3
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: GREATER
39575: PUSH
39576: LD_VAR 0 3
39580: PUSH
39581: LD_INT 3
39583: LESS
39584: AND
39585: IFFALSE 39642
// for i in result do
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: LD_VAR 0 4
39596: PUSH
39597: FOR_IN
39598: IFFALSE 39640
// if GetTech ( i , side ) <> state then
39600: LD_VAR 0 5
39604: PPUSH
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 321
39614: PUSH
39615: LD_VAR 0 3
39619: NONEQUAL
39620: IFFALSE 39638
// result := result diff i ;
39622: LD_ADDR_VAR 0 4
39626: PUSH
39627: LD_VAR 0 4
39631: PUSH
39632: LD_VAR 0 5
39636: DIFF
39637: ST_TO_ADDR
39638: GO 39597
39640: POP
39641: POP
// end ;
39642: LD_VAR 0 4
39646: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39647: LD_INT 0
39649: PPUSH
39650: PPUSH
39651: PPUSH
// result := true ;
39652: LD_ADDR_VAR 0 3
39656: PUSH
39657: LD_INT 1
39659: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: CALL_OW 480
39674: ST_TO_ADDR
// if not tmp then
39675: LD_VAR 0 5
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 39733
// for i in tmp do
39684: LD_ADDR_VAR 0 4
39688: PUSH
39689: LD_VAR 0 5
39693: PUSH
39694: FOR_IN
39695: IFFALSE 39731
// if GetTech ( i , side ) <> state_researched then
39697: LD_VAR 0 4
39701: PPUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 321
39711: PUSH
39712: LD_INT 2
39714: NONEQUAL
39715: IFFALSE 39729
// begin result := false ;
39717: LD_ADDR_VAR 0 3
39721: PUSH
39722: LD_INT 0
39724: ST_TO_ADDR
// exit ;
39725: POP
39726: POP
39727: GO 39733
// end ;
39729: GO 39694
39731: POP
39732: POP
// end ;
39733: LD_VAR 0 3
39737: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39738: LD_INT 0
39740: PPUSH
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39753: LD_VAR 0 1
39757: NOT
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 257
39768: PUSH
39769: LD_INT 9
39771: NONEQUAL
39772: OR
39773: IFFALSE 39777
// exit ;
39775: GO 40350
// side := GetSide ( unit ) ;
39777: LD_ADDR_VAR 0 9
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 255
39791: ST_TO_ADDR
// tech_space := tech_spacanom ;
39792: LD_ADDR_VAR 0 12
39796: PUSH
39797: LD_INT 29
39799: ST_TO_ADDR
// tech_time := tech_taurad ;
39800: LD_ADDR_VAR 0 13
39804: PUSH
39805: LD_INT 28
39807: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39808: LD_ADDR_VAR 0 11
39812: PUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 310
39822: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39823: LD_VAR 0 11
39827: PPUSH
39828: CALL_OW 247
39832: PUSH
39833: LD_INT 2
39835: EQUAL
39836: IFFALSE 39840
// exit ;
39838: GO 40350
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39840: LD_ADDR_VAR 0 8
39844: PUSH
39845: LD_INT 81
39847: PUSH
39848: LD_VAR 0 9
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: LD_INT 21
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PPUSH
39878: CALL_OW 69
39882: ST_TO_ADDR
// if not tmp then
39883: LD_VAR 0 8
39887: NOT
39888: IFFALSE 39892
// exit ;
39890: GO 40350
// if in_unit then
39892: LD_VAR 0 11
39896: IFFALSE 39920
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39898: LD_ADDR_VAR 0 10
39902: PUSH
39903: LD_VAR 0 8
39907: PPUSH
39908: LD_VAR 0 11
39912: PPUSH
39913: CALL_OW 74
39917: ST_TO_ADDR
39918: GO 39940
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39920: LD_ADDR_VAR 0 10
39924: PUSH
39925: LD_VAR 0 8
39929: PPUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 74
39939: ST_TO_ADDR
// if not enemy then
39940: LD_VAR 0 10
39944: NOT
39945: IFFALSE 39949
// exit ;
39947: GO 40350
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39949: LD_VAR 0 11
39953: PUSH
39954: LD_VAR 0 11
39958: PPUSH
39959: LD_VAR 0 10
39963: PPUSH
39964: CALL_OW 296
39968: PUSH
39969: LD_INT 13
39971: GREATER
39972: AND
39973: PUSH
39974: LD_VAR 0 1
39978: PPUSH
39979: LD_VAR 0 10
39983: PPUSH
39984: CALL_OW 296
39988: PUSH
39989: LD_INT 12
39991: GREATER
39992: OR
39993: IFFALSE 39997
// exit ;
39995: GO 40350
// missile := [ 1 ] ;
39997: LD_ADDR_VAR 0 14
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40008: LD_VAR 0 9
40012: PPUSH
40013: LD_VAR 0 12
40017: PPUSH
40018: CALL_OW 325
40022: IFFALSE 40051
// missile := Replace ( missile , missile + 1 , 2 ) ;
40024: LD_ADDR_VAR 0 14
40028: PUSH
40029: LD_VAR 0 14
40033: PPUSH
40034: LD_VAR 0 14
40038: PUSH
40039: LD_INT 1
40041: PLUS
40042: PPUSH
40043: LD_INT 2
40045: PPUSH
40046: CALL_OW 1
40050: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40051: LD_VAR 0 9
40055: PPUSH
40056: LD_VAR 0 13
40060: PPUSH
40061: CALL_OW 325
40065: PUSH
40066: LD_VAR 0 10
40070: PPUSH
40071: CALL_OW 255
40075: PPUSH
40076: LD_VAR 0 13
40080: PPUSH
40081: CALL_OW 325
40085: NOT
40086: AND
40087: IFFALSE 40116
// missile := Replace ( missile , missile + 1 , 3 ) ;
40089: LD_ADDR_VAR 0 14
40093: PUSH
40094: LD_VAR 0 14
40098: PPUSH
40099: LD_VAR 0 14
40103: PUSH
40104: LD_INT 1
40106: PLUS
40107: PPUSH
40108: LD_INT 3
40110: PPUSH
40111: CALL_OW 1
40115: ST_TO_ADDR
// if missile < 2 then
40116: LD_VAR 0 14
40120: PUSH
40121: LD_INT 2
40123: LESS
40124: IFFALSE 40128
// exit ;
40126: GO 40350
// x := GetX ( enemy ) ;
40128: LD_ADDR_VAR 0 4
40132: PUSH
40133: LD_VAR 0 10
40137: PPUSH
40138: CALL_OW 250
40142: ST_TO_ADDR
// y := GetY ( enemy ) ;
40143: LD_ADDR_VAR 0 5
40147: PUSH
40148: LD_VAR 0 10
40152: PPUSH
40153: CALL_OW 251
40157: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40158: LD_ADDR_VAR 0 6
40162: PUSH
40163: LD_VAR 0 4
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PPUSH
40172: LD_INT 1
40174: PPUSH
40175: CALL_OW 12
40179: PLUS
40180: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40181: LD_ADDR_VAR 0 7
40185: PUSH
40186: LD_VAR 0 5
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PPUSH
40195: LD_INT 1
40197: PPUSH
40198: CALL_OW 12
40202: PLUS
40203: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40204: LD_VAR 0 6
40208: PPUSH
40209: LD_VAR 0 7
40213: PPUSH
40214: CALL_OW 488
40218: NOT
40219: IFFALSE 40241
// begin _x := x ;
40221: LD_ADDR_VAR 0 6
40225: PUSH
40226: LD_VAR 0 4
40230: ST_TO_ADDR
// _y := y ;
40231: LD_ADDR_VAR 0 7
40235: PUSH
40236: LD_VAR 0 5
40240: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_INT 1
40248: PPUSH
40249: LD_VAR 0 14
40253: PPUSH
40254: CALL_OW 12
40258: ST_TO_ADDR
// case i of 1 :
40259: LD_VAR 0 3
40263: PUSH
40264: LD_INT 1
40266: DOUBLE
40267: EQUAL
40268: IFTRUE 40272
40270: GO 40289
40272: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40273: LD_VAR 0 1
40277: PPUSH
40278: LD_VAR 0 10
40282: PPUSH
40283: CALL_OW 115
40287: GO 40350
40289: LD_INT 2
40291: DOUBLE
40292: EQUAL
40293: IFTRUE 40297
40295: GO 40319
40297: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_VAR 0 6
40307: PPUSH
40308: LD_VAR 0 7
40312: PPUSH
40313: CALL_OW 153
40317: GO 40350
40319: LD_INT 3
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40349
40327: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40328: LD_VAR 0 1
40332: PPUSH
40333: LD_VAR 0 6
40337: PPUSH
40338: LD_VAR 0 7
40342: PPUSH
40343: CALL_OW 154
40347: GO 40350
40349: POP
// end ;
40350: LD_VAR 0 2
40354: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40355: LD_INT 0
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
// if not unit or not building then
40363: LD_VAR 0 1
40367: NOT
40368: PUSH
40369: LD_VAR 0 2
40373: NOT
40374: OR
40375: IFFALSE 40379
// exit ;
40377: GO 40537
// x := GetX ( building ) ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 2
40388: PPUSH
40389: CALL_OW 250
40393: ST_TO_ADDR
// y := GetY ( building ) ;
40394: LD_ADDR_VAR 0 6
40398: PUSH
40399: LD_VAR 0 2
40403: PPUSH
40404: CALL_OW 251
40408: ST_TO_ADDR
// for i = 0 to 5 do
40409: LD_ADDR_VAR 0 4
40413: PUSH
40414: DOUBLE
40415: LD_INT 0
40417: DEC
40418: ST_TO_ADDR
40419: LD_INT 5
40421: PUSH
40422: FOR_TO
40423: IFFALSE 40535
// begin _x := ShiftX ( x , i , 3 ) ;
40425: LD_ADDR_VAR 0 7
40429: PUSH
40430: LD_VAR 0 5
40434: PPUSH
40435: LD_VAR 0 4
40439: PPUSH
40440: LD_INT 3
40442: PPUSH
40443: CALL_OW 272
40447: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40448: LD_ADDR_VAR 0 8
40452: PUSH
40453: LD_VAR 0 6
40457: PPUSH
40458: LD_VAR 0 4
40462: PPUSH
40463: LD_INT 3
40465: PPUSH
40466: CALL_OW 273
40470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40471: LD_VAR 0 7
40475: PPUSH
40476: LD_VAR 0 8
40480: PPUSH
40481: CALL_OW 488
40485: NOT
40486: IFFALSE 40490
// continue ;
40488: GO 40422
// if HexInfo ( _x , _y ) = 0 then
40490: LD_VAR 0 7
40494: PPUSH
40495: LD_VAR 0 8
40499: PPUSH
40500: CALL_OW 428
40504: PUSH
40505: LD_INT 0
40507: EQUAL
40508: IFFALSE 40533
// begin ComMoveXY ( unit , _x , _y ) ;
40510: LD_VAR 0 1
40514: PPUSH
40515: LD_VAR 0 7
40519: PPUSH
40520: LD_VAR 0 8
40524: PPUSH
40525: CALL_OW 111
// exit ;
40529: POP
40530: POP
40531: GO 40537
// end ; end ;
40533: GO 40422
40535: POP
40536: POP
// end ;
40537: LD_VAR 0 3
40541: RET
// export function ScanBase ( side , base_area ) ; begin
40542: LD_INT 0
40544: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40545: LD_ADDR_VAR 0 3
40549: PUSH
40550: LD_VAR 0 2
40554: PPUSH
40555: LD_INT 81
40557: PUSH
40558: LD_VAR 0 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PPUSH
40567: CALL_OW 70
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
// result := false ;
40583: LD_ADDR_VAR 0 2
40587: PUSH
40588: LD_INT 0
40590: ST_TO_ADDR
// side := GetSide ( unit ) ;
40591: LD_ADDR_VAR 0 3
40595: PUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 255
40605: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40606: LD_ADDR_VAR 0 4
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 248
40620: ST_TO_ADDR
// case nat of 1 :
40621: LD_VAR 0 4
40625: PUSH
40626: LD_INT 1
40628: DOUBLE
40629: EQUAL
40630: IFTRUE 40634
40632: GO 40645
40634: POP
// tech := tech_lassight ; 2 :
40635: LD_ADDR_VAR 0 5
40639: PUSH
40640: LD_INT 12
40642: ST_TO_ADDR
40643: GO 40684
40645: LD_INT 2
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40653
40651: GO 40664
40653: POP
// tech := tech_mortar ; 3 :
40654: LD_ADDR_VAR 0 5
40658: PUSH
40659: LD_INT 41
40661: ST_TO_ADDR
40662: GO 40684
40664: LD_INT 3
40666: DOUBLE
40667: EQUAL
40668: IFTRUE 40672
40670: GO 40683
40672: POP
// tech := tech_bazooka ; end ;
40673: LD_ADDR_VAR 0 5
40677: PUSH
40678: LD_INT 44
40680: ST_TO_ADDR
40681: GO 40684
40683: POP
// if Researched ( side , tech ) then
40684: LD_VAR 0 3
40688: PPUSH
40689: LD_VAR 0 5
40693: PPUSH
40694: CALL_OW 325
40698: IFFALSE 40725
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40700: LD_ADDR_VAR 0 2
40704: PUSH
40705: LD_INT 5
40707: PUSH
40708: LD_INT 8
40710: PUSH
40711: LD_INT 9
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: PUSH
40719: LD_VAR 0 4
40723: ARRAY
40724: ST_TO_ADDR
// end ;
40725: LD_VAR 0 2
40729: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40730: LD_INT 0
40732: PPUSH
40733: PPUSH
40734: PPUSH
// if not mines then
40735: LD_VAR 0 2
40739: NOT
40740: IFFALSE 40744
// exit ;
40742: GO 40888
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: LD_INT 81
40751: PUSH
40752: LD_VAR 0 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: LD_INT 21
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PPUSH
40782: CALL_OW 69
40786: ST_TO_ADDR
// for i in mines do
40787: LD_ADDR_VAR 0 4
40791: PUSH
40792: LD_VAR 0 2
40796: PUSH
40797: FOR_IN
40798: IFFALSE 40886
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40800: LD_VAR 0 4
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: PPUSH
40809: LD_VAR 0 4
40813: PUSH
40814: LD_INT 2
40816: ARRAY
40817: PPUSH
40818: CALL_OW 458
40822: NOT
40823: IFFALSE 40827
// continue ;
40825: GO 40797
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: ARRAY
40835: PPUSH
40836: LD_VAR 0 4
40840: PUSH
40841: LD_INT 2
40843: ARRAY
40844: PPUSH
40845: CALL_OW 428
40849: PUSH
40850: LD_VAR 0 5
40854: IN
40855: IFFALSE 40884
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40857: LD_VAR 0 4
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PPUSH
40866: LD_VAR 0 4
40870: PUSH
40871: LD_INT 2
40873: ARRAY
40874: PPUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 456
// end ;
40884: GO 40797
40886: POP
40887: POP
// end ;
40888: LD_VAR 0 3
40892: RET
// export function Count ( array ) ; var i ; begin
40893: LD_INT 0
40895: PPUSH
40896: PPUSH
// result := 0 ;
40897: LD_ADDR_VAR 0 2
40901: PUSH
40902: LD_INT 0
40904: ST_TO_ADDR
// for i in array do
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_VAR 0 1
40914: PUSH
40915: FOR_IN
40916: IFFALSE 40940
// if i then
40918: LD_VAR 0 3
40922: IFFALSE 40938
// result := result + 1 ;
40924: LD_ADDR_VAR 0 2
40928: PUSH
40929: LD_VAR 0 2
40933: PUSH
40934: LD_INT 1
40936: PLUS
40937: ST_TO_ADDR
40938: GO 40915
40940: POP
40941: POP
// end ;
40942: LD_VAR 0 2
40946: RET
// export function IsEmpty ( building ) ; begin
40947: LD_INT 0
40949: PPUSH
// if not building then
40950: LD_VAR 0 1
40954: NOT
40955: IFFALSE 40959
// exit ;
40957: GO 41002
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40959: LD_ADDR_VAR 0 2
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_INT 22
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 255
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 58
40988: PUSH
40989: EMPTY
40990: LIST
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PPUSH
40996: CALL_OW 69
41000: IN
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 2
41006: RET
// export function IsNotFull ( building ) ; begin
41007: LD_INT 0
41009: PPUSH
// if not building then
41010: LD_VAR 0 1
41014: NOT
41015: IFFALSE 41019
// exit ;
41017: GO 41038
// result := UnitsInside ( building ) < 6 ;
41019: LD_ADDR_VAR 0 2
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 313
41033: PUSH
41034: LD_INT 6
41036: LESS
41037: ST_TO_ADDR
// end ;
41038: LD_VAR 0 2
41042: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41043: LD_INT 0
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
// tmp := [ ] ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: EMPTY
41055: ST_TO_ADDR
// list := [ ] ;
41056: LD_ADDR_VAR 0 5
41060: PUSH
41061: EMPTY
41062: ST_TO_ADDR
// for i = 16 to 25 do
41063: LD_ADDR_VAR 0 4
41067: PUSH
41068: DOUBLE
41069: LD_INT 16
41071: DEC
41072: ST_TO_ADDR
41073: LD_INT 25
41075: PUSH
41076: FOR_TO
41077: IFFALSE 41150
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_VAR 0 3
41088: PUSH
41089: LD_INT 22
41091: PUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 255
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 91
41108: PUSH
41109: LD_VAR 0 1
41113: PUSH
41114: LD_INT 6
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: LD_VAR 0 4
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: PPUSH
41142: CALL_OW 69
41146: ADD
41147: ST_TO_ADDR
41148: GO 41076
41150: POP
41151: POP
// for i = 1 to tmp do
41152: LD_ADDR_VAR 0 4
41156: PUSH
41157: DOUBLE
41158: LD_INT 1
41160: DEC
41161: ST_TO_ADDR
41162: LD_VAR 0 3
41166: PUSH
41167: FOR_TO
41168: IFFALSE 41256
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41170: LD_ADDR_VAR 0 5
41174: PUSH
41175: LD_VAR 0 5
41179: PUSH
41180: LD_VAR 0 3
41184: PUSH
41185: LD_VAR 0 4
41189: ARRAY
41190: PPUSH
41191: CALL_OW 266
41195: PUSH
41196: LD_VAR 0 3
41200: PUSH
41201: LD_VAR 0 4
41205: ARRAY
41206: PPUSH
41207: CALL_OW 250
41211: PUSH
41212: LD_VAR 0 3
41216: PUSH
41217: LD_VAR 0 4
41221: ARRAY
41222: PPUSH
41223: CALL_OW 251
41227: PUSH
41228: LD_VAR 0 3
41232: PUSH
41233: LD_VAR 0 4
41237: ARRAY
41238: PPUSH
41239: CALL_OW 254
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: ADD
41253: ST_TO_ADDR
41254: GO 41167
41256: POP
41257: POP
// result := list ;
41258: LD_ADDR_VAR 0 2
41262: PUSH
41263: LD_VAR 0 5
41267: ST_TO_ADDR
// end ;
41268: LD_VAR 0 2
41272: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41273: LD_INT 0
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
// if not factory then
41282: LD_VAR 0 1
41286: NOT
41287: IFFALSE 41291
// exit ;
41289: GO 41884
// if control = control_apeman then
41291: LD_VAR 0 4
41295: PUSH
41296: LD_INT 5
41298: EQUAL
41299: IFFALSE 41408
// begin tmp := UnitsInside ( factory ) ;
41301: LD_ADDR_VAR 0 8
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 313
41315: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41316: LD_VAR 0 8
41320: PPUSH
41321: LD_INT 25
41323: PUSH
41324: LD_INT 12
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PPUSH
41331: CALL_OW 72
41335: NOT
41336: IFFALSE 41346
// control := control_manual ;
41338: LD_ADDR_VAR 0 4
41342: PUSH
41343: LD_INT 1
41345: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41346: LD_ADDR_VAR 0 8
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL 41043 0 1
41360: ST_TO_ADDR
// if tmp then
41361: LD_VAR 0 8
41365: IFFALSE 41408
// begin for i in tmp do
41367: LD_ADDR_VAR 0 7
41371: PUSH
41372: LD_VAR 0 8
41376: PUSH
41377: FOR_IN
41378: IFFALSE 41406
// if i [ 1 ] = b_ext_radio then
41380: LD_VAR 0 7
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PUSH
41389: LD_INT 22
41391: EQUAL
41392: IFFALSE 41404
// begin control := control_remote ;
41394: LD_ADDR_VAR 0 4
41398: PUSH
41399: LD_INT 2
41401: ST_TO_ADDR
// break ;
41402: GO 41406
// end ;
41404: GO 41377
41406: POP
41407: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41408: LD_VAR 0 1
41412: PPUSH
41413: LD_VAR 0 2
41417: PPUSH
41418: LD_VAR 0 3
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: LD_VAR 0 5
41432: PPUSH
41433: CALL_OW 448
41437: IFFALSE 41472
// begin result := [ chassis , engine , control , weapon ] ;
41439: LD_ADDR_VAR 0 6
41443: PUSH
41444: LD_VAR 0 2
41448: PUSH
41449: LD_VAR 0 3
41453: PUSH
41454: LD_VAR 0 4
41458: PUSH
41459: LD_VAR 0 5
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// exit ;
41470: GO 41884
// end ; _chassis := AvailableChassisList ( factory ) ;
41472: LD_ADDR_VAR 0 9
41476: PUSH
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 475
41486: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41487: LD_ADDR_VAR 0 11
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 476
41501: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41502: LD_ADDR_VAR 0 12
41506: PUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 477
41516: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41517: LD_ADDR_VAR 0 10
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: CALL_OW 478
41531: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41532: LD_VAR 0 9
41536: NOT
41537: PUSH
41538: LD_VAR 0 11
41542: NOT
41543: OR
41544: PUSH
41545: LD_VAR 0 12
41549: NOT
41550: OR
41551: PUSH
41552: LD_VAR 0 10
41556: NOT
41557: OR
41558: IFFALSE 41593
// begin result := [ chassis , engine , control , weapon ] ;
41560: LD_ADDR_VAR 0 6
41564: PUSH
41565: LD_VAR 0 2
41569: PUSH
41570: LD_VAR 0 3
41574: PUSH
41575: LD_VAR 0 4
41579: PUSH
41580: LD_VAR 0 5
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// exit ;
41591: GO 41884
// end ; if not chassis in _chassis then
41593: LD_VAR 0 2
41597: PUSH
41598: LD_VAR 0 9
41602: IN
41603: NOT
41604: IFFALSE 41630
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41606: LD_ADDR_VAR 0 2
41610: PUSH
41611: LD_VAR 0 9
41615: PUSH
41616: LD_INT 1
41618: PPUSH
41619: LD_VAR 0 9
41623: PPUSH
41624: CALL_OW 12
41628: ARRAY
41629: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41630: LD_VAR 0 2
41634: PPUSH
41635: LD_VAR 0 3
41639: PPUSH
41640: CALL 41889 0 2
41644: NOT
41645: IFFALSE 41704
// repeat engine := _engine [ 1 ] ;
41647: LD_ADDR_VAR 0 3
41651: PUSH
41652: LD_VAR 0 11
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41661: LD_ADDR_VAR 0 11
41665: PUSH
41666: LD_VAR 0 11
41670: PPUSH
41671: LD_INT 1
41673: PPUSH
41674: CALL_OW 3
41678: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41679: LD_VAR 0 2
41683: PPUSH
41684: LD_VAR 0 3
41688: PPUSH
41689: CALL 41889 0 2
41693: PUSH
41694: LD_VAR 0 11
41698: PUSH
41699: EMPTY
41700: EQUAL
41701: OR
41702: IFFALSE 41647
// if not control in _control then
41704: LD_VAR 0 4
41708: PUSH
41709: LD_VAR 0 12
41713: IN
41714: NOT
41715: IFFALSE 41741
// control := _control [ rand ( 1 , _control ) ] ;
41717: LD_ADDR_VAR 0 4
41721: PUSH
41722: LD_VAR 0 12
41726: PUSH
41727: LD_INT 1
41729: PPUSH
41730: LD_VAR 0 12
41734: PPUSH
41735: CALL_OW 12
41739: ARRAY
41740: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41741: LD_VAR 0 2
41745: PPUSH
41746: LD_VAR 0 5
41750: PPUSH
41751: CALL 42109 0 2
41755: NOT
41756: IFFALSE 41815
// repeat weapon := _weapon [ 1 ] ;
41758: LD_ADDR_VAR 0 5
41762: PUSH
41763: LD_VAR 0 10
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41772: LD_ADDR_VAR 0 10
41776: PUSH
41777: LD_VAR 0 10
41781: PPUSH
41782: LD_INT 1
41784: PPUSH
41785: CALL_OW 3
41789: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41790: LD_VAR 0 2
41794: PPUSH
41795: LD_VAR 0 5
41799: PPUSH
41800: CALL 42109 0 2
41804: PUSH
41805: LD_VAR 0 10
41809: PUSH
41810: EMPTY
41811: EQUAL
41812: OR
41813: IFFALSE 41758
// result := [ ] ;
41815: LD_ADDR_VAR 0 6
41819: PUSH
41820: EMPTY
41821: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41822: LD_VAR 0 1
41826: PPUSH
41827: LD_VAR 0 2
41831: PPUSH
41832: LD_VAR 0 3
41836: PPUSH
41837: LD_VAR 0 4
41841: PPUSH
41842: LD_VAR 0 5
41846: PPUSH
41847: CALL_OW 448
41851: IFFALSE 41884
// result := [ chassis , engine , control , weapon ] ;
41853: LD_ADDR_VAR 0 6
41857: PUSH
41858: LD_VAR 0 2
41862: PUSH
41863: LD_VAR 0 3
41867: PUSH
41868: LD_VAR 0 4
41872: PUSH
41873: LD_VAR 0 5
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: ST_TO_ADDR
// end ;
41884: LD_VAR 0 6
41888: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41889: LD_INT 0
41891: PPUSH
// if not chassis or not engine then
41892: LD_VAR 0 1
41896: NOT
41897: PUSH
41898: LD_VAR 0 2
41902: NOT
41903: OR
41904: IFFALSE 41908
// exit ;
41906: GO 42104
// case engine of engine_solar :
41908: LD_VAR 0 2
41912: PUSH
41913: LD_INT 2
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 41959
41921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41922: LD_ADDR_VAR 0 3
41926: PUSH
41927: LD_INT 11
41929: PUSH
41930: LD_INT 12
41932: PUSH
41933: LD_INT 13
41935: PUSH
41936: LD_INT 14
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
41957: GO 42088
41959: LD_INT 1
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41967
41965: GO 42029
41967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_INT 11
41975: PUSH
41976: LD_INT 12
41978: PUSH
41979: LD_INT 13
41981: PUSH
41982: LD_INT 14
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 4
41996: PUSH
41997: LD_INT 5
41999: PUSH
42000: LD_INT 21
42002: PUSH
42003: LD_INT 23
42005: PUSH
42006: LD_INT 22
42008: PUSH
42009: LD_INT 24
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
42027: GO 42088
42029: LD_INT 3
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42087
42037: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 13
42045: PUSH
42046: LD_INT 14
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 4
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: LD_INT 21
42063: PUSH
42064: LD_INT 22
42066: PUSH
42067: LD_INT 23
42069: PUSH
42070: LD_INT 24
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: ST_TO_ADDR
42085: GO 42088
42087: POP
// result := ( chassis in result ) ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_VAR 0 1
42097: PUSH
42098: LD_VAR 0 3
42102: IN
42103: ST_TO_ADDR
// end ;
42104: LD_VAR 0 3
42108: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42109: LD_INT 0
42111: PPUSH
// if not chassis or not weapon then
42112: LD_VAR 0 1
42116: NOT
42117: PUSH
42118: LD_VAR 0 2
42122: NOT
42123: OR
42124: IFFALSE 42128
// exit ;
42126: GO 43190
// case weapon of us_machine_gun :
42128: LD_VAR 0 2
42132: PUSH
42133: LD_INT 2
42135: DOUBLE
42136: EQUAL
42137: IFTRUE 42141
42139: GO 42171
42141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42142: LD_ADDR_VAR 0 3
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: LD_INT 4
42158: PUSH
42159: LD_INT 5
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
42169: GO 43174
42171: LD_INT 3
42173: DOUBLE
42174: EQUAL
42175: IFTRUE 42179
42177: GO 42209
42179: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42180: LD_ADDR_VAR 0 3
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 5
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
42207: GO 43174
42209: LD_INT 11
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42217
42215: GO 42247
42217: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: LD_INT 4
42234: PUSH
42235: LD_INT 5
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
42245: GO 43174
42247: LD_INT 4
42249: DOUBLE
42250: EQUAL
42251: IFTRUE 42255
42253: GO 42281
42255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42256: LD_ADDR_VAR 0 3
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: LD_INT 5
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
42279: GO 43174
42281: LD_INT 5
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42289
42287: GO 42315
42289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: LD_INT 4
42303: PUSH
42304: LD_INT 5
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
42313: GO 43174
42315: LD_INT 9
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42323
42321: GO 42349
42323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42324: LD_ADDR_VAR 0 3
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: LD_INT 4
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
42347: GO 43174
42349: LD_INT 7
42351: DOUBLE
42352: EQUAL
42353: IFTRUE 42357
42355: GO 42383
42357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 4
42371: PUSH
42372: LD_INT 5
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
42381: GO 43174
42383: LD_INT 12
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42417
42391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: LD_INT 5
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: ST_TO_ADDR
42415: GO 43174
42417: LD_INT 13
42419: DOUBLE
42420: EQUAL
42421: IFTRUE 42425
42423: GO 42451
42425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: LD_INT 4
42439: PUSH
42440: LD_INT 5
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
42449: GO 43174
42451: LD_INT 14
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42477
42459: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 4
42467: PUSH
42468: LD_INT 5
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: ST_TO_ADDR
42475: GO 43174
42477: LD_INT 6
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42485
42483: GO 42503
42485: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: ST_TO_ADDR
42501: GO 43174
42503: LD_INT 10
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42511
42509: GO 42529
42511: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 5
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: ST_TO_ADDR
42527: GO 43174
42529: LD_INT 22
42531: DOUBLE
42532: EQUAL
42533: IFTRUE 42537
42535: GO 42563
42537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42538: LD_ADDR_VAR 0 3
42542: PUSH
42543: LD_INT 11
42545: PUSH
42546: LD_INT 12
42548: PUSH
42549: LD_INT 13
42551: PUSH
42552: LD_INT 14
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
42561: GO 43174
42563: LD_INT 23
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42597
42571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42572: LD_ADDR_VAR 0 3
42576: PUSH
42577: LD_INT 11
42579: PUSH
42580: LD_INT 12
42582: PUSH
42583: LD_INT 13
42585: PUSH
42586: LD_INT 14
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
42595: GO 43174
42597: LD_INT 24
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42631
42605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 11
42613: PUSH
42614: LD_INT 12
42616: PUSH
42617: LD_INT 13
42619: PUSH
42620: LD_INT 14
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
42629: GO 43174
42631: LD_INT 30
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42665
42639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_INT 11
42647: PUSH
42648: LD_INT 12
42650: PUSH
42651: LD_INT 13
42653: PUSH
42654: LD_INT 14
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
42663: GO 43174
42665: LD_INT 25
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42691
42673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 13
42681: PUSH
42682: LD_INT 14
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: ST_TO_ADDR
42689: GO 43174
42691: LD_INT 27
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42699
42697: GO 42717
42699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_INT 13
42707: PUSH
42708: LD_INT 14
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: ST_TO_ADDR
42715: GO 43174
42717: LD_EXP 65
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42753
42727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 11
42735: PUSH
42736: LD_INT 12
42738: PUSH
42739: LD_INT 13
42741: PUSH
42742: LD_INT 14
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
42751: GO 43174
42753: LD_INT 28
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42779
42761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 13
42769: PUSH
42770: LD_INT 14
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: ST_TO_ADDR
42777: GO 43174
42779: LD_INT 29
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 42805
42787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42788: LD_ADDR_VAR 0 3
42792: PUSH
42793: LD_INT 13
42795: PUSH
42796: LD_INT 14
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: ST_TO_ADDR
42803: GO 43174
42805: LD_INT 31
42807: DOUBLE
42808: EQUAL
42809: IFTRUE 42813
42811: GO 42831
42813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42814: LD_ADDR_VAR 0 3
42818: PUSH
42819: LD_INT 13
42821: PUSH
42822: LD_INT 14
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: ST_TO_ADDR
42829: GO 43174
42831: LD_INT 26
42833: DOUBLE
42834: EQUAL
42835: IFTRUE 42839
42837: GO 42857
42839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_INT 13
42847: PUSH
42848: LD_INT 14
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: ST_TO_ADDR
42855: GO 43174
42857: LD_INT 42
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42891
42865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_INT 21
42873: PUSH
42874: LD_INT 22
42876: PUSH
42877: LD_INT 23
42879: PUSH
42880: LD_INT 24
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
42889: GO 43174
42891: LD_INT 43
42893: DOUBLE
42894: EQUAL
42895: IFTRUE 42899
42897: GO 42925
42899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_INT 21
42907: PUSH
42908: LD_INT 22
42910: PUSH
42911: LD_INT 23
42913: PUSH
42914: LD_INT 24
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
42923: GO 43174
42925: LD_INT 44
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42933
42931: GO 42959
42933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42934: LD_ADDR_VAR 0 3
42938: PUSH
42939: LD_INT 21
42941: PUSH
42942: LD_INT 22
42944: PUSH
42945: LD_INT 23
42947: PUSH
42948: LD_INT 24
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
42957: GO 43174
42959: LD_INT 45
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42967
42965: GO 42993
42967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42968: LD_ADDR_VAR 0 3
42972: PUSH
42973: LD_INT 21
42975: PUSH
42976: LD_INT 22
42978: PUSH
42979: LD_INT 23
42981: PUSH
42982: LD_INT 24
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
42991: GO 43174
42993: LD_INT 49
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43001
42999: GO 43027
43001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43002: LD_ADDR_VAR 0 3
43006: PUSH
43007: LD_INT 21
43009: PUSH
43010: LD_INT 22
43012: PUSH
43013: LD_INT 23
43015: PUSH
43016: LD_INT 24
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
43025: GO 43174
43027: LD_INT 51
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43061
43035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: LD_INT 21
43043: PUSH
43044: LD_INT 22
43046: PUSH
43047: LD_INT 23
43049: PUSH
43050: LD_INT 24
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: ST_TO_ADDR
43059: GO 43174
43061: LD_INT 52
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43095
43069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43070: LD_ADDR_VAR 0 3
43074: PUSH
43075: LD_INT 21
43077: PUSH
43078: LD_INT 22
43080: PUSH
43081: LD_INT 23
43083: PUSH
43084: LD_INT 24
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
43093: GO 43174
43095: LD_INT 53
43097: DOUBLE
43098: EQUAL
43099: IFTRUE 43103
43101: GO 43121
43103: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43104: LD_ADDR_VAR 0 3
43108: PUSH
43109: LD_INT 23
43111: PUSH
43112: LD_INT 24
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: ST_TO_ADDR
43119: GO 43174
43121: LD_INT 46
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43129
43127: GO 43147
43129: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_INT 23
43137: PUSH
43138: LD_INT 24
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: ST_TO_ADDR
43145: GO 43174
43147: LD_INT 47
43149: DOUBLE
43150: EQUAL
43151: IFTRUE 43155
43153: GO 43173
43155: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43156: LD_ADDR_VAR 0 3
43160: PUSH
43161: LD_INT 23
43163: PUSH
43164: LD_INT 24
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: ST_TO_ADDR
43171: GO 43174
43173: POP
// result := ( chassis in result ) ;
43174: LD_ADDR_VAR 0 3
43178: PUSH
43179: LD_VAR 0 1
43183: PUSH
43184: LD_VAR 0 3
43188: IN
43189: ST_TO_ADDR
// end ;
43190: LD_VAR 0 3
43194: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43195: LD_INT 0
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
// result := array ;
43204: LD_ADDR_VAR 0 5
43208: PUSH
43209: LD_VAR 0 1
43213: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43214: LD_VAR 0 1
43218: NOT
43219: PUSH
43220: LD_VAR 0 2
43224: NOT
43225: OR
43226: PUSH
43227: LD_VAR 0 3
43231: NOT
43232: OR
43233: PUSH
43234: LD_VAR 0 2
43238: PUSH
43239: LD_VAR 0 1
43243: GREATER
43244: OR
43245: PUSH
43246: LD_VAR 0 3
43250: PUSH
43251: LD_VAR 0 1
43255: GREATER
43256: OR
43257: IFFALSE 43261
// exit ;
43259: GO 43557
// if direction then
43261: LD_VAR 0 4
43265: IFFALSE 43329
// begin d := 1 ;
43267: LD_ADDR_VAR 0 9
43271: PUSH
43272: LD_INT 1
43274: ST_TO_ADDR
// if i_from > i_to then
43275: LD_VAR 0 2
43279: PUSH
43280: LD_VAR 0 3
43284: GREATER
43285: IFFALSE 43311
// length := ( array - i_from ) + i_to else
43287: LD_ADDR_VAR 0 11
43291: PUSH
43292: LD_VAR 0 1
43296: PUSH
43297: LD_VAR 0 2
43301: MINUS
43302: PUSH
43303: LD_VAR 0 3
43307: PLUS
43308: ST_TO_ADDR
43309: GO 43327
// length := i_to - i_from ;
43311: LD_ADDR_VAR 0 11
43315: PUSH
43316: LD_VAR 0 3
43320: PUSH
43321: LD_VAR 0 2
43325: MINUS
43326: ST_TO_ADDR
// end else
43327: GO 43390
// begin d := - 1 ;
43329: LD_ADDR_VAR 0 9
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: ST_TO_ADDR
// if i_from > i_to then
43338: LD_VAR 0 2
43342: PUSH
43343: LD_VAR 0 3
43347: GREATER
43348: IFFALSE 43368
// length := i_from - i_to else
43350: LD_ADDR_VAR 0 11
43354: PUSH
43355: LD_VAR 0 2
43359: PUSH
43360: LD_VAR 0 3
43364: MINUS
43365: ST_TO_ADDR
43366: GO 43390
// length := ( array - i_to ) + i_from ;
43368: LD_ADDR_VAR 0 11
43372: PUSH
43373: LD_VAR 0 1
43377: PUSH
43378: LD_VAR 0 3
43382: MINUS
43383: PUSH
43384: LD_VAR 0 2
43388: PLUS
43389: ST_TO_ADDR
// end ; if not length then
43390: LD_VAR 0 11
43394: NOT
43395: IFFALSE 43399
// exit ;
43397: GO 43557
// tmp := array ;
43399: LD_ADDR_VAR 0 10
43403: PUSH
43404: LD_VAR 0 1
43408: ST_TO_ADDR
// for i = 1 to length do
43409: LD_ADDR_VAR 0 6
43413: PUSH
43414: DOUBLE
43415: LD_INT 1
43417: DEC
43418: ST_TO_ADDR
43419: LD_VAR 0 11
43423: PUSH
43424: FOR_TO
43425: IFFALSE 43545
// begin for j = 1 to array do
43427: LD_ADDR_VAR 0 7
43431: PUSH
43432: DOUBLE
43433: LD_INT 1
43435: DEC
43436: ST_TO_ADDR
43437: LD_VAR 0 1
43441: PUSH
43442: FOR_TO
43443: IFFALSE 43531
// begin k := j + d ;
43445: LD_ADDR_VAR 0 8
43449: PUSH
43450: LD_VAR 0 7
43454: PUSH
43455: LD_VAR 0 9
43459: PLUS
43460: ST_TO_ADDR
// if k > array then
43461: LD_VAR 0 8
43465: PUSH
43466: LD_VAR 0 1
43470: GREATER
43471: IFFALSE 43481
// k := 1 ;
43473: LD_ADDR_VAR 0 8
43477: PUSH
43478: LD_INT 1
43480: ST_TO_ADDR
// if not k then
43481: LD_VAR 0 8
43485: NOT
43486: IFFALSE 43498
// k := array ;
43488: LD_ADDR_VAR 0 8
43492: PUSH
43493: LD_VAR 0 1
43497: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43498: LD_ADDR_VAR 0 10
43502: PUSH
43503: LD_VAR 0 10
43507: PPUSH
43508: LD_VAR 0 8
43512: PPUSH
43513: LD_VAR 0 1
43517: PUSH
43518: LD_VAR 0 7
43522: ARRAY
43523: PPUSH
43524: CALL_OW 1
43528: ST_TO_ADDR
// end ;
43529: GO 43442
43531: POP
43532: POP
// array := tmp ;
43533: LD_ADDR_VAR 0 1
43537: PUSH
43538: LD_VAR 0 10
43542: ST_TO_ADDR
// end ;
43543: GO 43424
43545: POP
43546: POP
// result := array ;
43547: LD_ADDR_VAR 0 5
43551: PUSH
43552: LD_VAR 0 1
43556: ST_TO_ADDR
// end ;
43557: LD_VAR 0 5
43561: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43562: LD_INT 0
43564: PPUSH
43565: PPUSH
// result := 0 ;
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_INT 0
43573: ST_TO_ADDR
// if not array or not value in array then
43574: LD_VAR 0 1
43578: NOT
43579: PUSH
43580: LD_VAR 0 2
43584: PUSH
43585: LD_VAR 0 1
43589: IN
43590: NOT
43591: OR
43592: IFFALSE 43596
// exit ;
43594: GO 43650
// for i = 1 to array do
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: DOUBLE
43602: LD_INT 1
43604: DEC
43605: ST_TO_ADDR
43606: LD_VAR 0 1
43610: PUSH
43611: FOR_TO
43612: IFFALSE 43648
// if value = array [ i ] then
43614: LD_VAR 0 2
43618: PUSH
43619: LD_VAR 0 1
43623: PUSH
43624: LD_VAR 0 4
43628: ARRAY
43629: EQUAL
43630: IFFALSE 43646
// begin result := i ;
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_VAR 0 4
43641: ST_TO_ADDR
// exit ;
43642: POP
43643: POP
43644: GO 43650
// end ;
43646: GO 43611
43648: POP
43649: POP
// end ;
43650: LD_VAR 0 3
43654: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43655: LD_INT 0
43657: PPUSH
// vc_chassis := chassis ;
43658: LD_ADDR_OWVAR 37
43662: PUSH
43663: LD_VAR 0 1
43667: ST_TO_ADDR
// vc_engine := engine ;
43668: LD_ADDR_OWVAR 39
43672: PUSH
43673: LD_VAR 0 2
43677: ST_TO_ADDR
// vc_control := control ;
43678: LD_ADDR_OWVAR 38
43682: PUSH
43683: LD_VAR 0 3
43687: ST_TO_ADDR
// vc_weapon := weapon ;
43688: LD_ADDR_OWVAR 40
43692: PUSH
43693: LD_VAR 0 4
43697: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43698: LD_ADDR_OWVAR 41
43702: PUSH
43703: LD_VAR 0 5
43707: ST_TO_ADDR
// end ;
43708: LD_VAR 0 6
43712: RET
// export function WantPlant ( unit ) ; var task ; begin
43713: LD_INT 0
43715: PPUSH
43716: PPUSH
// result := false ;
43717: LD_ADDR_VAR 0 2
43721: PUSH
43722: LD_INT 0
43724: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: CALL_OW 437
43739: ST_TO_ADDR
// if task then
43740: LD_VAR 0 3
43744: IFFALSE 43772
// if task [ 1 ] [ 1 ] = p then
43746: LD_VAR 0 3
43750: PUSH
43751: LD_INT 1
43753: ARRAY
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: PUSH
43759: LD_STRING p
43761: EQUAL
43762: IFFALSE 43772
// result := true ;
43764: LD_ADDR_VAR 0 2
43768: PUSH
43769: LD_INT 1
43771: ST_TO_ADDR
// end ;
43772: LD_VAR 0 2
43776: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43777: LD_INT 0
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
// if pos < 1 then
43783: LD_VAR 0 2
43787: PUSH
43788: LD_INT 1
43790: LESS
43791: IFFALSE 43795
// exit ;
43793: GO 44098
// if pos = 1 then
43795: LD_VAR 0 2
43799: PUSH
43800: LD_INT 1
43802: EQUAL
43803: IFFALSE 43836
// result := Replace ( arr , pos [ 1 ] , value ) else
43805: LD_ADDR_VAR 0 4
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_INT 1
43822: ARRAY
43823: PPUSH
43824: LD_VAR 0 3
43828: PPUSH
43829: CALL_OW 1
43833: ST_TO_ADDR
43834: GO 44098
// begin tmp := arr ;
43836: LD_ADDR_VAR 0 6
43840: PUSH
43841: LD_VAR 0 1
43845: ST_TO_ADDR
// s_arr := [ tmp ] ;
43846: LD_ADDR_VAR 0 7
43850: PUSH
43851: LD_VAR 0 6
43855: PUSH
43856: EMPTY
43857: LIST
43858: ST_TO_ADDR
// for i = 1 to pos - 1 do
43859: LD_ADDR_VAR 0 5
43863: PUSH
43864: DOUBLE
43865: LD_INT 1
43867: DEC
43868: ST_TO_ADDR
43869: LD_VAR 0 2
43873: PUSH
43874: LD_INT 1
43876: MINUS
43877: PUSH
43878: FOR_TO
43879: IFFALSE 43924
// begin tmp := tmp [ pos [ i ] ] ;
43881: LD_ADDR_VAR 0 6
43885: PUSH
43886: LD_VAR 0 6
43890: PUSH
43891: LD_VAR 0 2
43895: PUSH
43896: LD_VAR 0 5
43900: ARRAY
43901: ARRAY
43902: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43903: LD_ADDR_VAR 0 7
43907: PUSH
43908: LD_VAR 0 7
43912: PUSH
43913: LD_VAR 0 6
43917: PUSH
43918: EMPTY
43919: LIST
43920: ADD
43921: ST_TO_ADDR
// end ;
43922: GO 43878
43924: POP
43925: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43926: LD_ADDR_VAR 0 6
43930: PUSH
43931: LD_VAR 0 6
43935: PPUSH
43936: LD_VAR 0 2
43940: PUSH
43941: LD_VAR 0 2
43945: ARRAY
43946: PPUSH
43947: LD_VAR 0 3
43951: PPUSH
43952: CALL_OW 1
43956: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43957: LD_ADDR_VAR 0 7
43961: PUSH
43962: LD_VAR 0 7
43966: PPUSH
43967: LD_VAR 0 7
43971: PPUSH
43972: LD_VAR 0 6
43976: PPUSH
43977: CALL_OW 1
43981: ST_TO_ADDR
// for i = s_arr downto 2 do
43982: LD_ADDR_VAR 0 5
43986: PUSH
43987: DOUBLE
43988: LD_VAR 0 7
43992: INC
43993: ST_TO_ADDR
43994: LD_INT 2
43996: PUSH
43997: FOR_DOWNTO
43998: IFFALSE 44082
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44000: LD_ADDR_VAR 0 6
44004: PUSH
44005: LD_VAR 0 7
44009: PUSH
44010: LD_VAR 0 5
44014: PUSH
44015: LD_INT 1
44017: MINUS
44018: ARRAY
44019: PPUSH
44020: LD_VAR 0 2
44024: PUSH
44025: LD_VAR 0 5
44029: PUSH
44030: LD_INT 1
44032: MINUS
44033: ARRAY
44034: PPUSH
44035: LD_VAR 0 7
44039: PUSH
44040: LD_VAR 0 5
44044: ARRAY
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44051: LD_ADDR_VAR 0 7
44055: PUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 1
44068: MINUS
44069: PPUSH
44070: LD_VAR 0 6
44074: PPUSH
44075: CALL_OW 1
44079: ST_TO_ADDR
// end ;
44080: GO 43997
44082: POP
44083: POP
// result := s_arr [ 1 ] ;
44084: LD_ADDR_VAR 0 4
44088: PUSH
44089: LD_VAR 0 7
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: ST_TO_ADDR
// end ; end ;
44098: LD_VAR 0 4
44102: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44103: LD_INT 0
44105: PPUSH
44106: PPUSH
// if not list then
44107: LD_VAR 0 1
44111: NOT
44112: IFFALSE 44116
// exit ;
44114: GO 44207
// i := list [ pos1 ] ;
44116: LD_ADDR_VAR 0 5
44120: PUSH
44121: LD_VAR 0 1
44125: PUSH
44126: LD_VAR 0 2
44130: ARRAY
44131: ST_TO_ADDR
// if not i then
44132: LD_VAR 0 5
44136: NOT
44137: IFFALSE 44141
// exit ;
44139: GO 44207
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44141: LD_ADDR_VAR 0 1
44145: PUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: LD_VAR 0 2
44155: PPUSH
44156: LD_VAR 0 1
44160: PUSH
44161: LD_VAR 0 3
44165: ARRAY
44166: PPUSH
44167: CALL_OW 1
44171: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44172: LD_ADDR_VAR 0 1
44176: PUSH
44177: LD_VAR 0 1
44181: PPUSH
44182: LD_VAR 0 3
44186: PPUSH
44187: LD_VAR 0 5
44191: PPUSH
44192: CALL_OW 1
44196: ST_TO_ADDR
// result := list ;
44197: LD_ADDR_VAR 0 4
44201: PUSH
44202: LD_VAR 0 1
44206: ST_TO_ADDR
// end ;
44207: LD_VAR 0 4
44211: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44212: LD_INT 0
44214: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44215: LD_ADDR_VAR 0 5
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 250
44229: PPUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 251
44239: PPUSH
44240: LD_VAR 0 2
44244: PPUSH
44245: LD_VAR 0 3
44249: PPUSH
44250: LD_VAR 0 4
44254: PPUSH
44255: CALL 44265 0 5
44259: ST_TO_ADDR
// end ;
44260: LD_VAR 0 5
44264: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44265: LD_INT 0
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
// if not list then
44271: LD_VAR 0 3
44275: NOT
44276: IFFALSE 44280
// exit ;
44278: GO 44668
// result := [ ] ;
44280: LD_ADDR_VAR 0 6
44284: PUSH
44285: EMPTY
44286: ST_TO_ADDR
// for i in list do
44287: LD_ADDR_VAR 0 7
44291: PUSH
44292: LD_VAR 0 3
44296: PUSH
44297: FOR_IN
44298: IFFALSE 44500
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44300: LD_ADDR_VAR 0 9
44304: PUSH
44305: LD_VAR 0 7
44309: PPUSH
44310: LD_VAR 0 1
44314: PPUSH
44315: LD_VAR 0 2
44319: PPUSH
44320: CALL_OW 297
44324: ST_TO_ADDR
// if not result then
44325: LD_VAR 0 6
44329: NOT
44330: IFFALSE 44356
// result := [ [ i , tmp ] ] else
44332: LD_ADDR_VAR 0 6
44336: PUSH
44337: LD_VAR 0 7
44341: PUSH
44342: LD_VAR 0 9
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: EMPTY
44352: LIST
44353: ST_TO_ADDR
44354: GO 44498
// begin if result [ result ] [ 2 ] < tmp then
44356: LD_VAR 0 6
44360: PUSH
44361: LD_VAR 0 6
44365: ARRAY
44366: PUSH
44367: LD_INT 2
44369: ARRAY
44370: PUSH
44371: LD_VAR 0 9
44375: LESS
44376: IFFALSE 44418
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44378: LD_ADDR_VAR 0 6
44382: PUSH
44383: LD_VAR 0 6
44387: PPUSH
44388: LD_VAR 0 6
44392: PUSH
44393: LD_INT 1
44395: PLUS
44396: PPUSH
44397: LD_VAR 0 7
44401: PUSH
44402: LD_VAR 0 9
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PPUSH
44411: CALL_OW 2
44415: ST_TO_ADDR
44416: GO 44498
// for j = 1 to result do
44418: LD_ADDR_VAR 0 8
44422: PUSH
44423: DOUBLE
44424: LD_INT 1
44426: DEC
44427: ST_TO_ADDR
44428: LD_VAR 0 6
44432: PUSH
44433: FOR_TO
44434: IFFALSE 44496
// begin if tmp < result [ j ] [ 2 ] then
44436: LD_VAR 0 9
44440: PUSH
44441: LD_VAR 0 6
44445: PUSH
44446: LD_VAR 0 8
44450: ARRAY
44451: PUSH
44452: LD_INT 2
44454: ARRAY
44455: LESS
44456: IFFALSE 44494
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44458: LD_ADDR_VAR 0 6
44462: PUSH
44463: LD_VAR 0 6
44467: PPUSH
44468: LD_VAR 0 8
44472: PPUSH
44473: LD_VAR 0 7
44477: PUSH
44478: LD_VAR 0 9
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PPUSH
44487: CALL_OW 2
44491: ST_TO_ADDR
// break ;
44492: GO 44496
// end ; end ;
44494: GO 44433
44496: POP
44497: POP
// end ; end ;
44498: GO 44297
44500: POP
44501: POP
// if result and not asc then
44502: LD_VAR 0 6
44506: PUSH
44507: LD_VAR 0 4
44511: NOT
44512: AND
44513: IFFALSE 44588
// begin tmp := result ;
44515: LD_ADDR_VAR 0 9
44519: PUSH
44520: LD_VAR 0 6
44524: ST_TO_ADDR
// for i = tmp downto 1 do
44525: LD_ADDR_VAR 0 7
44529: PUSH
44530: DOUBLE
44531: LD_VAR 0 9
44535: INC
44536: ST_TO_ADDR
44537: LD_INT 1
44539: PUSH
44540: FOR_DOWNTO
44541: IFFALSE 44586
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44543: LD_ADDR_VAR 0 6
44547: PUSH
44548: LD_VAR 0 6
44552: PPUSH
44553: LD_VAR 0 9
44557: PUSH
44558: LD_VAR 0 7
44562: MINUS
44563: PUSH
44564: LD_INT 1
44566: PLUS
44567: PPUSH
44568: LD_VAR 0 9
44572: PUSH
44573: LD_VAR 0 7
44577: ARRAY
44578: PPUSH
44579: CALL_OW 1
44583: ST_TO_ADDR
44584: GO 44540
44586: POP
44587: POP
// end ; tmp := [ ] ;
44588: LD_ADDR_VAR 0 9
44592: PUSH
44593: EMPTY
44594: ST_TO_ADDR
// if mode then
44595: LD_VAR 0 5
44599: IFFALSE 44668
// begin for i = 1 to result do
44601: LD_ADDR_VAR 0 7
44605: PUSH
44606: DOUBLE
44607: LD_INT 1
44609: DEC
44610: ST_TO_ADDR
44611: LD_VAR 0 6
44615: PUSH
44616: FOR_TO
44617: IFFALSE 44656
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44619: LD_ADDR_VAR 0 9
44623: PUSH
44624: LD_VAR 0 9
44628: PPUSH
44629: LD_VAR 0 7
44633: PPUSH
44634: LD_VAR 0 6
44638: PUSH
44639: LD_VAR 0 7
44643: ARRAY
44644: PUSH
44645: LD_INT 1
44647: ARRAY
44648: PPUSH
44649: CALL_OW 1
44653: ST_TO_ADDR
44654: GO 44616
44656: POP
44657: POP
// result := tmp ;
44658: LD_ADDR_VAR 0 6
44662: PUSH
44663: LD_VAR 0 9
44667: ST_TO_ADDR
// end ; end ;
44668: LD_VAR 0 6
44672: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44673: LD_INT 0
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44681: LD_ADDR_VAR 0 5
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
// if not x or not y then
44703: LD_VAR 0 2
44707: NOT
44708: PUSH
44709: LD_VAR 0 3
44713: NOT
44714: OR
44715: IFFALSE 44719
// exit ;
44717: GO 46371
// if not range then
44719: LD_VAR 0 4
44723: NOT
44724: IFFALSE 44734
// range := 10 ;
44726: LD_ADDR_VAR 0 4
44730: PUSH
44731: LD_INT 10
44733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44734: LD_ADDR_VAR 0 8
44738: PUSH
44739: LD_INT 81
44741: PUSH
44742: LD_VAR 0 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 92
44753: PUSH
44754: LD_VAR 0 2
44758: PUSH
44759: LD_VAR 0 3
44763: PUSH
44764: LD_VAR 0 4
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 21
44780: PUSH
44781: LD_INT 3
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: PPUSH
44797: CALL_OW 69
44801: ST_TO_ADDR
// if not tmp then
44802: LD_VAR 0 8
44806: NOT
44807: IFFALSE 44811
// exit ;
44809: GO 46371
// for i in tmp do
44811: LD_ADDR_VAR 0 6
44815: PUSH
44816: LD_VAR 0 8
44820: PUSH
44821: FOR_IN
44822: IFFALSE 46346
// begin points := [ 0 , 0 , 0 ] ;
44824: LD_ADDR_VAR 0 9
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// bpoints := 1 ;
44843: LD_ADDR_VAR 0 10
44847: PUSH
44848: LD_INT 1
44850: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44851: LD_VAR 0 6
44855: PPUSH
44856: CALL_OW 247
44860: PUSH
44861: LD_INT 1
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 45447
44869: POP
// begin if GetClass ( i ) = 1 then
44870: LD_VAR 0 6
44874: PPUSH
44875: CALL_OW 257
44879: PUSH
44880: LD_INT 1
44882: EQUAL
44883: IFFALSE 44904
// points := [ 10 , 5 , 3 ] ;
44885: LD_ADDR_VAR 0 9
44889: PUSH
44890: LD_INT 10
44892: PUSH
44893: LD_INT 5
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44904: LD_VAR 0 6
44908: PPUSH
44909: CALL_OW 257
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 3
44919: PUSH
44920: LD_INT 4
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: IN
44928: IFFALSE 44949
// points := [ 3 , 2 , 1 ] ;
44930: LD_ADDR_VAR 0 9
44934: PUSH
44935: LD_INT 3
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44949: LD_VAR 0 6
44953: PPUSH
44954: CALL_OW 257
44958: PUSH
44959: LD_INT 5
44961: EQUAL
44962: IFFALSE 44983
// points := [ 130 , 5 , 2 ] ;
44964: LD_ADDR_VAR 0 9
44968: PUSH
44969: LD_INT 130
44971: PUSH
44972: LD_INT 5
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44983: LD_VAR 0 6
44987: PPUSH
44988: CALL_OW 257
44992: PUSH
44993: LD_INT 8
44995: EQUAL
44996: IFFALSE 45017
// points := [ 35 , 35 , 30 ] ;
44998: LD_ADDR_VAR 0 9
45002: PUSH
45003: LD_INT 35
45005: PUSH
45006: LD_INT 35
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45017: LD_VAR 0 6
45021: PPUSH
45022: CALL_OW 257
45026: PUSH
45027: LD_INT 9
45029: EQUAL
45030: IFFALSE 45051
// points := [ 20 , 55 , 40 ] ;
45032: LD_ADDR_VAR 0 9
45036: PUSH
45037: LD_INT 20
45039: PUSH
45040: LD_INT 55
45042: PUSH
45043: LD_INT 40
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45051: LD_VAR 0 6
45055: PPUSH
45056: CALL_OW 257
45060: PUSH
45061: LD_INT 12
45063: PUSH
45064: LD_INT 16
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: IN
45071: IFFALSE 45092
// points := [ 5 , 3 , 2 ] ;
45073: LD_ADDR_VAR 0 9
45077: PUSH
45078: LD_INT 5
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 257
45101: PUSH
45102: LD_INT 17
45104: EQUAL
45105: IFFALSE 45126
// points := [ 100 , 50 , 75 ] ;
45107: LD_ADDR_VAR 0 9
45111: PUSH
45112: LD_INT 100
45114: PUSH
45115: LD_INT 50
45117: PUSH
45118: LD_INT 75
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45126: LD_VAR 0 6
45130: PPUSH
45131: CALL_OW 257
45135: PUSH
45136: LD_INT 15
45138: EQUAL
45139: IFFALSE 45160
// points := [ 10 , 5 , 3 ] ;
45141: LD_ADDR_VAR 0 9
45145: PUSH
45146: LD_INT 10
45148: PUSH
45149: LD_INT 5
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45160: LD_VAR 0 6
45164: PPUSH
45165: CALL_OW 257
45169: PUSH
45170: LD_INT 14
45172: EQUAL
45173: IFFALSE 45194
// points := [ 10 , 0 , 0 ] ;
45175: LD_ADDR_VAR 0 9
45179: PUSH
45180: LD_INT 10
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45194: LD_VAR 0 6
45198: PPUSH
45199: CALL_OW 257
45203: PUSH
45204: LD_INT 11
45206: EQUAL
45207: IFFALSE 45228
// points := [ 30 , 10 , 5 ] ;
45209: LD_ADDR_VAR 0 9
45213: PUSH
45214: LD_INT 30
45216: PUSH
45217: LD_INT 10
45219: PUSH
45220: LD_INT 5
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45228: LD_VAR 0 1
45232: PPUSH
45233: LD_INT 5
45235: PPUSH
45236: CALL_OW 321
45240: PUSH
45241: LD_INT 2
45243: EQUAL
45244: IFFALSE 45261
// bpoints := bpoints * 1.8 ;
45246: LD_ADDR_VAR 0 10
45250: PUSH
45251: LD_VAR 0 10
45255: PUSH
45256: LD_REAL  1.80000000000000E+0000
45259: MUL
45260: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45261: LD_VAR 0 6
45265: PPUSH
45266: CALL_OW 257
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: IN
45289: PUSH
45290: LD_VAR 0 1
45294: PPUSH
45295: LD_INT 51
45297: PPUSH
45298: CALL_OW 321
45302: PUSH
45303: LD_INT 2
45305: EQUAL
45306: AND
45307: IFFALSE 45324
// bpoints := bpoints * 1.2 ;
45309: LD_ADDR_VAR 0 10
45313: PUSH
45314: LD_VAR 0 10
45318: PUSH
45319: LD_REAL  1.20000000000000E+0000
45322: MUL
45323: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45324: LD_VAR 0 6
45328: PPUSH
45329: CALL_OW 257
45333: PUSH
45334: LD_INT 5
45336: PUSH
45337: LD_INT 7
45339: PUSH
45340: LD_INT 9
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: IN
45348: PUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: LD_INT 52
45356: PPUSH
45357: CALL_OW 321
45361: PUSH
45362: LD_INT 2
45364: EQUAL
45365: AND
45366: IFFALSE 45383
// bpoints := bpoints * 1.5 ;
45368: LD_ADDR_VAR 0 10
45372: PUSH
45373: LD_VAR 0 10
45377: PUSH
45378: LD_REAL  1.50000000000000E+0000
45381: MUL
45382: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45383: LD_VAR 0 1
45387: PPUSH
45388: LD_INT 66
45390: PPUSH
45391: CALL_OW 321
45395: PUSH
45396: LD_INT 2
45398: EQUAL
45399: IFFALSE 45416
// bpoints := bpoints * 1.1 ;
45401: LD_ADDR_VAR 0 10
45405: PUSH
45406: LD_VAR 0 10
45410: PUSH
45411: LD_REAL  1.10000000000000E+0000
45414: MUL
45415: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45416: LD_ADDR_VAR 0 10
45420: PUSH
45421: LD_VAR 0 10
45425: PUSH
45426: LD_VAR 0 6
45430: PPUSH
45431: LD_INT 1
45433: PPUSH
45434: CALL_OW 259
45438: PUSH
45439: LD_REAL  1.15000000000000E+0000
45442: MUL
45443: MUL
45444: ST_TO_ADDR
// end ; unit_vehicle :
45445: GO 46275
45447: LD_INT 2
45449: DOUBLE
45450: EQUAL
45451: IFTRUE 45455
45453: GO 46263
45455: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45456: LD_VAR 0 6
45460: PPUSH
45461: CALL_OW 264
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 42
45471: PUSH
45472: LD_INT 24
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: IN
45480: IFFALSE 45501
// points := [ 25 , 5 , 3 ] ;
45482: LD_ADDR_VAR 0 9
45486: PUSH
45487: LD_INT 25
45489: PUSH
45490: LD_INT 5
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45501: LD_VAR 0 6
45505: PPUSH
45506: CALL_OW 264
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 43
45516: PUSH
45517: LD_INT 25
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: IN
45525: IFFALSE 45546
// points := [ 40 , 15 , 5 ] ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: LD_INT 40
45534: PUSH
45535: LD_INT 15
45537: PUSH
45538: LD_INT 5
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45546: LD_VAR 0 6
45550: PPUSH
45551: CALL_OW 264
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: LD_INT 23
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: IN
45566: IFFALSE 45587
// points := [ 7 , 25 , 8 ] ;
45568: LD_ADDR_VAR 0 9
45572: PUSH
45573: LD_INT 7
45575: PUSH
45576: LD_INT 25
45578: PUSH
45579: LD_INT 8
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45587: LD_VAR 0 6
45591: PPUSH
45592: CALL_OW 264
45596: PUSH
45597: LD_INT 5
45599: PUSH
45600: LD_INT 27
45602: PUSH
45603: LD_INT 44
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: IN
45611: IFFALSE 45632
// points := [ 14 , 50 , 16 ] ;
45613: LD_ADDR_VAR 0 9
45617: PUSH
45618: LD_INT 14
45620: PUSH
45621: LD_INT 50
45623: PUSH
45624: LD_INT 16
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45632: LD_VAR 0 6
45636: PPUSH
45637: CALL_OW 264
45641: PUSH
45642: LD_INT 6
45644: PUSH
45645: LD_INT 46
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: IN
45652: IFFALSE 45673
// points := [ 32 , 120 , 70 ] ;
45654: LD_ADDR_VAR 0 9
45658: PUSH
45659: LD_INT 32
45661: PUSH
45662: LD_INT 120
45664: PUSH
45665: LD_INT 70
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45673: LD_VAR 0 6
45677: PPUSH
45678: CALL_OW 264
45682: PUSH
45683: LD_INT 7
45685: PUSH
45686: LD_INT 28
45688: PUSH
45689: LD_INT 45
45691: PUSH
45692: LD_EXP 65
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: IN
45703: IFFALSE 45724
// points := [ 35 , 20 , 45 ] ;
45705: LD_ADDR_VAR 0 9
45709: PUSH
45710: LD_INT 35
45712: PUSH
45713: LD_INT 20
45715: PUSH
45716: LD_INT 45
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45724: LD_VAR 0 6
45728: PPUSH
45729: CALL_OW 264
45733: PUSH
45734: LD_INT 47
45736: PUSH
45737: EMPTY
45738: LIST
45739: IN
45740: IFFALSE 45761
// points := [ 67 , 45 , 75 ] ;
45742: LD_ADDR_VAR 0 9
45746: PUSH
45747: LD_INT 67
45749: PUSH
45750: LD_INT 45
45752: PUSH
45753: LD_INT 75
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45761: LD_VAR 0 6
45765: PPUSH
45766: CALL_OW 264
45770: PUSH
45771: LD_INT 26
45773: PUSH
45774: EMPTY
45775: LIST
45776: IN
45777: IFFALSE 45798
// points := [ 120 , 30 , 80 ] ;
45779: LD_ADDR_VAR 0 9
45783: PUSH
45784: LD_INT 120
45786: PUSH
45787: LD_INT 30
45789: PUSH
45790: LD_INT 80
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45798: LD_VAR 0 6
45802: PPUSH
45803: CALL_OW 264
45807: PUSH
45808: LD_INT 22
45810: PUSH
45811: EMPTY
45812: LIST
45813: IN
45814: IFFALSE 45835
// points := [ 40 , 1 , 1 ] ;
45816: LD_ADDR_VAR 0 9
45820: PUSH
45821: LD_INT 40
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45835: LD_VAR 0 6
45839: PPUSH
45840: CALL_OW 264
45844: PUSH
45845: LD_INT 29
45847: PUSH
45848: EMPTY
45849: LIST
45850: IN
45851: IFFALSE 45872
// points := [ 70 , 200 , 400 ] ;
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_INT 70
45860: PUSH
45861: LD_INT 200
45863: PUSH
45864: LD_INT 400
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45872: LD_VAR 0 6
45876: PPUSH
45877: CALL_OW 264
45881: PUSH
45882: LD_INT 14
45884: PUSH
45885: LD_INT 53
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: IN
45892: IFFALSE 45913
// points := [ 40 , 10 , 20 ] ;
45894: LD_ADDR_VAR 0 9
45898: PUSH
45899: LD_INT 40
45901: PUSH
45902: LD_INT 10
45904: PUSH
45905: LD_INT 20
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45913: LD_VAR 0 6
45917: PPUSH
45918: CALL_OW 264
45922: PUSH
45923: LD_INT 9
45925: PUSH
45926: EMPTY
45927: LIST
45928: IN
45929: IFFALSE 45950
// points := [ 5 , 70 , 20 ] ;
45931: LD_ADDR_VAR 0 9
45935: PUSH
45936: LD_INT 5
45938: PUSH
45939: LD_INT 70
45941: PUSH
45942: LD_INT 20
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45950: LD_VAR 0 6
45954: PPUSH
45955: CALL_OW 264
45959: PUSH
45960: LD_INT 10
45962: PUSH
45963: EMPTY
45964: LIST
45965: IN
45966: IFFALSE 45987
// points := [ 35 , 110 , 70 ] ;
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_INT 35
45975: PUSH
45976: LD_INT 110
45978: PUSH
45979: LD_INT 70
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45987: LD_VAR 0 6
45991: PPUSH
45992: CALL_OW 265
45996: PUSH
45997: LD_INT 25
45999: EQUAL
46000: IFFALSE 46021
// points := [ 80 , 65 , 100 ] ;
46002: LD_ADDR_VAR 0 9
46006: PUSH
46007: LD_INT 80
46009: PUSH
46010: LD_INT 65
46012: PUSH
46013: LD_INT 100
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46021: LD_VAR 0 6
46025: PPUSH
46026: CALL_OW 263
46030: PUSH
46031: LD_INT 1
46033: EQUAL
46034: IFFALSE 46069
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46036: LD_ADDR_VAR 0 10
46040: PUSH
46041: LD_VAR 0 10
46045: PUSH
46046: LD_VAR 0 6
46050: PPUSH
46051: CALL_OW 311
46055: PPUSH
46056: LD_INT 3
46058: PPUSH
46059: CALL_OW 259
46063: PUSH
46064: LD_INT 4
46066: MUL
46067: MUL
46068: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46069: LD_VAR 0 6
46073: PPUSH
46074: CALL_OW 263
46078: PUSH
46079: LD_INT 2
46081: EQUAL
46082: IFFALSE 46133
// begin j := IsControledBy ( i ) ;
46084: LD_ADDR_VAR 0 7
46088: PUSH
46089: LD_VAR 0 6
46093: PPUSH
46094: CALL_OW 312
46098: ST_TO_ADDR
// if j then
46099: LD_VAR 0 7
46103: IFFALSE 46133
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46105: LD_ADDR_VAR 0 10
46109: PUSH
46110: LD_VAR 0 10
46114: PUSH
46115: LD_VAR 0 7
46119: PPUSH
46120: LD_INT 3
46122: PPUSH
46123: CALL_OW 259
46127: PUSH
46128: LD_INT 3
46130: MUL
46131: MUL
46132: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 264
46142: PUSH
46143: LD_INT 5
46145: PUSH
46146: LD_INT 6
46148: PUSH
46149: LD_INT 46
46151: PUSH
46152: LD_INT 44
46154: PUSH
46155: LD_INT 47
46157: PUSH
46158: LD_INT 45
46160: PUSH
46161: LD_INT 28
46163: PUSH
46164: LD_INT 7
46166: PUSH
46167: LD_INT 27
46169: PUSH
46170: LD_INT 29
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: IN
46185: PUSH
46186: LD_VAR 0 1
46190: PPUSH
46191: LD_INT 52
46193: PPUSH
46194: CALL_OW 321
46198: PUSH
46199: LD_INT 2
46201: EQUAL
46202: AND
46203: IFFALSE 46220
// bpoints := bpoints * 1.2 ;
46205: LD_ADDR_VAR 0 10
46209: PUSH
46210: LD_VAR 0 10
46214: PUSH
46215: LD_REAL  1.20000000000000E+0000
46218: MUL
46219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46220: LD_VAR 0 6
46224: PPUSH
46225: CALL_OW 264
46229: PUSH
46230: LD_INT 6
46232: PUSH
46233: LD_INT 46
46235: PUSH
46236: LD_INT 47
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: IN
46244: IFFALSE 46261
// bpoints := bpoints * 1.2 ;
46246: LD_ADDR_VAR 0 10
46250: PUSH
46251: LD_VAR 0 10
46255: PUSH
46256: LD_REAL  1.20000000000000E+0000
46259: MUL
46260: ST_TO_ADDR
// end ; unit_building :
46261: GO 46275
46263: LD_INT 3
46265: DOUBLE
46266: EQUAL
46267: IFTRUE 46271
46269: GO 46274
46271: POP
// ; end ;
46272: GO 46275
46274: POP
// for j = 1 to 3 do
46275: LD_ADDR_VAR 0 7
46279: PUSH
46280: DOUBLE
46281: LD_INT 1
46283: DEC
46284: ST_TO_ADDR
46285: LD_INT 3
46287: PUSH
46288: FOR_TO
46289: IFFALSE 46342
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46291: LD_ADDR_VAR 0 5
46295: PUSH
46296: LD_VAR 0 5
46300: PPUSH
46301: LD_VAR 0 7
46305: PPUSH
46306: LD_VAR 0 5
46310: PUSH
46311: LD_VAR 0 7
46315: ARRAY
46316: PUSH
46317: LD_VAR 0 9
46321: PUSH
46322: LD_VAR 0 7
46326: ARRAY
46327: PUSH
46328: LD_VAR 0 10
46332: MUL
46333: PLUS
46334: PPUSH
46335: CALL_OW 1
46339: ST_TO_ADDR
46340: GO 46288
46342: POP
46343: POP
// end ;
46344: GO 44821
46346: POP
46347: POP
// result := Replace ( result , 4 , tmp ) ;
46348: LD_ADDR_VAR 0 5
46352: PUSH
46353: LD_VAR 0 5
46357: PPUSH
46358: LD_INT 4
46360: PPUSH
46361: LD_VAR 0 8
46365: PPUSH
46366: CALL_OW 1
46370: ST_TO_ADDR
// end ;
46371: LD_VAR 0 5
46375: RET
// export function DangerAtRange ( unit , range ) ; begin
46376: LD_INT 0
46378: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 255
46393: PPUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL_OW 250
46403: PPUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 251
46413: PPUSH
46414: LD_VAR 0 2
46418: PPUSH
46419: CALL 44673 0 4
46423: ST_TO_ADDR
// end ;
46424: LD_VAR 0 3
46428: RET
// export function DangerInArea ( side , area ) ; begin
46429: LD_INT 0
46431: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46432: LD_ADDR_VAR 0 3
46436: PUSH
46437: LD_VAR 0 2
46441: PPUSH
46442: LD_INT 81
46444: PUSH
46445: LD_VAR 0 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PPUSH
46454: CALL_OW 70
46458: ST_TO_ADDR
// end ;
46459: LD_VAR 0 3
46463: RET
// export function IsExtension ( b ) ; begin
46464: LD_INT 0
46466: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46467: LD_ADDR_VAR 0 2
46471: PUSH
46472: LD_VAR 0 1
46476: PUSH
46477: LD_INT 23
46479: PUSH
46480: LD_INT 20
46482: PUSH
46483: LD_INT 22
46485: PUSH
46486: LD_INT 17
46488: PUSH
46489: LD_INT 24
46491: PUSH
46492: LD_INT 21
46494: PUSH
46495: LD_INT 19
46497: PUSH
46498: LD_INT 16
46500: PUSH
46501: LD_INT 25
46503: PUSH
46504: LD_INT 18
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: IN
46519: ST_TO_ADDR
// end ;
46520: LD_VAR 0 2
46524: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46525: LD_INT 0
46527: PPUSH
46528: PPUSH
46529: PPUSH
// result := [ ] ;
46530: LD_ADDR_VAR 0 4
46534: PUSH
46535: EMPTY
46536: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46537: LD_ADDR_VAR 0 5
46541: PUSH
46542: LD_VAR 0 2
46546: PPUSH
46547: LD_INT 21
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PPUSH
46557: CALL_OW 70
46561: ST_TO_ADDR
// if not tmp then
46562: LD_VAR 0 5
46566: NOT
46567: IFFALSE 46571
// exit ;
46569: GO 46635
// if checkLink then
46571: LD_VAR 0 3
46575: IFFALSE 46625
// begin for i in tmp do
46577: LD_ADDR_VAR 0 6
46581: PUSH
46582: LD_VAR 0 5
46586: PUSH
46587: FOR_IN
46588: IFFALSE 46623
// if GetBase ( i ) <> base then
46590: LD_VAR 0 6
46594: PPUSH
46595: CALL_OW 274
46599: PUSH
46600: LD_VAR 0 1
46604: NONEQUAL
46605: IFFALSE 46621
// ComLinkToBase ( base , i ) ;
46607: LD_VAR 0 1
46611: PPUSH
46612: LD_VAR 0 6
46616: PPUSH
46617: CALL_OW 169
46621: GO 46587
46623: POP
46624: POP
// end ; result := tmp ;
46625: LD_ADDR_VAR 0 4
46629: PUSH
46630: LD_VAR 0 5
46634: ST_TO_ADDR
// end ;
46635: LD_VAR 0 4
46639: RET
// export function ComComplete ( units , b ) ; var i ; begin
46640: LD_INT 0
46642: PPUSH
46643: PPUSH
// if not units then
46644: LD_VAR 0 1
46648: NOT
46649: IFFALSE 46653
// exit ;
46651: GO 46743
// for i in units do
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_VAR 0 1
46662: PUSH
46663: FOR_IN
46664: IFFALSE 46741
// if BuildingStatus ( b ) = bs_build then
46666: LD_VAR 0 2
46670: PPUSH
46671: CALL_OW 461
46675: PUSH
46676: LD_INT 1
46678: EQUAL
46679: IFFALSE 46739
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46681: LD_VAR 0 4
46685: PPUSH
46686: LD_STRING h
46688: PUSH
46689: LD_VAR 0 2
46693: PPUSH
46694: CALL_OW 250
46698: PUSH
46699: LD_VAR 0 2
46703: PPUSH
46704: CALL_OW 251
46708: PUSH
46709: LD_VAR 0 2
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: PPUSH
46735: CALL_OW 446
46739: GO 46663
46741: POP
46742: POP
// end ;
46743: LD_VAR 0 3
46747: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46748: LD_INT 0
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46756: LD_VAR 0 1
46760: NOT
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 263
46771: PUSH
46772: LD_INT 2
46774: NONEQUAL
46775: OR
46776: IFFALSE 46780
// exit ;
46778: GO 47096
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46780: LD_ADDR_VAR 0 6
46784: PUSH
46785: LD_INT 22
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 255
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 30
46807: PUSH
46808: LD_INT 36
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 34
46817: PUSH
46818: LD_INT 31
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PPUSH
46834: CALL_OW 69
46838: ST_TO_ADDR
// if not tmp then
46839: LD_VAR 0 6
46843: NOT
46844: IFFALSE 46848
// exit ;
46846: GO 47096
// result := [ ] ;
46848: LD_ADDR_VAR 0 2
46852: PUSH
46853: EMPTY
46854: ST_TO_ADDR
// for i in tmp do
46855: LD_ADDR_VAR 0 3
46859: PUSH
46860: LD_VAR 0 6
46864: PUSH
46865: FOR_IN
46866: IFFALSE 46937
// begin t := UnitsInside ( i ) ;
46868: LD_ADDR_VAR 0 4
46872: PUSH
46873: LD_VAR 0 3
46877: PPUSH
46878: CALL_OW 313
46882: ST_TO_ADDR
// if t then
46883: LD_VAR 0 4
46887: IFFALSE 46935
// for j in t do
46889: LD_ADDR_VAR 0 7
46893: PUSH
46894: LD_VAR 0 4
46898: PUSH
46899: FOR_IN
46900: IFFALSE 46933
// result := Replace ( result , result + 1 , j ) ;
46902: LD_ADDR_VAR 0 2
46906: PUSH
46907: LD_VAR 0 2
46911: PPUSH
46912: LD_VAR 0 2
46916: PUSH
46917: LD_INT 1
46919: PLUS
46920: PPUSH
46921: LD_VAR 0 7
46925: PPUSH
46926: CALL_OW 1
46930: ST_TO_ADDR
46931: GO 46899
46933: POP
46934: POP
// end ;
46935: GO 46865
46937: POP
46938: POP
// if not result then
46939: LD_VAR 0 2
46943: NOT
46944: IFFALSE 46948
// exit ;
46946: GO 47096
// mech := result [ 1 ] ;
46948: LD_ADDR_VAR 0 5
46952: PUSH
46953: LD_VAR 0 2
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: ST_TO_ADDR
// if result > 1 then
46962: LD_VAR 0 2
46966: PUSH
46967: LD_INT 1
46969: GREATER
46970: IFFALSE 47082
// begin for i = 2 to result do
46972: LD_ADDR_VAR 0 3
46976: PUSH
46977: DOUBLE
46978: LD_INT 2
46980: DEC
46981: ST_TO_ADDR
46982: LD_VAR 0 2
46986: PUSH
46987: FOR_TO
46988: IFFALSE 47080
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46990: LD_ADDR_VAR 0 4
46994: PUSH
46995: LD_VAR 0 2
46999: PUSH
47000: LD_VAR 0 3
47004: ARRAY
47005: PPUSH
47006: LD_INT 3
47008: PPUSH
47009: CALL_OW 259
47013: PUSH
47014: LD_VAR 0 2
47018: PUSH
47019: LD_VAR 0 3
47023: ARRAY
47024: PPUSH
47025: CALL_OW 432
47029: MINUS
47030: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47031: LD_VAR 0 4
47035: PUSH
47036: LD_VAR 0 5
47040: PPUSH
47041: LD_INT 3
47043: PPUSH
47044: CALL_OW 259
47048: PUSH
47049: LD_VAR 0 5
47053: PPUSH
47054: CALL_OW 432
47058: MINUS
47059: GREATEREQUAL
47060: IFFALSE 47078
// mech := result [ i ] ;
47062: LD_ADDR_VAR 0 5
47066: PUSH
47067: LD_VAR 0 2
47071: PUSH
47072: LD_VAR 0 3
47076: ARRAY
47077: ST_TO_ADDR
// end ;
47078: GO 46987
47080: POP
47081: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47082: LD_VAR 0 1
47086: PPUSH
47087: LD_VAR 0 5
47091: PPUSH
47092: CALL_OW 135
// end ;
47096: LD_VAR 0 2
47100: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47101: LD_INT 0
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
// result := [ ] ;
47116: LD_ADDR_VAR 0 7
47120: PUSH
47121: EMPTY
47122: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47123: LD_VAR 0 1
47127: PPUSH
47128: CALL_OW 266
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: IN
47143: NOT
47144: IFFALSE 47148
// exit ;
47146: GO 48782
// if name then
47148: LD_VAR 0 3
47152: IFFALSE 47168
// SetBName ( base_dep , name ) ;
47154: LD_VAR 0 1
47158: PPUSH
47159: LD_VAR 0 3
47163: PPUSH
47164: CALL_OW 500
// base := GetBase ( base_dep ) ;
47168: LD_ADDR_VAR 0 15
47172: PUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: CALL_OW 274
47182: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47183: LD_ADDR_VAR 0 16
47187: PUSH
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 255
47197: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47198: LD_ADDR_VAR 0 17
47202: PUSH
47203: LD_VAR 0 1
47207: PPUSH
47208: CALL_OW 248
47212: ST_TO_ADDR
// if sources then
47213: LD_VAR 0 5
47217: IFFALSE 47264
// for i = 1 to 3 do
47219: LD_ADDR_VAR 0 8
47223: PUSH
47224: DOUBLE
47225: LD_INT 1
47227: DEC
47228: ST_TO_ADDR
47229: LD_INT 3
47231: PUSH
47232: FOR_TO
47233: IFFALSE 47262
// AddResourceType ( base , i , sources [ i ] ) ;
47235: LD_VAR 0 15
47239: PPUSH
47240: LD_VAR 0 8
47244: PPUSH
47245: LD_VAR 0 5
47249: PUSH
47250: LD_VAR 0 8
47254: ARRAY
47255: PPUSH
47256: CALL_OW 276
47260: GO 47232
47262: POP
47263: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47264: LD_ADDR_VAR 0 18
47268: PUSH
47269: LD_VAR 0 15
47273: PPUSH
47274: LD_VAR 0 2
47278: PPUSH
47279: LD_INT 1
47281: PPUSH
47282: CALL 46525 0 3
47286: ST_TO_ADDR
// InitHc ;
47287: CALL_OW 19
// InitUc ;
47291: CALL_OW 18
// uc_side := side ;
47295: LD_ADDR_OWVAR 20
47299: PUSH
47300: LD_VAR 0 16
47304: ST_TO_ADDR
// uc_nation := nation ;
47305: LD_ADDR_OWVAR 21
47309: PUSH
47310: LD_VAR 0 17
47314: ST_TO_ADDR
// if buildings then
47315: LD_VAR 0 18
47319: IFFALSE 48641
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47321: LD_ADDR_VAR 0 19
47325: PUSH
47326: LD_VAR 0 18
47330: PPUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 30
47336: PUSH
47337: LD_INT 29
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 30
47346: PUSH
47347: LD_INT 30
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: PPUSH
47359: CALL_OW 72
47363: ST_TO_ADDR
// if tmp then
47364: LD_VAR 0 19
47368: IFFALSE 47416
// for i in tmp do
47370: LD_ADDR_VAR 0 8
47374: PUSH
47375: LD_VAR 0 19
47379: PUSH
47380: FOR_IN
47381: IFFALSE 47414
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47383: LD_VAR 0 8
47387: PPUSH
47388: CALL_OW 250
47392: PPUSH
47393: LD_VAR 0 8
47397: PPUSH
47398: CALL_OW 251
47402: PPUSH
47403: LD_VAR 0 16
47407: PPUSH
47408: CALL_OW 441
47412: GO 47380
47414: POP
47415: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47416: LD_VAR 0 18
47420: PPUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 30
47426: PUSH
47427: LD_INT 32
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 30
47436: PUSH
47437: LD_INT 33
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: PPUSH
47449: CALL_OW 72
47453: IFFALSE 47541
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47455: LD_ADDR_VAR 0 8
47459: PUSH
47460: LD_VAR 0 18
47464: PPUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 30
47470: PUSH
47471: LD_INT 32
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 30
47480: PUSH
47481: LD_INT 33
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: PPUSH
47493: CALL_OW 72
47497: PUSH
47498: FOR_IN
47499: IFFALSE 47539
// begin if not GetBWeapon ( i ) then
47501: LD_VAR 0 8
47505: PPUSH
47506: CALL_OW 269
47510: NOT
47511: IFFALSE 47537
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47513: LD_VAR 0 8
47517: PPUSH
47518: LD_VAR 0 8
47522: PPUSH
47523: LD_VAR 0 2
47527: PPUSH
47528: CALL 48787 0 2
47532: PPUSH
47533: CALL_OW 431
// end ;
47537: GO 47498
47539: POP
47540: POP
// end ; for i = 1 to personel do
47541: LD_ADDR_VAR 0 8
47545: PUSH
47546: DOUBLE
47547: LD_INT 1
47549: DEC
47550: ST_TO_ADDR
47551: LD_VAR 0 6
47555: PUSH
47556: FOR_TO
47557: IFFALSE 48621
// begin if i > 4 then
47559: LD_VAR 0 8
47563: PUSH
47564: LD_INT 4
47566: GREATER
47567: IFFALSE 47571
// break ;
47569: GO 48621
// case i of 1 :
47571: LD_VAR 0 8
47575: PUSH
47576: LD_INT 1
47578: DOUBLE
47579: EQUAL
47580: IFTRUE 47584
47582: GO 47664
47584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47585: LD_ADDR_VAR 0 12
47589: PUSH
47590: LD_VAR 0 18
47594: PPUSH
47595: LD_INT 22
47597: PUSH
47598: LD_VAR 0 16
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 58
47609: PUSH
47610: EMPTY
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 30
47618: PUSH
47619: LD_INT 32
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 4
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 30
47638: PUSH
47639: LD_INT 5
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 72
47661: ST_TO_ADDR
47662: GO 47886
47664: LD_INT 2
47666: DOUBLE
47667: EQUAL
47668: IFTRUE 47672
47670: GO 47734
47672: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47673: LD_ADDR_VAR 0 12
47677: PUSH
47678: LD_VAR 0 18
47682: PPUSH
47683: LD_INT 22
47685: PUSH
47686: LD_VAR 0 16
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 30
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 30
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PPUSH
47727: CALL_OW 72
47731: ST_TO_ADDR
47732: GO 47886
47734: LD_INT 3
47736: DOUBLE
47737: EQUAL
47738: IFTRUE 47742
47740: GO 47804
47742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47743: LD_ADDR_VAR 0 12
47747: PUSH
47748: LD_VAR 0 18
47752: PPUSH
47753: LD_INT 22
47755: PUSH
47756: LD_VAR 0 16
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 30
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 30
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PPUSH
47797: CALL_OW 72
47801: ST_TO_ADDR
47802: GO 47886
47804: LD_INT 4
47806: DOUBLE
47807: EQUAL
47808: IFTRUE 47812
47810: GO 47885
47812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47813: LD_ADDR_VAR 0 12
47817: PUSH
47818: LD_VAR 0 18
47822: PPUSH
47823: LD_INT 22
47825: PUSH
47826: LD_VAR 0 16
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: LD_INT 30
47840: PUSH
47841: LD_INT 6
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 30
47850: PUSH
47851: LD_INT 7
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 30
47860: PUSH
47861: LD_INT 8
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PPUSH
47878: CALL_OW 72
47882: ST_TO_ADDR
47883: GO 47886
47885: POP
// if i = 1 then
47886: LD_VAR 0 8
47890: PUSH
47891: LD_INT 1
47893: EQUAL
47894: IFFALSE 48005
// begin tmp := [ ] ;
47896: LD_ADDR_VAR 0 19
47900: PUSH
47901: EMPTY
47902: ST_TO_ADDR
// for j in f do
47903: LD_ADDR_VAR 0 9
47907: PUSH
47908: LD_VAR 0 12
47912: PUSH
47913: FOR_IN
47914: IFFALSE 47987
// if GetBType ( j ) = b_bunker then
47916: LD_VAR 0 9
47920: PPUSH
47921: CALL_OW 266
47925: PUSH
47926: LD_INT 32
47928: EQUAL
47929: IFFALSE 47956
// tmp := Insert ( tmp , 1 , j ) else
47931: LD_ADDR_VAR 0 19
47935: PUSH
47936: LD_VAR 0 19
47940: PPUSH
47941: LD_INT 1
47943: PPUSH
47944: LD_VAR 0 9
47948: PPUSH
47949: CALL_OW 2
47953: ST_TO_ADDR
47954: GO 47985
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47956: LD_ADDR_VAR 0 19
47960: PUSH
47961: LD_VAR 0 19
47965: PPUSH
47966: LD_VAR 0 19
47970: PUSH
47971: LD_INT 1
47973: PLUS
47974: PPUSH
47975: LD_VAR 0 9
47979: PPUSH
47980: CALL_OW 2
47984: ST_TO_ADDR
47985: GO 47913
47987: POP
47988: POP
// if tmp then
47989: LD_VAR 0 19
47993: IFFALSE 48005
// f := tmp ;
47995: LD_ADDR_VAR 0 12
47999: PUSH
48000: LD_VAR 0 19
48004: ST_TO_ADDR
// end ; x := personel [ i ] ;
48005: LD_ADDR_VAR 0 13
48009: PUSH
48010: LD_VAR 0 6
48014: PUSH
48015: LD_VAR 0 8
48019: ARRAY
48020: ST_TO_ADDR
// if x = - 1 then
48021: LD_VAR 0 13
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: EQUAL
48030: IFFALSE 48239
// begin for j in f do
48032: LD_ADDR_VAR 0 9
48036: PUSH
48037: LD_VAR 0 12
48041: PUSH
48042: FOR_IN
48043: IFFALSE 48235
// repeat InitHc ;
48045: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48049: LD_VAR 0 9
48053: PPUSH
48054: CALL_OW 266
48058: PUSH
48059: LD_INT 5
48061: EQUAL
48062: IFFALSE 48132
// begin if UnitsInside ( j ) < 3 then
48064: LD_VAR 0 9
48068: PPUSH
48069: CALL_OW 313
48073: PUSH
48074: LD_INT 3
48076: LESS
48077: IFFALSE 48113
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48079: LD_INT 0
48081: PPUSH
48082: LD_INT 5
48084: PUSH
48085: LD_INT 8
48087: PUSH
48088: LD_INT 9
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: PUSH
48096: LD_VAR 0 17
48100: ARRAY
48101: PPUSH
48102: LD_VAR 0 4
48106: PPUSH
48107: CALL_OW 380
48111: GO 48130
// PrepareHuman ( false , i , skill ) ;
48113: LD_INT 0
48115: PPUSH
48116: LD_VAR 0 8
48120: PPUSH
48121: LD_VAR 0 4
48125: PPUSH
48126: CALL_OW 380
// end else
48130: GO 48149
// PrepareHuman ( false , i , skill ) ;
48132: LD_INT 0
48134: PPUSH
48135: LD_VAR 0 8
48139: PPUSH
48140: LD_VAR 0 4
48144: PPUSH
48145: CALL_OW 380
// un := CreateHuman ;
48149: LD_ADDR_VAR 0 14
48153: PUSH
48154: CALL_OW 44
48158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48159: LD_ADDR_VAR 0 7
48163: PUSH
48164: LD_VAR 0 7
48168: PPUSH
48169: LD_INT 1
48171: PPUSH
48172: LD_VAR 0 14
48176: PPUSH
48177: CALL_OW 2
48181: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48182: LD_VAR 0 14
48186: PPUSH
48187: LD_VAR 0 9
48191: PPUSH
48192: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48196: LD_VAR 0 9
48200: PPUSH
48201: CALL_OW 313
48205: PUSH
48206: LD_INT 6
48208: EQUAL
48209: PUSH
48210: LD_VAR 0 9
48214: PPUSH
48215: CALL_OW 266
48219: PUSH
48220: LD_INT 32
48222: PUSH
48223: LD_INT 31
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: IN
48230: OR
48231: IFFALSE 48045
48233: GO 48042
48235: POP
48236: POP
// end else
48237: GO 48619
// for j = 1 to x do
48239: LD_ADDR_VAR 0 9
48243: PUSH
48244: DOUBLE
48245: LD_INT 1
48247: DEC
48248: ST_TO_ADDR
48249: LD_VAR 0 13
48253: PUSH
48254: FOR_TO
48255: IFFALSE 48617
// begin InitHc ;
48257: CALL_OW 19
// if not f then
48261: LD_VAR 0 12
48265: NOT
48266: IFFALSE 48355
// begin PrepareHuman ( false , i , skill ) ;
48268: LD_INT 0
48270: PPUSH
48271: LD_VAR 0 8
48275: PPUSH
48276: LD_VAR 0 4
48280: PPUSH
48281: CALL_OW 380
// un := CreateHuman ;
48285: LD_ADDR_VAR 0 14
48289: PUSH
48290: CALL_OW 44
48294: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48295: LD_ADDR_VAR 0 7
48299: PUSH
48300: LD_VAR 0 7
48304: PPUSH
48305: LD_INT 1
48307: PPUSH
48308: LD_VAR 0 14
48312: PPUSH
48313: CALL_OW 2
48317: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48318: LD_VAR 0 14
48322: PPUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 250
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 251
48342: PPUSH
48343: LD_INT 10
48345: PPUSH
48346: LD_INT 0
48348: PPUSH
48349: CALL_OW 50
// continue ;
48353: GO 48254
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48355: LD_VAR 0 12
48359: PUSH
48360: LD_INT 1
48362: ARRAY
48363: PPUSH
48364: CALL_OW 313
48368: PUSH
48369: LD_VAR 0 12
48373: PUSH
48374: LD_INT 1
48376: ARRAY
48377: PPUSH
48378: CALL_OW 266
48382: PUSH
48383: LD_INT 32
48385: PUSH
48386: LD_INT 31
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: IN
48393: AND
48394: PUSH
48395: LD_VAR 0 12
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: PPUSH
48404: CALL_OW 313
48408: PUSH
48409: LD_INT 6
48411: EQUAL
48412: OR
48413: IFFALSE 48433
// f := Delete ( f , 1 ) ;
48415: LD_ADDR_VAR 0 12
48419: PUSH
48420: LD_VAR 0 12
48424: PPUSH
48425: LD_INT 1
48427: PPUSH
48428: CALL_OW 3
48432: ST_TO_ADDR
// if not f then
48433: LD_VAR 0 12
48437: NOT
48438: IFFALSE 48456
// begin x := x + 2 ;
48440: LD_ADDR_VAR 0 13
48444: PUSH
48445: LD_VAR 0 13
48449: PUSH
48450: LD_INT 2
48452: PLUS
48453: ST_TO_ADDR
// continue ;
48454: GO 48254
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48456: LD_VAR 0 12
48460: PUSH
48461: LD_INT 1
48463: ARRAY
48464: PPUSH
48465: CALL_OW 266
48469: PUSH
48470: LD_INT 5
48472: EQUAL
48473: IFFALSE 48547
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48475: LD_VAR 0 12
48479: PUSH
48480: LD_INT 1
48482: ARRAY
48483: PPUSH
48484: CALL_OW 313
48488: PUSH
48489: LD_INT 3
48491: LESS
48492: IFFALSE 48528
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48494: LD_INT 0
48496: PPUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 8
48502: PUSH
48503: LD_INT 9
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: PUSH
48511: LD_VAR 0 17
48515: ARRAY
48516: PPUSH
48517: LD_VAR 0 4
48521: PPUSH
48522: CALL_OW 380
48526: GO 48545
// PrepareHuman ( false , i , skill ) ;
48528: LD_INT 0
48530: PPUSH
48531: LD_VAR 0 8
48535: PPUSH
48536: LD_VAR 0 4
48540: PPUSH
48541: CALL_OW 380
// end else
48545: GO 48564
// PrepareHuman ( false , i , skill ) ;
48547: LD_INT 0
48549: PPUSH
48550: LD_VAR 0 8
48554: PPUSH
48555: LD_VAR 0 4
48559: PPUSH
48560: CALL_OW 380
// un := CreateHuman ;
48564: LD_ADDR_VAR 0 14
48568: PUSH
48569: CALL_OW 44
48573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48574: LD_ADDR_VAR 0 7
48578: PUSH
48579: LD_VAR 0 7
48583: PPUSH
48584: LD_INT 1
48586: PPUSH
48587: LD_VAR 0 14
48591: PPUSH
48592: CALL_OW 2
48596: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48597: LD_VAR 0 14
48601: PPUSH
48602: LD_VAR 0 12
48606: PUSH
48607: LD_INT 1
48609: ARRAY
48610: PPUSH
48611: CALL_OW 52
// end ;
48615: GO 48254
48617: POP
48618: POP
// end ;
48619: GO 47556
48621: POP
48622: POP
// result := result ^ buildings ;
48623: LD_ADDR_VAR 0 7
48627: PUSH
48628: LD_VAR 0 7
48632: PUSH
48633: LD_VAR 0 18
48637: ADD
48638: ST_TO_ADDR
// end else
48639: GO 48782
// begin for i = 1 to personel do
48641: LD_ADDR_VAR 0 8
48645: PUSH
48646: DOUBLE
48647: LD_INT 1
48649: DEC
48650: ST_TO_ADDR
48651: LD_VAR 0 6
48655: PUSH
48656: FOR_TO
48657: IFFALSE 48780
// begin if i > 4 then
48659: LD_VAR 0 8
48663: PUSH
48664: LD_INT 4
48666: GREATER
48667: IFFALSE 48671
// break ;
48669: GO 48780
// x := personel [ i ] ;
48671: LD_ADDR_VAR 0 13
48675: PUSH
48676: LD_VAR 0 6
48680: PUSH
48681: LD_VAR 0 8
48685: ARRAY
48686: ST_TO_ADDR
// if x = - 1 then
48687: LD_VAR 0 13
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: EQUAL
48696: IFFALSE 48700
// continue ;
48698: GO 48656
// PrepareHuman ( false , i , skill ) ;
48700: LD_INT 0
48702: PPUSH
48703: LD_VAR 0 8
48707: PPUSH
48708: LD_VAR 0 4
48712: PPUSH
48713: CALL_OW 380
// un := CreateHuman ;
48717: LD_ADDR_VAR 0 14
48721: PUSH
48722: CALL_OW 44
48726: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48727: LD_VAR 0 14
48731: PPUSH
48732: LD_VAR 0 1
48736: PPUSH
48737: CALL_OW 250
48741: PPUSH
48742: LD_VAR 0 1
48746: PPUSH
48747: CALL_OW 251
48751: PPUSH
48752: LD_INT 10
48754: PPUSH
48755: LD_INT 0
48757: PPUSH
48758: CALL_OW 50
// result := result ^ un ;
48762: LD_ADDR_VAR 0 7
48766: PUSH
48767: LD_VAR 0 7
48771: PUSH
48772: LD_VAR 0 14
48776: ADD
48777: ST_TO_ADDR
// end ;
48778: GO 48656
48780: POP
48781: POP
// end ; end ;
48782: LD_VAR 0 7
48786: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48787: LD_INT 0
48789: PPUSH
48790: PPUSH
48791: PPUSH
48792: PPUSH
48793: PPUSH
48794: PPUSH
48795: PPUSH
48796: PPUSH
48797: PPUSH
48798: PPUSH
48799: PPUSH
48800: PPUSH
48801: PPUSH
48802: PPUSH
48803: PPUSH
48804: PPUSH
// result := false ;
48805: LD_ADDR_VAR 0 3
48809: PUSH
48810: LD_INT 0
48812: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48813: LD_VAR 0 1
48817: NOT
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 266
48828: PUSH
48829: LD_INT 32
48831: PUSH
48832: LD_INT 33
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: IN
48839: NOT
48840: OR
48841: IFFALSE 48845
// exit ;
48843: GO 49954
// nat := GetNation ( tower ) ;
48845: LD_ADDR_VAR 0 12
48849: PUSH
48850: LD_VAR 0 1
48854: PPUSH
48855: CALL_OW 248
48859: ST_TO_ADDR
// side := GetSide ( tower ) ;
48860: LD_ADDR_VAR 0 16
48864: PUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: CALL_OW 255
48874: ST_TO_ADDR
// x := GetX ( tower ) ;
48875: LD_ADDR_VAR 0 10
48879: PUSH
48880: LD_VAR 0 1
48884: PPUSH
48885: CALL_OW 250
48889: ST_TO_ADDR
// y := GetY ( tower ) ;
48890: LD_ADDR_VAR 0 11
48894: PUSH
48895: LD_VAR 0 1
48899: PPUSH
48900: CALL_OW 251
48904: ST_TO_ADDR
// if not x or not y then
48905: LD_VAR 0 10
48909: NOT
48910: PUSH
48911: LD_VAR 0 11
48915: NOT
48916: OR
48917: IFFALSE 48921
// exit ;
48919: GO 49954
// weapon := 0 ;
48921: LD_ADDR_VAR 0 18
48925: PUSH
48926: LD_INT 0
48928: ST_TO_ADDR
// fac_list := [ ] ;
48929: LD_ADDR_VAR 0 17
48933: PUSH
48934: EMPTY
48935: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48936: LD_ADDR_VAR 0 6
48940: PUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: CALL_OW 274
48950: PPUSH
48951: LD_VAR 0 2
48955: PPUSH
48956: LD_INT 0
48958: PPUSH
48959: CALL 46525 0 3
48963: PPUSH
48964: LD_INT 30
48966: PUSH
48967: LD_INT 3
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PPUSH
48974: CALL_OW 72
48978: ST_TO_ADDR
// if not factories then
48979: LD_VAR 0 6
48983: NOT
48984: IFFALSE 48988
// exit ;
48986: GO 49954
// for i in factories do
48988: LD_ADDR_VAR 0 8
48992: PUSH
48993: LD_VAR 0 6
48997: PUSH
48998: FOR_IN
48999: IFFALSE 49024
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49001: LD_ADDR_VAR 0 17
49005: PUSH
49006: LD_VAR 0 17
49010: PUSH
49011: LD_VAR 0 8
49015: PPUSH
49016: CALL_OW 478
49020: UNION
49021: ST_TO_ADDR
49022: GO 48998
49024: POP
49025: POP
// if not fac_list then
49026: LD_VAR 0 17
49030: NOT
49031: IFFALSE 49035
// exit ;
49033: GO 49954
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49035: LD_ADDR_VAR 0 5
49039: PUSH
49040: LD_INT 4
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: LD_INT 9
49048: PUSH
49049: LD_INT 10
49051: PUSH
49052: LD_INT 6
49054: PUSH
49055: LD_INT 7
49057: PUSH
49058: LD_INT 11
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 27
49072: PUSH
49073: LD_INT 28
49075: PUSH
49076: LD_INT 26
49078: PUSH
49079: LD_INT 30
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 43
49090: PUSH
49091: LD_INT 44
49093: PUSH
49094: LD_INT 46
49096: PUSH
49097: LD_INT 45
49099: PUSH
49100: LD_INT 47
49102: PUSH
49103: LD_INT 49
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: PUSH
49119: LD_VAR 0 12
49123: ARRAY
49124: ST_TO_ADDR
// list := list isect fac_list ;
49125: LD_ADDR_VAR 0 5
49129: PUSH
49130: LD_VAR 0 5
49134: PUSH
49135: LD_VAR 0 17
49139: ISECT
49140: ST_TO_ADDR
// if not list then
49141: LD_VAR 0 5
49145: NOT
49146: IFFALSE 49150
// exit ;
49148: GO 49954
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49150: LD_VAR 0 12
49154: PUSH
49155: LD_INT 3
49157: EQUAL
49158: PUSH
49159: LD_INT 49
49161: PUSH
49162: LD_VAR 0 5
49166: IN
49167: AND
49168: PUSH
49169: LD_INT 31
49171: PPUSH
49172: LD_VAR 0 16
49176: PPUSH
49177: CALL_OW 321
49181: PUSH
49182: LD_INT 2
49184: EQUAL
49185: AND
49186: IFFALSE 49246
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49188: LD_INT 22
49190: PUSH
49191: LD_VAR 0 16
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 35
49202: PUSH
49203: LD_INT 49
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 91
49212: PUSH
49213: LD_VAR 0 1
49217: PUSH
49218: LD_INT 10
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: PPUSH
49231: CALL_OW 69
49235: NOT
49236: IFFALSE 49246
// weapon := ru_time_lapser ;
49238: LD_ADDR_VAR 0 18
49242: PUSH
49243: LD_INT 49
49245: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49246: LD_VAR 0 12
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: IN
49261: PUSH
49262: LD_INT 11
49264: PUSH
49265: LD_VAR 0 5
49269: IN
49270: PUSH
49271: LD_INT 30
49273: PUSH
49274: LD_VAR 0 5
49278: IN
49279: OR
49280: AND
49281: PUSH
49282: LD_INT 6
49284: PPUSH
49285: LD_VAR 0 16
49289: PPUSH
49290: CALL_OW 321
49294: PUSH
49295: LD_INT 2
49297: EQUAL
49298: AND
49299: IFFALSE 49464
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49301: LD_INT 22
49303: PUSH
49304: LD_VAR 0 16
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 35
49318: PUSH
49319: LD_INT 11
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 35
49328: PUSH
49329: LD_INT 30
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 91
49343: PUSH
49344: LD_VAR 0 1
49348: PUSH
49349: LD_INT 18
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: PPUSH
49362: CALL_OW 69
49366: NOT
49367: PUSH
49368: LD_INT 22
49370: PUSH
49371: LD_VAR 0 16
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 30
49385: PUSH
49386: LD_INT 32
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 30
49395: PUSH
49396: LD_INT 33
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 91
49410: PUSH
49411: LD_VAR 0 1
49415: PUSH
49416: LD_INT 12
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: PPUSH
49432: CALL_OW 69
49436: PUSH
49437: LD_INT 2
49439: GREATER
49440: AND
49441: IFFALSE 49464
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49443: LD_ADDR_VAR 0 18
49447: PUSH
49448: LD_INT 11
49450: PUSH
49451: LD_INT 30
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_VAR 0 12
49462: ARRAY
49463: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49464: LD_VAR 0 18
49468: NOT
49469: PUSH
49470: LD_INT 40
49472: PPUSH
49473: LD_VAR 0 16
49477: PPUSH
49478: CALL_OW 321
49482: PUSH
49483: LD_INT 2
49485: EQUAL
49486: AND
49487: PUSH
49488: LD_INT 7
49490: PUSH
49491: LD_VAR 0 5
49495: IN
49496: PUSH
49497: LD_INT 28
49499: PUSH
49500: LD_VAR 0 5
49504: IN
49505: OR
49506: PUSH
49507: LD_INT 45
49509: PUSH
49510: LD_VAR 0 5
49514: IN
49515: OR
49516: AND
49517: IFFALSE 49771
// begin hex := GetHexInfo ( x , y ) ;
49519: LD_ADDR_VAR 0 4
49523: PUSH
49524: LD_VAR 0 10
49528: PPUSH
49529: LD_VAR 0 11
49533: PPUSH
49534: CALL_OW 546
49538: ST_TO_ADDR
// if hex [ 1 ] then
49539: LD_VAR 0 4
49543: PUSH
49544: LD_INT 1
49546: ARRAY
49547: IFFALSE 49551
// exit ;
49549: GO 49954
// height := hex [ 2 ] ;
49551: LD_ADDR_VAR 0 15
49555: PUSH
49556: LD_VAR 0 4
49560: PUSH
49561: LD_INT 2
49563: ARRAY
49564: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49565: LD_ADDR_VAR 0 14
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: LD_INT 5
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// for i in tmp do
49588: LD_ADDR_VAR 0 8
49592: PUSH
49593: LD_VAR 0 14
49597: PUSH
49598: FOR_IN
49599: IFFALSE 49769
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49601: LD_ADDR_VAR 0 9
49605: PUSH
49606: LD_VAR 0 10
49610: PPUSH
49611: LD_VAR 0 8
49615: PPUSH
49616: LD_INT 5
49618: PPUSH
49619: CALL_OW 272
49623: PUSH
49624: LD_VAR 0 11
49628: PPUSH
49629: LD_VAR 0 8
49633: PPUSH
49634: LD_INT 5
49636: PPUSH
49637: CALL_OW 273
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49646: LD_VAR 0 9
49650: PUSH
49651: LD_INT 1
49653: ARRAY
49654: PPUSH
49655: LD_VAR 0 9
49659: PUSH
49660: LD_INT 2
49662: ARRAY
49663: PPUSH
49664: CALL_OW 488
49668: IFFALSE 49767
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49670: LD_ADDR_VAR 0 4
49674: PUSH
49675: LD_VAR 0 9
49679: PUSH
49680: LD_INT 1
49682: ARRAY
49683: PPUSH
49684: LD_VAR 0 9
49688: PUSH
49689: LD_INT 2
49691: ARRAY
49692: PPUSH
49693: CALL_OW 546
49697: ST_TO_ADDR
// if hex [ 1 ] then
49698: LD_VAR 0 4
49702: PUSH
49703: LD_INT 1
49705: ARRAY
49706: IFFALSE 49710
// continue ;
49708: GO 49598
// h := hex [ 2 ] ;
49710: LD_ADDR_VAR 0 13
49714: PUSH
49715: LD_VAR 0 4
49719: PUSH
49720: LD_INT 2
49722: ARRAY
49723: ST_TO_ADDR
// if h + 7 < height then
49724: LD_VAR 0 13
49728: PUSH
49729: LD_INT 7
49731: PLUS
49732: PUSH
49733: LD_VAR 0 15
49737: LESS
49738: IFFALSE 49767
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49740: LD_ADDR_VAR 0 18
49744: PUSH
49745: LD_INT 7
49747: PUSH
49748: LD_INT 28
49750: PUSH
49751: LD_INT 45
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: PUSH
49759: LD_VAR 0 12
49763: ARRAY
49764: ST_TO_ADDR
// break ;
49765: GO 49769
// end ; end ; end ;
49767: GO 49598
49769: POP
49770: POP
// end ; if not weapon then
49771: LD_VAR 0 18
49775: NOT
49776: IFFALSE 49836
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49778: LD_ADDR_VAR 0 5
49782: PUSH
49783: LD_VAR 0 5
49787: PUSH
49788: LD_INT 11
49790: PUSH
49791: LD_INT 30
49793: PUSH
49794: LD_INT 49
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: DIFF
49802: ST_TO_ADDR
// if not list then
49803: LD_VAR 0 5
49807: NOT
49808: IFFALSE 49812
// exit ;
49810: GO 49954
// weapon := list [ rand ( 1 , list ) ] ;
49812: LD_ADDR_VAR 0 18
49816: PUSH
49817: LD_VAR 0 5
49821: PUSH
49822: LD_INT 1
49824: PPUSH
49825: LD_VAR 0 5
49829: PPUSH
49830: CALL_OW 12
49834: ARRAY
49835: ST_TO_ADDR
// end ; if weapon then
49836: LD_VAR 0 18
49840: IFFALSE 49954
// begin tmp := CostOfWeapon ( weapon ) ;
49842: LD_ADDR_VAR 0 14
49846: PUSH
49847: LD_VAR 0 18
49851: PPUSH
49852: CALL_OW 451
49856: ST_TO_ADDR
// j := GetBase ( tower ) ;
49857: LD_ADDR_VAR 0 9
49861: PUSH
49862: LD_VAR 0 1
49866: PPUSH
49867: CALL_OW 274
49871: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49872: LD_VAR 0 9
49876: PPUSH
49877: LD_INT 1
49879: PPUSH
49880: CALL_OW 275
49884: PUSH
49885: LD_VAR 0 14
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: GREATEREQUAL
49894: PUSH
49895: LD_VAR 0 9
49899: PPUSH
49900: LD_INT 2
49902: PPUSH
49903: CALL_OW 275
49907: PUSH
49908: LD_VAR 0 14
49912: PUSH
49913: LD_INT 2
49915: ARRAY
49916: GREATEREQUAL
49917: AND
49918: PUSH
49919: LD_VAR 0 9
49923: PPUSH
49924: LD_INT 3
49926: PPUSH
49927: CALL_OW 275
49931: PUSH
49932: LD_VAR 0 14
49936: PUSH
49937: LD_INT 3
49939: ARRAY
49940: GREATEREQUAL
49941: AND
49942: IFFALSE 49954
// result := weapon ;
49944: LD_ADDR_VAR 0 3
49948: PUSH
49949: LD_VAR 0 18
49953: ST_TO_ADDR
// end ; end ;
49954: LD_VAR 0 3
49958: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49959: LD_INT 0
49961: PPUSH
49962: PPUSH
// result := true ;
49963: LD_ADDR_VAR 0 3
49967: PUSH
49968: LD_INT 1
49970: ST_TO_ADDR
// if array1 = array2 then
49971: LD_VAR 0 1
49975: PUSH
49976: LD_VAR 0 2
49980: EQUAL
49981: IFFALSE 50041
// begin for i = 1 to array1 do
49983: LD_ADDR_VAR 0 4
49987: PUSH
49988: DOUBLE
49989: LD_INT 1
49991: DEC
49992: ST_TO_ADDR
49993: LD_VAR 0 1
49997: PUSH
49998: FOR_TO
49999: IFFALSE 50037
// if array1 [ i ] <> array2 [ i ] then
50001: LD_VAR 0 1
50005: PUSH
50006: LD_VAR 0 4
50010: ARRAY
50011: PUSH
50012: LD_VAR 0 2
50016: PUSH
50017: LD_VAR 0 4
50021: ARRAY
50022: NONEQUAL
50023: IFFALSE 50035
// begin result := false ;
50025: LD_ADDR_VAR 0 3
50029: PUSH
50030: LD_INT 0
50032: ST_TO_ADDR
// break ;
50033: GO 50037
// end ;
50035: GO 49998
50037: POP
50038: POP
// end else
50039: GO 50049
// result := false ;
50041: LD_ADDR_VAR 0 3
50045: PUSH
50046: LD_INT 0
50048: ST_TO_ADDR
// end ;
50049: LD_VAR 0 3
50053: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50054: LD_INT 0
50056: PPUSH
50057: PPUSH
// if not array1 or not array2 then
50058: LD_VAR 0 1
50062: NOT
50063: PUSH
50064: LD_VAR 0 2
50068: NOT
50069: OR
50070: IFFALSE 50074
// exit ;
50072: GO 50138
// result := true ;
50074: LD_ADDR_VAR 0 3
50078: PUSH
50079: LD_INT 1
50081: ST_TO_ADDR
// for i = 1 to array1 do
50082: LD_ADDR_VAR 0 4
50086: PUSH
50087: DOUBLE
50088: LD_INT 1
50090: DEC
50091: ST_TO_ADDR
50092: LD_VAR 0 1
50096: PUSH
50097: FOR_TO
50098: IFFALSE 50136
// if array1 [ i ] <> array2 [ i ] then
50100: LD_VAR 0 1
50104: PUSH
50105: LD_VAR 0 4
50109: ARRAY
50110: PUSH
50111: LD_VAR 0 2
50115: PUSH
50116: LD_VAR 0 4
50120: ARRAY
50121: NONEQUAL
50122: IFFALSE 50134
// begin result := false ;
50124: LD_ADDR_VAR 0 3
50128: PUSH
50129: LD_INT 0
50131: ST_TO_ADDR
// break ;
50132: GO 50136
// end ;
50134: GO 50097
50136: POP
50137: POP
// end ;
50138: LD_VAR 0 3
50142: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50143: LD_INT 0
50145: PPUSH
50146: PPUSH
50147: PPUSH
// pom := GetBase ( fac ) ;
50148: LD_ADDR_VAR 0 5
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 274
50162: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50163: LD_ADDR_VAR 0 4
50167: PUSH
50168: LD_VAR 0 2
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: PPUSH
50177: LD_VAR 0 2
50181: PUSH
50182: LD_INT 2
50184: ARRAY
50185: PPUSH
50186: LD_VAR 0 2
50190: PUSH
50191: LD_INT 3
50193: ARRAY
50194: PPUSH
50195: LD_VAR 0 2
50199: PUSH
50200: LD_INT 4
50202: ARRAY
50203: PPUSH
50204: CALL_OW 449
50208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50209: LD_ADDR_VAR 0 3
50213: PUSH
50214: LD_VAR 0 5
50218: PPUSH
50219: LD_INT 1
50221: PPUSH
50222: CALL_OW 275
50226: PUSH
50227: LD_VAR 0 4
50231: PUSH
50232: LD_INT 1
50234: ARRAY
50235: GREATEREQUAL
50236: PUSH
50237: LD_VAR 0 5
50241: PPUSH
50242: LD_INT 2
50244: PPUSH
50245: CALL_OW 275
50249: PUSH
50250: LD_VAR 0 4
50254: PUSH
50255: LD_INT 2
50257: ARRAY
50258: GREATEREQUAL
50259: AND
50260: PUSH
50261: LD_VAR 0 5
50265: PPUSH
50266: LD_INT 3
50268: PPUSH
50269: CALL_OW 275
50273: PUSH
50274: LD_VAR 0 4
50278: PUSH
50279: LD_INT 3
50281: ARRAY
50282: GREATEREQUAL
50283: AND
50284: ST_TO_ADDR
// end ;
50285: LD_VAR 0 3
50289: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50290: LD_INT 0
50292: PPUSH
50293: PPUSH
50294: PPUSH
50295: PPUSH
// pom := GetBase ( building ) ;
50296: LD_ADDR_VAR 0 3
50300: PUSH
50301: LD_VAR 0 1
50305: PPUSH
50306: CALL_OW 274
50310: ST_TO_ADDR
// if not pom then
50311: LD_VAR 0 3
50315: NOT
50316: IFFALSE 50320
// exit ;
50318: GO 50490
// btype := GetBType ( building ) ;
50320: LD_ADDR_VAR 0 5
50324: PUSH
50325: LD_VAR 0 1
50329: PPUSH
50330: CALL_OW 266
50334: ST_TO_ADDR
// if btype = b_armoury then
50335: LD_VAR 0 5
50339: PUSH
50340: LD_INT 4
50342: EQUAL
50343: IFFALSE 50353
// btype := b_barracks ;
50345: LD_ADDR_VAR 0 5
50349: PUSH
50350: LD_INT 5
50352: ST_TO_ADDR
// if btype = b_depot then
50353: LD_VAR 0 5
50357: PUSH
50358: LD_INT 0
50360: EQUAL
50361: IFFALSE 50371
// btype := b_warehouse ;
50363: LD_ADDR_VAR 0 5
50367: PUSH
50368: LD_INT 1
50370: ST_TO_ADDR
// if btype = b_workshop then
50371: LD_VAR 0 5
50375: PUSH
50376: LD_INT 2
50378: EQUAL
50379: IFFALSE 50389
// btype := b_factory ;
50381: LD_ADDR_VAR 0 5
50385: PUSH
50386: LD_INT 3
50388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50389: LD_ADDR_VAR 0 4
50393: PUSH
50394: LD_VAR 0 5
50398: PPUSH
50399: LD_VAR 0 1
50403: PPUSH
50404: CALL_OW 248
50408: PPUSH
50409: CALL_OW 450
50413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50414: LD_ADDR_VAR 0 2
50418: PUSH
50419: LD_VAR 0 3
50423: PPUSH
50424: LD_INT 1
50426: PPUSH
50427: CALL_OW 275
50431: PUSH
50432: LD_VAR 0 4
50436: PUSH
50437: LD_INT 1
50439: ARRAY
50440: GREATEREQUAL
50441: PUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: LD_INT 2
50449: PPUSH
50450: CALL_OW 275
50454: PUSH
50455: LD_VAR 0 4
50459: PUSH
50460: LD_INT 2
50462: ARRAY
50463: GREATEREQUAL
50464: AND
50465: PUSH
50466: LD_VAR 0 3
50470: PPUSH
50471: LD_INT 3
50473: PPUSH
50474: CALL_OW 275
50478: PUSH
50479: LD_VAR 0 4
50483: PUSH
50484: LD_INT 3
50486: ARRAY
50487: GREATEREQUAL
50488: AND
50489: ST_TO_ADDR
// end ;
50490: LD_VAR 0 2
50494: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50495: LD_INT 0
50497: PPUSH
50498: PPUSH
50499: PPUSH
// pom := GetBase ( building ) ;
50500: LD_ADDR_VAR 0 4
50504: PUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: CALL_OW 274
50514: ST_TO_ADDR
// if not pom then
50515: LD_VAR 0 4
50519: NOT
50520: IFFALSE 50524
// exit ;
50522: GO 50625
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50524: LD_ADDR_VAR 0 5
50528: PUSH
50529: LD_VAR 0 2
50533: PPUSH
50534: LD_VAR 0 1
50538: PPUSH
50539: CALL_OW 248
50543: PPUSH
50544: CALL_OW 450
50548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50549: LD_ADDR_VAR 0 3
50553: PUSH
50554: LD_VAR 0 4
50558: PPUSH
50559: LD_INT 1
50561: PPUSH
50562: CALL_OW 275
50566: PUSH
50567: LD_VAR 0 5
50571: PUSH
50572: LD_INT 1
50574: ARRAY
50575: GREATEREQUAL
50576: PUSH
50577: LD_VAR 0 4
50581: PPUSH
50582: LD_INT 2
50584: PPUSH
50585: CALL_OW 275
50589: PUSH
50590: LD_VAR 0 5
50594: PUSH
50595: LD_INT 2
50597: ARRAY
50598: GREATEREQUAL
50599: AND
50600: PUSH
50601: LD_VAR 0 4
50605: PPUSH
50606: LD_INT 3
50608: PPUSH
50609: CALL_OW 275
50613: PUSH
50614: LD_VAR 0 5
50618: PUSH
50619: LD_INT 3
50621: ARRAY
50622: GREATEREQUAL
50623: AND
50624: ST_TO_ADDR
// end ;
50625: LD_VAR 0 3
50629: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50630: LD_INT 0
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
// result := false ;
50643: LD_ADDR_VAR 0 8
50647: PUSH
50648: LD_INT 0
50650: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50651: LD_VAR 0 5
50655: NOT
50656: PUSH
50657: LD_VAR 0 1
50661: NOT
50662: OR
50663: PUSH
50664: LD_VAR 0 2
50668: NOT
50669: OR
50670: PUSH
50671: LD_VAR 0 3
50675: NOT
50676: OR
50677: IFFALSE 50681
// exit ;
50679: GO 51495
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50681: LD_ADDR_VAR 0 14
50685: PUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: LD_VAR 0 2
50695: PPUSH
50696: LD_VAR 0 3
50700: PPUSH
50701: LD_VAR 0 4
50705: PPUSH
50706: LD_VAR 0 5
50710: PUSH
50711: LD_INT 1
50713: ARRAY
50714: PPUSH
50715: CALL_OW 248
50719: PPUSH
50720: LD_INT 0
50722: PPUSH
50723: CALL 52732 0 6
50727: ST_TO_ADDR
// if not hexes then
50728: LD_VAR 0 14
50732: NOT
50733: IFFALSE 50737
// exit ;
50735: GO 51495
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50737: LD_ADDR_VAR 0 17
50741: PUSH
50742: LD_VAR 0 5
50746: PPUSH
50747: LD_INT 22
50749: PUSH
50750: LD_VAR 0 13
50754: PPUSH
50755: CALL_OW 255
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 30
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 30
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PPUSH
50796: CALL_OW 72
50800: ST_TO_ADDR
// for i = 1 to hexes do
50801: LD_ADDR_VAR 0 9
50805: PUSH
50806: DOUBLE
50807: LD_INT 1
50809: DEC
50810: ST_TO_ADDR
50811: LD_VAR 0 14
50815: PUSH
50816: FOR_TO
50817: IFFALSE 51493
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50819: LD_ADDR_VAR 0 13
50823: PUSH
50824: LD_VAR 0 14
50828: PUSH
50829: LD_VAR 0 9
50833: ARRAY
50834: PUSH
50835: LD_INT 1
50837: ARRAY
50838: PPUSH
50839: LD_VAR 0 14
50843: PUSH
50844: LD_VAR 0 9
50848: ARRAY
50849: PUSH
50850: LD_INT 2
50852: ARRAY
50853: PPUSH
50854: CALL_OW 428
50858: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50859: LD_VAR 0 14
50863: PUSH
50864: LD_VAR 0 9
50868: ARRAY
50869: PUSH
50870: LD_INT 1
50872: ARRAY
50873: PPUSH
50874: LD_VAR 0 14
50878: PUSH
50879: LD_VAR 0 9
50883: ARRAY
50884: PUSH
50885: LD_INT 2
50887: ARRAY
50888: PPUSH
50889: CALL_OW 351
50893: PUSH
50894: LD_VAR 0 14
50898: PUSH
50899: LD_VAR 0 9
50903: ARRAY
50904: PUSH
50905: LD_INT 1
50907: ARRAY
50908: PPUSH
50909: LD_VAR 0 14
50913: PUSH
50914: LD_VAR 0 9
50918: ARRAY
50919: PUSH
50920: LD_INT 2
50922: ARRAY
50923: PPUSH
50924: CALL_OW 488
50928: NOT
50929: OR
50930: PUSH
50931: LD_VAR 0 13
50935: PPUSH
50936: CALL_OW 247
50940: PUSH
50941: LD_INT 3
50943: EQUAL
50944: OR
50945: IFFALSE 50951
// exit ;
50947: POP
50948: POP
50949: GO 51495
// if not tmp then
50951: LD_VAR 0 13
50955: NOT
50956: IFFALSE 50960
// continue ;
50958: GO 50816
// result := true ;
50960: LD_ADDR_VAR 0 8
50964: PUSH
50965: LD_INT 1
50967: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50968: LD_VAR 0 6
50972: PUSH
50973: LD_VAR 0 13
50977: PPUSH
50978: CALL_OW 247
50982: PUSH
50983: LD_INT 2
50985: EQUAL
50986: AND
50987: PUSH
50988: LD_VAR 0 13
50992: PPUSH
50993: CALL_OW 263
50997: PUSH
50998: LD_INT 1
51000: EQUAL
51001: AND
51002: IFFALSE 51166
// begin if IsDrivenBy ( tmp ) then
51004: LD_VAR 0 13
51008: PPUSH
51009: CALL_OW 311
51013: IFFALSE 51017
// continue ;
51015: GO 50816
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51017: LD_VAR 0 6
51021: PPUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 60
51027: PUSH
51028: EMPTY
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 55
51040: PUSH
51041: EMPTY
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PPUSH
51052: CALL_OW 72
51056: IFFALSE 51164
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51058: LD_ADDR_VAR 0 18
51062: PUSH
51063: LD_VAR 0 6
51067: PPUSH
51068: LD_INT 3
51070: PUSH
51071: LD_INT 60
51073: PUSH
51074: EMPTY
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: LD_INT 55
51086: PUSH
51087: EMPTY
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PPUSH
51098: CALL_OW 72
51102: PUSH
51103: LD_INT 1
51105: ARRAY
51106: ST_TO_ADDR
// if IsInUnit ( driver ) then
51107: LD_VAR 0 18
51111: PPUSH
51112: CALL_OW 310
51116: IFFALSE 51127
// ComExit ( driver ) ;
51118: LD_VAR 0 18
51122: PPUSH
51123: CALL 75860 0 1
// AddComEnterUnit ( driver , tmp ) ;
51127: LD_VAR 0 18
51131: PPUSH
51132: LD_VAR 0 13
51136: PPUSH
51137: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51141: LD_VAR 0 18
51145: PPUSH
51146: LD_VAR 0 7
51150: PPUSH
51151: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51155: LD_VAR 0 18
51159: PPUSH
51160: CALL_OW 181
// end ; continue ;
51164: GO 50816
// end ; if not cleaners or not tmp in cleaners then
51166: LD_VAR 0 6
51170: NOT
51171: PUSH
51172: LD_VAR 0 13
51176: PUSH
51177: LD_VAR 0 6
51181: IN
51182: NOT
51183: OR
51184: IFFALSE 51491
// begin if dep then
51186: LD_VAR 0 17
51190: IFFALSE 51326
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51192: LD_ADDR_VAR 0 16
51196: PUSH
51197: LD_VAR 0 17
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: PPUSH
51206: CALL_OW 250
51210: PPUSH
51211: LD_VAR 0 17
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: CALL_OW 254
51224: PPUSH
51225: LD_INT 5
51227: PPUSH
51228: CALL_OW 272
51232: PUSH
51233: LD_VAR 0 17
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: PPUSH
51242: CALL_OW 251
51246: PPUSH
51247: LD_VAR 0 17
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: PPUSH
51256: CALL_OW 254
51260: PPUSH
51261: LD_INT 5
51263: PPUSH
51264: CALL_OW 273
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51273: LD_VAR 0 16
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PPUSH
51282: LD_VAR 0 16
51286: PUSH
51287: LD_INT 2
51289: ARRAY
51290: PPUSH
51291: CALL_OW 488
51295: IFFALSE 51326
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51297: LD_VAR 0 13
51301: PPUSH
51302: LD_VAR 0 16
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: PPUSH
51311: LD_VAR 0 16
51315: PUSH
51316: LD_INT 2
51318: ARRAY
51319: PPUSH
51320: CALL_OW 111
// continue ;
51324: GO 50816
// end ; end ; r := GetDir ( tmp ) ;
51326: LD_ADDR_VAR 0 15
51330: PUSH
51331: LD_VAR 0 13
51335: PPUSH
51336: CALL_OW 254
51340: ST_TO_ADDR
// if r = 5 then
51341: LD_VAR 0 15
51345: PUSH
51346: LD_INT 5
51348: EQUAL
51349: IFFALSE 51359
// r := 0 ;
51351: LD_ADDR_VAR 0 15
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// for j = r to 5 do
51359: LD_ADDR_VAR 0 10
51363: PUSH
51364: DOUBLE
51365: LD_VAR 0 15
51369: DEC
51370: ST_TO_ADDR
51371: LD_INT 5
51373: PUSH
51374: FOR_TO
51375: IFFALSE 51489
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51377: LD_ADDR_VAR 0 11
51381: PUSH
51382: LD_VAR 0 13
51386: PPUSH
51387: CALL_OW 250
51391: PPUSH
51392: LD_VAR 0 10
51396: PPUSH
51397: LD_INT 2
51399: PPUSH
51400: CALL_OW 272
51404: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51405: LD_ADDR_VAR 0 12
51409: PUSH
51410: LD_VAR 0 13
51414: PPUSH
51415: CALL_OW 251
51419: PPUSH
51420: LD_VAR 0 10
51424: PPUSH
51425: LD_INT 2
51427: PPUSH
51428: CALL_OW 273
51432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51433: LD_VAR 0 11
51437: PPUSH
51438: LD_VAR 0 12
51442: PPUSH
51443: CALL_OW 488
51447: PUSH
51448: LD_VAR 0 11
51452: PPUSH
51453: LD_VAR 0 12
51457: PPUSH
51458: CALL_OW 428
51462: NOT
51463: AND
51464: IFFALSE 51487
// begin ComMoveXY ( tmp , _x , _y ) ;
51466: LD_VAR 0 13
51470: PPUSH
51471: LD_VAR 0 11
51475: PPUSH
51476: LD_VAR 0 12
51480: PPUSH
51481: CALL_OW 111
// break ;
51485: GO 51489
// end ; end ;
51487: GO 51374
51489: POP
51490: POP
// end ; end ;
51491: GO 50816
51493: POP
51494: POP
// end ;
51495: LD_VAR 0 8
51499: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51500: LD_INT 0
51502: PPUSH
// result := true ;
51503: LD_ADDR_VAR 0 3
51507: PUSH
51508: LD_INT 1
51510: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51511: LD_VAR 0 2
51515: PUSH
51516: LD_INT 24
51518: DOUBLE
51519: EQUAL
51520: IFTRUE 51530
51522: LD_INT 33
51524: DOUBLE
51525: EQUAL
51526: IFTRUE 51530
51528: GO 51555
51530: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51531: LD_ADDR_VAR 0 3
51535: PUSH
51536: LD_INT 32
51538: PPUSH
51539: LD_VAR 0 1
51543: PPUSH
51544: CALL_OW 321
51548: PUSH
51549: LD_INT 2
51551: EQUAL
51552: ST_TO_ADDR
51553: GO 51875
51555: LD_INT 20
51557: DOUBLE
51558: EQUAL
51559: IFTRUE 51563
51561: GO 51588
51563: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51564: LD_ADDR_VAR 0 3
51568: PUSH
51569: LD_INT 6
51571: PPUSH
51572: LD_VAR 0 1
51576: PPUSH
51577: CALL_OW 321
51581: PUSH
51582: LD_INT 2
51584: EQUAL
51585: ST_TO_ADDR
51586: GO 51875
51588: LD_INT 22
51590: DOUBLE
51591: EQUAL
51592: IFTRUE 51602
51594: LD_INT 36
51596: DOUBLE
51597: EQUAL
51598: IFTRUE 51602
51600: GO 51627
51602: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51603: LD_ADDR_VAR 0 3
51607: PUSH
51608: LD_INT 15
51610: PPUSH
51611: LD_VAR 0 1
51615: PPUSH
51616: CALL_OW 321
51620: PUSH
51621: LD_INT 2
51623: EQUAL
51624: ST_TO_ADDR
51625: GO 51875
51627: LD_INT 30
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51635
51633: GO 51660
51635: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51636: LD_ADDR_VAR 0 3
51640: PUSH
51641: LD_INT 20
51643: PPUSH
51644: LD_VAR 0 1
51648: PPUSH
51649: CALL_OW 321
51653: PUSH
51654: LD_INT 2
51656: EQUAL
51657: ST_TO_ADDR
51658: GO 51875
51660: LD_INT 28
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51674
51666: LD_INT 21
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51674
51672: GO 51699
51674: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_INT 21
51682: PPUSH
51683: LD_VAR 0 1
51687: PPUSH
51688: CALL_OW 321
51692: PUSH
51693: LD_INT 2
51695: EQUAL
51696: ST_TO_ADDR
51697: GO 51875
51699: LD_INT 16
51701: DOUBLE
51702: EQUAL
51703: IFTRUE 51707
51705: GO 51734
51707: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51708: LD_ADDR_VAR 0 3
51712: PUSH
51713: LD_EXP 73
51717: PPUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 321
51727: PUSH
51728: LD_INT 2
51730: EQUAL
51731: ST_TO_ADDR
51732: GO 51875
51734: LD_INT 19
51736: DOUBLE
51737: EQUAL
51738: IFTRUE 51748
51740: LD_INT 23
51742: DOUBLE
51743: EQUAL
51744: IFTRUE 51748
51746: GO 51775
51748: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51749: LD_ADDR_VAR 0 3
51753: PUSH
51754: LD_EXP 72
51758: PPUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: CALL_OW 321
51768: PUSH
51769: LD_INT 2
51771: EQUAL
51772: ST_TO_ADDR
51773: GO 51875
51775: LD_INT 17
51777: DOUBLE
51778: EQUAL
51779: IFTRUE 51783
51781: GO 51808
51783: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: LD_INT 39
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 321
51801: PUSH
51802: LD_INT 2
51804: EQUAL
51805: ST_TO_ADDR
51806: GO 51875
51808: LD_INT 18
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51816
51814: GO 51841
51816: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_INT 40
51824: PPUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: CALL_OW 321
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: ST_TO_ADDR
51839: GO 51875
51841: LD_INT 27
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51849
51847: GO 51874
51849: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51850: LD_ADDR_VAR 0 3
51854: PUSH
51855: LD_INT 35
51857: PPUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 321
51867: PUSH
51868: LD_INT 2
51870: EQUAL
51871: ST_TO_ADDR
51872: GO 51875
51874: POP
// end ;
51875: LD_VAR 0 3
51879: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51880: LD_INT 0
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
// result := false ;
51893: LD_ADDR_VAR 0 6
51897: PUSH
51898: LD_INT 0
51900: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51901: LD_VAR 0 1
51905: NOT
51906: PUSH
51907: LD_VAR 0 1
51911: PPUSH
51912: CALL_OW 266
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: IN
51927: NOT
51928: OR
51929: PUSH
51930: LD_VAR 0 2
51934: NOT
51935: OR
51936: PUSH
51937: LD_VAR 0 5
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 4
51956: PUSH
51957: LD_INT 5
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: IN
51968: NOT
51969: OR
51970: PUSH
51971: LD_VAR 0 3
51975: PPUSH
51976: LD_VAR 0 4
51980: PPUSH
51981: CALL_OW 488
51985: NOT
51986: OR
51987: IFFALSE 51991
// exit ;
51989: GO 52727
// side := GetSide ( depot ) ;
51991: LD_ADDR_VAR 0 9
51995: PUSH
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 255
52005: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52006: LD_VAR 0 9
52010: PPUSH
52011: LD_VAR 0 2
52015: PPUSH
52016: CALL 51500 0 2
52020: NOT
52021: IFFALSE 52025
// exit ;
52023: GO 52727
// pom := GetBase ( depot ) ;
52025: LD_ADDR_VAR 0 10
52029: PUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 274
52039: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52040: LD_ADDR_VAR 0 11
52044: PUSH
52045: LD_VAR 0 2
52049: PPUSH
52050: LD_VAR 0 1
52054: PPUSH
52055: CALL_OW 248
52059: PPUSH
52060: CALL_OW 450
52064: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52065: LD_VAR 0 10
52069: PPUSH
52070: LD_INT 1
52072: PPUSH
52073: CALL_OW 275
52077: PUSH
52078: LD_VAR 0 11
52082: PUSH
52083: LD_INT 1
52085: ARRAY
52086: GREATEREQUAL
52087: PUSH
52088: LD_VAR 0 10
52092: PPUSH
52093: LD_INT 2
52095: PPUSH
52096: CALL_OW 275
52100: PUSH
52101: LD_VAR 0 11
52105: PUSH
52106: LD_INT 2
52108: ARRAY
52109: GREATEREQUAL
52110: AND
52111: PUSH
52112: LD_VAR 0 10
52116: PPUSH
52117: LD_INT 3
52119: PPUSH
52120: CALL_OW 275
52124: PUSH
52125: LD_VAR 0 11
52129: PUSH
52130: LD_INT 3
52132: ARRAY
52133: GREATEREQUAL
52134: AND
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52727
// if GetBType ( depot ) = b_depot then
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 266
52149: PUSH
52150: LD_INT 0
52152: EQUAL
52153: IFFALSE 52165
// dist := 28 else
52155: LD_ADDR_VAR 0 14
52159: PUSH
52160: LD_INT 28
52162: ST_TO_ADDR
52163: GO 52173
// dist := 36 ;
52165: LD_ADDR_VAR 0 14
52169: PUSH
52170: LD_INT 36
52172: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52173: LD_VAR 0 1
52177: PPUSH
52178: LD_VAR 0 3
52182: PPUSH
52183: LD_VAR 0 4
52187: PPUSH
52188: CALL_OW 297
52192: PUSH
52193: LD_VAR 0 14
52197: GREATER
52198: IFFALSE 52202
// exit ;
52200: GO 52727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52202: LD_ADDR_VAR 0 12
52206: PUSH
52207: LD_VAR 0 2
52211: PPUSH
52212: LD_VAR 0 3
52216: PPUSH
52217: LD_VAR 0 4
52221: PPUSH
52222: LD_VAR 0 5
52226: PPUSH
52227: LD_VAR 0 1
52231: PPUSH
52232: CALL_OW 248
52236: PPUSH
52237: LD_INT 0
52239: PPUSH
52240: CALL 52732 0 6
52244: ST_TO_ADDR
// if not hexes then
52245: LD_VAR 0 12
52249: NOT
52250: IFFALSE 52254
// exit ;
52252: GO 52727
// hex := GetHexInfo ( x , y ) ;
52254: LD_ADDR_VAR 0 15
52258: PUSH
52259: LD_VAR 0 3
52263: PPUSH
52264: LD_VAR 0 4
52268: PPUSH
52269: CALL_OW 546
52273: ST_TO_ADDR
// if hex [ 1 ] then
52274: LD_VAR 0 15
52278: PUSH
52279: LD_INT 1
52281: ARRAY
52282: IFFALSE 52286
// exit ;
52284: GO 52727
// height := hex [ 2 ] ;
52286: LD_ADDR_VAR 0 13
52290: PUSH
52291: LD_VAR 0 15
52295: PUSH
52296: LD_INT 2
52298: ARRAY
52299: ST_TO_ADDR
// for i = 1 to hexes do
52300: LD_ADDR_VAR 0 7
52304: PUSH
52305: DOUBLE
52306: LD_INT 1
52308: DEC
52309: ST_TO_ADDR
52310: LD_VAR 0 12
52314: PUSH
52315: FOR_TO
52316: IFFALSE 52646
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52318: LD_VAR 0 12
52322: PUSH
52323: LD_VAR 0 7
52327: ARRAY
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: PPUSH
52333: LD_VAR 0 12
52337: PUSH
52338: LD_VAR 0 7
52342: ARRAY
52343: PUSH
52344: LD_INT 2
52346: ARRAY
52347: PPUSH
52348: CALL_OW 488
52352: NOT
52353: PUSH
52354: LD_VAR 0 12
52358: PUSH
52359: LD_VAR 0 7
52363: ARRAY
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: PPUSH
52369: LD_VAR 0 12
52373: PUSH
52374: LD_VAR 0 7
52378: ARRAY
52379: PUSH
52380: LD_INT 2
52382: ARRAY
52383: PPUSH
52384: CALL_OW 428
52388: PUSH
52389: LD_INT 0
52391: GREATER
52392: OR
52393: PUSH
52394: LD_VAR 0 12
52398: PUSH
52399: LD_VAR 0 7
52403: ARRAY
52404: PUSH
52405: LD_INT 1
52407: ARRAY
52408: PPUSH
52409: LD_VAR 0 12
52413: PUSH
52414: LD_VAR 0 7
52418: ARRAY
52419: PUSH
52420: LD_INT 2
52422: ARRAY
52423: PPUSH
52424: CALL_OW 351
52428: OR
52429: IFFALSE 52435
// exit ;
52431: POP
52432: POP
52433: GO 52727
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52435: LD_ADDR_VAR 0 8
52439: PUSH
52440: LD_VAR 0 12
52444: PUSH
52445: LD_VAR 0 7
52449: ARRAY
52450: PUSH
52451: LD_INT 1
52453: ARRAY
52454: PPUSH
52455: LD_VAR 0 12
52459: PUSH
52460: LD_VAR 0 7
52464: ARRAY
52465: PUSH
52466: LD_INT 2
52468: ARRAY
52469: PPUSH
52470: CALL_OW 546
52474: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52475: LD_VAR 0 8
52479: PUSH
52480: LD_INT 1
52482: ARRAY
52483: PUSH
52484: LD_VAR 0 8
52488: PUSH
52489: LD_INT 2
52491: ARRAY
52492: PUSH
52493: LD_VAR 0 13
52497: PUSH
52498: LD_INT 2
52500: PLUS
52501: GREATER
52502: OR
52503: PUSH
52504: LD_VAR 0 8
52508: PUSH
52509: LD_INT 2
52511: ARRAY
52512: PUSH
52513: LD_VAR 0 13
52517: PUSH
52518: LD_INT 2
52520: MINUS
52521: LESS
52522: OR
52523: PUSH
52524: LD_VAR 0 8
52528: PUSH
52529: LD_INT 3
52531: ARRAY
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 8
52538: PUSH
52539: LD_INT 9
52541: PUSH
52542: LD_INT 10
52544: PUSH
52545: LD_INT 11
52547: PUSH
52548: LD_INT 12
52550: PUSH
52551: LD_INT 13
52553: PUSH
52554: LD_INT 16
52556: PUSH
52557: LD_INT 17
52559: PUSH
52560: LD_INT 18
52562: PUSH
52563: LD_INT 19
52565: PUSH
52566: LD_INT 20
52568: PUSH
52569: LD_INT 21
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: IN
52587: NOT
52588: OR
52589: PUSH
52590: LD_VAR 0 8
52594: PUSH
52595: LD_INT 5
52597: ARRAY
52598: NOT
52599: OR
52600: PUSH
52601: LD_VAR 0 8
52605: PUSH
52606: LD_INT 6
52608: ARRAY
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 7
52618: PUSH
52619: LD_INT 9
52621: PUSH
52622: LD_INT 10
52624: PUSH
52625: LD_INT 11
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: IN
52636: NOT
52637: OR
52638: IFFALSE 52644
// exit ;
52640: POP
52641: POP
52642: GO 52727
// end ;
52644: GO 52315
52646: POP
52647: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52648: LD_VAR 0 9
52652: PPUSH
52653: LD_VAR 0 3
52657: PPUSH
52658: LD_VAR 0 4
52662: PPUSH
52663: LD_INT 20
52665: PPUSH
52666: CALL 44673 0 4
52670: PUSH
52671: LD_INT 4
52673: ARRAY
52674: IFFALSE 52678
// exit ;
52676: GO 52727
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52678: LD_VAR 0 2
52682: PUSH
52683: LD_INT 29
52685: PUSH
52686: LD_INT 30
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: IN
52693: PUSH
52694: LD_VAR 0 3
52698: PPUSH
52699: LD_VAR 0 4
52703: PPUSH
52704: LD_VAR 0 9
52708: PPUSH
52709: CALL_OW 440
52713: NOT
52714: AND
52715: IFFALSE 52719
// exit ;
52717: GO 52727
// result := true ;
52719: LD_ADDR_VAR 0 6
52723: PUSH
52724: LD_INT 1
52726: ST_TO_ADDR
// end ;
52727: LD_VAR 0 6
52731: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52732: LD_INT 0
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
// result = [ ] ;
52792: LD_ADDR_VAR 0 7
52796: PUSH
52797: EMPTY
52798: ST_TO_ADDR
// temp_list = [ ] ;
52799: LD_ADDR_VAR 0 9
52803: PUSH
52804: EMPTY
52805: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52806: LD_VAR 0 4
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: IN
52837: NOT
52838: PUSH
52839: LD_VAR 0 1
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: IN
52854: PUSH
52855: LD_VAR 0 5
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: IN
52874: NOT
52875: AND
52876: OR
52877: IFFALSE 52881
// exit ;
52879: GO 71272
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52881: LD_VAR 0 1
52885: PUSH
52886: LD_INT 6
52888: PUSH
52889: LD_INT 7
52891: PUSH
52892: LD_INT 8
52894: PUSH
52895: LD_INT 13
52897: PUSH
52898: LD_INT 12
52900: PUSH
52901: LD_INT 15
52903: PUSH
52904: LD_INT 11
52906: PUSH
52907: LD_INT 14
52909: PUSH
52910: LD_INT 10
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: IN
52924: IFFALSE 52934
// btype = b_lab ;
52926: LD_ADDR_VAR 0 1
52930: PUSH
52931: LD_INT 6
52933: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52934: LD_VAR 0 6
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: IN
52953: NOT
52954: PUSH
52955: LD_VAR 0 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 6
52974: PUSH
52975: LD_INT 36
52977: PUSH
52978: LD_INT 4
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: LD_INT 31
52986: PUSH
52987: LD_INT 32
52989: PUSH
52990: LD_INT 33
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: IN
53006: NOT
53007: PUSH
53008: LD_VAR 0 6
53012: PUSH
53013: LD_INT 1
53015: EQUAL
53016: AND
53017: OR
53018: PUSH
53019: LD_VAR 0 1
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: IN
53034: NOT
53035: PUSH
53036: LD_VAR 0 6
53040: PUSH
53041: LD_INT 2
53043: EQUAL
53044: AND
53045: OR
53046: IFFALSE 53056
// mode = 0 ;
53048: LD_ADDR_VAR 0 6
53052: PUSH
53053: LD_INT 0
53055: ST_TO_ADDR
// case mode of 0 :
53056: LD_VAR 0 6
53060: PUSH
53061: LD_INT 0
53063: DOUBLE
53064: EQUAL
53065: IFTRUE 53069
53067: GO 64522
53069: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53070: LD_ADDR_VAR 0 11
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53263: LD_ADDR_VAR 0 12
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53459: LD_ADDR_VAR 0 13
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53658: LD_ADDR_VAR 0 14
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53854: LD_ADDR_VAR 0 15
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54047: LD_ADDR_VAR 0 16
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54240: LD_ADDR_VAR 0 17
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54470: LD_ADDR_VAR 0 18
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54700: LD_ADDR_VAR 0 19
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54930: LD_ADDR_VAR 0 20
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55160: LD_ADDR_VAR 0 21
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55390: LD_ADDR_VAR 0 22
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55620: LD_ADDR_VAR 0 23
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55900: LD_ADDR_VAR 0 24
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56176: LD_ADDR_VAR 0 25
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56450: LD_ADDR_VAR 0 26
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56726: LD_ADDR_VAR 0 27
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57006: LD_ADDR_VAR 0 28
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57288: LD_ADDR_VAR 0 29
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57567: LD_ADDR_VAR 0 30
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57845: LD_ADDR_VAR 0 31
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58123: LD_ADDR_VAR 0 32
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58401: LD_ADDR_VAR 0 33
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58680: LD_ADDR_VAR 0 34
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58960: LD_ADDR_VAR 0 35
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59072: LD_ADDR_VAR 0 36
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59184: LD_ADDR_VAR 0 37
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59296: LD_ADDR_VAR 0 38
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59408: LD_ADDR_VAR 0 39
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59520: LD_ADDR_VAR 0 40
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59632: LD_ADDR_VAR 0 41
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59982: LD_ADDR_VAR 0 42
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60332: LD_ADDR_VAR 0 43
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60680: LD_ADDR_VAR 0 44
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61030: LD_ADDR_VAR 0 45
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 3
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61380: LD_ADDR_VAR 0 46
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61728: LD_ADDR_VAR 0 47
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61879: LD_ADDR_VAR 0 48
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 2
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62026: LD_ADDR_VAR 0 49
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62170: LD_ADDR_VAR 0 50
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62314: LD_ADDR_VAR 0 51
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62461: LD_ADDR_VAR 0 52
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: LD_INT 2
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62612: LD_ADDR_VAR 0 53
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 2
62811: NEG
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62842: LD_ADDR_VAR 0 54
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63072: LD_ADDR_VAR 0 55
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63302: LD_ADDR_VAR 0 56
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: LD_INT 1
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63532: LD_ADDR_VAR 0 57
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63762: LD_ADDR_VAR 0 58
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63992: LD_ADDR_VAR 0 59
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64080: LD_ADDR_VAR 0 60
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64168: LD_ADDR_VAR 0 61
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64256: LD_ADDR_VAR 0 62
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64344: LD_ADDR_VAR 0 63
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64432: LD_ADDR_VAR 0 64
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: ST_TO_ADDR
// end ; 1 :
64520: GO 70417
64522: LD_INT 1
64524: DOUBLE
64525: EQUAL
64526: IFTRUE 64530
64528: GO 67153
64530: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64531: LD_ADDR_VAR 0 11
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: LD_INT 3
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 3
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: LD_INT 2
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64575: LD_ADDR_VAR 0 12
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64616: LD_ADDR_VAR 0 13
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: LD_INT 3
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64656: LD_ADDR_VAR 0 14
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64697: LD_ADDR_VAR 0 15
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64741: LD_ADDR_VAR 0 16
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64787: LD_ADDR_VAR 0 17
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 3
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 3
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64831: LD_ADDR_VAR 0 18
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 3
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64872: LD_ADDR_VAR 0 19
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64912: LD_ADDR_VAR 0 20
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64953: LD_ADDR_VAR 0 21
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 3
64971: NEG
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64997: LD_ADDR_VAR 0 22
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: LD_INT 3
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: LD_INT 2
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65043: LD_ADDR_VAR 0 23
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 4
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 3
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65087: LD_ADDR_VAR 0 24
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 4
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65128: LD_ADDR_VAR 0 25
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: LD_INT 3
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 4
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65168: LD_ADDR_VAR 0 26
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 4
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65209: LD_ADDR_VAR 0 27
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: NEG
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65253: LD_ADDR_VAR 0 28
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 4
65284: NEG
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65299: LD_ADDR_VAR 0 29
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 2
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 4
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 3
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 5
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 5
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 4
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 6
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 6
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 5
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65454: LD_ADDR_VAR 0 30
65458: PUSH
65459: LD_INT 2
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 4
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 4
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 5
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 5
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 6
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 6
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65597: LD_ADDR_VAR 0 31
65601: PUSH
65602: LD_INT 3
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 4
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: PUSH
65645: LD_INT 4
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: LD_INT 4
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 5
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 5
65674: PUSH
65675: LD_INT 5
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: LD_INT 5
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 6
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 6
65704: PUSH
65705: LD_INT 6
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 5
65714: PUSH
65715: LD_INT 6
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65736: LD_ADDR_VAR 0 32
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: LD_INT 4
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 5
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: LD_INT 5
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: LD_INT 4
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: LD_INT 6
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 6
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: LD_INT 5
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65879: LD_ADDR_VAR 0 33
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 3
65908: NEG
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 3
65920: NEG
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 4
65931: NEG
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 5
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 5
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 5
65988: NEG
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 6
65999: NEG
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 6
66010: NEG
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66034: LD_ADDR_VAR 0 34
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 3
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: LD_INT 4
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 4
66089: NEG
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 4
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: LD_INT 5
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 5
66125: NEG
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 5
66137: NEG
66138: PUSH
66139: LD_INT 5
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 5
66149: NEG
66150: PUSH
66151: LD_INT 6
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 6
66161: NEG
66162: PUSH
66163: LD_INT 5
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 6
66173: NEG
66174: PUSH
66175: LD_INT 6
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66197: LD_ADDR_VAR 0 41
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66241: LD_ADDR_VAR 0 42
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 3
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66282: LD_ADDR_VAR 0 43
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 3
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: LIST
66321: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66322: LD_ADDR_VAR 0 44
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66363: LD_ADDR_VAR 0 45
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: NEG
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 3
66392: NEG
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66407: LD_ADDR_VAR 0 46
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66453: LD_ADDR_VAR 0 47
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: LD_INT 3
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: LD_INT 3
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66486: LD_ADDR_VAR 0 48
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66517: LD_ADDR_VAR 0 49
66521: PUSH
66522: LD_INT 3
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66546: LD_ADDR_VAR 0 50
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66575: LD_ADDR_VAR 0 51
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66606: LD_ADDR_VAR 0 52
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66639: LD_ADDR_VAR 0 53
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66683: LD_ADDR_VAR 0 54
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 3
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66724: LD_ADDR_VAR 0 55
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66764: LD_ADDR_VAR 0 56
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66805: LD_ADDR_VAR 0 57
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 3
66823: NEG
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66849: LD_ADDR_VAR 0 58
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 3
66880: NEG
66881: PUSH
66882: LD_INT 3
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66895: LD_ADDR_VAR 0 59
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 2
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66939: LD_ADDR_VAR 0 60
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 1
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: LIST
66979: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66980: LD_ADDR_VAR 0 61
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: LD_INT 2
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67020: LD_ADDR_VAR 0 62
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67061: LD_ADDR_VAR 0 63
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 2
67079: NEG
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67105: LD_ADDR_VAR 0 64
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 2
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 2
67136: NEG
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// end ; 2 :
67151: GO 70417
67153: LD_INT 2
67155: DOUBLE
67156: EQUAL
67157: IFTRUE 67161
67159: GO 70416
67161: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67162: LD_ADDR_VAR 0 29
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 4
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 5
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 5
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 4
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 3
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 5
67252: PUSH
67253: LD_INT 2
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 3
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: LD_INT 2
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 4
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 4
67292: PUSH
67293: LD_INT 4
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: LD_INT 4
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: PUSH
67313: LD_INT 3
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 4
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: LD_INT 4
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: LD_INT 5
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: LD_INT 5
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: LD_INT 4
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 1
67413: NEG
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: LD_INT 5
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 3
67445: NEG
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 3
67456: NEG
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 2
67468: NEG
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 4
67501: NEG
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 4
67512: NEG
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 4
67524: NEG
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 2
67536: NEG
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: NEG
67548: PUSH
67549: LD_INT 4
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 4
67559: NEG
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: LD_INT 4
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 3
67583: NEG
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 4
67595: NEG
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 5
67607: NEG
67608: PUSH
67609: LD_INT 4
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 5
67619: NEG
67620: PUSH
67621: LD_INT 5
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: LD_INT 5
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 5
67643: NEG
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67700: LD_ADDR_VAR 0 30
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 4
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: LD_INT 4
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 5
67737: PUSH
67738: LD_INT 5
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 4
67747: PUSH
67748: LD_INT 5
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 5
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: LD_INT 5
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 2
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: LD_INT 4
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: LD_INT 3
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 4
67890: NEG
67891: PUSH
67892: LD_INT 0
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 4
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 5
67946: NEG
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 5
67957: NEG
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 5
67969: NEG
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 3
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: LD_INT 4
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: LD_INT 3
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 2
68028: NEG
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: LD_INT 3
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 4
68064: NEG
68065: PUSH
68066: LD_INT 4
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: LD_INT 4
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 4
68088: NEG
68089: PUSH
68090: LD_INT 2
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_INT 4
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: LD_INT 5
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: LD_INT 4
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 3
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 3
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: LD_INT 4
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: LD_INT 5
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: LD_INT 5
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68247: LD_ADDR_VAR 0 31
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 5
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: LD_INT 5
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 2
68370: NEG
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 3
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 4
68403: NEG
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 4
68414: NEG
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 4
68426: NEG
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: LD_INT 4
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 4
68461: NEG
68462: PUSH
68463: LD_INT 5
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: LD_INT 4
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 4
68497: NEG
68498: PUSH
68499: LD_INT 3
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 5
68509: NEG
68510: PUSH
68511: LD_INT 4
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 5
68521: NEG
68522: PUSH
68523: LD_INT 5
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: LD_INT 5
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 5
68545: NEG
68546: PUSH
68547: LD_INT 3
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: LD_INT 3
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 4
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 2
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 2
68647: NEG
68648: PUSH
68649: LD_INT 4
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 4
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 4
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 5
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: LD_INT 2
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68797: LD_ADDR_VAR 0 32
68801: PUSH
68802: LD_INT 4
68804: NEG
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 4
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 3
68838: NEG
68839: PUSH
68840: LD_INT 1
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 4
68849: NEG
68850: PUSH
68851: LD_INT 1
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 5
68860: NEG
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 5
68871: NEG
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 5
68883: NEG
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: LD_INT 2
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: NEG
68907: PUSH
68908: LD_INT 3
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: NEG
68919: PUSH
68920: LD_INT 4
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: LD_INT 3
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 2
68942: NEG
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: LD_INT 2
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 4
68966: NEG
68967: PUSH
68968: LD_INT 3
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 4
68978: NEG
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 4
69002: NEG
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: LD_INT 4
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: LD_INT 5
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 1
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: PUSH
69048: LD_INT 3
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 3
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: LD_INT 4
69073: NEG
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: LD_INT 5
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 2
69104: NEG
69105: PUSH
69106: LD_INT 5
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 2
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: PUSH
69200: LD_INT 2
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: LD_INT 4
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 3
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 5
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 5
69239: PUSH
69240: LD_INT 5
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 4
69249: PUSH
69250: LD_INT 5
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 3
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 5
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: LD_INT 5
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69344: LD_ADDR_VAR 0 33
69348: PUSH
69349: LD_INT 4
69351: NEG
69352: PUSH
69353: LD_INT 4
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 4
69363: NEG
69364: PUSH
69365: LD_INT 5
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: LD_INT 4
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: LD_INT 3
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 4
69399: NEG
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: NEG
69412: PUSH
69413: LD_INT 4
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 5
69423: NEG
69424: PUSH
69425: LD_INT 5
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 5
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 5
69447: NEG
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: LD_INT 3
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: LD_INT 4
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: NEG
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 1
69526: NEG
69527: PUSH
69528: LD_INT 4
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 2
69538: PUSH
69539: LD_INT 2
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: LD_INT 4
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: LD_INT 0
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 4
69571: PUSH
69572: LD_INT 1
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 5
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: LD_INT 1
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: LD_INT 2
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 5
69644: PUSH
69645: LD_INT 2
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 3
69654: PUSH
69655: LD_INT 3
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 4
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 4
69684: PUSH
69685: LD_INT 4
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: LD_INT 4
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 2
69714: PUSH
69715: LD_INT 2
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 4
69724: PUSH
69725: LD_INT 2
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 4
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: LD_INT 3
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 1
69764: PUSH
69765: LD_INT 4
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: LD_INT 5
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 0
69784: PUSH
69785: LD_INT 5
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 1
69794: NEG
69795: PUSH
69796: LD_INT 4
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: LD_INT 3
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: NEG
69827: PUSH
69828: LD_INT 3
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69882: LD_ADDR_VAR 0 34
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 4
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: LD_INT 5
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 4
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 3
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: LD_INT 3
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: LD_INT 4
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: LD_INT 5
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 3
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: LD_INT 5
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: LD_INT 1
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: LD_INT 1
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 3
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 2
70063: PUSH
70064: LD_INT 2
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 4
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: LD_INT 4
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 5
70104: PUSH
70105: LD_INT 4
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 5
70114: PUSH
70115: LD_INT 5
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: LD_INT 3
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 5
70154: PUSH
70155: LD_INT 3
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: LD_INT 5
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: LD_INT 2
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 4
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: LD_INT 4
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 4
70267: NEG
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 4
70278: NEG
70279: PUSH
70280: LD_INT 1
70282: NEG
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: NEG
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: NEG
70302: PUSH
70303: LD_INT 1
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: LD_INT 1
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 5
70323: NEG
70324: PUSH
70325: LD_INT 0
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 5
70334: NEG
70335: PUSH
70336: LD_INT 1
70338: NEG
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 5
70346: NEG
70347: PUSH
70348: LD_INT 2
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 3
70358: NEG
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: ST_TO_ADDR
// end ; end ;
70414: GO 70417
70416: POP
// case btype of b_depot , b_warehouse :
70417: LD_VAR 0 1
70421: PUSH
70422: LD_INT 0
70424: DOUBLE
70425: EQUAL
70426: IFTRUE 70436
70428: LD_INT 1
70430: DOUBLE
70431: EQUAL
70432: IFTRUE 70436
70434: GO 70637
70436: POP
// case nation of nation_american :
70437: LD_VAR 0 5
70441: PUSH
70442: LD_INT 1
70444: DOUBLE
70445: EQUAL
70446: IFTRUE 70450
70448: GO 70506
70450: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70451: LD_ADDR_VAR 0 9
70455: PUSH
70456: LD_VAR 0 11
70460: PUSH
70461: LD_VAR 0 12
70465: PUSH
70466: LD_VAR 0 13
70470: PUSH
70471: LD_VAR 0 14
70475: PUSH
70476: LD_VAR 0 15
70480: PUSH
70481: LD_VAR 0 16
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: PUSH
70494: LD_VAR 0 4
70498: PUSH
70499: LD_INT 1
70501: PLUS
70502: ARRAY
70503: ST_TO_ADDR
70504: GO 70635
70506: LD_INT 2
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70514
70512: GO 70570
70514: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70515: LD_ADDR_VAR 0 9
70519: PUSH
70520: LD_VAR 0 17
70524: PUSH
70525: LD_VAR 0 18
70529: PUSH
70530: LD_VAR 0 19
70534: PUSH
70535: LD_VAR 0 20
70539: PUSH
70540: LD_VAR 0 21
70544: PUSH
70545: LD_VAR 0 22
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: PUSH
70558: LD_VAR 0 4
70562: PUSH
70563: LD_INT 1
70565: PLUS
70566: ARRAY
70567: ST_TO_ADDR
70568: GO 70635
70570: LD_INT 3
70572: DOUBLE
70573: EQUAL
70574: IFTRUE 70578
70576: GO 70634
70578: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70579: LD_ADDR_VAR 0 9
70583: PUSH
70584: LD_VAR 0 23
70588: PUSH
70589: LD_VAR 0 24
70593: PUSH
70594: LD_VAR 0 25
70598: PUSH
70599: LD_VAR 0 26
70603: PUSH
70604: LD_VAR 0 27
70608: PUSH
70609: LD_VAR 0 28
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: PUSH
70622: LD_VAR 0 4
70626: PUSH
70627: LD_INT 1
70629: PLUS
70630: ARRAY
70631: ST_TO_ADDR
70632: GO 70635
70634: POP
70635: GO 71190
70637: LD_INT 2
70639: DOUBLE
70640: EQUAL
70641: IFTRUE 70651
70643: LD_INT 3
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70651
70649: GO 70707
70651: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70652: LD_ADDR_VAR 0 9
70656: PUSH
70657: LD_VAR 0 29
70661: PUSH
70662: LD_VAR 0 30
70666: PUSH
70667: LD_VAR 0 31
70671: PUSH
70672: LD_VAR 0 32
70676: PUSH
70677: LD_VAR 0 33
70681: PUSH
70682: LD_VAR 0 34
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: LD_VAR 0 4
70699: PUSH
70700: LD_INT 1
70702: PLUS
70703: ARRAY
70704: ST_TO_ADDR
70705: GO 71190
70707: LD_INT 16
70709: DOUBLE
70710: EQUAL
70711: IFTRUE 70769
70713: LD_INT 17
70715: DOUBLE
70716: EQUAL
70717: IFTRUE 70769
70719: LD_INT 18
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70769
70725: LD_INT 19
70727: DOUBLE
70728: EQUAL
70729: IFTRUE 70769
70731: LD_INT 22
70733: DOUBLE
70734: EQUAL
70735: IFTRUE 70769
70737: LD_INT 20
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70769
70743: LD_INT 21
70745: DOUBLE
70746: EQUAL
70747: IFTRUE 70769
70749: LD_INT 23
70751: DOUBLE
70752: EQUAL
70753: IFTRUE 70769
70755: LD_INT 24
70757: DOUBLE
70758: EQUAL
70759: IFTRUE 70769
70761: LD_INT 25
70763: DOUBLE
70764: EQUAL
70765: IFTRUE 70769
70767: GO 70825
70769: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70770: LD_ADDR_VAR 0 9
70774: PUSH
70775: LD_VAR 0 35
70779: PUSH
70780: LD_VAR 0 36
70784: PUSH
70785: LD_VAR 0 37
70789: PUSH
70790: LD_VAR 0 38
70794: PUSH
70795: LD_VAR 0 39
70799: PUSH
70800: LD_VAR 0 40
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: PUSH
70813: LD_VAR 0 4
70817: PUSH
70818: LD_INT 1
70820: PLUS
70821: ARRAY
70822: ST_TO_ADDR
70823: GO 71190
70825: LD_INT 6
70827: DOUBLE
70828: EQUAL
70829: IFTRUE 70881
70831: LD_INT 7
70833: DOUBLE
70834: EQUAL
70835: IFTRUE 70881
70837: LD_INT 8
70839: DOUBLE
70840: EQUAL
70841: IFTRUE 70881
70843: LD_INT 13
70845: DOUBLE
70846: EQUAL
70847: IFTRUE 70881
70849: LD_INT 12
70851: DOUBLE
70852: EQUAL
70853: IFTRUE 70881
70855: LD_INT 15
70857: DOUBLE
70858: EQUAL
70859: IFTRUE 70881
70861: LD_INT 11
70863: DOUBLE
70864: EQUAL
70865: IFTRUE 70881
70867: LD_INT 14
70869: DOUBLE
70870: EQUAL
70871: IFTRUE 70881
70873: LD_INT 10
70875: DOUBLE
70876: EQUAL
70877: IFTRUE 70881
70879: GO 70937
70881: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70882: LD_ADDR_VAR 0 9
70886: PUSH
70887: LD_VAR 0 41
70891: PUSH
70892: LD_VAR 0 42
70896: PUSH
70897: LD_VAR 0 43
70901: PUSH
70902: LD_VAR 0 44
70906: PUSH
70907: LD_VAR 0 45
70911: PUSH
70912: LD_VAR 0 46
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: PUSH
70925: LD_VAR 0 4
70929: PUSH
70930: LD_INT 1
70932: PLUS
70933: ARRAY
70934: ST_TO_ADDR
70935: GO 71190
70937: LD_INT 36
70939: DOUBLE
70940: EQUAL
70941: IFTRUE 70945
70943: GO 71001
70945: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70946: LD_ADDR_VAR 0 9
70950: PUSH
70951: LD_VAR 0 47
70955: PUSH
70956: LD_VAR 0 48
70960: PUSH
70961: LD_VAR 0 49
70965: PUSH
70966: LD_VAR 0 50
70970: PUSH
70971: LD_VAR 0 51
70975: PUSH
70976: LD_VAR 0 52
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: PUSH
70989: LD_VAR 0 4
70993: PUSH
70994: LD_INT 1
70996: PLUS
70997: ARRAY
70998: ST_TO_ADDR
70999: GO 71190
71001: LD_INT 4
71003: DOUBLE
71004: EQUAL
71005: IFTRUE 71027
71007: LD_INT 5
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71027
71013: LD_INT 34
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71027
71019: LD_INT 37
71021: DOUBLE
71022: EQUAL
71023: IFTRUE 71027
71025: GO 71083
71027: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71028: LD_ADDR_VAR 0 9
71032: PUSH
71033: LD_VAR 0 53
71037: PUSH
71038: LD_VAR 0 54
71042: PUSH
71043: LD_VAR 0 55
71047: PUSH
71048: LD_VAR 0 56
71052: PUSH
71053: LD_VAR 0 57
71057: PUSH
71058: LD_VAR 0 58
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: PUSH
71071: LD_VAR 0 4
71075: PUSH
71076: LD_INT 1
71078: PLUS
71079: ARRAY
71080: ST_TO_ADDR
71081: GO 71190
71083: LD_INT 31
71085: DOUBLE
71086: EQUAL
71087: IFTRUE 71133
71089: LD_INT 32
71091: DOUBLE
71092: EQUAL
71093: IFTRUE 71133
71095: LD_INT 33
71097: DOUBLE
71098: EQUAL
71099: IFTRUE 71133
71101: LD_INT 27
71103: DOUBLE
71104: EQUAL
71105: IFTRUE 71133
71107: LD_INT 26
71109: DOUBLE
71110: EQUAL
71111: IFTRUE 71133
71113: LD_INT 28
71115: DOUBLE
71116: EQUAL
71117: IFTRUE 71133
71119: LD_INT 29
71121: DOUBLE
71122: EQUAL
71123: IFTRUE 71133
71125: LD_INT 30
71127: DOUBLE
71128: EQUAL
71129: IFTRUE 71133
71131: GO 71189
71133: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71134: LD_ADDR_VAR 0 9
71138: PUSH
71139: LD_VAR 0 59
71143: PUSH
71144: LD_VAR 0 60
71148: PUSH
71149: LD_VAR 0 61
71153: PUSH
71154: LD_VAR 0 62
71158: PUSH
71159: LD_VAR 0 63
71163: PUSH
71164: LD_VAR 0 64
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: PUSH
71177: LD_VAR 0 4
71181: PUSH
71182: LD_INT 1
71184: PLUS
71185: ARRAY
71186: ST_TO_ADDR
71187: GO 71190
71189: POP
// temp_list2 = [ ] ;
71190: LD_ADDR_VAR 0 10
71194: PUSH
71195: EMPTY
71196: ST_TO_ADDR
// for i in temp_list do
71197: LD_ADDR_VAR 0 8
71201: PUSH
71202: LD_VAR 0 9
71206: PUSH
71207: FOR_IN
71208: IFFALSE 71260
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71210: LD_ADDR_VAR 0 10
71214: PUSH
71215: LD_VAR 0 10
71219: PUSH
71220: LD_VAR 0 8
71224: PUSH
71225: LD_INT 1
71227: ARRAY
71228: PUSH
71229: LD_VAR 0 2
71233: PLUS
71234: PUSH
71235: LD_VAR 0 8
71239: PUSH
71240: LD_INT 2
71242: ARRAY
71243: PUSH
71244: LD_VAR 0 3
71248: PLUS
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: EMPTY
71255: LIST
71256: ADD
71257: ST_TO_ADDR
71258: GO 71207
71260: POP
71261: POP
// result = temp_list2 ;
71262: LD_ADDR_VAR 0 7
71266: PUSH
71267: LD_VAR 0 10
71271: ST_TO_ADDR
// end ;
71272: LD_VAR 0 7
71276: RET
// export function EnemyInRange ( unit , dist ) ; begin
71277: LD_INT 0
71279: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71280: LD_ADDR_VAR 0 3
71284: PUSH
71285: LD_VAR 0 1
71289: PPUSH
71290: CALL_OW 255
71294: PPUSH
71295: LD_VAR 0 1
71299: PPUSH
71300: CALL_OW 250
71304: PPUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 251
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: CALL 44673 0 4
71324: PUSH
71325: LD_INT 4
71327: ARRAY
71328: ST_TO_ADDR
// end ;
71329: LD_VAR 0 3
71333: RET
// export function PlayerSeeMe ( unit ) ; begin
71334: LD_INT 0
71336: PPUSH
// result := See ( your_side , unit ) ;
71337: LD_ADDR_VAR 0 2
71341: PUSH
71342: LD_OWVAR 2
71346: PPUSH
71347: LD_VAR 0 1
71351: PPUSH
71352: CALL_OW 292
71356: ST_TO_ADDR
// end ;
71357: LD_VAR 0 2
71361: RET
// export function ReverseDir ( unit ) ; begin
71362: LD_INT 0
71364: PPUSH
// if not unit then
71365: LD_VAR 0 1
71369: NOT
71370: IFFALSE 71374
// exit ;
71372: GO 71397
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: CALL_OW 254
71388: PUSH
71389: LD_INT 3
71391: PLUS
71392: PUSH
71393: LD_INT 6
71395: MOD
71396: ST_TO_ADDR
// end ;
71397: LD_VAR 0 2
71401: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71402: LD_INT 0
71404: PPUSH
71405: PPUSH
71406: PPUSH
71407: PPUSH
71408: PPUSH
// if not hexes then
71409: LD_VAR 0 2
71413: NOT
71414: IFFALSE 71418
// exit ;
71416: GO 71566
// dist := 9999 ;
71418: LD_ADDR_VAR 0 5
71422: PUSH
71423: LD_INT 9999
71425: ST_TO_ADDR
// for i = 1 to hexes do
71426: LD_ADDR_VAR 0 4
71430: PUSH
71431: DOUBLE
71432: LD_INT 1
71434: DEC
71435: ST_TO_ADDR
71436: LD_VAR 0 2
71440: PUSH
71441: FOR_TO
71442: IFFALSE 71554
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71444: LD_VAR 0 1
71448: PPUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_VAR 0 4
71458: ARRAY
71459: PUSH
71460: LD_INT 1
71462: ARRAY
71463: PPUSH
71464: LD_VAR 0 2
71468: PUSH
71469: LD_VAR 0 4
71473: ARRAY
71474: PUSH
71475: LD_INT 2
71477: ARRAY
71478: PPUSH
71479: CALL_OW 297
71483: PUSH
71484: LD_VAR 0 5
71488: LESS
71489: IFFALSE 71552
// begin hex := hexes [ i ] ;
71491: LD_ADDR_VAR 0 7
71495: PUSH
71496: LD_VAR 0 2
71500: PUSH
71501: LD_VAR 0 4
71505: ARRAY
71506: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71507: LD_ADDR_VAR 0 5
71511: PUSH
71512: LD_VAR 0 1
71516: PPUSH
71517: LD_VAR 0 2
71521: PUSH
71522: LD_VAR 0 4
71526: ARRAY
71527: PUSH
71528: LD_INT 1
71530: ARRAY
71531: PPUSH
71532: LD_VAR 0 2
71536: PUSH
71537: LD_VAR 0 4
71541: ARRAY
71542: PUSH
71543: LD_INT 2
71545: ARRAY
71546: PPUSH
71547: CALL_OW 297
71551: ST_TO_ADDR
// end ; end ;
71552: GO 71441
71554: POP
71555: POP
// result := hex ;
71556: LD_ADDR_VAR 0 3
71560: PUSH
71561: LD_VAR 0 7
71565: ST_TO_ADDR
// end ;
71566: LD_VAR 0 3
71570: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71571: LD_INT 0
71573: PPUSH
71574: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71575: LD_VAR 0 1
71579: NOT
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_INT 21
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 23
71598: PUSH
71599: LD_INT 2
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PPUSH
71610: CALL_OW 69
71614: IN
71615: NOT
71616: OR
71617: IFFALSE 71621
// exit ;
71619: GO 71668
// for i = 1 to 3 do
71621: LD_ADDR_VAR 0 3
71625: PUSH
71626: DOUBLE
71627: LD_INT 1
71629: DEC
71630: ST_TO_ADDR
71631: LD_INT 3
71633: PUSH
71634: FOR_TO
71635: IFFALSE 71666
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71637: LD_VAR 0 1
71641: PPUSH
71642: CALL_OW 250
71646: PPUSH
71647: LD_VAR 0 1
71651: PPUSH
71652: CALL_OW 251
71656: PPUSH
71657: LD_INT 1
71659: PPUSH
71660: CALL_OW 453
71664: GO 71634
71666: POP
71667: POP
// end ;
71668: LD_VAR 0 2
71672: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71673: LD_INT 0
71675: PPUSH
71676: PPUSH
71677: PPUSH
71678: PPUSH
71679: PPUSH
71680: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71681: LD_VAR 0 1
71685: NOT
71686: PUSH
71687: LD_VAR 0 2
71691: NOT
71692: OR
71693: PUSH
71694: LD_VAR 0 1
71698: PPUSH
71699: CALL_OW 314
71703: OR
71704: IFFALSE 71708
// exit ;
71706: GO 72149
// x := GetX ( enemy_unit ) ;
71708: LD_ADDR_VAR 0 7
71712: PUSH
71713: LD_VAR 0 2
71717: PPUSH
71718: CALL_OW 250
71722: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71723: LD_ADDR_VAR 0 8
71727: PUSH
71728: LD_VAR 0 2
71732: PPUSH
71733: CALL_OW 251
71737: ST_TO_ADDR
// if not x or not y then
71738: LD_VAR 0 7
71742: NOT
71743: PUSH
71744: LD_VAR 0 8
71748: NOT
71749: OR
71750: IFFALSE 71754
// exit ;
71752: GO 72149
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71754: LD_ADDR_VAR 0 6
71758: PUSH
71759: LD_VAR 0 7
71763: PPUSH
71764: LD_INT 0
71766: PPUSH
71767: LD_INT 4
71769: PPUSH
71770: CALL_OW 272
71774: PUSH
71775: LD_VAR 0 8
71779: PPUSH
71780: LD_INT 0
71782: PPUSH
71783: LD_INT 4
71785: PPUSH
71786: CALL_OW 273
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_VAR 0 7
71799: PPUSH
71800: LD_INT 1
71802: PPUSH
71803: LD_INT 4
71805: PPUSH
71806: CALL_OW 272
71810: PUSH
71811: LD_VAR 0 8
71815: PPUSH
71816: LD_INT 1
71818: PPUSH
71819: LD_INT 4
71821: PPUSH
71822: CALL_OW 273
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 7
71835: PPUSH
71836: LD_INT 2
71838: PPUSH
71839: LD_INT 4
71841: PPUSH
71842: CALL_OW 272
71846: PUSH
71847: LD_VAR 0 8
71851: PPUSH
71852: LD_INT 2
71854: PPUSH
71855: LD_INT 4
71857: PPUSH
71858: CALL_OW 273
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_VAR 0 7
71871: PPUSH
71872: LD_INT 3
71874: PPUSH
71875: LD_INT 4
71877: PPUSH
71878: CALL_OW 272
71882: PUSH
71883: LD_VAR 0 8
71887: PPUSH
71888: LD_INT 3
71890: PPUSH
71891: LD_INT 4
71893: PPUSH
71894: CALL_OW 273
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_VAR 0 7
71907: PPUSH
71908: LD_INT 4
71910: PPUSH
71911: LD_INT 4
71913: PPUSH
71914: CALL_OW 272
71918: PUSH
71919: LD_VAR 0 8
71923: PPUSH
71924: LD_INT 4
71926: PPUSH
71927: LD_INT 4
71929: PPUSH
71930: CALL_OW 273
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_VAR 0 7
71943: PPUSH
71944: LD_INT 5
71946: PPUSH
71947: LD_INT 4
71949: PPUSH
71950: CALL_OW 272
71954: PUSH
71955: LD_VAR 0 8
71959: PPUSH
71960: LD_INT 5
71962: PPUSH
71963: LD_INT 4
71965: PPUSH
71966: CALL_OW 273
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: ST_TO_ADDR
// for i = tmp downto 1 do
71983: LD_ADDR_VAR 0 4
71987: PUSH
71988: DOUBLE
71989: LD_VAR 0 6
71993: INC
71994: ST_TO_ADDR
71995: LD_INT 1
71997: PUSH
71998: FOR_DOWNTO
71999: IFFALSE 72100
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72001: LD_VAR 0 6
72005: PUSH
72006: LD_VAR 0 4
72010: ARRAY
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: PPUSH
72016: LD_VAR 0 6
72020: PUSH
72021: LD_VAR 0 4
72025: ARRAY
72026: PUSH
72027: LD_INT 2
72029: ARRAY
72030: PPUSH
72031: CALL_OW 488
72035: NOT
72036: PUSH
72037: LD_VAR 0 6
72041: PUSH
72042: LD_VAR 0 4
72046: ARRAY
72047: PUSH
72048: LD_INT 1
72050: ARRAY
72051: PPUSH
72052: LD_VAR 0 6
72056: PUSH
72057: LD_VAR 0 4
72061: ARRAY
72062: PUSH
72063: LD_INT 2
72065: ARRAY
72066: PPUSH
72067: CALL_OW 428
72071: PUSH
72072: LD_INT 0
72074: NONEQUAL
72075: OR
72076: IFFALSE 72098
// tmp := Delete ( tmp , i ) ;
72078: LD_ADDR_VAR 0 6
72082: PUSH
72083: LD_VAR 0 6
72087: PPUSH
72088: LD_VAR 0 4
72092: PPUSH
72093: CALL_OW 3
72097: ST_TO_ADDR
72098: GO 71998
72100: POP
72101: POP
// j := GetClosestHex ( unit , tmp ) ;
72102: LD_ADDR_VAR 0 5
72106: PUSH
72107: LD_VAR 0 1
72111: PPUSH
72112: LD_VAR 0 6
72116: PPUSH
72117: CALL 71402 0 2
72121: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72122: LD_VAR 0 1
72126: PPUSH
72127: LD_VAR 0 5
72131: PUSH
72132: LD_INT 1
72134: ARRAY
72135: PPUSH
72136: LD_VAR 0 5
72140: PUSH
72141: LD_INT 2
72143: ARRAY
72144: PPUSH
72145: CALL_OW 111
// end ;
72149: LD_VAR 0 3
72153: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72154: LD_INT 0
72156: PPUSH
72157: PPUSH
72158: PPUSH
// uc_side = 0 ;
72159: LD_ADDR_OWVAR 20
72163: PUSH
72164: LD_INT 0
72166: ST_TO_ADDR
// uc_nation = 0 ;
72167: LD_ADDR_OWVAR 21
72171: PUSH
72172: LD_INT 0
72174: ST_TO_ADDR
// InitHc_All ( ) ;
72175: CALL_OW 584
// InitVc ;
72179: CALL_OW 20
// if mastodonts then
72183: LD_VAR 0 6
72187: IFFALSE 72254
// for i = 1 to mastodonts do
72189: LD_ADDR_VAR 0 11
72193: PUSH
72194: DOUBLE
72195: LD_INT 1
72197: DEC
72198: ST_TO_ADDR
72199: LD_VAR 0 6
72203: PUSH
72204: FOR_TO
72205: IFFALSE 72252
// begin vc_chassis := 31 ;
72207: LD_ADDR_OWVAR 37
72211: PUSH
72212: LD_INT 31
72214: ST_TO_ADDR
// vc_control := control_rider ;
72215: LD_ADDR_OWVAR 38
72219: PUSH
72220: LD_INT 4
72222: ST_TO_ADDR
// animal := CreateVehicle ;
72223: LD_ADDR_VAR 0 12
72227: PUSH
72228: CALL_OW 45
72232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72233: LD_VAR 0 12
72237: PPUSH
72238: LD_VAR 0 8
72242: PPUSH
72243: LD_INT 0
72245: PPUSH
72246: CALL 74389 0 3
// end ;
72250: GO 72204
72252: POP
72253: POP
// if horses then
72254: LD_VAR 0 5
72258: IFFALSE 72325
// for i = 1 to horses do
72260: LD_ADDR_VAR 0 11
72264: PUSH
72265: DOUBLE
72266: LD_INT 1
72268: DEC
72269: ST_TO_ADDR
72270: LD_VAR 0 5
72274: PUSH
72275: FOR_TO
72276: IFFALSE 72323
// begin hc_class := 21 ;
72278: LD_ADDR_OWVAR 28
72282: PUSH
72283: LD_INT 21
72285: ST_TO_ADDR
// hc_gallery :=  ;
72286: LD_ADDR_OWVAR 33
72290: PUSH
72291: LD_STRING 
72293: ST_TO_ADDR
// animal := CreateHuman ;
72294: LD_ADDR_VAR 0 12
72298: PUSH
72299: CALL_OW 44
72303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72304: LD_VAR 0 12
72308: PPUSH
72309: LD_VAR 0 8
72313: PPUSH
72314: LD_INT 0
72316: PPUSH
72317: CALL 74389 0 3
// end ;
72321: GO 72275
72323: POP
72324: POP
// if birds then
72325: LD_VAR 0 1
72329: IFFALSE 72396
// for i = 1 to birds do
72331: LD_ADDR_VAR 0 11
72335: PUSH
72336: DOUBLE
72337: LD_INT 1
72339: DEC
72340: ST_TO_ADDR
72341: LD_VAR 0 1
72345: PUSH
72346: FOR_TO
72347: IFFALSE 72394
// begin hc_class = 18 ;
72349: LD_ADDR_OWVAR 28
72353: PUSH
72354: LD_INT 18
72356: ST_TO_ADDR
// hc_gallery =  ;
72357: LD_ADDR_OWVAR 33
72361: PUSH
72362: LD_STRING 
72364: ST_TO_ADDR
// animal := CreateHuman ;
72365: LD_ADDR_VAR 0 12
72369: PUSH
72370: CALL_OW 44
72374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72375: LD_VAR 0 12
72379: PPUSH
72380: LD_VAR 0 8
72384: PPUSH
72385: LD_INT 0
72387: PPUSH
72388: CALL 74389 0 3
// end ;
72392: GO 72346
72394: POP
72395: POP
// if tigers then
72396: LD_VAR 0 2
72400: IFFALSE 72484
// for i = 1 to tigers do
72402: LD_ADDR_VAR 0 11
72406: PUSH
72407: DOUBLE
72408: LD_INT 1
72410: DEC
72411: ST_TO_ADDR
72412: LD_VAR 0 2
72416: PUSH
72417: FOR_TO
72418: IFFALSE 72482
// begin hc_class = class_tiger ;
72420: LD_ADDR_OWVAR 28
72424: PUSH
72425: LD_INT 14
72427: ST_TO_ADDR
// hc_gallery =  ;
72428: LD_ADDR_OWVAR 33
72432: PUSH
72433: LD_STRING 
72435: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72436: LD_ADDR_OWVAR 35
72440: PUSH
72441: LD_INT 7
72443: NEG
72444: PPUSH
72445: LD_INT 7
72447: PPUSH
72448: CALL_OW 12
72452: ST_TO_ADDR
// animal := CreateHuman ;
72453: LD_ADDR_VAR 0 12
72457: PUSH
72458: CALL_OW 44
72462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72463: LD_VAR 0 12
72467: PPUSH
72468: LD_VAR 0 8
72472: PPUSH
72473: LD_INT 0
72475: PPUSH
72476: CALL 74389 0 3
// end ;
72480: GO 72417
72482: POP
72483: POP
// if apemans then
72484: LD_VAR 0 3
72488: IFFALSE 72611
// for i = 1 to apemans do
72490: LD_ADDR_VAR 0 11
72494: PUSH
72495: DOUBLE
72496: LD_INT 1
72498: DEC
72499: ST_TO_ADDR
72500: LD_VAR 0 3
72504: PUSH
72505: FOR_TO
72506: IFFALSE 72609
// begin hc_class = class_apeman ;
72508: LD_ADDR_OWVAR 28
72512: PUSH
72513: LD_INT 12
72515: ST_TO_ADDR
// hc_gallery =  ;
72516: LD_ADDR_OWVAR 33
72520: PUSH
72521: LD_STRING 
72523: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72524: LD_ADDR_OWVAR 35
72528: PUSH
72529: LD_INT 2
72531: NEG
72532: PPUSH
72533: LD_INT 2
72535: PPUSH
72536: CALL_OW 12
72540: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72541: LD_ADDR_OWVAR 31
72545: PUSH
72546: LD_INT 1
72548: PPUSH
72549: LD_INT 3
72551: PPUSH
72552: CALL_OW 12
72556: PUSH
72557: LD_INT 1
72559: PPUSH
72560: LD_INT 3
72562: PPUSH
72563: CALL_OW 12
72567: PUSH
72568: LD_INT 0
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: ST_TO_ADDR
// animal := CreateHuman ;
72580: LD_ADDR_VAR 0 12
72584: PUSH
72585: CALL_OW 44
72589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72590: LD_VAR 0 12
72594: PPUSH
72595: LD_VAR 0 8
72599: PPUSH
72600: LD_INT 0
72602: PPUSH
72603: CALL 74389 0 3
// end ;
72607: GO 72505
72609: POP
72610: POP
// if enchidnas then
72611: LD_VAR 0 4
72615: IFFALSE 72682
// for i = 1 to enchidnas do
72617: LD_ADDR_VAR 0 11
72621: PUSH
72622: DOUBLE
72623: LD_INT 1
72625: DEC
72626: ST_TO_ADDR
72627: LD_VAR 0 4
72631: PUSH
72632: FOR_TO
72633: IFFALSE 72680
// begin hc_class = 13 ;
72635: LD_ADDR_OWVAR 28
72639: PUSH
72640: LD_INT 13
72642: ST_TO_ADDR
// hc_gallery =  ;
72643: LD_ADDR_OWVAR 33
72647: PUSH
72648: LD_STRING 
72650: ST_TO_ADDR
// animal := CreateHuman ;
72651: LD_ADDR_VAR 0 12
72655: PUSH
72656: CALL_OW 44
72660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72661: LD_VAR 0 12
72665: PPUSH
72666: LD_VAR 0 8
72670: PPUSH
72671: LD_INT 0
72673: PPUSH
72674: CALL 74389 0 3
// end ;
72678: GO 72632
72680: POP
72681: POP
// if fishes then
72682: LD_VAR 0 7
72686: IFFALSE 72753
// for i = 1 to fishes do
72688: LD_ADDR_VAR 0 11
72692: PUSH
72693: DOUBLE
72694: LD_INT 1
72696: DEC
72697: ST_TO_ADDR
72698: LD_VAR 0 7
72702: PUSH
72703: FOR_TO
72704: IFFALSE 72751
// begin hc_class = 20 ;
72706: LD_ADDR_OWVAR 28
72710: PUSH
72711: LD_INT 20
72713: ST_TO_ADDR
// hc_gallery =  ;
72714: LD_ADDR_OWVAR 33
72718: PUSH
72719: LD_STRING 
72721: ST_TO_ADDR
// animal := CreateHuman ;
72722: LD_ADDR_VAR 0 12
72726: PUSH
72727: CALL_OW 44
72731: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72732: LD_VAR 0 12
72736: PPUSH
72737: LD_VAR 0 9
72741: PPUSH
72742: LD_INT 0
72744: PPUSH
72745: CALL 74389 0 3
// end ;
72749: GO 72703
72751: POP
72752: POP
// end ;
72753: LD_VAR 0 10
72757: RET
// export function WantHeal ( sci , unit ) ; begin
72758: LD_INT 0
72760: PPUSH
// if GetTaskList ( sci ) > 0 then
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL_OW 437
72770: PUSH
72771: LD_INT 0
72773: GREATER
72774: IFFALSE 72844
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72776: LD_VAR 0 1
72780: PPUSH
72781: CALL_OW 437
72785: PUSH
72786: LD_INT 1
72788: ARRAY
72789: PUSH
72790: LD_INT 1
72792: ARRAY
72793: PUSH
72794: LD_STRING l
72796: EQUAL
72797: PUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: CALL_OW 437
72807: PUSH
72808: LD_INT 1
72810: ARRAY
72811: PUSH
72812: LD_INT 4
72814: ARRAY
72815: PUSH
72816: LD_VAR 0 2
72820: EQUAL
72821: AND
72822: IFFALSE 72834
// result := true else
72824: LD_ADDR_VAR 0 3
72828: PUSH
72829: LD_INT 1
72831: ST_TO_ADDR
72832: GO 72842
// result := false ;
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_INT 0
72841: ST_TO_ADDR
// end else
72842: GO 72852
// result := false ;
72844: LD_ADDR_VAR 0 3
72848: PUSH
72849: LD_INT 0
72851: ST_TO_ADDR
// end ;
72852: LD_VAR 0 3
72856: RET
// export function HealTarget ( sci ) ; begin
72857: LD_INT 0
72859: PPUSH
// if not sci then
72860: LD_VAR 0 1
72864: NOT
72865: IFFALSE 72869
// exit ;
72867: GO 72934
// result := 0 ;
72869: LD_ADDR_VAR 0 2
72873: PUSH
72874: LD_INT 0
72876: ST_TO_ADDR
// if GetTaskList ( sci ) then
72877: LD_VAR 0 1
72881: PPUSH
72882: CALL_OW 437
72886: IFFALSE 72934
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72888: LD_VAR 0 1
72892: PPUSH
72893: CALL_OW 437
72897: PUSH
72898: LD_INT 1
72900: ARRAY
72901: PUSH
72902: LD_INT 1
72904: ARRAY
72905: PUSH
72906: LD_STRING l
72908: EQUAL
72909: IFFALSE 72934
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72911: LD_ADDR_VAR 0 2
72915: PUSH
72916: LD_VAR 0 1
72920: PPUSH
72921: CALL_OW 437
72925: PUSH
72926: LD_INT 1
72928: ARRAY
72929: PUSH
72930: LD_INT 4
72932: ARRAY
72933: ST_TO_ADDR
// end ;
72934: LD_VAR 0 2
72938: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72939: LD_INT 0
72941: PPUSH
72942: PPUSH
72943: PPUSH
72944: PPUSH
// if not base_units then
72945: LD_VAR 0 1
72949: NOT
72950: IFFALSE 72954
// exit ;
72952: GO 73041
// result := false ;
72954: LD_ADDR_VAR 0 2
72958: PUSH
72959: LD_INT 0
72961: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72962: LD_ADDR_VAR 0 5
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_INT 21
72974: PUSH
72975: LD_INT 3
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PPUSH
72982: CALL_OW 72
72986: ST_TO_ADDR
// if not tmp then
72987: LD_VAR 0 5
72991: NOT
72992: IFFALSE 72996
// exit ;
72994: GO 73041
// for i in tmp do
72996: LD_ADDR_VAR 0 3
73000: PUSH
73001: LD_VAR 0 5
73005: PUSH
73006: FOR_IN
73007: IFFALSE 73039
// begin result := EnemyInRange ( i , 22 ) ;
73009: LD_ADDR_VAR 0 2
73013: PUSH
73014: LD_VAR 0 3
73018: PPUSH
73019: LD_INT 22
73021: PPUSH
73022: CALL 71277 0 2
73026: ST_TO_ADDR
// if result then
73027: LD_VAR 0 2
73031: IFFALSE 73037
// exit ;
73033: POP
73034: POP
73035: GO 73041
// end ;
73037: GO 73006
73039: POP
73040: POP
// end ;
73041: LD_VAR 0 2
73045: RET
// export function FilterByTag ( units , tag ) ; begin
73046: LD_INT 0
73048: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73049: LD_ADDR_VAR 0 3
73053: PUSH
73054: LD_VAR 0 1
73058: PPUSH
73059: LD_INT 120
73061: PUSH
73062: LD_VAR 0 2
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PPUSH
73071: CALL_OW 72
73075: ST_TO_ADDR
// end ;
73076: LD_VAR 0 3
73080: RET
// export function IsDriver ( un ) ; begin
73081: LD_INT 0
73083: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73084: LD_ADDR_VAR 0 2
73088: PUSH
73089: LD_VAR 0 1
73093: PUSH
73094: LD_INT 55
73096: PUSH
73097: EMPTY
73098: LIST
73099: PPUSH
73100: CALL_OW 69
73104: IN
73105: ST_TO_ADDR
// end ;
73106: LD_VAR 0 2
73110: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73111: LD_INT 0
73113: PPUSH
73114: PPUSH
// list := [ ] ;
73115: LD_ADDR_VAR 0 5
73119: PUSH
73120: EMPTY
73121: ST_TO_ADDR
// case d of 0 :
73122: LD_VAR 0 3
73126: PUSH
73127: LD_INT 0
73129: DOUBLE
73130: EQUAL
73131: IFTRUE 73135
73133: GO 73268
73135: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73136: LD_ADDR_VAR 0 5
73140: PUSH
73141: LD_VAR 0 1
73145: PUSH
73146: LD_INT 4
73148: MINUS
73149: PUSH
73150: LD_VAR 0 2
73154: PUSH
73155: LD_INT 4
73157: MINUS
73158: PUSH
73159: LD_INT 2
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: LD_VAR 0 1
73171: PUSH
73172: LD_INT 3
73174: MINUS
73175: PUSH
73176: LD_VAR 0 2
73180: PUSH
73181: LD_INT 1
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: PUSH
73189: LD_VAR 0 1
73193: PUSH
73194: LD_INT 4
73196: PLUS
73197: PUSH
73198: LD_VAR 0 2
73202: PUSH
73203: LD_INT 4
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: PUSH
73211: LD_VAR 0 1
73215: PUSH
73216: LD_INT 3
73218: PLUS
73219: PUSH
73220: LD_VAR 0 2
73224: PUSH
73225: LD_INT 3
73227: PLUS
73228: PUSH
73229: LD_INT 5
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: LIST
73236: PUSH
73237: LD_VAR 0 1
73241: PUSH
73242: LD_VAR 0 2
73246: PUSH
73247: LD_INT 4
73249: PLUS
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: ST_TO_ADDR
// end ; 1 :
73266: GO 73966
73268: LD_INT 1
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73276
73274: GO 73409
73276: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73277: LD_ADDR_VAR 0 5
73281: PUSH
73282: LD_VAR 0 1
73286: PUSH
73287: LD_VAR 0 2
73291: PUSH
73292: LD_INT 4
73294: MINUS
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: PUSH
73304: LD_VAR 0 1
73308: PUSH
73309: LD_INT 3
73311: MINUS
73312: PUSH
73313: LD_VAR 0 2
73317: PUSH
73318: LD_INT 3
73320: MINUS
73321: PUSH
73322: LD_INT 2
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: LD_VAR 0 1
73334: PUSH
73335: LD_INT 4
73337: MINUS
73338: PUSH
73339: LD_VAR 0 2
73343: PUSH
73344: LD_INT 1
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 1
73356: PUSH
73357: LD_VAR 0 2
73361: PUSH
73362: LD_INT 3
73364: PLUS
73365: PUSH
73366: LD_INT 0
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: PUSH
73374: LD_VAR 0 1
73378: PUSH
73379: LD_INT 4
73381: PLUS
73382: PUSH
73383: LD_VAR 0 2
73387: PUSH
73388: LD_INT 4
73390: PLUS
73391: PUSH
73392: LD_INT 5
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: LIST
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: ST_TO_ADDR
// end ; 2 :
73407: GO 73966
73409: LD_INT 2
73411: DOUBLE
73412: EQUAL
73413: IFTRUE 73417
73415: GO 73546
73417: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73418: LD_ADDR_VAR 0 5
73422: PUSH
73423: LD_VAR 0 1
73427: PUSH
73428: LD_VAR 0 2
73432: PUSH
73433: LD_INT 3
73435: MINUS
73436: PUSH
73437: LD_INT 3
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: LIST
73444: PUSH
73445: LD_VAR 0 1
73449: PUSH
73450: LD_INT 4
73452: PLUS
73453: PUSH
73454: LD_VAR 0 2
73458: PUSH
73459: LD_INT 4
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: PUSH
73467: LD_VAR 0 1
73471: PUSH
73472: LD_VAR 0 2
73476: PUSH
73477: LD_INT 4
73479: PLUS
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: PUSH
73489: LD_VAR 0 1
73493: PUSH
73494: LD_INT 3
73496: MINUS
73497: PUSH
73498: LD_VAR 0 2
73502: PUSH
73503: LD_INT 1
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: LIST
73510: PUSH
73511: LD_VAR 0 1
73515: PUSH
73516: LD_INT 4
73518: MINUS
73519: PUSH
73520: LD_VAR 0 2
73524: PUSH
73525: LD_INT 4
73527: MINUS
73528: PUSH
73529: LD_INT 2
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: LIST
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: ST_TO_ADDR
// end ; 3 :
73544: GO 73966
73546: LD_INT 3
73548: DOUBLE
73549: EQUAL
73550: IFTRUE 73554
73552: GO 73687
73554: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73555: LD_ADDR_VAR 0 5
73559: PUSH
73560: LD_VAR 0 1
73564: PUSH
73565: LD_INT 3
73567: PLUS
73568: PUSH
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 4
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: PUSH
73582: LD_VAR 0 1
73586: PUSH
73587: LD_INT 4
73589: PLUS
73590: PUSH
73591: LD_VAR 0 2
73595: PUSH
73596: LD_INT 4
73598: PLUS
73599: PUSH
73600: LD_INT 5
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: LIST
73607: PUSH
73608: LD_VAR 0 1
73612: PUSH
73613: LD_INT 4
73615: MINUS
73616: PUSH
73617: LD_VAR 0 2
73621: PUSH
73622: LD_INT 1
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: LIST
73629: PUSH
73630: LD_VAR 0 1
73634: PUSH
73635: LD_VAR 0 2
73639: PUSH
73640: LD_INT 4
73642: MINUS
73643: PUSH
73644: LD_INT 3
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: LIST
73651: PUSH
73652: LD_VAR 0 1
73656: PUSH
73657: LD_INT 3
73659: MINUS
73660: PUSH
73661: LD_VAR 0 2
73665: PUSH
73666: LD_INT 3
73668: MINUS
73669: PUSH
73670: LD_INT 2
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: LIST
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: ST_TO_ADDR
// end ; 4 :
73685: GO 73966
73687: LD_INT 4
73689: DOUBLE
73690: EQUAL
73691: IFTRUE 73695
73693: GO 73828
73695: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73696: LD_ADDR_VAR 0 5
73700: PUSH
73701: LD_VAR 0 1
73705: PUSH
73706: LD_VAR 0 2
73710: PUSH
73711: LD_INT 4
73713: PLUS
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: PUSH
73723: LD_VAR 0 1
73727: PUSH
73728: LD_INT 3
73730: PLUS
73731: PUSH
73732: LD_VAR 0 2
73736: PUSH
73737: LD_INT 3
73739: PLUS
73740: PUSH
73741: LD_INT 5
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: LIST
73748: PUSH
73749: LD_VAR 0 1
73753: PUSH
73754: LD_INT 4
73756: PLUS
73757: PUSH
73758: LD_VAR 0 2
73762: PUSH
73763: LD_INT 4
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: PUSH
73771: LD_VAR 0 1
73775: PUSH
73776: LD_VAR 0 2
73780: PUSH
73781: LD_INT 3
73783: MINUS
73784: PUSH
73785: LD_INT 3
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: PUSH
73793: LD_VAR 0 1
73797: PUSH
73798: LD_INT 4
73800: MINUS
73801: PUSH
73802: LD_VAR 0 2
73806: PUSH
73807: LD_INT 4
73809: MINUS
73810: PUSH
73811: LD_INT 2
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: ST_TO_ADDR
// end ; 5 :
73826: GO 73966
73828: LD_INT 5
73830: DOUBLE
73831: EQUAL
73832: IFTRUE 73836
73834: GO 73965
73836: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73837: LD_ADDR_VAR 0 5
73841: PUSH
73842: LD_VAR 0 1
73846: PUSH
73847: LD_INT 4
73849: MINUS
73850: PUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 1
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: LIST
73863: PUSH
73864: LD_VAR 0 1
73868: PUSH
73869: LD_VAR 0 2
73873: PUSH
73874: LD_INT 4
73876: MINUS
73877: PUSH
73878: LD_INT 3
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: PUSH
73886: LD_VAR 0 1
73890: PUSH
73891: LD_INT 4
73893: PLUS
73894: PUSH
73895: LD_VAR 0 2
73899: PUSH
73900: LD_INT 4
73902: PLUS
73903: PUSH
73904: LD_INT 5
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: LIST
73911: PUSH
73912: LD_VAR 0 1
73916: PUSH
73917: LD_INT 3
73919: PLUS
73920: PUSH
73921: LD_VAR 0 2
73925: PUSH
73926: LD_INT 4
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: LIST
73933: PUSH
73934: LD_VAR 0 1
73938: PUSH
73939: LD_VAR 0 2
73943: PUSH
73944: LD_INT 3
73946: PLUS
73947: PUSH
73948: LD_INT 0
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: LIST
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: ST_TO_ADDR
// end ; end ;
73963: GO 73966
73965: POP
// result := list ;
73966: LD_ADDR_VAR 0 4
73970: PUSH
73971: LD_VAR 0 5
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 4
73980: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73981: LD_INT 0
73983: PPUSH
73984: PPUSH
73985: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73986: LD_VAR 0 1
73990: NOT
73991: PUSH
73992: LD_VAR 0 2
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: LD_INT 2
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: LD_INT 4
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: IN
74015: NOT
74016: OR
74017: IFFALSE 74021
// exit ;
74019: GO 74113
// tmp := [ ] ;
74021: LD_ADDR_VAR 0 5
74025: PUSH
74026: EMPTY
74027: ST_TO_ADDR
// for i in units do
74028: LD_ADDR_VAR 0 4
74032: PUSH
74033: LD_VAR 0 1
74037: PUSH
74038: FOR_IN
74039: IFFALSE 74082
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74041: LD_ADDR_VAR 0 5
74045: PUSH
74046: LD_VAR 0 5
74050: PPUSH
74051: LD_VAR 0 5
74055: PUSH
74056: LD_INT 1
74058: PLUS
74059: PPUSH
74060: LD_VAR 0 4
74064: PPUSH
74065: LD_VAR 0 2
74069: PPUSH
74070: CALL_OW 259
74074: PPUSH
74075: CALL_OW 2
74079: ST_TO_ADDR
74080: GO 74038
74082: POP
74083: POP
// if not tmp then
74084: LD_VAR 0 5
74088: NOT
74089: IFFALSE 74093
// exit ;
74091: GO 74113
// result := SortListByListDesc ( units , tmp ) ;
74093: LD_ADDR_VAR 0 3
74097: PUSH
74098: LD_VAR 0 1
74102: PPUSH
74103: LD_VAR 0 5
74107: PPUSH
74108: CALL_OW 77
74112: ST_TO_ADDR
// end ;
74113: LD_VAR 0 3
74117: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74118: LD_INT 0
74120: PPUSH
74121: PPUSH
74122: PPUSH
// result := false ;
74123: LD_ADDR_VAR 0 3
74127: PUSH
74128: LD_INT 0
74130: ST_TO_ADDR
// x := GetX ( building ) ;
74131: LD_ADDR_VAR 0 4
74135: PUSH
74136: LD_VAR 0 2
74140: PPUSH
74141: CALL_OW 250
74145: ST_TO_ADDR
// y := GetY ( building ) ;
74146: LD_ADDR_VAR 0 5
74150: PUSH
74151: LD_VAR 0 2
74155: PPUSH
74156: CALL_OW 251
74160: ST_TO_ADDR
// if not building or not x or not y then
74161: LD_VAR 0 2
74165: NOT
74166: PUSH
74167: LD_VAR 0 4
74171: NOT
74172: OR
74173: PUSH
74174: LD_VAR 0 5
74178: NOT
74179: OR
74180: IFFALSE 74184
// exit ;
74182: GO 74276
// if GetTaskList ( unit ) then
74184: LD_VAR 0 1
74188: PPUSH
74189: CALL_OW 437
74193: IFFALSE 74276
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74195: LD_STRING e
74197: PUSH
74198: LD_VAR 0 1
74202: PPUSH
74203: CALL_OW 437
74207: PUSH
74208: LD_INT 1
74210: ARRAY
74211: PUSH
74212: LD_INT 1
74214: ARRAY
74215: EQUAL
74216: PUSH
74217: LD_VAR 0 4
74221: PUSH
74222: LD_VAR 0 1
74226: PPUSH
74227: CALL_OW 437
74231: PUSH
74232: LD_INT 1
74234: ARRAY
74235: PUSH
74236: LD_INT 2
74238: ARRAY
74239: EQUAL
74240: AND
74241: PUSH
74242: LD_VAR 0 5
74246: PUSH
74247: LD_VAR 0 1
74251: PPUSH
74252: CALL_OW 437
74256: PUSH
74257: LD_INT 1
74259: ARRAY
74260: PUSH
74261: LD_INT 3
74263: ARRAY
74264: EQUAL
74265: AND
74266: IFFALSE 74276
// result := true end ;
74268: LD_ADDR_VAR 0 3
74272: PUSH
74273: LD_INT 1
74275: ST_TO_ADDR
// end ;
74276: LD_VAR 0 3
74280: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74281: LD_INT 0
74283: PPUSH
// result := false ;
74284: LD_ADDR_VAR 0 4
74288: PUSH
74289: LD_INT 0
74291: ST_TO_ADDR
// if GetTaskList ( unit ) then
74292: LD_VAR 0 1
74296: PPUSH
74297: CALL_OW 437
74301: IFFALSE 74384
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74303: LD_STRING M
74305: PUSH
74306: LD_VAR 0 1
74310: PPUSH
74311: CALL_OW 437
74315: PUSH
74316: LD_INT 1
74318: ARRAY
74319: PUSH
74320: LD_INT 1
74322: ARRAY
74323: EQUAL
74324: PUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_VAR 0 1
74334: PPUSH
74335: CALL_OW 437
74339: PUSH
74340: LD_INT 1
74342: ARRAY
74343: PUSH
74344: LD_INT 2
74346: ARRAY
74347: EQUAL
74348: AND
74349: PUSH
74350: LD_VAR 0 3
74354: PUSH
74355: LD_VAR 0 1
74359: PPUSH
74360: CALL_OW 437
74364: PUSH
74365: LD_INT 1
74367: ARRAY
74368: PUSH
74369: LD_INT 3
74371: ARRAY
74372: EQUAL
74373: AND
74374: IFFALSE 74384
// result := true ;
74376: LD_ADDR_VAR 0 4
74380: PUSH
74381: LD_INT 1
74383: ST_TO_ADDR
// end ; end ;
74384: LD_VAR 0 4
74388: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74389: LD_INT 0
74391: PPUSH
74392: PPUSH
74393: PPUSH
74394: PPUSH
// if not unit or not area then
74395: LD_VAR 0 1
74399: NOT
74400: PUSH
74401: LD_VAR 0 2
74405: NOT
74406: OR
74407: IFFALSE 74411
// exit ;
74409: GO 74575
// tmp := AreaToList ( area , i ) ;
74411: LD_ADDR_VAR 0 6
74415: PUSH
74416: LD_VAR 0 2
74420: PPUSH
74421: LD_VAR 0 5
74425: PPUSH
74426: CALL_OW 517
74430: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74431: LD_ADDR_VAR 0 5
74435: PUSH
74436: DOUBLE
74437: LD_INT 1
74439: DEC
74440: ST_TO_ADDR
74441: LD_VAR 0 6
74445: PUSH
74446: LD_INT 1
74448: ARRAY
74449: PUSH
74450: FOR_TO
74451: IFFALSE 74573
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74453: LD_ADDR_VAR 0 7
74457: PUSH
74458: LD_VAR 0 6
74462: PUSH
74463: LD_INT 1
74465: ARRAY
74466: PUSH
74467: LD_VAR 0 5
74471: ARRAY
74472: PUSH
74473: LD_VAR 0 6
74477: PUSH
74478: LD_INT 2
74480: ARRAY
74481: PUSH
74482: LD_VAR 0 5
74486: ARRAY
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74492: LD_VAR 0 7
74496: PUSH
74497: LD_INT 1
74499: ARRAY
74500: PPUSH
74501: LD_VAR 0 7
74505: PUSH
74506: LD_INT 2
74508: ARRAY
74509: PPUSH
74510: CALL_OW 428
74514: PUSH
74515: LD_INT 0
74517: EQUAL
74518: IFFALSE 74571
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74520: LD_VAR 0 1
74524: PPUSH
74525: LD_VAR 0 7
74529: PUSH
74530: LD_INT 1
74532: ARRAY
74533: PPUSH
74534: LD_VAR 0 7
74538: PUSH
74539: LD_INT 2
74541: ARRAY
74542: PPUSH
74543: LD_VAR 0 3
74547: PPUSH
74548: CALL_OW 48
// result := IsPlaced ( unit ) ;
74552: LD_ADDR_VAR 0 4
74556: PUSH
74557: LD_VAR 0 1
74561: PPUSH
74562: CALL_OW 305
74566: ST_TO_ADDR
// exit ;
74567: POP
74568: POP
74569: GO 74575
// end ; end ;
74571: GO 74450
74573: POP
74574: POP
// end ;
74575: LD_VAR 0 4
74579: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74580: LD_INT 0
74582: PPUSH
74583: PPUSH
74584: PPUSH
// if not side or side > 8 then
74585: LD_VAR 0 1
74589: NOT
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_INT 8
74598: GREATER
74599: OR
74600: IFFALSE 74604
// exit ;
74602: GO 74791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74604: LD_ADDR_VAR 0 4
74608: PUSH
74609: LD_INT 22
74611: PUSH
74612: LD_VAR 0 1
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 21
74623: PUSH
74624: LD_INT 3
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PPUSH
74635: CALL_OW 69
74639: ST_TO_ADDR
// if not tmp then
74640: LD_VAR 0 4
74644: NOT
74645: IFFALSE 74649
// exit ;
74647: GO 74791
// enable_addtolog := true ;
74649: LD_ADDR_OWVAR 81
74653: PUSH
74654: LD_INT 1
74656: ST_TO_ADDR
// AddToLog ( [ ) ;
74657: LD_STRING [
74659: PPUSH
74660: CALL_OW 561
// for i in tmp do
74664: LD_ADDR_VAR 0 3
74668: PUSH
74669: LD_VAR 0 4
74673: PUSH
74674: FOR_IN
74675: IFFALSE 74782
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74677: LD_STRING [
74679: PUSH
74680: LD_VAR 0 3
74684: PPUSH
74685: CALL_OW 266
74689: STR
74690: PUSH
74691: LD_STRING , 
74693: STR
74694: PUSH
74695: LD_VAR 0 3
74699: PPUSH
74700: CALL_OW 250
74704: STR
74705: PUSH
74706: LD_STRING , 
74708: STR
74709: PUSH
74710: LD_VAR 0 3
74714: PPUSH
74715: CALL_OW 251
74719: STR
74720: PUSH
74721: LD_STRING , 
74723: STR
74724: PUSH
74725: LD_VAR 0 3
74729: PPUSH
74730: CALL_OW 254
74734: STR
74735: PUSH
74736: LD_STRING , 
74738: STR
74739: PUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: LD_INT 1
74747: PPUSH
74748: CALL_OW 268
74752: STR
74753: PUSH
74754: LD_STRING , 
74756: STR
74757: PUSH
74758: LD_VAR 0 3
74762: PPUSH
74763: LD_INT 2
74765: PPUSH
74766: CALL_OW 268
74770: STR
74771: PUSH
74772: LD_STRING ],
74774: STR
74775: PPUSH
74776: CALL_OW 561
// end ;
74780: GO 74674
74782: POP
74783: POP
// AddToLog ( ]; ) ;
74784: LD_STRING ];
74786: PPUSH
74787: CALL_OW 561
// end ;
74791: LD_VAR 0 2
74795: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74796: LD_INT 0
74798: PPUSH
74799: PPUSH
74800: PPUSH
74801: PPUSH
74802: PPUSH
// if not area or not rate or not max then
74803: LD_VAR 0 1
74807: NOT
74808: PUSH
74809: LD_VAR 0 2
74813: NOT
74814: OR
74815: PUSH
74816: LD_VAR 0 4
74820: NOT
74821: OR
74822: IFFALSE 74826
// exit ;
74824: GO 75015
// while 1 do
74826: LD_INT 1
74828: IFFALSE 75015
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74830: LD_ADDR_VAR 0 9
74834: PUSH
74835: LD_VAR 0 1
74839: PPUSH
74840: LD_INT 1
74842: PPUSH
74843: CALL_OW 287
74847: PUSH
74848: LD_INT 10
74850: MUL
74851: ST_TO_ADDR
// r := rate / 10 ;
74852: LD_ADDR_VAR 0 7
74856: PUSH
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 10
74864: DIVREAL
74865: ST_TO_ADDR
// time := 1 1$00 ;
74866: LD_ADDR_VAR 0 8
74870: PUSH
74871: LD_INT 2100
74873: ST_TO_ADDR
// if amount < min then
74874: LD_VAR 0 9
74878: PUSH
74879: LD_VAR 0 3
74883: LESS
74884: IFFALSE 74902
// r := r * 2 else
74886: LD_ADDR_VAR 0 7
74890: PUSH
74891: LD_VAR 0 7
74895: PUSH
74896: LD_INT 2
74898: MUL
74899: ST_TO_ADDR
74900: GO 74928
// if amount > max then
74902: LD_VAR 0 9
74906: PUSH
74907: LD_VAR 0 4
74911: GREATER
74912: IFFALSE 74928
// r := r / 2 ;
74914: LD_ADDR_VAR 0 7
74918: PUSH
74919: LD_VAR 0 7
74923: PUSH
74924: LD_INT 2
74926: DIVREAL
74927: ST_TO_ADDR
// time := time / r ;
74928: LD_ADDR_VAR 0 8
74932: PUSH
74933: LD_VAR 0 8
74937: PUSH
74938: LD_VAR 0 7
74942: DIVREAL
74943: ST_TO_ADDR
// if time < 0 then
74944: LD_VAR 0 8
74948: PUSH
74949: LD_INT 0
74951: LESS
74952: IFFALSE 74969
// time := time * - 1 ;
74954: LD_ADDR_VAR 0 8
74958: PUSH
74959: LD_VAR 0 8
74963: PUSH
74964: LD_INT 1
74966: NEG
74967: MUL
74968: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74969: LD_VAR 0 8
74973: PUSH
74974: LD_INT 35
74976: PPUSH
74977: LD_INT 875
74979: PPUSH
74980: CALL_OW 12
74984: PLUS
74985: PPUSH
74986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74990: LD_INT 1
74992: PPUSH
74993: LD_INT 5
74995: PPUSH
74996: CALL_OW 12
75000: PPUSH
75001: LD_VAR 0 1
75005: PPUSH
75006: LD_INT 1
75008: PPUSH
75009: CALL_OW 55
// end ;
75013: GO 74826
// end ;
75015: LD_VAR 0 5
75019: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75020: LD_INT 0
75022: PPUSH
75023: PPUSH
75024: PPUSH
75025: PPUSH
75026: PPUSH
75027: PPUSH
75028: PPUSH
75029: PPUSH
// if not turrets or not factories then
75030: LD_VAR 0 1
75034: NOT
75035: PUSH
75036: LD_VAR 0 2
75040: NOT
75041: OR
75042: IFFALSE 75046
// exit ;
75044: GO 75353
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75046: LD_ADDR_VAR 0 10
75050: PUSH
75051: LD_INT 5
75053: PUSH
75054: LD_INT 6
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_INT 2
75063: PUSH
75064: LD_INT 4
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 3
75073: PUSH
75074: LD_INT 5
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 24
75088: PUSH
75089: LD_INT 25
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 23
75098: PUSH
75099: LD_INT 27
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 42
75112: PUSH
75113: LD_INT 43
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 44
75122: PUSH
75123: LD_INT 46
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 45
75132: PUSH
75133: LD_INT 47
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: ST_TO_ADDR
// result := [ ] ;
75150: LD_ADDR_VAR 0 3
75154: PUSH
75155: EMPTY
75156: ST_TO_ADDR
// for i in turrets do
75157: LD_ADDR_VAR 0 4
75161: PUSH
75162: LD_VAR 0 1
75166: PUSH
75167: FOR_IN
75168: IFFALSE 75351
// begin nat := GetNation ( i ) ;
75170: LD_ADDR_VAR 0 7
75174: PUSH
75175: LD_VAR 0 4
75179: PPUSH
75180: CALL_OW 248
75184: ST_TO_ADDR
// weapon := 0 ;
75185: LD_ADDR_VAR 0 8
75189: PUSH
75190: LD_INT 0
75192: ST_TO_ADDR
// if not nat then
75193: LD_VAR 0 7
75197: NOT
75198: IFFALSE 75202
// continue ;
75200: GO 75167
// for j in list [ nat ] do
75202: LD_ADDR_VAR 0 5
75206: PUSH
75207: LD_VAR 0 10
75211: PUSH
75212: LD_VAR 0 7
75216: ARRAY
75217: PUSH
75218: FOR_IN
75219: IFFALSE 75260
// if GetBWeapon ( i ) = j [ 1 ] then
75221: LD_VAR 0 4
75225: PPUSH
75226: CALL_OW 269
75230: PUSH
75231: LD_VAR 0 5
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: EQUAL
75240: IFFALSE 75258
// begin weapon := j [ 2 ] ;
75242: LD_ADDR_VAR 0 8
75246: PUSH
75247: LD_VAR 0 5
75251: PUSH
75252: LD_INT 2
75254: ARRAY
75255: ST_TO_ADDR
// break ;
75256: GO 75260
// end ;
75258: GO 75218
75260: POP
75261: POP
// if not weapon then
75262: LD_VAR 0 8
75266: NOT
75267: IFFALSE 75271
// continue ;
75269: GO 75167
// for k in factories do
75271: LD_ADDR_VAR 0 6
75275: PUSH
75276: LD_VAR 0 2
75280: PUSH
75281: FOR_IN
75282: IFFALSE 75347
// begin weapons := AvailableWeaponList ( k ) ;
75284: LD_ADDR_VAR 0 9
75288: PUSH
75289: LD_VAR 0 6
75293: PPUSH
75294: CALL_OW 478
75298: ST_TO_ADDR
// if not weapons then
75299: LD_VAR 0 9
75303: NOT
75304: IFFALSE 75308
// continue ;
75306: GO 75281
// if weapon in weapons then
75308: LD_VAR 0 8
75312: PUSH
75313: LD_VAR 0 9
75317: IN
75318: IFFALSE 75345
// begin result := [ i , weapon ] ;
75320: LD_ADDR_VAR 0 3
75324: PUSH
75325: LD_VAR 0 4
75329: PUSH
75330: LD_VAR 0 8
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: ST_TO_ADDR
// exit ;
75339: POP
75340: POP
75341: POP
75342: POP
75343: GO 75353
// end ; end ;
75345: GO 75281
75347: POP
75348: POP
// end ;
75349: GO 75167
75351: POP
75352: POP
// end ;
75353: LD_VAR 0 3
75357: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75358: LD_INT 0
75360: PPUSH
// if not side or side > 8 then
75361: LD_VAR 0 3
75365: NOT
75366: PUSH
75367: LD_VAR 0 3
75371: PUSH
75372: LD_INT 8
75374: GREATER
75375: OR
75376: IFFALSE 75380
// exit ;
75378: GO 75439
// if not range then
75380: LD_VAR 0 4
75384: NOT
75385: IFFALSE 75396
// range := - 12 ;
75387: LD_ADDR_VAR 0 4
75391: PUSH
75392: LD_INT 12
75394: NEG
75395: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75396: LD_VAR 0 1
75400: PPUSH
75401: LD_VAR 0 2
75405: PPUSH
75406: LD_VAR 0 3
75410: PPUSH
75411: LD_VAR 0 4
75415: PPUSH
75416: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75420: LD_VAR 0 1
75424: PPUSH
75425: LD_VAR 0 2
75429: PPUSH
75430: LD_VAR 0 3
75434: PPUSH
75435: CALL_OW 331
// end ;
75439: LD_VAR 0 5
75443: RET
// export function Video ( mode ) ; begin
75444: LD_INT 0
75446: PPUSH
// ingame_video = mode ;
75447: LD_ADDR_OWVAR 52
75451: PUSH
75452: LD_VAR 0 1
75456: ST_TO_ADDR
// interface_hidden = mode ;
75457: LD_ADDR_OWVAR 54
75461: PUSH
75462: LD_VAR 0 1
75466: ST_TO_ADDR
// end ;
75467: LD_VAR 0 2
75471: RET
// export function Join ( array , element ) ; begin
75472: LD_INT 0
75474: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75475: LD_ADDR_VAR 0 3
75479: PUSH
75480: LD_VAR 0 1
75484: PPUSH
75485: LD_VAR 0 1
75489: PUSH
75490: LD_INT 1
75492: PLUS
75493: PPUSH
75494: LD_VAR 0 2
75498: PPUSH
75499: CALL_OW 1
75503: ST_TO_ADDR
// end ;
75504: LD_VAR 0 3
75508: RET
// export function JoinUnion ( array , element ) ; begin
75509: LD_INT 0
75511: PPUSH
// result := array union element ;
75512: LD_ADDR_VAR 0 3
75516: PUSH
75517: LD_VAR 0 1
75521: PUSH
75522: LD_VAR 0 2
75526: UNION
75527: ST_TO_ADDR
// end ;
75528: LD_VAR 0 3
75532: RET
// export function GetBehemoths ( side ) ; begin
75533: LD_INT 0
75535: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75536: LD_ADDR_VAR 0 2
75540: PUSH
75541: LD_INT 22
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 31
75555: PUSH
75556: LD_INT 25
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PPUSH
75567: CALL_OW 69
75571: ST_TO_ADDR
// end ;
75572: LD_VAR 0 2
75576: RET
// export function Shuffle ( array ) ; var i , index ; begin
75577: LD_INT 0
75579: PPUSH
75580: PPUSH
75581: PPUSH
// result := [ ] ;
75582: LD_ADDR_VAR 0 2
75586: PUSH
75587: EMPTY
75588: ST_TO_ADDR
// if not array then
75589: LD_VAR 0 1
75593: NOT
75594: IFFALSE 75598
// exit ;
75596: GO 75697
// Randomize ;
75598: CALL_OW 10
// for i = array downto 1 do
75602: LD_ADDR_VAR 0 3
75606: PUSH
75607: DOUBLE
75608: LD_VAR 0 1
75612: INC
75613: ST_TO_ADDR
75614: LD_INT 1
75616: PUSH
75617: FOR_DOWNTO
75618: IFFALSE 75695
// begin index := rand ( 1 , array ) ;
75620: LD_ADDR_VAR 0 4
75624: PUSH
75625: LD_INT 1
75627: PPUSH
75628: LD_VAR 0 1
75632: PPUSH
75633: CALL_OW 12
75637: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75638: LD_ADDR_VAR 0 2
75642: PUSH
75643: LD_VAR 0 2
75647: PPUSH
75648: LD_VAR 0 2
75652: PUSH
75653: LD_INT 1
75655: PLUS
75656: PPUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_VAR 0 4
75666: ARRAY
75667: PPUSH
75668: CALL_OW 2
75672: ST_TO_ADDR
// array := Delete ( array , index ) ;
75673: LD_ADDR_VAR 0 1
75677: PUSH
75678: LD_VAR 0 1
75682: PPUSH
75683: LD_VAR 0 4
75687: PPUSH
75688: CALL_OW 3
75692: ST_TO_ADDR
// end ;
75693: GO 75617
75695: POP
75696: POP
// end ;
75697: LD_VAR 0 2
75701: RET
// export function GetBaseMaterials ( base ) ; begin
75702: LD_INT 0
75704: PPUSH
// result := [ 0 , 0 , 0 ] ;
75705: LD_ADDR_VAR 0 2
75709: PUSH
75710: LD_INT 0
75712: PUSH
75713: LD_INT 0
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: ST_TO_ADDR
// if not base then
75724: LD_VAR 0 1
75728: NOT
75729: IFFALSE 75733
// exit ;
75731: GO 75782
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75733: LD_ADDR_VAR 0 2
75737: PUSH
75738: LD_VAR 0 1
75742: PPUSH
75743: LD_INT 1
75745: PPUSH
75746: CALL_OW 275
75750: PUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_INT 2
75758: PPUSH
75759: CALL_OW 275
75763: PUSH
75764: LD_VAR 0 1
75768: PPUSH
75769: LD_INT 3
75771: PPUSH
75772: CALL_OW 275
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: ST_TO_ADDR
// end ;
75782: LD_VAR 0 2
75786: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75787: LD_INT 0
75789: PPUSH
75790: PPUSH
// result := array ;
75791: LD_ADDR_VAR 0 3
75795: PUSH
75796: LD_VAR 0 1
75800: ST_TO_ADDR
// if size > 0 then
75801: LD_VAR 0 2
75805: PUSH
75806: LD_INT 0
75808: GREATER
75809: IFFALSE 75855
// for i := array downto size do
75811: LD_ADDR_VAR 0 4
75815: PUSH
75816: DOUBLE
75817: LD_VAR 0 1
75821: INC
75822: ST_TO_ADDR
75823: LD_VAR 0 2
75827: PUSH
75828: FOR_DOWNTO
75829: IFFALSE 75853
// result := Delete ( result , result ) ;
75831: LD_ADDR_VAR 0 3
75835: PUSH
75836: LD_VAR 0 3
75840: PPUSH
75841: LD_VAR 0 3
75845: PPUSH
75846: CALL_OW 3
75850: ST_TO_ADDR
75851: GO 75828
75853: POP
75854: POP
// end ;
75855: LD_VAR 0 3
75859: RET
// export function ComExit ( unit ) ; var tmp ; begin
75860: LD_INT 0
75862: PPUSH
75863: PPUSH
// if not IsInUnit ( unit ) then
75864: LD_VAR 0 1
75868: PPUSH
75869: CALL_OW 310
75873: NOT
75874: IFFALSE 75878
// exit ;
75876: GO 75938
// tmp := IsInUnit ( unit ) ;
75878: LD_ADDR_VAR 0 3
75882: PUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: CALL_OW 310
75892: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75893: LD_VAR 0 3
75897: PPUSH
75898: CALL_OW 247
75902: PUSH
75903: LD_INT 2
75905: EQUAL
75906: IFFALSE 75919
// ComExitVehicle ( unit ) else
75908: LD_VAR 0 1
75912: PPUSH
75913: CALL_OW 121
75917: GO 75928
// ComExitBuilding ( unit ) ;
75919: LD_VAR 0 1
75923: PPUSH
75924: CALL_OW 122
// result := tmp ;
75928: LD_ADDR_VAR 0 2
75932: PUSH
75933: LD_VAR 0 3
75937: ST_TO_ADDR
// end ;
75938: LD_VAR 0 2
75942: RET
// export function ComExitAll ( units ) ; var i ; begin
75943: LD_INT 0
75945: PPUSH
75946: PPUSH
// if not units then
75947: LD_VAR 0 1
75951: NOT
75952: IFFALSE 75956
// exit ;
75954: GO 75982
// for i in units do
75956: LD_ADDR_VAR 0 3
75960: PUSH
75961: LD_VAR 0 1
75965: PUSH
75966: FOR_IN
75967: IFFALSE 75980
// ComExit ( i ) ;
75969: LD_VAR 0 3
75973: PPUSH
75974: CALL 75860 0 1
75978: GO 75966
75980: POP
75981: POP
// end ;
75982: LD_VAR 0 2
75986: RET
// export function ResetHc ; begin
75987: LD_INT 0
75989: PPUSH
// InitHc ;
75990: CALL_OW 19
// hc_importance := 0 ;
75994: LD_ADDR_OWVAR 32
75998: PUSH
75999: LD_INT 0
76001: ST_TO_ADDR
// end ;
76002: LD_VAR 0 1
76006: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76007: LD_INT 0
76009: PPUSH
76010: PPUSH
76011: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76012: LD_ADDR_VAR 0 6
76016: PUSH
76017: LD_VAR 0 1
76021: PUSH
76022: LD_VAR 0 3
76026: PLUS
76027: PUSH
76028: LD_INT 2
76030: DIV
76031: ST_TO_ADDR
// if _x < 0 then
76032: LD_VAR 0 6
76036: PUSH
76037: LD_INT 0
76039: LESS
76040: IFFALSE 76057
// _x := _x * - 1 ;
76042: LD_ADDR_VAR 0 6
76046: PUSH
76047: LD_VAR 0 6
76051: PUSH
76052: LD_INT 1
76054: NEG
76055: MUL
76056: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76057: LD_ADDR_VAR 0 7
76061: PUSH
76062: LD_VAR 0 2
76066: PUSH
76067: LD_VAR 0 4
76071: PLUS
76072: PUSH
76073: LD_INT 2
76075: DIV
76076: ST_TO_ADDR
// if _y < 0 then
76077: LD_VAR 0 7
76081: PUSH
76082: LD_INT 0
76084: LESS
76085: IFFALSE 76102
// _y := _y * - 1 ;
76087: LD_ADDR_VAR 0 7
76091: PUSH
76092: LD_VAR 0 7
76096: PUSH
76097: LD_INT 1
76099: NEG
76100: MUL
76101: ST_TO_ADDR
// result := [ _x , _y ] ;
76102: LD_ADDR_VAR 0 5
76106: PUSH
76107: LD_VAR 0 6
76111: PUSH
76112: LD_VAR 0 7
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: ST_TO_ADDR
// end ;
76121: LD_VAR 0 5
76125: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76126: LD_INT 0
76128: PPUSH
76129: PPUSH
76130: PPUSH
76131: PPUSH
// task := GetTaskList ( unit ) ;
76132: LD_ADDR_VAR 0 7
76136: PUSH
76137: LD_VAR 0 1
76141: PPUSH
76142: CALL_OW 437
76146: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76147: LD_VAR 0 7
76151: NOT
76152: PUSH
76153: LD_VAR 0 1
76157: PPUSH
76158: LD_VAR 0 2
76162: PPUSH
76163: CALL_OW 308
76167: NOT
76168: AND
76169: IFFALSE 76173
// exit ;
76171: GO 76291
// if IsInArea ( unit , area ) then
76173: LD_VAR 0 1
76177: PPUSH
76178: LD_VAR 0 2
76182: PPUSH
76183: CALL_OW 308
76187: IFFALSE 76205
// begin ComMoveToArea ( unit , goAway ) ;
76189: LD_VAR 0 1
76193: PPUSH
76194: LD_VAR 0 3
76198: PPUSH
76199: CALL_OW 113
// exit ;
76203: GO 76291
// end ; if task [ 1 ] [ 1 ] <> M then
76205: LD_VAR 0 7
76209: PUSH
76210: LD_INT 1
76212: ARRAY
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: PUSH
76218: LD_STRING M
76220: NONEQUAL
76221: IFFALSE 76225
// exit ;
76223: GO 76291
// x := task [ 1 ] [ 2 ] ;
76225: LD_ADDR_VAR 0 5
76229: PUSH
76230: LD_VAR 0 7
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PUSH
76239: LD_INT 2
76241: ARRAY
76242: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76243: LD_ADDR_VAR 0 6
76247: PUSH
76248: LD_VAR 0 7
76252: PUSH
76253: LD_INT 1
76255: ARRAY
76256: PUSH
76257: LD_INT 3
76259: ARRAY
76260: ST_TO_ADDR
// if InArea ( x , y , area ) then
76261: LD_VAR 0 5
76265: PPUSH
76266: LD_VAR 0 6
76270: PPUSH
76271: LD_VAR 0 2
76275: PPUSH
76276: CALL_OW 309
76280: IFFALSE 76291
// ComStop ( unit ) ;
76282: LD_VAR 0 1
76286: PPUSH
76287: CALL_OW 141
// end ;
76291: LD_VAR 0 4
76295: RET
// export function Abs ( value ) ; begin
76296: LD_INT 0
76298: PPUSH
// result := value ;
76299: LD_ADDR_VAR 0 2
76303: PUSH
76304: LD_VAR 0 1
76308: ST_TO_ADDR
// if value < 0 then
76309: LD_VAR 0 1
76313: PUSH
76314: LD_INT 0
76316: LESS
76317: IFFALSE 76334
// result := value * - 1 ;
76319: LD_ADDR_VAR 0 2
76323: PUSH
76324: LD_VAR 0 1
76328: PUSH
76329: LD_INT 1
76331: NEG
76332: MUL
76333: ST_TO_ADDR
// end ;
76334: LD_VAR 0 2
76338: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76339: LD_INT 0
76341: PPUSH
76342: PPUSH
76343: PPUSH
76344: PPUSH
76345: PPUSH
76346: PPUSH
76347: PPUSH
76348: PPUSH
// if not unit or not building then
76349: LD_VAR 0 1
76353: NOT
76354: PUSH
76355: LD_VAR 0 2
76359: NOT
76360: OR
76361: IFFALSE 76365
// exit ;
76363: GO 76591
// x := GetX ( building ) ;
76365: LD_ADDR_VAR 0 4
76369: PUSH
76370: LD_VAR 0 2
76374: PPUSH
76375: CALL_OW 250
76379: ST_TO_ADDR
// y := GetY ( building ) ;
76380: LD_ADDR_VAR 0 6
76384: PUSH
76385: LD_VAR 0 2
76389: PPUSH
76390: CALL_OW 251
76394: ST_TO_ADDR
// d := GetDir ( building ) ;
76395: LD_ADDR_VAR 0 8
76399: PUSH
76400: LD_VAR 0 2
76404: PPUSH
76405: CALL_OW 254
76409: ST_TO_ADDR
// r := 4 ;
76410: LD_ADDR_VAR 0 9
76414: PUSH
76415: LD_INT 4
76417: ST_TO_ADDR
// for i := 1 to 5 do
76418: LD_ADDR_VAR 0 10
76422: PUSH
76423: DOUBLE
76424: LD_INT 1
76426: DEC
76427: ST_TO_ADDR
76428: LD_INT 5
76430: PUSH
76431: FOR_TO
76432: IFFALSE 76589
// begin _x := ShiftX ( x , d , r + i ) ;
76434: LD_ADDR_VAR 0 5
76438: PUSH
76439: LD_VAR 0 4
76443: PPUSH
76444: LD_VAR 0 8
76448: PPUSH
76449: LD_VAR 0 9
76453: PUSH
76454: LD_VAR 0 10
76458: PLUS
76459: PPUSH
76460: CALL_OW 272
76464: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76465: LD_ADDR_VAR 0 7
76469: PUSH
76470: LD_VAR 0 6
76474: PPUSH
76475: LD_VAR 0 8
76479: PPUSH
76480: LD_VAR 0 9
76484: PUSH
76485: LD_VAR 0 10
76489: PLUS
76490: PPUSH
76491: CALL_OW 273
76495: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76496: LD_VAR 0 5
76500: PPUSH
76501: LD_VAR 0 7
76505: PPUSH
76506: CALL_OW 488
76510: PUSH
76511: LD_VAR 0 5
76515: PPUSH
76516: LD_VAR 0 7
76520: PPUSH
76521: CALL_OW 428
76525: PPUSH
76526: CALL_OW 247
76530: PUSH
76531: LD_INT 3
76533: PUSH
76534: LD_INT 2
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: IN
76541: NOT
76542: AND
76543: IFFALSE 76587
// begin ComMoveXY ( unit , _x , _y ) ;
76545: LD_VAR 0 1
76549: PPUSH
76550: LD_VAR 0 5
76554: PPUSH
76555: LD_VAR 0 7
76559: PPUSH
76560: CALL_OW 111
// result := [ _x , _y ] ;
76564: LD_ADDR_VAR 0 3
76568: PUSH
76569: LD_VAR 0 5
76573: PUSH
76574: LD_VAR 0 7
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: ST_TO_ADDR
// exit ;
76583: POP
76584: POP
76585: GO 76591
// end ; end ;
76587: GO 76431
76589: POP
76590: POP
// end ;
76591: LD_VAR 0 3
76595: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
76600: PPUSH
// result := 0 ;
76601: LD_ADDR_VAR 0 3
76605: PUSH
76606: LD_INT 0
76608: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76609: LD_VAR 0 1
76613: PUSH
76614: LD_INT 0
76616: LESS
76617: PUSH
76618: LD_VAR 0 1
76622: PUSH
76623: LD_INT 8
76625: GREATER
76626: OR
76627: PUSH
76628: LD_VAR 0 2
76632: PUSH
76633: LD_INT 0
76635: LESS
76636: OR
76637: PUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_INT 8
76645: GREATER
76646: OR
76647: IFFALSE 76651
// exit ;
76649: GO 76726
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76651: LD_ADDR_VAR 0 4
76655: PUSH
76656: LD_INT 22
76658: PUSH
76659: LD_VAR 0 2
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PPUSH
76668: CALL_OW 69
76672: PUSH
76673: FOR_IN
76674: IFFALSE 76724
// begin un := UnitShoot ( i ) ;
76676: LD_ADDR_VAR 0 5
76680: PUSH
76681: LD_VAR 0 4
76685: PPUSH
76686: CALL_OW 504
76690: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76691: LD_VAR 0 5
76695: PPUSH
76696: CALL_OW 255
76700: PUSH
76701: LD_VAR 0 1
76705: EQUAL
76706: IFFALSE 76722
// begin result := un ;
76708: LD_ADDR_VAR 0 3
76712: PUSH
76713: LD_VAR 0 5
76717: ST_TO_ADDR
// exit ;
76718: POP
76719: POP
76720: GO 76726
// end ; end ;
76722: GO 76673
76724: POP
76725: POP
// end ;
76726: LD_VAR 0 3
76730: RET
// export function GetCargoBay ( units ) ; begin
76731: LD_INT 0
76733: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76734: LD_ADDR_VAR 0 2
76738: PUSH
76739: LD_VAR 0 1
76743: PPUSH
76744: LD_INT 2
76746: PUSH
76747: LD_INT 34
76749: PUSH
76750: LD_INT 12
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PUSH
76757: LD_INT 34
76759: PUSH
76760: LD_INT 51
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: LD_INT 34
76769: PUSH
76770: LD_INT 32
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 34
76779: PUSH
76780: LD_EXP 61
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: PPUSH
76796: CALL_OW 72
76800: ST_TO_ADDR
// end ;
76801: LD_VAR 0 2
76805: RET
// export function Negate ( value ) ; begin
76806: LD_INT 0
76808: PPUSH
// result := not value ;
76809: LD_ADDR_VAR 0 2
76813: PUSH
76814: LD_VAR 0 1
76818: NOT
76819: ST_TO_ADDR
// end ;
76820: LD_VAR 0 2
76824: RET
// export function Inc ( value ) ; begin
76825: LD_INT 0
76827: PPUSH
// result := value + 1 ;
76828: LD_ADDR_VAR 0 2
76832: PUSH
76833: LD_VAR 0 1
76837: PUSH
76838: LD_INT 1
76840: PLUS
76841: ST_TO_ADDR
// end ;
76842: LD_VAR 0 2
76846: RET
// export function Dec ( value ) ; begin
76847: LD_INT 0
76849: PPUSH
// result := value - 1 ;
76850: LD_ADDR_VAR 0 2
76854: PUSH
76855: LD_VAR 0 1
76859: PUSH
76860: LD_INT 1
76862: MINUS
76863: ST_TO_ADDR
// end ;
76864: LD_VAR 0 2
76868: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76869: LD_INT 0
76871: PPUSH
76872: PPUSH
76873: PPUSH
76874: PPUSH
76875: PPUSH
76876: PPUSH
76877: PPUSH
76878: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76879: LD_VAR 0 1
76883: PPUSH
76884: LD_VAR 0 2
76888: PPUSH
76889: CALL_OW 488
76893: NOT
76894: PUSH
76895: LD_VAR 0 3
76899: PPUSH
76900: LD_VAR 0 4
76904: PPUSH
76905: CALL_OW 488
76909: NOT
76910: OR
76911: IFFALSE 76924
// begin result := - 1 ;
76913: LD_ADDR_VAR 0 5
76917: PUSH
76918: LD_INT 1
76920: NEG
76921: ST_TO_ADDR
// exit ;
76922: GO 77159
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76924: LD_ADDR_VAR 0 12
76928: PUSH
76929: LD_VAR 0 1
76933: PPUSH
76934: LD_VAR 0 2
76938: PPUSH
76939: LD_VAR 0 3
76943: PPUSH
76944: LD_VAR 0 4
76948: PPUSH
76949: CALL 76007 0 4
76953: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76954: LD_ADDR_VAR 0 11
76958: PUSH
76959: LD_VAR 0 1
76963: PPUSH
76964: LD_VAR 0 2
76968: PPUSH
76969: LD_VAR 0 12
76973: PUSH
76974: LD_INT 1
76976: ARRAY
76977: PPUSH
76978: LD_VAR 0 12
76982: PUSH
76983: LD_INT 2
76985: ARRAY
76986: PPUSH
76987: CALL_OW 298
76991: ST_TO_ADDR
// distance := 9999 ;
76992: LD_ADDR_VAR 0 10
76996: PUSH
76997: LD_INT 9999
76999: ST_TO_ADDR
// for i := 0 to 5 do
77000: LD_ADDR_VAR 0 6
77004: PUSH
77005: DOUBLE
77006: LD_INT 0
77008: DEC
77009: ST_TO_ADDR
77010: LD_INT 5
77012: PUSH
77013: FOR_TO
77014: IFFALSE 77157
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77016: LD_ADDR_VAR 0 7
77020: PUSH
77021: LD_VAR 0 1
77025: PPUSH
77026: LD_VAR 0 6
77030: PPUSH
77031: LD_VAR 0 11
77035: PPUSH
77036: CALL_OW 272
77040: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77041: LD_ADDR_VAR 0 8
77045: PUSH
77046: LD_VAR 0 2
77050: PPUSH
77051: LD_VAR 0 6
77055: PPUSH
77056: LD_VAR 0 11
77060: PPUSH
77061: CALL_OW 273
77065: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77066: LD_VAR 0 7
77070: PPUSH
77071: LD_VAR 0 8
77075: PPUSH
77076: CALL_OW 488
77080: NOT
77081: IFFALSE 77085
// continue ;
77083: GO 77013
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77085: LD_ADDR_VAR 0 9
77089: PUSH
77090: LD_VAR 0 12
77094: PUSH
77095: LD_INT 1
77097: ARRAY
77098: PPUSH
77099: LD_VAR 0 12
77103: PUSH
77104: LD_INT 2
77106: ARRAY
77107: PPUSH
77108: LD_VAR 0 7
77112: PPUSH
77113: LD_VAR 0 8
77117: PPUSH
77118: CALL_OW 298
77122: ST_TO_ADDR
// if tmp < distance then
77123: LD_VAR 0 9
77127: PUSH
77128: LD_VAR 0 10
77132: LESS
77133: IFFALSE 77155
// begin result := i ;
77135: LD_ADDR_VAR 0 5
77139: PUSH
77140: LD_VAR 0 6
77144: ST_TO_ADDR
// distance := tmp ;
77145: LD_ADDR_VAR 0 10
77149: PUSH
77150: LD_VAR 0 9
77154: ST_TO_ADDR
// end ; end ;
77155: GO 77013
77157: POP
77158: POP
// end ;
77159: LD_VAR 0 5
77163: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
// if not driver or not IsInUnit ( driver ) then
77168: LD_VAR 0 1
77172: NOT
77173: PUSH
77174: LD_VAR 0 1
77178: PPUSH
77179: CALL_OW 310
77183: NOT
77184: OR
77185: IFFALSE 77189
// exit ;
77187: GO 77279
// vehicle := IsInUnit ( driver ) ;
77189: LD_ADDR_VAR 0 3
77193: PUSH
77194: LD_VAR 0 1
77198: PPUSH
77199: CALL_OW 310
77203: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77204: LD_VAR 0 1
77208: PPUSH
77209: LD_STRING \
77211: PUSH
77212: LD_INT 0
77214: PUSH
77215: LD_INT 0
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: LD_INT 0
77223: PUSH
77224: LD_INT 0
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: PUSH
77239: LD_STRING E
77241: PUSH
77242: LD_INT 0
77244: PUSH
77245: LD_INT 0
77247: PUSH
77248: LD_VAR 0 3
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: LD_INT 0
77258: PUSH
77259: LD_INT 0
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: PPUSH
77275: CALL_OW 446
// end ;
77279: LD_VAR 0 2
77283: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77284: LD_INT 0
77286: PPUSH
77287: PPUSH
// if not driver or not IsInUnit ( driver ) then
77288: LD_VAR 0 1
77292: NOT
77293: PUSH
77294: LD_VAR 0 1
77298: PPUSH
77299: CALL_OW 310
77303: NOT
77304: OR
77305: IFFALSE 77309
// exit ;
77307: GO 77399
// vehicle := IsInUnit ( driver ) ;
77309: LD_ADDR_VAR 0 3
77313: PUSH
77314: LD_VAR 0 1
77318: PPUSH
77319: CALL_OW 310
77323: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77324: LD_VAR 0 1
77328: PPUSH
77329: LD_STRING \
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: LD_INT 0
77337: PUSH
77338: LD_INT 0
77340: PUSH
77341: LD_INT 0
77343: PUSH
77344: LD_INT 0
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: PUSH
77359: LD_STRING E
77361: PUSH
77362: LD_INT 0
77364: PUSH
77365: LD_INT 0
77367: PUSH
77368: LD_VAR 0 3
77372: PUSH
77373: LD_INT 0
77375: PUSH
77376: LD_INT 0
77378: PUSH
77379: LD_INT 0
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PPUSH
77395: CALL_OW 447
// end ;
77399: LD_VAR 0 2
77403: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77404: LD_INT 0
77406: PPUSH
77407: PPUSH
77408: PPUSH
// tmp := [ ] ;
77409: LD_ADDR_VAR 0 5
77413: PUSH
77414: EMPTY
77415: ST_TO_ADDR
// for i in units do
77416: LD_ADDR_VAR 0 4
77420: PUSH
77421: LD_VAR 0 1
77425: PUSH
77426: FOR_IN
77427: IFFALSE 77465
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77429: LD_ADDR_VAR 0 5
77433: PUSH
77434: LD_VAR 0 5
77438: PPUSH
77439: LD_VAR 0 5
77443: PUSH
77444: LD_INT 1
77446: PLUS
77447: PPUSH
77448: LD_VAR 0 4
77452: PPUSH
77453: CALL_OW 256
77457: PPUSH
77458: CALL_OW 2
77462: ST_TO_ADDR
77463: GO 77426
77465: POP
77466: POP
// if not tmp then
77467: LD_VAR 0 5
77471: NOT
77472: IFFALSE 77476
// exit ;
77474: GO 77524
// if asc then
77476: LD_VAR 0 2
77480: IFFALSE 77504
// result := SortListByListAsc ( units , tmp ) else
77482: LD_ADDR_VAR 0 3
77486: PUSH
77487: LD_VAR 0 1
77491: PPUSH
77492: LD_VAR 0 5
77496: PPUSH
77497: CALL_OW 76
77501: ST_TO_ADDR
77502: GO 77524
// result := SortListByListDesc ( units , tmp ) ;
77504: LD_ADDR_VAR 0 3
77508: PUSH
77509: LD_VAR 0 1
77513: PPUSH
77514: LD_VAR 0 5
77518: PPUSH
77519: CALL_OW 77
77523: ST_TO_ADDR
// end ;
77524: LD_VAR 0 3
77528: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77529: LD_INT 0
77531: PPUSH
77532: PPUSH
// task := GetTaskList ( mech ) ;
77533: LD_ADDR_VAR 0 4
77537: PUSH
77538: LD_VAR 0 1
77542: PPUSH
77543: CALL_OW 437
77547: ST_TO_ADDR
// if not task then
77548: LD_VAR 0 4
77552: NOT
77553: IFFALSE 77557
// exit ;
77555: GO 77599
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77557: LD_ADDR_VAR 0 3
77561: PUSH
77562: LD_VAR 0 4
77566: PUSH
77567: LD_INT 1
77569: ARRAY
77570: PUSH
77571: LD_INT 1
77573: ARRAY
77574: PUSH
77575: LD_STRING r
77577: EQUAL
77578: PUSH
77579: LD_VAR 0 4
77583: PUSH
77584: LD_INT 1
77586: ARRAY
77587: PUSH
77588: LD_INT 4
77590: ARRAY
77591: PUSH
77592: LD_VAR 0 2
77596: EQUAL
77597: AND
77598: ST_TO_ADDR
// end ;
77599: LD_VAR 0 3
77603: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77604: LD_INT 0
77606: PPUSH
// SetDir ( unit , d ) ;
77607: LD_VAR 0 1
77611: PPUSH
77612: LD_VAR 0 4
77616: PPUSH
77617: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77621: LD_VAR 0 1
77625: PPUSH
77626: LD_VAR 0 2
77630: PPUSH
77631: LD_VAR 0 3
77635: PPUSH
77636: LD_VAR 0 5
77640: PPUSH
77641: CALL_OW 48
// end ;
77645: LD_VAR 0 6
77649: RET
// export function ToNaturalNumber ( number ) ; begin
77650: LD_INT 0
77652: PPUSH
// result := number div 1 ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: LD_VAR 0 1
77662: PUSH
77663: LD_INT 1
77665: DIV
77666: ST_TO_ADDR
// if number < 0 then
77667: LD_VAR 0 1
77671: PUSH
77672: LD_INT 0
77674: LESS
77675: IFFALSE 77685
// result := 0 ;
77677: LD_ADDR_VAR 0 2
77681: PUSH
77682: LD_INT 0
77684: ST_TO_ADDR
// end ;
77685: LD_VAR 0 2
77689: RET
// export function SortByClass ( units , class ) ; var un ; begin
77690: LD_INT 0
77692: PPUSH
77693: PPUSH
// if not units or not class then
77694: LD_VAR 0 1
77698: NOT
77699: PUSH
77700: LD_VAR 0 2
77704: NOT
77705: OR
77706: IFFALSE 77710
// exit ;
77708: GO 77805
// result := [ ] ;
77710: LD_ADDR_VAR 0 3
77714: PUSH
77715: EMPTY
77716: ST_TO_ADDR
// for un in units do
77717: LD_ADDR_VAR 0 4
77721: PUSH
77722: LD_VAR 0 1
77726: PUSH
77727: FOR_IN
77728: IFFALSE 77803
// if GetClass ( un ) = class then
77730: LD_VAR 0 4
77734: PPUSH
77735: CALL_OW 257
77739: PUSH
77740: LD_VAR 0 2
77744: EQUAL
77745: IFFALSE 77772
// result := Insert ( result , 1 , un ) else
77747: LD_ADDR_VAR 0 3
77751: PUSH
77752: LD_VAR 0 3
77756: PPUSH
77757: LD_INT 1
77759: PPUSH
77760: LD_VAR 0 4
77764: PPUSH
77765: CALL_OW 2
77769: ST_TO_ADDR
77770: GO 77801
// result := Replace ( result , result + 1 , un ) ;
77772: LD_ADDR_VAR 0 3
77776: PUSH
77777: LD_VAR 0 3
77781: PPUSH
77782: LD_VAR 0 3
77786: PUSH
77787: LD_INT 1
77789: PLUS
77790: PPUSH
77791: LD_VAR 0 4
77795: PPUSH
77796: CALL_OW 1
77800: ST_TO_ADDR
77801: GO 77727
77803: POP
77804: POP
// end ;
77805: LD_VAR 0 3
77809: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77810: LD_INT 0
77812: PPUSH
77813: PPUSH
77814: PPUSH
77815: PPUSH
77816: PPUSH
77817: PPUSH
77818: PPUSH
// result := [ ] ;
77819: LD_ADDR_VAR 0 4
77823: PUSH
77824: EMPTY
77825: ST_TO_ADDR
// if x - r < 0 then
77826: LD_VAR 0 1
77830: PUSH
77831: LD_VAR 0 3
77835: MINUS
77836: PUSH
77837: LD_INT 0
77839: LESS
77840: IFFALSE 77852
// min_x := 0 else
77842: LD_ADDR_VAR 0 8
77846: PUSH
77847: LD_INT 0
77849: ST_TO_ADDR
77850: GO 77868
// min_x := x - r ;
77852: LD_ADDR_VAR 0 8
77856: PUSH
77857: LD_VAR 0 1
77861: PUSH
77862: LD_VAR 0 3
77866: MINUS
77867: ST_TO_ADDR
// if y - r < 0 then
77868: LD_VAR 0 2
77872: PUSH
77873: LD_VAR 0 3
77877: MINUS
77878: PUSH
77879: LD_INT 0
77881: LESS
77882: IFFALSE 77894
// min_y := 0 else
77884: LD_ADDR_VAR 0 7
77888: PUSH
77889: LD_INT 0
77891: ST_TO_ADDR
77892: GO 77910
// min_y := y - r ;
77894: LD_ADDR_VAR 0 7
77898: PUSH
77899: LD_VAR 0 2
77903: PUSH
77904: LD_VAR 0 3
77908: MINUS
77909: ST_TO_ADDR
// max_x := x + r ;
77910: LD_ADDR_VAR 0 9
77914: PUSH
77915: LD_VAR 0 1
77919: PUSH
77920: LD_VAR 0 3
77924: PLUS
77925: ST_TO_ADDR
// max_y := y + r ;
77926: LD_ADDR_VAR 0 10
77930: PUSH
77931: LD_VAR 0 2
77935: PUSH
77936: LD_VAR 0 3
77940: PLUS
77941: ST_TO_ADDR
// for _x = min_x to max_x do
77942: LD_ADDR_VAR 0 5
77946: PUSH
77947: DOUBLE
77948: LD_VAR 0 8
77952: DEC
77953: ST_TO_ADDR
77954: LD_VAR 0 9
77958: PUSH
77959: FOR_TO
77960: IFFALSE 78061
// for _y = min_y to max_y do
77962: LD_ADDR_VAR 0 6
77966: PUSH
77967: DOUBLE
77968: LD_VAR 0 7
77972: DEC
77973: ST_TO_ADDR
77974: LD_VAR 0 10
77978: PUSH
77979: FOR_TO
77980: IFFALSE 78057
// begin if not ValidHex ( _x , _y ) then
77982: LD_VAR 0 5
77986: PPUSH
77987: LD_VAR 0 6
77991: PPUSH
77992: CALL_OW 488
77996: NOT
77997: IFFALSE 78001
// continue ;
77999: GO 77979
// if GetResourceTypeXY ( _x , _y ) then
78001: LD_VAR 0 5
78005: PPUSH
78006: LD_VAR 0 6
78010: PPUSH
78011: CALL_OW 283
78015: IFFALSE 78055
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78017: LD_ADDR_VAR 0 4
78021: PUSH
78022: LD_VAR 0 4
78026: PPUSH
78027: LD_VAR 0 4
78031: PUSH
78032: LD_INT 1
78034: PLUS
78035: PPUSH
78036: LD_VAR 0 5
78040: PUSH
78041: LD_VAR 0 6
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PPUSH
78050: CALL_OW 1
78054: ST_TO_ADDR
// end ;
78055: GO 77979
78057: POP
78058: POP
78059: GO 77959
78061: POP
78062: POP
// end ;
78063: LD_VAR 0 4
78067: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78068: LD_INT 0
78070: PPUSH
78071: PPUSH
78072: PPUSH
78073: PPUSH
78074: PPUSH
78075: PPUSH
78076: PPUSH
78077: PPUSH
// if not units then
78078: LD_VAR 0 1
78082: NOT
78083: IFFALSE 78087
// exit ;
78085: GO 78512
// result := UnitFilter ( units , [ f_ok ] ) ;
78087: LD_ADDR_VAR 0 3
78091: PUSH
78092: LD_VAR 0 1
78096: PPUSH
78097: LD_INT 50
78099: PUSH
78100: EMPTY
78101: LIST
78102: PPUSH
78103: CALL_OW 72
78107: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78108: LD_ADDR_VAR 0 8
78112: PUSH
78113: LD_VAR 0 1
78117: PUSH
78118: LD_INT 1
78120: ARRAY
78121: PPUSH
78122: CALL_OW 255
78126: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78127: LD_ADDR_VAR 0 10
78131: PUSH
78132: LD_INT 29
78134: PUSH
78135: LD_EXP 64
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: ST_TO_ADDR
// if not result then
78144: LD_VAR 0 3
78148: NOT
78149: IFFALSE 78153
// exit ;
78151: GO 78512
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78153: LD_ADDR_VAR 0 5
78157: PUSH
78158: LD_INT 81
78160: PUSH
78161: LD_VAR 0 8
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PPUSH
78170: CALL_OW 69
78174: ST_TO_ADDR
// for i in result do
78175: LD_ADDR_VAR 0 4
78179: PUSH
78180: LD_VAR 0 3
78184: PUSH
78185: FOR_IN
78186: IFFALSE 78510
// begin tag := GetTag ( i ) + 1 ;
78188: LD_ADDR_VAR 0 9
78192: PUSH
78193: LD_VAR 0 4
78197: PPUSH
78198: CALL_OW 110
78202: PUSH
78203: LD_INT 1
78205: PLUS
78206: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78207: LD_ADDR_VAR 0 7
78211: PUSH
78212: LD_VAR 0 4
78216: PPUSH
78217: CALL_OW 250
78221: PPUSH
78222: LD_VAR 0 4
78226: PPUSH
78227: CALL_OW 251
78231: PPUSH
78232: LD_INT 6
78234: PPUSH
78235: CALL 77810 0 3
78239: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78240: LD_VAR 0 7
78244: PUSH
78245: LD_VAR 0 4
78249: PPUSH
78250: CALL_OW 264
78254: PUSH
78255: LD_VAR 0 10
78259: IN
78260: NOT
78261: AND
78262: IFFALSE 78301
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78264: LD_VAR 0 4
78268: PPUSH
78269: LD_VAR 0 7
78273: PUSH
78274: LD_INT 1
78276: ARRAY
78277: PUSH
78278: LD_INT 1
78280: ARRAY
78281: PPUSH
78282: LD_VAR 0 7
78286: PUSH
78287: LD_INT 1
78289: ARRAY
78290: PUSH
78291: LD_INT 2
78293: ARRAY
78294: PPUSH
78295: CALL_OW 116
78299: GO 78508
// if path > tag then
78301: LD_VAR 0 2
78305: PUSH
78306: LD_VAR 0 9
78310: GREATER
78311: IFFALSE 78478
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78313: LD_ADDR_VAR 0 6
78317: PUSH
78318: LD_VAR 0 5
78322: PPUSH
78323: LD_INT 91
78325: PUSH
78326: LD_VAR 0 4
78330: PUSH
78331: LD_INT 12
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: LIST
78338: PPUSH
78339: CALL_OW 72
78343: ST_TO_ADDR
// if nearEnemy then
78344: LD_VAR 0 6
78348: IFFALSE 78376
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78350: LD_VAR 0 4
78354: PPUSH
78355: LD_VAR 0 6
78359: PPUSH
78360: LD_VAR 0 4
78364: PPUSH
78365: CALL_OW 74
78369: PPUSH
78370: CALL_OW 115
78374: GO 78476
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78376: LD_VAR 0 4
78380: PPUSH
78381: LD_VAR 0 2
78385: PUSH
78386: LD_VAR 0 9
78390: ARRAY
78391: PUSH
78392: LD_INT 1
78394: ARRAY
78395: PPUSH
78396: LD_VAR 0 2
78400: PUSH
78401: LD_VAR 0 9
78405: ARRAY
78406: PUSH
78407: LD_INT 2
78409: ARRAY
78410: PPUSH
78411: CALL_OW 297
78415: PUSH
78416: LD_INT 6
78418: GREATER
78419: IFFALSE 78462
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78421: LD_VAR 0 4
78425: PPUSH
78426: LD_VAR 0 2
78430: PUSH
78431: LD_VAR 0 9
78435: ARRAY
78436: PUSH
78437: LD_INT 1
78439: ARRAY
78440: PPUSH
78441: LD_VAR 0 2
78445: PUSH
78446: LD_VAR 0 9
78450: ARRAY
78451: PUSH
78452: LD_INT 2
78454: ARRAY
78455: PPUSH
78456: CALL_OW 114
78460: GO 78476
// SetTag ( i , tag ) ;
78462: LD_VAR 0 4
78466: PPUSH
78467: LD_VAR 0 9
78471: PPUSH
78472: CALL_OW 109
// end else
78476: GO 78508
// if enemy then
78478: LD_VAR 0 5
78482: IFFALSE 78508
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78484: LD_VAR 0 4
78488: PPUSH
78489: LD_VAR 0 5
78493: PPUSH
78494: LD_VAR 0 4
78498: PPUSH
78499: CALL_OW 74
78503: PPUSH
78504: CALL_OW 115
// end ;
78508: GO 78185
78510: POP
78511: POP
// end ;
78512: LD_VAR 0 3
78516: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78517: LD_INT 0
78519: PPUSH
78520: PPUSH
78521: PPUSH
// if not unit or IsInUnit ( unit ) then
78522: LD_VAR 0 1
78526: NOT
78527: PUSH
78528: LD_VAR 0 1
78532: PPUSH
78533: CALL_OW 310
78537: OR
78538: IFFALSE 78542
// exit ;
78540: GO 78633
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78542: LD_ADDR_VAR 0 4
78546: PUSH
78547: LD_VAR 0 1
78551: PPUSH
78552: CALL_OW 250
78556: PPUSH
78557: LD_VAR 0 2
78561: PPUSH
78562: LD_INT 1
78564: PPUSH
78565: CALL_OW 272
78569: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78570: LD_ADDR_VAR 0 5
78574: PUSH
78575: LD_VAR 0 1
78579: PPUSH
78580: CALL_OW 251
78584: PPUSH
78585: LD_VAR 0 2
78589: PPUSH
78590: LD_INT 1
78592: PPUSH
78593: CALL_OW 273
78597: ST_TO_ADDR
// if ValidHex ( x , y ) then
78598: LD_VAR 0 4
78602: PPUSH
78603: LD_VAR 0 5
78607: PPUSH
78608: CALL_OW 488
78612: IFFALSE 78633
// ComTurnXY ( unit , x , y ) ;
78614: LD_VAR 0 1
78618: PPUSH
78619: LD_VAR 0 4
78623: PPUSH
78624: LD_VAR 0 5
78628: PPUSH
78629: CALL_OW 118
// end ;
78633: LD_VAR 0 3
78637: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78638: LD_INT 0
78640: PPUSH
78641: PPUSH
// result := false ;
78642: LD_ADDR_VAR 0 3
78646: PUSH
78647: LD_INT 0
78649: ST_TO_ADDR
// if not units then
78650: LD_VAR 0 2
78654: NOT
78655: IFFALSE 78659
// exit ;
78657: GO 78704
// for i in units do
78659: LD_ADDR_VAR 0 4
78663: PUSH
78664: LD_VAR 0 2
78668: PUSH
78669: FOR_IN
78670: IFFALSE 78702
// if See ( side , i ) then
78672: LD_VAR 0 1
78676: PPUSH
78677: LD_VAR 0 4
78681: PPUSH
78682: CALL_OW 292
78686: IFFALSE 78700
// begin result := true ;
78688: LD_ADDR_VAR 0 3
78692: PUSH
78693: LD_INT 1
78695: ST_TO_ADDR
// exit ;
78696: POP
78697: POP
78698: GO 78704
// end ;
78700: GO 78669
78702: POP
78703: POP
// end ;
78704: LD_VAR 0 3
78708: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78709: LD_INT 0
78711: PPUSH
78712: PPUSH
78713: PPUSH
78714: PPUSH
// if not unit or not points then
78715: LD_VAR 0 1
78719: NOT
78720: PUSH
78721: LD_VAR 0 2
78725: NOT
78726: OR
78727: IFFALSE 78731
// exit ;
78729: GO 78821
// dist := 99999 ;
78731: LD_ADDR_VAR 0 5
78735: PUSH
78736: LD_INT 99999
78738: ST_TO_ADDR
// for i in points do
78739: LD_ADDR_VAR 0 4
78743: PUSH
78744: LD_VAR 0 2
78748: PUSH
78749: FOR_IN
78750: IFFALSE 78819
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78752: LD_ADDR_VAR 0 6
78756: PUSH
78757: LD_VAR 0 1
78761: PPUSH
78762: LD_VAR 0 4
78766: PUSH
78767: LD_INT 1
78769: ARRAY
78770: PPUSH
78771: LD_VAR 0 4
78775: PUSH
78776: LD_INT 2
78778: ARRAY
78779: PPUSH
78780: CALL_OW 297
78784: ST_TO_ADDR
// if tmpDist < dist then
78785: LD_VAR 0 6
78789: PUSH
78790: LD_VAR 0 5
78794: LESS
78795: IFFALSE 78817
// begin result := i ;
78797: LD_ADDR_VAR 0 3
78801: PUSH
78802: LD_VAR 0 4
78806: ST_TO_ADDR
// dist := tmpDist ;
78807: LD_ADDR_VAR 0 5
78811: PUSH
78812: LD_VAR 0 6
78816: ST_TO_ADDR
// end ; end ;
78817: GO 78749
78819: POP
78820: POP
// end ;
78821: LD_VAR 0 3
78825: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78826: LD_INT 0
78828: PPUSH
// uc_side := side ;
78829: LD_ADDR_OWVAR 20
78833: PUSH
78834: LD_VAR 0 1
78838: ST_TO_ADDR
// uc_nation := 3 ;
78839: LD_ADDR_OWVAR 21
78843: PUSH
78844: LD_INT 3
78846: ST_TO_ADDR
// vc_chassis := 25 ;
78847: LD_ADDR_OWVAR 37
78851: PUSH
78852: LD_INT 25
78854: ST_TO_ADDR
// vc_engine := engine_siberite ;
78855: LD_ADDR_OWVAR 39
78859: PUSH
78860: LD_INT 3
78862: ST_TO_ADDR
// vc_control := control_computer ;
78863: LD_ADDR_OWVAR 38
78867: PUSH
78868: LD_INT 3
78870: ST_TO_ADDR
// vc_weapon := 59 ;
78871: LD_ADDR_OWVAR 40
78875: PUSH
78876: LD_INT 59
78878: ST_TO_ADDR
// result := CreateVehicle ;
78879: LD_ADDR_VAR 0 5
78883: PUSH
78884: CALL_OW 45
78888: ST_TO_ADDR
// SetDir ( result , d ) ;
78889: LD_VAR 0 5
78893: PPUSH
78894: LD_VAR 0 4
78898: PPUSH
78899: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78903: LD_VAR 0 5
78907: PPUSH
78908: LD_VAR 0 2
78912: PPUSH
78913: LD_VAR 0 3
78917: PPUSH
78918: LD_INT 0
78920: PPUSH
78921: CALL_OW 48
// end ; end_of_file
78925: LD_VAR 0 5
78929: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78930: LD_VAR 0 1
78934: PUSH
78935: LD_INT 200
78937: DOUBLE
78938: GREATEREQUAL
78939: IFFALSE 78947
78941: LD_INT 299
78943: DOUBLE
78944: LESSEQUAL
78945: IFTRUE 78949
78947: GO 78981
78949: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78950: LD_VAR 0 1
78954: PPUSH
78955: LD_VAR 0 2
78959: PPUSH
78960: LD_VAR 0 3
78964: PPUSH
78965: LD_VAR 0 4
78969: PPUSH
78970: LD_VAR 0 5
78974: PPUSH
78975: CALL 34529 0 5
78979: GO 79058
78981: LD_INT 300
78983: DOUBLE
78984: GREATEREQUAL
78985: IFFALSE 78993
78987: LD_INT 399
78989: DOUBLE
78990: LESSEQUAL
78991: IFTRUE 78995
78993: GO 79057
78995: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78996: LD_VAR 0 1
79000: PPUSH
79001: LD_VAR 0 2
79005: PPUSH
79006: LD_VAR 0 3
79010: PPUSH
79011: LD_VAR 0 4
79015: PPUSH
79016: LD_VAR 0 5
79020: PPUSH
79021: LD_VAR 0 6
79025: PPUSH
79026: LD_VAR 0 7
79030: PPUSH
79031: LD_VAR 0 8
79035: PPUSH
79036: LD_VAR 0 9
79040: PPUSH
79041: LD_VAR 0 10
79045: PPUSH
79046: LD_VAR 0 11
79050: PPUSH
79051: CALL 32171 0 11
79055: GO 79058
79057: POP
// end ;
79058: PPOPN 11
79060: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79061: LD_VAR 0 1
79065: PPUSH
79066: LD_VAR 0 2
79070: PPUSH
79071: LD_VAR 0 3
79075: PPUSH
79076: LD_VAR 0 4
79080: PPUSH
79081: LD_VAR 0 5
79085: PPUSH
79086: CALL 34265 0 5
// end ; end_of_file
79090: PPOPN 5
79092: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79093: LD_VAR 0 1
79097: PPUSH
79098: LD_VAR 0 2
79102: PPUSH
79103: LD_VAR 0 3
79107: PPUSH
79108: LD_VAR 0 4
79112: PPUSH
79113: LD_VAR 0 5
79117: PPUSH
79118: LD_VAR 0 6
79122: PPUSH
79123: CALL 19864 0 6
// end ;
79127: PPOPN 6
79129: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79130: CALL 19839 0 0
// end ;
79134: PPOPN 1
79136: END
