// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 880 0 0
// PrepareRussian ;
  23: CALL 3532 0 0
// PrepareLegion ;
  27: CALL 7063 0 0
// Action ;
  31: CALL 10742 0 0
// InitArt ;
  35: CALL 201 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 7
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 15
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 16
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// function InitArt ; begin
 201: LD_INT 0
 203: PPUSH
// SetArtifactRes ( your_side , true ) ;
 204: LD_OWVAR 2
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 467
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// us_force := [ ] ;
 253: LD_ADDR_EXP 20
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 260: LD_INT 17
 262: PPUSH
 263: CALL_OW 355
// PrepareAllianceAI ( ) ;
 267: CALL 16079 0 0
// uc_side := 1 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// uc_nation := nation_american ;
 279: LD_ADDR_OWVAR 21
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// hc_gallery :=  ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING 
 294: ST_TO_ADDR
// hc_name :=  ;
 295: LD_ADDR_OWVAR 26
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_importance := 0 ;
 303: LD_ADDR_OWVAR 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// for i = 1 to 11 do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_INT 11
 323: PUSH
 324: FOR_TO
 325: IFFALSE 378
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 327: LD_INT 0
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: PPUSH
 341: LD_EXP 21
 345: PPUSH
 346: CALL_OW 380
// un := CreateHuman ;
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// us_force := us_force ^ un ;
 360: LD_ADDR_EXP 20
 364: PUSH
 365: LD_EXP 20
 369: PUSH
 370: LD_VAR 0 4
 374: ADD
 375: ST_TO_ADDR
// end ;
 376: GO 324
 378: POP
 379: POP
// hc_importance := 100 ;
 380: LD_ADDR_OWVAR 32
 384: PUSH
 385: LD_INT 100
 387: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_EXP 21
 398: PPUSH
 399: CALL_OW 380
// us_commander := CreateHuman ;
 403: LD_ADDR_EXP 19
 407: PUSH
 408: CALL_OW 44
 412: ST_TO_ADDR
// player_commander := us_commander ;
 413: LD_ADDR_EXP 10
 417: PUSH
 418: LD_EXP 19
 422: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_STRING text
 430: PPUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: LD_OWVAR 67
 449: ARRAY
 450: PPUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 5
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PPUSH
 471: LD_INT -5
 473: PUSH
 474: LD_EXP 19
 478: PUSH
 479: LD_INT -3
 481: PUSH
 482: LD_INT -2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_EXP 20
 495: ADD
 496: PPUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 5
 525: PUSH
 526: LD_INT 5
 528: PUSH
 529: LD_INT 1
 531: NEG
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 42
 555: ST_TO_ADDR
// team := team ^ us_commander ;
 556: LD_ADDR_VAR 0 5
 560: PUSH
 561: LD_VAR 0 5
 565: PUSH
 566: LD_EXP 19
 570: ADD
 571: ST_TO_ADDR
// for i = 1 to team do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_VAR 0 5
 586: PUSH
 587: FOR_TO
 588: IFFALSE 613
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 590: LD_VAR 0 5
 594: PUSH
 595: LD_VAR 0 2
 599: ARRAY
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 587
 613: POP
 614: POP
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 620: LD_OWVAR 1
 624: PUSH
 625: LD_INT 73500
 627: LESS
 628: IFFALSE 655
 630: GO 632
 632: DISABLE
// begin enable ;
 633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 634: LD_INT 1
 636: PPUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 12
 644: PPUSH
 645: LD_INT 24
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL_OW 55
// end ;
 655: END
// every 1 1$10 do var time , p , l ;
 656: GO 658
 658: DISABLE
 659: LD_INT 0
 661: PPUSH
 662: PPUSH
 663: PPUSH
// begin time := 0 0$44 ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_INT 1540
 671: ST_TO_ADDR
// l := 0 ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 680: LD_VAR 0 1
 684: PPUSH
 685: CALL_OW 67
// l := l + 1 ;
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 703: LD_INT 12
 705: PPUSH
 706: CALL_OW 435
 710: PUSH
 711: LD_INT 30
 713: LESS
 714: IFFALSE 773
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 5
 721: PPUSH
 722: CALL_OW 12
 726: PPUSH
 727: LD_INT 12
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 737: LD_INT 1155
 739: PPUSH
 740: LD_INT 1540
 742: PPUSH
 743: CALL_OW 12
 747: PPUSH
 748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_INT 0
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL_OW 12
 788: ST_TO_ADDR
// if p then
 789: LD_VAR 0 2
 793: IFFALSE 828
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 795: LD_INT 105
 797: PPUSH
 798: LD_INT 350
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 15
 835: PUSH
 836: LD_INT 13
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_OWVAR 67
 851: ARRAY
 852: MOD
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: IFFALSE 873
// time := time + 2 2$00 ;
 859: LD_ADDR_VAR 0 1
 863: PUSH
 864: LD_VAR 0 1
 868: PUSH
 869: LD_INT 4200
 871: PLUS
 872: ST_TO_ADDR
// end until false ;
 873: LD_INT 0
 875: IFFALSE 680
// end ; end_of_file
 877: PPOPN 3
 879: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , p , russian_in_base ; begin
 880: LD_INT 0
 882: PPUSH
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 890: LD_ADDR_VAR 0 3
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 21
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 924: LD_ADDR_VAR 0 4
 928: PUSH
 929: LD_INT 470
 931: PUSH
 932: LD_INT 370
 934: PUSH
 935: LD_INT 290
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_OWVAR 67
 947: ARRAY
 948: ST_TO_ADDR
// case Difficulty of 2 :
 949: LD_OWVAR 67
 953: PUSH
 954: LD_INT 2
 956: DOUBLE
 957: EQUAL
 958: IFTRUE 962
 960: GO 993
 962: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: CALL_OW 65
// end ; 3 :
 991: GO 1069
 993: LD_INT 3
 995: DOUBLE
 996: EQUAL
 997: IFTRUE 1001
 999: GO 1068
1001: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1002: LD_VAR 0 3
1006: PPUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 32
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1030: LD_VAR 0 3
1034: PPUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 72
1049: PUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 3
1055: PPUSH
1056: CALL_OW 12
1060: ARRAY
1061: PPUSH
1062: CALL_OW 65
// end ; end ;
1066: GO 1069
1068: POP
// for i = 1 to filter do
1069: LD_ADDR_VAR 0 2
1073: PUSH
1074: DOUBLE
1075: LD_INT 1
1077: DEC
1078: ST_TO_ADDR
1079: LD_VAR 0 3
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1122
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1087: LD_VAR 0 3
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 4
1102: PUSH
1103: LD_INT 29
1105: NEG
1106: PPUSH
1107: LD_INT 29
1109: PPUSH
1110: CALL_OW 12
1114: PLUS
1115: PPUSH
1116: CALL_OW 234
1120: GO 1084
1122: POP
1123: POP
// SetBName ( us_depot , Vulcano1 ) ;
1124: LD_INT 50
1126: PPUSH
1127: LD_STRING Vulcano1
1129: PPUSH
1130: CALL_OW 500
// hc_importance := 0 ;
1134: LD_ADDR_OWVAR 32
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// uc_side := 3 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// uc_nation := nation_russian ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 3
1157: ST_TO_ADDR
// russian_in_base := [ ] ;
1158: LD_ADDR_VAR 0 8
1162: PUSH
1163: EMPTY
1164: ST_TO_ADDR
// area := RandPointsFromArea ( 82 , 137 , 106 , 152 , 10 ) ;
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_INT 82
1172: PPUSH
1173: LD_INT 137
1175: PPUSH
1176: LD_INT 106
1178: PPUSH
1179: LD_INT 152
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: CALL 1562 0 5
1189: ST_TO_ADDR
// p := 1 ;
1190: LD_ADDR_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_INT 6
1210: PUSH
1211: LD_INT 6
1213: PUSH
1214: LD_INT 7
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_OWVAR 67
1226: ARRAY
1227: PUSH
1228: FOR_TO
1229: IFFALSE 1341
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1231: LD_INT 0
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 4
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_OWVAR 67
1255: ARRAY
1256: PPUSH
1257: CALL_OW 380
// un := CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1271: LD_ADDR_VAR 0 8
1275: PUSH
1276: LD_VAR 0 8
1280: PUSH
1281: LD_VAR 0 5
1285: ADD
1286: ST_TO_ADDR
// PlaceUnitXY ( un , area [ p ] , area [ p + 1 ] , false ) ;
1287: LD_VAR 0 5
1291: PPUSH
1292: LD_VAR 0 6
1296: PUSH
1297: LD_VAR 0 7
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 7
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 48
// p := p + 2 ;
1325: LD_ADDR_VAR 0 7
1329: PUSH
1330: LD_VAR 0 7
1334: PUSH
1335: LD_INT 2
1337: PLUS
1338: ST_TO_ADDR
// end ;
1339: GO 1228
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1348: LD_INT 50
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 2052 0 2
1358: PUSH
1359: LD_INT 40
1361: LESS
1362: IFFALSE 1559
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
// begin uc_side := 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// uc_nation := nation_american ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_importance := 0 ;
1387: LD_ADDR_OWVAR 32
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// for i = 1 to 7 do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: DOUBLE
1401: LD_INT 1
1403: DEC
1404: ST_TO_ADDR
1405: LD_INT 7
1407: PUSH
1408: FOR_TO
1409: IFFALSE 1473
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 12
1424: PPUSH
1425: LD_EXP 21
1429: PPUSH
1430: CALL_OW 380
// un := CreateHuman ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: CALL_OW 44
1443: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 7
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// SetLives ( un , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 234
// end ;
1471: GO 1408
1473: POP
1474: POP
// for i = 1 to 5 do
1475: LD_ADDR_VAR 0 1
1479: PUSH
1480: DOUBLE
1481: LD_INT 1
1483: DEC
1484: ST_TO_ADDR
1485: LD_INT 5
1487: PUSH
1488: FOR_TO
1489: IFFALSE 1557
// begin PrepareHuman ( false , 4 , us_skill ) ;
1491: LD_INT 0
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: LD_EXP 21
1501: PPUSH
1502: CALL_OW 380
// SetDir ( un , 1 ) ;
1506: LD_VAR 0 2
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 233
// un := CreateHuman ;
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 23
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// SetLives ( un , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_INT 10
1550: PPUSH
1551: CALL_OW 234
// end ;
1555: GO 1488
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 2
1561: END
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
// list := [ ] ;
1567: LD_ADDR_VAR 0 7
1571: PUSH
1572: EMPTY
1573: ST_TO_ADDR
// for i = 1 to num do
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_VAR 0 5
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1646
// begin list := list ^ Rand ( x1 , x2 ) ;
1592: LD_ADDR_VAR 0 7
1596: PUSH
1597: LD_VAR 0 7
1601: PUSH
1602: LD_VAR 0 1
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 12
1616: ADD
1617: ST_TO_ADDR
// list := list ^ Rand ( y1 , y2 ) ;
1618: LD_ADDR_VAR 0 7
1622: PUSH
1623: LD_VAR 0 7
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL_OW 12
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1589
1646: POP
1647: POP
// result := list ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: LD_VAR 0 7
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 6
1662: RET
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1663: LD_INT 0
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// c := Rand ( 1 , 3 ) ;
1669: LD_ADDR_VAR 0 5
1673: PUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 12
1684: ST_TO_ADDR
// for i = 1 to list do
1685: LD_ADDR_VAR 0 6
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_VAR 0 1
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1883
// for ta in filter do
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: FOR_IN
1714: IFFALSE 1879
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_VAR 0 6
1725: ARRAY
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 296
1736: PUSH
1737: LD_INT 15
1739: LESSEQUAL
1740: IFFALSE 1877
// begin case c of 1 :
1742: LD_VAR 0 5
1746: PUSH
1747: LD_INT 1
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1793
1755: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1756: LD_VAR 0 1
1760: PUSH
1761: LD_VAR 0 6
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 250
1776: PPUSH
1777: LD_VAR 0 4
1781: PPUSH
1782: CALL_OW 251
1786: PPUSH
1787: CALL_OW 154
1791: GO 1877
1793: LD_INT 2
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1865
1801: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1802: LD_VAR 0 1
1806: PUSH
1807: LD_VAR 0 6
1811: ARRAY
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL_OW 250
1822: PUSH
1823: LD_INT 1
1825: NEG
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL_OW 12
1834: PLUS
1835: PPUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 251
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: PLUS
1858: PPUSH
1859: CALL_OW 153
1863: GO 1877
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1876
1873: POP
// ; end ;
1874: GO 1877
1876: POP
// end ; end ;
1877: GO 1713
1879: POP
1880: POP
1881: GO 1700
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// for i = 1 to n do
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 1
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2045
// begin uc_side := 0 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// uc_nation := 0 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 0
1928: ST_TO_ADDR
// hc_class := class_apeman ;
1929: LD_ADDR_OWVAR 28
1933: PUSH
1934: LD_INT 12
1936: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1937: LD_ADDR_OWVAR 31
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_name :=  ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING 
1967: ST_TO_ADDR
// hc_gallery :=  ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING 
1975: ST_TO_ADDR
// hc_importance := 0 ;
1976: LD_ADDR_OWVAR 32
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// un := CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 19
2001: PUSH
2002: LD_INT 20
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: CALL_OW 12
2019: ARRAY
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2028: LD_INT 1155
2030: PPUSH
2031: LD_INT 5355
2033: PPUSH
2034: CALL_OW 12
2038: PPUSH
2039: CALL_OW 67
// end ;
2043: GO 1910
2045: POP
2046: POP
// end ;
2047: LD_VAR 0 2
2051: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2052: LD_INT 0
2054: PPUSH
2055: PPUSH
2056: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2057: LD_ADDR_VAR 0 4
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: CALL_OW 74
2088: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_VAR 0 1
2098: PPUSH
2099: LD_VAR 0 4
2103: PPUSH
2104: CALL_OW 296
2108: ST_TO_ADDR
// if dist >= 9999 then
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 9999
2116: GREATEREQUAL
2117: IFFALSE 2130
// result := - 1 else
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: LD_INT 1
2126: NEG
2127: ST_TO_ADDR
2128: GO 2140
// result := dist ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 5
2139: ST_TO_ADDR
// end ;
2140: LD_VAR 0 3
2144: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// tmp := 9999 ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_INT 9999
2158: ST_TO_ADDR
// for i = 1 to plist do
2159: LD_ADDR_VAR 0 4
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2249
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2177: LD_VAR 0 1
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PPUSH
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL 2052 0 2
2197: PUSH
2198: LD_VAR 0 5
2202: LESS
2203: IFFALSE 2247
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 4
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL 2052 0 2
2230: ST_TO_ADDR
// unit := plist [ i ] ;
2231: LD_ADDR_VAR 0 6
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_VAR 0 4
2245: ARRAY
2246: ST_TO_ADDR
// end ;
2247: GO 2174
2249: POP
2250: POP
// result := unit ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: LD_VAR 0 6
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 3
2265: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_INT 1000
2280: PUSH
2281: LD_INT 2500
2283: PUSH
2284: LD_INT 5000
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_OWVAR 67
2296: ARRAY
2297: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 2
2307: PUSH
2308: LD_INT 1
2310: NEG
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_OWVAR 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PPUSH
2338: CALL_OW 69
2342: MUL
2343: PUSH
2344: LD_INT 30
2346: MUL
2347: PLUS
2348: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_INT 10
2366: MUL
2367: PLUS
2368: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_VAR 0 2
2378: PUSH
2379: LD_INT 1
2381: NEG
2382: PUSH
2383: LD_EXP 15
2387: MUL
2388: PUSH
2389: LD_INT 20
2391: MUL
2392: PLUS
2393: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_OWVAR 1
2412: PUSH
2413: LD_INT 35
2415: DIVREAL
2416: PUSH
2417: LD_INT 60
2419: DIVREAL
2420: MUL
2421: PUSH
2422: LD_INT 25
2424: MUL
2425: PLUS
2426: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PUSH
2437: LD_EXP 17
2441: PUSH
2442: LD_INT 15
2444: MUL
2445: PLUS
2446: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: NEG
2460: PUSH
2461: LD_EXP 18
2465: MUL
2466: PUSH
2467: LD_INT 1000
2469: MUL
2470: PLUS
2471: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_INT 5
2489: MUL
2490: PLUS
2491: ST_TO_ADDR
// result := points ;
2492: LD_ADDR_VAR 0 1
2496: PUSH
2497: LD_VAR 0 2
2501: ST_TO_ADDR
// end ; end_of_file
2502: LD_VAR 0 1
2506: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL 31964 0 1
// if GetSide ( un ) = your_side then
2516: LD_VAR 0 1
2520: PPUSH
2521: CALL_OW 255
2525: PUSH
2526: LD_OWVAR 2
2530: EQUAL
2531: IFFALSE 2547
// dead_counter := dead_counter + 1 ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: LD_EXP 14
2542: PUSH
2543: LD_INT 1
2545: PLUS
2546: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 81
2559: PUSH
2560: LD_OWVAR 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: IN
2574: IFFALSE 2590
// kill_counter := kill_counter + 1 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_EXP 15
2585: PUSH
2586: LD_INT 1
2588: PLUS
2589: ST_TO_ADDR
// if un = player_commander then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 10
2599: EQUAL
2600: IFFALSE 2609
// YouLost ( vulcano-lost ) ;
2602: LD_STRING vulcano-lost
2604: PPUSH
2605: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: IN
2643: IFFALSE 2759
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_INT 33
2657: EQUAL
2658: PUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 266
2668: PUSH
2669: LD_INT 28
2671: EQUAL
2672: OR
2673: IFFALSE 2759
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_EXP 26
2684: PUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: ADD
2695: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_EXP 26
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: CALL_OW 250
2715: ADD
2716: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2717: LD_ADDR_EXP 26
2721: PUSH
2722: LD_EXP 26
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 251
2736: ADD
2737: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2738: LD_ADDR_EXP 26
2742: PUSH
2743: LD_EXP 26
2747: PUSH
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL_OW 254
2757: ADD
2758: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2759: LD_VAR 0 1
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 8
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: IN
2793: IFFALSE 2937
// begin if GetBType ( un ) = b_barracks then
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 266
2804: PUSH
2805: LD_INT 5
2807: EQUAL
2808: IFFALSE 2826
// legion_blist := legion_blist ^ b_armoury else
2810: LD_ADDR_EXP 34
2814: PUSH
2815: LD_EXP 34
2819: PUSH
2820: LD_INT 4
2822: ADD
2823: ST_TO_ADDR
2824: GO 2874
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 6
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: IN
2850: NOT
2851: IFFALSE 2874
// legion_blist := legion_blist ^ GetBType ( un ) ;
2853: LD_ADDR_EXP 34
2857: PUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 266
2872: ADD
2873: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: LD_EXP 34
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 250
2893: ADD
2894: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2895: LD_ADDR_EXP 34
2899: PUSH
2900: LD_EXP 34
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 251
2914: ADD
2915: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2916: LD_ADDR_EXP 34
2920: PUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 254
2935: ADD
2936: ST_TO_ADDR
// end ; if un in legion_force then
2937: LD_VAR 0 1
2941: PUSH
2942: LD_EXP 31
2946: IN
2947: IFFALSE 2965
// legion_force := legion_force diff un ;
2949: LD_ADDR_EXP 31
2953: PUSH
2954: LD_EXP 31
2958: PUSH
2959: LD_VAR 0 1
2963: DIFF
2964: ST_TO_ADDR
// if un in ru_force then
2965: LD_VAR 0 1
2969: PUSH
2970: LD_EXP 23
2974: IN
2975: IFFALSE 2993
// ru_force := ru_force diff un ;
2977: LD_ADDR_EXP 23
2981: PUSH
2982: LD_EXP 23
2986: PUSH
2987: LD_VAR 0 1
2991: DIFF
2992: ST_TO_ADDR
// if un in al_force then
2993: LD_VAR 0 1
2997: PUSH
2998: LD_EXP 38
3002: IN
3003: IFFALSE 3021
// al_force := al_force diff un ;
3005: LD_ADDR_EXP 38
3009: PUSH
3010: LD_EXP 38
3014: PUSH
3015: LD_VAR 0 1
3019: DIFF
3020: ST_TO_ADDR
// end ;
3021: PPOPN 1
3023: END
// on BuildingComplete ( b ) do var i ;
3024: LD_INT 0
3026: PPUSH
// begin if GetSide ( b ) = 8 then
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 255
3036: PUSH
3037: LD_INT 8
3039: EQUAL
3040: IFFALSE 3080
// for i = 1 to 4 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 4
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3078
// legion_blist := Delete ( legion_blist , 1 ) ;
3058: LD_ADDR_EXP 34
3062: PUSH
3063: LD_EXP 34
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
3076: GO 3055
3078: POP
3079: POP
// if GetSide ( b ) = 3 then
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: PUSH
3090: LD_INT 3
3092: EQUAL
3093: IFFALSE 3133
// for i = 1 to 4 do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_INT 4
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3131
// ru_blist := Delete ( ru_blist , 1 ) ;
3111: LD_ADDR_EXP 26
3115: PUSH
3116: LD_EXP 26
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 3
3128: ST_TO_ADDR
3129: GO 3108
3131: POP
3132: POP
// end ;
3133: PPOPN 2
3135: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 264
3145: PUSH
3146: LD_INT 51
3148: PUSH
3149: LD_INT 48
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: IN
3156: NOT
3157: IFFALSE 3205
// begin if GetSide ( veh ) = 3 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 3
3171: EQUAL
3172: IFFALSE 3205
// begin ComMoveXY ( veh , 149 , 8 ) ;
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 149
3181: PPUSH
3182: LD_INT 8
3184: PPUSH
3185: CALL_OW 111
// ru_force := ru_force ^ veh ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 1
3203: ADD
3204: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 31
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: IN
3225: NOT
3226: IFFALSE 3259
// begin if GetSide ( veh ) = 8 then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 255
3237: PUSH
3238: LD_INT 8
3240: EQUAL
3241: IFFALSE 3259
// legion_force := legion_force ^ veh ;
3243: LD_ADDR_EXP 31
3247: PUSH
3248: LD_EXP 31
3252: PUSH
3253: LD_VAR 0 1
3257: ADD
3258: ST_TO_ADDR
// end ; if GetSide ( veh ) = 7 and your_side <> 7 then
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 255
3268: PUSH
3269: LD_INT 7
3271: EQUAL
3272: PUSH
3273: LD_OWVAR 2
3277: PUSH
3278: LD_INT 7
3280: NONEQUAL
3281: AND
3282: IFFALSE 3300
// al_force := al_force ^ veh ;
3284: LD_ADDR_EXP 38
3288: PUSH
3289: LD_EXP 38
3293: PUSH
3294: LD_VAR 0 1
3298: ADD
3299: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 255
3309: PUSH
3310: LD_OWVAR 2
3314: EQUAL
3315: IFFALSE 3331
// veh_counter := veh_counter + 1 ;
3317: LD_ADDR_EXP 16
3321: PUSH
3322: LD_EXP 16
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: ST_TO_ADDR
// end ;
3331: PPOPN 2
3333: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 255
3343: PUSH
3344: LD_OWVAR 2
3348: NONEQUAL
3349: IFFALSE 3365
// sib_contamin_counter := sib_contamin_counter + 1 ;
3351: LD_ADDR_EXP 18
3355: PUSH
3356: LD_EXP 18
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: ST_TO_ADDR
// end ;
3365: PPOPN 3
3367: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL_OW 255
3377: PUSH
3378: LD_OWVAR 2
3382: EQUAL
3383: IFFALSE 3399
// tech_counter := tech_counter + 1 ;
3385: LD_ADDR_EXP 17
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3399: LD_VAR 0 1
3403: PUSH
3404: LD_INT 53
3406: EQUAL
3407: PUSH
3408: LD_OWVAR 2
3412: PUSH
3413: LD_INT 1
3415: EQUAL
3416: AND
3417: IFFALSE 3432
// SetTech ( 80 , 1 , state_researched ) ;
3419: LD_INT 80
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// end ;
3432: PPOPN 2
3434: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do var i ;
3435: LD_INT 25
3437: PUSH
3438: LD_INT 12
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 9
3452: LESS
3453: IFFALSE 3495
3455: GO 3457
3457: DISABLE
3458: LD_INT 0
3460: PPUSH
// begin enable ;
3461: ENABLE
// i := FilterAllUnits ( [ f_class , class_apeman ] ) ;
3462: LD_ADDR_VAR 0 1
3466: PUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 12
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 69
3481: ST_TO_ADDR
// PrepareApeman ( 8 - i ) ;
3482: LD_INT 8
3484: PUSH
3485: LD_VAR 0 1
3489: MINUS
3490: PPUSH
3491: CALL 1890 0 1
// end ;
3495: PPOPN 1
3497: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL 32062 0 3
// end ;
3517: PPOPN 3
3519: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL 32070 0 1
// end ; end_of_file
3529: PPOPN 1
3531: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side := 3 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 3
3552: ST_TO_ADDR
// uc_nation := nation_russian ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 30
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 69
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 30
3654: PUSH
3655: LD_INT 34
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 69
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 22
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// ru_blist := [ ] ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// ru_vlist := [ ] ;
3754: LD_ADDR_EXP 27
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3761: LD_ADDR_EXP 30
3765: PUSH
3766: LD_INT 183
3768: PUSH
3769: LD_INT 62
3771: PUSH
3772: LD_INT 147
3774: PUSH
3775: LD_INT 44
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3784: LD_INT 30
3786: PUSH
3787: LD_INT 34
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_EXP 30
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_EXP 30
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3825: LD_ADDR_EXP 28
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 3000
3865: PPUSH
3866: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: LD_INT 300
3885: PPUSH
3886: CALL_OW 277
// hc_gallery :=  ;
3890: LD_ADDR_OWVAR 33
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// hc_name :=  ;
3898: LD_ADDR_OWVAR 26
3902: PUSH
3903: LD_STRING 
3905: ST_TO_ADDR
// hc_importance := 0 ;
3906: LD_ADDR_OWVAR 32
3910: PUSH
3911: LD_INT 0
3913: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3914: LD_ADDR_EXP 24
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: LD_INT 7
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: ST_TO_ADDR
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4111
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 9
3960: PPUSH
3961: LD_EXP 24
3965: PPUSH
3966: CALL_OW 380
// un := CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3994: LD_INT 0
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_EXP 24
4004: PPUSH
4005: CALL_OW 380
// un := CreateHuman ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 24
4026: PPUSH
4027: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4031: LD_INT 0
4033: PPUSH
4034: LD_INT 3
4036: PPUSH
4037: LD_EXP 24
4041: PPUSH
4042: CALL_OW 380
// un := CreateHuman ;
4046: LD_ADDR_VAR 0 3
4050: PUSH
4051: CALL_OW 44
4055: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_VAR 0 5
4065: PPUSH
4066: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: LD_EXP 24
4080: PPUSH
4081: CALL_OW 380
// un := CreateHuman ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: CALL_OW 44
4094: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4095: LD_VAR 0 3
4099: PPUSH
4100: LD_VAR 0 4
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3952
4111: POP
4112: POP
// russian_prepared := true ;
4113: LD_ADDR_EXP 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_INT 21
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_INT 51
4137: PPUSH
4138: CALL_OW 125
// end ;
4142: LD_VAR 0 1
4146: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , p , cr , sib_bomb ;
4147: LD_INT 22
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: PUSH
4162: LD_INT 0
4164: GREATER
4165: PUSH
4166: LD_EXP 2
4170: AND
4171: IFFALSE 6634
4173: GO 4175
4175: DISABLE
4176: LD_INT 0
4178: PPUSH
4179: PPUSH
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
4194: PPUSH
// begin enable ;
4195: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 69
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 3
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 30
4289: PUSH
4290: LD_INT 34
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 69
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_INT 22
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 69
4343: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4344: LD_ADDR_VAR 0 8
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 69
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 5
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 21
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PPUSH
4479: CALL_OW 69
4483: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 72
4508: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4509: LD_ADDR_VAR 0 10
4513: PUSH
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4534: LD_ADDR_VAR 0 11
4538: PUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 4
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 51
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: GREATER
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_INT 0
4599: EQUAL
4600: AND
4601: IFFALSE 4641
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4603: LD_ADDR_EXP 25
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 34
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 69
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: ST_TO_ADDR
// if ru_cargo then
4641: LD_EXP 25
4645: IFFALSE 4943
// begin if IsInArea ( ru_cargo , ru_base ) then
4647: LD_EXP 25
4651: PPUSH
4652: LD_INT 9
4654: PPUSH
4655: CALL_OW 308
4659: IFFALSE 4738
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4661: LD_EXP 25
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: CALL_OW 289
4673: PUSH
4674: LD_INT 0
4676: EQUAL
4677: IFFALSE 4695
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4679: LD_EXP 25
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 120
4693: GO 4736
// if not HasTask ( ru_cargo ) then
4695: LD_EXP 25
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4736
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4707: LD_EXP 25
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 250
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 251
4731: PPUSH
4732: CALL_OW 111
// end else
4736: GO 4943
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 then
4738: LD_EXP 25
4742: PPUSH
4743: CALL_OW 314
4747: NOT
4748: PUSH
4749: LD_EXP 25
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 289
4761: PUSH
4762: LD_INT 100
4764: LESS
4765: AND
4766: IFFALSE 4832
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4768: LD_ADDR_VAR 0 16
4772: PUSH
4773: LD_INT 11
4775: PPUSH
4776: CALL_OW 435
4780: ST_TO_ADDR
// if cr > 0 then
4781: LD_VAR 0 16
4785: PUSH
4786: LD_INT 0
4788: GREATER
4789: IFFALSE 4820
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4791: LD_EXP 25
4795: PPUSH
4796: LD_VAR 0 16
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: PPUSH
4805: LD_VAR 0 16
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 117
4818: GO 4832
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4820: LD_EXP 25
4824: PPUSH
4825: LD_INT 11
4827: PPUSH
4828: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and GetCargo ( ru_cargo , mat_cans ) = 100 then
4832: LD_EXP 25
4836: PPUSH
4837: CALL_OW 314
4841: NOT
4842: PUSH
4843: LD_EXP 25
4847: PPUSH
4848: LD_INT 10
4850: PPUSH
4851: CALL_OW 308
4855: NOT
4856: AND
4857: PUSH
4858: LD_EXP 25
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 289
4870: PUSH
4871: LD_INT 100
4873: EQUAL
4874: AND
4875: IFFALSE 4889
// ComMoveToArea ( ru_cargo , cargoa ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_INT 10
4884: PPUSH
4885: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4889: LD_EXP 25
4893: PPUSH
4894: LD_INT 10
4896: PPUSH
4897: CALL_OW 308
4901: PUSH
4902: LD_VAR 0 8
4906: AND
4907: IFFALSE 4943
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4909: LD_VAR 0 7
4913: PPUSH
4914: LD_INT 25
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 72
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 139
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4943: LD_EXP 25
4947: PUSH
4948: LD_INT 0
4950: EQUAL
4951: PUSH
4952: LD_VAR 0 2
4956: AND
4957: PUSH
4958: LD_VAR 0 2
4962: PPUSH
4963: CALL_OW 461
4967: PUSH
4968: LD_INT 2
4970: EQUAL
4971: AND
4972: IFFALSE 4995
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4974: LD_VAR 0 2
4978: PPUSH
4979: LD_INT 21
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 51
4990: PPUSH
4991: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 72
5014: IFFALSE 5078
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PPUSH
5036: LD_INT 22
5038: PUSH
5039: LD_OWVAR 2
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: CALL 1663 0 2
// if ru_factory and ru_vlist > 0 then
5078: LD_VAR 0 2
5082: PUSH
5083: LD_EXP 27
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: AND
5092: IFFALSE 5192
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 461
5103: PUSH
5104: LD_INT 2
5106: EQUAL
5107: IFFALSE 5192
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_EXP 27
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_EXP 27
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_EXP 27
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 27
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: PPUSH
5150: CALL_OW 125
// for i = 1 to 4 do
5154: LD_ADDR_VAR 0 12
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_INT 4
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5190
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5170: LD_ADDR_EXP 27
5174: PUSH
5175: LD_EXP 27
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 3
5187: ST_TO_ADDR
5188: GO 5167
5190: POP
5191: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5192: LD_INT 24
5194: PPUSH
5195: CALL_OW 461
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: PUSH
5204: LD_EXP 4
5208: AND
5209: IFFALSE 5237
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5211: LD_INT 25
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL_OW 321
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5237
// ComResearch ( ru_lab , tech_sibfiss ) ;
5227: LD_INT 24
5229: PPUSH
5230: LD_INT 25
5232: PPUSH
5233: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5237: LD_INT 25
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 321
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: PUSH
5252: LD_OWVAR 1
5256: PUSH
5257: LD_INT 10500
5259: MOD
5260: PUSH
5261: LD_INT 0
5263: EQUAL
5264: AND
5265: IFFALSE 5303
// if BuildingStatus ( ru_factory ) = bs_idle then
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 461
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5303
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 48
5298: PPUSH
5299: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 48
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5709
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5337: LD_ADDR_VAR 0 17
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 34
5354: PUSH
5355: LD_INT 48
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PPUSH
5366: CALL_OW 69
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5375: LD_VAR 0 17
5379: PPUSH
5380: LD_INT 9
5382: PPUSH
5383: CALL_OW 308
5387: IFFALSE 5405
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5389: LD_VAR 0 17
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 120
5403: GO 5709
// if not HasTask ( sib_bomb ) then
5405: LD_VAR 0 17
5409: PPUSH
5410: CALL_OW 314
5414: NOT
5415: IFFALSE 5709
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5417: LD_INT 22
5419: PUSH
5420: LD_OWVAR 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 30
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: CALL_OW 256
5456: PUSH
5457: LD_INT 250
5459: GREATER
5460: IFFALSE 5553
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5462: LD_VAR 0 17
5466: PPUSH
5467: LD_INT 22
5469: PUSH
5470: LD_OWVAR 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL_OW 69
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: CALL_OW 250
5506: PPUSH
5507: LD_INT 22
5509: PUSH
5510: LD_OWVAR 2
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 251
5546: PPUSH
5547: CALL_OW 116
5551: GO 5709
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5553: LD_INT 22
5555: PUSH
5556: LD_OWVAR 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: IFFALSE 5680
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5589: LD_VAR 0 17
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_OWVAR 2
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 250
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_OWVAR 2
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: CALL_OW 251
5673: PPUSH
5674: CALL_OW 116
5678: GO 5709
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5680: LD_VAR 0 17
5684: PPUSH
5685: LD_EXP 10
5689: PPUSH
5690: CALL_OW 250
5694: PPUSH
5695: LD_EXP 10
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
// end ; if ru_can_attack then
5709: LD_EXP 3
5713: IFFALSE 5861
// if ru_time > 0 0$00 then
5715: LD_EXP 29
5719: PUSH
5720: LD_INT 0
5722: GREATER
5723: IFFALSE 5741
// ru_time := ru_time - 0 0$01 else
5725: LD_ADDR_EXP 29
5729: PUSH
5730: LD_EXP 29
5734: PUSH
5735: LD_INT 35
5737: MINUS
5738: ST_TO_ADDR
5739: GO 5861
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5741: LD_ADDR_EXP 29
5745: PUSH
5746: LD_INT 20265
5748: PPUSH
5749: LD_INT 30765
5751: PPUSH
5752: CALL_OW 12
5756: ST_TO_ADDR
// for i = 1 to ru_amount do
5757: LD_ADDR_VAR 0 12
5761: PUSH
5762: DOUBLE
5763: LD_INT 1
5765: DEC
5766: ST_TO_ADDR
5767: LD_EXP 28
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5859
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5775: LD_ADDR_EXP 27
5779: PUSH
5780: LD_EXP 27
5784: PUSH
5785: LD_INT 23
5787: ADD
5788: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5789: LD_ADDR_EXP 27
5793: PUSH
5794: LD_EXP 27
5798: PUSH
5799: LD_INT 3
5801: ADD
5802: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5803: LD_ADDR_EXP 27
5807: PUSH
5808: LD_EXP 27
5812: PUSH
5813: LD_INT 3
5815: ADD
5816: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5817: LD_ADDR_EXP 27
5821: PUSH
5822: LD_EXP 27
5826: PUSH
5827: LD_INT 46
5829: PUSH
5830: LD_INT 45
5832: PUSH
5833: LD_INT 47
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: CALL_OW 14
5854: ARRAY
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5772
5859: POP
5860: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5861: LD_VAR 0 4
5865: PPUSH
5866: LD_INT 35
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 72
5880: PUSH
5881: LD_INT 0
5883: GREATER
5884: IFFALSE 5932
// if BuildingStatus ( ru_factory ) = bs_idle then
5886: LD_VAR 0 2
5890: PPUSH
5891: CALL_OW 461
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: IFFALSE 5932
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_INT 35
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 72
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 47
5927: PPUSH
5928: CALL_OW 148
// if ru_force = ru_amount then
5932: LD_EXP 23
5936: PUSH
5937: LD_EXP 28
5941: EQUAL
5942: IFFALSE 6074
// begin for i = 1 to ru_force do
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_EXP 23
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6070
// if IsInArea ( ru_force [ i ] , ru_base ) then
5962: LD_EXP 23
5966: PUSH
5967: LD_VAR 0 12
5971: ARRAY
5972: PPUSH
5973: LD_INT 9
5975: PPUSH
5976: CALL_OW 308
5980: IFFALSE 6004
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
5982: LD_EXP 23
5986: PUSH
5987: LD_VAR 0 12
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 120
6002: GO 6068
// if not HasTask ( ru_force [ i ] ) then
6004: LD_EXP 23
6008: PUSH
6009: LD_VAR 0 12
6013: ARRAY
6014: PPUSH
6015: CALL_OW 314
6019: NOT
6020: IFFALSE 6068
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6022: LD_EXP 23
6026: PUSH
6027: LD_VAR 0 12
6031: ARRAY
6032: PPUSH
6033: LD_INT 81
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PPUSH
6048: LD_EXP 23
6052: PUSH
6053: LD_VAR 0 12
6057: ARRAY
6058: PPUSH
6059: CALL_OW 74
6063: PPUSH
6064: CALL_OW 115
6068: GO 5959
6070: POP
6071: POP
// end else
6072: GO 6224
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6074: LD_EXP 23
6078: PPUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 95
6084: PUSH
6085: LD_INT 18
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 72
6100: PUSH
6101: LD_INT 0
6103: GREATER
6104: IFFALSE 6224
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6106: LD_ADDR_VAR 0 13
6110: PUSH
6111: LD_EXP 23
6115: PPUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 95
6121: PUSH
6122: LD_INT 18
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 72
6137: ST_TO_ADDR
// for i = 1 to tmp do
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_VAR 0 13
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6222
// if not HasTask ( tmp [ i ] ) then
6156: LD_VAR 0 13
6160: PUSH
6161: LD_VAR 0 12
6165: ARRAY
6166: PPUSH
6167: CALL_OW 314
6171: NOT
6172: IFFALSE 6220
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6174: LD_EXP 23
6178: PUSH
6179: LD_VAR 0 12
6183: ARRAY
6184: PPUSH
6185: LD_INT 81
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PPUSH
6200: LD_EXP 23
6204: PUSH
6205: LD_VAR 0 12
6209: ARRAY
6210: PPUSH
6211: CALL_OW 74
6215: PPUSH
6216: CALL_OW 115
6220: GO 6153
6222: POP
6223: POP
// end ; if ru_engs > 0 then
6224: LD_VAR 0 9
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: IFFALSE 6634
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6234: LD_VAR 0 5
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: IFFALSE 6419
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6266: LD_ADDR_VAR 0 14
6270: PUSH
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: LD_INT 1000
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 72
6297: ST_TO_ADDR
// for i = 1 to ru_engs do
6298: LD_ADDR_VAR 0 12
6302: PUSH
6303: DOUBLE
6304: LD_INT 1
6306: DEC
6307: ST_TO_ADDR
6308: LD_VAR 0 9
6312: PUSH
6313: FOR_TO
6314: IFFALSE 6415
// begin if IsInUnit ( ru_engs [ i ] ) then
6316: LD_VAR 0 9
6320: PUSH
6321: LD_VAR 0 12
6325: ARRAY
6326: PPUSH
6327: CALL_OW 310
6331: IFFALSE 6350
// ComExitBuilding ( ru_engs [ i ] ) else
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 122
6348: GO 6413
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 314
6365: NOT
6366: PUSH
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 256
6382: PUSH
6383: LD_INT 600
6385: GREATER
6386: AND
6387: IFFALSE 6413
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6389: LD_VAR 0 9
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 14
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PPUSH
6409: CALL_OW 130
// end ;
6413: GO 6313
6415: POP
6416: POP
// end else
6417: GO 6634
// begin if ru_blist = 0 then
6419: LD_EXP 26
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6509
// begin for i = 1 to ru_engs do
6429: LD_ADDR_VAR 0 12
6433: PUSH
6434: DOUBLE
6435: LD_INT 1
6437: DEC
6438: ST_TO_ADDR
6439: LD_VAR 0 9
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6505
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6447: LD_VAR 0 9
6451: PUSH
6452: LD_VAR 0 12
6456: ARRAY
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 310
6479: NOT
6480: AND
6481: IFFALSE 6503
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6483: LD_VAR 0 9
6487: PUSH
6488: LD_VAR 0 12
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 120
6503: GO 6444
6505: POP
6506: POP
// end else
6507: GO 6634
// begin for i = 1 to ru_engs do
6509: LD_ADDR_VAR 0 12
6513: PUSH
6514: DOUBLE
6515: LD_INT 1
6517: DEC
6518: ST_TO_ADDR
6519: LD_VAR 0 9
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6632
// begin if IsInUnit ( ru_engs [ i ] ) then
6527: LD_VAR 0 9
6531: PUSH
6532: LD_VAR 0 12
6536: ARRAY
6537: PPUSH
6538: CALL_OW 310
6542: IFFALSE 6561
// ComExitBuilding ( ru_engs [ i ] ) else
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 122
6559: GO 6630
// if not HasTask ( ru_engs [ i ] ) then
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 314
6576: NOT
6577: IFFALSE 6630
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6579: LD_VAR 0 9
6583: PUSH
6584: LD_VAR 0 12
6588: ARRAY
6589: PPUSH
6590: LD_EXP 26
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: PPUSH
6599: LD_EXP 26
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: LD_EXP 26
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: LD_EXP 26
6621: PUSH
6622: LD_INT 4
6624: ARRAY
6625: PPUSH
6626: CALL_OW 145
// end ;
6630: GO 6524
6632: POP
6633: POP
// end ; end ; end ; end ;
6634: PPOPN 17
6636: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 20 do
6637: LD_EXP 2
6641: PUSH
6642: LD_INT 11
6644: PPUSH
6645: CALL_OW 435
6649: PUSH
6650: LD_INT 20
6652: LESS
6653: AND
6654: IFFALSE 6717
6656: GO 6658
6658: DISABLE
// begin enable ;
6659: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6660: LD_INT 1
6662: PPUSH
6663: LD_INT 5
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: LD_INT 11
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6681: LD_INT 1505
6683: PPUSH
6684: LD_INT 2100
6686: PPUSH
6687: CALL_OW 12
6691: PPUSH
6692: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 5
6701: PPUSH
6702: CALL_OW 12
6706: PPUSH
6707: LD_INT 11
6709: PPUSH
6710: LD_INT 1
6712: PPUSH
6713: CALL_OW 55
// end ;
6717: END
// every 15 15$00 + 25 25$00 trigger ru_sib_bomb = false do var i , tmp ;
6718: LD_EXP 4
6722: PUSH
6723: LD_INT 0
6725: EQUAL
6726: IFFALSE 6841
6728: GO 6730
6730: DISABLE
6731: LD_INT 0
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// i := Rand ( 0 , 100 ) ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 0
6743: PPUSH
6744: LD_INT 100
6746: PPUSH
6747: CALL_OW 12
6751: ST_TO_ADDR
// case your_side of 1 :
6752: LD_OWVAR 2
6756: PUSH
6757: LD_INT 1
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 10 ; 2 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 10
6773: ST_TO_ADDR
6774: GO 6815
6776: LD_INT 2
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 0 ; 7 :
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
6793: GO 6815
6795: LD_INT 7
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6814
6803: POP
// tmp := 15 ; end ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_INT 15
6811: ST_TO_ADDR
6812: GO 6815
6814: POP
// if i < chance_to_bomb + tmp then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_EXP 5
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: LESS
6831: IFFALSE 6841
// ru_sib_bomb := true ;
6833: LD_ADDR_EXP 4
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: PPOPN 2
6843: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6844: LD_INT 22
6846: PUSH
6847: LD_OWVAR 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IFFALSE 6887
6876: GO 6878
6878: DISABLE
// begin ru_sib_bomb := true ;
6879: LD_ADDR_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// end ;
6887: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6888: LD_INT 22
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 34
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IFFALSE 7015
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin enable ;
6924: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 2
6945: PPUSH
6946: CALL_OW 12
6950: ARRAY
6951: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6952: LD_INT 22
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PPUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_VAR 0 1
6994: ARRAY
6995: PPUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: CALL_OW 243
// end ; end_of_file
7015: PPOPN 1
7017: END
// export function RemoveLegion ; var i ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7022: LD_ADDR_VAR 0 2
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7056
// RemoveUnit ( i ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL_OW 64
7054: GO 7042
7056: POP
7057: POP
// end ;
7058: LD_VAR 0 1
7062: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , p , l_depot , l_factory , l_lab , l_towers ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 8
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 30
7181: PUSH
7182: LD_INT 8
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7207: LD_ADDR_VAR 0 10
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 8
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 30
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// uc_side := 8 ;
7241: LD_ADDR_OWVAR 20
7245: PUSH
7246: LD_INT 8
7248: ST_TO_ADDR
// uc_nation := nation_arabian ;
7249: LD_ADDR_OWVAR 21
7253: PUSH
7254: LD_INT 2
7256: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_OWVAR 67
7280: ARRAY
7281: ST_TO_ADDR
// legion_blist := [ ] ;
7282: LD_ADDR_EXP 34
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// legion_vlist := [ ] ;
7289: LD_ADDR_EXP 35
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// legion_force := [ ] ;
7296: LD_ADDR_EXP 31
7300: PUSH
7301: EMPTY
7302: ST_TO_ADDR
// legion_enemy := - 1 ;
7303: LD_ADDR_EXP 36
7307: PUSH
7308: LD_INT 1
7310: NEG
7311: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 274
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 10000
7327: PPUSH
7328: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7332: LD_VAR 0 7
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 1000
7347: PPUSH
7348: CALL_OW 277
// for i = 1 to l_towers do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_VAR 0 10
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7417
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_EXP 32
7380: PPUSH
7381: CALL_OW 380
// un := CreateHuman ;
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: PPUSH
7411: CALL_OW 52
// end ;
7415: GO 7367
7417: POP
7418: POP
// for i = 1 to 4 do
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 4
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7526
// for p = 1 to 2 do
7435: LD_ADDR_VAR 0 6
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 2
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7522
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7451: LD_INT 0
7453: PPUSH
7454: LD_INT 8
7456: PPUSH
7457: LD_EXP 32
7461: PPUSH
7462: CALL_OW 380
// un := CreateHuman ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_VAR 0 6
7514: ARRAY
7515: PPUSH
7516: CALL_OW 52
// end ;
7520: GO 7448
7522: POP
7523: POP
7524: GO 7432
7526: POP
7527: POP
// for i = 1 to 4 do
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: DOUBLE
7534: LD_INT 1
7536: DEC
7537: ST_TO_ADDR
7538: LD_INT 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7585
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 4
7549: PPUSH
7550: LD_EXP 32
7554: PPUSH
7555: CALL_OW 380
// un := CreateHuman ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 52
// end ;
7583: GO 7541
7585: POP
7586: POP
// for i = 1 to 6 do
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 6
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7644
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_EXP 32
7613: PPUSH
7614: CALL_OW 380
// un := CreateHuman ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: CALL_OW 44
7627: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 8
7637: PPUSH
7638: CALL_OW 52
// end ;
7642: GO 7600
7644: POP
7645: POP
// for i = 1 to 5 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 5
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7703
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7662: LD_INT 0
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_EXP 32
7672: PPUSH
7673: CALL_OW 380
// un := CreateHuman ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: CALL_OW 44
7686: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 7
7696: PPUSH
7697: CALL_OW 52
// end ;
7701: GO 7659
7703: POP
7704: POP
// tmp := RandPointsFromArea ( 199 , 134 , 216 , 141 , 6 ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 199
7712: PPUSH
7713: LD_INT 134
7715: PPUSH
7716: LD_INT 216
7718: PPUSH
7719: LD_INT 141
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: CALL 1562 0 5
7729: ST_TO_ADDR
// p := 1 ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// for i = 1 to 3 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 3
7750: PUSH
7751: FOR_TO
7752: IFFALSE 8005
// begin vc_chassis := ar_half_tracked ;
7754: LD_ADDR_OWVAR 37
7758: PUSH
7759: LD_INT 14
7761: ST_TO_ADDR
// vc_engine := engine_siberite ;
7762: LD_ADDR_OWVAR 39
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// vc_control := control_manual ;
7770: LD_ADDR_OWVAR 38
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_INT 31
7785: ST_TO_ADDR
// veh := CreateVehicle ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: CALL_OW 45
7795: ST_TO_ADDR
// if HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 4
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: PPUSH
7822: CALL_OW 428
7826: PUSH
7827: LD_INT 0
7829: EQUAL
7830: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) else
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_VAR 0 4
7841: PUSH
7842: LD_VAR 0 6
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 4
7852: PUSH
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: ARRAY
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: CALL_OW 48
7870: GO 7960
// begin repeat p := p + 2 ;
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 2
7884: PLUS
7885: ST_TO_ADDR
// until HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 ;
7886: LD_VAR 0 4
7890: PUSH
7891: LD_VAR 0 6
7895: ARRAY
7896: PPUSH
7897: LD_VAR 0 4
7901: PUSH
7902: LD_VAR 0 6
7906: PUSH
7907: LD_INT 1
7909: PLUS
7910: ARRAY
7911: PPUSH
7912: CALL_OW 428
7916: PUSH
7917: LD_INT 0
7919: EQUAL
7920: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_VAR 0 4
7931: PUSH
7932: LD_VAR 0 6
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ARRAY
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// end ; PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 3
7965: PPUSH
7966: LD_EXP 32
7970: PUSH
7971: LD_INT 1
7973: PLUS
7974: PPUSH
7975: CALL_OW 380
// un := CreateHuman ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: CALL_OW 44
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 52
// end ;
8003: GO 7751
8005: POP
8006: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8007: LD_INT 198
8009: PPUSH
8010: LD_INT 94
8012: PPUSH
8013: LD_INT 8
8015: PPUSH
8016: LD_INT 10
8018: PPUSH
8019: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8023: LD_INT 167
8025: PPUSH
8026: LD_INT 130
8028: PPUSH
8029: LD_INT 8
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 330
// legion_mines := [ ] ;
8039: LD_ADDR_EXP 33
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// legion_mines := RandPointsFromArea ( 176 , 122 , 188 , 126 , 6 ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_INT 176
8053: PPUSH
8054: LD_INT 122
8056: PPUSH
8057: LD_INT 188
8059: PPUSH
8060: LD_INT 126
8062: PPUSH
8063: LD_INT 6
8065: PPUSH
8066: CALL 1562 0 5
8070: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 197 , 91 , 205 , 96 , 4 ) ;
8071: LD_ADDR_EXP 33
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 197
8083: PPUSH
8084: LD_INT 91
8086: PPUSH
8087: LD_INT 205
8089: PPUSH
8090: LD_INT 96
8092: PPUSH
8093: LD_INT 4
8095: PPUSH
8096: CALL 1562 0 5
8100: ADD
8101: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 184 , 151 , 178 , 130 , 9 ) ;
8102: LD_ADDR_EXP 33
8106: PUSH
8107: LD_EXP 33
8111: PUSH
8112: LD_INT 184
8114: PPUSH
8115: LD_INT 151
8117: PPUSH
8118: LD_INT 178
8120: PPUSH
8121: LD_INT 130
8123: PPUSH
8124: LD_INT 9
8126: PPUSH
8127: CALL 1562 0 5
8131: ADD
8132: ST_TO_ADDR
// if Difficulty > 1 then
8133: LD_OWVAR 67
8137: PUSH
8138: LD_INT 1
8140: GREATER
8141: IFFALSE 8174
// legion_mines := legion_mines ^ RandPointsFromArea ( 166 , 126 , 181 , 136 , 5 ) ;
8143: LD_ADDR_EXP 33
8147: PUSH
8148: LD_EXP 33
8152: PUSH
8153: LD_INT 166
8155: PPUSH
8156: LD_INT 126
8158: PPUSH
8159: LD_INT 181
8161: PPUSH
8162: LD_INT 136
8164: PPUSH
8165: LD_INT 5
8167: PPUSH
8168: CALL 1562 0 5
8172: ADD
8173: ST_TO_ADDR
// p := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// for i = 1 to 24 do
8182: LD_ADDR_VAR 0 3
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_INT 24
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8250
// begin PlaceMine ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 , 0 ) ;
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 6
8207: ARRAY
8208: PPUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 1
8221: PLUS
8222: ARRAY
8223: PPUSH
8224: LD_INT 8
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 454
// p := p + 2 ;
8234: LD_ADDR_VAR 0 6
8238: PUSH
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 2
8246: PLUS
8247: ST_TO_ADDR
// end ;
8248: GO 8195
8250: POP
8251: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8252: LD_ADDR_EXP 35
8256: PUSH
8257: LD_INT 13
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 1
8279: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8280: LD_INT 22
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: LD_INT 0
8297: GREATER
8298: IFFALSE 10484
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin enable ;
8322: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 30
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 30
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8399: LD_ADDR_VAR 0 10
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 6
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8489: LD_ADDR_VAR 0 16
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8523: LD_ADDR_VAR 0 15
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8591: LD_ADDR_VAR 0 13
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 25
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if l_eng then
8625: LD_VAR 0 16
8629: IFFALSE 9044
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 1000
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 72
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8829
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 5
8706: PPUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1000
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: ST_TO_ADDR
// for i = 1 to l_eng do
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 16
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8825
// if IsInUnit ( l_eng [ i ] ) then
8747: LD_VAR 0 16
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PPUSH
8758: CALL_OW 310
8762: IFFALSE 8781
// ComExitBuilding ( l_eng [ i ] ) else
8764: LD_VAR 0 16
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 122
8779: GO 8823
// if not HasTask ( l_eng [ i ] ) then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_VAR 0 2
8790: ARRAY
8791: PPUSH
8792: CALL_OW 314
8796: NOT
8797: IFFALSE 8823
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
8799: LD_VAR 0 16
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 130
8823: GO 8744
8825: POP
8826: POP
// end else
8827: GO 9044
// begin if legion_blist > 0 then
8829: LD_EXP 34
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8966
// begin for i = 1 to l_eng do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 16
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8962
// if IsInUnit ( l_eng [ i ] ) then
8857: LD_VAR 0 16
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: PPUSH
8868: CALL_OW 310
8872: IFFALSE 8891
// ComExitBuilding ( l_eng [ i ] ) else
8874: LD_VAR 0 16
8878: PUSH
8879: LD_VAR 0 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 122
8889: GO 8960
// if not HasTask ( l_eng [ i ] ) then
8891: LD_VAR 0 16
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 314
8906: NOT
8907: IFFALSE 8960
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
8909: LD_VAR 0 16
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PPUSH
8920: LD_EXP 34
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_EXP 34
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PPUSH
8938: LD_EXP 34
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PPUSH
8947: LD_EXP 34
8951: PUSH
8952: LD_INT 4
8954: ARRAY
8955: PPUSH
8956: CALL_OW 145
8960: GO 8854
8962: POP
8963: POP
// end else
8964: GO 9044
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9042
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: NOT
9000: PUSH
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: AND
9018: IFFALSE 9040
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9020: LD_VAR 0 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 120
9040: GO 8981
9042: POP
9043: POP
// end ; end ; if l_factory then
9044: LD_VAR 0 9
9048: IFFALSE 9448
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9050: LD_INT 22
9052: PUSH
9053: LD_INT 8
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: LD_INT 61
9075: PUSH
9076: EMPTY
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 8
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 34
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9250
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9132: LD_INT 22
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 61
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 8
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: CALL_OW 12
9244: ARRAY
9245: PPUSH
9246: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9250: LD_EXP 35
9254: PUSH
9255: LD_INT 0
9257: GREATER
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: AND
9273: IFFALSE 9358
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9275: LD_VAR 0 9
9279: PPUSH
9280: LD_EXP 35
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_EXP 35
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: LD_EXP 35
9302: PUSH
9303: LD_INT 3
9305: ARRAY
9306: PPUSH
9307: LD_EXP 35
9311: PUSH
9312: LD_INT 4
9314: ARRAY
9315: PPUSH
9316: CALL_OW 125
// for i = 1 to 4 do
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9356
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9336: LD_ADDR_EXP 35
9340: PUSH
9341: LD_EXP 35
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 3
9353: ST_TO_ADDR
9354: GO 9333
9356: POP
9357: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9358: LD_VAR 0 11
9362: PPUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_INT 0
9380: GREATER
9381: PUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9448
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9398: LD_VAR 0 11
9402: PPUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 72
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_INT 28
9424: PUSH
9425: LD_INT 27
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: CALL_OW 12
9442: ARRAY
9443: PPUSH
9444: CALL_OW 148
// end ; if legion_enemy > 0 then
9448: LD_EXP 36
9452: PUSH
9453: LD_INT 0
9455: GREATER
9456: IFFALSE 10036
// begin if tick mod 11 11$00 = 0 then
9458: LD_OWVAR 1
9462: PUSH
9463: LD_INT 23100
9465: MOD
9466: PUSH
9467: LD_INT 0
9469: EQUAL
9470: IFFALSE 9720
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9472: LD_ADDR_EXP 35
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ADD
9496: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9497: LD_ADDR_EXP 35
9501: PUSH
9502: LD_EXP 35
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 27
9512: PUSH
9513: LD_INT 29
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ADD
9533: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9534: LD_ADDR_EXP 35
9538: PUSH
9539: LD_EXP 35
9543: PUSH
9544: LD_INT 13
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ADD
9558: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9559: LD_ADDR_EXP 35
9563: PUSH
9564: LD_EXP 35
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 27
9574: PUSH
9575: LD_INT 29
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 12
9593: ARRAY
9594: ADD
9595: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9596: LD_ADDR_EXP 35
9600: PUSH
9601: LD_EXP 35
9605: PUSH
9606: LD_INT 13
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: ADD
9620: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9621: LD_ADDR_EXP 35
9625: PUSH
9626: LD_EXP 35
9630: PUSH
9631: LD_INT 28
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 29
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: ADD
9657: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9658: LD_ADDR_EXP 35
9662: PUSH
9663: LD_EXP 35
9667: PUSH
9668: LD_INT 13
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ADD
9682: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9683: LD_ADDR_EXP 35
9687: PUSH
9688: LD_EXP 35
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 27
9698: PUSH
9699: LD_INT 29
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 12
9717: ARRAY
9718: ADD
9719: ST_TO_ADDR
// end ; if legion_force >= 7 then
9720: LD_EXP 31
9724: PUSH
9725: LD_INT 7
9727: GREATEREQUAL
9728: IFFALSE 9911
// begin for i = 1 to legion_force do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_EXP 31
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9909
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9748: LD_EXP 31
9752: PUSH
9753: LD_VAR 0 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 314
9763: NOT
9764: PUSH
9765: LD_EXP 31
9769: PUSH
9770: LD_VAR 0 2
9774: ARRAY
9775: PPUSH
9776: CALL_OW 110
9780: PUSH
9781: LD_INT 11
9783: NONEQUAL
9784: AND
9785: IFFALSE 9907
// begin case legion_enemy of 1 :
9787: LD_EXP 36
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9824
9800: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
9801: LD_EXP 31
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: PPUSH
9812: LD_INT 142
9814: PPUSH
9815: LD_INT 144
9817: PPUSH
9818: CALL_OW 111
9822: GO 9889
9824: LD_INT 2
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9856
9832: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
9833: LD_EXP 31
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PPUSH
9844: LD_INT 101
9846: PPUSH
9847: LD_INT 34
9849: PPUSH
9850: CALL_OW 111
9854: GO 9889
9856: LD_INT 7
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9888
9864: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
9865: LD_EXP 31
9869: PUSH
9870: LD_VAR 0 2
9874: ARRAY
9875: PPUSH
9876: LD_INT 173
9878: PPUSH
9879: LD_INT 127
9881: PPUSH
9882: CALL_OW 111
9886: GO 9889
9888: POP
// SetTag ( legion_force [ i ] , 11 ) ;
9889: LD_EXP 31
9893: PUSH
9894: LD_VAR 0 2
9898: ARRAY
9899: PPUSH
9900: LD_INT 11
9902: PPUSH
9903: CALL_OW 109
// end ; end ;
9907: GO 9745
9909: POP
9910: POP
// end ; if legion_force then
9911: LD_EXP 31
9915: IFFALSE 10036
// begin tmp := legion_force ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_EXP 31
9926: ST_TO_ADDR
// for i = 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 3
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10034
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 314
9960: NOT
9961: PUSH
9962: LD_EXP 31
9966: PUSH
9967: LD_VAR 0 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 110
9977: PUSH
9978: LD_INT 11
9980: EQUAL
9981: AND
9982: IFFALSE 10032
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
9984: LD_VAR 0 3
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 22
9997: PUSH
9998: LD_EXP 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 74
10027: PPUSH
10028: CALL_OW 115
10032: GO 9942
10034: POP
10035: POP
// end ; end ; p := 1 ;
10036: LD_ADDR_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// for i = 1 to 24 do
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 24
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10188
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
10060: LD_EXP 33
10064: PUSH
10065: LD_VAR 0 6
10069: ARRAY
10070: PPUSH
10071: LD_EXP 33
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ARRAY
10085: PPUSH
10086: CALL_OW 428
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: IFFALSE 10172
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
10096: LD_EXP 33
10100: PUSH
10101: LD_VAR 0 6
10105: ARRAY
10106: PPUSH
10107: LD_EXP 33
10111: PUSH
10112: LD_VAR 0 6
10116: PUSH
10117: LD_INT 1
10119: PLUS
10120: ARRAY
10121: PPUSH
10122: CALL_OW 428
10126: PPUSH
10127: CALL_OW 255
10131: PUSH
10132: LD_EXP 36
10136: EQUAL
10137: IFFALSE 10172
// LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
10139: LD_EXP 33
10143: PUSH
10144: LD_VAR 0 6
10148: ARRAY
10149: PPUSH
10150: LD_EXP 33
10154: PUSH
10155: LD_VAR 0 6
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 8
10167: PPUSH
10168: CALL_OW 456
// p := p + 2 ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 2
10184: PLUS
10185: ST_TO_ADDR
// end ;
10186: GO 10057
10188: POP
10189: POP
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10190: LD_INT 22
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: IFFALSE 10332
// begin if l_cargo = false then
10220: LD_VAR 0 17
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10264
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10230: LD_ADDR_VAR 0 17
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 8
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if l_cargo then
10264: LD_VAR 0 17
10268: IFFALSE 10332
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_INT 14
10277: PPUSH
10278: CALL_OW 435
10282: ST_TO_ADDR
// if cr > 0 then
10283: LD_VAR 0 7
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10332
// if not HasTask ( l_cargo ) then
10293: LD_VAR 0 17
10297: PPUSH
10298: CALL_OW 314
10302: NOT
10303: IFFALSE 10332
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10305: LD_VAR 0 17
10309: PPUSH
10310: LD_VAR 0 7
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_VAR 0 7
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: CALL_OW 117
// end ; end ; if tick = [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] and FindArtifact ( 1 ) [ 1 ] = 112 and FindArtifact ( 1 ) [ 2 ] = 67 then
10332: LD_OWVAR 1
10336: PUSH
10337: LD_INT 52500
10339: PUSH
10340: LD_INT 46200
10342: PUSH
10343: LD_INT 42000
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: LD_OWVAR 67
10355: ARRAY
10356: EQUAL
10357: PUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 469
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PUSH
10370: LD_INT 112
10372: EQUAL
10373: AND
10374: PUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 469
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PUSH
10387: LD_INT 67
10389: EQUAL
10390: AND
10391: IFFALSE 10484
// begin un := l_eng [ 1 ] ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: ST_TO_ADDR
// if IsInUnit ( un ) then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 310
10416: IFFALSE 10427
// ComExitBuilding ( un ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 122
// AddComCollect ( un , FindArtifact ( 1 ) [ 1 ] , FindArtifact ( 1 ) [ 2 ] ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 469
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 469
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 207
10467: PPUSH
10468: LD_INT 123
10470: PPUSH
10471: CALL_OW 171
// AddComUnload ( un ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 219
// end ; end ;
10484: PPOPN 17
10486: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10487: LD_OWVAR 67
10491: PUSH
10492: LD_INT 1
10494: GREATER
10495: IFFALSE 10700
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10506: LD_INT 35
10508: PPUSH
10509: LD_INT 12635
10511: PPUSH
10512: CALL_OW 12
10516: PPUSH
10517: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// p := 1 ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 139
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 13
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// for i = 1 to 2 do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_INT 2
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10698
// begin if IsInUnit ( sci [ i ] ) then
10602: LD_VAR 0 2
10606: PUSH
10607: LD_VAR 0 1
10611: ARRAY
10612: PPUSH
10613: CALL_OW 310
10617: IFFALSE 10634
// ComExitBuilding ( sci [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// Wait ( 0 0$03 ) ;
10634: LD_INT 105
10636: PPUSH
10637: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10641: LD_VAR 0 2
10645: PUSH
10646: LD_VAR 0 1
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 3
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ARRAY
10677: PPUSH
10678: CALL_OW 158
// p := p + 2 ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 2
10694: PLUS
10695: ST_TO_ADDR
// end ;
10696: GO 10599
10698: POP
10699: POP
// end ;
10700: PPOPN 4
10702: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10703: LD_INT 14
10705: PPUSH
10706: CALL_OW 435
10710: PUSH
10711: LD_INT 20
10713: LESS
10714: IFFALSE 10741
10716: GO 10718
10718: DISABLE
// begin enable ;
10719: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10720: LD_INT 1
10722: PPUSH
10723: LD_INT 5
10725: PPUSH
10726: CALL_OW 12
10730: PPUSH
10731: LD_INT 14
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 55
// end ; end_of_file
10741: END
// export function Action ; var un , gamemode , speaker ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10748: LD_ADDR_OWVAR 67
10752: PUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 426
10760: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 426
10773: ST_TO_ADDR
// if gamemode = 1 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 1
10781: EQUAL
10782: IFFALSE 10806
// begin your_side := 1 ;
10784: LD_ADDR_OWVAR 2
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// legion_enemy := 1 ;
10792: LD_ADDR_EXP 36
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// PrepareAmerican ;
10800: CALL 221 0 0
// end else
10804: GO 10858
// if gamemode = 2 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: IFFALSE 10838
// begin your_side := 2 ;
10816: LD_ADDR_OWVAR 2
10820: PUSH
10821: LD_INT 2
10823: ST_TO_ADDR
// legion_enemy := 2 ;
10824: LD_ADDR_EXP 36
10828: PUSH
10829: LD_INT 2
10831: ST_TO_ADDR
// PrepareArabian ;
10832: CALL 18169 0 0
// end else
10836: GO 10858
// begin your_side := 7 ;
10838: LD_ADDR_OWVAR 2
10842: PUSH
10843: LD_INT 7
10845: ST_TO_ADDR
// legion_enemy := 7 ;
10846: LD_ADDR_EXP 36
10850: PUSH
10851: LD_INT 7
10853: ST_TO_ADDR
// PrepareAlliance ;
10854: CALL 15580 0 0
// end ; if your_side = 1 then
10858: LD_OWVAR 2
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 11344
// begin case Query ( QVul4 ) of 1 :
10868: LD_STRING QVul4
10870: PPUSH
10871: CALL_OW 97
10875: PUSH
10876: LD_INT 1
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10892: LD_INT 8
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 86
// uc_side := 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation := 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_importance := 0 ;
10918: LD_ADDR_OWVAR 32
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_EXP 21
10936: PPUSH
10937: CALL_OW 380
// un := CreateHuman ;
10941: LD_ADDR_VAR 0 2
10945: PUSH
10946: CALL_OW 44
10950: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_INT 12
10958: PPUSH
10959: LD_INT 9
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 48
// hc_name := Stuart Carey ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING Stuart Carey
10976: ST_TO_ADDR
// hc_class := 1 ;
10977: LD_ADDR_OWVAR 28
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// hc_gallery := vulcano ;
10985: LD_ADDR_OWVAR 33
10989: PUSH
10990: LD_STRING vulcano
10992: ST_TO_ADDR
// hc_face_number := 1 ;
10993: LD_ADDR_OWVAR 34
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// us_guy := CreateHuman ;
11001: LD_ADDR_EXP 22
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// InitHc ;
11011: CALL_OW 19
// if rand ( 0 , 1 ) then
11015: LD_INT 0
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 12
11025: IFFALSE 11042
// PrepareHuman ( sex_male , 3 , 6 ) else
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 3
11032: PPUSH
11033: LD_INT 6
11035: PPUSH
11036: CALL_OW 380
11040: GO 11055
// PrepareHuman ( sex_female , 4 , 8 ) ;
11042: LD_INT 2
11044: PPUSH
11045: LD_INT 4
11047: PPUSH
11048: LD_INT 8
11050: PPUSH
11051: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_EXP 19
11064: PPUSH
11065: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11069: LD_EXP 19
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 119
// if GetSex ( un ) = sex_male then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 258
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11179
// begin Say ( un , VD-un1 ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_STRING VD-un1
11105: PPUSH
11106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11110: LD_EXP 19
11114: PPUSH
11115: LD_STRING VDc-1
11117: PPUSH
11118: CALL_OW 88
// Say ( un , VD-un2 ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_STRING VD-un2
11129: PPUSH
11130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11134: LD_EXP 19
11138: PPUSH
11139: LD_STRING VDc-2
11141: PPUSH
11142: CALL_OW 88
// Say ( un , VD-un3 ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_STRING VD-un3
11153: PPUSH
11154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11158: LD_INT 7
11160: PPUSH
11161: CALL_OW 67
// Say ( un , VD-un4 ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_STRING VD-un4
11172: PPUSH
11173: CALL_OW 88
// end else
11177: GO 11258
// begin Say ( un , VD-unf1 ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_STRING VD-unf1
11186: PPUSH
11187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11191: LD_EXP 19
11195: PPUSH
11196: LD_STRING VDc-1
11198: PPUSH
11199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_STRING VD-unf2
11210: PPUSH
11211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11215: LD_EXP 19
11219: PPUSH
11220: LD_STRING VDc-2
11222: PPUSH
11223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING VD-unf3
11234: PPUSH
11235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11239: LD_INT 7
11241: PPUSH
11242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_STRING VD-unf4
11253: PPUSH
11254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11273: LD_EXP 19
11277: PPUSH
11278: LD_STRING VDc-3
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11289: LD_STRING CVulc1
11291: PPUSH
11292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL_OW 250
11312: PUSH
11313: LD_INT 2
11315: EQUAL
11316: PUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 251
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: AND
11331: IFFALSE 11296
// RemoveUnit ( un ) ;
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 64
// end else
11342: GO 11721
// if your_side = 2 then
11344: LD_OWVAR 2
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: IFFALSE 11568
// begin CenterNowOnUnits ( player_commander ) ;
11354: LD_EXP 10
11358: PPUSH
11359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PUSH
11397: LD_EXP 51
11401: DIFF
11402: ST_TO_ADDR
// if speaker then
11403: LD_VAR 0 4
11407: IFFALSE 11559
// begin InGameOn ;
11409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11413: LD_EXP 51
11417: PPUSH
11418: LD_STRING VSd-1
11420: PPUSH
11421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11425: LD_VAR 0 4
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: CALL_OW 258
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11462
// Say ( speaker [ 1 ] , VAd-1 ) else
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_STRING VAd-1
11455: PPUSH
11456: CALL_OW 88
11460: GO 11478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 1
11469: ARRAY
11470: PPUSH
11471: LD_STRING VAfd-1
11473: PPUSH
11474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11478: LD_EXP 51
11482: PPUSH
11483: LD_STRING VSd-2
11485: PPUSH
11486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 258
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11527
// Say ( speaker [ 1 ] , VAd-2 ) else
11509: LD_VAR 0 4
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_STRING VAd-2
11520: PPUSH
11521: CALL_OW 88
11525: GO 11543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11527: LD_VAR 0 4
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_STRING VAfd-2
11538: PPUSH
11539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11543: LD_EXP 51
11547: PPUSH
11548: LD_STRING VSd-3
11550: PPUSH
11551: CALL_OW 88
// InGameOff ;
11555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11559: LD_STRING CVulc5
11561: PPUSH
11562: CALL_OW 337
// end else
11566: GO 11721
// if your_side = 7 then
11568: LD_OWVAR 2
11572: PUSH
11573: LD_INT 7
11575: EQUAL
11576: IFFALSE 11721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 7
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 37
11616: DIFF
11617: ST_TO_ADDR
// if speaker then
11618: LD_VAR 0 4
11622: IFFALSE 11714
// begin CenterNowOnUnits ( al_commander ) ;
11624: LD_EXP 37
11628: PPUSH
11629: CALL_OW 87
// InGameOn ;
11633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11637: LD_EXP 37
11641: PPUSH
11642: LD_STRING VPd-1
11644: PPUSH
11645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 258
11662: IFFALSE 11682
// Say ( speaker [ 1 ] , VPpd-1 ) else
11664: LD_VAR 0 4
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PPUSH
11673: LD_STRING VPpd-1
11675: PPUSH
11676: CALL_OW 88
11680: GO 11698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: LD_STRING VPpdf-1
11693: PPUSH
11694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11698: LD_EXP 37
11702: PPUSH
11703: LD_STRING VPd-2
11705: PPUSH
11706: CALL_OW 88
// InGameOff ;
11710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11714: LD_STRING CVulc7
11716: PPUSH
11717: CALL_OW 337
// end ; SaveForQuickRestart ;
11721: CALL_OW 22
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11730: LD_INT 22
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: IFFALSE 11802
11760: GO 11762
11762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11763: LD_STRING CVulc6
11765: PPUSH
11766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11770: LD_INT 52500
11772: PUSH
11773: LD_INT 47250
11775: PUSH
11776: LD_INT 42000
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL_OW 67
// ru_can_attack := true ;
11794: LD_ADDR_EXP 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11803: LD_INT 50
11805: PPUSH
11806: CALL_OW 255
11810: PUSH
11811: LD_INT 1
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: OR
11862: IFFALSE 12096
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11870: LD_STRING CVulc2
11872: PPUSH
11873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PUSH
11911: LD_EXP 19
11915: DIFF
11916: ST_TO_ADDR
// DialogueOn ;
11917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 258
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: IFFALSE 11965
// Say ( speaker [ 1 ] , VDb-1 ) else
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_STRING VDb-1
11958: PPUSH
11959: CALL_OW 88
11963: GO 11981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_STRING VDbf-1
11976: PPUSH
11977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11981: LD_INT 10
11983: PPUSH
11984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 258
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: IFFALSE 12025
// Say ( speaker [ 1 ] , VDb-2 ) else
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_STRING VDb-2
12018: PPUSH
12019: CALL_OW 88
12023: GO 12041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_STRING VDbf-2
12036: PPUSH
12037: CALL_OW 88
// DWait ( 0 0$01 ) ;
12041: LD_INT 35
12043: PPUSH
12044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12048: LD_EXP 19
12052: PPUSH
12053: LD_STRING VDb-com1
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12064: LD_INT 44100
12066: PUSH
12067: LD_INT 36750
12069: PUSH
12070: LD_INT 31500
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_OWVAR 67
12082: ARRAY
12083: PPUSH
12084: CALL_OW 67
// ru_can_attack := true ;
12088: LD_ADDR_EXP 3
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// end ;
12096: PPOPN 1
12098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12099: LD_INT 22
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: IFFALSE 12164
12129: GO 12131
12131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12132: LD_INT 42000
12134: PUSH
12135: LD_INT 34650
12137: PUSH
12138: LD_INT 29400
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_OWVAR 67
12150: ARRAY
12151: PPUSH
12152: CALL_OW 67
// ru_can_attack := true ;
12156: LD_ADDR_EXP 3
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// end ;
12164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 255
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12383
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: ST_TO_ADDR
// DialogueOn ;
12218: CALL_OW 6
// if speaker then
12222: LD_VAR 0 1
12226: IFFALSE 12281
// if GetSex ( speaker [ 1 ] ) = sex_male then
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 258
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12265
// Say ( speaker [ 1 ] , VDe-1 ) else
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_STRING VDe-1
12258: PPUSH
12259: CALL_OW 88
12263: GO 12281
// Say ( speaker [ 1 ] , VDef-1 ) ;
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING VDef-1
12276: PPUSH
12277: CALL_OW 88
// case Query ( SibNote ) of 1 :
12281: LD_STRING SibNote
12283: PPUSH
12284: CALL_OW 97
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12300
12297: POP
// ; end ;
12298: GO 12301
12300: POP
// if speaker then
12301: LD_VAR 0 1
12305: IFFALSE 12360
// if GetSex ( speaker [ 1 ] ) = sex_male then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 258
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12344
// Say ( speaker [ 1 ] , VDe-2 ) else
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_STRING VDe-2
12337: PPUSH
12338: CALL_OW 88
12342: GO 12360
// Say ( speaker [ 1 ] , VDef-2 ) ;
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: LD_STRING VDef-2
12355: PPUSH
12356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12360: LD_EXP 19
12364: PPUSH
12365: LD_STRING VDc-4
12367: PPUSH
12368: CALL_OW 88
// DialogueOff ;
12372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12376: LD_STRING CVulc3
12378: PPUSH
12379: CALL_OW 337
// end ;
12383: PPOPN 1
12385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12386: LD_OWVAR 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PUSH
12424: LD_INT 0
12426: GREATER
12427: AND
12428: IFFALSE 12862
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12438: LD_INT 245
12440: PPUSH
12441: LD_INT 1295
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING VDG-1
12464: PPUSH
12465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12469: LD_EXP 19
12473: PPUSH
12474: LD_STRING VDc-5
12476: PPUSH
12477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12481: LD_EXP 22
12485: PPUSH
12486: LD_STRING VDG-2
12488: PPUSH
12489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12493: LD_EXP 19
12497: PPUSH
12498: LD_STRING VDc-6
12500: PPUSH
12501: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12505: LD_EXP 22
12509: PPUSH
12510: LD_STRING VDG-3
12512: PPUSH
12513: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12517: LD_EXP 19
12521: PPUSH
12522: LD_STRING VDc-7
12524: PPUSH
12525: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12529: LD_EXP 22
12533: PPUSH
12534: LD_STRING VDG-4
12536: PPUSH
12537: CALL_OW 94
// DialogueOff ;
12541: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12545: LD_STRING CVulc4
12547: PPUSH
12548: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12552: LD_INT 18900
12554: PUSH
12555: LD_INT 21000
12557: PUSH
12558: LD_INT 23100
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_OWVAR 67
12570: ARRAY
12571: PPUSH
12572: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_OWVAR 67
12604: ARRAY
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12851
// begin uc_side := 1 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// uc_nation := 1 ;
12617: LD_ADDR_OWVAR 21
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12625: LD_INT 0
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 4
12633: PPUSH
12634: CALL_OW 12
12638: PPUSH
12639: LD_EXP 21
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: CALL_OW 233
// if GetClass ( un ) = 3 then
12670: LD_VAR 0 2
12674: PPUSH
12675: CALL_OW 257
12679: PUSH
12680: LD_INT 3
12682: EQUAL
12683: IFFALSE 12834
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12685: LD_ADDR_OWVAR 37
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: MOD
12708: ARRAY
12709: ST_TO_ADDR
// vc_engine := engine_combustion ;
12710: LD_ADDR_OWVAR 39
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// vc_control := control_manual ;
12718: LD_ADDR_OWVAR 38
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12726: LD_ADDR_OWVAR 40
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 9
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 12
12759: ARRAY
12760: ST_TO_ADDR
// veh := CreateVehicle ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: CALL_OW 45
12770: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 2
12778: PPUSH
12779: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 77
12790: PPUSH
12791: LD_INT 88
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end else
12832: GO 12849
// PlaceUnitArea ( un , start_north , false ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 49
// end ;
12849: GO 12606
12851: POP
12852: POP
// CenterNowOnUnits ( un ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 87
// end ;
12862: PPOPN 3
12864: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12865: LD_INT 21
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 70
12884: IFFALSE 13205
12886: GO 12888
12888: DISABLE
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 10
12973: DIFF
12974: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 112
12987: PPUSH
12988: LD_INT 67
12990: PPUSH
12991: CALL_OW 73
12995: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 7
13008: EQUAL
13009: IFFALSE 13052
// if GetSex ( un ) = sex_male then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 258
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: IFFALSE 13040
// Say ( un , VD-find-al ) else
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_STRING VD-find-al
13033: PPUSH
13034: CALL_OW 88
13038: GO 13052
// Say ( un , VD-find-al-f ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_STRING VD-find-al-f
13047: PPUSH
13048: CALL_OW 88
// if GetSide ( un ) = 2 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 255
13061: PUSH
13062: LD_INT 2
13064: EQUAL
13065: IFFALSE 13108
// if GetSex ( un ) = sex_male then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 258
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13096
// Say ( un , VD-find-ar ) else
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_STRING VD-find-ar
13089: PPUSH
13090: CALL_OW 88
13094: GO 13108
// Say ( un , VD-find-ar-f ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_STRING VD-find-ar-f
13103: PPUSH
13104: CALL_OW 88
// if GetSide ( un ) = 1 then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13188
// begin if GetSex ( un ) = sex_male then
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 258
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13164
// begin Say ( un , VD-find-us ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_STRING VD-find-us
13145: PPUSH
13146: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_STRING VD-find-us2
13157: PPUSH
13158: CALL_OW 88
// end else
13162: GO 13188
// begin Say ( un , VD-find-us-f ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_STRING VD-find-us-f
13171: PPUSH
13172: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13176: LD_VAR 0 1
13180: PPUSH
13181: LD_STRING VD-find-us2-f
13183: PPUSH
13184: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13188: LD_INT 10
13190: PPUSH
13191: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13195: LD_INT 112
13197: PPUSH
13198: LD_INT 67
13200: PPUSH
13201: CALL_OW 86
// end ;
13205: PPOPN 2
13207: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13208: LD_EXP 7
13212: IFFALSE 13714
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin if your_side = 1 then
13220: LD_OWVAR 2
13224: PUSH
13225: LD_INT 1
13227: EQUAL
13228: IFFALSE 13409
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 4
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: PUSH
13264: LD_EXP 19
13268: DIFF
13269: ST_TO_ADDR
// if not speaker then
13270: LD_VAR 0 1
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 258
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: IFFALSE 13316
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_STRING VD-us-sci-art-1
13309: PPUSH
13310: CALL_OW 88
13314: GO 13332
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING VD-us-fsci-art-1
13327: PPUSH
13328: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13332: LD_EXP 19
13336: PPUSH
13337: LD_STRING VDc-art1
13339: PPUSH
13340: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 258
13357: PUSH
13358: LD_INT 1
13360: EQUAL
13361: IFFALSE 13381
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13363: LD_VAR 0 1
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_STRING VD-us-sci-art-2
13374: PPUSH
13375: CALL_OW 88
13379: GO 13397
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13381: LD_VAR 0 1
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: LD_STRING VD-us-fsci-art-2
13392: PPUSH
13393: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13397: LD_EXP 19
13401: PPUSH
13402: LD_STRING VDc-art2
13404: PPUSH
13405: CALL_OW 88
// end ; if your_side = 2 then
13409: LD_OWVAR 2
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13521
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: LD_EXP 51
13457: DIFF
13458: ST_TO_ADDR
// if not speaker then
13459: LD_VAR 0 1
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 258
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13505
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING VD-ar-sci-art-1
13498: PPUSH
13499: CALL_OW 88
13503: GO 13521
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_STRING VD-ar-fsci-art-1
13516: PPUSH
13517: CALL_OW 88
// end ; if your_side = 7 then
13521: LD_OWVAR 2
13525: PUSH
13526: LD_INT 7
13528: EQUAL
13529: IFFALSE 13714
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 7
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 25
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_EXP 37
13569: DIFF
13570: ST_TO_ADDR
// if speaker then
13571: LD_VAR 0 1
13575: IFFALSE 13707
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 258
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13614
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_STRING VD-al-sci-art-1
13607: PPUSH
13608: CALL_OW 88
13612: GO 13630
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING VD-al-fsci-art-1
13625: PPUSH
13626: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13630: LD_EXP 37
13634: PPUSH
13635: LD_STRING VPd-art-1
13637: PPUSH
13638: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 258
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13679
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13661: LD_VAR 0 1
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_STRING VD-al-sci-art-2
13672: PPUSH
13673: CALL_OW 88
13677: GO 13695
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_STRING VD-al-fsci-art-2
13690: PPUSH
13691: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13695: LD_EXP 37
13699: PPUSH
13700: LD_STRING VPd-art-2
13702: PPUSH
13703: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13707: LD_STRING CVulc7out
13709: PPUSH
13710: CALL_OW 337
// end ; end ;
13714: PPOPN 1
13716: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13717: LD_INT 8
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_OWVAR 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL 2145 0 2
13744: PPUSH
13745: CALL_OW 292
13749: IFFALSE 13892
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin if your_side = 1 then
13757: LD_OWVAR 2
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: IFFALSE 13848
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: PUSH
13787: LD_EXP 19
13791: DIFF
13792: ST_TO_ADDR
// if speaker then
13793: LD_VAR 0 1
13797: IFFALSE 13848
// if GetSex ( speaker [ 1 ] ) then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 258
13812: IFFALSE 13832
// Say ( speaker [ 1 ] , VD-legion-us ) else
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING VD-legion-us
13825: PPUSH
13826: CALL_OW 88
13830: GO 13848
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13832: LD_VAR 0 1
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: LD_STRING VD-legion-us-f
13843: PPUSH
13844: CALL_OW 88
// end ; if your_side = 2 then
13848: LD_OWVAR 2
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13870
// Say ( ar_commander , VD-legion-ar ) ;
13858: LD_EXP 51
13862: PPUSH
13863: LD_STRING VD-legion-ar
13865: PPUSH
13866: CALL_OW 88
// if your_side = 7 then
13870: LD_OWVAR 2
13874: PUSH
13875: LD_INT 7
13877: EQUAL
13878: IFFALSE 13892
// Say ( al_commander , VD-legion-al ) ;
13880: LD_EXP 37
13884: PPUSH
13885: LD_STRING VD-legion-al
13887: PPUSH
13888: CALL_OW 88
// end ;
13892: PPOPN 1
13894: END
// every 0 0$01 trigger mine_vulc do
13895: LD_EXP 12
13899: IFFALSE 13916
13901: GO 13903
13903: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13904: LD_EXP 10
13908: PPUSH
13909: LD_STRING VD-vulc-mines
13911: PPUSH
13912: CALL_OW 88
// end ;
13916: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13917: LD_OWVAR 67
13921: PUSH
13922: LD_INT 1
13924: GREATER
13925: IFFALSE 14044
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 123
13942: PUSH
13943: LD_INT 95
13945: PUSH
13946: LD_INT 119
13948: PUSH
13949: LD_INT 89
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 81
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// p := 1 ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i = 1 to 3 do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14042
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13990: LD_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ARRAY
14015: PPUSH
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 454
// p := p + 2 ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 2
14038: PLUS
14039: ST_TO_ADDR
// end ;
14040: GO 13987
14042: POP
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 1
14054: GREATER
14055: PUSH
14056: LD_INT 22
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 70
14075: AND
14076: IFFALSE 14280
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
// begin enable ;
14086: ENABLE
// p := 1 ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 123
14102: PUSH
14103: LD_INT 95
14105: PUSH
14106: LD_INT 119
14108: PUSH
14109: LD_INT 89
14111: PUSH
14112: LD_INT 115
14114: PUSH
14115: LD_INT 81
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i = 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14278
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14142: LD_VAR 0 3
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: PLUS
14166: ARRAY
14167: PPUSH
14168: CALL_OW 428
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14262
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14178: LD_VAR 0 3
14182: PUSH
14183: LD_VAR 0 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 1
14201: PLUS
14202: ARRAY
14203: PPUSH
14204: CALL_OW 428
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_OWVAR 2
14218: EQUAL
14219: IFFALSE 14262
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14221: LD_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 3
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PLUS
14245: ARRAY
14246: PPUSH
14247: LD_INT 8
14249: PPUSH
14250: CALL_OW 456
// mine_vulc := true ;
14254: LD_ADDR_EXP 12
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// end ; p := p + 2 ;
14262: LD_ADDR_VAR 0 1
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PLUS
14275: ST_TO_ADDR
// end ;
14276: GO 14139
14278: POP
14279: POP
// end ;
14280: PPOPN 3
14282: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14283: LD_INT 22
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: LD_INT 0
14300: EQUAL
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: LD_INT 2
14309: NONEQUAL
14310: AND
14311: IFFALSE 14320
14313: GO 14315
14315: DISABLE
// Win ;
14316: CALL 14377 0 0
14320: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14321: LD_INT 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_INT 0
14356: EQUAL
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: AND
14367: IFFALSE 14376
14369: GO 14371
14371: DISABLE
// Win ;
14372: CALL 14377 0 0
14376: END
// function Win ; var points ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
// case Query ( VulcWin ) of 1 :
14381: LD_STRING VulcWin
14383: PPUSH
14384: CALL_OW 97
14388: PUSH
14389: LD_INT 1
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14400
14397: POP
// ; end ;
14398: GO 14401
14400: POP
// if medal_enabled then
14401: LD_EXP 13
14405: IFFALSE 14419
// AddMedal ( vulc_1 , 1 ) else
14407: LD_STRING vulc_1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 101
14417: GO 14430
// AddMedal ( vulc_1 , - 1 ) ;
14419: LD_STRING vulc_1
14421: PPUSH
14422: LD_INT 1
14424: NEG
14425: PPUSH
14426: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14430: LD_INT 22
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14462
// AddMedal ( vulc_2 , 1 ) else
14450: LD_STRING vulc_2
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 101
14460: GO 14473
// AddMedal ( vulc_2 , - 1 ) ;
14462: LD_STRING vulc_2
14464: PPUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: CALL_OW 101
// points := CalculateCommanderPoints ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: CALL 2266 0 0
14482: ST_TO_ADDR
// if points >= 2000 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_INT 2000
14490: GREATEREQUAL
14491: IFFALSE 14505
// AddMedal ( vulc_3 , 2 ) else
14493: LD_STRING vulc_3
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: CALL_OW 101
14503: GO 14538
// if points >= 0 then
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 0
14512: GREATEREQUAL
14513: IFFALSE 14527
// AddMedal ( vulc_3 , 1 ) else
14515: LD_STRING vulc_3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 101
14525: GO 14538
// AddMedal ( vulc_3 , - 1 ) ;
14527: LD_STRING vulc_3
14529: PPUSH
14530: LD_INT 1
14532: NEG
14533: PPUSH
14534: CALL_OW 101
// GiveMedals ( MAIN ) ;
14538: LD_STRING MAIN
14540: PPUSH
14541: CALL_OW 102
// YouWin ;
14545: CALL_OW 103
// end ; end_of_file
14549: LD_VAR 0 1
14553: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14554: LD_INT 13
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin enable ;
14584: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_INT 13
14592: PPUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14640
// if GetLives ( i ) > 4 then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 256
14620: PUSH
14621: LD_INT 4
14623: GREATER
14624: IFFALSE 14638
// SetLives ( i , 4 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL_OW 234
14638: GO 14608
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_OWVAR 2
14659: EQUAL
14660: IFFALSE 14670
// player_res_art := true ;
14662: LD_ADDR_EXP 6
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// end ;
14670: PPOPN 1
14672: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var x , y , lab ;
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 7
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PUSH
14733: LD_EXP 6
14737: AND
14738: IFFALSE 15093
14740: GO 14742
14742: DISABLE
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin enable ;
14748: ENABLE
// x := FindArtifact ( 1 ) [ 1 ] ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 469
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 469
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_OWVAR 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 73
14862: ST_TO_ADDR
// if player_artifact_ready = false then
14863: LD_EXP 7
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14977
// if GetDistUnitXY ( lab , x , y ) < 6 then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 297
14892: PUSH
14893: LD_INT 6
14895: LESS
14896: IFFALSE 14957
// begin if BuildingStatus ( lab ) = bs_idle then
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 461
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14935
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 468
14933: GO 14955
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14935: LD_OWVAR 2
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 468
// end else
14955: GO 14977
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14957: LD_OWVAR 2
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 468
// if player_artifact_ready then
14977: LD_EXP 7
14981: IFFALSE 15093
// if GetDistUnitXY ( lab , x , y ) < 6 then
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: PUSH
15003: LD_INT 6
15005: LESS
15006: IFFALSE 15071
// begin if BuildingStatus ( lab ) = bs_idle then
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 461
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15047
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15023: LD_OWVAR 2
15027: PPUSH
15028: LD_EXP 8
15032: PPUSH
15033: LD_INT 4
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 468
15045: GO 15069
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15047: LD_OWVAR 2
15051: PPUSH
15052: LD_EXP 8
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: CALL_OW 468
// end else
15069: GO 15093
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_EXP 8
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 468
// end ;
15093: PPOPN 3
15095: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var x , y , i , lab , side ;
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin x := FindArtifact ( 1 ) [ 1 ] ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 469
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 469
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
15137: LD_ADDR_VAR 0 8
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 11
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 6
15200: PPUSH
15201: CALL_OW 73
15205: ST_TO_ADDR
// if icon = art_exp_left then
15206: LD_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15253
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15216: LD_VAR 0 8
15220: PPUSH
15221: LD_EXP 9
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 486
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15233: LD_OWVAR 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: LD_VAR 0 8
15248: PPUSH
15249: CALL_OW 468
// end ; if icon = art_icon then
15253: LD_VAR 0 2
15257: PUSH
15258: LD_EXP 8
15262: EQUAL
15263: IFFALSE 15477
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: IN
15285: IFFALSE 15477
// begin side := GetSide ( cr1 ) ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 255
15301: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15302: LD_INT 22
15304: PUSH
15305: LD_VAR 0 9
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 0
15335: GREATER
15336: IFFALSE 15477
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 30
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 7
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// player_res_art := false ;
15422: LD_ADDR_EXP 6
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15430: LD_OWVAR 2
15434: PPUSH
15435: LD_EXP 8
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 8
15447: PPUSH
15448: CALL_OW 468
// Wait ( time_to_reuse ) ;
15452: LD_EXP 11
15456: PPUSH
15457: CALL_OW 67
// player_res_art := true ;
15461: LD_ADDR_EXP 6
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// medal_enabled := true ;
15469: LD_ADDR_EXP 13
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; end ; end ; end ;
15477: PPOPN 9
15479: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_OWVAR 2
15494: EQUAL
15495: IFFALSE 15532
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 468
// player_artifact_ready := true ;
15517: LD_ADDR_EXP 7
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15525: LD_STRING ArtVulcano
15527: PPUSH
15528: CALL_OW 339
// end ; end ;
15532: PPOPN 1
15534: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15535: LD_OWVAR 2
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 468
// end ; end_of_file
15555: PPOPN 2
15557: END
// every 0 0$01 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// Display_Strings := [ #tick , tick ] ;
15562: LD_ADDR_OWVAR 47
15566: PUSH
15567: LD_STRING #tick
15569: PUSH
15570: LD_OWVAR 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
// end ; end_of_file
15579: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15587: LD_ADDR_EXP 39
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: ST_TO_ADDR
// al_force := [ ] ;
15612: LD_ADDR_EXP 38
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// RemoveAlliance ;
15619: CALL 15997 0 0
// ResetFog ;
15623: CALL_OW 335
// your_side := 7 ;
15627: LD_ADDR_OWVAR 2
15631: PUSH
15632: LD_INT 7
15634: ST_TO_ADDR
// uc_side := 7 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 7
15642: ST_TO_ADDR
// hc_gallery :=  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name :=  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// hc_importance := 0 ;
15659: LD_ADDR_OWVAR 32
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// for i = 1 to 17 do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_INT 17
15679: PUSH
15680: FOR_TO
15681: IFFALSE 15761
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15683: LD_ADDR_OWVAR 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15710: LD_INT 0
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 4
15718: PPUSH
15719: CALL_OW 12
15723: PPUSH
15724: LD_EXP 39
15728: PPUSH
15729: CALL_OW 380
// un := CreateHuman ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: CALL_OW 44
15742: ST_TO_ADDR
// al_force := al_force ^ un ;
15743: LD_ADDR_EXP 38
15747: PUSH
15748: LD_EXP 38
15752: PUSH
15753: LD_VAR 0 4
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15680
15761: POP
15762: POP
// hc_importance := 100 ;
15763: LD_ADDR_OWVAR 32
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// uc_nation := 1 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_EXP 39
15789: PPUSH
15790: CALL_OW 380
// al_commander := CreateHuman ;
15794: LD_ADDR_EXP 37
15798: PUSH
15799: CALL_OW 44
15803: ST_TO_ADDR
// player_commander := al_commander ;
15804: LD_ADDR_EXP 10
15808: PUSH
15809: LD_EXP 37
15813: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_STRING text
15821: PPUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 9
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: LD_OWVAR 67
15840: ARRAY
15841: PPUSH
15842: LD_INT 9
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_OWVAR 67
15860: ARRAY
15861: PPUSH
15862: LD_INT -5
15864: PUSH
15865: LD_EXP 37
15869: PUSH
15870: LD_INT -3
15872: PUSH
15873: LD_INT -2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_EXP 38
15886: ADD
15887: PPUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 42
15932: ST_TO_ADDR
// team := team ^ al_commander ;
15933: LD_ADDR_VAR 0 5
15937: PUSH
15938: LD_VAR 0 5
15942: PUSH
15943: LD_EXP 37
15947: ADD
15948: ST_TO_ADDR
// for i = 1 to team do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 5
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15990
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 15
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 49
15988: GO 15964
15990: POP
15991: POP
// end ;
15992: LD_VAR 0 1
15996: RET
// export function RemoveAlliance ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16001: LD_INT 22
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16072
// RemoveUnit ( i ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 64
16070: GO 16058
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16085: LD_INT 31
16087: PPUSH
16088: LD_INT 7
16090: PPUSH
16091: LD_INT 2
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16098: LD_INT 32
16100: PPUSH
16101: LD_INT 7
16103: PPUSH
16104: LD_INT 2
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16111: LD_INT 59
16113: PPUSH
16114: LD_INT 7
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16124: LD_ADDR_EXP 39
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_OWVAR 67
16147: ARRAY
16148: ST_TO_ADDR
// al_force := [ ] ;
16149: LD_ADDR_EXP 38
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// al_vehs := [ ] ;
16156: LD_ADDR_EXP 44
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// uc_side := 7 ;
16163: LD_ADDR_OWVAR 20
16167: PUSH
16168: LD_INT 7
16170: ST_TO_ADDR
// uc_nation := 1 ;
16171: LD_ADDR_OWVAR 21
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// bc_type := b_oil_mine ;
16179: LD_ADDR_OWVAR 42
16183: PUSH
16184: LD_INT 29
16186: ST_TO_ADDR
// b := CreateBuilding ;
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: CALL_OW 46
16196: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 61
16204: PPUSH
16205: LD_INT 7
16207: PPUSH
16208: LD_INT 0
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 50
// bc_type := b_siberite_mine ;
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 30
16225: ST_TO_ADDR
// b := CreateBuilding ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: CALL_OW 46
16235: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 69
16243: PPUSH
16244: LD_INT 13
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 50
// hc_gallery :=  ;
16257: LD_ADDR_OWVAR 33
16261: PUSH
16262: LD_STRING 
16264: ST_TO_ADDR
// hc_name :=  ;
16265: LD_ADDR_OWVAR 26
16269: PUSH
16270: LD_STRING 
16272: ST_TO_ADDR
// hc_importance := 0 ;
16273: LD_ADDR_OWVAR 32
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_INT 7
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16386
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16318: LD_ADDR_OWVAR 21
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 12
16343: ARRAY
16344: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_EXP 39
16355: PPUSH
16356: CALL_OW 380
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 52
// end ;
16384: GO 16315
16386: POP
16387: POP
// for i = 1 to 3 do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: DOUBLE
16394: LD_INT 1
16396: DEC
16397: ST_TO_ADDR
16398: LD_INT 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16470
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 4
16436: PPUSH
16437: LD_EXP 39
16441: PPUSH
16442: CALL_OW 380
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 164
16463: PPUSH
16464: CALL_OW 52
// end ;
16468: GO 16401
16470: POP
16471: POP
// for i = 1 to 6 do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 6
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16577
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16488: LD_ADDR_OWVAR 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 9
16523: PUSH
16524: LD_INT 9
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 3
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_EXP 39
16548: PPUSH
16549: CALL_OW 380
// un := CreateHuman ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: CALL_OW 44
16562: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 173
16570: PPUSH
16571: CALL_OW 52
// end ;
16575: GO 16485
16577: POP
16578: POP
// for i = 1 to 6 do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_INT 6
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16691
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16595: LD_ADDR_OWVAR 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_EXP 39
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 52
// end ;
16689: GO 16592
16691: POP
16692: POP
// for i = 1 to 4 do
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_INT 4
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16775
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16709: LD_ADDR_OWVAR 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_EXP 39
16746: PPUSH
16747: CALL_OW 380
// un := CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 162
16768: PPUSH
16769: CALL_OW 52
// end ;
16773: GO 16706
16775: POP
16776: POP
// uc_nation := 3 ;
16777: LD_ADDR_OWVAR 21
16781: PUSH
16782: LD_INT 3
16784: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16785: LD_ADDR_OWVAR 37
16789: PUSH
16790: LD_INT 21
16792: ST_TO_ADDR
// vc_engine := engine_siberite ;
16793: LD_ADDR_OWVAR 39
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// vc_control := control_computer ;
16801: LD_ADDR_OWVAR 38
16805: PUSH
16806: LD_INT 3
16808: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16809: LD_ADDR_OWVAR 40
16813: PUSH
16814: LD_INT 51
16816: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16817: CALL_OW 45
16821: PPUSH
16822: LD_INT 49
16824: PPUSH
16825: LD_INT 13
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16835: LD_ADDR_EXP 46
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 33
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 22
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 35
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16983
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16925: LD_INT 22
16927: PUSH
16928: LD_INT 7
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 35
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: PUSH
16968: LD_VAR 0 2
16972: ARRAY
16973: PPUSH
16974: LD_INT 49
16976: PPUSH
16977: CALL_OW 208
16981: GO 16922
16983: POP
16984: POP
// end ;
16985: LD_VAR 0 1
16989: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$01 trigger your_side = 1 do var i , un , veh , cr ;
16990: LD_OWVAR 2
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: IFFALSE 18166
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
// begin enable ;
17009: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17010: LD_ADDR_EXP 50
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 7
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17044: LD_ADDR_EXP 48
17048: PUSH
17049: LD_INT 164
17051: PUSH
17052: LD_INT 197
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17059: LD_ADDR_EXP 47
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17097: LD_ADDR_EXP 49
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 7
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PPUSH
17159: CALL_OW 69
17163: IFFALSE 17203
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17165: LD_ADDR_EXP 45
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 7
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17203: LD_ADDR_EXP 41
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17237: LD_ADDR_EXP 40
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 7
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17271: LD_ADDR_EXP 42
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 7
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 4
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17339: LD_EXP 41
17343: PPUSH
17344: LD_INT 81
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PPUSH
17359: CALL 1663 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17363: LD_EXP 45
17367: PPUSH
17368: CALL_OW 314
17372: NOT
17373: PUSH
17374: LD_EXP 45
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 289
17386: PUSH
17387: LD_INT 100
17389: LESS
17390: AND
17391: IFFALSE 17439
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: LD_INT 12
17400: PPUSH
17401: CALL_OW 435
17405: ST_TO_ADDR
// if cr then
17406: LD_VAR 0 4
17410: IFFALSE 17439
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 4
17430: PUSH
17431: LD_INT 2
17433: ARRAY
17434: PPUSH
17435: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17439: LD_EXP 50
17443: PPUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 1000
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: IFFALSE 17595
// begin if al_eng then
17467: LD_EXP 40
17471: IFFALSE 17593
// for i = 1 to al_eng do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_EXP 40
17487: PUSH
17488: FOR_TO
17489: IFFALSE 17591
// if IsInUnit ( al_eng [ i ] ) then
17491: LD_EXP 40
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17525
// ComExitBuilding ( al_eng [ i ] ) else
17508: LD_EXP 40
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PPUSH
17519: CALL_OW 122
17523: GO 17589
// if not HasTask ( al_eng [ i ] ) then
17525: LD_EXP 40
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: IFFALSE 17589
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17543: LD_EXP 40
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: PPUSH
17554: LD_EXP 50
17558: PPUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 1000
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 130
17589: GO 17488
17591: POP
17592: POP
// end else
17593: GO 17677
// if al_eng then
17595: LD_EXP 40
17599: IFFALSE 17677
// if not IsInUnit ( al_eng [ 1 ] ) then
17601: LD_EXP 40
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 310
17614: NOT
17615: IFFALSE 17677
// for i = 1 to al_eng do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: DOUBLE
17623: LD_INT 1
17625: DEC
17626: ST_TO_ADDR
17627: LD_EXP 40
17631: PUSH
17632: FOR_TO
17633: IFFALSE 17675
// if not IsInUnit ( al_eng [ i ] ) then
17635: LD_EXP 40
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 310
17650: NOT
17651: IFFALSE 17673
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_EXP 47
17668: PPUSH
17669: CALL_OW 120
17673: GO 17632
17675: POP
17676: POP
// if al_vehs then
17677: LD_EXP 44
17681: IFFALSE 17781
// if BuildingStatus ( al_fac ) = bs_idle then
17683: LD_EXP 49
17687: PPUSH
17688: CALL_OW 461
17692: PUSH
17693: LD_INT 2
17695: EQUAL
17696: IFFALSE 17781
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17698: LD_EXP 49
17702: PPUSH
17703: LD_EXP 44
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_EXP 44
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_EXP 44
17725: PUSH
17726: LD_INT 3
17728: ARRAY
17729: PPUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_INT 4
17737: ARRAY
17738: PPUSH
17739: CALL_OW 125
// for i = 1 to 4 do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_INT 4
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17779
// al_vehs := Delete ( al_vehs , 1 ) ;
17759: LD_ADDR_EXP 44
17763: PUSH
17764: LD_EXP 44
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 3
17776: ST_TO_ADDR
17777: GO 17756
17779: POP
17780: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17781: LD_EXP 38
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_OWVAR 1
17794: PUSH
17795: LD_INT 23100
17797: MOD
17798: PUSH
17799: LD_INT 0
17801: EQUAL
17802: AND
17803: IFFALSE 17917
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17915
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17838: LD_ADDR_EXP 44
17842: PUSH
17843: LD_EXP 44
17847: PUSH
17848: LD_INT 23
17850: ADD
17851: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17852: LD_ADDR_EXP 44
17856: PUSH
17857: LD_EXP 44
17861: PUSH
17862: LD_INT 1
17864: ADD
17865: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17866: LD_ADDR_EXP 44
17870: PUSH
17871: LD_EXP 44
17875: PUSH
17876: LD_INT 3
17878: ADD
17879: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17880: LD_ADDR_EXP 44
17884: PUSH
17885: LD_EXP 44
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 47
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ADD
17912: ST_TO_ADDR
// end ;
17913: GO 17835
17915: POP
17916: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17917: LD_INT 22
17919: PUSH
17920: LD_INT 7
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 51
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17972
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17951: LD_EXP 49
17955: PPUSH
17956: LD_INT 21
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 51
17967: PPUSH
17968: CALL_OW 125
// if al_force and tick mod 25200 = 0 then
17972: LD_EXP 38
17976: PUSH
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 25200
17984: MOD
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18053
// begin for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 38
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18051
// if GetTag ( al_force [ i ] ) <> 11 then
18010: LD_EXP 38
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: NONEQUAL
18029: IFFALSE 18049
// SetTag ( al_force [ i ] , 11 ) ;
18031: LD_EXP 38
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_INT 11
18044: PPUSH
18045: CALL_OW 109
18049: GO 18007
18051: POP
18052: POP
// end ; if al_force then
18053: LD_EXP 38
18057: IFFALSE 18166
// for i = 1 to al_force do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 38
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18164
// begin if GetTag ( al_force [ i ] ) = 11 then
18077: LD_EXP 38
18081: PUSH
18082: LD_VAR 0 1
18086: ARRAY
18087: PPUSH
18088: CALL_OW 110
18092: PUSH
18093: LD_INT 11
18095: EQUAL
18096: IFFALSE 18162
// begin if not HasTask ( al_force [ i ] ) then
18098: LD_EXP 38
18102: PUSH
18103: LD_VAR 0 1
18107: ARRAY
18108: PPUSH
18109: CALL_OW 314
18113: NOT
18114: IFFALSE 18162
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18116: LD_EXP 38
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_EXP 38
18146: PUSH
18147: LD_VAR 0 1
18151: ARRAY
18152: PPUSH
18153: CALL_OW 74
18157: PPUSH
18158: CALL_OW 115
// end ; end ;
18162: GO 18074
18164: POP
18165: POP
// end ; end_of_file
18166: PPOPN 4
18168: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18176: LD_ADDR_EXP 53
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 7
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_OWVAR 67
18199: ARRAY
18200: ST_TO_ADDR
// ar_force := [ ] ;
18201: LD_ADDR_EXP 52
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// RemoveAlliance ;
18208: CALL 15997 0 0
// RemoveEnvironmentArea ( evn ) ;
18212: LD_INT 17
18214: PPUSH
18215: CALL_OW 355
// your_side := 2 ;
18219: LD_ADDR_OWVAR 2
18223: PUSH
18224: LD_INT 2
18226: ST_TO_ADDR
// uc_side := 2 ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_INT 2
18234: ST_TO_ADDR
// uc_nation := nation_arabian ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_INT 2
18242: ST_TO_ADDR
// hc_gallery :=  ;
18243: LD_ADDR_OWVAR 33
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// hc_name :=  ;
18251: LD_ADDR_OWVAR 26
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hc_importance := 0 ;
18259: LD_ADDR_OWVAR 32
18263: PUSH
18264: LD_INT 0
18266: ST_TO_ADDR
// for i = 1 to 20 do
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 20
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18346
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18283: LD_INT 0
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: LD_INT 4
18291: PPUSH
18292: CALL_OW 12
18296: PPUSH
18297: LD_EXP 53
18301: PPUSH
18302: CALL_OW 380
// un := CreateHuman ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: CALL_OW 44
18315: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 233
// ar_force := ar_force ^ un ;
18328: LD_ADDR_EXP 52
18332: PUSH
18333: LD_EXP 52
18337: PUSH
18338: LD_VAR 0 4
18342: ADD
18343: ST_TO_ADDR
// end ;
18344: GO 18280
18346: POP
18347: POP
// hc_importance := 100 ;
18348: LD_ADDR_OWVAR 32
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 11
18361: PPUSH
18362: LD_EXP 53
18366: PPUSH
18367: CALL_OW 380
// ar_commander := CreateHuman ;
18371: LD_ADDR_EXP 51
18375: PUSH
18376: CALL_OW 44
18380: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18381: LD_EXP 51
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 233
// player_commander := ar_commander ;
18393: LD_ADDR_EXP 10
18397: PUSH
18398: LD_EXP 51
18402: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_STRING text
18410: PPUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: PPUSH
18431: LD_INT 14
18433: PUSH
18434: LD_INT 13
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_OWVAR 67
18449: ARRAY
18450: PPUSH
18451: LD_INT -5
18453: PUSH
18454: LD_EXP 51
18458: PUSH
18459: LD_INT -3
18461: PUSH
18462: LD_INT -2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_EXP 52
18475: ADD
18476: PPUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 8
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 42
18517: ST_TO_ADDR
// team := team ^ ar_commander ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_EXP 51
18532: ADD
18533: ST_TO_ADDR
// for i = 1 to team do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_VAR 0 5
18548: PUSH
18549: FOR_TO
18550: IFFALSE 18575
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18552: LD_VAR 0 5
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PPUSH
18563: LD_INT 16
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL_OW 49
18573: GO 18549
18575: POP
18576: POP
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 0 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// vc_chassis := 31 ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 31
18600: ST_TO_ADDR
// vc_control := control_rider ;
18601: LD_ADDR_OWVAR 38
18605: PUSH
18606: LD_INT 4
18608: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18609: CALL_OW 45
18613: PPUSH
18614: LD_INT 96
18616: PPUSH
18617: LD_INT 20
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 48
// end ; end_of_file
18627: LD_VAR 0 1
18631: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18632: LD_INT 0
18634: PPUSH
// ar_miner := 81 ;
18635: LD_ADDR_EXP 61
18639: PUSH
18640: LD_INT 81
18642: ST_TO_ADDR
// ar_crane := 88 ;
18643: LD_ADDR_EXP 60
18647: PUSH
18648: LD_INT 88
18650: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18651: LD_ADDR_EXP 55
18655: PUSH
18656: LD_INT 89
18658: ST_TO_ADDR
// us_hack := 99 ;
18659: LD_ADDR_EXP 56
18663: PUSH
18664: LD_INT 99
18666: ST_TO_ADDR
// us_artillery := 97 ;
18667: LD_ADDR_EXP 57
18671: PUSH
18672: LD_INT 97
18674: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18675: LD_ADDR_EXP 58
18679: PUSH
18680: LD_INT 91
18682: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18683: LD_ADDR_EXP 59
18687: PUSH
18688: LD_INT 92
18690: ST_TO_ADDR
// ru_radar := 98 ;
18691: LD_ADDR_EXP 54
18695: PUSH
18696: LD_INT 98
18698: ST_TO_ADDR
// tech_Artillery := 80 ;
18699: LD_ADDR_EXP 62
18703: PUSH
18704: LD_INT 80
18706: ST_TO_ADDR
// tech_RadMat := 81 ;
18707: LD_ADDR_EXP 63
18711: PUSH
18712: LD_INT 81
18714: ST_TO_ADDR
// tech_BasicTools := 82 ;
18715: LD_ADDR_EXP 64
18719: PUSH
18720: LD_INT 82
18722: ST_TO_ADDR
// tech_Cargo := 83 ;
18723: LD_ADDR_EXP 65
18727: PUSH
18728: LD_INT 83
18730: ST_TO_ADDR
// tech_Track := 84 ;
18731: LD_ADDR_EXP 66
18735: PUSH
18736: LD_INT 84
18738: ST_TO_ADDR
// tech_Crane := 85 ;
18739: LD_ADDR_EXP 67
18743: PUSH
18744: LD_INT 85
18746: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18747: LD_ADDR_EXP 68
18751: PUSH
18752: LD_INT 86
18754: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18755: LD_ADDR_EXP 69
18759: PUSH
18760: LD_INT 87
18762: ST_TO_ADDR
// class_mastodont := 31 ;
18763: LD_ADDR_EXP 70
18767: PUSH
18768: LD_INT 31
18770: ST_TO_ADDR
// class_horse := 21 ;
18771: LD_ADDR_EXP 71
18775: PUSH
18776: LD_INT 21
18778: ST_TO_ADDR
// end ;
18779: LD_VAR 0 1
18783: RET
// every 1 do
18784: GO 18786
18786: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18787: CALL 18632 0 0
18791: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18792: LD_INT 0
18794: PPUSH
// if p2 = 100 then
18795: LD_VAR 0 2
18799: PUSH
18800: LD_INT 100
18802: EQUAL
18803: IFFALSE 19752
// begin if not StreamModeActive then
18805: LD_EXP 72
18809: NOT
18810: IFFALSE 18820
// StreamModeActive := true ;
18812: LD_ADDR_EXP 72
18816: PUSH
18817: LD_INT 1
18819: ST_TO_ADDR
// if p3 = 0 then
18820: LD_VAR 0 3
18824: PUSH
18825: LD_INT 0
18827: EQUAL
18828: IFFALSE 18834
// InitStreamMode ;
18830: CALL 19912 0 0
// if p3 = 1 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 1
18841: EQUAL
18842: IFFALSE 18852
// sRocket := true ;
18844: LD_ADDR_EXP 77
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 2 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 2
18859: EQUAL
18860: IFFALSE 18870
// sSpeed := true ;
18862: LD_ADDR_EXP 76
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// if p3 = 3 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 3
18877: EQUAL
18878: IFFALSE 18888
// sEngine := true ;
18880: LD_ADDR_EXP 78
18884: PUSH
18885: LD_INT 1
18887: ST_TO_ADDR
// if p3 = 4 then
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 4
18895: EQUAL
18896: IFFALSE 18906
// sSpec := true ;
18898: LD_ADDR_EXP 75
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// if p3 = 5 then
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 5
18913: EQUAL
18914: IFFALSE 18924
// sLevel := true ;
18916: LD_ADDR_EXP 79
18920: PUSH
18921: LD_INT 1
18923: ST_TO_ADDR
// if p3 = 6 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 6
18931: EQUAL
18932: IFFALSE 18942
// sArmoury := true ;
18934: LD_ADDR_EXP 80
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// if p3 = 7 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 7
18949: EQUAL
18950: IFFALSE 18960
// sRadar := true ;
18952: LD_ADDR_EXP 81
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 8 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 8
18967: EQUAL
18968: IFFALSE 18978
// sBunker := true ;
18970: LD_ADDR_EXP 82
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 9 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 9
18985: EQUAL
18986: IFFALSE 18996
// sHack := true ;
18988: LD_ADDR_EXP 83
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 10 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 10
19003: EQUAL
19004: IFFALSE 19014
// sFire := true ;
19006: LD_ADDR_EXP 84
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 11 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 11
19021: EQUAL
19022: IFFALSE 19032
// sRefresh := true ;
19024: LD_ADDR_EXP 85
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 12 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 12
19039: EQUAL
19040: IFFALSE 19050
// sExp := true ;
19042: LD_ADDR_EXP 86
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 13 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 13
19057: EQUAL
19058: IFFALSE 19068
// sDepot := true ;
19060: LD_ADDR_EXP 87
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 14 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 14
19075: EQUAL
19076: IFFALSE 19086
// sFlag := true ;
19078: LD_ADDR_EXP 88
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 15 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 15
19093: EQUAL
19094: IFFALSE 19104
// sKamikadze := true ;
19096: LD_ADDR_EXP 96
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 16 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 16
19111: EQUAL
19112: IFFALSE 19122
// sTroll := true ;
19114: LD_ADDR_EXP 97
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 17 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 17
19129: EQUAL
19130: IFFALSE 19140
// sSlow := true ;
19132: LD_ADDR_EXP 98
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 18 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 18
19147: EQUAL
19148: IFFALSE 19158
// sLack := true ;
19150: LD_ADDR_EXP 99
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 19 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 19
19165: EQUAL
19166: IFFALSE 19176
// sTank := true ;
19168: LD_ADDR_EXP 101
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 20 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 20
19183: EQUAL
19184: IFFALSE 19194
// sRemote := true ;
19186: LD_ADDR_EXP 102
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 21 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 21
19201: EQUAL
19202: IFFALSE 19212
// sPowell := true ;
19204: LD_ADDR_EXP 103
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 22 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 22
19219: EQUAL
19220: IFFALSE 19230
// sTeleport := true ;
19222: LD_ADDR_EXP 106
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 23 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 23
19237: EQUAL
19238: IFFALSE 19248
// sOilTower := true ;
19240: LD_ADDR_EXP 108
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 24 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 24
19255: EQUAL
19256: IFFALSE 19266
// sShovel := true ;
19258: LD_ADDR_EXP 109
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 25 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 25
19273: EQUAL
19274: IFFALSE 19284
// sSheik := true ;
19276: LD_ADDR_EXP 110
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 26 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 26
19291: EQUAL
19292: IFFALSE 19302
// sEarthquake := true ;
19294: LD_ADDR_EXP 112
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 27 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 27
19309: EQUAL
19310: IFFALSE 19320
// sAI := true ;
19312: LD_ADDR_EXP 113
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 28 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 28
19327: EQUAL
19328: IFFALSE 19338
// sCargo := true ;
19330: LD_ADDR_EXP 116
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 29 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 29
19345: EQUAL
19346: IFFALSE 19356
// sDLaser := true ;
19348: LD_ADDR_EXP 117
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 30 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 30
19363: EQUAL
19364: IFFALSE 19374
// sExchange := true ;
19366: LD_ADDR_EXP 118
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 31 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 31
19381: EQUAL
19382: IFFALSE 19392
// sFac := true ;
19384: LD_ADDR_EXP 119
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 32 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 32
19399: EQUAL
19400: IFFALSE 19410
// sPower := true ;
19402: LD_ADDR_EXP 120
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 33 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 33
19417: EQUAL
19418: IFFALSE 19428
// sRandom := true ;
19420: LD_ADDR_EXP 121
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 34 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 34
19435: EQUAL
19436: IFFALSE 19446
// sShield := true ;
19438: LD_ADDR_EXP 122
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 35 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 35
19453: EQUAL
19454: IFFALSE 19464
// sTime := true ;
19456: LD_ADDR_EXP 123
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 36 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 36
19471: EQUAL
19472: IFFALSE 19482
// sTools := true ;
19474: LD_ADDR_EXP 124
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 101 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 101
19489: EQUAL
19490: IFFALSE 19500
// sSold := true ;
19492: LD_ADDR_EXP 89
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 102 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 102
19507: EQUAL
19508: IFFALSE 19518
// sDiff := true ;
19510: LD_ADDR_EXP 90
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 103 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 103
19525: EQUAL
19526: IFFALSE 19536
// sFog := true ;
19528: LD_ADDR_EXP 93
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 104 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 104
19543: EQUAL
19544: IFFALSE 19554
// sReset := true ;
19546: LD_ADDR_EXP 94
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 105 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 105
19561: EQUAL
19562: IFFALSE 19572
// sSun := true ;
19564: LD_ADDR_EXP 95
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 106 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 106
19579: EQUAL
19580: IFFALSE 19590
// sTiger := true ;
19582: LD_ADDR_EXP 91
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 107 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 107
19597: EQUAL
19598: IFFALSE 19608
// sBomb := true ;
19600: LD_ADDR_EXP 92
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 108 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 108
19615: EQUAL
19616: IFFALSE 19626
// sWound := true ;
19618: LD_ADDR_EXP 100
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 109 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 109
19633: EQUAL
19634: IFFALSE 19644
// sBetray := true ;
19636: LD_ADDR_EXP 104
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 110 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 110
19651: EQUAL
19652: IFFALSE 19662
// sContamin := true ;
19654: LD_ADDR_EXP 105
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 111 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 111
19669: EQUAL
19670: IFFALSE 19680
// sOil := true ;
19672: LD_ADDR_EXP 107
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 112 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 112
19687: EQUAL
19688: IFFALSE 19698
// sStu := true ;
19690: LD_ADDR_EXP 111
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 113 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 113
19705: EQUAL
19706: IFFALSE 19716
// sBazooka := true ;
19708: LD_ADDR_EXP 114
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 114 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 114
19723: EQUAL
19724: IFFALSE 19734
// sMortar := true ;
19726: LD_ADDR_EXP 115
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 115 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 115
19741: EQUAL
19742: IFFALSE 19752
// sRanger := true ;
19744: LD_ADDR_EXP 125
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// end ; if p2 = 101 then
19752: LD_VAR 0 2
19756: PUSH
19757: LD_INT 101
19759: EQUAL
19760: IFFALSE 19888
// begin case p3 of 1 :
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 1
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19782
19775: POP
// hHackUnlimitedResources ; 2 :
19776: CALL 30925 0 0
19780: GO 19888
19782: LD_INT 2
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19797
19790: POP
// hHackSetLevel10 ; 3 :
19791: CALL 31058 0 0
19795: GO 19888
19797: LD_INT 3
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 19812
19805: POP
// hHackSetLevel10YourUnits ; 4 :
19806: CALL 31143 0 0
19810: GO 19888
19812: LD_INT 4
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19827
19820: POP
// hHackInvincible ; 5 :
19821: CALL 31591 0 0
19825: GO 19888
19827: LD_INT 5
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19842
19835: POP
// hHackInvisible ; 6 :
19836: CALL 31702 0 0
19840: GO 19888
19842: LD_INT 6
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19857
19850: POP
// hHackChangeYourSide ; 7 :
19851: CALL 31759 0 0
19855: GO 19888
19857: LD_INT 7
19859: DOUBLE
19860: EQUAL
19861: IFTRUE 19865
19863: GO 19872
19865: POP
// hHackChangeUnitSide ; 8 :
19866: CALL 31801 0 0
19870: GO 19888
19872: LD_INT 8
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19887
19880: POP
// hHackFog ; end ;
19881: CALL 31902 0 0
19885: GO 19888
19887: POP
// end ; end ;
19888: LD_VAR 0 7
19892: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19893: GO 19895
19895: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19896: LD_STRING initStreamRollete();
19898: PPUSH
19899: CALL_OW 559
// InitStreamMode ;
19903: CALL 19912 0 0
// DefineStreamItems ( ) ;
19907: CALL 20352 0 0
// end ;
19911: END
// function InitStreamMode ; begin
19912: LD_INT 0
19914: PPUSH
// streamModeActive := false ;
19915: LD_ADDR_EXP 72
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// normalCounter := 36 ;
19923: LD_ADDR_EXP 73
19927: PUSH
19928: LD_INT 36
19930: ST_TO_ADDR
// hardcoreCounter := 16 ;
19931: LD_ADDR_EXP 74
19935: PUSH
19936: LD_INT 16
19938: ST_TO_ADDR
// sRocket := false ;
19939: LD_ADDR_EXP 77
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sSpeed := false ;
19947: LD_ADDR_EXP 76
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sEngine := false ;
19955: LD_ADDR_EXP 78
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sSpec := false ;
19963: LD_ADDR_EXP 75
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sLevel := false ;
19971: LD_ADDR_EXP 79
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sArmoury := false ;
19979: LD_ADDR_EXP 80
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sRadar := false ;
19987: LD_ADDR_EXP 81
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sBunker := false ;
19995: LD_ADDR_EXP 82
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sHack := false ;
20003: LD_ADDR_EXP 83
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sFire := false ;
20011: LD_ADDR_EXP 84
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sRefresh := false ;
20019: LD_ADDR_EXP 85
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sExp := false ;
20027: LD_ADDR_EXP 86
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sDepot := false ;
20035: LD_ADDR_EXP 87
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sFlag := false ;
20043: LD_ADDR_EXP 88
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sKamikadze := false ;
20051: LD_ADDR_EXP 96
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sTroll := false ;
20059: LD_ADDR_EXP 97
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sSlow := false ;
20067: LD_ADDR_EXP 98
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sLack := false ;
20075: LD_ADDR_EXP 99
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sTank := false ;
20083: LD_ADDR_EXP 101
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sRemote := false ;
20091: LD_ADDR_EXP 102
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sPowell := false ;
20099: LD_ADDR_EXP 103
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sTeleport := false ;
20107: LD_ADDR_EXP 106
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sOilTower := false ;
20115: LD_ADDR_EXP 108
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sShovel := false ;
20123: LD_ADDR_EXP 109
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sSheik := false ;
20131: LD_ADDR_EXP 110
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sEarthquake := false ;
20139: LD_ADDR_EXP 112
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sAI := false ;
20147: LD_ADDR_EXP 113
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sCargo := false ;
20155: LD_ADDR_EXP 116
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sDLaser := false ;
20163: LD_ADDR_EXP 117
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sExchange := false ;
20171: LD_ADDR_EXP 118
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sFac := false ;
20179: LD_ADDR_EXP 119
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sPower := false ;
20187: LD_ADDR_EXP 120
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sRandom := false ;
20195: LD_ADDR_EXP 121
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sShield := false ;
20203: LD_ADDR_EXP 122
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sTime := false ;
20211: LD_ADDR_EXP 123
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sTools := false ;
20219: LD_ADDR_EXP 124
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sSold := false ;
20227: LD_ADDR_EXP 89
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sDiff := false ;
20235: LD_ADDR_EXP 90
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sFog := false ;
20243: LD_ADDR_EXP 93
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sReset := false ;
20251: LD_ADDR_EXP 94
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sSun := false ;
20259: LD_ADDR_EXP 95
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sTiger := false ;
20267: LD_ADDR_EXP 91
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sBomb := false ;
20275: LD_ADDR_EXP 92
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sWound := false ;
20283: LD_ADDR_EXP 100
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sBetray := false ;
20291: LD_ADDR_EXP 104
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sContamin := false ;
20299: LD_ADDR_EXP 105
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sOil := false ;
20307: LD_ADDR_EXP 107
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sStu := false ;
20315: LD_ADDR_EXP 111
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sBazooka := false ;
20323: LD_ADDR_EXP 114
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sMortar := false ;
20331: LD_ADDR_EXP 115
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sRanger := false ;
20339: LD_ADDR_EXP 125
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// end ;
20347: LD_VAR 0 1
20351: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20352: LD_INT 0
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
// result := [ ] ;
20359: LD_ADDR_VAR 0 1
20363: PUSH
20364: EMPTY
20365: ST_TO_ADDR
// if campaign_id = 1 then
20366: LD_OWVAR 69
20370: PUSH
20371: LD_INT 1
20373: EQUAL
20374: IFFALSE 23312
// begin case mission_number of 1 :
20376: LD_OWVAR 70
20380: PUSH
20381: LD_INT 1
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20453
20389: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20390: LD_ADDR_VAR 0 1
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 4
20400: PUSH
20401: LD_INT 11
20403: PUSH
20404: LD_INT 12
20406: PUSH
20407: LD_INT 15
20409: PUSH
20410: LD_INT 16
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_INT 23
20418: PUSH
20419: LD_INT 26
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 101
20435: PUSH
20436: LD_INT 102
20438: PUSH
20439: LD_INT 106
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: ST_TO_ADDR
20451: GO 23310
20453: LD_INT 2
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20533
20461: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20462: LD_ADDR_VAR 0 1
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 4
20472: PUSH
20473: LD_INT 11
20475: PUSH
20476: LD_INT 12
20478: PUSH
20479: LD_INT 15
20481: PUSH
20482: LD_INT 16
20484: PUSH
20485: LD_INT 22
20487: PUSH
20488: LD_INT 23
20490: PUSH
20491: LD_INT 26
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 101
20507: PUSH
20508: LD_INT 102
20510: PUSH
20511: LD_INT 105
20513: PUSH
20514: LD_INT 106
20516: PUSH
20517: LD_INT 108
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: ST_TO_ADDR
20531: GO 23310
20533: LD_INT 3
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20617
20541: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20542: LD_ADDR_VAR 0 1
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 4
20552: PUSH
20553: LD_INT 5
20555: PUSH
20556: LD_INT 11
20558: PUSH
20559: LD_INT 12
20561: PUSH
20562: LD_INT 15
20564: PUSH
20565: LD_INT 16
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 26
20573: PUSH
20574: LD_INT 36
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 101
20591: PUSH
20592: LD_INT 102
20594: PUSH
20595: LD_INT 105
20597: PUSH
20598: LD_INT 106
20600: PUSH
20601: LD_INT 108
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: ST_TO_ADDR
20615: GO 23310
20617: LD_INT 4
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20709
20625: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20626: LD_ADDR_VAR 0 1
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 4
20636: PUSH
20637: LD_INT 5
20639: PUSH
20640: LD_INT 8
20642: PUSH
20643: LD_INT 11
20645: PUSH
20646: LD_INT 12
20648: PUSH
20649: LD_INT 15
20651: PUSH
20652: LD_INT 16
20654: PUSH
20655: LD_INT 22
20657: PUSH
20658: LD_INT 23
20660: PUSH
20661: LD_INT 26
20663: PUSH
20664: LD_INT 36
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 101
20683: PUSH
20684: LD_INT 102
20686: PUSH
20687: LD_INT 105
20689: PUSH
20690: LD_INT 106
20692: PUSH
20693: LD_INT 108
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: ST_TO_ADDR
20707: GO 23310
20709: LD_INT 5
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20817
20717: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20718: LD_ADDR_VAR 0 1
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: LD_INT 4
20728: PUSH
20729: LD_INT 5
20731: PUSH
20732: LD_INT 6
20734: PUSH
20735: LD_INT 8
20737: PUSH
20738: LD_INT 11
20740: PUSH
20741: LD_INT 12
20743: PUSH
20744: LD_INT 15
20746: PUSH
20747: LD_INT 16
20749: PUSH
20750: LD_INT 22
20752: PUSH
20753: LD_INT 23
20755: PUSH
20756: LD_INT 25
20758: PUSH
20759: LD_INT 26
20761: PUSH
20762: LD_INT 36
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 101
20783: PUSH
20784: LD_INT 102
20786: PUSH
20787: LD_INT 105
20789: PUSH
20790: LD_INT 106
20792: PUSH
20793: LD_INT 108
20795: PUSH
20796: LD_INT 109
20798: PUSH
20799: LD_INT 112
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 23310
20817: LD_INT 6
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20945
20825: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20826: LD_ADDR_VAR 0 1
20830: PUSH
20831: LD_INT 2
20833: PUSH
20834: LD_INT 4
20836: PUSH
20837: LD_INT 5
20839: PUSH
20840: LD_INT 6
20842: PUSH
20843: LD_INT 8
20845: PUSH
20846: LD_INT 11
20848: PUSH
20849: LD_INT 12
20851: PUSH
20852: LD_INT 15
20854: PUSH
20855: LD_INT 16
20857: PUSH
20858: LD_INT 20
20860: PUSH
20861: LD_INT 21
20863: PUSH
20864: LD_INT 22
20866: PUSH
20867: LD_INT 23
20869: PUSH
20870: LD_INT 25
20872: PUSH
20873: LD_INT 26
20875: PUSH
20876: LD_INT 30
20878: PUSH
20879: LD_INT 31
20881: PUSH
20882: LD_INT 32
20884: PUSH
20885: LD_INT 36
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 101
20911: PUSH
20912: LD_INT 102
20914: PUSH
20915: LD_INT 105
20917: PUSH
20918: LD_INT 106
20920: PUSH
20921: LD_INT 108
20923: PUSH
20924: LD_INT 109
20926: PUSH
20927: LD_INT 112
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: ST_TO_ADDR
20943: GO 23310
20945: LD_INT 7
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 21053
20953: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 4
20964: PUSH
20965: LD_INT 5
20967: PUSH
20968: LD_INT 7
20970: PUSH
20971: LD_INT 11
20973: PUSH
20974: LD_INT 12
20976: PUSH
20977: LD_INT 15
20979: PUSH
20980: LD_INT 16
20982: PUSH
20983: LD_INT 20
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 22
20991: PUSH
20992: LD_INT 23
20994: PUSH
20995: LD_INT 25
20997: PUSH
20998: LD_INT 26
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 101
21019: PUSH
21020: LD_INT 102
21022: PUSH
21023: LD_INT 103
21025: PUSH
21026: LD_INT 105
21028: PUSH
21029: LD_INT 106
21031: PUSH
21032: LD_INT 108
21034: PUSH
21035: LD_INT 112
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: ST_TO_ADDR
21051: GO 23310
21053: LD_INT 8
21055: DOUBLE
21056: EQUAL
21057: IFTRUE 21061
21059: GO 21189
21061: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21062: LD_ADDR_VAR 0 1
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: LD_INT 4
21072: PUSH
21073: LD_INT 5
21075: PUSH
21076: LD_INT 6
21078: PUSH
21079: LD_INT 7
21081: PUSH
21082: LD_INT 8
21084: PUSH
21085: LD_INT 11
21087: PUSH
21088: LD_INT 12
21090: PUSH
21091: LD_INT 15
21093: PUSH
21094: LD_INT 16
21096: PUSH
21097: LD_INT 20
21099: PUSH
21100: LD_INT 21
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_INT 23
21108: PUSH
21109: LD_INT 25
21111: PUSH
21112: LD_INT 26
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 31
21120: PUSH
21121: LD_INT 32
21123: PUSH
21124: LD_INT 36
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 101
21151: PUSH
21152: LD_INT 102
21154: PUSH
21155: LD_INT 103
21157: PUSH
21158: LD_INT 105
21160: PUSH
21161: LD_INT 106
21163: PUSH
21164: LD_INT 108
21166: PUSH
21167: LD_INT 109
21169: PUSH
21170: LD_INT 112
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: ST_TO_ADDR
21187: GO 23310
21189: LD_INT 9
21191: DOUBLE
21192: EQUAL
21193: IFTRUE 21197
21195: GO 21333
21197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21198: LD_ADDR_VAR 0 1
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 4
21208: PUSH
21209: LD_INT 5
21211: PUSH
21212: LD_INT 6
21214: PUSH
21215: LD_INT 7
21217: PUSH
21218: LD_INT 8
21220: PUSH
21221: LD_INT 11
21223: PUSH
21224: LD_INT 12
21226: PUSH
21227: LD_INT 15
21229: PUSH
21230: LD_INT 16
21232: PUSH
21233: LD_INT 20
21235: PUSH
21236: LD_INT 21
21238: PUSH
21239: LD_INT 22
21241: PUSH
21242: LD_INT 23
21244: PUSH
21245: LD_INT 25
21247: PUSH
21248: LD_INT 26
21250: PUSH
21251: LD_INT 28
21253: PUSH
21254: LD_INT 30
21256: PUSH
21257: LD_INT 31
21259: PUSH
21260: LD_INT 32
21262: PUSH
21263: LD_INT 36
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 101
21291: PUSH
21292: LD_INT 102
21294: PUSH
21295: LD_INT 103
21297: PUSH
21298: LD_INT 105
21300: PUSH
21301: LD_INT 106
21303: PUSH
21304: LD_INT 108
21306: PUSH
21307: LD_INT 109
21309: PUSH
21310: LD_INT 112
21312: PUSH
21313: LD_INT 114
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: ST_TO_ADDR
21331: GO 23310
21333: LD_INT 10
21335: DOUBLE
21336: EQUAL
21337: IFTRUE 21341
21339: GO 21525
21341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21342: LD_ADDR_VAR 0 1
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 4
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: LD_INT 6
21358: PUSH
21359: LD_INT 7
21361: PUSH
21362: LD_INT 8
21364: PUSH
21365: LD_INT 9
21367: PUSH
21368: LD_INT 10
21370: PUSH
21371: LD_INT 11
21373: PUSH
21374: LD_INT 12
21376: PUSH
21377: LD_INT 13
21379: PUSH
21380: LD_INT 14
21382: PUSH
21383: LD_INT 15
21385: PUSH
21386: LD_INT 16
21388: PUSH
21389: LD_INT 17
21391: PUSH
21392: LD_INT 18
21394: PUSH
21395: LD_INT 19
21397: PUSH
21398: LD_INT 20
21400: PUSH
21401: LD_INT 21
21403: PUSH
21404: LD_INT 22
21406: PUSH
21407: LD_INT 23
21409: PUSH
21410: LD_INT 24
21412: PUSH
21413: LD_INT 25
21415: PUSH
21416: LD_INT 26
21418: PUSH
21419: LD_INT 28
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 31
21427: PUSH
21428: LD_INT 32
21430: PUSH
21431: LD_INT 36
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 104
21476: PUSH
21477: LD_INT 105
21479: PUSH
21480: LD_INT 106
21482: PUSH
21483: LD_INT 107
21485: PUSH
21486: LD_INT 108
21488: PUSH
21489: LD_INT 109
21491: PUSH
21492: LD_INT 110
21494: PUSH
21495: LD_INT 111
21497: PUSH
21498: LD_INT 112
21500: PUSH
21501: LD_INT 114
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: ST_TO_ADDR
21523: GO 23310
21525: LD_INT 11
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21725
21533: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21534: LD_ADDR_VAR 0 1
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: LD_INT 3
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 7
21556: PUSH
21557: LD_INT 8
21559: PUSH
21560: LD_INT 9
21562: PUSH
21563: LD_INT 10
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 12
21571: PUSH
21572: LD_INT 13
21574: PUSH
21575: LD_INT 14
21577: PUSH
21578: LD_INT 15
21580: PUSH
21581: LD_INT 16
21583: PUSH
21584: LD_INT 17
21586: PUSH
21587: LD_INT 18
21589: PUSH
21590: LD_INT 19
21592: PUSH
21593: LD_INT 20
21595: PUSH
21596: LD_INT 21
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 24
21607: PUSH
21608: LD_INT 25
21610: PUSH
21611: LD_INT 26
21613: PUSH
21614: LD_INT 28
21616: PUSH
21617: LD_INT 30
21619: PUSH
21620: LD_INT 31
21622: PUSH
21623: LD_INT 32
21625: PUSH
21626: LD_INT 34
21628: PUSH
21629: LD_INT 36
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 101
21667: PUSH
21668: LD_INT 102
21670: PUSH
21671: LD_INT 103
21673: PUSH
21674: LD_INT 104
21676: PUSH
21677: LD_INT 105
21679: PUSH
21680: LD_INT 106
21682: PUSH
21683: LD_INT 107
21685: PUSH
21686: LD_INT 108
21688: PUSH
21689: LD_INT 109
21691: PUSH
21692: LD_INT 110
21694: PUSH
21695: LD_INT 111
21697: PUSH
21698: LD_INT 112
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: ST_TO_ADDR
21723: GO 23310
21725: LD_INT 12
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21941
21733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21734: LD_ADDR_VAR 0 1
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: LD_INT 4
21750: PUSH
21751: LD_INT 5
21753: PUSH
21754: LD_INT 6
21756: PUSH
21757: LD_INT 7
21759: PUSH
21760: LD_INT 8
21762: PUSH
21763: LD_INT 9
21765: PUSH
21766: LD_INT 10
21768: PUSH
21769: LD_INT 11
21771: PUSH
21772: LD_INT 12
21774: PUSH
21775: LD_INT 13
21777: PUSH
21778: LD_INT 14
21780: PUSH
21781: LD_INT 15
21783: PUSH
21784: LD_INT 16
21786: PUSH
21787: LD_INT 17
21789: PUSH
21790: LD_INT 18
21792: PUSH
21793: LD_INT 19
21795: PUSH
21796: LD_INT 20
21798: PUSH
21799: LD_INT 21
21801: PUSH
21802: LD_INT 22
21804: PUSH
21805: LD_INT 23
21807: PUSH
21808: LD_INT 24
21810: PUSH
21811: LD_INT 25
21813: PUSH
21814: LD_INT 26
21816: PUSH
21817: LD_INT 27
21819: PUSH
21820: LD_INT 28
21822: PUSH
21823: LD_INT 30
21825: PUSH
21826: LD_INT 31
21828: PUSH
21829: LD_INT 32
21831: PUSH
21832: LD_INT 33
21834: PUSH
21835: LD_INT 34
21837: PUSH
21838: LD_INT 36
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 101
21879: PUSH
21880: LD_INT 102
21882: PUSH
21883: LD_INT 103
21885: PUSH
21886: LD_INT 104
21888: PUSH
21889: LD_INT 105
21891: PUSH
21892: LD_INT 106
21894: PUSH
21895: LD_INT 107
21897: PUSH
21898: LD_INT 108
21900: PUSH
21901: LD_INT 109
21903: PUSH
21904: LD_INT 110
21906: PUSH
21907: LD_INT 111
21909: PUSH
21910: LD_INT 112
21912: PUSH
21913: LD_INT 113
21915: PUSH
21916: LD_INT 114
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: ST_TO_ADDR
21939: GO 23310
21941: LD_INT 13
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21949
21947: GO 22145
21949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21950: LD_ADDR_VAR 0 1
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 8
21972: PUSH
21973: LD_INT 9
21975: PUSH
21976: LD_INT 10
21978: PUSH
21979: LD_INT 11
21981: PUSH
21982: LD_INT 12
21984: PUSH
21985: LD_INT 14
21987: PUSH
21988: LD_INT 15
21990: PUSH
21991: LD_INT 16
21993: PUSH
21994: LD_INT 17
21996: PUSH
21997: LD_INT 18
21999: PUSH
22000: LD_INT 19
22002: PUSH
22003: LD_INT 20
22005: PUSH
22006: LD_INT 21
22008: PUSH
22009: LD_INT 22
22011: PUSH
22012: LD_INT 23
22014: PUSH
22015: LD_INT 24
22017: PUSH
22018: LD_INT 25
22020: PUSH
22021: LD_INT 26
22023: PUSH
22024: LD_INT 27
22026: PUSH
22027: LD_INT 28
22029: PUSH
22030: LD_INT 30
22032: PUSH
22033: LD_INT 31
22035: PUSH
22036: LD_INT 32
22038: PUSH
22039: LD_INT 33
22041: PUSH
22042: LD_INT 34
22044: PUSH
22045: LD_INT 36
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 101
22083: PUSH
22084: LD_INT 102
22086: PUSH
22087: LD_INT 103
22089: PUSH
22090: LD_INT 104
22092: PUSH
22093: LD_INT 105
22095: PUSH
22096: LD_INT 106
22098: PUSH
22099: LD_INT 107
22101: PUSH
22102: LD_INT 108
22104: PUSH
22105: LD_INT 109
22107: PUSH
22108: LD_INT 110
22110: PUSH
22111: LD_INT 111
22113: PUSH
22114: LD_INT 112
22116: PUSH
22117: LD_INT 113
22119: PUSH
22120: LD_INT 114
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: ST_TO_ADDR
22143: GO 23310
22145: LD_INT 14
22147: DOUBLE
22148: EQUAL
22149: IFTRUE 22153
22151: GO 22365
22153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22154: LD_ADDR_VAR 0 1
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 3
22167: PUSH
22168: LD_INT 4
22170: PUSH
22171: LD_INT 5
22173: PUSH
22174: LD_INT 6
22176: PUSH
22177: LD_INT 7
22179: PUSH
22180: LD_INT 8
22182: PUSH
22183: LD_INT 9
22185: PUSH
22186: LD_INT 10
22188: PUSH
22189: LD_INT 11
22191: PUSH
22192: LD_INT 12
22194: PUSH
22195: LD_INT 13
22197: PUSH
22198: LD_INT 14
22200: PUSH
22201: LD_INT 15
22203: PUSH
22204: LD_INT 16
22206: PUSH
22207: LD_INT 17
22209: PUSH
22210: LD_INT 18
22212: PUSH
22213: LD_INT 19
22215: PUSH
22216: LD_INT 20
22218: PUSH
22219: LD_INT 21
22221: PUSH
22222: LD_INT 22
22224: PUSH
22225: LD_INT 23
22227: PUSH
22228: LD_INT 24
22230: PUSH
22231: LD_INT 25
22233: PUSH
22234: LD_INT 26
22236: PUSH
22237: LD_INT 27
22239: PUSH
22240: LD_INT 28
22242: PUSH
22243: LD_INT 29
22245: PUSH
22246: LD_INT 30
22248: PUSH
22249: LD_INT 31
22251: PUSH
22252: LD_INT 32
22254: PUSH
22255: LD_INT 33
22257: PUSH
22258: LD_INT 34
22260: PUSH
22261: LD_INT 36
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 101
22303: PUSH
22304: LD_INT 102
22306: PUSH
22307: LD_INT 103
22309: PUSH
22310: LD_INT 104
22312: PUSH
22313: LD_INT 105
22315: PUSH
22316: LD_INT 106
22318: PUSH
22319: LD_INT 107
22321: PUSH
22322: LD_INT 108
22324: PUSH
22325: LD_INT 109
22327: PUSH
22328: LD_INT 110
22330: PUSH
22331: LD_INT 111
22333: PUSH
22334: LD_INT 112
22336: PUSH
22337: LD_INT 113
22339: PUSH
22340: LD_INT 114
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: ST_TO_ADDR
22363: GO 23310
22365: LD_INT 15
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22585
22373: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 3
22387: PUSH
22388: LD_INT 4
22390: PUSH
22391: LD_INT 5
22393: PUSH
22394: LD_INT 6
22396: PUSH
22397: LD_INT 7
22399: PUSH
22400: LD_INT 8
22402: PUSH
22403: LD_INT 9
22405: PUSH
22406: LD_INT 10
22408: PUSH
22409: LD_INT 11
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: LD_INT 13
22417: PUSH
22418: LD_INT 14
22420: PUSH
22421: LD_INT 15
22423: PUSH
22424: LD_INT 16
22426: PUSH
22427: LD_INT 17
22429: PUSH
22430: LD_INT 18
22432: PUSH
22433: LD_INT 19
22435: PUSH
22436: LD_INT 20
22438: PUSH
22439: LD_INT 21
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 23
22447: PUSH
22448: LD_INT 24
22450: PUSH
22451: LD_INT 25
22453: PUSH
22454: LD_INT 26
22456: PUSH
22457: LD_INT 27
22459: PUSH
22460: LD_INT 28
22462: PUSH
22463: LD_INT 29
22465: PUSH
22466: LD_INT 30
22468: PUSH
22469: LD_INT 31
22471: PUSH
22472: LD_INT 32
22474: PUSH
22475: LD_INT 33
22477: PUSH
22478: LD_INT 34
22480: PUSH
22481: LD_INT 36
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 101
22523: PUSH
22524: LD_INT 102
22526: PUSH
22527: LD_INT 103
22529: PUSH
22530: LD_INT 104
22532: PUSH
22533: LD_INT 105
22535: PUSH
22536: LD_INT 106
22538: PUSH
22539: LD_INT 107
22541: PUSH
22542: LD_INT 108
22544: PUSH
22545: LD_INT 109
22547: PUSH
22548: LD_INT 110
22550: PUSH
22551: LD_INT 111
22553: PUSH
22554: LD_INT 112
22556: PUSH
22557: LD_INT 113
22559: PUSH
22560: LD_INT 114
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: ST_TO_ADDR
22583: GO 23310
22585: LD_INT 16
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22717
22593: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22594: LD_ADDR_VAR 0 1
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 4
22604: PUSH
22605: LD_INT 5
22607: PUSH
22608: LD_INT 7
22610: PUSH
22611: LD_INT 11
22613: PUSH
22614: LD_INT 12
22616: PUSH
22617: LD_INT 15
22619: PUSH
22620: LD_INT 16
22622: PUSH
22623: LD_INT 20
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 22
22631: PUSH
22632: LD_INT 23
22634: PUSH
22635: LD_INT 25
22637: PUSH
22638: LD_INT 26
22640: PUSH
22641: LD_INT 30
22643: PUSH
22644: LD_INT 31
22646: PUSH
22647: LD_INT 32
22649: PUSH
22650: LD_INT 33
22652: PUSH
22653: LD_INT 34
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 101
22679: PUSH
22680: LD_INT 102
22682: PUSH
22683: LD_INT 103
22685: PUSH
22686: LD_INT 106
22688: PUSH
22689: LD_INT 108
22691: PUSH
22692: LD_INT 112
22694: PUSH
22695: LD_INT 113
22697: PUSH
22698: LD_INT 114
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: ST_TO_ADDR
22715: GO 23310
22717: LD_INT 17
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22937
22725: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22726: LD_ADDR_VAR 0 1
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: LD_INT 4
22742: PUSH
22743: LD_INT 5
22745: PUSH
22746: LD_INT 6
22748: PUSH
22749: LD_INT 7
22751: PUSH
22752: LD_INT 8
22754: PUSH
22755: LD_INT 9
22757: PUSH
22758: LD_INT 10
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 13
22769: PUSH
22770: LD_INT 14
22772: PUSH
22773: LD_INT 15
22775: PUSH
22776: LD_INT 16
22778: PUSH
22779: LD_INT 17
22781: PUSH
22782: LD_INT 18
22784: PUSH
22785: LD_INT 19
22787: PUSH
22788: LD_INT 20
22790: PUSH
22791: LD_INT 21
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 23
22799: PUSH
22800: LD_INT 24
22802: PUSH
22803: LD_INT 25
22805: PUSH
22806: LD_INT 26
22808: PUSH
22809: LD_INT 27
22811: PUSH
22812: LD_INT 28
22814: PUSH
22815: LD_INT 29
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 33
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 36
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 101
22875: PUSH
22876: LD_INT 102
22878: PUSH
22879: LD_INT 103
22881: PUSH
22882: LD_INT 104
22884: PUSH
22885: LD_INT 105
22887: PUSH
22888: LD_INT 106
22890: PUSH
22891: LD_INT 107
22893: PUSH
22894: LD_INT 108
22896: PUSH
22897: LD_INT 109
22899: PUSH
22900: LD_INT 110
22902: PUSH
22903: LD_INT 111
22905: PUSH
22906: LD_INT 112
22908: PUSH
22909: LD_INT 113
22911: PUSH
22912: LD_INT 114
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: ST_TO_ADDR
22935: GO 23310
22937: LD_INT 18
22939: DOUBLE
22940: EQUAL
22941: IFTRUE 22945
22943: GO 23081
22945: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22946: LD_ADDR_VAR 0 1
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 4
22956: PUSH
22957: LD_INT 5
22959: PUSH
22960: LD_INT 7
22962: PUSH
22963: LD_INT 11
22965: PUSH
22966: LD_INT 12
22968: PUSH
22969: LD_INT 15
22971: PUSH
22972: LD_INT 16
22974: PUSH
22975: LD_INT 20
22977: PUSH
22978: LD_INT 21
22980: PUSH
22981: LD_INT 22
22983: PUSH
22984: LD_INT 23
22986: PUSH
22987: LD_INT 25
22989: PUSH
22990: LD_INT 26
22992: PUSH
22993: LD_INT 30
22995: PUSH
22996: LD_INT 31
22998: PUSH
22999: LD_INT 32
23001: PUSH
23002: LD_INT 33
23004: PUSH
23005: LD_INT 34
23007: PUSH
23008: LD_INT 35
23010: PUSH
23011: LD_INT 36
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 101
23039: PUSH
23040: LD_INT 102
23042: PUSH
23043: LD_INT 103
23045: PUSH
23046: LD_INT 106
23048: PUSH
23049: LD_INT 108
23051: PUSH
23052: LD_INT 112
23054: PUSH
23055: LD_INT 113
23057: PUSH
23058: LD_INT 114
23060: PUSH
23061: LD_INT 115
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: ST_TO_ADDR
23079: GO 23310
23081: LD_INT 19
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23309
23089: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23090: LD_ADDR_VAR 0 1
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 3
23103: PUSH
23104: LD_INT 4
23106: PUSH
23107: LD_INT 5
23109: PUSH
23110: LD_INT 6
23112: PUSH
23113: LD_INT 7
23115: PUSH
23116: LD_INT 8
23118: PUSH
23119: LD_INT 9
23121: PUSH
23122: LD_INT 10
23124: PUSH
23125: LD_INT 11
23127: PUSH
23128: LD_INT 12
23130: PUSH
23131: LD_INT 13
23133: PUSH
23134: LD_INT 14
23136: PUSH
23137: LD_INT 15
23139: PUSH
23140: LD_INT 16
23142: PUSH
23143: LD_INT 17
23145: PUSH
23146: LD_INT 18
23148: PUSH
23149: LD_INT 19
23151: PUSH
23152: LD_INT 20
23154: PUSH
23155: LD_INT 21
23157: PUSH
23158: LD_INT 22
23160: PUSH
23161: LD_INT 23
23163: PUSH
23164: LD_INT 24
23166: PUSH
23167: LD_INT 25
23169: PUSH
23170: LD_INT 26
23172: PUSH
23173: LD_INT 27
23175: PUSH
23176: LD_INT 28
23178: PUSH
23179: LD_INT 29
23181: PUSH
23182: LD_INT 30
23184: PUSH
23185: LD_INT 31
23187: PUSH
23188: LD_INT 32
23190: PUSH
23191: LD_INT 33
23193: PUSH
23194: LD_INT 34
23196: PUSH
23197: LD_INT 35
23199: PUSH
23200: LD_INT 36
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 101
23243: PUSH
23244: LD_INT 102
23246: PUSH
23247: LD_INT 103
23249: PUSH
23250: LD_INT 104
23252: PUSH
23253: LD_INT 105
23255: PUSH
23256: LD_INT 106
23258: PUSH
23259: LD_INT 107
23261: PUSH
23262: LD_INT 108
23264: PUSH
23265: LD_INT 109
23267: PUSH
23268: LD_INT 110
23270: PUSH
23271: LD_INT 111
23273: PUSH
23274: LD_INT 112
23276: PUSH
23277: LD_INT 113
23279: PUSH
23280: LD_INT 114
23282: PUSH
23283: LD_INT 115
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: ST_TO_ADDR
23307: GO 23310
23309: POP
// end else
23310: GO 23529
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23312: LD_ADDR_VAR 0 1
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 3
23325: PUSH
23326: LD_INT 4
23328: PUSH
23329: LD_INT 5
23331: PUSH
23332: LD_INT 6
23334: PUSH
23335: LD_INT 7
23337: PUSH
23338: LD_INT 8
23340: PUSH
23341: LD_INT 9
23343: PUSH
23344: LD_INT 10
23346: PUSH
23347: LD_INT 11
23349: PUSH
23350: LD_INT 12
23352: PUSH
23353: LD_INT 13
23355: PUSH
23356: LD_INT 14
23358: PUSH
23359: LD_INT 15
23361: PUSH
23362: LD_INT 16
23364: PUSH
23365: LD_INT 17
23367: PUSH
23368: LD_INT 18
23370: PUSH
23371: LD_INT 19
23373: PUSH
23374: LD_INT 20
23376: PUSH
23377: LD_INT 21
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_INT 23
23385: PUSH
23386: LD_INT 24
23388: PUSH
23389: LD_INT 25
23391: PUSH
23392: LD_INT 26
23394: PUSH
23395: LD_INT 27
23397: PUSH
23398: LD_INT 28
23400: PUSH
23401: LD_INT 29
23403: PUSH
23404: LD_INT 30
23406: PUSH
23407: LD_INT 31
23409: PUSH
23410: LD_INT 32
23412: PUSH
23413: LD_INT 33
23415: PUSH
23416: LD_INT 34
23418: PUSH
23419: LD_INT 35
23421: PUSH
23422: LD_INT 36
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 101
23465: PUSH
23466: LD_INT 102
23468: PUSH
23469: LD_INT 103
23471: PUSH
23472: LD_INT 104
23474: PUSH
23475: LD_INT 105
23477: PUSH
23478: LD_INT 106
23480: PUSH
23481: LD_INT 107
23483: PUSH
23484: LD_INT 108
23486: PUSH
23487: LD_INT 109
23489: PUSH
23490: LD_INT 110
23492: PUSH
23493: LD_INT 111
23495: PUSH
23496: LD_INT 112
23498: PUSH
23499: LD_INT 113
23501: PUSH
23502: LD_INT 114
23504: PUSH
23505: LD_INT 115
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// if result then
23529: LD_VAR 0 1
23533: IFFALSE 23822
// begin normal :=  ;
23535: LD_ADDR_VAR 0 3
23539: PUSH
23540: LD_STRING 
23542: ST_TO_ADDR
// hardcore :=  ;
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: LD_STRING 
23550: ST_TO_ADDR
// for i = 1 to normalCounter do
23551: LD_ADDR_VAR 0 5
23555: PUSH
23556: DOUBLE
23557: LD_INT 1
23559: DEC
23560: ST_TO_ADDR
23561: LD_EXP 73
23565: PUSH
23566: FOR_TO
23567: IFFALSE 23668
// begin tmp := 0 ;
23569: LD_ADDR_VAR 0 2
23573: PUSH
23574: LD_STRING 0
23576: ST_TO_ADDR
// if result [ 1 ] then
23577: LD_VAR 0 1
23581: PUSH
23582: LD_INT 1
23584: ARRAY
23585: IFFALSE 23650
// if result [ 1 ] [ 1 ] = i then
23587: LD_VAR 0 1
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PUSH
23600: LD_VAR 0 5
23604: EQUAL
23605: IFFALSE 23650
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23607: LD_ADDR_VAR 0 1
23611: PUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 1
23619: PPUSH
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 1
23627: ARRAY
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 3
23636: PPUSH
23637: CALL_OW 1
23641: ST_TO_ADDR
// tmp := 1 ;
23642: LD_ADDR_VAR 0 2
23646: PUSH
23647: LD_STRING 1
23649: ST_TO_ADDR
// end ; normal := normal & tmp ;
23650: LD_ADDR_VAR 0 3
23654: PUSH
23655: LD_VAR 0 3
23659: PUSH
23660: LD_VAR 0 2
23664: STR
23665: ST_TO_ADDR
// end ;
23666: GO 23566
23668: POP
23669: POP
// for i = 1 to hardcoreCounter do
23670: LD_ADDR_VAR 0 5
23674: PUSH
23675: DOUBLE
23676: LD_INT 1
23678: DEC
23679: ST_TO_ADDR
23680: LD_EXP 74
23684: PUSH
23685: FOR_TO
23686: IFFALSE 23791
// begin tmp := 0 ;
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_STRING 0
23695: ST_TO_ADDR
// if result [ 2 ] then
23696: LD_VAR 0 1
23700: PUSH
23701: LD_INT 2
23703: ARRAY
23704: IFFALSE 23773
// if result [ 2 ] [ 1 ] = 100 + i then
23706: LD_VAR 0 1
23710: PUSH
23711: LD_INT 2
23713: ARRAY
23714: PUSH
23715: LD_INT 1
23717: ARRAY
23718: PUSH
23719: LD_INT 100
23721: PUSH
23722: LD_VAR 0 5
23726: PLUS
23727: EQUAL
23728: IFFALSE 23773
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23730: LD_ADDR_VAR 0 1
23734: PUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: LD_INT 2
23742: PPUSH
23743: LD_VAR 0 1
23747: PUSH
23748: LD_INT 2
23750: ARRAY
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: CALL_OW 3
23759: PPUSH
23760: CALL_OW 1
23764: ST_TO_ADDR
// tmp := 1 ;
23765: LD_ADDR_VAR 0 2
23769: PUSH
23770: LD_STRING 1
23772: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23773: LD_ADDR_VAR 0 4
23777: PUSH
23778: LD_VAR 0 4
23782: PUSH
23783: LD_VAR 0 2
23787: STR
23788: ST_TO_ADDR
// end ;
23789: GO 23685
23791: POP
23792: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23793: LD_STRING getStreamItemsFromMission("
23795: PUSH
23796: LD_VAR 0 3
23800: STR
23801: PUSH
23802: LD_STRING ","
23804: STR
23805: PUSH
23806: LD_VAR 0 4
23810: STR
23811: PUSH
23812: LD_STRING ")
23814: STR
23815: PPUSH
23816: CALL_OW 559
// end else
23820: GO 23829
// ToLua ( getStreamItemsFromMission("","") ) ;
23822: LD_STRING getStreamItemsFromMission("","")
23824: PPUSH
23825: CALL_OW 559
// end ;
23829: LD_VAR 0 1
23833: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23834: LD_EXP 72
23838: PUSH
23839: LD_EXP 77
23843: AND
23844: IFFALSE 23968
23846: GO 23848
23848: DISABLE
23849: LD_INT 0
23851: PPUSH
23852: PPUSH
// begin enable ;
23853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_INT 22
23861: PUSH
23862: LD_OWVAR 2
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 34
23876: PUSH
23877: LD_INT 7
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 34
23886: PUSH
23887: LD_INT 45
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 34
23896: PUSH
23897: LD_INT 28
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 34
23906: PUSH
23907: LD_INT 47
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PPUSH
23925: CALL_OW 69
23929: ST_TO_ADDR
// if not tmp then
23930: LD_VAR 0 2
23934: NOT
23935: IFFALSE 23939
// exit ;
23937: GO 23968
// for i in tmp do
23939: LD_ADDR_VAR 0 1
23943: PUSH
23944: LD_VAR 0 2
23948: PUSH
23949: FOR_IN
23950: IFFALSE 23966
// begin SetLives ( i , 0 ) ;
23952: LD_VAR 0 1
23956: PPUSH
23957: LD_INT 0
23959: PPUSH
23960: CALL_OW 234
// end ;
23964: GO 23949
23966: POP
23967: POP
// end ;
23968: PPOPN 2
23970: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23971: LD_EXP 72
23975: PUSH
23976: LD_EXP 78
23980: AND
23981: IFFALSE 24065
23983: GO 23985
23985: DISABLE
23986: LD_INT 0
23988: PPUSH
23989: PPUSH
// begin enable ;
23990: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23991: LD_ADDR_VAR 0 2
23995: PUSH
23996: LD_INT 22
23998: PUSH
23999: LD_OWVAR 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 32
24010: PUSH
24011: LD_INT 3
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PPUSH
24022: CALL_OW 69
24026: ST_TO_ADDR
// if not tmp then
24027: LD_VAR 0 2
24031: NOT
24032: IFFALSE 24036
// exit ;
24034: GO 24065
// for i in tmp do
24036: LD_ADDR_VAR 0 1
24040: PUSH
24041: LD_VAR 0 2
24045: PUSH
24046: FOR_IN
24047: IFFALSE 24063
// begin SetLives ( i , 0 ) ;
24049: LD_VAR 0 1
24053: PPUSH
24054: LD_INT 0
24056: PPUSH
24057: CALL_OW 234
// end ;
24061: GO 24046
24063: POP
24064: POP
// end ;
24065: PPOPN 2
24067: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24068: LD_EXP 72
24072: PUSH
24073: LD_EXP 75
24077: AND
24078: IFFALSE 24171
24080: GO 24082
24082: DISABLE
24083: LD_INT 0
24085: PPUSH
// begin enable ;
24086: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_INT 22
24094: PUSH
24095: LD_OWVAR 2
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: LD_INT 25
24109: PUSH
24110: LD_INT 5
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 25
24119: PUSH
24120: LD_INT 9
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 25
24129: PUSH
24130: LD_INT 8
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 69
24151: PUSH
24152: FOR_IN
24153: IFFALSE 24169
// begin SetClass ( i , 1 ) ;
24155: LD_VAR 0 1
24159: PPUSH
24160: LD_INT 1
24162: PPUSH
24163: CALL_OW 336
// end ;
24167: GO 24152
24169: POP
24170: POP
// end ;
24171: PPOPN 1
24173: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24174: LD_EXP 72
24178: PUSH
24179: LD_EXP 76
24183: AND
24184: PUSH
24185: LD_OWVAR 65
24189: PUSH
24190: LD_INT 7
24192: LESS
24193: AND
24194: IFFALSE 24208
24196: GO 24198
24198: DISABLE
// begin enable ;
24199: ENABLE
// game_speed := 7 ;
24200: LD_ADDR_OWVAR 65
24204: PUSH
24205: LD_INT 7
24207: ST_TO_ADDR
// end ;
24208: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24209: LD_EXP 72
24213: PUSH
24214: LD_EXP 79
24218: AND
24219: IFFALSE 24421
24221: GO 24223
24223: DISABLE
24224: LD_INT 0
24226: PPUSH
24227: PPUSH
24228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_INT 81
24236: PUSH
24237: LD_OWVAR 2
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 21
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 69
24264: ST_TO_ADDR
// if not tmp then
24265: LD_VAR 0 3
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 24421
// if tmp > 5 then
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 5
24281: GREATER
24282: IFFALSE 24294
// k := 5 else
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 5
24291: ST_TO_ADDR
24292: GO 24304
// k := tmp ;
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_VAR 0 3
24303: ST_TO_ADDR
// for i := 1 to k do
24304: LD_ADDR_VAR 0 1
24308: PUSH
24309: DOUBLE
24310: LD_INT 1
24312: DEC
24313: ST_TO_ADDR
24314: LD_VAR 0 2
24318: PUSH
24319: FOR_TO
24320: IFFALSE 24419
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24322: LD_VAR 0 3
24326: PUSH
24327: LD_VAR 0 1
24331: ARRAY
24332: PPUSH
24333: LD_VAR 0 1
24337: PUSH
24338: LD_INT 4
24340: MOD
24341: PUSH
24342: LD_INT 1
24344: PLUS
24345: PPUSH
24346: CALL_OW 259
24350: PUSH
24351: LD_INT 10
24353: LESS
24354: IFFALSE 24417
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24356: LD_VAR 0 3
24360: PUSH
24361: LD_VAR 0 1
24365: ARRAY
24366: PPUSH
24367: LD_VAR 0 1
24371: PUSH
24372: LD_INT 4
24374: MOD
24375: PUSH
24376: LD_INT 1
24378: PLUS
24379: PPUSH
24380: LD_VAR 0 3
24384: PUSH
24385: LD_VAR 0 1
24389: ARRAY
24390: PPUSH
24391: LD_VAR 0 1
24395: PUSH
24396: LD_INT 4
24398: MOD
24399: PUSH
24400: LD_INT 1
24402: PLUS
24403: PPUSH
24404: CALL_OW 259
24408: PUSH
24409: LD_INT 1
24411: PLUS
24412: PPUSH
24413: CALL_OW 237
24417: GO 24319
24419: POP
24420: POP
// end ;
24421: PPOPN 3
24423: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24424: LD_EXP 72
24428: PUSH
24429: LD_EXP 80
24433: AND
24434: IFFALSE 24454
24436: GO 24438
24438: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24439: LD_INT 4
24441: PPUSH
24442: LD_OWVAR 2
24446: PPUSH
24447: LD_INT 0
24449: PPUSH
24450: CALL_OW 324
24454: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24455: LD_EXP 72
24459: PUSH
24460: LD_EXP 109
24464: AND
24465: IFFALSE 24485
24467: GO 24469
24469: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24470: LD_INT 19
24472: PPUSH
24473: LD_OWVAR 2
24477: PPUSH
24478: LD_INT 0
24480: PPUSH
24481: CALL_OW 324
24485: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24486: LD_EXP 72
24490: PUSH
24491: LD_EXP 81
24495: AND
24496: IFFALSE 24598
24498: GO 24500
24500: DISABLE
24501: LD_INT 0
24503: PPUSH
24504: PPUSH
// begin enable ;
24505: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_OWVAR 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: LD_INT 34
24528: PUSH
24529: LD_INT 11
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 34
24538: PUSH
24539: LD_INT 30
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 69
24559: ST_TO_ADDR
// if not tmp then
24560: LD_VAR 0 2
24564: NOT
24565: IFFALSE 24569
// exit ;
24567: GO 24598
// for i in tmp do
24569: LD_ADDR_VAR 0 1
24573: PUSH
24574: LD_VAR 0 2
24578: PUSH
24579: FOR_IN
24580: IFFALSE 24596
// begin SetLives ( i , 0 ) ;
24582: LD_VAR 0 1
24586: PPUSH
24587: LD_INT 0
24589: PPUSH
24590: CALL_OW 234
// end ;
24594: GO 24579
24596: POP
24597: POP
// end ;
24598: PPOPN 2
24600: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24601: LD_EXP 72
24605: PUSH
24606: LD_EXP 82
24610: AND
24611: IFFALSE 24631
24613: GO 24615
24615: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24616: LD_INT 32
24618: PPUSH
24619: LD_OWVAR 2
24623: PPUSH
24624: LD_INT 0
24626: PPUSH
24627: CALL_OW 324
24631: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24632: LD_EXP 72
24636: PUSH
24637: LD_EXP 83
24641: AND
24642: IFFALSE 24823
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
24650: PPUSH
24651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24652: LD_ADDR_VAR 0 2
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_OWVAR 2
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 33
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PPUSH
24683: CALL_OW 69
24687: ST_TO_ADDR
// if not tmp then
24688: LD_VAR 0 2
24692: NOT
24693: IFFALSE 24697
// exit ;
24695: GO 24823
// side := 0 ;
24697: LD_ADDR_VAR 0 3
24701: PUSH
24702: LD_INT 0
24704: ST_TO_ADDR
// for i := 1 to 8 do
24705: LD_ADDR_VAR 0 1
24709: PUSH
24710: DOUBLE
24711: LD_INT 1
24713: DEC
24714: ST_TO_ADDR
24715: LD_INT 8
24717: PUSH
24718: FOR_TO
24719: IFFALSE 24767
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24721: LD_OWVAR 2
24725: PUSH
24726: LD_VAR 0 1
24730: NONEQUAL
24731: PUSH
24732: LD_OWVAR 2
24736: PPUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 81
24746: PUSH
24747: LD_INT 2
24749: EQUAL
24750: AND
24751: IFFALSE 24765
// begin side := i ;
24753: LD_ADDR_VAR 0 3
24757: PUSH
24758: LD_VAR 0 1
24762: ST_TO_ADDR
// break ;
24763: GO 24767
// end ;
24765: GO 24718
24767: POP
24768: POP
// if not side then
24769: LD_VAR 0 3
24773: NOT
24774: IFFALSE 24778
// exit ;
24776: GO 24823
// for i := 1 to tmp do
24778: LD_ADDR_VAR 0 1
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_VAR 0 2
24792: PUSH
24793: FOR_TO
24794: IFFALSE 24821
// if Prob ( 60 ) then
24796: LD_INT 60
24798: PPUSH
24799: CALL_OW 13
24803: IFFALSE 24819
// SetSide ( i , side ) ;
24805: LD_VAR 0 1
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: CALL_OW 235
24819: GO 24793
24821: POP
24822: POP
// end ;
24823: PPOPN 3
24825: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24826: LD_EXP 72
24830: PUSH
24831: LD_EXP 85
24835: AND
24836: IFFALSE 24955
24838: GO 24840
24840: DISABLE
24841: LD_INT 0
24843: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24844: LD_ADDR_VAR 0 1
24848: PUSH
24849: LD_INT 22
24851: PUSH
24852: LD_OWVAR 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 21
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: LD_INT 23
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 69
24897: PUSH
24898: FOR_IN
24899: IFFALSE 24953
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 257
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: LD_INT 4
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: IN
24929: IFFALSE 24951
// SetClass ( un , rand ( 1 , 4 ) ) ;
24931: LD_VAR 0 1
24935: PPUSH
24936: LD_INT 1
24938: PPUSH
24939: LD_INT 4
24941: PPUSH
24942: CALL_OW 12
24946: PPUSH
24947: CALL_OW 336
24951: GO 24898
24953: POP
24954: POP
// end ;
24955: PPOPN 1
24957: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24958: LD_EXP 72
24962: PUSH
24963: LD_EXP 84
24967: AND
24968: IFFALSE 25047
24970: GO 24972
24972: DISABLE
24973: LD_INT 0
24975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24976: LD_ADDR_VAR 0 1
24980: PUSH
24981: LD_INT 22
24983: PUSH
24984: LD_OWVAR 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 21
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PPUSH
25007: CALL_OW 69
25011: ST_TO_ADDR
// if not tmp then
25012: LD_VAR 0 1
25016: NOT
25017: IFFALSE 25021
// exit ;
25019: GO 25047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25021: LD_VAR 0 1
25025: PUSH
25026: LD_INT 1
25028: PPUSH
25029: LD_VAR 0 1
25033: PPUSH
25034: CALL_OW 12
25038: ARRAY
25039: PPUSH
25040: LD_INT 100
25042: PPUSH
25043: CALL_OW 234
// end ;
25047: PPOPN 1
25049: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25050: LD_EXP 72
25054: PUSH
25055: LD_EXP 86
25059: AND
25060: IFFALSE 25158
25062: GO 25064
25064: DISABLE
25065: LD_INT 0
25067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25068: LD_ADDR_VAR 0 1
25072: PUSH
25073: LD_INT 22
25075: PUSH
25076: LD_OWVAR 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 21
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 69
25103: ST_TO_ADDR
// if not tmp then
25104: LD_VAR 0 1
25108: NOT
25109: IFFALSE 25113
// exit ;
25111: GO 25158
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25113: LD_VAR 0 1
25117: PUSH
25118: LD_INT 1
25120: PPUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 12
25130: ARRAY
25131: PPUSH
25132: LD_INT 1
25134: PPUSH
25135: LD_INT 4
25137: PPUSH
25138: CALL_OW 12
25142: PPUSH
25143: LD_INT 3000
25145: PPUSH
25146: LD_INT 9000
25148: PPUSH
25149: CALL_OW 12
25153: PPUSH
25154: CALL_OW 492
// end ;
25158: PPOPN 1
25160: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25161: LD_EXP 72
25165: PUSH
25166: LD_EXP 87
25170: AND
25171: IFFALSE 25191
25173: GO 25175
25175: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25176: LD_INT 1
25178: PPUSH
25179: LD_OWVAR 2
25183: PPUSH
25184: LD_INT 0
25186: PPUSH
25187: CALL_OW 324
25191: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25192: LD_EXP 72
25196: PUSH
25197: LD_EXP 88
25201: AND
25202: IFFALSE 25285
25204: GO 25206
25206: DISABLE
25207: LD_INT 0
25209: PPUSH
25210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25211: LD_ADDR_VAR 0 2
25215: PUSH
25216: LD_INT 22
25218: PUSH
25219: LD_OWVAR 2
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 21
25230: PUSH
25231: LD_INT 3
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: ST_TO_ADDR
// if not tmp then
25247: LD_VAR 0 2
25251: NOT
25252: IFFALSE 25256
// exit ;
25254: GO 25285
// for i in tmp do
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: LD_VAR 0 2
25265: PUSH
25266: FOR_IN
25267: IFFALSE 25283
// SetBLevel ( i , 10 ) ;
25269: LD_VAR 0 1
25273: PPUSH
25274: LD_INT 10
25276: PPUSH
25277: CALL_OW 241
25281: GO 25266
25283: POP
25284: POP
// end ;
25285: PPOPN 2
25287: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25288: LD_EXP 72
25292: PUSH
25293: LD_EXP 89
25297: AND
25298: IFFALSE 25409
25300: GO 25302
25302: DISABLE
25303: LD_INT 0
25305: PPUSH
25306: PPUSH
25307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_INT 22
25315: PUSH
25316: LD_OWVAR 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 25
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PPUSH
25339: CALL_OW 69
25343: ST_TO_ADDR
// if not tmp then
25344: LD_VAR 0 3
25348: NOT
25349: IFFALSE 25353
// exit ;
25351: GO 25409
// un := tmp [ rand ( 1 , tmp ) ] ;
25353: LD_ADDR_VAR 0 2
25357: PUSH
25358: LD_VAR 0 3
25362: PUSH
25363: LD_INT 1
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: CALL_OW 12
25375: ARRAY
25376: ST_TO_ADDR
// if Crawls ( un ) then
25377: LD_VAR 0 2
25381: PPUSH
25382: CALL_OW 318
25386: IFFALSE 25397
// ComWalk ( un ) ;
25388: LD_VAR 0 2
25392: PPUSH
25393: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25397: LD_VAR 0 2
25401: PPUSH
25402: LD_INT 5
25404: PPUSH
25405: CALL_OW 336
// end ;
25409: PPOPN 3
25411: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25412: LD_EXP 72
25416: PUSH
25417: LD_EXP 90
25421: AND
25422: PUSH
25423: LD_OWVAR 67
25427: PUSH
25428: LD_INT 3
25430: LESS
25431: AND
25432: IFFALSE 25451
25434: GO 25436
25436: DISABLE
// Difficulty := Difficulty + 1 ;
25437: LD_ADDR_OWVAR 67
25441: PUSH
25442: LD_OWVAR 67
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: ST_TO_ADDR
25451: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25452: LD_EXP 72
25456: PUSH
25457: LD_EXP 91
25461: AND
25462: IFFALSE 25565
25464: GO 25466
25466: DISABLE
25467: LD_INT 0
25469: PPUSH
// begin for i := 1 to 5 do
25470: LD_ADDR_VAR 0 1
25474: PUSH
25475: DOUBLE
25476: LD_INT 1
25478: DEC
25479: ST_TO_ADDR
25480: LD_INT 5
25482: PUSH
25483: FOR_TO
25484: IFFALSE 25563
// begin uc_nation := nation_nature ;
25486: LD_ADDR_OWVAR 21
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
// uc_side := 0 ;
25494: LD_ADDR_OWVAR 20
25498: PUSH
25499: LD_INT 0
25501: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25502: LD_ADDR_OWVAR 29
25506: PUSH
25507: LD_INT 12
25509: PUSH
25510: LD_INT 12
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: ST_TO_ADDR
// hc_agressivity := 20 ;
25517: LD_ADDR_OWVAR 35
25521: PUSH
25522: LD_INT 20
25524: ST_TO_ADDR
// hc_class := class_tiger ;
25525: LD_ADDR_OWVAR 28
25529: PUSH
25530: LD_INT 14
25532: ST_TO_ADDR
// hc_gallery :=  ;
25533: LD_ADDR_OWVAR 33
25537: PUSH
25538: LD_STRING 
25540: ST_TO_ADDR
// hc_name :=  ;
25541: LD_ADDR_OWVAR 26
25545: PUSH
25546: LD_STRING 
25548: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25549: CALL_OW 44
25553: PPUSH
25554: LD_INT 0
25556: PPUSH
25557: CALL_OW 51
// end ;
25561: GO 25483
25563: POP
25564: POP
// end ;
25565: PPOPN 1
25567: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25568: LD_EXP 72
25572: PUSH
25573: LD_EXP 92
25577: AND
25578: IFFALSE 25587
25580: GO 25582
25582: DISABLE
// StreamSibBomb ;
25583: CALL 25588 0 0
25587: END
// export function StreamSibBomb ; var i , x , y ; begin
25588: LD_INT 0
25590: PPUSH
25591: PPUSH
25592: PPUSH
25593: PPUSH
// result := false ;
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
// for i := 1 to 16 do
25602: LD_ADDR_VAR 0 2
25606: PUSH
25607: DOUBLE
25608: LD_INT 1
25610: DEC
25611: ST_TO_ADDR
25612: LD_INT 16
25614: PUSH
25615: FOR_TO
25616: IFFALSE 25815
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: LD_INT 10
25625: PUSH
25626: LD_INT 20
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: LD_INT 40
25634: PUSH
25635: LD_INT 50
25637: PUSH
25638: LD_INT 60
25640: PUSH
25641: LD_INT 70
25643: PUSH
25644: LD_INT 80
25646: PUSH
25647: LD_INT 90
25649: PUSH
25650: LD_INT 100
25652: PUSH
25653: LD_INT 110
25655: PUSH
25656: LD_INT 120
25658: PUSH
25659: LD_INT 130
25661: PUSH
25662: LD_INT 140
25664: PUSH
25665: LD_INT 150
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: PPUSH
25688: LD_INT 15
25690: PPUSH
25691: CALL_OW 12
25695: ARRAY
25696: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25697: LD_ADDR_VAR 0 4
25701: PUSH
25702: LD_INT 10
25704: PUSH
25705: LD_INT 20
25707: PUSH
25708: LD_INT 30
25710: PUSH
25711: LD_INT 40
25713: PUSH
25714: LD_INT 50
25716: PUSH
25717: LD_INT 60
25719: PUSH
25720: LD_INT 70
25722: PUSH
25723: LD_INT 80
25725: PUSH
25726: LD_INT 90
25728: PUSH
25729: LD_INT 100
25731: PUSH
25732: LD_INT 110
25734: PUSH
25735: LD_INT 120
25737: PUSH
25738: LD_INT 130
25740: PUSH
25741: LD_INT 140
25743: PUSH
25744: LD_INT 150
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PPUSH
25767: LD_INT 15
25769: PPUSH
25770: CALL_OW 12
25774: ARRAY
25775: ST_TO_ADDR
// if ValidHex ( x , y ) then
25776: LD_VAR 0 3
25780: PPUSH
25781: LD_VAR 0 4
25785: PPUSH
25786: CALL_OW 488
25790: IFFALSE 25813
// begin result := [ x , y ] ;
25792: LD_ADDR_VAR 0 1
25796: PUSH
25797: LD_VAR 0 3
25801: PUSH
25802: LD_VAR 0 4
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: ST_TO_ADDR
// break ;
25811: GO 25815
// end ; end ;
25813: GO 25615
25815: POP
25816: POP
// if result then
25817: LD_VAR 0 1
25821: IFFALSE 25881
// begin ToLua ( playSibBomb() ) ;
25823: LD_STRING playSibBomb()
25825: PPUSH
25826: CALL_OW 559
// wait ( 0 0$14 ) ;
25830: LD_INT 490
25832: PPUSH
25833: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25837: LD_VAR 0 1
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PPUSH
25846: LD_VAR 0 1
25850: PUSH
25851: LD_INT 2
25853: ARRAY
25854: PPUSH
25855: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25859: LD_VAR 0 1
25863: PUSH
25864: LD_INT 1
25866: ARRAY
25867: PPUSH
25868: LD_VAR 0 1
25872: PUSH
25873: LD_INT 2
25875: ARRAY
25876: PPUSH
25877: CALL_OW 429
// end ; end ;
25881: LD_VAR 0 1
25885: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25886: LD_EXP 72
25890: PUSH
25891: LD_EXP 94
25895: AND
25896: IFFALSE 25908
25898: GO 25900
25900: DISABLE
// YouLost (  ) ;
25901: LD_STRING 
25903: PPUSH
25904: CALL_OW 104
25908: END
// every 0 0$1 trigger StreamModeActive and sFog do
25909: LD_EXP 72
25913: PUSH
25914: LD_EXP 93
25918: AND
25919: IFFALSE 25933
25921: GO 25923
25923: DISABLE
// FogOff ( your_side ) ;
25924: LD_OWVAR 2
25928: PPUSH
25929: CALL_OW 344
25933: END
// every 0 0$1 trigger StreamModeActive and sSun do
25934: LD_EXP 72
25938: PUSH
25939: LD_EXP 95
25943: AND
25944: IFFALSE 25972
25946: GO 25948
25948: DISABLE
// begin solar_recharge_percent := 0 ;
25949: LD_ADDR_OWVAR 79
25953: PUSH
25954: LD_INT 0
25956: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25957: LD_INT 10500
25959: PPUSH
25960: CALL_OW 67
// solar_recharge_percent := 100 ;
25964: LD_ADDR_OWVAR 79
25968: PUSH
25969: LD_INT 100
25971: ST_TO_ADDR
// end ;
25972: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25973: LD_EXP 72
25977: PUSH
25978: LD_EXP 96
25982: AND
25983: IFFALSE 26222
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
25992: PPUSH
// begin tmp := [ ] ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: EMPTY
25999: ST_TO_ADDR
// for i := 1 to 6 do
26000: LD_ADDR_VAR 0 1
26004: PUSH
26005: DOUBLE
26006: LD_INT 1
26008: DEC
26009: ST_TO_ADDR
26010: LD_INT 6
26012: PUSH
26013: FOR_TO
26014: IFFALSE 26119
// begin uc_nation := nation_nature ;
26016: LD_ADDR_OWVAR 21
26020: PUSH
26021: LD_INT 0
26023: ST_TO_ADDR
// uc_side := 0 ;
26024: LD_ADDR_OWVAR 20
26028: PUSH
26029: LD_INT 0
26031: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26032: LD_ADDR_OWVAR 29
26036: PUSH
26037: LD_INT 12
26039: PUSH
26040: LD_INT 12
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: ST_TO_ADDR
// hc_agressivity := 20 ;
26047: LD_ADDR_OWVAR 35
26051: PUSH
26052: LD_INT 20
26054: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26055: LD_ADDR_OWVAR 28
26059: PUSH
26060: LD_INT 17
26062: ST_TO_ADDR
// hc_gallery :=  ;
26063: LD_ADDR_OWVAR 33
26067: PUSH
26068: LD_STRING 
26070: ST_TO_ADDR
// hc_name :=  ;
26071: LD_ADDR_OWVAR 26
26075: PUSH
26076: LD_STRING 
26078: ST_TO_ADDR
// un := CreateHuman ;
26079: LD_ADDR_VAR 0 2
26083: PUSH
26084: CALL_OW 44
26088: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_INT 1
26096: PPUSH
26097: CALL_OW 51
// tmp := tmp ^ un ;
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_VAR 0 3
26110: PUSH
26111: LD_VAR 0 2
26115: ADD
26116: ST_TO_ADDR
// end ;
26117: GO 26013
26119: POP
26120: POP
// repeat wait ( 0 0$1 ) ;
26121: LD_INT 35
26123: PPUSH
26124: CALL_OW 67
// for un in tmp do
26128: LD_ADDR_VAR 0 2
26132: PUSH
26133: LD_VAR 0 3
26137: PUSH
26138: FOR_IN
26139: IFFALSE 26213
// begin if IsDead ( un ) then
26141: LD_VAR 0 2
26145: PPUSH
26146: CALL_OW 301
26150: IFFALSE 26170
// begin tmp := tmp diff un ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 2
26166: DIFF
26167: ST_TO_ADDR
// continue ;
26168: GO 26138
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26170: LD_VAR 0 2
26174: PPUSH
26175: LD_INT 3
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PPUSH
26192: CALL_OW 69
26196: PPUSH
26197: LD_VAR 0 2
26201: PPUSH
26202: CALL_OW 74
26206: PPUSH
26207: CALL_OW 115
// end ;
26211: GO 26138
26213: POP
26214: POP
// until not tmp ;
26215: LD_VAR 0 3
26219: NOT
26220: IFFALSE 26121
// end ;
26222: PPOPN 3
26224: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26225: LD_EXP 72
26229: PUSH
26230: LD_EXP 97
26234: AND
26235: IFFALSE 26289
26237: GO 26239
26239: DISABLE
// begin ToLua ( displayTroll(); ) ;
26240: LD_STRING displayTroll();
26242: PPUSH
26243: CALL_OW 559
// wait ( 3 3$00 ) ;
26247: LD_INT 6300
26249: PPUSH
26250: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26254: LD_STRING hideTroll();
26256: PPUSH
26257: CALL_OW 559
// wait ( 1 1$00 ) ;
26261: LD_INT 2100
26263: PPUSH
26264: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26268: LD_STRING displayTroll();
26270: PPUSH
26271: CALL_OW 559
// wait ( 1 1$00 ) ;
26275: LD_INT 2100
26277: PPUSH
26278: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26282: LD_STRING hideTroll();
26284: PPUSH
26285: CALL_OW 559
// end ;
26289: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26290: LD_EXP 72
26294: PUSH
26295: LD_EXP 98
26299: AND
26300: IFFALSE 26363
26302: GO 26304
26304: DISABLE
26305: LD_INT 0
26307: PPUSH
// begin p := 0 ;
26308: LD_ADDR_VAR 0 1
26312: PUSH
26313: LD_INT 0
26315: ST_TO_ADDR
// repeat game_speed := 1 ;
26316: LD_ADDR_OWVAR 65
26320: PUSH
26321: LD_INT 1
26323: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26324: LD_INT 35
26326: PPUSH
26327: CALL_OW 67
// p := p + 1 ;
26331: LD_ADDR_VAR 0 1
26335: PUSH
26336: LD_VAR 0 1
26340: PUSH
26341: LD_INT 1
26343: PLUS
26344: ST_TO_ADDR
// until p >= 60 ;
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 60
26352: GREATEREQUAL
26353: IFFALSE 26316
// game_speed := 4 ;
26355: LD_ADDR_OWVAR 65
26359: PUSH
26360: LD_INT 4
26362: ST_TO_ADDR
// end ;
26363: PPOPN 1
26365: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26366: LD_EXP 72
26370: PUSH
26371: LD_EXP 99
26375: AND
26376: IFFALSE 26522
26378: GO 26380
26380: DISABLE
26381: LD_INT 0
26383: PPUSH
26384: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26385: LD_ADDR_VAR 0 1
26389: PUSH
26390: LD_INT 22
26392: PUSH
26393: LD_OWVAR 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 30
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 30
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PPUSH
26434: CALL_OW 69
26438: ST_TO_ADDR
// if not depot then
26439: LD_VAR 0 1
26443: NOT
26444: IFFALSE 26448
// exit ;
26446: GO 26522
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26448: LD_ADDR_VAR 0 2
26452: PUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_VAR 0 1
26465: PPUSH
26466: CALL_OW 12
26470: ARRAY
26471: PPUSH
26472: CALL_OW 274
26476: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_INT 1
26484: PPUSH
26485: LD_INT 0
26487: PPUSH
26488: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26492: LD_VAR 0 2
26496: PPUSH
26497: LD_INT 2
26499: PPUSH
26500: LD_INT 0
26502: PPUSH
26503: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26507: LD_VAR 0 2
26511: PPUSH
26512: LD_INT 3
26514: PPUSH
26515: LD_INT 0
26517: PPUSH
26518: CALL_OW 277
// end ;
26522: PPOPN 2
26524: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26525: LD_EXP 72
26529: PUSH
26530: LD_EXP 100
26534: AND
26535: IFFALSE 26632
26537: GO 26539
26539: DISABLE
26540: LD_INT 0
26542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26543: LD_ADDR_VAR 0 1
26547: PUSH
26548: LD_INT 22
26550: PUSH
26551: LD_OWVAR 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 21
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 3
26572: PUSH
26573: LD_INT 23
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: PPUSH
26592: CALL_OW 69
26596: ST_TO_ADDR
// if not tmp then
26597: LD_VAR 0 1
26601: NOT
26602: IFFALSE 26606
// exit ;
26604: GO 26632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26606: LD_VAR 0 1
26610: PUSH
26611: LD_INT 1
26613: PPUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 12
26623: ARRAY
26624: PPUSH
26625: LD_INT 200
26627: PPUSH
26628: CALL_OW 234
// end ;
26632: PPOPN 1
26634: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26635: LD_EXP 72
26639: PUSH
26640: LD_EXP 101
26644: AND
26645: IFFALSE 26724
26647: GO 26649
26649: DISABLE
26650: LD_INT 0
26652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: LD_INT 22
26660: PUSH
26661: LD_OWVAR 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 21
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PPUSH
26684: CALL_OW 69
26688: ST_TO_ADDR
// if not tmp then
26689: LD_VAR 0 1
26693: NOT
26694: IFFALSE 26698
// exit ;
26696: GO 26724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26698: LD_VAR 0 1
26702: PUSH
26703: LD_INT 1
26705: PPUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 12
26715: ARRAY
26716: PPUSH
26717: LD_INT 60
26719: PPUSH
26720: CALL_OW 234
// end ;
26724: PPOPN 1
26726: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26727: LD_EXP 72
26731: PUSH
26732: LD_EXP 102
26736: AND
26737: IFFALSE 26836
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
// begin enable ;
26746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26747: LD_ADDR_VAR 0 1
26751: PUSH
26752: LD_INT 22
26754: PUSH
26755: LD_OWVAR 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 61
26766: PUSH
26767: EMPTY
26768: LIST
26769: PUSH
26770: LD_INT 33
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 69
26789: ST_TO_ADDR
// if not tmp then
26790: LD_VAR 0 1
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26836
// for i in tmp do
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: LD_VAR 0 1
26808: PUSH
26809: FOR_IN
26810: IFFALSE 26834
// if IsControledBy ( i ) then
26812: LD_VAR 0 2
26816: PPUSH
26817: CALL_OW 312
26821: IFFALSE 26832
// ComUnlink ( i ) ;
26823: LD_VAR 0 2
26827: PPUSH
26828: CALL_OW 136
26832: GO 26809
26834: POP
26835: POP
// end ;
26836: PPOPN 2
26838: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26839: LD_EXP 72
26843: PUSH
26844: LD_EXP 103
26848: AND
26849: IFFALSE 26989
26851: GO 26853
26853: DISABLE
26854: LD_INT 0
26856: PPUSH
26857: PPUSH
// begin ToLua ( displayPowell(); ) ;
26858: LD_STRING displayPowell();
26860: PPUSH
26861: CALL_OW 559
// uc_side := 0 ;
26865: LD_ADDR_OWVAR 20
26869: PUSH
26870: LD_INT 0
26872: ST_TO_ADDR
// uc_nation := 2 ;
26873: LD_ADDR_OWVAR 21
26877: PUSH
26878: LD_INT 2
26880: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26881: LD_ADDR_OWVAR 37
26885: PUSH
26886: LD_INT 14
26888: ST_TO_ADDR
// vc_engine := engine_siberite ;
26889: LD_ADDR_OWVAR 39
26893: PUSH
26894: LD_INT 3
26896: ST_TO_ADDR
// vc_control := control_apeman ;
26897: LD_ADDR_OWVAR 38
26901: PUSH
26902: LD_INT 5
26904: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26905: LD_ADDR_OWVAR 40
26909: PUSH
26910: LD_INT 29
26912: ST_TO_ADDR
// un := CreateVehicle ;
26913: LD_ADDR_VAR 0 2
26917: PUSH
26918: CALL_OW 45
26922: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26923: LD_VAR 0 2
26927: PPUSH
26928: LD_INT 1
26930: PPUSH
26931: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26935: LD_INT 35
26937: PPUSH
26938: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26942: LD_VAR 0 2
26946: PPUSH
26947: LD_INT 22
26949: PUSH
26950: LD_OWVAR 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PPUSH
26959: CALL_OW 69
26963: PPUSH
26964: LD_VAR 0 2
26968: PPUSH
26969: CALL_OW 74
26973: PPUSH
26974: CALL_OW 115
// until IsDead ( un ) ;
26978: LD_VAR 0 2
26982: PPUSH
26983: CALL_OW 301
26987: IFFALSE 26935
// end ;
26989: PPOPN 2
26991: END
// every 0 0$1 trigger StreamModeActive and sStu do
26992: LD_EXP 72
26996: PUSH
26997: LD_EXP 111
27001: AND
27002: IFFALSE 27018
27004: GO 27006
27006: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27007: LD_STRING displayStucuk();
27009: PPUSH
27010: CALL_OW 559
// ResetFog ;
27014: CALL_OW 335
// end ;
27018: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27019: LD_EXP 72
27023: PUSH
27024: LD_EXP 104
27028: AND
27029: IFFALSE 27170
27031: GO 27033
27033: DISABLE
27034: LD_INT 0
27036: PPUSH
27037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27038: LD_ADDR_VAR 0 2
27042: PUSH
27043: LD_INT 22
27045: PUSH
27046: LD_OWVAR 2
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 21
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 69
27073: ST_TO_ADDR
// if not tmp then
27074: LD_VAR 0 2
27078: NOT
27079: IFFALSE 27083
// exit ;
27081: GO 27170
// un := tmp [ rand ( 1 , tmp ) ] ;
27083: LD_ADDR_VAR 0 1
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_INT 1
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: CALL_OW 12
27105: ARRAY
27106: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_INT 0
27114: PPUSH
27115: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27119: LD_VAR 0 1
27123: PPUSH
27124: LD_OWVAR 3
27128: PUSH
27129: LD_VAR 0 1
27133: DIFF
27134: PPUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 74
27144: PPUSH
27145: CALL_OW 115
// wait ( 0 0$20 ) ;
27149: LD_INT 700
27151: PPUSH
27152: CALL_OW 67
// SetSide ( un , your_side ) ;
27156: LD_VAR 0 1
27160: PPUSH
27161: LD_OWVAR 2
27165: PPUSH
27166: CALL_OW 235
// end ;
27170: PPOPN 2
27172: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27173: LD_EXP 72
27177: PUSH
27178: LD_EXP 105
27182: AND
27183: IFFALSE 27289
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 22
27198: PUSH
27199: LD_OWVAR 2
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 30
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 30
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PPUSH
27240: CALL_OW 69
27244: ST_TO_ADDR
// if not depot then
27245: LD_VAR 0 1
27249: NOT
27250: IFFALSE 27254
// exit ;
27252: GO 27289
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 1
27261: ARRAY
27262: PPUSH
27263: CALL_OW 250
27267: PPUSH
27268: LD_VAR 0 1
27272: PUSH
27273: LD_INT 1
27275: ARRAY
27276: PPUSH
27277: CALL_OW 251
27281: PPUSH
27282: LD_INT 70
27284: PPUSH
27285: CALL_OW 495
// end ;
27289: PPOPN 1
27291: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27292: LD_EXP 72
27296: PUSH
27297: LD_EXP 106
27301: AND
27302: IFFALSE 27513
27304: GO 27306
27306: DISABLE
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27314: LD_ADDR_VAR 0 5
27318: PUSH
27319: LD_INT 22
27321: PUSH
27322: LD_OWVAR 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 21
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 69
27349: ST_TO_ADDR
// if not tmp then
27350: LD_VAR 0 5
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27513
// for i in tmp do
27359: LD_ADDR_VAR 0 1
27363: PUSH
27364: LD_VAR 0 5
27368: PUSH
27369: FOR_IN
27370: IFFALSE 27511
// begin d := rand ( 0 , 5 ) ;
27372: LD_ADDR_VAR 0 4
27376: PUSH
27377: LD_INT 0
27379: PPUSH
27380: LD_INT 5
27382: PPUSH
27383: CALL_OW 12
27387: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27388: LD_ADDR_VAR 0 2
27392: PUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: CALL_OW 250
27402: PPUSH
27403: LD_VAR 0 4
27407: PPUSH
27408: LD_INT 3
27410: PPUSH
27411: LD_INT 12
27413: PPUSH
27414: CALL_OW 12
27418: PPUSH
27419: CALL_OW 272
27423: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: CALL_OW 251
27438: PPUSH
27439: LD_VAR 0 4
27443: PPUSH
27444: LD_INT 3
27446: PPUSH
27447: LD_INT 12
27449: PPUSH
27450: CALL_OW 12
27454: PPUSH
27455: CALL_OW 273
27459: ST_TO_ADDR
// if ValidHex ( x , y ) then
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: CALL_OW 488
27474: IFFALSE 27509
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_VAR 0 3
27490: PPUSH
27491: LD_INT 3
27493: PPUSH
27494: LD_INT 6
27496: PPUSH
27497: CALL_OW 12
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: CALL_OW 483
// end ;
27509: GO 27369
27511: POP
27512: POP
// end ;
27513: PPOPN 5
27515: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27516: LD_EXP 72
27520: PUSH
27521: LD_EXP 107
27525: AND
27526: IFFALSE 27620
27528: GO 27530
27530: DISABLE
27531: LD_INT 0
27533: PPUSH
27534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27535: LD_ADDR_VAR 0 2
27539: PUSH
27540: LD_INT 22
27542: PUSH
27543: LD_OWVAR 2
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 32
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 21
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: ST_TO_ADDR
// if not tmp then
27582: LD_VAR 0 2
27586: NOT
27587: IFFALSE 27591
// exit ;
27589: GO 27620
// for i in tmp do
27591: LD_ADDR_VAR 0 1
27595: PUSH
27596: LD_VAR 0 2
27600: PUSH
27601: FOR_IN
27602: IFFALSE 27618
// SetFuel ( i , 0 ) ;
27604: LD_VAR 0 1
27608: PPUSH
27609: LD_INT 0
27611: PPUSH
27612: CALL_OW 240
27616: GO 27601
27618: POP
27619: POP
// end ;
27620: PPOPN 2
27622: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27623: LD_EXP 72
27627: PUSH
27628: LD_EXP 108
27632: AND
27633: IFFALSE 27699
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27641: LD_ADDR_VAR 0 1
27645: PUSH
27646: LD_INT 22
27648: PUSH
27649: LD_OWVAR 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 30
27660: PUSH
27661: LD_INT 29
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not tmp then
27677: LD_VAR 0 1
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 27699
// DestroyUnit ( tmp [ 1 ] ) ;
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 1
27693: ARRAY
27694: PPUSH
27695: CALL_OW 65
// end ;
27699: PPOPN 1
27701: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27702: LD_EXP 72
27706: PUSH
27707: LD_EXP 110
27711: AND
27712: IFFALSE 27841
27714: GO 27716
27716: DISABLE
27717: LD_INT 0
27719: PPUSH
// begin uc_side := 0 ;
27720: LD_ADDR_OWVAR 20
27724: PUSH
27725: LD_INT 0
27727: ST_TO_ADDR
// uc_nation := nation_arabian ;
27728: LD_ADDR_OWVAR 21
27732: PUSH
27733: LD_INT 2
27735: ST_TO_ADDR
// hc_gallery :=  ;
27736: LD_ADDR_OWVAR 33
27740: PUSH
27741: LD_STRING 
27743: ST_TO_ADDR
// hc_name :=  ;
27744: LD_ADDR_OWVAR 26
27748: PUSH
27749: LD_STRING 
27751: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27752: LD_INT 1
27754: PPUSH
27755: LD_INT 11
27757: PPUSH
27758: LD_INT 10
27760: PPUSH
27761: CALL_OW 380
// un := CreateHuman ;
27765: LD_ADDR_VAR 0 1
27769: PUSH
27770: CALL_OW 44
27774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27775: LD_VAR 0 1
27779: PPUSH
27780: LD_INT 1
27782: PPUSH
27783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27787: LD_INT 35
27789: PPUSH
27790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27794: LD_VAR 0 1
27798: PPUSH
27799: LD_INT 22
27801: PUSH
27802: LD_OWVAR 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 74
27825: PPUSH
27826: CALL_OW 115
// until IsDead ( un ) ;
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 301
27839: IFFALSE 27787
// end ;
27841: PPOPN 1
27843: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27844: LD_EXP 72
27848: PUSH
27849: LD_EXP 112
27853: AND
27854: IFFALSE 27866
27856: GO 27858
27858: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27859: LD_STRING earthquake(getX(game), 0, 32)
27861: PPUSH
27862: CALL_OW 559
27866: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27867: LD_EXP 72
27871: PUSH
27872: LD_EXP 113
27876: AND
27877: IFFALSE 27968
27879: GO 27881
27881: DISABLE
27882: LD_INT 0
27884: PPUSH
// begin enable ;
27885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27886: LD_ADDR_VAR 0 1
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_OWVAR 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 33
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: ST_TO_ADDR
// if not tmp then
27933: LD_VAR 0 1
27937: NOT
27938: IFFALSE 27942
// exit ;
27940: GO 27968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27942: LD_VAR 0 1
27946: PUSH
27947: LD_INT 1
27949: PPUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 12
27959: ARRAY
27960: PPUSH
27961: LD_INT 1
27963: PPUSH
27964: CALL_OW 234
// end ;
27968: PPOPN 1
27970: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27971: LD_EXP 72
27975: PUSH
27976: LD_EXP 114
27980: AND
27981: IFFALSE 28122
27983: GO 27985
27985: DISABLE
27986: LD_INT 0
27988: PPUSH
27989: PPUSH
27990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27991: LD_ADDR_VAR 0 3
27995: PUSH
27996: LD_INT 22
27998: PUSH
27999: LD_OWVAR 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 25
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PPUSH
28022: CALL_OW 69
28026: ST_TO_ADDR
// if not tmp then
28027: LD_VAR 0 3
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28122
// un := tmp [ rand ( 1 , tmp ) ] ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: LD_VAR 0 3
28045: PUSH
28046: LD_INT 1
28048: PPUSH
28049: LD_VAR 0 3
28053: PPUSH
28054: CALL_OW 12
28058: ARRAY
28059: ST_TO_ADDR
// if Crawls ( un ) then
28060: LD_VAR 0 2
28064: PPUSH
28065: CALL_OW 318
28069: IFFALSE 28080
// ComWalk ( un ) ;
28071: LD_VAR 0 2
28075: PPUSH
28076: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28080: LD_VAR 0 2
28084: PPUSH
28085: LD_INT 9
28087: PPUSH
28088: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28092: LD_INT 28
28094: PPUSH
28095: LD_OWVAR 2
28099: PPUSH
28100: LD_INT 2
28102: PPUSH
28103: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28107: LD_INT 29
28109: PPUSH
28110: LD_OWVAR 2
28114: PPUSH
28115: LD_INT 2
28117: PPUSH
28118: CALL_OW 322
// end ;
28122: PPOPN 3
28124: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28125: LD_EXP 72
28129: PUSH
28130: LD_EXP 115
28134: AND
28135: IFFALSE 28246
28137: GO 28139
28139: DISABLE
28140: LD_INT 0
28142: PPUSH
28143: PPUSH
28144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_INT 22
28152: PUSH
28153: LD_OWVAR 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 25
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PPUSH
28176: CALL_OW 69
28180: ST_TO_ADDR
// if not tmp then
28181: LD_VAR 0 3
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 28246
// un := tmp [ rand ( 1 , tmp ) ] ;
28190: LD_ADDR_VAR 0 2
28194: PUSH
28195: LD_VAR 0 3
28199: PUSH
28200: LD_INT 1
28202: PPUSH
28203: LD_VAR 0 3
28207: PPUSH
28208: CALL_OW 12
28212: ARRAY
28213: ST_TO_ADDR
// if Crawls ( un ) then
28214: LD_VAR 0 2
28218: PPUSH
28219: CALL_OW 318
28223: IFFALSE 28234
// ComWalk ( un ) ;
28225: LD_VAR 0 2
28229: PPUSH
28230: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28234: LD_VAR 0 2
28238: PPUSH
28239: LD_INT 8
28241: PPUSH
28242: CALL_OW 336
// end ;
28246: PPOPN 3
28248: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28249: LD_EXP 72
28253: PUSH
28254: LD_EXP 116
28258: AND
28259: IFFALSE 28403
28261: GO 28263
28263: DISABLE
28264: LD_INT 0
28266: PPUSH
28267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28268: LD_ADDR_VAR 0 2
28272: PUSH
28273: LD_INT 22
28275: PUSH
28276: LD_OWVAR 2
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 21
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 34
28300: PUSH
28301: LD_INT 12
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 34
28310: PUSH
28311: LD_INT 51
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 34
28320: PUSH
28321: LD_INT 32
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 69
28343: ST_TO_ADDR
// if not tmp then
28344: LD_VAR 0 2
28348: NOT
28349: IFFALSE 28353
// exit ;
28351: GO 28403
// for i in tmp do
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 2
28362: PUSH
28363: FOR_IN
28364: IFFALSE 28401
// if GetCargo ( i , mat_artifact ) = 0 then
28366: LD_VAR 0 1
28370: PPUSH
28371: LD_INT 4
28373: PPUSH
28374: CALL_OW 289
28378: PUSH
28379: LD_INT 0
28381: EQUAL
28382: IFFALSE 28399
// SetCargo ( i , mat_siberit , 100 ) ;
28384: LD_VAR 0 1
28388: PPUSH
28389: LD_INT 3
28391: PPUSH
28392: LD_INT 100
28394: PPUSH
28395: CALL_OW 290
28399: GO 28363
28401: POP
28402: POP
// end ;
28403: PPOPN 2
28405: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28406: LD_EXP 72
28410: PUSH
28411: LD_EXP 117
28415: AND
28416: IFFALSE 28599
28418: GO 28420
28420: DISABLE
28421: LD_INT 0
28423: PPUSH
28424: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28425: LD_ADDR_VAR 0 2
28429: PUSH
28430: LD_INT 22
28432: PUSH
28433: LD_OWVAR 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PPUSH
28442: CALL_OW 69
28446: ST_TO_ADDR
// if not tmp then
28447: LD_VAR 0 2
28451: NOT
28452: IFFALSE 28456
// exit ;
28454: GO 28599
// for i := 1 to 2 do
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_INT 2
28468: PUSH
28469: FOR_TO
28470: IFFALSE 28597
// begin uc_side := your_side ;
28472: LD_ADDR_OWVAR 20
28476: PUSH
28477: LD_OWVAR 2
28481: ST_TO_ADDR
// uc_nation := nation_american ;
28482: LD_ADDR_OWVAR 21
28486: PUSH
28487: LD_INT 1
28489: ST_TO_ADDR
// vc_chassis := us_morphling ;
28490: LD_ADDR_OWVAR 37
28494: PUSH
28495: LD_INT 5
28497: ST_TO_ADDR
// vc_engine := engine_siberite ;
28498: LD_ADDR_OWVAR 39
28502: PUSH
28503: LD_INT 3
28505: ST_TO_ADDR
// vc_control := control_computer ;
28506: LD_ADDR_OWVAR 38
28510: PUSH
28511: LD_INT 3
28513: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28514: LD_ADDR_OWVAR 40
28518: PUSH
28519: LD_INT 10
28521: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: PPUSH
28531: CALL_OW 310
28535: NOT
28536: IFFALSE 28583
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28538: CALL_OW 45
28542: PPUSH
28543: LD_VAR 0 2
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: CALL_OW 250
28556: PPUSH
28557: LD_VAR 0 2
28561: PUSH
28562: LD_INT 1
28564: ARRAY
28565: PPUSH
28566: CALL_OW 251
28570: PPUSH
28571: LD_INT 12
28573: PPUSH
28574: LD_INT 1
28576: PPUSH
28577: CALL_OW 50
28581: GO 28595
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28583: CALL_OW 45
28587: PPUSH
28588: LD_INT 1
28590: PPUSH
28591: CALL_OW 51
// end ;
28595: GO 28469
28597: POP
28598: POP
// end ;
28599: PPOPN 2
28601: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28602: LD_EXP 72
28606: PUSH
28607: LD_EXP 118
28611: AND
28612: IFFALSE 28834
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28625: LD_ADDR_VAR 0 6
28629: PUSH
28630: LD_INT 22
28632: PUSH
28633: LD_OWVAR 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 21
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 3
28654: PUSH
28655: LD_INT 23
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: PPUSH
28674: CALL_OW 69
28678: ST_TO_ADDR
// if not tmp then
28679: LD_VAR 0 6
28683: NOT
28684: IFFALSE 28688
// exit ;
28686: GO 28834
// s1 := rand ( 1 , 4 ) ;
28688: LD_ADDR_VAR 0 2
28692: PUSH
28693: LD_INT 1
28695: PPUSH
28696: LD_INT 4
28698: PPUSH
28699: CALL_OW 12
28703: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28704: LD_ADDR_VAR 0 4
28708: PUSH
28709: LD_VAR 0 6
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: PPUSH
28718: LD_VAR 0 2
28722: PPUSH
28723: CALL_OW 259
28727: ST_TO_ADDR
// if s1 = 1 then
28728: LD_VAR 0 2
28732: PUSH
28733: LD_INT 1
28735: EQUAL
28736: IFFALSE 28756
// s2 := rand ( 2 , 4 ) else
28738: LD_ADDR_VAR 0 3
28742: PUSH
28743: LD_INT 2
28745: PPUSH
28746: LD_INT 4
28748: PPUSH
28749: CALL_OW 12
28753: ST_TO_ADDR
28754: GO 28764
// s2 := 1 ;
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 1
28763: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28764: LD_ADDR_VAR 0 5
28768: PUSH
28769: LD_VAR 0 6
28773: PUSH
28774: LD_INT 1
28776: ARRAY
28777: PPUSH
28778: LD_VAR 0 3
28782: PPUSH
28783: CALL_OW 259
28787: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28788: LD_VAR 0 6
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PPUSH
28797: LD_VAR 0 2
28801: PPUSH
28802: LD_VAR 0 5
28806: PPUSH
28807: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28811: LD_VAR 0 6
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: LD_VAR 0 4
28829: PPUSH
28830: CALL_OW 237
// end ;
28834: PPOPN 6
28836: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28837: LD_EXP 72
28841: PUSH
28842: LD_EXP 119
28846: AND
28847: IFFALSE 28926
28849: GO 28851
28851: DISABLE
28852: LD_INT 0
28854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 30
28874: PUSH
28875: LD_INT 3
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PPUSH
28886: CALL_OW 69
28890: ST_TO_ADDR
// if not tmp then
28891: LD_VAR 0 1
28895: NOT
28896: IFFALSE 28900
// exit ;
28898: GO 28926
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28900: LD_VAR 0 1
28904: PUSH
28905: LD_INT 1
28907: PPUSH
28908: LD_VAR 0 1
28912: PPUSH
28913: CALL_OW 12
28917: ARRAY
28918: PPUSH
28919: LD_INT 1
28921: PPUSH
28922: CALL_OW 234
// end ;
28926: PPOPN 1
28928: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28929: LD_EXP 72
28933: PUSH
28934: LD_EXP 120
28938: AND
28939: IFFALSE 29051
28941: GO 28943
28943: DISABLE
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28948: LD_ADDR_VAR 0 2
28952: PUSH
28953: LD_INT 22
28955: PUSH
28956: LD_OWVAR 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 30
28970: PUSH
28971: LD_INT 27
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 30
28980: PUSH
28981: LD_INT 26
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 30
28990: PUSH
28991: LD_INT 28
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 69
29012: ST_TO_ADDR
// if not tmp then
29013: LD_VAR 0 2
29017: NOT
29018: IFFALSE 29022
// exit ;
29020: GO 29051
// for i in tmp do
29022: LD_ADDR_VAR 0 1
29026: PUSH
29027: LD_VAR 0 2
29031: PUSH
29032: FOR_IN
29033: IFFALSE 29049
// SetLives ( i , 1 ) ;
29035: LD_VAR 0 1
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 234
29047: GO 29032
29049: POP
29050: POP
// end ;
29051: PPOPN 2
29053: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29054: LD_EXP 72
29058: PUSH
29059: LD_EXP 121
29063: AND
29064: IFFALSE 29338
29066: GO 29068
29068: DISABLE
29069: LD_INT 0
29071: PPUSH
29072: PPUSH
29073: PPUSH
// begin i := rand ( 1 , 7 ) ;
29074: LD_ADDR_VAR 0 1
29078: PUSH
29079: LD_INT 1
29081: PPUSH
29082: LD_INT 7
29084: PPUSH
29085: CALL_OW 12
29089: ST_TO_ADDR
// case i of 1 :
29090: LD_VAR 0 1
29094: PUSH
29095: LD_INT 1
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29113
29103: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29104: LD_STRING earthquake(getX(game), 0, 32)
29106: PPUSH
29107: CALL_OW 559
29111: GO 29338
29113: LD_INT 2
29115: DOUBLE
29116: EQUAL
29117: IFTRUE 29121
29119: GO 29135
29121: POP
// begin ToLua ( displayStucuk(); ) ;
29122: LD_STRING displayStucuk();
29124: PPUSH
29125: CALL_OW 559
// ResetFog ;
29129: CALL_OW 335
// end ; 3 :
29133: GO 29338
29135: LD_INT 3
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29247
29143: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29144: LD_ADDR_VAR 0 2
29148: PUSH
29149: LD_INT 22
29151: PUSH
29152: LD_OWVAR 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 25
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 2
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29338
// un := tmp [ rand ( 1 , tmp ) ] ;
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_VAR 0 2
29198: PUSH
29199: LD_INT 1
29201: PPUSH
29202: LD_VAR 0 2
29206: PPUSH
29207: CALL_OW 12
29211: ARRAY
29212: ST_TO_ADDR
// if Crawls ( un ) then
29213: LD_VAR 0 3
29217: PPUSH
29218: CALL_OW 318
29222: IFFALSE 29233
// ComWalk ( un ) ;
29224: LD_VAR 0 3
29228: PPUSH
29229: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29233: LD_VAR 0 3
29237: PPUSH
29238: LD_INT 8
29240: PPUSH
29241: CALL_OW 336
// end ; 4 :
29245: GO 29338
29247: LD_INT 4
29249: DOUBLE
29250: EQUAL
29251: IFTRUE 29255
29253: GO 29316
29255: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29256: LD_ADDR_VAR 0 2
29260: PUSH
29261: LD_INT 22
29263: PUSH
29264: LD_OWVAR 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 30
29275: PUSH
29276: LD_INT 29
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PPUSH
29287: CALL_OW 69
29291: ST_TO_ADDR
// if not tmp then
29292: LD_VAR 0 2
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29338
// DestroyUnit ( tmp [ 1 ] ) ;
29301: LD_VAR 0 2
29305: PUSH
29306: LD_INT 1
29308: ARRAY
29309: PPUSH
29310: CALL_OW 65
// end ; 5 .. 7 :
29314: GO 29338
29316: LD_INT 5
29318: DOUBLE
29319: GREATEREQUAL
29320: IFFALSE 29328
29322: LD_INT 7
29324: DOUBLE
29325: LESSEQUAL
29326: IFTRUE 29330
29328: GO 29337
29330: POP
// StreamSibBomb ; end ;
29331: CALL 25588 0 0
29335: GO 29338
29337: POP
// end ;
29338: PPOPN 3
29340: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29341: LD_EXP 72
29345: PUSH
29346: LD_EXP 122
29350: AND
29351: IFFALSE 29507
29353: GO 29355
29355: DISABLE
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
29360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29361: LD_ADDR_VAR 0 2
29365: PUSH
29366: LD_INT 81
29368: PUSH
29369: LD_OWVAR 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: LD_INT 21
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 21
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PPUSH
29410: CALL_OW 69
29414: ST_TO_ADDR
// if not tmp then
29415: LD_VAR 0 2
29419: NOT
29420: IFFALSE 29424
// exit ;
29422: GO 29507
// p := 0 ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 0
29431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29432: LD_INT 35
29434: PPUSH
29435: CALL_OW 67
// p := p + 1 ;
29439: LD_ADDR_VAR 0 3
29443: PUSH
29444: LD_VAR 0 3
29448: PUSH
29449: LD_INT 1
29451: PLUS
29452: ST_TO_ADDR
// for i in tmp do
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_VAR 0 2
29462: PUSH
29463: FOR_IN
29464: IFFALSE 29495
// if GetLives ( i ) < 1000 then
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 256
29475: PUSH
29476: LD_INT 1000
29478: LESS
29479: IFFALSE 29493
// SetLives ( i , 1000 ) ;
29481: LD_VAR 0 1
29485: PPUSH
29486: LD_INT 1000
29488: PPUSH
29489: CALL_OW 234
29493: GO 29463
29495: POP
29496: POP
// until p > 20 ;
29497: LD_VAR 0 3
29501: PUSH
29502: LD_INT 20
29504: GREATER
29505: IFFALSE 29432
// end ;
29507: PPOPN 3
29509: END
// every 0 0$1 trigger StreamModeActive and sTime do
29510: LD_EXP 72
29514: PUSH
29515: LD_EXP 123
29519: AND
29520: IFFALSE 29555
29522: GO 29524
29524: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29525: LD_INT 28
29527: PPUSH
29528: LD_OWVAR 2
29532: PPUSH
29533: LD_INT 2
29535: PPUSH
29536: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29540: LD_INT 30
29542: PPUSH
29543: LD_OWVAR 2
29547: PPUSH
29548: LD_INT 2
29550: PPUSH
29551: CALL_OW 322
// end ;
29555: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29556: LD_EXP 72
29560: PUSH
29561: LD_EXP 124
29565: AND
29566: IFFALSE 29687
29568: GO 29570
29570: DISABLE
29571: LD_INT 0
29573: PPUSH
29574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29575: LD_ADDR_VAR 0 2
29579: PUSH
29580: LD_INT 22
29582: PUSH
29583: LD_OWVAR 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 21
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 23
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: PPUSH
29624: CALL_OW 69
29628: ST_TO_ADDR
// if not tmp then
29629: LD_VAR 0 2
29633: NOT
29634: IFFALSE 29638
// exit ;
29636: GO 29687
// for i in tmp do
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_VAR 0 2
29647: PUSH
29648: FOR_IN
29649: IFFALSE 29685
// begin if Crawls ( i ) then
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL_OW 318
29660: IFFALSE 29671
// ComWalk ( i ) ;
29662: LD_VAR 0 1
29666: PPUSH
29667: CALL_OW 138
// SetClass ( i , 2 ) ;
29671: LD_VAR 0 1
29675: PPUSH
29676: LD_INT 2
29678: PPUSH
29679: CALL_OW 336
// end ;
29683: GO 29648
29685: POP
29686: POP
// end ;
29687: PPOPN 2
29689: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29690: LD_EXP 72
29694: PUSH
29695: LD_EXP 125
29699: AND
29700: IFFALSE 29981
29702: GO 29704
29704: DISABLE
29705: LD_INT 0
29707: PPUSH
29708: PPUSH
29709: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29710: LD_OWVAR 2
29714: PPUSH
29715: LD_INT 9
29717: PPUSH
29718: LD_INT 1
29720: PPUSH
29721: LD_INT 1
29723: PPUSH
29724: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29728: LD_INT 9
29730: PPUSH
29731: LD_OWVAR 2
29735: PPUSH
29736: CALL_OW 343
// uc_side := 9 ;
29740: LD_ADDR_OWVAR 20
29744: PUSH
29745: LD_INT 9
29747: ST_TO_ADDR
// uc_nation := 2 ;
29748: LD_ADDR_OWVAR 21
29752: PUSH
29753: LD_INT 2
29755: ST_TO_ADDR
// hc_name := Dark Warrior ;
29756: LD_ADDR_OWVAR 26
29760: PUSH
29761: LD_STRING Dark Warrior
29763: ST_TO_ADDR
// hc_gallery :=  ;
29764: LD_ADDR_OWVAR 33
29768: PUSH
29769: LD_STRING 
29771: ST_TO_ADDR
// hc_noskilllimit := true ;
29772: LD_ADDR_OWVAR 76
29776: PUSH
29777: LD_INT 1
29779: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29780: LD_ADDR_OWVAR 31
29784: PUSH
29785: LD_INT 30
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: LD_INT 30
29793: PUSH
29794: LD_INT 30
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// un := CreateHuman ;
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: CALL_OW 44
29812: ST_TO_ADDR
// hc_noskilllimit := false ;
29813: LD_ADDR_OWVAR 76
29817: PUSH
29818: LD_INT 0
29820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29821: LD_VAR 0 3
29825: PPUSH
29826: LD_INT 1
29828: PPUSH
29829: CALL_OW 51
// p := 0 ;
29833: LD_ADDR_VAR 0 2
29837: PUSH
29838: LD_INT 0
29840: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29841: LD_INT 35
29843: PPUSH
29844: CALL_OW 67
// p := p + 1 ;
29848: LD_ADDR_VAR 0 2
29852: PUSH
29853: LD_VAR 0 2
29857: PUSH
29858: LD_INT 1
29860: PLUS
29861: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29862: LD_VAR 0 3
29866: PPUSH
29867: CALL_OW 256
29871: PUSH
29872: LD_INT 1000
29874: LESS
29875: IFFALSE 29889
// SetLives ( un , 1000 ) ;
29877: LD_VAR 0 3
29881: PPUSH
29882: LD_INT 1000
29884: PPUSH
29885: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29889: LD_VAR 0 3
29893: PPUSH
29894: LD_INT 81
29896: PUSH
29897: LD_OWVAR 2
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 91
29908: PUSH
29909: LD_VAR 0 3
29913: PUSH
29914: LD_INT 30
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PPUSH
29926: CALL_OW 69
29930: PPUSH
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 74
29940: PPUSH
29941: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29945: LD_VAR 0 2
29949: PUSH
29950: LD_INT 60
29952: GREATER
29953: PUSH
29954: LD_VAR 0 3
29958: PPUSH
29959: CALL_OW 301
29963: OR
29964: IFFALSE 29841
// if un then
29966: LD_VAR 0 3
29970: IFFALSE 29981
// RemoveUnit ( un ) ;
29972: LD_VAR 0 3
29976: PPUSH
29977: CALL_OW 64
// end ;
29981: PPOPN 3
29983: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29984: LD_INT 0
29986: PPUSH
// case cmd of 301 :
29987: LD_VAR 0 1
29991: PUSH
29992: LD_INT 301
29994: DOUBLE
29995: EQUAL
29996: IFTRUE 30000
29998: GO 30032
30000: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30001: LD_VAR 0 6
30005: PPUSH
30006: LD_VAR 0 7
30010: PPUSH
30011: LD_VAR 0 8
30015: PPUSH
30016: LD_VAR 0 4
30020: PPUSH
30021: LD_VAR 0 5
30025: PPUSH
30026: CALL 31233 0 5
30030: GO 30153
30032: LD_INT 302
30034: DOUBLE
30035: EQUAL
30036: IFTRUE 30040
30038: GO 30077
30040: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30041: LD_VAR 0 6
30045: PPUSH
30046: LD_VAR 0 7
30050: PPUSH
30051: LD_VAR 0 8
30055: PPUSH
30056: LD_VAR 0 9
30060: PPUSH
30061: LD_VAR 0 4
30065: PPUSH
30066: LD_VAR 0 5
30070: PPUSH
30071: CALL 31324 0 6
30075: GO 30153
30077: LD_INT 303
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30122
30085: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30086: LD_VAR 0 6
30090: PPUSH
30091: LD_VAR 0 7
30095: PPUSH
30096: LD_VAR 0 8
30100: PPUSH
30101: LD_VAR 0 9
30105: PPUSH
30106: LD_VAR 0 4
30110: PPUSH
30111: LD_VAR 0 5
30115: PPUSH
30116: CALL 30158 0 6
30120: GO 30153
30122: LD_INT 304
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30152
30130: POP
// hHackTeleport ( unit , x , y ) ; end ;
30131: LD_VAR 0 2
30135: PPUSH
30136: LD_VAR 0 4
30140: PPUSH
30141: LD_VAR 0 5
30145: PPUSH
30146: CALL 31917 0 3
30150: GO 30153
30152: POP
// end ;
30153: LD_VAR 0 12
30157: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30158: LD_INT 0
30160: PPUSH
30161: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30162: LD_VAR 0 1
30166: PUSH
30167: LD_INT 1
30169: LESS
30170: PUSH
30171: LD_VAR 0 1
30175: PUSH
30176: LD_INT 3
30178: GREATER
30179: OR
30180: PUSH
30181: LD_VAR 0 5
30185: PPUSH
30186: LD_VAR 0 6
30190: PPUSH
30191: CALL_OW 428
30195: OR
30196: IFFALSE 30200
// exit ;
30198: GO 30920
// uc_side := your_side ;
30200: LD_ADDR_OWVAR 20
30204: PUSH
30205: LD_OWVAR 2
30209: ST_TO_ADDR
// uc_nation := nation ;
30210: LD_ADDR_OWVAR 21
30214: PUSH
30215: LD_VAR 0 1
30219: ST_TO_ADDR
// bc_level = 1 ;
30220: LD_ADDR_OWVAR 43
30224: PUSH
30225: LD_INT 1
30227: ST_TO_ADDR
// case btype of 1 :
30228: LD_VAR 0 2
30232: PUSH
30233: LD_INT 1
30235: DOUBLE
30236: EQUAL
30237: IFTRUE 30241
30239: GO 30252
30241: POP
// bc_type := b_depot ; 2 :
30242: LD_ADDR_OWVAR 42
30246: PUSH
30247: LD_INT 0
30249: ST_TO_ADDR
30250: GO 30864
30252: LD_INT 2
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30271
30260: POP
// bc_type := b_warehouse ; 3 :
30261: LD_ADDR_OWVAR 42
30265: PUSH
30266: LD_INT 1
30268: ST_TO_ADDR
30269: GO 30864
30271: LD_INT 3
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30290
30279: POP
// bc_type := b_lab ; 4 .. 9 :
30280: LD_ADDR_OWVAR 42
30284: PUSH
30285: LD_INT 6
30287: ST_TO_ADDR
30288: GO 30864
30290: LD_INT 4
30292: DOUBLE
30293: GREATEREQUAL
30294: IFFALSE 30302
30296: LD_INT 9
30298: DOUBLE
30299: LESSEQUAL
30300: IFTRUE 30304
30302: GO 30356
30304: POP
// begin bc_type := b_lab_half ;
30305: LD_ADDR_OWVAR 42
30309: PUSH
30310: LD_INT 7
30312: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30313: LD_ADDR_OWVAR 44
30317: PUSH
30318: LD_INT 10
30320: PUSH
30321: LD_INT 11
30323: PUSH
30324: LD_INT 12
30326: PUSH
30327: LD_INT 15
30329: PUSH
30330: LD_INT 14
30332: PUSH
30333: LD_INT 13
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: PUSH
30344: LD_VAR 0 2
30348: PUSH
30349: LD_INT 3
30351: MINUS
30352: ARRAY
30353: ST_TO_ADDR
// end ; 10 .. 13 :
30354: GO 30864
30356: LD_INT 10
30358: DOUBLE
30359: GREATEREQUAL
30360: IFFALSE 30368
30362: LD_INT 13
30364: DOUBLE
30365: LESSEQUAL
30366: IFTRUE 30370
30368: GO 30447
30370: POP
// begin bc_type := b_lab_full ;
30371: LD_ADDR_OWVAR 42
30375: PUSH
30376: LD_INT 8
30378: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30379: LD_ADDR_OWVAR 44
30383: PUSH
30384: LD_INT 10
30386: PUSH
30387: LD_INT 12
30389: PUSH
30390: LD_INT 14
30392: PUSH
30393: LD_INT 13
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: PUSH
30402: LD_VAR 0 2
30406: PUSH
30407: LD_INT 9
30409: MINUS
30410: ARRAY
30411: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30412: LD_ADDR_OWVAR 45
30416: PUSH
30417: LD_INT 11
30419: PUSH
30420: LD_INT 15
30422: PUSH
30423: LD_INT 12
30425: PUSH
30426: LD_INT 15
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: PUSH
30435: LD_VAR 0 2
30439: PUSH
30440: LD_INT 9
30442: MINUS
30443: ARRAY
30444: ST_TO_ADDR
// end ; 14 :
30445: GO 30864
30447: LD_INT 14
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30466
30455: POP
// bc_type := b_workshop ; 15 :
30456: LD_ADDR_OWVAR 42
30460: PUSH
30461: LD_INT 2
30463: ST_TO_ADDR
30464: GO 30864
30466: LD_INT 15
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 30485
30474: POP
// bc_type := b_factory ; 16 :
30475: LD_ADDR_OWVAR 42
30479: PUSH
30480: LD_INT 3
30482: ST_TO_ADDR
30483: GO 30864
30485: LD_INT 16
30487: DOUBLE
30488: EQUAL
30489: IFTRUE 30493
30491: GO 30504
30493: POP
// bc_type := b_ext_gun ; 17 :
30494: LD_ADDR_OWVAR 42
30498: PUSH
30499: LD_INT 17
30501: ST_TO_ADDR
30502: GO 30864
30504: LD_INT 17
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30540
30512: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30513: LD_ADDR_OWVAR 42
30517: PUSH
30518: LD_INT 19
30520: PUSH
30521: LD_INT 23
30523: PUSH
30524: LD_INT 19
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: ST_TO_ADDR
30538: GO 30864
30540: LD_INT 18
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30559
30548: POP
// bc_type := b_ext_radar ; 19 :
30549: LD_ADDR_OWVAR 42
30553: PUSH
30554: LD_INT 20
30556: ST_TO_ADDR
30557: GO 30864
30559: LD_INT 19
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30578
30567: POP
// bc_type := b_ext_radio ; 20 :
30568: LD_ADDR_OWVAR 42
30572: PUSH
30573: LD_INT 22
30575: ST_TO_ADDR
30576: GO 30864
30578: LD_INT 20
30580: DOUBLE
30581: EQUAL
30582: IFTRUE 30586
30584: GO 30597
30586: POP
// bc_type := b_ext_siberium ; 21 :
30587: LD_ADDR_OWVAR 42
30591: PUSH
30592: LD_INT 21
30594: ST_TO_ADDR
30595: GO 30864
30597: LD_INT 21
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30616
30605: POP
// bc_type := b_ext_computer ; 22 :
30606: LD_ADDR_OWVAR 42
30610: PUSH
30611: LD_INT 24
30613: ST_TO_ADDR
30614: GO 30864
30616: LD_INT 22
30618: DOUBLE
30619: EQUAL
30620: IFTRUE 30624
30622: GO 30635
30624: POP
// bc_type := b_ext_track ; 23 :
30625: LD_ADDR_OWVAR 42
30629: PUSH
30630: LD_INT 16
30632: ST_TO_ADDR
30633: GO 30864
30635: LD_INT 23
30637: DOUBLE
30638: EQUAL
30639: IFTRUE 30643
30641: GO 30654
30643: POP
// bc_type := b_ext_laser ; 24 :
30644: LD_ADDR_OWVAR 42
30648: PUSH
30649: LD_INT 25
30651: ST_TO_ADDR
30652: GO 30864
30654: LD_INT 24
30656: DOUBLE
30657: EQUAL
30658: IFTRUE 30662
30660: GO 30673
30662: POP
// bc_type := b_control_tower ; 25 :
30663: LD_ADDR_OWVAR 42
30667: PUSH
30668: LD_INT 36
30670: ST_TO_ADDR
30671: GO 30864
30673: LD_INT 25
30675: DOUBLE
30676: EQUAL
30677: IFTRUE 30681
30679: GO 30692
30681: POP
// bc_type := b_breastwork ; 26 :
30682: LD_ADDR_OWVAR 42
30686: PUSH
30687: LD_INT 31
30689: ST_TO_ADDR
30690: GO 30864
30692: LD_INT 26
30694: DOUBLE
30695: EQUAL
30696: IFTRUE 30700
30698: GO 30711
30700: POP
// bc_type := b_bunker ; 27 :
30701: LD_ADDR_OWVAR 42
30705: PUSH
30706: LD_INT 32
30708: ST_TO_ADDR
30709: GO 30864
30711: LD_INT 27
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30730
30719: POP
// bc_type := b_turret ; 28 :
30720: LD_ADDR_OWVAR 42
30724: PUSH
30725: LD_INT 33
30727: ST_TO_ADDR
30728: GO 30864
30730: LD_INT 28
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30749
30738: POP
// bc_type := b_armoury ; 29 :
30739: LD_ADDR_OWVAR 42
30743: PUSH
30744: LD_INT 4
30746: ST_TO_ADDR
30747: GO 30864
30749: LD_INT 29
30751: DOUBLE
30752: EQUAL
30753: IFTRUE 30757
30755: GO 30768
30757: POP
// bc_type := b_barracks ; 30 :
30758: LD_ADDR_OWVAR 42
30762: PUSH
30763: LD_INT 5
30765: ST_TO_ADDR
30766: GO 30864
30768: LD_INT 30
30770: DOUBLE
30771: EQUAL
30772: IFTRUE 30776
30774: GO 30787
30776: POP
// bc_type := b_solar_power ; 31 :
30777: LD_ADDR_OWVAR 42
30781: PUSH
30782: LD_INT 27
30784: ST_TO_ADDR
30785: GO 30864
30787: LD_INT 31
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30806
30795: POP
// bc_type := b_oil_power ; 32 :
30796: LD_ADDR_OWVAR 42
30800: PUSH
30801: LD_INT 26
30803: ST_TO_ADDR
30804: GO 30864
30806: LD_INT 32
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30825
30814: POP
// bc_type := b_siberite_power ; 33 :
30815: LD_ADDR_OWVAR 42
30819: PUSH
30820: LD_INT 28
30822: ST_TO_ADDR
30823: GO 30864
30825: LD_INT 33
30827: DOUBLE
30828: EQUAL
30829: IFTRUE 30833
30831: GO 30844
30833: POP
// bc_type := b_oil_mine ; 34 :
30834: LD_ADDR_OWVAR 42
30838: PUSH
30839: LD_INT 29
30841: ST_TO_ADDR
30842: GO 30864
30844: LD_INT 34
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30863
30852: POP
// bc_type := b_siberite_mine ; end ;
30853: LD_ADDR_OWVAR 42
30857: PUSH
30858: LD_INT 30
30860: ST_TO_ADDR
30861: GO 30864
30863: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30864: LD_ADDR_VAR 0 8
30868: PUSH
30869: LD_VAR 0 5
30873: PPUSH
30874: LD_VAR 0 6
30878: PPUSH
30879: LD_VAR 0 3
30883: PPUSH
30884: CALL_OW 47
30888: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30889: LD_OWVAR 42
30893: PUSH
30894: LD_INT 32
30896: PUSH
30897: LD_INT 33
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: IN
30904: IFFALSE 30920
// PlaceWeaponTurret ( b , weapon ) ;
30906: LD_VAR 0 8
30910: PPUSH
30911: LD_VAR 0 4
30915: PPUSH
30916: CALL_OW 431
// end ;
30920: LD_VAR 0 7
30924: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30925: LD_INT 0
30927: PPUSH
30928: PPUSH
30929: PPUSH
30930: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30931: LD_ADDR_VAR 0 4
30935: PUSH
30936: LD_INT 22
30938: PUSH
30939: LD_OWVAR 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 30
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 30
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PPUSH
30980: CALL_OW 69
30984: ST_TO_ADDR
// if not tmp then
30985: LD_VAR 0 4
30989: NOT
30990: IFFALSE 30994
// exit ;
30992: GO 31053
// for i in tmp do
30994: LD_ADDR_VAR 0 2
30998: PUSH
30999: LD_VAR 0 4
31003: PUSH
31004: FOR_IN
31005: IFFALSE 31051
// for j = 1 to 3 do
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: DOUBLE
31013: LD_INT 1
31015: DEC
31016: ST_TO_ADDR
31017: LD_INT 3
31019: PUSH
31020: FOR_TO
31021: IFFALSE 31047
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31023: LD_VAR 0 2
31027: PPUSH
31028: CALL_OW 274
31032: PPUSH
31033: LD_VAR 0 3
31037: PPUSH
31038: LD_INT 99999
31040: PPUSH
31041: CALL_OW 277
31045: GO 31020
31047: POP
31048: POP
31049: GO 31004
31051: POP
31052: POP
// end ;
31053: LD_VAR 0 1
31057: RET
// export function hHackSetLevel10 ; var i , j ; begin
31058: LD_INT 0
31060: PPUSH
31061: PPUSH
31062: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31063: LD_ADDR_VAR 0 2
31067: PUSH
31068: LD_INT 21
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PPUSH
31078: CALL_OW 69
31082: PUSH
31083: FOR_IN
31084: IFFALSE 31136
// if IsSelected ( i ) then
31086: LD_VAR 0 2
31090: PPUSH
31091: CALL_OW 306
31095: IFFALSE 31134
// begin for j := 1 to 4 do
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: DOUBLE
31103: LD_INT 1
31105: DEC
31106: ST_TO_ADDR
31107: LD_INT 4
31109: PUSH
31110: FOR_TO
31111: IFFALSE 31132
// SetSkill ( i , j , 10 ) ;
31113: LD_VAR 0 2
31117: PPUSH
31118: LD_VAR 0 3
31122: PPUSH
31123: LD_INT 10
31125: PPUSH
31126: CALL_OW 237
31130: GO 31110
31132: POP
31133: POP
// end ;
31134: GO 31083
31136: POP
31137: POP
// end ;
31138: LD_VAR 0 1
31142: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31143: LD_INT 0
31145: PPUSH
31146: PPUSH
31147: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31148: LD_ADDR_VAR 0 2
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_OWVAR 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 21
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: PUSH
31184: FOR_IN
31185: IFFALSE 31226
// begin for j := 1 to 4 do
31187: LD_ADDR_VAR 0 3
31191: PUSH
31192: DOUBLE
31193: LD_INT 1
31195: DEC
31196: ST_TO_ADDR
31197: LD_INT 4
31199: PUSH
31200: FOR_TO
31201: IFFALSE 31222
// SetSkill ( i , j , 10 ) ;
31203: LD_VAR 0 2
31207: PPUSH
31208: LD_VAR 0 3
31212: PPUSH
31213: LD_INT 10
31215: PPUSH
31216: CALL_OW 237
31220: GO 31200
31222: POP
31223: POP
// end ;
31224: GO 31184
31226: POP
31227: POP
// end ;
31228: LD_VAR 0 1
31232: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31233: LD_INT 0
31235: PPUSH
// uc_side := your_side ;
31236: LD_ADDR_OWVAR 20
31240: PUSH
31241: LD_OWVAR 2
31245: ST_TO_ADDR
// uc_nation := nation ;
31246: LD_ADDR_OWVAR 21
31250: PUSH
31251: LD_VAR 0 1
31255: ST_TO_ADDR
// InitHc ;
31256: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31260: LD_INT 0
31262: PPUSH
31263: LD_VAR 0 2
31267: PPUSH
31268: LD_VAR 0 3
31272: PPUSH
31273: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31277: LD_VAR 0 4
31281: PPUSH
31282: LD_VAR 0 5
31286: PPUSH
31287: CALL_OW 428
31291: PUSH
31292: LD_INT 0
31294: EQUAL
31295: IFFALSE 31319
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31297: CALL_OW 44
31301: PPUSH
31302: LD_VAR 0 4
31306: PPUSH
31307: LD_VAR 0 5
31311: PPUSH
31312: LD_INT 1
31314: PPUSH
31315: CALL_OW 48
// end ;
31319: LD_VAR 0 6
31323: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31324: LD_INT 0
31326: PPUSH
31327: PPUSH
// uc_side := your_side ;
31328: LD_ADDR_OWVAR 20
31332: PUSH
31333: LD_OWVAR 2
31337: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31338: LD_VAR 0 1
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 4
31354: PUSH
31355: LD_INT 5
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: IFFALSE 31377
// uc_nation := nation_american else
31367: LD_ADDR_OWVAR 21
31371: PUSH
31372: LD_INT 1
31374: ST_TO_ADDR
31375: GO 31420
// if chassis in [ 11 , 12 , 13 , 14 ] then
31377: LD_VAR 0 1
31381: PUSH
31382: LD_INT 11
31384: PUSH
31385: LD_INT 12
31387: PUSH
31388: LD_INT 13
31390: PUSH
31391: LD_INT 14
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: IN
31400: IFFALSE 31412
// uc_nation := nation_arabian else
31402: LD_ADDR_OWVAR 21
31406: PUSH
31407: LD_INT 2
31409: ST_TO_ADDR
31410: GO 31420
// uc_nation := nation_russian ;
31412: LD_ADDR_OWVAR 21
31416: PUSH
31417: LD_INT 3
31419: ST_TO_ADDR
// vc_chassis := chassis ;
31420: LD_ADDR_OWVAR 37
31424: PUSH
31425: LD_VAR 0 1
31429: ST_TO_ADDR
// vc_engine := engine ;
31430: LD_ADDR_OWVAR 39
31434: PUSH
31435: LD_VAR 0 2
31439: ST_TO_ADDR
// vc_control := control ;
31440: LD_ADDR_OWVAR 38
31444: PUSH
31445: LD_VAR 0 3
31449: ST_TO_ADDR
// vc_weapon := weapon ;
31450: LD_ADDR_OWVAR 40
31454: PUSH
31455: LD_VAR 0 4
31459: ST_TO_ADDR
// un := CreateVehicle ;
31460: LD_ADDR_VAR 0 8
31464: PUSH
31465: CALL_OW 45
31469: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31470: LD_VAR 0 8
31474: PPUSH
31475: LD_INT 0
31477: PPUSH
31478: LD_INT 5
31480: PPUSH
31481: CALL_OW 12
31485: PPUSH
31486: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31490: LD_VAR 0 8
31494: PPUSH
31495: LD_VAR 0 5
31499: PPUSH
31500: LD_VAR 0 6
31504: PPUSH
31505: LD_INT 1
31507: PPUSH
31508: CALL_OW 48
// end ;
31512: LD_VAR 0 7
31516: RET
// export hInvincible ; every 1 do
31517: GO 31519
31519: DISABLE
// hInvincible := [ ] ;
31520: LD_ADDR_EXP 126
31524: PUSH
31525: EMPTY
31526: ST_TO_ADDR
31527: END
// every 10 do var i ;
31528: GO 31530
31530: DISABLE
31531: LD_INT 0
31533: PPUSH
// begin enable ;
31534: ENABLE
// if not hInvincible then
31535: LD_EXP 126
31539: NOT
31540: IFFALSE 31544
// exit ;
31542: GO 31588
// for i in hInvincible do
31544: LD_ADDR_VAR 0 1
31548: PUSH
31549: LD_EXP 126
31553: PUSH
31554: FOR_IN
31555: IFFALSE 31586
// if GetLives ( i ) < 1000 then
31557: LD_VAR 0 1
31561: PPUSH
31562: CALL_OW 256
31566: PUSH
31567: LD_INT 1000
31569: LESS
31570: IFFALSE 31584
// SetLives ( i , 1000 ) ;
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_INT 1000
31579: PPUSH
31580: CALL_OW 234
31584: GO 31554
31586: POP
31587: POP
// end ;
31588: PPOPN 1
31590: END
// export function hHackInvincible ; var i ; begin
31591: LD_INT 0
31593: PPUSH
31594: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31595: LD_ADDR_VAR 0 2
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: LD_INT 21
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 21
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 69
31632: PUSH
31633: FOR_IN
31634: IFFALSE 31695
// if IsSelected ( i ) then
31636: LD_VAR 0 2
31640: PPUSH
31641: CALL_OW 306
31645: IFFALSE 31693
// begin if i in hInvincible then
31647: LD_VAR 0 2
31651: PUSH
31652: LD_EXP 126
31656: IN
31657: IFFALSE 31677
// hInvincible := hInvincible diff i else
31659: LD_ADDR_EXP 126
31663: PUSH
31664: LD_EXP 126
31668: PUSH
31669: LD_VAR 0 2
31673: DIFF
31674: ST_TO_ADDR
31675: GO 31693
// hInvincible := hInvincible union i ;
31677: LD_ADDR_EXP 126
31681: PUSH
31682: LD_EXP 126
31686: PUSH
31687: LD_VAR 0 2
31691: UNION
31692: ST_TO_ADDR
// end ;
31693: GO 31633
31695: POP
31696: POP
// end ;
31697: LD_VAR 0 1
31701: RET
// export function hHackInvisible ; var i , j ; begin
31702: LD_INT 0
31704: PPUSH
31705: PPUSH
31706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31707: LD_ADDR_VAR 0 2
31711: PUSH
31712: LD_INT 21
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PPUSH
31722: CALL_OW 69
31726: PUSH
31727: FOR_IN
31728: IFFALSE 31752
// if IsSelected ( i ) then
31730: LD_VAR 0 2
31734: PPUSH
31735: CALL_OW 306
31739: IFFALSE 31750
// ComForceInvisible ( i ) ;
31741: LD_VAR 0 2
31745: PPUSH
31746: CALL_OW 496
31750: GO 31727
31752: POP
31753: POP
// end ;
31754: LD_VAR 0 1
31758: RET
// export function hHackChangeYourSide ; begin
31759: LD_INT 0
31761: PPUSH
// if your_side = 8 then
31762: LD_OWVAR 2
31766: PUSH
31767: LD_INT 8
31769: EQUAL
31770: IFFALSE 31782
// your_side := 0 else
31772: LD_ADDR_OWVAR 2
31776: PUSH
31777: LD_INT 0
31779: ST_TO_ADDR
31780: GO 31796
// your_side := your_side + 1 ;
31782: LD_ADDR_OWVAR 2
31786: PUSH
31787: LD_OWVAR 2
31791: PUSH
31792: LD_INT 1
31794: PLUS
31795: ST_TO_ADDR
// end ;
31796: LD_VAR 0 1
31800: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31801: LD_INT 0
31803: PPUSH
31804: PPUSH
31805: PPUSH
// for i in all_units do
31806: LD_ADDR_VAR 0 2
31810: PUSH
31811: LD_OWVAR 3
31815: PUSH
31816: FOR_IN
31817: IFFALSE 31895
// if IsSelected ( i ) then
31819: LD_VAR 0 2
31823: PPUSH
31824: CALL_OW 306
31828: IFFALSE 31893
// begin j := GetSide ( i ) ;
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: LD_VAR 0 2
31839: PPUSH
31840: CALL_OW 255
31844: ST_TO_ADDR
// if j = 8 then
31845: LD_VAR 0 3
31849: PUSH
31850: LD_INT 8
31852: EQUAL
31853: IFFALSE 31865
// j := 0 else
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
31863: GO 31879
// j := j + 1 ;
31865: LD_ADDR_VAR 0 3
31869: PUSH
31870: LD_VAR 0 3
31874: PUSH
31875: LD_INT 1
31877: PLUS
31878: ST_TO_ADDR
// SetSide ( i , j ) ;
31879: LD_VAR 0 2
31883: PPUSH
31884: LD_VAR 0 3
31888: PPUSH
31889: CALL_OW 235
// end ;
31893: GO 31816
31895: POP
31896: POP
// end ;
31897: LD_VAR 0 1
31901: RET
// export function hHackFog ; begin
31902: LD_INT 0
31904: PPUSH
// FogOff ( true ) ;
31905: LD_INT 1
31907: PPUSH
31908: CALL_OW 344
// end ;
31912: LD_VAR 0 1
31916: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31917: LD_INT 0
31919: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: LD_INT 1
31937: PPUSH
31938: LD_INT 1
31940: PPUSH
31941: CALL_OW 483
// CenterOnXY ( x , y ) ;
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 3
31954: PPUSH
31955: CALL_OW 84
// end ; end_of_file
31959: LD_VAR 0 4
31963: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31970: LD_VAR 0 1
31974: PPUSH
31975: CALL_OW 264
31979: PUSH
31980: LD_EXP 58
31984: EQUAL
31985: IFFALSE 32057
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31987: LD_INT 68
31989: PPUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 255
31999: PPUSH
32000: CALL_OW 321
32004: PUSH
32005: LD_INT 2
32007: EQUAL
32008: IFFALSE 32020
// eff := 70 else
32010: LD_ADDR_VAR 0 4
32014: PUSH
32015: LD_INT 70
32017: ST_TO_ADDR
32018: GO 32028
// eff := 30 ;
32020: LD_ADDR_VAR 0 4
32024: PUSH
32025: LD_INT 30
32027: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 250
32037: PPUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 251
32047: PPUSH
32048: LD_VAR 0 4
32052: PPUSH
32053: CALL_OW 495
// end ; end ;
32057: LD_VAR 0 2
32061: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32062: LD_INT 0
32064: PPUSH
// end ;
32065: LD_VAR 0 4
32069: RET
// export function SOS_Command ( cmd ) ; begin
32070: LD_INT 0
32072: PPUSH
// end ;
32073: LD_VAR 0 2
32077: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32078: LD_INT 0
32080: PPUSH
// if cmd = 121 then
32081: LD_VAR 0 1
32085: PUSH
32086: LD_INT 121
32088: EQUAL
32089: IFFALSE 32091
// end ;
32091: LD_VAR 0 6
32095: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32096: LD_INT 0
32098: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32099: LD_VAR 0 1
32103: PUSH
32104: LD_INT 250
32106: EQUAL
32107: PUSH
32108: LD_VAR 0 2
32112: PPUSH
32113: CALL_OW 264
32117: PUSH
32118: LD_EXP 61
32122: EQUAL
32123: AND
32124: IFFALSE 32145
// MinerPlaceMine ( unit , x , y ) ;
32126: LD_VAR 0 2
32130: PPUSH
32131: LD_VAR 0 4
32135: PPUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: CALL 34494 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32145: LD_VAR 0 1
32149: PUSH
32150: LD_INT 251
32152: EQUAL
32153: PUSH
32154: LD_VAR 0 2
32158: PPUSH
32159: CALL_OW 264
32163: PUSH
32164: LD_EXP 61
32168: EQUAL
32169: AND
32170: IFFALSE 32191
// MinerDetonateMine ( unit , x , y ) ;
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_VAR 0 4
32181: PPUSH
32182: LD_VAR 0 5
32186: PPUSH
32187: CALL 34771 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32191: LD_VAR 0 1
32195: PUSH
32196: LD_INT 252
32198: EQUAL
32199: PUSH
32200: LD_VAR 0 2
32204: PPUSH
32205: CALL_OW 264
32209: PUSH
32210: LD_EXP 61
32214: EQUAL
32215: AND
32216: IFFALSE 32237
// MinerCreateMinefield ( unit , x , y ) ;
32218: LD_VAR 0 2
32222: PPUSH
32223: LD_VAR 0 4
32227: PPUSH
32228: LD_VAR 0 5
32232: PPUSH
32233: CALL 35188 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32237: LD_VAR 0 1
32241: PUSH
32242: LD_INT 253
32244: EQUAL
32245: PUSH
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 257
32255: PUSH
32256: LD_INT 5
32258: EQUAL
32259: AND
32260: IFFALSE 32281
// ComBinocular ( unit , x , y ) ;
32262: LD_VAR 0 2
32266: PPUSH
32267: LD_VAR 0 4
32271: PPUSH
32272: LD_VAR 0 5
32276: PPUSH
32277: CALL 35559 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32281: LD_VAR 0 1
32285: PUSH
32286: LD_INT 254
32288: EQUAL
32289: PUSH
32290: LD_VAR 0 2
32294: PPUSH
32295: CALL_OW 264
32299: PUSH
32300: LD_EXP 56
32304: EQUAL
32305: AND
32306: PUSH
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL_OW 263
32316: PUSH
32317: LD_INT 3
32319: EQUAL
32320: AND
32321: IFFALSE 32337
// HackDestroyVehicle ( unit , selectedUnit ) ;
32323: LD_VAR 0 2
32327: PPUSH
32328: LD_VAR 0 3
32332: PPUSH
32333: CALL 33854 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32337: LD_VAR 0 1
32341: PUSH
32342: LD_INT 255
32344: EQUAL
32345: PUSH
32346: LD_VAR 0 2
32350: PPUSH
32351: CALL_OW 264
32355: PUSH
32356: LD_INT 14
32358: PUSH
32359: LD_INT 53
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: IN
32366: AND
32367: PUSH
32368: LD_VAR 0 4
32372: PPUSH
32373: LD_VAR 0 5
32377: PPUSH
32378: CALL_OW 488
32382: AND
32383: IFFALSE 32407
// CutTreeXYR ( unit , x , y , 12 ) ;
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 4
32394: PPUSH
32395: LD_VAR 0 5
32399: PPUSH
32400: LD_INT 12
32402: PPUSH
32403: CALL 32420 0 4
// end ;
32407: LD_VAR 0 6
32411: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32412: LD_INT 0
32414: PPUSH
// end ;
32415: LD_VAR 0 4
32419: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
32425: PPUSH
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32431: LD_VAR 0 1
32435: NOT
32436: PUSH
32437: LD_VAR 0 2
32441: PPUSH
32442: LD_VAR 0 3
32446: PPUSH
32447: CALL_OW 488
32451: NOT
32452: OR
32453: PUSH
32454: LD_VAR 0 4
32458: NOT
32459: OR
32460: IFFALSE 32464
// exit ;
32462: GO 32804
// list := [ ] ;
32464: LD_ADDR_VAR 0 13
32468: PUSH
32469: EMPTY
32470: ST_TO_ADDR
// if x - r < 0 then
32471: LD_VAR 0 2
32475: PUSH
32476: LD_VAR 0 4
32480: MINUS
32481: PUSH
32482: LD_INT 0
32484: LESS
32485: IFFALSE 32497
// min_x := 0 else
32487: LD_ADDR_VAR 0 7
32491: PUSH
32492: LD_INT 0
32494: ST_TO_ADDR
32495: GO 32513
// min_x := x - r ;
32497: LD_ADDR_VAR 0 7
32501: PUSH
32502: LD_VAR 0 2
32506: PUSH
32507: LD_VAR 0 4
32511: MINUS
32512: ST_TO_ADDR
// if y - r < 0 then
32513: LD_VAR 0 3
32517: PUSH
32518: LD_VAR 0 4
32522: MINUS
32523: PUSH
32524: LD_INT 0
32526: LESS
32527: IFFALSE 32539
// min_y := 0 else
32529: LD_ADDR_VAR 0 8
32533: PUSH
32534: LD_INT 0
32536: ST_TO_ADDR
32537: GO 32555
// min_y := y - r ;
32539: LD_ADDR_VAR 0 8
32543: PUSH
32544: LD_VAR 0 3
32548: PUSH
32549: LD_VAR 0 4
32553: MINUS
32554: ST_TO_ADDR
// max_x := x + r ;
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: LD_VAR 0 2
32564: PUSH
32565: LD_VAR 0 4
32569: PLUS
32570: ST_TO_ADDR
// max_y := y + r ;
32571: LD_ADDR_VAR 0 10
32575: PUSH
32576: LD_VAR 0 3
32580: PUSH
32581: LD_VAR 0 4
32585: PLUS
32586: ST_TO_ADDR
// for _x = min_x to max_x do
32587: LD_ADDR_VAR 0 11
32591: PUSH
32592: DOUBLE
32593: LD_VAR 0 7
32597: DEC
32598: ST_TO_ADDR
32599: LD_VAR 0 9
32603: PUSH
32604: FOR_TO
32605: IFFALSE 32722
// for _y = min_y to max_y do
32607: LD_ADDR_VAR 0 12
32611: PUSH
32612: DOUBLE
32613: LD_VAR 0 8
32617: DEC
32618: ST_TO_ADDR
32619: LD_VAR 0 10
32623: PUSH
32624: FOR_TO
32625: IFFALSE 32718
// begin if not ValidHex ( _x , _y ) then
32627: LD_VAR 0 11
32631: PPUSH
32632: LD_VAR 0 12
32636: PPUSH
32637: CALL_OW 488
32641: NOT
32642: IFFALSE 32646
// continue ;
32644: GO 32624
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32646: LD_VAR 0 11
32650: PPUSH
32651: LD_VAR 0 12
32655: PPUSH
32656: CALL_OW 351
32660: PUSH
32661: LD_VAR 0 11
32665: PPUSH
32666: LD_VAR 0 12
32670: PPUSH
32671: CALL_OW 554
32675: AND
32676: IFFALSE 32716
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32678: LD_ADDR_VAR 0 13
32682: PUSH
32683: LD_VAR 0 13
32687: PPUSH
32688: LD_VAR 0 13
32692: PUSH
32693: LD_INT 1
32695: PLUS
32696: PPUSH
32697: LD_VAR 0 11
32701: PUSH
32702: LD_VAR 0 12
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PPUSH
32711: CALL_OW 2
32715: ST_TO_ADDR
// end ;
32716: GO 32624
32718: POP
32719: POP
32720: GO 32604
32722: POP
32723: POP
// if not list then
32724: LD_VAR 0 13
32728: NOT
32729: IFFALSE 32733
// exit ;
32731: GO 32804
// for i in list do
32733: LD_ADDR_VAR 0 6
32737: PUSH
32738: LD_VAR 0 13
32742: PUSH
32743: FOR_IN
32744: IFFALSE 32802
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32746: LD_VAR 0 1
32750: PPUSH
32751: LD_STRING M
32753: PUSH
32754: LD_VAR 0 6
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PUSH
32763: LD_VAR 0 6
32767: PUSH
32768: LD_INT 2
32770: ARRAY
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: PPUSH
32796: CALL_OW 447
32800: GO 32743
32802: POP
32803: POP
// end ;
32804: LD_VAR 0 5
32808: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32809: LD_EXP 129
32813: NOT
32814: IFFALSE 32864
32816: GO 32818
32818: DISABLE
// begin initHack := true ;
32819: LD_ADDR_EXP 129
32823: PUSH
32824: LD_INT 1
32826: ST_TO_ADDR
// hackTanks := [ ] ;
32827: LD_ADDR_EXP 130
32831: PUSH
32832: EMPTY
32833: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32834: LD_ADDR_EXP 131
32838: PUSH
32839: EMPTY
32840: ST_TO_ADDR
// hackLimit := 3 ;
32841: LD_ADDR_EXP 132
32845: PUSH
32846: LD_INT 3
32848: ST_TO_ADDR
// hackDist := 12 ;
32849: LD_ADDR_EXP 133
32853: PUSH
32854: LD_INT 12
32856: ST_TO_ADDR
// hackCounter := [ ] ;
32857: LD_ADDR_EXP 134
32861: PUSH
32862: EMPTY
32863: ST_TO_ADDR
// end ;
32864: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32865: LD_EXP 129
32869: PUSH
32870: LD_INT 34
32872: PUSH
32873: LD_EXP 56
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PPUSH
32882: CALL_OW 69
32886: AND
32887: IFFALSE 33142
32889: GO 32891
32891: DISABLE
32892: LD_INT 0
32894: PPUSH
32895: PPUSH
// begin enable ;
32896: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32897: LD_ADDR_VAR 0 1
32901: PUSH
32902: LD_INT 34
32904: PUSH
32905: LD_EXP 56
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 69
32918: PUSH
32919: FOR_IN
32920: IFFALSE 33140
// begin if not i in hackTanks then
32922: LD_VAR 0 1
32926: PUSH
32927: LD_EXP 130
32931: IN
32932: NOT
32933: IFFALSE 33016
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32935: LD_ADDR_EXP 130
32939: PUSH
32940: LD_EXP 130
32944: PPUSH
32945: LD_EXP 130
32949: PUSH
32950: LD_INT 1
32952: PLUS
32953: PPUSH
32954: LD_VAR 0 1
32958: PPUSH
32959: CALL_OW 1
32963: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32964: LD_ADDR_EXP 131
32968: PUSH
32969: LD_EXP 131
32973: PPUSH
32974: LD_EXP 131
32978: PUSH
32979: LD_INT 1
32981: PLUS
32982: PPUSH
32983: EMPTY
32984: PPUSH
32985: CALL_OW 1
32989: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32990: LD_ADDR_EXP 134
32994: PUSH
32995: LD_EXP 134
32999: PPUSH
33000: LD_EXP 134
33004: PUSH
33005: LD_INT 1
33007: PLUS
33008: PPUSH
33009: EMPTY
33010: PPUSH
33011: CALL_OW 1
33015: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL_OW 302
33025: NOT
33026: IFFALSE 33039
// begin HackUnlinkAll ( i ) ;
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL 33145 0 1
// continue ;
33037: GO 32919
// end ; HackCheckCapturedStatus ( i ) ;
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL 33588 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33048: LD_ADDR_VAR 0 2
33052: PUSH
33053: LD_INT 81
33055: PUSH
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL_OW 255
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 33
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 91
33082: PUSH
33083: LD_VAR 0 1
33087: PUSH
33088: LD_EXP 133
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 50
33100: PUSH
33101: EMPTY
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PPUSH
33110: CALL_OW 69
33114: ST_TO_ADDR
// if not tmp then
33115: LD_VAR 0 2
33119: NOT
33120: IFFALSE 33124
// continue ;
33122: GO 32919
// HackLink ( i , tmp ) ;
33124: LD_VAR 0 1
33128: PPUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL 33281 0 2
// end ;
33138: GO 32919
33140: POP
33141: POP
// end ;
33142: PPOPN 2
33144: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33145: LD_INT 0
33147: PPUSH
33148: PPUSH
33149: PPUSH
// if not hack in hackTanks then
33150: LD_VAR 0 1
33154: PUSH
33155: LD_EXP 130
33159: IN
33160: NOT
33161: IFFALSE 33165
// exit ;
33163: GO 33276
// index := GetElementIndex ( hackTanks , hack ) ;
33165: LD_ADDR_VAR 0 4
33169: PUSH
33170: LD_EXP 130
33174: PPUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL 40710 0 2
33184: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33185: LD_EXP 131
33189: PUSH
33190: LD_VAR 0 4
33194: ARRAY
33195: IFFALSE 33276
// begin for i in hackTanksCaptured [ index ] do
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_EXP 131
33206: PUSH
33207: LD_VAR 0 4
33211: ARRAY
33212: PUSH
33213: FOR_IN
33214: IFFALSE 33240
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33216: LD_VAR 0 3
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: PPUSH
33225: LD_VAR 0 3
33229: PUSH
33230: LD_INT 2
33232: ARRAY
33233: PPUSH
33234: CALL_OW 235
33238: GO 33213
33240: POP
33241: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33242: LD_ADDR_EXP 131
33246: PUSH
33247: LD_EXP 131
33251: PPUSH
33252: LD_VAR 0 4
33256: PPUSH
33257: EMPTY
33258: PPUSH
33259: CALL_OW 1
33263: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33264: LD_VAR 0 1
33268: PPUSH
33269: LD_INT 0
33271: PPUSH
33272: CALL_OW 505
// end ; end ;
33276: LD_VAR 0 2
33280: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33281: LD_INT 0
33283: PPUSH
33284: PPUSH
33285: PPUSH
// if not hack in hackTanks or not vehicles then
33286: LD_VAR 0 1
33290: PUSH
33291: LD_EXP 130
33295: IN
33296: NOT
33297: PUSH
33298: LD_VAR 0 2
33302: NOT
33303: OR
33304: IFFALSE 33308
// exit ;
33306: GO 33583
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33308: LD_ADDR_VAR 0 2
33312: PUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: LD_VAR 0 2
33322: PPUSH
33323: LD_INT 1
33325: PPUSH
33326: LD_INT 1
33328: PPUSH
33329: CALL 41360 0 4
33333: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33334: LD_ADDR_VAR 0 5
33338: PUSH
33339: LD_EXP 130
33343: PPUSH
33344: LD_VAR 0 1
33348: PPUSH
33349: CALL 40710 0 2
33353: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33354: LD_EXP 131
33358: PUSH
33359: LD_VAR 0 5
33363: ARRAY
33364: PUSH
33365: LD_EXP 132
33369: LESS
33370: IFFALSE 33559
// begin for i := 1 to vehicles do
33372: LD_ADDR_VAR 0 4
33376: PUSH
33377: DOUBLE
33378: LD_INT 1
33380: DEC
33381: ST_TO_ADDR
33382: LD_VAR 0 2
33386: PUSH
33387: FOR_TO
33388: IFFALSE 33557
// begin if hackTanksCaptured [ index ] = hackLimit then
33390: LD_EXP 131
33394: PUSH
33395: LD_VAR 0 5
33399: ARRAY
33400: PUSH
33401: LD_EXP 132
33405: EQUAL
33406: IFFALSE 33410
// break ;
33408: GO 33557
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33410: LD_ADDR_EXP 134
33414: PUSH
33415: LD_EXP 134
33419: PPUSH
33420: LD_VAR 0 5
33424: PPUSH
33425: LD_EXP 134
33429: PUSH
33430: LD_VAR 0 5
33434: ARRAY
33435: PUSH
33436: LD_INT 1
33438: PLUS
33439: PPUSH
33440: CALL_OW 1
33444: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33445: LD_ADDR_EXP 131
33449: PUSH
33450: LD_EXP 131
33454: PPUSH
33455: LD_VAR 0 5
33459: PUSH
33460: LD_EXP 131
33464: PUSH
33465: LD_VAR 0 5
33469: ARRAY
33470: PUSH
33471: LD_INT 1
33473: PLUS
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PPUSH
33479: LD_VAR 0 2
33483: PUSH
33484: LD_VAR 0 4
33488: ARRAY
33489: PUSH
33490: LD_VAR 0 2
33494: PUSH
33495: LD_VAR 0 4
33499: ARRAY
33500: PPUSH
33501: CALL_OW 255
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PPUSH
33510: CALL 40925 0 3
33514: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33515: LD_VAR 0 2
33519: PUSH
33520: LD_VAR 0 4
33524: ARRAY
33525: PPUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 255
33535: PPUSH
33536: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33540: LD_VAR 0 2
33544: PUSH
33545: LD_VAR 0 4
33549: ARRAY
33550: PPUSH
33551: CALL_OW 141
// end ;
33555: GO 33387
33557: POP
33558: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33559: LD_VAR 0 1
33563: PPUSH
33564: LD_EXP 131
33568: PUSH
33569: LD_VAR 0 5
33573: ARRAY
33574: PUSH
33575: LD_INT 0
33577: PLUS
33578: PPUSH
33579: CALL_OW 505
// end ;
33583: LD_VAR 0 3
33587: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
// if not hack in hackTanks then
33594: LD_VAR 0 1
33598: PUSH
33599: LD_EXP 130
33603: IN
33604: NOT
33605: IFFALSE 33609
// exit ;
33607: GO 33849
// index := GetElementIndex ( hackTanks , hack ) ;
33609: LD_ADDR_VAR 0 4
33613: PUSH
33614: LD_EXP 130
33618: PPUSH
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL 40710 0 2
33628: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: DOUBLE
33635: LD_EXP 131
33639: PUSH
33640: LD_VAR 0 4
33644: ARRAY
33645: INC
33646: ST_TO_ADDR
33647: LD_INT 1
33649: PUSH
33650: FOR_DOWNTO
33651: IFFALSE 33823
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33653: LD_ADDR_VAR 0 5
33657: PUSH
33658: LD_EXP 131
33662: PUSH
33663: LD_VAR 0 4
33667: ARRAY
33668: PUSH
33669: LD_VAR 0 3
33673: ARRAY
33674: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33675: LD_VAR 0 5
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: PPUSH
33684: CALL_OW 302
33688: NOT
33689: PUSH
33690: LD_VAR 0 5
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PPUSH
33699: CALL_OW 255
33703: PUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL_OW 255
33713: NONEQUAL
33714: OR
33715: IFFALSE 33821
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33717: LD_VAR 0 5
33721: PUSH
33722: LD_INT 1
33724: ARRAY
33725: PPUSH
33726: CALL_OW 305
33730: PUSH
33731: LD_VAR 0 5
33735: PUSH
33736: LD_INT 1
33738: ARRAY
33739: PPUSH
33740: CALL_OW 255
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 255
33754: EQUAL
33755: AND
33756: IFFALSE 33780
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33758: LD_VAR 0 5
33762: PUSH
33763: LD_INT 1
33765: ARRAY
33766: PPUSH
33767: LD_VAR 0 5
33771: PUSH
33772: LD_INT 2
33774: ARRAY
33775: PPUSH
33776: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33780: LD_ADDR_EXP 131
33784: PUSH
33785: LD_EXP 131
33789: PPUSH
33790: LD_VAR 0 4
33794: PPUSH
33795: LD_EXP 131
33799: PUSH
33800: LD_VAR 0 4
33804: ARRAY
33805: PPUSH
33806: LD_VAR 0 3
33810: PPUSH
33811: CALL_OW 3
33815: PPUSH
33816: CALL_OW 1
33820: ST_TO_ADDR
// end ; end ;
33821: GO 33650
33823: POP
33824: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33825: LD_VAR 0 1
33829: PPUSH
33830: LD_EXP 131
33834: PUSH
33835: LD_VAR 0 4
33839: ARRAY
33840: PUSH
33841: LD_INT 0
33843: PLUS
33844: PPUSH
33845: CALL_OW 505
// end ;
33849: LD_VAR 0 2
33853: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33854: LD_INT 0
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
// if not hack in hackTanks then
33860: LD_VAR 0 1
33864: PUSH
33865: LD_EXP 130
33869: IN
33870: NOT
33871: IFFALSE 33875
// exit ;
33873: GO 33960
// index := GetElementIndex ( hackTanks , hack ) ;
33875: LD_ADDR_VAR 0 5
33879: PUSH
33880: LD_EXP 130
33884: PPUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL 40710 0 2
33894: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33895: LD_ADDR_VAR 0 4
33899: PUSH
33900: DOUBLE
33901: LD_INT 1
33903: DEC
33904: ST_TO_ADDR
33905: LD_EXP 131
33909: PUSH
33910: LD_VAR 0 5
33914: ARRAY
33915: PUSH
33916: FOR_TO
33917: IFFALSE 33958
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33919: LD_EXP 131
33923: PUSH
33924: LD_VAR 0 5
33928: ARRAY
33929: PUSH
33930: LD_VAR 0 4
33934: ARRAY
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: PUSH
33940: LD_VAR 0 2
33944: EQUAL
33945: IFFALSE 33956
// KillUnit ( vehicle ) ;
33947: LD_VAR 0 2
33951: PPUSH
33952: CALL_OW 66
33956: GO 33916
33958: POP
33959: POP
// end ;
33960: LD_VAR 0 3
33964: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33965: LD_EXP 135
33969: NOT
33970: IFFALSE 34005
33972: GO 33974
33974: DISABLE
// begin initMiner := true ;
33975: LD_ADDR_EXP 135
33979: PUSH
33980: LD_INT 1
33982: ST_TO_ADDR
// minersList := [ ] ;
33983: LD_ADDR_EXP 136
33987: PUSH
33988: EMPTY
33989: ST_TO_ADDR
// minerMinesList := [ ] ;
33990: LD_ADDR_EXP 137
33994: PUSH
33995: EMPTY
33996: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33997: LD_ADDR_EXP 138
34001: PUSH
34002: LD_INT 5
34004: ST_TO_ADDR
// end ;
34005: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34006: LD_EXP 135
34010: PUSH
34011: LD_INT 34
34013: PUSH
34014: LD_EXP 61
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PPUSH
34023: CALL_OW 69
34027: AND
34028: IFFALSE 34491
34030: GO 34032
34032: DISABLE
34033: LD_INT 0
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
// begin enable ;
34039: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34040: LD_ADDR_VAR 0 1
34044: PUSH
34045: LD_INT 34
34047: PUSH
34048: LD_EXP 61
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PPUSH
34057: CALL_OW 69
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34135
// begin if not i in minersList then
34065: LD_VAR 0 1
34069: PUSH
34070: LD_EXP 136
34074: IN
34075: NOT
34076: IFFALSE 34133
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34078: LD_ADDR_EXP 136
34082: PUSH
34083: LD_EXP 136
34087: PPUSH
34088: LD_EXP 136
34092: PUSH
34093: LD_INT 1
34095: PLUS
34096: PPUSH
34097: LD_VAR 0 1
34101: PPUSH
34102: CALL_OW 1
34106: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34107: LD_ADDR_EXP 137
34111: PUSH
34112: LD_EXP 137
34116: PPUSH
34117: LD_EXP 137
34121: PUSH
34122: LD_INT 1
34124: PLUS
34125: PPUSH
34126: EMPTY
34127: PPUSH
34128: CALL_OW 1
34132: ST_TO_ADDR
// end end ;
34133: GO 34062
34135: POP
34136: POP
// for i := minerMinesList downto 1 do
34137: LD_ADDR_VAR 0 1
34141: PUSH
34142: DOUBLE
34143: LD_EXP 137
34147: INC
34148: ST_TO_ADDR
34149: LD_INT 1
34151: PUSH
34152: FOR_DOWNTO
34153: IFFALSE 34489
// begin if IsLive ( minersList [ i ] ) then
34155: LD_EXP 136
34159: PUSH
34160: LD_VAR 0 1
34164: ARRAY
34165: PPUSH
34166: CALL_OW 300
34170: IFFALSE 34198
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34172: LD_EXP 136
34176: PUSH
34177: LD_VAR 0 1
34181: ARRAY
34182: PPUSH
34183: LD_EXP 137
34187: PUSH
34188: LD_VAR 0 1
34192: ARRAY
34193: PPUSH
34194: CALL_OW 505
// if not minerMinesList [ i ] then
34198: LD_EXP 137
34202: PUSH
34203: LD_VAR 0 1
34207: ARRAY
34208: NOT
34209: IFFALSE 34213
// continue ;
34211: GO 34152
// for j := minerMinesList [ i ] downto 1 do
34213: LD_ADDR_VAR 0 2
34217: PUSH
34218: DOUBLE
34219: LD_EXP 137
34223: PUSH
34224: LD_VAR 0 1
34228: ARRAY
34229: INC
34230: ST_TO_ADDR
34231: LD_INT 1
34233: PUSH
34234: FOR_DOWNTO
34235: IFFALSE 34485
// begin side := GetSide ( minersList [ i ] ) ;
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_EXP 136
34246: PUSH
34247: LD_VAR 0 1
34251: ARRAY
34252: PPUSH
34253: CALL_OW 255
34257: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34258: LD_ADDR_VAR 0 4
34262: PUSH
34263: LD_EXP 137
34267: PUSH
34268: LD_VAR 0 1
34272: ARRAY
34273: PUSH
34274: LD_VAR 0 2
34278: ARRAY
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: PPUSH
34284: LD_EXP 137
34288: PUSH
34289: LD_VAR 0 1
34293: ARRAY
34294: PUSH
34295: LD_VAR 0 2
34299: ARRAY
34300: PUSH
34301: LD_INT 2
34303: ARRAY
34304: PPUSH
34305: CALL_OW 428
34309: ST_TO_ADDR
// if not tmp then
34310: LD_VAR 0 4
34314: NOT
34315: IFFALSE 34319
// continue ;
34317: GO 34234
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34319: LD_VAR 0 4
34323: PUSH
34324: LD_INT 81
34326: PUSH
34327: LD_VAR 0 3
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PPUSH
34336: CALL_OW 69
34340: IN
34341: PUSH
34342: LD_EXP 137
34346: PUSH
34347: LD_VAR 0 1
34351: ARRAY
34352: PUSH
34353: LD_VAR 0 2
34357: ARRAY
34358: PUSH
34359: LD_INT 1
34361: ARRAY
34362: PPUSH
34363: LD_EXP 137
34367: PUSH
34368: LD_VAR 0 1
34372: ARRAY
34373: PUSH
34374: LD_VAR 0 2
34378: ARRAY
34379: PUSH
34380: LD_INT 2
34382: ARRAY
34383: PPUSH
34384: CALL_OW 458
34388: AND
34389: IFFALSE 34483
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34391: LD_EXP 137
34395: PUSH
34396: LD_VAR 0 1
34400: ARRAY
34401: PUSH
34402: LD_VAR 0 2
34406: ARRAY
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: PPUSH
34412: LD_EXP 137
34416: PUSH
34417: LD_VAR 0 1
34421: ARRAY
34422: PUSH
34423: LD_VAR 0 2
34427: ARRAY
34428: PUSH
34429: LD_INT 2
34431: ARRAY
34432: PPUSH
34433: LD_VAR 0 3
34437: PPUSH
34438: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34442: LD_ADDR_EXP 137
34446: PUSH
34447: LD_EXP 137
34451: PPUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: LD_EXP 137
34461: PUSH
34462: LD_VAR 0 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: CALL_OW 3
34477: PPUSH
34478: CALL_OW 1
34482: ST_TO_ADDR
// end ; end ;
34483: GO 34234
34485: POP
34486: POP
// end ;
34487: GO 34152
34489: POP
34490: POP
// end ;
34491: PPOPN 4
34493: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
// result := false ;
34498: LD_ADDR_VAR 0 4
34502: PUSH
34503: LD_INT 0
34505: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 264
34515: PUSH
34516: LD_EXP 61
34520: EQUAL
34521: NOT
34522: IFFALSE 34526
// exit ;
34524: GO 34766
// index := GetElementIndex ( minersList , unit ) ;
34526: LD_ADDR_VAR 0 5
34530: PUSH
34531: LD_EXP 136
34535: PPUSH
34536: LD_VAR 0 1
34540: PPUSH
34541: CALL 40710 0 2
34545: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34546: LD_EXP 137
34550: PUSH
34551: LD_VAR 0 5
34555: ARRAY
34556: PUSH
34557: LD_EXP 138
34561: GREATEREQUAL
34562: IFFALSE 34566
// exit ;
34564: GO 34766
// ComMoveXY ( unit , x , y ) ;
34566: LD_VAR 0 1
34570: PPUSH
34571: LD_VAR 0 2
34575: PPUSH
34576: LD_VAR 0 3
34580: PPUSH
34581: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34585: LD_INT 35
34587: PPUSH
34588: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_VAR 0 3
34606: PPUSH
34607: CALL 71107 0 3
34611: NOT
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 314
34622: AND
34623: IFFALSE 34627
// exit ;
34625: GO 34766
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34627: LD_VAR 0 2
34631: PPUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: CALL_OW 428
34641: PUSH
34642: LD_VAR 0 1
34646: EQUAL
34647: PUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 314
34657: NOT
34658: AND
34659: IFFALSE 34585
// PlaySoundXY ( x , y , PlantMine ) ;
34661: LD_VAR 0 2
34665: PPUSH
34666: LD_VAR 0 3
34670: PPUSH
34671: LD_STRING PlantMine
34673: PPUSH
34674: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: LD_VAR 0 1
34692: PPUSH
34693: CALL_OW 255
34697: PPUSH
34698: LD_INT 0
34700: PPUSH
34701: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34705: LD_ADDR_EXP 137
34709: PUSH
34710: LD_EXP 137
34714: PPUSH
34715: LD_VAR 0 5
34719: PUSH
34720: LD_EXP 137
34724: PUSH
34725: LD_VAR 0 5
34729: ARRAY
34730: PUSH
34731: LD_INT 1
34733: PLUS
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PPUSH
34739: LD_VAR 0 2
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL 40925 0 3
34757: ST_TO_ADDR
// result := true ;
34758: LD_ADDR_VAR 0 4
34762: PUSH
34763: LD_INT 1
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 4
34770: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34771: LD_INT 0
34773: PPUSH
34774: PPUSH
34775: PPUSH
// if not unit in minersList then
34776: LD_VAR 0 1
34780: PUSH
34781: LD_EXP 136
34785: IN
34786: NOT
34787: IFFALSE 34791
// exit ;
34789: GO 35183
// index := GetElementIndex ( minersList , unit ) ;
34791: LD_ADDR_VAR 0 6
34795: PUSH
34796: LD_EXP 136
34800: PPUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL 40710 0 2
34810: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34811: LD_ADDR_VAR 0 5
34815: PUSH
34816: DOUBLE
34817: LD_EXP 137
34821: PUSH
34822: LD_VAR 0 6
34826: ARRAY
34827: INC
34828: ST_TO_ADDR
34829: LD_INT 1
34831: PUSH
34832: FOR_DOWNTO
34833: IFFALSE 34994
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34835: LD_EXP 137
34839: PUSH
34840: LD_VAR 0 6
34844: ARRAY
34845: PUSH
34846: LD_VAR 0 5
34850: ARRAY
34851: PUSH
34852: LD_INT 1
34854: ARRAY
34855: PUSH
34856: LD_VAR 0 2
34860: EQUAL
34861: PUSH
34862: LD_EXP 137
34866: PUSH
34867: LD_VAR 0 6
34871: ARRAY
34872: PUSH
34873: LD_VAR 0 5
34877: ARRAY
34878: PUSH
34879: LD_INT 2
34881: ARRAY
34882: PUSH
34883: LD_VAR 0 3
34887: EQUAL
34888: AND
34889: IFFALSE 34992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34891: LD_EXP 137
34895: PUSH
34896: LD_VAR 0 6
34900: ARRAY
34901: PUSH
34902: LD_VAR 0 5
34906: ARRAY
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PPUSH
34912: LD_EXP 137
34916: PUSH
34917: LD_VAR 0 6
34921: ARRAY
34922: PUSH
34923: LD_VAR 0 5
34927: ARRAY
34928: PUSH
34929: LD_INT 2
34931: ARRAY
34932: PPUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 255
34942: PPUSH
34943: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34947: LD_ADDR_EXP 137
34951: PUSH
34952: LD_EXP 137
34956: PPUSH
34957: LD_VAR 0 6
34961: PPUSH
34962: LD_EXP 137
34966: PUSH
34967: LD_VAR 0 6
34971: ARRAY
34972: PPUSH
34973: LD_VAR 0 5
34977: PPUSH
34978: CALL_OW 3
34982: PPUSH
34983: CALL_OW 1
34987: ST_TO_ADDR
// exit ;
34988: POP
34989: POP
34990: GO 35183
// end ; end ;
34992: GO 34832
34994: POP
34995: POP
// for i := minerMinesList [ index ] downto 1 do
34996: LD_ADDR_VAR 0 5
35000: PUSH
35001: DOUBLE
35002: LD_EXP 137
35006: PUSH
35007: LD_VAR 0 6
35011: ARRAY
35012: INC
35013: ST_TO_ADDR
35014: LD_INT 1
35016: PUSH
35017: FOR_DOWNTO
35018: IFFALSE 35181
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35020: LD_EXP 137
35024: PUSH
35025: LD_VAR 0 6
35029: ARRAY
35030: PUSH
35031: LD_VAR 0 5
35035: ARRAY
35036: PUSH
35037: LD_INT 1
35039: ARRAY
35040: PPUSH
35041: LD_EXP 137
35045: PUSH
35046: LD_VAR 0 6
35050: ARRAY
35051: PUSH
35052: LD_VAR 0 5
35056: ARRAY
35057: PUSH
35058: LD_INT 2
35060: ARRAY
35061: PPUSH
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 3
35071: PPUSH
35072: CALL_OW 298
35076: PUSH
35077: LD_INT 6
35079: LESS
35080: IFFALSE 35179
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35082: LD_EXP 137
35086: PUSH
35087: LD_VAR 0 6
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 5
35097: ARRAY
35098: PUSH
35099: LD_INT 1
35101: ARRAY
35102: PPUSH
35103: LD_EXP 137
35107: PUSH
35108: LD_VAR 0 6
35112: ARRAY
35113: PUSH
35114: LD_VAR 0 5
35118: ARRAY
35119: PUSH
35120: LD_INT 2
35122: ARRAY
35123: PPUSH
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL_OW 255
35133: PPUSH
35134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35138: LD_ADDR_EXP 137
35142: PUSH
35143: LD_EXP 137
35147: PPUSH
35148: LD_VAR 0 6
35152: PPUSH
35153: LD_EXP 137
35157: PUSH
35158: LD_VAR 0 6
35162: ARRAY
35163: PPUSH
35164: LD_VAR 0 5
35168: PPUSH
35169: CALL_OW 3
35173: PPUSH
35174: CALL_OW 1
35178: ST_TO_ADDR
// end ; end ;
35179: GO 35017
35181: POP
35182: POP
// end ;
35183: LD_VAR 0 4
35187: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35188: LD_INT 0
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35199: LD_VAR 0 1
35203: PPUSH
35204: CALL_OW 264
35208: PUSH
35209: LD_EXP 61
35213: EQUAL
35214: NOT
35215: PUSH
35216: LD_VAR 0 1
35220: PUSH
35221: LD_EXP 136
35225: IN
35226: NOT
35227: OR
35228: IFFALSE 35232
// exit ;
35230: GO 35554
// index := GetElementIndex ( minersList , unit ) ;
35232: LD_ADDR_VAR 0 6
35236: PUSH
35237: LD_EXP 136
35241: PPUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL 40710 0 2
35251: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35252: LD_ADDR_VAR 0 8
35256: PUSH
35257: LD_EXP 138
35261: PUSH
35262: LD_EXP 137
35266: PUSH
35267: LD_VAR 0 6
35271: ARRAY
35272: MINUS
35273: ST_TO_ADDR
// if not minesFreeAmount then
35274: LD_VAR 0 8
35278: NOT
35279: IFFALSE 35283
// exit ;
35281: GO 35554
// tmp := [ ] ;
35283: LD_ADDR_VAR 0 7
35287: PUSH
35288: EMPTY
35289: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: DOUBLE
35296: LD_INT 1
35298: DEC
35299: ST_TO_ADDR
35300: LD_VAR 0 8
35304: PUSH
35305: FOR_TO
35306: IFFALSE 35501
// begin _d := rand ( 0 , 5 ) ;
35308: LD_ADDR_VAR 0 11
35312: PUSH
35313: LD_INT 0
35315: PPUSH
35316: LD_INT 5
35318: PPUSH
35319: CALL_OW 12
35323: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35324: LD_ADDR_VAR 0 12
35328: PUSH
35329: LD_INT 2
35331: PPUSH
35332: LD_INT 6
35334: PPUSH
35335: CALL_OW 12
35339: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: LD_VAR 0 2
35349: PPUSH
35350: LD_VAR 0 11
35354: PPUSH
35355: LD_VAR 0 12
35359: PPUSH
35360: CALL_OW 272
35364: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35365: LD_ADDR_VAR 0 10
35369: PUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: LD_VAR 0 11
35379: PPUSH
35380: LD_VAR 0 12
35384: PPUSH
35385: CALL_OW 273
35389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35390: LD_VAR 0 9
35394: PPUSH
35395: LD_VAR 0 10
35399: PPUSH
35400: CALL_OW 488
35404: PUSH
35405: LD_VAR 0 9
35409: PUSH
35410: LD_VAR 0 10
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_VAR 0 7
35423: IN
35424: NOT
35425: AND
35426: PUSH
35427: LD_VAR 0 9
35431: PPUSH
35432: LD_VAR 0 10
35436: PPUSH
35437: CALL_OW 458
35441: NOT
35442: AND
35443: IFFALSE 35485
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35445: LD_ADDR_VAR 0 7
35449: PUSH
35450: LD_VAR 0 7
35454: PPUSH
35455: LD_VAR 0 7
35459: PUSH
35460: LD_INT 1
35462: PLUS
35463: PPUSH
35464: LD_VAR 0 9
35468: PUSH
35469: LD_VAR 0 10
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PPUSH
35478: CALL_OW 1
35482: ST_TO_ADDR
35483: GO 35499
// i := i - 1 ;
35485: LD_ADDR_VAR 0 5
35489: PUSH
35490: LD_VAR 0 5
35494: PUSH
35495: LD_INT 1
35497: MINUS
35498: ST_TO_ADDR
// end ;
35499: GO 35305
35501: POP
35502: POP
// for i in tmp do
35503: LD_ADDR_VAR 0 5
35507: PUSH
35508: LD_VAR 0 7
35512: PUSH
35513: FOR_IN
35514: IFFALSE 35552
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35516: LD_VAR 0 1
35520: PPUSH
35521: LD_VAR 0 5
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: LD_VAR 0 5
35534: PUSH
35535: LD_INT 2
35537: ARRAY
35538: PPUSH
35539: CALL 34494 0 3
35543: NOT
35544: IFFALSE 35550
// exit ;
35546: POP
35547: POP
35548: GO 35554
35550: GO 35513
35552: POP
35553: POP
// end ;
35554: LD_VAR 0 4
35558: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35559: LD_INT 0
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
// if not GetClass ( unit ) = class_sniper then
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 257
35577: PUSH
35578: LD_INT 5
35580: EQUAL
35581: NOT
35582: IFFALSE 35586
// exit ;
35584: GO 35974
// dist := 8 ;
35586: LD_ADDR_VAR 0 5
35590: PUSH
35591: LD_INT 8
35593: ST_TO_ADDR
// viewRange := 12 ;
35594: LD_ADDR_VAR 0 7
35598: PUSH
35599: LD_INT 12
35601: ST_TO_ADDR
// side := GetSide ( unit ) ;
35602: LD_ADDR_VAR 0 6
35606: PUSH
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL_OW 255
35616: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35617: LD_INT 61
35619: PPUSH
35620: LD_VAR 0 6
35624: PPUSH
35625: CALL_OW 321
35629: PUSH
35630: LD_INT 2
35632: EQUAL
35633: IFFALSE 35643
// viewRange := 16 ;
35635: LD_ADDR_VAR 0 7
35639: PUSH
35640: LD_INT 16
35642: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35643: LD_VAR 0 1
35647: PPUSH
35648: LD_VAR 0 2
35652: PPUSH
35653: LD_VAR 0 3
35657: PPUSH
35658: CALL_OW 297
35662: PUSH
35663: LD_VAR 0 5
35667: GREATER
35668: IFFALSE 35747
// begin ComMoveXY ( unit , x , y ) ;
35670: LD_VAR 0 1
35674: PPUSH
35675: LD_VAR 0 2
35679: PPUSH
35680: LD_VAR 0 3
35684: PPUSH
35685: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35689: LD_INT 35
35691: PPUSH
35692: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35696: LD_VAR 0 1
35700: PPUSH
35701: LD_VAR 0 2
35705: PPUSH
35706: LD_VAR 0 3
35710: PPUSH
35711: CALL 71107 0 3
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 35974
// until GetDistUnitXY ( unit , x , y ) < dist ;
35720: LD_VAR 0 1
35724: PPUSH
35725: LD_VAR 0 2
35729: PPUSH
35730: LD_VAR 0 3
35734: PPUSH
35735: CALL_OW 297
35739: PUSH
35740: LD_VAR 0 5
35744: LESS
35745: IFFALSE 35689
// end ; ComTurnXY ( unit , x , y ) ;
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: LD_VAR 0 3
35761: PPUSH
35762: CALL_OW 118
// wait ( 5 ) ;
35766: LD_INT 5
35768: PPUSH
35769: CALL_OW 67
// _d := GetDir ( unit ) ;
35773: LD_ADDR_VAR 0 10
35777: PUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 254
35787: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35788: LD_ADDR_VAR 0 8
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 250
35802: PPUSH
35803: LD_VAR 0 10
35807: PPUSH
35808: LD_VAR 0 5
35812: PPUSH
35813: CALL_OW 272
35817: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35818: LD_ADDR_VAR 0 9
35822: PUSH
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL_OW 251
35832: PPUSH
35833: LD_VAR 0 10
35837: PPUSH
35838: LD_VAR 0 5
35842: PPUSH
35843: CALL_OW 273
35847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35848: LD_VAR 0 8
35852: PPUSH
35853: LD_VAR 0 9
35857: PPUSH
35858: CALL_OW 488
35862: NOT
35863: IFFALSE 35867
// exit ;
35865: GO 35974
// ComAnimCustom ( unit , 1 ) ;
35867: LD_VAR 0 1
35871: PPUSH
35872: LD_INT 1
35874: PPUSH
35875: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35879: LD_VAR 0 8
35883: PPUSH
35884: LD_VAR 0 9
35888: PPUSH
35889: LD_VAR 0 6
35893: PPUSH
35894: LD_VAR 0 7
35898: PPUSH
35899: CALL_OW 330
// repeat wait ( 1 ) ;
35903: LD_INT 1
35905: PPUSH
35906: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 316
35919: PUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 314
35929: OR
35930: PUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 302
35940: NOT
35941: OR
35942: PUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 301
35952: OR
35953: IFFALSE 35903
// RemoveSeeing ( _x , _y , side ) ;
35955: LD_VAR 0 8
35959: PPUSH
35960: LD_VAR 0 9
35964: PPUSH
35965: LD_VAR 0 6
35969: PPUSH
35970: CALL_OW 331
// end ; end_of_file
35974: LD_VAR 0 4
35978: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35979: LD_INT 0
35981: PPUSH
35982: PPUSH
// if exist_mode then
35983: LD_VAR 0 2
35987: IFFALSE 36012
// unit := CreateCharacter ( prefix & ident ) else
35989: LD_ADDR_VAR 0 5
35993: PUSH
35994: LD_VAR 0 3
35998: PUSH
35999: LD_VAR 0 1
36003: STR
36004: PPUSH
36005: CALL_OW 34
36009: ST_TO_ADDR
36010: GO 36027
// unit := NewCharacter ( ident ) ;
36012: LD_ADDR_VAR 0 5
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 25
36026: ST_TO_ADDR
// result := unit ;
36027: LD_ADDR_VAR 0 4
36031: PUSH
36032: LD_VAR 0 5
36036: ST_TO_ADDR
// end ;
36037: LD_VAR 0 4
36041: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36042: LD_INT 0
36044: PPUSH
36045: PPUSH
// if not side or not nation then
36046: LD_VAR 0 1
36050: NOT
36051: PUSH
36052: LD_VAR 0 2
36056: NOT
36057: OR
36058: IFFALSE 36062
// exit ;
36060: GO 36826
// case nation of nation_american :
36062: LD_VAR 0 2
36066: PUSH
36067: LD_INT 1
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36289
36075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36076: LD_ADDR_VAR 0 4
36080: PUSH
36081: LD_INT 35
36083: PUSH
36084: LD_INT 45
36086: PUSH
36087: LD_INT 46
36089: PUSH
36090: LD_INT 47
36092: PUSH
36093: LD_INT 82
36095: PUSH
36096: LD_INT 83
36098: PUSH
36099: LD_INT 84
36101: PUSH
36102: LD_INT 85
36104: PUSH
36105: LD_INT 86
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 6
36116: PUSH
36117: LD_INT 15
36119: PUSH
36120: LD_INT 16
36122: PUSH
36123: LD_INT 7
36125: PUSH
36126: LD_INT 12
36128: PUSH
36129: LD_INT 13
36131: PUSH
36132: LD_INT 10
36134: PUSH
36135: LD_INT 14
36137: PUSH
36138: LD_INT 20
36140: PUSH
36141: LD_INT 21
36143: PUSH
36144: LD_INT 22
36146: PUSH
36147: LD_INT 25
36149: PUSH
36150: LD_INT 32
36152: PUSH
36153: LD_INT 27
36155: PUSH
36156: LD_INT 36
36158: PUSH
36159: LD_INT 69
36161: PUSH
36162: LD_INT 39
36164: PUSH
36165: LD_INT 34
36167: PUSH
36168: LD_INT 40
36170: PUSH
36171: LD_INT 48
36173: PUSH
36174: LD_INT 49
36176: PUSH
36177: LD_INT 50
36179: PUSH
36180: LD_INT 51
36182: PUSH
36183: LD_INT 52
36185: PUSH
36186: LD_INT 53
36188: PUSH
36189: LD_INT 54
36191: PUSH
36192: LD_INT 55
36194: PUSH
36195: LD_INT 56
36197: PUSH
36198: LD_INT 57
36200: PUSH
36201: LD_INT 58
36203: PUSH
36204: LD_INT 59
36206: PUSH
36207: LD_INT 60
36209: PUSH
36210: LD_INT 61
36212: PUSH
36213: LD_INT 62
36215: PUSH
36216: LD_INT 80
36218: PUSH
36219: LD_INT 82
36221: PUSH
36222: LD_INT 83
36224: PUSH
36225: LD_INT 84
36227: PUSH
36228: LD_INT 85
36230: PUSH
36231: LD_INT 86
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
36287: GO 36750
36289: LD_INT 2
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36519
36297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36298: LD_ADDR_VAR 0 4
36302: PUSH
36303: LD_INT 35
36305: PUSH
36306: LD_INT 45
36308: PUSH
36309: LD_INT 46
36311: PUSH
36312: LD_INT 47
36314: PUSH
36315: LD_INT 82
36317: PUSH
36318: LD_INT 83
36320: PUSH
36321: LD_INT 84
36323: PUSH
36324: LD_INT 85
36326: PUSH
36327: LD_INT 87
36329: PUSH
36330: LD_INT 70
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 11
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 4
36344: PUSH
36345: LD_INT 5
36347: PUSH
36348: LD_INT 6
36350: PUSH
36351: LD_INT 15
36353: PUSH
36354: LD_INT 18
36356: PUSH
36357: LD_INT 7
36359: PUSH
36360: LD_INT 17
36362: PUSH
36363: LD_INT 8
36365: PUSH
36366: LD_INT 20
36368: PUSH
36369: LD_INT 21
36371: PUSH
36372: LD_INT 22
36374: PUSH
36375: LD_INT 72
36377: PUSH
36378: LD_INT 26
36380: PUSH
36381: LD_INT 69
36383: PUSH
36384: LD_INT 39
36386: PUSH
36387: LD_INT 40
36389: PUSH
36390: LD_INT 41
36392: PUSH
36393: LD_INT 42
36395: PUSH
36396: LD_INT 43
36398: PUSH
36399: LD_INT 48
36401: PUSH
36402: LD_INT 49
36404: PUSH
36405: LD_INT 50
36407: PUSH
36408: LD_INT 51
36410: PUSH
36411: LD_INT 52
36413: PUSH
36414: LD_INT 53
36416: PUSH
36417: LD_INT 54
36419: PUSH
36420: LD_INT 55
36422: PUSH
36423: LD_INT 56
36425: PUSH
36426: LD_INT 60
36428: PUSH
36429: LD_INT 61
36431: PUSH
36432: LD_INT 62
36434: PUSH
36435: LD_INT 66
36437: PUSH
36438: LD_INT 67
36440: PUSH
36441: LD_INT 68
36443: PUSH
36444: LD_INT 81
36446: PUSH
36447: LD_INT 82
36449: PUSH
36450: LD_INT 83
36452: PUSH
36453: LD_INT 84
36455: PUSH
36456: LD_INT 85
36458: PUSH
36459: LD_INT 87
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
36517: GO 36750
36519: LD_INT 3
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36527
36525: GO 36749
36527: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36528: LD_ADDR_VAR 0 4
36532: PUSH
36533: LD_INT 46
36535: PUSH
36536: LD_INT 47
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 82
36547: PUSH
36548: LD_INT 83
36550: PUSH
36551: LD_INT 84
36553: PUSH
36554: LD_INT 85
36556: PUSH
36557: LD_INT 86
36559: PUSH
36560: LD_INT 11
36562: PUSH
36563: LD_INT 9
36565: PUSH
36566: LD_INT 20
36568: PUSH
36569: LD_INT 19
36571: PUSH
36572: LD_INT 21
36574: PUSH
36575: LD_INT 24
36577: PUSH
36578: LD_INT 22
36580: PUSH
36581: LD_INT 25
36583: PUSH
36584: LD_INT 28
36586: PUSH
36587: LD_INT 29
36589: PUSH
36590: LD_INT 30
36592: PUSH
36593: LD_INT 31
36595: PUSH
36596: LD_INT 37
36598: PUSH
36599: LD_INT 38
36601: PUSH
36602: LD_INT 32
36604: PUSH
36605: LD_INT 27
36607: PUSH
36608: LD_INT 33
36610: PUSH
36611: LD_INT 69
36613: PUSH
36614: LD_INT 39
36616: PUSH
36617: LD_INT 34
36619: PUSH
36620: LD_INT 40
36622: PUSH
36623: LD_INT 71
36625: PUSH
36626: LD_INT 23
36628: PUSH
36629: LD_INT 44
36631: PUSH
36632: LD_INT 48
36634: PUSH
36635: LD_INT 49
36637: PUSH
36638: LD_INT 50
36640: PUSH
36641: LD_INT 51
36643: PUSH
36644: LD_INT 52
36646: PUSH
36647: LD_INT 53
36649: PUSH
36650: LD_INT 54
36652: PUSH
36653: LD_INT 55
36655: PUSH
36656: LD_INT 56
36658: PUSH
36659: LD_INT 57
36661: PUSH
36662: LD_INT 58
36664: PUSH
36665: LD_INT 59
36667: PUSH
36668: LD_INT 63
36670: PUSH
36671: LD_INT 64
36673: PUSH
36674: LD_INT 65
36676: PUSH
36677: LD_INT 82
36679: PUSH
36680: LD_INT 83
36682: PUSH
36683: LD_INT 84
36685: PUSH
36686: LD_INT 85
36688: PUSH
36689: LD_INT 86
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
36747: GO 36750
36749: POP
// if state > - 1 and state < 3 then
36750: LD_VAR 0 3
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: GREATER
36759: PUSH
36760: LD_VAR 0 3
36764: PUSH
36765: LD_INT 3
36767: LESS
36768: AND
36769: IFFALSE 36826
// for i in result do
36771: LD_ADDR_VAR 0 5
36775: PUSH
36776: LD_VAR 0 4
36780: PUSH
36781: FOR_IN
36782: IFFALSE 36824
// if GetTech ( i , side ) <> state then
36784: LD_VAR 0 5
36788: PPUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 321
36798: PUSH
36799: LD_VAR 0 3
36803: NONEQUAL
36804: IFFALSE 36822
// result := result diff i ;
36806: LD_ADDR_VAR 0 4
36810: PUSH
36811: LD_VAR 0 4
36815: PUSH
36816: LD_VAR 0 5
36820: DIFF
36821: ST_TO_ADDR
36822: GO 36781
36824: POP
36825: POP
// end ;
36826: LD_VAR 0 4
36830: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36831: LD_INT 0
36833: PPUSH
36834: PPUSH
36835: PPUSH
// result := true ;
36836: LD_ADDR_VAR 0 3
36840: PUSH
36841: LD_INT 1
36843: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36844: LD_ADDR_VAR 0 5
36848: PUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: CALL_OW 480
36858: ST_TO_ADDR
// if not tmp then
36859: LD_VAR 0 5
36863: NOT
36864: IFFALSE 36868
// exit ;
36866: GO 36917
// for i in tmp do
36868: LD_ADDR_VAR 0 4
36872: PUSH
36873: LD_VAR 0 5
36877: PUSH
36878: FOR_IN
36879: IFFALSE 36915
// if GetTech ( i , side ) <> state_researched then
36881: LD_VAR 0 4
36885: PPUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 321
36895: PUSH
36896: LD_INT 2
36898: NONEQUAL
36899: IFFALSE 36913
// begin result := false ;
36901: LD_ADDR_VAR 0 3
36905: PUSH
36906: LD_INT 0
36908: ST_TO_ADDR
// exit ;
36909: POP
36910: POP
36911: GO 36917
// end ;
36913: GO 36878
36915: POP
36916: POP
// end ;
36917: LD_VAR 0 3
36921: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36922: LD_INT 0
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36937: LD_VAR 0 1
36941: NOT
36942: PUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 257
36952: PUSH
36953: LD_INT 9
36955: NONEQUAL
36956: OR
36957: IFFALSE 36961
// exit ;
36959: GO 37534
// side := GetSide ( unit ) ;
36961: LD_ADDR_VAR 0 9
36965: PUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 255
36975: ST_TO_ADDR
// tech_space := tech_spacanom ;
36976: LD_ADDR_VAR 0 12
36980: PUSH
36981: LD_INT 29
36983: ST_TO_ADDR
// tech_time := tech_taurad ;
36984: LD_ADDR_VAR 0 13
36988: PUSH
36989: LD_INT 28
36991: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36992: LD_ADDR_VAR 0 11
36996: PUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: CALL_OW 310
37006: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37007: LD_VAR 0 11
37011: PPUSH
37012: CALL_OW 247
37016: PUSH
37017: LD_INT 2
37019: EQUAL
37020: IFFALSE 37024
// exit ;
37022: GO 37534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37024: LD_ADDR_VAR 0 8
37028: PUSH
37029: LD_INT 81
37031: PUSH
37032: LD_VAR 0 9
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 21
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PPUSH
37062: CALL_OW 69
37066: ST_TO_ADDR
// if not tmp then
37067: LD_VAR 0 8
37071: NOT
37072: IFFALSE 37076
// exit ;
37074: GO 37534
// if in_unit then
37076: LD_VAR 0 11
37080: IFFALSE 37104
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37082: LD_ADDR_VAR 0 10
37086: PUSH
37087: LD_VAR 0 8
37091: PPUSH
37092: LD_VAR 0 11
37096: PPUSH
37097: CALL_OW 74
37101: ST_TO_ADDR
37102: GO 37124
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37104: LD_ADDR_VAR 0 10
37108: PUSH
37109: LD_VAR 0 8
37113: PPUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL_OW 74
37123: ST_TO_ADDR
// if not enemy then
37124: LD_VAR 0 10
37128: NOT
37129: IFFALSE 37133
// exit ;
37131: GO 37534
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37133: LD_VAR 0 11
37137: PUSH
37138: LD_VAR 0 11
37142: PPUSH
37143: LD_VAR 0 10
37147: PPUSH
37148: CALL_OW 296
37152: PUSH
37153: LD_INT 13
37155: GREATER
37156: AND
37157: PUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_VAR 0 10
37167: PPUSH
37168: CALL_OW 296
37172: PUSH
37173: LD_INT 12
37175: GREATER
37176: OR
37177: IFFALSE 37181
// exit ;
37179: GO 37534
// missile := [ 1 ] ;
37181: LD_ADDR_VAR 0 14
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37192: LD_VAR 0 9
37196: PPUSH
37197: LD_VAR 0 12
37201: PPUSH
37202: CALL_OW 325
37206: IFFALSE 37235
// missile := Insert ( missile , missile + 1 , 2 ) ;
37208: LD_ADDR_VAR 0 14
37212: PUSH
37213: LD_VAR 0 14
37217: PPUSH
37218: LD_VAR 0 14
37222: PUSH
37223: LD_INT 1
37225: PLUS
37226: PPUSH
37227: LD_INT 2
37229: PPUSH
37230: CALL_OW 2
37234: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37235: LD_VAR 0 9
37239: PPUSH
37240: LD_VAR 0 13
37244: PPUSH
37245: CALL_OW 325
37249: PUSH
37250: LD_VAR 0 10
37254: PPUSH
37255: CALL_OW 255
37259: PPUSH
37260: LD_VAR 0 13
37264: PPUSH
37265: CALL_OW 325
37269: NOT
37270: AND
37271: IFFALSE 37300
// missile := Insert ( missile , missile + 1 , 3 ) ;
37273: LD_ADDR_VAR 0 14
37277: PUSH
37278: LD_VAR 0 14
37282: PPUSH
37283: LD_VAR 0 14
37287: PUSH
37288: LD_INT 1
37290: PLUS
37291: PPUSH
37292: LD_INT 3
37294: PPUSH
37295: CALL_OW 2
37299: ST_TO_ADDR
// if missile < 2 then
37300: LD_VAR 0 14
37304: PUSH
37305: LD_INT 2
37307: LESS
37308: IFFALSE 37312
// exit ;
37310: GO 37534
// x := GetX ( enemy ) ;
37312: LD_ADDR_VAR 0 4
37316: PUSH
37317: LD_VAR 0 10
37321: PPUSH
37322: CALL_OW 250
37326: ST_TO_ADDR
// y := GetY ( enemy ) ;
37327: LD_ADDR_VAR 0 5
37331: PUSH
37332: LD_VAR 0 10
37336: PPUSH
37337: CALL_OW 251
37341: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37342: LD_ADDR_VAR 0 6
37346: PUSH
37347: LD_VAR 0 4
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PPUSH
37356: LD_INT 1
37358: PPUSH
37359: CALL_OW 12
37363: PLUS
37364: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37365: LD_ADDR_VAR 0 7
37369: PUSH
37370: LD_VAR 0 5
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PPUSH
37379: LD_INT 1
37381: PPUSH
37382: CALL_OW 12
37386: PLUS
37387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37388: LD_VAR 0 6
37392: PPUSH
37393: LD_VAR 0 7
37397: PPUSH
37398: CALL_OW 488
37402: NOT
37403: IFFALSE 37425
// begin _x := x ;
37405: LD_ADDR_VAR 0 6
37409: PUSH
37410: LD_VAR 0 4
37414: ST_TO_ADDR
// _y := y ;
37415: LD_ADDR_VAR 0 7
37419: PUSH
37420: LD_VAR 0 5
37424: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_INT 1
37432: PPUSH
37433: LD_VAR 0 14
37437: PPUSH
37438: CALL_OW 12
37442: ST_TO_ADDR
// case i of 1 :
37443: LD_VAR 0 3
37447: PUSH
37448: LD_INT 1
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37473
37456: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37457: LD_VAR 0 1
37461: PPUSH
37462: LD_VAR 0 10
37466: PPUSH
37467: CALL_OW 115
37471: GO 37534
37473: LD_INT 2
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37481
37479: GO 37503
37481: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37482: LD_VAR 0 1
37486: PPUSH
37487: LD_VAR 0 6
37491: PPUSH
37492: LD_VAR 0 7
37496: PPUSH
37497: CALL_OW 153
37501: GO 37534
37503: LD_INT 3
37505: DOUBLE
37506: EQUAL
37507: IFTRUE 37511
37509: GO 37533
37511: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37512: LD_VAR 0 1
37516: PPUSH
37517: LD_VAR 0 6
37521: PPUSH
37522: LD_VAR 0 7
37526: PPUSH
37527: CALL_OW 154
37531: GO 37534
37533: POP
// end ;
37534: LD_VAR 0 2
37538: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
// if not unit or not building then
37547: LD_VAR 0 1
37551: NOT
37552: PUSH
37553: LD_VAR 0 2
37557: NOT
37558: OR
37559: IFFALSE 37563
// exit ;
37561: GO 37721
// x := GetX ( building ) ;
37563: LD_ADDR_VAR 0 5
37567: PUSH
37568: LD_VAR 0 2
37572: PPUSH
37573: CALL_OW 250
37577: ST_TO_ADDR
// y := GetY ( building ) ;
37578: LD_ADDR_VAR 0 6
37582: PUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: CALL_OW 251
37592: ST_TO_ADDR
// for i = 0 to 5 do
37593: LD_ADDR_VAR 0 4
37597: PUSH
37598: DOUBLE
37599: LD_INT 0
37601: DEC
37602: ST_TO_ADDR
37603: LD_INT 5
37605: PUSH
37606: FOR_TO
37607: IFFALSE 37719
// begin _x := ShiftX ( x , i , 3 ) ;
37609: LD_ADDR_VAR 0 7
37613: PUSH
37614: LD_VAR 0 5
37618: PPUSH
37619: LD_VAR 0 4
37623: PPUSH
37624: LD_INT 3
37626: PPUSH
37627: CALL_OW 272
37631: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37632: LD_ADDR_VAR 0 8
37636: PUSH
37637: LD_VAR 0 6
37641: PPUSH
37642: LD_VAR 0 4
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL_OW 273
37654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37655: LD_VAR 0 7
37659: PPUSH
37660: LD_VAR 0 8
37664: PPUSH
37665: CALL_OW 488
37669: NOT
37670: IFFALSE 37674
// continue ;
37672: GO 37606
// if HexInfo ( _x , _y ) = 0 then
37674: LD_VAR 0 7
37678: PPUSH
37679: LD_VAR 0 8
37683: PPUSH
37684: CALL_OW 428
37688: PUSH
37689: LD_INT 0
37691: EQUAL
37692: IFFALSE 37717
// begin ComMoveXY ( unit , _x , _y ) ;
37694: LD_VAR 0 1
37698: PPUSH
37699: LD_VAR 0 7
37703: PPUSH
37704: LD_VAR 0 8
37708: PPUSH
37709: CALL_OW 111
// exit ;
37713: POP
37714: POP
37715: GO 37721
// end ; end ;
37717: GO 37606
37719: POP
37720: POP
// end ;
37721: LD_VAR 0 3
37725: RET
// export function ScanBase ( side , base_area ) ; begin
37726: LD_INT 0
37728: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: LD_INT 81
37741: PUSH
37742: LD_VAR 0 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 70
37755: ST_TO_ADDR
// end ;
37756: LD_VAR 0 3
37760: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37761: LD_INT 0
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
// result := false ;
37767: LD_ADDR_VAR 0 2
37771: PUSH
37772: LD_INT 0
37774: ST_TO_ADDR
// side := GetSide ( unit ) ;
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 255
37789: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37790: LD_ADDR_VAR 0 4
37794: PUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 248
37804: ST_TO_ADDR
// case nat of 1 :
37805: LD_VAR 0 4
37809: PUSH
37810: LD_INT 1
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37829
37818: POP
// tech := tech_lassight ; 2 :
37819: LD_ADDR_VAR 0 5
37823: PUSH
37824: LD_INT 12
37826: ST_TO_ADDR
37827: GO 37868
37829: LD_INT 2
37831: DOUBLE
37832: EQUAL
37833: IFTRUE 37837
37835: GO 37848
37837: POP
// tech := tech_mortar ; 3 :
37838: LD_ADDR_VAR 0 5
37842: PUSH
37843: LD_INT 41
37845: ST_TO_ADDR
37846: GO 37868
37848: LD_INT 3
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37867
37856: POP
// tech := tech_bazooka ; end ;
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: LD_INT 44
37864: ST_TO_ADDR
37865: GO 37868
37867: POP
// if Researched ( side , tech ) then
37868: LD_VAR 0 3
37872: PPUSH
37873: LD_VAR 0 5
37877: PPUSH
37878: CALL_OW 325
37882: IFFALSE 37909
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37884: LD_ADDR_VAR 0 2
37888: PUSH
37889: LD_INT 5
37891: PUSH
37892: LD_INT 8
37894: PUSH
37895: LD_INT 9
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: PUSH
37903: LD_VAR 0 4
37907: ARRAY
37908: ST_TO_ADDR
// end ;
37909: LD_VAR 0 2
37913: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
37918: PPUSH
// if not mines then
37919: LD_VAR 0 2
37923: NOT
37924: IFFALSE 37928
// exit ;
37926: GO 38072
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37928: LD_ADDR_VAR 0 5
37932: PUSH
37933: LD_INT 81
37935: PUSH
37936: LD_VAR 0 1
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 3
37947: PUSH
37948: LD_INT 21
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PPUSH
37966: CALL_OW 69
37970: ST_TO_ADDR
// for i in mines do
37971: LD_ADDR_VAR 0 4
37975: PUSH
37976: LD_VAR 0 2
37980: PUSH
37981: FOR_IN
37982: IFFALSE 38070
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37984: LD_VAR 0 4
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PPUSH
37993: LD_VAR 0 4
37997: PUSH
37998: LD_INT 2
38000: ARRAY
38001: PPUSH
38002: CALL_OW 458
38006: NOT
38007: IFFALSE 38011
// continue ;
38009: GO 37981
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38011: LD_VAR 0 4
38015: PUSH
38016: LD_INT 1
38018: ARRAY
38019: PPUSH
38020: LD_VAR 0 4
38024: PUSH
38025: LD_INT 2
38027: ARRAY
38028: PPUSH
38029: CALL_OW 428
38033: PUSH
38034: LD_VAR 0 5
38038: IN
38039: IFFALSE 38068
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38041: LD_VAR 0 4
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: LD_VAR 0 4
38054: PUSH
38055: LD_INT 2
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 1
38063: PPUSH
38064: CALL_OW 456
// end ;
38068: GO 37981
38070: POP
38071: POP
// end ;
38072: LD_VAR 0 3
38076: RET
// export function Count ( array ) ; var i ; begin
38077: LD_INT 0
38079: PPUSH
38080: PPUSH
// result := 0 ;
38081: LD_ADDR_VAR 0 2
38085: PUSH
38086: LD_INT 0
38088: ST_TO_ADDR
// for i in array do
38089: LD_ADDR_VAR 0 3
38093: PUSH
38094: LD_VAR 0 1
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38124
// if i then
38102: LD_VAR 0 3
38106: IFFALSE 38122
// result := result + 1 ;
38108: LD_ADDR_VAR 0 2
38112: PUSH
38113: LD_VAR 0 2
38117: PUSH
38118: LD_INT 1
38120: PLUS
38121: ST_TO_ADDR
38122: GO 38099
38124: POP
38125: POP
// end ;
38126: LD_VAR 0 2
38130: RET
// export function IsEmpty ( building ) ; begin
38131: LD_INT 0
38133: PPUSH
// if not building then
38134: LD_VAR 0 1
38138: NOT
38139: IFFALSE 38143
// exit ;
38141: GO 38186
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38143: LD_ADDR_VAR 0 2
38147: PUSH
38148: LD_VAR 0 1
38152: PUSH
38153: LD_INT 22
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 255
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 58
38172: PUSH
38173: EMPTY
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PPUSH
38180: CALL_OW 69
38184: IN
38185: ST_TO_ADDR
// end ;
38186: LD_VAR 0 2
38190: RET
// export function IsNotFull ( building ) ; begin
38191: LD_INT 0
38193: PPUSH
// if not building then
38194: LD_VAR 0 1
38198: NOT
38199: IFFALSE 38203
// exit ;
38201: GO 38222
// result := UnitsInside ( building ) < 6 ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 313
38217: PUSH
38218: LD_INT 6
38220: LESS
38221: ST_TO_ADDR
// end ;
38222: LD_VAR 0 2
38226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38227: LD_INT 0
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
// tmp := [ ] ;
38233: LD_ADDR_VAR 0 3
38237: PUSH
38238: EMPTY
38239: ST_TO_ADDR
// list := [ ] ;
38240: LD_ADDR_VAR 0 5
38244: PUSH
38245: EMPTY
38246: ST_TO_ADDR
// for i = 16 to 25 do
38247: LD_ADDR_VAR 0 4
38251: PUSH
38252: DOUBLE
38253: LD_INT 16
38255: DEC
38256: ST_TO_ADDR
38257: LD_INT 25
38259: PUSH
38260: FOR_TO
38261: IFFALSE 38334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_VAR 0 3
38272: PUSH
38273: LD_INT 22
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 255
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 91
38292: PUSH
38293: LD_VAR 0 1
38297: PUSH
38298: LD_INT 6
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 30
38308: PUSH
38309: LD_VAR 0 4
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: PUSH
38323: EMPTY
38324: LIST
38325: PPUSH
38326: CALL_OW 69
38330: ADD
38331: ST_TO_ADDR
38332: GO 38260
38334: POP
38335: POP
// for i = 1 to tmp do
38336: LD_ADDR_VAR 0 4
38340: PUSH
38341: DOUBLE
38342: LD_INT 1
38344: DEC
38345: ST_TO_ADDR
38346: LD_VAR 0 3
38350: PUSH
38351: FOR_TO
38352: IFFALSE 38440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_VAR 0 5
38363: PUSH
38364: LD_VAR 0 3
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PPUSH
38375: CALL_OW 266
38379: PUSH
38380: LD_VAR 0 3
38384: PUSH
38385: LD_VAR 0 4
38389: ARRAY
38390: PPUSH
38391: CALL_OW 250
38395: PUSH
38396: LD_VAR 0 3
38400: PUSH
38401: LD_VAR 0 4
38405: ARRAY
38406: PPUSH
38407: CALL_OW 251
38411: PUSH
38412: LD_VAR 0 3
38416: PUSH
38417: LD_VAR 0 4
38421: ARRAY
38422: PPUSH
38423: CALL_OW 254
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: ADD
38437: ST_TO_ADDR
38438: GO 38351
38440: POP
38441: POP
// result := list ;
38442: LD_ADDR_VAR 0 2
38446: PUSH
38447: LD_VAR 0 5
38451: ST_TO_ADDR
// end ;
38452: LD_VAR 0 2
38456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38457: LD_INT 0
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
// if not factory then
38466: LD_VAR 0 1
38470: NOT
38471: IFFALSE 38475
// exit ;
38473: GO 39068
// if control = control_apeman then
38475: LD_VAR 0 4
38479: PUSH
38480: LD_INT 5
38482: EQUAL
38483: IFFALSE 38592
// begin tmp := UnitsInside ( factory ) ;
38485: LD_ADDR_VAR 0 8
38489: PUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 313
38499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38500: LD_VAR 0 8
38504: PPUSH
38505: LD_INT 25
38507: PUSH
38508: LD_INT 12
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PPUSH
38515: CALL_OW 72
38519: NOT
38520: IFFALSE 38530
// control := control_manual ;
38522: LD_ADDR_VAR 0 4
38526: PUSH
38527: LD_INT 1
38529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38530: LD_ADDR_VAR 0 8
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL 38227 0 1
38544: ST_TO_ADDR
// if tmp then
38545: LD_VAR 0 8
38549: IFFALSE 38592
// begin for i in tmp do
38551: LD_ADDR_VAR 0 7
38555: PUSH
38556: LD_VAR 0 8
38560: PUSH
38561: FOR_IN
38562: IFFALSE 38590
// if i [ 1 ] = b_ext_radio then
38564: LD_VAR 0 7
38568: PUSH
38569: LD_INT 1
38571: ARRAY
38572: PUSH
38573: LD_INT 22
38575: EQUAL
38576: IFFALSE 38588
// begin control := control_remote ;
38578: LD_ADDR_VAR 0 4
38582: PUSH
38583: LD_INT 2
38585: ST_TO_ADDR
// break ;
38586: GO 38590
// end ;
38588: GO 38561
38590: POP
38591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38592: LD_VAR 0 1
38596: PPUSH
38597: LD_VAR 0 2
38601: PPUSH
38602: LD_VAR 0 3
38606: PPUSH
38607: LD_VAR 0 4
38611: PPUSH
38612: LD_VAR 0 5
38616: PPUSH
38617: CALL_OW 448
38621: IFFALSE 38656
// begin result := [ chassis , engine , control , weapon ] ;
38623: LD_ADDR_VAR 0 6
38627: PUSH
38628: LD_VAR 0 2
38632: PUSH
38633: LD_VAR 0 3
38637: PUSH
38638: LD_VAR 0 4
38642: PUSH
38643: LD_VAR 0 5
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// exit ;
38654: GO 39068
// end ; _chassis := AvailableChassisList ( factory ) ;
38656: LD_ADDR_VAR 0 9
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 475
38670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38671: LD_ADDR_VAR 0 11
38675: PUSH
38676: LD_VAR 0 1
38680: PPUSH
38681: CALL_OW 476
38685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38686: LD_ADDR_VAR 0 12
38690: PUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 477
38700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38701: LD_ADDR_VAR 0 10
38705: PUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 478
38715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38716: LD_VAR 0 9
38720: NOT
38721: PUSH
38722: LD_VAR 0 11
38726: NOT
38727: OR
38728: PUSH
38729: LD_VAR 0 12
38733: NOT
38734: OR
38735: PUSH
38736: LD_VAR 0 10
38740: NOT
38741: OR
38742: IFFALSE 38777
// begin result := [ chassis , engine , control , weapon ] ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_VAR 0 3
38758: PUSH
38759: LD_VAR 0 4
38763: PUSH
38764: LD_VAR 0 5
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: ST_TO_ADDR
// exit ;
38775: GO 39068
// end ; if not chassis in _chassis then
38777: LD_VAR 0 2
38781: PUSH
38782: LD_VAR 0 9
38786: IN
38787: NOT
38788: IFFALSE 38814
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_VAR 0 9
38799: PUSH
38800: LD_INT 1
38802: PPUSH
38803: LD_VAR 0 9
38807: PPUSH
38808: CALL_OW 12
38812: ARRAY
38813: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38814: LD_VAR 0 2
38818: PPUSH
38819: LD_VAR 0 3
38823: PPUSH
38824: CALL 39073 0 2
38828: NOT
38829: IFFALSE 38888
// repeat engine := _engine [ 1 ] ;
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: LD_VAR 0 11
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38845: LD_ADDR_VAR 0 11
38849: PUSH
38850: LD_VAR 0 11
38854: PPUSH
38855: LD_INT 1
38857: PPUSH
38858: CALL_OW 3
38862: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38863: LD_VAR 0 2
38867: PPUSH
38868: LD_VAR 0 3
38872: PPUSH
38873: CALL 39073 0 2
38877: PUSH
38878: LD_VAR 0 11
38882: PUSH
38883: EMPTY
38884: EQUAL
38885: OR
38886: IFFALSE 38831
// if not control in _control then
38888: LD_VAR 0 4
38892: PUSH
38893: LD_VAR 0 12
38897: IN
38898: NOT
38899: IFFALSE 38925
// control := _control [ rand ( 1 , _control ) ] ;
38901: LD_ADDR_VAR 0 4
38905: PUSH
38906: LD_VAR 0 12
38910: PUSH
38911: LD_INT 1
38913: PPUSH
38914: LD_VAR 0 12
38918: PPUSH
38919: CALL_OW 12
38923: ARRAY
38924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38925: LD_VAR 0 2
38929: PPUSH
38930: LD_VAR 0 5
38934: PPUSH
38935: CALL 39293 0 2
38939: NOT
38940: IFFALSE 38999
// repeat weapon := _weapon [ 1 ] ;
38942: LD_ADDR_VAR 0 5
38946: PUSH
38947: LD_VAR 0 10
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38956: LD_ADDR_VAR 0 10
38960: PUSH
38961: LD_VAR 0 10
38965: PPUSH
38966: LD_INT 1
38968: PPUSH
38969: CALL_OW 3
38973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38974: LD_VAR 0 2
38978: PPUSH
38979: LD_VAR 0 5
38983: PPUSH
38984: CALL 39293 0 2
38988: PUSH
38989: LD_VAR 0 10
38993: PUSH
38994: EMPTY
38995: EQUAL
38996: OR
38997: IFFALSE 38942
// result := [ ] ;
38999: LD_ADDR_VAR 0 6
39003: PUSH
39004: EMPTY
39005: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39006: LD_VAR 0 1
39010: PPUSH
39011: LD_VAR 0 2
39015: PPUSH
39016: LD_VAR 0 3
39020: PPUSH
39021: LD_VAR 0 4
39025: PPUSH
39026: LD_VAR 0 5
39030: PPUSH
39031: CALL_OW 448
39035: IFFALSE 39068
// result := [ chassis , engine , control , weapon ] ;
39037: LD_ADDR_VAR 0 6
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_VAR 0 3
39051: PUSH
39052: LD_VAR 0 4
39056: PUSH
39057: LD_VAR 0 5
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 6
39072: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39073: LD_INT 0
39075: PPUSH
// if not chassis or not engine then
39076: LD_VAR 0 1
39080: NOT
39081: PUSH
39082: LD_VAR 0 2
39086: NOT
39087: OR
39088: IFFALSE 39092
// exit ;
39090: GO 39288
// case engine of engine_solar :
39092: LD_VAR 0 2
39096: PUSH
39097: LD_INT 2
39099: DOUBLE
39100: EQUAL
39101: IFTRUE 39105
39103: GO 39143
39105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: LD_INT 11
39113: PUSH
39114: LD_INT 12
39116: PUSH
39117: LD_INT 13
39119: PUSH
39120: LD_INT 14
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
39141: GO 39272
39143: LD_INT 1
39145: DOUBLE
39146: EQUAL
39147: IFTRUE 39151
39149: GO 39213
39151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39152: LD_ADDR_VAR 0 3
39156: PUSH
39157: LD_INT 11
39159: PUSH
39160: LD_INT 12
39162: PUSH
39163: LD_INT 13
39165: PUSH
39166: LD_INT 14
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 3
39177: PUSH
39178: LD_INT 4
39180: PUSH
39181: LD_INT 5
39183: PUSH
39184: LD_INT 21
39186: PUSH
39187: LD_INT 23
39189: PUSH
39190: LD_INT 22
39192: PUSH
39193: LD_INT 24
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
39211: GO 39272
39213: LD_INT 3
39215: DOUBLE
39216: EQUAL
39217: IFTRUE 39221
39219: GO 39271
39221: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_INT 13
39229: PUSH
39230: LD_INT 14
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: LD_INT 4
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: LD_INT 21
39247: PUSH
39248: LD_INT 22
39250: PUSH
39251: LD_INT 23
39253: PUSH
39254: LD_INT 24
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
39269: GO 39272
39271: POP
// result := ( chassis in result ) ;
39272: LD_ADDR_VAR 0 3
39276: PUSH
39277: LD_VAR 0 1
39281: PUSH
39282: LD_VAR 0 3
39286: IN
39287: ST_TO_ADDR
// end ;
39288: LD_VAR 0 3
39292: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39293: LD_INT 0
39295: PPUSH
// if not chassis or not weapon then
39296: LD_VAR 0 1
39300: NOT
39301: PUSH
39302: LD_VAR 0 2
39306: NOT
39307: OR
39308: IFFALSE 39312
// exit ;
39310: GO 40338
// case weapon of us_machine_gun :
39312: LD_VAR 0 2
39316: PUSH
39317: LD_INT 2
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39355
39325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: LD_INT 3
39339: PUSH
39340: LD_INT 4
39342: PUSH
39343: LD_INT 5
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: ST_TO_ADDR
39353: GO 40322
39355: LD_INT 3
39357: DOUBLE
39358: EQUAL
39359: IFTRUE 39363
39361: GO 39393
39363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39364: LD_ADDR_VAR 0 3
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: LD_INT 4
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: ST_TO_ADDR
39391: GO 40322
39393: LD_INT 11
39395: DOUBLE
39396: EQUAL
39397: IFTRUE 39401
39399: GO 39431
39401: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: LD_INT 4
39418: PUSH
39419: LD_INT 5
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
39429: GO 40322
39431: LD_INT 4
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39465
39439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39440: LD_ADDR_VAR 0 3
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 4
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
39463: GO 40322
39465: LD_INT 5
39467: DOUBLE
39468: EQUAL
39469: IFTRUE 39473
39471: GO 39499
39473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39474: LD_ADDR_VAR 0 3
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: LD_INT 5
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
39497: GO 40322
39499: LD_INT 9
39501: DOUBLE
39502: EQUAL
39503: IFTRUE 39507
39505: GO 39533
39507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39508: LD_ADDR_VAR 0 3
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: LD_INT 4
39521: PUSH
39522: LD_INT 5
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
39531: GO 40322
39533: LD_INT 7
39535: DOUBLE
39536: EQUAL
39537: IFTRUE 39541
39539: GO 39567
39541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39542: LD_ADDR_VAR 0 3
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 4
39555: PUSH
39556: LD_INT 5
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
39565: GO 40322
39567: LD_INT 12
39569: DOUBLE
39570: EQUAL
39571: IFTRUE 39575
39573: GO 39601
39575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39576: LD_ADDR_VAR 0 3
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: LD_INT 4
39589: PUSH
39590: LD_INT 5
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
39599: GO 40322
39601: LD_INT 13
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39635
39609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39610: LD_ADDR_VAR 0 3
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: LD_INT 5
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
39633: GO 40322
39635: LD_INT 14
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39661
39643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 4
39651: PUSH
39652: LD_INT 5
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: ST_TO_ADDR
39659: GO 40322
39661: LD_INT 6
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39687
39669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_INT 4
39677: PUSH
39678: LD_INT 5
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: ST_TO_ADDR
39685: GO 40322
39687: LD_INT 10
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39695
39693: GO 39713
39695: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39696: LD_ADDR_VAR 0 3
39700: PUSH
39701: LD_INT 4
39703: PUSH
39704: LD_INT 5
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: ST_TO_ADDR
39711: GO 40322
39713: LD_INT 22
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39747
39721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_INT 11
39729: PUSH
39730: LD_INT 12
39732: PUSH
39733: LD_INT 13
39735: PUSH
39736: LD_INT 14
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
39745: GO 40322
39747: LD_INT 23
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39781
39755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: LD_INT 11
39763: PUSH
39764: LD_INT 12
39766: PUSH
39767: LD_INT 13
39769: PUSH
39770: LD_INT 14
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
39779: GO 40322
39781: LD_INT 24
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 39815
39789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_INT 11
39797: PUSH
39798: LD_INT 12
39800: PUSH
39801: LD_INT 13
39803: PUSH
39804: LD_INT 14
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
39813: GO 40322
39815: LD_INT 30
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39849
39823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: LD_INT 11
39831: PUSH
39832: LD_INT 12
39834: PUSH
39835: LD_INT 13
39837: PUSH
39838: LD_INT 14
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
39847: GO 40322
39849: LD_INT 25
39851: DOUBLE
39852: EQUAL
39853: IFTRUE 39857
39855: GO 39875
39857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_INT 13
39865: PUSH
39866: LD_INT 14
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: ST_TO_ADDR
39873: GO 40322
39875: LD_INT 27
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39883
39881: GO 39901
39883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39884: LD_ADDR_VAR 0 3
39888: PUSH
39889: LD_INT 13
39891: PUSH
39892: LD_INT 14
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: ST_TO_ADDR
39899: GO 40322
39901: LD_INT 28
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39927
39909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 13
39917: PUSH
39918: LD_INT 14
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: ST_TO_ADDR
39925: GO 40322
39927: LD_INT 29
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39953
39935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 14
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: ST_TO_ADDR
39951: GO 40322
39953: LD_INT 31
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39961
39959: GO 39979
39961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39962: LD_ADDR_VAR 0 3
39966: PUSH
39967: LD_INT 13
39969: PUSH
39970: LD_INT 14
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: ST_TO_ADDR
39977: GO 40322
39979: LD_INT 26
39981: DOUBLE
39982: EQUAL
39983: IFTRUE 39987
39985: GO 40005
39987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_INT 13
39995: PUSH
39996: LD_INT 14
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: ST_TO_ADDR
40003: GO 40322
40005: LD_INT 42
40007: DOUBLE
40008: EQUAL
40009: IFTRUE 40013
40011: GO 40039
40013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: LD_INT 21
40021: PUSH
40022: LD_INT 22
40024: PUSH
40025: LD_INT 23
40027: PUSH
40028: LD_INT 24
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
40037: GO 40322
40039: LD_INT 43
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40073
40047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 21
40055: PUSH
40056: LD_INT 22
40058: PUSH
40059: LD_INT 23
40061: PUSH
40062: LD_INT 24
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: ST_TO_ADDR
40071: GO 40322
40073: LD_INT 44
40075: DOUBLE
40076: EQUAL
40077: IFTRUE 40081
40079: GO 40107
40081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 21
40089: PUSH
40090: LD_INT 22
40092: PUSH
40093: LD_INT 23
40095: PUSH
40096: LD_INT 24
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
40105: GO 40322
40107: LD_INT 45
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 40141
40115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_INT 21
40123: PUSH
40124: LD_INT 22
40126: PUSH
40127: LD_INT 23
40129: PUSH
40130: LD_INT 24
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
40139: GO 40322
40141: LD_INT 49
40143: DOUBLE
40144: EQUAL
40145: IFTRUE 40149
40147: GO 40175
40149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40150: LD_ADDR_VAR 0 3
40154: PUSH
40155: LD_INT 21
40157: PUSH
40158: LD_INT 22
40160: PUSH
40161: LD_INT 23
40163: PUSH
40164: LD_INT 24
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: ST_TO_ADDR
40173: GO 40322
40175: LD_INT 51
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40183
40181: GO 40209
40183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: LD_INT 21
40191: PUSH
40192: LD_INT 22
40194: PUSH
40195: LD_INT 23
40197: PUSH
40198: LD_INT 24
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
40207: GO 40322
40209: LD_INT 52
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40243
40217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 21
40225: PUSH
40226: LD_INT 22
40228: PUSH
40229: LD_INT 23
40231: PUSH
40232: LD_INT 24
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
40241: GO 40322
40243: LD_INT 53
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40251
40249: GO 40269
40251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: LD_INT 23
40259: PUSH
40260: LD_INT 24
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: ST_TO_ADDR
40267: GO 40322
40269: LD_INT 46
40271: DOUBLE
40272: EQUAL
40273: IFTRUE 40277
40275: GO 40295
40277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 23
40285: PUSH
40286: LD_INT 24
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: ST_TO_ADDR
40293: GO 40322
40295: LD_INT 47
40297: DOUBLE
40298: EQUAL
40299: IFTRUE 40303
40301: GO 40321
40303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40304: LD_ADDR_VAR 0 3
40308: PUSH
40309: LD_INT 23
40311: PUSH
40312: LD_INT 24
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: ST_TO_ADDR
40319: GO 40322
40321: POP
// result := ( chassis in result ) ;
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_VAR 0 1
40331: PUSH
40332: LD_VAR 0 3
40336: IN
40337: ST_TO_ADDR
// end ;
40338: LD_VAR 0 3
40342: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
// result := array ;
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: LD_VAR 0 1
40361: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40362: LD_VAR 0 1
40366: NOT
40367: PUSH
40368: LD_VAR 0 2
40372: NOT
40373: OR
40374: PUSH
40375: LD_VAR 0 3
40379: NOT
40380: OR
40381: PUSH
40382: LD_VAR 0 2
40386: PUSH
40387: LD_VAR 0 1
40391: GREATER
40392: OR
40393: PUSH
40394: LD_VAR 0 3
40398: PUSH
40399: LD_VAR 0 1
40403: GREATER
40404: OR
40405: IFFALSE 40409
// exit ;
40407: GO 40705
// if direction then
40409: LD_VAR 0 4
40413: IFFALSE 40477
// begin d := 1 ;
40415: LD_ADDR_VAR 0 9
40419: PUSH
40420: LD_INT 1
40422: ST_TO_ADDR
// if i_from > i_to then
40423: LD_VAR 0 2
40427: PUSH
40428: LD_VAR 0 3
40432: GREATER
40433: IFFALSE 40459
// length := ( array - i_from ) + i_to else
40435: LD_ADDR_VAR 0 11
40439: PUSH
40440: LD_VAR 0 1
40444: PUSH
40445: LD_VAR 0 2
40449: MINUS
40450: PUSH
40451: LD_VAR 0 3
40455: PLUS
40456: ST_TO_ADDR
40457: GO 40475
// length := i_to - i_from ;
40459: LD_ADDR_VAR 0 11
40463: PUSH
40464: LD_VAR 0 3
40468: PUSH
40469: LD_VAR 0 2
40473: MINUS
40474: ST_TO_ADDR
// end else
40475: GO 40538
// begin d := - 1 ;
40477: LD_ADDR_VAR 0 9
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: ST_TO_ADDR
// if i_from > i_to then
40486: LD_VAR 0 2
40490: PUSH
40491: LD_VAR 0 3
40495: GREATER
40496: IFFALSE 40516
// length := i_from - i_to else
40498: LD_ADDR_VAR 0 11
40502: PUSH
40503: LD_VAR 0 2
40507: PUSH
40508: LD_VAR 0 3
40512: MINUS
40513: ST_TO_ADDR
40514: GO 40538
// length := ( array - i_to ) + i_from ;
40516: LD_ADDR_VAR 0 11
40520: PUSH
40521: LD_VAR 0 1
40525: PUSH
40526: LD_VAR 0 3
40530: MINUS
40531: PUSH
40532: LD_VAR 0 2
40536: PLUS
40537: ST_TO_ADDR
// end ; if not length then
40538: LD_VAR 0 11
40542: NOT
40543: IFFALSE 40547
// exit ;
40545: GO 40705
// tmp := array ;
40547: LD_ADDR_VAR 0 10
40551: PUSH
40552: LD_VAR 0 1
40556: ST_TO_ADDR
// for i = 1 to length do
40557: LD_ADDR_VAR 0 6
40561: PUSH
40562: DOUBLE
40563: LD_INT 1
40565: DEC
40566: ST_TO_ADDR
40567: LD_VAR 0 11
40571: PUSH
40572: FOR_TO
40573: IFFALSE 40693
// begin for j = 1 to array do
40575: LD_ADDR_VAR 0 7
40579: PUSH
40580: DOUBLE
40581: LD_INT 1
40583: DEC
40584: ST_TO_ADDR
40585: LD_VAR 0 1
40589: PUSH
40590: FOR_TO
40591: IFFALSE 40679
// begin k := j + d ;
40593: LD_ADDR_VAR 0 8
40597: PUSH
40598: LD_VAR 0 7
40602: PUSH
40603: LD_VAR 0 9
40607: PLUS
40608: ST_TO_ADDR
// if k > array then
40609: LD_VAR 0 8
40613: PUSH
40614: LD_VAR 0 1
40618: GREATER
40619: IFFALSE 40629
// k := 1 ;
40621: LD_ADDR_VAR 0 8
40625: PUSH
40626: LD_INT 1
40628: ST_TO_ADDR
// if not k then
40629: LD_VAR 0 8
40633: NOT
40634: IFFALSE 40646
// k := array ;
40636: LD_ADDR_VAR 0 8
40640: PUSH
40641: LD_VAR 0 1
40645: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40646: LD_ADDR_VAR 0 10
40650: PUSH
40651: LD_VAR 0 10
40655: PPUSH
40656: LD_VAR 0 8
40660: PPUSH
40661: LD_VAR 0 1
40665: PUSH
40666: LD_VAR 0 7
40670: ARRAY
40671: PPUSH
40672: CALL_OW 1
40676: ST_TO_ADDR
// end ;
40677: GO 40590
40679: POP
40680: POP
// array := tmp ;
40681: LD_ADDR_VAR 0 1
40685: PUSH
40686: LD_VAR 0 10
40690: ST_TO_ADDR
// end ;
40691: GO 40572
40693: POP
40694: POP
// result := array ;
40695: LD_ADDR_VAR 0 5
40699: PUSH
40700: LD_VAR 0 1
40704: ST_TO_ADDR
// end ;
40705: LD_VAR 0 5
40709: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
// result := 0 ;
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 0
40721: ST_TO_ADDR
// if not array or not value in array then
40722: LD_VAR 0 1
40726: NOT
40727: PUSH
40728: LD_VAR 0 2
40732: PUSH
40733: LD_VAR 0 1
40737: IN
40738: NOT
40739: OR
40740: IFFALSE 40744
// exit ;
40742: GO 40798
// for i = 1 to array do
40744: LD_ADDR_VAR 0 4
40748: PUSH
40749: DOUBLE
40750: LD_INT 1
40752: DEC
40753: ST_TO_ADDR
40754: LD_VAR 0 1
40758: PUSH
40759: FOR_TO
40760: IFFALSE 40796
// if value = array [ i ] then
40762: LD_VAR 0 2
40766: PUSH
40767: LD_VAR 0 1
40771: PUSH
40772: LD_VAR 0 4
40776: ARRAY
40777: EQUAL
40778: IFFALSE 40794
// begin result := i ;
40780: LD_ADDR_VAR 0 3
40784: PUSH
40785: LD_VAR 0 4
40789: ST_TO_ADDR
// exit ;
40790: POP
40791: POP
40792: GO 40798
// end ;
40794: GO 40759
40796: POP
40797: POP
// end ;
40798: LD_VAR 0 3
40802: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40803: LD_INT 0
40805: PPUSH
// vc_chassis := chassis ;
40806: LD_ADDR_OWVAR 37
40810: PUSH
40811: LD_VAR 0 1
40815: ST_TO_ADDR
// vc_engine := engine ;
40816: LD_ADDR_OWVAR 39
40820: PUSH
40821: LD_VAR 0 2
40825: ST_TO_ADDR
// vc_control := control ;
40826: LD_ADDR_OWVAR 38
40830: PUSH
40831: LD_VAR 0 3
40835: ST_TO_ADDR
// vc_weapon := weapon ;
40836: LD_ADDR_OWVAR 40
40840: PUSH
40841: LD_VAR 0 4
40845: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40846: LD_ADDR_OWVAR 41
40850: PUSH
40851: LD_VAR 0 5
40855: ST_TO_ADDR
// end ;
40856: LD_VAR 0 6
40860: RET
// export function WantPlant ( unit ) ; var task ; begin
40861: LD_INT 0
40863: PPUSH
40864: PPUSH
// result := false ;
40865: LD_ADDR_VAR 0 2
40869: PUSH
40870: LD_INT 0
40872: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL_OW 437
40887: ST_TO_ADDR
// if task then
40888: LD_VAR 0 3
40892: IFFALSE 40920
// if task [ 1 ] [ 1 ] = p then
40894: LD_VAR 0 3
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: PUSH
40907: LD_STRING p
40909: EQUAL
40910: IFFALSE 40920
// result := true ;
40912: LD_ADDR_VAR 0 2
40916: PUSH
40917: LD_INT 1
40919: ST_TO_ADDR
// end ;
40920: LD_VAR 0 2
40924: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
// if pos < 1 then
40931: LD_VAR 0 2
40935: PUSH
40936: LD_INT 1
40938: LESS
40939: IFFALSE 40943
// exit ;
40941: GO 41246
// if pos = 1 then
40943: LD_VAR 0 2
40947: PUSH
40948: LD_INT 1
40950: EQUAL
40951: IFFALSE 40984
// result := Replace ( arr , pos [ 1 ] , value ) else
40953: LD_ADDR_VAR 0 4
40957: PUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: LD_VAR 0 2
40967: PUSH
40968: LD_INT 1
40970: ARRAY
40971: PPUSH
40972: LD_VAR 0 3
40976: PPUSH
40977: CALL_OW 1
40981: ST_TO_ADDR
40982: GO 41246
// begin tmp := arr ;
40984: LD_ADDR_VAR 0 6
40988: PUSH
40989: LD_VAR 0 1
40993: ST_TO_ADDR
// s_arr := [ tmp ] ;
40994: LD_ADDR_VAR 0 7
40998: PUSH
40999: LD_VAR 0 6
41003: PUSH
41004: EMPTY
41005: LIST
41006: ST_TO_ADDR
// for i = 1 to pos - 1 do
41007: LD_ADDR_VAR 0 5
41011: PUSH
41012: DOUBLE
41013: LD_INT 1
41015: DEC
41016: ST_TO_ADDR
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 1
41024: MINUS
41025: PUSH
41026: FOR_TO
41027: IFFALSE 41072
// begin tmp := tmp [ pos [ i ] ] ;
41029: LD_ADDR_VAR 0 6
41033: PUSH
41034: LD_VAR 0 6
41038: PUSH
41039: LD_VAR 0 2
41043: PUSH
41044: LD_VAR 0 5
41048: ARRAY
41049: ARRAY
41050: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41051: LD_ADDR_VAR 0 7
41055: PUSH
41056: LD_VAR 0 7
41060: PUSH
41061: LD_VAR 0 6
41065: PUSH
41066: EMPTY
41067: LIST
41068: ADD
41069: ST_TO_ADDR
// end ;
41070: GO 41026
41072: POP
41073: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 6
41083: PPUSH
41084: LD_VAR 0 2
41088: PUSH
41089: LD_VAR 0 2
41093: ARRAY
41094: PPUSH
41095: LD_VAR 0 3
41099: PPUSH
41100: CALL_OW 1
41104: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41105: LD_ADDR_VAR 0 7
41109: PUSH
41110: LD_VAR 0 7
41114: PPUSH
41115: LD_VAR 0 7
41119: PPUSH
41120: LD_VAR 0 6
41124: PPUSH
41125: CALL_OW 1
41129: ST_TO_ADDR
// for i = s_arr downto 2 do
41130: LD_ADDR_VAR 0 5
41134: PUSH
41135: DOUBLE
41136: LD_VAR 0 7
41140: INC
41141: ST_TO_ADDR
41142: LD_INT 2
41144: PUSH
41145: FOR_DOWNTO
41146: IFFALSE 41230
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41148: LD_ADDR_VAR 0 6
41152: PUSH
41153: LD_VAR 0 7
41157: PUSH
41158: LD_VAR 0 5
41162: PUSH
41163: LD_INT 1
41165: MINUS
41166: ARRAY
41167: PPUSH
41168: LD_VAR 0 2
41172: PUSH
41173: LD_VAR 0 5
41177: PUSH
41178: LD_INT 1
41180: MINUS
41181: ARRAY
41182: PPUSH
41183: LD_VAR 0 7
41187: PUSH
41188: LD_VAR 0 5
41192: ARRAY
41193: PPUSH
41194: CALL_OW 1
41198: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41199: LD_ADDR_VAR 0 7
41203: PUSH
41204: LD_VAR 0 7
41208: PPUSH
41209: LD_VAR 0 5
41213: PUSH
41214: LD_INT 1
41216: MINUS
41217: PPUSH
41218: LD_VAR 0 6
41222: PPUSH
41223: CALL_OW 1
41227: ST_TO_ADDR
// end ;
41228: GO 41145
41230: POP
41231: POP
// result := s_arr [ 1 ] ;
41232: LD_ADDR_VAR 0 4
41236: PUSH
41237: LD_VAR 0 7
41241: PUSH
41242: LD_INT 1
41244: ARRAY
41245: ST_TO_ADDR
// end ; end ;
41246: LD_VAR 0 4
41250: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41251: LD_INT 0
41253: PPUSH
41254: PPUSH
// if not list then
41255: LD_VAR 0 1
41259: NOT
41260: IFFALSE 41264
// exit ;
41262: GO 41355
// i := list [ pos1 ] ;
41264: LD_ADDR_VAR 0 5
41268: PUSH
41269: LD_VAR 0 1
41273: PUSH
41274: LD_VAR 0 2
41278: ARRAY
41279: ST_TO_ADDR
// if not i then
41280: LD_VAR 0 5
41284: NOT
41285: IFFALSE 41289
// exit ;
41287: GO 41355
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41289: LD_ADDR_VAR 0 1
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: LD_VAR 0 2
41303: PPUSH
41304: LD_VAR 0 1
41308: PUSH
41309: LD_VAR 0 3
41313: ARRAY
41314: PPUSH
41315: CALL_OW 1
41319: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41320: LD_ADDR_VAR 0 1
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: LD_VAR 0 3
41334: PPUSH
41335: LD_VAR 0 5
41339: PPUSH
41340: CALL_OW 1
41344: ST_TO_ADDR
// result := list ;
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: LD_VAR 0 1
41354: ST_TO_ADDR
// end ;
41355: LD_VAR 0 4
41359: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41360: LD_INT 0
41362: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 250
41377: PPUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 251
41387: PPUSH
41388: LD_VAR 0 2
41392: PPUSH
41393: LD_VAR 0 3
41397: PPUSH
41398: LD_VAR 0 4
41402: PPUSH
41403: CALL 41413 0 5
41407: ST_TO_ADDR
// end ;
41408: LD_VAR 0 5
41412: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
// if not list then
41419: LD_VAR 0 3
41423: NOT
41424: IFFALSE 41428
// exit ;
41426: GO 41816
// result := [ ] ;
41428: LD_ADDR_VAR 0 6
41432: PUSH
41433: EMPTY
41434: ST_TO_ADDR
// for i in list do
41435: LD_ADDR_VAR 0 7
41439: PUSH
41440: LD_VAR 0 3
41444: PUSH
41445: FOR_IN
41446: IFFALSE 41648
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41448: LD_ADDR_VAR 0 9
41452: PUSH
41453: LD_VAR 0 7
41457: PPUSH
41458: LD_VAR 0 1
41462: PPUSH
41463: LD_VAR 0 2
41467: PPUSH
41468: CALL_OW 297
41472: ST_TO_ADDR
// if not result then
41473: LD_VAR 0 6
41477: NOT
41478: IFFALSE 41504
// result := [ [ i , tmp ] ] else
41480: LD_ADDR_VAR 0 6
41484: PUSH
41485: LD_VAR 0 7
41489: PUSH
41490: LD_VAR 0 9
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: EMPTY
41500: LIST
41501: ST_TO_ADDR
41502: GO 41646
// begin if result [ result ] [ 2 ] < tmp then
41504: LD_VAR 0 6
41508: PUSH
41509: LD_VAR 0 6
41513: ARRAY
41514: PUSH
41515: LD_INT 2
41517: ARRAY
41518: PUSH
41519: LD_VAR 0 9
41523: LESS
41524: IFFALSE 41566
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41526: LD_ADDR_VAR 0 6
41530: PUSH
41531: LD_VAR 0 6
41535: PPUSH
41536: LD_VAR 0 6
41540: PUSH
41541: LD_INT 1
41543: PLUS
41544: PPUSH
41545: LD_VAR 0 7
41549: PUSH
41550: LD_VAR 0 9
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PPUSH
41559: CALL_OW 2
41563: ST_TO_ADDR
41564: GO 41646
// for j = 1 to result do
41566: LD_ADDR_VAR 0 8
41570: PUSH
41571: DOUBLE
41572: LD_INT 1
41574: DEC
41575: ST_TO_ADDR
41576: LD_VAR 0 6
41580: PUSH
41581: FOR_TO
41582: IFFALSE 41644
// begin if tmp < result [ j ] [ 2 ] then
41584: LD_VAR 0 9
41588: PUSH
41589: LD_VAR 0 6
41593: PUSH
41594: LD_VAR 0 8
41598: ARRAY
41599: PUSH
41600: LD_INT 2
41602: ARRAY
41603: LESS
41604: IFFALSE 41642
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41606: LD_ADDR_VAR 0 6
41610: PUSH
41611: LD_VAR 0 6
41615: PPUSH
41616: LD_VAR 0 8
41620: PPUSH
41621: LD_VAR 0 7
41625: PUSH
41626: LD_VAR 0 9
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PPUSH
41635: CALL_OW 2
41639: ST_TO_ADDR
// break ;
41640: GO 41644
// end ; end ;
41642: GO 41581
41644: POP
41645: POP
// end ; end ;
41646: GO 41445
41648: POP
41649: POP
// if result and not asc then
41650: LD_VAR 0 6
41654: PUSH
41655: LD_VAR 0 4
41659: NOT
41660: AND
41661: IFFALSE 41736
// begin tmp := result ;
41663: LD_ADDR_VAR 0 9
41667: PUSH
41668: LD_VAR 0 6
41672: ST_TO_ADDR
// for i = tmp downto 1 do
41673: LD_ADDR_VAR 0 7
41677: PUSH
41678: DOUBLE
41679: LD_VAR 0 9
41683: INC
41684: ST_TO_ADDR
41685: LD_INT 1
41687: PUSH
41688: FOR_DOWNTO
41689: IFFALSE 41734
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41691: LD_ADDR_VAR 0 6
41695: PUSH
41696: LD_VAR 0 6
41700: PPUSH
41701: LD_VAR 0 9
41705: PUSH
41706: LD_VAR 0 7
41710: MINUS
41711: PUSH
41712: LD_INT 1
41714: PLUS
41715: PPUSH
41716: LD_VAR 0 9
41720: PUSH
41721: LD_VAR 0 7
41725: ARRAY
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
41732: GO 41688
41734: POP
41735: POP
// end ; tmp := [ ] ;
41736: LD_ADDR_VAR 0 9
41740: PUSH
41741: EMPTY
41742: ST_TO_ADDR
// if mode then
41743: LD_VAR 0 5
41747: IFFALSE 41816
// begin for i = 1 to result do
41749: LD_ADDR_VAR 0 7
41753: PUSH
41754: DOUBLE
41755: LD_INT 1
41757: DEC
41758: ST_TO_ADDR
41759: LD_VAR 0 6
41763: PUSH
41764: FOR_TO
41765: IFFALSE 41804
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41767: LD_ADDR_VAR 0 9
41771: PUSH
41772: LD_VAR 0 9
41776: PPUSH
41777: LD_VAR 0 7
41781: PPUSH
41782: LD_VAR 0 6
41786: PUSH
41787: LD_VAR 0 7
41791: ARRAY
41792: PUSH
41793: LD_INT 1
41795: ARRAY
41796: PPUSH
41797: CALL_OW 1
41801: ST_TO_ADDR
41802: GO 41764
41804: POP
41805: POP
// result := tmp ;
41806: LD_ADDR_VAR 0 6
41810: PUSH
41811: LD_VAR 0 9
41815: ST_TO_ADDR
// end ; end ;
41816: LD_VAR 0 6
41820: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41821: LD_INT 0
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41829: LD_ADDR_VAR 0 5
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// if not x or not y then
41851: LD_VAR 0 2
41855: NOT
41856: PUSH
41857: LD_VAR 0 3
41861: NOT
41862: OR
41863: IFFALSE 41867
// exit ;
41865: GO 43513
// if not range then
41867: LD_VAR 0 4
41871: NOT
41872: IFFALSE 41882
// range := 10 ;
41874: LD_ADDR_VAR 0 4
41878: PUSH
41879: LD_INT 10
41881: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41882: LD_ADDR_VAR 0 8
41886: PUSH
41887: LD_INT 81
41889: PUSH
41890: LD_VAR 0 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 92
41901: PUSH
41902: LD_VAR 0 2
41906: PUSH
41907: LD_VAR 0 3
41911: PUSH
41912: LD_VAR 0 4
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 21
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL_OW 69
41949: ST_TO_ADDR
// if not tmp then
41950: LD_VAR 0 8
41954: NOT
41955: IFFALSE 41959
// exit ;
41957: GO 43513
// for i in tmp do
41959: LD_ADDR_VAR 0 6
41963: PUSH
41964: LD_VAR 0 8
41968: PUSH
41969: FOR_IN
41970: IFFALSE 43488
// begin points := [ 0 , 0 , 0 ] ;
41972: LD_ADDR_VAR 0 9
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// bpoints := 1 ;
41991: LD_ADDR_VAR 0 10
41995: PUSH
41996: LD_INT 1
41998: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41999: LD_VAR 0 6
42003: PPUSH
42004: CALL_OW 247
42008: PUSH
42009: LD_INT 1
42011: DOUBLE
42012: EQUAL
42013: IFTRUE 42017
42015: GO 42595
42017: POP
// begin if GetClass ( i ) = 1 then
42018: LD_VAR 0 6
42022: PPUSH
42023: CALL_OW 257
42027: PUSH
42028: LD_INT 1
42030: EQUAL
42031: IFFALSE 42052
// points := [ 10 , 5 , 3 ] ;
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_INT 10
42040: PUSH
42041: LD_INT 5
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42052: LD_VAR 0 6
42056: PPUSH
42057: CALL_OW 257
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: IN
42076: IFFALSE 42097
// points := [ 3 , 2 , 1 ] ;
42078: LD_ADDR_VAR 0 9
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42097: LD_VAR 0 6
42101: PPUSH
42102: CALL_OW 257
42106: PUSH
42107: LD_INT 5
42109: EQUAL
42110: IFFALSE 42131
// points := [ 130 , 5 , 2 ] ;
42112: LD_ADDR_VAR 0 9
42116: PUSH
42117: LD_INT 130
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42131: LD_VAR 0 6
42135: PPUSH
42136: CALL_OW 257
42140: PUSH
42141: LD_INT 8
42143: EQUAL
42144: IFFALSE 42165
// points := [ 35 , 35 , 30 ] ;
42146: LD_ADDR_VAR 0 9
42150: PUSH
42151: LD_INT 35
42153: PUSH
42154: LD_INT 35
42156: PUSH
42157: LD_INT 30
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42165: LD_VAR 0 6
42169: PPUSH
42170: CALL_OW 257
42174: PUSH
42175: LD_INT 9
42177: EQUAL
42178: IFFALSE 42199
// points := [ 20 , 55 , 40 ] ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_INT 20
42187: PUSH
42188: LD_INT 55
42190: PUSH
42191: LD_INT 40
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42199: LD_VAR 0 6
42203: PPUSH
42204: CALL_OW 257
42208: PUSH
42209: LD_INT 12
42211: PUSH
42212: LD_INT 16
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: IN
42219: IFFALSE 42240
// points := [ 5 , 3 , 2 ] ;
42221: LD_ADDR_VAR 0 9
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42240: LD_VAR 0 6
42244: PPUSH
42245: CALL_OW 257
42249: PUSH
42250: LD_INT 17
42252: EQUAL
42253: IFFALSE 42274
// points := [ 100 , 50 , 75 ] ;
42255: LD_ADDR_VAR 0 9
42259: PUSH
42260: LD_INT 100
42262: PUSH
42263: LD_INT 50
42265: PUSH
42266: LD_INT 75
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42274: LD_VAR 0 6
42278: PPUSH
42279: CALL_OW 257
42283: PUSH
42284: LD_INT 15
42286: EQUAL
42287: IFFALSE 42308
// points := [ 10 , 5 , 3 ] ;
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_INT 10
42296: PUSH
42297: LD_INT 5
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42308: LD_VAR 0 6
42312: PPUSH
42313: CALL_OW 257
42317: PUSH
42318: LD_INT 14
42320: EQUAL
42321: IFFALSE 42342
// points := [ 10 , 0 , 0 ] ;
42323: LD_ADDR_VAR 0 9
42327: PUSH
42328: LD_INT 10
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42342: LD_VAR 0 6
42346: PPUSH
42347: CALL_OW 257
42351: PUSH
42352: LD_INT 11
42354: EQUAL
42355: IFFALSE 42376
// points := [ 30 , 10 , 5 ] ;
42357: LD_ADDR_VAR 0 9
42361: PUSH
42362: LD_INT 30
42364: PUSH
42365: LD_INT 10
42367: PUSH
42368: LD_INT 5
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42376: LD_VAR 0 1
42380: PPUSH
42381: LD_INT 5
42383: PPUSH
42384: CALL_OW 321
42388: PUSH
42389: LD_INT 2
42391: EQUAL
42392: IFFALSE 42409
// bpoints := bpoints * 1.8 ;
42394: LD_ADDR_VAR 0 10
42398: PUSH
42399: LD_VAR 0 10
42403: PUSH
42404: LD_REAL  1.80000000000000E+0000
42407: MUL
42408: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42409: LD_VAR 0 6
42413: PPUSH
42414: CALL_OW 257
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: LD_INT 4
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: IN
42437: PUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_INT 51
42445: PPUSH
42446: CALL_OW 321
42450: PUSH
42451: LD_INT 2
42453: EQUAL
42454: AND
42455: IFFALSE 42472
// bpoints := bpoints * 1.2 ;
42457: LD_ADDR_VAR 0 10
42461: PUSH
42462: LD_VAR 0 10
42466: PUSH
42467: LD_REAL  1.20000000000000E+0000
42470: MUL
42471: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42472: LD_VAR 0 6
42476: PPUSH
42477: CALL_OW 257
42481: PUSH
42482: LD_INT 5
42484: PUSH
42485: LD_INT 7
42487: PUSH
42488: LD_INT 9
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: IN
42496: PUSH
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_INT 52
42504: PPUSH
42505: CALL_OW 321
42509: PUSH
42510: LD_INT 2
42512: EQUAL
42513: AND
42514: IFFALSE 42531
// bpoints := bpoints * 1.5 ;
42516: LD_ADDR_VAR 0 10
42520: PUSH
42521: LD_VAR 0 10
42525: PUSH
42526: LD_REAL  1.50000000000000E+0000
42529: MUL
42530: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42531: LD_VAR 0 1
42535: PPUSH
42536: LD_INT 66
42538: PPUSH
42539: CALL_OW 321
42543: PUSH
42544: LD_INT 2
42546: EQUAL
42547: IFFALSE 42564
// bpoints := bpoints * 1.1 ;
42549: LD_ADDR_VAR 0 10
42553: PUSH
42554: LD_VAR 0 10
42558: PUSH
42559: LD_REAL  1.10000000000000E+0000
42562: MUL
42563: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42564: LD_ADDR_VAR 0 10
42568: PUSH
42569: LD_VAR 0 10
42573: PUSH
42574: LD_VAR 0 6
42578: PPUSH
42579: LD_INT 1
42581: PPUSH
42582: CALL_OW 259
42586: PUSH
42587: LD_REAL  1.15000000000000E+0000
42590: MUL
42591: MUL
42592: ST_TO_ADDR
// end ; unit_vehicle :
42593: GO 43417
42595: LD_INT 2
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42603
42601: GO 43405
42603: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42604: LD_VAR 0 6
42608: PPUSH
42609: CALL_OW 264
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 42
42619: PUSH
42620: LD_INT 24
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: IN
42628: IFFALSE 42649
// points := [ 25 , 5 , 3 ] ;
42630: LD_ADDR_VAR 0 9
42634: PUSH
42635: LD_INT 25
42637: PUSH
42638: LD_INT 5
42640: PUSH
42641: LD_INT 3
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42649: LD_VAR 0 6
42653: PPUSH
42654: CALL_OW 264
42658: PUSH
42659: LD_INT 4
42661: PUSH
42662: LD_INT 43
42664: PUSH
42665: LD_INT 25
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: IN
42673: IFFALSE 42694
// points := [ 40 , 15 , 5 ] ;
42675: LD_ADDR_VAR 0 9
42679: PUSH
42680: LD_INT 40
42682: PUSH
42683: LD_INT 15
42685: PUSH
42686: LD_INT 5
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42694: LD_VAR 0 6
42698: PPUSH
42699: CALL_OW 264
42703: PUSH
42704: LD_INT 3
42706: PUSH
42707: LD_INT 23
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: IN
42714: IFFALSE 42735
// points := [ 7 , 25 , 8 ] ;
42716: LD_ADDR_VAR 0 9
42720: PUSH
42721: LD_INT 7
42723: PUSH
42724: LD_INT 25
42726: PUSH
42727: LD_INT 8
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42735: LD_VAR 0 6
42739: PPUSH
42740: CALL_OW 264
42744: PUSH
42745: LD_INT 5
42747: PUSH
42748: LD_INT 27
42750: PUSH
42751: LD_INT 44
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: IN
42759: IFFALSE 42780
// points := [ 14 , 50 , 16 ] ;
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_INT 14
42768: PUSH
42769: LD_INT 50
42771: PUSH
42772: LD_INT 16
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42780: LD_VAR 0 6
42784: PPUSH
42785: CALL_OW 264
42789: PUSH
42790: LD_INT 6
42792: PUSH
42793: LD_INT 46
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: IN
42800: IFFALSE 42821
// points := [ 32 , 120 , 70 ] ;
42802: LD_ADDR_VAR 0 9
42806: PUSH
42807: LD_INT 32
42809: PUSH
42810: LD_INT 120
42812: PUSH
42813: LD_INT 70
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42821: LD_VAR 0 6
42825: PPUSH
42826: CALL_OW 264
42830: PUSH
42831: LD_INT 7
42833: PUSH
42834: LD_INT 28
42836: PUSH
42837: LD_INT 45
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: IN
42845: IFFALSE 42866
// points := [ 35 , 20 , 45 ] ;
42847: LD_ADDR_VAR 0 9
42851: PUSH
42852: LD_INT 35
42854: PUSH
42855: LD_INT 20
42857: PUSH
42858: LD_INT 45
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42866: LD_VAR 0 6
42870: PPUSH
42871: CALL_OW 264
42875: PUSH
42876: LD_INT 47
42878: PUSH
42879: EMPTY
42880: LIST
42881: IN
42882: IFFALSE 42903
// points := [ 67 , 45 , 75 ] ;
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: LD_INT 67
42891: PUSH
42892: LD_INT 45
42894: PUSH
42895: LD_INT 75
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42903: LD_VAR 0 6
42907: PPUSH
42908: CALL_OW 264
42912: PUSH
42913: LD_INT 26
42915: PUSH
42916: EMPTY
42917: LIST
42918: IN
42919: IFFALSE 42940
// points := [ 120 , 30 , 80 ] ;
42921: LD_ADDR_VAR 0 9
42925: PUSH
42926: LD_INT 120
42928: PUSH
42929: LD_INT 30
42931: PUSH
42932: LD_INT 80
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42940: LD_VAR 0 6
42944: PPUSH
42945: CALL_OW 264
42949: PUSH
42950: LD_INT 22
42952: PUSH
42953: EMPTY
42954: LIST
42955: IN
42956: IFFALSE 42977
// points := [ 40 , 1 , 1 ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_INT 40
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42977: LD_VAR 0 6
42981: PPUSH
42982: CALL_OW 264
42986: PUSH
42987: LD_INT 29
42989: PUSH
42990: EMPTY
42991: LIST
42992: IN
42993: IFFALSE 43014
// points := [ 70 , 200 , 400 ] ;
42995: LD_ADDR_VAR 0 9
42999: PUSH
43000: LD_INT 70
43002: PUSH
43003: LD_INT 200
43005: PUSH
43006: LD_INT 400
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43014: LD_VAR 0 6
43018: PPUSH
43019: CALL_OW 264
43023: PUSH
43024: LD_INT 14
43026: PUSH
43027: LD_INT 53
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: IN
43034: IFFALSE 43055
// points := [ 40 , 10 , 20 ] ;
43036: LD_ADDR_VAR 0 9
43040: PUSH
43041: LD_INT 40
43043: PUSH
43044: LD_INT 10
43046: PUSH
43047: LD_INT 20
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43055: LD_VAR 0 6
43059: PPUSH
43060: CALL_OW 264
43064: PUSH
43065: LD_INT 9
43067: PUSH
43068: EMPTY
43069: LIST
43070: IN
43071: IFFALSE 43092
// points := [ 5 , 70 , 20 ] ;
43073: LD_ADDR_VAR 0 9
43077: PUSH
43078: LD_INT 5
43080: PUSH
43081: LD_INT 70
43083: PUSH
43084: LD_INT 20
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43092: LD_VAR 0 6
43096: PPUSH
43097: CALL_OW 264
43101: PUSH
43102: LD_INT 10
43104: PUSH
43105: EMPTY
43106: LIST
43107: IN
43108: IFFALSE 43129
// points := [ 35 , 110 , 70 ] ;
43110: LD_ADDR_VAR 0 9
43114: PUSH
43115: LD_INT 35
43117: PUSH
43118: LD_INT 110
43120: PUSH
43121: LD_INT 70
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43129: LD_VAR 0 6
43133: PPUSH
43134: CALL_OW 265
43138: PUSH
43139: LD_INT 25
43141: EQUAL
43142: IFFALSE 43163
// points := [ 80 , 65 , 100 ] ;
43144: LD_ADDR_VAR 0 9
43148: PUSH
43149: LD_INT 80
43151: PUSH
43152: LD_INT 65
43154: PUSH
43155: LD_INT 100
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43163: LD_VAR 0 6
43167: PPUSH
43168: CALL_OW 263
43172: PUSH
43173: LD_INT 1
43175: EQUAL
43176: IFFALSE 43211
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43178: LD_ADDR_VAR 0 10
43182: PUSH
43183: LD_VAR 0 10
43187: PUSH
43188: LD_VAR 0 6
43192: PPUSH
43193: CALL_OW 311
43197: PPUSH
43198: LD_INT 3
43200: PPUSH
43201: CALL_OW 259
43205: PUSH
43206: LD_INT 4
43208: MUL
43209: MUL
43210: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43211: LD_VAR 0 6
43215: PPUSH
43216: CALL_OW 263
43220: PUSH
43221: LD_INT 2
43223: EQUAL
43224: IFFALSE 43275
// begin j := IsControledBy ( i ) ;
43226: LD_ADDR_VAR 0 7
43230: PUSH
43231: LD_VAR 0 6
43235: PPUSH
43236: CALL_OW 312
43240: ST_TO_ADDR
// if j then
43241: LD_VAR 0 7
43245: IFFALSE 43275
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43247: LD_ADDR_VAR 0 10
43251: PUSH
43252: LD_VAR 0 10
43256: PUSH
43257: LD_VAR 0 7
43261: PPUSH
43262: LD_INT 3
43264: PPUSH
43265: CALL_OW 259
43269: PUSH
43270: LD_INT 3
43272: MUL
43273: MUL
43274: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43275: LD_VAR 0 6
43279: PPUSH
43280: CALL_OW 264
43284: PUSH
43285: LD_INT 5
43287: PUSH
43288: LD_INT 6
43290: PUSH
43291: LD_INT 46
43293: PUSH
43294: LD_INT 44
43296: PUSH
43297: LD_INT 47
43299: PUSH
43300: LD_INT 45
43302: PUSH
43303: LD_INT 28
43305: PUSH
43306: LD_INT 7
43308: PUSH
43309: LD_INT 27
43311: PUSH
43312: LD_INT 29
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: IN
43327: PUSH
43328: LD_VAR 0 1
43332: PPUSH
43333: LD_INT 52
43335: PPUSH
43336: CALL_OW 321
43340: PUSH
43341: LD_INT 2
43343: EQUAL
43344: AND
43345: IFFALSE 43362
// bpoints := bpoints * 1.2 ;
43347: LD_ADDR_VAR 0 10
43351: PUSH
43352: LD_VAR 0 10
43356: PUSH
43357: LD_REAL  1.20000000000000E+0000
43360: MUL
43361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43362: LD_VAR 0 6
43366: PPUSH
43367: CALL_OW 264
43371: PUSH
43372: LD_INT 6
43374: PUSH
43375: LD_INT 46
43377: PUSH
43378: LD_INT 47
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: IN
43386: IFFALSE 43403
// bpoints := bpoints * 1.2 ;
43388: LD_ADDR_VAR 0 10
43392: PUSH
43393: LD_VAR 0 10
43397: PUSH
43398: LD_REAL  1.20000000000000E+0000
43401: MUL
43402: ST_TO_ADDR
// end ; unit_building :
43403: GO 43417
43405: LD_INT 3
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 43416
43413: POP
// ; end ;
43414: GO 43417
43416: POP
// for j = 1 to 3 do
43417: LD_ADDR_VAR 0 7
43421: PUSH
43422: DOUBLE
43423: LD_INT 1
43425: DEC
43426: ST_TO_ADDR
43427: LD_INT 3
43429: PUSH
43430: FOR_TO
43431: IFFALSE 43484
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: LD_VAR 0 5
43442: PPUSH
43443: LD_VAR 0 7
43447: PPUSH
43448: LD_VAR 0 5
43452: PUSH
43453: LD_VAR 0 7
43457: ARRAY
43458: PUSH
43459: LD_VAR 0 9
43463: PUSH
43464: LD_VAR 0 7
43468: ARRAY
43469: PUSH
43470: LD_VAR 0 10
43474: MUL
43475: PLUS
43476: PPUSH
43477: CALL_OW 1
43481: ST_TO_ADDR
43482: GO 43430
43484: POP
43485: POP
// end ;
43486: GO 41969
43488: POP
43489: POP
// result := Replace ( result , 4 , tmp ) ;
43490: LD_ADDR_VAR 0 5
43494: PUSH
43495: LD_VAR 0 5
43499: PPUSH
43500: LD_INT 4
43502: PPUSH
43503: LD_VAR 0 8
43507: PPUSH
43508: CALL_OW 1
43512: ST_TO_ADDR
// end ;
43513: LD_VAR 0 5
43517: RET
// export function DangerAtRange ( unit , range ) ; begin
43518: LD_INT 0
43520: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_VAR 0 1
43530: PPUSH
43531: CALL_OW 255
43535: PPUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 250
43545: PPUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: CALL_OW 251
43555: PPUSH
43556: LD_VAR 0 2
43560: PPUSH
43561: CALL 41821 0 4
43565: ST_TO_ADDR
// end ;
43566: LD_VAR 0 3
43570: RET
// export function DangerInArea ( side , area ) ; begin
43571: LD_INT 0
43573: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_INT 81
43586: PUSH
43587: LD_VAR 0 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PPUSH
43596: CALL_OW 70
43600: ST_TO_ADDR
// end ;
43601: LD_VAR 0 3
43605: RET
// export function IsExtension ( b ) ; begin
43606: LD_INT 0
43608: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43609: LD_ADDR_VAR 0 2
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 23
43621: PUSH
43622: LD_INT 20
43624: PUSH
43625: LD_INT 22
43627: PUSH
43628: LD_INT 17
43630: PUSH
43631: LD_INT 24
43633: PUSH
43634: LD_INT 21
43636: PUSH
43637: LD_INT 19
43639: PUSH
43640: LD_INT 16
43642: PUSH
43643: LD_INT 25
43645: PUSH
43646: LD_INT 18
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: IN
43661: ST_TO_ADDR
// end ;
43662: LD_VAR 0 2
43666: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43667: LD_INT 0
43669: PPUSH
43670: PPUSH
43671: PPUSH
// result := [ ] ;
43672: LD_ADDR_VAR 0 4
43676: PUSH
43677: EMPTY
43678: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43679: LD_ADDR_VAR 0 5
43683: PUSH
43684: LD_VAR 0 2
43688: PPUSH
43689: LD_INT 21
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PPUSH
43699: CALL_OW 70
43703: ST_TO_ADDR
// if not tmp then
43704: LD_VAR 0 5
43708: NOT
43709: IFFALSE 43713
// exit ;
43711: GO 43777
// if checkLink then
43713: LD_VAR 0 3
43717: IFFALSE 43767
// begin for i in tmp do
43719: LD_ADDR_VAR 0 6
43723: PUSH
43724: LD_VAR 0 5
43728: PUSH
43729: FOR_IN
43730: IFFALSE 43765
// if GetBase ( i ) <> base then
43732: LD_VAR 0 6
43736: PPUSH
43737: CALL_OW 274
43741: PUSH
43742: LD_VAR 0 1
43746: NONEQUAL
43747: IFFALSE 43763
// ComLinkToBase ( base , i ) ;
43749: LD_VAR 0 1
43753: PPUSH
43754: LD_VAR 0 6
43758: PPUSH
43759: CALL_OW 169
43763: GO 43729
43765: POP
43766: POP
// end ; result := tmp ;
43767: LD_ADDR_VAR 0 4
43771: PUSH
43772: LD_VAR 0 5
43776: ST_TO_ADDR
// end ;
43777: LD_VAR 0 4
43781: RET
// export function ComComplete ( units , b ) ; var i ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
// if not units then
43786: LD_VAR 0 1
43790: NOT
43791: IFFALSE 43795
// exit ;
43793: GO 43885
// for i in units do
43795: LD_ADDR_VAR 0 4
43799: PUSH
43800: LD_VAR 0 1
43804: PUSH
43805: FOR_IN
43806: IFFALSE 43883
// if BuildingStatus ( b ) = bs_build then
43808: LD_VAR 0 2
43812: PPUSH
43813: CALL_OW 461
43817: PUSH
43818: LD_INT 1
43820: EQUAL
43821: IFFALSE 43881
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43823: LD_VAR 0 4
43827: PPUSH
43828: LD_STRING h
43830: PUSH
43831: LD_VAR 0 2
43835: PPUSH
43836: CALL_OW 250
43840: PUSH
43841: LD_VAR 0 2
43845: PPUSH
43846: CALL_OW 251
43850: PUSH
43851: LD_VAR 0 2
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: PUSH
43874: EMPTY
43875: LIST
43876: PPUSH
43877: CALL_OW 446
43881: GO 43805
43883: POP
43884: POP
// end ;
43885: LD_VAR 0 3
43889: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43890: LD_INT 0
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43898: LD_VAR 0 1
43902: NOT
43903: PUSH
43904: LD_VAR 0 1
43908: PPUSH
43909: CALL_OW 263
43913: PUSH
43914: LD_INT 2
43916: EQUAL
43917: NOT
43918: OR
43919: IFFALSE 43923
// exit ;
43921: GO 44239
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43923: LD_ADDR_VAR 0 6
43927: PUSH
43928: LD_INT 22
43930: PUSH
43931: LD_VAR 0 1
43935: PPUSH
43936: CALL_OW 255
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 30
43950: PUSH
43951: LD_INT 36
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 34
43960: PUSH
43961: LD_INT 31
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PPUSH
43977: CALL_OW 69
43981: ST_TO_ADDR
// if not tmp then
43982: LD_VAR 0 6
43986: NOT
43987: IFFALSE 43991
// exit ;
43989: GO 44239
// result := [ ] ;
43991: LD_ADDR_VAR 0 2
43995: PUSH
43996: EMPTY
43997: ST_TO_ADDR
// for i in tmp do
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_VAR 0 6
44007: PUSH
44008: FOR_IN
44009: IFFALSE 44080
// begin t := UnitsInside ( i ) ;
44011: LD_ADDR_VAR 0 4
44015: PUSH
44016: LD_VAR 0 3
44020: PPUSH
44021: CALL_OW 313
44025: ST_TO_ADDR
// if t then
44026: LD_VAR 0 4
44030: IFFALSE 44078
// for j in t do
44032: LD_ADDR_VAR 0 7
44036: PUSH
44037: LD_VAR 0 4
44041: PUSH
44042: FOR_IN
44043: IFFALSE 44076
// result := Insert ( result , result + 1 , j ) ;
44045: LD_ADDR_VAR 0 2
44049: PUSH
44050: LD_VAR 0 2
44054: PPUSH
44055: LD_VAR 0 2
44059: PUSH
44060: LD_INT 1
44062: PLUS
44063: PPUSH
44064: LD_VAR 0 7
44068: PPUSH
44069: CALL_OW 2
44073: ST_TO_ADDR
44074: GO 44042
44076: POP
44077: POP
// end ;
44078: GO 44008
44080: POP
44081: POP
// if not result then
44082: LD_VAR 0 2
44086: NOT
44087: IFFALSE 44091
// exit ;
44089: GO 44239
// mech := result [ 1 ] ;
44091: LD_ADDR_VAR 0 5
44095: PUSH
44096: LD_VAR 0 2
44100: PUSH
44101: LD_INT 1
44103: ARRAY
44104: ST_TO_ADDR
// if result > 1 then
44105: LD_VAR 0 2
44109: PUSH
44110: LD_INT 1
44112: GREATER
44113: IFFALSE 44225
// for i = 2 to result do
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: DOUBLE
44121: LD_INT 2
44123: DEC
44124: ST_TO_ADDR
44125: LD_VAR 0 2
44129: PUSH
44130: FOR_TO
44131: IFFALSE 44223
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44133: LD_ADDR_VAR 0 4
44137: PUSH
44138: LD_VAR 0 2
44142: PUSH
44143: LD_VAR 0 3
44147: ARRAY
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: CALL_OW 259
44156: PUSH
44157: LD_VAR 0 2
44161: PUSH
44162: LD_VAR 0 3
44166: ARRAY
44167: PPUSH
44168: CALL_OW 432
44172: MINUS
44173: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44174: LD_VAR 0 4
44178: PUSH
44179: LD_VAR 0 5
44183: PPUSH
44184: LD_INT 3
44186: PPUSH
44187: CALL_OW 259
44191: PUSH
44192: LD_VAR 0 5
44196: PPUSH
44197: CALL_OW 432
44201: MINUS
44202: GREATEREQUAL
44203: IFFALSE 44221
// mech := result [ i ] ;
44205: LD_ADDR_VAR 0 5
44209: PUSH
44210: LD_VAR 0 2
44214: PUSH
44215: LD_VAR 0 3
44219: ARRAY
44220: ST_TO_ADDR
// end ;
44221: GO 44130
44223: POP
44224: POP
// ComLinkTo ( vehicle , mech ) ;
44225: LD_VAR 0 1
44229: PPUSH
44230: LD_VAR 0 5
44234: PPUSH
44235: CALL_OW 135
// end ;
44239: LD_VAR 0 2
44243: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44244: LD_INT 0
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
// result := [ ] ;
44259: LD_ADDR_VAR 0 7
44263: PUSH
44264: EMPTY
44265: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44266: LD_VAR 0 1
44270: PPUSH
44271: CALL_OW 266
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: IN
44286: NOT
44287: IFFALSE 44291
// exit ;
44289: GO 45925
// if name then
44291: LD_VAR 0 3
44295: IFFALSE 44311
// SetBName ( base_dep , name ) ;
44297: LD_VAR 0 1
44301: PPUSH
44302: LD_VAR 0 3
44306: PPUSH
44307: CALL_OW 500
// base := GetBase ( base_dep ) ;
44311: LD_ADDR_VAR 0 15
44315: PUSH
44316: LD_VAR 0 1
44320: PPUSH
44321: CALL_OW 274
44325: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44326: LD_ADDR_VAR 0 16
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 255
44340: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44341: LD_ADDR_VAR 0 17
44345: PUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: CALL_OW 248
44355: ST_TO_ADDR
// if sources then
44356: LD_VAR 0 5
44360: IFFALSE 44407
// for i = 1 to 3 do
44362: LD_ADDR_VAR 0 8
44366: PUSH
44367: DOUBLE
44368: LD_INT 1
44370: DEC
44371: ST_TO_ADDR
44372: LD_INT 3
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44405
// AddResourceType ( base , i , sources [ i ] ) ;
44378: LD_VAR 0 15
44382: PPUSH
44383: LD_VAR 0 8
44387: PPUSH
44388: LD_VAR 0 5
44392: PUSH
44393: LD_VAR 0 8
44397: ARRAY
44398: PPUSH
44399: CALL_OW 276
44403: GO 44375
44405: POP
44406: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44407: LD_ADDR_VAR 0 18
44411: PUSH
44412: LD_VAR 0 15
44416: PPUSH
44417: LD_VAR 0 2
44421: PPUSH
44422: LD_INT 1
44424: PPUSH
44425: CALL 43667 0 3
44429: ST_TO_ADDR
// InitHc ;
44430: CALL_OW 19
// InitUc ;
44434: CALL_OW 18
// uc_side := side ;
44438: LD_ADDR_OWVAR 20
44442: PUSH
44443: LD_VAR 0 16
44447: ST_TO_ADDR
// uc_nation := nation ;
44448: LD_ADDR_OWVAR 21
44452: PUSH
44453: LD_VAR 0 17
44457: ST_TO_ADDR
// if buildings then
44458: LD_VAR 0 18
44462: IFFALSE 45784
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44464: LD_ADDR_VAR 0 19
44468: PUSH
44469: LD_VAR 0 18
44473: PPUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 30
44479: PUSH
44480: LD_INT 29
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 30
44489: PUSH
44490: LD_INT 30
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: PPUSH
44502: CALL_OW 72
44506: ST_TO_ADDR
// if tmp then
44507: LD_VAR 0 19
44511: IFFALSE 44559
// for i in tmp do
44513: LD_ADDR_VAR 0 8
44517: PUSH
44518: LD_VAR 0 19
44522: PUSH
44523: FOR_IN
44524: IFFALSE 44557
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44526: LD_VAR 0 8
44530: PPUSH
44531: CALL_OW 250
44535: PPUSH
44536: LD_VAR 0 8
44540: PPUSH
44541: CALL_OW 251
44545: PPUSH
44546: LD_VAR 0 16
44550: PPUSH
44551: CALL_OW 441
44555: GO 44523
44557: POP
44558: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44559: LD_VAR 0 18
44563: PPUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 30
44569: PUSH
44570: LD_INT 32
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 30
44579: PUSH
44580: LD_INT 33
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 72
44596: IFFALSE 44684
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44598: LD_ADDR_VAR 0 8
44602: PUSH
44603: LD_VAR 0 18
44607: PPUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 30
44613: PUSH
44614: LD_INT 32
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 30
44623: PUSH
44624: LD_INT 33
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: PPUSH
44636: CALL_OW 72
44640: PUSH
44641: FOR_IN
44642: IFFALSE 44682
// begin if not GetBWeapon ( i ) then
44644: LD_VAR 0 8
44648: PPUSH
44649: CALL_OW 269
44653: NOT
44654: IFFALSE 44680
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44656: LD_VAR 0 8
44660: PPUSH
44661: LD_VAR 0 8
44665: PPUSH
44666: LD_VAR 0 2
44670: PPUSH
44671: CALL 45930 0 2
44675: PPUSH
44676: CALL_OW 431
// end ;
44680: GO 44641
44682: POP
44683: POP
// end ; for i = 1 to personel do
44684: LD_ADDR_VAR 0 8
44688: PUSH
44689: DOUBLE
44690: LD_INT 1
44692: DEC
44693: ST_TO_ADDR
44694: LD_VAR 0 6
44698: PUSH
44699: FOR_TO
44700: IFFALSE 45764
// begin if i > 4 then
44702: LD_VAR 0 8
44706: PUSH
44707: LD_INT 4
44709: GREATER
44710: IFFALSE 44714
// break ;
44712: GO 45764
// case i of 1 :
44714: LD_VAR 0 8
44718: PUSH
44719: LD_INT 1
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44727
44725: GO 44807
44727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44728: LD_ADDR_VAR 0 12
44732: PUSH
44733: LD_VAR 0 18
44737: PPUSH
44738: LD_INT 22
44740: PUSH
44741: LD_VAR 0 16
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 58
44752: PUSH
44753: EMPTY
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 30
44761: PUSH
44762: LD_INT 32
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 30
44771: PUSH
44772: LD_INT 4
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 30
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: PPUSH
44800: CALL_OW 72
44804: ST_TO_ADDR
44805: GO 45029
44807: LD_INT 2
44809: DOUBLE
44810: EQUAL
44811: IFTRUE 44815
44813: GO 44877
44815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44816: LD_ADDR_VAR 0 12
44820: PUSH
44821: LD_VAR 0 18
44825: PPUSH
44826: LD_INT 22
44828: PUSH
44829: LD_VAR 0 16
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 30
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 30
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PPUSH
44870: CALL_OW 72
44874: ST_TO_ADDR
44875: GO 45029
44877: LD_INT 3
44879: DOUBLE
44880: EQUAL
44881: IFTRUE 44885
44883: GO 44947
44885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44886: LD_ADDR_VAR 0 12
44890: PUSH
44891: LD_VAR 0 18
44895: PPUSH
44896: LD_INT 22
44898: PUSH
44899: LD_VAR 0 16
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 30
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 30
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PPUSH
44940: CALL_OW 72
44944: ST_TO_ADDR
44945: GO 45029
44947: LD_INT 4
44949: DOUBLE
44950: EQUAL
44951: IFTRUE 44955
44953: GO 45028
44955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44956: LD_ADDR_VAR 0 12
44960: PUSH
44961: LD_VAR 0 18
44965: PPUSH
44966: LD_INT 22
44968: PUSH
44969: LD_VAR 0 16
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 30
44983: PUSH
44984: LD_INT 6
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 30
44993: PUSH
44994: LD_INT 7
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 30
45003: PUSH
45004: LD_INT 8
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PPUSH
45021: CALL_OW 72
45025: ST_TO_ADDR
45026: GO 45029
45028: POP
// if i = 1 then
45029: LD_VAR 0 8
45033: PUSH
45034: LD_INT 1
45036: EQUAL
45037: IFFALSE 45148
// begin tmp := [ ] ;
45039: LD_ADDR_VAR 0 19
45043: PUSH
45044: EMPTY
45045: ST_TO_ADDR
// for j in f do
45046: LD_ADDR_VAR 0 9
45050: PUSH
45051: LD_VAR 0 12
45055: PUSH
45056: FOR_IN
45057: IFFALSE 45130
// if GetBType ( j ) = b_bunker then
45059: LD_VAR 0 9
45063: PPUSH
45064: CALL_OW 266
45068: PUSH
45069: LD_INT 32
45071: EQUAL
45072: IFFALSE 45099
// tmp := Insert ( tmp , 1 , j ) else
45074: LD_ADDR_VAR 0 19
45078: PUSH
45079: LD_VAR 0 19
45083: PPUSH
45084: LD_INT 1
45086: PPUSH
45087: LD_VAR 0 9
45091: PPUSH
45092: CALL_OW 2
45096: ST_TO_ADDR
45097: GO 45128
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45099: LD_ADDR_VAR 0 19
45103: PUSH
45104: LD_VAR 0 19
45108: PPUSH
45109: LD_VAR 0 19
45113: PUSH
45114: LD_INT 1
45116: PLUS
45117: PPUSH
45118: LD_VAR 0 9
45122: PPUSH
45123: CALL_OW 2
45127: ST_TO_ADDR
45128: GO 45056
45130: POP
45131: POP
// if tmp then
45132: LD_VAR 0 19
45136: IFFALSE 45148
// f := tmp ;
45138: LD_ADDR_VAR 0 12
45142: PUSH
45143: LD_VAR 0 19
45147: ST_TO_ADDR
// end ; x := personel [ i ] ;
45148: LD_ADDR_VAR 0 13
45152: PUSH
45153: LD_VAR 0 6
45157: PUSH
45158: LD_VAR 0 8
45162: ARRAY
45163: ST_TO_ADDR
// if x = - 1 then
45164: LD_VAR 0 13
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: EQUAL
45173: IFFALSE 45382
// begin for j in f do
45175: LD_ADDR_VAR 0 9
45179: PUSH
45180: LD_VAR 0 12
45184: PUSH
45185: FOR_IN
45186: IFFALSE 45378
// repeat InitHc ;
45188: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45192: LD_VAR 0 9
45196: PPUSH
45197: CALL_OW 266
45201: PUSH
45202: LD_INT 5
45204: EQUAL
45205: IFFALSE 45275
// begin if UnitsInside ( j ) < 3 then
45207: LD_VAR 0 9
45211: PPUSH
45212: CALL_OW 313
45216: PUSH
45217: LD_INT 3
45219: LESS
45220: IFFALSE 45256
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45222: LD_INT 0
45224: PPUSH
45225: LD_INT 5
45227: PUSH
45228: LD_INT 8
45230: PUSH
45231: LD_INT 9
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: PUSH
45239: LD_VAR 0 17
45243: ARRAY
45244: PPUSH
45245: LD_VAR 0 4
45249: PPUSH
45250: CALL_OW 380
45254: GO 45273
// PrepareHuman ( false , i , skill ) ;
45256: LD_INT 0
45258: PPUSH
45259: LD_VAR 0 8
45263: PPUSH
45264: LD_VAR 0 4
45268: PPUSH
45269: CALL_OW 380
// end else
45273: GO 45292
// PrepareHuman ( false , i , skill ) ;
45275: LD_INT 0
45277: PPUSH
45278: LD_VAR 0 8
45282: PPUSH
45283: LD_VAR 0 4
45287: PPUSH
45288: CALL_OW 380
// un := CreateHuman ;
45292: LD_ADDR_VAR 0 14
45296: PUSH
45297: CALL_OW 44
45301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45302: LD_ADDR_VAR 0 7
45306: PUSH
45307: LD_VAR 0 7
45311: PPUSH
45312: LD_INT 1
45314: PPUSH
45315: LD_VAR 0 14
45319: PPUSH
45320: CALL_OW 2
45324: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45325: LD_VAR 0 14
45329: PPUSH
45330: LD_VAR 0 9
45334: PPUSH
45335: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45339: LD_VAR 0 9
45343: PPUSH
45344: CALL_OW 313
45348: PUSH
45349: LD_INT 6
45351: EQUAL
45352: PUSH
45353: LD_VAR 0 9
45357: PPUSH
45358: CALL_OW 266
45362: PUSH
45363: LD_INT 32
45365: PUSH
45366: LD_INT 31
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: IN
45373: OR
45374: IFFALSE 45188
45376: GO 45185
45378: POP
45379: POP
// end else
45380: GO 45762
// for j = 1 to x do
45382: LD_ADDR_VAR 0 9
45386: PUSH
45387: DOUBLE
45388: LD_INT 1
45390: DEC
45391: ST_TO_ADDR
45392: LD_VAR 0 13
45396: PUSH
45397: FOR_TO
45398: IFFALSE 45760
// begin InitHc ;
45400: CALL_OW 19
// if not f then
45404: LD_VAR 0 12
45408: NOT
45409: IFFALSE 45498
// begin PrepareHuman ( false , i , skill ) ;
45411: LD_INT 0
45413: PPUSH
45414: LD_VAR 0 8
45418: PPUSH
45419: LD_VAR 0 4
45423: PPUSH
45424: CALL_OW 380
// un := CreateHuman ;
45428: LD_ADDR_VAR 0 14
45432: PUSH
45433: CALL_OW 44
45437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45438: LD_ADDR_VAR 0 7
45442: PUSH
45443: LD_VAR 0 7
45447: PPUSH
45448: LD_INT 1
45450: PPUSH
45451: LD_VAR 0 14
45455: PPUSH
45456: CALL_OW 2
45460: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45461: LD_VAR 0 14
45465: PPUSH
45466: LD_VAR 0 1
45470: PPUSH
45471: CALL_OW 250
45475: PPUSH
45476: LD_VAR 0 1
45480: PPUSH
45481: CALL_OW 251
45485: PPUSH
45486: LD_INT 10
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: CALL_OW 50
// continue ;
45496: GO 45397
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45498: LD_VAR 0 12
45502: PUSH
45503: LD_INT 1
45505: ARRAY
45506: PPUSH
45507: CALL_OW 313
45511: PUSH
45512: LD_VAR 0 12
45516: PUSH
45517: LD_INT 1
45519: ARRAY
45520: PPUSH
45521: CALL_OW 266
45525: PUSH
45526: LD_INT 32
45528: PUSH
45529: LD_INT 31
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: IN
45536: AND
45537: PUSH
45538: LD_VAR 0 12
45542: PUSH
45543: LD_INT 1
45545: ARRAY
45546: PPUSH
45547: CALL_OW 313
45551: PUSH
45552: LD_INT 6
45554: EQUAL
45555: OR
45556: IFFALSE 45576
// f := Delete ( f , 1 ) ;
45558: LD_ADDR_VAR 0 12
45562: PUSH
45563: LD_VAR 0 12
45567: PPUSH
45568: LD_INT 1
45570: PPUSH
45571: CALL_OW 3
45575: ST_TO_ADDR
// if not f then
45576: LD_VAR 0 12
45580: NOT
45581: IFFALSE 45599
// begin x := x + 2 ;
45583: LD_ADDR_VAR 0 13
45587: PUSH
45588: LD_VAR 0 13
45592: PUSH
45593: LD_INT 2
45595: PLUS
45596: ST_TO_ADDR
// continue ;
45597: GO 45397
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45599: LD_VAR 0 12
45603: PUSH
45604: LD_INT 1
45606: ARRAY
45607: PPUSH
45608: CALL_OW 266
45612: PUSH
45613: LD_INT 5
45615: EQUAL
45616: IFFALSE 45690
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45618: LD_VAR 0 12
45622: PUSH
45623: LD_INT 1
45625: ARRAY
45626: PPUSH
45627: CALL_OW 313
45631: PUSH
45632: LD_INT 3
45634: LESS
45635: IFFALSE 45671
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45637: LD_INT 0
45639: PPUSH
45640: LD_INT 5
45642: PUSH
45643: LD_INT 8
45645: PUSH
45646: LD_INT 9
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: PUSH
45654: LD_VAR 0 17
45658: ARRAY
45659: PPUSH
45660: LD_VAR 0 4
45664: PPUSH
45665: CALL_OW 380
45669: GO 45688
// PrepareHuman ( false , i , skill ) ;
45671: LD_INT 0
45673: PPUSH
45674: LD_VAR 0 8
45678: PPUSH
45679: LD_VAR 0 4
45683: PPUSH
45684: CALL_OW 380
// end else
45688: GO 45707
// PrepareHuman ( false , i , skill ) ;
45690: LD_INT 0
45692: PPUSH
45693: LD_VAR 0 8
45697: PPUSH
45698: LD_VAR 0 4
45702: PPUSH
45703: CALL_OW 380
// un := CreateHuman ;
45707: LD_ADDR_VAR 0 14
45711: PUSH
45712: CALL_OW 44
45716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45717: LD_ADDR_VAR 0 7
45721: PUSH
45722: LD_VAR 0 7
45726: PPUSH
45727: LD_INT 1
45729: PPUSH
45730: LD_VAR 0 14
45734: PPUSH
45735: CALL_OW 2
45739: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45740: LD_VAR 0 14
45744: PPUSH
45745: LD_VAR 0 12
45749: PUSH
45750: LD_INT 1
45752: ARRAY
45753: PPUSH
45754: CALL_OW 52
// end ;
45758: GO 45397
45760: POP
45761: POP
// end ;
45762: GO 44699
45764: POP
45765: POP
// result := result ^ buildings ;
45766: LD_ADDR_VAR 0 7
45770: PUSH
45771: LD_VAR 0 7
45775: PUSH
45776: LD_VAR 0 18
45780: ADD
45781: ST_TO_ADDR
// end else
45782: GO 45925
// begin for i = 1 to personel do
45784: LD_ADDR_VAR 0 8
45788: PUSH
45789: DOUBLE
45790: LD_INT 1
45792: DEC
45793: ST_TO_ADDR
45794: LD_VAR 0 6
45798: PUSH
45799: FOR_TO
45800: IFFALSE 45923
// begin if i > 4 then
45802: LD_VAR 0 8
45806: PUSH
45807: LD_INT 4
45809: GREATER
45810: IFFALSE 45814
// break ;
45812: GO 45923
// x := personel [ i ] ;
45814: LD_ADDR_VAR 0 13
45818: PUSH
45819: LD_VAR 0 6
45823: PUSH
45824: LD_VAR 0 8
45828: ARRAY
45829: ST_TO_ADDR
// if x = - 1 then
45830: LD_VAR 0 13
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: EQUAL
45839: IFFALSE 45843
// continue ;
45841: GO 45799
// PrepareHuman ( false , i , skill ) ;
45843: LD_INT 0
45845: PPUSH
45846: LD_VAR 0 8
45850: PPUSH
45851: LD_VAR 0 4
45855: PPUSH
45856: CALL_OW 380
// un := CreateHuman ;
45860: LD_ADDR_VAR 0 14
45864: PUSH
45865: CALL_OW 44
45869: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45870: LD_VAR 0 14
45874: PPUSH
45875: LD_VAR 0 1
45879: PPUSH
45880: CALL_OW 250
45884: PPUSH
45885: LD_VAR 0 1
45889: PPUSH
45890: CALL_OW 251
45894: PPUSH
45895: LD_INT 10
45897: PPUSH
45898: LD_INT 0
45900: PPUSH
45901: CALL_OW 50
// result := result ^ un ;
45905: LD_ADDR_VAR 0 7
45909: PUSH
45910: LD_VAR 0 7
45914: PUSH
45915: LD_VAR 0 14
45919: ADD
45920: ST_TO_ADDR
// end ;
45921: GO 45799
45923: POP
45924: POP
// end ; end ;
45925: LD_VAR 0 7
45929: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45930: LD_INT 0
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
// result := false ;
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 0
45955: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45956: LD_VAR 0 1
45960: NOT
45961: PUSH
45962: LD_VAR 0 1
45966: PPUSH
45967: CALL_OW 266
45971: PUSH
45972: LD_INT 32
45974: PUSH
45975: LD_INT 33
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: IN
45982: NOT
45983: OR
45984: IFFALSE 45988
// exit ;
45986: GO 47127
// nat := GetNation ( tower ) ;
45988: LD_ADDR_VAR 0 12
45992: PUSH
45993: LD_VAR 0 1
45997: PPUSH
45998: CALL_OW 248
46002: ST_TO_ADDR
// side := GetSide ( tower ) ;
46003: LD_ADDR_VAR 0 16
46007: PUSH
46008: LD_VAR 0 1
46012: PPUSH
46013: CALL_OW 255
46017: ST_TO_ADDR
// x := GetX ( tower ) ;
46018: LD_ADDR_VAR 0 10
46022: PUSH
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 250
46032: ST_TO_ADDR
// y := GetY ( tower ) ;
46033: LD_ADDR_VAR 0 11
46037: PUSH
46038: LD_VAR 0 1
46042: PPUSH
46043: CALL_OW 251
46047: ST_TO_ADDR
// if not x or not y then
46048: LD_VAR 0 10
46052: NOT
46053: PUSH
46054: LD_VAR 0 11
46058: NOT
46059: OR
46060: IFFALSE 46064
// exit ;
46062: GO 47127
// weapon := 0 ;
46064: LD_ADDR_VAR 0 18
46068: PUSH
46069: LD_INT 0
46071: ST_TO_ADDR
// fac_list := [ ] ;
46072: LD_ADDR_VAR 0 17
46076: PUSH
46077: EMPTY
46078: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46079: LD_ADDR_VAR 0 6
46083: PUSH
46084: LD_VAR 0 1
46088: PPUSH
46089: CALL_OW 274
46093: PPUSH
46094: LD_VAR 0 2
46098: PPUSH
46099: LD_INT 0
46101: PPUSH
46102: CALL 43667 0 3
46106: PPUSH
46107: LD_INT 30
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PPUSH
46117: CALL_OW 72
46121: ST_TO_ADDR
// if not factories then
46122: LD_VAR 0 6
46126: NOT
46127: IFFALSE 46131
// exit ;
46129: GO 47127
// for i in factories do
46131: LD_ADDR_VAR 0 8
46135: PUSH
46136: LD_VAR 0 6
46140: PUSH
46141: FOR_IN
46142: IFFALSE 46167
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46144: LD_ADDR_VAR 0 17
46148: PUSH
46149: LD_VAR 0 17
46153: PUSH
46154: LD_VAR 0 8
46158: PPUSH
46159: CALL_OW 478
46163: UNION
46164: ST_TO_ADDR
46165: GO 46141
46167: POP
46168: POP
// if not fac_list then
46169: LD_VAR 0 17
46173: NOT
46174: IFFALSE 46178
// exit ;
46176: GO 47127
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46178: LD_ADDR_VAR 0 5
46182: PUSH
46183: LD_INT 4
46185: PUSH
46186: LD_INT 5
46188: PUSH
46189: LD_INT 9
46191: PUSH
46192: LD_INT 10
46194: PUSH
46195: LD_INT 6
46197: PUSH
46198: LD_INT 7
46200: PUSH
46201: LD_INT 11
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 27
46215: PUSH
46216: LD_INT 28
46218: PUSH
46219: LD_INT 26
46221: PUSH
46222: LD_INT 30
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 43
46233: PUSH
46234: LD_INT 44
46236: PUSH
46237: LD_INT 46
46239: PUSH
46240: LD_INT 45
46242: PUSH
46243: LD_INT 47
46245: PUSH
46246: LD_INT 49
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: PUSH
46262: LD_VAR 0 12
46266: ARRAY
46267: ST_TO_ADDR
// for i in list do
46268: LD_ADDR_VAR 0 8
46272: PUSH
46273: LD_VAR 0 5
46277: PUSH
46278: FOR_IN
46279: IFFALSE 46312
// if not i in fac_list then
46281: LD_VAR 0 8
46285: PUSH
46286: LD_VAR 0 17
46290: IN
46291: NOT
46292: IFFALSE 46310
// list := list diff i ;
46294: LD_ADDR_VAR 0 5
46298: PUSH
46299: LD_VAR 0 5
46303: PUSH
46304: LD_VAR 0 8
46308: DIFF
46309: ST_TO_ADDR
46310: GO 46278
46312: POP
46313: POP
// if not list then
46314: LD_VAR 0 5
46318: NOT
46319: IFFALSE 46323
// exit ;
46321: GO 47127
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46323: LD_VAR 0 12
46327: PUSH
46328: LD_INT 3
46330: EQUAL
46331: PUSH
46332: LD_INT 49
46334: PUSH
46335: LD_VAR 0 5
46339: IN
46340: AND
46341: PUSH
46342: LD_INT 31
46344: PPUSH
46345: LD_VAR 0 16
46349: PPUSH
46350: CALL_OW 321
46354: PUSH
46355: LD_INT 2
46357: EQUAL
46358: AND
46359: IFFALSE 46419
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46361: LD_INT 22
46363: PUSH
46364: LD_VAR 0 16
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 35
46375: PUSH
46376: LD_INT 49
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 91
46385: PUSH
46386: LD_VAR 0 1
46390: PUSH
46391: LD_INT 10
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: PPUSH
46404: CALL_OW 69
46408: NOT
46409: IFFALSE 46419
// weapon := ru_time_lapser ;
46411: LD_ADDR_VAR 0 18
46415: PUSH
46416: LD_INT 49
46418: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46419: LD_VAR 0 12
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: IN
46434: PUSH
46435: LD_INT 11
46437: PUSH
46438: LD_VAR 0 5
46442: IN
46443: PUSH
46444: LD_INT 30
46446: PUSH
46447: LD_VAR 0 5
46451: IN
46452: OR
46453: AND
46454: PUSH
46455: LD_INT 6
46457: PPUSH
46458: LD_VAR 0 16
46462: PPUSH
46463: CALL_OW 321
46467: PUSH
46468: LD_INT 2
46470: EQUAL
46471: AND
46472: IFFALSE 46637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46474: LD_INT 22
46476: PUSH
46477: LD_VAR 0 16
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 35
46491: PUSH
46492: LD_INT 11
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 35
46501: PUSH
46502: LD_INT 30
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 91
46516: PUSH
46517: LD_VAR 0 1
46521: PUSH
46522: LD_INT 18
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: PPUSH
46535: CALL_OW 69
46539: NOT
46540: PUSH
46541: LD_INT 22
46543: PUSH
46544: LD_VAR 0 16
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 30
46558: PUSH
46559: LD_INT 32
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 30
46568: PUSH
46569: LD_INT 33
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 91
46583: PUSH
46584: LD_VAR 0 1
46588: PUSH
46589: LD_INT 12
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: PPUSH
46605: CALL_OW 69
46609: PUSH
46610: LD_INT 2
46612: GREATER
46613: AND
46614: IFFALSE 46637
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46616: LD_ADDR_VAR 0 18
46620: PUSH
46621: LD_INT 11
46623: PUSH
46624: LD_INT 30
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_VAR 0 12
46635: ARRAY
46636: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46637: LD_VAR 0 18
46641: NOT
46642: PUSH
46643: LD_INT 40
46645: PPUSH
46646: LD_VAR 0 16
46650: PPUSH
46651: CALL_OW 321
46655: PUSH
46656: LD_INT 2
46658: EQUAL
46659: AND
46660: PUSH
46661: LD_INT 7
46663: PUSH
46664: LD_VAR 0 5
46668: IN
46669: PUSH
46670: LD_INT 28
46672: PUSH
46673: LD_VAR 0 5
46677: IN
46678: OR
46679: PUSH
46680: LD_INT 45
46682: PUSH
46683: LD_VAR 0 5
46687: IN
46688: OR
46689: AND
46690: IFFALSE 46944
// begin hex := GetHexInfo ( x , y ) ;
46692: LD_ADDR_VAR 0 4
46696: PUSH
46697: LD_VAR 0 10
46701: PPUSH
46702: LD_VAR 0 11
46706: PPUSH
46707: CALL_OW 546
46711: ST_TO_ADDR
// if hex [ 1 ] then
46712: LD_VAR 0 4
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: IFFALSE 46724
// exit ;
46722: GO 47127
// height := hex [ 2 ] ;
46724: LD_ADDR_VAR 0 15
46728: PUSH
46729: LD_VAR 0 4
46733: PUSH
46734: LD_INT 2
46736: ARRAY
46737: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46738: LD_ADDR_VAR 0 14
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 5
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: ST_TO_ADDR
// for i in tmp do
46761: LD_ADDR_VAR 0 8
46765: PUSH
46766: LD_VAR 0 14
46770: PUSH
46771: FOR_IN
46772: IFFALSE 46942
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46774: LD_ADDR_VAR 0 9
46778: PUSH
46779: LD_VAR 0 10
46783: PPUSH
46784: LD_VAR 0 8
46788: PPUSH
46789: LD_INT 5
46791: PPUSH
46792: CALL_OW 272
46796: PUSH
46797: LD_VAR 0 11
46801: PPUSH
46802: LD_VAR 0 8
46806: PPUSH
46807: LD_INT 5
46809: PPUSH
46810: CALL_OW 273
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46819: LD_VAR 0 9
46823: PUSH
46824: LD_INT 1
46826: ARRAY
46827: PPUSH
46828: LD_VAR 0 9
46832: PUSH
46833: LD_INT 2
46835: ARRAY
46836: PPUSH
46837: CALL_OW 488
46841: IFFALSE 46940
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46843: LD_ADDR_VAR 0 4
46847: PUSH
46848: LD_VAR 0 9
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PPUSH
46857: LD_VAR 0 9
46861: PUSH
46862: LD_INT 2
46864: ARRAY
46865: PPUSH
46866: CALL_OW 546
46870: ST_TO_ADDR
// if hex [ 1 ] then
46871: LD_VAR 0 4
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: IFFALSE 46883
// continue ;
46881: GO 46771
// h := hex [ 2 ] ;
46883: LD_ADDR_VAR 0 13
46887: PUSH
46888: LD_VAR 0 4
46892: PUSH
46893: LD_INT 2
46895: ARRAY
46896: ST_TO_ADDR
// if h + 7 < height then
46897: LD_VAR 0 13
46901: PUSH
46902: LD_INT 7
46904: PLUS
46905: PUSH
46906: LD_VAR 0 15
46910: LESS
46911: IFFALSE 46940
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46913: LD_ADDR_VAR 0 18
46917: PUSH
46918: LD_INT 7
46920: PUSH
46921: LD_INT 28
46923: PUSH
46924: LD_INT 45
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: PUSH
46932: LD_VAR 0 12
46936: ARRAY
46937: ST_TO_ADDR
// break ;
46938: GO 46942
// end ; end ; end ;
46940: GO 46771
46942: POP
46943: POP
// end ; if not weapon then
46944: LD_VAR 0 18
46948: NOT
46949: IFFALSE 47009
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46951: LD_ADDR_VAR 0 5
46955: PUSH
46956: LD_VAR 0 5
46960: PUSH
46961: LD_INT 11
46963: PUSH
46964: LD_INT 30
46966: PUSH
46967: LD_INT 49
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: DIFF
46975: ST_TO_ADDR
// if not list then
46976: LD_VAR 0 5
46980: NOT
46981: IFFALSE 46985
// exit ;
46983: GO 47127
// weapon := list [ rand ( 1 , list ) ] ;
46985: LD_ADDR_VAR 0 18
46989: PUSH
46990: LD_VAR 0 5
46994: PUSH
46995: LD_INT 1
46997: PPUSH
46998: LD_VAR 0 5
47002: PPUSH
47003: CALL_OW 12
47007: ARRAY
47008: ST_TO_ADDR
// end ; if weapon then
47009: LD_VAR 0 18
47013: IFFALSE 47127
// begin tmp := CostOfWeapon ( weapon ) ;
47015: LD_ADDR_VAR 0 14
47019: PUSH
47020: LD_VAR 0 18
47024: PPUSH
47025: CALL_OW 451
47029: ST_TO_ADDR
// j := GetBase ( tower ) ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: CALL_OW 274
47044: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47045: LD_VAR 0 9
47049: PPUSH
47050: LD_INT 1
47052: PPUSH
47053: CALL_OW 275
47057: PUSH
47058: LD_VAR 0 14
47062: PUSH
47063: LD_INT 1
47065: ARRAY
47066: GREATEREQUAL
47067: PUSH
47068: LD_VAR 0 9
47072: PPUSH
47073: LD_INT 2
47075: PPUSH
47076: CALL_OW 275
47080: PUSH
47081: LD_VAR 0 14
47085: PUSH
47086: LD_INT 2
47088: ARRAY
47089: GREATEREQUAL
47090: AND
47091: PUSH
47092: LD_VAR 0 9
47096: PPUSH
47097: LD_INT 3
47099: PPUSH
47100: CALL_OW 275
47104: PUSH
47105: LD_VAR 0 14
47109: PUSH
47110: LD_INT 3
47112: ARRAY
47113: GREATEREQUAL
47114: AND
47115: IFFALSE 47127
// result := weapon ;
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_VAR 0 18
47126: ST_TO_ADDR
// end ; end ;
47127: LD_VAR 0 3
47131: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47132: LD_INT 0
47134: PPUSH
47135: PPUSH
// result := true ;
47136: LD_ADDR_VAR 0 3
47140: PUSH
47141: LD_INT 1
47143: ST_TO_ADDR
// if array1 = array2 then
47144: LD_VAR 0 1
47148: PUSH
47149: LD_VAR 0 2
47153: EQUAL
47154: IFFALSE 47214
// begin for i = 1 to array1 do
47156: LD_ADDR_VAR 0 4
47160: PUSH
47161: DOUBLE
47162: LD_INT 1
47164: DEC
47165: ST_TO_ADDR
47166: LD_VAR 0 1
47170: PUSH
47171: FOR_TO
47172: IFFALSE 47210
// if array1 [ i ] <> array2 [ i ] then
47174: LD_VAR 0 1
47178: PUSH
47179: LD_VAR 0 4
47183: ARRAY
47184: PUSH
47185: LD_VAR 0 2
47189: PUSH
47190: LD_VAR 0 4
47194: ARRAY
47195: NONEQUAL
47196: IFFALSE 47208
// begin result := false ;
47198: LD_ADDR_VAR 0 3
47202: PUSH
47203: LD_INT 0
47205: ST_TO_ADDR
// break ;
47206: GO 47210
// end ;
47208: GO 47171
47210: POP
47211: POP
// end else
47212: GO 47222
// result := false ;
47214: LD_ADDR_VAR 0 3
47218: PUSH
47219: LD_INT 0
47221: ST_TO_ADDR
// end ;
47222: LD_VAR 0 3
47226: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47227: LD_INT 0
47229: PPUSH
47230: PPUSH
// if not array1 or not array2 then
47231: LD_VAR 0 1
47235: NOT
47236: PUSH
47237: LD_VAR 0 2
47241: NOT
47242: OR
47243: IFFALSE 47247
// exit ;
47245: GO 47311
// result := true ;
47247: LD_ADDR_VAR 0 3
47251: PUSH
47252: LD_INT 1
47254: ST_TO_ADDR
// for i = 1 to array1 do
47255: LD_ADDR_VAR 0 4
47259: PUSH
47260: DOUBLE
47261: LD_INT 1
47263: DEC
47264: ST_TO_ADDR
47265: LD_VAR 0 1
47269: PUSH
47270: FOR_TO
47271: IFFALSE 47309
// if array1 [ i ] <> array2 [ i ] then
47273: LD_VAR 0 1
47277: PUSH
47278: LD_VAR 0 4
47282: ARRAY
47283: PUSH
47284: LD_VAR 0 2
47288: PUSH
47289: LD_VAR 0 4
47293: ARRAY
47294: NONEQUAL
47295: IFFALSE 47307
// begin result := false ;
47297: LD_ADDR_VAR 0 3
47301: PUSH
47302: LD_INT 0
47304: ST_TO_ADDR
// break ;
47305: GO 47309
// end ;
47307: GO 47270
47309: POP
47310: POP
// end ;
47311: LD_VAR 0 3
47315: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47316: LD_INT 0
47318: PPUSH
47319: PPUSH
47320: PPUSH
// pom := GetBase ( fac ) ;
47321: LD_ADDR_VAR 0 5
47325: PUSH
47326: LD_VAR 0 1
47330: PPUSH
47331: CALL_OW 274
47335: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47336: LD_ADDR_VAR 0 4
47340: PUSH
47341: LD_VAR 0 2
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: PPUSH
47350: LD_VAR 0 2
47354: PUSH
47355: LD_INT 2
47357: ARRAY
47358: PPUSH
47359: LD_VAR 0 2
47363: PUSH
47364: LD_INT 3
47366: ARRAY
47367: PPUSH
47368: LD_VAR 0 2
47372: PUSH
47373: LD_INT 4
47375: ARRAY
47376: PPUSH
47377: CALL_OW 449
47381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47382: LD_ADDR_VAR 0 3
47386: PUSH
47387: LD_VAR 0 5
47391: PPUSH
47392: LD_INT 1
47394: PPUSH
47395: CALL_OW 275
47399: PUSH
47400: LD_VAR 0 4
47404: PUSH
47405: LD_INT 1
47407: ARRAY
47408: GREATEREQUAL
47409: PUSH
47410: LD_VAR 0 5
47414: PPUSH
47415: LD_INT 2
47417: PPUSH
47418: CALL_OW 275
47422: PUSH
47423: LD_VAR 0 4
47427: PUSH
47428: LD_INT 2
47430: ARRAY
47431: GREATEREQUAL
47432: AND
47433: PUSH
47434: LD_VAR 0 5
47438: PPUSH
47439: LD_INT 3
47441: PPUSH
47442: CALL_OW 275
47446: PUSH
47447: LD_VAR 0 4
47451: PUSH
47452: LD_INT 3
47454: ARRAY
47455: GREATEREQUAL
47456: AND
47457: ST_TO_ADDR
// end ;
47458: LD_VAR 0 3
47462: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47463: LD_INT 0
47465: PPUSH
47466: PPUSH
47467: PPUSH
47468: PPUSH
// pom := GetBase ( building ) ;
47469: LD_ADDR_VAR 0 3
47473: PUSH
47474: LD_VAR 0 1
47478: PPUSH
47479: CALL_OW 274
47483: ST_TO_ADDR
// if not pom then
47484: LD_VAR 0 3
47488: NOT
47489: IFFALSE 47493
// exit ;
47491: GO 47663
// btype := GetBType ( building ) ;
47493: LD_ADDR_VAR 0 5
47497: PUSH
47498: LD_VAR 0 1
47502: PPUSH
47503: CALL_OW 266
47507: ST_TO_ADDR
// if btype = b_armoury then
47508: LD_VAR 0 5
47512: PUSH
47513: LD_INT 4
47515: EQUAL
47516: IFFALSE 47526
// btype := b_barracks ;
47518: LD_ADDR_VAR 0 5
47522: PUSH
47523: LD_INT 5
47525: ST_TO_ADDR
// if btype = b_depot then
47526: LD_VAR 0 5
47530: PUSH
47531: LD_INT 0
47533: EQUAL
47534: IFFALSE 47544
// btype := b_warehouse ;
47536: LD_ADDR_VAR 0 5
47540: PUSH
47541: LD_INT 1
47543: ST_TO_ADDR
// if btype = b_workshop then
47544: LD_VAR 0 5
47548: PUSH
47549: LD_INT 2
47551: EQUAL
47552: IFFALSE 47562
// btype := b_factory ;
47554: LD_ADDR_VAR 0 5
47558: PUSH
47559: LD_INT 3
47561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47562: LD_ADDR_VAR 0 4
47566: PUSH
47567: LD_VAR 0 5
47571: PPUSH
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 248
47581: PPUSH
47582: CALL_OW 450
47586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47587: LD_ADDR_VAR 0 2
47591: PUSH
47592: LD_VAR 0 3
47596: PPUSH
47597: LD_INT 1
47599: PPUSH
47600: CALL_OW 275
47604: PUSH
47605: LD_VAR 0 4
47609: PUSH
47610: LD_INT 1
47612: ARRAY
47613: GREATEREQUAL
47614: PUSH
47615: LD_VAR 0 3
47619: PPUSH
47620: LD_INT 2
47622: PPUSH
47623: CALL_OW 275
47627: PUSH
47628: LD_VAR 0 4
47632: PUSH
47633: LD_INT 2
47635: ARRAY
47636: GREATEREQUAL
47637: AND
47638: PUSH
47639: LD_VAR 0 3
47643: PPUSH
47644: LD_INT 3
47646: PPUSH
47647: CALL_OW 275
47651: PUSH
47652: LD_VAR 0 4
47656: PUSH
47657: LD_INT 3
47659: ARRAY
47660: GREATEREQUAL
47661: AND
47662: ST_TO_ADDR
// end ;
47663: LD_VAR 0 2
47667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47668: LD_INT 0
47670: PPUSH
47671: PPUSH
47672: PPUSH
// pom := GetBase ( building ) ;
47673: LD_ADDR_VAR 0 4
47677: PUSH
47678: LD_VAR 0 1
47682: PPUSH
47683: CALL_OW 274
47687: ST_TO_ADDR
// if not pom then
47688: LD_VAR 0 4
47692: NOT
47693: IFFALSE 47697
// exit ;
47695: GO 47798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47697: LD_ADDR_VAR 0 5
47701: PUSH
47702: LD_VAR 0 2
47706: PPUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: CALL_OW 248
47716: PPUSH
47717: CALL_OW 450
47721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: LD_VAR 0 4
47731: PPUSH
47732: LD_INT 1
47734: PPUSH
47735: CALL_OW 275
47739: PUSH
47740: LD_VAR 0 5
47744: PUSH
47745: LD_INT 1
47747: ARRAY
47748: GREATEREQUAL
47749: PUSH
47750: LD_VAR 0 4
47754: PPUSH
47755: LD_INT 2
47757: PPUSH
47758: CALL_OW 275
47762: PUSH
47763: LD_VAR 0 5
47767: PUSH
47768: LD_INT 2
47770: ARRAY
47771: GREATEREQUAL
47772: AND
47773: PUSH
47774: LD_VAR 0 4
47778: PPUSH
47779: LD_INT 3
47781: PPUSH
47782: CALL_OW 275
47786: PUSH
47787: LD_VAR 0 5
47791: PUSH
47792: LD_INT 3
47794: ARRAY
47795: GREATEREQUAL
47796: AND
47797: ST_TO_ADDR
// end ;
47798: LD_VAR 0 3
47802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47803: LD_INT 0
47805: PPUSH
47806: PPUSH
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
47812: PPUSH
47813: PPUSH
47814: PPUSH
47815: PPUSH
// result := false ;
47816: LD_ADDR_VAR 0 8
47820: PUSH
47821: LD_INT 0
47823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47824: LD_VAR 0 5
47828: NOT
47829: PUSH
47830: LD_VAR 0 1
47834: NOT
47835: OR
47836: PUSH
47837: LD_VAR 0 2
47841: NOT
47842: OR
47843: PUSH
47844: LD_VAR 0 3
47848: NOT
47849: OR
47850: IFFALSE 47854
// exit ;
47852: GO 48668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47854: LD_ADDR_VAR 0 14
47858: PUSH
47859: LD_VAR 0 1
47863: PPUSH
47864: LD_VAR 0 2
47868: PPUSH
47869: LD_VAR 0 3
47873: PPUSH
47874: LD_VAR 0 4
47878: PPUSH
47879: LD_VAR 0 5
47883: PUSH
47884: LD_INT 1
47886: ARRAY
47887: PPUSH
47888: CALL_OW 248
47892: PPUSH
47893: LD_INT 0
47895: PPUSH
47896: CALL 49505 0 6
47900: ST_TO_ADDR
// if not hexes then
47901: LD_VAR 0 14
47905: NOT
47906: IFFALSE 47910
// exit ;
47908: GO 48668
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47910: LD_ADDR_VAR 0 17
47914: PUSH
47915: LD_VAR 0 5
47919: PPUSH
47920: LD_INT 22
47922: PUSH
47923: LD_VAR 0 13
47927: PPUSH
47928: CALL_OW 255
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 30
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 30
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PPUSH
47969: CALL_OW 72
47973: ST_TO_ADDR
// for i = 1 to hexes do
47974: LD_ADDR_VAR 0 9
47978: PUSH
47979: DOUBLE
47980: LD_INT 1
47982: DEC
47983: ST_TO_ADDR
47984: LD_VAR 0 14
47988: PUSH
47989: FOR_TO
47990: IFFALSE 48666
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47992: LD_ADDR_VAR 0 13
47996: PUSH
47997: LD_VAR 0 14
48001: PUSH
48002: LD_VAR 0 9
48006: ARRAY
48007: PUSH
48008: LD_INT 1
48010: ARRAY
48011: PPUSH
48012: LD_VAR 0 14
48016: PUSH
48017: LD_VAR 0 9
48021: ARRAY
48022: PUSH
48023: LD_INT 2
48025: ARRAY
48026: PPUSH
48027: CALL_OW 428
48031: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48032: LD_VAR 0 14
48036: PUSH
48037: LD_VAR 0 9
48041: ARRAY
48042: PUSH
48043: LD_INT 1
48045: ARRAY
48046: PPUSH
48047: LD_VAR 0 14
48051: PUSH
48052: LD_VAR 0 9
48056: ARRAY
48057: PUSH
48058: LD_INT 2
48060: ARRAY
48061: PPUSH
48062: CALL_OW 351
48066: PUSH
48067: LD_VAR 0 14
48071: PUSH
48072: LD_VAR 0 9
48076: ARRAY
48077: PUSH
48078: LD_INT 1
48080: ARRAY
48081: PPUSH
48082: LD_VAR 0 14
48086: PUSH
48087: LD_VAR 0 9
48091: ARRAY
48092: PUSH
48093: LD_INT 2
48095: ARRAY
48096: PPUSH
48097: CALL_OW 488
48101: NOT
48102: OR
48103: PUSH
48104: LD_VAR 0 13
48108: PPUSH
48109: CALL_OW 247
48113: PUSH
48114: LD_INT 3
48116: EQUAL
48117: OR
48118: IFFALSE 48124
// exit ;
48120: POP
48121: POP
48122: GO 48668
// if not tmp then
48124: LD_VAR 0 13
48128: NOT
48129: IFFALSE 48133
// continue ;
48131: GO 47989
// result := true ;
48133: LD_ADDR_VAR 0 8
48137: PUSH
48138: LD_INT 1
48140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48141: LD_VAR 0 6
48145: PUSH
48146: LD_VAR 0 13
48150: PPUSH
48151: CALL_OW 247
48155: PUSH
48156: LD_INT 2
48158: EQUAL
48159: AND
48160: PUSH
48161: LD_VAR 0 13
48165: PPUSH
48166: CALL_OW 263
48170: PUSH
48171: LD_INT 1
48173: EQUAL
48174: AND
48175: IFFALSE 48339
// begin if IsDrivenBy ( tmp ) then
48177: LD_VAR 0 13
48181: PPUSH
48182: CALL_OW 311
48186: IFFALSE 48190
// continue ;
48188: GO 47989
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48190: LD_VAR 0 6
48194: PPUSH
48195: LD_INT 3
48197: PUSH
48198: LD_INT 60
48200: PUSH
48201: EMPTY
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 55
48213: PUSH
48214: EMPTY
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PPUSH
48225: CALL_OW 72
48229: IFFALSE 48337
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48231: LD_ADDR_VAR 0 18
48235: PUSH
48236: LD_VAR 0 6
48240: PPUSH
48241: LD_INT 3
48243: PUSH
48244: LD_INT 60
48246: PUSH
48247: EMPTY
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 55
48259: PUSH
48260: EMPTY
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PPUSH
48271: CALL_OW 72
48275: PUSH
48276: LD_INT 1
48278: ARRAY
48279: ST_TO_ADDR
// if IsInUnit ( driver ) then
48280: LD_VAR 0 18
48284: PPUSH
48285: CALL_OW 310
48289: IFFALSE 48300
// ComExit ( driver ) ;
48291: LD_VAR 0 18
48295: PPUSH
48296: CALL 72689 0 1
// AddComEnterUnit ( driver , tmp ) ;
48300: LD_VAR 0 18
48304: PPUSH
48305: LD_VAR 0 13
48309: PPUSH
48310: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48314: LD_VAR 0 18
48318: PPUSH
48319: LD_VAR 0 7
48323: PPUSH
48324: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48328: LD_VAR 0 18
48332: PPUSH
48333: CALL_OW 181
// end ; continue ;
48337: GO 47989
// end ; if not cleaners or not tmp in cleaners then
48339: LD_VAR 0 6
48343: NOT
48344: PUSH
48345: LD_VAR 0 13
48349: PUSH
48350: LD_VAR 0 6
48354: IN
48355: NOT
48356: OR
48357: IFFALSE 48664
// begin if dep then
48359: LD_VAR 0 17
48363: IFFALSE 48499
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48365: LD_ADDR_VAR 0 16
48369: PUSH
48370: LD_VAR 0 17
48374: PUSH
48375: LD_INT 1
48377: ARRAY
48378: PPUSH
48379: CALL_OW 250
48383: PPUSH
48384: LD_VAR 0 17
48388: PUSH
48389: LD_INT 1
48391: ARRAY
48392: PPUSH
48393: CALL_OW 254
48397: PPUSH
48398: LD_INT 5
48400: PPUSH
48401: CALL_OW 272
48405: PUSH
48406: LD_VAR 0 17
48410: PUSH
48411: LD_INT 1
48413: ARRAY
48414: PPUSH
48415: CALL_OW 251
48419: PPUSH
48420: LD_VAR 0 17
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: CALL_OW 254
48433: PPUSH
48434: LD_INT 5
48436: PPUSH
48437: CALL_OW 273
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48446: LD_VAR 0 16
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PPUSH
48455: LD_VAR 0 16
48459: PUSH
48460: LD_INT 2
48462: ARRAY
48463: PPUSH
48464: CALL_OW 488
48468: IFFALSE 48499
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48470: LD_VAR 0 13
48474: PPUSH
48475: LD_VAR 0 16
48479: PUSH
48480: LD_INT 1
48482: ARRAY
48483: PPUSH
48484: LD_VAR 0 16
48488: PUSH
48489: LD_INT 2
48491: ARRAY
48492: PPUSH
48493: CALL_OW 111
// continue ;
48497: GO 47989
// end ; end ; r := GetDir ( tmp ) ;
48499: LD_ADDR_VAR 0 15
48503: PUSH
48504: LD_VAR 0 13
48508: PPUSH
48509: CALL_OW 254
48513: ST_TO_ADDR
// if r = 5 then
48514: LD_VAR 0 15
48518: PUSH
48519: LD_INT 5
48521: EQUAL
48522: IFFALSE 48532
// r := 0 ;
48524: LD_ADDR_VAR 0 15
48528: PUSH
48529: LD_INT 0
48531: ST_TO_ADDR
// for j = r to 5 do
48532: LD_ADDR_VAR 0 10
48536: PUSH
48537: DOUBLE
48538: LD_VAR 0 15
48542: DEC
48543: ST_TO_ADDR
48544: LD_INT 5
48546: PUSH
48547: FOR_TO
48548: IFFALSE 48662
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48550: LD_ADDR_VAR 0 11
48554: PUSH
48555: LD_VAR 0 13
48559: PPUSH
48560: CALL_OW 250
48564: PPUSH
48565: LD_VAR 0 10
48569: PPUSH
48570: LD_INT 2
48572: PPUSH
48573: CALL_OW 272
48577: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48578: LD_ADDR_VAR 0 12
48582: PUSH
48583: LD_VAR 0 13
48587: PPUSH
48588: CALL_OW 251
48592: PPUSH
48593: LD_VAR 0 10
48597: PPUSH
48598: LD_INT 2
48600: PPUSH
48601: CALL_OW 273
48605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48606: LD_VAR 0 11
48610: PPUSH
48611: LD_VAR 0 12
48615: PPUSH
48616: CALL_OW 488
48620: PUSH
48621: LD_VAR 0 11
48625: PPUSH
48626: LD_VAR 0 12
48630: PPUSH
48631: CALL_OW 428
48635: NOT
48636: AND
48637: IFFALSE 48660
// begin ComMoveXY ( tmp , _x , _y ) ;
48639: LD_VAR 0 13
48643: PPUSH
48644: LD_VAR 0 11
48648: PPUSH
48649: LD_VAR 0 12
48653: PPUSH
48654: CALL_OW 111
// break ;
48658: GO 48662
// end ; end ;
48660: GO 48547
48662: POP
48663: POP
// end ; end ;
48664: GO 47989
48666: POP
48667: POP
// end ;
48668: LD_VAR 0 8
48672: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48673: LD_INT 0
48675: PPUSH
48676: PPUSH
48677: PPUSH
48678: PPUSH
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
// result := false ;
48685: LD_ADDR_VAR 0 6
48689: PUSH
48690: LD_INT 0
48692: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48693: LD_VAR 0 1
48697: NOT
48698: PUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: CALL_OW 266
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: IN
48719: NOT
48720: OR
48721: PUSH
48722: LD_VAR 0 2
48726: NOT
48727: OR
48728: PUSH
48729: LD_VAR 0 5
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: LD_INT 5
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: IN
48760: NOT
48761: OR
48762: PUSH
48763: LD_VAR 0 3
48767: PPUSH
48768: LD_VAR 0 4
48772: PPUSH
48773: CALL_OW 488
48777: NOT
48778: OR
48779: IFFALSE 48783
// exit ;
48781: GO 49500
// pom := GetBase ( depot ) ;
48783: LD_ADDR_VAR 0 10
48787: PUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 274
48797: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48798: LD_ADDR_VAR 0 11
48802: PUSH
48803: LD_VAR 0 2
48807: PPUSH
48808: LD_VAR 0 1
48812: PPUSH
48813: CALL_OW 248
48817: PPUSH
48818: CALL_OW 450
48822: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48823: LD_VAR 0 10
48827: PPUSH
48828: LD_INT 1
48830: PPUSH
48831: CALL_OW 275
48835: PUSH
48836: LD_VAR 0 11
48840: PUSH
48841: LD_INT 1
48843: ARRAY
48844: GREATEREQUAL
48845: PUSH
48846: LD_VAR 0 10
48850: PPUSH
48851: LD_INT 2
48853: PPUSH
48854: CALL_OW 275
48858: PUSH
48859: LD_VAR 0 11
48863: PUSH
48864: LD_INT 2
48866: ARRAY
48867: GREATEREQUAL
48868: AND
48869: PUSH
48870: LD_VAR 0 10
48874: PPUSH
48875: LD_INT 3
48877: PPUSH
48878: CALL_OW 275
48882: PUSH
48883: LD_VAR 0 11
48887: PUSH
48888: LD_INT 3
48890: ARRAY
48891: GREATEREQUAL
48892: AND
48893: NOT
48894: IFFALSE 48898
// exit ;
48896: GO 49500
// if GetBType ( depot ) = b_depot then
48898: LD_VAR 0 1
48902: PPUSH
48903: CALL_OW 266
48907: PUSH
48908: LD_INT 0
48910: EQUAL
48911: IFFALSE 48923
// dist := 28 else
48913: LD_ADDR_VAR 0 14
48917: PUSH
48918: LD_INT 28
48920: ST_TO_ADDR
48921: GO 48931
// dist := 36 ;
48923: LD_ADDR_VAR 0 14
48927: PUSH
48928: LD_INT 36
48930: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48931: LD_VAR 0 1
48935: PPUSH
48936: LD_VAR 0 3
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: CALL_OW 297
48950: PUSH
48951: LD_VAR 0 14
48955: GREATER
48956: IFFALSE 48960
// exit ;
48958: GO 49500
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48960: LD_ADDR_VAR 0 12
48964: PUSH
48965: LD_VAR 0 2
48969: PPUSH
48970: LD_VAR 0 3
48974: PPUSH
48975: LD_VAR 0 4
48979: PPUSH
48980: LD_VAR 0 5
48984: PPUSH
48985: LD_VAR 0 1
48989: PPUSH
48990: CALL_OW 248
48994: PPUSH
48995: LD_INT 0
48997: PPUSH
48998: CALL 49505 0 6
49002: ST_TO_ADDR
// if not hexes then
49003: LD_VAR 0 12
49007: NOT
49008: IFFALSE 49012
// exit ;
49010: GO 49500
// hex := GetHexInfo ( x , y ) ;
49012: LD_ADDR_VAR 0 15
49016: PUSH
49017: LD_VAR 0 3
49021: PPUSH
49022: LD_VAR 0 4
49026: PPUSH
49027: CALL_OW 546
49031: ST_TO_ADDR
// if hex [ 1 ] then
49032: LD_VAR 0 15
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: IFFALSE 49044
// exit ;
49042: GO 49500
// height := hex [ 2 ] ;
49044: LD_ADDR_VAR 0 13
49048: PUSH
49049: LD_VAR 0 15
49053: PUSH
49054: LD_INT 2
49056: ARRAY
49057: ST_TO_ADDR
// for i = 1 to hexes do
49058: LD_ADDR_VAR 0 7
49062: PUSH
49063: DOUBLE
49064: LD_INT 1
49066: DEC
49067: ST_TO_ADDR
49068: LD_VAR 0 12
49072: PUSH
49073: FOR_TO
49074: IFFALSE 49404
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49076: LD_VAR 0 12
49080: PUSH
49081: LD_VAR 0 7
49085: ARRAY
49086: PUSH
49087: LD_INT 1
49089: ARRAY
49090: PPUSH
49091: LD_VAR 0 12
49095: PUSH
49096: LD_VAR 0 7
49100: ARRAY
49101: PUSH
49102: LD_INT 2
49104: ARRAY
49105: PPUSH
49106: CALL_OW 488
49110: NOT
49111: PUSH
49112: LD_VAR 0 12
49116: PUSH
49117: LD_VAR 0 7
49121: ARRAY
49122: PUSH
49123: LD_INT 1
49125: ARRAY
49126: PPUSH
49127: LD_VAR 0 12
49131: PUSH
49132: LD_VAR 0 7
49136: ARRAY
49137: PUSH
49138: LD_INT 2
49140: ARRAY
49141: PPUSH
49142: CALL_OW 428
49146: PUSH
49147: LD_INT 0
49149: GREATER
49150: OR
49151: PUSH
49152: LD_VAR 0 12
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PUSH
49163: LD_INT 1
49165: ARRAY
49166: PPUSH
49167: LD_VAR 0 12
49171: PUSH
49172: LD_VAR 0 7
49176: ARRAY
49177: PUSH
49178: LD_INT 2
49180: ARRAY
49181: PPUSH
49182: CALL_OW 351
49186: OR
49187: IFFALSE 49193
// exit ;
49189: POP
49190: POP
49191: GO 49500
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49193: LD_ADDR_VAR 0 8
49197: PUSH
49198: LD_VAR 0 12
49202: PUSH
49203: LD_VAR 0 7
49207: ARRAY
49208: PUSH
49209: LD_INT 1
49211: ARRAY
49212: PPUSH
49213: LD_VAR 0 12
49217: PUSH
49218: LD_VAR 0 7
49222: ARRAY
49223: PUSH
49224: LD_INT 2
49226: ARRAY
49227: PPUSH
49228: CALL_OW 546
49232: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49233: LD_VAR 0 8
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: PUSH
49242: LD_VAR 0 8
49246: PUSH
49247: LD_INT 2
49249: ARRAY
49250: PUSH
49251: LD_VAR 0 13
49255: PUSH
49256: LD_INT 2
49258: PLUS
49259: GREATER
49260: OR
49261: PUSH
49262: LD_VAR 0 8
49266: PUSH
49267: LD_INT 2
49269: ARRAY
49270: PUSH
49271: LD_VAR 0 13
49275: PUSH
49276: LD_INT 2
49278: MINUS
49279: LESS
49280: OR
49281: PUSH
49282: LD_VAR 0 8
49286: PUSH
49287: LD_INT 3
49289: ARRAY
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 8
49296: PUSH
49297: LD_INT 9
49299: PUSH
49300: LD_INT 10
49302: PUSH
49303: LD_INT 11
49305: PUSH
49306: LD_INT 12
49308: PUSH
49309: LD_INT 13
49311: PUSH
49312: LD_INT 16
49314: PUSH
49315: LD_INT 17
49317: PUSH
49318: LD_INT 18
49320: PUSH
49321: LD_INT 19
49323: PUSH
49324: LD_INT 20
49326: PUSH
49327: LD_INT 21
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: IN
49345: NOT
49346: OR
49347: PUSH
49348: LD_VAR 0 8
49352: PUSH
49353: LD_INT 5
49355: ARRAY
49356: NOT
49357: OR
49358: PUSH
49359: LD_VAR 0 8
49363: PUSH
49364: LD_INT 6
49366: ARRAY
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 7
49376: PUSH
49377: LD_INT 9
49379: PUSH
49380: LD_INT 10
49382: PUSH
49383: LD_INT 11
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: IN
49394: NOT
49395: OR
49396: IFFALSE 49402
// exit ;
49398: POP
49399: POP
49400: GO 49500
// end ;
49402: GO 49073
49404: POP
49405: POP
// side := GetSide ( depot ) ;
49406: LD_ADDR_VAR 0 9
49410: PUSH
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL_OW 255
49420: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49421: LD_VAR 0 9
49425: PPUSH
49426: LD_VAR 0 3
49430: PPUSH
49431: LD_VAR 0 4
49435: PPUSH
49436: LD_INT 20
49438: PPUSH
49439: CALL 41821 0 4
49443: PUSH
49444: LD_INT 4
49446: ARRAY
49447: IFFALSE 49451
// exit ;
49449: GO 49500
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49451: LD_VAR 0 2
49455: PUSH
49456: LD_INT 29
49458: PUSH
49459: LD_INT 30
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: IN
49466: PUSH
49467: LD_VAR 0 3
49471: PPUSH
49472: LD_VAR 0 4
49476: PPUSH
49477: LD_VAR 0 9
49481: PPUSH
49482: CALL_OW 440
49486: NOT
49487: AND
49488: IFFALSE 49492
// exit ;
49490: GO 49500
// result := true ;
49492: LD_ADDR_VAR 0 6
49496: PUSH
49497: LD_INT 1
49499: ST_TO_ADDR
// end ;
49500: LD_VAR 0 6
49504: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49505: LD_INT 0
49507: PPUSH
49508: PPUSH
49509: PPUSH
49510: PPUSH
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
// result = [ ] ;
49565: LD_ADDR_VAR 0 7
49569: PUSH
49570: EMPTY
49571: ST_TO_ADDR
// temp_list = [ ] ;
49572: LD_ADDR_VAR 0 9
49576: PUSH
49577: EMPTY
49578: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49579: LD_VAR 0 4
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: LD_INT 4
49598: PUSH
49599: LD_INT 5
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: IN
49610: NOT
49611: PUSH
49612: LD_VAR 0 1
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: IN
49627: PUSH
49628: LD_VAR 0 5
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: IN
49647: NOT
49648: AND
49649: OR
49650: IFFALSE 49654
// exit ;
49652: GO 68045
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49654: LD_VAR 0 1
49658: PUSH
49659: LD_INT 6
49661: PUSH
49662: LD_INT 7
49664: PUSH
49665: LD_INT 8
49667: PUSH
49668: LD_INT 13
49670: PUSH
49671: LD_INT 12
49673: PUSH
49674: LD_INT 15
49676: PUSH
49677: LD_INT 11
49679: PUSH
49680: LD_INT 14
49682: PUSH
49683: LD_INT 10
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: IN
49697: IFFALSE 49707
// btype = b_lab ;
49699: LD_ADDR_VAR 0 1
49703: PUSH
49704: LD_INT 6
49706: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49707: LD_VAR 0 6
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: IN
49726: NOT
49727: PUSH
49728: LD_VAR 0 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: LD_INT 6
49747: PUSH
49748: LD_INT 36
49750: PUSH
49751: LD_INT 4
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: LD_INT 31
49759: PUSH
49760: LD_INT 32
49762: PUSH
49763: LD_INT 33
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: IN
49779: NOT
49780: PUSH
49781: LD_VAR 0 6
49785: PUSH
49786: LD_INT 1
49788: EQUAL
49789: AND
49790: OR
49791: PUSH
49792: LD_VAR 0 1
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: IN
49807: NOT
49808: PUSH
49809: LD_VAR 0 6
49813: PUSH
49814: LD_INT 2
49816: EQUAL
49817: AND
49818: OR
49819: IFFALSE 49829
// mode = 0 ;
49821: LD_ADDR_VAR 0 6
49825: PUSH
49826: LD_INT 0
49828: ST_TO_ADDR
// case mode of 0 :
49829: LD_VAR 0 6
49833: PUSH
49834: LD_INT 0
49836: DOUBLE
49837: EQUAL
49838: IFTRUE 49842
49840: GO 61295
49842: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49843: LD_ADDR_VAR 0 11
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50036: LD_ADDR_VAR 0 12
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50232: LD_ADDR_VAR 0 13
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50431: LD_ADDR_VAR 0 14
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50627: LD_ADDR_VAR 0 15
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50820: LD_ADDR_VAR 0 16
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51013: LD_ADDR_VAR 0 17
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51243: LD_ADDR_VAR 0 18
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51473: LD_ADDR_VAR 0 19
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51703: LD_ADDR_VAR 0 20
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51933: LD_ADDR_VAR 0 21
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52163: LD_ADDR_VAR 0 22
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52393: LD_ADDR_VAR 0 23
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52673: LD_ADDR_VAR 0 24
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52949: LD_ADDR_VAR 0 25
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53223: LD_ADDR_VAR 0 26
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53499: LD_ADDR_VAR 0 27
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53779: LD_ADDR_VAR 0 28
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54061: LD_ADDR_VAR 0 29
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54340: LD_ADDR_VAR 0 30
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54618: LD_ADDR_VAR 0 31
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54896: LD_ADDR_VAR 0 32
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55174: LD_ADDR_VAR 0 33
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55453: LD_ADDR_VAR 0 34
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 3
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55733: LD_ADDR_VAR 0 35
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55845: LD_ADDR_VAR 0 36
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55957: LD_ADDR_VAR 0 37
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56069: LD_ADDR_VAR 0 38
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56181: LD_ADDR_VAR 0 39
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56293: LD_ADDR_VAR 0 40
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56405: LD_ADDR_VAR 0 41
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56755: LD_ADDR_VAR 0 42
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57105: LD_ADDR_VAR 0 43
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57453: LD_ADDR_VAR 0 44
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57803: LD_ADDR_VAR 0 45
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58153: LD_ADDR_VAR 0 46
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58501: LD_ADDR_VAR 0 47
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58652: LD_ADDR_VAR 0 48
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58799: LD_ADDR_VAR 0 49
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58943: LD_ADDR_VAR 0 50
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59087: LD_ADDR_VAR 0 51
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59234: LD_ADDR_VAR 0 52
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59385: LD_ADDR_VAR 0 53
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59615: LD_ADDR_VAR 0 54
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59845: LD_ADDR_VAR 0 55
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60075: LD_ADDR_VAR 0 56
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60305: LD_ADDR_VAR 0 57
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60535: LD_ADDR_VAR 0 58
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60765: LD_ADDR_VAR 0 59
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60853: LD_ADDR_VAR 0 60
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60941: LD_ADDR_VAR 0 61
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61029: LD_ADDR_VAR 0 62
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61117: LD_ADDR_VAR 0 63
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61205: LD_ADDR_VAR 0 64
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: ST_TO_ADDR
// end ; 1 :
61293: GO 67190
61295: LD_INT 1
61297: DOUBLE
61298: EQUAL
61299: IFTRUE 61303
61301: GO 63926
61303: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61304: LD_ADDR_VAR 0 11
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61348: LD_ADDR_VAR 0 12
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61389: LD_ADDR_VAR 0 13
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61429: LD_ADDR_VAR 0 14
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61470: LD_ADDR_VAR 0 15
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61514: LD_ADDR_VAR 0 16
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61560: LD_ADDR_VAR 0 17
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61604: LD_ADDR_VAR 0 18
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61645: LD_ADDR_VAR 0 19
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61685: LD_ADDR_VAR 0 20
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61726: LD_ADDR_VAR 0 21
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61770: LD_ADDR_VAR 0 22
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61816: LD_ADDR_VAR 0 23
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 4
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61860: LD_ADDR_VAR 0 24
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61901: LD_ADDR_VAR 0 25
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61941: LD_ADDR_VAR 0 26
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61982: LD_ADDR_VAR 0 27
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: NEG
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 4
62011: NEG
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62026: LD_ADDR_VAR 0 28
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: NEG
62046: PUSH
62047: LD_INT 4
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: NEG
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62072: LD_ADDR_VAR 0 29
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 4
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 5
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 5
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 4
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 6
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 6
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 5
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62227: LD_ADDR_VAR 0 30
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 4
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 4
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 5
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 5
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 5
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 6
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 6
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62370: LD_ADDR_VAR 0 31
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 5
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 5
62447: PUSH
62448: LD_INT 5
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 4
62457: PUSH
62458: LD_INT 5
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 6
62467: PUSH
62468: LD_INT 5
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 6
62477: PUSH
62478: LD_INT 6
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 5
62487: PUSH
62488: LD_INT 6
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62509: LD_ADDR_VAR 0 32
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 4
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 4
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 3
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 5
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 5
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 6
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 6
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 5
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62652: LD_ADDR_VAR 0 33
62656: PUSH
62657: LD_INT 2
62659: NEG
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 4
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 5
62738: NEG
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 5
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 5
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 6
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 6
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62807: LD_ADDR_VAR 0 34
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: NEG
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 4
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 4
62862: NEG
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: LD_INT 4
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: LD_INT 5
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: NEG
62899: PUSH
62900: LD_INT 4
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 5
62910: NEG
62911: PUSH
62912: LD_INT 5
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 5
62922: NEG
62923: PUSH
62924: LD_INT 6
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 6
62934: NEG
62935: PUSH
62936: LD_INT 5
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 6
62946: NEG
62947: PUSH
62948: LD_INT 6
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62970: LD_ADDR_VAR 0 41
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63014: LD_ADDR_VAR 0 42
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63055: LD_ADDR_VAR 0 43
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63095: LD_ADDR_VAR 0 44
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63136: LD_ADDR_VAR 0 45
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63180: LD_ADDR_VAR 0 46
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63226: LD_ADDR_VAR 0 47
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 3
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63259: LD_ADDR_VAR 0 48
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63290: LD_ADDR_VAR 0 49
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63319: LD_ADDR_VAR 0 50
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63348: LD_ADDR_VAR 0 51
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63379: LD_ADDR_VAR 0 52
63383: PUSH
63384: LD_INT 3
63386: NEG
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63412: LD_ADDR_VAR 0 53
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63456: LD_ADDR_VAR 0 54
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63497: LD_ADDR_VAR 0 55
63501: PUSH
63502: LD_INT 3
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63537: LD_ADDR_VAR 0 56
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63578: LD_ADDR_VAR 0 57
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63622: LD_ADDR_VAR 0 58
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 3
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63668: LD_ADDR_VAR 0 59
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63712: LD_ADDR_VAR 0 60
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63753: LD_ADDR_VAR 0 61
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63793: LD_ADDR_VAR 0 62
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: LIST
63833: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63834: LD_ADDR_VAR 0 63
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63878: LD_ADDR_VAR 0 64
63882: PUSH
63883: LD_INT 1
63885: NEG
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// end ; 2 :
63924: GO 67190
63926: LD_INT 2
63928: DOUBLE
63929: EQUAL
63930: IFTRUE 63934
63932: GO 67189
63934: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63935: LD_ADDR_VAR 0 29
63939: PUSH
63940: LD_INT 4
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 5
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 5
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 4
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 3
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 5
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 4
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: LD_INT 4
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: LD_INT 4
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: LD_INT 3
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 4
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 5
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 5
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 4
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 5
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: LD_INT 3
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 3
64218: NEG
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 3
64263: NEG
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 4
64274: NEG
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 4
64285: NEG
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 4
64297: NEG
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 4
64320: NEG
64321: PUSH
64322: LD_INT 4
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 4
64332: NEG
64333: PUSH
64334: LD_INT 5
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: LD_INT 4
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: NEG
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 4
64368: NEG
64369: PUSH
64370: LD_INT 3
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 5
64380: NEG
64381: PUSH
64382: LD_INT 4
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 5
64392: NEG
64393: PUSH
64394: LD_INT 5
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: NEG
64405: PUSH
64406: LD_INT 5
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 5
64416: NEG
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64473: LD_ADDR_VAR 0 30
64477: PUSH
64478: LD_INT 4
64480: PUSH
64481: LD_INT 4
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 4
64490: PUSH
64491: LD_INT 3
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 5
64500: PUSH
64501: LD_INT 4
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 5
64510: PUSH
64511: LD_INT 5
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 4
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 5
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 5
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 2
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 4
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 4
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 4
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 4
64663: NEG
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 4
64674: NEG
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 4
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 5
64719: NEG
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 5
64730: NEG
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 5
64742: NEG
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: NEG
64778: PUSH
64779: LD_INT 4
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: LD_INT 3
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 4
64825: NEG
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 4
64837: NEG
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: LD_INT 4
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 4
64861: NEG
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 5
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 4
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 4
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 5
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: LD_INT 5
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65020: LD_ADDR_VAR 0 31
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 4
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 4
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 5
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 5
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 4
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 3
65120: NEG
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 3
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 2
65143: NEG
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 4
65176: NEG
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 4
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 4
65222: NEG
65223: PUSH
65224: LD_INT 4
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 4
65234: NEG
65235: PUSH
65236: LD_INT 5
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 4
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: LD_INT 3
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 4
65270: NEG
65271: PUSH
65272: LD_INT 3
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 5
65282: NEG
65283: PUSH
65284: LD_INT 4
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 5
65294: NEG
65295: PUSH
65296: LD_INT 5
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: LD_INT 5
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 5
65318: NEG
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: LD_INT 3
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 2
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: LD_INT 4
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: LD_INT 2
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 4
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 4
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 5
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 5
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 5
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65570: LD_ADDR_VAR 0 32
65574: PUSH
65575: LD_INT 4
65577: NEG
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 3
65600: NEG
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 4
65622: NEG
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 5
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 5
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 5
65656: NEG
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 3
65679: NEG
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 3
65691: NEG
65692: PUSH
65693: LD_INT 4
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: LD_INT 3
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: NEG
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 2
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 4
65751: NEG
65752: PUSH
65753: LD_INT 4
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 4
65775: NEG
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: LD_INT 4
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 5
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 4
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 4
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: LD_INT 5
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: LD_INT 5
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 4
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 4
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 2
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 4
65982: PUSH
65983: LD_INT 4
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 4
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 5
66002: PUSH
66003: LD_INT 4
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 5
66012: PUSH
66013: LD_INT 5
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 4
66022: PUSH
66023: LD_INT 5
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: LD_INT 4
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 5
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: LD_INT 5
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66117: LD_ADDR_VAR 0 33
66121: PUSH
66122: LD_INT 4
66124: NEG
66125: PUSH
66126: LD_INT 4
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: LD_INT 5
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: LD_INT 4
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 4
66172: NEG
66173: PUSH
66174: LD_INT 3
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 5
66184: NEG
66185: PUSH
66186: LD_INT 4
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 5
66196: NEG
66197: PUSH
66198: LD_INT 5
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: LD_INT 5
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 5
66220: NEG
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 4
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: LD_INT 4
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 4
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 5
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 5
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 5
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 4
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 2
66507: PUSH
66508: LD_INT 4
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 4
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 5
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 5
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 4
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: LD_INT 5
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: LD_INT 3
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66655: LD_ADDR_VAR 0 34
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 5
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: LD_INT 4
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 4
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: LD_INT 5
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: LD_INT 5
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 4
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 4
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 2
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 4
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: LD_INT 4
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: LD_INT 3
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 5
66877: PUSH
66878: LD_INT 4
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 5
66887: PUSH
66888: LD_INT 5
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: LD_INT 5
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: LD_INT 4
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 5
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 5
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 4
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 2
67019: PUSH
67020: LD_INT 4
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 4
67040: NEG
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 4
67051: NEG
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 3
67063: NEG
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 4
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 5
67096: NEG
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 5
67107: NEG
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 5
67119: NEG
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: LD_INT 2
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// end ; end ;
67187: GO 67190
67189: POP
// case btype of b_depot , b_warehouse :
67190: LD_VAR 0 1
67194: PUSH
67195: LD_INT 0
67197: DOUBLE
67198: EQUAL
67199: IFTRUE 67209
67201: LD_INT 1
67203: DOUBLE
67204: EQUAL
67205: IFTRUE 67209
67207: GO 67410
67209: POP
// case nation of nation_american :
67210: LD_VAR 0 5
67214: PUSH
67215: LD_INT 1
67217: DOUBLE
67218: EQUAL
67219: IFTRUE 67223
67221: GO 67279
67223: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67224: LD_ADDR_VAR 0 9
67228: PUSH
67229: LD_VAR 0 11
67233: PUSH
67234: LD_VAR 0 12
67238: PUSH
67239: LD_VAR 0 13
67243: PUSH
67244: LD_VAR 0 14
67248: PUSH
67249: LD_VAR 0 15
67253: PUSH
67254: LD_VAR 0 16
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: PUSH
67267: LD_VAR 0 4
67271: PUSH
67272: LD_INT 1
67274: PLUS
67275: ARRAY
67276: ST_TO_ADDR
67277: GO 67408
67279: LD_INT 2
67281: DOUBLE
67282: EQUAL
67283: IFTRUE 67287
67285: GO 67343
67287: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67288: LD_ADDR_VAR 0 9
67292: PUSH
67293: LD_VAR 0 17
67297: PUSH
67298: LD_VAR 0 18
67302: PUSH
67303: LD_VAR 0 19
67307: PUSH
67308: LD_VAR 0 20
67312: PUSH
67313: LD_VAR 0 21
67317: PUSH
67318: LD_VAR 0 22
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: PUSH
67331: LD_VAR 0 4
67335: PUSH
67336: LD_INT 1
67338: PLUS
67339: ARRAY
67340: ST_TO_ADDR
67341: GO 67408
67343: LD_INT 3
67345: DOUBLE
67346: EQUAL
67347: IFTRUE 67351
67349: GO 67407
67351: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67352: LD_ADDR_VAR 0 9
67356: PUSH
67357: LD_VAR 0 23
67361: PUSH
67362: LD_VAR 0 24
67366: PUSH
67367: LD_VAR 0 25
67371: PUSH
67372: LD_VAR 0 26
67376: PUSH
67377: LD_VAR 0 27
67381: PUSH
67382: LD_VAR 0 28
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: PUSH
67395: LD_VAR 0 4
67399: PUSH
67400: LD_INT 1
67402: PLUS
67403: ARRAY
67404: ST_TO_ADDR
67405: GO 67408
67407: POP
67408: GO 67963
67410: LD_INT 2
67412: DOUBLE
67413: EQUAL
67414: IFTRUE 67424
67416: LD_INT 3
67418: DOUBLE
67419: EQUAL
67420: IFTRUE 67424
67422: GO 67480
67424: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67425: LD_ADDR_VAR 0 9
67429: PUSH
67430: LD_VAR 0 29
67434: PUSH
67435: LD_VAR 0 30
67439: PUSH
67440: LD_VAR 0 31
67444: PUSH
67445: LD_VAR 0 32
67449: PUSH
67450: LD_VAR 0 33
67454: PUSH
67455: LD_VAR 0 34
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: PUSH
67468: LD_VAR 0 4
67472: PUSH
67473: LD_INT 1
67475: PLUS
67476: ARRAY
67477: ST_TO_ADDR
67478: GO 67963
67480: LD_INT 16
67482: DOUBLE
67483: EQUAL
67484: IFTRUE 67542
67486: LD_INT 17
67488: DOUBLE
67489: EQUAL
67490: IFTRUE 67542
67492: LD_INT 18
67494: DOUBLE
67495: EQUAL
67496: IFTRUE 67542
67498: LD_INT 19
67500: DOUBLE
67501: EQUAL
67502: IFTRUE 67542
67504: LD_INT 22
67506: DOUBLE
67507: EQUAL
67508: IFTRUE 67542
67510: LD_INT 20
67512: DOUBLE
67513: EQUAL
67514: IFTRUE 67542
67516: LD_INT 21
67518: DOUBLE
67519: EQUAL
67520: IFTRUE 67542
67522: LD_INT 23
67524: DOUBLE
67525: EQUAL
67526: IFTRUE 67542
67528: LD_INT 24
67530: DOUBLE
67531: EQUAL
67532: IFTRUE 67542
67534: LD_INT 25
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67542
67540: GO 67598
67542: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67543: LD_ADDR_VAR 0 9
67547: PUSH
67548: LD_VAR 0 35
67552: PUSH
67553: LD_VAR 0 36
67557: PUSH
67558: LD_VAR 0 37
67562: PUSH
67563: LD_VAR 0 38
67567: PUSH
67568: LD_VAR 0 39
67572: PUSH
67573: LD_VAR 0 40
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: PUSH
67586: LD_VAR 0 4
67590: PUSH
67591: LD_INT 1
67593: PLUS
67594: ARRAY
67595: ST_TO_ADDR
67596: GO 67963
67598: LD_INT 6
67600: DOUBLE
67601: EQUAL
67602: IFTRUE 67654
67604: LD_INT 7
67606: DOUBLE
67607: EQUAL
67608: IFTRUE 67654
67610: LD_INT 8
67612: DOUBLE
67613: EQUAL
67614: IFTRUE 67654
67616: LD_INT 13
67618: DOUBLE
67619: EQUAL
67620: IFTRUE 67654
67622: LD_INT 12
67624: DOUBLE
67625: EQUAL
67626: IFTRUE 67654
67628: LD_INT 15
67630: DOUBLE
67631: EQUAL
67632: IFTRUE 67654
67634: LD_INT 11
67636: DOUBLE
67637: EQUAL
67638: IFTRUE 67654
67640: LD_INT 14
67642: DOUBLE
67643: EQUAL
67644: IFTRUE 67654
67646: LD_INT 10
67648: DOUBLE
67649: EQUAL
67650: IFTRUE 67654
67652: GO 67710
67654: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67655: LD_ADDR_VAR 0 9
67659: PUSH
67660: LD_VAR 0 41
67664: PUSH
67665: LD_VAR 0 42
67669: PUSH
67670: LD_VAR 0 43
67674: PUSH
67675: LD_VAR 0 44
67679: PUSH
67680: LD_VAR 0 45
67684: PUSH
67685: LD_VAR 0 46
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: LD_VAR 0 4
67702: PUSH
67703: LD_INT 1
67705: PLUS
67706: ARRAY
67707: ST_TO_ADDR
67708: GO 67963
67710: LD_INT 36
67712: DOUBLE
67713: EQUAL
67714: IFTRUE 67718
67716: GO 67774
67718: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67719: LD_ADDR_VAR 0 9
67723: PUSH
67724: LD_VAR 0 47
67728: PUSH
67729: LD_VAR 0 48
67733: PUSH
67734: LD_VAR 0 49
67738: PUSH
67739: LD_VAR 0 50
67743: PUSH
67744: LD_VAR 0 51
67748: PUSH
67749: LD_VAR 0 52
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: PUSH
67762: LD_VAR 0 4
67766: PUSH
67767: LD_INT 1
67769: PLUS
67770: ARRAY
67771: ST_TO_ADDR
67772: GO 67963
67774: LD_INT 4
67776: DOUBLE
67777: EQUAL
67778: IFTRUE 67800
67780: LD_INT 5
67782: DOUBLE
67783: EQUAL
67784: IFTRUE 67800
67786: LD_INT 34
67788: DOUBLE
67789: EQUAL
67790: IFTRUE 67800
67792: LD_INT 37
67794: DOUBLE
67795: EQUAL
67796: IFTRUE 67800
67798: GO 67856
67800: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67801: LD_ADDR_VAR 0 9
67805: PUSH
67806: LD_VAR 0 53
67810: PUSH
67811: LD_VAR 0 54
67815: PUSH
67816: LD_VAR 0 55
67820: PUSH
67821: LD_VAR 0 56
67825: PUSH
67826: LD_VAR 0 57
67830: PUSH
67831: LD_VAR 0 58
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: PUSH
67844: LD_VAR 0 4
67848: PUSH
67849: LD_INT 1
67851: PLUS
67852: ARRAY
67853: ST_TO_ADDR
67854: GO 67963
67856: LD_INT 31
67858: DOUBLE
67859: EQUAL
67860: IFTRUE 67906
67862: LD_INT 32
67864: DOUBLE
67865: EQUAL
67866: IFTRUE 67906
67868: LD_INT 33
67870: DOUBLE
67871: EQUAL
67872: IFTRUE 67906
67874: LD_INT 27
67876: DOUBLE
67877: EQUAL
67878: IFTRUE 67906
67880: LD_INT 26
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67906
67886: LD_INT 28
67888: DOUBLE
67889: EQUAL
67890: IFTRUE 67906
67892: LD_INT 29
67894: DOUBLE
67895: EQUAL
67896: IFTRUE 67906
67898: LD_INT 30
67900: DOUBLE
67901: EQUAL
67902: IFTRUE 67906
67904: GO 67962
67906: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67907: LD_ADDR_VAR 0 9
67911: PUSH
67912: LD_VAR 0 59
67916: PUSH
67917: LD_VAR 0 60
67921: PUSH
67922: LD_VAR 0 61
67926: PUSH
67927: LD_VAR 0 62
67931: PUSH
67932: LD_VAR 0 63
67936: PUSH
67937: LD_VAR 0 64
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: PUSH
67950: LD_VAR 0 4
67954: PUSH
67955: LD_INT 1
67957: PLUS
67958: ARRAY
67959: ST_TO_ADDR
67960: GO 67963
67962: POP
// temp_list2 = [ ] ;
67963: LD_ADDR_VAR 0 10
67967: PUSH
67968: EMPTY
67969: ST_TO_ADDR
// for i in temp_list do
67970: LD_ADDR_VAR 0 8
67974: PUSH
67975: LD_VAR 0 9
67979: PUSH
67980: FOR_IN
67981: IFFALSE 68033
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67983: LD_ADDR_VAR 0 10
67987: PUSH
67988: LD_VAR 0 10
67992: PUSH
67993: LD_VAR 0 8
67997: PUSH
67998: LD_INT 1
68000: ARRAY
68001: PUSH
68002: LD_VAR 0 2
68006: PLUS
68007: PUSH
68008: LD_VAR 0 8
68012: PUSH
68013: LD_INT 2
68015: ARRAY
68016: PUSH
68017: LD_VAR 0 3
68021: PLUS
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: EMPTY
68028: LIST
68029: ADD
68030: ST_TO_ADDR
68031: GO 67980
68033: POP
68034: POP
// result = temp_list2 ;
68035: LD_ADDR_VAR 0 7
68039: PUSH
68040: LD_VAR 0 10
68044: ST_TO_ADDR
// end ;
68045: LD_VAR 0 7
68049: RET
// export function EnemyInRange ( unit , dist ) ; begin
68050: LD_INT 0
68052: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68053: LD_ADDR_VAR 0 3
68057: PUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: CALL_OW 255
68067: PPUSH
68068: LD_VAR 0 1
68072: PPUSH
68073: CALL_OW 250
68077: PPUSH
68078: LD_VAR 0 1
68082: PPUSH
68083: CALL_OW 251
68087: PPUSH
68088: LD_VAR 0 2
68092: PPUSH
68093: CALL 41821 0 4
68097: PUSH
68098: LD_INT 4
68100: ARRAY
68101: ST_TO_ADDR
// end ;
68102: LD_VAR 0 3
68106: RET
// export function PlayerSeeMe ( unit ) ; begin
68107: LD_INT 0
68109: PPUSH
// result := See ( your_side , unit ) ;
68110: LD_ADDR_VAR 0 2
68114: PUSH
68115: LD_OWVAR 2
68119: PPUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: CALL_OW 292
68129: ST_TO_ADDR
// end ;
68130: LD_VAR 0 2
68134: RET
// export function ReverseDir ( unit ) ; begin
68135: LD_INT 0
68137: PPUSH
// if not unit then
68138: LD_VAR 0 1
68142: NOT
68143: IFFALSE 68147
// exit ;
68145: GO 68170
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68147: LD_ADDR_VAR 0 2
68151: PUSH
68152: LD_VAR 0 1
68156: PPUSH
68157: CALL_OW 254
68161: PUSH
68162: LD_INT 3
68164: PLUS
68165: PUSH
68166: LD_INT 6
68168: MOD
68169: ST_TO_ADDR
// end ;
68170: LD_VAR 0 2
68174: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
68179: PPUSH
68180: PPUSH
68181: PPUSH
// if not hexes then
68182: LD_VAR 0 2
68186: NOT
68187: IFFALSE 68191
// exit ;
68189: GO 68339
// dist := 9999 ;
68191: LD_ADDR_VAR 0 5
68195: PUSH
68196: LD_INT 9999
68198: ST_TO_ADDR
// for i = 1 to hexes do
68199: LD_ADDR_VAR 0 4
68203: PUSH
68204: DOUBLE
68205: LD_INT 1
68207: DEC
68208: ST_TO_ADDR
68209: LD_VAR 0 2
68213: PUSH
68214: FOR_TO
68215: IFFALSE 68327
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68217: LD_VAR 0 1
68221: PPUSH
68222: LD_VAR 0 2
68226: PUSH
68227: LD_VAR 0 4
68231: ARRAY
68232: PUSH
68233: LD_INT 1
68235: ARRAY
68236: PPUSH
68237: LD_VAR 0 2
68241: PUSH
68242: LD_VAR 0 4
68246: ARRAY
68247: PUSH
68248: LD_INT 2
68250: ARRAY
68251: PPUSH
68252: CALL_OW 297
68256: PUSH
68257: LD_VAR 0 5
68261: LESS
68262: IFFALSE 68325
// begin hex := hexes [ i ] ;
68264: LD_ADDR_VAR 0 7
68268: PUSH
68269: LD_VAR 0 2
68273: PUSH
68274: LD_VAR 0 4
68278: ARRAY
68279: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68280: LD_ADDR_VAR 0 5
68284: PUSH
68285: LD_VAR 0 1
68289: PPUSH
68290: LD_VAR 0 2
68294: PUSH
68295: LD_VAR 0 4
68299: ARRAY
68300: PUSH
68301: LD_INT 1
68303: ARRAY
68304: PPUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_VAR 0 4
68314: ARRAY
68315: PUSH
68316: LD_INT 2
68318: ARRAY
68319: PPUSH
68320: CALL_OW 297
68324: ST_TO_ADDR
// end ; end ;
68325: GO 68214
68327: POP
68328: POP
// result := hex ;
68329: LD_ADDR_VAR 0 3
68333: PUSH
68334: LD_VAR 0 7
68338: ST_TO_ADDR
// end ;
68339: LD_VAR 0 3
68343: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68344: LD_INT 0
68346: PPUSH
68347: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68348: LD_VAR 0 1
68352: NOT
68353: PUSH
68354: LD_VAR 0 1
68358: PUSH
68359: LD_INT 21
68361: PUSH
68362: LD_INT 2
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 23
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PPUSH
68383: CALL_OW 69
68387: IN
68388: NOT
68389: OR
68390: IFFALSE 68394
// exit ;
68392: GO 68441
// for i = 1 to 3 do
68394: LD_ADDR_VAR 0 3
68398: PUSH
68399: DOUBLE
68400: LD_INT 1
68402: DEC
68403: ST_TO_ADDR
68404: LD_INT 3
68406: PUSH
68407: FOR_TO
68408: IFFALSE 68439
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68410: LD_VAR 0 1
68414: PPUSH
68415: CALL_OW 250
68419: PPUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL_OW 251
68429: PPUSH
68430: LD_INT 1
68432: PPUSH
68433: CALL_OW 453
68437: GO 68407
68439: POP
68440: POP
// end ;
68441: LD_VAR 0 2
68445: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68446: LD_INT 0
68448: PPUSH
68449: PPUSH
68450: PPUSH
68451: PPUSH
68452: PPUSH
68453: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68454: LD_VAR 0 1
68458: NOT
68459: PUSH
68460: LD_VAR 0 2
68464: NOT
68465: OR
68466: PUSH
68467: LD_VAR 0 1
68471: PPUSH
68472: CALL_OW 314
68476: OR
68477: IFFALSE 68481
// exit ;
68479: GO 68922
// x := GetX ( enemy_unit ) ;
68481: LD_ADDR_VAR 0 7
68485: PUSH
68486: LD_VAR 0 2
68490: PPUSH
68491: CALL_OW 250
68495: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68496: LD_ADDR_VAR 0 8
68500: PUSH
68501: LD_VAR 0 2
68505: PPUSH
68506: CALL_OW 251
68510: ST_TO_ADDR
// if not x or not y then
68511: LD_VAR 0 7
68515: NOT
68516: PUSH
68517: LD_VAR 0 8
68521: NOT
68522: OR
68523: IFFALSE 68527
// exit ;
68525: GO 68922
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68527: LD_ADDR_VAR 0 6
68531: PUSH
68532: LD_VAR 0 7
68536: PPUSH
68537: LD_INT 0
68539: PPUSH
68540: LD_INT 4
68542: PPUSH
68543: CALL_OW 272
68547: PUSH
68548: LD_VAR 0 8
68552: PPUSH
68553: LD_INT 0
68555: PPUSH
68556: LD_INT 4
68558: PPUSH
68559: CALL_OW 273
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 7
68572: PPUSH
68573: LD_INT 1
68575: PPUSH
68576: LD_INT 4
68578: PPUSH
68579: CALL_OW 272
68583: PUSH
68584: LD_VAR 0 8
68588: PPUSH
68589: LD_INT 1
68591: PPUSH
68592: LD_INT 4
68594: PPUSH
68595: CALL_OW 273
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_VAR 0 7
68608: PPUSH
68609: LD_INT 2
68611: PPUSH
68612: LD_INT 4
68614: PPUSH
68615: CALL_OW 272
68619: PUSH
68620: LD_VAR 0 8
68624: PPUSH
68625: LD_INT 2
68627: PPUSH
68628: LD_INT 4
68630: PPUSH
68631: CALL_OW 273
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_VAR 0 7
68644: PPUSH
68645: LD_INT 3
68647: PPUSH
68648: LD_INT 4
68650: PPUSH
68651: CALL_OW 272
68655: PUSH
68656: LD_VAR 0 8
68660: PPUSH
68661: LD_INT 3
68663: PPUSH
68664: LD_INT 4
68666: PPUSH
68667: CALL_OW 273
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_VAR 0 7
68680: PPUSH
68681: LD_INT 4
68683: PPUSH
68684: LD_INT 4
68686: PPUSH
68687: CALL_OW 272
68691: PUSH
68692: LD_VAR 0 8
68696: PPUSH
68697: LD_INT 4
68699: PPUSH
68700: LD_INT 4
68702: PPUSH
68703: CALL_OW 273
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_VAR 0 7
68716: PPUSH
68717: LD_INT 5
68719: PPUSH
68720: LD_INT 4
68722: PPUSH
68723: CALL_OW 272
68727: PUSH
68728: LD_VAR 0 8
68732: PPUSH
68733: LD_INT 5
68735: PPUSH
68736: LD_INT 4
68738: PPUSH
68739: CALL_OW 273
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: ST_TO_ADDR
// for i = tmp downto 1 do
68756: LD_ADDR_VAR 0 4
68760: PUSH
68761: DOUBLE
68762: LD_VAR 0 6
68766: INC
68767: ST_TO_ADDR
68768: LD_INT 1
68770: PUSH
68771: FOR_DOWNTO
68772: IFFALSE 68873
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68774: LD_VAR 0 6
68778: PUSH
68779: LD_VAR 0 4
68783: ARRAY
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: PPUSH
68789: LD_VAR 0 6
68793: PUSH
68794: LD_VAR 0 4
68798: ARRAY
68799: PUSH
68800: LD_INT 2
68802: ARRAY
68803: PPUSH
68804: CALL_OW 488
68808: NOT
68809: PUSH
68810: LD_VAR 0 6
68814: PUSH
68815: LD_VAR 0 4
68819: ARRAY
68820: PUSH
68821: LD_INT 1
68823: ARRAY
68824: PPUSH
68825: LD_VAR 0 6
68829: PUSH
68830: LD_VAR 0 4
68834: ARRAY
68835: PUSH
68836: LD_INT 2
68838: ARRAY
68839: PPUSH
68840: CALL_OW 428
68844: PUSH
68845: LD_INT 0
68847: NONEQUAL
68848: OR
68849: IFFALSE 68871
// tmp := Delete ( tmp , i ) ;
68851: LD_ADDR_VAR 0 6
68855: PUSH
68856: LD_VAR 0 6
68860: PPUSH
68861: LD_VAR 0 4
68865: PPUSH
68866: CALL_OW 3
68870: ST_TO_ADDR
68871: GO 68771
68873: POP
68874: POP
// j := GetClosestHex ( unit , tmp ) ;
68875: LD_ADDR_VAR 0 5
68879: PUSH
68880: LD_VAR 0 1
68884: PPUSH
68885: LD_VAR 0 6
68889: PPUSH
68890: CALL 68175 0 2
68894: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68895: LD_VAR 0 1
68899: PPUSH
68900: LD_VAR 0 5
68904: PUSH
68905: LD_INT 1
68907: ARRAY
68908: PPUSH
68909: LD_VAR 0 5
68913: PUSH
68914: LD_INT 2
68916: ARRAY
68917: PPUSH
68918: CALL_OW 111
// end ;
68922: LD_VAR 0 3
68926: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
68931: PPUSH
// uc_side = 0 ;
68932: LD_ADDR_OWVAR 20
68936: PUSH
68937: LD_INT 0
68939: ST_TO_ADDR
// uc_nation = 0 ;
68940: LD_ADDR_OWVAR 21
68944: PUSH
68945: LD_INT 0
68947: ST_TO_ADDR
// InitHc_All ( ) ;
68948: CALL_OW 584
// InitVc ;
68952: CALL_OW 20
// if mastodonts then
68956: LD_VAR 0 6
68960: IFFALSE 69027
// for i = 1 to mastodonts do
68962: LD_ADDR_VAR 0 11
68966: PUSH
68967: DOUBLE
68968: LD_INT 1
68970: DEC
68971: ST_TO_ADDR
68972: LD_VAR 0 6
68976: PUSH
68977: FOR_TO
68978: IFFALSE 69025
// begin vc_chassis := 31 ;
68980: LD_ADDR_OWVAR 37
68984: PUSH
68985: LD_INT 31
68987: ST_TO_ADDR
// vc_control := control_rider ;
68988: LD_ADDR_OWVAR 38
68992: PUSH
68993: LD_INT 4
68995: ST_TO_ADDR
// animal := CreateVehicle ;
68996: LD_ADDR_VAR 0 12
69000: PUSH
69001: CALL_OW 45
69005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69006: LD_VAR 0 12
69010: PPUSH
69011: LD_VAR 0 8
69015: PPUSH
69016: LD_INT 0
69018: PPUSH
69019: CALL 71215 0 3
// end ;
69023: GO 68977
69025: POP
69026: POP
// if horses then
69027: LD_VAR 0 5
69031: IFFALSE 69098
// for i = 1 to horses do
69033: LD_ADDR_VAR 0 11
69037: PUSH
69038: DOUBLE
69039: LD_INT 1
69041: DEC
69042: ST_TO_ADDR
69043: LD_VAR 0 5
69047: PUSH
69048: FOR_TO
69049: IFFALSE 69096
// begin hc_class := 21 ;
69051: LD_ADDR_OWVAR 28
69055: PUSH
69056: LD_INT 21
69058: ST_TO_ADDR
// hc_gallery :=  ;
69059: LD_ADDR_OWVAR 33
69063: PUSH
69064: LD_STRING 
69066: ST_TO_ADDR
// animal := CreateHuman ;
69067: LD_ADDR_VAR 0 12
69071: PUSH
69072: CALL_OW 44
69076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69077: LD_VAR 0 12
69081: PPUSH
69082: LD_VAR 0 8
69086: PPUSH
69087: LD_INT 0
69089: PPUSH
69090: CALL 71215 0 3
// end ;
69094: GO 69048
69096: POP
69097: POP
// if birds then
69098: LD_VAR 0 1
69102: IFFALSE 69169
// for i = 1 to birds do
69104: LD_ADDR_VAR 0 11
69108: PUSH
69109: DOUBLE
69110: LD_INT 1
69112: DEC
69113: ST_TO_ADDR
69114: LD_VAR 0 1
69118: PUSH
69119: FOR_TO
69120: IFFALSE 69167
// begin hc_class = 18 ;
69122: LD_ADDR_OWVAR 28
69126: PUSH
69127: LD_INT 18
69129: ST_TO_ADDR
// hc_gallery =  ;
69130: LD_ADDR_OWVAR 33
69134: PUSH
69135: LD_STRING 
69137: ST_TO_ADDR
// animal := CreateHuman ;
69138: LD_ADDR_VAR 0 12
69142: PUSH
69143: CALL_OW 44
69147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69148: LD_VAR 0 12
69152: PPUSH
69153: LD_VAR 0 8
69157: PPUSH
69158: LD_INT 0
69160: PPUSH
69161: CALL 71215 0 3
// end ;
69165: GO 69119
69167: POP
69168: POP
// if tigers then
69169: LD_VAR 0 2
69173: IFFALSE 69257
// for i = 1 to tigers do
69175: LD_ADDR_VAR 0 11
69179: PUSH
69180: DOUBLE
69181: LD_INT 1
69183: DEC
69184: ST_TO_ADDR
69185: LD_VAR 0 2
69189: PUSH
69190: FOR_TO
69191: IFFALSE 69255
// begin hc_class = class_tiger ;
69193: LD_ADDR_OWVAR 28
69197: PUSH
69198: LD_INT 14
69200: ST_TO_ADDR
// hc_gallery =  ;
69201: LD_ADDR_OWVAR 33
69205: PUSH
69206: LD_STRING 
69208: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69209: LD_ADDR_OWVAR 35
69213: PUSH
69214: LD_INT 7
69216: NEG
69217: PPUSH
69218: LD_INT 7
69220: PPUSH
69221: CALL_OW 12
69225: ST_TO_ADDR
// animal := CreateHuman ;
69226: LD_ADDR_VAR 0 12
69230: PUSH
69231: CALL_OW 44
69235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69236: LD_VAR 0 12
69240: PPUSH
69241: LD_VAR 0 8
69245: PPUSH
69246: LD_INT 0
69248: PPUSH
69249: CALL 71215 0 3
// end ;
69253: GO 69190
69255: POP
69256: POP
// if apemans then
69257: LD_VAR 0 3
69261: IFFALSE 69384
// for i = 1 to apemans do
69263: LD_ADDR_VAR 0 11
69267: PUSH
69268: DOUBLE
69269: LD_INT 1
69271: DEC
69272: ST_TO_ADDR
69273: LD_VAR 0 3
69277: PUSH
69278: FOR_TO
69279: IFFALSE 69382
// begin hc_class = class_apeman ;
69281: LD_ADDR_OWVAR 28
69285: PUSH
69286: LD_INT 12
69288: ST_TO_ADDR
// hc_gallery =  ;
69289: LD_ADDR_OWVAR 33
69293: PUSH
69294: LD_STRING 
69296: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69297: LD_ADDR_OWVAR 35
69301: PUSH
69302: LD_INT 5
69304: NEG
69305: PPUSH
69306: LD_INT 5
69308: PPUSH
69309: CALL_OW 12
69313: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69314: LD_ADDR_OWVAR 31
69318: PUSH
69319: LD_INT 1
69321: PPUSH
69322: LD_INT 3
69324: PPUSH
69325: CALL_OW 12
69329: PUSH
69330: LD_INT 1
69332: PPUSH
69333: LD_INT 3
69335: PPUSH
69336: CALL_OW 12
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// animal := CreateHuman ;
69353: LD_ADDR_VAR 0 12
69357: PUSH
69358: CALL_OW 44
69362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69363: LD_VAR 0 12
69367: PPUSH
69368: LD_VAR 0 8
69372: PPUSH
69373: LD_INT 0
69375: PPUSH
69376: CALL 71215 0 3
// end ;
69380: GO 69278
69382: POP
69383: POP
// if enchidnas then
69384: LD_VAR 0 4
69388: IFFALSE 69455
// for i = 1 to enchidnas do
69390: LD_ADDR_VAR 0 11
69394: PUSH
69395: DOUBLE
69396: LD_INT 1
69398: DEC
69399: ST_TO_ADDR
69400: LD_VAR 0 4
69404: PUSH
69405: FOR_TO
69406: IFFALSE 69453
// begin hc_class = 13 ;
69408: LD_ADDR_OWVAR 28
69412: PUSH
69413: LD_INT 13
69415: ST_TO_ADDR
// hc_gallery =  ;
69416: LD_ADDR_OWVAR 33
69420: PUSH
69421: LD_STRING 
69423: ST_TO_ADDR
// animal := CreateHuman ;
69424: LD_ADDR_VAR 0 12
69428: PUSH
69429: CALL_OW 44
69433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69434: LD_VAR 0 12
69438: PPUSH
69439: LD_VAR 0 8
69443: PPUSH
69444: LD_INT 0
69446: PPUSH
69447: CALL 71215 0 3
// end ;
69451: GO 69405
69453: POP
69454: POP
// if fishes then
69455: LD_VAR 0 7
69459: IFFALSE 69526
// for i = 1 to fishes do
69461: LD_ADDR_VAR 0 11
69465: PUSH
69466: DOUBLE
69467: LD_INT 1
69469: DEC
69470: ST_TO_ADDR
69471: LD_VAR 0 7
69475: PUSH
69476: FOR_TO
69477: IFFALSE 69524
// begin hc_class = 20 ;
69479: LD_ADDR_OWVAR 28
69483: PUSH
69484: LD_INT 20
69486: ST_TO_ADDR
// hc_gallery =  ;
69487: LD_ADDR_OWVAR 33
69491: PUSH
69492: LD_STRING 
69494: ST_TO_ADDR
// animal := CreateHuman ;
69495: LD_ADDR_VAR 0 12
69499: PUSH
69500: CALL_OW 44
69504: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69505: LD_VAR 0 12
69509: PPUSH
69510: LD_VAR 0 9
69514: PPUSH
69515: LD_INT 0
69517: PPUSH
69518: CALL 71215 0 3
// end ;
69522: GO 69476
69524: POP
69525: POP
// end ;
69526: LD_VAR 0 10
69530: RET
// export function WantHeal ( sci , unit ) ; begin
69531: LD_INT 0
69533: PPUSH
// if GetTaskList ( sci ) > 0 then
69534: LD_VAR 0 1
69538: PPUSH
69539: CALL_OW 437
69543: PUSH
69544: LD_INT 0
69546: GREATER
69547: IFFALSE 69617
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69549: LD_VAR 0 1
69553: PPUSH
69554: CALL_OW 437
69558: PUSH
69559: LD_INT 1
69561: ARRAY
69562: PUSH
69563: LD_INT 1
69565: ARRAY
69566: PUSH
69567: LD_STRING l
69569: EQUAL
69570: PUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 437
69580: PUSH
69581: LD_INT 1
69583: ARRAY
69584: PUSH
69585: LD_INT 4
69587: ARRAY
69588: PUSH
69589: LD_VAR 0 2
69593: EQUAL
69594: AND
69595: IFFALSE 69607
// result := true else
69597: LD_ADDR_VAR 0 3
69601: PUSH
69602: LD_INT 1
69604: ST_TO_ADDR
69605: GO 69615
// result := false ;
69607: LD_ADDR_VAR 0 3
69611: PUSH
69612: LD_INT 0
69614: ST_TO_ADDR
// end else
69615: GO 69625
// result := false ;
69617: LD_ADDR_VAR 0 3
69621: PUSH
69622: LD_INT 0
69624: ST_TO_ADDR
// end ;
69625: LD_VAR 0 3
69629: RET
// export function HealTarget ( sci ) ; begin
69630: LD_INT 0
69632: PPUSH
// if not sci then
69633: LD_VAR 0 1
69637: NOT
69638: IFFALSE 69642
// exit ;
69640: GO 69707
// result := 0 ;
69642: LD_ADDR_VAR 0 2
69646: PUSH
69647: LD_INT 0
69649: ST_TO_ADDR
// if GetTaskList ( sci ) then
69650: LD_VAR 0 1
69654: PPUSH
69655: CALL_OW 437
69659: IFFALSE 69707
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69661: LD_VAR 0 1
69665: PPUSH
69666: CALL_OW 437
69670: PUSH
69671: LD_INT 1
69673: ARRAY
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PUSH
69679: LD_STRING l
69681: EQUAL
69682: IFFALSE 69707
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_VAR 0 1
69693: PPUSH
69694: CALL_OW 437
69698: PUSH
69699: LD_INT 1
69701: ARRAY
69702: PUSH
69703: LD_INT 4
69705: ARRAY
69706: ST_TO_ADDR
// end ;
69707: LD_VAR 0 2
69711: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69712: LD_INT 0
69714: PPUSH
69715: PPUSH
69716: PPUSH
69717: PPUSH
// if not base_units then
69718: LD_VAR 0 1
69722: NOT
69723: IFFALSE 69727
// exit ;
69725: GO 69814
// result := false ;
69727: LD_ADDR_VAR 0 2
69731: PUSH
69732: LD_INT 0
69734: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69735: LD_ADDR_VAR 0 5
69739: PUSH
69740: LD_VAR 0 1
69744: PPUSH
69745: LD_INT 21
69747: PUSH
69748: LD_INT 3
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PPUSH
69755: CALL_OW 72
69759: ST_TO_ADDR
// if not tmp then
69760: LD_VAR 0 5
69764: NOT
69765: IFFALSE 69769
// exit ;
69767: GO 69814
// for i in tmp do
69769: LD_ADDR_VAR 0 3
69773: PUSH
69774: LD_VAR 0 5
69778: PUSH
69779: FOR_IN
69780: IFFALSE 69812
// begin result := EnemyInRange ( i , 22 ) ;
69782: LD_ADDR_VAR 0 2
69786: PUSH
69787: LD_VAR 0 3
69791: PPUSH
69792: LD_INT 22
69794: PPUSH
69795: CALL 68050 0 2
69799: ST_TO_ADDR
// if result then
69800: LD_VAR 0 2
69804: IFFALSE 69810
// exit ;
69806: POP
69807: POP
69808: GO 69814
// end ;
69810: GO 69779
69812: POP
69813: POP
// end ;
69814: LD_VAR 0 2
69818: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69819: LD_INT 0
69821: PPUSH
69822: PPUSH
// if not units then
69823: LD_VAR 0 1
69827: NOT
69828: IFFALSE 69832
// exit ;
69830: GO 69902
// result := [ ] ;
69832: LD_ADDR_VAR 0 3
69836: PUSH
69837: EMPTY
69838: ST_TO_ADDR
// for i in units do
69839: LD_ADDR_VAR 0 4
69843: PUSH
69844: LD_VAR 0 1
69848: PUSH
69849: FOR_IN
69850: IFFALSE 69900
// if GetTag ( i ) = tag then
69852: LD_VAR 0 4
69856: PPUSH
69857: CALL_OW 110
69861: PUSH
69862: LD_VAR 0 2
69866: EQUAL
69867: IFFALSE 69898
// result := Insert ( result , result + 1 , i ) ;
69869: LD_ADDR_VAR 0 3
69873: PUSH
69874: LD_VAR 0 3
69878: PPUSH
69879: LD_VAR 0 3
69883: PUSH
69884: LD_INT 1
69886: PLUS
69887: PPUSH
69888: LD_VAR 0 4
69892: PPUSH
69893: CALL_OW 2
69897: ST_TO_ADDR
69898: GO 69849
69900: POP
69901: POP
// end ;
69902: LD_VAR 0 3
69906: RET
// export function IsDriver ( un ) ; begin
69907: LD_INT 0
69909: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69910: LD_ADDR_VAR 0 2
69914: PUSH
69915: LD_VAR 0 1
69919: PUSH
69920: LD_INT 55
69922: PUSH
69923: EMPTY
69924: LIST
69925: PPUSH
69926: CALL_OW 69
69930: IN
69931: ST_TO_ADDR
// end ;
69932: LD_VAR 0 2
69936: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69937: LD_INT 0
69939: PPUSH
69940: PPUSH
// list := [ ] ;
69941: LD_ADDR_VAR 0 5
69945: PUSH
69946: EMPTY
69947: ST_TO_ADDR
// case d of 0 :
69948: LD_VAR 0 3
69952: PUSH
69953: LD_INT 0
69955: DOUBLE
69956: EQUAL
69957: IFTRUE 69961
69959: GO 70094
69961: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69962: LD_ADDR_VAR 0 5
69966: PUSH
69967: LD_VAR 0 1
69971: PUSH
69972: LD_INT 4
69974: MINUS
69975: PUSH
69976: LD_VAR 0 2
69980: PUSH
69981: LD_INT 4
69983: MINUS
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: LIST
69992: PUSH
69993: LD_VAR 0 1
69997: PUSH
69998: LD_INT 3
70000: MINUS
70001: PUSH
70002: LD_VAR 0 2
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: LIST
70014: PUSH
70015: LD_VAR 0 1
70019: PUSH
70020: LD_INT 4
70022: PLUS
70023: PUSH
70024: LD_VAR 0 2
70028: PUSH
70029: LD_INT 4
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: PUSH
70037: LD_VAR 0 1
70041: PUSH
70042: LD_INT 3
70044: PLUS
70045: PUSH
70046: LD_VAR 0 2
70050: PUSH
70051: LD_INT 3
70053: PLUS
70054: PUSH
70055: LD_INT 5
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: PUSH
70063: LD_VAR 0 1
70067: PUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_INT 4
70075: PLUS
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: ST_TO_ADDR
// end ; 1 :
70092: GO 70792
70094: LD_INT 1
70096: DOUBLE
70097: EQUAL
70098: IFTRUE 70102
70100: GO 70235
70102: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70103: LD_ADDR_VAR 0 5
70107: PUSH
70108: LD_VAR 0 1
70112: PUSH
70113: LD_VAR 0 2
70117: PUSH
70118: LD_INT 4
70120: MINUS
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: PUSH
70130: LD_VAR 0 1
70134: PUSH
70135: LD_INT 3
70137: MINUS
70138: PUSH
70139: LD_VAR 0 2
70143: PUSH
70144: LD_INT 3
70146: MINUS
70147: PUSH
70148: LD_INT 2
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: LIST
70155: PUSH
70156: LD_VAR 0 1
70160: PUSH
70161: LD_INT 4
70163: MINUS
70164: PUSH
70165: LD_VAR 0 2
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: LIST
70177: PUSH
70178: LD_VAR 0 1
70182: PUSH
70183: LD_VAR 0 2
70187: PUSH
70188: LD_INT 3
70190: PLUS
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_INT 4
70207: PLUS
70208: PUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_INT 4
70216: PLUS
70217: PUSH
70218: LD_INT 5
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: LIST
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: ST_TO_ADDR
// end ; 2 :
70233: GO 70792
70235: LD_INT 2
70237: DOUBLE
70238: EQUAL
70239: IFTRUE 70243
70241: GO 70372
70243: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70244: LD_ADDR_VAR 0 5
70248: PUSH
70249: LD_VAR 0 1
70253: PUSH
70254: LD_VAR 0 2
70258: PUSH
70259: LD_INT 3
70261: MINUS
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: LIST
70270: PUSH
70271: LD_VAR 0 1
70275: PUSH
70276: LD_INT 4
70278: PLUS
70279: PUSH
70280: LD_VAR 0 2
70284: PUSH
70285: LD_INT 4
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: LIST
70292: PUSH
70293: LD_VAR 0 1
70297: PUSH
70298: LD_VAR 0 2
70302: PUSH
70303: LD_INT 4
70305: PLUS
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: PUSH
70315: LD_VAR 0 1
70319: PUSH
70320: LD_INT 3
70322: MINUS
70323: PUSH
70324: LD_VAR 0 2
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: PUSH
70337: LD_VAR 0 1
70341: PUSH
70342: LD_INT 4
70344: MINUS
70345: PUSH
70346: LD_VAR 0 2
70350: PUSH
70351: LD_INT 4
70353: MINUS
70354: PUSH
70355: LD_INT 2
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: LIST
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: ST_TO_ADDR
// end ; 3 :
70370: GO 70792
70372: LD_INT 3
70374: DOUBLE
70375: EQUAL
70376: IFTRUE 70380
70378: GO 70513
70380: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70381: LD_ADDR_VAR 0 5
70385: PUSH
70386: LD_VAR 0 1
70390: PUSH
70391: LD_INT 3
70393: PLUS
70394: PUSH
70395: LD_VAR 0 2
70399: PUSH
70400: LD_INT 4
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: LD_VAR 0 1
70412: PUSH
70413: LD_INT 4
70415: PLUS
70416: PUSH
70417: LD_VAR 0 2
70421: PUSH
70422: LD_INT 4
70424: PLUS
70425: PUSH
70426: LD_INT 5
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: LIST
70433: PUSH
70434: LD_VAR 0 1
70438: PUSH
70439: LD_INT 4
70441: MINUS
70442: PUSH
70443: LD_VAR 0 2
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: LIST
70455: PUSH
70456: LD_VAR 0 1
70460: PUSH
70461: LD_VAR 0 2
70465: PUSH
70466: LD_INT 4
70468: MINUS
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: PUSH
70478: LD_VAR 0 1
70482: PUSH
70483: LD_INT 3
70485: MINUS
70486: PUSH
70487: LD_VAR 0 2
70491: PUSH
70492: LD_INT 3
70494: MINUS
70495: PUSH
70496: LD_INT 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: LIST
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: ST_TO_ADDR
// end ; 4 :
70511: GO 70792
70513: LD_INT 4
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70521
70519: GO 70654
70521: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70522: LD_ADDR_VAR 0 5
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_VAR 0 2
70536: PUSH
70537: LD_INT 4
70539: PLUS
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: LD_VAR 0 1
70553: PUSH
70554: LD_INT 3
70556: PLUS
70557: PUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 3
70565: PLUS
70566: PUSH
70567: LD_INT 5
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: PUSH
70575: LD_VAR 0 1
70579: PUSH
70580: LD_INT 4
70582: PLUS
70583: PUSH
70584: LD_VAR 0 2
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: LIST
70596: PUSH
70597: LD_VAR 0 1
70601: PUSH
70602: LD_VAR 0 2
70606: PUSH
70607: LD_INT 3
70609: MINUS
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: LIST
70618: PUSH
70619: LD_VAR 0 1
70623: PUSH
70624: LD_INT 4
70626: MINUS
70627: PUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_INT 4
70635: MINUS
70636: PUSH
70637: LD_INT 2
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// end ; 5 :
70652: GO 70792
70654: LD_INT 5
70656: DOUBLE
70657: EQUAL
70658: IFTRUE 70662
70660: GO 70791
70662: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70663: LD_ADDR_VAR 0 5
70667: PUSH
70668: LD_VAR 0 1
70672: PUSH
70673: LD_INT 4
70675: MINUS
70676: PUSH
70677: LD_VAR 0 2
70681: PUSH
70682: LD_INT 1
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: LD_VAR 0 1
70694: PUSH
70695: LD_VAR 0 2
70699: PUSH
70700: LD_INT 4
70702: MINUS
70703: PUSH
70704: LD_INT 3
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: LIST
70711: PUSH
70712: LD_VAR 0 1
70716: PUSH
70717: LD_INT 4
70719: PLUS
70720: PUSH
70721: LD_VAR 0 2
70725: PUSH
70726: LD_INT 4
70728: PLUS
70729: PUSH
70730: LD_INT 5
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: PUSH
70738: LD_VAR 0 1
70742: PUSH
70743: LD_INT 3
70745: PLUS
70746: PUSH
70747: LD_VAR 0 2
70751: PUSH
70752: LD_INT 4
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_VAR 0 2
70769: PUSH
70770: LD_INT 3
70772: PLUS
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: ST_TO_ADDR
// end ; end ;
70789: GO 70792
70791: POP
// result := list ;
70792: LD_ADDR_VAR 0 4
70796: PUSH
70797: LD_VAR 0 5
70801: ST_TO_ADDR
// end ;
70802: LD_VAR 0 4
70806: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70807: LD_INT 0
70809: PPUSH
70810: PPUSH
70811: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70812: LD_VAR 0 1
70816: NOT
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: LD_INT 2
70828: PUSH
70829: LD_INT 3
70831: PUSH
70832: LD_INT 4
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: IN
70841: NOT
70842: OR
70843: IFFALSE 70847
// exit ;
70845: GO 70939
// tmp := [ ] ;
70847: LD_ADDR_VAR 0 5
70851: PUSH
70852: EMPTY
70853: ST_TO_ADDR
// for i in units do
70854: LD_ADDR_VAR 0 4
70858: PUSH
70859: LD_VAR 0 1
70863: PUSH
70864: FOR_IN
70865: IFFALSE 70908
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70867: LD_ADDR_VAR 0 5
70871: PUSH
70872: LD_VAR 0 5
70876: PPUSH
70877: LD_VAR 0 5
70881: PUSH
70882: LD_INT 1
70884: PLUS
70885: PPUSH
70886: LD_VAR 0 4
70890: PPUSH
70891: LD_VAR 0 2
70895: PPUSH
70896: CALL_OW 259
70900: PPUSH
70901: CALL_OW 2
70905: ST_TO_ADDR
70906: GO 70864
70908: POP
70909: POP
// if not tmp then
70910: LD_VAR 0 5
70914: NOT
70915: IFFALSE 70919
// exit ;
70917: GO 70939
// result := SortListByListDesc ( units , tmp ) ;
70919: LD_ADDR_VAR 0 3
70923: PUSH
70924: LD_VAR 0 1
70928: PPUSH
70929: LD_VAR 0 5
70933: PPUSH
70934: CALL_OW 77
70938: ST_TO_ADDR
// end ;
70939: LD_VAR 0 3
70943: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70944: LD_INT 0
70946: PPUSH
70947: PPUSH
70948: PPUSH
// result := false ;
70949: LD_ADDR_VAR 0 3
70953: PUSH
70954: LD_INT 0
70956: ST_TO_ADDR
// x := GetX ( building ) ;
70957: LD_ADDR_VAR 0 4
70961: PUSH
70962: LD_VAR 0 2
70966: PPUSH
70967: CALL_OW 250
70971: ST_TO_ADDR
// y := GetY ( building ) ;
70972: LD_ADDR_VAR 0 5
70976: PUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: CALL_OW 251
70986: ST_TO_ADDR
// if not building or not x or not y then
70987: LD_VAR 0 2
70991: NOT
70992: PUSH
70993: LD_VAR 0 4
70997: NOT
70998: OR
70999: PUSH
71000: LD_VAR 0 5
71004: NOT
71005: OR
71006: IFFALSE 71010
// exit ;
71008: GO 71102
// if GetTaskList ( unit ) then
71010: LD_VAR 0 1
71014: PPUSH
71015: CALL_OW 437
71019: IFFALSE 71102
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71021: LD_STRING e
71023: PUSH
71024: LD_VAR 0 1
71028: PPUSH
71029: CALL_OW 437
71033: PUSH
71034: LD_INT 1
71036: ARRAY
71037: PUSH
71038: LD_INT 1
71040: ARRAY
71041: EQUAL
71042: PUSH
71043: LD_VAR 0 4
71047: PUSH
71048: LD_VAR 0 1
71052: PPUSH
71053: CALL_OW 437
71057: PUSH
71058: LD_INT 1
71060: ARRAY
71061: PUSH
71062: LD_INT 2
71064: ARRAY
71065: EQUAL
71066: AND
71067: PUSH
71068: LD_VAR 0 5
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 437
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: PUSH
71087: LD_INT 3
71089: ARRAY
71090: EQUAL
71091: AND
71092: IFFALSE 71102
// result := true end ;
71094: LD_ADDR_VAR 0 3
71098: PUSH
71099: LD_INT 1
71101: ST_TO_ADDR
// end ;
71102: LD_VAR 0 3
71106: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71107: LD_INT 0
71109: PPUSH
// result := false ;
71110: LD_ADDR_VAR 0 4
71114: PUSH
71115: LD_INT 0
71117: ST_TO_ADDR
// if GetTaskList ( unit ) then
71118: LD_VAR 0 1
71122: PPUSH
71123: CALL_OW 437
71127: IFFALSE 71210
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71129: LD_STRING M
71131: PUSH
71132: LD_VAR 0 1
71136: PPUSH
71137: CALL_OW 437
71141: PUSH
71142: LD_INT 1
71144: ARRAY
71145: PUSH
71146: LD_INT 1
71148: ARRAY
71149: EQUAL
71150: PUSH
71151: LD_VAR 0 2
71155: PUSH
71156: LD_VAR 0 1
71160: PPUSH
71161: CALL_OW 437
71165: PUSH
71166: LD_INT 1
71168: ARRAY
71169: PUSH
71170: LD_INT 2
71172: ARRAY
71173: EQUAL
71174: AND
71175: PUSH
71176: LD_VAR 0 3
71180: PUSH
71181: LD_VAR 0 1
71185: PPUSH
71186: CALL_OW 437
71190: PUSH
71191: LD_INT 1
71193: ARRAY
71194: PUSH
71195: LD_INT 3
71197: ARRAY
71198: EQUAL
71199: AND
71200: IFFALSE 71210
// result := true ;
71202: LD_ADDR_VAR 0 4
71206: PUSH
71207: LD_INT 1
71209: ST_TO_ADDR
// end ; end ;
71210: LD_VAR 0 4
71214: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71215: LD_INT 0
71217: PPUSH
71218: PPUSH
71219: PPUSH
71220: PPUSH
// if not unit or not area then
71221: LD_VAR 0 1
71225: NOT
71226: PUSH
71227: LD_VAR 0 2
71231: NOT
71232: OR
71233: IFFALSE 71237
// exit ;
71235: GO 71401
// tmp := AreaToList ( area , i ) ;
71237: LD_ADDR_VAR 0 6
71241: PUSH
71242: LD_VAR 0 2
71246: PPUSH
71247: LD_VAR 0 5
71251: PPUSH
71252: CALL_OW 517
71256: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71257: LD_ADDR_VAR 0 5
71261: PUSH
71262: DOUBLE
71263: LD_INT 1
71265: DEC
71266: ST_TO_ADDR
71267: LD_VAR 0 6
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: PUSH
71276: FOR_TO
71277: IFFALSE 71399
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71279: LD_ADDR_VAR 0 7
71283: PUSH
71284: LD_VAR 0 6
71288: PUSH
71289: LD_INT 1
71291: ARRAY
71292: PUSH
71293: LD_VAR 0 5
71297: ARRAY
71298: PUSH
71299: LD_VAR 0 6
71303: PUSH
71304: LD_INT 2
71306: ARRAY
71307: PUSH
71308: LD_VAR 0 5
71312: ARRAY
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71318: LD_VAR 0 7
71322: PUSH
71323: LD_INT 1
71325: ARRAY
71326: PPUSH
71327: LD_VAR 0 7
71331: PUSH
71332: LD_INT 2
71334: ARRAY
71335: PPUSH
71336: CALL_OW 428
71340: PUSH
71341: LD_INT 0
71343: EQUAL
71344: IFFALSE 71397
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71346: LD_VAR 0 1
71350: PPUSH
71351: LD_VAR 0 7
71355: PUSH
71356: LD_INT 1
71358: ARRAY
71359: PPUSH
71360: LD_VAR 0 7
71364: PUSH
71365: LD_INT 2
71367: ARRAY
71368: PPUSH
71369: LD_VAR 0 3
71373: PPUSH
71374: CALL_OW 48
// result := IsPlaced ( unit ) ;
71378: LD_ADDR_VAR 0 4
71382: PUSH
71383: LD_VAR 0 1
71387: PPUSH
71388: CALL_OW 305
71392: ST_TO_ADDR
// exit ;
71393: POP
71394: POP
71395: GO 71401
// end ; end ;
71397: GO 71276
71399: POP
71400: POP
// end ;
71401: LD_VAR 0 4
71405: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71406: LD_INT 0
71408: PPUSH
71409: PPUSH
71410: PPUSH
// if not side or side > 8 then
71411: LD_VAR 0 1
71415: NOT
71416: PUSH
71417: LD_VAR 0 1
71421: PUSH
71422: LD_INT 8
71424: GREATER
71425: OR
71426: IFFALSE 71430
// exit ;
71428: GO 71617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71430: LD_ADDR_VAR 0 4
71434: PUSH
71435: LD_INT 22
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 21
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PPUSH
71461: CALL_OW 69
71465: ST_TO_ADDR
// if not tmp then
71466: LD_VAR 0 4
71470: NOT
71471: IFFALSE 71475
// exit ;
71473: GO 71617
// enable_addtolog := true ;
71475: LD_ADDR_OWVAR 81
71479: PUSH
71480: LD_INT 1
71482: ST_TO_ADDR
// AddToLog ( [ ) ;
71483: LD_STRING [
71485: PPUSH
71486: CALL_OW 561
// for i in tmp do
71490: LD_ADDR_VAR 0 3
71494: PUSH
71495: LD_VAR 0 4
71499: PUSH
71500: FOR_IN
71501: IFFALSE 71608
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71503: LD_STRING [
71505: PUSH
71506: LD_VAR 0 3
71510: PPUSH
71511: CALL_OW 266
71515: STR
71516: PUSH
71517: LD_STRING , 
71519: STR
71520: PUSH
71521: LD_VAR 0 3
71525: PPUSH
71526: CALL_OW 250
71530: STR
71531: PUSH
71532: LD_STRING , 
71534: STR
71535: PUSH
71536: LD_VAR 0 3
71540: PPUSH
71541: CALL_OW 251
71545: STR
71546: PUSH
71547: LD_STRING , 
71549: STR
71550: PUSH
71551: LD_VAR 0 3
71555: PPUSH
71556: CALL_OW 254
71560: STR
71561: PUSH
71562: LD_STRING , 
71564: STR
71565: PUSH
71566: LD_VAR 0 3
71570: PPUSH
71571: LD_INT 1
71573: PPUSH
71574: CALL_OW 268
71578: STR
71579: PUSH
71580: LD_STRING , 
71582: STR
71583: PUSH
71584: LD_VAR 0 3
71588: PPUSH
71589: LD_INT 2
71591: PPUSH
71592: CALL_OW 268
71596: STR
71597: PUSH
71598: LD_STRING ],
71600: STR
71601: PPUSH
71602: CALL_OW 561
// end ;
71606: GO 71500
71608: POP
71609: POP
// AddToLog ( ]; ) ;
71610: LD_STRING ];
71612: PPUSH
71613: CALL_OW 561
// end ;
71617: LD_VAR 0 2
71621: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71622: LD_INT 0
71624: PPUSH
71625: PPUSH
71626: PPUSH
71627: PPUSH
71628: PPUSH
// if not area or not rate or not max then
71629: LD_VAR 0 1
71633: NOT
71634: PUSH
71635: LD_VAR 0 2
71639: NOT
71640: OR
71641: PUSH
71642: LD_VAR 0 4
71646: NOT
71647: OR
71648: IFFALSE 71652
// exit ;
71650: GO 71844
// while 1 do
71652: LD_INT 1
71654: IFFALSE 71844
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71656: LD_ADDR_VAR 0 9
71660: PUSH
71661: LD_VAR 0 1
71665: PPUSH
71666: LD_INT 1
71668: PPUSH
71669: CALL_OW 287
71673: PUSH
71674: LD_INT 10
71676: MUL
71677: ST_TO_ADDR
// r := rate / 10 ;
71678: LD_ADDR_VAR 0 7
71682: PUSH
71683: LD_VAR 0 2
71687: PUSH
71688: LD_INT 10
71690: DIVREAL
71691: ST_TO_ADDR
// time := 1 1$00 ;
71692: LD_ADDR_VAR 0 8
71696: PUSH
71697: LD_INT 2100
71699: ST_TO_ADDR
// if amount < min then
71700: LD_VAR 0 9
71704: PUSH
71705: LD_VAR 0 3
71709: LESS
71710: IFFALSE 71728
// r := r * 2 else
71712: LD_ADDR_VAR 0 7
71716: PUSH
71717: LD_VAR 0 7
71721: PUSH
71722: LD_INT 2
71724: MUL
71725: ST_TO_ADDR
71726: GO 71754
// if amount > max then
71728: LD_VAR 0 9
71732: PUSH
71733: LD_VAR 0 4
71737: GREATER
71738: IFFALSE 71754
// r := r / 2 ;
71740: LD_ADDR_VAR 0 7
71744: PUSH
71745: LD_VAR 0 7
71749: PUSH
71750: LD_INT 2
71752: DIVREAL
71753: ST_TO_ADDR
// time := time / r ;
71754: LD_ADDR_VAR 0 8
71758: PUSH
71759: LD_VAR 0 8
71763: PUSH
71764: LD_VAR 0 7
71768: DIVREAL
71769: ST_TO_ADDR
// if time < 0 then
71770: LD_VAR 0 8
71774: PUSH
71775: LD_INT 0
71777: LESS
71778: IFFALSE 71795
// time := time * - 1 ;
71780: LD_ADDR_VAR 0 8
71784: PUSH
71785: LD_VAR 0 8
71789: PUSH
71790: LD_INT 1
71792: NEG
71793: MUL
71794: ST_TO_ADDR
// wait ( time ) ;
71795: LD_VAR 0 8
71799: PPUSH
71800: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71804: LD_INT 35
71806: PPUSH
71807: LD_INT 875
71809: PPUSH
71810: CALL_OW 12
71814: PPUSH
71815: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71819: LD_INT 1
71821: PPUSH
71822: LD_INT 5
71824: PPUSH
71825: CALL_OW 12
71829: PPUSH
71830: LD_VAR 0 1
71834: PPUSH
71835: LD_INT 1
71837: PPUSH
71838: CALL_OW 55
// end ;
71842: GO 71652
// end ;
71844: LD_VAR 0 5
71848: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71849: LD_INT 0
71851: PPUSH
71852: PPUSH
71853: PPUSH
71854: PPUSH
71855: PPUSH
71856: PPUSH
71857: PPUSH
71858: PPUSH
// if not turrets or not factories then
71859: LD_VAR 0 1
71863: NOT
71864: PUSH
71865: LD_VAR 0 2
71869: NOT
71870: OR
71871: IFFALSE 71875
// exit ;
71873: GO 72182
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71875: LD_ADDR_VAR 0 10
71879: PUSH
71880: LD_INT 5
71882: PUSH
71883: LD_INT 6
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 2
71892: PUSH
71893: LD_INT 4
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 3
71902: PUSH
71903: LD_INT 5
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 24
71917: PUSH
71918: LD_INT 25
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 23
71927: PUSH
71928: LD_INT 27
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 42
71941: PUSH
71942: LD_INT 43
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 44
71951: PUSH
71952: LD_INT 46
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 45
71961: PUSH
71962: LD_INT 47
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: LIST
71978: ST_TO_ADDR
// result := [ ] ;
71979: LD_ADDR_VAR 0 3
71983: PUSH
71984: EMPTY
71985: ST_TO_ADDR
// for i in turrets do
71986: LD_ADDR_VAR 0 4
71990: PUSH
71991: LD_VAR 0 1
71995: PUSH
71996: FOR_IN
71997: IFFALSE 72180
// begin nat := GetNation ( i ) ;
71999: LD_ADDR_VAR 0 7
72003: PUSH
72004: LD_VAR 0 4
72008: PPUSH
72009: CALL_OW 248
72013: ST_TO_ADDR
// weapon := 0 ;
72014: LD_ADDR_VAR 0 8
72018: PUSH
72019: LD_INT 0
72021: ST_TO_ADDR
// if not nat then
72022: LD_VAR 0 7
72026: NOT
72027: IFFALSE 72031
// continue ;
72029: GO 71996
// for j in list [ nat ] do
72031: LD_ADDR_VAR 0 5
72035: PUSH
72036: LD_VAR 0 10
72040: PUSH
72041: LD_VAR 0 7
72045: ARRAY
72046: PUSH
72047: FOR_IN
72048: IFFALSE 72089
// if GetBWeapon ( i ) = j [ 1 ] then
72050: LD_VAR 0 4
72054: PPUSH
72055: CALL_OW 269
72059: PUSH
72060: LD_VAR 0 5
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: EQUAL
72069: IFFALSE 72087
// begin weapon := j [ 2 ] ;
72071: LD_ADDR_VAR 0 8
72075: PUSH
72076: LD_VAR 0 5
72080: PUSH
72081: LD_INT 2
72083: ARRAY
72084: ST_TO_ADDR
// break ;
72085: GO 72089
// end ;
72087: GO 72047
72089: POP
72090: POP
// if not weapon then
72091: LD_VAR 0 8
72095: NOT
72096: IFFALSE 72100
// continue ;
72098: GO 71996
// for k in factories do
72100: LD_ADDR_VAR 0 6
72104: PUSH
72105: LD_VAR 0 2
72109: PUSH
72110: FOR_IN
72111: IFFALSE 72176
// begin weapons := AvailableWeaponList ( k ) ;
72113: LD_ADDR_VAR 0 9
72117: PUSH
72118: LD_VAR 0 6
72122: PPUSH
72123: CALL_OW 478
72127: ST_TO_ADDR
// if not weapons then
72128: LD_VAR 0 9
72132: NOT
72133: IFFALSE 72137
// continue ;
72135: GO 72110
// if weapon in weapons then
72137: LD_VAR 0 8
72141: PUSH
72142: LD_VAR 0 9
72146: IN
72147: IFFALSE 72174
// begin result := [ i , weapon ] ;
72149: LD_ADDR_VAR 0 3
72153: PUSH
72154: LD_VAR 0 4
72158: PUSH
72159: LD_VAR 0 8
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: ST_TO_ADDR
// exit ;
72168: POP
72169: POP
72170: POP
72171: POP
72172: GO 72182
// end ; end ;
72174: GO 72110
72176: POP
72177: POP
// end ;
72178: GO 71996
72180: POP
72181: POP
// end ;
72182: LD_VAR 0 3
72186: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72187: LD_INT 0
72189: PPUSH
// if not side or side > 8 then
72190: LD_VAR 0 3
72194: NOT
72195: PUSH
72196: LD_VAR 0 3
72200: PUSH
72201: LD_INT 8
72203: GREATER
72204: OR
72205: IFFALSE 72209
// exit ;
72207: GO 72268
// if not range then
72209: LD_VAR 0 4
72213: NOT
72214: IFFALSE 72225
// range := - 12 ;
72216: LD_ADDR_VAR 0 4
72220: PUSH
72221: LD_INT 12
72223: NEG
72224: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72225: LD_VAR 0 1
72229: PPUSH
72230: LD_VAR 0 2
72234: PPUSH
72235: LD_VAR 0 3
72239: PPUSH
72240: LD_VAR 0 4
72244: PPUSH
72245: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72249: LD_VAR 0 1
72253: PPUSH
72254: LD_VAR 0 2
72258: PPUSH
72259: LD_VAR 0 3
72263: PPUSH
72264: CALL_OW 331
// end ;
72268: LD_VAR 0 5
72272: RET
// export function Video ( mode ) ; begin
72273: LD_INT 0
72275: PPUSH
// ingame_video = mode ;
72276: LD_ADDR_OWVAR 52
72280: PUSH
72281: LD_VAR 0 1
72285: ST_TO_ADDR
// interface_hidden = mode ;
72286: LD_ADDR_OWVAR 54
72290: PUSH
72291: LD_VAR 0 1
72295: ST_TO_ADDR
// end ;
72296: LD_VAR 0 2
72300: RET
// export function Join ( array , element ) ; begin
72301: LD_INT 0
72303: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72304: LD_ADDR_VAR 0 3
72308: PUSH
72309: LD_VAR 0 1
72313: PPUSH
72314: LD_VAR 0 1
72318: PUSH
72319: LD_INT 1
72321: PLUS
72322: PPUSH
72323: LD_VAR 0 2
72327: PPUSH
72328: CALL_OW 1
72332: ST_TO_ADDR
// end ;
72333: LD_VAR 0 3
72337: RET
// export function JoinUnion ( array , element ) ; begin
72338: LD_INT 0
72340: PPUSH
// result := array union element ;
72341: LD_ADDR_VAR 0 3
72345: PUSH
72346: LD_VAR 0 1
72350: PUSH
72351: LD_VAR 0 2
72355: UNION
72356: ST_TO_ADDR
// end ;
72357: LD_VAR 0 3
72361: RET
// export function GetBehemoths ( side ) ; begin
72362: LD_INT 0
72364: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72365: LD_ADDR_VAR 0 2
72369: PUSH
72370: LD_INT 22
72372: PUSH
72373: LD_VAR 0 1
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 31
72384: PUSH
72385: LD_INT 25
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PPUSH
72396: CALL_OW 69
72400: ST_TO_ADDR
// end ;
72401: LD_VAR 0 2
72405: RET
// export function Shuffle ( array ) ; var i , index ; begin
72406: LD_INT 0
72408: PPUSH
72409: PPUSH
72410: PPUSH
// result := [ ] ;
72411: LD_ADDR_VAR 0 2
72415: PUSH
72416: EMPTY
72417: ST_TO_ADDR
// if not array then
72418: LD_VAR 0 1
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72526
// Randomize ;
72427: CALL_OW 10
// for i = array downto 1 do
72431: LD_ADDR_VAR 0 3
72435: PUSH
72436: DOUBLE
72437: LD_VAR 0 1
72441: INC
72442: ST_TO_ADDR
72443: LD_INT 1
72445: PUSH
72446: FOR_DOWNTO
72447: IFFALSE 72524
// begin index := rand ( 1 , array ) ;
72449: LD_ADDR_VAR 0 4
72453: PUSH
72454: LD_INT 1
72456: PPUSH
72457: LD_VAR 0 1
72461: PPUSH
72462: CALL_OW 12
72466: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72467: LD_ADDR_VAR 0 2
72471: PUSH
72472: LD_VAR 0 2
72476: PPUSH
72477: LD_VAR 0 2
72481: PUSH
72482: LD_INT 1
72484: PLUS
72485: PPUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_VAR 0 4
72495: ARRAY
72496: PPUSH
72497: CALL_OW 2
72501: ST_TO_ADDR
// array := Delete ( array , index ) ;
72502: LD_ADDR_VAR 0 1
72506: PUSH
72507: LD_VAR 0 1
72511: PPUSH
72512: LD_VAR 0 4
72516: PPUSH
72517: CALL_OW 3
72521: ST_TO_ADDR
// end ;
72522: GO 72446
72524: POP
72525: POP
// end ;
72526: LD_VAR 0 2
72530: RET
// export function GetBaseMaterials ( base ) ; begin
72531: LD_INT 0
72533: PPUSH
// result := [ 0 , 0 , 0 ] ;
72534: LD_ADDR_VAR 0 2
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: LD_INT 0
72544: PUSH
72545: LD_INT 0
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: LIST
72552: ST_TO_ADDR
// if not base then
72553: LD_VAR 0 1
72557: NOT
72558: IFFALSE 72562
// exit ;
72560: GO 72611
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72562: LD_ADDR_VAR 0 2
72566: PUSH
72567: LD_VAR 0 1
72571: PPUSH
72572: LD_INT 1
72574: PPUSH
72575: CALL_OW 275
72579: PUSH
72580: LD_VAR 0 1
72584: PPUSH
72585: LD_INT 2
72587: PPUSH
72588: CALL_OW 275
72592: PUSH
72593: LD_VAR 0 1
72597: PPUSH
72598: LD_INT 3
72600: PPUSH
72601: CALL_OW 275
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: LIST
72610: ST_TO_ADDR
// end ;
72611: LD_VAR 0 2
72615: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72616: LD_INT 0
72618: PPUSH
72619: PPUSH
// result := array ;
72620: LD_ADDR_VAR 0 3
72624: PUSH
72625: LD_VAR 0 1
72629: ST_TO_ADDR
// if size > 0 then
72630: LD_VAR 0 2
72634: PUSH
72635: LD_INT 0
72637: GREATER
72638: IFFALSE 72684
// for i := array downto size do
72640: LD_ADDR_VAR 0 4
72644: PUSH
72645: DOUBLE
72646: LD_VAR 0 1
72650: INC
72651: ST_TO_ADDR
72652: LD_VAR 0 2
72656: PUSH
72657: FOR_DOWNTO
72658: IFFALSE 72682
// result := Delete ( result , result ) ;
72660: LD_ADDR_VAR 0 3
72664: PUSH
72665: LD_VAR 0 3
72669: PPUSH
72670: LD_VAR 0 3
72674: PPUSH
72675: CALL_OW 3
72679: ST_TO_ADDR
72680: GO 72657
72682: POP
72683: POP
// end ;
72684: LD_VAR 0 3
72688: RET
// export function ComExit ( unit ) ; var tmp ; begin
72689: LD_INT 0
72691: PPUSH
72692: PPUSH
// if not IsInUnit ( unit ) then
72693: LD_VAR 0 1
72697: PPUSH
72698: CALL_OW 310
72702: NOT
72703: IFFALSE 72707
// exit ;
72705: GO 72767
// tmp := IsInUnit ( unit ) ;
72707: LD_ADDR_VAR 0 3
72711: PUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 310
72721: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72722: LD_VAR 0 3
72726: PPUSH
72727: CALL_OW 247
72731: PUSH
72732: LD_INT 2
72734: EQUAL
72735: IFFALSE 72748
// ComExitVehicle ( unit ) else
72737: LD_VAR 0 1
72741: PPUSH
72742: CALL_OW 121
72746: GO 72757
// ComExitBuilding ( unit ) ;
72748: LD_VAR 0 1
72752: PPUSH
72753: CALL_OW 122
// result := tmp ;
72757: LD_ADDR_VAR 0 2
72761: PUSH
72762: LD_VAR 0 3
72766: ST_TO_ADDR
// end ;
72767: LD_VAR 0 2
72771: RET
// export function ComExitAll ( units ) ; var i ; begin
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
// if not units then
72776: LD_VAR 0 1
72780: NOT
72781: IFFALSE 72785
// exit ;
72783: GO 72811
// for i in units do
72785: LD_ADDR_VAR 0 3
72789: PUSH
72790: LD_VAR 0 1
72794: PUSH
72795: FOR_IN
72796: IFFALSE 72809
// ComExit ( i ) ;
72798: LD_VAR 0 3
72802: PPUSH
72803: CALL 72689 0 1
72807: GO 72795
72809: POP
72810: POP
// end ;
72811: LD_VAR 0 2
72815: RET
// export function ResetHc ; begin
72816: LD_INT 0
72818: PPUSH
// InitHc ;
72819: CALL_OW 19
// hc_importance := 0 ;
72823: LD_ADDR_OWVAR 32
72827: PUSH
72828: LD_INT 0
72830: ST_TO_ADDR
// end ;
72831: LD_VAR 0 1
72835: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
72840: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72841: LD_ADDR_VAR 0 6
72845: PUSH
72846: LD_VAR 0 1
72850: PUSH
72851: LD_VAR 0 3
72855: PLUS
72856: PUSH
72857: LD_INT 2
72859: DIV
72860: ST_TO_ADDR
// if _x < 0 then
72861: LD_VAR 0 6
72865: PUSH
72866: LD_INT 0
72868: LESS
72869: IFFALSE 72886
// _x := _x * - 1 ;
72871: LD_ADDR_VAR 0 6
72875: PUSH
72876: LD_VAR 0 6
72880: PUSH
72881: LD_INT 1
72883: NEG
72884: MUL
72885: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72886: LD_ADDR_VAR 0 7
72890: PUSH
72891: LD_VAR 0 2
72895: PUSH
72896: LD_VAR 0 4
72900: PLUS
72901: PUSH
72902: LD_INT 2
72904: DIV
72905: ST_TO_ADDR
// if _y < 0 then
72906: LD_VAR 0 7
72910: PUSH
72911: LD_INT 0
72913: LESS
72914: IFFALSE 72931
// _y := _y * - 1 ;
72916: LD_ADDR_VAR 0 7
72920: PUSH
72921: LD_VAR 0 7
72925: PUSH
72926: LD_INT 1
72928: NEG
72929: MUL
72930: ST_TO_ADDR
// result := [ _x , _y ] ;
72931: LD_ADDR_VAR 0 5
72935: PUSH
72936: LD_VAR 0 6
72940: PUSH
72941: LD_VAR 0 7
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: ST_TO_ADDR
// end ;
72950: LD_VAR 0 5
72954: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
72959: PPUSH
72960: PPUSH
// task := GetTaskList ( unit ) ;
72961: LD_ADDR_VAR 0 7
72965: PUSH
72966: LD_VAR 0 1
72970: PPUSH
72971: CALL_OW 437
72975: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72976: LD_VAR 0 7
72980: NOT
72981: PUSH
72982: LD_VAR 0 1
72986: PPUSH
72987: LD_VAR 0 2
72991: PPUSH
72992: CALL_OW 308
72996: NOT
72997: AND
72998: IFFALSE 73002
// exit ;
73000: GO 73120
// if IsInArea ( unit , area ) then
73002: LD_VAR 0 1
73006: PPUSH
73007: LD_VAR 0 2
73011: PPUSH
73012: CALL_OW 308
73016: IFFALSE 73034
// begin ComMoveToArea ( unit , goAway ) ;
73018: LD_VAR 0 1
73022: PPUSH
73023: LD_VAR 0 3
73027: PPUSH
73028: CALL_OW 113
// exit ;
73032: GO 73120
// end ; if task [ 1 ] [ 1 ] <> M then
73034: LD_VAR 0 7
73038: PUSH
73039: LD_INT 1
73041: ARRAY
73042: PUSH
73043: LD_INT 1
73045: ARRAY
73046: PUSH
73047: LD_STRING M
73049: NONEQUAL
73050: IFFALSE 73054
// exit ;
73052: GO 73120
// x := task [ 1 ] [ 2 ] ;
73054: LD_ADDR_VAR 0 5
73058: PUSH
73059: LD_VAR 0 7
73063: PUSH
73064: LD_INT 1
73066: ARRAY
73067: PUSH
73068: LD_INT 2
73070: ARRAY
73071: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73072: LD_ADDR_VAR 0 6
73076: PUSH
73077: LD_VAR 0 7
73081: PUSH
73082: LD_INT 1
73084: ARRAY
73085: PUSH
73086: LD_INT 3
73088: ARRAY
73089: ST_TO_ADDR
// if InArea ( x , y , area ) then
73090: LD_VAR 0 5
73094: PPUSH
73095: LD_VAR 0 6
73099: PPUSH
73100: LD_VAR 0 2
73104: PPUSH
73105: CALL_OW 309
73109: IFFALSE 73120
// ComStop ( unit ) ;
73111: LD_VAR 0 1
73115: PPUSH
73116: CALL_OW 141
// end ;
73120: LD_VAR 0 4
73124: RET
// export function Abs ( value ) ; begin
73125: LD_INT 0
73127: PPUSH
// result := value ;
73128: LD_ADDR_VAR 0 2
73132: PUSH
73133: LD_VAR 0 1
73137: ST_TO_ADDR
// if value < 0 then
73138: LD_VAR 0 1
73142: PUSH
73143: LD_INT 0
73145: LESS
73146: IFFALSE 73163
// result := value * - 1 ;
73148: LD_ADDR_VAR 0 2
73152: PUSH
73153: LD_VAR 0 1
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: MUL
73162: ST_TO_ADDR
// end ;
73163: LD_VAR 0 2
73167: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73168: LD_INT 0
73170: PPUSH
73171: PPUSH
73172: PPUSH
73173: PPUSH
73174: PPUSH
73175: PPUSH
73176: PPUSH
73177: PPUSH
// if not unit or not building then
73178: LD_VAR 0 1
73182: NOT
73183: PUSH
73184: LD_VAR 0 2
73188: NOT
73189: OR
73190: IFFALSE 73194
// exit ;
73192: GO 73420
// x := GetX ( building ) ;
73194: LD_ADDR_VAR 0 4
73198: PUSH
73199: LD_VAR 0 2
73203: PPUSH
73204: CALL_OW 250
73208: ST_TO_ADDR
// y := GetY ( building ) ;
73209: LD_ADDR_VAR 0 6
73213: PUSH
73214: LD_VAR 0 2
73218: PPUSH
73219: CALL_OW 251
73223: ST_TO_ADDR
// d := GetDir ( building ) ;
73224: LD_ADDR_VAR 0 8
73228: PUSH
73229: LD_VAR 0 2
73233: PPUSH
73234: CALL_OW 254
73238: ST_TO_ADDR
// r := 4 ;
73239: LD_ADDR_VAR 0 9
73243: PUSH
73244: LD_INT 4
73246: ST_TO_ADDR
// for i := 1 to 5 do
73247: LD_ADDR_VAR 0 10
73251: PUSH
73252: DOUBLE
73253: LD_INT 1
73255: DEC
73256: ST_TO_ADDR
73257: LD_INT 5
73259: PUSH
73260: FOR_TO
73261: IFFALSE 73418
// begin _x := ShiftX ( x , d , r + i ) ;
73263: LD_ADDR_VAR 0 5
73267: PUSH
73268: LD_VAR 0 4
73272: PPUSH
73273: LD_VAR 0 8
73277: PPUSH
73278: LD_VAR 0 9
73282: PUSH
73283: LD_VAR 0 10
73287: PLUS
73288: PPUSH
73289: CALL_OW 272
73293: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73294: LD_ADDR_VAR 0 7
73298: PUSH
73299: LD_VAR 0 6
73303: PPUSH
73304: LD_VAR 0 8
73308: PPUSH
73309: LD_VAR 0 9
73313: PUSH
73314: LD_VAR 0 10
73318: PLUS
73319: PPUSH
73320: CALL_OW 273
73324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73325: LD_VAR 0 5
73329: PPUSH
73330: LD_VAR 0 7
73334: PPUSH
73335: CALL_OW 488
73339: PUSH
73340: LD_VAR 0 5
73344: PPUSH
73345: LD_VAR 0 7
73349: PPUSH
73350: CALL_OW 428
73354: PPUSH
73355: CALL_OW 247
73359: PUSH
73360: LD_INT 3
73362: PUSH
73363: LD_INT 2
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: IN
73370: NOT
73371: AND
73372: IFFALSE 73416
// begin ComMoveXY ( unit , _x , _y ) ;
73374: LD_VAR 0 1
73378: PPUSH
73379: LD_VAR 0 5
73383: PPUSH
73384: LD_VAR 0 7
73388: PPUSH
73389: CALL_OW 111
// result := [ _x , _y ] ;
73393: LD_ADDR_VAR 0 3
73397: PUSH
73398: LD_VAR 0 5
73402: PUSH
73403: LD_VAR 0 7
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: ST_TO_ADDR
// exit ;
73412: POP
73413: POP
73414: GO 73420
// end ; end ;
73416: GO 73260
73418: POP
73419: POP
// end ;
73420: LD_VAR 0 3
73424: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73425: LD_INT 0
73427: PPUSH
73428: PPUSH
73429: PPUSH
// result := 0 ;
73430: LD_ADDR_VAR 0 3
73434: PUSH
73435: LD_INT 0
73437: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73438: LD_VAR 0 1
73442: PUSH
73443: LD_INT 0
73445: LESS
73446: PUSH
73447: LD_VAR 0 1
73451: PUSH
73452: LD_INT 8
73454: GREATER
73455: OR
73456: PUSH
73457: LD_VAR 0 2
73461: PUSH
73462: LD_INT 0
73464: LESS
73465: OR
73466: PUSH
73467: LD_VAR 0 2
73471: PUSH
73472: LD_INT 8
73474: GREATER
73475: OR
73476: IFFALSE 73480
// exit ;
73478: GO 73555
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73480: LD_ADDR_VAR 0 4
73484: PUSH
73485: LD_INT 22
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PPUSH
73497: CALL_OW 69
73501: PUSH
73502: FOR_IN
73503: IFFALSE 73553
// begin un := UnitShoot ( i ) ;
73505: LD_ADDR_VAR 0 5
73509: PUSH
73510: LD_VAR 0 4
73514: PPUSH
73515: CALL_OW 504
73519: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73520: LD_VAR 0 5
73524: PPUSH
73525: CALL_OW 255
73529: PUSH
73530: LD_VAR 0 1
73534: EQUAL
73535: IFFALSE 73551
// begin result := un ;
73537: LD_ADDR_VAR 0 3
73541: PUSH
73542: LD_VAR 0 5
73546: ST_TO_ADDR
// exit ;
73547: POP
73548: POP
73549: GO 73555
// end ; end ;
73551: GO 73502
73553: POP
73554: POP
// end ;
73555: LD_VAR 0 3
73559: RET
// export function GetCargoBay ( units ) ; begin
73560: LD_INT 0
73562: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73563: LD_ADDR_VAR 0 2
73567: PUSH
73568: LD_VAR 0 1
73572: PPUSH
73573: LD_INT 2
73575: PUSH
73576: LD_INT 34
73578: PUSH
73579: LD_INT 12
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 34
73588: PUSH
73589: LD_INT 51
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 34
73598: PUSH
73599: LD_INT 32
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 34
73608: PUSH
73609: LD_EXP 55
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: PPUSH
73625: CALL_OW 72
73629: ST_TO_ADDR
// end ; end_of_file
73630: LD_VAR 0 2
73634: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73635: LD_VAR 0 1
73639: PUSH
73640: LD_INT 200
73642: DOUBLE
73643: GREATEREQUAL
73644: IFFALSE 73652
73646: LD_INT 299
73648: DOUBLE
73649: LESSEQUAL
73650: IFTRUE 73654
73652: GO 73686
73654: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_VAR 0 2
73664: PPUSH
73665: LD_VAR 0 3
73669: PPUSH
73670: LD_VAR 0 4
73674: PPUSH
73675: LD_VAR 0 5
73679: PPUSH
73680: CALL 32096 0 5
73684: GO 73763
73686: LD_INT 300
73688: DOUBLE
73689: GREATEREQUAL
73690: IFFALSE 73698
73692: LD_INT 399
73694: DOUBLE
73695: LESSEQUAL
73696: IFTRUE 73700
73698: GO 73762
73700: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73701: LD_VAR 0 1
73705: PPUSH
73706: LD_VAR 0 2
73710: PPUSH
73711: LD_VAR 0 3
73715: PPUSH
73716: LD_VAR 0 4
73720: PPUSH
73721: LD_VAR 0 5
73725: PPUSH
73726: LD_VAR 0 6
73730: PPUSH
73731: LD_VAR 0 7
73735: PPUSH
73736: LD_VAR 0 8
73740: PPUSH
73741: LD_VAR 0 9
73745: PPUSH
73746: LD_VAR 0 10
73750: PPUSH
73751: LD_VAR 0 11
73755: PPUSH
73756: CALL 29984 0 11
73760: GO 73763
73762: POP
// end ;
73763: PPOPN 11
73765: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73766: LD_VAR 0 1
73770: PPUSH
73771: LD_VAR 0 2
73775: PPUSH
73776: LD_VAR 0 3
73780: PPUSH
73781: LD_VAR 0 4
73785: PPUSH
73786: LD_VAR 0 5
73790: PPUSH
73791: CALL 32078 0 5
// end ; end_of_file
73795: PPOPN 5
73797: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73798: LD_VAR 0 1
73802: PPUSH
73803: LD_VAR 0 2
73807: PPUSH
73808: LD_VAR 0 3
73812: PPUSH
73813: LD_VAR 0 4
73817: PPUSH
73818: LD_VAR 0 5
73822: PPUSH
73823: LD_VAR 0 6
73827: PPUSH
73828: CALL 18792 0 6
// end ;
73832: PPOPN 6
73834: END
