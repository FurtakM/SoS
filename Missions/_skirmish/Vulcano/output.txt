// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1102 0 0
// PrepareRussian ;
  23: CALL 3784 0 0
// PrepareLegion ;
  27: CALL 8065 0 0
// Action ;
  31: CALL 11573 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 16956 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// us_commander := CreateHuman ;
 443: LD_ADDR_EXP 24
 447: PUSH
 448: CALL_OW 44
 452: ST_TO_ADDR
// player_commander := us_commander ;
 453: LD_ADDR_EXP 11
 457: PUSH
 458: LD_EXP 24
 462: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_STRING text
 470: PPUSH
 471: LD_INT 7
 473: PUSH
 474: LD_INT 6
 476: PUSH
 477: LD_INT 5
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_OWVAR 67
 489: ARRAY
 490: PPUSH
 491: LD_INT 7
 493: PUSH
 494: LD_INT 6
 496: PUSH
 497: LD_INT 5
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: PPUSH
 511: LD_INT -5
 513: PUSH
 514: LD_EXP 24
 518: PUSH
 519: LD_INT -3
 521: PUSH
 522: LD_INT -2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_EXP 25
 535: ADD
 536: PPUSH
 537: LD_INT 1
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 4
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 5
 575: PUSH
 576: LD_INT 1
 578: NEG
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_OWVAR 67
 589: ARRAY
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 42
 602: ST_TO_ADDR
// team := team ^ us_commander ;
 603: LD_ADDR_VAR 0 5
 607: PUSH
 608: LD_VAR 0 5
 612: PUSH
 613: LD_EXP 24
 617: ADD
 618: ST_TO_ADDR
// for i = 1 to team do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_TO
 635: IFFALSE 835
// begin if GetClass ( team [ i ] ) = class_mechanic then
 637: LD_VAR 0 5
 641: PUSH
 642: LD_VAR 0 2
 646: ARRAY
 647: PPUSH
 648: CALL_OW 257
 652: PUSH
 653: LD_INT 3
 655: EQUAL
 656: IFFALSE 797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 658: LD_ADDR_OWVAR 37
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 3
 684: MOD
 685: PUSH
 686: LD_INT 1
 688: PLUS
 689: ARRAY
 690: ST_TO_ADDR
// vc_engine := engine_siberite ;
 691: LD_ADDR_OWVAR 39
 695: PUSH
 696: LD_INT 3
 698: ST_TO_ADDR
// vc_control := control_manual ;
 699: LD_ADDR_OWVAR 38
 703: PUSH
 704: LD_INT 1
 706: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 707: LD_ADDR_OWVAR 40
 711: PUSH
 712: LD_INT 4
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: LD_INT 9
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 3
 731: PPUSH
 732: CALL_OW 12
 736: ARRAY
 737: ST_TO_ADDR
// un := CreateVehicle ;
 738: LD_ADDR_VAR 0 4
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 748: LD_VAR 0 4
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 760: LD_VAR 0 4
 764: PPUSH
 765: LD_INT 1
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 775: LD_VAR 0 5
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PPUSH
 786: LD_VAR 0 4
 790: PPUSH
 791: CALL_OW 52
// end else
 795: GO 833
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 797: LD_VAR 0 5
 801: PUSH
 802: LD_VAR 0 2
 806: ARRAY
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// ComHold ( team [ i ] ) ;
 818: LD_VAR 0 5
 822: PUSH
 823: LD_VAR 0 2
 827: ARRAY
 828: PPUSH
 829: CALL_OW 140
// end ; end ;
 833: GO 634
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 1
 841: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 842: LD_OWVAR 1
 846: PUSH
 847: LD_INT 73500
 849: LESS
 850: IFFALSE 877
 852: GO 854
 854: DISABLE
// begin enable ;
 855: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 5
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: LD_INT 23
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 55
// end ;
 877: END
// every 1 1$10 do var time , p , l ;
 878: GO 880
 880: DISABLE
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// begin time := 0 0$44 ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_INT 1540
 893: ST_TO_ADDR
// l := 0 ;
 894: LD_ADDR_VAR 0 3
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: CALL_OW 67
// l := l + 1 ;
 911: LD_ADDR_VAR 0 3
 915: PUSH
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 925: LD_INT 12
 927: PPUSH
 928: CALL_OW 435
 932: PUSH
 933: LD_INT 20
 935: LESS
 936: IFFALSE 995
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 938: LD_INT 1
 940: PPUSH
 941: LD_INT 5
 943: PPUSH
 944: CALL_OW 12
 948: PPUSH
 949: LD_INT 12
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 959: LD_INT 1365
 961: PPUSH
 962: LD_INT 1680
 964: PPUSH
 965: CALL_OW 12
 969: PPUSH
 970: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 5
 979: PPUSH
 980: CALL_OW 12
 984: PPUSH
 985: LD_INT 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 12
1010: ST_TO_ADDR
// if p then
1011: LD_VAR 0 2
1015: IFFALSE 1050
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1017: LD_INT 315
1019: PPUSH
1020: LD_INT 700
1022: PPUSH
1023: CALL_OW 12
1027: PPUSH
1028: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: CALL_OW 12
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1050: LD_VAR 0 3
1054: PUSH
1055: LD_INT 15
1057: PUSH
1058: LD_INT 13
1060: PUSH
1061: LD_INT 11
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_OWVAR 67
1073: ARRAY
1074: MOD
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: IFFALSE 1095
// time := time + 2 2$00 ;
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_VAR 0 1
1090: PUSH
1091: LD_INT 4200
1093: PLUS
1094: ST_TO_ADDR
// end until false ;
1095: LD_INT 0
1097: IFFALSE 902
// end ; end_of_file
1099: PPOPN 3
1101: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_INT 22
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 21
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PPUSH
1139: CALL_OW 69
1143: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1144: LD_ADDR_VAR 0 4
1148: PUSH
1149: LD_INT 470
1151: PUSH
1152: LD_INT 370
1154: PUSH
1155: LD_INT 290
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_OWVAR 67
1167: ARRAY
1168: ST_TO_ADDR
// case Difficulty of 2 :
1169: LD_OWVAR 67
1173: PUSH
1174: LD_INT 2
1176: DOUBLE
1177: EQUAL
1178: IFTRUE 1182
1180: GO 1213
1182: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1183: LD_VAR 0 3
1187: PPUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 32
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 72
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 65
// end ; 3 :
1211: GO 1289
1213: LD_INT 3
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1288
1221: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1222: LD_VAR 0 3
1226: PPUSH
1227: LD_INT 30
1229: PUSH
1230: LD_INT 32
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1250: LD_VAR 0 3
1254: PPUSH
1255: LD_INT 30
1257: PUSH
1258: LD_INT 27
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 72
1269: PUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 12
1280: ARRAY
1281: PPUSH
1282: CALL_OW 65
// end ; end ;
1286: GO 1289
1288: POP
// for i = 1 to filter do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: DOUBLE
1295: LD_INT 1
1297: DEC
1298: ST_TO_ADDR
1299: LD_VAR 0 3
1303: PUSH
1304: FOR_TO
1305: IFFALSE 1342
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1307: LD_VAR 0 3
1311: PUSH
1312: LD_VAR 0 2
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 4
1322: PUSH
1323: LD_INT 29
1325: NEG
1326: PPUSH
1327: LD_INT 29
1329: PPUSH
1330: CALL_OW 12
1334: PLUS
1335: PPUSH
1336: CALL_OW 234
1340: GO 1304
1342: POP
1343: POP
// SetBName ( us_depot , Vulcano1 ) ;
1344: LD_INT 50
1346: PPUSH
1347: LD_STRING Vulcano1
1349: PPUSH
1350: CALL_OW 500
// hc_importance := 0 ;
1354: LD_ADDR_OWVAR 32
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_side := 3 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 3
1369: ST_TO_ADDR
// uc_nation := nation_russian ;
1370: LD_ADDR_OWVAR 21
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1378: LD_ADDR_OWVAR 37
1382: PUSH
1383: LD_INT 22
1385: ST_TO_ADDR
// vc_engine := engine_combustion ;
1386: LD_ADDR_OWVAR 39
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// vc_control := control_manual ;
1394: LD_ADDR_OWVAR 38
1398: PUSH
1399: LD_INT 1
1401: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1402: LD_ADDR_OWVAR 40
1406: PUSH
1407: LD_INT 51
1409: ST_TO_ADDR
// un := CreateVehicle ;
1410: LD_ADDR_VAR 0 5
1414: PUSH
1415: CALL_OW 45
1419: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1420: LD_VAR 0 5
1424: PPUSH
1425: LD_INT 97
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1438: LD_VAR 0 5
1442: PPUSH
1443: LD_INT 1
1445: PPUSH
1446: LD_INT 100
1448: PPUSH
1449: CALL_OW 290
// SetFuel ( un , 45 ) ;
1453: LD_VAR 0 5
1457: PPUSH
1458: LD_INT 45
1460: PPUSH
1461: CALL_OW 240
// un := CreateVehicle ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: CALL_OW 45
1474: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1475: LD_VAR 0 5
1479: PPUSH
1480: LD_INT 109
1482: PPUSH
1483: LD_INT 154
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 100
1503: PPUSH
1504: CALL_OW 290
// SetDir ( un , 1 ) ;
1508: LD_VAR 0 5
1512: PPUSH
1513: LD_INT 1
1515: PPUSH
1516: CALL_OW 233
// SetFuel ( un , 50 ) ;
1520: LD_VAR 0 5
1524: PPUSH
1525: LD_INT 50
1527: PPUSH
1528: CALL_OW 240
// russians_in_base := [ ] ;
1532: LD_ADDR_EXP 28
1536: PUSH
1537: EMPTY
1538: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: DOUBLE
1545: LD_INT 1
1547: DEC
1548: ST_TO_ADDR
1549: LD_INT 6
1551: PUSH
1552: LD_INT 6
1554: PUSH
1555: LD_INT 7
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_OWVAR 67
1567: ARRAY
1568: PUSH
1569: FOR_TO
1570: IFFALSE 1651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: LD_INT 6
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PPUSH
1598: CALL_OW 380
// un := CreateHuman ;
1602: LD_ADDR_VAR 0 5
1606: PUSH
1607: CALL_OW 44
1611: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1612: LD_ADDR_EXP 28
1616: PUSH
1617: LD_EXP 28
1621: PUSH
1622: LD_VAR 0 5
1626: ADD
1627: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1628: LD_VAR 0 5
1632: PPUSH
1633: LD_INT 94
1635: PPUSH
1636: LD_INT 145
1638: PPUSH
1639: LD_INT 10
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: CALL_OW 50
// end ;
1649: GO 1569
1651: POP
1652: POP
// end ;
1653: LD_VAR 0 1
1657: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1658: LD_EXP 28
1662: PPUSH
1663: LD_INT 101
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 72
1677: IFFALSE 1743
1679: GO 1681
1681: DISABLE
1682: LD_INT 0
1684: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1685: LD_ADDR_VAR 0 1
1689: PUSH
1690: LD_EXP 28
1694: PPUSH
1695: LD_INT 101
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 72
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1714: LD_EXP 28
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 250
1728: PPUSH
1729: LD_VAR 0 1
1733: PPUSH
1734: CALL_OW 251
1738: PPUSH
1739: CALL_OW 114
// end ;
1743: PPOPN 1
1745: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1746: LD_INT 50
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: CALL 2122 0 2
1756: PUSH
1757: LD_INT 40
1759: LESS
1760: IFFALSE 1957
1762: GO 1764
1764: DISABLE
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// begin uc_side := 4 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
// uc_nation := nation_american ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// hc_importance := 0 ;
1785: LD_ADDR_OWVAR 32
1789: PUSH
1790: LD_INT 0
1792: ST_TO_ADDR
// for i = 1 to 7 do
1793: LD_ADDR_VAR 0 1
1797: PUSH
1798: DOUBLE
1799: LD_INT 1
1801: DEC
1802: ST_TO_ADDR
1803: LD_INT 7
1805: PUSH
1806: FOR_TO
1807: IFFALSE 1871
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1809: LD_INT 0
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 3
1817: PPUSH
1818: CALL_OW 12
1822: PPUSH
1823: LD_EXP 26
1827: PPUSH
1828: CALL_OW 380
// un := CreateHuman ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 7
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetLives ( un , 10 ) ;
1857: LD_VAR 0 2
1861: PPUSH
1862: LD_INT 10
1864: PPUSH
1865: CALL_OW 234
// end ;
1869: GO 1806
1871: POP
1872: POP
// for i = 1 to 5 do
1873: LD_ADDR_VAR 0 1
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 5
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1955
// begin PrepareHuman ( false , 4 , us_skill ) ;
1889: LD_INT 0
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_EXP 26
1899: PPUSH
1900: CALL_OW 380
// SetDir ( un , 1 ) ;
1904: LD_VAR 0 2
1908: PPUSH
1909: LD_INT 1
1911: PPUSH
1912: CALL_OW 233
// un := CreateHuman ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 44
1925: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 22
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// SetLives ( un , 10 ) ;
1941: LD_VAR 0 2
1945: PPUSH
1946: LD_INT 10
1948: PPUSH
1949: CALL_OW 234
// end ;
1953: GO 1886
1955: POP
1956: POP
// end ; end_of_file
1957: PPOPN 2
1959: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
1960: LD_INT 0
1962: PPUSH
1963: PPUSH
1964: PPUSH
// for i = 1 to n do
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: DOUBLE
1971: LD_INT 1
1973: DEC
1974: ST_TO_ADDR
1975: LD_VAR 0 1
1979: PUSH
1980: FOR_TO
1981: IFFALSE 2115
// begin uc_side := 0 ;
1983: LD_ADDR_OWVAR 20
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// uc_nation := 0 ;
1991: LD_ADDR_OWVAR 21
1995: PUSH
1996: LD_INT 0
1998: ST_TO_ADDR
// hc_class := class_apeman ;
1999: LD_ADDR_OWVAR 28
2003: PUSH
2004: LD_INT 12
2006: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2007: LD_ADDR_OWVAR 31
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: ST_TO_ADDR
// hc_name :=  ;
2030: LD_ADDR_OWVAR 26
2034: PUSH
2035: LD_STRING 
2037: ST_TO_ADDR
// hc_gallery :=  ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING 
2045: ST_TO_ADDR
// hc_importance := 0 ;
2046: LD_ADDR_OWVAR 32
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// un := CreateHuman ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: CALL_OW 44
2063: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2064: LD_VAR 0 3
2068: PPUSH
2069: LD_INT 19
2071: PUSH
2072: LD_INT 20
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 1
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: CALL_OW 12
2089: ARRAY
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2098: LD_INT 1155
2100: PPUSH
2101: LD_INT 5355
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: CALL_OW 67
// end ;
2113: GO 1980
2115: POP
2116: POP
// end ;
2117: LD_VAR 0 2
2121: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 22
2134: PUSH
2135: LD_VAR 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PPUSH
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL_OW 74
2158: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 4
2173: PPUSH
2174: CALL_OW 296
2178: ST_TO_ADDR
// if dist >= 9999 then
2179: LD_VAR 0 5
2183: PUSH
2184: LD_INT 9999
2186: GREATEREQUAL
2187: IFFALSE 2200
// result := - 1 else
2189: LD_ADDR_VAR 0 3
2193: PUSH
2194: LD_INT 1
2196: NEG
2197: ST_TO_ADDR
2198: GO 2210
// result := dist ;
2200: LD_ADDR_VAR 0 3
2204: PUSH
2205: LD_VAR 0 5
2209: ST_TO_ADDR
// end ;
2210: LD_VAR 0 3
2214: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2215: LD_INT 0
2217: PPUSH
2218: PPUSH
2219: PPUSH
2220: PPUSH
// tmp := 9999 ;
2221: LD_ADDR_VAR 0 5
2225: PUSH
2226: LD_INT 9999
2228: ST_TO_ADDR
// for i = 1 to plist do
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_VAR 0 1
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2319
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2247: LD_VAR 0 1
2251: PUSH
2252: LD_VAR 0 4
2256: ARRAY
2257: PPUSH
2258: LD_VAR 0 2
2262: PPUSH
2263: CALL 2122 0 2
2267: PUSH
2268: LD_VAR 0 5
2272: LESS
2273: IFFALSE 2317
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2275: LD_ADDR_VAR 0 5
2279: PUSH
2280: LD_VAR 0 1
2284: PUSH
2285: LD_VAR 0 4
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: CALL 2122 0 2
2300: ST_TO_ADDR
// unit := plist [ i ] ;
2301: LD_ADDR_VAR 0 6
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 4
2315: ARRAY
2316: ST_TO_ADDR
// end ;
2317: GO 2244
2319: POP
2320: POP
// result := unit ;
2321: LD_ADDR_VAR 0 3
2325: PUSH
2326: LD_VAR 0 6
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2336: LD_INT 0
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
2342: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: LD_INT 1000
2350: PUSH
2351: LD_INT 2500
2353: PUSH
2354: LD_INT 5000
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_INT 1
2380: NEG
2381: PUSH
2382: LD_INT 22
2384: PUSH
2385: LD_OWVAR 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 21
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PPUSH
2408: CALL_OW 69
2412: MUL
2413: PUSH
2414: LD_INT 30
2416: MUL
2417: PLUS
2418: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PUSH
2429: LD_EXP 17
2433: PUSH
2434: LD_INT 10
2436: MUL
2437: PLUS
2438: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2439: LD_ADDR_VAR 0 2
2443: PUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 1
2451: NEG
2452: PUSH
2453: LD_EXP 17
2457: MUL
2458: PUSH
2459: LD_INT 20
2461: MUL
2462: PLUS
2463: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: LD_VAR 0 2
2473: PUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_OWVAR 1
2482: PUSH
2483: LD_INT 35
2485: DIVREAL
2486: PUSH
2487: LD_INT 60
2489: DIVREAL
2490: MUL
2491: PUSH
2492: LD_INT 25
2494: MUL
2495: PLUS
2496: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 15
2514: MUL
2515: PLUS
2516: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: LD_VAR 0 2
2526: PUSH
2527: LD_INT 1
2529: NEG
2530: PUSH
2531: LD_EXP 20
2535: MUL
2536: PUSH
2537: LD_INT 1000
2539: MUL
2540: PLUS
2541: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_EXP 18
2556: PUSH
2557: LD_INT 5
2559: MUL
2560: PLUS
2561: ST_TO_ADDR
// result := points ;
2562: LD_ADDR_VAR 0 1
2566: PUSH
2567: LD_VAR 0 2
2571: ST_TO_ADDR
// end ; end_of_file
2572: LD_VAR 0 1
2576: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 35452 0 1
// if un = ru_cargo then
2586: LD_VAR 0 1
2590: PUSH
2591: LD_EXP 31
2595: EQUAL
2596: IFFALSE 2606
// ru_cargo := 0 ;
2598: LD_ADDR_EXP 31
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2606: LD_VAR 0 1
2610: PPUSH
2611: CALL_OW 255
2615: PUSH
2616: LD_OWVAR 2
2620: EQUAL
2621: IFFALSE 2637
// dead_counter := dead_counter + 1 ;
2623: LD_ADDR_EXP 16
2627: PUSH
2628: LD_EXP 16
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2637: LD_VAR 0 1
2641: PPUSH
2642: CALL_OW 255
2646: PUSH
2647: LD_INT 81
2649: PUSH
2650: LD_OWVAR 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 69
2663: IN
2664: IFFALSE 2680
// kill_counter := kill_counter + 1 ;
2666: LD_ADDR_EXP 17
2670: PUSH
2671: LD_EXP 17
2675: PUSH
2676: LD_INT 1
2678: PLUS
2679: ST_TO_ADDR
// if un = player_commander then
2680: LD_VAR 0 1
2684: PUSH
2685: LD_EXP 11
2689: EQUAL
2690: IFFALSE 2699
// YouLost ( vulcano-lost ) ;
2692: LD_STRING vulcano-lost
2694: PPUSH
2695: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2699: LD_VAR 0 1
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 21
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: IN
2733: IFFALSE 2849
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2735: LD_VAR 0 1
2739: PPUSH
2740: CALL_OW 266
2744: PUSH
2745: LD_INT 33
2747: EQUAL
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 266
2758: PUSH
2759: LD_INT 28
2761: EQUAL
2762: OR
2763: IFFALSE 2849
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2765: LD_ADDR_EXP 32
2769: PUSH
2770: LD_EXP 32
2774: PUSH
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: ADD
2785: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2786: LD_ADDR_EXP 32
2790: PUSH
2791: LD_EXP 32
2795: PUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 250
2805: ADD
2806: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 251
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 254
2847: ADD
2848: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2849: LD_VAR 0 1
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 69
2882: IN
2883: IFFALSE 3027
// begin if GetBType ( un ) = b_barracks then
2885: LD_VAR 0 1
2889: PPUSH
2890: CALL_OW 266
2894: PUSH
2895: LD_INT 5
2897: EQUAL
2898: IFFALSE 2916
// legion_blist := legion_blist ^ b_armoury else
2900: LD_ADDR_EXP 40
2904: PUSH
2905: LD_EXP 40
2909: PUSH
2910: LD_INT 4
2912: ADD
2913: ST_TO_ADDR
2914: GO 2964
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2916: LD_VAR 0 1
2920: PPUSH
2921: CALL_OW 266
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 6
2931: PUSH
2932: LD_INT 8
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: IN
2940: NOT
2941: IFFALSE 2964
// legion_blist := legion_blist ^ GetBType ( un ) ;
2943: LD_ADDR_EXP 40
2947: PUSH
2948: LD_EXP 40
2952: PUSH
2953: LD_VAR 0 1
2957: PPUSH
2958: CALL_OW 266
2962: ADD
2963: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2964: LD_ADDR_EXP 40
2968: PUSH
2969: LD_EXP 40
2973: PUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 250
2983: ADD
2984: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 251
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 254
3025: ADD
3026: ST_TO_ADDR
// end ; if un in legion_force then
3027: LD_VAR 0 1
3031: PUSH
3032: LD_EXP 37
3036: IN
3037: IFFALSE 3055
// legion_force := legion_force diff un ;
3039: LD_ADDR_EXP 37
3043: PUSH
3044: LD_EXP 37
3048: PUSH
3049: LD_VAR 0 1
3053: DIFF
3054: ST_TO_ADDR
// if un in ru_force then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_EXP 29
3064: IN
3065: IFFALSE 3083
// ru_force := ru_force diff un ;
3067: LD_ADDR_EXP 29
3071: PUSH
3072: LD_EXP 29
3076: PUSH
3077: LD_VAR 0 1
3081: DIFF
3082: ST_TO_ADDR
// if un in al_force then
3083: LD_VAR 0 1
3087: PUSH
3088: LD_EXP 44
3092: IN
3093: IFFALSE 3111
// al_force := al_force diff un ;
3095: LD_ADDR_EXP 44
3099: PUSH
3100: LD_EXP 44
3104: PUSH
3105: LD_VAR 0 1
3109: DIFF
3110: ST_TO_ADDR
// end ;
3111: PPOPN 1
3113: END
// on BuildingComplete ( b ) do var i ;
3114: LD_INT 0
3116: PPUSH
// begin if GetSide ( b ) = 8 then
3117: LD_VAR 0 1
3121: PPUSH
3122: CALL_OW 255
3126: PUSH
3127: LD_INT 8
3129: EQUAL
3130: IFFALSE 3170
// for i = 1 to 4 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 4
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3168
// legion_blist := Delete ( legion_blist , 1 ) ;
3148: LD_ADDR_EXP 40
3152: PUSH
3153: LD_EXP 40
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: CALL_OW 3
3165: ST_TO_ADDR
3166: GO 3145
3168: POP
3169: POP
// if GetSide ( b ) = 3 then
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 255
3179: PUSH
3180: LD_INT 3
3182: EQUAL
3183: IFFALSE 3223
// for i = 1 to 4 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 4
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3221
// ru_blist := Delete ( ru_blist , 1 ) ;
3201: LD_ADDR_EXP 32
3205: PUSH
3206: LD_EXP 32
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 3
3218: ST_TO_ADDR
3219: GO 3198
3221: POP
3222: POP
// end ;
3223: PPOPN 2
3225: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3226: LD_VAR 0 1
3230: PPUSH
3231: LD_VAR 0 2
3235: PPUSH
3236: CALL 35572 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_INT 51
3252: PUSH
3253: LD_INT 48
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: IN
3260: NOT
3261: IFFALSE 3309
// begin if GetSide ( veh ) = 3 then
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 255
3272: PUSH
3273: LD_INT 3
3275: EQUAL
3276: IFFALSE 3309
// begin ComMoveXY ( veh , 149 , 8 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 149
3285: PPUSH
3286: LD_INT 8
3288: PPUSH
3289: CALL_OW 111
// ru_force := ru_force ^ veh ;
3293: LD_ADDR_EXP 29
3297: PUSH
3298: LD_EXP 29
3302: PUSH
3303: LD_VAR 0 1
3307: ADD
3308: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 264
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: LD_INT 31
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: IN
3329: NOT
3330: IFFALSE 3363
// begin if GetSide ( veh ) = 8 then
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 8
3344: EQUAL
3345: IFFALSE 3363
// legion_force := legion_force ^ veh ;
3347: LD_ADDR_EXP 37
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 1
3361: ADD
3362: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 255
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: PUSH
3377: LD_EXP 31
3381: NOT
3382: AND
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 264
3393: PUSH
3394: LD_INT 51
3396: EQUAL
3397: AND
3398: IFFALSE 3410
// ru_cargo := veh ;
3400: LD_ADDR_EXP 31
3404: PUSH
3405: LD_VAR 0 1
3409: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3410: LD_VAR 0 1
3414: PPUSH
3415: CALL_OW 255
3419: PUSH
3420: LD_INT 7
3422: EQUAL
3423: PUSH
3424: LD_OWVAR 2
3428: PUSH
3429: LD_INT 7
3431: NONEQUAL
3432: AND
3433: IFFALSE 3451
// al_force := al_force ^ veh ;
3435: LD_ADDR_EXP 44
3439: PUSH
3440: LD_EXP 44
3444: PUSH
3445: LD_VAR 0 1
3449: ADD
3450: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 255
3460: PUSH
3461: LD_OWVAR 2
3465: EQUAL
3466: IFFALSE 3482
// veh_counter := veh_counter + 1 ;
3468: LD_ADDR_EXP 18
3472: PUSH
3473: LD_EXP 18
3477: PUSH
3478: LD_INT 1
3480: PLUS
3481: ST_TO_ADDR
// end ;
3482: PPOPN 2
3484: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3485: LD_VAR 0 1
3489: PPUSH
3490: CALL_OW 255
3494: PUSH
3495: LD_OWVAR 2
3499: NONEQUAL
3500: IFFALSE 3516
// sib_contamin_counter := sib_contamin_counter + 1 ;
3502: LD_ADDR_EXP 20
3506: PUSH
3507: LD_EXP 20
3511: PUSH
3512: LD_INT 1
3514: PLUS
3515: ST_TO_ADDR
// end ;
3516: PPOPN 3
3518: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 255
3528: PUSH
3529: LD_OWVAR 2
3533: EQUAL
3534: IFFALSE 3550
// tech_counter := tech_counter + 1 ;
3536: LD_ADDR_EXP 19
3540: PUSH
3541: LD_EXP 19
3545: PUSH
3546: LD_INT 1
3548: PLUS
3549: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3550: LD_VAR 0 1
3554: PUSH
3555: LD_INT 53
3557: EQUAL
3558: PUSH
3559: LD_OWVAR 2
3563: PUSH
3564: LD_INT 1
3566: EQUAL
3567: AND
3568: IFFALSE 3583
// SetTech ( 80 , 1 , state_researched ) ;
3570: LD_INT 80
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 322
// end ;
3583: PPOPN 2
3585: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 255
3595: PUSH
3596: LD_INT 8
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 1
3604: PPUSH
3605: CALL_OW 263
3609: PUSH
3610: LD_INT 2
3612: EQUAL
3613: AND
3614: IFFALSE 3625
// ComAutodestruct ( un ) ;
3616: LD_VAR 0 1
3620: PPUSH
3621: CALL 72722 0 1
// end ;
3625: PPOPN 1
3627: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3628: LD_VAR 0 1
3632: PUSH
3633: LD_EXP 21
3637: DOUBLE
3638: EQUAL
3639: IFTRUE 3643
3641: GO 3650
3643: POP
// LegionAttack ( ) ; event_alliance_attack :
3644: CALL 11363 0 0
3648: GO 3685
3650: LD_EXP 23
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3667
3660: POP
// AllianceAttack ( ) ; event_russian_attack :
3661: CALL 18864 0 0
3665: GO 3685
3667: LD_EXP 22
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3684
3677: POP
// RussianAttack ( ) ; end ;
3678: CALL 7589 0 0
3682: GO 3685
3684: POP
// end ;
3685: PPOPN 1
3687: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3688: LD_INT 25
3690: PUSH
3691: LD_INT 12
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 69
3702: PUSH
3703: LD_INT 9
3705: LESS
3706: PUSH
3707: LD_OWVAR 1
3711: PUSH
3712: LD_INT 105000
3714: LESS
3715: AND
3716: IFFALSE 3749
3718: GO 3720
3720: DISABLE
// begin enable ;
3721: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3722: LD_INT 8
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: LD_INT 0
3742: PLUS
3743: MINUS
3744: PPUSH
3745: CALL 1960 0 1
// end ;
3749: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: LD_VAR 0 3
3764: PPUSH
3765: CALL 35548 0 3
// end ;
3769: PPOPN 3
3771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL 35556 0 1
// end ; end_of_file
3781: PPOPN 1
3783: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// uc_side := 3 ;
3797: LD_ADDR_OWVAR 20
3801: PUSH
3802: LD_INT 3
3804: ST_TO_ADDR
// uc_nation := nation_russian ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 3
3812: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 1
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3851: LD_ADDR_VAR 0 5
3855: PUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 30
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PPUSH
3880: CALL_OW 69
3884: PUSH
3885: LD_INT 1
3887: ARRAY
3888: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3889: LD_ADDR_VAR 0 6
3893: PUSH
3894: LD_INT 22
3896: PUSH
3897: LD_INT 3
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 34
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: PUSH
3923: LD_INT 1
3925: ARRAY
3926: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3927: LD_ADDR_VAR 0 8
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 30
3944: PUSH
3945: LD_INT 33
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 5
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 1
3997: ARRAY
3998: ST_TO_ADDR
// ru_blist := [ ] ;
3999: LD_ADDR_EXP 32
4003: PUSH
4004: EMPTY
4005: ST_TO_ADDR
// ru_vlist := [ ] ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: EMPTY
4012: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4013: LD_ADDR_EXP 36
4017: PUSH
4018: LD_INT 183
4020: PUSH
4021: LD_INT 62
4023: PUSH
4024: LD_INT 147
4026: PUSH
4027: LD_INT 44
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4036: LD_INT 30
4038: PUSH
4039: LD_INT 34
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 69
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_EXP 36
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 36
4068: PUSH
4069: LD_INT 2
4071: ARRAY
4072: PPUSH
4073: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4077: LD_ADDR_EXP 34
4081: PUSH
4082: LD_INT 4
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 6
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: CALL_OW 274
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3000
4117: PPUSH
4118: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4122: LD_VAR 0 4
4126: PPUSH
4127: CALL_OW 274
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: LD_INT 300
4137: PPUSH
4138: CALL_OW 277
// hc_gallery :=  ;
4142: LD_ADDR_OWVAR 33
4146: PUSH
4147: LD_STRING 
4149: ST_TO_ADDR
// hc_name :=  ;
4150: LD_ADDR_OWVAR 26
4154: PUSH
4155: LD_STRING 
4157: ST_TO_ADDR
// hc_importance := 0 ;
4158: LD_ADDR_OWVAR 32
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4166: LD_ADDR_EXP 30
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: LD_INT 7
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_OWVAR 67
4189: ARRAY
4190: ST_TO_ADDR
// for i = 1 to 6 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 6
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4363
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 9
4212: PPUSH
4213: LD_EXP 30
4217: PPUSH
4218: CALL_OW 380
// un := CreateHuman ;
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: CALL_OW 44
4231: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4232: LD_VAR 0 3
4236: PPUSH
4237: LD_VAR 0 7
4241: PPUSH
4242: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4246: LD_INT 0
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_EXP 30
4256: PPUSH
4257: CALL_OW 380
// un := CreateHuman ;
4261: LD_ADDR_VAR 0 3
4265: PUSH
4266: CALL_OW 44
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 24
4278: PPUSH
4279: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 3
4288: PPUSH
4289: LD_EXP 30
4293: PPUSH
4294: CALL_OW 380
// un := CreateHuman ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_VAR 0 5
4317: PPUSH
4318: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_EXP 30
4332: PPUSH
4333: CALL_OW 380
// un := CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: CALL_OW 52
// end ;
4361: GO 4204
4363: POP
4364: POP
// if Difficulty > 1 then
4365: LD_OWVAR 67
4369: PUSH
4370: LD_INT 1
4372: GREATER
4373: IFFALSE 4406
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 3
4382: PPUSH
4383: LD_INT 160
4385: PPUSH
4386: LD_INT 36
4388: PPUSH
4389: LD_INT 3
4391: PPUSH
4392: CALL 80670 0 4
4396: ST_TO_ADDR
// ComHold ( un ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: CALL_OW 140
// end ; russian_prepared := true ;
4406: LD_ADDR_EXP 2
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4414: LD_VAR 0 5
4418: PPUSH
4419: LD_INT 21
4421: PPUSH
4422: LD_INT 3
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 51
4430: PPUSH
4431: CALL_OW 125
// end ;
4435: LD_VAR 0 1
4439: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4440: LD_INT 22
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: PUSH
4455: LD_INT 0
4457: GREATER
4458: PUSH
4459: LD_EXP 2
4463: AND
4464: IFFALSE 6614
4466: GO 4468
4468: DISABLE
4469: LD_INT 0
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
// begin enable ;
4487: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 69
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 30
4581: PUSH
4582: LD_INT 34
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PUSH
4598: LD_INT 1
4600: ARRAY
4601: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 33
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 69
4635: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4636: LD_ADDR_VAR 0 8
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 5
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: PUSH
4670: LD_INT 1
4672: ARRAY
4673: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4674: LD_ADDR_VAR 0 5
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 3
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4708: LD_ADDR_VAR 0 6
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4742: LD_ADDR_VAR 0 7
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PPUSH
4771: CALL_OW 69
4775: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4776: LD_ADDR_VAR 0 9
4780: PUSH
4781: LD_VAR 0 7
4785: PPUSH
4786: LD_INT 25
4788: PUSH
4789: LD_INT 2
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4801: LD_ADDR_VAR 0 10
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: LD_INT 25
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 72
4825: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4826: LD_ADDR_VAR 0 11
4830: PUSH
4831: LD_VAR 0 7
4835: PPUSH
4836: LD_INT 25
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 72
4850: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 34
4863: PUSH
4864: LD_INT 51
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 31
4888: PUSH
4889: LD_INT 0
4891: EQUAL
4892: AND
4893: IFFALSE 4933
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4895: LD_ADDR_EXP 31
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 34
4912: PUSH
4913: LD_INT 51
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: ST_TO_ADDR
// if ru_cargo then
4933: LD_EXP 31
4937: IFFALSE 5277
// begin if IsInArea ( ru_cargo , ru_base ) then
4939: LD_EXP 31
4943: PPUSH
4944: LD_INT 9
4946: PPUSH
4947: CALL_OW 308
4951: IFFALSE 5030
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4953: LD_EXP 31
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 289
4965: PUSH
4966: LD_INT 0
4968: EQUAL
4969: IFFALSE 4987
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4971: LD_EXP 31
4975: PPUSH
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 120
4985: GO 5028
// if not HasTask ( ru_cargo ) then
4987: LD_EXP 31
4991: PPUSH
4992: CALL_OW 314
4996: NOT
4997: IFFALSE 5028
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4999: LD_EXP 31
5003: PPUSH
5004: LD_VAR 0 1
5008: PPUSH
5009: CALL_OW 250
5013: PPUSH
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 251
5023: PPUSH
5024: CALL_OW 111
// end else
5028: GO 5277
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5030: LD_EXP 31
5034: PPUSH
5035: CALL_OW 314
5039: NOT
5040: PUSH
5041: LD_EXP 31
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 289
5053: PUSH
5054: LD_INT 100
5056: LESS
5057: AND
5058: PUSH
5059: LD_EXP 31
5063: PPUSH
5064: LD_INT 10
5066: PPUSH
5067: CALL_OW 308
5071: NOT
5072: AND
5073: IFFALSE 5150
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5075: LD_ADDR_VAR 0 15
5079: PUSH
5080: LD_INT 11
5082: PPUSH
5083: CALL_OW 435
5087: ST_TO_ADDR
// if cr then
5088: LD_VAR 0 15
5092: IFFALSE 5123
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5094: LD_EXP 31
5098: PPUSH
5099: LD_VAR 0 15
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 15
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: CALL_OW 117
5121: GO 5150
// if not IsInArea ( ru_cargo , ru_crates ) then
5123: LD_EXP 31
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 308
5135: NOT
5136: IFFALSE 5150
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5138: LD_EXP 31
5142: PPUSH
5143: LD_INT 11
5145: PPUSH
5146: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5150: LD_EXP 31
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: PUSH
5161: LD_EXP 31
5165: PPUSH
5166: LD_INT 10
5168: PPUSH
5169: CALL_OW 308
5173: NOT
5174: AND
5175: PUSH
5176: LD_EXP 31
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 289
5188: PUSH
5189: LD_INT 100
5191: EQUAL
5192: PUSH
5193: LD_OWVAR 2
5197: PPUSH
5198: LD_EXP 31
5202: PPUSH
5203: CALL_OW 292
5207: OR
5208: AND
5209: IFFALSE 5223
// ComMoveToArea ( ru_cargo , cargoa ) ;
5211: LD_EXP 31
5215: PPUSH
5216: LD_INT 10
5218: PPUSH
5219: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5223: LD_EXP 31
5227: PPUSH
5228: LD_INT 10
5230: PPUSH
5231: CALL_OW 308
5235: PUSH
5236: LD_VAR 0 8
5240: AND
5241: IFFALSE 5277
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5243: LD_VAR 0 7
5247: PPUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 9
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 72
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_INT 139
5269: PPUSH
5270: LD_INT 24
5272: PPUSH
5273: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5277: LD_EXP 31
5281: PUSH
5282: LD_INT 0
5284: EQUAL
5285: PUSH
5286: LD_VAR 0 2
5290: AND
5291: PUSH
5292: LD_VAR 0 2
5296: PPUSH
5297: CALL_OW 461
5301: PUSH
5302: LD_INT 2
5304: EQUAL
5305: AND
5306: IFFALSE 5329
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 21
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 3
5321: PPUSH
5322: LD_INT 51
5324: PPUSH
5325: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_EXP 33
5338: PUSH
5339: LD_INT 0
5341: GREATER
5342: AND
5343: IFFALSE 5443
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 461
5354: PUSH
5355: LD_INT 2
5357: EQUAL
5358: IFFALSE 5443
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_EXP 33
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: LD_EXP 33
5387: PUSH
5388: LD_INT 3
5390: ARRAY
5391: PPUSH
5392: LD_EXP 33
5396: PUSH
5397: LD_INT 4
5399: ARRAY
5400: PPUSH
5401: CALL_OW 125
// for i = 1 to 4 do
5405: LD_ADDR_VAR 0 12
5409: PUSH
5410: DOUBLE
5411: LD_INT 1
5413: DEC
5414: ST_TO_ADDR
5415: LD_INT 4
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5441
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5421: LD_ADDR_EXP 33
5425: PUSH
5426: LD_EXP 33
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 3
5438: ST_TO_ADDR
5439: GO 5418
5441: POP
5442: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5443: LD_INT 24
5445: PPUSH
5446: CALL_OW 461
5450: PUSH
5451: LD_INT 2
5453: EQUAL
5454: PUSH
5455: LD_EXP 4
5459: AND
5460: IFFALSE 5488
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5462: LD_INT 25
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: CALL_OW 321
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: IFFALSE 5488
// ComResearch ( ru_lab , tech_sibfiss ) ;
5478: LD_INT 24
5480: PPUSH
5481: LD_INT 25
5483: PPUSH
5484: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5488: LD_INT 25
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: CALL_OW 321
5498: PUSH
5499: LD_INT 2
5501: EQUAL
5502: PUSH
5503: LD_OWVAR 1
5507: PUSH
5508: LD_INT 10500
5510: MOD
5511: PUSH
5512: LD_INT 0
5514: EQUAL
5515: AND
5516: IFFALSE 5554
// if BuildingStatus ( ru_factory ) = bs_idle then
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 461
5527: PUSH
5528: LD_INT 2
5530: EQUAL
5531: IFFALSE 5554
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5533: LD_VAR 0 2
5537: PPUSH
5538: LD_INT 23
5540: PPUSH
5541: LD_INT 3
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: LD_INT 48
5549: PPUSH
5550: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 34
5566: PUSH
5567: LD_INT 48
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 69
5582: PUSH
5583: LD_INT 0
5585: GREATER
5586: IFFALSE 5960
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5588: LD_ADDR_VAR 0 16
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 3
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 34
5605: PUSH
5606: LD_INT 48
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5626: LD_VAR 0 16
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: CALL_OW 308
5638: IFFALSE 5656
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5640: LD_VAR 0 16
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: CALL_OW 120
5654: GO 5960
// if not HasTask ( sib_bomb ) then
5656: LD_VAR 0 16
5660: PPUSH
5661: CALL_OW 314
5665: NOT
5666: IFFALSE 5960
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5668: LD_INT 22
5670: PUSH
5671: LD_OWVAR 2
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 30
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PPUSH
5703: CALL_OW 256
5707: PUSH
5708: LD_INT 250
5710: GREATER
5711: IFFALSE 5804
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5713: LD_VAR 0 16
5717: PPUSH
5718: LD_INT 22
5720: PUSH
5721: LD_OWVAR 2
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 30
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PPUSH
5753: CALL_OW 250
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 251
5797: PPUSH
5798: CALL_OW 116
5802: GO 5960
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5804: LD_INT 22
5806: PUSH
5807: LD_OWVAR 2
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 21
5818: PUSH
5819: LD_INT 3
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: PUSH
5835: LD_INT 0
5837: GREATER
5838: IFFALSE 5931
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5840: LD_VAR 0 16
5844: PPUSH
5845: LD_INT 22
5847: PUSH
5848: LD_OWVAR 2
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 21
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 69
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: CALL_OW 250
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 251
5924: PPUSH
5925: CALL_OW 116
5929: GO 5960
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5931: LD_VAR 0 16
5935: PPUSH
5936: LD_EXP 11
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 11
5950: PPUSH
5951: CALL_OW 251
5955: PPUSH
5956: CALL_OW 116
// end ; if ru_can_attack then
5960: LD_EXP 3
5964: IFFALSE 6112
// if ru_time > 0 0$00 then
5966: LD_EXP 35
5970: PUSH
5971: LD_INT 0
5973: GREATER
5974: IFFALSE 5992
// ru_time := ru_time - 0 0$03 else
5976: LD_ADDR_EXP 35
5980: PUSH
5981: LD_EXP 35
5985: PUSH
5986: LD_INT 105
5988: MINUS
5989: ST_TO_ADDR
5990: GO 6112
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5992: LD_ADDR_EXP 35
5996: PUSH
5997: LD_INT 20265
5999: PPUSH
6000: LD_INT 30765
6002: PPUSH
6003: CALL_OW 12
6007: ST_TO_ADDR
// for i = 1 to ru_amount do
6008: LD_ADDR_VAR 0 12
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_EXP 34
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6110
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6026: LD_ADDR_EXP 33
6030: PUSH
6031: LD_EXP 33
6035: PUSH
6036: LD_INT 23
6038: ADD
6039: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6040: LD_ADDR_EXP 33
6044: PUSH
6045: LD_EXP 33
6049: PUSH
6050: LD_INT 3
6052: ADD
6053: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6054: LD_ADDR_EXP 33
6058: PUSH
6059: LD_EXP 33
6063: PUSH
6064: LD_INT 3
6066: ADD
6067: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6068: LD_ADDR_EXP 33
6072: PUSH
6073: LD_EXP 33
6077: PUSH
6078: LD_INT 46
6080: PUSH
6081: LD_INT 45
6083: PUSH
6084: LD_INT 47
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 2
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 14
6105: ARRAY
6106: ADD
6107: ST_TO_ADDR
// end ;
6108: GO 6023
6110: POP
6111: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6112: LD_VAR 0 4
6116: PPUSH
6117: LD_INT 35
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 72
6131: PUSH
6132: LD_INT 0
6134: GREATER
6135: IFFALSE 6183
// if BuildingStatus ( ru_factory ) = bs_idle then
6137: LD_VAR 0 2
6141: PPUSH
6142: CALL_OW 461
6146: PUSH
6147: LD_INT 2
6149: EQUAL
6150: IFFALSE 6183
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 47
6178: PPUSH
6179: CALL_OW 148
// if ru_force >= ru_amount then
6183: LD_EXP 29
6187: PUSH
6188: LD_EXP 34
6192: GREATEREQUAL
6193: IFFALSE 6204
// RaiseSailEvent ( event_russian_attack ) ;
6195: LD_EXP 22
6199: PPUSH
6200: CALL_OW 427
// if ru_engs > 0 then
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 0
6211: GREATER
6212: IFFALSE 6614
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6214: LD_VAR 0 5
6218: PPUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: LD_INT 1000
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 0
6243: GREATER
6244: IFFALSE 6399
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6246: LD_ADDR_VAR 0 14
6250: PUSH
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: ST_TO_ADDR
// for i = 1 to ru_engs do
6278: LD_ADDR_VAR 0 12
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_VAR 0 9
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6395
// begin if IsInUnit ( ru_engs [ i ] ) then
6296: LD_VAR 0 9
6300: PUSH
6301: LD_VAR 0 12
6305: ARRAY
6306: PPUSH
6307: CALL_OW 310
6311: IFFALSE 6330
// ComExitBuilding ( ru_engs [ i ] ) else
6313: LD_VAR 0 9
6317: PUSH
6318: LD_VAR 0 12
6322: ARRAY
6323: PPUSH
6324: CALL_OW 122
6328: GO 6393
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6330: LD_VAR 0 9
6334: PUSH
6335: LD_VAR 0 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 314
6345: NOT
6346: PUSH
6347: LD_VAR 0 9
6351: PUSH
6352: LD_VAR 0 12
6356: ARRAY
6357: PPUSH
6358: CALL_OW 256
6362: PUSH
6363: LD_INT 600
6365: GREATER
6366: AND
6367: IFFALSE 6393
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6369: LD_VAR 0 9
6373: PUSH
6374: LD_VAR 0 12
6378: ARRAY
6379: PPUSH
6380: LD_VAR 0 14
6384: PUSH
6385: LD_INT 1
6387: ARRAY
6388: PPUSH
6389: CALL_OW 130
// end ;
6393: GO 6293
6395: POP
6396: POP
// end else
6397: GO 6614
// begin if ru_blist = 0 then
6399: LD_EXP 32
6403: PUSH
6404: LD_INT 0
6406: EQUAL
6407: IFFALSE 6489
// begin for i = 1 to ru_engs do
6409: LD_ADDR_VAR 0 12
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_VAR 0 9
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6485
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6427: LD_VAR 0 9
6431: PUSH
6432: LD_VAR 0 12
6436: ARRAY
6437: PPUSH
6438: CALL_OW 314
6442: NOT
6443: PUSH
6444: LD_VAR 0 9
6448: PUSH
6449: LD_VAR 0 12
6453: ARRAY
6454: PPUSH
6455: CALL_OW 310
6459: NOT
6460: AND
6461: IFFALSE 6483
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6463: LD_VAR 0 9
6467: PUSH
6468: LD_VAR 0 12
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 120
6483: GO 6424
6485: POP
6486: POP
// end else
6487: GO 6614
// begin for i = 1 to ru_engs do
6489: LD_ADDR_VAR 0 12
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_VAR 0 9
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6612
// begin if IsInUnit ( ru_engs [ i ] ) then
6507: LD_VAR 0 9
6511: PUSH
6512: LD_VAR 0 12
6516: ARRAY
6517: PPUSH
6518: CALL_OW 310
6522: IFFALSE 6541
// ComExitBuilding ( ru_engs [ i ] ) else
6524: LD_VAR 0 9
6528: PUSH
6529: LD_VAR 0 12
6533: ARRAY
6534: PPUSH
6535: CALL_OW 122
6539: GO 6610
// if not HasTask ( ru_engs [ i ] ) then
6541: LD_VAR 0 9
6545: PUSH
6546: LD_VAR 0 12
6550: ARRAY
6551: PPUSH
6552: CALL_OW 314
6556: NOT
6557: IFFALSE 6610
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6559: LD_VAR 0 9
6563: PUSH
6564: LD_VAR 0 12
6568: ARRAY
6569: PPUSH
6570: LD_EXP 32
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: LD_EXP 32
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: LD_EXP 32
6592: PUSH
6593: LD_INT 3
6595: ARRAY
6596: PPUSH
6597: LD_EXP 32
6601: PUSH
6602: LD_INT 4
6604: ARRAY
6605: PPUSH
6606: CALL_OW 145
// end ;
6610: GO 6504
6612: POP
6613: POP
// end ; end ; end ; end ;
6614: PPOPN 16
6616: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6617: LD_EXP 2
6621: PUSH
6622: LD_INT 11
6624: PPUSH
6625: CALL_OW 435
6629: PUSH
6630: LD_INT 10
6632: LESS
6633: AND
6634: IFFALSE 6697
6636: GO 6638
6638: DISABLE
// begin enable ;
6639: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: LD_INT 11
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6661: LD_INT 1505
6663: PPUSH
6664: LD_INT 2100
6666: PPUSH
6667: CALL_OW 12
6671: PPUSH
6672: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6676: LD_INT 1
6678: PPUSH
6679: LD_INT 5
6681: PPUSH
6682: CALL_OW 12
6686: PPUSH
6687: LD_INT 11
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 55
// end ;
6697: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6698: LD_EXP 4
6702: NOT
6703: IFFALSE 6818
6705: GO 6707
6707: DISABLE
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
// begin enable ;
6712: ENABLE
// i := Rand ( 0 , 100 ) ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 0
6720: PPUSH
6721: LD_INT 100
6723: PPUSH
6724: CALL_OW 12
6728: ST_TO_ADDR
// case your_side of 1 :
6729: LD_OWVAR 2
6733: PUSH
6734: LD_INT 1
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6753
6742: POP
// tmp := 10 ; 2 :
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_INT 10
6750: ST_TO_ADDR
6751: GO 6792
6753: LD_INT 2
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6772
6761: POP
// tmp := 0 ; 7 :
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
6770: GO 6792
6772: LD_INT 7
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6791
6780: POP
// tmp := 15 ; end ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_INT 15
6788: ST_TO_ADDR
6789: GO 6792
6791: POP
// if i < chance_to_bomb + tmp then
6792: LD_VAR 0 1
6796: PUSH
6797: LD_EXP 5
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: LESS
6808: IFFALSE 6818
// ru_sib_bomb := true ;
6810: LD_ADDR_EXP 4
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// end ;
6818: PPOPN 2
6820: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6821: LD_INT 22
6823: PUSH
6824: LD_OWVAR 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 34
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 69
6851: IFFALSE 6864
6853: GO 6855
6855: DISABLE
// begin ru_sib_bomb := true ;
6856: LD_ADDR_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end ;
6864: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6865: LD_INT 22
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 30
6877: PUSH
6878: LD_INT 34
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: IFFALSE 6992
6895: GO 6897
6897: DISABLE
6898: LD_INT 0
6900: PPUSH
// begin enable ;
6901: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 1
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 12
6927: ARRAY
6928: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6929: LD_INT 22
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 34
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: LD_INT 1
6960: ARRAY
6961: PPUSH
6962: LD_EXP 36
6966: PUSH
6967: LD_VAR 0 1
6971: ARRAY
6972: PPUSH
6973: LD_EXP 36
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 1
6985: PLUS
6986: ARRAY
6987: PPUSH
6988: CALL_OW 243
// end ;
6992: PPOPN 1
6994: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6995: LD_OWVAR 1
6999: PUSH
7000: LD_INT 58800
7002: PUSH
7003: LD_INT 52500
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_OWVAR 67
7014: PUSH
7015: LD_INT 1
7017: MINUS
7018: ARRAY
7019: GREATEREQUAL
7020: PUSH
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: GREATER
7029: AND
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: AND
7046: IFFALSE 7468
7048: GO 7050
7050: DISABLE
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// begin enable ;
7058: ENABLE
// if tick > 60 60$00 then
7059: LD_OWVAR 1
7063: PUSH
7064: LD_INT 126000
7066: GREATER
7067: IFFALSE 7070
// disable ;
7069: DISABLE
// tmp := [ ] ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: EMPTY
7076: ST_TO_ADDR
// for i := 1 to 8 do
7077: LD_ADDR_VAR 0 1
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_INT 8
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7250
// begin uc_side := 6 ;
7093: LD_ADDR_OWVAR 20
7097: PUSH
7098: LD_INT 6
7100: ST_TO_ADDR
// uc_nation := 3 ;
7101: LD_ADDR_OWVAR 21
7105: PUSH
7106: LD_INT 3
7108: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7109: LD_ADDR_OWVAR 37
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 23
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: LD_INT 3
7135: MOD
7136: PUSH
7137: LD_INT 1
7139: PLUS
7140: ARRAY
7141: ST_TO_ADDR
// vc_engine := engine_siberite ;
7142: LD_ADDR_OWVAR 39
7146: PUSH
7147: LD_INT 3
7149: ST_TO_ADDR
// vc_control := control_computer ;
7150: LD_ADDR_OWVAR 38
7154: PUSH
7155: LD_INT 3
7157: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7158: LD_ADDR_OWVAR 40
7162: PUSH
7163: LD_INT 45
7165: PUSH
7166: LD_INT 93
7168: PUSH
7169: LD_INT 47
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: LD_INT 3
7184: MOD
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ARRAY
7190: ST_TO_ADDR
// un := CreateVehicle ;
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: CALL_OW 45
7200: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: CALL 77209 0 2
7247: ST_TO_ADDR
// end ;
7248: GO 7090
7250: POP
7251: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7252: LD_INT 22
7254: PUSH
7255: LD_OWVAR 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 92
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: LD_INT 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_INT 1
7293: GREATER
7294: IFFALSE 7306
// p := 2 else
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_INT 2
7303: ST_TO_ADDR
7304: GO 7314
// p := 1 ;
7306: LD_ADDR_VAR 0 4
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// case p of 1 :
7314: LD_VAR 0 4
7318: PUSH
7319: LD_INT 1
7321: DOUBLE
7322: EQUAL
7323: IFTRUE 7327
7325: GO 7392
7327: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_INT 29
7335: PUSH
7336: LD_INT 29
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 49
7345: PUSH
7346: LD_INT 70
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 49
7355: PUSH
7356: LD_INT 70
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 61
7365: PUSH
7366: LD_INT 110
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 74
7375: PUSH
7376: LD_INT 129
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
7390: GO 7444
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7443
7400: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 23
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 49
7418: PUSH
7419: LD_INT 39
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 52
7428: PUSH
7429: LD_INT 27
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7444
7443: POP
// repeat wait ( 0 0$1 ) ;
7444: LD_INT 35
7446: PPUSH
7447: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7451: LD_VAR 0 3
7455: PPUSH
7456: LD_VAR 0 5
7460: PPUSH
7461: CALL 79813 0 2
7465: NOT
7466: IFFALSE 7444
// end ;
7468: PPOPN 5
7470: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 1
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: IFFALSE 7586
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin enable ;
7507: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 69
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 274
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 6000
7561: PPUSH
7562: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 274
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: LD_INT 600
7581: PPUSH
7582: CALL_OW 276
// end ;
7586: PPOPN 1
7588: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7589: LD_INT 0
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
// units := ru_force ;
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_EXP 29
7606: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7607: LD_ADDR_VAR 0 6
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 30
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: ST_TO_ADDR
// ru_force := [ ] ;
7641: LD_ADDR_EXP 29
7645: PUSH
7646: EMPTY
7647: ST_TO_ADDR
// if not teleport then
7648: LD_VAR 0 6
7652: NOT
7653: IFFALSE 7695
// begin for i in units do
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 3
7664: PUSH
7665: FOR_IN
7666: IFFALSE 7691
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7668: LD_VAR 0 5
7672: PPUSH
7673: LD_INT 150
7675: PPUSH
7676: LD_INT 65
7678: PPUSH
7679: LD_INT 12
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 483
7689: GO 7665
7691: POP
7692: POP
// end else
7693: GO 7790
// begin repeat for i = 1 to units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: DOUBLE
7701: LD_INT 1
7703: DEC
7704: ST_TO_ADDR
7705: LD_VAR 0 3
7709: PUSH
7710: FOR_TO
7711: IFFALSE 7759
// if IsInArea ( units [ i ] , ru_base ) then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_VAR 0 5
7722: ARRAY
7723: PPUSH
7724: LD_INT 9
7726: PPUSH
7727: CALL_OW 308
7731: IFFALSE 7757
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7733: LD_VAR 0 3
7737: PUSH
7738: LD_VAR 0 5
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 6
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: CALL_OW 120
7757: GO 7710
7759: POP
7760: POP
// wait ( 0 0$10 ) ;
7761: LD_INT 350
7763: PPUSH
7764: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7768: LD_VAR 0 3
7772: PPUSH
7773: LD_INT 95
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 72
7787: NOT
7788: IFFALSE 7695
// end ; p := rand ( 1 , 2 ) ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// case p of 1 :
7806: LD_VAR 0 4
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7873
7819: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_INT 159
7827: PUSH
7828: LD_INT 71
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 152
7837: PUSH
7838: LD_INT 99
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 119
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 104
7857: PUSH
7858: LD_INT 127
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 7936
7873: LD_INT 2
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7935
7881: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 36
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 91
7899: PUSH
7900: LD_INT 52
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 53
7909: PUSH
7910: LD_INT 67
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 58
7919: PUSH
7920: LD_INT 107
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 7936
7935: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7936: LD_INT 22
7938: PUSH
7939: LD_INT 7
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_INT 1
7958: GREATER
7959: AND
7960: IFFALSE 7991
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: LD_INT 116
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 91
7979: PUSH
7980: LD_INT 52
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7991: LD_INT 35
7993: PPUSH
7994: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7998: LD_VAR 0 3
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL 79813 0 2
8012: NOT
8013: IFFALSE 7991
// end ; end_of_file
8015: LD_VAR 0 1
8019: RET
// export function RemoveLegion ; var i ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8058
// RemoveUnit ( i ) ;
8047: LD_VAR 0 2
8051: PPUSH
8052: CALL_OW 64
8056: GO 8044
8058: POP
8059: POP
// end ;
8060: LD_VAR 0 1
8064: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8115: LD_ADDR_VAR 0 8
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 8
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8153: LD_ADDR_VAR 0 9
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 6
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 8
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8209: LD_ADDR_VAR 0 10
8213: PUSH
8214: LD_INT 22
8216: PUSH
8217: LD_INT 8
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 69
8242: ST_TO_ADDR
// uc_side := 8 ;
8243: LD_ADDR_OWVAR 20
8247: PUSH
8248: LD_INT 8
8250: ST_TO_ADDR
// uc_nation := nation_arabian ;
8251: LD_ADDR_OWVAR 21
8255: PUSH
8256: LD_INT 2
8258: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8259: LD_ADDR_EXP 38
8263: PUSH
8264: LD_INT 5
8266: PUSH
8267: LD_INT 6
8269: PUSH
8270: LD_INT 7
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: ST_TO_ADDR
// legion_blist := [ ] ;
8284: LD_ADDR_EXP 40
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// legion_vlist := [ ] ;
8291: LD_ADDR_EXP 41
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// legion_force := [ ] ;
8298: LD_ADDR_EXP 37
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// legion_enemy := - 1 ;
8305: LD_ADDR_EXP 42
8309: PUSH
8310: LD_INT 1
8312: NEG
8313: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8314: LD_VAR 0 6
8318: PPUSH
8319: CALL_OW 274
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_INT 10000
8329: PPUSH
8330: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 274
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: LD_INT 1000
8349: PPUSH
8350: CALL_OW 277
// for i = 1 to l_towers do
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_VAR 0 10
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8419
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: LD_EXP 38
8382: PPUSH
8383: CALL_OW 380
// un := CreateHuman ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 10
8406: PUSH
8407: LD_VAR 0 3
8411: ARRAY
8412: PPUSH
8413: CALL_OW 52
// end ;
8417: GO 8369
8419: POP
8420: POP
// for i = 1 to 4 do
8421: LD_ADDR_VAR 0 3
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_INT 4
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8528
// for p = 1 to 2 do
8437: LD_ADDR_VAR 0 7
8441: PUSH
8442: DOUBLE
8443: LD_INT 1
8445: DEC
8446: ST_TO_ADDR
8447: LD_INT 2
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8524
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8453: LD_INT 0
8455: PPUSH
8456: LD_INT 8
8458: PPUSH
8459: LD_EXP 38
8463: PPUSH
8464: CALL_OW 380
// un := CreateHuman ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: CALL_OW 44
8477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: PUSH
8512: LD_VAR 0 7
8516: ARRAY
8517: PPUSH
8518: CALL_OW 52
// end ;
8522: GO 8450
8524: POP
8525: POP
8526: GO 8434
8528: POP
8529: POP
// for i = 1 to 4 do
8530: LD_ADDR_VAR 0 3
8534: PUSH
8535: DOUBLE
8536: LD_INT 1
8538: DEC
8539: ST_TO_ADDR
8540: LD_INT 4
8542: PUSH
8543: FOR_TO
8544: IFFALSE 8587
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8546: LD_INT 0
8548: PPUSH
8549: LD_INT 4
8551: PPUSH
8552: LD_EXP 38
8556: PPUSH
8557: CALL_OW 380
// un := CreateHuman ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: CALL_OW 44
8570: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8571: LD_VAR 0 2
8575: PPUSH
8576: LD_VAR 0 9
8580: PPUSH
8581: CALL_OW 52
// end ;
8585: GO 8543
8587: POP
8588: POP
// for i = 1 to 4 do
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: DOUBLE
8595: LD_INT 1
8597: DEC
8598: ST_TO_ADDR
8599: LD_INT 4
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8646
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: LD_EXP 38
8615: PPUSH
8616: CALL_OW 380
// un := CreateHuman ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: CALL_OW 44
8629: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: LD_VAR 0 8
8639: PPUSH
8640: CALL_OW 52
// end ;
8644: GO 8602
8646: POP
8647: POP
// for i = 1 to 3 do
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_INT 3
8660: PUSH
8661: FOR_TO
8662: IFFALSE 8705
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8664: LD_INT 0
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: LD_EXP 38
8674: PPUSH
8675: CALL_OW 380
// un := CreateHuman ;
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: CALL_OW 44
8688: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 6
8698: PPUSH
8699: CALL_OW 52
// end ;
8703: GO 8661
8705: POP
8706: POP
// for i = 1 to 3 do
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: DOUBLE
8713: LD_INT 1
8715: DEC
8716: ST_TO_ADDR
8717: LD_INT 3
8719: PUSH
8720: FOR_TO
8721: IFFALSE 8831
// begin vc_chassis := ar_half_tracked ;
8723: LD_ADDR_OWVAR 37
8727: PUSH
8728: LD_INT 14
8730: ST_TO_ADDR
// vc_engine := engine_siberite ;
8731: LD_ADDR_OWVAR 39
8735: PUSH
8736: LD_INT 3
8738: ST_TO_ADDR
// vc_control := control_manual ;
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_INT 1
8746: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8747: LD_ADDR_OWVAR 40
8751: PUSH
8752: LD_INT 31
8754: ST_TO_ADDR
// veh := CreateVehicle ;
8755: LD_ADDR_VAR 0 5
8759: PUSH
8760: CALL_OW 45
8764: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 212
8772: PPUSH
8773: LD_INT 135
8775: PPUSH
8776: LD_INT 5
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8786: LD_INT 0
8788: PPUSH
8789: LD_INT 3
8791: PPUSH
8792: LD_EXP 38
8796: PUSH
8797: LD_INT 1
8799: PLUS
8800: PPUSH
8801: CALL_OW 380
// un := CreateHuman ;
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8815: LD_VAR 0 2
8819: PPUSH
8820: LD_VAR 0 5
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8720
8831: POP
8832: POP
// PrepareSoldier ( false , 8 ) ;
8833: LD_INT 0
8835: PPUSH
8836: LD_INT 8
8838: PPUSH
8839: CALL_OW 381
// hc_class := class_sniper ;
8843: LD_ADDR_OWVAR 28
8847: PUSH
8848: LD_INT 5
8850: ST_TO_ADDR
// un := CreateHuman ;
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: CALL_OW 44
8860: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 4
8868: PPUSH
8869: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 136
8880: PPUSH
8881: LD_INT 92
8883: PPUSH
8884: CALL_OW 428
8888: PPUSH
8889: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8893: LD_INT 198
8895: PPUSH
8896: LD_INT 94
8898: PPUSH
8899: LD_INT 8
8901: PPUSH
8902: LD_INT 10
8904: PPUSH
8905: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8909: LD_INT 167
8911: PPUSH
8912: LD_INT 130
8914: PPUSH
8915: LD_INT 8
8917: PPUSH
8918: LD_INT 10
8920: PPUSH
8921: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_INT 24
8932: PPUSH
8933: LD_INT 0
8935: PPUSH
8936: CALL_OW 517
8940: ST_TO_ADDR
// legion_mines := [ ] ;
8941: LD_ADDR_EXP 39
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: DOUBLE
8954: LD_INT 1
8956: DEC
8957: ST_TO_ADDR
8958: LD_VAR 0 4
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PUSH
8967: FOR_TO
8968: IFFALSE 9070
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8970: LD_VAR 0 4
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PUSH
8979: LD_VAR 0 3
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 4
8989: PUSH
8990: LD_INT 2
8992: ARRAY
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9010: LD_ADDR_EXP 39
9014: PUSH
9015: LD_EXP 39
9019: PPUSH
9020: LD_EXP 39
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: PPUSH
9029: LD_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 3
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 4
9048: PUSH
9049: LD_INT 2
9051: ARRAY
9052: PUSH
9053: LD_VAR 0 3
9057: ARRAY
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 1
9067: ST_TO_ADDR
// end ;
9068: GO 8967
9070: POP
9071: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9072: LD_ADDR_EXP 41
9076: PUSH
9077: LD_INT 13
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 1
9099: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9100: LD_EXP 39
9104: PUSH
9105: LD_INT 24
9107: PPUSH
9108: LD_INT 22
9110: PUSH
9111: LD_OWVAR 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 70
9124: AND
9125: IFFALSE 9292
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
// begin enable ;
9134: ENABLE
// for i := legion_mines downto 1 do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: DOUBLE
9141: LD_EXP 39
9145: INC
9146: ST_TO_ADDR
9147: LD_INT 1
9149: PUSH
9150: FOR_DOWNTO
9151: IFFALSE 9290
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_EXP 39
9162: PUSH
9163: LD_VAR 0 1
9167: ARRAY
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_EXP 39
9177: PUSH
9178: LD_VAR 0 1
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: CALL_OW 428
9192: ST_TO_ADDR
// if un then
9193: LD_VAR 0 2
9197: IFFALSE 9288
// if GetSide ( un ) = legion_enemy then
9199: LD_VAR 0 2
9203: PPUSH
9204: CALL_OW 255
9208: PUSH
9209: LD_EXP 42
9213: EQUAL
9214: IFFALSE 9288
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9216: LD_EXP 39
9220: PUSH
9221: LD_VAR 0 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_EXP 39
9235: PUSH
9236: LD_VAR 0 1
9240: ARRAY
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: PPUSH
9246: LD_INT 8
9248: PPUSH
9249: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9253: LD_ADDR_EXP 39
9257: PUSH
9258: LD_EXP 39
9262: PPUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 3
9272: ST_TO_ADDR
// if not mine_vulc then
9273: LD_EXP 13
9277: NOT
9278: IFFALSE 9288
// mine_vulc := true ;
9280: LD_ADDR_EXP 13
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// end ; end ;
9288: GO 9150
9290: POP
9291: POP
// end ;
9292: PPOPN 2
9294: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9295: LD_OWVAR 1
9299: PUSH
9300: LD_INT 52500
9302: PUSH
9303: LD_INT 46200
9305: PUSH
9306: LD_INT 42000
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_OWVAR 67
9318: ARRAY
9319: GREATEREQUAL
9320: IFFALSE 9498
9322: GO 9324
9324: DISABLE
9325: LD_INT 0
9327: PPUSH
9328: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9329: LD_ADDR_VAR 0 1
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 469
9341: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9342: LD_VAR 0 1
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PUSH
9351: LD_INT 112
9353: EQUAL
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PUSH
9364: LD_INT 67
9366: EQUAL
9367: AND
9368: IFFALSE 9498
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9370: LD_ADDR_VAR 0 2
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: ST_TO_ADDR
// if not un then
9404: LD_VAR 0 2
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9498
// un := un [ 1 ] ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_VAR 0 2
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: ST_TO_ADDR
// if IsInUnit ( un ) then
9427: LD_VAR 0 2
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExitBuilding ( un ) ;
9438: LD_VAR 0 2
9442: PPUSH
9443: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_VAR 0 1
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 1
9465: PUSH
9466: LD_INT 2
9468: ARRAY
9469: PPUSH
9470: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9474: LD_VAR 0 2
9478: PPUSH
9479: LD_INT 207
9481: PPUSH
9482: LD_INT 123
9484: PPUSH
9485: CALL_OW 171
// AddComUnload ( un ) ;
9489: LD_VAR 0 2
9493: PPUSH
9494: CALL_OW 219
// end ; end ;
9498: PPOPN 2
9500: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9501: LD_INT 22
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PPUSH
9511: CALL_OW 69
9515: PUSH
9516: LD_INT 0
9518: GREATER
9519: IFFALSE 11105
9521: GO 9523
9523: DISABLE
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
// begin enable ;
9543: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9544: LD_ADDR_VAR 0 8
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PUSH
9578: LD_INT 1
9580: ARRAY
9581: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9582: LD_ADDR_VAR 0 9
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 30
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9620: LD_ADDR_VAR 0 10
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 6
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 8
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9676: LD_ADDR_VAR 0 11
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 32
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9710: LD_ADDR_VAR 0 16
9714: PUSH
9715: LD_INT 22
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 69
9743: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9744: LD_ADDR_VAR 0 15
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 8
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9778: LD_ADDR_VAR 0 14
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9812: LD_ADDR_VAR 0 13
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PPUSH
9841: CALL_OW 69
9845: ST_TO_ADDR
// if l_eng then
9846: LD_VAR 0 16
9850: IFFALSE 10268
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9852: LD_ADDR_VAR 0 5
9856: PUSH
9857: LD_INT 25
9859: PPUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 8
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 70
9888: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9889: LD_VAR 0 5
9893: PPUSH
9894: LD_INT 3
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 1000
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10053
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: LD_VAR 0 5
9930: PPUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 24
9936: PUSH
9937: LD_INT 1000
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: ST_TO_ADDR
// for i = 1 to l_eng do
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: DOUBLE
9959: LD_INT 1
9961: DEC
9962: ST_TO_ADDR
9963: LD_VAR 0 16
9967: PUSH
9968: FOR_TO
9969: IFFALSE 10049
// if IsInUnit ( l_eng [ i ] ) then
9971: LD_VAR 0 16
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: PPUSH
9982: CALL_OW 310
9986: IFFALSE 10005
// ComExitBuilding ( l_eng [ i ] ) else
9988: LD_VAR 0 16
9992: PUSH
9993: LD_VAR 0 2
9997: ARRAY
9998: PPUSH
9999: CALL_OW 122
10003: GO 10047
// if not HasTask ( l_eng [ i ] ) then
10005: LD_VAR 0 16
10009: PUSH
10010: LD_VAR 0 2
10014: ARRAY
10015: PPUSH
10016: CALL_OW 314
10020: NOT
10021: IFFALSE 10047
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10023: LD_VAR 0 16
10027: PUSH
10028: LD_VAR 0 2
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 130
10047: GO 9968
10049: POP
10050: POP
// end else
10051: GO 10268
// begin if legion_blist > 0 then
10053: LD_EXP 40
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: IFFALSE 10190
// begin for i = 1 to l_eng do
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: DOUBLE
10069: LD_INT 1
10071: DEC
10072: ST_TO_ADDR
10073: LD_VAR 0 16
10077: PUSH
10078: FOR_TO
10079: IFFALSE 10186
// if IsInUnit ( l_eng [ i ] ) then
10081: LD_VAR 0 16
10085: PUSH
10086: LD_VAR 0 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 310
10096: IFFALSE 10115
// ComExitBuilding ( l_eng [ i ] ) else
10098: LD_VAR 0 16
10102: PUSH
10103: LD_VAR 0 2
10107: ARRAY
10108: PPUSH
10109: CALL_OW 122
10113: GO 10184
// if not HasTask ( l_eng [ i ] ) then
10115: LD_VAR 0 16
10119: PUSH
10120: LD_VAR 0 2
10124: ARRAY
10125: PPUSH
10126: CALL_OW 314
10130: NOT
10131: IFFALSE 10184
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10133: LD_VAR 0 16
10137: PUSH
10138: LD_VAR 0 2
10142: ARRAY
10143: PPUSH
10144: LD_EXP 40
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PPUSH
10153: LD_EXP 40
10157: PUSH
10158: LD_INT 2
10160: ARRAY
10161: PPUSH
10162: LD_EXP 40
10166: PUSH
10167: LD_INT 3
10169: ARRAY
10170: PPUSH
10171: LD_EXP 40
10175: PUSH
10176: LD_INT 4
10178: ARRAY
10179: PPUSH
10180: CALL_OW 145
10184: GO 10078
10186: POP
10187: POP
// end else
10188: GO 10268
// for i = 1 to l_eng do
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: DOUBLE
10196: LD_INT 1
10198: DEC
10199: ST_TO_ADDR
10200: LD_VAR 0 16
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10266
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10208: LD_VAR 0 16
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PPUSH
10219: CALL_OW 310
10223: NOT
10224: PUSH
10225: LD_VAR 0 16
10229: PUSH
10230: LD_VAR 0 2
10234: ARRAY
10235: PPUSH
10236: CALL_OW 314
10240: NOT
10241: AND
10242: IFFALSE 10264
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10244: LD_VAR 0 16
10248: PUSH
10249: LD_VAR 0 2
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: CALL_OW 120
10264: GO 10205
10266: POP
10267: POP
// end ; end ; if l_factory then
10268: LD_VAR 0 9
10272: IFFALSE 10672
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10274: LD_INT 22
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 33
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 61
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: GREATER
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PUSH
10350: LD_INT 0
10352: GREATER
10353: AND
10354: IFFALSE 10474
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10356: LD_INT 22
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 61
10381: PUSH
10382: EMPTY
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: PUSH
10399: LD_INT 1
10401: ARRAY
10402: PPUSH
10403: LD_INT 22
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 34
10415: PUSH
10416: LD_INT 31
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 69
10431: PUSH
10432: LD_INT 1
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 8
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 34
10447: PUSH
10448: LD_INT 31
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: PPUSH
10470: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10474: LD_EXP 41
10478: PUSH
10479: LD_INT 0
10481: GREATER
10482: PUSH
10483: LD_VAR 0 9
10487: PPUSH
10488: CALL_OW 461
10492: PUSH
10493: LD_INT 2
10495: EQUAL
10496: AND
10497: IFFALSE 10582
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10499: LD_VAR 0 9
10503: PPUSH
10504: LD_EXP 41
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PPUSH
10513: LD_EXP 41
10517: PUSH
10518: LD_INT 2
10520: ARRAY
10521: PPUSH
10522: LD_EXP 41
10526: PUSH
10527: LD_INT 3
10529: ARRAY
10530: PPUSH
10531: LD_EXP 41
10535: PUSH
10536: LD_INT 4
10538: ARRAY
10539: PPUSH
10540: CALL_OW 125
// for i = 1 to 4 do
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10580
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10560: LD_ADDR_EXP 41
10564: PUSH
10565: LD_EXP 41
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 3
10577: ST_TO_ADDR
10578: GO 10557
10580: POP
10581: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10582: LD_VAR 0 11
10586: PPUSH
10587: LD_INT 35
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 72
10601: PUSH
10602: LD_INT 0
10604: GREATER
10605: PUSH
10606: LD_VAR 0 9
10610: PPUSH
10611: CALL_OW 461
10615: PUSH
10616: LD_INT 2
10618: EQUAL
10619: AND
10620: IFFALSE 10672
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: LD_INT 28
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: PPUSH
10668: CALL_OW 148
// end ; if legion_enemy > 0 then
10672: LD_EXP 42
10676: PUSH
10677: LD_INT 0
10679: GREATER
10680: IFFALSE 10963
// begin if tick mod 11 11$00 = 0 then
10682: LD_OWVAR 1
10686: PUSH
10687: LD_INT 23100
10689: MOD
10690: PUSH
10691: LD_INT 0
10693: EQUAL
10694: IFFALSE 10944
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_EXP 41
10705: PUSH
10706: LD_INT 13
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ADD
10720: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_EXP 41
10730: PUSH
10731: LD_INT 28
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 29
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 12
10755: ARRAY
10756: ADD
10757: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10758: LD_ADDR_EXP 41
10762: PUSH
10763: LD_EXP 41
10767: PUSH
10768: LD_INT 13
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ADD
10782: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10783: LD_ADDR_EXP 41
10787: PUSH
10788: LD_EXP 41
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 27
10798: PUSH
10799: LD_INT 29
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 12
10817: ARRAY
10818: ADD
10819: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10820: LD_ADDR_EXP 41
10824: PUSH
10825: LD_EXP 41
10829: PUSH
10830: LD_INT 13
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: ADD
10844: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10845: LD_ADDR_EXP 41
10849: PUSH
10850: LD_EXP 41
10854: PUSH
10855: LD_INT 28
10857: PUSH
10858: LD_INT 92
10860: PUSH
10861: LD_INT 29
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: ADD
10881: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10882: LD_ADDR_EXP 41
10886: PUSH
10887: LD_EXP 41
10891: PUSH
10892: LD_INT 13
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: ADD
10906: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10907: LD_ADDR_EXP 41
10911: PUSH
10912: LD_EXP 41
10916: PUSH
10917: LD_INT 28
10919: PUSH
10920: LD_INT 27
10922: PUSH
10923: LD_INT 29
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ADD
10943: ST_TO_ADDR
// end ; if legion_force >= 8 then
10944: LD_EXP 37
10948: PUSH
10949: LD_INT 8
10951: GREATEREQUAL
10952: IFFALSE 10963
// RaiseSailEvent ( event_legion_attack ) ;
10954: LD_EXP 21
10958: PPUSH
10959: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10963: LD_INT 22
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: IFFALSE 11105
// begin if l_cargo = false then
10993: LD_VAR 0 17
10997: PUSH
10998: LD_INT 0
11000: EQUAL
11001: IFFALSE 11037
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11003: LD_ADDR_VAR 0 17
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 34
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: ST_TO_ADDR
// if l_cargo then
11037: LD_VAR 0 17
11041: IFFALSE 11105
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11043: LD_ADDR_VAR 0 7
11047: PUSH
11048: LD_INT 14
11050: PPUSH
11051: CALL_OW 435
11055: ST_TO_ADDR
// if cr > 0 then
11056: LD_VAR 0 7
11060: PUSH
11061: LD_INT 0
11063: GREATER
11064: IFFALSE 11105
// if not HasTask ( l_cargo ) then
11066: LD_VAR 0 17
11070: PPUSH
11071: CALL_OW 314
11075: NOT
11076: IFFALSE 11105
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11078: LD_VAR 0 17
11082: PPUSH
11083: LD_VAR 0 7
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 7
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 117
// end ; end ; end ;
11105: PPOPN 17
11107: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11108: LD_OWVAR 67
11112: PUSH
11113: LD_INT 1
11115: GREATER
11116: IFFALSE 11321
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11127: LD_INT 35
11129: PPUSH
11130: LD_INT 12635
11132: PPUSH
11133: CALL_OW 12
11137: PPUSH
11138: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: ST_TO_ADDR
// p := 1 ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_INT 116
11191: PUSH
11192: LD_INT 139
11194: PUSH
11195: LD_INT 69
11197: PUSH
11198: LD_INT 13
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// for i = 1 to 2 do
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: DOUBLE
11213: LD_INT 1
11215: DEC
11216: ST_TO_ADDR
11217: LD_INT 2
11219: PUSH
11220: FOR_TO
11221: IFFALSE 11319
// begin if IsInUnit ( sci [ i ] ) then
11223: LD_VAR 0 2
11227: PUSH
11228: LD_VAR 0 1
11232: ARRAY
11233: PPUSH
11234: CALL_OW 310
11238: IFFALSE 11255
// ComExitBuilding ( sci [ i ] ) ;
11240: LD_VAR 0 2
11244: PUSH
11245: LD_VAR 0 1
11249: ARRAY
11250: PPUSH
11251: CALL_OW 122
// Wait ( 0 0$03 ) ;
11255: LD_INT 105
11257: PPUSH
11258: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11262: LD_VAR 0 2
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PPUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_VAR 0 4
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 4
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: ARRAY
11298: PPUSH
11299: CALL_OW 158
// p := p + 2 ;
11303: LD_ADDR_VAR 0 4
11307: PUSH
11308: LD_VAR 0 4
11312: PUSH
11313: LD_INT 2
11315: PLUS
11316: ST_TO_ADDR
// end ;
11317: GO 11220
11319: POP
11320: POP
// end ;
11321: PPOPN 4
11323: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11324: LD_INT 14
11326: PPUSH
11327: CALL_OW 435
11331: PUSH
11332: LD_INT 20
11334: LESS
11335: IFFALSE 11362
11337: GO 11339
11339: DISABLE
// begin enable ;
11340: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: LD_INT 14
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 55
// end ;
11362: END
// export function LegionAttack ( ) ; var path , units ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
// units := legion_force ;
11368: LD_ADDR_VAR 0 3
11372: PUSH
11373: LD_EXP 37
11377: ST_TO_ADDR
// legion_force := [ ] ;
11378: LD_ADDR_EXP 37
11382: PUSH
11383: EMPTY
11384: ST_TO_ADDR
// case legion_enemy of 1 :
11385: LD_EXP 42
11389: PUSH
11390: LD_INT 1
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11441
11398: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 174
11406: PUSH
11407: LD_INT 135
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 153
11416: PUSH
11417: LD_INT 146
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: LD_INT 122
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
11439: GO 11544
11441: LD_INT 2
11443: DOUBLE
11444: EQUAL
11445: IFTRUE 11449
11447: GO 11492
11449: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_INT 164
11457: PUSH
11458: LD_INT 73
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 130
11467: PUSH
11468: LD_INT 48
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 96
11477: PUSH
11478: LD_INT 48
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11544
11492: LD_INT 7
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11543
11500: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 174
11508: PUSH
11509: LD_INT 135
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 153
11518: PUSH
11519: LD_INT 146
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 118
11528: PUSH
11529: LD_INT 122
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11544
11543: POP
// repeat wait ( 0 0$1 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL 79813 0 2
11565: NOT
11566: IFFALSE 11544
// end ; end_of_file
11568: LD_VAR 0 1
11572: RET
// export function Action ; var un , gamemode , speaker ; begin
11573: LD_INT 0
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// if debug then
11579: LD_EXP 15
11583: IFFALSE 11610
// begin Difficulty := 2 ;
11585: LD_ADDR_OWVAR 67
11589: PUSH
11590: LD_INT 2
11592: ST_TO_ADDR
// gamemode := 3 ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// FogOff ( 7 ) ;
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 344
// end else
11608: GO 11636
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11610: LD_ADDR_OWVAR 67
11614: PUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 426
11622: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 426
11635: ST_TO_ADDR
// end ; if gamemode = 1 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 1
11643: EQUAL
11644: IFFALSE 11668
// begin your_side := 1 ;
11646: LD_ADDR_OWVAR 2
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// legion_enemy := 1 ;
11654: LD_ADDR_EXP 42
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// PrepareAmerican ;
11662: CALL 261 0 0
// end else
11666: GO 11720
// if gamemode = 2 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 2
11675: EQUAL
11676: IFFALSE 11700
// begin your_side := 2 ;
11678: LD_ADDR_OWVAR 2
11682: PUSH
11683: LD_INT 2
11685: ST_TO_ADDR
// legion_enemy := 2 ;
11686: LD_ADDR_EXP 42
11690: PUSH
11691: LD_INT 2
11693: ST_TO_ADDR
// PrepareArabian ;
11694: CALL 18998 0 0
// end else
11698: GO 11720
// begin your_side := 7 ;
11700: LD_ADDR_OWVAR 2
11704: PUSH
11705: LD_INT 7
11707: ST_TO_ADDR
// legion_enemy := 7 ;
11708: LD_ADDR_EXP 42
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// PrepareAlliance ;
11716: CALL 16182 0 0
// end ; if your_side = 1 then
11720: LD_OWVAR 2
11724: PUSH
11725: LD_INT 1
11727: EQUAL
11728: IFFALSE 12304
// begin Query ( QVul4 ) ;
11730: LD_STRING QVul4
11732: PPUSH
11733: CALL_OW 97
// InGameOn ;
11737: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11741: LD_INT 8
11743: PPUSH
11744: LD_INT 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 12
11752: PPUSH
11753: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11757: LD_INT 8
11759: PPUSH
11760: LD_INT 5
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11770: LD_INT 98
11772: PPUSH
11773: LD_INT 148
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11786: LD_INT 98
11788: PPUSH
11789: LD_INT 148
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11799: LD_INT 8
11801: PPUSH
11802: LD_INT 5
11804: PPUSH
11805: CALL_OW 86
// uc_side := 4 ;
11809: LD_ADDR_OWVAR 20
11813: PUSH
11814: LD_INT 4
11816: ST_TO_ADDR
// uc_nation := 1 ;
11817: LD_ADDR_OWVAR 21
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// hc_importance := 0 ;
11825: LD_ADDR_OWVAR 32
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11833: LD_INT 1
11835: PPUSH
11836: LD_INT 3
11838: PPUSH
11839: LD_EXP 26
11843: PPUSH
11844: CALL_OW 380
// un := CreateHuman ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: CALL_OW 44
11857: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 19
11865: PPUSH
11866: LD_INT 23
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 48
// hc_name := Stuart Carey ;
11876: LD_ADDR_OWVAR 26
11880: PUSH
11881: LD_STRING Stuart Carey
11883: ST_TO_ADDR
// hc_class := 1 ;
11884: LD_ADDR_OWVAR 28
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// hc_gallery := vulcano ;
11892: LD_ADDR_OWVAR 33
11896: PUSH
11897: LD_STRING vulcano
11899: ST_TO_ADDR
// hc_face_number := 1 ;
11900: LD_ADDR_OWVAR 34
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// us_guy := CreateHuman ;
11908: LD_ADDR_EXP 27
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// InitHc ;
11918: CALL_OW 19
// if rand ( 0 , 1 ) then
11922: LD_INT 0
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 12
11932: IFFALSE 11949
// PrepareHuman ( sex_male , 3 , 6 ) else
11934: LD_INT 1
11936: PPUSH
11937: LD_INT 3
11939: PPUSH
11940: LD_INT 6
11942: PPUSH
11943: CALL_OW 380
11947: GO 11962
// PrepareHuman ( sex_female , 4 , 8 ) ;
11949: LD_INT 2
11951: PPUSH
11952: LD_INT 4
11954: PPUSH
11955: LD_INT 8
11957: PPUSH
11958: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_INT 12
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11977: LD_EXP 24
11981: PPUSH
11982: LD_VAR 0 2
11986: PPUSH
11987: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11991: LD_INT 105
11993: PPUSH
11994: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
11998: LD_INT 4
12000: PPUSH
12001: LD_EXP 24
12005: PPUSH
12006: CALL_OW 292
12010: PUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 12
12018: PPUSH
12019: LD_INT 10
12021: PPUSH
12022: CALL_OW 307
12026: OR
12027: IFFALSE 11991
// ComTurnUnit ( un , us_commander ) ;
12029: LD_VAR 0 2
12033: PPUSH
12034: LD_EXP 24
12038: PPUSH
12039: CALL_OW 119
// if GetSex ( un ) = sex_male then
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL_OW 258
12052: PUSH
12053: LD_INT 1
12055: EQUAL
12056: IFFALSE 12139
// begin Say ( un , VD-un1 ) ;
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_STRING VD-un1
12065: PPUSH
12066: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12070: LD_EXP 24
12074: PPUSH
12075: LD_STRING VDc-1
12077: PPUSH
12078: CALL_OW 88
// Say ( un , VD-un2 ) ;
12082: LD_VAR 0 2
12086: PPUSH
12087: LD_STRING VD-un2
12089: PPUSH
12090: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12094: LD_EXP 24
12098: PPUSH
12099: LD_STRING VDc-2
12101: PPUSH
12102: CALL_OW 88
// Say ( un , VD-un3 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un3
12113: PPUSH
12114: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12118: LD_INT 7
12120: PPUSH
12121: CALL_OW 67
// Say ( un , VD-un4 ) ;
12125: LD_VAR 0 2
12129: PPUSH
12130: LD_STRING VD-un4
12132: PPUSH
12133: CALL_OW 88
// end else
12137: GO 12218
// begin Say ( un , VD-unf1 ) ;
12139: LD_VAR 0 2
12143: PPUSH
12144: LD_STRING VD-unf1
12146: PPUSH
12147: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12151: LD_EXP 24
12155: PPUSH
12156: LD_STRING VDc-1
12158: PPUSH
12159: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_STRING VD-unf2
12170: PPUSH
12171: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12175: LD_EXP 24
12179: PPUSH
12180: LD_STRING VDc-2
12182: PPUSH
12183: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf3
12194: PPUSH
12195: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12199: LD_INT 7
12201: PPUSH
12202: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12206: LD_VAR 0 2
12210: PPUSH
12211: LD_STRING VD-unf4
12213: PPUSH
12214: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 2
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12233: LD_EXP 24
12237: PPUSH
12238: LD_STRING VDc-3
12240: PPUSH
12241: CALL_OW 88
// InGameOff ;
12245: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12249: LD_STRING CVulc1
12251: PPUSH
12252: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12256: LD_INT 35
12258: PPUSH
12259: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12263: LD_VAR 0 2
12267: PPUSH
12268: CALL_OW 250
12272: PUSH
12273: LD_INT 2
12275: EQUAL
12276: PUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 251
12286: PUSH
12287: LD_INT 2
12289: EQUAL
12290: AND
12291: IFFALSE 12256
// RemoveUnit ( un ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 64
// end else
12302: GO 12681
// if your_side = 2 then
12304: LD_OWVAR 2
12308: PUSH
12309: LD_INT 2
12311: EQUAL
12312: IFFALSE 12528
// begin CenterNowOnUnits ( player_commander ) ;
12314: LD_EXP 11
12318: PPUSH
12319: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12323: LD_ADDR_VAR 0 4
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: LD_EXP 57
12361: DIFF
12362: ST_TO_ADDR
// if speaker then
12363: LD_VAR 0 4
12367: IFFALSE 12519
// begin InGameOn ;
12369: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12373: LD_EXP 57
12377: PPUSH
12378: LD_STRING VSd-1
12380: PPUSH
12381: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12385: LD_VAR 0 4
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 258
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12422
// Say ( speaker [ 1 ] , VAd-1 ) else
12404: LD_VAR 0 4
12408: PUSH
12409: LD_INT 1
12411: ARRAY
12412: PPUSH
12413: LD_STRING VAd-1
12415: PPUSH
12416: CALL_OW 88
12420: GO 12438
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12422: LD_VAR 0 4
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: LD_STRING VAfd-1
12433: PPUSH
12434: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12438: LD_EXP 57
12442: PPUSH
12443: LD_STRING VSd-2
12445: PPUSH
12446: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12450: LD_VAR 0 4
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12487
// Say ( speaker [ 1 ] , VAd-2 ) else
12469: LD_VAR 0 4
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_STRING VAd-2
12480: PPUSH
12481: CALL_OW 88
12485: GO 12503
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12487: LD_VAR 0 4
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: LD_STRING VAfd-2
12498: PPUSH
12499: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12503: LD_EXP 57
12507: PPUSH
12508: LD_STRING VSd-3
12510: PPUSH
12511: CALL_OW 88
// InGameOff ;
12515: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12519: LD_STRING CVulc5
12521: PPUSH
12522: CALL_OW 337
// end else
12526: GO 12681
// if your_side = 7 then
12528: LD_OWVAR 2
12532: PUSH
12533: LD_INT 7
12535: EQUAL
12536: IFFALSE 12681
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12538: LD_ADDR_VAR 0 4
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: LD_INT 7
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: LD_EXP 43
12576: DIFF
12577: ST_TO_ADDR
// if speaker then
12578: LD_VAR 0 4
12582: IFFALSE 12674
// begin CenterNowOnUnits ( al_commander ) ;
12584: LD_EXP 43
12588: PPUSH
12589: CALL_OW 87
// InGameOn ;
12593: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12597: LD_EXP 43
12601: PPUSH
12602: LD_STRING VPd-1
12604: PPUSH
12605: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12609: LD_VAR 0 4
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 258
12622: IFFALSE 12642
// Say ( speaker [ 1 ] , VPpd-1 ) else
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: LD_STRING VPpd-1
12635: PPUSH
12636: CALL_OW 88
12640: GO 12658
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_STRING VPpdf-1
12653: PPUSH
12654: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12658: LD_EXP 43
12662: PPUSH
12663: LD_STRING VPd-2
12665: PPUSH
12666: CALL_OW 88
// InGameOff ;
12670: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12674: LD_STRING CVulc7
12676: PPUSH
12677: CALL_OW 337
// end ; SaveForQuickRestart ;
12681: CALL_OW 22
// end ;
12685: LD_VAR 0 1
12689: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: IFFALSE 12762
12720: GO 12722
12722: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12723: LD_STRING CVulc6
12725: PPUSH
12726: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12730: LD_INT 52500
12732: PUSH
12733: LD_INT 47250
12735: PUSH
12736: LD_INT 42000
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_OWVAR 67
12748: ARRAY
12749: PPUSH
12750: CALL_OW 67
// ru_can_attack := true ;
12754: LD_ADDR_EXP 3
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// end ;
12762: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12763: LD_INT 50
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: OR
12822: IFFALSE 13056
12824: GO 12826
12826: DISABLE
12827: LD_INT 0
12829: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12830: LD_STRING CVulc2
12832: PPUSH
12833: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: PUSH
12871: LD_EXP 24
12875: DIFF
12876: ST_TO_ADDR
// DialogueOn ;
12877: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12881: LD_INT 10
12883: PPUSH
12884: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: CALL_OW 258
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: IFFALSE 12925
// Say ( speaker [ 1 ] , VDb-1 ) else
12907: LD_VAR 0 1
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_STRING VDb-1
12918: PPUSH
12919: CALL_OW 88
12923: GO 12941
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_STRING VDbf-1
12936: PPUSH
12937: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12941: LD_INT 10
12943: PPUSH
12944: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: CALL_OW 258
12961: PUSH
12962: LD_INT 1
12964: EQUAL
12965: IFFALSE 12985
// Say ( speaker [ 1 ] , VDb-2 ) else
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_STRING VDb-2
12978: PPUSH
12979: CALL_OW 88
12983: GO 13001
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_STRING VDbf-2
12996: PPUSH
12997: CALL_OW 88
// DWait ( 0 0$01 ) ;
13001: LD_INT 35
13003: PPUSH
13004: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13008: LD_EXP 24
13012: PPUSH
13013: LD_STRING VDb-com1
13015: PPUSH
13016: CALL_OW 88
// DialogueOff ;
13020: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13024: LD_INT 44100
13026: PUSH
13027: LD_INT 36750
13029: PUSH
13030: LD_INT 31500
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: ARRAY
13043: PPUSH
13044: CALL_OW 67
// ru_can_attack := true ;
13048: LD_ADDR_EXP 3
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// end ;
13056: PPOPN 1
13058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13059: LD_INT 22
13061: PUSH
13062: LD_INT 7
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: IFFALSE 13124
13089: GO 13091
13091: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13092: LD_INT 42000
13094: PUSH
13095: LD_INT 34650
13097: PUSH
13098: LD_INT 29400
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_OWVAR 67
13110: ARRAY
13111: PPUSH
13112: CALL_OW 67
// ru_can_attack := true ;
13116: LD_ADDR_EXP 3
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// end ;
13124: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13125: LD_INT 58
13127: PPUSH
13128: CALL_OW 255
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13343
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// DialogueOn ;
13178: CALL_OW 6
// if speaker then
13182: LD_VAR 0 1
13186: IFFALSE 13241
// if GetSex ( speaker [ 1 ] ) = sex_male then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 258
13201: PUSH
13202: LD_INT 1
13204: EQUAL
13205: IFFALSE 13225
// Say ( speaker [ 1 ] , VDe-1 ) else
13207: LD_VAR 0 1
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: LD_STRING VDe-1
13218: PPUSH
13219: CALL_OW 88
13223: GO 13241
// Say ( speaker [ 1 ] , VDef-1 ) ;
13225: LD_VAR 0 1
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: PPUSH
13234: LD_STRING VDef-1
13236: PPUSH
13237: CALL_OW 88
// case Query ( SibNote ) of 1 :
13241: LD_STRING SibNote
13243: PPUSH
13244: CALL_OW 97
13248: PUSH
13249: LD_INT 1
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13260
13257: POP
// ; end ;
13258: GO 13261
13260: POP
// if speaker then
13261: LD_VAR 0 1
13265: IFFALSE 13320
// if GetSex ( speaker [ 1 ] ) = sex_male then
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 258
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13304
// Say ( speaker [ 1 ] , VDe-2 ) else
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_STRING VDe-2
13297: PPUSH
13298: CALL_OW 88
13302: GO 13320
// Say ( speaker [ 1 ] , VDef-2 ) ;
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: PPUSH
13313: LD_STRING VDef-2
13315: PPUSH
13316: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13320: LD_EXP 24
13324: PPUSH
13325: LD_STRING VDc-4
13327: PPUSH
13328: CALL_OW 88
// DialogueOff ;
13332: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13336: LD_STRING CVulc3
13338: PPUSH
13339: CALL_OW 337
// end ;
13343: PPOPN 1
13345: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13346: LD_OWVAR 2
13350: PUSH
13351: LD_INT 1
13353: EQUAL
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PUSH
13384: LD_INT 0
13386: GREATER
13387: AND
13388: IFFALSE 13834
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
13396: PPUSH
13397: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13398: LD_INT 245
13400: PPUSH
13401: LD_INT 1295
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: CALL_OW 67
// DialogueOn ;
13413: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13417: LD_EXP 27
13421: PPUSH
13422: LD_STRING VDG-1
13424: PPUSH
13425: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13429: LD_EXP 24
13433: PPUSH
13434: LD_STRING VDc-5
13436: PPUSH
13437: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13441: LD_EXP 27
13445: PPUSH
13446: LD_STRING VDG-2
13448: PPUSH
13449: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13453: LD_EXP 24
13457: PPUSH
13458: LD_STRING VDc-6
13460: PPUSH
13461: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13465: LD_EXP 24
13469: PPUSH
13470: LD_STRING VDc-6a
13472: PPUSH
13473: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13477: LD_EXP 27
13481: PPUSH
13482: LD_STRING VDG-3
13484: PPUSH
13485: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13489: LD_EXP 24
13493: PPUSH
13494: LD_STRING VDc-7
13496: PPUSH
13497: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13501: LD_EXP 27
13505: PPUSH
13506: LD_STRING VDG-4
13508: PPUSH
13509: CALL_OW 94
// DialogueOff ;
13513: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13517: LD_STRING CVulc4
13519: PPUSH
13520: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13524: LD_INT 18900
13526: PUSH
13527: LD_INT 21000
13529: PUSH
13530: LD_INT 23100
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_OWVAR 67
13542: ARRAY
13543: PPUSH
13544: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13548: LD_ADDR_VAR 0 1
13552: PUSH
13553: DOUBLE
13554: LD_INT 1
13556: DEC
13557: ST_TO_ADDR
13558: LD_INT 4
13560: PUSH
13561: LD_INT 5
13563: PUSH
13564: LD_INT 6
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_OWVAR 67
13576: ARRAY
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13823
// begin uc_side := 1 ;
13581: LD_ADDR_OWVAR 20
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// uc_nation := 1 ;
13589: LD_ADDR_OWVAR 21
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13597: LD_INT 0
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: LD_INT 4
13605: PPUSH
13606: CALL_OW 12
13610: PPUSH
13611: LD_EXP 26
13615: PPUSH
13616: CALL_OW 380
// un := CreateHuman ;
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: CALL_OW 44
13629: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_INT 2
13637: PPUSH
13638: CALL_OW 233
// if GetClass ( un ) = 3 then
13642: LD_VAR 0 2
13646: PPUSH
13647: CALL_OW 257
13651: PUSH
13652: LD_INT 3
13654: EQUAL
13655: IFFALSE 13806
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13657: LD_ADDR_OWVAR 37
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_VAR 0 1
13676: PUSH
13677: LD_INT 2
13679: MOD
13680: ARRAY
13681: ST_TO_ADDR
// vc_engine := engine_combustion ;
13682: LD_ADDR_OWVAR 39
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// vc_control := control_manual ;
13690: LD_ADDR_OWVAR 38
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13698: LD_ADDR_OWVAR 40
13702: PUSH
13703: LD_INT 9
13705: PUSH
13706: LD_INT 9
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 1
13723: PPUSH
13724: LD_INT 4
13726: PPUSH
13727: CALL_OW 12
13731: ARRAY
13732: ST_TO_ADDR
// veh := CreateVehicle ;
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: CALL_OW 45
13742: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 2
13750: PPUSH
13751: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 77
13762: PPUSH
13763: LD_INT 88
13765: PPUSH
13766: CALL_OW 12
13770: PPUSH
13771: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 0
13785: PPUSH
13786: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: CALL_OW 52
// end else
13804: GO 13821
// PlaceUnitArea ( un , start_north , false ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: LD_INT 0
13816: PPUSH
13817: CALL_OW 49
// end ;
13821: GO 13578
13823: POP
13824: POP
// CenterNowOnUnits ( un ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: CALL_OW 87
// end ;
13834: PPOPN 3
13836: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13837: LD_INT 21
13839: PPUSH
13840: LD_INT 22
13842: PUSH
13843: LD_OWVAR 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 70
13856: IFFALSE 14177
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_OWVAR 2
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 25
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 3
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 4
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: PUSH
13941: LD_EXP 11
13945: DIFF
13946: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_INT 112
13959: PPUSH
13960: LD_INT 67
13962: PPUSH
13963: CALL_OW 73
13967: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 255
13977: PUSH
13978: LD_INT 7
13980: EQUAL
13981: IFFALSE 14024
// if GetSex ( un ) = sex_male then
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 258
13992: PUSH
13993: LD_INT 1
13995: EQUAL
13996: IFFALSE 14012
// Say ( un , VD-find-al ) else
13998: LD_VAR 0 1
14002: PPUSH
14003: LD_STRING VD-find-al
14005: PPUSH
14006: CALL_OW 88
14010: GO 14024
// Say ( un , VD-find-al-f ) ;
14012: LD_VAR 0 1
14016: PPUSH
14017: LD_STRING VD-find-al-f
14019: PPUSH
14020: CALL_OW 88
// if GetSide ( un ) = 2 then
14024: LD_VAR 0 1
14028: PPUSH
14029: CALL_OW 255
14033: PUSH
14034: LD_INT 2
14036: EQUAL
14037: IFFALSE 14080
// if GetSex ( un ) = sex_male then
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 258
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: IFFALSE 14068
// Say ( un , VD-find-ar ) else
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_STRING VD-find-ar
14061: PPUSH
14062: CALL_OW 88
14066: GO 14080
// Say ( un , VD-find-ar-f ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_STRING VD-find-ar-f
14075: PPUSH
14076: CALL_OW 88
// if GetSide ( un ) = 1 then
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 255
14089: PUSH
14090: LD_INT 1
14092: EQUAL
14093: IFFALSE 14160
// begin if GetSex ( un ) = sex_male then
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 258
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 14136
// begin Say ( un , VD-find-us ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_STRING VD-find-us
14117: PPUSH
14118: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_STRING VD-find-us2
14129: PPUSH
14130: CALL_OW 88
// end else
14134: GO 14160
// begin Say ( un , VD-find-us-f ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_STRING VD-find-us-f
14143: PPUSH
14144: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_STRING VD-find-us2-f
14155: PPUSH
14156: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14160: LD_INT 10
14162: PPUSH
14163: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14167: LD_INT 112
14169: PPUSH
14170: LD_INT 67
14172: PPUSH
14173: CALL_OW 86
// end ;
14177: PPOPN 2
14179: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14180: LD_EXP 8
14184: IFFALSE 14686
14186: GO 14188
14188: DISABLE
14189: LD_INT 0
14191: PPUSH
// begin if your_side = 1 then
14192: LD_OWVAR 2
14196: PUSH
14197: LD_INT 1
14199: EQUAL
14200: IFFALSE 14381
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PUSH
14236: LD_EXP 24
14240: DIFF
14241: ST_TO_ADDR
// if not speaker then
14242: LD_VAR 0 1
14246: NOT
14247: IFFALSE 14251
// exit ;
14249: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14251: LD_VAR 0 1
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: CALL_OW 258
14264: PUSH
14265: LD_INT 1
14267: EQUAL
14268: IFFALSE 14288
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14270: LD_VAR 0 1
14274: PUSH
14275: LD_INT 1
14277: ARRAY
14278: PPUSH
14279: LD_STRING VD-us-sci-art-1
14281: PPUSH
14282: CALL_OW 88
14286: GO 14304
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14288: LD_VAR 0 1
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: LD_STRING VD-us-fsci-art-1
14299: PPUSH
14300: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14304: LD_EXP 24
14308: PPUSH
14309: LD_STRING VDc-art1
14311: PPUSH
14312: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14316: LD_VAR 0 1
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: CALL_OW 258
14329: PUSH
14330: LD_INT 1
14332: EQUAL
14333: IFFALSE 14353
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14335: LD_VAR 0 1
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: LD_STRING VD-us-sci-art-2
14346: PPUSH
14347: CALL_OW 88
14351: GO 14369
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_STRING VD-us-fsci-art-2
14364: PPUSH
14365: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14369: LD_EXP 24
14373: PPUSH
14374: LD_STRING VDc-art2
14376: PPUSH
14377: CALL_OW 88
// end ; if your_side = 2 then
14381: LD_OWVAR 2
14385: PUSH
14386: LD_INT 2
14388: EQUAL
14389: IFFALSE 14493
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14391: LD_ADDR_VAR 0 1
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 25
14408: PUSH
14409: LD_INT 4
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: PUSH
14425: LD_EXP 57
14429: DIFF
14430: ST_TO_ADDR
// if not speaker then
14431: LD_VAR 0 1
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: CALL_OW 258
14453: PUSH
14454: LD_INT 1
14456: EQUAL
14457: IFFALSE 14477
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14459: LD_VAR 0 1
14463: PUSH
14464: LD_INT 1
14466: ARRAY
14467: PPUSH
14468: LD_STRING VD-ar-sci-art-1
14470: PPUSH
14471: CALL_OW 88
14475: GO 14493
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: LD_STRING VD-ar-fsci-art-1
14488: PPUSH
14489: CALL_OW 88
// end ; if your_side = 7 then
14493: LD_OWVAR 2
14497: PUSH
14498: LD_INT 7
14500: EQUAL
14501: IFFALSE 14686
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 7
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: PUSH
14537: LD_EXP 43
14541: DIFF
14542: ST_TO_ADDR
// if speaker then
14543: LD_VAR 0 1
14547: IFFALSE 14679
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: CALL_OW 258
14562: PUSH
14563: LD_INT 1
14565: EQUAL
14566: IFFALSE 14586
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14568: LD_VAR 0 1
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: PPUSH
14577: LD_STRING VD-al-sci-art-1
14579: PPUSH
14580: CALL_OW 88
14584: GO 14602
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14586: LD_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: LD_STRING VD-al-fsci-art-1
14597: PPUSH
14598: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14602: LD_EXP 43
14606: PPUSH
14607: LD_STRING VPd-art-1
14609: PPUSH
14610: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: CALL_OW 258
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: IFFALSE 14651
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14633: LD_VAR 0 1
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PPUSH
14642: LD_STRING VD-al-sci-art-2
14644: PPUSH
14645: CALL_OW 88
14649: GO 14667
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: ARRAY
14659: PPUSH
14660: LD_STRING VD-al-fsci-art-2
14662: PPUSH
14663: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14667: LD_EXP 43
14671: PPUSH
14672: LD_STRING VPd-art-2
14674: PPUSH
14675: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14679: LD_STRING CVulc7out
14681: PPUSH
14682: CALL_OW 337
// end ; end ;
14686: PPOPN 1
14688: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 8
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: IFFALSE 14862
14721: GO 14723
14723: DISABLE
14724: LD_INT 0
14726: PPUSH
// begin if your_side = 1 then
14727: LD_OWVAR 2
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: IFFALSE 14818
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 69
14756: PUSH
14757: LD_EXP 24
14761: DIFF
14762: ST_TO_ADDR
// if speaker then
14763: LD_VAR 0 1
14767: IFFALSE 14818
// if GetSex ( speaker [ 1 ] ) then
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: CALL_OW 258
14782: IFFALSE 14802
// Say ( speaker [ 1 ] , VD-legion-us ) else
14784: LD_VAR 0 1
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: LD_STRING VD-legion-us
14795: PPUSH
14796: CALL_OW 88
14800: GO 14818
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: LD_STRING VD-legion-us-f
14813: PPUSH
14814: CALL_OW 88
// end ; if your_side = 2 then
14818: LD_OWVAR 2
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: IFFALSE 14840
// Say ( ar_commander , VD-legion-ar ) ;
14828: LD_EXP 57
14832: PPUSH
14833: LD_STRING VD-legion-ar
14835: PPUSH
14836: CALL_OW 88
// if your_side = 7 then
14840: LD_OWVAR 2
14844: PUSH
14845: LD_INT 7
14847: EQUAL
14848: IFFALSE 14862
// Say ( al_commander , VD-legion-al ) ;
14850: LD_EXP 43
14854: PPUSH
14855: LD_STRING VD-legion-al
14857: PPUSH
14858: CALL_OW 88
// end ;
14862: PPOPN 1
14864: END
// every 0 0$01 trigger mine_vulc do
14865: LD_EXP 13
14869: IFFALSE 14886
14871: GO 14873
14873: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14874: LD_EXP 11
14878: PPUSH
14879: LD_STRING VD-vulc-mines
14881: PPUSH
14882: CALL_OW 88
// end ;
14886: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14887: LD_INT 22
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_INT 0
14904: EQUAL
14905: PUSH
14906: LD_OWVAR 2
14910: PUSH
14911: LD_INT 2
14913: NONEQUAL
14914: AND
14915: IFFALSE 14924
14917: GO 14919
14919: DISABLE
// Win ;
14920: CALL 14981 0 0
14924: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14925: LD_INT 2
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 8
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: LD_INT 0
14960: EQUAL
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: LD_INT 2
14969: EQUAL
14970: AND
14971: IFFALSE 14980
14973: GO 14975
14975: DISABLE
// Win ;
14976: CALL 14981 0 0
14980: END
// function Win ; var points ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
// case Query ( VulcWin ) of 1 :
14985: LD_STRING VulcWin
14987: PPUSH
14988: CALL_OW 97
14992: PUSH
14993: LD_INT 1
14995: DOUBLE
14996: EQUAL
14997: IFTRUE 15001
14999: GO 15004
15001: POP
// ; end ;
15002: GO 15005
15004: POP
// if medal_enabled then
15005: LD_EXP 14
15009: IFFALSE 15023
// AddMedal ( vulc_1 , 1 ) else
15011: LD_STRING vulc_1
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 101
15021: GO 15034
// AddMedal ( vulc_1 , - 1 ) ;
15023: LD_STRING vulc_1
15025: PPUSH
15026: LD_INT 1
15028: NEG
15029: PPUSH
15030: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15034: LD_INT 22
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: IFFALSE 15066
// AddMedal ( vulc_2 , 1 ) else
15054: LD_STRING vulc_2
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 101
15064: GO 15077
// AddMedal ( vulc_2 , - 1 ) ;
15066: LD_STRING vulc_2
15068: PPUSH
15069: LD_INT 1
15071: NEG
15072: PPUSH
15073: CALL_OW 101
// points := CalculateCommanderPoints ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: CALL 2336 0 0
15086: ST_TO_ADDR
// if points >= 2000 then
15087: LD_VAR 0 2
15091: PUSH
15092: LD_INT 2000
15094: GREATEREQUAL
15095: IFFALSE 15109
// AddMedal ( vulc_3 , 2 ) else
15097: LD_STRING vulc_3
15099: PPUSH
15100: LD_INT 2
15102: PPUSH
15103: CALL_OW 101
15107: GO 15142
// if points >= 0 then
15109: LD_VAR 0 2
15113: PUSH
15114: LD_INT 0
15116: GREATEREQUAL
15117: IFFALSE 15131
// AddMedal ( vulc_3 , 1 ) else
15119: LD_STRING vulc_3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 101
15129: GO 15142
// AddMedal ( vulc_3 , - 1 ) ;
15131: LD_STRING vulc_3
15133: PPUSH
15134: LD_INT 1
15136: NEG
15137: PPUSH
15138: CALL_OW 101
// GiveMedals ( MAIN ) ;
15142: LD_STRING MAIN
15144: PPUSH
15145: CALL_OW 102
// YouWin ;
15149: CALL_OW 103
// end ; end_of_file
15153: LD_VAR 0 1
15157: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15158: LD_INT 13
15160: PPUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 70
15175: IFFALSE 15235
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
// begin enable ;
15184: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_INT 13
15192: PPUSH
15193: LD_INT 21
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 70
15207: PUSH
15208: FOR_IN
15209: IFFALSE 15233
// if GetLives ( i ) then
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 256
15220: IFFALSE 15231
// KillUnit ( i ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 66
15231: GO 15208
15233: POP
15234: POP
// end ;
15235: PPOPN 2
15237: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: PUSH
15248: LD_OWVAR 2
15252: EQUAL
15253: IFFALSE 15263
// player_res_art := true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// end ;
15263: PPOPN 1
15265: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15266: LD_INT 22
15268: PUSH
15269: LD_OWVAR 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 8
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 30
15303: PUSH
15304: LD_INT 11
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: PUSH
15326: LD_EXP 6
15330: AND
15331: IFFALSE 15688
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// xy := FindArtifact ( 1 ) ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 469
15353: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_OWVAR 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 30
15376: PUSH
15377: LD_INT 8
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 11
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PPUSH
15419: LD_VAR 0 1
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 1
15432: PUSH
15433: LD_INT 2
15435: ARRAY
15436: PPUSH
15437: CALL_OW 73
15441: ST_TO_ADDR
// if player_artifact_ready = false then
15442: LD_EXP 8
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: IFFALSE 15564
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15452: LD_VAR 0 2
15456: PPUSH
15457: LD_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: LD_VAR 0 1
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PPUSH
15475: CALL_OW 297
15479: PUSH
15480: LD_INT 6
15482: LESS
15483: IFFALSE 15544
// begin if BuildingStatus ( lab ) = bs_idle then
15485: LD_VAR 0 2
15489: PPUSH
15490: CALL_OW 461
15494: PUSH
15495: LD_INT 2
15497: EQUAL
15498: IFFALSE 15522
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15500: LD_OWVAR 2
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_INT 2
15510: PPUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: CALL_OW 468
15520: GO 15542
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15522: LD_OWVAR 2
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: LD_INT 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 468
// end else
15542: GO 15564
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15544: LD_OWVAR 2
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: LD_VAR 0 2
15559: PPUSH
15560: CALL_OW 468
// if player_artifact_ready then
15564: LD_EXP 8
15568: IFFALSE 15688
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 1
15579: PUSH
15580: LD_INT 1
15582: ARRAY
15583: PPUSH
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 297
15597: PUSH
15598: LD_INT 6
15600: LESS
15601: IFFALSE 15666
// begin if BuildingStatus ( lab ) = bs_idle then
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 461
15612: PUSH
15613: LD_INT 2
15615: EQUAL
15616: IFFALSE 15642
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_EXP 9
15627: PPUSH
15628: LD_INT 4
15630: PPUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: CALL_OW 468
15640: GO 15664
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15642: LD_OWVAR 2
15646: PPUSH
15647: LD_EXP 9
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: LD_VAR 0 2
15659: PPUSH
15660: CALL_OW 468
// end else
15664: GO 15688
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
// end ;
15688: PPOPN 2
15690: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15691: LD_INT 0
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15697: LD_ADDR_VAR 0 5
15701: PUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 469
15709: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15710: LD_ADDR_VAR 0 7
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_OWVAR 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 30
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: LD_INT 11
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: PPUSH
15764: LD_VAR 0 5
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_VAR 0 5
15777: PUSH
15778: LD_INT 2
15780: ARRAY
15781: PPUSH
15782: CALL_OW 73
15786: ST_TO_ADDR
// if icon = art_exp_left then
15787: LD_VAR 0 2
15791: PUSH
15792: LD_INT 1
15794: EQUAL
15795: IFFALSE 15848
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15797: LD_VAR 0 7
15801: PPUSH
15802: LD_EXP 10
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15814: LD_VAR 0 7
15818: PPUSH
15819: LD_EXP 7
15823: PPUSH
15824: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15828: LD_OWVAR 2
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_INT 0
15838: PPUSH
15839: LD_VAR 0 7
15843: PPUSH
15844: CALL_OW 468
// end ; if icon = art_icon then
15848: LD_VAR 0 2
15852: PUSH
15853: LD_EXP 9
15857: EQUAL
15858: IFFALSE 16091
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: IN
15880: IFFALSE 16091
// begin side := GetSide ( cr1 ) ;
15882: LD_ADDR_VAR 0 8
15886: PUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: CALL_OW 255
15896: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15897: LD_INT 22
15899: PUSH
15900: LD_VAR 0 8
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_INT 0
15930: GREATER
15931: IFFALSE 16091
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15933: LD_ADDR_VAR 0 6
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_VAR 0 8
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 26
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 27
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 30
15975: PUSH
15976: LD_INT 28
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16012
// KillUnit ( i ) ;
16001: LD_VAR 0 6
16005: PPUSH
16006: CALL_OW 66
16010: GO 15998
16012: POP
16013: POP
// medal_enabled := true ;
16014: LD_ADDR_EXP 14
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// player_res_art := false ;
16022: LD_ADDR_EXP 6
16026: PUSH
16027: LD_INT 0
16029: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16030: LD_OWVAR 2
16034: PPUSH
16035: LD_EXP 9
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: LD_VAR 0 7
16047: PPUSH
16048: CALL_OW 468
// wait ( time_to_reuse ) ;
16052: LD_EXP 12
16056: PPUSH
16057: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16061: LD_OWVAR 2
16065: PPUSH
16066: LD_EXP 9
16070: PPUSH
16071: LD_INT 4
16073: PPUSH
16074: LD_VAR 0 7
16078: PPUSH
16079: CALL_OW 468
// player_res_art := true ;
16083: LD_ADDR_EXP 6
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// end ; end ; end ; end ;
16091: PPOPN 8
16093: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 255
16103: PUSH
16104: LD_OWVAR 2
16108: EQUAL
16109: IFFALSE 16146
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16111: LD_OWVAR 2
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_INT 0
16121: PPUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 468
// player_artifact_ready := true ;
16131: LD_ADDR_EXP 8
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16139: LD_STRING ArtVulcano
16141: PPUSH
16142: CALL_OW 339
// end ; end ;
16146: PPOPN 1
16148: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16149: LD_ADDR_EXP 7
16153: PUSH
16154: LD_VAR 0 2
16158: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 2
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// end ; end_of_file end_of_file
16179: PPOPN 2
16181: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16182: LD_INT 0
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16189: LD_ADDR_EXP 45
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: LD_INT 6
16199: PUSH
16200: LD_INT 5
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: LD_OWVAR 67
16212: ARRAY
16213: ST_TO_ADDR
// al_force := [ ] ;
16214: LD_ADDR_EXP 44
16218: PUSH
16219: EMPTY
16220: ST_TO_ADDR
// RemoveAlliance ;
16221: CALL 16874 0 0
// ResetFog ;
16225: CALL_OW 335
// your_side := 7 ;
16229: LD_ADDR_OWVAR 2
16233: PUSH
16234: LD_INT 7
16236: ST_TO_ADDR
// uc_side := 7 ;
16237: LD_ADDR_OWVAR 20
16241: PUSH
16242: LD_INT 7
16244: ST_TO_ADDR
// hc_gallery :=  ;
16245: LD_ADDR_OWVAR 33
16249: PUSH
16250: LD_STRING 
16252: ST_TO_ADDR
// hc_name :=  ;
16253: LD_ADDR_OWVAR 26
16257: PUSH
16258: LD_STRING 
16260: ST_TO_ADDR
// hc_importance := 0 ;
16261: LD_ADDR_OWVAR 32
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// for i = 1 to 17 do
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: DOUBLE
16275: LD_INT 1
16277: DEC
16278: ST_TO_ADDR
16279: LD_INT 17
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16363
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16285: LD_ADDR_OWVAR 21
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PPUSH
16303: LD_INT 2
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16312: LD_INT 0
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: LD_INT 4
16320: PPUSH
16321: CALL_OW 12
16325: PPUSH
16326: LD_EXP 45
16330: PPUSH
16331: CALL_OW 380
// un := CreateHuman ;
16335: LD_ADDR_VAR 0 4
16339: PUSH
16340: CALL_OW 44
16344: ST_TO_ADDR
// al_force := al_force ^ un ;
16345: LD_ADDR_EXP 44
16349: PUSH
16350: LD_EXP 44
16354: PUSH
16355: LD_VAR 0 4
16359: ADD
16360: ST_TO_ADDR
// end ;
16361: GO 16282
16363: POP
16364: POP
// hc_importance := 100 ;
16365: LD_ADDR_OWVAR 32
16369: PUSH
16370: LD_INT 100
16372: ST_TO_ADDR
// uc_nation := 1 ;
16373: LD_ADDR_OWVAR 21
16377: PUSH
16378: LD_INT 1
16380: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16381: LD_INT 1
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: LD_EXP 45
16391: PPUSH
16392: CALL_OW 380
// al_commander := CreateHuman ;
16396: LD_ADDR_EXP 43
16400: PUSH
16401: CALL_OW 44
16405: ST_TO_ADDR
// player_commander := al_commander ;
16406: LD_ADDR_EXP 11
16410: PUSH
16411: LD_EXP 43
16415: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16416: LD_ADDR_VAR 0 5
16420: PUSH
16421: LD_STRING text
16423: PPUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 9
16429: PUSH
16430: LD_INT 8
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: LD_OWVAR 67
16442: ARRAY
16443: PPUSH
16444: LD_INT 9
16446: PUSH
16447: LD_INT 9
16449: PUSH
16450: LD_INT 8
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: LD_OWVAR 67
16462: ARRAY
16463: PPUSH
16464: LD_INT -5
16466: PUSH
16467: LD_EXP 43
16471: PUSH
16472: LD_INT -3
16474: PUSH
16475: LD_INT -2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: PUSH
16484: LD_EXP 44
16488: ADD
16489: PPUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 4
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 9
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 42
16534: ST_TO_ADDR
// team := team ^ al_commander ;
16535: LD_ADDR_VAR 0 5
16539: PUSH
16540: LD_VAR 0 5
16544: PUSH
16545: LD_EXP 43
16549: ADD
16550: ST_TO_ADDR
// for i = 1 to team do
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_VAR 0 5
16565: PUSH
16566: FOR_TO
16567: IFFALSE 16867
// begin if GetClass ( team [ i ] ) = class_mechanic then
16569: LD_VAR 0 5
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PPUSH
16580: CALL_OW 257
16584: PUSH
16585: LD_INT 3
16587: EQUAL
16588: IFFALSE 16844
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16590: LD_ADDR_OWVAR 21
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: LD_INT 3
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 2
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: ST_TO_ADDR
// if uc_nation = 1 then
16617: LD_OWVAR 21
16621: PUSH
16622: LD_INT 1
16624: EQUAL
16625: IFFALSE 16709
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16627: LD_ADDR_OWVAR 37
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: LD_VAR 0 2
16650: PUSH
16651: LD_INT 3
16653: MOD
16654: PUSH
16655: LD_INT 1
16657: PLUS
16658: ARRAY
16659: ST_TO_ADDR
// vc_engine := engine_siberite ;
16660: LD_ADDR_OWVAR 39
16664: PUSH
16665: LD_INT 3
16667: ST_TO_ADDR
// vc_control := control_manual ;
16668: LD_ADDR_OWVAR 38
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16676: LD_ADDR_OWVAR 40
16680: PUSH
16681: LD_INT 4
16683: PUSH
16684: LD_INT 5
16686: PUSH
16687: LD_INT 9
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: PPUSH
16698: LD_INT 3
16700: PPUSH
16701: CALL_OW 12
16705: ARRAY
16706: ST_TO_ADDR
// end else
16707: GO 16785
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16709: LD_ADDR_OWVAR 37
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_INT 2
16731: MOD
16732: PUSH
16733: LD_INT 1
16735: PLUS
16736: ARRAY
16737: ST_TO_ADDR
// vc_engine := engine_siberite ;
16738: LD_ADDR_OWVAR 39
16742: PUSH
16743: LD_INT 3
16745: ST_TO_ADDR
// vc_control := control_manual ;
16746: LD_ADDR_OWVAR 38
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16754: LD_ADDR_OWVAR 40
16758: PUSH
16759: LD_INT 44
16761: PUSH
16762: LD_INT 45
16764: PUSH
16765: LD_INT 43
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 3
16778: PPUSH
16779: CALL_OW 12
16783: ARRAY
16784: ST_TO_ADDR
// end ; un := CreateVehicle ;
16785: LD_ADDR_VAR 0 4
16789: PUSH
16790: CALL_OW 45
16794: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_INT 5
16802: PPUSH
16803: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16807: LD_VAR 0 4
16811: PPUSH
16812: LD_INT 15
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16822: LD_VAR 0 5
16826: PUSH
16827: LD_VAR 0 2
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 4
16837: PPUSH
16838: CALL_OW 52
// end else
16842: GO 16865
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16844: LD_VAR 0 5
16848: PUSH
16849: LD_VAR 0 2
16853: ARRAY
16854: PPUSH
16855: LD_INT 15
16857: PPUSH
16858: LD_INT 0
16860: PPUSH
16861: CALL_OW 49
// end ;
16865: GO 16566
16867: POP
16868: POP
// end ;
16869: LD_VAR 0 1
16873: RET
// export function RemoveAlliance ; var i ; begin
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16878: LD_INT 22
16880: PUSH
16881: LD_INT 7
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 30
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16915: LD_ADDR_VAR 0 2
16919: PUSH
16920: LD_INT 22
16922: PUSH
16923: LD_INT 7
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PPUSH
16930: CALL_OW 69
16934: PUSH
16935: FOR_IN
16936: IFFALSE 16949
// RemoveUnit ( i ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 64
16947: GO 16935
16949: POP
16950: POP
// end ;
16951: LD_VAR 0 1
16955: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16956: LD_INT 0
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16962: LD_INT 31
16964: PPUSH
16965: LD_INT 7
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16975: LD_INT 32
16977: PPUSH
16978: LD_INT 7
16980: PPUSH
16981: LD_INT 2
16983: PPUSH
16984: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16988: LD_INT 59
16990: PPUSH
16991: LD_INT 7
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17001: LD_ADDR_EXP 45
17005: PUSH
17006: LD_INT 5
17008: PUSH
17009: LD_INT 6
17011: PUSH
17012: LD_INT 7
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: LD_OWVAR 67
17024: ARRAY
17025: ST_TO_ADDR
// al_force := [ ] ;
17026: LD_ADDR_EXP 44
17030: PUSH
17031: EMPTY
17032: ST_TO_ADDR
// al_vehs := [ ] ;
17033: LD_ADDR_EXP 50
17037: PUSH
17038: EMPTY
17039: ST_TO_ADDR
// uc_side := 7 ;
17040: LD_ADDR_OWVAR 20
17044: PUSH
17045: LD_INT 7
17047: ST_TO_ADDR
// uc_nation := 1 ;
17048: LD_ADDR_OWVAR 21
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
// bc_type := b_oil_mine ;
17056: LD_ADDR_OWVAR 42
17060: PUSH
17061: LD_INT 29
17063: ST_TO_ADDR
// b := CreateBuilding ;
17064: LD_ADDR_VAR 0 4
17068: PUSH
17069: CALL_OW 46
17073: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17074: LD_VAR 0 4
17078: PPUSH
17079: LD_INT 61
17081: PPUSH
17082: LD_INT 7
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: LD_INT 0
17090: PPUSH
17091: CALL_OW 50
// bc_type := b_siberite_mine ;
17095: LD_ADDR_OWVAR 42
17099: PUSH
17100: LD_INT 30
17102: ST_TO_ADDR
// b := CreateBuilding ;
17103: LD_ADDR_VAR 0 4
17107: PUSH
17108: CALL_OW 46
17112: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_INT 69
17120: PPUSH
17121: LD_INT 13
17123: PPUSH
17124: LD_INT 0
17126: PPUSH
17127: LD_INT 0
17129: PPUSH
17130: CALL_OW 50
// hc_gallery :=  ;
17134: LD_ADDR_OWVAR 33
17138: PUSH
17139: LD_STRING 
17141: ST_TO_ADDR
// hc_name :=  ;
17142: LD_ADDR_OWVAR 26
17146: PUSH
17147: LD_STRING 
17149: ST_TO_ADDR
// hc_importance := 0 ;
17150: LD_ADDR_OWVAR 32
17154: PUSH
17155: LD_INT 0
17157: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17158: LD_ADDR_VAR 0 2
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 7
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 32
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: PUSH
17192: FOR_IN
17193: IFFALSE 17263
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17195: LD_ADDR_OWVAR 21
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_INT 2
17215: PPUSH
17216: CALL_OW 12
17220: ARRAY
17221: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17222: LD_INT 0
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: LD_EXP 45
17232: PPUSH
17233: CALL_OW 380
// un := CreateHuman ;
17237: LD_ADDR_VAR 0 3
17241: PUSH
17242: CALL_OW 44
17246: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 52
// end ;
17261: GO 17192
17263: POP
17264: POP
// for i = 1 to 3 do
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: DOUBLE
17271: LD_INT 1
17273: DEC
17274: ST_TO_ADDR
17275: LD_INT 3
17277: PUSH
17278: FOR_TO
17279: IFFALSE 17347
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17281: LD_ADDR_OWVAR 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17308: LD_INT 0
17310: PPUSH
17311: LD_INT 4
17313: PPUSH
17314: LD_EXP 45
17318: PPUSH
17319: CALL_OW 380
// un := CreateHuman ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: CALL_OW 44
17332: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 164
17340: PPUSH
17341: CALL_OW 52
// end ;
17345: GO 17278
17347: POP
17348: POP
// for i = 1 to 4 do
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: DOUBLE
17355: LD_INT 1
17357: DEC
17358: ST_TO_ADDR
17359: LD_INT 4
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17454
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17365: LD_ADDR_OWVAR 21
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PPUSH
17383: LD_INT 2
17385: PPUSH
17386: CALL_OW 12
17390: ARRAY
17391: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17392: LD_INT 0
17394: PPUSH
17395: LD_INT 5
17397: PUSH
17398: LD_INT 9
17400: PUSH
17401: LD_INT 9
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_INT 3
17414: PPUSH
17415: CALL_OW 12
17419: ARRAY
17420: PPUSH
17421: LD_EXP 45
17425: PPUSH
17426: CALL_OW 380
// un := CreateHuman ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: CALL_OW 44
17439: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 173
17447: PPUSH
17448: CALL_OW 52
// end ;
17452: GO 17362
17454: POP
17455: POP
// for i = 1 to 4 do
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: DOUBLE
17462: LD_INT 1
17464: DEC
17465: ST_TO_ADDR
17466: LD_INT 4
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17568
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17472: LD_ADDR_OWVAR 21
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 3
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_INT 2
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17499: LD_INT 0
17501: PPUSH
17502: LD_INT 3
17504: PPUSH
17505: LD_EXP 45
17509: PPUSH
17510: CALL_OW 380
// un := CreateHuman ;
17514: LD_ADDR_VAR 0 3
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17524: LD_VAR 0 3
17528: PPUSH
17529: LD_INT 22
17531: PUSH
17532: LD_INT 7
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: CALL_OW 52
// end ;
17566: GO 17469
17568: POP
17569: POP
// for i = 1 to 4 do
17570: LD_ADDR_VAR 0 2
17574: PUSH
17575: DOUBLE
17576: LD_INT 1
17578: DEC
17579: ST_TO_ADDR
17580: LD_INT 4
17582: PUSH
17583: FOR_TO
17584: IFFALSE 17652
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17586: LD_ADDR_OWVAR 21
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: LD_INT 3
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17613: LD_INT 0
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: LD_EXP 45
17623: PPUSH
17624: CALL_OW 380
// un := CreateHuman ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: CALL_OW 44
17637: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 162
17645: PPUSH
17646: CALL_OW 52
// end ;
17650: GO 17583
17652: POP
17653: POP
// uc_nation := 3 ;
17654: LD_ADDR_OWVAR 21
17658: PUSH
17659: LD_INT 3
17661: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17662: LD_ADDR_OWVAR 37
17666: PUSH
17667: LD_INT 21
17669: ST_TO_ADDR
// vc_engine := engine_siberite ;
17670: LD_ADDR_OWVAR 39
17674: PUSH
17675: LD_INT 3
17677: ST_TO_ADDR
// vc_control := control_computer ;
17678: LD_ADDR_OWVAR 38
17682: PUSH
17683: LD_INT 3
17685: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17686: LD_ADDR_OWVAR 40
17690: PUSH
17691: LD_INT 51
17693: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17694: CALL_OW 45
17698: PPUSH
17699: LD_INT 49
17701: PPUSH
17702: LD_INT 13
17704: PPUSH
17705: LD_INT 0
17707: PPUSH
17708: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17712: LD_ADDR_EXP 52
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_INT 7
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 30
17729: PUSH
17730: LD_INT 33
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17746: LD_ADDR_VAR 0 2
17750: PUSH
17751: DOUBLE
17752: LD_INT 1
17754: DEC
17755: ST_TO_ADDR
17756: LD_INT 22
17758: PUSH
17759: LD_INT 7
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 30
17768: PUSH
17769: LD_INT 33
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 35
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_TO
17800: IFFALSE 17860
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17802: LD_INT 22
17804: PUSH
17805: LD_INT 7
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: LD_INT 33
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 35
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: PUSH
17845: LD_VAR 0 2
17849: ARRAY
17850: PPUSH
17851: LD_INT 49
17853: PPUSH
17854: CALL_OW 208
17858: GO 17799
17860: POP
17861: POP
// end ;
17862: LD_VAR 0 1
17866: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17867: LD_OWVAR 2
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 18861
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
// begin enable ;
17886: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17887: LD_ADDR_EXP 56
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_INT 7
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 21
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17921: LD_ADDR_EXP 54
17925: PUSH
17926: LD_INT 164
17928: PUSH
17929: LD_INT 197
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17936: LD_ADDR_EXP 53
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_INT 7
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 69
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17974: LD_ADDR_EXP 55
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_INT 7
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18012: LD_INT 22
18014: PUSH
18015: LD_INT 7
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 34
18024: PUSH
18025: LD_INT 51
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: IFFALSE 18080
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18042: LD_ADDR_EXP 51
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_INT 7
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 34
18059: PUSH
18060: LD_INT 51
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18080: LD_ADDR_EXP 47
18084: PUSH
18085: LD_INT 22
18087: PUSH
18088: LD_INT 7
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18114: LD_ADDR_EXP 46
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 7
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 25
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18182: LD_ADDR_EXP 49
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18216: LD_EXP 51
18220: PPUSH
18221: CALL_OW 314
18225: NOT
18226: PUSH
18227: LD_EXP 51
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: CALL_OW 289
18239: PUSH
18240: LD_INT 100
18242: LESS
18243: AND
18244: IFFALSE 18292
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18246: LD_ADDR_VAR 0 4
18250: PUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 435
18258: ST_TO_ADDR
// if cr then
18259: LD_VAR 0 4
18263: IFFALSE 18292
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18265: LD_EXP 51
18269: PPUSH
18270: LD_VAR 0 4
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 4
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PPUSH
18288: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18292: LD_EXP 56
18296: PPUSH
18297: LD_INT 3
18299: PUSH
18300: LD_INT 24
18302: PUSH
18303: LD_INT 1000
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 72
18318: IFFALSE 18448
// begin if al_eng then
18320: LD_EXP 46
18324: IFFALSE 18446
// for i = 1 to al_eng do
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: DOUBLE
18332: LD_INT 1
18334: DEC
18335: ST_TO_ADDR
18336: LD_EXP 46
18340: PUSH
18341: FOR_TO
18342: IFFALSE 18444
// if IsInUnit ( al_eng [ i ] ) then
18344: LD_EXP 46
18348: PUSH
18349: LD_VAR 0 1
18353: ARRAY
18354: PPUSH
18355: CALL_OW 310
18359: IFFALSE 18378
// ComExitBuilding ( al_eng [ i ] ) else
18361: LD_EXP 46
18365: PUSH
18366: LD_VAR 0 1
18370: ARRAY
18371: PPUSH
18372: CALL_OW 122
18376: GO 18442
// if not HasTask ( al_eng [ i ] ) then
18378: LD_EXP 46
18382: PUSH
18383: LD_VAR 0 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 314
18393: NOT
18394: IFFALSE 18442
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18396: LD_EXP 46
18400: PUSH
18401: LD_VAR 0 1
18405: ARRAY
18406: PPUSH
18407: LD_EXP 56
18411: PPUSH
18412: LD_INT 3
18414: PUSH
18415: LD_INT 24
18417: PUSH
18418: LD_INT 1000
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 72
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 130
18442: GO 18341
18444: POP
18445: POP
// end else
18446: GO 18530
// if al_eng then
18448: LD_EXP 46
18452: IFFALSE 18530
// if not IsInUnit ( al_eng [ 1 ] ) then
18454: LD_EXP 46
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PPUSH
18463: CALL_OW 310
18467: NOT
18468: IFFALSE 18530
// for i = 1 to al_eng do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: DOUBLE
18476: LD_INT 1
18478: DEC
18479: ST_TO_ADDR
18480: LD_EXP 46
18484: PUSH
18485: FOR_TO
18486: IFFALSE 18528
// if not IsInUnit ( al_eng [ i ] ) then
18488: LD_EXP 46
18492: PUSH
18493: LD_VAR 0 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 310
18503: NOT
18504: IFFALSE 18526
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18506: LD_EXP 46
18510: PUSH
18511: LD_VAR 0 1
18515: ARRAY
18516: PPUSH
18517: LD_EXP 53
18521: PPUSH
18522: CALL_OW 120
18526: GO 18485
18528: POP
18529: POP
// if al_vehs then
18530: LD_EXP 50
18534: IFFALSE 18634
// if BuildingStatus ( al_fac ) = bs_idle then
18536: LD_EXP 55
18540: PPUSH
18541: CALL_OW 461
18545: PUSH
18546: LD_INT 2
18548: EQUAL
18549: IFFALSE 18634
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18551: LD_EXP 55
18555: PPUSH
18556: LD_EXP 50
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_EXP 50
18569: PUSH
18570: LD_INT 2
18572: ARRAY
18573: PPUSH
18574: LD_EXP 50
18578: PUSH
18579: LD_INT 3
18581: ARRAY
18582: PPUSH
18583: LD_EXP 50
18587: PUSH
18588: LD_INT 4
18590: ARRAY
18591: PPUSH
18592: CALL_OW 125
// for i = 1 to 4 do
18596: LD_ADDR_VAR 0 1
18600: PUSH
18601: DOUBLE
18602: LD_INT 1
18604: DEC
18605: ST_TO_ADDR
18606: LD_INT 4
18608: PUSH
18609: FOR_TO
18610: IFFALSE 18632
// al_vehs := Delete ( al_vehs , 1 ) ;
18612: LD_ADDR_EXP 50
18616: PUSH
18617: LD_EXP 50
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 3
18629: ST_TO_ADDR
18630: GO 18609
18632: POP
18633: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18634: LD_EXP 44
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: PUSH
18643: LD_OWVAR 1
18647: PUSH
18648: LD_INT 23100
18650: MOD
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: AND
18656: IFFALSE 18770
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: DOUBLE
18664: LD_INT 1
18666: DEC
18667: ST_TO_ADDR
18668: LD_INT 6
18670: PUSH
18671: LD_INT 7
18673: PUSH
18674: LD_INT 8
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18768
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18691: LD_ADDR_EXP 50
18695: PUSH
18696: LD_EXP 50
18700: PUSH
18701: LD_INT 23
18703: ADD
18704: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18705: LD_ADDR_EXP 50
18709: PUSH
18710: LD_EXP 50
18714: PUSH
18715: LD_INT 1
18717: ADD
18718: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18719: LD_ADDR_EXP 50
18723: PUSH
18724: LD_EXP 50
18728: PUSH
18729: LD_INT 3
18731: ADD
18732: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18733: LD_ADDR_EXP 50
18737: PUSH
18738: LD_EXP 50
18742: PUSH
18743: LD_INT 46
18745: PUSH
18746: LD_INT 47
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 2
18758: PPUSH
18759: CALL_OW 12
18763: ARRAY
18764: ADD
18765: ST_TO_ADDR
// end ;
18766: GO 18688
18768: POP
18769: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18770: LD_INT 22
18772: PUSH
18773: LD_INT 7
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 34
18782: PUSH
18783: LD_INT 51
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: PUSH
18799: LD_INT 0
18801: EQUAL
18802: IFFALSE 18825
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18804: LD_EXP 55
18808: PPUSH
18809: LD_INT 21
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: LD_INT 51
18820: PPUSH
18821: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18825: LD_EXP 44
18829: PUSH
18830: LD_INT 6
18832: PUSH
18833: LD_INT 7
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: LD_OWVAR 67
18848: ARRAY
18849: GREATEREQUAL
18850: IFFALSE 18861
// RaiseSailEvent ( event_alliance_attack ) ;
18852: LD_EXP 23
18856: PPUSH
18857: CALL_OW 427
// end ;
18861: PPOPN 4
18863: END
// export function AllianceAttack ( ) ; var path , units ; begin
18864: LD_INT 0
18866: PPUSH
18867: PPUSH
18868: PPUSH
// units := al_force ;
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_EXP 44
18878: ST_TO_ADDR
// al_force := [ ] ;
18879: LD_ADDR_EXP 44
18883: PUSH
18884: EMPTY
18885: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18886: LD_INT 0
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 12
18896: IFFALSE 18940
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_INT 49
18905: PUSH
18906: LD_INT 53
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 52
18915: PUSH
18916: LD_INT 90
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 63
18925: PUSH
18926: LD_INT 114
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 18969
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18940: LD_ADDR_VAR 0 2
18944: PUSH
18945: LD_INT 89
18947: PUSH
18948: LD_INT 52
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 143
18957: PUSH
18958: LD_INT 50
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18969: LD_INT 35
18971: PPUSH
18972: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL 79813 0 2
18990: NOT
18991: IFFALSE 18969
// end ; end_of_file
18993: LD_VAR 0 1
18997: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18998: LD_INT 0
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19005: LD_ADDR_EXP 59
19009: PUSH
19010: LD_INT 9
19012: PUSH
19013: LD_INT 8
19015: PUSH
19016: LD_INT 7
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_OWVAR 67
19028: ARRAY
19029: ST_TO_ADDR
// ar_force := [ ] ;
19030: LD_ADDR_EXP 58
19034: PUSH
19035: EMPTY
19036: ST_TO_ADDR
// RemoveAlliance ;
19037: CALL 16874 0 0
// RemoveEnvironmentArea ( evn ) ;
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 355
// your_side := 2 ;
19048: LD_ADDR_OWVAR 2
19052: PUSH
19053: LD_INT 2
19055: ST_TO_ADDR
// uc_side := 2 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 2
19063: ST_TO_ADDR
// uc_nation := nation_arabian ;
19064: LD_ADDR_OWVAR 21
19068: PUSH
19069: LD_INT 2
19071: ST_TO_ADDR
// hc_gallery :=  ;
19072: LD_ADDR_OWVAR 33
19076: PUSH
19077: LD_STRING 
19079: ST_TO_ADDR
// hc_name :=  ;
19080: LD_ADDR_OWVAR 26
19084: PUSH
19085: LD_STRING 
19087: ST_TO_ADDR
// hc_importance := 0 ;
19088: LD_ADDR_OWVAR 32
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// for i = 1 to 20 do
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: DOUBLE
19102: LD_INT 1
19104: DEC
19105: ST_TO_ADDR
19106: LD_INT 20
19108: PUSH
19109: FOR_TO
19110: IFFALSE 19175
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19112: LD_INT 0
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 4
19120: PPUSH
19121: CALL_OW 12
19125: PPUSH
19126: LD_EXP 59
19130: PPUSH
19131: CALL_OW 380
// un := CreateHuman ;
19135: LD_ADDR_VAR 0 4
19139: PUSH
19140: CALL_OW 44
19144: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19145: LD_VAR 0 4
19149: PPUSH
19150: LD_INT 2
19152: PPUSH
19153: CALL_OW 233
// ar_force := ar_force ^ un ;
19157: LD_ADDR_EXP 58
19161: PUSH
19162: LD_EXP 58
19166: PUSH
19167: LD_VAR 0 4
19171: ADD
19172: ST_TO_ADDR
// end ;
19173: GO 19109
19175: POP
19176: POP
// hc_importance := 100 ;
19177: LD_ADDR_OWVAR 32
19181: PUSH
19182: LD_INT 100
19184: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 11
19190: PPUSH
19191: LD_EXP 59
19195: PPUSH
19196: CALL_OW 380
// ar_commander := CreateHuman ;
19200: LD_ADDR_EXP 57
19204: PUSH
19205: CALL_OW 44
19209: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19210: LD_EXP 57
19214: PPUSH
19215: LD_INT 2
19217: PPUSH
19218: CALL_OW 233
// player_commander := ar_commander ;
19222: LD_ADDR_EXP 11
19226: PUSH
19227: LD_EXP 57
19231: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19232: LD_ADDR_VAR 0 5
19236: PUSH
19237: LD_STRING text
19239: PPUSH
19240: LD_INT 14
19242: PUSH
19243: LD_INT 13
19245: PUSH
19246: LD_INT 12
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 14
19262: PUSH
19263: LD_INT 13
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: LD_OWVAR 67
19278: ARRAY
19279: PPUSH
19280: LD_INT -6
19282: PUSH
19283: LD_EXP 57
19287: PUSH
19288: LD_INT -2
19290: PUSH
19291: LD_INT -3
19293: PUSH
19294: LD_INT -5
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_EXP 58
19308: ADD
19309: PPUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 3
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 4
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 8
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 42
19350: ST_TO_ADDR
// team := team ^ ar_commander ;
19351: LD_ADDR_VAR 0 5
19355: PUSH
19356: LD_VAR 0 5
19360: PUSH
19361: LD_EXP 57
19365: ADD
19366: ST_TO_ADDR
// for i = 1 to 4 do
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 4
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19481
// begin vc_chassis := ar_medium_trike ;
19383: LD_ADDR_OWVAR 37
19387: PUSH
19388: LD_INT 13
19390: ST_TO_ADDR
// vc_engine := engine_siberite ;
19391: LD_ADDR_OWVAR 39
19395: PUSH
19396: LD_INT 3
19398: ST_TO_ADDR
// vc_control := control_manual ;
19399: LD_ADDR_OWVAR 38
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19407: LD_ADDR_OWVAR 40
19411: PUSH
19412: LD_INT 27
19414: PUSH
19415: LD_INT 32
19417: PUSH
19418: LD_INT 88
19420: PUSH
19421: LD_INT 27
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_VAR 0 2
19434: ARRAY
19435: ST_TO_ADDR
// un := CreateVehicle ;
19436: LD_ADDR_VAR 0 4
19440: PUSH
19441: CALL_OW 45
19445: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19458: LD_VAR 0 4
19462: PPUSH
19463: LD_INT 54
19465: PPUSH
19466: LD_INT 15
19468: PPUSH
19469: LD_INT 6
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 50
// end ;
19479: GO 19380
19481: POP
19482: POP
// for i = 1 to team do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: DOUBLE
19489: LD_INT 1
19491: DEC
19492: ST_TO_ADDR
19493: LD_VAR 0 5
19497: PUSH
19498: FOR_TO
19499: IFFALSE 19596
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19501: LD_INT 22
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 58
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: IFFALSE 19573
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19527: LD_VAR 0 5
19531: PUSH
19532: LD_VAR 0 2
19536: ARRAY
19537: PPUSH
19538: LD_INT 22
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 58
19550: PUSH
19551: EMPTY
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: LD_INT 1
19565: ARRAY
19566: PPUSH
19567: CALL_OW 52
19571: GO 19594
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19573: LD_VAR 0 5
19577: PUSH
19578: LD_VAR 0 2
19582: ARRAY
19583: PPUSH
19584: LD_INT 16
19586: PPUSH
19587: LD_INT 0
19589: PPUSH
19590: CALL_OW 49
// end ;
19594: GO 19498
19596: POP
19597: POP
// uc_side := 0 ;
19598: LD_ADDR_OWVAR 20
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// uc_nation := 0 ;
19606: LD_ADDR_OWVAR 21
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// vc_chassis := 31 ;
19614: LD_ADDR_OWVAR 37
19618: PUSH
19619: LD_INT 31
19621: ST_TO_ADDR
// vc_control := control_rider ;
19622: LD_ADDR_OWVAR 38
19626: PUSH
19627: LD_INT 4
19629: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19630: CALL_OW 45
19634: PPUSH
19635: LD_INT 96
19637: PPUSH
19638: LD_INT 20
19640: PPUSH
19641: LD_INT 0
19643: PPUSH
19644: CALL_OW 48
// end ; end_of_file end_of_file
19648: LD_VAR 0 1
19652: RET
// every 0 0$1 do
19653: GO 19655
19655: DISABLE
// begin enable ;
19656: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19657: LD_STRING updateTimer(
19659: PUSH
19660: LD_OWVAR 1
19664: STR
19665: PUSH
19666: LD_STRING );
19668: STR
19669: PPUSH
19670: CALL_OW 559
// end ;
19674: END
// export function SOS_MapStart ( ) ; begin
19675: LD_INT 0
19677: PPUSH
// if streamModeActive then
19678: LD_EXP 61
19682: IFFALSE 19691
// DefineStreamItems ( true ) ;
19684: LD_INT 1
19686: PPUSH
19687: CALL 21495 0 1
// UpdateLuaVariables ( ) ;
19691: CALL 19708 0 0
// UpdateFactoryWaypoints ( ) ;
19695: CALL 34356 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19699: CALL 34613 0 0
// end ;
19703: LD_VAR 0 1
19707: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
19708: LD_INT 0
19710: PPUSH
// if not globalGameSaveCounter then
19711: LD_EXP 60
19715: NOT
19716: IFFALSE 19727
// ToLua ( setGameSaveCounter(0) ) else
19718: LD_STRING setGameSaveCounter(0)
19720: PPUSH
19721: CALL_OW 559
19725: GO 19759
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19727: LD_ADDR_EXP 60
19731: PUSH
19732: LD_EXP 60
19736: PPUSH
19737: CALL 78570 0 1
19741: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19742: LD_STRING setGameSaveCounter(
19744: PUSH
19745: LD_EXP 60
19749: STR
19750: PUSH
19751: LD_STRING )
19753: STR
19754: PPUSH
19755: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19759: LD_STRING setGameDifficulty(
19761: PUSH
19762: LD_OWVAR 67
19766: STR
19767: PUSH
19768: LD_STRING )
19770: STR
19771: PPUSH
19772: CALL_OW 559
// end ;
19776: LD_VAR 0 1
19780: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19781: LD_INT 0
19783: PPUSH
// if p2 = stream_mode then
19784: LD_VAR 0 2
19788: PUSH
19789: LD_INT 100
19791: EQUAL
19792: IFFALSE 20795
// begin if not StreamModeActive then
19794: LD_EXP 61
19798: NOT
19799: IFFALSE 19809
// StreamModeActive := true ;
19801: LD_ADDR_EXP 61
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 0 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 0
19816: EQUAL
19817: IFFALSE 19823
// InitStreamMode ;
19819: CALL 21031 0 0
// if p3 = 1 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 1
19830: EQUAL
19831: IFFALSE 19841
// sRocket := true ;
19833: LD_ADDR_EXP 66
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 2 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 2
19848: EQUAL
19849: IFFALSE 19859
// sSpeed := true ;
19851: LD_ADDR_EXP 65
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 3 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 3
19866: EQUAL
19867: IFFALSE 19877
// sEngine := true ;
19869: LD_ADDR_EXP 67
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 4 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 4
19884: EQUAL
19885: IFFALSE 19895
// sSpec := true ;
19887: LD_ADDR_EXP 64
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 5 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 5
19902: EQUAL
19903: IFFALSE 19913
// sLevel := true ;
19905: LD_ADDR_EXP 68
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 6 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 6
19920: EQUAL
19921: IFFALSE 19931
// sArmoury := true ;
19923: LD_ADDR_EXP 69
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 7 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 7
19938: EQUAL
19939: IFFALSE 19949
// sRadar := true ;
19941: LD_ADDR_EXP 70
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 8 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 8
19956: EQUAL
19957: IFFALSE 19967
// sBunker := true ;
19959: LD_ADDR_EXP 71
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 9 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 9
19974: EQUAL
19975: IFFALSE 19985
// sHack := true ;
19977: LD_ADDR_EXP 72
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 10 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 10
19992: EQUAL
19993: IFFALSE 20003
// sFire := true ;
19995: LD_ADDR_EXP 73
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 11 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 11
20010: EQUAL
20011: IFFALSE 20021
// sRefresh := true ;
20013: LD_ADDR_EXP 74
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 12 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 12
20028: EQUAL
20029: IFFALSE 20039
// sExp := true ;
20031: LD_ADDR_EXP 75
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 13 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 13
20046: EQUAL
20047: IFFALSE 20057
// sDepot := true ;
20049: LD_ADDR_EXP 76
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 14 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 14
20064: EQUAL
20065: IFFALSE 20075
// sFlag := true ;
20067: LD_ADDR_EXP 77
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 15 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 15
20082: EQUAL
20083: IFFALSE 20093
// sKamikadze := true ;
20085: LD_ADDR_EXP 85
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 16 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 16
20100: EQUAL
20101: IFFALSE 20111
// sTroll := true ;
20103: LD_ADDR_EXP 86
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 17 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 17
20118: EQUAL
20119: IFFALSE 20129
// sSlow := true ;
20121: LD_ADDR_EXP 87
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 18 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 18
20136: EQUAL
20137: IFFALSE 20147
// sLack := true ;
20139: LD_ADDR_EXP 88
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 19 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 19
20154: EQUAL
20155: IFFALSE 20165
// sTank := true ;
20157: LD_ADDR_EXP 90
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 20 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 20
20172: EQUAL
20173: IFFALSE 20183
// sRemote := true ;
20175: LD_ADDR_EXP 91
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 21 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 21
20190: EQUAL
20191: IFFALSE 20201
// sPowell := true ;
20193: LD_ADDR_EXP 92
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 22 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 22
20208: EQUAL
20209: IFFALSE 20219
// sTeleport := true ;
20211: LD_ADDR_EXP 95
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 23 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 23
20226: EQUAL
20227: IFFALSE 20237
// sOilTower := true ;
20229: LD_ADDR_EXP 97
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 24 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 24
20244: EQUAL
20245: IFFALSE 20255
// sShovel := true ;
20247: LD_ADDR_EXP 98
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 25 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 25
20262: EQUAL
20263: IFFALSE 20273
// sSheik := true ;
20265: LD_ADDR_EXP 99
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 26 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 26
20280: EQUAL
20281: IFFALSE 20291
// sEarthquake := true ;
20283: LD_ADDR_EXP 101
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 27 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 27
20298: EQUAL
20299: IFFALSE 20309
// sAI := true ;
20301: LD_ADDR_EXP 102
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 28 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 28
20316: EQUAL
20317: IFFALSE 20327
// sCargo := true ;
20319: LD_ADDR_EXP 105
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 29 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 29
20334: EQUAL
20335: IFFALSE 20345
// sDLaser := true ;
20337: LD_ADDR_EXP 106
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 30 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 30
20352: EQUAL
20353: IFFALSE 20363
// sExchange := true ;
20355: LD_ADDR_EXP 107
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 31 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 31
20370: EQUAL
20371: IFFALSE 20381
// sFac := true ;
20373: LD_ADDR_EXP 108
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 32 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 32
20388: EQUAL
20389: IFFALSE 20399
// sPower := true ;
20391: LD_ADDR_EXP 109
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 33 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 33
20406: EQUAL
20407: IFFALSE 20417
// sRandom := true ;
20409: LD_ADDR_EXP 110
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 34 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 34
20424: EQUAL
20425: IFFALSE 20435
// sShield := true ;
20427: LD_ADDR_EXP 111
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 35 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 35
20442: EQUAL
20443: IFFALSE 20453
// sTime := true ;
20445: LD_ADDR_EXP 112
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// if p3 = 36 then
20453: LD_VAR 0 3
20457: PUSH
20458: LD_INT 36
20460: EQUAL
20461: IFFALSE 20471
// sTools := true ;
20463: LD_ADDR_EXP 113
20467: PUSH
20468: LD_INT 1
20470: ST_TO_ADDR
// if p3 = 101 then
20471: LD_VAR 0 3
20475: PUSH
20476: LD_INT 101
20478: EQUAL
20479: IFFALSE 20489
// sSold := true ;
20481: LD_ADDR_EXP 78
20485: PUSH
20486: LD_INT 1
20488: ST_TO_ADDR
// if p3 = 102 then
20489: LD_VAR 0 3
20493: PUSH
20494: LD_INT 102
20496: EQUAL
20497: IFFALSE 20507
// sDiff := true ;
20499: LD_ADDR_EXP 79
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// if p3 = 103 then
20507: LD_VAR 0 3
20511: PUSH
20512: LD_INT 103
20514: EQUAL
20515: IFFALSE 20525
// sFog := true ;
20517: LD_ADDR_EXP 82
20521: PUSH
20522: LD_INT 1
20524: ST_TO_ADDR
// if p3 = 104 then
20525: LD_VAR 0 3
20529: PUSH
20530: LD_INT 104
20532: EQUAL
20533: IFFALSE 20543
// sReset := true ;
20535: LD_ADDR_EXP 83
20539: PUSH
20540: LD_INT 1
20542: ST_TO_ADDR
// if p3 = 105 then
20543: LD_VAR 0 3
20547: PUSH
20548: LD_INT 105
20550: EQUAL
20551: IFFALSE 20561
// sSun := true ;
20553: LD_ADDR_EXP 84
20557: PUSH
20558: LD_INT 1
20560: ST_TO_ADDR
// if p3 = 106 then
20561: LD_VAR 0 3
20565: PUSH
20566: LD_INT 106
20568: EQUAL
20569: IFFALSE 20579
// sTiger := true ;
20571: LD_ADDR_EXP 80
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// if p3 = 107 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 107
20586: EQUAL
20587: IFFALSE 20597
// sBomb := true ;
20589: LD_ADDR_EXP 81
20593: PUSH
20594: LD_INT 1
20596: ST_TO_ADDR
// if p3 = 108 then
20597: LD_VAR 0 3
20601: PUSH
20602: LD_INT 108
20604: EQUAL
20605: IFFALSE 20615
// sWound := true ;
20607: LD_ADDR_EXP 89
20611: PUSH
20612: LD_INT 1
20614: ST_TO_ADDR
// if p3 = 109 then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 109
20622: EQUAL
20623: IFFALSE 20633
// sBetray := true ;
20625: LD_ADDR_EXP 93
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// if p3 = 110 then
20633: LD_VAR 0 3
20637: PUSH
20638: LD_INT 110
20640: EQUAL
20641: IFFALSE 20651
// sContamin := true ;
20643: LD_ADDR_EXP 94
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// if p3 = 111 then
20651: LD_VAR 0 3
20655: PUSH
20656: LD_INT 111
20658: EQUAL
20659: IFFALSE 20669
// sOil := true ;
20661: LD_ADDR_EXP 96
20665: PUSH
20666: LD_INT 1
20668: ST_TO_ADDR
// if p3 = 112 then
20669: LD_VAR 0 3
20673: PUSH
20674: LD_INT 112
20676: EQUAL
20677: IFFALSE 20687
// sStu := true ;
20679: LD_ADDR_EXP 100
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
// if p3 = 113 then
20687: LD_VAR 0 3
20691: PUSH
20692: LD_INT 113
20694: EQUAL
20695: IFFALSE 20705
// sBazooka := true ;
20697: LD_ADDR_EXP 103
20701: PUSH
20702: LD_INT 1
20704: ST_TO_ADDR
// if p3 = 114 then
20705: LD_VAR 0 3
20709: PUSH
20710: LD_INT 114
20712: EQUAL
20713: IFFALSE 20723
// sMortar := true ;
20715: LD_ADDR_EXP 104
20719: PUSH
20720: LD_INT 1
20722: ST_TO_ADDR
// if p3 = 115 then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 115
20730: EQUAL
20731: IFFALSE 20741
// sRanger := true ;
20733: LD_ADDR_EXP 114
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// if p3 = 116 then
20741: LD_VAR 0 3
20745: PUSH
20746: LD_INT 116
20748: EQUAL
20749: IFFALSE 20759
// sComputer := true ;
20751: LD_ADDR_EXP 115
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// if p3 = 117 then
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 117
20766: EQUAL
20767: IFFALSE 20777
// s30 := true ;
20769: LD_ADDR_EXP 116
20773: PUSH
20774: LD_INT 1
20776: ST_TO_ADDR
// if p3 = 118 then
20777: LD_VAR 0 3
20781: PUSH
20782: LD_INT 118
20784: EQUAL
20785: IFFALSE 20795
// s60 := true ;
20787: LD_ADDR_EXP 117
20791: PUSH
20792: LD_INT 1
20794: ST_TO_ADDR
// end ; if p2 = hack_mode then
20795: LD_VAR 0 2
20799: PUSH
20800: LD_INT 101
20802: EQUAL
20803: IFFALSE 20931
// begin case p3 of 1 :
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 1
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20825
20818: POP
// hHackUnlimitedResources ; 2 :
20819: CALL 33102 0 0
20823: GO 20931
20825: LD_INT 2
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20840
20833: POP
// hHackSetLevel10 ; 3 :
20834: CALL 33235 0 0
20838: GO 20931
20840: LD_INT 3
20842: DOUBLE
20843: EQUAL
20844: IFTRUE 20848
20846: GO 20855
20848: POP
// hHackSetLevel10YourUnits ; 4 :
20849: CALL 33320 0 0
20853: GO 20931
20855: LD_INT 4
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20870
20863: POP
// hHackInvincible ; 5 :
20864: CALL 33768 0 0
20868: GO 20931
20870: LD_INT 5
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20885
20878: POP
// hHackInvisible ; 6 :
20879: CALL 33879 0 0
20883: GO 20931
20885: LD_INT 6
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20900
20893: POP
// hHackChangeYourSide ; 7 :
20894: CALL 33936 0 0
20898: GO 20931
20900: LD_INT 7
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20915
20908: POP
// hHackChangeUnitSide ; 8 :
20909: CALL 33978 0 0
20913: GO 20931
20915: LD_INT 8
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20930
20923: POP
// hHackFog ; end ;
20924: CALL 34079 0 0
20928: GO 20931
20930: POP
// end ; if p2 = game_save_mode then
20931: LD_VAR 0 2
20935: PUSH
20936: LD_INT 102
20938: EQUAL
20939: IFFALSE 21004
// begin if p3 = 1 then
20941: LD_VAR 0 3
20945: PUSH
20946: LD_INT 1
20948: EQUAL
20949: IFFALSE 20961
// globalGameSaveCounter := p4 ;
20951: LD_ADDR_EXP 60
20955: PUSH
20956: LD_VAR 0 4
20960: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 2
20968: EQUAL
20969: PUSH
20970: LD_EXP 60
20974: AND
20975: IFFALSE 20994
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20977: LD_STRING setGameSaveCounter(
20979: PUSH
20980: LD_EXP 60
20984: STR
20985: PUSH
20986: LD_STRING )
20988: STR
20989: PPUSH
20990: CALL_OW 559
// display_strings := globalGameSaveCounter ;
20994: LD_ADDR_OWVAR 47
20998: PUSH
20999: LD_EXP 60
21003: ST_TO_ADDR
// end ; end ;
21004: LD_VAR 0 7
21008: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21009: GO 21011
21011: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21012: LD_STRING initStreamRollete();
21014: PPUSH
21015: CALL_OW 559
// InitStreamMode ;
21019: CALL 21031 0 0
// DefineStreamItems ( false ) ;
21023: LD_INT 0
21025: PPUSH
21026: CALL 21495 0 1
// end ;
21030: END
// function InitStreamMode ; begin
21031: LD_INT 0
21033: PPUSH
// streamModeActive := false ;
21034: LD_ADDR_EXP 61
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// normalCounter := 36 ;
21042: LD_ADDR_EXP 62
21046: PUSH
21047: LD_INT 36
21049: ST_TO_ADDR
// hardcoreCounter := 18 ;
21050: LD_ADDR_EXP 63
21054: PUSH
21055: LD_INT 18
21057: ST_TO_ADDR
// sRocket := false ;
21058: LD_ADDR_EXP 66
21062: PUSH
21063: LD_INT 0
21065: ST_TO_ADDR
// sSpeed := false ;
21066: LD_ADDR_EXP 65
21070: PUSH
21071: LD_INT 0
21073: ST_TO_ADDR
// sEngine := false ;
21074: LD_ADDR_EXP 67
21078: PUSH
21079: LD_INT 0
21081: ST_TO_ADDR
// sSpec := false ;
21082: LD_ADDR_EXP 64
21086: PUSH
21087: LD_INT 0
21089: ST_TO_ADDR
// sLevel := false ;
21090: LD_ADDR_EXP 68
21094: PUSH
21095: LD_INT 0
21097: ST_TO_ADDR
// sArmoury := false ;
21098: LD_ADDR_EXP 69
21102: PUSH
21103: LD_INT 0
21105: ST_TO_ADDR
// sRadar := false ;
21106: LD_ADDR_EXP 70
21110: PUSH
21111: LD_INT 0
21113: ST_TO_ADDR
// sBunker := false ;
21114: LD_ADDR_EXP 71
21118: PUSH
21119: LD_INT 0
21121: ST_TO_ADDR
// sHack := false ;
21122: LD_ADDR_EXP 72
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// sFire := false ;
21130: LD_ADDR_EXP 73
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// sRefresh := false ;
21138: LD_ADDR_EXP 74
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// sExp := false ;
21146: LD_ADDR_EXP 75
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// sDepot := false ;
21154: LD_ADDR_EXP 76
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// sFlag := false ;
21162: LD_ADDR_EXP 77
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// sKamikadze := false ;
21170: LD_ADDR_EXP 85
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
// sTroll := false ;
21178: LD_ADDR_EXP 86
21182: PUSH
21183: LD_INT 0
21185: ST_TO_ADDR
// sSlow := false ;
21186: LD_ADDR_EXP 87
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// sLack := false ;
21194: LD_ADDR_EXP 88
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// sTank := false ;
21202: LD_ADDR_EXP 90
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// sRemote := false ;
21210: LD_ADDR_EXP 91
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// sPowell := false ;
21218: LD_ADDR_EXP 92
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
// sTeleport := false ;
21226: LD_ADDR_EXP 95
21230: PUSH
21231: LD_INT 0
21233: ST_TO_ADDR
// sOilTower := false ;
21234: LD_ADDR_EXP 97
21238: PUSH
21239: LD_INT 0
21241: ST_TO_ADDR
// sShovel := false ;
21242: LD_ADDR_EXP 98
21246: PUSH
21247: LD_INT 0
21249: ST_TO_ADDR
// sSheik := false ;
21250: LD_ADDR_EXP 99
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// sEarthquake := false ;
21258: LD_ADDR_EXP 101
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// sAI := false ;
21266: LD_ADDR_EXP 102
21270: PUSH
21271: LD_INT 0
21273: ST_TO_ADDR
// sCargo := false ;
21274: LD_ADDR_EXP 105
21278: PUSH
21279: LD_INT 0
21281: ST_TO_ADDR
// sDLaser := false ;
21282: LD_ADDR_EXP 106
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// sExchange := false ;
21290: LD_ADDR_EXP 107
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// sFac := false ;
21298: LD_ADDR_EXP 108
21302: PUSH
21303: LD_INT 0
21305: ST_TO_ADDR
// sPower := false ;
21306: LD_ADDR_EXP 109
21310: PUSH
21311: LD_INT 0
21313: ST_TO_ADDR
// sRandom := false ;
21314: LD_ADDR_EXP 110
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// sShield := false ;
21322: LD_ADDR_EXP 111
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// sTime := false ;
21330: LD_ADDR_EXP 112
21334: PUSH
21335: LD_INT 0
21337: ST_TO_ADDR
// sTools := false ;
21338: LD_ADDR_EXP 113
21342: PUSH
21343: LD_INT 0
21345: ST_TO_ADDR
// sSold := false ;
21346: LD_ADDR_EXP 78
21350: PUSH
21351: LD_INT 0
21353: ST_TO_ADDR
// sDiff := false ;
21354: LD_ADDR_EXP 79
21358: PUSH
21359: LD_INT 0
21361: ST_TO_ADDR
// sFog := false ;
21362: LD_ADDR_EXP 82
21366: PUSH
21367: LD_INT 0
21369: ST_TO_ADDR
// sReset := false ;
21370: LD_ADDR_EXP 83
21374: PUSH
21375: LD_INT 0
21377: ST_TO_ADDR
// sSun := false ;
21378: LD_ADDR_EXP 84
21382: PUSH
21383: LD_INT 0
21385: ST_TO_ADDR
// sTiger := false ;
21386: LD_ADDR_EXP 80
21390: PUSH
21391: LD_INT 0
21393: ST_TO_ADDR
// sBomb := false ;
21394: LD_ADDR_EXP 81
21398: PUSH
21399: LD_INT 0
21401: ST_TO_ADDR
// sWound := false ;
21402: LD_ADDR_EXP 89
21406: PUSH
21407: LD_INT 0
21409: ST_TO_ADDR
// sBetray := false ;
21410: LD_ADDR_EXP 93
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
// sContamin := false ;
21418: LD_ADDR_EXP 94
21422: PUSH
21423: LD_INT 0
21425: ST_TO_ADDR
// sOil := false ;
21426: LD_ADDR_EXP 96
21430: PUSH
21431: LD_INT 0
21433: ST_TO_ADDR
// sStu := false ;
21434: LD_ADDR_EXP 100
21438: PUSH
21439: LD_INT 0
21441: ST_TO_ADDR
// sBazooka := false ;
21442: LD_ADDR_EXP 103
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// sMortar := false ;
21450: LD_ADDR_EXP 104
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// sRanger := false ;
21458: LD_ADDR_EXP 114
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// sComputer := false ;
21466: LD_ADDR_EXP 115
21470: PUSH
21471: LD_INT 0
21473: ST_TO_ADDR
// s30 := false ;
21474: LD_ADDR_EXP 116
21478: PUSH
21479: LD_INT 0
21481: ST_TO_ADDR
// s60 := false ;
21482: LD_ADDR_EXP 117
21486: PUSH
21487: LD_INT 0
21489: ST_TO_ADDR
// end ;
21490: LD_VAR 0 1
21494: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
21501: PPUSH
21502: PPUSH
21503: PPUSH
// result := [ ] ;
21504: LD_ADDR_VAR 0 2
21508: PUSH
21509: EMPTY
21510: ST_TO_ADDR
// if campaign_id = 1 then
21511: LD_OWVAR 69
21515: PUSH
21516: LD_INT 1
21518: EQUAL
21519: IFFALSE 24685
// begin case mission_number of 1 :
21521: LD_OWVAR 70
21525: PUSH
21526: LD_INT 1
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21610
21534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21535: LD_ADDR_VAR 0 2
21539: PUSH
21540: LD_INT 2
21542: PUSH
21543: LD_INT 4
21545: PUSH
21546: LD_INT 11
21548: PUSH
21549: LD_INT 12
21551: PUSH
21552: LD_INT 15
21554: PUSH
21555: LD_INT 16
21557: PUSH
21558: LD_INT 22
21560: PUSH
21561: LD_INT 23
21563: PUSH
21564: LD_INT 26
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 101
21580: PUSH
21581: LD_INT 102
21583: PUSH
21584: LD_INT 106
21586: PUSH
21587: LD_INT 116
21589: PUSH
21590: LD_INT 117
21592: PUSH
21593: LD_INT 118
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: ST_TO_ADDR
21608: GO 24683
21610: LD_INT 2
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21702
21618: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 4
21629: PUSH
21630: LD_INT 11
21632: PUSH
21633: LD_INT 12
21635: PUSH
21636: LD_INT 15
21638: PUSH
21639: LD_INT 16
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_INT 23
21647: PUSH
21648: LD_INT 26
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 105
21670: PUSH
21671: LD_INT 106
21673: PUSH
21674: LD_INT 108
21676: PUSH
21677: LD_INT 116
21679: PUSH
21680: LD_INT 117
21682: PUSH
21683: LD_INT 118
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: ST_TO_ADDR
21700: GO 24683
21702: LD_INT 3
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21798
21710: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: LD_INT 4
21721: PUSH
21722: LD_INT 5
21724: PUSH
21725: LD_INT 11
21727: PUSH
21728: LD_INT 12
21730: PUSH
21731: LD_INT 15
21733: PUSH
21734: LD_INT 16
21736: PUSH
21737: LD_INT 22
21739: PUSH
21740: LD_INT 26
21742: PUSH
21743: LD_INT 36
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 105
21766: PUSH
21767: LD_INT 106
21769: PUSH
21770: LD_INT 108
21772: PUSH
21773: LD_INT 116
21775: PUSH
21776: LD_INT 117
21778: PUSH
21779: LD_INT 118
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: ST_TO_ADDR
21796: GO 24683
21798: LD_INT 4
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 21902
21806: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21807: LD_ADDR_VAR 0 2
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: LD_INT 4
21817: PUSH
21818: LD_INT 5
21820: PUSH
21821: LD_INT 8
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 22
21838: PUSH
21839: LD_INT 23
21841: PUSH
21842: LD_INT 26
21844: PUSH
21845: LD_INT 36
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 105
21870: PUSH
21871: LD_INT 106
21873: PUSH
21874: LD_INT 108
21876: PUSH
21877: LD_INT 116
21879: PUSH
21880: LD_INT 117
21882: PUSH
21883: LD_INT 118
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: ST_TO_ADDR
21900: GO 24683
21902: LD_INT 5
21904: DOUBLE
21905: EQUAL
21906: IFTRUE 21910
21908: GO 22022
21910: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: LD_INT 4
21921: PUSH
21922: LD_INT 5
21924: PUSH
21925: LD_INT 6
21927: PUSH
21928: LD_INT 8
21930: PUSH
21931: LD_INT 11
21933: PUSH
21934: LD_INT 12
21936: PUSH
21937: LD_INT 15
21939: PUSH
21940: LD_INT 16
21942: PUSH
21943: LD_INT 22
21945: PUSH
21946: LD_INT 23
21948: PUSH
21949: LD_INT 25
21951: PUSH
21952: LD_INT 26
21954: PUSH
21955: LD_INT 36
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 101
21976: PUSH
21977: LD_INT 102
21979: PUSH
21980: LD_INT 105
21982: PUSH
21983: LD_INT 106
21985: PUSH
21986: LD_INT 108
21988: PUSH
21989: LD_INT 109
21991: PUSH
21992: LD_INT 112
21994: PUSH
21995: LD_INT 116
21997: PUSH
21998: LD_INT 117
22000: PUSH
22001: LD_INT 118
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 24683
22022: LD_INT 6
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22030
22028: GO 22162
22030: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22031: LD_ADDR_VAR 0 2
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 4
22041: PUSH
22042: LD_INT 5
22044: PUSH
22045: LD_INT 6
22047: PUSH
22048: LD_INT 8
22050: PUSH
22051: LD_INT 11
22053: PUSH
22054: LD_INT 12
22056: PUSH
22057: LD_INT 15
22059: PUSH
22060: LD_INT 16
22062: PUSH
22063: LD_INT 20
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 22
22071: PUSH
22072: LD_INT 23
22074: PUSH
22075: LD_INT 25
22077: PUSH
22078: LD_INT 26
22080: PUSH
22081: LD_INT 30
22083: PUSH
22084: LD_INT 31
22086: PUSH
22087: LD_INT 32
22089: PUSH
22090: LD_INT 36
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 101
22116: PUSH
22117: LD_INT 102
22119: PUSH
22120: LD_INT 105
22122: PUSH
22123: LD_INT 106
22125: PUSH
22126: LD_INT 108
22128: PUSH
22129: LD_INT 109
22131: PUSH
22132: LD_INT 112
22134: PUSH
22135: LD_INT 116
22137: PUSH
22138: LD_INT 117
22140: PUSH
22141: LD_INT 118
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: ST_TO_ADDR
22160: GO 24683
22162: LD_INT 7
22164: DOUBLE
22165: EQUAL
22166: IFTRUE 22170
22168: GO 22282
22170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22171: LD_ADDR_VAR 0 2
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 4
22181: PUSH
22182: LD_INT 5
22184: PUSH
22185: LD_INT 7
22187: PUSH
22188: LD_INT 11
22190: PUSH
22191: LD_INT 12
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 16
22199: PUSH
22200: LD_INT 20
22202: PUSH
22203: LD_INT 21
22205: PUSH
22206: LD_INT 22
22208: PUSH
22209: LD_INT 23
22211: PUSH
22212: LD_INT 25
22214: PUSH
22215: LD_INT 26
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 101
22236: PUSH
22237: LD_INT 102
22239: PUSH
22240: LD_INT 103
22242: PUSH
22243: LD_INT 105
22245: PUSH
22246: LD_INT 106
22248: PUSH
22249: LD_INT 108
22251: PUSH
22252: LD_INT 112
22254: PUSH
22255: LD_INT 116
22257: PUSH
22258: LD_INT 117
22260: PUSH
22261: LD_INT 118
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: ST_TO_ADDR
22280: GO 24683
22282: LD_INT 8
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22430
22290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 7
22310: PUSH
22311: LD_INT 8
22313: PUSH
22314: LD_INT 11
22316: PUSH
22317: LD_INT 12
22319: PUSH
22320: LD_INT 15
22322: PUSH
22323: LD_INT 16
22325: PUSH
22326: LD_INT 20
22328: PUSH
22329: LD_INT 21
22331: PUSH
22332: LD_INT 22
22334: PUSH
22335: LD_INT 23
22337: PUSH
22338: LD_INT 25
22340: PUSH
22341: LD_INT 26
22343: PUSH
22344: LD_INT 30
22346: PUSH
22347: LD_INT 31
22349: PUSH
22350: LD_INT 32
22352: PUSH
22353: LD_INT 36
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 101
22380: PUSH
22381: LD_INT 102
22383: PUSH
22384: LD_INT 103
22386: PUSH
22387: LD_INT 105
22389: PUSH
22390: LD_INT 106
22392: PUSH
22393: LD_INT 108
22395: PUSH
22396: LD_INT 109
22398: PUSH
22399: LD_INT 112
22401: PUSH
22402: LD_INT 116
22404: PUSH
22405: LD_INT 117
22407: PUSH
22408: LD_INT 118
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: ST_TO_ADDR
22428: GO 24683
22430: LD_INT 9
22432: DOUBLE
22433: EQUAL
22434: IFTRUE 22438
22436: GO 22586
22438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22439: LD_ADDR_VAR 0 2
22443: PUSH
22444: LD_INT 2
22446: PUSH
22447: LD_INT 4
22449: PUSH
22450: LD_INT 5
22452: PUSH
22453: LD_INT 6
22455: PUSH
22456: LD_INT 7
22458: PUSH
22459: LD_INT 8
22461: PUSH
22462: LD_INT 11
22464: PUSH
22465: LD_INT 12
22467: PUSH
22468: LD_INT 15
22470: PUSH
22471: LD_INT 16
22473: PUSH
22474: LD_INT 20
22476: PUSH
22477: LD_INT 21
22479: PUSH
22480: LD_INT 22
22482: PUSH
22483: LD_INT 23
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 26
22491: PUSH
22492: LD_INT 28
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 31
22500: PUSH
22501: LD_INT 32
22503: PUSH
22504: LD_INT 36
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 101
22532: PUSH
22533: LD_INT 102
22535: PUSH
22536: LD_INT 103
22538: PUSH
22539: LD_INT 105
22541: PUSH
22542: LD_INT 106
22544: PUSH
22545: LD_INT 108
22547: PUSH
22548: LD_INT 109
22550: PUSH
22551: LD_INT 112
22553: PUSH
22554: LD_INT 114
22556: PUSH
22557: LD_INT 116
22559: PUSH
22560: LD_INT 117
22562: PUSH
22563: LD_INT 118
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: ST_TO_ADDR
22584: GO 24683
22586: LD_INT 10
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22790
22594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22595: LD_ADDR_VAR 0 2
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: LD_INT 4
22605: PUSH
22606: LD_INT 5
22608: PUSH
22609: LD_INT 6
22611: PUSH
22612: LD_INT 7
22614: PUSH
22615: LD_INT 8
22617: PUSH
22618: LD_INT 9
22620: PUSH
22621: LD_INT 10
22623: PUSH
22624: LD_INT 11
22626: PUSH
22627: LD_INT 12
22629: PUSH
22630: LD_INT 13
22632: PUSH
22633: LD_INT 14
22635: PUSH
22636: LD_INT 15
22638: PUSH
22639: LD_INT 16
22641: PUSH
22642: LD_INT 17
22644: PUSH
22645: LD_INT 18
22647: PUSH
22648: LD_INT 19
22650: PUSH
22651: LD_INT 20
22653: PUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 22
22659: PUSH
22660: LD_INT 23
22662: PUSH
22663: LD_INT 24
22665: PUSH
22666: LD_INT 25
22668: PUSH
22669: LD_INT 26
22671: PUSH
22672: LD_INT 28
22674: PUSH
22675: LD_INT 30
22677: PUSH
22678: LD_INT 31
22680: PUSH
22681: LD_INT 32
22683: PUSH
22684: LD_INT 36
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 101
22720: PUSH
22721: LD_INT 102
22723: PUSH
22724: LD_INT 103
22726: PUSH
22727: LD_INT 104
22729: PUSH
22730: LD_INT 105
22732: PUSH
22733: LD_INT 106
22735: PUSH
22736: LD_INT 107
22738: PUSH
22739: LD_INT 108
22741: PUSH
22742: LD_INT 109
22744: PUSH
22745: LD_INT 110
22747: PUSH
22748: LD_INT 111
22750: PUSH
22751: LD_INT 112
22753: PUSH
22754: LD_INT 114
22756: PUSH
22757: LD_INT 116
22759: PUSH
22760: LD_INT 117
22762: PUSH
22763: LD_INT 118
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: ST_TO_ADDR
22788: GO 24683
22790: LD_INT 11
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 23002
22798: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22799: LD_ADDR_VAR 0 2
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 9
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 13
22839: PUSH
22840: LD_INT 14
22842: PUSH
22843: LD_INT 15
22845: PUSH
22846: LD_INT 16
22848: PUSH
22849: LD_INT 17
22851: PUSH
22852: LD_INT 18
22854: PUSH
22855: LD_INT 19
22857: PUSH
22858: LD_INT 20
22860: PUSH
22861: LD_INT 21
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 23
22869: PUSH
22870: LD_INT 24
22872: PUSH
22873: LD_INT 25
22875: PUSH
22876: LD_INT 26
22878: PUSH
22879: LD_INT 28
22881: PUSH
22882: LD_INT 30
22884: PUSH
22885: LD_INT 31
22887: PUSH
22888: LD_INT 32
22890: PUSH
22891: LD_INT 34
22893: PUSH
22894: LD_INT 36
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 101
22932: PUSH
22933: LD_INT 102
22935: PUSH
22936: LD_INT 103
22938: PUSH
22939: LD_INT 104
22941: PUSH
22942: LD_INT 105
22944: PUSH
22945: LD_INT 106
22947: PUSH
22948: LD_INT 107
22950: PUSH
22951: LD_INT 108
22953: PUSH
22954: LD_INT 109
22956: PUSH
22957: LD_INT 110
22959: PUSH
22960: LD_INT 111
22962: PUSH
22963: LD_INT 112
22965: PUSH
22966: LD_INT 114
22968: PUSH
22969: LD_INT 116
22971: PUSH
22972: LD_INT 117
22974: PUSH
22975: LD_INT 118
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 24683
23002: LD_INT 12
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23230
23010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: LD_INT 6
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 11
23048: PUSH
23049: LD_INT 12
23051: PUSH
23052: LD_INT 13
23054: PUSH
23055: LD_INT 14
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 16
23063: PUSH
23064: LD_INT 17
23066: PUSH
23067: LD_INT 18
23069: PUSH
23070: LD_INT 19
23072: PUSH
23073: LD_INT 20
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_INT 23
23084: PUSH
23085: LD_INT 24
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 26
23093: PUSH
23094: LD_INT 27
23096: PUSH
23097: LD_INT 28
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 31
23105: PUSH
23106: LD_INT 32
23108: PUSH
23109: LD_INT 33
23111: PUSH
23112: LD_INT 34
23114: PUSH
23115: LD_INT 36
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 101
23156: PUSH
23157: LD_INT 102
23159: PUSH
23160: LD_INT 103
23162: PUSH
23163: LD_INT 104
23165: PUSH
23166: LD_INT 105
23168: PUSH
23169: LD_INT 106
23171: PUSH
23172: LD_INT 107
23174: PUSH
23175: LD_INT 108
23177: PUSH
23178: LD_INT 109
23180: PUSH
23181: LD_INT 110
23183: PUSH
23184: LD_INT 111
23186: PUSH
23187: LD_INT 112
23189: PUSH
23190: LD_INT 113
23192: PUSH
23193: LD_INT 114
23195: PUSH
23196: LD_INT 116
23198: PUSH
23199: LD_INT 117
23201: PUSH
23202: LD_INT 118
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: ST_TO_ADDR
23228: GO 24683
23230: LD_INT 13
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 23446
23238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23239: LD_ADDR_VAR 0 2
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: LD_INT 4
23255: PUSH
23256: LD_INT 5
23258: PUSH
23259: LD_INT 8
23261: PUSH
23262: LD_INT 9
23264: PUSH
23265: LD_INT 10
23267: PUSH
23268: LD_INT 11
23270: PUSH
23271: LD_INT 12
23273: PUSH
23274: LD_INT 14
23276: PUSH
23277: LD_INT 15
23279: PUSH
23280: LD_INT 16
23282: PUSH
23283: LD_INT 17
23285: PUSH
23286: LD_INT 18
23288: PUSH
23289: LD_INT 19
23291: PUSH
23292: LD_INT 20
23294: PUSH
23295: LD_INT 21
23297: PUSH
23298: LD_INT 22
23300: PUSH
23301: LD_INT 23
23303: PUSH
23304: LD_INT 24
23306: PUSH
23307: LD_INT 25
23309: PUSH
23310: LD_INT 26
23312: PUSH
23313: LD_INT 27
23315: PUSH
23316: LD_INT 28
23318: PUSH
23319: LD_INT 30
23321: PUSH
23322: LD_INT 31
23324: PUSH
23325: LD_INT 32
23327: PUSH
23328: LD_INT 33
23330: PUSH
23331: LD_INT 34
23333: PUSH
23334: LD_INT 36
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 101
23372: PUSH
23373: LD_INT 102
23375: PUSH
23376: LD_INT 103
23378: PUSH
23379: LD_INT 104
23381: PUSH
23382: LD_INT 105
23384: PUSH
23385: LD_INT 106
23387: PUSH
23388: LD_INT 107
23390: PUSH
23391: LD_INT 108
23393: PUSH
23394: LD_INT 109
23396: PUSH
23397: LD_INT 110
23399: PUSH
23400: LD_INT 111
23402: PUSH
23403: LD_INT 112
23405: PUSH
23406: LD_INT 113
23408: PUSH
23409: LD_INT 114
23411: PUSH
23412: LD_INT 116
23414: PUSH
23415: LD_INT 117
23417: PUSH
23418: LD_INT 118
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: ST_TO_ADDR
23444: GO 24683
23446: LD_INT 14
23448: DOUBLE
23449: EQUAL
23450: IFTRUE 23454
23452: GO 23678
23454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23455: LD_ADDR_VAR 0 2
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 3
23468: PUSH
23469: LD_INT 4
23471: PUSH
23472: LD_INT 5
23474: PUSH
23475: LD_INT 6
23477: PUSH
23478: LD_INT 7
23480: PUSH
23481: LD_INT 8
23483: PUSH
23484: LD_INT 9
23486: PUSH
23487: LD_INT 10
23489: PUSH
23490: LD_INT 11
23492: PUSH
23493: LD_INT 12
23495: PUSH
23496: LD_INT 13
23498: PUSH
23499: LD_INT 14
23501: PUSH
23502: LD_INT 15
23504: PUSH
23505: LD_INT 16
23507: PUSH
23508: LD_INT 17
23510: PUSH
23511: LD_INT 18
23513: PUSH
23514: LD_INT 19
23516: PUSH
23517: LD_INT 20
23519: PUSH
23520: LD_INT 21
23522: PUSH
23523: LD_INT 22
23525: PUSH
23526: LD_INT 23
23528: PUSH
23529: LD_INT 24
23531: PUSH
23532: LD_INT 25
23534: PUSH
23535: LD_INT 26
23537: PUSH
23538: LD_INT 27
23540: PUSH
23541: LD_INT 28
23543: PUSH
23544: LD_INT 29
23546: PUSH
23547: LD_INT 30
23549: PUSH
23550: LD_INT 31
23552: PUSH
23553: LD_INT 32
23555: PUSH
23556: LD_INT 33
23558: PUSH
23559: LD_INT 34
23561: PUSH
23562: LD_INT 36
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 101
23604: PUSH
23605: LD_INT 102
23607: PUSH
23608: LD_INT 103
23610: PUSH
23611: LD_INT 104
23613: PUSH
23614: LD_INT 105
23616: PUSH
23617: LD_INT 106
23619: PUSH
23620: LD_INT 107
23622: PUSH
23623: LD_INT 108
23625: PUSH
23626: LD_INT 109
23628: PUSH
23629: LD_INT 110
23631: PUSH
23632: LD_INT 111
23634: PUSH
23635: LD_INT 112
23637: PUSH
23638: LD_INT 113
23640: PUSH
23641: LD_INT 114
23643: PUSH
23644: LD_INT 116
23646: PUSH
23647: LD_INT 117
23649: PUSH
23650: LD_INT 118
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 24683
23678: LD_INT 15
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23910
23686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23687: LD_ADDR_VAR 0 2
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 3
23700: PUSH
23701: LD_INT 4
23703: PUSH
23704: LD_INT 5
23706: PUSH
23707: LD_INT 6
23709: PUSH
23710: LD_INT 7
23712: PUSH
23713: LD_INT 8
23715: PUSH
23716: LD_INT 9
23718: PUSH
23719: LD_INT 10
23721: PUSH
23722: LD_INT 11
23724: PUSH
23725: LD_INT 12
23727: PUSH
23728: LD_INT 13
23730: PUSH
23731: LD_INT 14
23733: PUSH
23734: LD_INT 15
23736: PUSH
23737: LD_INT 16
23739: PUSH
23740: LD_INT 17
23742: PUSH
23743: LD_INT 18
23745: PUSH
23746: LD_INT 19
23748: PUSH
23749: LD_INT 20
23751: PUSH
23752: LD_INT 21
23754: PUSH
23755: LD_INT 22
23757: PUSH
23758: LD_INT 23
23760: PUSH
23761: LD_INT 24
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 26
23769: PUSH
23770: LD_INT 27
23772: PUSH
23773: LD_INT 28
23775: PUSH
23776: LD_INT 29
23778: PUSH
23779: LD_INT 30
23781: PUSH
23782: LD_INT 31
23784: PUSH
23785: LD_INT 32
23787: PUSH
23788: LD_INT 33
23790: PUSH
23791: LD_INT 34
23793: PUSH
23794: LD_INT 36
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 101
23836: PUSH
23837: LD_INT 102
23839: PUSH
23840: LD_INT 103
23842: PUSH
23843: LD_INT 104
23845: PUSH
23846: LD_INT 105
23848: PUSH
23849: LD_INT 106
23851: PUSH
23852: LD_INT 107
23854: PUSH
23855: LD_INT 108
23857: PUSH
23858: LD_INT 109
23860: PUSH
23861: LD_INT 110
23863: PUSH
23864: LD_INT 111
23866: PUSH
23867: LD_INT 112
23869: PUSH
23870: LD_INT 113
23872: PUSH
23873: LD_INT 114
23875: PUSH
23876: LD_INT 116
23878: PUSH
23879: LD_INT 117
23881: PUSH
23882: LD_INT 118
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: ST_TO_ADDR
23908: GO 24683
23910: LD_INT 16
23912: DOUBLE
23913: EQUAL
23914: IFTRUE 23918
23916: GO 24054
23918: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 4
23929: PUSH
23930: LD_INT 5
23932: PUSH
23933: LD_INT 7
23935: PUSH
23936: LD_INT 11
23938: PUSH
23939: LD_INT 12
23941: PUSH
23942: LD_INT 15
23944: PUSH
23945: LD_INT 16
23947: PUSH
23948: LD_INT 20
23950: PUSH
23951: LD_INT 21
23953: PUSH
23954: LD_INT 22
23956: PUSH
23957: LD_INT 23
23959: PUSH
23960: LD_INT 25
23962: PUSH
23963: LD_INT 26
23965: PUSH
23966: LD_INT 30
23968: PUSH
23969: LD_INT 31
23971: PUSH
23972: LD_INT 32
23974: PUSH
23975: LD_INT 33
23977: PUSH
23978: LD_INT 34
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 101
24004: PUSH
24005: LD_INT 102
24007: PUSH
24008: LD_INT 103
24010: PUSH
24011: LD_INT 106
24013: PUSH
24014: LD_INT 108
24016: PUSH
24017: LD_INT 112
24019: PUSH
24020: LD_INT 113
24022: PUSH
24023: LD_INT 114
24025: PUSH
24026: LD_INT 116
24028: PUSH
24029: LD_INT 117
24031: PUSH
24032: LD_INT 118
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 24683
24054: LD_INT 17
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24286
24062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24063: LD_ADDR_VAR 0 2
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: LD_INT 3
24076: PUSH
24077: LD_INT 4
24079: PUSH
24080: LD_INT 5
24082: PUSH
24083: LD_INT 6
24085: PUSH
24086: LD_INT 7
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: LD_INT 9
24094: PUSH
24095: LD_INT 10
24097: PUSH
24098: LD_INT 11
24100: PUSH
24101: LD_INT 12
24103: PUSH
24104: LD_INT 13
24106: PUSH
24107: LD_INT 14
24109: PUSH
24110: LD_INT 15
24112: PUSH
24113: LD_INT 16
24115: PUSH
24116: LD_INT 17
24118: PUSH
24119: LD_INT 18
24121: PUSH
24122: LD_INT 19
24124: PUSH
24125: LD_INT 20
24127: PUSH
24128: LD_INT 21
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_INT 23
24136: PUSH
24137: LD_INT 24
24139: PUSH
24140: LD_INT 25
24142: PUSH
24143: LD_INT 26
24145: PUSH
24146: LD_INT 27
24148: PUSH
24149: LD_INT 28
24151: PUSH
24152: LD_INT 29
24154: PUSH
24155: LD_INT 30
24157: PUSH
24158: LD_INT 31
24160: PUSH
24161: LD_INT 32
24163: PUSH
24164: LD_INT 33
24166: PUSH
24167: LD_INT 34
24169: PUSH
24170: LD_INT 36
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 101
24212: PUSH
24213: LD_INT 102
24215: PUSH
24216: LD_INT 103
24218: PUSH
24219: LD_INT 104
24221: PUSH
24222: LD_INT 105
24224: PUSH
24225: LD_INT 106
24227: PUSH
24228: LD_INT 107
24230: PUSH
24231: LD_INT 108
24233: PUSH
24234: LD_INT 109
24236: PUSH
24237: LD_INT 110
24239: PUSH
24240: LD_INT 111
24242: PUSH
24243: LD_INT 112
24245: PUSH
24246: LD_INT 113
24248: PUSH
24249: LD_INT 114
24251: PUSH
24252: LD_INT 116
24254: PUSH
24255: LD_INT 117
24257: PUSH
24258: LD_INT 118
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: ST_TO_ADDR
24284: GO 24683
24286: LD_INT 18
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24442
24294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24295: LD_ADDR_VAR 0 2
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 4
24305: PUSH
24306: LD_INT 5
24308: PUSH
24309: LD_INT 7
24311: PUSH
24312: LD_INT 11
24314: PUSH
24315: LD_INT 12
24317: PUSH
24318: LD_INT 15
24320: PUSH
24321: LD_INT 16
24323: PUSH
24324: LD_INT 20
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 22
24332: PUSH
24333: LD_INT 23
24335: PUSH
24336: LD_INT 25
24338: PUSH
24339: LD_INT 26
24341: PUSH
24342: LD_INT 30
24344: PUSH
24345: LD_INT 31
24347: PUSH
24348: LD_INT 32
24350: PUSH
24351: LD_INT 33
24353: PUSH
24354: LD_INT 34
24356: PUSH
24357: LD_INT 35
24359: PUSH
24360: LD_INT 36
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 101
24388: PUSH
24389: LD_INT 102
24391: PUSH
24392: LD_INT 103
24394: PUSH
24395: LD_INT 106
24397: PUSH
24398: LD_INT 108
24400: PUSH
24401: LD_INT 112
24403: PUSH
24404: LD_INT 113
24406: PUSH
24407: LD_INT 114
24409: PUSH
24410: LD_INT 115
24412: PUSH
24413: LD_INT 116
24415: PUSH
24416: LD_INT 117
24418: PUSH
24419: LD_INT 118
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: ST_TO_ADDR
24440: GO 24683
24442: LD_INT 19
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24682
24450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24451: LD_ADDR_VAR 0 2
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 3
24464: PUSH
24465: LD_INT 4
24467: PUSH
24468: LD_INT 5
24470: PUSH
24471: LD_INT 6
24473: PUSH
24474: LD_INT 7
24476: PUSH
24477: LD_INT 8
24479: PUSH
24480: LD_INT 9
24482: PUSH
24483: LD_INT 10
24485: PUSH
24486: LD_INT 11
24488: PUSH
24489: LD_INT 12
24491: PUSH
24492: LD_INT 13
24494: PUSH
24495: LD_INT 14
24497: PUSH
24498: LD_INT 15
24500: PUSH
24501: LD_INT 16
24503: PUSH
24504: LD_INT 17
24506: PUSH
24507: LD_INT 18
24509: PUSH
24510: LD_INT 19
24512: PUSH
24513: LD_INT 20
24515: PUSH
24516: LD_INT 21
24518: PUSH
24519: LD_INT 22
24521: PUSH
24522: LD_INT 23
24524: PUSH
24525: LD_INT 24
24527: PUSH
24528: LD_INT 25
24530: PUSH
24531: LD_INT 26
24533: PUSH
24534: LD_INT 27
24536: PUSH
24537: LD_INT 28
24539: PUSH
24540: LD_INT 29
24542: PUSH
24543: LD_INT 30
24545: PUSH
24546: LD_INT 31
24548: PUSH
24549: LD_INT 32
24551: PUSH
24552: LD_INT 33
24554: PUSH
24555: LD_INT 34
24557: PUSH
24558: LD_INT 35
24560: PUSH
24561: LD_INT 36
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 101
24604: PUSH
24605: LD_INT 102
24607: PUSH
24608: LD_INT 103
24610: PUSH
24611: LD_INT 104
24613: PUSH
24614: LD_INT 105
24616: PUSH
24617: LD_INT 106
24619: PUSH
24620: LD_INT 107
24622: PUSH
24623: LD_INT 108
24625: PUSH
24626: LD_INT 109
24628: PUSH
24629: LD_INT 110
24631: PUSH
24632: LD_INT 111
24634: PUSH
24635: LD_INT 112
24637: PUSH
24638: LD_INT 113
24640: PUSH
24641: LD_INT 114
24643: PUSH
24644: LD_INT 115
24646: PUSH
24647: LD_INT 116
24649: PUSH
24650: LD_INT 117
24652: PUSH
24653: LD_INT 118
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: ST_TO_ADDR
24680: GO 24683
24682: POP
// end else
24683: GO 24914
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24685: LD_ADDR_VAR 0 2
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: LD_INT 4
24701: PUSH
24702: LD_INT 5
24704: PUSH
24705: LD_INT 6
24707: PUSH
24708: LD_INT 7
24710: PUSH
24711: LD_INT 8
24713: PUSH
24714: LD_INT 9
24716: PUSH
24717: LD_INT 10
24719: PUSH
24720: LD_INT 11
24722: PUSH
24723: LD_INT 12
24725: PUSH
24726: LD_INT 13
24728: PUSH
24729: LD_INT 14
24731: PUSH
24732: LD_INT 15
24734: PUSH
24735: LD_INT 16
24737: PUSH
24738: LD_INT 17
24740: PUSH
24741: LD_INT 18
24743: PUSH
24744: LD_INT 19
24746: PUSH
24747: LD_INT 20
24749: PUSH
24750: LD_INT 21
24752: PUSH
24753: LD_INT 22
24755: PUSH
24756: LD_INT 23
24758: PUSH
24759: LD_INT 24
24761: PUSH
24762: LD_INT 25
24764: PUSH
24765: LD_INT 26
24767: PUSH
24768: LD_INT 27
24770: PUSH
24771: LD_INT 28
24773: PUSH
24774: LD_INT 29
24776: PUSH
24777: LD_INT 30
24779: PUSH
24780: LD_INT 31
24782: PUSH
24783: LD_INT 32
24785: PUSH
24786: LD_INT 33
24788: PUSH
24789: LD_INT 34
24791: PUSH
24792: LD_INT 35
24794: PUSH
24795: LD_INT 36
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 101
24838: PUSH
24839: LD_INT 102
24841: PUSH
24842: LD_INT 103
24844: PUSH
24845: LD_INT 104
24847: PUSH
24848: LD_INT 105
24850: PUSH
24851: LD_INT 106
24853: PUSH
24854: LD_INT 107
24856: PUSH
24857: LD_INT 108
24859: PUSH
24860: LD_INT 109
24862: PUSH
24863: LD_INT 110
24865: PUSH
24866: LD_INT 111
24868: PUSH
24869: LD_INT 112
24871: PUSH
24872: LD_INT 113
24874: PUSH
24875: LD_INT 114
24877: PUSH
24878: LD_INT 115
24880: PUSH
24881: LD_INT 116
24883: PUSH
24884: LD_INT 117
24886: PUSH
24887: LD_INT 118
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: ST_TO_ADDR
// if result then
24914: LD_VAR 0 2
24918: IFFALSE 25704
// begin normal :=  ;
24920: LD_ADDR_VAR 0 5
24924: PUSH
24925: LD_STRING 
24927: ST_TO_ADDR
// hardcore :=  ;
24928: LD_ADDR_VAR 0 6
24932: PUSH
24933: LD_STRING 
24935: ST_TO_ADDR
// active :=  ;
24936: LD_ADDR_VAR 0 7
24940: PUSH
24941: LD_STRING 
24943: ST_TO_ADDR
// for i = 1 to normalCounter do
24944: LD_ADDR_VAR 0 8
24948: PUSH
24949: DOUBLE
24950: LD_INT 1
24952: DEC
24953: ST_TO_ADDR
24954: LD_EXP 62
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25061
// begin tmp := 0 ;
24962: LD_ADDR_VAR 0 3
24966: PUSH
24967: LD_STRING 0
24969: ST_TO_ADDR
// if result [ 1 ] then
24970: LD_VAR 0 2
24974: PUSH
24975: LD_INT 1
24977: ARRAY
24978: IFFALSE 25043
// if result [ 1 ] [ 1 ] = i then
24980: LD_VAR 0 2
24984: PUSH
24985: LD_INT 1
24987: ARRAY
24988: PUSH
24989: LD_INT 1
24991: ARRAY
24992: PUSH
24993: LD_VAR 0 8
24997: EQUAL
24998: IFFALSE 25043
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_VAR 0 2
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: LD_VAR 0 2
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PPUSH
25022: LD_INT 1
25024: PPUSH
25025: CALL_OW 3
25029: PPUSH
25030: CALL_OW 1
25034: ST_TO_ADDR
// tmp := 1 ;
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_STRING 1
25042: ST_TO_ADDR
// end ; normal := normal & tmp ;
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: LD_VAR 0 5
25052: PUSH
25053: LD_VAR 0 3
25057: STR
25058: ST_TO_ADDR
// end ;
25059: GO 24959
25061: POP
25062: POP
// for i = 1 to hardcoreCounter do
25063: LD_ADDR_VAR 0 8
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_EXP 63
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25184
// begin tmp := 0 ;
25081: LD_ADDR_VAR 0 3
25085: PUSH
25086: LD_STRING 0
25088: ST_TO_ADDR
// if result [ 2 ] then
25089: LD_VAR 0 2
25093: PUSH
25094: LD_INT 2
25096: ARRAY
25097: IFFALSE 25166
// if result [ 2 ] [ 1 ] = 100 + i then
25099: LD_VAR 0 2
25103: PUSH
25104: LD_INT 2
25106: ARRAY
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PUSH
25112: LD_INT 100
25114: PUSH
25115: LD_VAR 0 8
25119: PLUS
25120: EQUAL
25121: IFFALSE 25166
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_VAR 0 2
25132: PPUSH
25133: LD_INT 2
25135: PPUSH
25136: LD_VAR 0 2
25140: PUSH
25141: LD_INT 2
25143: ARRAY
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 3
25152: PPUSH
25153: CALL_OW 1
25157: ST_TO_ADDR
// tmp := 1 ;
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_STRING 1
25165: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25166: LD_ADDR_VAR 0 6
25170: PUSH
25171: LD_VAR 0 6
25175: PUSH
25176: LD_VAR 0 3
25180: STR
25181: ST_TO_ADDR
// end ;
25182: GO 25078
25184: POP
25185: POP
// if isGameLoad then
25186: LD_VAR 0 1
25190: IFFALSE 25665
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25192: LD_ADDR_VAR 0 4
25196: PUSH
25197: LD_EXP 66
25201: PUSH
25202: LD_EXP 65
25206: PUSH
25207: LD_EXP 67
25211: PUSH
25212: LD_EXP 64
25216: PUSH
25217: LD_EXP 68
25221: PUSH
25222: LD_EXP 69
25226: PUSH
25227: LD_EXP 70
25231: PUSH
25232: LD_EXP 71
25236: PUSH
25237: LD_EXP 72
25241: PUSH
25242: LD_EXP 73
25246: PUSH
25247: LD_EXP 74
25251: PUSH
25252: LD_EXP 75
25256: PUSH
25257: LD_EXP 76
25261: PUSH
25262: LD_EXP 77
25266: PUSH
25267: LD_EXP 85
25271: PUSH
25272: LD_EXP 86
25276: PUSH
25277: LD_EXP 87
25281: PUSH
25282: LD_EXP 88
25286: PUSH
25287: LD_EXP 90
25291: PUSH
25292: LD_EXP 91
25296: PUSH
25297: LD_EXP 92
25301: PUSH
25302: LD_EXP 95
25306: PUSH
25307: LD_EXP 97
25311: PUSH
25312: LD_EXP 98
25316: PUSH
25317: LD_EXP 99
25321: PUSH
25322: LD_EXP 101
25326: PUSH
25327: LD_EXP 102
25331: PUSH
25332: LD_EXP 105
25336: PUSH
25337: LD_EXP 106
25341: PUSH
25342: LD_EXP 107
25346: PUSH
25347: LD_EXP 108
25351: PUSH
25352: LD_EXP 109
25356: PUSH
25357: LD_EXP 110
25361: PUSH
25362: LD_EXP 111
25366: PUSH
25367: LD_EXP 112
25371: PUSH
25372: LD_EXP 113
25376: PUSH
25377: LD_EXP 78
25381: PUSH
25382: LD_EXP 79
25386: PUSH
25387: LD_EXP 82
25391: PUSH
25392: LD_EXP 83
25396: PUSH
25397: LD_EXP 84
25401: PUSH
25402: LD_EXP 80
25406: PUSH
25407: LD_EXP 81
25411: PUSH
25412: LD_EXP 89
25416: PUSH
25417: LD_EXP 93
25421: PUSH
25422: LD_EXP 94
25426: PUSH
25427: LD_EXP 96
25431: PUSH
25432: LD_EXP 100
25436: PUSH
25437: LD_EXP 103
25441: PUSH
25442: LD_EXP 104
25446: PUSH
25447: LD_EXP 114
25451: PUSH
25452: LD_EXP 115
25456: PUSH
25457: LD_EXP 116
25461: PUSH
25462: LD_EXP 117
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: ST_TO_ADDR
// tmp :=  ;
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: LD_STRING 
25530: ST_TO_ADDR
// for i = 1 to normalCounter do
25531: LD_ADDR_VAR 0 8
25535: PUSH
25536: DOUBLE
25537: LD_INT 1
25539: DEC
25540: ST_TO_ADDR
25541: LD_EXP 62
25545: PUSH
25546: FOR_TO
25547: IFFALSE 25583
// begin if flags [ i ] then
25549: LD_VAR 0 4
25553: PUSH
25554: LD_VAR 0 8
25558: ARRAY
25559: IFFALSE 25581
// tmp := tmp & i & ; ;
25561: LD_ADDR_VAR 0 3
25565: PUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_VAR 0 8
25575: STR
25576: PUSH
25577: LD_STRING ;
25579: STR
25580: ST_TO_ADDR
// end ;
25581: GO 25546
25583: POP
25584: POP
// for i = 1 to hardcoreCounter do
25585: LD_ADDR_VAR 0 8
25589: PUSH
25590: DOUBLE
25591: LD_INT 1
25593: DEC
25594: ST_TO_ADDR
25595: LD_EXP 63
25599: PUSH
25600: FOR_TO
25601: IFFALSE 25647
// begin if flags [ normalCounter + i ] then
25603: LD_VAR 0 4
25607: PUSH
25608: LD_EXP 62
25612: PUSH
25613: LD_VAR 0 8
25617: PLUS
25618: ARRAY
25619: IFFALSE 25645
// tmp := tmp & ( 100 + i ) & ; ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_VAR 0 3
25630: PUSH
25631: LD_INT 100
25633: PUSH
25634: LD_VAR 0 8
25638: PLUS
25639: STR
25640: PUSH
25641: LD_STRING ;
25643: STR
25644: ST_TO_ADDR
// end ;
25645: GO 25600
25647: POP
25648: POP
// if tmp then
25649: LD_VAR 0 3
25653: IFFALSE 25665
// active := tmp ;
25655: LD_ADDR_VAR 0 7
25659: PUSH
25660: LD_VAR 0 3
25664: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25665: LD_STRING getStreamItemsFromMission("
25667: PUSH
25668: LD_VAR 0 5
25672: STR
25673: PUSH
25674: LD_STRING ","
25676: STR
25677: PUSH
25678: LD_VAR 0 6
25682: STR
25683: PUSH
25684: LD_STRING ","
25686: STR
25687: PUSH
25688: LD_VAR 0 7
25692: STR
25693: PUSH
25694: LD_STRING ")
25696: STR
25697: PPUSH
25698: CALL_OW 559
// end else
25702: GO 25711
// ToLua ( getStreamItemsFromMission("","","") ) ;
25704: LD_STRING getStreamItemsFromMission("","","")
25706: PPUSH
25707: CALL_OW 559
// end ;
25711: LD_VAR 0 2
25715: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25716: LD_EXP 61
25720: PUSH
25721: LD_EXP 66
25725: AND
25726: IFFALSE 25850
25728: GO 25730
25730: DISABLE
25731: LD_INT 0
25733: PPUSH
25734: PPUSH
// begin enable ;
25735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25736: LD_ADDR_VAR 0 2
25740: PUSH
25741: LD_INT 22
25743: PUSH
25744: LD_OWVAR 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 34
25758: PUSH
25759: LD_INT 7
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 34
25768: PUSH
25769: LD_INT 45
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 34
25778: PUSH
25779: LD_INT 28
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 34
25788: PUSH
25789: LD_INT 47
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 69
25811: ST_TO_ADDR
// if not tmp then
25812: LD_VAR 0 2
25816: NOT
25817: IFFALSE 25821
// exit ;
25819: GO 25850
// for i in tmp do
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: LD_VAR 0 2
25830: PUSH
25831: FOR_IN
25832: IFFALSE 25848
// begin SetLives ( i , 0 ) ;
25834: LD_VAR 0 1
25838: PPUSH
25839: LD_INT 0
25841: PPUSH
25842: CALL_OW 234
// end ;
25846: GO 25831
25848: POP
25849: POP
// end ;
25850: PPOPN 2
25852: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25853: LD_EXP 61
25857: PUSH
25858: LD_EXP 67
25862: AND
25863: IFFALSE 25947
25865: GO 25867
25867: DISABLE
25868: LD_INT 0
25870: PPUSH
25871: PPUSH
// begin enable ;
25872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25873: LD_ADDR_VAR 0 2
25877: PUSH
25878: LD_INT 22
25880: PUSH
25881: LD_OWVAR 2
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 32
25892: PUSH
25893: LD_INT 3
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PPUSH
25904: CALL_OW 69
25908: ST_TO_ADDR
// if not tmp then
25909: LD_VAR 0 2
25913: NOT
25914: IFFALSE 25918
// exit ;
25916: GO 25947
// for i in tmp do
25918: LD_ADDR_VAR 0 1
25922: PUSH
25923: LD_VAR 0 2
25927: PUSH
25928: FOR_IN
25929: IFFALSE 25945
// begin SetLives ( i , 0 ) ;
25931: LD_VAR 0 1
25935: PPUSH
25936: LD_INT 0
25938: PPUSH
25939: CALL_OW 234
// end ;
25943: GO 25928
25945: POP
25946: POP
// end ;
25947: PPOPN 2
25949: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25950: LD_EXP 61
25954: PUSH
25955: LD_EXP 64
25959: AND
25960: IFFALSE 26053
25962: GO 25964
25964: DISABLE
25965: LD_INT 0
25967: PPUSH
// begin enable ;
25968: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25969: LD_ADDR_VAR 0 1
25973: PUSH
25974: LD_INT 22
25976: PUSH
25977: LD_OWVAR 2
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 25
25991: PUSH
25992: LD_INT 5
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 25
26001: PUSH
26002: LD_INT 9
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 25
26011: PUSH
26012: LD_INT 8
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL_OW 69
26033: PUSH
26034: FOR_IN
26035: IFFALSE 26051
// begin SetClass ( i , 1 ) ;
26037: LD_VAR 0 1
26041: PPUSH
26042: LD_INT 1
26044: PPUSH
26045: CALL_OW 336
// end ;
26049: GO 26034
26051: POP
26052: POP
// end ;
26053: PPOPN 1
26055: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26056: LD_EXP 61
26060: PUSH
26061: LD_EXP 65
26065: AND
26066: PUSH
26067: LD_OWVAR 65
26071: PUSH
26072: LD_INT 7
26074: LESS
26075: AND
26076: IFFALSE 26090
26078: GO 26080
26080: DISABLE
// begin enable ;
26081: ENABLE
// game_speed := 7 ;
26082: LD_ADDR_OWVAR 65
26086: PUSH
26087: LD_INT 7
26089: ST_TO_ADDR
// end ;
26090: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26091: LD_EXP 61
26095: PUSH
26096: LD_EXP 68
26100: AND
26101: IFFALSE 26303
26103: GO 26105
26105: DISABLE
26106: LD_INT 0
26108: PPUSH
26109: PPUSH
26110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26111: LD_ADDR_VAR 0 3
26115: PUSH
26116: LD_INT 81
26118: PUSH
26119: LD_OWVAR 2
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 21
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PPUSH
26142: CALL_OW 69
26146: ST_TO_ADDR
// if not tmp then
26147: LD_VAR 0 3
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26303
// if tmp > 5 then
26156: LD_VAR 0 3
26160: PUSH
26161: LD_INT 5
26163: GREATER
26164: IFFALSE 26176
// k := 5 else
26166: LD_ADDR_VAR 0 2
26170: PUSH
26171: LD_INT 5
26173: ST_TO_ADDR
26174: GO 26186
// k := tmp ;
26176: LD_ADDR_VAR 0 2
26180: PUSH
26181: LD_VAR 0 3
26185: ST_TO_ADDR
// for i := 1 to k do
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: DOUBLE
26192: LD_INT 1
26194: DEC
26195: ST_TO_ADDR
26196: LD_VAR 0 2
26200: PUSH
26201: FOR_TO
26202: IFFALSE 26301
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26204: LD_VAR 0 3
26208: PUSH
26209: LD_VAR 0 1
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_INT 4
26222: MOD
26223: PUSH
26224: LD_INT 1
26226: PLUS
26227: PPUSH
26228: CALL_OW 259
26232: PUSH
26233: LD_INT 10
26235: LESS
26236: IFFALSE 26299
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26238: LD_VAR 0 3
26242: PUSH
26243: LD_VAR 0 1
26247: ARRAY
26248: PPUSH
26249: LD_VAR 0 1
26253: PUSH
26254: LD_INT 4
26256: MOD
26257: PUSH
26258: LD_INT 1
26260: PLUS
26261: PPUSH
26262: LD_VAR 0 3
26266: PUSH
26267: LD_VAR 0 1
26271: ARRAY
26272: PPUSH
26273: LD_VAR 0 1
26277: PUSH
26278: LD_INT 4
26280: MOD
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: PPUSH
26286: CALL_OW 259
26290: PUSH
26291: LD_INT 1
26293: PLUS
26294: PPUSH
26295: CALL_OW 237
26299: GO 26201
26301: POP
26302: POP
// end ;
26303: PPOPN 3
26305: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26306: LD_EXP 61
26310: PUSH
26311: LD_EXP 69
26315: AND
26316: IFFALSE 26336
26318: GO 26320
26320: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26321: LD_INT 4
26323: PPUSH
26324: LD_OWVAR 2
26328: PPUSH
26329: LD_INT 0
26331: PPUSH
26332: CALL_OW 324
26336: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26337: LD_EXP 61
26341: PUSH
26342: LD_EXP 98
26346: AND
26347: IFFALSE 26367
26349: GO 26351
26351: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26352: LD_INT 19
26354: PPUSH
26355: LD_OWVAR 2
26359: PPUSH
26360: LD_INT 0
26362: PPUSH
26363: CALL_OW 324
26367: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26368: LD_EXP 61
26372: PUSH
26373: LD_EXP 70
26377: AND
26378: IFFALSE 26480
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
26386: PPUSH
// begin enable ;
26387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26388: LD_ADDR_VAR 0 2
26392: PUSH
26393: LD_INT 22
26395: PUSH
26396: LD_OWVAR 2
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: LD_INT 34
26410: PUSH
26411: LD_INT 11
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 34
26420: PUSH
26421: LD_INT 30
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 69
26441: ST_TO_ADDR
// if not tmp then
26442: LD_VAR 0 2
26446: NOT
26447: IFFALSE 26451
// exit ;
26449: GO 26480
// for i in tmp do
26451: LD_ADDR_VAR 0 1
26455: PUSH
26456: LD_VAR 0 2
26460: PUSH
26461: FOR_IN
26462: IFFALSE 26478
// begin SetLives ( i , 0 ) ;
26464: LD_VAR 0 1
26468: PPUSH
26469: LD_INT 0
26471: PPUSH
26472: CALL_OW 234
// end ;
26476: GO 26461
26478: POP
26479: POP
// end ;
26480: PPOPN 2
26482: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26483: LD_EXP 61
26487: PUSH
26488: LD_EXP 71
26492: AND
26493: IFFALSE 26513
26495: GO 26497
26497: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26498: LD_INT 32
26500: PPUSH
26501: LD_OWVAR 2
26505: PPUSH
26506: LD_INT 0
26508: PPUSH
26509: CALL_OW 324
26513: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26514: LD_EXP 61
26518: PUSH
26519: LD_EXP 72
26523: AND
26524: IFFALSE 26705
26526: GO 26528
26528: DISABLE
26529: LD_INT 0
26531: PPUSH
26532: PPUSH
26533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26534: LD_ADDR_VAR 0 2
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_OWVAR 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 33
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: ST_TO_ADDR
// if not tmp then
26570: LD_VAR 0 2
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 26705
// side := 0 ;
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: LD_INT 0
26586: ST_TO_ADDR
// for i := 1 to 8 do
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: DOUBLE
26593: LD_INT 1
26595: DEC
26596: ST_TO_ADDR
26597: LD_INT 8
26599: PUSH
26600: FOR_TO
26601: IFFALSE 26649
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26603: LD_OWVAR 2
26607: PUSH
26608: LD_VAR 0 1
26612: NONEQUAL
26613: PUSH
26614: LD_OWVAR 2
26618: PPUSH
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL_OW 81
26628: PUSH
26629: LD_INT 2
26631: EQUAL
26632: AND
26633: IFFALSE 26647
// begin side := i ;
26635: LD_ADDR_VAR 0 3
26639: PUSH
26640: LD_VAR 0 1
26644: ST_TO_ADDR
// break ;
26645: GO 26649
// end ;
26647: GO 26600
26649: POP
26650: POP
// if not side then
26651: LD_VAR 0 3
26655: NOT
26656: IFFALSE 26660
// exit ;
26658: GO 26705
// for i := 1 to tmp do
26660: LD_ADDR_VAR 0 1
26664: PUSH
26665: DOUBLE
26666: LD_INT 1
26668: DEC
26669: ST_TO_ADDR
26670: LD_VAR 0 2
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26703
// if Prob ( 60 ) then
26678: LD_INT 60
26680: PPUSH
26681: CALL_OW 13
26685: IFFALSE 26701
// SetSide ( i , side ) ;
26687: LD_VAR 0 1
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 235
26701: GO 26675
26703: POP
26704: POP
// end ;
26705: PPOPN 3
26707: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26708: LD_EXP 61
26712: PUSH
26713: LD_EXP 74
26717: AND
26718: IFFALSE 26837
26720: GO 26722
26722: DISABLE
26723: LD_INT 0
26725: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26726: LD_ADDR_VAR 0 1
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_OWVAR 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 21
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 23
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 69
26779: PUSH
26780: FOR_IN
26781: IFFALSE 26835
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 257
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 3
26801: PUSH
26802: LD_INT 4
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: IN
26811: IFFALSE 26833
// SetClass ( un , rand ( 1 , 4 ) ) ;
26813: LD_VAR 0 1
26817: PPUSH
26818: LD_INT 1
26820: PPUSH
26821: LD_INT 4
26823: PPUSH
26824: CALL_OW 12
26828: PPUSH
26829: CALL_OW 336
26833: GO 26780
26835: POP
26836: POP
// end ;
26837: PPOPN 1
26839: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26840: LD_EXP 61
26844: PUSH
26845: LD_EXP 73
26849: AND
26850: IFFALSE 26929
26852: GO 26854
26854: DISABLE
26855: LD_INT 0
26857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26858: LD_ADDR_VAR 0 1
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_OWVAR 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 21
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PPUSH
26889: CALL_OW 69
26893: ST_TO_ADDR
// if not tmp then
26894: LD_VAR 0 1
26898: NOT
26899: IFFALSE 26903
// exit ;
26901: GO 26929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26903: LD_VAR 0 1
26907: PUSH
26908: LD_INT 1
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 12
26920: ARRAY
26921: PPUSH
26922: LD_INT 100
26924: PPUSH
26925: CALL_OW 234
// end ;
26929: PPOPN 1
26931: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26932: LD_EXP 61
26936: PUSH
26937: LD_EXP 75
26941: AND
26942: IFFALSE 27040
26944: GO 26946
26946: DISABLE
26947: LD_INT 0
26949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26950: LD_ADDR_VAR 0 1
26954: PUSH
26955: LD_INT 22
26957: PUSH
26958: LD_OWVAR 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 21
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 69
26985: ST_TO_ADDR
// if not tmp then
26986: LD_VAR 0 1
26990: NOT
26991: IFFALSE 26995
// exit ;
26993: GO 27040
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26995: LD_VAR 0 1
26999: PUSH
27000: LD_INT 1
27002: PPUSH
27003: LD_VAR 0 1
27007: PPUSH
27008: CALL_OW 12
27012: ARRAY
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: LD_INT 4
27019: PPUSH
27020: CALL_OW 12
27024: PPUSH
27025: LD_INT 3000
27027: PPUSH
27028: LD_INT 9000
27030: PPUSH
27031: CALL_OW 12
27035: PPUSH
27036: CALL_OW 492
// end ;
27040: PPOPN 1
27042: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27043: LD_EXP 61
27047: PUSH
27048: LD_EXP 76
27052: AND
27053: IFFALSE 27073
27055: GO 27057
27057: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27058: LD_INT 1
27060: PPUSH
27061: LD_OWVAR 2
27065: PPUSH
27066: LD_INT 0
27068: PPUSH
27069: CALL_OW 324
27073: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27074: LD_EXP 61
27078: PUSH
27079: LD_EXP 77
27083: AND
27084: IFFALSE 27167
27086: GO 27088
27088: DISABLE
27089: LD_INT 0
27091: PPUSH
27092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27093: LD_ADDR_VAR 0 2
27097: PUSH
27098: LD_INT 22
27100: PUSH
27101: LD_OWVAR 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 21
27112: PUSH
27113: LD_INT 3
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PPUSH
27124: CALL_OW 69
27128: ST_TO_ADDR
// if not tmp then
27129: LD_VAR 0 2
27133: NOT
27134: IFFALSE 27138
// exit ;
27136: GO 27167
// for i in tmp do
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_VAR 0 2
27147: PUSH
27148: FOR_IN
27149: IFFALSE 27165
// SetBLevel ( i , 10 ) ;
27151: LD_VAR 0 1
27155: PPUSH
27156: LD_INT 10
27158: PPUSH
27159: CALL_OW 241
27163: GO 27148
27165: POP
27166: POP
// end ;
27167: PPOPN 2
27169: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27170: LD_EXP 61
27174: PUSH
27175: LD_EXP 78
27179: AND
27180: IFFALSE 27291
27182: GO 27184
27184: DISABLE
27185: LD_INT 0
27187: PPUSH
27188: PPUSH
27189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_INT 22
27197: PUSH
27198: LD_OWVAR 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 25
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PPUSH
27221: CALL_OW 69
27225: ST_TO_ADDR
// if not tmp then
27226: LD_VAR 0 3
27230: NOT
27231: IFFALSE 27235
// exit ;
27233: GO 27291
// un := tmp [ rand ( 1 , tmp ) ] ;
27235: LD_ADDR_VAR 0 2
27239: PUSH
27240: LD_VAR 0 3
27244: PUSH
27245: LD_INT 1
27247: PPUSH
27248: LD_VAR 0 3
27252: PPUSH
27253: CALL_OW 12
27257: ARRAY
27258: ST_TO_ADDR
// if Crawls ( un ) then
27259: LD_VAR 0 2
27263: PPUSH
27264: CALL_OW 318
27268: IFFALSE 27279
// ComWalk ( un ) ;
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27279: LD_VAR 0 2
27283: PPUSH
27284: LD_INT 5
27286: PPUSH
27287: CALL_OW 336
// end ;
27291: PPOPN 3
27293: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27294: LD_EXP 61
27298: PUSH
27299: LD_EXP 79
27303: AND
27304: PUSH
27305: LD_OWVAR 67
27309: PUSH
27310: LD_INT 4
27312: LESS
27313: AND
27314: IFFALSE 27333
27316: GO 27318
27318: DISABLE
// begin Difficulty := Difficulty + 1 ;
27319: LD_ADDR_OWVAR 67
27323: PUSH
27324: LD_OWVAR 67
27328: PUSH
27329: LD_INT 1
27331: PLUS
27332: ST_TO_ADDR
// end ;
27333: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27334: LD_EXP 61
27338: PUSH
27339: LD_EXP 80
27343: AND
27344: IFFALSE 27447
27346: GO 27348
27348: DISABLE
27349: LD_INT 0
27351: PPUSH
// begin for i := 1 to 5 do
27352: LD_ADDR_VAR 0 1
27356: PUSH
27357: DOUBLE
27358: LD_INT 1
27360: DEC
27361: ST_TO_ADDR
27362: LD_INT 5
27364: PUSH
27365: FOR_TO
27366: IFFALSE 27445
// begin uc_nation := nation_nature ;
27368: LD_ADDR_OWVAR 21
27372: PUSH
27373: LD_INT 0
27375: ST_TO_ADDR
// uc_side := 0 ;
27376: LD_ADDR_OWVAR 20
27380: PUSH
27381: LD_INT 0
27383: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27384: LD_ADDR_OWVAR 29
27388: PUSH
27389: LD_INT 12
27391: PUSH
27392: LD_INT 12
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: ST_TO_ADDR
// hc_agressivity := 20 ;
27399: LD_ADDR_OWVAR 35
27403: PUSH
27404: LD_INT 20
27406: ST_TO_ADDR
// hc_class := class_tiger ;
27407: LD_ADDR_OWVAR 28
27411: PUSH
27412: LD_INT 14
27414: ST_TO_ADDR
// hc_gallery :=  ;
27415: LD_ADDR_OWVAR 33
27419: PUSH
27420: LD_STRING 
27422: ST_TO_ADDR
// hc_name :=  ;
27423: LD_ADDR_OWVAR 26
27427: PUSH
27428: LD_STRING 
27430: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27431: CALL_OW 44
27435: PPUSH
27436: LD_INT 0
27438: PPUSH
27439: CALL_OW 51
// end ;
27443: GO 27365
27445: POP
27446: POP
// end ;
27447: PPOPN 1
27449: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27450: LD_EXP 61
27454: PUSH
27455: LD_EXP 81
27459: AND
27460: IFFALSE 27469
27462: GO 27464
27464: DISABLE
// StreamSibBomb ;
27465: CALL 27470 0 0
27469: END
// export function StreamSibBomb ; var i , x , y ; begin
27470: LD_INT 0
27472: PPUSH
27473: PPUSH
27474: PPUSH
27475: PPUSH
// result := false ;
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_INT 0
27483: ST_TO_ADDR
// for i := 1 to 16 do
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: DOUBLE
27490: LD_INT 1
27492: DEC
27493: ST_TO_ADDR
27494: LD_INT 16
27496: PUSH
27497: FOR_TO
27498: IFFALSE 27697
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_INT 10
27507: PUSH
27508: LD_INT 20
27510: PUSH
27511: LD_INT 30
27513: PUSH
27514: LD_INT 40
27516: PUSH
27517: LD_INT 50
27519: PUSH
27520: LD_INT 60
27522: PUSH
27523: LD_INT 70
27525: PUSH
27526: LD_INT 80
27528: PUSH
27529: LD_INT 90
27531: PUSH
27532: LD_INT 100
27534: PUSH
27535: LD_INT 110
27537: PUSH
27538: LD_INT 120
27540: PUSH
27541: LD_INT 130
27543: PUSH
27544: LD_INT 140
27546: PUSH
27547: LD_INT 150
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: PPUSH
27570: LD_INT 15
27572: PPUSH
27573: CALL_OW 12
27577: ARRAY
27578: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27579: LD_ADDR_VAR 0 4
27583: PUSH
27584: LD_INT 10
27586: PUSH
27587: LD_INT 20
27589: PUSH
27590: LD_INT 30
27592: PUSH
27593: LD_INT 40
27595: PUSH
27596: LD_INT 50
27598: PUSH
27599: LD_INT 60
27601: PUSH
27602: LD_INT 70
27604: PUSH
27605: LD_INT 80
27607: PUSH
27608: LD_INT 90
27610: PUSH
27611: LD_INT 100
27613: PUSH
27614: LD_INT 110
27616: PUSH
27617: LD_INT 120
27619: PUSH
27620: LD_INT 130
27622: PUSH
27623: LD_INT 140
27625: PUSH
27626: LD_INT 150
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: PPUSH
27649: LD_INT 15
27651: PPUSH
27652: CALL_OW 12
27656: ARRAY
27657: ST_TO_ADDR
// if ValidHex ( x , y ) then
27658: LD_VAR 0 3
27662: PPUSH
27663: LD_VAR 0 4
27667: PPUSH
27668: CALL_OW 488
27672: IFFALSE 27695
// begin result := [ x , y ] ;
27674: LD_ADDR_VAR 0 1
27678: PUSH
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 4
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// break ;
27693: GO 27697
// end ; end ;
27695: GO 27497
27697: POP
27698: POP
// if result then
27699: LD_VAR 0 1
27703: IFFALSE 27763
// begin ToLua ( playSibBomb() ) ;
27705: LD_STRING playSibBomb()
27707: PPUSH
27708: CALL_OW 559
// wait ( 0 0$14 ) ;
27712: LD_INT 490
27714: PPUSH
27715: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27719: LD_VAR 0 1
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 2
27735: ARRAY
27736: PPUSH
27737: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27741: LD_VAR 0 1
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: LD_VAR 0 1
27754: PUSH
27755: LD_INT 2
27757: ARRAY
27758: PPUSH
27759: CALL_OW 429
// end ; end ;
27763: LD_VAR 0 1
27767: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27768: LD_EXP 61
27772: PUSH
27773: LD_EXP 83
27777: AND
27778: IFFALSE 27790
27780: GO 27782
27782: DISABLE
// YouLost (  ) ;
27783: LD_STRING 
27785: PPUSH
27786: CALL_OW 104
27790: END
// every 0 0$1 trigger StreamModeActive and sFog do
27791: LD_EXP 61
27795: PUSH
27796: LD_EXP 82
27800: AND
27801: IFFALSE 27815
27803: GO 27805
27805: DISABLE
// FogOff ( your_side ) ;
27806: LD_OWVAR 2
27810: PPUSH
27811: CALL_OW 344
27815: END
// every 0 0$1 trigger StreamModeActive and sSun do
27816: LD_EXP 61
27820: PUSH
27821: LD_EXP 84
27825: AND
27826: IFFALSE 27854
27828: GO 27830
27830: DISABLE
// begin solar_recharge_percent := 0 ;
27831: LD_ADDR_OWVAR 79
27835: PUSH
27836: LD_INT 0
27838: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27839: LD_INT 10500
27841: PPUSH
27842: CALL_OW 67
// solar_recharge_percent := 100 ;
27846: LD_ADDR_OWVAR 79
27850: PUSH
27851: LD_INT 100
27853: ST_TO_ADDR
// end ;
27854: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27855: LD_EXP 61
27859: PUSH
27860: LD_EXP 85
27864: AND
27865: IFFALSE 28104
27867: GO 27869
27869: DISABLE
27870: LD_INT 0
27872: PPUSH
27873: PPUSH
27874: PPUSH
// begin tmp := [ ] ;
27875: LD_ADDR_VAR 0 3
27879: PUSH
27880: EMPTY
27881: ST_TO_ADDR
// for i := 1 to 6 do
27882: LD_ADDR_VAR 0 1
27886: PUSH
27887: DOUBLE
27888: LD_INT 1
27890: DEC
27891: ST_TO_ADDR
27892: LD_INT 6
27894: PUSH
27895: FOR_TO
27896: IFFALSE 28001
// begin uc_nation := nation_nature ;
27898: LD_ADDR_OWVAR 21
27902: PUSH
27903: LD_INT 0
27905: ST_TO_ADDR
// uc_side := 0 ;
27906: LD_ADDR_OWVAR 20
27910: PUSH
27911: LD_INT 0
27913: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27914: LD_ADDR_OWVAR 29
27918: PUSH
27919: LD_INT 12
27921: PUSH
27922: LD_INT 12
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: ST_TO_ADDR
// hc_agressivity := 20 ;
27929: LD_ADDR_OWVAR 35
27933: PUSH
27934: LD_INT 20
27936: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27937: LD_ADDR_OWVAR 28
27941: PUSH
27942: LD_INT 17
27944: ST_TO_ADDR
// hc_gallery :=  ;
27945: LD_ADDR_OWVAR 33
27949: PUSH
27950: LD_STRING 
27952: ST_TO_ADDR
// hc_name :=  ;
27953: LD_ADDR_OWVAR 26
27957: PUSH
27958: LD_STRING 
27960: ST_TO_ADDR
// un := CreateHuman ;
27961: LD_ADDR_VAR 0 2
27965: PUSH
27966: CALL_OW 44
27970: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27971: LD_VAR 0 2
27975: PPUSH
27976: LD_INT 1
27978: PPUSH
27979: CALL_OW 51
// tmp := tmp ^ un ;
27983: LD_ADDR_VAR 0 3
27987: PUSH
27988: LD_VAR 0 3
27992: PUSH
27993: LD_VAR 0 2
27997: ADD
27998: ST_TO_ADDR
// end ;
27999: GO 27895
28001: POP
28002: POP
// repeat wait ( 0 0$1 ) ;
28003: LD_INT 35
28005: PPUSH
28006: CALL_OW 67
// for un in tmp do
28010: LD_ADDR_VAR 0 2
28014: PUSH
28015: LD_VAR 0 3
28019: PUSH
28020: FOR_IN
28021: IFFALSE 28095
// begin if IsDead ( un ) then
28023: LD_VAR 0 2
28027: PPUSH
28028: CALL_OW 301
28032: IFFALSE 28052
// begin tmp := tmp diff un ;
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_VAR 0 3
28043: PUSH
28044: LD_VAR 0 2
28048: DIFF
28049: ST_TO_ADDR
// continue ;
28050: GO 28020
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28052: LD_VAR 0 2
28056: PPUSH
28057: LD_INT 3
28059: PUSH
28060: LD_INT 22
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PPUSH
28074: CALL_OW 69
28078: PPUSH
28079: LD_VAR 0 2
28083: PPUSH
28084: CALL_OW 74
28088: PPUSH
28089: CALL_OW 115
// end ;
28093: GO 28020
28095: POP
28096: POP
// until not tmp ;
28097: LD_VAR 0 3
28101: NOT
28102: IFFALSE 28003
// end ;
28104: PPOPN 3
28106: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28107: LD_EXP 61
28111: PUSH
28112: LD_EXP 86
28116: AND
28117: IFFALSE 28171
28119: GO 28121
28121: DISABLE
// begin ToLua ( displayTroll(); ) ;
28122: LD_STRING displayTroll();
28124: PPUSH
28125: CALL_OW 559
// wait ( 3 3$00 ) ;
28129: LD_INT 6300
28131: PPUSH
28132: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28136: LD_STRING hideTroll();
28138: PPUSH
28139: CALL_OW 559
// wait ( 1 1$00 ) ;
28143: LD_INT 2100
28145: PPUSH
28146: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28150: LD_STRING displayTroll();
28152: PPUSH
28153: CALL_OW 559
// wait ( 1 1$00 ) ;
28157: LD_INT 2100
28159: PPUSH
28160: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28164: LD_STRING hideTroll();
28166: PPUSH
28167: CALL_OW 559
// end ;
28171: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28172: LD_EXP 61
28176: PUSH
28177: LD_EXP 87
28181: AND
28182: IFFALSE 28245
28184: GO 28186
28186: DISABLE
28187: LD_INT 0
28189: PPUSH
// begin p := 0 ;
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: LD_INT 0
28197: ST_TO_ADDR
// repeat game_speed := 1 ;
28198: LD_ADDR_OWVAR 65
28202: PUSH
28203: LD_INT 1
28205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28206: LD_INT 35
28208: PPUSH
28209: CALL_OW 67
// p := p + 1 ;
28213: LD_ADDR_VAR 0 1
28217: PUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 1
28225: PLUS
28226: ST_TO_ADDR
// until p >= 60 ;
28227: LD_VAR 0 1
28231: PUSH
28232: LD_INT 60
28234: GREATEREQUAL
28235: IFFALSE 28198
// game_speed := 4 ;
28237: LD_ADDR_OWVAR 65
28241: PUSH
28242: LD_INT 4
28244: ST_TO_ADDR
// end ;
28245: PPOPN 1
28247: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28248: LD_EXP 61
28252: PUSH
28253: LD_EXP 88
28257: AND
28258: IFFALSE 28404
28260: GO 28262
28262: DISABLE
28263: LD_INT 0
28265: PPUSH
28266: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28267: LD_ADDR_VAR 0 1
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_OWVAR 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 30
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 30
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: ST_TO_ADDR
// if not depot then
28321: LD_VAR 0 1
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28404
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_VAR 0 1
28339: PUSH
28340: LD_INT 1
28342: PPUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 12
28352: ARRAY
28353: PPUSH
28354: CALL_OW 274
28358: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_INT 1
28366: PPUSH
28367: LD_INT 0
28369: PPUSH
28370: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28374: LD_VAR 0 2
28378: PPUSH
28379: LD_INT 2
28381: PPUSH
28382: LD_INT 0
28384: PPUSH
28385: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 3
28396: PPUSH
28397: LD_INT 0
28399: PPUSH
28400: CALL_OW 277
// end ;
28404: PPOPN 2
28406: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28407: LD_EXP 61
28411: PUSH
28412: LD_EXP 89
28416: AND
28417: IFFALSE 28514
28419: GO 28421
28421: DISABLE
28422: LD_INT 0
28424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28425: LD_ADDR_VAR 0 1
28429: PUSH
28430: LD_INT 22
28432: PUSH
28433: LD_OWVAR 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 21
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 3
28454: PUSH
28455: LD_INT 23
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 69
28478: ST_TO_ADDR
// if not tmp then
28479: LD_VAR 0 1
28483: NOT
28484: IFFALSE 28488
// exit ;
28486: GO 28514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28488: LD_VAR 0 1
28492: PUSH
28493: LD_INT 1
28495: PPUSH
28496: LD_VAR 0 1
28500: PPUSH
28501: CALL_OW 12
28505: ARRAY
28506: PPUSH
28507: LD_INT 200
28509: PPUSH
28510: CALL_OW 234
// end ;
28514: PPOPN 1
28516: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28517: LD_EXP 61
28521: PUSH
28522: LD_EXP 90
28526: AND
28527: IFFALSE 28606
28529: GO 28531
28531: DISABLE
28532: LD_INT 0
28534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28535: LD_ADDR_VAR 0 1
28539: PUSH
28540: LD_INT 22
28542: PUSH
28543: LD_OWVAR 2
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 21
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 69
28570: ST_TO_ADDR
// if not tmp then
28571: LD_VAR 0 1
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28580: LD_VAR 0 1
28584: PUSH
28585: LD_INT 1
28587: PPUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL_OW 12
28597: ARRAY
28598: PPUSH
28599: LD_INT 60
28601: PPUSH
28602: CALL_OW 234
// end ;
28606: PPOPN 1
28608: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28609: LD_EXP 61
28613: PUSH
28614: LD_EXP 91
28618: AND
28619: IFFALSE 28718
28621: GO 28623
28623: DISABLE
28624: LD_INT 0
28626: PPUSH
28627: PPUSH
// begin enable ;
28628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28629: LD_ADDR_VAR 0 1
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_OWVAR 2
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 61
28648: PUSH
28649: EMPTY
28650: LIST
28651: PUSH
28652: LD_INT 33
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: PPUSH
28667: CALL_OW 69
28671: ST_TO_ADDR
// if not tmp then
28672: LD_VAR 0 1
28676: NOT
28677: IFFALSE 28681
// exit ;
28679: GO 28718
// for i in tmp do
28681: LD_ADDR_VAR 0 2
28685: PUSH
28686: LD_VAR 0 1
28690: PUSH
28691: FOR_IN
28692: IFFALSE 28716
// if IsControledBy ( i ) then
28694: LD_VAR 0 2
28698: PPUSH
28699: CALL_OW 312
28703: IFFALSE 28714
// ComUnlink ( i ) ;
28705: LD_VAR 0 2
28709: PPUSH
28710: CALL_OW 136
28714: GO 28691
28716: POP
28717: POP
// end ;
28718: PPOPN 2
28720: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28721: LD_EXP 61
28725: PUSH
28726: LD_EXP 92
28730: AND
28731: IFFALSE 28871
28733: GO 28735
28735: DISABLE
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// begin ToLua ( displayPowell(); ) ;
28740: LD_STRING displayPowell();
28742: PPUSH
28743: CALL_OW 559
// uc_side := 0 ;
28747: LD_ADDR_OWVAR 20
28751: PUSH
28752: LD_INT 0
28754: ST_TO_ADDR
// uc_nation := 2 ;
28755: LD_ADDR_OWVAR 21
28759: PUSH
28760: LD_INT 2
28762: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28763: LD_ADDR_OWVAR 37
28767: PUSH
28768: LD_INT 14
28770: ST_TO_ADDR
// vc_engine := engine_siberite ;
28771: LD_ADDR_OWVAR 39
28775: PUSH
28776: LD_INT 3
28778: ST_TO_ADDR
// vc_control := control_apeman ;
28779: LD_ADDR_OWVAR 38
28783: PUSH
28784: LD_INT 5
28786: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28787: LD_ADDR_OWVAR 40
28791: PUSH
28792: LD_INT 29
28794: ST_TO_ADDR
// un := CreateVehicle ;
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: CALL_OW 45
28804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28805: LD_VAR 0 2
28809: PPUSH
28810: LD_INT 1
28812: PPUSH
28813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28817: LD_INT 35
28819: PPUSH
28820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28824: LD_VAR 0 2
28828: PPUSH
28829: LD_INT 22
28831: PUSH
28832: LD_OWVAR 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 69
28845: PPUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: CALL_OW 74
28855: PPUSH
28856: CALL_OW 115
// until IsDead ( un ) ;
28860: LD_VAR 0 2
28864: PPUSH
28865: CALL_OW 301
28869: IFFALSE 28817
// end ;
28871: PPOPN 2
28873: END
// every 0 0$1 trigger StreamModeActive and sStu do
28874: LD_EXP 61
28878: PUSH
28879: LD_EXP 100
28883: AND
28884: IFFALSE 28900
28886: GO 28888
28888: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28889: LD_STRING displayStucuk();
28891: PPUSH
28892: CALL_OW 559
// ResetFog ;
28896: CALL_OW 335
// end ;
28900: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28901: LD_EXP 61
28905: PUSH
28906: LD_EXP 93
28910: AND
28911: IFFALSE 29052
28913: GO 28915
28915: DISABLE
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28920: LD_ADDR_VAR 0 2
28924: PUSH
28925: LD_INT 22
28927: PUSH
28928: LD_OWVAR 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 21
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not tmp then
28956: LD_VAR 0 2
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 29052
// un := tmp [ rand ( 1 , tmp ) ] ;
28965: LD_ADDR_VAR 0 1
28969: PUSH
28970: LD_VAR 0 2
28974: PUSH
28975: LD_INT 1
28977: PPUSH
28978: LD_VAR 0 2
28982: PPUSH
28983: CALL_OW 12
28987: ARRAY
28988: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28989: LD_VAR 0 1
28993: PPUSH
28994: LD_INT 0
28996: PPUSH
28997: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29001: LD_VAR 0 1
29005: PPUSH
29006: LD_OWVAR 3
29010: PUSH
29011: LD_VAR 0 1
29015: DIFF
29016: PPUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 74
29026: PPUSH
29027: CALL_OW 115
// wait ( 0 0$20 ) ;
29031: LD_INT 700
29033: PPUSH
29034: CALL_OW 67
// SetSide ( un , your_side ) ;
29038: LD_VAR 0 1
29042: PPUSH
29043: LD_OWVAR 2
29047: PPUSH
29048: CALL_OW 235
// end ;
29052: PPOPN 2
29054: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29055: LD_EXP 61
29059: PUSH
29060: LD_EXP 94
29064: AND
29065: IFFALSE 29171
29067: GO 29069
29069: DISABLE
29070: LD_INT 0
29072: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29073: LD_ADDR_VAR 0 1
29077: PUSH
29078: LD_INT 22
29080: PUSH
29081: LD_OWVAR 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 30
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 30
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: ST_TO_ADDR
// if not depot then
29127: LD_VAR 0 1
29131: NOT
29132: IFFALSE 29136
// exit ;
29134: GO 29171
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29136: LD_VAR 0 1
29140: PUSH
29141: LD_INT 1
29143: ARRAY
29144: PPUSH
29145: CALL_OW 250
29149: PPUSH
29150: LD_VAR 0 1
29154: PUSH
29155: LD_INT 1
29157: ARRAY
29158: PPUSH
29159: CALL_OW 251
29163: PPUSH
29164: LD_INT 70
29166: PPUSH
29167: CALL_OW 495
// end ;
29171: PPOPN 1
29173: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29174: LD_EXP 61
29178: PUSH
29179: LD_EXP 95
29183: AND
29184: IFFALSE 29395
29186: GO 29188
29188: DISABLE
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29196: LD_ADDR_VAR 0 5
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 21
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: ST_TO_ADDR
// if not tmp then
29232: LD_VAR 0 5
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29395
// for i in tmp do
29241: LD_ADDR_VAR 0 1
29245: PUSH
29246: LD_VAR 0 5
29250: PUSH
29251: FOR_IN
29252: IFFALSE 29393
// begin d := rand ( 0 , 5 ) ;
29254: LD_ADDR_VAR 0 4
29258: PUSH
29259: LD_INT 0
29261: PPUSH
29262: LD_INT 5
29264: PPUSH
29265: CALL_OW 12
29269: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29270: LD_ADDR_VAR 0 2
29274: PUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 250
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: LD_INT 3
29292: PPUSH
29293: LD_INT 12
29295: PPUSH
29296: CALL_OW 12
29300: PPUSH
29301: CALL_OW 272
29305: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL_OW 251
29320: PPUSH
29321: LD_VAR 0 4
29325: PPUSH
29326: LD_INT 3
29328: PPUSH
29329: LD_INT 12
29331: PPUSH
29332: CALL_OW 12
29336: PPUSH
29337: CALL_OW 273
29341: ST_TO_ADDR
// if ValidHex ( x , y ) then
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_VAR 0 3
29351: PPUSH
29352: CALL_OW 488
29356: IFFALSE 29391
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29358: LD_VAR 0 1
29362: PPUSH
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_VAR 0 3
29372: PPUSH
29373: LD_INT 3
29375: PPUSH
29376: LD_INT 6
29378: PPUSH
29379: CALL_OW 12
29383: PPUSH
29384: LD_INT 1
29386: PPUSH
29387: CALL_OW 483
// end ;
29391: GO 29251
29393: POP
29394: POP
// end ;
29395: PPOPN 5
29397: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29398: LD_EXP 61
29402: PUSH
29403: LD_EXP 96
29407: AND
29408: IFFALSE 29502
29410: GO 29412
29412: DISABLE
29413: LD_INT 0
29415: PPUSH
29416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29417: LD_ADDR_VAR 0 2
29421: PUSH
29422: LD_INT 22
29424: PUSH
29425: LD_OWVAR 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 32
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 21
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: PPUSH
29459: CALL_OW 69
29463: ST_TO_ADDR
// if not tmp then
29464: LD_VAR 0 2
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29502
// for i in tmp do
29473: LD_ADDR_VAR 0 1
29477: PUSH
29478: LD_VAR 0 2
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29500
// SetFuel ( i , 0 ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_INT 0
29493: PPUSH
29494: CALL_OW 240
29498: GO 29483
29500: POP
29501: POP
// end ;
29502: PPOPN 2
29504: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29505: LD_EXP 61
29509: PUSH
29510: LD_EXP 97
29514: AND
29515: IFFALSE 29581
29517: GO 29519
29519: DISABLE
29520: LD_INT 0
29522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29523: LD_ADDR_VAR 0 1
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: LD_OWVAR 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 30
29542: PUSH
29543: LD_INT 29
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 69
29558: ST_TO_ADDR
// if not tmp then
29559: LD_VAR 0 1
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 29581
// DestroyUnit ( tmp [ 1 ] ) ;
29568: LD_VAR 0 1
29572: PUSH
29573: LD_INT 1
29575: ARRAY
29576: PPUSH
29577: CALL_OW 65
// end ;
29581: PPOPN 1
29583: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29584: LD_EXP 61
29588: PUSH
29589: LD_EXP 99
29593: AND
29594: IFFALSE 29723
29596: GO 29598
29598: DISABLE
29599: LD_INT 0
29601: PPUSH
// begin uc_side := 0 ;
29602: LD_ADDR_OWVAR 20
29606: PUSH
29607: LD_INT 0
29609: ST_TO_ADDR
// uc_nation := nation_arabian ;
29610: LD_ADDR_OWVAR 21
29614: PUSH
29615: LD_INT 2
29617: ST_TO_ADDR
// hc_gallery :=  ;
29618: LD_ADDR_OWVAR 33
29622: PUSH
29623: LD_STRING 
29625: ST_TO_ADDR
// hc_name :=  ;
29626: LD_ADDR_OWVAR 26
29630: PUSH
29631: LD_STRING 
29633: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29634: LD_INT 1
29636: PPUSH
29637: LD_INT 11
29639: PPUSH
29640: LD_INT 10
29642: PPUSH
29643: CALL_OW 380
// un := CreateHuman ;
29647: LD_ADDR_VAR 0 1
29651: PUSH
29652: CALL_OW 44
29656: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29657: LD_VAR 0 1
29661: PPUSH
29662: LD_INT 1
29664: PPUSH
29665: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29669: LD_INT 35
29671: PPUSH
29672: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_INT 22
29683: PUSH
29684: LD_OWVAR 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 69
29697: PPUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: CALL_OW 74
29707: PPUSH
29708: CALL_OW 115
// until IsDead ( un ) ;
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 301
29721: IFFALSE 29669
// end ;
29723: PPOPN 1
29725: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29726: LD_EXP 61
29730: PUSH
29731: LD_EXP 101
29735: AND
29736: IFFALSE 29748
29738: GO 29740
29740: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29741: LD_STRING earthquake(getX(game), 0, 32)
29743: PPUSH
29744: CALL_OW 559
29748: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29749: LD_EXP 61
29753: PUSH
29754: LD_EXP 102
29758: AND
29759: IFFALSE 29850
29761: GO 29763
29763: DISABLE
29764: LD_INT 0
29766: PPUSH
// begin enable ;
29767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29768: LD_ADDR_VAR 0 1
29772: PUSH
29773: LD_INT 22
29775: PUSH
29776: LD_OWVAR 2
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 21
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 33
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: PPUSH
29810: CALL_OW 69
29814: ST_TO_ADDR
// if not tmp then
29815: LD_VAR 0 1
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 29850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29824: LD_VAR 0 1
29828: PUSH
29829: LD_INT 1
29831: PPUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 12
29841: ARRAY
29842: PPUSH
29843: LD_INT 1
29845: PPUSH
29846: CALL_OW 234
// end ;
29850: PPOPN 1
29852: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29853: LD_EXP 61
29857: PUSH
29858: LD_EXP 103
29862: AND
29863: IFFALSE 30004
29865: GO 29867
29867: DISABLE
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
29872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: LD_INT 22
29880: PUSH
29881: LD_OWVAR 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 25
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: ST_TO_ADDR
// if not tmp then
29909: LD_VAR 0 3
29913: NOT
29914: IFFALSE 29918
// exit ;
29916: GO 30004
// un := tmp [ rand ( 1 , tmp ) ] ;
29918: LD_ADDR_VAR 0 2
29922: PUSH
29923: LD_VAR 0 3
29927: PUSH
29928: LD_INT 1
29930: PPUSH
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 12
29940: ARRAY
29941: ST_TO_ADDR
// if Crawls ( un ) then
29942: LD_VAR 0 2
29946: PPUSH
29947: CALL_OW 318
29951: IFFALSE 29962
// ComWalk ( un ) ;
29953: LD_VAR 0 2
29957: PPUSH
29958: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29962: LD_VAR 0 2
29966: PPUSH
29967: LD_INT 9
29969: PPUSH
29970: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29974: LD_INT 28
29976: PPUSH
29977: LD_OWVAR 2
29981: PPUSH
29982: LD_INT 2
29984: PPUSH
29985: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29989: LD_INT 29
29991: PPUSH
29992: LD_OWVAR 2
29996: PPUSH
29997: LD_INT 2
29999: PPUSH
30000: CALL_OW 322
// end ;
30004: PPOPN 3
30006: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30007: LD_EXP 61
30011: PUSH
30012: LD_EXP 104
30016: AND
30017: IFFALSE 30128
30019: GO 30021
30021: DISABLE
30022: LD_INT 0
30024: PPUSH
30025: PPUSH
30026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_INT 22
30034: PUSH
30035: LD_OWVAR 2
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 25
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 69
30062: ST_TO_ADDR
// if not tmp then
30063: LD_VAR 0 3
30067: NOT
30068: IFFALSE 30072
// exit ;
30070: GO 30128
// un := tmp [ rand ( 1 , tmp ) ] ;
30072: LD_ADDR_VAR 0 2
30076: PUSH
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 1
30084: PPUSH
30085: LD_VAR 0 3
30089: PPUSH
30090: CALL_OW 12
30094: ARRAY
30095: ST_TO_ADDR
// if Crawls ( un ) then
30096: LD_VAR 0 2
30100: PPUSH
30101: CALL_OW 318
30105: IFFALSE 30116
// ComWalk ( un ) ;
30107: LD_VAR 0 2
30111: PPUSH
30112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30116: LD_VAR 0 2
30120: PPUSH
30121: LD_INT 8
30123: PPUSH
30124: CALL_OW 336
// end ;
30128: PPOPN 3
30130: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30131: LD_EXP 61
30135: PUSH
30136: LD_EXP 105
30140: AND
30141: IFFALSE 30285
30143: GO 30145
30145: DISABLE
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30150: LD_ADDR_VAR 0 2
30154: PUSH
30155: LD_INT 22
30157: PUSH
30158: LD_OWVAR 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: LD_INT 34
30182: PUSH
30183: LD_INT 12
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 34
30192: PUSH
30193: LD_INT 51
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 34
30202: PUSH
30203: LD_INT 32
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: PPUSH
30221: CALL_OW 69
30225: ST_TO_ADDR
// if not tmp then
30226: LD_VAR 0 2
30230: NOT
30231: IFFALSE 30235
// exit ;
30233: GO 30285
// for i in tmp do
30235: LD_ADDR_VAR 0 1
30239: PUSH
30240: LD_VAR 0 2
30244: PUSH
30245: FOR_IN
30246: IFFALSE 30283
// if GetCargo ( i , mat_artifact ) = 0 then
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_INT 4
30255: PPUSH
30256: CALL_OW 289
30260: PUSH
30261: LD_INT 0
30263: EQUAL
30264: IFFALSE 30281
// SetCargo ( i , mat_siberit , 100 ) ;
30266: LD_VAR 0 1
30270: PPUSH
30271: LD_INT 3
30273: PPUSH
30274: LD_INT 100
30276: PPUSH
30277: CALL_OW 290
30281: GO 30245
30283: POP
30284: POP
// end ;
30285: PPOPN 2
30287: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30288: LD_EXP 61
30292: PUSH
30293: LD_EXP 106
30297: AND
30298: IFFALSE 30481
30300: GO 30302
30302: DISABLE
30303: LD_INT 0
30305: PPUSH
30306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30307: LD_ADDR_VAR 0 2
30311: PUSH
30312: LD_INT 22
30314: PUSH
30315: LD_OWVAR 2
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 69
30328: ST_TO_ADDR
// if not tmp then
30329: LD_VAR 0 2
30333: NOT
30334: IFFALSE 30338
// exit ;
30336: GO 30481
// for i := 1 to 2 do
30338: LD_ADDR_VAR 0 1
30342: PUSH
30343: DOUBLE
30344: LD_INT 1
30346: DEC
30347: ST_TO_ADDR
30348: LD_INT 2
30350: PUSH
30351: FOR_TO
30352: IFFALSE 30479
// begin uc_side := your_side ;
30354: LD_ADDR_OWVAR 20
30358: PUSH
30359: LD_OWVAR 2
30363: ST_TO_ADDR
// uc_nation := nation_american ;
30364: LD_ADDR_OWVAR 21
30368: PUSH
30369: LD_INT 1
30371: ST_TO_ADDR
// vc_chassis := us_morphling ;
30372: LD_ADDR_OWVAR 37
30376: PUSH
30377: LD_INT 5
30379: ST_TO_ADDR
// vc_engine := engine_siberite ;
30380: LD_ADDR_OWVAR 39
30384: PUSH
30385: LD_INT 3
30387: ST_TO_ADDR
// vc_control := control_computer ;
30388: LD_ADDR_OWVAR 38
30392: PUSH
30393: LD_INT 3
30395: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30396: LD_ADDR_OWVAR 40
30400: PUSH
30401: LD_INT 10
30403: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30404: LD_VAR 0 2
30408: PUSH
30409: LD_INT 1
30411: ARRAY
30412: PPUSH
30413: CALL_OW 310
30417: NOT
30418: IFFALSE 30465
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30420: CALL_OW 45
30424: PPUSH
30425: LD_VAR 0 2
30429: PUSH
30430: LD_INT 1
30432: ARRAY
30433: PPUSH
30434: CALL_OW 250
30438: PPUSH
30439: LD_VAR 0 2
30443: PUSH
30444: LD_INT 1
30446: ARRAY
30447: PPUSH
30448: CALL_OW 251
30452: PPUSH
30453: LD_INT 12
30455: PPUSH
30456: LD_INT 1
30458: PPUSH
30459: CALL_OW 50
30463: GO 30477
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30465: CALL_OW 45
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 51
// end ;
30477: GO 30351
30479: POP
30480: POP
// end ;
30481: PPOPN 2
30483: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30484: LD_EXP 61
30488: PUSH
30489: LD_EXP 107
30493: AND
30494: IFFALSE 30716
30496: GO 30498
30498: DISABLE
30499: LD_INT 0
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30507: LD_ADDR_VAR 0 6
30511: PUSH
30512: LD_INT 22
30514: PUSH
30515: LD_OWVAR 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 21
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: LD_INT 23
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: PPUSH
30556: CALL_OW 69
30560: ST_TO_ADDR
// if not tmp then
30561: LD_VAR 0 6
30565: NOT
30566: IFFALSE 30570
// exit ;
30568: GO 30716
// s1 := rand ( 1 , 4 ) ;
30570: LD_ADDR_VAR 0 2
30574: PUSH
30575: LD_INT 1
30577: PPUSH
30578: LD_INT 4
30580: PPUSH
30581: CALL_OW 12
30585: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30586: LD_ADDR_VAR 0 4
30590: PUSH
30591: LD_VAR 0 6
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: LD_VAR 0 2
30604: PPUSH
30605: CALL_OW 259
30609: ST_TO_ADDR
// if s1 = 1 then
30610: LD_VAR 0 2
30614: PUSH
30615: LD_INT 1
30617: EQUAL
30618: IFFALSE 30638
// s2 := rand ( 2 , 4 ) else
30620: LD_ADDR_VAR 0 3
30624: PUSH
30625: LD_INT 2
30627: PPUSH
30628: LD_INT 4
30630: PPUSH
30631: CALL_OW 12
30635: ST_TO_ADDR
30636: GO 30646
// s2 := 1 ;
30638: LD_ADDR_VAR 0 3
30642: PUSH
30643: LD_INT 1
30645: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30646: LD_ADDR_VAR 0 5
30650: PUSH
30651: LD_VAR 0 6
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: PPUSH
30660: LD_VAR 0 3
30664: PPUSH
30665: CALL_OW 259
30669: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30670: LD_VAR 0 6
30674: PUSH
30675: LD_INT 1
30677: ARRAY
30678: PPUSH
30679: LD_VAR 0 2
30683: PPUSH
30684: LD_VAR 0 5
30688: PPUSH
30689: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30693: LD_VAR 0 6
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: LD_VAR 0 3
30706: PPUSH
30707: LD_VAR 0 4
30711: PPUSH
30712: CALL_OW 237
// end ;
30716: PPOPN 6
30718: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30719: LD_EXP 61
30723: PUSH
30724: LD_EXP 108
30728: AND
30729: IFFALSE 30808
30731: GO 30733
30733: DISABLE
30734: LD_INT 0
30736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30737: LD_ADDR_VAR 0 1
30741: PUSH
30742: LD_INT 22
30744: PUSH
30745: LD_OWVAR 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 30
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PPUSH
30768: CALL_OW 69
30772: ST_TO_ADDR
// if not tmp then
30773: LD_VAR 0 1
30777: NOT
30778: IFFALSE 30782
// exit ;
30780: GO 30808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30782: LD_VAR 0 1
30786: PUSH
30787: LD_INT 1
30789: PPUSH
30790: LD_VAR 0 1
30794: PPUSH
30795: CALL_OW 12
30799: ARRAY
30800: PPUSH
30801: LD_INT 1
30803: PPUSH
30804: CALL_OW 234
// end ;
30808: PPOPN 1
30810: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30811: LD_EXP 61
30815: PUSH
30816: LD_EXP 109
30820: AND
30821: IFFALSE 30933
30823: GO 30825
30825: DISABLE
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30830: LD_ADDR_VAR 0 2
30834: PUSH
30835: LD_INT 22
30837: PUSH
30838: LD_OWVAR 2
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: LD_INT 30
30852: PUSH
30853: LD_INT 27
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 30
30862: PUSH
30863: LD_INT 26
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 28
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL_OW 69
30894: ST_TO_ADDR
// if not tmp then
30895: LD_VAR 0 2
30899: NOT
30900: IFFALSE 30904
// exit ;
30902: GO 30933
// for i in tmp do
30904: LD_ADDR_VAR 0 1
30908: PUSH
30909: LD_VAR 0 2
30913: PUSH
30914: FOR_IN
30915: IFFALSE 30931
// SetLives ( i , 1 ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_INT 1
30924: PPUSH
30925: CALL_OW 234
30929: GO 30914
30931: POP
30932: POP
// end ;
30933: PPOPN 2
30935: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30936: LD_EXP 61
30940: PUSH
30941: LD_EXP 110
30945: AND
30946: IFFALSE 31233
30948: GO 30950
30950: DISABLE
30951: LD_INT 0
30953: PPUSH
30954: PPUSH
30955: PPUSH
// begin i := rand ( 1 , 7 ) ;
30956: LD_ADDR_VAR 0 1
30960: PUSH
30961: LD_INT 1
30963: PPUSH
30964: LD_INT 7
30966: PPUSH
30967: CALL_OW 12
30971: ST_TO_ADDR
// case i of 1 :
30972: LD_VAR 0 1
30976: PUSH
30977: LD_INT 1
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30995
30985: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30986: LD_STRING earthquake(getX(game), 0, 32)
30988: PPUSH
30989: CALL_OW 559
30993: GO 31233
30995: LD_INT 2
30997: DOUBLE
30998: EQUAL
30999: IFTRUE 31003
31001: GO 31017
31003: POP
// begin ToLua ( displayStucuk(); ) ;
31004: LD_STRING displayStucuk();
31006: PPUSH
31007: CALL_OW 559
// ResetFog ;
31011: CALL_OW 335
// end ; 3 :
31015: GO 31233
31017: LD_INT 3
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31129
31025: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31026: LD_ADDR_VAR 0 2
31030: PUSH
31031: LD_INT 22
31033: PUSH
31034: LD_OWVAR 2
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 25
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: ST_TO_ADDR
// if not tmp then
31062: LD_VAR 0 2
31066: NOT
31067: IFFALSE 31071
// exit ;
31069: GO 31233
// un := tmp [ rand ( 1 , tmp ) ] ;
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_VAR 0 2
31080: PUSH
31081: LD_INT 1
31083: PPUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: CALL_OW 12
31093: ARRAY
31094: ST_TO_ADDR
// if Crawls ( un ) then
31095: LD_VAR 0 3
31099: PPUSH
31100: CALL_OW 318
31104: IFFALSE 31115
// ComWalk ( un ) ;
31106: LD_VAR 0 3
31110: PPUSH
31111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31115: LD_VAR 0 3
31119: PPUSH
31120: LD_INT 8
31122: PPUSH
31123: CALL_OW 336
// end ; 4 :
31127: GO 31233
31129: LD_INT 4
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31211
31137: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31138: LD_ADDR_VAR 0 2
31142: PUSH
31143: LD_INT 22
31145: PUSH
31146: LD_OWVAR 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 30
31157: PUSH
31158: LD_INT 29
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PPUSH
31169: CALL_OW 69
31173: ST_TO_ADDR
// if not tmp then
31174: LD_VAR 0 2
31178: NOT
31179: IFFALSE 31183
// exit ;
31181: GO 31233
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31183: LD_VAR 0 2
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: PPUSH
31192: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31196: LD_VAR 0 2
31200: PUSH
31201: LD_INT 1
31203: ARRAY
31204: PPUSH
31205: CALL_OW 65
// end ; 5 .. 7 :
31209: GO 31233
31211: LD_INT 5
31213: DOUBLE
31214: GREATEREQUAL
31215: IFFALSE 31223
31217: LD_INT 7
31219: DOUBLE
31220: LESSEQUAL
31221: IFTRUE 31225
31223: GO 31232
31225: POP
// StreamSibBomb ; end ;
31226: CALL 27470 0 0
31230: GO 31233
31232: POP
// end ;
31233: PPOPN 3
31235: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31236: LD_EXP 61
31240: PUSH
31241: LD_EXP 111
31245: AND
31246: IFFALSE 31402
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
31255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31256: LD_ADDR_VAR 0 2
31260: PUSH
31261: LD_INT 81
31263: PUSH
31264: LD_OWVAR 2
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 21
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 21
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PPUSH
31305: CALL_OW 69
31309: ST_TO_ADDR
// if not tmp then
31310: LD_VAR 0 2
31314: NOT
31315: IFFALSE 31319
// exit ;
31317: GO 31402
// p := 0 ;
31319: LD_ADDR_VAR 0 3
31323: PUSH
31324: LD_INT 0
31326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31327: LD_INT 35
31329: PPUSH
31330: CALL_OW 67
// p := p + 1 ;
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_VAR 0 3
31343: PUSH
31344: LD_INT 1
31346: PLUS
31347: ST_TO_ADDR
// for i in tmp do
31348: LD_ADDR_VAR 0 1
31352: PUSH
31353: LD_VAR 0 2
31357: PUSH
31358: FOR_IN
31359: IFFALSE 31390
// if GetLives ( i ) < 1000 then
31361: LD_VAR 0 1
31365: PPUSH
31366: CALL_OW 256
31370: PUSH
31371: LD_INT 1000
31373: LESS
31374: IFFALSE 31388
// SetLives ( i , 1000 ) ;
31376: LD_VAR 0 1
31380: PPUSH
31381: LD_INT 1000
31383: PPUSH
31384: CALL_OW 234
31388: GO 31358
31390: POP
31391: POP
// until p > 20 ;
31392: LD_VAR 0 3
31396: PUSH
31397: LD_INT 20
31399: GREATER
31400: IFFALSE 31327
// end ;
31402: PPOPN 3
31404: END
// every 0 0$1 trigger StreamModeActive and sTime do
31405: LD_EXP 61
31409: PUSH
31410: LD_EXP 112
31414: AND
31415: IFFALSE 31450
31417: GO 31419
31419: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31420: LD_INT 28
31422: PPUSH
31423: LD_OWVAR 2
31427: PPUSH
31428: LD_INT 2
31430: PPUSH
31431: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31435: LD_INT 30
31437: PPUSH
31438: LD_OWVAR 2
31442: PPUSH
31443: LD_INT 2
31445: PPUSH
31446: CALL_OW 322
// end ;
31450: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31451: LD_EXP 61
31455: PUSH
31456: LD_EXP 113
31460: AND
31461: IFFALSE 31582
31463: GO 31465
31465: DISABLE
31466: LD_INT 0
31468: PPUSH
31469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_INT 22
31477: PUSH
31478: LD_OWVAR 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 21
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 23
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: PPUSH
31519: CALL_OW 69
31523: ST_TO_ADDR
// if not tmp then
31524: LD_VAR 0 2
31528: NOT
31529: IFFALSE 31533
// exit ;
31531: GO 31582
// for i in tmp do
31533: LD_ADDR_VAR 0 1
31537: PUSH
31538: LD_VAR 0 2
31542: PUSH
31543: FOR_IN
31544: IFFALSE 31580
// begin if Crawls ( i ) then
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 318
31555: IFFALSE 31566
// ComWalk ( i ) ;
31557: LD_VAR 0 1
31561: PPUSH
31562: CALL_OW 138
// SetClass ( i , 2 ) ;
31566: LD_VAR 0 1
31570: PPUSH
31571: LD_INT 2
31573: PPUSH
31574: CALL_OW 336
// end ;
31578: GO 31543
31580: POP
31581: POP
// end ;
31582: PPOPN 2
31584: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31585: LD_EXP 61
31589: PUSH
31590: LD_EXP 114
31594: AND
31595: IFFALSE 31883
31597: GO 31599
31599: DISABLE
31600: LD_INT 0
31602: PPUSH
31603: PPUSH
31604: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31605: LD_OWVAR 2
31609: PPUSH
31610: LD_INT 9
31612: PPUSH
31613: LD_INT 1
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31623: LD_INT 9
31625: PPUSH
31626: LD_OWVAR 2
31630: PPUSH
31631: CALL_OW 343
// uc_side := 9 ;
31635: LD_ADDR_OWVAR 20
31639: PUSH
31640: LD_INT 9
31642: ST_TO_ADDR
// uc_nation := 2 ;
31643: LD_ADDR_OWVAR 21
31647: PUSH
31648: LD_INT 2
31650: ST_TO_ADDR
// hc_name := Dark Warrior ;
31651: LD_ADDR_OWVAR 26
31655: PUSH
31656: LD_STRING Dark Warrior
31658: ST_TO_ADDR
// hc_gallery :=  ;
31659: LD_ADDR_OWVAR 33
31663: PUSH
31664: LD_STRING 
31666: ST_TO_ADDR
// hc_noskilllimit := true ;
31667: LD_ADDR_OWVAR 76
31671: PUSH
31672: LD_INT 1
31674: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31675: LD_ADDR_OWVAR 31
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 30
31685: PUSH
31686: LD_INT 30
31688: PUSH
31689: LD_INT 30
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: ST_TO_ADDR
// un := CreateHuman ;
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: CALL_OW 44
31707: ST_TO_ADDR
// hc_noskilllimit := false ;
31708: LD_ADDR_OWVAR 76
31712: PUSH
31713: LD_INT 0
31715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31716: LD_VAR 0 3
31720: PPUSH
31721: LD_INT 1
31723: PPUSH
31724: CALL_OW 51
// ToLua ( playRanger() ) ;
31728: LD_STRING playRanger()
31730: PPUSH
31731: CALL_OW 559
// p := 0 ;
31735: LD_ADDR_VAR 0 2
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31743: LD_INT 35
31745: PPUSH
31746: CALL_OW 67
// p := p + 1 ;
31750: LD_ADDR_VAR 0 2
31754: PUSH
31755: LD_VAR 0 2
31759: PUSH
31760: LD_INT 1
31762: PLUS
31763: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31764: LD_VAR 0 3
31768: PPUSH
31769: CALL_OW 256
31773: PUSH
31774: LD_INT 1000
31776: LESS
31777: IFFALSE 31791
// SetLives ( un , 1000 ) ;
31779: LD_VAR 0 3
31783: PPUSH
31784: LD_INT 1000
31786: PPUSH
31787: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31791: LD_VAR 0 3
31795: PPUSH
31796: LD_INT 81
31798: PUSH
31799: LD_OWVAR 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 91
31810: PUSH
31811: LD_VAR 0 3
31815: PUSH
31816: LD_INT 30
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PPUSH
31828: CALL_OW 69
31832: PPUSH
31833: LD_VAR 0 3
31837: PPUSH
31838: CALL_OW 74
31842: PPUSH
31843: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31847: LD_VAR 0 2
31851: PUSH
31852: LD_INT 80
31854: GREATER
31855: PUSH
31856: LD_VAR 0 3
31860: PPUSH
31861: CALL_OW 301
31865: OR
31866: IFFALSE 31743
// if un then
31868: LD_VAR 0 3
31872: IFFALSE 31883
// RemoveUnit ( un ) ;
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 64
// end ;
31883: PPOPN 3
31885: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31886: LD_EXP 115
31890: IFFALSE 32006
31892: GO 31894
31894: DISABLE
31895: LD_INT 0
31897: PPUSH
31898: PPUSH
31899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31900: LD_ADDR_VAR 0 2
31904: PUSH
31905: LD_INT 81
31907: PUSH
31908: LD_OWVAR 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 21
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PPUSH
31931: CALL_OW 69
31935: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31936: LD_STRING playComputer()
31938: PPUSH
31939: CALL_OW 559
// if not tmp then
31943: LD_VAR 0 2
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32006
// for i in tmp do
31952: LD_ADDR_VAR 0 1
31956: PUSH
31957: LD_VAR 0 2
31961: PUSH
31962: FOR_IN
31963: IFFALSE 32004
// for j := 1 to 4 do
31965: LD_ADDR_VAR 0 3
31969: PUSH
31970: DOUBLE
31971: LD_INT 1
31973: DEC
31974: ST_TO_ADDR
31975: LD_INT 4
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32000
// SetSkill ( i , j , 10 ) ;
31981: LD_VAR 0 1
31985: PPUSH
31986: LD_VAR 0 3
31990: PPUSH
31991: LD_INT 10
31993: PPUSH
31994: CALL_OW 237
31998: GO 31978
32000: POP
32001: POP
32002: GO 31962
32004: POP
32005: POP
// end ;
32006: PPOPN 3
32008: END
// every 0 0$1 trigger s30 do var i , tmp ;
32009: LD_EXP 116
32013: IFFALSE 32082
32015: GO 32017
32017: DISABLE
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: LD_INT 22
32029: PUSH
32030: LD_OWVAR 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 69
32043: ST_TO_ADDR
// if not tmp then
32044: LD_VAR 0 2
32048: NOT
32049: IFFALSE 32053
// exit ;
32051: GO 32082
// for i in tmp do
32053: LD_ADDR_VAR 0 1
32057: PUSH
32058: LD_VAR 0 2
32062: PUSH
32063: FOR_IN
32064: IFFALSE 32080
// SetLives ( i , 300 ) ;
32066: LD_VAR 0 1
32070: PPUSH
32071: LD_INT 300
32073: PPUSH
32074: CALL_OW 234
32078: GO 32063
32080: POP
32081: POP
// end ;
32082: PPOPN 2
32084: END
// every 0 0$1 trigger s60 do var i , tmp ;
32085: LD_EXP 117
32089: IFFALSE 32158
32091: GO 32093
32093: DISABLE
32094: LD_INT 0
32096: PPUSH
32097: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_INT 22
32105: PUSH
32106: LD_OWVAR 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PPUSH
32115: CALL_OW 69
32119: ST_TO_ADDR
// if not tmp then
32120: LD_VAR 0 2
32124: NOT
32125: IFFALSE 32129
// exit ;
32127: GO 32158
// for i in tmp do
32129: LD_ADDR_VAR 0 1
32133: PUSH
32134: LD_VAR 0 2
32138: PUSH
32139: FOR_IN
32140: IFFALSE 32156
// SetLives ( i , 600 ) ;
32142: LD_VAR 0 1
32146: PPUSH
32147: LD_INT 600
32149: PPUSH
32150: CALL_OW 234
32154: GO 32139
32156: POP
32157: POP
// end ;
32158: PPOPN 2
32160: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32161: LD_INT 0
32163: PPUSH
// case cmd of 301 :
32164: LD_VAR 0 1
32168: PUSH
32169: LD_INT 301
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32177
32175: GO 32209
32177: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32178: LD_VAR 0 6
32182: PPUSH
32183: LD_VAR 0 7
32187: PPUSH
32188: LD_VAR 0 8
32192: PPUSH
32193: LD_VAR 0 4
32197: PPUSH
32198: LD_VAR 0 5
32202: PPUSH
32203: CALL 33410 0 5
32207: GO 32330
32209: LD_INT 302
32211: DOUBLE
32212: EQUAL
32213: IFTRUE 32217
32215: GO 32254
32217: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32218: LD_VAR 0 6
32222: PPUSH
32223: LD_VAR 0 7
32227: PPUSH
32228: LD_VAR 0 8
32232: PPUSH
32233: LD_VAR 0 9
32237: PPUSH
32238: LD_VAR 0 4
32242: PPUSH
32243: LD_VAR 0 5
32247: PPUSH
32248: CALL 33501 0 6
32252: GO 32330
32254: LD_INT 303
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32299
32262: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32263: LD_VAR 0 6
32267: PPUSH
32268: LD_VAR 0 7
32272: PPUSH
32273: LD_VAR 0 8
32277: PPUSH
32278: LD_VAR 0 9
32282: PPUSH
32283: LD_VAR 0 4
32287: PPUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: CALL 32335 0 6
32297: GO 32330
32299: LD_INT 304
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32329
32307: POP
// hHackTeleport ( unit , x , y ) ; end ;
32308: LD_VAR 0 2
32312: PPUSH
32313: LD_VAR 0 4
32317: PPUSH
32318: LD_VAR 0 5
32322: PPUSH
32323: CALL 34094 0 3
32327: GO 32330
32329: POP
// end ;
32330: LD_VAR 0 12
32334: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32335: LD_INT 0
32337: PPUSH
32338: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32339: LD_VAR 0 1
32343: PUSH
32344: LD_INT 1
32346: LESS
32347: PUSH
32348: LD_VAR 0 1
32352: PUSH
32353: LD_INT 3
32355: GREATER
32356: OR
32357: PUSH
32358: LD_VAR 0 5
32362: PPUSH
32363: LD_VAR 0 6
32367: PPUSH
32368: CALL_OW 428
32372: OR
32373: IFFALSE 32377
// exit ;
32375: GO 33097
// uc_side := your_side ;
32377: LD_ADDR_OWVAR 20
32381: PUSH
32382: LD_OWVAR 2
32386: ST_TO_ADDR
// uc_nation := nation ;
32387: LD_ADDR_OWVAR 21
32391: PUSH
32392: LD_VAR 0 1
32396: ST_TO_ADDR
// bc_level = 1 ;
32397: LD_ADDR_OWVAR 43
32401: PUSH
32402: LD_INT 1
32404: ST_TO_ADDR
// case btype of 1 :
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32429
32418: POP
// bc_type := b_depot ; 2 :
32419: LD_ADDR_OWVAR 42
32423: PUSH
32424: LD_INT 0
32426: ST_TO_ADDR
32427: GO 33041
32429: LD_INT 2
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32448
32437: POP
// bc_type := b_warehouse ; 3 :
32438: LD_ADDR_OWVAR 42
32442: PUSH
32443: LD_INT 1
32445: ST_TO_ADDR
32446: GO 33041
32448: LD_INT 3
32450: DOUBLE
32451: EQUAL
32452: IFTRUE 32456
32454: GO 32467
32456: POP
// bc_type := b_lab ; 4 .. 9 :
32457: LD_ADDR_OWVAR 42
32461: PUSH
32462: LD_INT 6
32464: ST_TO_ADDR
32465: GO 33041
32467: LD_INT 4
32469: DOUBLE
32470: GREATEREQUAL
32471: IFFALSE 32479
32473: LD_INT 9
32475: DOUBLE
32476: LESSEQUAL
32477: IFTRUE 32481
32479: GO 32533
32481: POP
// begin bc_type := b_lab_half ;
32482: LD_ADDR_OWVAR 42
32486: PUSH
32487: LD_INT 7
32489: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32490: LD_ADDR_OWVAR 44
32494: PUSH
32495: LD_INT 10
32497: PUSH
32498: LD_INT 11
32500: PUSH
32501: LD_INT 12
32503: PUSH
32504: LD_INT 15
32506: PUSH
32507: LD_INT 14
32509: PUSH
32510: LD_INT 13
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: PUSH
32521: LD_VAR 0 2
32525: PUSH
32526: LD_INT 3
32528: MINUS
32529: ARRAY
32530: ST_TO_ADDR
// end ; 10 .. 13 :
32531: GO 33041
32533: LD_INT 10
32535: DOUBLE
32536: GREATEREQUAL
32537: IFFALSE 32545
32539: LD_INT 13
32541: DOUBLE
32542: LESSEQUAL
32543: IFTRUE 32547
32545: GO 32624
32547: POP
// begin bc_type := b_lab_full ;
32548: LD_ADDR_OWVAR 42
32552: PUSH
32553: LD_INT 8
32555: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32556: LD_ADDR_OWVAR 44
32560: PUSH
32561: LD_INT 10
32563: PUSH
32564: LD_INT 12
32566: PUSH
32567: LD_INT 14
32569: PUSH
32570: LD_INT 13
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: PUSH
32579: LD_VAR 0 2
32583: PUSH
32584: LD_INT 9
32586: MINUS
32587: ARRAY
32588: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32589: LD_ADDR_OWVAR 45
32593: PUSH
32594: LD_INT 11
32596: PUSH
32597: LD_INT 15
32599: PUSH
32600: LD_INT 12
32602: PUSH
32603: LD_INT 15
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: PUSH
32612: LD_VAR 0 2
32616: PUSH
32617: LD_INT 9
32619: MINUS
32620: ARRAY
32621: ST_TO_ADDR
// end ; 14 :
32622: GO 33041
32624: LD_INT 14
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_workshop ; 15 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 2
32640: ST_TO_ADDR
32641: GO 33041
32643: LD_INT 15
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_factory ; 16 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 3
32659: ST_TO_ADDR
32660: GO 33041
32662: LD_INT 16
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_ext_gun ; 17 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 17
32678: ST_TO_ADDR
32679: GO 33041
32681: LD_INT 17
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32717
32689: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 19
32697: PUSH
32698: LD_INT 23
32700: PUSH
32701: LD_INT 19
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: LD_VAR 0 1
32713: ARRAY
32714: ST_TO_ADDR
32715: GO 33041
32717: LD_INT 18
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32736
32725: POP
// bc_type := b_ext_radar ; 19 :
32726: LD_ADDR_OWVAR 42
32730: PUSH
32731: LD_INT 20
32733: ST_TO_ADDR
32734: GO 33041
32736: LD_INT 19
32738: DOUBLE
32739: EQUAL
32740: IFTRUE 32744
32742: GO 32755
32744: POP
// bc_type := b_ext_radio ; 20 :
32745: LD_ADDR_OWVAR 42
32749: PUSH
32750: LD_INT 22
32752: ST_TO_ADDR
32753: GO 33041
32755: LD_INT 20
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32774
32763: POP
// bc_type := b_ext_siberium ; 21 :
32764: LD_ADDR_OWVAR 42
32768: PUSH
32769: LD_INT 21
32771: ST_TO_ADDR
32772: GO 33041
32774: LD_INT 21
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32793
32782: POP
// bc_type := b_ext_computer ; 22 :
32783: LD_ADDR_OWVAR 42
32787: PUSH
32788: LD_INT 24
32790: ST_TO_ADDR
32791: GO 33041
32793: LD_INT 22
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32812
32801: POP
// bc_type := b_ext_track ; 23 :
32802: LD_ADDR_OWVAR 42
32806: PUSH
32807: LD_INT 16
32809: ST_TO_ADDR
32810: GO 33041
32812: LD_INT 23
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32831
32820: POP
// bc_type := b_ext_laser ; 24 :
32821: LD_ADDR_OWVAR 42
32825: PUSH
32826: LD_INT 25
32828: ST_TO_ADDR
32829: GO 33041
32831: LD_INT 24
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32850
32839: POP
// bc_type := b_control_tower ; 25 :
32840: LD_ADDR_OWVAR 42
32844: PUSH
32845: LD_INT 36
32847: ST_TO_ADDR
32848: GO 33041
32850: LD_INT 25
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32869
32858: POP
// bc_type := b_breastwork ; 26 :
32859: LD_ADDR_OWVAR 42
32863: PUSH
32864: LD_INT 31
32866: ST_TO_ADDR
32867: GO 33041
32869: LD_INT 26
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// bc_type := b_bunker ; 27 :
32878: LD_ADDR_OWVAR 42
32882: PUSH
32883: LD_INT 32
32885: ST_TO_ADDR
32886: GO 33041
32888: LD_INT 27
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32907
32896: POP
// bc_type := b_turret ; 28 :
32897: LD_ADDR_OWVAR 42
32901: PUSH
32902: LD_INT 33
32904: ST_TO_ADDR
32905: GO 33041
32907: LD_INT 28
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32926
32915: POP
// bc_type := b_armoury ; 29 :
32916: LD_ADDR_OWVAR 42
32920: PUSH
32921: LD_INT 4
32923: ST_TO_ADDR
32924: GO 33041
32926: LD_INT 29
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32945
32934: POP
// bc_type := b_barracks ; 30 :
32935: LD_ADDR_OWVAR 42
32939: PUSH
32940: LD_INT 5
32942: ST_TO_ADDR
32943: GO 33041
32945: LD_INT 30
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32964
32953: POP
// bc_type := b_solar_power ; 31 :
32954: LD_ADDR_OWVAR 42
32958: PUSH
32959: LD_INT 27
32961: ST_TO_ADDR
32962: GO 33041
32964: LD_INT 31
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32983
32972: POP
// bc_type := b_oil_power ; 32 :
32973: LD_ADDR_OWVAR 42
32977: PUSH
32978: LD_INT 26
32980: ST_TO_ADDR
32981: GO 33041
32983: LD_INT 32
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 32991
32989: GO 33002
32991: POP
// bc_type := b_siberite_power ; 33 :
32992: LD_ADDR_OWVAR 42
32996: PUSH
32997: LD_INT 28
32999: ST_TO_ADDR
33000: GO 33041
33002: LD_INT 33
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33021
33010: POP
// bc_type := b_oil_mine ; 34 :
33011: LD_ADDR_OWVAR 42
33015: PUSH
33016: LD_INT 29
33018: ST_TO_ADDR
33019: GO 33041
33021: LD_INT 34
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33040
33029: POP
// bc_type := b_siberite_mine ; end ;
33030: LD_ADDR_OWVAR 42
33034: PUSH
33035: LD_INT 30
33037: ST_TO_ADDR
33038: GO 33041
33040: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33041: LD_ADDR_VAR 0 8
33045: PUSH
33046: LD_VAR 0 5
33050: PPUSH
33051: LD_VAR 0 6
33055: PPUSH
33056: LD_VAR 0 3
33060: PPUSH
33061: CALL_OW 47
33065: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33066: LD_OWVAR 42
33070: PUSH
33071: LD_INT 32
33073: PUSH
33074: LD_INT 33
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: IN
33081: IFFALSE 33097
// PlaceWeaponTurret ( b , weapon ) ;
33083: LD_VAR 0 8
33087: PPUSH
33088: LD_VAR 0 4
33092: PPUSH
33093: CALL_OW 431
// end ;
33097: LD_VAR 0 7
33101: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_INT 22
33115: PUSH
33116: LD_OWVAR 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: PUSH
33128: LD_INT 30
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 30
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PPUSH
33157: CALL_OW 69
33161: ST_TO_ADDR
// if not tmp then
33162: LD_VAR 0 4
33166: NOT
33167: IFFALSE 33171
// exit ;
33169: GO 33230
// for i in tmp do
33171: LD_ADDR_VAR 0 2
33175: PUSH
33176: LD_VAR 0 4
33180: PUSH
33181: FOR_IN
33182: IFFALSE 33228
// for j = 1 to 3 do
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: DOUBLE
33190: LD_INT 1
33192: DEC
33193: ST_TO_ADDR
33194: LD_INT 3
33196: PUSH
33197: FOR_TO
33198: IFFALSE 33224
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33200: LD_VAR 0 2
33204: PPUSH
33205: CALL_OW 274
33209: PPUSH
33210: LD_VAR 0 3
33214: PPUSH
33215: LD_INT 99999
33217: PPUSH
33218: CALL_OW 277
33222: GO 33197
33224: POP
33225: POP
33226: GO 33181
33228: POP
33229: POP
// end ;
33230: LD_VAR 0 1
33234: RET
// export function hHackSetLevel10 ; var i , j ; begin
33235: LD_INT 0
33237: PPUSH
33238: PPUSH
33239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33240: LD_ADDR_VAR 0 2
33244: PUSH
33245: LD_INT 21
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 69
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33313
// if IsSelected ( i ) then
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 306
33272: IFFALSE 33311
// begin for j := 1 to 4 do
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: DOUBLE
33280: LD_INT 1
33282: DEC
33283: ST_TO_ADDR
33284: LD_INT 4
33286: PUSH
33287: FOR_TO
33288: IFFALSE 33309
// SetSkill ( i , j , 10 ) ;
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_VAR 0 3
33299: PPUSH
33300: LD_INT 10
33302: PPUSH
33303: CALL_OW 237
33307: GO 33287
33309: POP
33310: POP
// end ;
33311: GO 33260
33313: POP
33314: POP
// end ;
33315: LD_VAR 0 1
33319: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33320: LD_INT 0
33322: PPUSH
33323: PPUSH
33324: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33325: LD_ADDR_VAR 0 2
33329: PUSH
33330: LD_INT 22
33332: PUSH
33333: LD_OWVAR 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 21
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PPUSH
33356: CALL_OW 69
33360: PUSH
33361: FOR_IN
33362: IFFALSE 33403
// begin for j := 1 to 4 do
33364: LD_ADDR_VAR 0 3
33368: PUSH
33369: DOUBLE
33370: LD_INT 1
33372: DEC
33373: ST_TO_ADDR
33374: LD_INT 4
33376: PUSH
33377: FOR_TO
33378: IFFALSE 33399
// SetSkill ( i , j , 10 ) ;
33380: LD_VAR 0 2
33384: PPUSH
33385: LD_VAR 0 3
33389: PPUSH
33390: LD_INT 10
33392: PPUSH
33393: CALL_OW 237
33397: GO 33377
33399: POP
33400: POP
// end ;
33401: GO 33361
33403: POP
33404: POP
// end ;
33405: LD_VAR 0 1
33409: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33410: LD_INT 0
33412: PPUSH
// uc_side := your_side ;
33413: LD_ADDR_OWVAR 20
33417: PUSH
33418: LD_OWVAR 2
33422: ST_TO_ADDR
// uc_nation := nation ;
33423: LD_ADDR_OWVAR 21
33427: PUSH
33428: LD_VAR 0 1
33432: ST_TO_ADDR
// InitHc ;
33433: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33437: LD_INT 0
33439: PPUSH
33440: LD_VAR 0 2
33444: PPUSH
33445: LD_VAR 0 3
33449: PPUSH
33450: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33454: LD_VAR 0 4
33458: PPUSH
33459: LD_VAR 0 5
33463: PPUSH
33464: CALL_OW 428
33468: PUSH
33469: LD_INT 0
33471: EQUAL
33472: IFFALSE 33496
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33474: CALL_OW 44
33478: PPUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: LD_VAR 0 5
33488: PPUSH
33489: LD_INT 1
33491: PPUSH
33492: CALL_OW 48
// end ;
33496: LD_VAR 0 6
33500: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33501: LD_INT 0
33503: PPUSH
33504: PPUSH
// uc_side := your_side ;
33505: LD_ADDR_OWVAR 20
33509: PUSH
33510: LD_OWVAR 2
33514: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33515: LD_VAR 0 1
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 3
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: LD_INT 5
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: IN
33542: IFFALSE 33554
// uc_nation := nation_american else
33544: LD_ADDR_OWVAR 21
33548: PUSH
33549: LD_INT 1
33551: ST_TO_ADDR
33552: GO 33597
// if chassis in [ 11 , 12 , 13 , 14 ] then
33554: LD_VAR 0 1
33558: PUSH
33559: LD_INT 11
33561: PUSH
33562: LD_INT 12
33564: PUSH
33565: LD_INT 13
33567: PUSH
33568: LD_INT 14
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: IN
33577: IFFALSE 33589
// uc_nation := nation_arabian else
33579: LD_ADDR_OWVAR 21
33583: PUSH
33584: LD_INT 2
33586: ST_TO_ADDR
33587: GO 33597
// uc_nation := nation_russian ;
33589: LD_ADDR_OWVAR 21
33593: PUSH
33594: LD_INT 3
33596: ST_TO_ADDR
// vc_chassis := chassis ;
33597: LD_ADDR_OWVAR 37
33601: PUSH
33602: LD_VAR 0 1
33606: ST_TO_ADDR
// vc_engine := engine ;
33607: LD_ADDR_OWVAR 39
33611: PUSH
33612: LD_VAR 0 2
33616: ST_TO_ADDR
// vc_control := control ;
33617: LD_ADDR_OWVAR 38
33621: PUSH
33622: LD_VAR 0 3
33626: ST_TO_ADDR
// vc_weapon := weapon ;
33627: LD_ADDR_OWVAR 40
33631: PUSH
33632: LD_VAR 0 4
33636: ST_TO_ADDR
// un := CreateVehicle ;
33637: LD_ADDR_VAR 0 8
33641: PUSH
33642: CALL_OW 45
33646: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33647: LD_VAR 0 8
33651: PPUSH
33652: LD_INT 0
33654: PPUSH
33655: LD_INT 5
33657: PPUSH
33658: CALL_OW 12
33662: PPUSH
33663: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33667: LD_VAR 0 8
33671: PPUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: LD_VAR 0 6
33681: PPUSH
33682: LD_INT 1
33684: PPUSH
33685: CALL_OW 48
// end ;
33689: LD_VAR 0 7
33693: RET
// export hInvincible ; every 1 do
33694: GO 33696
33696: DISABLE
// hInvincible := [ ] ;
33697: LD_ADDR_EXP 118
33701: PUSH
33702: EMPTY
33703: ST_TO_ADDR
33704: END
// every 10 do var i ;
33705: GO 33707
33707: DISABLE
33708: LD_INT 0
33710: PPUSH
// begin enable ;
33711: ENABLE
// if not hInvincible then
33712: LD_EXP 118
33716: NOT
33717: IFFALSE 33721
// exit ;
33719: GO 33765
// for i in hInvincible do
33721: LD_ADDR_VAR 0 1
33725: PUSH
33726: LD_EXP 118
33730: PUSH
33731: FOR_IN
33732: IFFALSE 33763
// if GetLives ( i ) < 1000 then
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 256
33743: PUSH
33744: LD_INT 1000
33746: LESS
33747: IFFALSE 33761
// SetLives ( i , 1000 ) ;
33749: LD_VAR 0 1
33753: PPUSH
33754: LD_INT 1000
33756: PPUSH
33757: CALL_OW 234
33761: GO 33731
33763: POP
33764: POP
// end ;
33765: PPOPN 1
33767: END
// export function hHackInvincible ; var i ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33772: LD_ADDR_VAR 0 2
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 21
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 21
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: PPUSH
33805: CALL_OW 69
33809: PUSH
33810: FOR_IN
33811: IFFALSE 33872
// if IsSelected ( i ) then
33813: LD_VAR 0 2
33817: PPUSH
33818: CALL_OW 306
33822: IFFALSE 33870
// begin if i in hInvincible then
33824: LD_VAR 0 2
33828: PUSH
33829: LD_EXP 118
33833: IN
33834: IFFALSE 33854
// hInvincible := hInvincible diff i else
33836: LD_ADDR_EXP 118
33840: PUSH
33841: LD_EXP 118
33845: PUSH
33846: LD_VAR 0 2
33850: DIFF
33851: ST_TO_ADDR
33852: GO 33870
// hInvincible := hInvincible union i ;
33854: LD_ADDR_EXP 118
33858: PUSH
33859: LD_EXP 118
33863: PUSH
33864: LD_VAR 0 2
33868: UNION
33869: ST_TO_ADDR
// end ;
33870: GO 33810
33872: POP
33873: POP
// end ;
33874: LD_VAR 0 1
33878: RET
// export function hHackInvisible ; var i , j ; begin
33879: LD_INT 0
33881: PPUSH
33882: PPUSH
33883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33884: LD_ADDR_VAR 0 2
33888: PUSH
33889: LD_INT 21
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PPUSH
33899: CALL_OW 69
33903: PUSH
33904: FOR_IN
33905: IFFALSE 33929
// if IsSelected ( i ) then
33907: LD_VAR 0 2
33911: PPUSH
33912: CALL_OW 306
33916: IFFALSE 33927
// ComForceInvisible ( i ) ;
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 496
33927: GO 33904
33929: POP
33930: POP
// end ;
33931: LD_VAR 0 1
33935: RET
// export function hHackChangeYourSide ; begin
33936: LD_INT 0
33938: PPUSH
// if your_side = 8 then
33939: LD_OWVAR 2
33943: PUSH
33944: LD_INT 8
33946: EQUAL
33947: IFFALSE 33959
// your_side := 0 else
33949: LD_ADDR_OWVAR 2
33953: PUSH
33954: LD_INT 0
33956: ST_TO_ADDR
33957: GO 33973
// your_side := your_side + 1 ;
33959: LD_ADDR_OWVAR 2
33963: PUSH
33964: LD_OWVAR 2
33968: PUSH
33969: LD_INT 1
33971: PLUS
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 1
33977: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33978: LD_INT 0
33980: PPUSH
33981: PPUSH
33982: PPUSH
// for i in all_units do
33983: LD_ADDR_VAR 0 2
33987: PUSH
33988: LD_OWVAR 3
33992: PUSH
33993: FOR_IN
33994: IFFALSE 34072
// if IsSelected ( i ) then
33996: LD_VAR 0 2
34000: PPUSH
34001: CALL_OW 306
34005: IFFALSE 34070
// begin j := GetSide ( i ) ;
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_VAR 0 2
34016: PPUSH
34017: CALL_OW 255
34021: ST_TO_ADDR
// if j = 8 then
34022: LD_VAR 0 3
34026: PUSH
34027: LD_INT 8
34029: EQUAL
34030: IFFALSE 34042
// j := 0 else
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 0
34039: ST_TO_ADDR
34040: GO 34056
// j := j + 1 ;
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_VAR 0 3
34051: PUSH
34052: LD_INT 1
34054: PLUS
34055: ST_TO_ADDR
// SetSide ( i , j ) ;
34056: LD_VAR 0 2
34060: PPUSH
34061: LD_VAR 0 3
34065: PPUSH
34066: CALL_OW 235
// end ;
34070: GO 33993
34072: POP
34073: POP
// end ;
34074: LD_VAR 0 1
34078: RET
// export function hHackFog ; begin
34079: LD_INT 0
34081: PPUSH
// FogOff ( true ) ;
34082: LD_INT 1
34084: PPUSH
34085: CALL_OW 344
// end ;
34089: LD_VAR 0 1
34093: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34094: LD_INT 0
34096: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34097: LD_VAR 0 1
34101: PPUSH
34102: LD_VAR 0 2
34106: PPUSH
34107: LD_VAR 0 3
34111: PPUSH
34112: LD_INT 1
34114: PPUSH
34115: LD_INT 1
34117: PPUSH
34118: CALL_OW 483
// CenterOnXY ( x , y ) ;
34122: LD_VAR 0 2
34126: PPUSH
34127: LD_VAR 0 3
34131: PPUSH
34132: CALL_OW 84
// end ;
34136: LD_VAR 0 4
34140: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34141: LD_INT 0
34143: PPUSH
34144: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34145: LD_VAR 0 1
34149: NOT
34150: PUSH
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_VAR 0 3
34160: PPUSH
34161: CALL_OW 488
34165: NOT
34166: OR
34167: PUSH
34168: LD_VAR 0 1
34172: PPUSH
34173: CALL_OW 266
34177: PUSH
34178: LD_INT 3
34180: NONEQUAL
34181: PUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 247
34191: PUSH
34192: LD_INT 1
34194: EQUAL
34195: NOT
34196: AND
34197: OR
34198: IFFALSE 34202
// exit ;
34200: GO 34351
// if GetType ( factory ) = unit_human then
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 247
34211: PUSH
34212: LD_INT 1
34214: EQUAL
34215: IFFALSE 34232
// factory := IsInUnit ( factory ) ;
34217: LD_ADDR_VAR 0 1
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 310
34231: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 266
34241: PUSH
34242: LD_INT 3
34244: NONEQUAL
34245: IFFALSE 34249
// exit ;
34247: GO 34351
// if HexInfo ( x , y ) = factory then
34249: LD_VAR 0 2
34253: PPUSH
34254: LD_VAR 0 3
34258: PPUSH
34259: CALL_OW 428
34263: PUSH
34264: LD_VAR 0 1
34268: EQUAL
34269: IFFALSE 34296
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34271: LD_ADDR_EXP 119
34275: PUSH
34276: LD_EXP 119
34280: PPUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: LD_INT 0
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
34294: GO 34347
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34296: LD_ADDR_EXP 119
34300: PUSH
34301: LD_EXP 119
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: LD_VAR 0 1
34315: PPUSH
34316: CALL_OW 255
34320: PUSH
34321: LD_VAR 0 1
34325: PUSH
34326: LD_VAR 0 2
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: PPUSH
34342: CALL_OW 1
34346: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34347: CALL 34356 0 0
// end ;
34351: LD_VAR 0 4
34355: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34356: LD_INT 0
34358: PPUSH
34359: PPUSH
34360: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34361: LD_STRING resetFactoryWaypoint();
34363: PPUSH
34364: CALL_OW 559
// if factoryWaypoints then
34368: LD_EXP 119
34372: IFFALSE 34498
// begin list := PrepareArray ( factoryWaypoints ) ;
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_EXP 119
34383: PPUSH
34384: CALL 80967 0 1
34388: ST_TO_ADDR
// for i := 1 to list do
34389: LD_ADDR_VAR 0 2
34393: PUSH
34394: DOUBLE
34395: LD_INT 1
34397: DEC
34398: ST_TO_ADDR
34399: LD_VAR 0 3
34403: PUSH
34404: FOR_TO
34405: IFFALSE 34496
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34407: LD_STRING setFactoryWaypointXY(
34409: PUSH
34410: LD_VAR 0 3
34414: PUSH
34415: LD_VAR 0 2
34419: ARRAY
34420: PUSH
34421: LD_INT 1
34423: ARRAY
34424: STR
34425: PUSH
34426: LD_STRING ,
34428: STR
34429: PUSH
34430: LD_VAR 0 3
34434: PUSH
34435: LD_VAR 0 2
34439: ARRAY
34440: PUSH
34441: LD_INT 2
34443: ARRAY
34444: STR
34445: PUSH
34446: LD_STRING ,
34448: STR
34449: PUSH
34450: LD_VAR 0 3
34454: PUSH
34455: LD_VAR 0 2
34459: ARRAY
34460: PUSH
34461: LD_INT 3
34463: ARRAY
34464: STR
34465: PUSH
34466: LD_STRING ,
34468: STR
34469: PUSH
34470: LD_VAR 0 3
34474: PUSH
34475: LD_VAR 0 2
34479: ARRAY
34480: PUSH
34481: LD_INT 4
34483: ARRAY
34484: STR
34485: PUSH
34486: LD_STRING )
34488: STR
34489: PPUSH
34490: CALL_OW 559
34494: GO 34404
34496: POP
34497: POP
// end ; end ;
34498: LD_VAR 0 1
34502: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34503: LD_INT 0
34505: PPUSH
// if HexInfo ( x , y ) = warehouse then
34506: LD_VAR 0 2
34510: PPUSH
34511: LD_VAR 0 3
34515: PPUSH
34516: CALL_OW 428
34520: PUSH
34521: LD_VAR 0 1
34525: EQUAL
34526: IFFALSE 34553
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34528: LD_ADDR_EXP 120
34532: PUSH
34533: LD_EXP 120
34537: PPUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: LD_INT 0
34545: PPUSH
34546: CALL_OW 1
34550: ST_TO_ADDR
34551: GO 34604
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34553: LD_ADDR_EXP 120
34557: PUSH
34558: LD_EXP 120
34562: PPUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 255
34577: PUSH
34578: LD_VAR 0 1
34582: PUSH
34583: LD_VAR 0 2
34587: PUSH
34588: LD_VAR 0 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: PPUSH
34599: CALL_OW 1
34603: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34604: CALL 34613 0 0
// end ;
34608: LD_VAR 0 4
34612: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
34617: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34618: LD_STRING resetWarehouseGatheringPoints();
34620: PPUSH
34621: CALL_OW 559
// if warehouseGatheringPoints then
34625: LD_EXP 120
34629: IFFALSE 34755
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34631: LD_ADDR_VAR 0 3
34635: PUSH
34636: LD_EXP 120
34640: PPUSH
34641: CALL 80967 0 1
34645: ST_TO_ADDR
// for i := 1 to list do
34646: LD_ADDR_VAR 0 2
34650: PUSH
34651: DOUBLE
34652: LD_INT 1
34654: DEC
34655: ST_TO_ADDR
34656: LD_VAR 0 3
34660: PUSH
34661: FOR_TO
34662: IFFALSE 34753
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34664: LD_STRING setWarehouseGatheringPointXY(
34666: PUSH
34667: LD_VAR 0 3
34671: PUSH
34672: LD_VAR 0 2
34676: ARRAY
34677: PUSH
34678: LD_INT 1
34680: ARRAY
34681: STR
34682: PUSH
34683: LD_STRING ,
34685: STR
34686: PUSH
34687: LD_VAR 0 3
34691: PUSH
34692: LD_VAR 0 2
34696: ARRAY
34697: PUSH
34698: LD_INT 2
34700: ARRAY
34701: STR
34702: PUSH
34703: LD_STRING ,
34705: STR
34706: PUSH
34707: LD_VAR 0 3
34711: PUSH
34712: LD_VAR 0 2
34716: ARRAY
34717: PUSH
34718: LD_INT 3
34720: ARRAY
34721: STR
34722: PUSH
34723: LD_STRING ,
34725: STR
34726: PUSH
34727: LD_VAR 0 3
34731: PUSH
34732: LD_VAR 0 2
34736: ARRAY
34737: PUSH
34738: LD_INT 4
34740: ARRAY
34741: STR
34742: PUSH
34743: LD_STRING )
34745: STR
34746: PPUSH
34747: CALL_OW 559
34751: GO 34661
34753: POP
34754: POP
// end ; end ;
34755: LD_VAR 0 1
34759: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34760: LD_EXP 120
34764: IFFALSE 35449
34766: GO 34768
34768: DISABLE
34769: LD_INT 0
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
// begin enable ;
34780: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_EXP 120
34790: PPUSH
34791: CALL 80967 0 1
34795: ST_TO_ADDR
// if not list then
34796: LD_VAR 0 3
34800: NOT
34801: IFFALSE 34805
// exit ;
34803: GO 35449
// for i := 1 to list do
34805: LD_ADDR_VAR 0 1
34809: PUSH
34810: DOUBLE
34811: LD_INT 1
34813: DEC
34814: ST_TO_ADDR
34815: LD_VAR 0 3
34819: PUSH
34820: FOR_TO
34821: IFFALSE 35447
// begin depot := list [ i ] [ 2 ] ;
34823: LD_ADDR_VAR 0 8
34827: PUSH
34828: LD_VAR 0 3
34832: PUSH
34833: LD_VAR 0 1
34837: ARRAY
34838: PUSH
34839: LD_INT 2
34841: ARRAY
34842: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34843: LD_ADDR_VAR 0 5
34847: PUSH
34848: LD_VAR 0 3
34852: PUSH
34853: LD_VAR 0 1
34857: ARRAY
34858: PUSH
34859: LD_INT 1
34861: ARRAY
34862: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34863: LD_VAR 0 8
34867: PPUSH
34868: CALL_OW 301
34872: PUSH
34873: LD_VAR 0 5
34877: PUSH
34878: LD_VAR 0 8
34882: PPUSH
34883: CALL_OW 255
34887: NONEQUAL
34888: OR
34889: IFFALSE 34918
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34891: LD_ADDR_EXP 120
34895: PUSH
34896: LD_EXP 120
34900: PPUSH
34901: LD_VAR 0 8
34905: PPUSH
34906: LD_INT 0
34908: PPUSH
34909: CALL_OW 1
34913: ST_TO_ADDR
// exit ;
34914: POP
34915: POP
34916: GO 35449
// end ; x := list [ i ] [ 3 ] ;
34918: LD_ADDR_VAR 0 6
34922: PUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_VAR 0 1
34932: ARRAY
34933: PUSH
34934: LD_INT 3
34936: ARRAY
34937: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34938: LD_ADDR_VAR 0 7
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 1
34952: ARRAY
34953: PUSH
34954: LD_INT 4
34956: ARRAY
34957: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34958: LD_ADDR_VAR 0 9
34962: PUSH
34963: LD_VAR 0 6
34967: PPUSH
34968: LD_VAR 0 7
34972: PPUSH
34973: LD_INT 16
34975: PPUSH
34976: CALL 79555 0 3
34980: ST_TO_ADDR
// if not cratesNearbyPoint then
34981: LD_VAR 0 9
34985: NOT
34986: IFFALSE 34992
// exit ;
34988: POP
34989: POP
34990: GO 35449
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34992: LD_ADDR_VAR 0 4
34996: PUSH
34997: LD_INT 22
34999: PUSH
35000: LD_VAR 0 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 3
35011: PUSH
35012: LD_INT 60
35014: PUSH
35015: EMPTY
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 91
35024: PUSH
35025: LD_VAR 0 8
35029: PUSH
35030: LD_INT 6
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 25
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 25
35053: PUSH
35054: LD_INT 16
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: PUSH
35077: LD_VAR 0 8
35081: PPUSH
35082: CALL_OW 313
35086: PPUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 60
35092: PUSH
35093: EMPTY
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: LD_INT 25
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 25
35115: PUSH
35116: LD_INT 16
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 72
35136: UNION
35137: ST_TO_ADDR
// if tmp then
35138: LD_VAR 0 4
35142: IFFALSE 35222
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35144: LD_ADDR_VAR 0 4
35148: PUSH
35149: LD_VAR 0 4
35153: PPUSH
35154: LD_INT 3
35156: PPUSH
35157: CALL 77524 0 2
35161: ST_TO_ADDR
// for j in tmp do
35162: LD_ADDR_VAR 0 2
35166: PUSH
35167: LD_VAR 0 4
35171: PUSH
35172: FOR_IN
35173: IFFALSE 35216
// begin if IsInUnit ( j ) then
35175: LD_VAR 0 2
35179: PPUSH
35180: CALL_OW 310
35184: IFFALSE 35195
// ComExit ( j ) ;
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL 77607 0 1
// AddComCollect ( j , x , y ) ;
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 6
35204: PPUSH
35205: LD_VAR 0 7
35209: PPUSH
35210: CALL_OW 177
// end ;
35214: GO 35172
35216: POP
35217: POP
// exit ;
35218: POP
35219: POP
35220: GO 35449
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35222: LD_ADDR_VAR 0 4
35226: PUSH
35227: LD_INT 22
35229: PUSH
35230: LD_VAR 0 5
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 91
35241: PUSH
35242: LD_VAR 0 8
35246: PUSH
35247: LD_INT 8
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 34
35260: PUSH
35261: LD_INT 12
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 34
35270: PUSH
35271: LD_INT 51
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 34
35280: PUSH
35281: LD_INT 32
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 34
35290: PUSH
35291: LD_INT 89
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: PPUSH
35310: CALL_OW 69
35314: ST_TO_ADDR
// if tmp then
35315: LD_VAR 0 4
35319: IFFALSE 35445
// begin for j in tmp do
35321: LD_ADDR_VAR 0 2
35325: PUSH
35326: LD_VAR 0 4
35330: PUSH
35331: FOR_IN
35332: IFFALSE 35443
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35334: LD_VAR 0 2
35338: PPUSH
35339: CALL_OW 262
35343: PUSH
35344: LD_INT 3
35346: EQUAL
35347: PUSH
35348: LD_VAR 0 2
35352: PPUSH
35353: CALL_OW 261
35357: PUSH
35358: LD_INT 20
35360: GREATER
35361: OR
35362: PUSH
35363: LD_VAR 0 2
35367: PPUSH
35368: CALL_OW 314
35372: NOT
35373: AND
35374: PUSH
35375: LD_VAR 0 2
35379: PPUSH
35380: CALL_OW 263
35384: PUSH
35385: LD_INT 1
35387: NONEQUAL
35388: PUSH
35389: LD_VAR 0 2
35393: PPUSH
35394: CALL_OW 311
35398: OR
35399: AND
35400: IFFALSE 35441
// begin ComCollect ( j , x , y ) ;
35402: LD_VAR 0 2
35406: PPUSH
35407: LD_VAR 0 6
35411: PPUSH
35412: LD_VAR 0 7
35416: PPUSH
35417: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35421: LD_VAR 0 2
35425: PPUSH
35426: LD_VAR 0 8
35430: PPUSH
35431: CALL_OW 172
// exit ;
35435: POP
35436: POP
35437: POP
35438: POP
35439: GO 35449
// end ;
35441: GO 35331
35443: POP
35444: POP
// end ; end ;
35445: GO 34820
35447: POP
35448: POP
// end ; end_of_file
35449: PPOPN 9
35451: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35452: LD_INT 0
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35458: LD_VAR 0 1
35462: PPUSH
35463: CALL_OW 264
35467: PUSH
35468: LD_INT 91
35470: EQUAL
35471: IFFALSE 35543
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35473: LD_INT 68
35475: PPUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 255
35485: PPUSH
35486: CALL_OW 321
35490: PUSH
35491: LD_INT 2
35493: EQUAL
35494: IFFALSE 35506
// eff := 70 else
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: LD_INT 70
35503: ST_TO_ADDR
35504: GO 35514
// eff := 30 ;
35506: LD_ADDR_VAR 0 4
35510: PUSH
35511: LD_INT 30
35513: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35514: LD_VAR 0 1
35518: PPUSH
35519: CALL_OW 250
35523: PPUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 251
35533: PPUSH
35534: LD_VAR 0 4
35538: PPUSH
35539: CALL_OW 495
// end ; end ;
35543: LD_VAR 0 2
35547: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35548: LD_INT 0
35550: PPUSH
// end ;
35551: LD_VAR 0 4
35555: RET
// export function SOS_Command ( cmd ) ; begin
35556: LD_INT 0
35558: PPUSH
// end ;
35559: LD_VAR 0 2
35563: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35564: LD_INT 0
35566: PPUSH
// end ;
35567: LD_VAR 0 6
35571: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35572: LD_INT 0
35574: PPUSH
35575: PPUSH
// if not vehicle or not factory then
35576: LD_VAR 0 1
35580: NOT
35581: PUSH
35582: LD_VAR 0 2
35586: NOT
35587: OR
35588: IFFALSE 35592
// exit ;
35590: GO 35823
// if factoryWaypoints >= factory then
35592: LD_EXP 119
35596: PUSH
35597: LD_VAR 0 2
35601: GREATEREQUAL
35602: IFFALSE 35823
// if factoryWaypoints [ factory ] then
35604: LD_EXP 119
35608: PUSH
35609: LD_VAR 0 2
35613: ARRAY
35614: IFFALSE 35823
// begin if GetControl ( vehicle ) = control_manual then
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 263
35625: PUSH
35626: LD_INT 1
35628: EQUAL
35629: IFFALSE 35710
// begin driver := IsDrivenBy ( vehicle ) ;
35631: LD_ADDR_VAR 0 4
35635: PUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 311
35645: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35646: LD_VAR 0 4
35650: PPUSH
35651: LD_EXP 119
35655: PUSH
35656: LD_VAR 0 2
35660: ARRAY
35661: PUSH
35662: LD_INT 3
35664: ARRAY
35665: PPUSH
35666: LD_EXP 119
35670: PUSH
35671: LD_VAR 0 2
35675: ARRAY
35676: PUSH
35677: LD_INT 4
35679: ARRAY
35680: PPUSH
35681: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35685: LD_VAR 0 4
35689: PPUSH
35690: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35694: LD_VAR 0 4
35698: PPUSH
35699: LD_VAR 0 2
35703: PPUSH
35704: CALL_OW 180
// end else
35708: GO 35823
// if GetControl ( vehicle ) = control_remote then
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 263
35719: PUSH
35720: LD_INT 2
35722: EQUAL
35723: IFFALSE 35784
// begin wait ( 0 0$2 ) ;
35725: LD_INT 70
35727: PPUSH
35728: CALL_OW 67
// if Connect ( vehicle ) then
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL 47847 0 1
35741: IFFALSE 35782
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35743: LD_VAR 0 1
35747: PPUSH
35748: LD_EXP 119
35752: PUSH
35753: LD_VAR 0 2
35757: ARRAY
35758: PUSH
35759: LD_INT 3
35761: ARRAY
35762: PPUSH
35763: LD_EXP 119
35767: PUSH
35768: LD_VAR 0 2
35772: ARRAY
35773: PUSH
35774: LD_INT 4
35776: ARRAY
35777: PPUSH
35778: CALL_OW 171
// end else
35782: GO 35823
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_EXP 119
35793: PUSH
35794: LD_VAR 0 2
35798: ARRAY
35799: PUSH
35800: LD_INT 3
35802: ARRAY
35803: PPUSH
35804: LD_EXP 119
35808: PUSH
35809: LD_VAR 0 2
35813: ARRAY
35814: PUSH
35815: LD_INT 4
35817: ARRAY
35818: PPUSH
35819: CALL_OW 171
// end ; end ;
35823: LD_VAR 0 3
35827: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35828: LD_INT 0
35830: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 250
35838: EQUAL
35839: PUSH
35840: LD_VAR 0 2
35844: PPUSH
35845: CALL_OW 264
35849: PUSH
35850: LD_INT 81
35852: EQUAL
35853: AND
35854: IFFALSE 35875
// MinerPlaceMine ( unit , x , y ) ;
35856: LD_VAR 0 2
35860: PPUSH
35861: LD_VAR 0 4
35865: PPUSH
35866: LD_VAR 0 5
35870: PPUSH
35871: CALL 38260 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35875: LD_VAR 0 1
35879: PUSH
35880: LD_INT 251
35882: EQUAL
35883: PUSH
35884: LD_VAR 0 2
35888: PPUSH
35889: CALL_OW 264
35893: PUSH
35894: LD_INT 81
35896: EQUAL
35897: AND
35898: IFFALSE 35919
// MinerDetonateMine ( unit , x , y ) ;
35900: LD_VAR 0 2
35904: PPUSH
35905: LD_VAR 0 4
35909: PPUSH
35910: LD_VAR 0 5
35914: PPUSH
35915: CALL 38535 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35919: LD_VAR 0 1
35923: PUSH
35924: LD_INT 252
35926: EQUAL
35927: PUSH
35928: LD_VAR 0 2
35932: PPUSH
35933: CALL_OW 264
35937: PUSH
35938: LD_INT 81
35940: EQUAL
35941: AND
35942: IFFALSE 35963
// MinerCreateMinefield ( unit , x , y ) ;
35944: LD_VAR 0 2
35948: PPUSH
35949: LD_VAR 0 4
35953: PPUSH
35954: LD_VAR 0 5
35958: PPUSH
35959: CALL 38952 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35963: LD_VAR 0 1
35967: PUSH
35968: LD_INT 253
35970: EQUAL
35971: PUSH
35972: LD_VAR 0 2
35976: PPUSH
35977: CALL_OW 257
35981: PUSH
35982: LD_INT 5
35984: EQUAL
35985: AND
35986: IFFALSE 36007
// ComBinocular ( unit , x , y ) ;
35988: LD_VAR 0 2
35992: PPUSH
35993: LD_VAR 0 4
35997: PPUSH
35998: LD_VAR 0 5
36002: PPUSH
36003: CALL 39321 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36007: LD_VAR 0 1
36011: PUSH
36012: LD_INT 254
36014: EQUAL
36015: PUSH
36016: LD_VAR 0 2
36020: PPUSH
36021: CALL_OW 264
36025: PUSH
36026: LD_INT 99
36028: EQUAL
36029: AND
36030: PUSH
36031: LD_VAR 0 3
36035: PPUSH
36036: CALL_OW 263
36040: PUSH
36041: LD_INT 3
36043: EQUAL
36044: AND
36045: IFFALSE 36061
// HackDestroyVehicle ( unit , selectedUnit ) ;
36047: LD_VAR 0 2
36051: PPUSH
36052: LD_VAR 0 3
36056: PPUSH
36057: CALL 37624 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36061: LD_VAR 0 1
36065: PUSH
36066: LD_INT 255
36068: EQUAL
36069: PUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 264
36079: PUSH
36080: LD_INT 14
36082: PUSH
36083: LD_INT 53
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: IN
36090: AND
36091: PUSH
36092: LD_VAR 0 4
36096: PPUSH
36097: LD_VAR 0 5
36101: PPUSH
36102: CALL_OW 488
36106: AND
36107: IFFALSE 36131
// CutTreeXYR ( unit , x , y , 12 ) ;
36109: LD_VAR 0 2
36113: PPUSH
36114: LD_VAR 0 4
36118: PPUSH
36119: LD_VAR 0 5
36123: PPUSH
36124: LD_INT 12
36126: PPUSH
36127: CALL 36194 0 4
// if cmd = 256 then
36131: LD_VAR 0 1
36135: PUSH
36136: LD_INT 256
36138: EQUAL
36139: IFFALSE 36160
// SetFactoryWaypoint ( unit , x , y ) ;
36141: LD_VAR 0 2
36145: PPUSH
36146: LD_VAR 0 4
36150: PPUSH
36151: LD_VAR 0 5
36155: PPUSH
36156: CALL 34141 0 3
// if cmd = 257 then
36160: LD_VAR 0 1
36164: PUSH
36165: LD_INT 257
36167: EQUAL
36168: IFFALSE 36189
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36170: LD_VAR 0 2
36174: PPUSH
36175: LD_VAR 0 4
36179: PPUSH
36180: LD_VAR 0 5
36184: PPUSH
36185: CALL 34503 0 3
// end ;
36189: LD_VAR 0 6
36193: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36194: LD_INT 0
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36205: LD_VAR 0 1
36209: NOT
36210: PUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 488
36225: NOT
36226: OR
36227: PUSH
36228: LD_VAR 0 4
36232: NOT
36233: OR
36234: IFFALSE 36238
// exit ;
36236: GO 36578
// list := [ ] ;
36238: LD_ADDR_VAR 0 13
36242: PUSH
36243: EMPTY
36244: ST_TO_ADDR
// if x - r < 0 then
36245: LD_VAR 0 2
36249: PUSH
36250: LD_VAR 0 4
36254: MINUS
36255: PUSH
36256: LD_INT 0
36258: LESS
36259: IFFALSE 36271
// min_x := 0 else
36261: LD_ADDR_VAR 0 7
36265: PUSH
36266: LD_INT 0
36268: ST_TO_ADDR
36269: GO 36287
// min_x := x - r ;
36271: LD_ADDR_VAR 0 7
36275: PUSH
36276: LD_VAR 0 2
36280: PUSH
36281: LD_VAR 0 4
36285: MINUS
36286: ST_TO_ADDR
// if y - r < 0 then
36287: LD_VAR 0 3
36291: PUSH
36292: LD_VAR 0 4
36296: MINUS
36297: PUSH
36298: LD_INT 0
36300: LESS
36301: IFFALSE 36313
// min_y := 0 else
36303: LD_ADDR_VAR 0 8
36307: PUSH
36308: LD_INT 0
36310: ST_TO_ADDR
36311: GO 36329
// min_y := y - r ;
36313: LD_ADDR_VAR 0 8
36317: PUSH
36318: LD_VAR 0 3
36322: PUSH
36323: LD_VAR 0 4
36327: MINUS
36328: ST_TO_ADDR
// max_x := x + r ;
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: LD_VAR 0 2
36338: PUSH
36339: LD_VAR 0 4
36343: PLUS
36344: ST_TO_ADDR
// max_y := y + r ;
36345: LD_ADDR_VAR 0 10
36349: PUSH
36350: LD_VAR 0 3
36354: PUSH
36355: LD_VAR 0 4
36359: PLUS
36360: ST_TO_ADDR
// for _x = min_x to max_x do
36361: LD_ADDR_VAR 0 11
36365: PUSH
36366: DOUBLE
36367: LD_VAR 0 7
36371: DEC
36372: ST_TO_ADDR
36373: LD_VAR 0 9
36377: PUSH
36378: FOR_TO
36379: IFFALSE 36496
// for _y = min_y to max_y do
36381: LD_ADDR_VAR 0 12
36385: PUSH
36386: DOUBLE
36387: LD_VAR 0 8
36391: DEC
36392: ST_TO_ADDR
36393: LD_VAR 0 10
36397: PUSH
36398: FOR_TO
36399: IFFALSE 36492
// begin if not ValidHex ( _x , _y ) then
36401: LD_VAR 0 11
36405: PPUSH
36406: LD_VAR 0 12
36410: PPUSH
36411: CALL_OW 488
36415: NOT
36416: IFFALSE 36420
// continue ;
36418: GO 36398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36420: LD_VAR 0 11
36424: PPUSH
36425: LD_VAR 0 12
36429: PPUSH
36430: CALL_OW 351
36434: PUSH
36435: LD_VAR 0 11
36439: PPUSH
36440: LD_VAR 0 12
36444: PPUSH
36445: CALL_OW 554
36449: AND
36450: IFFALSE 36490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36452: LD_ADDR_VAR 0 13
36456: PUSH
36457: LD_VAR 0 13
36461: PPUSH
36462: LD_VAR 0 13
36466: PUSH
36467: LD_INT 1
36469: PLUS
36470: PPUSH
36471: LD_VAR 0 11
36475: PUSH
36476: LD_VAR 0 12
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PPUSH
36485: CALL_OW 2
36489: ST_TO_ADDR
// end ;
36490: GO 36398
36492: POP
36493: POP
36494: GO 36378
36496: POP
36497: POP
// if not list then
36498: LD_VAR 0 13
36502: NOT
36503: IFFALSE 36507
// exit ;
36505: GO 36578
// for i in list do
36507: LD_ADDR_VAR 0 6
36511: PUSH
36512: LD_VAR 0 13
36516: PUSH
36517: FOR_IN
36518: IFFALSE 36576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36520: LD_VAR 0 1
36524: PPUSH
36525: LD_STRING M
36527: PUSH
36528: LD_VAR 0 6
36532: PUSH
36533: LD_INT 1
36535: ARRAY
36536: PUSH
36537: LD_VAR 0 6
36541: PUSH
36542: LD_INT 2
36544: ARRAY
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: PUSH
36567: EMPTY
36568: LIST
36569: PPUSH
36570: CALL_OW 447
36574: GO 36517
36576: POP
36577: POP
// end ;
36578: LD_VAR 0 5
36582: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36583: LD_EXP 122
36587: NOT
36588: IFFALSE 36638
36590: GO 36592
36592: DISABLE
// begin initHack := true ;
36593: LD_ADDR_EXP 122
36597: PUSH
36598: LD_INT 1
36600: ST_TO_ADDR
// hackTanks := [ ] ;
36601: LD_ADDR_EXP 123
36605: PUSH
36606: EMPTY
36607: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36608: LD_ADDR_EXP 124
36612: PUSH
36613: EMPTY
36614: ST_TO_ADDR
// hackLimit := 3 ;
36615: LD_ADDR_EXP 125
36619: PUSH
36620: LD_INT 3
36622: ST_TO_ADDR
// hackDist := 12 ;
36623: LD_ADDR_EXP 126
36627: PUSH
36628: LD_INT 12
36630: ST_TO_ADDR
// hackCounter := [ ] ;
36631: LD_ADDR_EXP 127
36635: PUSH
36636: EMPTY
36637: ST_TO_ADDR
// end ;
36638: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36639: LD_EXP 122
36643: PUSH
36644: LD_INT 34
36646: PUSH
36647: LD_INT 99
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PPUSH
36654: CALL_OW 69
36658: AND
36659: IFFALSE 36912
36661: GO 36663
36663: DISABLE
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
// begin enable ;
36668: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36669: LD_ADDR_VAR 0 1
36673: PUSH
36674: LD_INT 34
36676: PUSH
36677: LD_INT 99
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PPUSH
36684: CALL_OW 69
36688: PUSH
36689: FOR_IN
36690: IFFALSE 36910
// begin if not i in hackTanks then
36692: LD_VAR 0 1
36696: PUSH
36697: LD_EXP 123
36701: IN
36702: NOT
36703: IFFALSE 36786
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36705: LD_ADDR_EXP 123
36709: PUSH
36710: LD_EXP 123
36714: PPUSH
36715: LD_EXP 123
36719: PUSH
36720: LD_INT 1
36722: PLUS
36723: PPUSH
36724: LD_VAR 0 1
36728: PPUSH
36729: CALL_OW 1
36733: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36734: LD_ADDR_EXP 124
36738: PUSH
36739: LD_EXP 124
36743: PPUSH
36744: LD_EXP 124
36748: PUSH
36749: LD_INT 1
36751: PLUS
36752: PPUSH
36753: EMPTY
36754: PPUSH
36755: CALL_OW 1
36759: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36760: LD_ADDR_EXP 127
36764: PUSH
36765: LD_EXP 127
36769: PPUSH
36770: LD_EXP 127
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PPUSH
36779: EMPTY
36780: PPUSH
36781: CALL_OW 1
36785: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 302
36795: NOT
36796: IFFALSE 36809
// begin HackUnlinkAll ( i ) ;
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL 36915 0 1
// continue ;
36807: GO 36689
// end ; HackCheckCapturedStatus ( i ) ;
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL 37358 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36818: LD_ADDR_VAR 0 2
36822: PUSH
36823: LD_INT 81
36825: PUSH
36826: LD_VAR 0 1
36830: PPUSH
36831: CALL_OW 255
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 33
36842: PUSH
36843: LD_INT 3
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 91
36852: PUSH
36853: LD_VAR 0 1
36857: PUSH
36858: LD_EXP 126
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 50
36870: PUSH
36871: EMPTY
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: PPUSH
36880: CALL_OW 69
36884: ST_TO_ADDR
// if not tmp then
36885: LD_VAR 0 2
36889: NOT
36890: IFFALSE 36894
// continue ;
36892: GO 36689
// HackLink ( i , tmp ) ;
36894: LD_VAR 0 1
36898: PPUSH
36899: LD_VAR 0 2
36903: PPUSH
36904: CALL 37051 0 2
// end ;
36908: GO 36689
36910: POP
36911: POP
// end ;
36912: PPOPN 2
36914: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36915: LD_INT 0
36917: PPUSH
36918: PPUSH
36919: PPUSH
// if not hack in hackTanks then
36920: LD_VAR 0 1
36924: PUSH
36925: LD_EXP 123
36929: IN
36930: NOT
36931: IFFALSE 36935
// exit ;
36933: GO 37046
// index := GetElementIndex ( hackTanks , hack ) ;
36935: LD_ADDR_VAR 0 4
36939: PUSH
36940: LD_EXP 123
36944: PPUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL 44663 0 2
36954: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36955: LD_EXP 124
36959: PUSH
36960: LD_VAR 0 4
36964: ARRAY
36965: IFFALSE 37046
// begin for i in hackTanksCaptured [ index ] do
36967: LD_ADDR_VAR 0 3
36971: PUSH
36972: LD_EXP 124
36976: PUSH
36977: LD_VAR 0 4
36981: ARRAY
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37010
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36986: LD_VAR 0 3
36990: PUSH
36991: LD_INT 1
36993: ARRAY
36994: PPUSH
36995: LD_VAR 0 3
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: PPUSH
37004: CALL_OW 235
37008: GO 36983
37010: POP
37011: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37012: LD_ADDR_EXP 124
37016: PUSH
37017: LD_EXP 124
37021: PPUSH
37022: LD_VAR 0 4
37026: PPUSH
37027: EMPTY
37028: PPUSH
37029: CALL_OW 1
37033: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37034: LD_VAR 0 1
37038: PPUSH
37039: LD_INT 0
37041: PPUSH
37042: CALL_OW 505
// end ; end ;
37046: LD_VAR 0 2
37050: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37051: LD_INT 0
37053: PPUSH
37054: PPUSH
37055: PPUSH
// if not hack in hackTanks or not vehicles then
37056: LD_VAR 0 1
37060: PUSH
37061: LD_EXP 123
37065: IN
37066: NOT
37067: PUSH
37068: LD_VAR 0 2
37072: NOT
37073: OR
37074: IFFALSE 37078
// exit ;
37076: GO 37353
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37078: LD_ADDR_VAR 0 2
37082: PUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: LD_VAR 0 2
37092: PPUSH
37093: LD_INT 1
37095: PPUSH
37096: LD_INT 1
37098: PPUSH
37099: CALL 45313 0 4
37103: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37104: LD_ADDR_VAR 0 5
37108: PUSH
37109: LD_EXP 123
37113: PPUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL 44663 0 2
37123: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37124: LD_EXP 124
37128: PUSH
37129: LD_VAR 0 5
37133: ARRAY
37134: PUSH
37135: LD_EXP 125
37139: LESS
37140: IFFALSE 37329
// begin for i := 1 to vehicles do
37142: LD_ADDR_VAR 0 4
37146: PUSH
37147: DOUBLE
37148: LD_INT 1
37150: DEC
37151: ST_TO_ADDR
37152: LD_VAR 0 2
37156: PUSH
37157: FOR_TO
37158: IFFALSE 37327
// begin if hackTanksCaptured [ index ] = hackLimit then
37160: LD_EXP 124
37164: PUSH
37165: LD_VAR 0 5
37169: ARRAY
37170: PUSH
37171: LD_EXP 125
37175: EQUAL
37176: IFFALSE 37180
// break ;
37178: GO 37327
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37180: LD_ADDR_EXP 127
37184: PUSH
37185: LD_EXP 127
37189: PPUSH
37190: LD_VAR 0 5
37194: PPUSH
37195: LD_EXP 127
37199: PUSH
37200: LD_VAR 0 5
37204: ARRAY
37205: PUSH
37206: LD_INT 1
37208: PLUS
37209: PPUSH
37210: CALL_OW 1
37214: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37215: LD_ADDR_EXP 124
37219: PUSH
37220: LD_EXP 124
37224: PPUSH
37225: LD_VAR 0 5
37229: PUSH
37230: LD_EXP 124
37234: PUSH
37235: LD_VAR 0 5
37239: ARRAY
37240: PUSH
37241: LD_INT 1
37243: PLUS
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PPUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_VAR 0 4
37258: ARRAY
37259: PUSH
37260: LD_VAR 0 2
37264: PUSH
37265: LD_VAR 0 4
37269: ARRAY
37270: PPUSH
37271: CALL_OW 255
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PPUSH
37280: CALL 44878 0 3
37284: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37285: LD_VAR 0 2
37289: PUSH
37290: LD_VAR 0 4
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 255
37305: PPUSH
37306: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37310: LD_VAR 0 2
37314: PUSH
37315: LD_VAR 0 4
37319: ARRAY
37320: PPUSH
37321: CALL_OW 141
// end ;
37325: GO 37157
37327: POP
37328: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_EXP 124
37338: PUSH
37339: LD_VAR 0 5
37343: ARRAY
37344: PUSH
37345: LD_INT 0
37347: PLUS
37348: PPUSH
37349: CALL_OW 505
// end ;
37353: LD_VAR 0 3
37357: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37358: LD_INT 0
37360: PPUSH
37361: PPUSH
37362: PPUSH
37363: PPUSH
// if not hack in hackTanks then
37364: LD_VAR 0 1
37368: PUSH
37369: LD_EXP 123
37373: IN
37374: NOT
37375: IFFALSE 37379
// exit ;
37377: GO 37619
// index := GetElementIndex ( hackTanks , hack ) ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_EXP 123
37388: PPUSH
37389: LD_VAR 0 1
37393: PPUSH
37394: CALL 44663 0 2
37398: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37399: LD_ADDR_VAR 0 3
37403: PUSH
37404: DOUBLE
37405: LD_EXP 124
37409: PUSH
37410: LD_VAR 0 4
37414: ARRAY
37415: INC
37416: ST_TO_ADDR
37417: LD_INT 1
37419: PUSH
37420: FOR_DOWNTO
37421: IFFALSE 37593
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_EXP 124
37432: PUSH
37433: LD_VAR 0 4
37437: ARRAY
37438: PUSH
37439: LD_VAR 0 3
37443: ARRAY
37444: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37445: LD_VAR 0 5
37449: PUSH
37450: LD_INT 1
37452: ARRAY
37453: PPUSH
37454: CALL_OW 302
37458: NOT
37459: PUSH
37460: LD_VAR 0 5
37464: PUSH
37465: LD_INT 1
37467: ARRAY
37468: PPUSH
37469: CALL_OW 255
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL_OW 255
37483: NONEQUAL
37484: OR
37485: IFFALSE 37591
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37487: LD_VAR 0 5
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: PPUSH
37496: CALL_OW 305
37500: PUSH
37501: LD_VAR 0 5
37505: PUSH
37506: LD_INT 1
37508: ARRAY
37509: PPUSH
37510: CALL_OW 255
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 255
37524: EQUAL
37525: AND
37526: IFFALSE 37550
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37528: LD_VAR 0 5
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PPUSH
37537: LD_VAR 0 5
37541: PUSH
37542: LD_INT 2
37544: ARRAY
37545: PPUSH
37546: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37550: LD_ADDR_EXP 124
37554: PUSH
37555: LD_EXP 124
37559: PPUSH
37560: LD_VAR 0 4
37564: PPUSH
37565: LD_EXP 124
37569: PUSH
37570: LD_VAR 0 4
37574: ARRAY
37575: PPUSH
37576: LD_VAR 0 3
37580: PPUSH
37581: CALL_OW 3
37585: PPUSH
37586: CALL_OW 1
37590: ST_TO_ADDR
// end ; end ;
37591: GO 37420
37593: POP
37594: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37595: LD_VAR 0 1
37599: PPUSH
37600: LD_EXP 124
37604: PUSH
37605: LD_VAR 0 4
37609: ARRAY
37610: PUSH
37611: LD_INT 0
37613: PLUS
37614: PPUSH
37615: CALL_OW 505
// end ;
37619: LD_VAR 0 2
37623: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37624: LD_INT 0
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
// if not hack in hackTanks then
37630: LD_VAR 0 1
37634: PUSH
37635: LD_EXP 123
37639: IN
37640: NOT
37641: IFFALSE 37645
// exit ;
37643: GO 37730
// index := GetElementIndex ( hackTanks , hack ) ;
37645: LD_ADDR_VAR 0 5
37649: PUSH
37650: LD_EXP 123
37654: PPUSH
37655: LD_VAR 0 1
37659: PPUSH
37660: CALL 44663 0 2
37664: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37665: LD_ADDR_VAR 0 4
37669: PUSH
37670: DOUBLE
37671: LD_INT 1
37673: DEC
37674: ST_TO_ADDR
37675: LD_EXP 124
37679: PUSH
37680: LD_VAR 0 5
37684: ARRAY
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37728
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37689: LD_EXP 124
37693: PUSH
37694: LD_VAR 0 5
37698: ARRAY
37699: PUSH
37700: LD_VAR 0 4
37704: ARRAY
37705: PUSH
37706: LD_INT 1
37708: ARRAY
37709: PUSH
37710: LD_VAR 0 2
37714: EQUAL
37715: IFFALSE 37726
// KillUnit ( vehicle ) ;
37717: LD_VAR 0 2
37721: PPUSH
37722: CALL_OW 66
37726: GO 37686
37728: POP
37729: POP
// end ;
37730: LD_VAR 0 3
37734: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37735: LD_EXP 128
37739: NOT
37740: IFFALSE 37775
37742: GO 37744
37744: DISABLE
// begin initMiner := true ;
37745: LD_ADDR_EXP 128
37749: PUSH
37750: LD_INT 1
37752: ST_TO_ADDR
// minersList := [ ] ;
37753: LD_ADDR_EXP 129
37757: PUSH
37758: EMPTY
37759: ST_TO_ADDR
// minerMinesList := [ ] ;
37760: LD_ADDR_EXP 130
37764: PUSH
37765: EMPTY
37766: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37767: LD_ADDR_EXP 131
37771: PUSH
37772: LD_INT 5
37774: ST_TO_ADDR
// end ;
37775: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37776: LD_EXP 128
37780: PUSH
37781: LD_INT 34
37783: PUSH
37784: LD_INT 81
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PPUSH
37791: CALL_OW 69
37795: AND
37796: IFFALSE 38257
37798: GO 37800
37800: DISABLE
37801: LD_INT 0
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
// begin enable ;
37807: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37808: LD_ADDR_VAR 0 1
37812: PUSH
37813: LD_INT 34
37815: PUSH
37816: LD_INT 81
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PPUSH
37823: CALL_OW 69
37827: PUSH
37828: FOR_IN
37829: IFFALSE 37901
// begin if not i in minersList then
37831: LD_VAR 0 1
37835: PUSH
37836: LD_EXP 129
37840: IN
37841: NOT
37842: IFFALSE 37899
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37844: LD_ADDR_EXP 129
37848: PUSH
37849: LD_EXP 129
37853: PPUSH
37854: LD_EXP 129
37858: PUSH
37859: LD_INT 1
37861: PLUS
37862: PPUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 1
37872: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37873: LD_ADDR_EXP 130
37877: PUSH
37878: LD_EXP 130
37882: PPUSH
37883: LD_EXP 130
37887: PUSH
37888: LD_INT 1
37890: PLUS
37891: PPUSH
37892: EMPTY
37893: PPUSH
37894: CALL_OW 1
37898: ST_TO_ADDR
// end end ;
37899: GO 37828
37901: POP
37902: POP
// for i := minerMinesList downto 1 do
37903: LD_ADDR_VAR 0 1
37907: PUSH
37908: DOUBLE
37909: LD_EXP 130
37913: INC
37914: ST_TO_ADDR
37915: LD_INT 1
37917: PUSH
37918: FOR_DOWNTO
37919: IFFALSE 38255
// begin if IsLive ( minersList [ i ] ) then
37921: LD_EXP 129
37925: PUSH
37926: LD_VAR 0 1
37930: ARRAY
37931: PPUSH
37932: CALL_OW 300
37936: IFFALSE 37964
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37938: LD_EXP 129
37942: PUSH
37943: LD_VAR 0 1
37947: ARRAY
37948: PPUSH
37949: LD_EXP 130
37953: PUSH
37954: LD_VAR 0 1
37958: ARRAY
37959: PPUSH
37960: CALL_OW 505
// if not minerMinesList [ i ] then
37964: LD_EXP 130
37968: PUSH
37969: LD_VAR 0 1
37973: ARRAY
37974: NOT
37975: IFFALSE 37979
// continue ;
37977: GO 37918
// for j := minerMinesList [ i ] downto 1 do
37979: LD_ADDR_VAR 0 2
37983: PUSH
37984: DOUBLE
37985: LD_EXP 130
37989: PUSH
37990: LD_VAR 0 1
37994: ARRAY
37995: INC
37996: ST_TO_ADDR
37997: LD_INT 1
37999: PUSH
38000: FOR_DOWNTO
38001: IFFALSE 38251
// begin side := GetSide ( minersList [ i ] ) ;
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: LD_EXP 129
38012: PUSH
38013: LD_VAR 0 1
38017: ARRAY
38018: PPUSH
38019: CALL_OW 255
38023: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38024: LD_ADDR_VAR 0 4
38028: PUSH
38029: LD_EXP 130
38033: PUSH
38034: LD_VAR 0 1
38038: ARRAY
38039: PUSH
38040: LD_VAR 0 2
38044: ARRAY
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: LD_EXP 130
38054: PUSH
38055: LD_VAR 0 1
38059: ARRAY
38060: PUSH
38061: LD_VAR 0 2
38065: ARRAY
38066: PUSH
38067: LD_INT 2
38069: ARRAY
38070: PPUSH
38071: CALL_OW 428
38075: ST_TO_ADDR
// if not tmp then
38076: LD_VAR 0 4
38080: NOT
38081: IFFALSE 38085
// continue ;
38083: GO 38000
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38085: LD_VAR 0 4
38089: PUSH
38090: LD_INT 81
38092: PUSH
38093: LD_VAR 0 3
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PPUSH
38102: CALL_OW 69
38106: IN
38107: PUSH
38108: LD_EXP 130
38112: PUSH
38113: LD_VAR 0 1
38117: ARRAY
38118: PUSH
38119: LD_VAR 0 2
38123: ARRAY
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: PPUSH
38129: LD_EXP 130
38133: PUSH
38134: LD_VAR 0 1
38138: ARRAY
38139: PUSH
38140: LD_VAR 0 2
38144: ARRAY
38145: PUSH
38146: LD_INT 2
38148: ARRAY
38149: PPUSH
38150: CALL_OW 458
38154: AND
38155: IFFALSE 38249
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38157: LD_EXP 130
38161: PUSH
38162: LD_VAR 0 1
38166: ARRAY
38167: PUSH
38168: LD_VAR 0 2
38172: ARRAY
38173: PUSH
38174: LD_INT 1
38176: ARRAY
38177: PPUSH
38178: LD_EXP 130
38182: PUSH
38183: LD_VAR 0 1
38187: ARRAY
38188: PUSH
38189: LD_VAR 0 2
38193: ARRAY
38194: PUSH
38195: LD_INT 2
38197: ARRAY
38198: PPUSH
38199: LD_VAR 0 3
38203: PPUSH
38204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38208: LD_ADDR_EXP 130
38212: PUSH
38213: LD_EXP 130
38217: PPUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: LD_EXP 130
38227: PUSH
38228: LD_VAR 0 1
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 2
38238: PPUSH
38239: CALL_OW 3
38243: PPUSH
38244: CALL_OW 1
38248: ST_TO_ADDR
// end ; end ;
38249: GO 38000
38251: POP
38252: POP
// end ;
38253: GO 37918
38255: POP
38256: POP
// end ;
38257: PPOPN 4
38259: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38260: LD_INT 0
38262: PPUSH
38263: PPUSH
// result := false ;
38264: LD_ADDR_VAR 0 4
38268: PUSH
38269: LD_INT 0
38271: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 264
38281: PUSH
38282: LD_INT 81
38284: EQUAL
38285: NOT
38286: IFFALSE 38290
// exit ;
38288: GO 38530
// index := GetElementIndex ( minersList , unit ) ;
38290: LD_ADDR_VAR 0 5
38294: PUSH
38295: LD_EXP 129
38299: PPUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL 44663 0 2
38309: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38310: LD_EXP 130
38314: PUSH
38315: LD_VAR 0 5
38319: ARRAY
38320: PUSH
38321: LD_EXP 131
38325: GREATEREQUAL
38326: IFFALSE 38330
// exit ;
38328: GO 38530
// ComMoveXY ( unit , x , y ) ;
38330: LD_VAR 0 1
38334: PPUSH
38335: LD_VAR 0 2
38339: PPUSH
38340: LD_VAR 0 3
38344: PPUSH
38345: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38349: LD_INT 35
38351: PPUSH
38352: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38356: LD_VAR 0 1
38360: PPUSH
38361: LD_VAR 0 2
38365: PPUSH
38366: LD_VAR 0 3
38370: PPUSH
38371: CALL 76018 0 3
38375: NOT
38376: PUSH
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 314
38386: AND
38387: IFFALSE 38391
// exit ;
38389: GO 38530
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38391: LD_VAR 0 2
38395: PPUSH
38396: LD_VAR 0 3
38400: PPUSH
38401: CALL_OW 428
38405: PUSH
38406: LD_VAR 0 1
38410: EQUAL
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 314
38421: NOT
38422: AND
38423: IFFALSE 38349
// PlaySoundXY ( x , y , PlantMine ) ;
38425: LD_VAR 0 2
38429: PPUSH
38430: LD_VAR 0 3
38434: PPUSH
38435: LD_STRING PlantMine
38437: PPUSH
38438: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38442: LD_VAR 0 2
38446: PPUSH
38447: LD_VAR 0 3
38451: PPUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 255
38461: PPUSH
38462: LD_INT 0
38464: PPUSH
38465: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38469: LD_ADDR_EXP 130
38473: PUSH
38474: LD_EXP 130
38478: PPUSH
38479: LD_VAR 0 5
38483: PUSH
38484: LD_EXP 130
38488: PUSH
38489: LD_VAR 0 5
38493: ARRAY
38494: PUSH
38495: LD_INT 1
38497: PLUS
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PPUSH
38503: LD_VAR 0 2
38507: PUSH
38508: LD_VAR 0 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PPUSH
38517: CALL 44878 0 3
38521: ST_TO_ADDR
// result := true ;
38522: LD_ADDR_VAR 0 4
38526: PUSH
38527: LD_INT 1
38529: ST_TO_ADDR
// end ;
38530: LD_VAR 0 4
38534: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38535: LD_INT 0
38537: PPUSH
38538: PPUSH
38539: PPUSH
// if not unit in minersList then
38540: LD_VAR 0 1
38544: PUSH
38545: LD_EXP 129
38549: IN
38550: NOT
38551: IFFALSE 38555
// exit ;
38553: GO 38947
// index := GetElementIndex ( minersList , unit ) ;
38555: LD_ADDR_VAR 0 6
38559: PUSH
38560: LD_EXP 129
38564: PPUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL 44663 0 2
38574: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: DOUBLE
38581: LD_EXP 130
38585: PUSH
38586: LD_VAR 0 6
38590: ARRAY
38591: INC
38592: ST_TO_ADDR
38593: LD_INT 1
38595: PUSH
38596: FOR_DOWNTO
38597: IFFALSE 38758
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38599: LD_EXP 130
38603: PUSH
38604: LD_VAR 0 6
38608: ARRAY
38609: PUSH
38610: LD_VAR 0 5
38614: ARRAY
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PUSH
38620: LD_VAR 0 2
38624: EQUAL
38625: PUSH
38626: LD_EXP 130
38630: PUSH
38631: LD_VAR 0 6
38635: ARRAY
38636: PUSH
38637: LD_VAR 0 5
38641: ARRAY
38642: PUSH
38643: LD_INT 2
38645: ARRAY
38646: PUSH
38647: LD_VAR 0 3
38651: EQUAL
38652: AND
38653: IFFALSE 38756
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38655: LD_EXP 130
38659: PUSH
38660: LD_VAR 0 6
38664: ARRAY
38665: PUSH
38666: LD_VAR 0 5
38670: ARRAY
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: PPUSH
38676: LD_EXP 130
38680: PUSH
38681: LD_VAR 0 6
38685: ARRAY
38686: PUSH
38687: LD_VAR 0 5
38691: ARRAY
38692: PUSH
38693: LD_INT 2
38695: ARRAY
38696: PPUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL_OW 255
38706: PPUSH
38707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38711: LD_ADDR_EXP 130
38715: PUSH
38716: LD_EXP 130
38720: PPUSH
38721: LD_VAR 0 6
38725: PPUSH
38726: LD_EXP 130
38730: PUSH
38731: LD_VAR 0 6
38735: ARRAY
38736: PPUSH
38737: LD_VAR 0 5
38741: PPUSH
38742: CALL_OW 3
38746: PPUSH
38747: CALL_OW 1
38751: ST_TO_ADDR
// exit ;
38752: POP
38753: POP
38754: GO 38947
// end ; end ;
38756: GO 38596
38758: POP
38759: POP
// for i := minerMinesList [ index ] downto 1 do
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: DOUBLE
38766: LD_EXP 130
38770: PUSH
38771: LD_VAR 0 6
38775: ARRAY
38776: INC
38777: ST_TO_ADDR
38778: LD_INT 1
38780: PUSH
38781: FOR_DOWNTO
38782: IFFALSE 38945
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38784: LD_EXP 130
38788: PUSH
38789: LD_VAR 0 6
38793: ARRAY
38794: PUSH
38795: LD_VAR 0 5
38799: ARRAY
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: LD_EXP 130
38809: PUSH
38810: LD_VAR 0 6
38814: ARRAY
38815: PUSH
38816: LD_VAR 0 5
38820: ARRAY
38821: PUSH
38822: LD_INT 2
38824: ARRAY
38825: PPUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: LD_VAR 0 3
38835: PPUSH
38836: CALL_OW 298
38840: PUSH
38841: LD_INT 6
38843: LESS
38844: IFFALSE 38943
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38846: LD_EXP 130
38850: PUSH
38851: LD_VAR 0 6
38855: ARRAY
38856: PUSH
38857: LD_VAR 0 5
38861: ARRAY
38862: PUSH
38863: LD_INT 1
38865: ARRAY
38866: PPUSH
38867: LD_EXP 130
38871: PUSH
38872: LD_VAR 0 6
38876: ARRAY
38877: PUSH
38878: LD_VAR 0 5
38882: ARRAY
38883: PUSH
38884: LD_INT 2
38886: ARRAY
38887: PPUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: CALL_OW 255
38897: PPUSH
38898: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38902: LD_ADDR_EXP 130
38906: PUSH
38907: LD_EXP 130
38911: PPUSH
38912: LD_VAR 0 6
38916: PPUSH
38917: LD_EXP 130
38921: PUSH
38922: LD_VAR 0 6
38926: ARRAY
38927: PPUSH
38928: LD_VAR 0 5
38932: PPUSH
38933: CALL_OW 3
38937: PPUSH
38938: CALL_OW 1
38942: ST_TO_ADDR
// end ; end ;
38943: GO 38781
38945: POP
38946: POP
// end ;
38947: LD_VAR 0 4
38951: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38952: LD_INT 0
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL_OW 264
38972: PUSH
38973: LD_INT 81
38975: EQUAL
38976: NOT
38977: PUSH
38978: LD_VAR 0 1
38982: PUSH
38983: LD_EXP 129
38987: IN
38988: NOT
38989: OR
38990: IFFALSE 38994
// exit ;
38992: GO 39316
// index := GetElementIndex ( minersList , unit ) ;
38994: LD_ADDR_VAR 0 6
38998: PUSH
38999: LD_EXP 129
39003: PPUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL 44663 0 2
39013: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39014: LD_ADDR_VAR 0 8
39018: PUSH
39019: LD_EXP 131
39023: PUSH
39024: LD_EXP 130
39028: PUSH
39029: LD_VAR 0 6
39033: ARRAY
39034: MINUS
39035: ST_TO_ADDR
// if not minesFreeAmount then
39036: LD_VAR 0 8
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39316
// tmp := [ ] ;
39045: LD_ADDR_VAR 0 7
39049: PUSH
39050: EMPTY
39051: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39052: LD_ADDR_VAR 0 5
39056: PUSH
39057: DOUBLE
39058: LD_INT 1
39060: DEC
39061: ST_TO_ADDR
39062: LD_VAR 0 8
39066: PUSH
39067: FOR_TO
39068: IFFALSE 39263
// begin _d := rand ( 0 , 5 ) ;
39070: LD_ADDR_VAR 0 11
39074: PUSH
39075: LD_INT 0
39077: PPUSH
39078: LD_INT 5
39080: PPUSH
39081: CALL_OW 12
39085: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39086: LD_ADDR_VAR 0 12
39090: PUSH
39091: LD_INT 2
39093: PPUSH
39094: LD_INT 6
39096: PPUSH
39097: CALL_OW 12
39101: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39102: LD_ADDR_VAR 0 9
39106: PUSH
39107: LD_VAR 0 2
39111: PPUSH
39112: LD_VAR 0 11
39116: PPUSH
39117: LD_VAR 0 12
39121: PPUSH
39122: CALL_OW 272
39126: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39127: LD_ADDR_VAR 0 10
39131: PUSH
39132: LD_VAR 0 3
39136: PPUSH
39137: LD_VAR 0 11
39141: PPUSH
39142: LD_VAR 0 12
39146: PPUSH
39147: CALL_OW 273
39151: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39152: LD_VAR 0 9
39156: PPUSH
39157: LD_VAR 0 10
39161: PPUSH
39162: CALL_OW 488
39166: PUSH
39167: LD_VAR 0 9
39171: PUSH
39172: LD_VAR 0 10
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_VAR 0 7
39185: IN
39186: NOT
39187: AND
39188: PUSH
39189: LD_VAR 0 9
39193: PPUSH
39194: LD_VAR 0 10
39198: PPUSH
39199: CALL_OW 458
39203: NOT
39204: AND
39205: IFFALSE 39247
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39207: LD_ADDR_VAR 0 7
39211: PUSH
39212: LD_VAR 0 7
39216: PPUSH
39217: LD_VAR 0 7
39221: PUSH
39222: LD_INT 1
39224: PLUS
39225: PPUSH
39226: LD_VAR 0 9
39230: PUSH
39231: LD_VAR 0 10
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PPUSH
39240: CALL_OW 1
39244: ST_TO_ADDR
39245: GO 39261
// i := i - 1 ;
39247: LD_ADDR_VAR 0 5
39251: PUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_INT 1
39259: MINUS
39260: ST_TO_ADDR
// end ;
39261: GO 39067
39263: POP
39264: POP
// for i in tmp do
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 7
39274: PUSH
39275: FOR_IN
39276: IFFALSE 39314
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39278: LD_VAR 0 1
39282: PPUSH
39283: LD_VAR 0 5
39287: PUSH
39288: LD_INT 1
39290: ARRAY
39291: PPUSH
39292: LD_VAR 0 5
39296: PUSH
39297: LD_INT 2
39299: ARRAY
39300: PPUSH
39301: CALL 38260 0 3
39305: NOT
39306: IFFALSE 39312
// exit ;
39308: POP
39309: POP
39310: GO 39316
39312: GO 39275
39314: POP
39315: POP
// end ;
39316: LD_VAR 0 4
39320: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39321: LD_INT 0
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
// if not GetClass ( unit ) = class_sniper then
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 257
39339: PUSH
39340: LD_INT 5
39342: EQUAL
39343: NOT
39344: IFFALSE 39348
// exit ;
39346: GO 39736
// dist := 8 ;
39348: LD_ADDR_VAR 0 5
39352: PUSH
39353: LD_INT 8
39355: ST_TO_ADDR
// viewRange := 12 ;
39356: LD_ADDR_VAR 0 7
39360: PUSH
39361: LD_INT 12
39363: ST_TO_ADDR
// side := GetSide ( unit ) ;
39364: LD_ADDR_VAR 0 6
39368: PUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 255
39378: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39379: LD_INT 61
39381: PPUSH
39382: LD_VAR 0 6
39386: PPUSH
39387: CALL_OW 321
39391: PUSH
39392: LD_INT 2
39394: EQUAL
39395: IFFALSE 39405
// viewRange := 16 ;
39397: LD_ADDR_VAR 0 7
39401: PUSH
39402: LD_INT 16
39404: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39405: LD_VAR 0 1
39409: PPUSH
39410: LD_VAR 0 2
39414: PPUSH
39415: LD_VAR 0 3
39419: PPUSH
39420: CALL_OW 297
39424: PUSH
39425: LD_VAR 0 5
39429: GREATER
39430: IFFALSE 39509
// begin ComMoveXY ( unit , x , y ) ;
39432: LD_VAR 0 1
39436: PPUSH
39437: LD_VAR 0 2
39441: PPUSH
39442: LD_VAR 0 3
39446: PPUSH
39447: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39451: LD_INT 35
39453: PPUSH
39454: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39458: LD_VAR 0 1
39462: PPUSH
39463: LD_VAR 0 2
39467: PPUSH
39468: LD_VAR 0 3
39472: PPUSH
39473: CALL 76018 0 3
39477: NOT
39478: IFFALSE 39482
// exit ;
39480: GO 39736
// until GetDistUnitXY ( unit , x , y ) < dist ;
39482: LD_VAR 0 1
39486: PPUSH
39487: LD_VAR 0 2
39491: PPUSH
39492: LD_VAR 0 3
39496: PPUSH
39497: CALL_OW 297
39501: PUSH
39502: LD_VAR 0 5
39506: LESS
39507: IFFALSE 39451
// end ; ComTurnXY ( unit , x , y ) ;
39509: LD_VAR 0 1
39513: PPUSH
39514: LD_VAR 0 2
39518: PPUSH
39519: LD_VAR 0 3
39523: PPUSH
39524: CALL_OW 118
// wait ( 5 ) ;
39528: LD_INT 5
39530: PPUSH
39531: CALL_OW 67
// _d := GetDir ( unit ) ;
39535: LD_ADDR_VAR 0 10
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: CALL_OW 254
39549: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39550: LD_ADDR_VAR 0 8
39554: PUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 250
39564: PPUSH
39565: LD_VAR 0 10
39569: PPUSH
39570: LD_VAR 0 5
39574: PPUSH
39575: CALL_OW 272
39579: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 251
39594: PPUSH
39595: LD_VAR 0 10
39599: PPUSH
39600: LD_VAR 0 5
39604: PPUSH
39605: CALL_OW 273
39609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39610: LD_VAR 0 8
39614: PPUSH
39615: LD_VAR 0 9
39619: PPUSH
39620: CALL_OW 488
39624: NOT
39625: IFFALSE 39629
// exit ;
39627: GO 39736
// ComAnimCustom ( unit , 1 ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_INT 1
39636: PPUSH
39637: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39641: LD_VAR 0 8
39645: PPUSH
39646: LD_VAR 0 9
39650: PPUSH
39651: LD_VAR 0 6
39655: PPUSH
39656: LD_VAR 0 7
39660: PPUSH
39661: CALL_OW 330
// repeat wait ( 1 ) ;
39665: LD_INT 1
39667: PPUSH
39668: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39672: LD_VAR 0 1
39676: PPUSH
39677: CALL_OW 316
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 314
39691: OR
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 302
39702: NOT
39703: OR
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 301
39714: OR
39715: IFFALSE 39665
// RemoveSeeing ( _x , _y , side ) ;
39717: LD_VAR 0 8
39721: PPUSH
39722: LD_VAR 0 9
39726: PPUSH
39727: LD_VAR 0 6
39731: PPUSH
39732: CALL_OW 331
// end ; end_of_file
39736: LD_VAR 0 4
39740: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
// if exist_mode then
39745: LD_VAR 0 2
39749: IFFALSE 39774
// unit := CreateCharacter ( prefix & ident ) else
39751: LD_ADDR_VAR 0 5
39755: PUSH
39756: LD_VAR 0 3
39760: PUSH
39761: LD_VAR 0 1
39765: STR
39766: PPUSH
39767: CALL_OW 34
39771: ST_TO_ADDR
39772: GO 39789
// unit := NewCharacter ( ident ) ;
39774: LD_ADDR_VAR 0 5
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 25
39788: ST_TO_ADDR
// result := unit ;
39789: LD_ADDR_VAR 0 4
39793: PUSH
39794: LD_VAR 0 5
39798: ST_TO_ADDR
// end ;
39799: LD_VAR 0 4
39803: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39804: LD_INT 0
39806: PPUSH
39807: PPUSH
// if not side or not nation then
39808: LD_VAR 0 1
39812: NOT
39813: PUSH
39814: LD_VAR 0 2
39818: NOT
39819: OR
39820: IFFALSE 39824
// exit ;
39822: GO 40592
// case nation of nation_american :
39824: LD_VAR 0 2
39828: PUSH
39829: LD_INT 1
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 40051
39837: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39838: LD_ADDR_VAR 0 4
39842: PUSH
39843: LD_INT 35
39845: PUSH
39846: LD_INT 45
39848: PUSH
39849: LD_INT 46
39851: PUSH
39852: LD_INT 47
39854: PUSH
39855: LD_INT 82
39857: PUSH
39858: LD_INT 83
39860: PUSH
39861: LD_INT 84
39863: PUSH
39864: LD_INT 85
39866: PUSH
39867: LD_INT 86
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: LD_INT 6
39878: PUSH
39879: LD_INT 15
39881: PUSH
39882: LD_INT 16
39884: PUSH
39885: LD_INT 7
39887: PUSH
39888: LD_INT 12
39890: PUSH
39891: LD_INT 13
39893: PUSH
39894: LD_INT 10
39896: PUSH
39897: LD_INT 14
39899: PUSH
39900: LD_INT 20
39902: PUSH
39903: LD_INT 21
39905: PUSH
39906: LD_INT 22
39908: PUSH
39909: LD_INT 25
39911: PUSH
39912: LD_INT 32
39914: PUSH
39915: LD_INT 27
39917: PUSH
39918: LD_INT 36
39920: PUSH
39921: LD_INT 69
39923: PUSH
39924: LD_INT 39
39926: PUSH
39927: LD_INT 34
39929: PUSH
39930: LD_INT 40
39932: PUSH
39933: LD_INT 48
39935: PUSH
39936: LD_INT 49
39938: PUSH
39939: LD_INT 50
39941: PUSH
39942: LD_INT 51
39944: PUSH
39945: LD_INT 52
39947: PUSH
39948: LD_INT 53
39950: PUSH
39951: LD_INT 54
39953: PUSH
39954: LD_INT 55
39956: PUSH
39957: LD_INT 56
39959: PUSH
39960: LD_INT 57
39962: PUSH
39963: LD_INT 58
39965: PUSH
39966: LD_INT 59
39968: PUSH
39969: LD_INT 60
39971: PUSH
39972: LD_INT 61
39974: PUSH
39975: LD_INT 62
39977: PUSH
39978: LD_INT 80
39980: PUSH
39981: LD_INT 82
39983: PUSH
39984: LD_INT 83
39986: PUSH
39987: LD_INT 84
39989: PUSH
39990: LD_INT 85
39992: PUSH
39993: LD_INT 86
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: ST_TO_ADDR
40049: GO 40516
40051: LD_INT 2
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40285
40059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40060: LD_ADDR_VAR 0 4
40064: PUSH
40065: LD_INT 35
40067: PUSH
40068: LD_INT 45
40070: PUSH
40071: LD_INT 46
40073: PUSH
40074: LD_INT 47
40076: PUSH
40077: LD_INT 82
40079: PUSH
40080: LD_INT 83
40082: PUSH
40083: LD_INT 84
40085: PUSH
40086: LD_INT 85
40088: PUSH
40089: LD_INT 87
40091: PUSH
40092: LD_INT 70
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 11
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 4
40106: PUSH
40107: LD_INT 5
40109: PUSH
40110: LD_INT 6
40112: PUSH
40113: LD_INT 15
40115: PUSH
40116: LD_INT 18
40118: PUSH
40119: LD_INT 7
40121: PUSH
40122: LD_INT 17
40124: PUSH
40125: LD_INT 8
40127: PUSH
40128: LD_INT 20
40130: PUSH
40131: LD_INT 21
40133: PUSH
40134: LD_INT 22
40136: PUSH
40137: LD_INT 72
40139: PUSH
40140: LD_INT 26
40142: PUSH
40143: LD_INT 69
40145: PUSH
40146: LD_INT 39
40148: PUSH
40149: LD_INT 40
40151: PUSH
40152: LD_INT 41
40154: PUSH
40155: LD_INT 42
40157: PUSH
40158: LD_INT 43
40160: PUSH
40161: LD_INT 48
40163: PUSH
40164: LD_INT 49
40166: PUSH
40167: LD_INT 50
40169: PUSH
40170: LD_INT 51
40172: PUSH
40173: LD_INT 52
40175: PUSH
40176: LD_INT 53
40178: PUSH
40179: LD_INT 54
40181: PUSH
40182: LD_INT 55
40184: PUSH
40185: LD_INT 56
40187: PUSH
40188: LD_INT 60
40190: PUSH
40191: LD_INT 61
40193: PUSH
40194: LD_INT 62
40196: PUSH
40197: LD_INT 66
40199: PUSH
40200: LD_INT 67
40202: PUSH
40203: LD_INT 68
40205: PUSH
40206: LD_INT 81
40208: PUSH
40209: LD_INT 82
40211: PUSH
40212: LD_INT 83
40214: PUSH
40215: LD_INT 84
40217: PUSH
40218: LD_INT 85
40220: PUSH
40221: LD_INT 87
40223: PUSH
40224: LD_INT 88
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
40283: GO 40516
40285: LD_INT 3
40287: DOUBLE
40288: EQUAL
40289: IFTRUE 40293
40291: GO 40515
40293: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40294: LD_ADDR_VAR 0 4
40298: PUSH
40299: LD_INT 46
40301: PUSH
40302: LD_INT 47
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 82
40313: PUSH
40314: LD_INT 83
40316: PUSH
40317: LD_INT 84
40319: PUSH
40320: LD_INT 85
40322: PUSH
40323: LD_INT 86
40325: PUSH
40326: LD_INT 11
40328: PUSH
40329: LD_INT 9
40331: PUSH
40332: LD_INT 20
40334: PUSH
40335: LD_INT 19
40337: PUSH
40338: LD_INT 21
40340: PUSH
40341: LD_INT 24
40343: PUSH
40344: LD_INT 22
40346: PUSH
40347: LD_INT 25
40349: PUSH
40350: LD_INT 28
40352: PUSH
40353: LD_INT 29
40355: PUSH
40356: LD_INT 30
40358: PUSH
40359: LD_INT 31
40361: PUSH
40362: LD_INT 37
40364: PUSH
40365: LD_INT 38
40367: PUSH
40368: LD_INT 32
40370: PUSH
40371: LD_INT 27
40373: PUSH
40374: LD_INT 33
40376: PUSH
40377: LD_INT 69
40379: PUSH
40380: LD_INT 39
40382: PUSH
40383: LD_INT 34
40385: PUSH
40386: LD_INT 40
40388: PUSH
40389: LD_INT 71
40391: PUSH
40392: LD_INT 23
40394: PUSH
40395: LD_INT 44
40397: PUSH
40398: LD_INT 48
40400: PUSH
40401: LD_INT 49
40403: PUSH
40404: LD_INT 50
40406: PUSH
40407: LD_INT 51
40409: PUSH
40410: LD_INT 52
40412: PUSH
40413: LD_INT 53
40415: PUSH
40416: LD_INT 54
40418: PUSH
40419: LD_INT 55
40421: PUSH
40422: LD_INT 56
40424: PUSH
40425: LD_INT 57
40427: PUSH
40428: LD_INT 58
40430: PUSH
40431: LD_INT 59
40433: PUSH
40434: LD_INT 63
40436: PUSH
40437: LD_INT 64
40439: PUSH
40440: LD_INT 65
40442: PUSH
40443: LD_INT 82
40445: PUSH
40446: LD_INT 83
40448: PUSH
40449: LD_INT 84
40451: PUSH
40452: LD_INT 85
40454: PUSH
40455: LD_INT 86
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: ST_TO_ADDR
40513: GO 40516
40515: POP
// if state > - 1 and state < 3 then
40516: LD_VAR 0 3
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: GREATER
40525: PUSH
40526: LD_VAR 0 3
40530: PUSH
40531: LD_INT 3
40533: LESS
40534: AND
40535: IFFALSE 40592
// for i in result do
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: LD_VAR 0 4
40546: PUSH
40547: FOR_IN
40548: IFFALSE 40590
// if GetTech ( i , side ) <> state then
40550: LD_VAR 0 5
40554: PPUSH
40555: LD_VAR 0 1
40559: PPUSH
40560: CALL_OW 321
40564: PUSH
40565: LD_VAR 0 3
40569: NONEQUAL
40570: IFFALSE 40588
// result := result diff i ;
40572: LD_ADDR_VAR 0 4
40576: PUSH
40577: LD_VAR 0 4
40581: PUSH
40582: LD_VAR 0 5
40586: DIFF
40587: ST_TO_ADDR
40588: GO 40547
40590: POP
40591: POP
// end ;
40592: LD_VAR 0 4
40596: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40597: LD_INT 0
40599: PPUSH
40600: PPUSH
40601: PPUSH
// result := true ;
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 1
40609: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: CALL_OW 480
40624: ST_TO_ADDR
// if not tmp then
40625: LD_VAR 0 5
40629: NOT
40630: IFFALSE 40634
// exit ;
40632: GO 40683
// for i in tmp do
40634: LD_ADDR_VAR 0 4
40638: PUSH
40639: LD_VAR 0 5
40643: PUSH
40644: FOR_IN
40645: IFFALSE 40681
// if GetTech ( i , side ) <> state_researched then
40647: LD_VAR 0 4
40651: PPUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 321
40661: PUSH
40662: LD_INT 2
40664: NONEQUAL
40665: IFFALSE 40679
// begin result := false ;
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_INT 0
40674: ST_TO_ADDR
// exit ;
40675: POP
40676: POP
40677: GO 40683
// end ;
40679: GO 40644
40681: POP
40682: POP
// end ;
40683: LD_VAR 0 3
40687: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40688: LD_INT 0
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40703: LD_VAR 0 1
40707: NOT
40708: PUSH
40709: LD_VAR 0 1
40713: PPUSH
40714: CALL_OW 257
40718: PUSH
40719: LD_INT 9
40721: NONEQUAL
40722: OR
40723: IFFALSE 40727
// exit ;
40725: GO 41300
// side := GetSide ( unit ) ;
40727: LD_ADDR_VAR 0 9
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 255
40741: ST_TO_ADDR
// tech_space := tech_spacanom ;
40742: LD_ADDR_VAR 0 12
40746: PUSH
40747: LD_INT 29
40749: ST_TO_ADDR
// tech_time := tech_taurad ;
40750: LD_ADDR_VAR 0 13
40754: PUSH
40755: LD_INT 28
40757: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40758: LD_ADDR_VAR 0 11
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 310
40772: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40773: LD_VAR 0 11
40777: PPUSH
40778: CALL_OW 247
40782: PUSH
40783: LD_INT 2
40785: EQUAL
40786: IFFALSE 40790
// exit ;
40788: GO 41300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40790: LD_ADDR_VAR 0 8
40794: PUSH
40795: LD_INT 81
40797: PUSH
40798: LD_VAR 0 9
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 3
40809: PUSH
40810: LD_INT 21
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PPUSH
40828: CALL_OW 69
40832: ST_TO_ADDR
// if not tmp then
40833: LD_VAR 0 8
40837: NOT
40838: IFFALSE 40842
// exit ;
40840: GO 41300
// if in_unit then
40842: LD_VAR 0 11
40846: IFFALSE 40870
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40848: LD_ADDR_VAR 0 10
40852: PUSH
40853: LD_VAR 0 8
40857: PPUSH
40858: LD_VAR 0 11
40862: PPUSH
40863: CALL_OW 74
40867: ST_TO_ADDR
40868: GO 40890
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40870: LD_ADDR_VAR 0 10
40874: PUSH
40875: LD_VAR 0 8
40879: PPUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 74
40889: ST_TO_ADDR
// if not enemy then
40890: LD_VAR 0 10
40894: NOT
40895: IFFALSE 40899
// exit ;
40897: GO 41300
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40899: LD_VAR 0 11
40903: PUSH
40904: LD_VAR 0 11
40908: PPUSH
40909: LD_VAR 0 10
40913: PPUSH
40914: CALL_OW 296
40918: PUSH
40919: LD_INT 13
40921: GREATER
40922: AND
40923: PUSH
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_VAR 0 10
40933: PPUSH
40934: CALL_OW 296
40938: PUSH
40939: LD_INT 12
40941: GREATER
40942: OR
40943: IFFALSE 40947
// exit ;
40945: GO 41300
// missile := [ 1 ] ;
40947: LD_ADDR_VAR 0 14
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40958: LD_VAR 0 9
40962: PPUSH
40963: LD_VAR 0 12
40967: PPUSH
40968: CALL_OW 325
40972: IFFALSE 41001
// missile := Replace ( missile , missile + 1 , 2 ) ;
40974: LD_ADDR_VAR 0 14
40978: PUSH
40979: LD_VAR 0 14
40983: PPUSH
40984: LD_VAR 0 14
40988: PUSH
40989: LD_INT 1
40991: PLUS
40992: PPUSH
40993: LD_INT 2
40995: PPUSH
40996: CALL_OW 1
41000: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41001: LD_VAR 0 9
41005: PPUSH
41006: LD_VAR 0 13
41010: PPUSH
41011: CALL_OW 325
41015: PUSH
41016: LD_VAR 0 10
41020: PPUSH
41021: CALL_OW 255
41025: PPUSH
41026: LD_VAR 0 13
41030: PPUSH
41031: CALL_OW 325
41035: NOT
41036: AND
41037: IFFALSE 41066
// missile := Replace ( missile , missile + 1 , 3 ) ;
41039: LD_ADDR_VAR 0 14
41043: PUSH
41044: LD_VAR 0 14
41048: PPUSH
41049: LD_VAR 0 14
41053: PUSH
41054: LD_INT 1
41056: PLUS
41057: PPUSH
41058: LD_INT 3
41060: PPUSH
41061: CALL_OW 1
41065: ST_TO_ADDR
// if missile < 2 then
41066: LD_VAR 0 14
41070: PUSH
41071: LD_INT 2
41073: LESS
41074: IFFALSE 41078
// exit ;
41076: GO 41300
// x := GetX ( enemy ) ;
41078: LD_ADDR_VAR 0 4
41082: PUSH
41083: LD_VAR 0 10
41087: PPUSH
41088: CALL_OW 250
41092: ST_TO_ADDR
// y := GetY ( enemy ) ;
41093: LD_ADDR_VAR 0 5
41097: PUSH
41098: LD_VAR 0 10
41102: PPUSH
41103: CALL_OW 251
41107: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41108: LD_ADDR_VAR 0 6
41112: PUSH
41113: LD_VAR 0 4
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PPUSH
41122: LD_INT 1
41124: PPUSH
41125: CALL_OW 12
41129: PLUS
41130: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41131: LD_ADDR_VAR 0 7
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PPUSH
41145: LD_INT 1
41147: PPUSH
41148: CALL_OW 12
41152: PLUS
41153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41154: LD_VAR 0 6
41158: PPUSH
41159: LD_VAR 0 7
41163: PPUSH
41164: CALL_OW 488
41168: NOT
41169: IFFALSE 41191
// begin _x := x ;
41171: LD_ADDR_VAR 0 6
41175: PUSH
41176: LD_VAR 0 4
41180: ST_TO_ADDR
// _y := y ;
41181: LD_ADDR_VAR 0 7
41185: PUSH
41186: LD_VAR 0 5
41190: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41191: LD_ADDR_VAR 0 3
41195: PUSH
41196: LD_INT 1
41198: PPUSH
41199: LD_VAR 0 14
41203: PPUSH
41204: CALL_OW 12
41208: ST_TO_ADDR
// case i of 1 :
41209: LD_VAR 0 3
41213: PUSH
41214: LD_INT 1
41216: DOUBLE
41217: EQUAL
41218: IFTRUE 41222
41220: GO 41239
41222: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41223: LD_VAR 0 1
41227: PPUSH
41228: LD_VAR 0 10
41232: PPUSH
41233: CALL_OW 115
41237: GO 41300
41239: LD_INT 2
41241: DOUBLE
41242: EQUAL
41243: IFTRUE 41247
41245: GO 41269
41247: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41248: LD_VAR 0 1
41252: PPUSH
41253: LD_VAR 0 6
41257: PPUSH
41258: LD_VAR 0 7
41262: PPUSH
41263: CALL_OW 153
41267: GO 41300
41269: LD_INT 3
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41299
41277: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 6
41287: PPUSH
41288: LD_VAR 0 7
41292: PPUSH
41293: CALL_OW 154
41297: GO 41300
41299: POP
// end ;
41300: LD_VAR 0 2
41304: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41305: LD_INT 0
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
// if not unit or not building then
41313: LD_VAR 0 1
41317: NOT
41318: PUSH
41319: LD_VAR 0 2
41323: NOT
41324: OR
41325: IFFALSE 41329
// exit ;
41327: GO 41487
// x := GetX ( building ) ;
41329: LD_ADDR_VAR 0 5
41333: PUSH
41334: LD_VAR 0 2
41338: PPUSH
41339: CALL_OW 250
41343: ST_TO_ADDR
// y := GetY ( building ) ;
41344: LD_ADDR_VAR 0 6
41348: PUSH
41349: LD_VAR 0 2
41353: PPUSH
41354: CALL_OW 251
41358: ST_TO_ADDR
// for i = 0 to 5 do
41359: LD_ADDR_VAR 0 4
41363: PUSH
41364: DOUBLE
41365: LD_INT 0
41367: DEC
41368: ST_TO_ADDR
41369: LD_INT 5
41371: PUSH
41372: FOR_TO
41373: IFFALSE 41485
// begin _x := ShiftX ( x , i , 3 ) ;
41375: LD_ADDR_VAR 0 7
41379: PUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: LD_VAR 0 4
41389: PPUSH
41390: LD_INT 3
41392: PPUSH
41393: CALL_OW 272
41397: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41398: LD_ADDR_VAR 0 8
41402: PUSH
41403: LD_VAR 0 6
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 3
41415: PPUSH
41416: CALL_OW 273
41420: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41421: LD_VAR 0 7
41425: PPUSH
41426: LD_VAR 0 8
41430: PPUSH
41431: CALL_OW 488
41435: NOT
41436: IFFALSE 41440
// continue ;
41438: GO 41372
// if HexInfo ( _x , _y ) = 0 then
41440: LD_VAR 0 7
41444: PPUSH
41445: LD_VAR 0 8
41449: PPUSH
41450: CALL_OW 428
41454: PUSH
41455: LD_INT 0
41457: EQUAL
41458: IFFALSE 41483
// begin ComMoveXY ( unit , _x , _y ) ;
41460: LD_VAR 0 1
41464: PPUSH
41465: LD_VAR 0 7
41469: PPUSH
41470: LD_VAR 0 8
41474: PPUSH
41475: CALL_OW 111
// exit ;
41479: POP
41480: POP
41481: GO 41487
// end ; end ;
41483: GO 41372
41485: POP
41486: POP
// end ;
41487: LD_VAR 0 3
41491: RET
// export function ScanBase ( side , base_area ) ; begin
41492: LD_INT 0
41494: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_VAR 0 2
41504: PPUSH
41505: LD_INT 81
41507: PUSH
41508: LD_VAR 0 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PPUSH
41517: CALL_OW 70
41521: ST_TO_ADDR
// end ;
41522: LD_VAR 0 3
41526: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41527: LD_INT 0
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
// result := false ;
41533: LD_ADDR_VAR 0 2
41537: PUSH
41538: LD_INT 0
41540: ST_TO_ADDR
// side := GetSide ( unit ) ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 255
41555: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 248
41570: ST_TO_ADDR
// case nat of 1 :
41571: LD_VAR 0 4
41575: PUSH
41576: LD_INT 1
41578: DOUBLE
41579: EQUAL
41580: IFTRUE 41584
41582: GO 41595
41584: POP
// tech := tech_lassight ; 2 :
41585: LD_ADDR_VAR 0 5
41589: PUSH
41590: LD_INT 12
41592: ST_TO_ADDR
41593: GO 41634
41595: LD_INT 2
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41614
41603: POP
// tech := tech_mortar ; 3 :
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_INT 41
41611: ST_TO_ADDR
41612: GO 41634
41614: LD_INT 3
41616: DOUBLE
41617: EQUAL
41618: IFTRUE 41622
41620: GO 41633
41622: POP
// tech := tech_bazooka ; end ;
41623: LD_ADDR_VAR 0 5
41627: PUSH
41628: LD_INT 44
41630: ST_TO_ADDR
41631: GO 41634
41633: POP
// if Researched ( side , tech ) then
41634: LD_VAR 0 3
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: CALL_OW 325
41648: IFFALSE 41675
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41650: LD_ADDR_VAR 0 2
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 8
41660: PUSH
41661: LD_INT 9
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: PUSH
41669: LD_VAR 0 4
41673: ARRAY
41674: ST_TO_ADDR
// end ;
41675: LD_VAR 0 2
41679: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
41684: PPUSH
// if not mines then
41685: LD_VAR 0 2
41689: NOT
41690: IFFALSE 41694
// exit ;
41692: GO 41838
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_INT 81
41701: PUSH
41702: LD_VAR 0 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 21
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PPUSH
41732: CALL_OW 69
41736: ST_TO_ADDR
// for i in mines do
41737: LD_ADDR_VAR 0 4
41741: PUSH
41742: LD_VAR 0 2
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41836
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41750: LD_VAR 0 4
41754: PUSH
41755: LD_INT 1
41757: ARRAY
41758: PPUSH
41759: LD_VAR 0 4
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: PPUSH
41768: CALL_OW 458
41772: NOT
41773: IFFALSE 41777
// continue ;
41775: GO 41747
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41777: LD_VAR 0 4
41781: PUSH
41782: LD_INT 1
41784: ARRAY
41785: PPUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 2
41793: ARRAY
41794: PPUSH
41795: CALL_OW 428
41799: PUSH
41800: LD_VAR 0 5
41804: IN
41805: IFFALSE 41834
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41807: LD_VAR 0 4
41811: PUSH
41812: LD_INT 1
41814: ARRAY
41815: PPUSH
41816: LD_VAR 0 4
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: PPUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 456
// end ;
41834: GO 41747
41836: POP
41837: POP
// end ;
41838: LD_VAR 0 3
41842: RET
// export function Count ( array ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// result := 0 ;
41847: LD_ADDR_VAR 0 2
41851: PUSH
41852: LD_INT 0
41854: ST_TO_ADDR
// for i in array do
41855: LD_ADDR_VAR 0 3
41859: PUSH
41860: LD_VAR 0 1
41864: PUSH
41865: FOR_IN
41866: IFFALSE 41890
// if i then
41868: LD_VAR 0 3
41872: IFFALSE 41888
// result := result + 1 ;
41874: LD_ADDR_VAR 0 2
41878: PUSH
41879: LD_VAR 0 2
41883: PUSH
41884: LD_INT 1
41886: PLUS
41887: ST_TO_ADDR
41888: GO 41865
41890: POP
41891: POP
// end ;
41892: LD_VAR 0 2
41896: RET
// export function IsEmpty ( building ) ; begin
41897: LD_INT 0
41899: PPUSH
// if not building then
41900: LD_VAR 0 1
41904: NOT
41905: IFFALSE 41909
// exit ;
41907: GO 41952
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41909: LD_ADDR_VAR 0 2
41913: PUSH
41914: LD_VAR 0 1
41918: PUSH
41919: LD_INT 22
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 255
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 58
41938: PUSH
41939: EMPTY
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 69
41950: IN
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 2
41956: RET
// export function IsNotFull ( building ) ; var places ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
// if not building then
41961: LD_VAR 0 1
41965: NOT
41966: IFFALSE 41970
// exit ;
41968: GO 42141
// result := false ;
41970: LD_ADDR_VAR 0 2
41974: PUSH
41975: LD_INT 0
41977: ST_TO_ADDR
// places := 0 ;
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 0
41985: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41986: LD_VAR 0 1
41990: PPUSH
41991: CALL_OW 266
41995: PUSH
41996: LD_INT 0
41998: DOUBLE
41999: EQUAL
42000: IFTRUE 42058
42002: LD_INT 1
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42058
42008: LD_INT 6
42010: DOUBLE
42011: EQUAL
42012: IFTRUE 42058
42014: LD_INT 7
42016: DOUBLE
42017: EQUAL
42018: IFTRUE 42058
42020: LD_INT 8
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42058
42026: LD_INT 4
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42058
42032: LD_INT 5
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42058
42038: LD_INT 2
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42058
42044: LD_INT 3
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42058
42050: LD_INT 35
42052: DOUBLE
42053: EQUAL
42054: IFTRUE 42058
42056: GO 42069
42058: POP
// places := 6 ; b_bunker , b_breastwork :
42059: LD_ADDR_VAR 0 3
42063: PUSH
42064: LD_INT 6
42066: ST_TO_ADDR
42067: GO 42114
42069: LD_INT 32
42071: DOUBLE
42072: EQUAL
42073: IFTRUE 42083
42075: LD_INT 31
42077: DOUBLE
42078: EQUAL
42079: IFTRUE 42083
42081: GO 42094
42083: POP
// places := 1 ; b_control_tower :
42084: LD_ADDR_VAR 0 3
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
42092: GO 42114
42094: LD_INT 36
42096: DOUBLE
42097: EQUAL
42098: IFTRUE 42102
42100: GO 42113
42102: POP
// places := 3 ; end ;
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_INT 3
42110: ST_TO_ADDR
42111: GO 42114
42113: POP
// if places then
42114: LD_VAR 0 3
42118: IFFALSE 42141
// result := UnitsInside ( building ) < places ;
42120: LD_ADDR_VAR 0 2
42124: PUSH
42125: LD_VAR 0 1
42129: PPUSH
42130: CALL_OW 313
42134: PUSH
42135: LD_VAR 0 3
42139: LESS
42140: ST_TO_ADDR
// end ;
42141: LD_VAR 0 2
42145: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
42150: PPUSH
42151: PPUSH
// tmp := [ ] ;
42152: LD_ADDR_VAR 0 3
42156: PUSH
42157: EMPTY
42158: ST_TO_ADDR
// list := [ ] ;
42159: LD_ADDR_VAR 0 5
42163: PUSH
42164: EMPTY
42165: ST_TO_ADDR
// for i = 16 to 25 do
42166: LD_ADDR_VAR 0 4
42170: PUSH
42171: DOUBLE
42172: LD_INT 16
42174: DEC
42175: ST_TO_ADDR
42176: LD_INT 25
42178: PUSH
42179: FOR_TO
42180: IFFALSE 42253
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_VAR 0 3
42191: PUSH
42192: LD_INT 22
42194: PUSH
42195: LD_VAR 0 1
42199: PPUSH
42200: CALL_OW 255
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 91
42211: PUSH
42212: LD_VAR 0 1
42216: PUSH
42217: LD_INT 6
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 30
42227: PUSH
42228: LD_VAR 0 4
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: PPUSH
42245: CALL_OW 69
42249: ADD
42250: ST_TO_ADDR
42251: GO 42179
42253: POP
42254: POP
// for i = 1 to tmp do
42255: LD_ADDR_VAR 0 4
42259: PUSH
42260: DOUBLE
42261: LD_INT 1
42263: DEC
42264: ST_TO_ADDR
42265: LD_VAR 0 3
42269: PUSH
42270: FOR_TO
42271: IFFALSE 42359
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42273: LD_ADDR_VAR 0 5
42277: PUSH
42278: LD_VAR 0 5
42282: PUSH
42283: LD_VAR 0 3
42287: PUSH
42288: LD_VAR 0 4
42292: ARRAY
42293: PPUSH
42294: CALL_OW 266
42298: PUSH
42299: LD_VAR 0 3
42303: PUSH
42304: LD_VAR 0 4
42308: ARRAY
42309: PPUSH
42310: CALL_OW 250
42314: PUSH
42315: LD_VAR 0 3
42319: PUSH
42320: LD_VAR 0 4
42324: ARRAY
42325: PPUSH
42326: CALL_OW 251
42330: PUSH
42331: LD_VAR 0 3
42335: PUSH
42336: LD_VAR 0 4
42340: ARRAY
42341: PPUSH
42342: CALL_OW 254
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: ADD
42356: ST_TO_ADDR
42357: GO 42270
42359: POP
42360: POP
// result := list ;
42361: LD_ADDR_VAR 0 2
42365: PUSH
42366: LD_VAR 0 5
42370: ST_TO_ADDR
// end ;
42371: LD_VAR 0 2
42375: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42376: LD_INT 0
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
// if not factory then
42385: LD_VAR 0 1
42389: NOT
42390: IFFALSE 42394
// exit ;
42392: GO 42987
// if control = control_apeman then
42394: LD_VAR 0 4
42398: PUSH
42399: LD_INT 5
42401: EQUAL
42402: IFFALSE 42511
// begin tmp := UnitsInside ( factory ) ;
42404: LD_ADDR_VAR 0 8
42408: PUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 313
42418: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42419: LD_VAR 0 8
42423: PPUSH
42424: LD_INT 25
42426: PUSH
42427: LD_INT 12
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PPUSH
42434: CALL_OW 72
42438: NOT
42439: IFFALSE 42449
// control := control_manual ;
42441: LD_ADDR_VAR 0 4
42445: PUSH
42446: LD_INT 1
42448: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42449: LD_ADDR_VAR 0 8
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL 42146 0 1
42463: ST_TO_ADDR
// if tmp then
42464: LD_VAR 0 8
42468: IFFALSE 42511
// begin for i in tmp do
42470: LD_ADDR_VAR 0 7
42474: PUSH
42475: LD_VAR 0 8
42479: PUSH
42480: FOR_IN
42481: IFFALSE 42509
// if i [ 1 ] = b_ext_radio then
42483: LD_VAR 0 7
42487: PUSH
42488: LD_INT 1
42490: ARRAY
42491: PUSH
42492: LD_INT 22
42494: EQUAL
42495: IFFALSE 42507
// begin control := control_remote ;
42497: LD_ADDR_VAR 0 4
42501: PUSH
42502: LD_INT 2
42504: ST_TO_ADDR
// break ;
42505: GO 42509
// end ;
42507: GO 42480
42509: POP
42510: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42511: LD_VAR 0 1
42515: PPUSH
42516: LD_VAR 0 2
42520: PPUSH
42521: LD_VAR 0 3
42525: PPUSH
42526: LD_VAR 0 4
42530: PPUSH
42531: LD_VAR 0 5
42535: PPUSH
42536: CALL_OW 448
42540: IFFALSE 42575
// begin result := [ chassis , engine , control , weapon ] ;
42542: LD_ADDR_VAR 0 6
42546: PUSH
42547: LD_VAR 0 2
42551: PUSH
42552: LD_VAR 0 3
42556: PUSH
42557: LD_VAR 0 4
42561: PUSH
42562: LD_VAR 0 5
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// exit ;
42573: GO 42987
// end ; _chassis := AvailableChassisList ( factory ) ;
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_VAR 0 1
42584: PPUSH
42585: CALL_OW 475
42589: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42590: LD_ADDR_VAR 0 11
42594: PUSH
42595: LD_VAR 0 1
42599: PPUSH
42600: CALL_OW 476
42604: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42605: LD_ADDR_VAR 0 12
42609: PUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 477
42619: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42620: LD_ADDR_VAR 0 10
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 478
42634: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42635: LD_VAR 0 9
42639: NOT
42640: PUSH
42641: LD_VAR 0 11
42645: NOT
42646: OR
42647: PUSH
42648: LD_VAR 0 12
42652: NOT
42653: OR
42654: PUSH
42655: LD_VAR 0 10
42659: NOT
42660: OR
42661: IFFALSE 42696
// begin result := [ chassis , engine , control , weapon ] ;
42663: LD_ADDR_VAR 0 6
42667: PUSH
42668: LD_VAR 0 2
42672: PUSH
42673: LD_VAR 0 3
42677: PUSH
42678: LD_VAR 0 4
42682: PUSH
42683: LD_VAR 0 5
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// exit ;
42694: GO 42987
// end ; if not chassis in _chassis then
42696: LD_VAR 0 2
42700: PUSH
42701: LD_VAR 0 9
42705: IN
42706: NOT
42707: IFFALSE 42733
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42709: LD_ADDR_VAR 0 2
42713: PUSH
42714: LD_VAR 0 9
42718: PUSH
42719: LD_INT 1
42721: PPUSH
42722: LD_VAR 0 9
42726: PPUSH
42727: CALL_OW 12
42731: ARRAY
42732: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42733: LD_VAR 0 2
42737: PPUSH
42738: LD_VAR 0 3
42742: PPUSH
42743: CALL 42992 0 2
42747: NOT
42748: IFFALSE 42807
// repeat engine := _engine [ 1 ] ;
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_VAR 0 11
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42764: LD_ADDR_VAR 0 11
42768: PUSH
42769: LD_VAR 0 11
42773: PPUSH
42774: LD_INT 1
42776: PPUSH
42777: CALL_OW 3
42781: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42782: LD_VAR 0 2
42786: PPUSH
42787: LD_VAR 0 3
42791: PPUSH
42792: CALL 42992 0 2
42796: PUSH
42797: LD_VAR 0 11
42801: PUSH
42802: EMPTY
42803: EQUAL
42804: OR
42805: IFFALSE 42750
// if not control in _control then
42807: LD_VAR 0 4
42811: PUSH
42812: LD_VAR 0 12
42816: IN
42817: NOT
42818: IFFALSE 42844
// control := _control [ rand ( 1 , _control ) ] ;
42820: LD_ADDR_VAR 0 4
42824: PUSH
42825: LD_VAR 0 12
42829: PUSH
42830: LD_INT 1
42832: PPUSH
42833: LD_VAR 0 12
42837: PPUSH
42838: CALL_OW 12
42842: ARRAY
42843: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42844: LD_VAR 0 2
42848: PPUSH
42849: LD_VAR 0 5
42853: PPUSH
42854: CALL 43212 0 2
42858: NOT
42859: IFFALSE 42918
// repeat weapon := _weapon [ 1 ] ;
42861: LD_ADDR_VAR 0 5
42865: PUSH
42866: LD_VAR 0 10
42870: PUSH
42871: LD_INT 1
42873: ARRAY
42874: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42875: LD_ADDR_VAR 0 10
42879: PUSH
42880: LD_VAR 0 10
42884: PPUSH
42885: LD_INT 1
42887: PPUSH
42888: CALL_OW 3
42892: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42893: LD_VAR 0 2
42897: PPUSH
42898: LD_VAR 0 5
42902: PPUSH
42903: CALL 43212 0 2
42907: PUSH
42908: LD_VAR 0 10
42912: PUSH
42913: EMPTY
42914: EQUAL
42915: OR
42916: IFFALSE 42861
// result := [ ] ;
42918: LD_ADDR_VAR 0 6
42922: PUSH
42923: EMPTY
42924: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42925: LD_VAR 0 1
42929: PPUSH
42930: LD_VAR 0 2
42934: PPUSH
42935: LD_VAR 0 3
42939: PPUSH
42940: LD_VAR 0 4
42944: PPUSH
42945: LD_VAR 0 5
42949: PPUSH
42950: CALL_OW 448
42954: IFFALSE 42987
// result := [ chassis , engine , control , weapon ] ;
42956: LD_ADDR_VAR 0 6
42960: PUSH
42961: LD_VAR 0 2
42965: PUSH
42966: LD_VAR 0 3
42970: PUSH
42971: LD_VAR 0 4
42975: PUSH
42976: LD_VAR 0 5
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// end ;
42987: LD_VAR 0 6
42991: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42992: LD_INT 0
42994: PPUSH
// if not chassis or not engine then
42995: LD_VAR 0 1
42999: NOT
43000: PUSH
43001: LD_VAR 0 2
43005: NOT
43006: OR
43007: IFFALSE 43011
// exit ;
43009: GO 43207
// case engine of engine_solar :
43011: LD_VAR 0 2
43015: PUSH
43016: LD_INT 2
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43062
43024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 11
43032: PUSH
43033: LD_INT 12
43035: PUSH
43036: LD_INT 13
43038: PUSH
43039: LD_INT 14
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
43060: GO 43191
43062: LD_INT 1
43064: DOUBLE
43065: EQUAL
43066: IFTRUE 43070
43068: GO 43132
43070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_INT 11
43078: PUSH
43079: LD_INT 12
43081: PUSH
43082: LD_INT 13
43084: PUSH
43085: LD_INT 14
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: LD_INT 4
43099: PUSH
43100: LD_INT 5
43102: PUSH
43103: LD_INT 21
43105: PUSH
43106: LD_INT 23
43108: PUSH
43109: LD_INT 22
43111: PUSH
43112: LD_INT 24
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
43130: GO 43191
43132: LD_INT 3
43134: DOUBLE
43135: EQUAL
43136: IFTRUE 43140
43138: GO 43190
43140: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43141: LD_ADDR_VAR 0 3
43145: PUSH
43146: LD_INT 13
43148: PUSH
43149: LD_INT 14
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 4
43160: PUSH
43161: LD_INT 5
43163: PUSH
43164: LD_INT 21
43166: PUSH
43167: LD_INT 22
43169: PUSH
43170: LD_INT 23
43172: PUSH
43173: LD_INT 24
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
43188: GO 43191
43190: POP
// result := ( chassis in result ) ;
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: LD_VAR 0 1
43200: PUSH
43201: LD_VAR 0 3
43205: IN
43206: ST_TO_ADDR
// end ;
43207: LD_VAR 0 3
43211: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43212: LD_INT 0
43214: PPUSH
// if not chassis or not weapon then
43215: LD_VAR 0 1
43219: NOT
43220: PUSH
43221: LD_VAR 0 2
43225: NOT
43226: OR
43227: IFFALSE 43231
// exit ;
43229: GO 44291
// case weapon of us_machine_gun :
43231: LD_VAR 0 2
43235: PUSH
43236: LD_INT 2
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43274
43244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: LD_INT 5
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
43272: GO 44275
43274: LD_INT 3
43276: DOUBLE
43277: EQUAL
43278: IFTRUE 43282
43280: GO 43312
43282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43283: LD_ADDR_VAR 0 3
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: LD_INT 5
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
43310: GO 44275
43312: LD_INT 11
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43350
43320: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: LD_INT 4
43337: PUSH
43338: LD_INT 5
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
43348: GO 44275
43350: LD_INT 4
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43358
43356: GO 43384
43358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43359: LD_ADDR_VAR 0 3
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: LD_INT 4
43372: PUSH
43373: LD_INT 5
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
43382: GO 44275
43384: LD_INT 5
43386: DOUBLE
43387: EQUAL
43388: IFTRUE 43392
43390: GO 43418
43392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43393: LD_ADDR_VAR 0 3
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: LD_INT 4
43406: PUSH
43407: LD_INT 5
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: ST_TO_ADDR
43416: GO 44275
43418: LD_INT 9
43420: DOUBLE
43421: EQUAL
43422: IFTRUE 43426
43424: GO 43452
43426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: LD_INT 4
43440: PUSH
43441: LD_INT 5
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
43450: GO 44275
43452: LD_INT 7
43454: DOUBLE
43455: EQUAL
43456: IFTRUE 43460
43458: GO 43486
43460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43461: LD_ADDR_VAR 0 3
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
43484: GO 44275
43486: LD_INT 12
43488: DOUBLE
43489: EQUAL
43490: IFTRUE 43494
43492: GO 43520
43494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43495: LD_ADDR_VAR 0 3
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: LD_INT 4
43508: PUSH
43509: LD_INT 5
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: ST_TO_ADDR
43518: GO 44275
43520: LD_INT 13
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 43554
43528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 4
43542: PUSH
43543: LD_INT 5
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
43552: GO 44275
43554: LD_INT 14
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43562
43560: GO 43580
43562: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_INT 4
43570: PUSH
43571: LD_INT 5
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: ST_TO_ADDR
43578: GO 44275
43580: LD_INT 6
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43588
43586: GO 43606
43588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43589: LD_ADDR_VAR 0 3
43593: PUSH
43594: LD_INT 4
43596: PUSH
43597: LD_INT 5
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: ST_TO_ADDR
43604: GO 44275
43606: LD_INT 10
43608: DOUBLE
43609: EQUAL
43610: IFTRUE 43614
43612: GO 43632
43614: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43615: LD_ADDR_VAR 0 3
43619: PUSH
43620: LD_INT 4
43622: PUSH
43623: LD_INT 5
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: ST_TO_ADDR
43630: GO 44275
43632: LD_INT 22
43634: DOUBLE
43635: EQUAL
43636: IFTRUE 43640
43638: GO 43666
43640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43641: LD_ADDR_VAR 0 3
43645: PUSH
43646: LD_INT 11
43648: PUSH
43649: LD_INT 12
43651: PUSH
43652: LD_INT 13
43654: PUSH
43655: LD_INT 14
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: ST_TO_ADDR
43664: GO 44275
43666: LD_INT 23
43668: DOUBLE
43669: EQUAL
43670: IFTRUE 43674
43672: GO 43700
43674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43675: LD_ADDR_VAR 0 3
43679: PUSH
43680: LD_INT 11
43682: PUSH
43683: LD_INT 12
43685: PUSH
43686: LD_INT 13
43688: PUSH
43689: LD_INT 14
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
43698: GO 44275
43700: LD_INT 24
43702: DOUBLE
43703: EQUAL
43704: IFTRUE 43708
43706: GO 43734
43708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43709: LD_ADDR_VAR 0 3
43713: PUSH
43714: LD_INT 11
43716: PUSH
43717: LD_INT 12
43719: PUSH
43720: LD_INT 13
43722: PUSH
43723: LD_INT 14
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
43732: GO 44275
43734: LD_INT 30
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43768
43742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 11
43750: PUSH
43751: LD_INT 12
43753: PUSH
43754: LD_INT 13
43756: PUSH
43757: LD_INT 14
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 44275
43768: LD_INT 25
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43776
43774: GO 43794
43776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 13
43784: PUSH
43785: LD_INT 14
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: ST_TO_ADDR
43792: GO 44275
43794: LD_INT 27
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43802
43800: GO 43820
43802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43803: LD_ADDR_VAR 0 3
43807: PUSH
43808: LD_INT 13
43810: PUSH
43811: LD_INT 14
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: ST_TO_ADDR
43818: GO 44275
43820: LD_INT 92
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 43854
43828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43829: LD_ADDR_VAR 0 3
43833: PUSH
43834: LD_INT 11
43836: PUSH
43837: LD_INT 12
43839: PUSH
43840: LD_INT 13
43842: PUSH
43843: LD_INT 14
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
43852: GO 44275
43854: LD_INT 28
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 43880
43862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: LD_INT 13
43870: PUSH
43871: LD_INT 14
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: ST_TO_ADDR
43878: GO 44275
43880: LD_INT 29
43882: DOUBLE
43883: EQUAL
43884: IFTRUE 43888
43886: GO 43906
43888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43889: LD_ADDR_VAR 0 3
43893: PUSH
43894: LD_INT 13
43896: PUSH
43897: LD_INT 14
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: ST_TO_ADDR
43904: GO 44275
43906: LD_INT 31
43908: DOUBLE
43909: EQUAL
43910: IFTRUE 43914
43912: GO 43932
43914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43915: LD_ADDR_VAR 0 3
43919: PUSH
43920: LD_INT 13
43922: PUSH
43923: LD_INT 14
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: ST_TO_ADDR
43930: GO 44275
43932: LD_INT 26
43934: DOUBLE
43935: EQUAL
43936: IFTRUE 43940
43938: GO 43958
43940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_INT 13
43948: PUSH
43949: LD_INT 14
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: ST_TO_ADDR
43956: GO 44275
43958: LD_INT 42
43960: DOUBLE
43961: EQUAL
43962: IFTRUE 43966
43964: GO 43992
43966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43967: LD_ADDR_VAR 0 3
43971: PUSH
43972: LD_INT 21
43974: PUSH
43975: LD_INT 22
43977: PUSH
43978: LD_INT 23
43980: PUSH
43981: LD_INT 24
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
43990: GO 44275
43992: LD_INT 43
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44026
44000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44001: LD_ADDR_VAR 0 3
44005: PUSH
44006: LD_INT 21
44008: PUSH
44009: LD_INT 22
44011: PUSH
44012: LD_INT 23
44014: PUSH
44015: LD_INT 24
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
44024: GO 44275
44026: LD_INT 44
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44034
44032: GO 44060
44034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44035: LD_ADDR_VAR 0 3
44039: PUSH
44040: LD_INT 21
44042: PUSH
44043: LD_INT 22
44045: PUSH
44046: LD_INT 23
44048: PUSH
44049: LD_INT 24
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
44058: GO 44275
44060: LD_INT 45
44062: DOUBLE
44063: EQUAL
44064: IFTRUE 44068
44066: GO 44094
44068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_INT 21
44076: PUSH
44077: LD_INT 22
44079: PUSH
44080: LD_INT 23
44082: PUSH
44083: LD_INT 24
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
44092: GO 44275
44094: LD_INT 49
44096: DOUBLE
44097: EQUAL
44098: IFTRUE 44102
44100: GO 44128
44102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44103: LD_ADDR_VAR 0 3
44107: PUSH
44108: LD_INT 21
44110: PUSH
44111: LD_INT 22
44113: PUSH
44114: LD_INT 23
44116: PUSH
44117: LD_INT 24
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
44126: GO 44275
44128: LD_INT 51
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44162
44136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 21
44144: PUSH
44145: LD_INT 22
44147: PUSH
44148: LD_INT 23
44150: PUSH
44151: LD_INT 24
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
44160: GO 44275
44162: LD_INT 52
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44170
44168: GO 44196
44170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: LD_INT 21
44178: PUSH
44179: LD_INT 22
44181: PUSH
44182: LD_INT 23
44184: PUSH
44185: LD_INT 24
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: ST_TO_ADDR
44194: GO 44275
44196: LD_INT 53
44198: DOUBLE
44199: EQUAL
44200: IFTRUE 44204
44202: GO 44222
44204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44205: LD_ADDR_VAR 0 3
44209: PUSH
44210: LD_INT 23
44212: PUSH
44213: LD_INT 24
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: ST_TO_ADDR
44220: GO 44275
44222: LD_INT 46
44224: DOUBLE
44225: EQUAL
44226: IFTRUE 44230
44228: GO 44248
44230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44231: LD_ADDR_VAR 0 3
44235: PUSH
44236: LD_INT 23
44238: PUSH
44239: LD_INT 24
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: ST_TO_ADDR
44246: GO 44275
44248: LD_INT 47
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44256
44254: GO 44274
44256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_INT 23
44264: PUSH
44265: LD_INT 24
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: ST_TO_ADDR
44272: GO 44275
44274: POP
// result := ( chassis in result ) ;
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_VAR 0 1
44284: PUSH
44285: LD_VAR 0 3
44289: IN
44290: ST_TO_ADDR
// end ;
44291: LD_VAR 0 3
44295: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44296: LD_INT 0
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
// result := array ;
44305: LD_ADDR_VAR 0 5
44309: PUSH
44310: LD_VAR 0 1
44314: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44315: LD_VAR 0 1
44319: NOT
44320: PUSH
44321: LD_VAR 0 2
44325: NOT
44326: OR
44327: PUSH
44328: LD_VAR 0 3
44332: NOT
44333: OR
44334: PUSH
44335: LD_VAR 0 2
44339: PUSH
44340: LD_VAR 0 1
44344: GREATER
44345: OR
44346: PUSH
44347: LD_VAR 0 3
44351: PUSH
44352: LD_VAR 0 1
44356: GREATER
44357: OR
44358: IFFALSE 44362
// exit ;
44360: GO 44658
// if direction then
44362: LD_VAR 0 4
44366: IFFALSE 44430
// begin d := 1 ;
44368: LD_ADDR_VAR 0 9
44372: PUSH
44373: LD_INT 1
44375: ST_TO_ADDR
// if i_from > i_to then
44376: LD_VAR 0 2
44380: PUSH
44381: LD_VAR 0 3
44385: GREATER
44386: IFFALSE 44412
// length := ( array - i_from ) + i_to else
44388: LD_ADDR_VAR 0 11
44392: PUSH
44393: LD_VAR 0 1
44397: PUSH
44398: LD_VAR 0 2
44402: MINUS
44403: PUSH
44404: LD_VAR 0 3
44408: PLUS
44409: ST_TO_ADDR
44410: GO 44428
// length := i_to - i_from ;
44412: LD_ADDR_VAR 0 11
44416: PUSH
44417: LD_VAR 0 3
44421: PUSH
44422: LD_VAR 0 2
44426: MINUS
44427: ST_TO_ADDR
// end else
44428: GO 44491
// begin d := - 1 ;
44430: LD_ADDR_VAR 0 9
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: ST_TO_ADDR
// if i_from > i_to then
44439: LD_VAR 0 2
44443: PUSH
44444: LD_VAR 0 3
44448: GREATER
44449: IFFALSE 44469
// length := i_from - i_to else
44451: LD_ADDR_VAR 0 11
44455: PUSH
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 3
44465: MINUS
44466: ST_TO_ADDR
44467: GO 44491
// length := ( array - i_to ) + i_from ;
44469: LD_ADDR_VAR 0 11
44473: PUSH
44474: LD_VAR 0 1
44478: PUSH
44479: LD_VAR 0 3
44483: MINUS
44484: PUSH
44485: LD_VAR 0 2
44489: PLUS
44490: ST_TO_ADDR
// end ; if not length then
44491: LD_VAR 0 11
44495: NOT
44496: IFFALSE 44500
// exit ;
44498: GO 44658
// tmp := array ;
44500: LD_ADDR_VAR 0 10
44504: PUSH
44505: LD_VAR 0 1
44509: ST_TO_ADDR
// for i = 1 to length do
44510: LD_ADDR_VAR 0 6
44514: PUSH
44515: DOUBLE
44516: LD_INT 1
44518: DEC
44519: ST_TO_ADDR
44520: LD_VAR 0 11
44524: PUSH
44525: FOR_TO
44526: IFFALSE 44646
// begin for j = 1 to array do
44528: LD_ADDR_VAR 0 7
44532: PUSH
44533: DOUBLE
44534: LD_INT 1
44536: DEC
44537: ST_TO_ADDR
44538: LD_VAR 0 1
44542: PUSH
44543: FOR_TO
44544: IFFALSE 44632
// begin k := j + d ;
44546: LD_ADDR_VAR 0 8
44550: PUSH
44551: LD_VAR 0 7
44555: PUSH
44556: LD_VAR 0 9
44560: PLUS
44561: ST_TO_ADDR
// if k > array then
44562: LD_VAR 0 8
44566: PUSH
44567: LD_VAR 0 1
44571: GREATER
44572: IFFALSE 44582
// k := 1 ;
44574: LD_ADDR_VAR 0 8
44578: PUSH
44579: LD_INT 1
44581: ST_TO_ADDR
// if not k then
44582: LD_VAR 0 8
44586: NOT
44587: IFFALSE 44599
// k := array ;
44589: LD_ADDR_VAR 0 8
44593: PUSH
44594: LD_VAR 0 1
44598: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44599: LD_ADDR_VAR 0 10
44603: PUSH
44604: LD_VAR 0 10
44608: PPUSH
44609: LD_VAR 0 8
44613: PPUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_VAR 0 7
44623: ARRAY
44624: PPUSH
44625: CALL_OW 1
44629: ST_TO_ADDR
// end ;
44630: GO 44543
44632: POP
44633: POP
// array := tmp ;
44634: LD_ADDR_VAR 0 1
44638: PUSH
44639: LD_VAR 0 10
44643: ST_TO_ADDR
// end ;
44644: GO 44525
44646: POP
44647: POP
// result := array ;
44648: LD_ADDR_VAR 0 5
44652: PUSH
44653: LD_VAR 0 1
44657: ST_TO_ADDR
// end ;
44658: LD_VAR 0 5
44662: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44663: LD_INT 0
44665: PPUSH
44666: PPUSH
// result := 0 ;
44667: LD_ADDR_VAR 0 3
44671: PUSH
44672: LD_INT 0
44674: ST_TO_ADDR
// if not array or not value in array then
44675: LD_VAR 0 1
44679: NOT
44680: PUSH
44681: LD_VAR 0 2
44685: PUSH
44686: LD_VAR 0 1
44690: IN
44691: NOT
44692: OR
44693: IFFALSE 44697
// exit ;
44695: GO 44751
// for i = 1 to array do
44697: LD_ADDR_VAR 0 4
44701: PUSH
44702: DOUBLE
44703: LD_INT 1
44705: DEC
44706: ST_TO_ADDR
44707: LD_VAR 0 1
44711: PUSH
44712: FOR_TO
44713: IFFALSE 44749
// if value = array [ i ] then
44715: LD_VAR 0 2
44719: PUSH
44720: LD_VAR 0 1
44724: PUSH
44725: LD_VAR 0 4
44729: ARRAY
44730: EQUAL
44731: IFFALSE 44747
// begin result := i ;
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_VAR 0 4
44742: ST_TO_ADDR
// exit ;
44743: POP
44744: POP
44745: GO 44751
// end ;
44747: GO 44712
44749: POP
44750: POP
// end ;
44751: LD_VAR 0 3
44755: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44756: LD_INT 0
44758: PPUSH
// vc_chassis := chassis ;
44759: LD_ADDR_OWVAR 37
44763: PUSH
44764: LD_VAR 0 1
44768: ST_TO_ADDR
// vc_engine := engine ;
44769: LD_ADDR_OWVAR 39
44773: PUSH
44774: LD_VAR 0 2
44778: ST_TO_ADDR
// vc_control := control ;
44779: LD_ADDR_OWVAR 38
44783: PUSH
44784: LD_VAR 0 3
44788: ST_TO_ADDR
// vc_weapon := weapon ;
44789: LD_ADDR_OWVAR 40
44793: PUSH
44794: LD_VAR 0 4
44798: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44799: LD_ADDR_OWVAR 41
44803: PUSH
44804: LD_VAR 0 5
44808: ST_TO_ADDR
// end ;
44809: LD_VAR 0 6
44813: RET
// export function WantPlant ( unit ) ; var task ; begin
44814: LD_INT 0
44816: PPUSH
44817: PPUSH
// result := false ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_INT 0
44825: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44826: LD_ADDR_VAR 0 3
44830: PUSH
44831: LD_VAR 0 1
44835: PPUSH
44836: CALL_OW 437
44840: ST_TO_ADDR
// if task then
44841: LD_VAR 0 3
44845: IFFALSE 44873
// if task [ 1 ] [ 1 ] = p then
44847: LD_VAR 0 3
44851: PUSH
44852: LD_INT 1
44854: ARRAY
44855: PUSH
44856: LD_INT 1
44858: ARRAY
44859: PUSH
44860: LD_STRING p
44862: EQUAL
44863: IFFALSE 44873
// result := true ;
44865: LD_ADDR_VAR 0 2
44869: PUSH
44870: LD_INT 1
44872: ST_TO_ADDR
// end ;
44873: LD_VAR 0 2
44877: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44878: LD_INT 0
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
// if pos < 1 then
44884: LD_VAR 0 2
44888: PUSH
44889: LD_INT 1
44891: LESS
44892: IFFALSE 44896
// exit ;
44894: GO 45199
// if pos = 1 then
44896: LD_VAR 0 2
44900: PUSH
44901: LD_INT 1
44903: EQUAL
44904: IFFALSE 44937
// result := Replace ( arr , pos [ 1 ] , value ) else
44906: LD_ADDR_VAR 0 4
44910: PUSH
44911: LD_VAR 0 1
44915: PPUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 1
44923: ARRAY
44924: PPUSH
44925: LD_VAR 0 3
44929: PPUSH
44930: CALL_OW 1
44934: ST_TO_ADDR
44935: GO 45199
// begin tmp := arr ;
44937: LD_ADDR_VAR 0 6
44941: PUSH
44942: LD_VAR 0 1
44946: ST_TO_ADDR
// s_arr := [ tmp ] ;
44947: LD_ADDR_VAR 0 7
44951: PUSH
44952: LD_VAR 0 6
44956: PUSH
44957: EMPTY
44958: LIST
44959: ST_TO_ADDR
// for i = 1 to pos - 1 do
44960: LD_ADDR_VAR 0 5
44964: PUSH
44965: DOUBLE
44966: LD_INT 1
44968: DEC
44969: ST_TO_ADDR
44970: LD_VAR 0 2
44974: PUSH
44975: LD_INT 1
44977: MINUS
44978: PUSH
44979: FOR_TO
44980: IFFALSE 45025
// begin tmp := tmp [ pos [ i ] ] ;
44982: LD_ADDR_VAR 0 6
44986: PUSH
44987: LD_VAR 0 6
44991: PUSH
44992: LD_VAR 0 2
44996: PUSH
44997: LD_VAR 0 5
45001: ARRAY
45002: ARRAY
45003: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45004: LD_ADDR_VAR 0 7
45008: PUSH
45009: LD_VAR 0 7
45013: PUSH
45014: LD_VAR 0 6
45018: PUSH
45019: EMPTY
45020: LIST
45021: ADD
45022: ST_TO_ADDR
// end ;
45023: GO 44979
45025: POP
45026: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45027: LD_ADDR_VAR 0 6
45031: PUSH
45032: LD_VAR 0 6
45036: PPUSH
45037: LD_VAR 0 2
45041: PUSH
45042: LD_VAR 0 2
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 3
45052: PPUSH
45053: CALL_OW 1
45057: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45058: LD_ADDR_VAR 0 7
45062: PUSH
45063: LD_VAR 0 7
45067: PPUSH
45068: LD_VAR 0 7
45072: PPUSH
45073: LD_VAR 0 6
45077: PPUSH
45078: CALL_OW 1
45082: ST_TO_ADDR
// for i = s_arr downto 2 do
45083: LD_ADDR_VAR 0 5
45087: PUSH
45088: DOUBLE
45089: LD_VAR 0 7
45093: INC
45094: ST_TO_ADDR
45095: LD_INT 2
45097: PUSH
45098: FOR_DOWNTO
45099: IFFALSE 45183
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45101: LD_ADDR_VAR 0 6
45105: PUSH
45106: LD_VAR 0 7
45110: PUSH
45111: LD_VAR 0 5
45115: PUSH
45116: LD_INT 1
45118: MINUS
45119: ARRAY
45120: PPUSH
45121: LD_VAR 0 2
45125: PUSH
45126: LD_VAR 0 5
45130: PUSH
45131: LD_INT 1
45133: MINUS
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 7
45140: PUSH
45141: LD_VAR 0 5
45145: ARRAY
45146: PPUSH
45147: CALL_OW 1
45151: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45152: LD_ADDR_VAR 0 7
45156: PUSH
45157: LD_VAR 0 7
45161: PPUSH
45162: LD_VAR 0 5
45166: PUSH
45167: LD_INT 1
45169: MINUS
45170: PPUSH
45171: LD_VAR 0 6
45175: PPUSH
45176: CALL_OW 1
45180: ST_TO_ADDR
// end ;
45181: GO 45098
45183: POP
45184: POP
// result := s_arr [ 1 ] ;
45185: LD_ADDR_VAR 0 4
45189: PUSH
45190: LD_VAR 0 7
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: ST_TO_ADDR
// end ; end ;
45199: LD_VAR 0 4
45203: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45204: LD_INT 0
45206: PPUSH
45207: PPUSH
// if not list then
45208: LD_VAR 0 1
45212: NOT
45213: IFFALSE 45217
// exit ;
45215: GO 45308
// i := list [ pos1 ] ;
45217: LD_ADDR_VAR 0 5
45221: PUSH
45222: LD_VAR 0 1
45226: PUSH
45227: LD_VAR 0 2
45231: ARRAY
45232: ST_TO_ADDR
// if not i then
45233: LD_VAR 0 5
45237: NOT
45238: IFFALSE 45242
// exit ;
45240: GO 45308
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45242: LD_ADDR_VAR 0 1
45246: PUSH
45247: LD_VAR 0 1
45251: PPUSH
45252: LD_VAR 0 2
45256: PPUSH
45257: LD_VAR 0 1
45261: PUSH
45262: LD_VAR 0 3
45266: ARRAY
45267: PPUSH
45268: CALL_OW 1
45272: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45273: LD_ADDR_VAR 0 1
45277: PUSH
45278: LD_VAR 0 1
45282: PPUSH
45283: LD_VAR 0 3
45287: PPUSH
45288: LD_VAR 0 5
45292: PPUSH
45293: CALL_OW 1
45297: ST_TO_ADDR
// result := list ;
45298: LD_ADDR_VAR 0 4
45302: PUSH
45303: LD_VAR 0 1
45307: ST_TO_ADDR
// end ;
45308: LD_VAR 0 4
45312: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45313: LD_INT 0
45315: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45316: LD_ADDR_VAR 0 5
45320: PUSH
45321: LD_VAR 0 1
45325: PPUSH
45326: CALL_OW 250
45330: PPUSH
45331: LD_VAR 0 1
45335: PPUSH
45336: CALL_OW 251
45340: PPUSH
45341: LD_VAR 0 2
45345: PPUSH
45346: LD_VAR 0 3
45350: PPUSH
45351: LD_VAR 0 4
45355: PPUSH
45356: CALL 45366 0 5
45360: ST_TO_ADDR
// end ;
45361: LD_VAR 0 5
45365: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45366: LD_INT 0
45368: PPUSH
45369: PPUSH
45370: PPUSH
45371: PPUSH
// if not list then
45372: LD_VAR 0 3
45376: NOT
45377: IFFALSE 45381
// exit ;
45379: GO 45769
// result := [ ] ;
45381: LD_ADDR_VAR 0 6
45385: PUSH
45386: EMPTY
45387: ST_TO_ADDR
// for i in list do
45388: LD_ADDR_VAR 0 7
45392: PUSH
45393: LD_VAR 0 3
45397: PUSH
45398: FOR_IN
45399: IFFALSE 45601
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45401: LD_ADDR_VAR 0 9
45405: PUSH
45406: LD_VAR 0 7
45410: PPUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: LD_VAR 0 2
45420: PPUSH
45421: CALL_OW 297
45425: ST_TO_ADDR
// if not result then
45426: LD_VAR 0 6
45430: NOT
45431: IFFALSE 45457
// result := [ [ i , tmp ] ] else
45433: LD_ADDR_VAR 0 6
45437: PUSH
45438: LD_VAR 0 7
45442: PUSH
45443: LD_VAR 0 9
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: EMPTY
45453: LIST
45454: ST_TO_ADDR
45455: GO 45599
// begin if result [ result ] [ 2 ] < tmp then
45457: LD_VAR 0 6
45461: PUSH
45462: LD_VAR 0 6
45466: ARRAY
45467: PUSH
45468: LD_INT 2
45470: ARRAY
45471: PUSH
45472: LD_VAR 0 9
45476: LESS
45477: IFFALSE 45519
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45479: LD_ADDR_VAR 0 6
45483: PUSH
45484: LD_VAR 0 6
45488: PPUSH
45489: LD_VAR 0 6
45493: PUSH
45494: LD_INT 1
45496: PLUS
45497: PPUSH
45498: LD_VAR 0 7
45502: PUSH
45503: LD_VAR 0 9
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PPUSH
45512: CALL_OW 2
45516: ST_TO_ADDR
45517: GO 45599
// for j = 1 to result do
45519: LD_ADDR_VAR 0 8
45523: PUSH
45524: DOUBLE
45525: LD_INT 1
45527: DEC
45528: ST_TO_ADDR
45529: LD_VAR 0 6
45533: PUSH
45534: FOR_TO
45535: IFFALSE 45597
// begin if tmp < result [ j ] [ 2 ] then
45537: LD_VAR 0 9
45541: PUSH
45542: LD_VAR 0 6
45546: PUSH
45547: LD_VAR 0 8
45551: ARRAY
45552: PUSH
45553: LD_INT 2
45555: ARRAY
45556: LESS
45557: IFFALSE 45595
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45559: LD_ADDR_VAR 0 6
45563: PUSH
45564: LD_VAR 0 6
45568: PPUSH
45569: LD_VAR 0 8
45573: PPUSH
45574: LD_VAR 0 7
45578: PUSH
45579: LD_VAR 0 9
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PPUSH
45588: CALL_OW 2
45592: ST_TO_ADDR
// break ;
45593: GO 45597
// end ; end ;
45595: GO 45534
45597: POP
45598: POP
// end ; end ;
45599: GO 45398
45601: POP
45602: POP
// if result and not asc then
45603: LD_VAR 0 6
45607: PUSH
45608: LD_VAR 0 4
45612: NOT
45613: AND
45614: IFFALSE 45689
// begin tmp := result ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: LD_VAR 0 6
45625: ST_TO_ADDR
// for i = tmp downto 1 do
45626: LD_ADDR_VAR 0 7
45630: PUSH
45631: DOUBLE
45632: LD_VAR 0 9
45636: INC
45637: ST_TO_ADDR
45638: LD_INT 1
45640: PUSH
45641: FOR_DOWNTO
45642: IFFALSE 45687
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45644: LD_ADDR_VAR 0 6
45648: PUSH
45649: LD_VAR 0 6
45653: PPUSH
45654: LD_VAR 0 9
45658: PUSH
45659: LD_VAR 0 7
45663: MINUS
45664: PUSH
45665: LD_INT 1
45667: PLUS
45668: PPUSH
45669: LD_VAR 0 9
45673: PUSH
45674: LD_VAR 0 7
45678: ARRAY
45679: PPUSH
45680: CALL_OW 1
45684: ST_TO_ADDR
45685: GO 45641
45687: POP
45688: POP
// end ; tmp := [ ] ;
45689: LD_ADDR_VAR 0 9
45693: PUSH
45694: EMPTY
45695: ST_TO_ADDR
// if mode then
45696: LD_VAR 0 5
45700: IFFALSE 45769
// begin for i = 1 to result do
45702: LD_ADDR_VAR 0 7
45706: PUSH
45707: DOUBLE
45708: LD_INT 1
45710: DEC
45711: ST_TO_ADDR
45712: LD_VAR 0 6
45716: PUSH
45717: FOR_TO
45718: IFFALSE 45757
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45720: LD_ADDR_VAR 0 9
45724: PUSH
45725: LD_VAR 0 9
45729: PPUSH
45730: LD_VAR 0 7
45734: PPUSH
45735: LD_VAR 0 6
45739: PUSH
45740: LD_VAR 0 7
45744: ARRAY
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: PPUSH
45750: CALL_OW 1
45754: ST_TO_ADDR
45755: GO 45717
45757: POP
45758: POP
// result := tmp ;
45759: LD_ADDR_VAR 0 6
45763: PUSH
45764: LD_VAR 0 9
45768: ST_TO_ADDR
// end ; end ;
45769: LD_VAR 0 6
45773: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45774: LD_INT 0
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
45780: PPUSH
45781: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45782: LD_ADDR_VAR 0 5
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// if not x or not y then
45804: LD_VAR 0 2
45808: NOT
45809: PUSH
45810: LD_VAR 0 3
45814: NOT
45815: OR
45816: IFFALSE 45820
// exit ;
45818: GO 47470
// if not range then
45820: LD_VAR 0 4
45824: NOT
45825: IFFALSE 45835
// range := 10 ;
45827: LD_ADDR_VAR 0 4
45831: PUSH
45832: LD_INT 10
45834: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45835: LD_ADDR_VAR 0 8
45839: PUSH
45840: LD_INT 81
45842: PUSH
45843: LD_VAR 0 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 92
45854: PUSH
45855: LD_VAR 0 2
45859: PUSH
45860: LD_VAR 0 3
45864: PUSH
45865: LD_VAR 0 4
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: LD_INT 21
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: PPUSH
45898: CALL_OW 69
45902: ST_TO_ADDR
// if not tmp then
45903: LD_VAR 0 8
45907: NOT
45908: IFFALSE 45912
// exit ;
45910: GO 47470
// for i in tmp do
45912: LD_ADDR_VAR 0 6
45916: PUSH
45917: LD_VAR 0 8
45921: PUSH
45922: FOR_IN
45923: IFFALSE 47445
// begin points := [ 0 , 0 , 0 ] ;
45925: LD_ADDR_VAR 0 9
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// bpoints := 1 ;
45944: LD_ADDR_VAR 0 10
45948: PUSH
45949: LD_INT 1
45951: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45952: LD_VAR 0 6
45956: PPUSH
45957: CALL_OW 247
45961: PUSH
45962: LD_INT 1
45964: DOUBLE
45965: EQUAL
45966: IFTRUE 45970
45968: GO 46548
45970: POP
// begin if GetClass ( i ) = 1 then
45971: LD_VAR 0 6
45975: PPUSH
45976: CALL_OW 257
45980: PUSH
45981: LD_INT 1
45983: EQUAL
45984: IFFALSE 46005
// points := [ 10 , 5 , 3 ] ;
45986: LD_ADDR_VAR 0 9
45990: PUSH
45991: LD_INT 10
45993: PUSH
45994: LD_INT 5
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46005: LD_VAR 0 6
46009: PPUSH
46010: CALL_OW 257
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 4
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: IN
46029: IFFALSE 46050
// points := [ 3 , 2 , 1 ] ;
46031: LD_ADDR_VAR 0 9
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46050: LD_VAR 0 6
46054: PPUSH
46055: CALL_OW 257
46059: PUSH
46060: LD_INT 5
46062: EQUAL
46063: IFFALSE 46084
// points := [ 130 , 5 , 2 ] ;
46065: LD_ADDR_VAR 0 9
46069: PUSH
46070: LD_INT 130
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46084: LD_VAR 0 6
46088: PPUSH
46089: CALL_OW 257
46093: PUSH
46094: LD_INT 8
46096: EQUAL
46097: IFFALSE 46118
// points := [ 35 , 35 , 30 ] ;
46099: LD_ADDR_VAR 0 9
46103: PUSH
46104: LD_INT 35
46106: PUSH
46107: LD_INT 35
46109: PUSH
46110: LD_INT 30
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46118: LD_VAR 0 6
46122: PPUSH
46123: CALL_OW 257
46127: PUSH
46128: LD_INT 9
46130: EQUAL
46131: IFFALSE 46152
// points := [ 20 , 55 , 40 ] ;
46133: LD_ADDR_VAR 0 9
46137: PUSH
46138: LD_INT 20
46140: PUSH
46141: LD_INT 55
46143: PUSH
46144: LD_INT 40
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46152: LD_VAR 0 6
46156: PPUSH
46157: CALL_OW 257
46161: PUSH
46162: LD_INT 12
46164: PUSH
46165: LD_INT 16
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: IN
46172: IFFALSE 46193
// points := [ 5 , 3 , 2 ] ;
46174: LD_ADDR_VAR 0 9
46178: PUSH
46179: LD_INT 5
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46193: LD_VAR 0 6
46197: PPUSH
46198: CALL_OW 257
46202: PUSH
46203: LD_INT 17
46205: EQUAL
46206: IFFALSE 46227
// points := [ 100 , 50 , 75 ] ;
46208: LD_ADDR_VAR 0 9
46212: PUSH
46213: LD_INT 100
46215: PUSH
46216: LD_INT 50
46218: PUSH
46219: LD_INT 75
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46227: LD_VAR 0 6
46231: PPUSH
46232: CALL_OW 257
46236: PUSH
46237: LD_INT 15
46239: EQUAL
46240: IFFALSE 46261
// points := [ 10 , 5 , 3 ] ;
46242: LD_ADDR_VAR 0 9
46246: PUSH
46247: LD_INT 10
46249: PUSH
46250: LD_INT 5
46252: PUSH
46253: LD_INT 3
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46261: LD_VAR 0 6
46265: PPUSH
46266: CALL_OW 257
46270: PUSH
46271: LD_INT 14
46273: EQUAL
46274: IFFALSE 46295
// points := [ 10 , 0 , 0 ] ;
46276: LD_ADDR_VAR 0 9
46280: PUSH
46281: LD_INT 10
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46295: LD_VAR 0 6
46299: PPUSH
46300: CALL_OW 257
46304: PUSH
46305: LD_INT 11
46307: EQUAL
46308: IFFALSE 46329
// points := [ 30 , 10 , 5 ] ;
46310: LD_ADDR_VAR 0 9
46314: PUSH
46315: LD_INT 30
46317: PUSH
46318: LD_INT 10
46320: PUSH
46321: LD_INT 5
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46329: LD_VAR 0 1
46333: PPUSH
46334: LD_INT 5
46336: PPUSH
46337: CALL_OW 321
46341: PUSH
46342: LD_INT 2
46344: EQUAL
46345: IFFALSE 46362
// bpoints := bpoints * 1.8 ;
46347: LD_ADDR_VAR 0 10
46351: PUSH
46352: LD_VAR 0 10
46356: PUSH
46357: LD_REAL  1.80000000000000E+0000
46360: MUL
46361: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46362: LD_VAR 0 6
46366: PPUSH
46367: CALL_OW 257
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: PUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: LD_INT 51
46398: PPUSH
46399: CALL_OW 321
46403: PUSH
46404: LD_INT 2
46406: EQUAL
46407: AND
46408: IFFALSE 46425
// bpoints := bpoints * 1.2 ;
46410: LD_ADDR_VAR 0 10
46414: PUSH
46415: LD_VAR 0 10
46419: PUSH
46420: LD_REAL  1.20000000000000E+0000
46423: MUL
46424: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46425: LD_VAR 0 6
46429: PPUSH
46430: CALL_OW 257
46434: PUSH
46435: LD_INT 5
46437: PUSH
46438: LD_INT 7
46440: PUSH
46441: LD_INT 9
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: IN
46449: PUSH
46450: LD_VAR 0 1
46454: PPUSH
46455: LD_INT 52
46457: PPUSH
46458: CALL_OW 321
46462: PUSH
46463: LD_INT 2
46465: EQUAL
46466: AND
46467: IFFALSE 46484
// bpoints := bpoints * 1.5 ;
46469: LD_ADDR_VAR 0 10
46473: PUSH
46474: LD_VAR 0 10
46478: PUSH
46479: LD_REAL  1.50000000000000E+0000
46482: MUL
46483: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46484: LD_VAR 0 1
46488: PPUSH
46489: LD_INT 66
46491: PPUSH
46492: CALL_OW 321
46496: PUSH
46497: LD_INT 2
46499: EQUAL
46500: IFFALSE 46517
// bpoints := bpoints * 1.1 ;
46502: LD_ADDR_VAR 0 10
46506: PUSH
46507: LD_VAR 0 10
46511: PUSH
46512: LD_REAL  1.10000000000000E+0000
46515: MUL
46516: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46517: LD_ADDR_VAR 0 10
46521: PUSH
46522: LD_VAR 0 10
46526: PUSH
46527: LD_VAR 0 6
46531: PPUSH
46532: LD_INT 1
46534: PPUSH
46535: CALL_OW 259
46539: PUSH
46540: LD_REAL  1.15000000000000E+0000
46543: MUL
46544: MUL
46545: ST_TO_ADDR
// end ; unit_vehicle :
46546: GO 47374
46548: LD_INT 2
46550: DOUBLE
46551: EQUAL
46552: IFTRUE 46556
46554: GO 47362
46556: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46557: LD_VAR 0 6
46561: PPUSH
46562: CALL_OW 264
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 42
46572: PUSH
46573: LD_INT 24
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: IN
46581: IFFALSE 46602
// points := [ 25 , 5 , 3 ] ;
46583: LD_ADDR_VAR 0 9
46587: PUSH
46588: LD_INT 25
46590: PUSH
46591: LD_INT 5
46593: PUSH
46594: LD_INT 3
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46602: LD_VAR 0 6
46606: PPUSH
46607: CALL_OW 264
46611: PUSH
46612: LD_INT 4
46614: PUSH
46615: LD_INT 43
46617: PUSH
46618: LD_INT 25
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: IN
46626: IFFALSE 46647
// points := [ 40 , 15 , 5 ] ;
46628: LD_ADDR_VAR 0 9
46632: PUSH
46633: LD_INT 40
46635: PUSH
46636: LD_INT 15
46638: PUSH
46639: LD_INT 5
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 264
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: LD_INT 23
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: IN
46667: IFFALSE 46688
// points := [ 7 , 25 , 8 ] ;
46669: LD_ADDR_VAR 0 9
46673: PUSH
46674: LD_INT 7
46676: PUSH
46677: LD_INT 25
46679: PUSH
46680: LD_INT 8
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46688: LD_VAR 0 6
46692: PPUSH
46693: CALL_OW 264
46697: PUSH
46698: LD_INT 5
46700: PUSH
46701: LD_INT 27
46703: PUSH
46704: LD_INT 44
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: IN
46712: IFFALSE 46733
// points := [ 14 , 50 , 16 ] ;
46714: LD_ADDR_VAR 0 9
46718: PUSH
46719: LD_INT 14
46721: PUSH
46722: LD_INT 50
46724: PUSH
46725: LD_INT 16
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46733: LD_VAR 0 6
46737: PPUSH
46738: CALL_OW 264
46742: PUSH
46743: LD_INT 6
46745: PUSH
46746: LD_INT 46
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: IN
46753: IFFALSE 46774
// points := [ 32 , 120 , 70 ] ;
46755: LD_ADDR_VAR 0 9
46759: PUSH
46760: LD_INT 32
46762: PUSH
46763: LD_INT 120
46765: PUSH
46766: LD_INT 70
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46774: LD_VAR 0 6
46778: PPUSH
46779: CALL_OW 264
46783: PUSH
46784: LD_INT 7
46786: PUSH
46787: LD_INT 28
46789: PUSH
46790: LD_INT 45
46792: PUSH
46793: LD_INT 92
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: IN
46802: IFFALSE 46823
// points := [ 35 , 20 , 45 ] ;
46804: LD_ADDR_VAR 0 9
46808: PUSH
46809: LD_INT 35
46811: PUSH
46812: LD_INT 20
46814: PUSH
46815: LD_INT 45
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46823: LD_VAR 0 6
46827: PPUSH
46828: CALL_OW 264
46832: PUSH
46833: LD_INT 47
46835: PUSH
46836: EMPTY
46837: LIST
46838: IN
46839: IFFALSE 46860
// points := [ 67 , 45 , 75 ] ;
46841: LD_ADDR_VAR 0 9
46845: PUSH
46846: LD_INT 67
46848: PUSH
46849: LD_INT 45
46851: PUSH
46852: LD_INT 75
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46860: LD_VAR 0 6
46864: PPUSH
46865: CALL_OW 264
46869: PUSH
46870: LD_INT 26
46872: PUSH
46873: EMPTY
46874: LIST
46875: IN
46876: IFFALSE 46897
// points := [ 120 , 30 , 80 ] ;
46878: LD_ADDR_VAR 0 9
46882: PUSH
46883: LD_INT 120
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 80
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46897: LD_VAR 0 6
46901: PPUSH
46902: CALL_OW 264
46906: PUSH
46907: LD_INT 22
46909: PUSH
46910: EMPTY
46911: LIST
46912: IN
46913: IFFALSE 46934
// points := [ 40 , 1 , 1 ] ;
46915: LD_ADDR_VAR 0 9
46919: PUSH
46920: LD_INT 40
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46934: LD_VAR 0 6
46938: PPUSH
46939: CALL_OW 264
46943: PUSH
46944: LD_INT 29
46946: PUSH
46947: EMPTY
46948: LIST
46949: IN
46950: IFFALSE 46971
// points := [ 70 , 200 , 400 ] ;
46952: LD_ADDR_VAR 0 9
46956: PUSH
46957: LD_INT 70
46959: PUSH
46960: LD_INT 200
46962: PUSH
46963: LD_INT 400
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46971: LD_VAR 0 6
46975: PPUSH
46976: CALL_OW 264
46980: PUSH
46981: LD_INT 14
46983: PUSH
46984: LD_INT 53
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: IN
46991: IFFALSE 47012
// points := [ 40 , 10 , 20 ] ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_INT 40
47000: PUSH
47001: LD_INT 10
47003: PUSH
47004: LD_INT 20
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47012: LD_VAR 0 6
47016: PPUSH
47017: CALL_OW 264
47021: PUSH
47022: LD_INT 9
47024: PUSH
47025: EMPTY
47026: LIST
47027: IN
47028: IFFALSE 47049
// points := [ 5 , 70 , 20 ] ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_INT 5
47037: PUSH
47038: LD_INT 70
47040: PUSH
47041: LD_INT 20
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47049: LD_VAR 0 6
47053: PPUSH
47054: CALL_OW 264
47058: PUSH
47059: LD_INT 10
47061: PUSH
47062: EMPTY
47063: LIST
47064: IN
47065: IFFALSE 47086
// points := [ 35 , 110 , 70 ] ;
47067: LD_ADDR_VAR 0 9
47071: PUSH
47072: LD_INT 35
47074: PUSH
47075: LD_INT 110
47077: PUSH
47078: LD_INT 70
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47086: LD_VAR 0 6
47090: PPUSH
47091: CALL_OW 265
47095: PUSH
47096: LD_INT 25
47098: EQUAL
47099: IFFALSE 47120
// points := [ 80 , 65 , 100 ] ;
47101: LD_ADDR_VAR 0 9
47105: PUSH
47106: LD_INT 80
47108: PUSH
47109: LD_INT 65
47111: PUSH
47112: LD_INT 100
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47120: LD_VAR 0 6
47124: PPUSH
47125: CALL_OW 263
47129: PUSH
47130: LD_INT 1
47132: EQUAL
47133: IFFALSE 47168
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47135: LD_ADDR_VAR 0 10
47139: PUSH
47140: LD_VAR 0 10
47144: PUSH
47145: LD_VAR 0 6
47149: PPUSH
47150: CALL_OW 311
47154: PPUSH
47155: LD_INT 3
47157: PPUSH
47158: CALL_OW 259
47162: PUSH
47163: LD_INT 4
47165: MUL
47166: MUL
47167: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47168: LD_VAR 0 6
47172: PPUSH
47173: CALL_OW 263
47177: PUSH
47178: LD_INT 2
47180: EQUAL
47181: IFFALSE 47232
// begin j := IsControledBy ( i ) ;
47183: LD_ADDR_VAR 0 7
47187: PUSH
47188: LD_VAR 0 6
47192: PPUSH
47193: CALL_OW 312
47197: ST_TO_ADDR
// if j then
47198: LD_VAR 0 7
47202: IFFALSE 47232
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47204: LD_ADDR_VAR 0 10
47208: PUSH
47209: LD_VAR 0 10
47213: PUSH
47214: LD_VAR 0 7
47218: PPUSH
47219: LD_INT 3
47221: PPUSH
47222: CALL_OW 259
47226: PUSH
47227: LD_INT 3
47229: MUL
47230: MUL
47231: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47232: LD_VAR 0 6
47236: PPUSH
47237: CALL_OW 264
47241: PUSH
47242: LD_INT 5
47244: PUSH
47245: LD_INT 6
47247: PUSH
47248: LD_INT 46
47250: PUSH
47251: LD_INT 44
47253: PUSH
47254: LD_INT 47
47256: PUSH
47257: LD_INT 45
47259: PUSH
47260: LD_INT 28
47262: PUSH
47263: LD_INT 7
47265: PUSH
47266: LD_INT 27
47268: PUSH
47269: LD_INT 29
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: IN
47284: PUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: LD_INT 52
47292: PPUSH
47293: CALL_OW 321
47297: PUSH
47298: LD_INT 2
47300: EQUAL
47301: AND
47302: IFFALSE 47319
// bpoints := bpoints * 1.2 ;
47304: LD_ADDR_VAR 0 10
47308: PUSH
47309: LD_VAR 0 10
47313: PUSH
47314: LD_REAL  1.20000000000000E+0000
47317: MUL
47318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47319: LD_VAR 0 6
47323: PPUSH
47324: CALL_OW 264
47328: PUSH
47329: LD_INT 6
47331: PUSH
47332: LD_INT 46
47334: PUSH
47335: LD_INT 47
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: IN
47343: IFFALSE 47360
// bpoints := bpoints * 1.2 ;
47345: LD_ADDR_VAR 0 10
47349: PUSH
47350: LD_VAR 0 10
47354: PUSH
47355: LD_REAL  1.20000000000000E+0000
47358: MUL
47359: ST_TO_ADDR
// end ; unit_building :
47360: GO 47374
47362: LD_INT 3
47364: DOUBLE
47365: EQUAL
47366: IFTRUE 47370
47368: GO 47373
47370: POP
// ; end ;
47371: GO 47374
47373: POP
// for j = 1 to 3 do
47374: LD_ADDR_VAR 0 7
47378: PUSH
47379: DOUBLE
47380: LD_INT 1
47382: DEC
47383: ST_TO_ADDR
47384: LD_INT 3
47386: PUSH
47387: FOR_TO
47388: IFFALSE 47441
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47390: LD_ADDR_VAR 0 5
47394: PUSH
47395: LD_VAR 0 5
47399: PPUSH
47400: LD_VAR 0 7
47404: PPUSH
47405: LD_VAR 0 5
47409: PUSH
47410: LD_VAR 0 7
47414: ARRAY
47415: PUSH
47416: LD_VAR 0 9
47420: PUSH
47421: LD_VAR 0 7
47425: ARRAY
47426: PUSH
47427: LD_VAR 0 10
47431: MUL
47432: PLUS
47433: PPUSH
47434: CALL_OW 1
47438: ST_TO_ADDR
47439: GO 47387
47441: POP
47442: POP
// end ;
47443: GO 45922
47445: POP
47446: POP
// result := Replace ( result , 4 , tmp ) ;
47447: LD_ADDR_VAR 0 5
47451: PUSH
47452: LD_VAR 0 5
47456: PPUSH
47457: LD_INT 4
47459: PPUSH
47460: LD_VAR 0 8
47464: PPUSH
47465: CALL_OW 1
47469: ST_TO_ADDR
// end ;
47470: LD_VAR 0 5
47474: RET
// export function DangerAtRange ( unit , range ) ; begin
47475: LD_INT 0
47477: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47478: LD_ADDR_VAR 0 3
47482: PUSH
47483: LD_VAR 0 1
47487: PPUSH
47488: CALL_OW 255
47492: PPUSH
47493: LD_VAR 0 1
47497: PPUSH
47498: CALL_OW 250
47502: PPUSH
47503: LD_VAR 0 1
47507: PPUSH
47508: CALL_OW 251
47512: PPUSH
47513: LD_VAR 0 2
47517: PPUSH
47518: CALL 45774 0 4
47522: ST_TO_ADDR
// end ;
47523: LD_VAR 0 3
47527: RET
// export function DangerInArea ( side , area ) ; begin
47528: LD_INT 0
47530: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47531: LD_ADDR_VAR 0 3
47535: PUSH
47536: LD_VAR 0 2
47540: PPUSH
47541: LD_INT 81
47543: PUSH
47544: LD_VAR 0 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PPUSH
47553: CALL_OW 70
47557: ST_TO_ADDR
// end ;
47558: LD_VAR 0 3
47562: RET
// export function IsExtension ( b ) ; begin
47563: LD_INT 0
47565: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47566: LD_ADDR_VAR 0 2
47570: PUSH
47571: LD_VAR 0 1
47575: PUSH
47576: LD_INT 23
47578: PUSH
47579: LD_INT 20
47581: PUSH
47582: LD_INT 22
47584: PUSH
47585: LD_INT 17
47587: PUSH
47588: LD_INT 24
47590: PUSH
47591: LD_INT 21
47593: PUSH
47594: LD_INT 19
47596: PUSH
47597: LD_INT 16
47599: PUSH
47600: LD_INT 25
47602: PUSH
47603: LD_INT 18
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: IN
47618: ST_TO_ADDR
// end ;
47619: LD_VAR 0 2
47623: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47624: LD_INT 0
47626: PPUSH
47627: PPUSH
47628: PPUSH
// result := [ ] ;
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: EMPTY
47635: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47636: LD_ADDR_VAR 0 5
47640: PUSH
47641: LD_VAR 0 2
47645: PPUSH
47646: LD_INT 21
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PPUSH
47656: CALL_OW 70
47660: ST_TO_ADDR
// if not tmp then
47661: LD_VAR 0 5
47665: NOT
47666: IFFALSE 47670
// exit ;
47668: GO 47734
// if checkLink then
47670: LD_VAR 0 3
47674: IFFALSE 47724
// begin for i in tmp do
47676: LD_ADDR_VAR 0 6
47680: PUSH
47681: LD_VAR 0 5
47685: PUSH
47686: FOR_IN
47687: IFFALSE 47722
// if GetBase ( i ) <> base then
47689: LD_VAR 0 6
47693: PPUSH
47694: CALL_OW 274
47698: PUSH
47699: LD_VAR 0 1
47703: NONEQUAL
47704: IFFALSE 47720
// ComLinkToBase ( base , i ) ;
47706: LD_VAR 0 1
47710: PPUSH
47711: LD_VAR 0 6
47715: PPUSH
47716: CALL_OW 169
47720: GO 47686
47722: POP
47723: POP
// end ; result := tmp ;
47724: LD_ADDR_VAR 0 4
47728: PUSH
47729: LD_VAR 0 5
47733: ST_TO_ADDR
// end ;
47734: LD_VAR 0 4
47738: RET
// export function ComComplete ( units , b ) ; var i ; begin
47739: LD_INT 0
47741: PPUSH
47742: PPUSH
// if not units then
47743: LD_VAR 0 1
47747: NOT
47748: IFFALSE 47752
// exit ;
47750: GO 47842
// for i in units do
47752: LD_ADDR_VAR 0 4
47756: PUSH
47757: LD_VAR 0 1
47761: PUSH
47762: FOR_IN
47763: IFFALSE 47840
// if BuildingStatus ( b ) = bs_build then
47765: LD_VAR 0 2
47769: PPUSH
47770: CALL_OW 461
47774: PUSH
47775: LD_INT 1
47777: EQUAL
47778: IFFALSE 47838
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47780: LD_VAR 0 4
47784: PPUSH
47785: LD_STRING h
47787: PUSH
47788: LD_VAR 0 2
47792: PPUSH
47793: CALL_OW 250
47797: PUSH
47798: LD_VAR 0 2
47802: PPUSH
47803: CALL_OW 251
47807: PUSH
47808: LD_VAR 0 2
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: PPUSH
47834: CALL_OW 446
47838: GO 47762
47840: POP
47841: POP
// end ;
47842: LD_VAR 0 3
47846: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47847: LD_INT 0
47849: PPUSH
47850: PPUSH
47851: PPUSH
47852: PPUSH
47853: PPUSH
47854: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47855: LD_VAR 0 1
47859: NOT
47860: PUSH
47861: LD_VAR 0 1
47865: PPUSH
47866: CALL_OW 263
47870: PUSH
47871: LD_INT 2
47873: NONEQUAL
47874: OR
47875: IFFALSE 47879
// exit ;
47877: GO 48195
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47879: LD_ADDR_VAR 0 6
47883: PUSH
47884: LD_INT 22
47886: PUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 255
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 30
47906: PUSH
47907: LD_INT 36
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 34
47916: PUSH
47917: LD_INT 31
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PPUSH
47933: CALL_OW 69
47937: ST_TO_ADDR
// if not tmp then
47938: LD_VAR 0 6
47942: NOT
47943: IFFALSE 47947
// exit ;
47945: GO 48195
// result := [ ] ;
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: EMPTY
47953: ST_TO_ADDR
// for i in tmp do
47954: LD_ADDR_VAR 0 3
47958: PUSH
47959: LD_VAR 0 6
47963: PUSH
47964: FOR_IN
47965: IFFALSE 48036
// begin t := UnitsInside ( i ) ;
47967: LD_ADDR_VAR 0 4
47971: PUSH
47972: LD_VAR 0 3
47976: PPUSH
47977: CALL_OW 313
47981: ST_TO_ADDR
// if t then
47982: LD_VAR 0 4
47986: IFFALSE 48034
// for j in t do
47988: LD_ADDR_VAR 0 7
47992: PUSH
47993: LD_VAR 0 4
47997: PUSH
47998: FOR_IN
47999: IFFALSE 48032
// result := Replace ( result , result + 1 , j ) ;
48001: LD_ADDR_VAR 0 2
48005: PUSH
48006: LD_VAR 0 2
48010: PPUSH
48011: LD_VAR 0 2
48015: PUSH
48016: LD_INT 1
48018: PLUS
48019: PPUSH
48020: LD_VAR 0 7
48024: PPUSH
48025: CALL_OW 1
48029: ST_TO_ADDR
48030: GO 47998
48032: POP
48033: POP
// end ;
48034: GO 47964
48036: POP
48037: POP
// if not result then
48038: LD_VAR 0 2
48042: NOT
48043: IFFALSE 48047
// exit ;
48045: GO 48195
// mech := result [ 1 ] ;
48047: LD_ADDR_VAR 0 5
48051: PUSH
48052: LD_VAR 0 2
48056: PUSH
48057: LD_INT 1
48059: ARRAY
48060: ST_TO_ADDR
// if result > 1 then
48061: LD_VAR 0 2
48065: PUSH
48066: LD_INT 1
48068: GREATER
48069: IFFALSE 48181
// begin for i = 2 to result do
48071: LD_ADDR_VAR 0 3
48075: PUSH
48076: DOUBLE
48077: LD_INT 2
48079: DEC
48080: ST_TO_ADDR
48081: LD_VAR 0 2
48085: PUSH
48086: FOR_TO
48087: IFFALSE 48179
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48089: LD_ADDR_VAR 0 4
48093: PUSH
48094: LD_VAR 0 2
48098: PUSH
48099: LD_VAR 0 3
48103: ARRAY
48104: PPUSH
48105: LD_INT 3
48107: PPUSH
48108: CALL_OW 259
48112: PUSH
48113: LD_VAR 0 2
48117: PUSH
48118: LD_VAR 0 3
48122: ARRAY
48123: PPUSH
48124: CALL_OW 432
48128: MINUS
48129: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48130: LD_VAR 0 4
48134: PUSH
48135: LD_VAR 0 5
48139: PPUSH
48140: LD_INT 3
48142: PPUSH
48143: CALL_OW 259
48147: PUSH
48148: LD_VAR 0 5
48152: PPUSH
48153: CALL_OW 432
48157: MINUS
48158: GREATEREQUAL
48159: IFFALSE 48177
// mech := result [ i ] ;
48161: LD_ADDR_VAR 0 5
48165: PUSH
48166: LD_VAR 0 2
48170: PUSH
48171: LD_VAR 0 3
48175: ARRAY
48176: ST_TO_ADDR
// end ;
48177: GO 48086
48179: POP
48180: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48181: LD_VAR 0 1
48185: PPUSH
48186: LD_VAR 0 5
48190: PPUSH
48191: CALL_OW 135
// end ;
48195: LD_VAR 0 2
48199: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48200: LD_INT 0
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
48208: PPUSH
48209: PPUSH
48210: PPUSH
48211: PPUSH
48212: PPUSH
48213: PPUSH
48214: PPUSH
// result := [ ] ;
48215: LD_ADDR_VAR 0 7
48219: PUSH
48220: EMPTY
48221: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48222: LD_VAR 0 1
48226: PPUSH
48227: CALL_OW 266
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: IN
48242: NOT
48243: IFFALSE 48247
// exit ;
48245: GO 49881
// if name then
48247: LD_VAR 0 3
48251: IFFALSE 48267
// SetBName ( base_dep , name ) ;
48253: LD_VAR 0 1
48257: PPUSH
48258: LD_VAR 0 3
48262: PPUSH
48263: CALL_OW 500
// base := GetBase ( base_dep ) ;
48267: LD_ADDR_VAR 0 15
48271: PUSH
48272: LD_VAR 0 1
48276: PPUSH
48277: CALL_OW 274
48281: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48282: LD_ADDR_VAR 0 16
48286: PUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 255
48296: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48297: LD_ADDR_VAR 0 17
48301: PUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 248
48311: ST_TO_ADDR
// if sources then
48312: LD_VAR 0 5
48316: IFFALSE 48363
// for i = 1 to 3 do
48318: LD_ADDR_VAR 0 8
48322: PUSH
48323: DOUBLE
48324: LD_INT 1
48326: DEC
48327: ST_TO_ADDR
48328: LD_INT 3
48330: PUSH
48331: FOR_TO
48332: IFFALSE 48361
// AddResourceType ( base , i , sources [ i ] ) ;
48334: LD_VAR 0 15
48338: PPUSH
48339: LD_VAR 0 8
48343: PPUSH
48344: LD_VAR 0 5
48348: PUSH
48349: LD_VAR 0 8
48353: ARRAY
48354: PPUSH
48355: CALL_OW 276
48359: GO 48331
48361: POP
48362: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48363: LD_ADDR_VAR 0 18
48367: PUSH
48368: LD_VAR 0 15
48372: PPUSH
48373: LD_VAR 0 2
48377: PPUSH
48378: LD_INT 1
48380: PPUSH
48381: CALL 47624 0 3
48385: ST_TO_ADDR
// InitHc ;
48386: CALL_OW 19
// InitUc ;
48390: CALL_OW 18
// uc_side := side ;
48394: LD_ADDR_OWVAR 20
48398: PUSH
48399: LD_VAR 0 16
48403: ST_TO_ADDR
// uc_nation := nation ;
48404: LD_ADDR_OWVAR 21
48408: PUSH
48409: LD_VAR 0 17
48413: ST_TO_ADDR
// if buildings then
48414: LD_VAR 0 18
48418: IFFALSE 49740
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48420: LD_ADDR_VAR 0 19
48424: PUSH
48425: LD_VAR 0 18
48429: PPUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_INT 29
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 30
48445: PUSH
48446: LD_INT 30
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: PPUSH
48458: CALL_OW 72
48462: ST_TO_ADDR
// if tmp then
48463: LD_VAR 0 19
48467: IFFALSE 48515
// for i in tmp do
48469: LD_ADDR_VAR 0 8
48473: PUSH
48474: LD_VAR 0 19
48478: PUSH
48479: FOR_IN
48480: IFFALSE 48513
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48482: LD_VAR 0 8
48486: PPUSH
48487: CALL_OW 250
48491: PPUSH
48492: LD_VAR 0 8
48496: PPUSH
48497: CALL_OW 251
48501: PPUSH
48502: LD_VAR 0 16
48506: PPUSH
48507: CALL_OW 441
48511: GO 48479
48513: POP
48514: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48515: LD_VAR 0 18
48519: PPUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 30
48525: PUSH
48526: LD_INT 32
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 30
48535: PUSH
48536: LD_INT 33
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: PPUSH
48548: CALL_OW 72
48552: IFFALSE 48640
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48554: LD_ADDR_VAR 0 8
48558: PUSH
48559: LD_VAR 0 18
48563: PPUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 30
48569: PUSH
48570: LD_INT 32
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 30
48579: PUSH
48580: LD_INT 33
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: PPUSH
48592: CALL_OW 72
48596: PUSH
48597: FOR_IN
48598: IFFALSE 48638
// begin if not GetBWeapon ( i ) then
48600: LD_VAR 0 8
48604: PPUSH
48605: CALL_OW 269
48609: NOT
48610: IFFALSE 48636
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48612: LD_VAR 0 8
48616: PPUSH
48617: LD_VAR 0 8
48621: PPUSH
48622: LD_VAR 0 2
48626: PPUSH
48627: CALL 49886 0 2
48631: PPUSH
48632: CALL_OW 431
// end ;
48636: GO 48597
48638: POP
48639: POP
// end ; for i = 1 to personel do
48640: LD_ADDR_VAR 0 8
48644: PUSH
48645: DOUBLE
48646: LD_INT 1
48648: DEC
48649: ST_TO_ADDR
48650: LD_VAR 0 6
48654: PUSH
48655: FOR_TO
48656: IFFALSE 49720
// begin if i > 4 then
48658: LD_VAR 0 8
48662: PUSH
48663: LD_INT 4
48665: GREATER
48666: IFFALSE 48670
// break ;
48668: GO 49720
// case i of 1 :
48670: LD_VAR 0 8
48674: PUSH
48675: LD_INT 1
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48683
48681: GO 48763
48683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48684: LD_ADDR_VAR 0 12
48688: PUSH
48689: LD_VAR 0 18
48693: PPUSH
48694: LD_INT 22
48696: PUSH
48697: LD_VAR 0 16
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 58
48708: PUSH
48709: EMPTY
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 30
48717: PUSH
48718: LD_INT 32
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 30
48727: PUSH
48728: LD_INT 4
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 30
48737: PUSH
48738: LD_INT 5
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: PPUSH
48756: CALL_OW 72
48760: ST_TO_ADDR
48761: GO 48985
48763: LD_INT 2
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48771
48769: GO 48833
48771: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48772: LD_ADDR_VAR 0 12
48776: PUSH
48777: LD_VAR 0 18
48781: PPUSH
48782: LD_INT 22
48784: PUSH
48785: LD_VAR 0 16
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 30
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 30
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PPUSH
48826: CALL_OW 72
48830: ST_TO_ADDR
48831: GO 48985
48833: LD_INT 3
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48841
48839: GO 48903
48841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48842: LD_ADDR_VAR 0 12
48846: PUSH
48847: LD_VAR 0 18
48851: PPUSH
48852: LD_INT 22
48854: PUSH
48855: LD_VAR 0 16
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 30
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 30
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PPUSH
48896: CALL_OW 72
48900: ST_TO_ADDR
48901: GO 48985
48903: LD_INT 4
48905: DOUBLE
48906: EQUAL
48907: IFTRUE 48911
48909: GO 48984
48911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48912: LD_ADDR_VAR 0 12
48916: PUSH
48917: LD_VAR 0 18
48921: PPUSH
48922: LD_INT 22
48924: PUSH
48925: LD_VAR 0 16
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 30
48939: PUSH
48940: LD_INT 6
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 7
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 8
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PPUSH
48977: CALL_OW 72
48981: ST_TO_ADDR
48982: GO 48985
48984: POP
// if i = 1 then
48985: LD_VAR 0 8
48989: PUSH
48990: LD_INT 1
48992: EQUAL
48993: IFFALSE 49104
// begin tmp := [ ] ;
48995: LD_ADDR_VAR 0 19
48999: PUSH
49000: EMPTY
49001: ST_TO_ADDR
// for j in f do
49002: LD_ADDR_VAR 0 9
49006: PUSH
49007: LD_VAR 0 12
49011: PUSH
49012: FOR_IN
49013: IFFALSE 49086
// if GetBType ( j ) = b_bunker then
49015: LD_VAR 0 9
49019: PPUSH
49020: CALL_OW 266
49024: PUSH
49025: LD_INT 32
49027: EQUAL
49028: IFFALSE 49055
// tmp := Insert ( tmp , 1 , j ) else
49030: LD_ADDR_VAR 0 19
49034: PUSH
49035: LD_VAR 0 19
49039: PPUSH
49040: LD_INT 1
49042: PPUSH
49043: LD_VAR 0 9
49047: PPUSH
49048: CALL_OW 2
49052: ST_TO_ADDR
49053: GO 49084
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49055: LD_ADDR_VAR 0 19
49059: PUSH
49060: LD_VAR 0 19
49064: PPUSH
49065: LD_VAR 0 19
49069: PUSH
49070: LD_INT 1
49072: PLUS
49073: PPUSH
49074: LD_VAR 0 9
49078: PPUSH
49079: CALL_OW 2
49083: ST_TO_ADDR
49084: GO 49012
49086: POP
49087: POP
// if tmp then
49088: LD_VAR 0 19
49092: IFFALSE 49104
// f := tmp ;
49094: LD_ADDR_VAR 0 12
49098: PUSH
49099: LD_VAR 0 19
49103: ST_TO_ADDR
// end ; x := personel [ i ] ;
49104: LD_ADDR_VAR 0 13
49108: PUSH
49109: LD_VAR 0 6
49113: PUSH
49114: LD_VAR 0 8
49118: ARRAY
49119: ST_TO_ADDR
// if x = - 1 then
49120: LD_VAR 0 13
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: EQUAL
49129: IFFALSE 49338
// begin for j in f do
49131: LD_ADDR_VAR 0 9
49135: PUSH
49136: LD_VAR 0 12
49140: PUSH
49141: FOR_IN
49142: IFFALSE 49334
// repeat InitHc ;
49144: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49148: LD_VAR 0 9
49152: PPUSH
49153: CALL_OW 266
49157: PUSH
49158: LD_INT 5
49160: EQUAL
49161: IFFALSE 49231
// begin if UnitsInside ( j ) < 3 then
49163: LD_VAR 0 9
49167: PPUSH
49168: CALL_OW 313
49172: PUSH
49173: LD_INT 3
49175: LESS
49176: IFFALSE 49212
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49178: LD_INT 0
49180: PPUSH
49181: LD_INT 5
49183: PUSH
49184: LD_INT 8
49186: PUSH
49187: LD_INT 9
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: PUSH
49195: LD_VAR 0 17
49199: ARRAY
49200: PPUSH
49201: LD_VAR 0 4
49205: PPUSH
49206: CALL_OW 380
49210: GO 49229
// PrepareHuman ( false , i , skill ) ;
49212: LD_INT 0
49214: PPUSH
49215: LD_VAR 0 8
49219: PPUSH
49220: LD_VAR 0 4
49224: PPUSH
49225: CALL_OW 380
// end else
49229: GO 49248
// PrepareHuman ( false , i , skill ) ;
49231: LD_INT 0
49233: PPUSH
49234: LD_VAR 0 8
49238: PPUSH
49239: LD_VAR 0 4
49243: PPUSH
49244: CALL_OW 380
// un := CreateHuman ;
49248: LD_ADDR_VAR 0 14
49252: PUSH
49253: CALL_OW 44
49257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49258: LD_ADDR_VAR 0 7
49262: PUSH
49263: LD_VAR 0 7
49267: PPUSH
49268: LD_INT 1
49270: PPUSH
49271: LD_VAR 0 14
49275: PPUSH
49276: CALL_OW 2
49280: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49281: LD_VAR 0 14
49285: PPUSH
49286: LD_VAR 0 9
49290: PPUSH
49291: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49295: LD_VAR 0 9
49299: PPUSH
49300: CALL_OW 313
49304: PUSH
49305: LD_INT 6
49307: EQUAL
49308: PUSH
49309: LD_VAR 0 9
49313: PPUSH
49314: CALL_OW 266
49318: PUSH
49319: LD_INT 32
49321: PUSH
49322: LD_INT 31
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: IN
49329: OR
49330: IFFALSE 49144
49332: GO 49141
49334: POP
49335: POP
// end else
49336: GO 49718
// for j = 1 to x do
49338: LD_ADDR_VAR 0 9
49342: PUSH
49343: DOUBLE
49344: LD_INT 1
49346: DEC
49347: ST_TO_ADDR
49348: LD_VAR 0 13
49352: PUSH
49353: FOR_TO
49354: IFFALSE 49716
// begin InitHc ;
49356: CALL_OW 19
// if not f then
49360: LD_VAR 0 12
49364: NOT
49365: IFFALSE 49454
// begin PrepareHuman ( false , i , skill ) ;
49367: LD_INT 0
49369: PPUSH
49370: LD_VAR 0 8
49374: PPUSH
49375: LD_VAR 0 4
49379: PPUSH
49380: CALL_OW 380
// un := CreateHuman ;
49384: LD_ADDR_VAR 0 14
49388: PUSH
49389: CALL_OW 44
49393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49394: LD_ADDR_VAR 0 7
49398: PUSH
49399: LD_VAR 0 7
49403: PPUSH
49404: LD_INT 1
49406: PPUSH
49407: LD_VAR 0 14
49411: PPUSH
49412: CALL_OW 2
49416: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49417: LD_VAR 0 14
49421: PPUSH
49422: LD_VAR 0 1
49426: PPUSH
49427: CALL_OW 250
49431: PPUSH
49432: LD_VAR 0 1
49436: PPUSH
49437: CALL_OW 251
49441: PPUSH
49442: LD_INT 10
49444: PPUSH
49445: LD_INT 0
49447: PPUSH
49448: CALL_OW 50
// continue ;
49452: GO 49353
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49454: LD_VAR 0 12
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: CALL_OW 313
49467: PUSH
49468: LD_VAR 0 12
49472: PUSH
49473: LD_INT 1
49475: ARRAY
49476: PPUSH
49477: CALL_OW 266
49481: PUSH
49482: LD_INT 32
49484: PUSH
49485: LD_INT 31
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: IN
49492: AND
49493: PUSH
49494: LD_VAR 0 12
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PPUSH
49503: CALL_OW 313
49507: PUSH
49508: LD_INT 6
49510: EQUAL
49511: OR
49512: IFFALSE 49532
// f := Delete ( f , 1 ) ;
49514: LD_ADDR_VAR 0 12
49518: PUSH
49519: LD_VAR 0 12
49523: PPUSH
49524: LD_INT 1
49526: PPUSH
49527: CALL_OW 3
49531: ST_TO_ADDR
// if not f then
49532: LD_VAR 0 12
49536: NOT
49537: IFFALSE 49555
// begin x := x + 2 ;
49539: LD_ADDR_VAR 0 13
49543: PUSH
49544: LD_VAR 0 13
49548: PUSH
49549: LD_INT 2
49551: PLUS
49552: ST_TO_ADDR
// continue ;
49553: GO 49353
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49555: LD_VAR 0 12
49559: PUSH
49560: LD_INT 1
49562: ARRAY
49563: PPUSH
49564: CALL_OW 266
49568: PUSH
49569: LD_INT 5
49571: EQUAL
49572: IFFALSE 49646
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49574: LD_VAR 0 12
49578: PUSH
49579: LD_INT 1
49581: ARRAY
49582: PPUSH
49583: CALL_OW 313
49587: PUSH
49588: LD_INT 3
49590: LESS
49591: IFFALSE 49627
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49593: LD_INT 0
49595: PPUSH
49596: LD_INT 5
49598: PUSH
49599: LD_INT 8
49601: PUSH
49602: LD_INT 9
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: LD_VAR 0 17
49614: ARRAY
49615: PPUSH
49616: LD_VAR 0 4
49620: PPUSH
49621: CALL_OW 380
49625: GO 49644
// PrepareHuman ( false , i , skill ) ;
49627: LD_INT 0
49629: PPUSH
49630: LD_VAR 0 8
49634: PPUSH
49635: LD_VAR 0 4
49639: PPUSH
49640: CALL_OW 380
// end else
49644: GO 49663
// PrepareHuman ( false , i , skill ) ;
49646: LD_INT 0
49648: PPUSH
49649: LD_VAR 0 8
49653: PPUSH
49654: LD_VAR 0 4
49658: PPUSH
49659: CALL_OW 380
// un := CreateHuman ;
49663: LD_ADDR_VAR 0 14
49667: PUSH
49668: CALL_OW 44
49672: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49673: LD_ADDR_VAR 0 7
49677: PUSH
49678: LD_VAR 0 7
49682: PPUSH
49683: LD_INT 1
49685: PPUSH
49686: LD_VAR 0 14
49690: PPUSH
49691: CALL_OW 2
49695: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49696: LD_VAR 0 14
49700: PPUSH
49701: LD_VAR 0 12
49705: PUSH
49706: LD_INT 1
49708: ARRAY
49709: PPUSH
49710: CALL_OW 52
// end ;
49714: GO 49353
49716: POP
49717: POP
// end ;
49718: GO 48655
49720: POP
49721: POP
// result := result ^ buildings ;
49722: LD_ADDR_VAR 0 7
49726: PUSH
49727: LD_VAR 0 7
49731: PUSH
49732: LD_VAR 0 18
49736: ADD
49737: ST_TO_ADDR
// end else
49738: GO 49881
// begin for i = 1 to personel do
49740: LD_ADDR_VAR 0 8
49744: PUSH
49745: DOUBLE
49746: LD_INT 1
49748: DEC
49749: ST_TO_ADDR
49750: LD_VAR 0 6
49754: PUSH
49755: FOR_TO
49756: IFFALSE 49879
// begin if i > 4 then
49758: LD_VAR 0 8
49762: PUSH
49763: LD_INT 4
49765: GREATER
49766: IFFALSE 49770
// break ;
49768: GO 49879
// x := personel [ i ] ;
49770: LD_ADDR_VAR 0 13
49774: PUSH
49775: LD_VAR 0 6
49779: PUSH
49780: LD_VAR 0 8
49784: ARRAY
49785: ST_TO_ADDR
// if x = - 1 then
49786: LD_VAR 0 13
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: EQUAL
49795: IFFALSE 49799
// continue ;
49797: GO 49755
// PrepareHuman ( false , i , skill ) ;
49799: LD_INT 0
49801: PPUSH
49802: LD_VAR 0 8
49806: PPUSH
49807: LD_VAR 0 4
49811: PPUSH
49812: CALL_OW 380
// un := CreateHuman ;
49816: LD_ADDR_VAR 0 14
49820: PUSH
49821: CALL_OW 44
49825: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49826: LD_VAR 0 14
49830: PPUSH
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 250
49840: PPUSH
49841: LD_VAR 0 1
49845: PPUSH
49846: CALL_OW 251
49850: PPUSH
49851: LD_INT 10
49853: PPUSH
49854: LD_INT 0
49856: PPUSH
49857: CALL_OW 50
// result := result ^ un ;
49861: LD_ADDR_VAR 0 7
49865: PUSH
49866: LD_VAR 0 7
49870: PUSH
49871: LD_VAR 0 14
49875: ADD
49876: ST_TO_ADDR
// end ;
49877: GO 49755
49879: POP
49880: POP
// end ; end ;
49881: LD_VAR 0 7
49885: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49886: LD_INT 0
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
// result := false ;
49904: LD_ADDR_VAR 0 3
49908: PUSH
49909: LD_INT 0
49911: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49912: LD_VAR 0 1
49916: NOT
49917: PUSH
49918: LD_VAR 0 1
49922: PPUSH
49923: CALL_OW 266
49927: PUSH
49928: LD_INT 32
49930: PUSH
49931: LD_INT 33
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: IN
49938: NOT
49939: OR
49940: IFFALSE 49944
// exit ;
49942: GO 51053
// nat := GetNation ( tower ) ;
49944: LD_ADDR_VAR 0 12
49948: PUSH
49949: LD_VAR 0 1
49953: PPUSH
49954: CALL_OW 248
49958: ST_TO_ADDR
// side := GetSide ( tower ) ;
49959: LD_ADDR_VAR 0 16
49963: PUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 255
49973: ST_TO_ADDR
// x := GetX ( tower ) ;
49974: LD_ADDR_VAR 0 10
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 250
49988: ST_TO_ADDR
// y := GetY ( tower ) ;
49989: LD_ADDR_VAR 0 11
49993: PUSH
49994: LD_VAR 0 1
49998: PPUSH
49999: CALL_OW 251
50003: ST_TO_ADDR
// if not x or not y then
50004: LD_VAR 0 10
50008: NOT
50009: PUSH
50010: LD_VAR 0 11
50014: NOT
50015: OR
50016: IFFALSE 50020
// exit ;
50018: GO 51053
// weapon := 0 ;
50020: LD_ADDR_VAR 0 18
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
// fac_list := [ ] ;
50028: LD_ADDR_VAR 0 17
50032: PUSH
50033: EMPTY
50034: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50035: LD_ADDR_VAR 0 6
50039: PUSH
50040: LD_VAR 0 1
50044: PPUSH
50045: CALL_OW 274
50049: PPUSH
50050: LD_VAR 0 2
50054: PPUSH
50055: LD_INT 0
50057: PPUSH
50058: CALL 47624 0 3
50062: PPUSH
50063: LD_INT 30
50065: PUSH
50066: LD_INT 3
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PPUSH
50073: CALL_OW 72
50077: ST_TO_ADDR
// if not factories then
50078: LD_VAR 0 6
50082: NOT
50083: IFFALSE 50087
// exit ;
50085: GO 51053
// for i in factories do
50087: LD_ADDR_VAR 0 8
50091: PUSH
50092: LD_VAR 0 6
50096: PUSH
50097: FOR_IN
50098: IFFALSE 50123
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50100: LD_ADDR_VAR 0 17
50104: PUSH
50105: LD_VAR 0 17
50109: PUSH
50110: LD_VAR 0 8
50114: PPUSH
50115: CALL_OW 478
50119: UNION
50120: ST_TO_ADDR
50121: GO 50097
50123: POP
50124: POP
// if not fac_list then
50125: LD_VAR 0 17
50129: NOT
50130: IFFALSE 50134
// exit ;
50132: GO 51053
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50134: LD_ADDR_VAR 0 5
50138: PUSH
50139: LD_INT 4
50141: PUSH
50142: LD_INT 5
50144: PUSH
50145: LD_INT 9
50147: PUSH
50148: LD_INT 10
50150: PUSH
50151: LD_INT 6
50153: PUSH
50154: LD_INT 7
50156: PUSH
50157: LD_INT 11
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 27
50171: PUSH
50172: LD_INT 28
50174: PUSH
50175: LD_INT 26
50177: PUSH
50178: LD_INT 30
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 43
50189: PUSH
50190: LD_INT 44
50192: PUSH
50193: LD_INT 46
50195: PUSH
50196: LD_INT 45
50198: PUSH
50199: LD_INT 47
50201: PUSH
50202: LD_INT 49
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: PUSH
50218: LD_VAR 0 12
50222: ARRAY
50223: ST_TO_ADDR
// list := list isect fac_list ;
50224: LD_ADDR_VAR 0 5
50228: PUSH
50229: LD_VAR 0 5
50233: PUSH
50234: LD_VAR 0 17
50238: ISECT
50239: ST_TO_ADDR
// if not list then
50240: LD_VAR 0 5
50244: NOT
50245: IFFALSE 50249
// exit ;
50247: GO 51053
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50249: LD_VAR 0 12
50253: PUSH
50254: LD_INT 3
50256: EQUAL
50257: PUSH
50258: LD_INT 49
50260: PUSH
50261: LD_VAR 0 5
50265: IN
50266: AND
50267: PUSH
50268: LD_INT 31
50270: PPUSH
50271: LD_VAR 0 16
50275: PPUSH
50276: CALL_OW 321
50280: PUSH
50281: LD_INT 2
50283: EQUAL
50284: AND
50285: IFFALSE 50345
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50287: LD_INT 22
50289: PUSH
50290: LD_VAR 0 16
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 35
50301: PUSH
50302: LD_INT 49
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 91
50311: PUSH
50312: LD_VAR 0 1
50316: PUSH
50317: LD_INT 10
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: PPUSH
50330: CALL_OW 69
50334: NOT
50335: IFFALSE 50345
// weapon := ru_time_lapser ;
50337: LD_ADDR_VAR 0 18
50341: PUSH
50342: LD_INT 49
50344: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50345: LD_VAR 0 12
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: IN
50360: PUSH
50361: LD_INT 11
50363: PUSH
50364: LD_VAR 0 5
50368: IN
50369: PUSH
50370: LD_INT 30
50372: PUSH
50373: LD_VAR 0 5
50377: IN
50378: OR
50379: AND
50380: PUSH
50381: LD_INT 6
50383: PPUSH
50384: LD_VAR 0 16
50388: PPUSH
50389: CALL_OW 321
50393: PUSH
50394: LD_INT 2
50396: EQUAL
50397: AND
50398: IFFALSE 50563
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50400: LD_INT 22
50402: PUSH
50403: LD_VAR 0 16
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 35
50417: PUSH
50418: LD_INT 11
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 35
50427: PUSH
50428: LD_INT 30
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 91
50442: PUSH
50443: LD_VAR 0 1
50447: PUSH
50448: LD_INT 18
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: PPUSH
50461: CALL_OW 69
50465: NOT
50466: PUSH
50467: LD_INT 22
50469: PUSH
50470: LD_VAR 0 16
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 30
50484: PUSH
50485: LD_INT 32
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 30
50494: PUSH
50495: LD_INT 33
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 91
50509: PUSH
50510: LD_VAR 0 1
50514: PUSH
50515: LD_INT 12
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: PUSH
50528: EMPTY
50529: LIST
50530: PPUSH
50531: CALL_OW 69
50535: PUSH
50536: LD_INT 2
50538: GREATER
50539: AND
50540: IFFALSE 50563
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50542: LD_ADDR_VAR 0 18
50546: PUSH
50547: LD_INT 11
50549: PUSH
50550: LD_INT 30
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_VAR 0 12
50561: ARRAY
50562: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50563: LD_VAR 0 18
50567: NOT
50568: PUSH
50569: LD_INT 40
50571: PPUSH
50572: LD_VAR 0 16
50576: PPUSH
50577: CALL_OW 321
50581: PUSH
50582: LD_INT 2
50584: EQUAL
50585: AND
50586: PUSH
50587: LD_INT 7
50589: PUSH
50590: LD_VAR 0 5
50594: IN
50595: PUSH
50596: LD_INT 28
50598: PUSH
50599: LD_VAR 0 5
50603: IN
50604: OR
50605: PUSH
50606: LD_INT 45
50608: PUSH
50609: LD_VAR 0 5
50613: IN
50614: OR
50615: AND
50616: IFFALSE 50870
// begin hex := GetHexInfo ( x , y ) ;
50618: LD_ADDR_VAR 0 4
50622: PUSH
50623: LD_VAR 0 10
50627: PPUSH
50628: LD_VAR 0 11
50632: PPUSH
50633: CALL_OW 546
50637: ST_TO_ADDR
// if hex [ 1 ] then
50638: LD_VAR 0 4
50642: PUSH
50643: LD_INT 1
50645: ARRAY
50646: IFFALSE 50650
// exit ;
50648: GO 51053
// height := hex [ 2 ] ;
50650: LD_ADDR_VAR 0 15
50654: PUSH
50655: LD_VAR 0 4
50659: PUSH
50660: LD_INT 2
50662: ARRAY
50663: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50664: LD_ADDR_VAR 0 14
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 5
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: ST_TO_ADDR
// for i in tmp do
50687: LD_ADDR_VAR 0 8
50691: PUSH
50692: LD_VAR 0 14
50696: PUSH
50697: FOR_IN
50698: IFFALSE 50868
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50700: LD_ADDR_VAR 0 9
50704: PUSH
50705: LD_VAR 0 10
50709: PPUSH
50710: LD_VAR 0 8
50714: PPUSH
50715: LD_INT 5
50717: PPUSH
50718: CALL_OW 272
50722: PUSH
50723: LD_VAR 0 11
50727: PPUSH
50728: LD_VAR 0 8
50732: PPUSH
50733: LD_INT 5
50735: PPUSH
50736: CALL_OW 273
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50745: LD_VAR 0 9
50749: PUSH
50750: LD_INT 1
50752: ARRAY
50753: PPUSH
50754: LD_VAR 0 9
50758: PUSH
50759: LD_INT 2
50761: ARRAY
50762: PPUSH
50763: CALL_OW 488
50767: IFFALSE 50866
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50769: LD_ADDR_VAR 0 4
50773: PUSH
50774: LD_VAR 0 9
50778: PUSH
50779: LD_INT 1
50781: ARRAY
50782: PPUSH
50783: LD_VAR 0 9
50787: PUSH
50788: LD_INT 2
50790: ARRAY
50791: PPUSH
50792: CALL_OW 546
50796: ST_TO_ADDR
// if hex [ 1 ] then
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: IFFALSE 50809
// continue ;
50807: GO 50697
// h := hex [ 2 ] ;
50809: LD_ADDR_VAR 0 13
50813: PUSH
50814: LD_VAR 0 4
50818: PUSH
50819: LD_INT 2
50821: ARRAY
50822: ST_TO_ADDR
// if h + 7 < height then
50823: LD_VAR 0 13
50827: PUSH
50828: LD_INT 7
50830: PLUS
50831: PUSH
50832: LD_VAR 0 15
50836: LESS
50837: IFFALSE 50866
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50839: LD_ADDR_VAR 0 18
50843: PUSH
50844: LD_INT 7
50846: PUSH
50847: LD_INT 28
50849: PUSH
50850: LD_INT 45
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: PUSH
50858: LD_VAR 0 12
50862: ARRAY
50863: ST_TO_ADDR
// break ;
50864: GO 50868
// end ; end ; end ;
50866: GO 50697
50868: POP
50869: POP
// end ; if not weapon then
50870: LD_VAR 0 18
50874: NOT
50875: IFFALSE 50935
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50877: LD_ADDR_VAR 0 5
50881: PUSH
50882: LD_VAR 0 5
50886: PUSH
50887: LD_INT 11
50889: PUSH
50890: LD_INT 30
50892: PUSH
50893: LD_INT 49
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: DIFF
50901: ST_TO_ADDR
// if not list then
50902: LD_VAR 0 5
50906: NOT
50907: IFFALSE 50911
// exit ;
50909: GO 51053
// weapon := list [ rand ( 1 , list ) ] ;
50911: LD_ADDR_VAR 0 18
50915: PUSH
50916: LD_VAR 0 5
50920: PUSH
50921: LD_INT 1
50923: PPUSH
50924: LD_VAR 0 5
50928: PPUSH
50929: CALL_OW 12
50933: ARRAY
50934: ST_TO_ADDR
// end ; if weapon then
50935: LD_VAR 0 18
50939: IFFALSE 51053
// begin tmp := CostOfWeapon ( weapon ) ;
50941: LD_ADDR_VAR 0 14
50945: PUSH
50946: LD_VAR 0 18
50950: PPUSH
50951: CALL_OW 451
50955: ST_TO_ADDR
// j := GetBase ( tower ) ;
50956: LD_ADDR_VAR 0 9
50960: PUSH
50961: LD_VAR 0 1
50965: PPUSH
50966: CALL_OW 274
50970: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50971: LD_VAR 0 9
50975: PPUSH
50976: LD_INT 1
50978: PPUSH
50979: CALL_OW 275
50983: PUSH
50984: LD_VAR 0 14
50988: PUSH
50989: LD_INT 1
50991: ARRAY
50992: GREATEREQUAL
50993: PUSH
50994: LD_VAR 0 9
50998: PPUSH
50999: LD_INT 2
51001: PPUSH
51002: CALL_OW 275
51006: PUSH
51007: LD_VAR 0 14
51011: PUSH
51012: LD_INT 2
51014: ARRAY
51015: GREATEREQUAL
51016: AND
51017: PUSH
51018: LD_VAR 0 9
51022: PPUSH
51023: LD_INT 3
51025: PPUSH
51026: CALL_OW 275
51030: PUSH
51031: LD_VAR 0 14
51035: PUSH
51036: LD_INT 3
51038: ARRAY
51039: GREATEREQUAL
51040: AND
51041: IFFALSE 51053
// result := weapon ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_VAR 0 18
51052: ST_TO_ADDR
// end ; end ;
51053: LD_VAR 0 3
51057: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51058: LD_INT 0
51060: PPUSH
51061: PPUSH
// result := true ;
51062: LD_ADDR_VAR 0 3
51066: PUSH
51067: LD_INT 1
51069: ST_TO_ADDR
// if array1 = array2 then
51070: LD_VAR 0 1
51074: PUSH
51075: LD_VAR 0 2
51079: EQUAL
51080: IFFALSE 51140
// begin for i = 1 to array1 do
51082: LD_ADDR_VAR 0 4
51086: PUSH
51087: DOUBLE
51088: LD_INT 1
51090: DEC
51091: ST_TO_ADDR
51092: LD_VAR 0 1
51096: PUSH
51097: FOR_TO
51098: IFFALSE 51136
// if array1 [ i ] <> array2 [ i ] then
51100: LD_VAR 0 1
51104: PUSH
51105: LD_VAR 0 4
51109: ARRAY
51110: PUSH
51111: LD_VAR 0 2
51115: PUSH
51116: LD_VAR 0 4
51120: ARRAY
51121: NONEQUAL
51122: IFFALSE 51134
// begin result := false ;
51124: LD_ADDR_VAR 0 3
51128: PUSH
51129: LD_INT 0
51131: ST_TO_ADDR
// break ;
51132: GO 51136
// end ;
51134: GO 51097
51136: POP
51137: POP
// end else
51138: GO 51148
// result := false ;
51140: LD_ADDR_VAR 0 3
51144: PUSH
51145: LD_INT 0
51147: ST_TO_ADDR
// end ;
51148: LD_VAR 0 3
51152: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51153: LD_INT 0
51155: PPUSH
51156: PPUSH
// if not array1 or not array2 then
51157: LD_VAR 0 1
51161: NOT
51162: PUSH
51163: LD_VAR 0 2
51167: NOT
51168: OR
51169: IFFALSE 51173
// exit ;
51171: GO 51237
// result := true ;
51173: LD_ADDR_VAR 0 3
51177: PUSH
51178: LD_INT 1
51180: ST_TO_ADDR
// for i = 1 to array1 do
51181: LD_ADDR_VAR 0 4
51185: PUSH
51186: DOUBLE
51187: LD_INT 1
51189: DEC
51190: ST_TO_ADDR
51191: LD_VAR 0 1
51195: PUSH
51196: FOR_TO
51197: IFFALSE 51235
// if array1 [ i ] <> array2 [ i ] then
51199: LD_VAR 0 1
51203: PUSH
51204: LD_VAR 0 4
51208: ARRAY
51209: PUSH
51210: LD_VAR 0 2
51214: PUSH
51215: LD_VAR 0 4
51219: ARRAY
51220: NONEQUAL
51221: IFFALSE 51233
// begin result := false ;
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_INT 0
51230: ST_TO_ADDR
// break ;
51231: GO 51235
// end ;
51233: GO 51196
51235: POP
51236: POP
// end ;
51237: LD_VAR 0 3
51241: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51242: LD_INT 0
51244: PPUSH
51245: PPUSH
51246: PPUSH
// pom := GetBase ( fac ) ;
51247: LD_ADDR_VAR 0 5
51251: PUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: CALL_OW 274
51261: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51262: LD_ADDR_VAR 0 4
51266: PUSH
51267: LD_VAR 0 2
51271: PUSH
51272: LD_INT 1
51274: ARRAY
51275: PPUSH
51276: LD_VAR 0 2
51280: PUSH
51281: LD_INT 2
51283: ARRAY
51284: PPUSH
51285: LD_VAR 0 2
51289: PUSH
51290: LD_INT 3
51292: ARRAY
51293: PPUSH
51294: LD_VAR 0 2
51298: PUSH
51299: LD_INT 4
51301: ARRAY
51302: PPUSH
51303: CALL_OW 449
51307: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_VAR 0 5
51317: PPUSH
51318: LD_INT 1
51320: PPUSH
51321: CALL_OW 275
51325: PUSH
51326: LD_VAR 0 4
51330: PUSH
51331: LD_INT 1
51333: ARRAY
51334: GREATEREQUAL
51335: PUSH
51336: LD_VAR 0 5
51340: PPUSH
51341: LD_INT 2
51343: PPUSH
51344: CALL_OW 275
51348: PUSH
51349: LD_VAR 0 4
51353: PUSH
51354: LD_INT 2
51356: ARRAY
51357: GREATEREQUAL
51358: AND
51359: PUSH
51360: LD_VAR 0 5
51364: PPUSH
51365: LD_INT 3
51367: PPUSH
51368: CALL_OW 275
51372: PUSH
51373: LD_VAR 0 4
51377: PUSH
51378: LD_INT 3
51380: ARRAY
51381: GREATEREQUAL
51382: AND
51383: ST_TO_ADDR
// end ;
51384: LD_VAR 0 3
51388: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51389: LD_INT 0
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
// pom := GetBase ( building ) ;
51395: LD_ADDR_VAR 0 3
51399: PUSH
51400: LD_VAR 0 1
51404: PPUSH
51405: CALL_OW 274
51409: ST_TO_ADDR
// if not pom then
51410: LD_VAR 0 3
51414: NOT
51415: IFFALSE 51419
// exit ;
51417: GO 51589
// btype := GetBType ( building ) ;
51419: LD_ADDR_VAR 0 5
51423: PUSH
51424: LD_VAR 0 1
51428: PPUSH
51429: CALL_OW 266
51433: ST_TO_ADDR
// if btype = b_armoury then
51434: LD_VAR 0 5
51438: PUSH
51439: LD_INT 4
51441: EQUAL
51442: IFFALSE 51452
// btype := b_barracks ;
51444: LD_ADDR_VAR 0 5
51448: PUSH
51449: LD_INT 5
51451: ST_TO_ADDR
// if btype = b_depot then
51452: LD_VAR 0 5
51456: PUSH
51457: LD_INT 0
51459: EQUAL
51460: IFFALSE 51470
// btype := b_warehouse ;
51462: LD_ADDR_VAR 0 5
51466: PUSH
51467: LD_INT 1
51469: ST_TO_ADDR
// if btype = b_workshop then
51470: LD_VAR 0 5
51474: PUSH
51475: LD_INT 2
51477: EQUAL
51478: IFFALSE 51488
// btype := b_factory ;
51480: LD_ADDR_VAR 0 5
51484: PUSH
51485: LD_INT 3
51487: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51488: LD_ADDR_VAR 0 4
51492: PUSH
51493: LD_VAR 0 5
51497: PPUSH
51498: LD_VAR 0 1
51502: PPUSH
51503: CALL_OW 248
51507: PPUSH
51508: CALL_OW 450
51512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51513: LD_ADDR_VAR 0 2
51517: PUSH
51518: LD_VAR 0 3
51522: PPUSH
51523: LD_INT 1
51525: PPUSH
51526: CALL_OW 275
51530: PUSH
51531: LD_VAR 0 4
51535: PUSH
51536: LD_INT 1
51538: ARRAY
51539: GREATEREQUAL
51540: PUSH
51541: LD_VAR 0 3
51545: PPUSH
51546: LD_INT 2
51548: PPUSH
51549: CALL_OW 275
51553: PUSH
51554: LD_VAR 0 4
51558: PUSH
51559: LD_INT 2
51561: ARRAY
51562: GREATEREQUAL
51563: AND
51564: PUSH
51565: LD_VAR 0 3
51569: PPUSH
51570: LD_INT 3
51572: PPUSH
51573: CALL_OW 275
51577: PUSH
51578: LD_VAR 0 4
51582: PUSH
51583: LD_INT 3
51585: ARRAY
51586: GREATEREQUAL
51587: AND
51588: ST_TO_ADDR
// end ;
51589: LD_VAR 0 2
51593: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51594: LD_INT 0
51596: PPUSH
51597: PPUSH
51598: PPUSH
// pom := GetBase ( building ) ;
51599: LD_ADDR_VAR 0 4
51603: PUSH
51604: LD_VAR 0 1
51608: PPUSH
51609: CALL_OW 274
51613: ST_TO_ADDR
// if not pom then
51614: LD_VAR 0 4
51618: NOT
51619: IFFALSE 51623
// exit ;
51621: GO 51724
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51623: LD_ADDR_VAR 0 5
51627: PUSH
51628: LD_VAR 0 2
51632: PPUSH
51633: LD_VAR 0 1
51637: PPUSH
51638: CALL_OW 248
51642: PPUSH
51643: CALL_OW 450
51647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51648: LD_ADDR_VAR 0 3
51652: PUSH
51653: LD_VAR 0 4
51657: PPUSH
51658: LD_INT 1
51660: PPUSH
51661: CALL_OW 275
51665: PUSH
51666: LD_VAR 0 5
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: GREATEREQUAL
51675: PUSH
51676: LD_VAR 0 4
51680: PPUSH
51681: LD_INT 2
51683: PPUSH
51684: CALL_OW 275
51688: PUSH
51689: LD_VAR 0 5
51693: PUSH
51694: LD_INT 2
51696: ARRAY
51697: GREATEREQUAL
51698: AND
51699: PUSH
51700: LD_VAR 0 4
51704: PPUSH
51705: LD_INT 3
51707: PPUSH
51708: CALL_OW 275
51712: PUSH
51713: LD_VAR 0 5
51717: PUSH
51718: LD_INT 3
51720: ARRAY
51721: GREATEREQUAL
51722: AND
51723: ST_TO_ADDR
// end ;
51724: LD_VAR 0 3
51728: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51729: LD_INT 0
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
51736: PPUSH
51737: PPUSH
51738: PPUSH
51739: PPUSH
51740: PPUSH
51741: PPUSH
// result := false ;
51742: LD_ADDR_VAR 0 8
51746: PUSH
51747: LD_INT 0
51749: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51750: LD_VAR 0 5
51754: NOT
51755: PUSH
51756: LD_VAR 0 1
51760: NOT
51761: OR
51762: PUSH
51763: LD_VAR 0 2
51767: NOT
51768: OR
51769: PUSH
51770: LD_VAR 0 3
51774: NOT
51775: OR
51776: IFFALSE 51780
// exit ;
51778: GO 52594
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51780: LD_ADDR_VAR 0 14
51784: PUSH
51785: LD_VAR 0 1
51789: PPUSH
51790: LD_VAR 0 2
51794: PPUSH
51795: LD_VAR 0 3
51799: PPUSH
51800: LD_VAR 0 4
51804: PPUSH
51805: LD_VAR 0 5
51809: PUSH
51810: LD_INT 1
51812: ARRAY
51813: PPUSH
51814: CALL_OW 248
51818: PPUSH
51819: LD_INT 0
51821: PPUSH
51822: CALL 53827 0 6
51826: ST_TO_ADDR
// if not hexes then
51827: LD_VAR 0 14
51831: NOT
51832: IFFALSE 51836
// exit ;
51834: GO 52594
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51836: LD_ADDR_VAR 0 17
51840: PUSH
51841: LD_VAR 0 5
51845: PPUSH
51846: LD_INT 22
51848: PUSH
51849: LD_VAR 0 13
51853: PPUSH
51854: CALL_OW 255
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 30
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 30
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PPUSH
51895: CALL_OW 72
51899: ST_TO_ADDR
// for i = 1 to hexes do
51900: LD_ADDR_VAR 0 9
51904: PUSH
51905: DOUBLE
51906: LD_INT 1
51908: DEC
51909: ST_TO_ADDR
51910: LD_VAR 0 14
51914: PUSH
51915: FOR_TO
51916: IFFALSE 52592
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51918: LD_ADDR_VAR 0 13
51922: PUSH
51923: LD_VAR 0 14
51927: PUSH
51928: LD_VAR 0 9
51932: ARRAY
51933: PUSH
51934: LD_INT 1
51936: ARRAY
51937: PPUSH
51938: LD_VAR 0 14
51942: PUSH
51943: LD_VAR 0 9
51947: ARRAY
51948: PUSH
51949: LD_INT 2
51951: ARRAY
51952: PPUSH
51953: CALL_OW 428
51957: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51958: LD_VAR 0 14
51962: PUSH
51963: LD_VAR 0 9
51967: ARRAY
51968: PUSH
51969: LD_INT 1
51971: ARRAY
51972: PPUSH
51973: LD_VAR 0 14
51977: PUSH
51978: LD_VAR 0 9
51982: ARRAY
51983: PUSH
51984: LD_INT 2
51986: ARRAY
51987: PPUSH
51988: CALL_OW 351
51992: PUSH
51993: LD_VAR 0 14
51997: PUSH
51998: LD_VAR 0 9
52002: ARRAY
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PPUSH
52008: LD_VAR 0 14
52012: PUSH
52013: LD_VAR 0 9
52017: ARRAY
52018: PUSH
52019: LD_INT 2
52021: ARRAY
52022: PPUSH
52023: CALL_OW 488
52027: NOT
52028: OR
52029: PUSH
52030: LD_VAR 0 13
52034: PPUSH
52035: CALL_OW 247
52039: PUSH
52040: LD_INT 3
52042: EQUAL
52043: OR
52044: IFFALSE 52050
// exit ;
52046: POP
52047: POP
52048: GO 52594
// if not tmp then
52050: LD_VAR 0 13
52054: NOT
52055: IFFALSE 52059
// continue ;
52057: GO 51915
// result := true ;
52059: LD_ADDR_VAR 0 8
52063: PUSH
52064: LD_INT 1
52066: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52067: LD_VAR 0 6
52071: PUSH
52072: LD_VAR 0 13
52076: PPUSH
52077: CALL_OW 247
52081: PUSH
52082: LD_INT 2
52084: EQUAL
52085: AND
52086: PUSH
52087: LD_VAR 0 13
52091: PPUSH
52092: CALL_OW 263
52096: PUSH
52097: LD_INT 1
52099: EQUAL
52100: AND
52101: IFFALSE 52265
// begin if IsDrivenBy ( tmp ) then
52103: LD_VAR 0 13
52107: PPUSH
52108: CALL_OW 311
52112: IFFALSE 52116
// continue ;
52114: GO 51915
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52116: LD_VAR 0 6
52120: PPUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 60
52126: PUSH
52127: EMPTY
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: LD_INT 55
52139: PUSH
52140: EMPTY
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PPUSH
52151: CALL_OW 72
52155: IFFALSE 52263
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52157: LD_ADDR_VAR 0 18
52161: PUSH
52162: LD_VAR 0 6
52166: PPUSH
52167: LD_INT 3
52169: PUSH
52170: LD_INT 60
52172: PUSH
52173: EMPTY
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 55
52185: PUSH
52186: EMPTY
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PPUSH
52197: CALL_OW 72
52201: PUSH
52202: LD_INT 1
52204: ARRAY
52205: ST_TO_ADDR
// if IsInUnit ( driver ) then
52206: LD_VAR 0 18
52210: PPUSH
52211: CALL_OW 310
52215: IFFALSE 52226
// ComExit ( driver ) ;
52217: LD_VAR 0 18
52221: PPUSH
52222: CALL 77607 0 1
// AddComEnterUnit ( driver , tmp ) ;
52226: LD_VAR 0 18
52230: PPUSH
52231: LD_VAR 0 13
52235: PPUSH
52236: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52240: LD_VAR 0 18
52244: PPUSH
52245: LD_VAR 0 7
52249: PPUSH
52250: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52254: LD_VAR 0 18
52258: PPUSH
52259: CALL_OW 181
// end ; continue ;
52263: GO 51915
// end ; if not cleaners or not tmp in cleaners then
52265: LD_VAR 0 6
52269: NOT
52270: PUSH
52271: LD_VAR 0 13
52275: PUSH
52276: LD_VAR 0 6
52280: IN
52281: NOT
52282: OR
52283: IFFALSE 52590
// begin if dep then
52285: LD_VAR 0 17
52289: IFFALSE 52425
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52291: LD_ADDR_VAR 0 16
52295: PUSH
52296: LD_VAR 0 17
52300: PUSH
52301: LD_INT 1
52303: ARRAY
52304: PPUSH
52305: CALL_OW 250
52309: PPUSH
52310: LD_VAR 0 17
52314: PUSH
52315: LD_INT 1
52317: ARRAY
52318: PPUSH
52319: CALL_OW 254
52323: PPUSH
52324: LD_INT 5
52326: PPUSH
52327: CALL_OW 272
52331: PUSH
52332: LD_VAR 0 17
52336: PUSH
52337: LD_INT 1
52339: ARRAY
52340: PPUSH
52341: CALL_OW 251
52345: PPUSH
52346: LD_VAR 0 17
52350: PUSH
52351: LD_INT 1
52353: ARRAY
52354: PPUSH
52355: CALL_OW 254
52359: PPUSH
52360: LD_INT 5
52362: PPUSH
52363: CALL_OW 273
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52372: LD_VAR 0 16
52376: PUSH
52377: LD_INT 1
52379: ARRAY
52380: PPUSH
52381: LD_VAR 0 16
52385: PUSH
52386: LD_INT 2
52388: ARRAY
52389: PPUSH
52390: CALL_OW 488
52394: IFFALSE 52425
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52396: LD_VAR 0 13
52400: PPUSH
52401: LD_VAR 0 16
52405: PUSH
52406: LD_INT 1
52408: ARRAY
52409: PPUSH
52410: LD_VAR 0 16
52414: PUSH
52415: LD_INT 2
52417: ARRAY
52418: PPUSH
52419: CALL_OW 111
// continue ;
52423: GO 51915
// end ; end ; r := GetDir ( tmp ) ;
52425: LD_ADDR_VAR 0 15
52429: PUSH
52430: LD_VAR 0 13
52434: PPUSH
52435: CALL_OW 254
52439: ST_TO_ADDR
// if r = 5 then
52440: LD_VAR 0 15
52444: PUSH
52445: LD_INT 5
52447: EQUAL
52448: IFFALSE 52458
// r := 0 ;
52450: LD_ADDR_VAR 0 15
52454: PUSH
52455: LD_INT 0
52457: ST_TO_ADDR
// for j = r to 5 do
52458: LD_ADDR_VAR 0 10
52462: PUSH
52463: DOUBLE
52464: LD_VAR 0 15
52468: DEC
52469: ST_TO_ADDR
52470: LD_INT 5
52472: PUSH
52473: FOR_TO
52474: IFFALSE 52588
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52476: LD_ADDR_VAR 0 11
52480: PUSH
52481: LD_VAR 0 13
52485: PPUSH
52486: CALL_OW 250
52490: PPUSH
52491: LD_VAR 0 10
52495: PPUSH
52496: LD_INT 2
52498: PPUSH
52499: CALL_OW 272
52503: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52504: LD_ADDR_VAR 0 12
52508: PUSH
52509: LD_VAR 0 13
52513: PPUSH
52514: CALL_OW 251
52518: PPUSH
52519: LD_VAR 0 10
52523: PPUSH
52524: LD_INT 2
52526: PPUSH
52527: CALL_OW 273
52531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52532: LD_VAR 0 11
52536: PPUSH
52537: LD_VAR 0 12
52541: PPUSH
52542: CALL_OW 488
52546: PUSH
52547: LD_VAR 0 11
52551: PPUSH
52552: LD_VAR 0 12
52556: PPUSH
52557: CALL_OW 428
52561: NOT
52562: AND
52563: IFFALSE 52586
// begin ComMoveXY ( tmp , _x , _y ) ;
52565: LD_VAR 0 13
52569: PPUSH
52570: LD_VAR 0 11
52574: PPUSH
52575: LD_VAR 0 12
52579: PPUSH
52580: CALL_OW 111
// break ;
52584: GO 52588
// end ; end ;
52586: GO 52473
52588: POP
52589: POP
// end ; end ;
52590: GO 51915
52592: POP
52593: POP
// end ;
52594: LD_VAR 0 8
52598: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52599: LD_INT 0
52601: PPUSH
// result := true ;
52602: LD_ADDR_VAR 0 3
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52610: LD_VAR 0 2
52614: PUSH
52615: LD_INT 24
52617: DOUBLE
52618: EQUAL
52619: IFTRUE 52629
52621: LD_INT 33
52623: DOUBLE
52624: EQUAL
52625: IFTRUE 52629
52627: GO 52654
52629: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52630: LD_ADDR_VAR 0 3
52634: PUSH
52635: LD_INT 32
52637: PPUSH
52638: LD_VAR 0 1
52642: PPUSH
52643: CALL_OW 321
52647: PUSH
52648: LD_INT 2
52650: EQUAL
52651: ST_TO_ADDR
52652: GO 52970
52654: LD_INT 20
52656: DOUBLE
52657: EQUAL
52658: IFTRUE 52662
52660: GO 52687
52662: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52663: LD_ADDR_VAR 0 3
52667: PUSH
52668: LD_INT 6
52670: PPUSH
52671: LD_VAR 0 1
52675: PPUSH
52676: CALL_OW 321
52680: PUSH
52681: LD_INT 2
52683: EQUAL
52684: ST_TO_ADDR
52685: GO 52970
52687: LD_INT 22
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52701
52693: LD_INT 36
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52701
52699: GO 52726
52701: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: LD_INT 15
52709: PPUSH
52710: LD_VAR 0 1
52714: PPUSH
52715: CALL_OW 321
52719: PUSH
52720: LD_INT 2
52722: EQUAL
52723: ST_TO_ADDR
52724: GO 52970
52726: LD_INT 30
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52734
52732: GO 52759
52734: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52735: LD_ADDR_VAR 0 3
52739: PUSH
52740: LD_INT 20
52742: PPUSH
52743: LD_VAR 0 1
52747: PPUSH
52748: CALL_OW 321
52752: PUSH
52753: LD_INT 2
52755: EQUAL
52756: ST_TO_ADDR
52757: GO 52970
52759: LD_INT 28
52761: DOUBLE
52762: EQUAL
52763: IFTRUE 52773
52765: LD_INT 21
52767: DOUBLE
52768: EQUAL
52769: IFTRUE 52773
52771: GO 52798
52773: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52774: LD_ADDR_VAR 0 3
52778: PUSH
52779: LD_INT 21
52781: PPUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL_OW 321
52791: PUSH
52792: LD_INT 2
52794: EQUAL
52795: ST_TO_ADDR
52796: GO 52970
52798: LD_INT 16
52800: DOUBLE
52801: EQUAL
52802: IFTRUE 52806
52804: GO 52831
52806: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52807: LD_ADDR_VAR 0 3
52811: PUSH
52812: LD_INT 84
52814: PPUSH
52815: LD_VAR 0 1
52819: PPUSH
52820: CALL_OW 321
52824: PUSH
52825: LD_INT 2
52827: EQUAL
52828: ST_TO_ADDR
52829: GO 52970
52831: LD_INT 19
52833: DOUBLE
52834: EQUAL
52835: IFTRUE 52845
52837: LD_INT 23
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52845
52843: GO 52870
52845: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52846: LD_ADDR_VAR 0 3
52850: PUSH
52851: LD_INT 83
52853: PPUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 321
52863: PUSH
52864: LD_INT 2
52866: EQUAL
52867: ST_TO_ADDR
52868: GO 52970
52870: LD_INT 17
52872: DOUBLE
52873: EQUAL
52874: IFTRUE 52878
52876: GO 52903
52878: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52879: LD_ADDR_VAR 0 3
52883: PUSH
52884: LD_INT 39
52886: PPUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 321
52896: PUSH
52897: LD_INT 2
52899: EQUAL
52900: ST_TO_ADDR
52901: GO 52970
52903: LD_INT 18
52905: DOUBLE
52906: EQUAL
52907: IFTRUE 52911
52909: GO 52936
52911: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_INT 40
52919: PPUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 321
52929: PUSH
52930: LD_INT 2
52932: EQUAL
52933: ST_TO_ADDR
52934: GO 52970
52936: LD_INT 27
52938: DOUBLE
52939: EQUAL
52940: IFTRUE 52944
52942: GO 52969
52944: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52945: LD_ADDR_VAR 0 3
52949: PUSH
52950: LD_INT 35
52952: PPUSH
52953: LD_VAR 0 1
52957: PPUSH
52958: CALL_OW 321
52962: PUSH
52963: LD_INT 2
52965: EQUAL
52966: ST_TO_ADDR
52967: GO 52970
52969: POP
// end ;
52970: LD_VAR 0 3
52974: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52975: LD_INT 0
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
// result := false ;
52988: LD_ADDR_VAR 0 6
52992: PUSH
52993: LD_INT 0
52995: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52996: LD_VAR 0 1
53000: NOT
53001: PUSH
53002: LD_VAR 0 1
53006: PPUSH
53007: CALL_OW 266
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: IN
53022: NOT
53023: OR
53024: PUSH
53025: LD_VAR 0 2
53029: NOT
53030: OR
53031: PUSH
53032: LD_VAR 0 5
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: LD_INT 4
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: IN
53063: NOT
53064: OR
53065: PUSH
53066: LD_VAR 0 3
53070: PPUSH
53071: LD_VAR 0 4
53075: PPUSH
53076: CALL_OW 488
53080: NOT
53081: OR
53082: IFFALSE 53086
// exit ;
53084: GO 53822
// side := GetSide ( depot ) ;
53086: LD_ADDR_VAR 0 9
53090: PUSH
53091: LD_VAR 0 1
53095: PPUSH
53096: CALL_OW 255
53100: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53101: LD_VAR 0 9
53105: PPUSH
53106: LD_VAR 0 2
53110: PPUSH
53111: CALL 52599 0 2
53115: NOT
53116: IFFALSE 53120
// exit ;
53118: GO 53822
// pom := GetBase ( depot ) ;
53120: LD_ADDR_VAR 0 10
53124: PUSH
53125: LD_VAR 0 1
53129: PPUSH
53130: CALL_OW 274
53134: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53135: LD_ADDR_VAR 0 11
53139: PUSH
53140: LD_VAR 0 2
53144: PPUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 248
53154: PPUSH
53155: CALL_OW 450
53159: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53160: LD_VAR 0 10
53164: PPUSH
53165: LD_INT 1
53167: PPUSH
53168: CALL_OW 275
53172: PUSH
53173: LD_VAR 0 11
53177: PUSH
53178: LD_INT 1
53180: ARRAY
53181: GREATEREQUAL
53182: PUSH
53183: LD_VAR 0 10
53187: PPUSH
53188: LD_INT 2
53190: PPUSH
53191: CALL_OW 275
53195: PUSH
53196: LD_VAR 0 11
53200: PUSH
53201: LD_INT 2
53203: ARRAY
53204: GREATEREQUAL
53205: AND
53206: PUSH
53207: LD_VAR 0 10
53211: PPUSH
53212: LD_INT 3
53214: PPUSH
53215: CALL_OW 275
53219: PUSH
53220: LD_VAR 0 11
53224: PUSH
53225: LD_INT 3
53227: ARRAY
53228: GREATEREQUAL
53229: AND
53230: NOT
53231: IFFALSE 53235
// exit ;
53233: GO 53822
// if GetBType ( depot ) = b_depot then
53235: LD_VAR 0 1
53239: PPUSH
53240: CALL_OW 266
53244: PUSH
53245: LD_INT 0
53247: EQUAL
53248: IFFALSE 53260
// dist := 28 else
53250: LD_ADDR_VAR 0 14
53254: PUSH
53255: LD_INT 28
53257: ST_TO_ADDR
53258: GO 53268
// dist := 36 ;
53260: LD_ADDR_VAR 0 14
53264: PUSH
53265: LD_INT 36
53267: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53268: LD_VAR 0 1
53272: PPUSH
53273: LD_VAR 0 3
53277: PPUSH
53278: LD_VAR 0 4
53282: PPUSH
53283: CALL_OW 297
53287: PUSH
53288: LD_VAR 0 14
53292: GREATER
53293: IFFALSE 53297
// exit ;
53295: GO 53822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53297: LD_ADDR_VAR 0 12
53301: PUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: LD_VAR 0 3
53311: PPUSH
53312: LD_VAR 0 4
53316: PPUSH
53317: LD_VAR 0 5
53321: PPUSH
53322: LD_VAR 0 1
53326: PPUSH
53327: CALL_OW 248
53331: PPUSH
53332: LD_INT 0
53334: PPUSH
53335: CALL 53827 0 6
53339: ST_TO_ADDR
// if not hexes then
53340: LD_VAR 0 12
53344: NOT
53345: IFFALSE 53349
// exit ;
53347: GO 53822
// hex := GetHexInfo ( x , y ) ;
53349: LD_ADDR_VAR 0 15
53353: PUSH
53354: LD_VAR 0 3
53358: PPUSH
53359: LD_VAR 0 4
53363: PPUSH
53364: CALL_OW 546
53368: ST_TO_ADDR
// if hex [ 1 ] then
53369: LD_VAR 0 15
53373: PUSH
53374: LD_INT 1
53376: ARRAY
53377: IFFALSE 53381
// exit ;
53379: GO 53822
// height := hex [ 2 ] ;
53381: LD_ADDR_VAR 0 13
53385: PUSH
53386: LD_VAR 0 15
53390: PUSH
53391: LD_INT 2
53393: ARRAY
53394: ST_TO_ADDR
// for i = 1 to hexes do
53395: LD_ADDR_VAR 0 7
53399: PUSH
53400: DOUBLE
53401: LD_INT 1
53403: DEC
53404: ST_TO_ADDR
53405: LD_VAR 0 12
53409: PUSH
53410: FOR_TO
53411: IFFALSE 53741
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53413: LD_VAR 0 12
53417: PUSH
53418: LD_VAR 0 7
53422: ARRAY
53423: PUSH
53424: LD_INT 1
53426: ARRAY
53427: PPUSH
53428: LD_VAR 0 12
53432: PUSH
53433: LD_VAR 0 7
53437: ARRAY
53438: PUSH
53439: LD_INT 2
53441: ARRAY
53442: PPUSH
53443: CALL_OW 488
53447: NOT
53448: PUSH
53449: LD_VAR 0 12
53453: PUSH
53454: LD_VAR 0 7
53458: ARRAY
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: PPUSH
53464: LD_VAR 0 12
53468: PUSH
53469: LD_VAR 0 7
53473: ARRAY
53474: PUSH
53475: LD_INT 2
53477: ARRAY
53478: PPUSH
53479: CALL_OW 428
53483: PUSH
53484: LD_INT 0
53486: GREATER
53487: OR
53488: PUSH
53489: LD_VAR 0 12
53493: PUSH
53494: LD_VAR 0 7
53498: ARRAY
53499: PUSH
53500: LD_INT 1
53502: ARRAY
53503: PPUSH
53504: LD_VAR 0 12
53508: PUSH
53509: LD_VAR 0 7
53513: ARRAY
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PPUSH
53519: CALL_OW 351
53523: OR
53524: IFFALSE 53530
// exit ;
53526: POP
53527: POP
53528: GO 53822
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53530: LD_ADDR_VAR 0 8
53534: PUSH
53535: LD_VAR 0 12
53539: PUSH
53540: LD_VAR 0 7
53544: ARRAY
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: LD_VAR 0 12
53554: PUSH
53555: LD_VAR 0 7
53559: ARRAY
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PPUSH
53565: CALL_OW 546
53569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53570: LD_VAR 0 8
53574: PUSH
53575: LD_INT 1
53577: ARRAY
53578: PUSH
53579: LD_VAR 0 8
53583: PUSH
53584: LD_INT 2
53586: ARRAY
53587: PUSH
53588: LD_VAR 0 13
53592: PUSH
53593: LD_INT 2
53595: PLUS
53596: GREATER
53597: OR
53598: PUSH
53599: LD_VAR 0 8
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: PUSH
53608: LD_VAR 0 13
53612: PUSH
53613: LD_INT 2
53615: MINUS
53616: LESS
53617: OR
53618: PUSH
53619: LD_VAR 0 8
53623: PUSH
53624: LD_INT 3
53626: ARRAY
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 8
53633: PUSH
53634: LD_INT 9
53636: PUSH
53637: LD_INT 10
53639: PUSH
53640: LD_INT 11
53642: PUSH
53643: LD_INT 12
53645: PUSH
53646: LD_INT 13
53648: PUSH
53649: LD_INT 16
53651: PUSH
53652: LD_INT 17
53654: PUSH
53655: LD_INT 18
53657: PUSH
53658: LD_INT 19
53660: PUSH
53661: LD_INT 20
53663: PUSH
53664: LD_INT 21
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: IN
53682: NOT
53683: OR
53684: PUSH
53685: LD_VAR 0 8
53689: PUSH
53690: LD_INT 5
53692: ARRAY
53693: NOT
53694: OR
53695: PUSH
53696: LD_VAR 0 8
53700: PUSH
53701: LD_INT 6
53703: ARRAY
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 7
53713: PUSH
53714: LD_INT 9
53716: PUSH
53717: LD_INT 10
53719: PUSH
53720: LD_INT 11
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: IN
53731: NOT
53732: OR
53733: IFFALSE 53739
// exit ;
53735: POP
53736: POP
53737: GO 53822
// end ;
53739: GO 53410
53741: POP
53742: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53743: LD_VAR 0 9
53747: PPUSH
53748: LD_VAR 0 3
53752: PPUSH
53753: LD_VAR 0 4
53757: PPUSH
53758: LD_INT 20
53760: PPUSH
53761: CALL 45774 0 4
53765: PUSH
53766: LD_INT 4
53768: ARRAY
53769: IFFALSE 53773
// exit ;
53771: GO 53822
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53773: LD_VAR 0 2
53777: PUSH
53778: LD_INT 29
53780: PUSH
53781: LD_INT 30
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: IN
53788: PUSH
53789: LD_VAR 0 3
53793: PPUSH
53794: LD_VAR 0 4
53798: PPUSH
53799: LD_VAR 0 9
53803: PPUSH
53804: CALL_OW 440
53808: NOT
53809: AND
53810: IFFALSE 53814
// exit ;
53812: GO 53822
// result := true ;
53814: LD_ADDR_VAR 0 6
53818: PUSH
53819: LD_INT 1
53821: ST_TO_ADDR
// end ;
53822: LD_VAR 0 6
53826: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53827: LD_INT 0
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
53837: PPUSH
53838: PPUSH
53839: PPUSH
53840: PPUSH
53841: PPUSH
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
53873: PPUSH
53874: PPUSH
53875: PPUSH
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
// result = [ ] ;
53887: LD_ADDR_VAR 0 7
53891: PUSH
53892: EMPTY
53893: ST_TO_ADDR
// temp_list = [ ] ;
53894: LD_ADDR_VAR 0 9
53898: PUSH
53899: EMPTY
53900: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53901: LD_VAR 0 4
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 4
53920: PUSH
53921: LD_INT 5
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: IN
53932: NOT
53933: PUSH
53934: LD_VAR 0 1
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: IN
53949: PUSH
53950: LD_VAR 0 5
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: IN
53969: NOT
53970: AND
53971: OR
53972: IFFALSE 53976
// exit ;
53974: GO 72367
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53976: LD_VAR 0 1
53980: PUSH
53981: LD_INT 6
53983: PUSH
53984: LD_INT 7
53986: PUSH
53987: LD_INT 8
53989: PUSH
53990: LD_INT 13
53992: PUSH
53993: LD_INT 12
53995: PUSH
53996: LD_INT 15
53998: PUSH
53999: LD_INT 11
54001: PUSH
54002: LD_INT 14
54004: PUSH
54005: LD_INT 10
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: IN
54019: IFFALSE 54029
// btype = b_lab ;
54021: LD_ADDR_VAR 0 1
54025: PUSH
54026: LD_INT 6
54028: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54029: LD_VAR 0 6
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: IN
54048: NOT
54049: PUSH
54050: LD_VAR 0 1
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 6
54069: PUSH
54070: LD_INT 36
54072: PUSH
54073: LD_INT 4
54075: PUSH
54076: LD_INT 5
54078: PUSH
54079: LD_INT 31
54081: PUSH
54082: LD_INT 32
54084: PUSH
54085: LD_INT 33
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: IN
54101: NOT
54102: PUSH
54103: LD_VAR 0 6
54107: PUSH
54108: LD_INT 1
54110: EQUAL
54111: AND
54112: OR
54113: PUSH
54114: LD_VAR 0 1
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: IN
54129: NOT
54130: PUSH
54131: LD_VAR 0 6
54135: PUSH
54136: LD_INT 2
54138: EQUAL
54139: AND
54140: OR
54141: IFFALSE 54151
// mode = 0 ;
54143: LD_ADDR_VAR 0 6
54147: PUSH
54148: LD_INT 0
54150: ST_TO_ADDR
// case mode of 0 :
54151: LD_VAR 0 6
54155: PUSH
54156: LD_INT 0
54158: DOUBLE
54159: EQUAL
54160: IFTRUE 54164
54162: GO 65617
54164: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54165: LD_ADDR_VAR 0 11
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 3
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54358: LD_ADDR_VAR 0 12
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54554: LD_ADDR_VAR 0 13
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54753: LD_ADDR_VAR 0 14
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54949: LD_ADDR_VAR 0 15
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55142: LD_ADDR_VAR 0 16
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 17
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55565: LD_ADDR_VAR 0 18
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55795: LD_ADDR_VAR 0 19
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56025: LD_ADDR_VAR 0 20
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56255: LD_ADDR_VAR 0 21
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56485: LD_ADDR_VAR 0 22
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56715: LD_ADDR_VAR 0 23
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56995: LD_ADDR_VAR 0 24
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57271: LD_ADDR_VAR 0 25
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57545: LD_ADDR_VAR 0 26
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57821: LD_ADDR_VAR 0 27
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58101: LD_ADDR_VAR 0 28
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58383: LD_ADDR_VAR 0 29
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58662: LD_ADDR_VAR 0 30
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58940: LD_ADDR_VAR 0 31
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59218: LD_ADDR_VAR 0 32
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59496: LD_ADDR_VAR 0 33
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59775: LD_ADDR_VAR 0 34
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60055: LD_ADDR_VAR 0 35
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60167: LD_ADDR_VAR 0 36
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60279: LD_ADDR_VAR 0 37
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60391: LD_ADDR_VAR 0 38
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60503: LD_ADDR_VAR 0 39
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60615: LD_ADDR_VAR 0 40
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60727: LD_ADDR_VAR 0 41
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61077: LD_ADDR_VAR 0 42
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61427: LD_ADDR_VAR 0 43
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61775: LD_ADDR_VAR 0 44
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 2
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 3
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62125: LD_ADDR_VAR 0 45
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62475: LD_ADDR_VAR 0 46
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 3
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62823: LD_ADDR_VAR 0 47
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62974: LD_ADDR_VAR 0 48
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63121: LD_ADDR_VAR 0 49
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63265: LD_ADDR_VAR 0 50
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63409: LD_ADDR_VAR 0 51
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63556: LD_ADDR_VAR 0 52
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63707: LD_ADDR_VAR 0 53
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63937: LD_ADDR_VAR 0 54
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: LD_INT 2
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64167: LD_ADDR_VAR 0 55
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: LD_INT 2
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 2
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64397: LD_ADDR_VAR 0 56
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64627: LD_ADDR_VAR 0 57
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: LD_INT 2
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 2
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64857: LD_ADDR_VAR 0 58
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 2
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65087: LD_ADDR_VAR 0 59
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65175: LD_ADDR_VAR 0 60
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65263: LD_ADDR_VAR 0 61
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65351: LD_ADDR_VAR 0 62
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65439: LD_ADDR_VAR 0 63
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65527: LD_ADDR_VAR 0 64
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// end ; 1 :
65615: GO 71512
65617: LD_INT 1
65619: DOUBLE
65620: EQUAL
65621: IFTRUE 65625
65623: GO 68248
65625: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65626: LD_ADDR_VAR 0 11
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65670: LD_ADDR_VAR 0 12
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65711: LD_ADDR_VAR 0 13
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65751: LD_ADDR_VAR 0 14
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65792: LD_ADDR_VAR 0 15
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65836: LD_ADDR_VAR 0 16
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 3
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 3
65855: NEG
65856: PUSH
65857: LD_INT 2
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 3
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65882: LD_ADDR_VAR 0 17
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 2
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65926: LD_ADDR_VAR 0 18
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65967: LD_ADDR_VAR 0 19
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: LD_INT 3
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66007: LD_ADDR_VAR 0 20
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66048: LD_ADDR_VAR 0 21
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: LD_INT 1
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66092: LD_ADDR_VAR 0 22
66096: PUSH
66097: LD_INT 2
66099: NEG
66100: PUSH
66101: LD_INT 3
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 2
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: LD_INT 3
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66138: LD_ADDR_VAR 0 23
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66182: LD_ADDR_VAR 0 24
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66223: LD_ADDR_VAR 0 25
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: LD_INT 4
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66263: LD_ADDR_VAR 0 26
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66304: LD_ADDR_VAR 0 27
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 4
66333: NEG
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: LIST
66347: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66348: LD_ADDR_VAR 0 28
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: LD_INT 3
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 3
66367: NEG
66368: PUSH
66369: LD_INT 4
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: NEG
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66394: LD_ADDR_VAR 0 29
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: NEG
66436: PUSH
66437: LD_INT 4
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: LD_INT 4
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: LD_INT 5
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: LD_INT 5
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: LD_INT 4
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 6
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 6
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 5
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66549: LD_ADDR_VAR 0 30
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 4
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 4
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 5
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 5
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 6
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 6
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66692: LD_ADDR_VAR 0 31
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 2
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 3
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 4
66729: PUSH
66730: LD_INT 3
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 4
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 3
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 5
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 5
66769: PUSH
66770: LD_INT 5
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: LD_INT 5
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 6
66789: PUSH
66790: LD_INT 5
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 6
66799: PUSH
66800: LD_INT 6
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 5
66809: PUSH
66810: LD_INT 6
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66831: LD_ADDR_VAR 0 32
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 5
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: LD_INT 5
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: LD_INT 6
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 6
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: NEG
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66974: LD_ADDR_VAR 0 33
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 3
66992: NEG
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 4
67026: NEG
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 4
67037: NEG
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 4
67049: NEG
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 5
67060: NEG
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 5
67071: NEG
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 5
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 6
67094: NEG
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 6
67105: NEG
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67129: LD_ADDR_VAR 0 34
67133: PUSH
67134: LD_INT 2
67136: NEG
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: NEG
67173: PUSH
67174: LD_INT 4
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 4
67184: NEG
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 4
67196: NEG
67197: PUSH
67198: LD_INT 4
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 4
67208: NEG
67209: PUSH
67210: LD_INT 5
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 5
67220: NEG
67221: PUSH
67222: LD_INT 4
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 5
67232: NEG
67233: PUSH
67234: LD_INT 5
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 5
67244: NEG
67245: PUSH
67246: LD_INT 6
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 6
67256: NEG
67257: PUSH
67258: LD_INT 5
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 6
67268: NEG
67269: PUSH
67270: LD_INT 6
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67292: LD_ADDR_VAR 0 41
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67336: LD_ADDR_VAR 0 42
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 2
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67377: LD_ADDR_VAR 0 43
67381: PUSH
67382: LD_INT 2
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 2
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67417: LD_ADDR_VAR 0 44
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: LD_INT 2
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: LD_INT 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: LIST
67457: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67458: LD_ADDR_VAR 0 45
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67502: LD_ADDR_VAR 0 46
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 3
67533: NEG
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67548: LD_ADDR_VAR 0 47
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67581: LD_ADDR_VAR 0 48
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67612: LD_ADDR_VAR 0 49
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 3
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67641: LD_ADDR_VAR 0 50
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 3
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67670: LD_ADDR_VAR 0 51
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: NEG
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67701: LD_ADDR_VAR 0 52
67705: PUSH
67706: LD_INT 3
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67734: LD_ADDR_VAR 0 53
67738: PUSH
67739: LD_INT 1
67741: NEG
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 3
67756: NEG
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: LIST
67777: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67778: LD_ADDR_VAR 0 54
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67819: LD_ADDR_VAR 0 55
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 3
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67859: LD_ADDR_VAR 0 56
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67900: LD_ADDR_VAR 0 57
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: LD_INT 1
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: NEG
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: LIST
67943: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67944: LD_ADDR_VAR 0 58
67948: PUSH
67949: LD_INT 2
67951: NEG
67952: PUSH
67953: LD_INT 3
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 3
67963: NEG
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: NEG
67976: PUSH
67977: LD_INT 3
67979: NEG
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67990: LD_ADDR_VAR 0 59
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: LD_INT 2
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: LD_INT 1
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68034: LD_ADDR_VAR 0 60
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 2
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68075: LD_ADDR_VAR 0 61
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 2
68092: PUSH
68093: LD_INT 2
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 2
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68115: LD_ADDR_VAR 0 62
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68156: LD_ADDR_VAR 0 63
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: LD_INT 1
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 2
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68200: LD_ADDR_VAR 0 64
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 2
68231: NEG
68232: PUSH
68233: LD_INT 2
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: ST_TO_ADDR
// end ; 2 :
68246: GO 71512
68248: LD_INT 2
68250: DOUBLE
68251: EQUAL
68252: IFTRUE 68256
68254: GO 71511
68256: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68257: LD_ADDR_VAR 0 29
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 4
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 5
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 5
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 4
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 3
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 5
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: LD_INT 3
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: LD_INT 4
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: LD_INT 4
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 2
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 2
68417: PUSH
68418: LD_INT 2
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: LD_INT 2
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: LD_INT 4
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: LD_INT 5
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: LD_INT 5
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 4
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: LD_INT 5
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: LD_INT 3
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 3
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 2
68563: NEG
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 3
68585: NEG
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 4
68619: NEG
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 4
68642: NEG
68643: PUSH
68644: LD_INT 4
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: NEG
68655: PUSH
68656: LD_INT 5
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: LD_INT 4
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: LD_INT 3
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: LD_INT 3
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 5
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 5
68714: NEG
68715: PUSH
68716: LD_INT 5
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: LD_INT 5
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 5
68738: NEG
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68795: LD_ADDR_VAR 0 30
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: PUSH
68813: LD_INT 3
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 5
68822: PUSH
68823: LD_INT 4
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 5
68832: PUSH
68833: LD_INT 5
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: PUSH
68843: LD_INT 5
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 3
68852: PUSH
68853: LD_INT 4
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: LD_INT 3
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 5
68872: PUSH
68873: LD_INT 3
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 3
68882: PUSH
68883: LD_INT 5
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 3
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: LD_INT 3
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: LD_INT 4
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: LD_INT 4
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 3
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: LD_INT 2
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 2
68964: PUSH
68965: LD_INT 4
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 4
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: NEG
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 5
69052: NEG
69053: PUSH
69054: LD_INT 1
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 5
69064: NEG
69065: PUSH
69066: LD_INT 2
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: NEG
69100: PUSH
69101: LD_INT 4
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 2
69111: NEG
69112: PUSH
69113: LD_INT 3
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 2
69123: NEG
69124: PUSH
69125: LD_INT 2
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: NEG
69136: PUSH
69137: LD_INT 2
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: NEG
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 4
69159: NEG
69160: PUSH
69161: LD_INT 4
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 4
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: LD_INT 5
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: LD_INT 4
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 3
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 3
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 1
69250: NEG
69251: PUSH
69252: LD_INT 4
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 2
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: LD_INT 5
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69342: LD_ADDR_VAR 0 31
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: LD_INT 4
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: LD_INT 4
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: LD_INT 5
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: LD_INT 5
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 1
69399: NEG
69400: PUSH
69401: LD_INT 4
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 1
69410: NEG
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: PUSH
69422: LD_INT 5
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: LD_INT 3
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 3
69453: NEG
69454: PUSH
69455: LD_INT 1
69457: NEG
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 2
69465: NEG
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 2
69476: NEG
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: NEG
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 4
69521: NEG
69522: PUSH
69523: LD_INT 2
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 4
69544: NEG
69545: PUSH
69546: LD_INT 4
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 4
69556: NEG
69557: PUSH
69558: LD_INT 5
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: NEG
69569: PUSH
69570: LD_INT 4
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 3
69580: NEG
69581: PUSH
69582: LD_INT 3
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: NEG
69593: PUSH
69594: LD_INT 3
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 5
69604: NEG
69605: PUSH
69606: LD_INT 4
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 5
69616: NEG
69617: PUSH
69618: LD_INT 5
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: LD_INT 5
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 5
69640: NEG
69641: PUSH
69642: LD_INT 3
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 3
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 4
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 3
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 2
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 2
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: LD_INT 4
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 4
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 4
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 5
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 5
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: LD_INT 1
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 3
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 5
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69892: LD_ADDR_VAR 0 32
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 4
69910: NEG
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 3
69933: NEG
69934: PUSH
69935: LD_INT 1
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 5
69955: NEG
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 5
69966: NEG
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 5
69978: NEG
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 3
69990: NEG
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: LD_INT 3
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 3
70013: NEG
70014: PUSH
70015: LD_INT 4
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 2
70025: NEG
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: LD_INT 2
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: NEG
70050: PUSH
70051: LD_INT 2
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 4
70061: NEG
70062: PUSH
70063: LD_INT 3
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 4
70073: NEG
70074: PUSH
70075: LD_INT 4
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 2
70085: NEG
70086: PUSH
70087: LD_INT 4
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 4
70097: NEG
70098: PUSH
70099: LD_INT 2
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 4
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: LD_INT 5
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 1
70131: PUSH
70132: LD_INT 4
70134: NEG
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: PUSH
70143: LD_INT 3
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 3
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: NEG
70165: PUSH
70166: LD_INT 4
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: PUSH
70178: LD_INT 5
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: LD_INT 3
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: NEG
70200: PUSH
70201: LD_INT 5
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 3
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 4
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 4
70242: PUSH
70243: LD_INT 1
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 3
70252: PUSH
70253: LD_INT 1
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 2
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 2
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 4
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 4
70304: PUSH
70305: LD_INT 4
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 4
70314: PUSH
70315: LD_INT 3
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 5
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 5
70334: PUSH
70335: LD_INT 5
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: LD_INT 5
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 3
70364: PUSH
70365: LD_INT 3
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 5
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 5
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70439: LD_ADDR_VAR 0 33
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: LD_INT 4
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 4
70458: NEG
70459: PUSH
70460: LD_INT 5
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 3
70470: NEG
70471: PUSH
70472: LD_INT 4
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 3
70482: NEG
70483: PUSH
70484: LD_INT 3
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 4
70494: NEG
70495: PUSH
70496: LD_INT 3
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 5
70506: NEG
70507: PUSH
70508: LD_INT 4
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 5
70518: NEG
70519: PUSH
70520: LD_INT 5
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: LD_INT 5
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 5
70542: NEG
70543: PUSH
70544: LD_INT 3
70546: NEG
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 0
70554: PUSH
70555: LD_INT 3
70557: NEG
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 4
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: LD_INT 3
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: PUSH
70588: LD_INT 2
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: LD_INT 2
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 1
70609: NEG
70610: PUSH
70611: LD_INT 3
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: NEG
70622: PUSH
70623: LD_INT 4
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 2
70644: NEG
70645: PUSH
70646: LD_INT 4
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 4
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 4
70666: PUSH
70667: LD_INT 1
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 5
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 5
70687: PUSH
70688: LD_INT 1
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 4
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 3
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 5
70739: PUSH
70740: LD_INT 2
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: LD_INT 3
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 3
70759: PUSH
70760: LD_INT 2
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: LD_INT 3
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 4
70779: PUSH
70780: LD_INT 4
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: LD_INT 4
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: LD_INT 3
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 2
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 4
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 4
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: LD_INT 4
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 0
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: LD_INT 5
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 5
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: LD_INT 4
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: LD_INT 3
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: PUSH
70912: LD_INT 5
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: LD_INT 3
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70977: LD_ADDR_VAR 0 34
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: LD_INT 4
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 5
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: LD_INT 4
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: LD_INT 3
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: LD_INT 3
71031: NEG
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: PUSH
71041: LD_INT 4
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: LD_INT 5
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 2
71063: PUSH
71064: LD_INT 3
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: LD_INT 5
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: LD_INT 1
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 4
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 2
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 2
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 2
71158: PUSH
71159: LD_INT 2
71161: NEG
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 4
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 4
71189: PUSH
71190: LD_INT 3
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 5
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 5
71209: PUSH
71210: LD_INT 5
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: LD_INT 5
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: LD_INT 3
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 5
71249: PUSH
71250: LD_INT 3
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: LD_INT 5
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: LD_INT 2
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 1
71289: PUSH
71290: LD_INT 3
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 1
71299: PUSH
71300: LD_INT 4
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: NEG
71320: PUSH
71321: LD_INT 3
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 1
71330: NEG
71331: PUSH
71332: LD_INT 2
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: LD_INT 4
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 2
71351: NEG
71352: PUSH
71353: LD_INT 2
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 4
71362: NEG
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 4
71373: NEG
71374: PUSH
71375: LD_INT 1
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: LD_INT 1
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 4
71407: NEG
71408: PUSH
71409: LD_INT 1
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 5
71418: NEG
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 5
71429: NEG
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 5
71441: NEG
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 3
71453: NEG
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: ST_TO_ADDR
// end ; end ;
71509: GO 71512
71511: POP
// case btype of b_depot , b_warehouse :
71512: LD_VAR 0 1
71516: PUSH
71517: LD_INT 0
71519: DOUBLE
71520: EQUAL
71521: IFTRUE 71531
71523: LD_INT 1
71525: DOUBLE
71526: EQUAL
71527: IFTRUE 71531
71529: GO 71732
71531: POP
// case nation of nation_american :
71532: LD_VAR 0 5
71536: PUSH
71537: LD_INT 1
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71545
71543: GO 71601
71545: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71546: LD_ADDR_VAR 0 9
71550: PUSH
71551: LD_VAR 0 11
71555: PUSH
71556: LD_VAR 0 12
71560: PUSH
71561: LD_VAR 0 13
71565: PUSH
71566: LD_VAR 0 14
71570: PUSH
71571: LD_VAR 0 15
71575: PUSH
71576: LD_VAR 0 16
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: PUSH
71589: LD_VAR 0 4
71593: PUSH
71594: LD_INT 1
71596: PLUS
71597: ARRAY
71598: ST_TO_ADDR
71599: GO 71730
71601: LD_INT 2
71603: DOUBLE
71604: EQUAL
71605: IFTRUE 71609
71607: GO 71665
71609: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71610: LD_ADDR_VAR 0 9
71614: PUSH
71615: LD_VAR 0 17
71619: PUSH
71620: LD_VAR 0 18
71624: PUSH
71625: LD_VAR 0 19
71629: PUSH
71630: LD_VAR 0 20
71634: PUSH
71635: LD_VAR 0 21
71639: PUSH
71640: LD_VAR 0 22
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: PUSH
71653: LD_VAR 0 4
71657: PUSH
71658: LD_INT 1
71660: PLUS
71661: ARRAY
71662: ST_TO_ADDR
71663: GO 71730
71665: LD_INT 3
71667: DOUBLE
71668: EQUAL
71669: IFTRUE 71673
71671: GO 71729
71673: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71674: LD_ADDR_VAR 0 9
71678: PUSH
71679: LD_VAR 0 23
71683: PUSH
71684: LD_VAR 0 24
71688: PUSH
71689: LD_VAR 0 25
71693: PUSH
71694: LD_VAR 0 26
71698: PUSH
71699: LD_VAR 0 27
71703: PUSH
71704: LD_VAR 0 28
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: PUSH
71717: LD_VAR 0 4
71721: PUSH
71722: LD_INT 1
71724: PLUS
71725: ARRAY
71726: ST_TO_ADDR
71727: GO 71730
71729: POP
71730: GO 72285
71732: LD_INT 2
71734: DOUBLE
71735: EQUAL
71736: IFTRUE 71746
71738: LD_INT 3
71740: DOUBLE
71741: EQUAL
71742: IFTRUE 71746
71744: GO 71802
71746: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71747: LD_ADDR_VAR 0 9
71751: PUSH
71752: LD_VAR 0 29
71756: PUSH
71757: LD_VAR 0 30
71761: PUSH
71762: LD_VAR 0 31
71766: PUSH
71767: LD_VAR 0 32
71771: PUSH
71772: LD_VAR 0 33
71776: PUSH
71777: LD_VAR 0 34
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: LD_VAR 0 4
71794: PUSH
71795: LD_INT 1
71797: PLUS
71798: ARRAY
71799: ST_TO_ADDR
71800: GO 72285
71802: LD_INT 16
71804: DOUBLE
71805: EQUAL
71806: IFTRUE 71864
71808: LD_INT 17
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71864
71814: LD_INT 18
71816: DOUBLE
71817: EQUAL
71818: IFTRUE 71864
71820: LD_INT 19
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71864
71826: LD_INT 22
71828: DOUBLE
71829: EQUAL
71830: IFTRUE 71864
71832: LD_INT 20
71834: DOUBLE
71835: EQUAL
71836: IFTRUE 71864
71838: LD_INT 21
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71864
71844: LD_INT 23
71846: DOUBLE
71847: EQUAL
71848: IFTRUE 71864
71850: LD_INT 24
71852: DOUBLE
71853: EQUAL
71854: IFTRUE 71864
71856: LD_INT 25
71858: DOUBLE
71859: EQUAL
71860: IFTRUE 71864
71862: GO 71920
71864: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71865: LD_ADDR_VAR 0 9
71869: PUSH
71870: LD_VAR 0 35
71874: PUSH
71875: LD_VAR 0 36
71879: PUSH
71880: LD_VAR 0 37
71884: PUSH
71885: LD_VAR 0 38
71889: PUSH
71890: LD_VAR 0 39
71894: PUSH
71895: LD_VAR 0 40
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: PUSH
71908: LD_VAR 0 4
71912: PUSH
71913: LD_INT 1
71915: PLUS
71916: ARRAY
71917: ST_TO_ADDR
71918: GO 72285
71920: LD_INT 6
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71976
71926: LD_INT 7
71928: DOUBLE
71929: EQUAL
71930: IFTRUE 71976
71932: LD_INT 8
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71976
71938: LD_INT 13
71940: DOUBLE
71941: EQUAL
71942: IFTRUE 71976
71944: LD_INT 12
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71976
71950: LD_INT 15
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 71976
71956: LD_INT 11
71958: DOUBLE
71959: EQUAL
71960: IFTRUE 71976
71962: LD_INT 14
71964: DOUBLE
71965: EQUAL
71966: IFTRUE 71976
71968: LD_INT 10
71970: DOUBLE
71971: EQUAL
71972: IFTRUE 71976
71974: GO 72032
71976: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71977: LD_ADDR_VAR 0 9
71981: PUSH
71982: LD_VAR 0 41
71986: PUSH
71987: LD_VAR 0 42
71991: PUSH
71992: LD_VAR 0 43
71996: PUSH
71997: LD_VAR 0 44
72001: PUSH
72002: LD_VAR 0 45
72006: PUSH
72007: LD_VAR 0 46
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: PUSH
72020: LD_VAR 0 4
72024: PUSH
72025: LD_INT 1
72027: PLUS
72028: ARRAY
72029: ST_TO_ADDR
72030: GO 72285
72032: LD_INT 36
72034: DOUBLE
72035: EQUAL
72036: IFTRUE 72040
72038: GO 72096
72040: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72041: LD_ADDR_VAR 0 9
72045: PUSH
72046: LD_VAR 0 47
72050: PUSH
72051: LD_VAR 0 48
72055: PUSH
72056: LD_VAR 0 49
72060: PUSH
72061: LD_VAR 0 50
72065: PUSH
72066: LD_VAR 0 51
72070: PUSH
72071: LD_VAR 0 52
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: PUSH
72084: LD_VAR 0 4
72088: PUSH
72089: LD_INT 1
72091: PLUS
72092: ARRAY
72093: ST_TO_ADDR
72094: GO 72285
72096: LD_INT 4
72098: DOUBLE
72099: EQUAL
72100: IFTRUE 72122
72102: LD_INT 5
72104: DOUBLE
72105: EQUAL
72106: IFTRUE 72122
72108: LD_INT 34
72110: DOUBLE
72111: EQUAL
72112: IFTRUE 72122
72114: LD_INT 37
72116: DOUBLE
72117: EQUAL
72118: IFTRUE 72122
72120: GO 72178
72122: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72123: LD_ADDR_VAR 0 9
72127: PUSH
72128: LD_VAR 0 53
72132: PUSH
72133: LD_VAR 0 54
72137: PUSH
72138: LD_VAR 0 55
72142: PUSH
72143: LD_VAR 0 56
72147: PUSH
72148: LD_VAR 0 57
72152: PUSH
72153: LD_VAR 0 58
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: PUSH
72166: LD_VAR 0 4
72170: PUSH
72171: LD_INT 1
72173: PLUS
72174: ARRAY
72175: ST_TO_ADDR
72176: GO 72285
72178: LD_INT 31
72180: DOUBLE
72181: EQUAL
72182: IFTRUE 72228
72184: LD_INT 32
72186: DOUBLE
72187: EQUAL
72188: IFTRUE 72228
72190: LD_INT 33
72192: DOUBLE
72193: EQUAL
72194: IFTRUE 72228
72196: LD_INT 27
72198: DOUBLE
72199: EQUAL
72200: IFTRUE 72228
72202: LD_INT 26
72204: DOUBLE
72205: EQUAL
72206: IFTRUE 72228
72208: LD_INT 28
72210: DOUBLE
72211: EQUAL
72212: IFTRUE 72228
72214: LD_INT 29
72216: DOUBLE
72217: EQUAL
72218: IFTRUE 72228
72220: LD_INT 30
72222: DOUBLE
72223: EQUAL
72224: IFTRUE 72228
72226: GO 72284
72228: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72229: LD_ADDR_VAR 0 9
72233: PUSH
72234: LD_VAR 0 59
72238: PUSH
72239: LD_VAR 0 60
72243: PUSH
72244: LD_VAR 0 61
72248: PUSH
72249: LD_VAR 0 62
72253: PUSH
72254: LD_VAR 0 63
72258: PUSH
72259: LD_VAR 0 64
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 4
72276: PUSH
72277: LD_INT 1
72279: PLUS
72280: ARRAY
72281: ST_TO_ADDR
72282: GO 72285
72284: POP
// temp_list2 = [ ] ;
72285: LD_ADDR_VAR 0 10
72289: PUSH
72290: EMPTY
72291: ST_TO_ADDR
// for i in temp_list do
72292: LD_ADDR_VAR 0 8
72296: PUSH
72297: LD_VAR 0 9
72301: PUSH
72302: FOR_IN
72303: IFFALSE 72355
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72305: LD_ADDR_VAR 0 10
72309: PUSH
72310: LD_VAR 0 10
72314: PUSH
72315: LD_VAR 0 8
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: PUSH
72324: LD_VAR 0 2
72328: PLUS
72329: PUSH
72330: LD_VAR 0 8
72334: PUSH
72335: LD_INT 2
72337: ARRAY
72338: PUSH
72339: LD_VAR 0 3
72343: PLUS
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: EMPTY
72350: LIST
72351: ADD
72352: ST_TO_ADDR
72353: GO 72302
72355: POP
72356: POP
// result = temp_list2 ;
72357: LD_ADDR_VAR 0 7
72361: PUSH
72362: LD_VAR 0 10
72366: ST_TO_ADDR
// end ;
72367: LD_VAR 0 7
72371: RET
// export function EnemyInRange ( unit , dist ) ; begin
72372: LD_INT 0
72374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72375: LD_ADDR_VAR 0 3
72379: PUSH
72380: LD_VAR 0 1
72384: PPUSH
72385: CALL_OW 255
72389: PPUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: CALL_OW 250
72399: PPUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: CALL_OW 251
72409: PPUSH
72410: LD_VAR 0 2
72414: PPUSH
72415: CALL 45774 0 4
72419: PUSH
72420: LD_INT 4
72422: ARRAY
72423: ST_TO_ADDR
// end ;
72424: LD_VAR 0 3
72428: RET
// export function PlayerSeeMe ( unit ) ; begin
72429: LD_INT 0
72431: PPUSH
// result := See ( your_side , unit ) ;
72432: LD_ADDR_VAR 0 2
72436: PUSH
72437: LD_OWVAR 2
72441: PPUSH
72442: LD_VAR 0 1
72446: PPUSH
72447: CALL_OW 292
72451: ST_TO_ADDR
// end ;
72452: LD_VAR 0 2
72456: RET
// export function ReverseDir ( unit ) ; begin
72457: LD_INT 0
72459: PPUSH
// if not unit then
72460: LD_VAR 0 1
72464: NOT
72465: IFFALSE 72469
// exit ;
72467: GO 72492
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72469: LD_ADDR_VAR 0 2
72473: PUSH
72474: LD_VAR 0 1
72478: PPUSH
72479: CALL_OW 254
72483: PUSH
72484: LD_INT 3
72486: PLUS
72487: PUSH
72488: LD_INT 6
72490: MOD
72491: ST_TO_ADDR
// end ;
72492: LD_VAR 0 2
72496: RET
// export function ReverseArray ( array ) ; var i ; begin
72497: LD_INT 0
72499: PPUSH
72500: PPUSH
// if not array then
72501: LD_VAR 0 1
72505: NOT
72506: IFFALSE 72510
// exit ;
72508: GO 72565
// result := [ ] ;
72510: LD_ADDR_VAR 0 2
72514: PUSH
72515: EMPTY
72516: ST_TO_ADDR
// for i := array downto 1 do
72517: LD_ADDR_VAR 0 3
72521: PUSH
72522: DOUBLE
72523: LD_VAR 0 1
72527: INC
72528: ST_TO_ADDR
72529: LD_INT 1
72531: PUSH
72532: FOR_DOWNTO
72533: IFFALSE 72563
// result := Join ( result , array [ i ] ) ;
72535: LD_ADDR_VAR 0 2
72539: PUSH
72540: LD_VAR 0 2
72544: PPUSH
72545: LD_VAR 0 1
72549: PUSH
72550: LD_VAR 0 3
72554: ARRAY
72555: PPUSH
72556: CALL 77209 0 2
72560: ST_TO_ADDR
72561: GO 72532
72563: POP
72564: POP
// end ;
72565: LD_VAR 0 2
72569: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72570: LD_INT 0
72572: PPUSH
72573: PPUSH
72574: PPUSH
72575: PPUSH
72576: PPUSH
72577: PPUSH
// if not unit or not hexes then
72578: LD_VAR 0 1
72582: NOT
72583: PUSH
72584: LD_VAR 0 2
72588: NOT
72589: OR
72590: IFFALSE 72594
// exit ;
72592: GO 72717
// dist := 9999 ;
72594: LD_ADDR_VAR 0 5
72598: PUSH
72599: LD_INT 9999
72601: ST_TO_ADDR
// for i = 1 to hexes do
72602: LD_ADDR_VAR 0 4
72606: PUSH
72607: DOUBLE
72608: LD_INT 1
72610: DEC
72611: ST_TO_ADDR
72612: LD_VAR 0 2
72616: PUSH
72617: FOR_TO
72618: IFFALSE 72705
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72620: LD_ADDR_VAR 0 6
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_VAR 0 4
72639: ARRAY
72640: PUSH
72641: LD_INT 1
72643: ARRAY
72644: PPUSH
72645: LD_VAR 0 2
72649: PUSH
72650: LD_VAR 0 4
72654: ARRAY
72655: PUSH
72656: LD_INT 2
72658: ARRAY
72659: PPUSH
72660: CALL_OW 297
72664: ST_TO_ADDR
// if tdist < dist then
72665: LD_VAR 0 6
72669: PUSH
72670: LD_VAR 0 5
72674: LESS
72675: IFFALSE 72703
// begin hex := hexes [ i ] ;
72677: LD_ADDR_VAR 0 8
72681: PUSH
72682: LD_VAR 0 2
72686: PUSH
72687: LD_VAR 0 4
72691: ARRAY
72692: ST_TO_ADDR
// dist := tdist ;
72693: LD_ADDR_VAR 0 5
72697: PUSH
72698: LD_VAR 0 6
72702: ST_TO_ADDR
// end ; end ;
72703: GO 72617
72705: POP
72706: POP
// result := hex ;
72707: LD_ADDR_VAR 0 3
72711: PUSH
72712: LD_VAR 0 8
72716: ST_TO_ADDR
// end ;
72717: LD_VAR 0 3
72721: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72722: LD_INT 0
72724: PPUSH
72725: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72726: LD_VAR 0 1
72730: NOT
72731: PUSH
72732: LD_VAR 0 1
72736: PUSH
72737: LD_INT 21
72739: PUSH
72740: LD_INT 2
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 23
72749: PUSH
72750: LD_INT 2
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PPUSH
72761: CALL_OW 69
72765: IN
72766: NOT
72767: OR
72768: IFFALSE 72772
// exit ;
72770: GO 72819
// for i = 1 to 3 do
72772: LD_ADDR_VAR 0 3
72776: PUSH
72777: DOUBLE
72778: LD_INT 1
72780: DEC
72781: ST_TO_ADDR
72782: LD_INT 3
72784: PUSH
72785: FOR_TO
72786: IFFALSE 72817
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72788: LD_VAR 0 1
72792: PPUSH
72793: CALL_OW 250
72797: PPUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: CALL_OW 251
72807: PPUSH
72808: LD_INT 1
72810: PPUSH
72811: CALL_OW 453
72815: GO 72785
72817: POP
72818: POP
// end ;
72819: LD_VAR 0 2
72823: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72824: LD_INT 0
72826: PPUSH
72827: PPUSH
72828: PPUSH
72829: PPUSH
72830: PPUSH
72831: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72832: LD_VAR 0 1
72836: NOT
72837: PUSH
72838: LD_VAR 0 2
72842: NOT
72843: OR
72844: PUSH
72845: LD_VAR 0 1
72849: PPUSH
72850: CALL_OW 314
72854: OR
72855: IFFALSE 72859
// exit ;
72857: GO 73326
// if GetLives ( i ) < 250 then
72859: LD_VAR 0 4
72863: PPUSH
72864: CALL_OW 256
72868: PUSH
72869: LD_INT 250
72871: LESS
72872: IFFALSE 72885
// begin ComAutodestruct ( i ) ;
72874: LD_VAR 0 4
72878: PPUSH
72879: CALL 72722 0 1
// exit ;
72883: GO 73326
// end ; x := GetX ( enemy_unit ) ;
72885: LD_ADDR_VAR 0 7
72889: PUSH
72890: LD_VAR 0 2
72894: PPUSH
72895: CALL_OW 250
72899: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72900: LD_ADDR_VAR 0 8
72904: PUSH
72905: LD_VAR 0 2
72909: PPUSH
72910: CALL_OW 251
72914: ST_TO_ADDR
// if not x or not y then
72915: LD_VAR 0 7
72919: NOT
72920: PUSH
72921: LD_VAR 0 8
72925: NOT
72926: OR
72927: IFFALSE 72931
// exit ;
72929: GO 73326
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72931: LD_ADDR_VAR 0 6
72935: PUSH
72936: LD_VAR 0 7
72940: PPUSH
72941: LD_INT 0
72943: PPUSH
72944: LD_INT 4
72946: PPUSH
72947: CALL_OW 272
72951: PUSH
72952: LD_VAR 0 8
72956: PPUSH
72957: LD_INT 0
72959: PPUSH
72960: LD_INT 4
72962: PPUSH
72963: CALL_OW 273
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_VAR 0 7
72976: PPUSH
72977: LD_INT 1
72979: PPUSH
72980: LD_INT 4
72982: PPUSH
72983: CALL_OW 272
72987: PUSH
72988: LD_VAR 0 8
72992: PPUSH
72993: LD_INT 1
72995: PPUSH
72996: LD_INT 4
72998: PPUSH
72999: CALL_OW 273
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_VAR 0 7
73012: PPUSH
73013: LD_INT 2
73015: PPUSH
73016: LD_INT 4
73018: PPUSH
73019: CALL_OW 272
73023: PUSH
73024: LD_VAR 0 8
73028: PPUSH
73029: LD_INT 2
73031: PPUSH
73032: LD_INT 4
73034: PPUSH
73035: CALL_OW 273
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_VAR 0 7
73048: PPUSH
73049: LD_INT 3
73051: PPUSH
73052: LD_INT 4
73054: PPUSH
73055: CALL_OW 272
73059: PUSH
73060: LD_VAR 0 8
73064: PPUSH
73065: LD_INT 3
73067: PPUSH
73068: LD_INT 4
73070: PPUSH
73071: CALL_OW 273
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_VAR 0 7
73084: PPUSH
73085: LD_INT 4
73087: PPUSH
73088: LD_INT 4
73090: PPUSH
73091: CALL_OW 272
73095: PUSH
73096: LD_VAR 0 8
73100: PPUSH
73101: LD_INT 4
73103: PPUSH
73104: LD_INT 4
73106: PPUSH
73107: CALL_OW 273
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_VAR 0 7
73120: PPUSH
73121: LD_INT 5
73123: PPUSH
73124: LD_INT 4
73126: PPUSH
73127: CALL_OW 272
73131: PUSH
73132: LD_VAR 0 8
73136: PPUSH
73137: LD_INT 5
73139: PPUSH
73140: LD_INT 4
73142: PPUSH
73143: CALL_OW 273
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: ST_TO_ADDR
// for i = tmp downto 1 do
73160: LD_ADDR_VAR 0 4
73164: PUSH
73165: DOUBLE
73166: LD_VAR 0 6
73170: INC
73171: ST_TO_ADDR
73172: LD_INT 1
73174: PUSH
73175: FOR_DOWNTO
73176: IFFALSE 73277
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73178: LD_VAR 0 6
73182: PUSH
73183: LD_VAR 0 4
73187: ARRAY
73188: PUSH
73189: LD_INT 1
73191: ARRAY
73192: PPUSH
73193: LD_VAR 0 6
73197: PUSH
73198: LD_VAR 0 4
73202: ARRAY
73203: PUSH
73204: LD_INT 2
73206: ARRAY
73207: PPUSH
73208: CALL_OW 488
73212: NOT
73213: PUSH
73214: LD_VAR 0 6
73218: PUSH
73219: LD_VAR 0 4
73223: ARRAY
73224: PUSH
73225: LD_INT 1
73227: ARRAY
73228: PPUSH
73229: LD_VAR 0 6
73233: PUSH
73234: LD_VAR 0 4
73238: ARRAY
73239: PUSH
73240: LD_INT 2
73242: ARRAY
73243: PPUSH
73244: CALL_OW 428
73248: PUSH
73249: LD_INT 0
73251: NONEQUAL
73252: OR
73253: IFFALSE 73275
// tmp := Delete ( tmp , i ) ;
73255: LD_ADDR_VAR 0 6
73259: PUSH
73260: LD_VAR 0 6
73264: PPUSH
73265: LD_VAR 0 4
73269: PPUSH
73270: CALL_OW 3
73274: ST_TO_ADDR
73275: GO 73175
73277: POP
73278: POP
// j := GetClosestHex ( unit , tmp ) ;
73279: LD_ADDR_VAR 0 5
73283: PUSH
73284: LD_VAR 0 1
73288: PPUSH
73289: LD_VAR 0 6
73293: PPUSH
73294: CALL 72570 0 2
73298: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73299: LD_VAR 0 1
73303: PPUSH
73304: LD_VAR 0 5
73308: PUSH
73309: LD_INT 1
73311: ARRAY
73312: PPUSH
73313: LD_VAR 0 5
73317: PUSH
73318: LD_INT 2
73320: ARRAY
73321: PPUSH
73322: CALL_OW 111
// end ;
73326: LD_VAR 0 3
73330: RET
// export function PrepareApemanSoldier ( ) ; begin
73331: LD_INT 0
73333: PPUSH
// uc_nation := 0 ;
73334: LD_ADDR_OWVAR 21
73338: PUSH
73339: LD_INT 0
73341: ST_TO_ADDR
// hc_sex := sex_male ;
73342: LD_ADDR_OWVAR 27
73346: PUSH
73347: LD_INT 1
73349: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73350: LD_ADDR_OWVAR 28
73354: PUSH
73355: LD_INT 15
73357: ST_TO_ADDR
// hc_gallery :=  ;
73358: LD_ADDR_OWVAR 33
73362: PUSH
73363: LD_STRING 
73365: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73366: LD_ADDR_OWVAR 31
73370: PUSH
73371: LD_INT 0
73373: PPUSH
73374: LD_INT 3
73376: PPUSH
73377: CALL_OW 12
73381: PUSH
73382: LD_INT 0
73384: PPUSH
73385: LD_INT 3
73387: PPUSH
73388: CALL_OW 12
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: ST_TO_ADDR
// end ;
73405: LD_VAR 0 1
73409: RET
// export function PrepareApemanEngineer ( ) ; begin
73410: LD_INT 0
73412: PPUSH
// uc_nation := 0 ;
73413: LD_ADDR_OWVAR 21
73417: PUSH
73418: LD_INT 0
73420: ST_TO_ADDR
// hc_sex := sex_male ;
73421: LD_ADDR_OWVAR 27
73425: PUSH
73426: LD_INT 1
73428: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73429: LD_ADDR_OWVAR 28
73433: PUSH
73434: LD_INT 16
73436: ST_TO_ADDR
// hc_gallery :=  ;
73437: LD_ADDR_OWVAR 33
73441: PUSH
73442: LD_STRING 
73444: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73445: LD_ADDR_OWVAR 31
73449: PUSH
73450: LD_INT 0
73452: PPUSH
73453: LD_INT 3
73455: PPUSH
73456: CALL_OW 12
73460: PUSH
73461: LD_INT 0
73463: PPUSH
73464: LD_INT 3
73466: PPUSH
73467: CALL_OW 12
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: LD_INT 0
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: ST_TO_ADDR
// end ;
73484: LD_VAR 0 1
73488: RET
// export function PrepareApeman ( agressivity ) ; begin
73489: LD_INT 0
73491: PPUSH
// uc_side := 0 ;
73492: LD_ADDR_OWVAR 20
73496: PUSH
73497: LD_INT 0
73499: ST_TO_ADDR
// uc_nation := 0 ;
73500: LD_ADDR_OWVAR 21
73504: PUSH
73505: LD_INT 0
73507: ST_TO_ADDR
// hc_sex := sex_male ;
73508: LD_ADDR_OWVAR 27
73512: PUSH
73513: LD_INT 1
73515: ST_TO_ADDR
// hc_class := class_apeman ;
73516: LD_ADDR_OWVAR 28
73520: PUSH
73521: LD_INT 12
73523: ST_TO_ADDR
// hc_gallery :=  ;
73524: LD_ADDR_OWVAR 33
73528: PUSH
73529: LD_STRING 
73531: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73532: LD_ADDR_OWVAR 35
73536: PUSH
73537: LD_VAR 0 1
73541: NEG
73542: PPUSH
73543: LD_VAR 0 1
73547: PPUSH
73548: CALL_OW 12
73552: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73553: LD_ADDR_OWVAR 31
73557: PUSH
73558: LD_INT 0
73560: PPUSH
73561: LD_INT 3
73563: PPUSH
73564: CALL_OW 12
73568: PUSH
73569: LD_INT 0
73571: PPUSH
73572: LD_INT 3
73574: PPUSH
73575: CALL_OW 12
73579: PUSH
73580: LD_INT 0
73582: PUSH
73583: LD_INT 0
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: ST_TO_ADDR
// end ;
73592: LD_VAR 0 2
73596: RET
// export function PrepareTiger ( agressivity ) ; begin
73597: LD_INT 0
73599: PPUSH
// uc_side := 0 ;
73600: LD_ADDR_OWVAR 20
73604: PUSH
73605: LD_INT 0
73607: ST_TO_ADDR
// uc_nation := 0 ;
73608: LD_ADDR_OWVAR 21
73612: PUSH
73613: LD_INT 0
73615: ST_TO_ADDR
// hc_class := class_tiger ;
73616: LD_ADDR_OWVAR 28
73620: PUSH
73621: LD_INT 14
73623: ST_TO_ADDR
// hc_gallery :=  ;
73624: LD_ADDR_OWVAR 33
73628: PUSH
73629: LD_STRING 
73631: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73632: LD_ADDR_OWVAR 35
73636: PUSH
73637: LD_VAR 0 1
73641: NEG
73642: PPUSH
73643: LD_VAR 0 1
73647: PPUSH
73648: CALL_OW 12
73652: ST_TO_ADDR
// end ;
73653: LD_VAR 0 2
73657: RET
// export function PrepareEnchidna ( ) ; begin
73658: LD_INT 0
73660: PPUSH
// uc_side := 0 ;
73661: LD_ADDR_OWVAR 20
73665: PUSH
73666: LD_INT 0
73668: ST_TO_ADDR
// uc_nation := 0 ;
73669: LD_ADDR_OWVAR 21
73673: PUSH
73674: LD_INT 0
73676: ST_TO_ADDR
// hc_class := class_baggie ;
73677: LD_ADDR_OWVAR 28
73681: PUSH
73682: LD_INT 13
73684: ST_TO_ADDR
// hc_gallery :=  ;
73685: LD_ADDR_OWVAR 33
73689: PUSH
73690: LD_STRING 
73692: ST_TO_ADDR
// end ;
73693: LD_VAR 0 1
73697: RET
// export function PrepareFrog ( ) ; begin
73698: LD_INT 0
73700: PPUSH
// uc_side := 0 ;
73701: LD_ADDR_OWVAR 20
73705: PUSH
73706: LD_INT 0
73708: ST_TO_ADDR
// uc_nation := 0 ;
73709: LD_ADDR_OWVAR 21
73713: PUSH
73714: LD_INT 0
73716: ST_TO_ADDR
// hc_class := class_frog ;
73717: LD_ADDR_OWVAR 28
73721: PUSH
73722: LD_INT 19
73724: ST_TO_ADDR
// hc_gallery :=  ;
73725: LD_ADDR_OWVAR 33
73729: PUSH
73730: LD_STRING 
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 1
73737: RET
// export function PrepareFish ( ) ; begin
73738: LD_INT 0
73740: PPUSH
// uc_side := 0 ;
73741: LD_ADDR_OWVAR 20
73745: PUSH
73746: LD_INT 0
73748: ST_TO_ADDR
// uc_nation := 0 ;
73749: LD_ADDR_OWVAR 21
73753: PUSH
73754: LD_INT 0
73756: ST_TO_ADDR
// hc_class := class_fish ;
73757: LD_ADDR_OWVAR 28
73761: PUSH
73762: LD_INT 20
73764: ST_TO_ADDR
// hc_gallery :=  ;
73765: LD_ADDR_OWVAR 33
73769: PUSH
73770: LD_STRING 
73772: ST_TO_ADDR
// end ;
73773: LD_VAR 0 1
73777: RET
// export function PrepareBird ( ) ; begin
73778: LD_INT 0
73780: PPUSH
// uc_side := 0 ;
73781: LD_ADDR_OWVAR 20
73785: PUSH
73786: LD_INT 0
73788: ST_TO_ADDR
// uc_nation := 0 ;
73789: LD_ADDR_OWVAR 21
73793: PUSH
73794: LD_INT 0
73796: ST_TO_ADDR
// hc_class := class_phororhacos ;
73797: LD_ADDR_OWVAR 28
73801: PUSH
73802: LD_INT 18
73804: ST_TO_ADDR
// hc_gallery :=  ;
73805: LD_ADDR_OWVAR 33
73809: PUSH
73810: LD_STRING 
73812: ST_TO_ADDR
// end ;
73813: LD_VAR 0 1
73817: RET
// export function PrepareHorse ( ) ; begin
73818: LD_INT 0
73820: PPUSH
// uc_side := 0 ;
73821: LD_ADDR_OWVAR 20
73825: PUSH
73826: LD_INT 0
73828: ST_TO_ADDR
// uc_nation := 0 ;
73829: LD_ADDR_OWVAR 21
73833: PUSH
73834: LD_INT 0
73836: ST_TO_ADDR
// hc_class := class_horse ;
73837: LD_ADDR_OWVAR 28
73841: PUSH
73842: LD_INT 21
73844: ST_TO_ADDR
// hc_gallery :=  ;
73845: LD_ADDR_OWVAR 33
73849: PUSH
73850: LD_STRING 
73852: ST_TO_ADDR
// end ;
73853: LD_VAR 0 1
73857: RET
// export function PrepareMastodont ( ) ; begin
73858: LD_INT 0
73860: PPUSH
// uc_side := 0 ;
73861: LD_ADDR_OWVAR 20
73865: PUSH
73866: LD_INT 0
73868: ST_TO_ADDR
// uc_nation := 0 ;
73869: LD_ADDR_OWVAR 21
73873: PUSH
73874: LD_INT 0
73876: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73877: LD_ADDR_OWVAR 37
73881: PUSH
73882: LD_INT 31
73884: ST_TO_ADDR
// vc_control := control_rider ;
73885: LD_ADDR_OWVAR 38
73889: PUSH
73890: LD_INT 4
73892: ST_TO_ADDR
// end ;
73893: LD_VAR 0 1
73897: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73898: LD_INT 0
73900: PPUSH
73901: PPUSH
73902: PPUSH
// uc_side = 0 ;
73903: LD_ADDR_OWVAR 20
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// uc_nation = 0 ;
73911: LD_ADDR_OWVAR 21
73915: PUSH
73916: LD_INT 0
73918: ST_TO_ADDR
// InitHc_All ( ) ;
73919: CALL_OW 584
// InitVc ;
73923: CALL_OW 20
// if mastodonts then
73927: LD_VAR 0 6
73931: IFFALSE 73998
// for i = 1 to mastodonts do
73933: LD_ADDR_VAR 0 11
73937: PUSH
73938: DOUBLE
73939: LD_INT 1
73941: DEC
73942: ST_TO_ADDR
73943: LD_VAR 0 6
73947: PUSH
73948: FOR_TO
73949: IFFALSE 73996
// begin vc_chassis := 31 ;
73951: LD_ADDR_OWVAR 37
73955: PUSH
73956: LD_INT 31
73958: ST_TO_ADDR
// vc_control := control_rider ;
73959: LD_ADDR_OWVAR 38
73963: PUSH
73964: LD_INT 4
73966: ST_TO_ADDR
// animal := CreateVehicle ;
73967: LD_ADDR_VAR 0 12
73971: PUSH
73972: CALL_OW 45
73976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73977: LD_VAR 0 12
73981: PPUSH
73982: LD_VAR 0 8
73986: PPUSH
73987: LD_INT 0
73989: PPUSH
73990: CALL 76126 0 3
// end ;
73994: GO 73948
73996: POP
73997: POP
// if horses then
73998: LD_VAR 0 5
74002: IFFALSE 74069
// for i = 1 to horses do
74004: LD_ADDR_VAR 0 11
74008: PUSH
74009: DOUBLE
74010: LD_INT 1
74012: DEC
74013: ST_TO_ADDR
74014: LD_VAR 0 5
74018: PUSH
74019: FOR_TO
74020: IFFALSE 74067
// begin hc_class := 21 ;
74022: LD_ADDR_OWVAR 28
74026: PUSH
74027: LD_INT 21
74029: ST_TO_ADDR
// hc_gallery :=  ;
74030: LD_ADDR_OWVAR 33
74034: PUSH
74035: LD_STRING 
74037: ST_TO_ADDR
// animal := CreateHuman ;
74038: LD_ADDR_VAR 0 12
74042: PUSH
74043: CALL_OW 44
74047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74048: LD_VAR 0 12
74052: PPUSH
74053: LD_VAR 0 8
74057: PPUSH
74058: LD_INT 0
74060: PPUSH
74061: CALL 76126 0 3
// end ;
74065: GO 74019
74067: POP
74068: POP
// if birds then
74069: LD_VAR 0 1
74073: IFFALSE 74140
// for i = 1 to birds do
74075: LD_ADDR_VAR 0 11
74079: PUSH
74080: DOUBLE
74081: LD_INT 1
74083: DEC
74084: ST_TO_ADDR
74085: LD_VAR 0 1
74089: PUSH
74090: FOR_TO
74091: IFFALSE 74138
// begin hc_class = 18 ;
74093: LD_ADDR_OWVAR 28
74097: PUSH
74098: LD_INT 18
74100: ST_TO_ADDR
// hc_gallery =  ;
74101: LD_ADDR_OWVAR 33
74105: PUSH
74106: LD_STRING 
74108: ST_TO_ADDR
// animal := CreateHuman ;
74109: LD_ADDR_VAR 0 12
74113: PUSH
74114: CALL_OW 44
74118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74119: LD_VAR 0 12
74123: PPUSH
74124: LD_VAR 0 8
74128: PPUSH
74129: LD_INT 0
74131: PPUSH
74132: CALL 76126 0 3
// end ;
74136: GO 74090
74138: POP
74139: POP
// if tigers then
74140: LD_VAR 0 2
74144: IFFALSE 74228
// for i = 1 to tigers do
74146: LD_ADDR_VAR 0 11
74150: PUSH
74151: DOUBLE
74152: LD_INT 1
74154: DEC
74155: ST_TO_ADDR
74156: LD_VAR 0 2
74160: PUSH
74161: FOR_TO
74162: IFFALSE 74226
// begin hc_class = class_tiger ;
74164: LD_ADDR_OWVAR 28
74168: PUSH
74169: LD_INT 14
74171: ST_TO_ADDR
// hc_gallery =  ;
74172: LD_ADDR_OWVAR 33
74176: PUSH
74177: LD_STRING 
74179: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74180: LD_ADDR_OWVAR 35
74184: PUSH
74185: LD_INT 7
74187: NEG
74188: PPUSH
74189: LD_INT 7
74191: PPUSH
74192: CALL_OW 12
74196: ST_TO_ADDR
// animal := CreateHuman ;
74197: LD_ADDR_VAR 0 12
74201: PUSH
74202: CALL_OW 44
74206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74207: LD_VAR 0 12
74211: PPUSH
74212: LD_VAR 0 8
74216: PPUSH
74217: LD_INT 0
74219: PPUSH
74220: CALL 76126 0 3
// end ;
74224: GO 74161
74226: POP
74227: POP
// if apemans then
74228: LD_VAR 0 3
74232: IFFALSE 74355
// for i = 1 to apemans do
74234: LD_ADDR_VAR 0 11
74238: PUSH
74239: DOUBLE
74240: LD_INT 1
74242: DEC
74243: ST_TO_ADDR
74244: LD_VAR 0 3
74248: PUSH
74249: FOR_TO
74250: IFFALSE 74353
// begin hc_class = class_apeman ;
74252: LD_ADDR_OWVAR 28
74256: PUSH
74257: LD_INT 12
74259: ST_TO_ADDR
// hc_gallery =  ;
74260: LD_ADDR_OWVAR 33
74264: PUSH
74265: LD_STRING 
74267: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74268: LD_ADDR_OWVAR 35
74272: PUSH
74273: LD_INT 2
74275: NEG
74276: PPUSH
74277: LD_INT 2
74279: PPUSH
74280: CALL_OW 12
74284: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74285: LD_ADDR_OWVAR 31
74289: PUSH
74290: LD_INT 1
74292: PPUSH
74293: LD_INT 3
74295: PPUSH
74296: CALL_OW 12
74300: PUSH
74301: LD_INT 1
74303: PPUSH
74304: LD_INT 3
74306: PPUSH
74307: CALL_OW 12
74311: PUSH
74312: LD_INT 0
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: ST_TO_ADDR
// animal := CreateHuman ;
74324: LD_ADDR_VAR 0 12
74328: PUSH
74329: CALL_OW 44
74333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74334: LD_VAR 0 12
74338: PPUSH
74339: LD_VAR 0 8
74343: PPUSH
74344: LD_INT 0
74346: PPUSH
74347: CALL 76126 0 3
// end ;
74351: GO 74249
74353: POP
74354: POP
// if enchidnas then
74355: LD_VAR 0 4
74359: IFFALSE 74426
// for i = 1 to enchidnas do
74361: LD_ADDR_VAR 0 11
74365: PUSH
74366: DOUBLE
74367: LD_INT 1
74369: DEC
74370: ST_TO_ADDR
74371: LD_VAR 0 4
74375: PUSH
74376: FOR_TO
74377: IFFALSE 74424
// begin hc_class = 13 ;
74379: LD_ADDR_OWVAR 28
74383: PUSH
74384: LD_INT 13
74386: ST_TO_ADDR
// hc_gallery =  ;
74387: LD_ADDR_OWVAR 33
74391: PUSH
74392: LD_STRING 
74394: ST_TO_ADDR
// animal := CreateHuman ;
74395: LD_ADDR_VAR 0 12
74399: PUSH
74400: CALL_OW 44
74404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74405: LD_VAR 0 12
74409: PPUSH
74410: LD_VAR 0 8
74414: PPUSH
74415: LD_INT 0
74417: PPUSH
74418: CALL 76126 0 3
// end ;
74422: GO 74376
74424: POP
74425: POP
// if fishes then
74426: LD_VAR 0 7
74430: IFFALSE 74497
// for i = 1 to fishes do
74432: LD_ADDR_VAR 0 11
74436: PUSH
74437: DOUBLE
74438: LD_INT 1
74440: DEC
74441: ST_TO_ADDR
74442: LD_VAR 0 7
74446: PUSH
74447: FOR_TO
74448: IFFALSE 74495
// begin hc_class = 20 ;
74450: LD_ADDR_OWVAR 28
74454: PUSH
74455: LD_INT 20
74457: ST_TO_ADDR
// hc_gallery =  ;
74458: LD_ADDR_OWVAR 33
74462: PUSH
74463: LD_STRING 
74465: ST_TO_ADDR
// animal := CreateHuman ;
74466: LD_ADDR_VAR 0 12
74470: PUSH
74471: CALL_OW 44
74475: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74476: LD_VAR 0 12
74480: PPUSH
74481: LD_VAR 0 9
74485: PPUSH
74486: LD_INT 0
74488: PPUSH
74489: CALL 76126 0 3
// end ;
74493: GO 74447
74495: POP
74496: POP
// end ;
74497: LD_VAR 0 10
74501: RET
// export function WantHeal ( sci , unit ) ; begin
74502: LD_INT 0
74504: PPUSH
// if GetTaskList ( sci ) > 0 then
74505: LD_VAR 0 1
74509: PPUSH
74510: CALL_OW 437
74514: PUSH
74515: LD_INT 0
74517: GREATER
74518: IFFALSE 74588
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74520: LD_VAR 0 1
74524: PPUSH
74525: CALL_OW 437
74529: PUSH
74530: LD_INT 1
74532: ARRAY
74533: PUSH
74534: LD_INT 1
74536: ARRAY
74537: PUSH
74538: LD_STRING l
74540: EQUAL
74541: PUSH
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 437
74551: PUSH
74552: LD_INT 1
74554: ARRAY
74555: PUSH
74556: LD_INT 4
74558: ARRAY
74559: PUSH
74560: LD_VAR 0 2
74564: EQUAL
74565: AND
74566: IFFALSE 74578
// result := true else
74568: LD_ADDR_VAR 0 3
74572: PUSH
74573: LD_INT 1
74575: ST_TO_ADDR
74576: GO 74586
// result := false ;
74578: LD_ADDR_VAR 0 3
74582: PUSH
74583: LD_INT 0
74585: ST_TO_ADDR
// end else
74586: GO 74596
// result := false ;
74588: LD_ADDR_VAR 0 3
74592: PUSH
74593: LD_INT 0
74595: ST_TO_ADDR
// end ;
74596: LD_VAR 0 3
74600: RET
// export function HealTarget ( sci ) ; begin
74601: LD_INT 0
74603: PPUSH
// if not sci then
74604: LD_VAR 0 1
74608: NOT
74609: IFFALSE 74613
// exit ;
74611: GO 74678
// result := 0 ;
74613: LD_ADDR_VAR 0 2
74617: PUSH
74618: LD_INT 0
74620: ST_TO_ADDR
// if GetTaskList ( sci ) then
74621: LD_VAR 0 1
74625: PPUSH
74626: CALL_OW 437
74630: IFFALSE 74678
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74632: LD_VAR 0 1
74636: PPUSH
74637: CALL_OW 437
74641: PUSH
74642: LD_INT 1
74644: ARRAY
74645: PUSH
74646: LD_INT 1
74648: ARRAY
74649: PUSH
74650: LD_STRING l
74652: EQUAL
74653: IFFALSE 74678
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74655: LD_ADDR_VAR 0 2
74659: PUSH
74660: LD_VAR 0 1
74664: PPUSH
74665: CALL_OW 437
74669: PUSH
74670: LD_INT 1
74672: ARRAY
74673: PUSH
74674: LD_INT 4
74676: ARRAY
74677: ST_TO_ADDR
// end ;
74678: LD_VAR 0 2
74682: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74683: LD_INT 0
74685: PPUSH
74686: PPUSH
74687: PPUSH
74688: PPUSH
// if not base_units then
74689: LD_VAR 0 1
74693: NOT
74694: IFFALSE 74698
// exit ;
74696: GO 74785
// result := false ;
74698: LD_ADDR_VAR 0 2
74702: PUSH
74703: LD_INT 0
74705: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74706: LD_ADDR_VAR 0 5
74710: PUSH
74711: LD_VAR 0 1
74715: PPUSH
74716: LD_INT 21
74718: PUSH
74719: LD_INT 3
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PPUSH
74726: CALL_OW 72
74730: ST_TO_ADDR
// if not tmp then
74731: LD_VAR 0 5
74735: NOT
74736: IFFALSE 74740
// exit ;
74738: GO 74785
// for i in tmp do
74740: LD_ADDR_VAR 0 3
74744: PUSH
74745: LD_VAR 0 5
74749: PUSH
74750: FOR_IN
74751: IFFALSE 74783
// begin result := EnemyInRange ( i , 22 ) ;
74753: LD_ADDR_VAR 0 2
74757: PUSH
74758: LD_VAR 0 3
74762: PPUSH
74763: LD_INT 22
74765: PPUSH
74766: CALL 72372 0 2
74770: ST_TO_ADDR
// if result then
74771: LD_VAR 0 2
74775: IFFALSE 74781
// exit ;
74777: POP
74778: POP
74779: GO 74785
// end ;
74781: GO 74750
74783: POP
74784: POP
// end ;
74785: LD_VAR 0 2
74789: RET
// export function FilterByTag ( units , tag ) ; begin
74790: LD_INT 0
74792: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74793: LD_ADDR_VAR 0 3
74797: PUSH
74798: LD_VAR 0 1
74802: PPUSH
74803: LD_INT 120
74805: PUSH
74806: LD_VAR 0 2
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PPUSH
74815: CALL_OW 72
74819: ST_TO_ADDR
// end ;
74820: LD_VAR 0 3
74824: RET
// export function IsDriver ( un ) ; begin
74825: LD_INT 0
74827: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74828: LD_ADDR_VAR 0 2
74832: PUSH
74833: LD_VAR 0 1
74837: PUSH
74838: LD_INT 55
74840: PUSH
74841: EMPTY
74842: LIST
74843: PPUSH
74844: CALL_OW 69
74848: IN
74849: ST_TO_ADDR
// end ;
74850: LD_VAR 0 2
74854: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74855: LD_INT 0
74857: PPUSH
74858: PPUSH
// list := [ ] ;
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: EMPTY
74865: ST_TO_ADDR
// case d of 0 :
74866: LD_VAR 0 3
74870: PUSH
74871: LD_INT 0
74873: DOUBLE
74874: EQUAL
74875: IFTRUE 74879
74877: GO 75012
74879: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74880: LD_ADDR_VAR 0 5
74884: PUSH
74885: LD_VAR 0 1
74889: PUSH
74890: LD_INT 4
74892: MINUS
74893: PUSH
74894: LD_VAR 0 2
74898: PUSH
74899: LD_INT 4
74901: MINUS
74902: PUSH
74903: LD_INT 2
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: LIST
74910: PUSH
74911: LD_VAR 0 1
74915: PUSH
74916: LD_INT 3
74918: MINUS
74919: PUSH
74920: LD_VAR 0 2
74924: PUSH
74925: LD_INT 1
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: LIST
74932: PUSH
74933: LD_VAR 0 1
74937: PUSH
74938: LD_INT 4
74940: PLUS
74941: PUSH
74942: LD_VAR 0 2
74946: PUSH
74947: LD_INT 4
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: LIST
74954: PUSH
74955: LD_VAR 0 1
74959: PUSH
74960: LD_INT 3
74962: PLUS
74963: PUSH
74964: LD_VAR 0 2
74968: PUSH
74969: LD_INT 3
74971: PLUS
74972: PUSH
74973: LD_INT 5
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: LIST
74980: PUSH
74981: LD_VAR 0 1
74985: PUSH
74986: LD_VAR 0 2
74990: PUSH
74991: LD_INT 4
74993: PLUS
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: ST_TO_ADDR
// end ; 1 :
75010: GO 75710
75012: LD_INT 1
75014: DOUBLE
75015: EQUAL
75016: IFTRUE 75020
75018: GO 75153
75020: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75021: LD_ADDR_VAR 0 5
75025: PUSH
75026: LD_VAR 0 1
75030: PUSH
75031: LD_VAR 0 2
75035: PUSH
75036: LD_INT 4
75038: MINUS
75039: PUSH
75040: LD_INT 3
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: LIST
75047: PUSH
75048: LD_VAR 0 1
75052: PUSH
75053: LD_INT 3
75055: MINUS
75056: PUSH
75057: LD_VAR 0 2
75061: PUSH
75062: LD_INT 3
75064: MINUS
75065: PUSH
75066: LD_INT 2
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: PUSH
75074: LD_VAR 0 1
75078: PUSH
75079: LD_INT 4
75081: MINUS
75082: PUSH
75083: LD_VAR 0 2
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: LIST
75095: PUSH
75096: LD_VAR 0 1
75100: PUSH
75101: LD_VAR 0 2
75105: PUSH
75106: LD_INT 3
75108: PLUS
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: LD_VAR 0 1
75122: PUSH
75123: LD_INT 4
75125: PLUS
75126: PUSH
75127: LD_VAR 0 2
75131: PUSH
75132: LD_INT 4
75134: PLUS
75135: PUSH
75136: LD_INT 5
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: LIST
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: ST_TO_ADDR
// end ; 2 :
75151: GO 75710
75153: LD_INT 2
75155: DOUBLE
75156: EQUAL
75157: IFTRUE 75161
75159: GO 75290
75161: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75162: LD_ADDR_VAR 0 5
75166: PUSH
75167: LD_VAR 0 1
75171: PUSH
75172: LD_VAR 0 2
75176: PUSH
75177: LD_INT 3
75179: MINUS
75180: PUSH
75181: LD_INT 3
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: LIST
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_INT 4
75196: PLUS
75197: PUSH
75198: LD_VAR 0 2
75202: PUSH
75203: LD_INT 4
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: PUSH
75211: LD_VAR 0 1
75215: PUSH
75216: LD_VAR 0 2
75220: PUSH
75221: LD_INT 4
75223: PLUS
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: LIST
75232: PUSH
75233: LD_VAR 0 1
75237: PUSH
75238: LD_INT 3
75240: MINUS
75241: PUSH
75242: LD_VAR 0 2
75246: PUSH
75247: LD_INT 1
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: PUSH
75255: LD_VAR 0 1
75259: PUSH
75260: LD_INT 4
75262: MINUS
75263: PUSH
75264: LD_VAR 0 2
75268: PUSH
75269: LD_INT 4
75271: MINUS
75272: PUSH
75273: LD_INT 2
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: ST_TO_ADDR
// end ; 3 :
75288: GO 75710
75290: LD_INT 3
75292: DOUBLE
75293: EQUAL
75294: IFTRUE 75298
75296: GO 75431
75298: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75299: LD_ADDR_VAR 0 5
75303: PUSH
75304: LD_VAR 0 1
75308: PUSH
75309: LD_INT 3
75311: PLUS
75312: PUSH
75313: LD_VAR 0 2
75317: PUSH
75318: LD_INT 4
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: LIST
75325: PUSH
75326: LD_VAR 0 1
75330: PUSH
75331: LD_INT 4
75333: PLUS
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: LD_INT 4
75342: PLUS
75343: PUSH
75344: LD_INT 5
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: LIST
75351: PUSH
75352: LD_VAR 0 1
75356: PUSH
75357: LD_INT 4
75359: MINUS
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: LIST
75373: PUSH
75374: LD_VAR 0 1
75378: PUSH
75379: LD_VAR 0 2
75383: PUSH
75384: LD_INT 4
75386: MINUS
75387: PUSH
75388: LD_INT 3
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: PUSH
75396: LD_VAR 0 1
75400: PUSH
75401: LD_INT 3
75403: MINUS
75404: PUSH
75405: LD_VAR 0 2
75409: PUSH
75410: LD_INT 3
75412: MINUS
75413: PUSH
75414: LD_INT 2
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: ST_TO_ADDR
// end ; 4 :
75429: GO 75710
75431: LD_INT 4
75433: DOUBLE
75434: EQUAL
75435: IFTRUE 75439
75437: GO 75572
75439: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75440: LD_ADDR_VAR 0 5
75444: PUSH
75445: LD_VAR 0 1
75449: PUSH
75450: LD_VAR 0 2
75454: PUSH
75455: LD_INT 4
75457: PLUS
75458: PUSH
75459: LD_INT 0
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: LIST
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 3
75474: PLUS
75475: PUSH
75476: LD_VAR 0 2
75480: PUSH
75481: LD_INT 3
75483: PLUS
75484: PUSH
75485: LD_INT 5
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: LIST
75492: PUSH
75493: LD_VAR 0 1
75497: PUSH
75498: LD_INT 4
75500: PLUS
75501: PUSH
75502: LD_VAR 0 2
75506: PUSH
75507: LD_INT 4
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: LIST
75514: PUSH
75515: LD_VAR 0 1
75519: PUSH
75520: LD_VAR 0 2
75524: PUSH
75525: LD_INT 3
75527: MINUS
75528: PUSH
75529: LD_INT 3
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: PUSH
75537: LD_VAR 0 1
75541: PUSH
75542: LD_INT 4
75544: MINUS
75545: PUSH
75546: LD_VAR 0 2
75550: PUSH
75551: LD_INT 4
75553: MINUS
75554: PUSH
75555: LD_INT 2
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: LIST
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: ST_TO_ADDR
// end ; 5 :
75570: GO 75710
75572: LD_INT 5
75574: DOUBLE
75575: EQUAL
75576: IFTRUE 75580
75578: GO 75709
75580: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75581: LD_ADDR_VAR 0 5
75585: PUSH
75586: LD_VAR 0 1
75590: PUSH
75591: LD_INT 4
75593: MINUS
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 1
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: LIST
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: LD_VAR 0 2
75617: PUSH
75618: LD_INT 4
75620: MINUS
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: PUSH
75630: LD_VAR 0 1
75634: PUSH
75635: LD_INT 4
75637: PLUS
75638: PUSH
75639: LD_VAR 0 2
75643: PUSH
75644: LD_INT 4
75646: PLUS
75647: PUSH
75648: LD_INT 5
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: PUSH
75656: LD_VAR 0 1
75660: PUSH
75661: LD_INT 3
75663: PLUS
75664: PUSH
75665: LD_VAR 0 2
75669: PUSH
75670: LD_INT 4
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: PUSH
75678: LD_VAR 0 1
75682: PUSH
75683: LD_VAR 0 2
75687: PUSH
75688: LD_INT 3
75690: PLUS
75691: PUSH
75692: LD_INT 0
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: LIST
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: ST_TO_ADDR
// end ; end ;
75707: GO 75710
75709: POP
// result := list ;
75710: LD_ADDR_VAR 0 4
75714: PUSH
75715: LD_VAR 0 5
75719: ST_TO_ADDR
// end ;
75720: LD_VAR 0 4
75724: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75725: LD_INT 0
75727: PPUSH
75728: PPUSH
75729: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75730: LD_VAR 0 1
75734: NOT
75735: PUSH
75736: LD_VAR 0 2
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: LD_INT 2
75746: PUSH
75747: LD_INT 3
75749: PUSH
75750: LD_INT 4
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: IN
75759: NOT
75760: OR
75761: IFFALSE 75765
// exit ;
75763: GO 75848
// tmp := [ ] ;
75765: LD_ADDR_VAR 0 5
75769: PUSH
75770: EMPTY
75771: ST_TO_ADDR
// for i in units do
75772: LD_ADDR_VAR 0 4
75776: PUSH
75777: LD_VAR 0 1
75781: PUSH
75782: FOR_IN
75783: IFFALSE 75817
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75785: LD_ADDR_VAR 0 5
75789: PUSH
75790: LD_VAR 0 5
75794: PPUSH
75795: LD_VAR 0 4
75799: PPUSH
75800: LD_VAR 0 2
75804: PPUSH
75805: CALL_OW 259
75809: PPUSH
75810: CALL 77209 0 2
75814: ST_TO_ADDR
75815: GO 75782
75817: POP
75818: POP
// if not tmp then
75819: LD_VAR 0 5
75823: NOT
75824: IFFALSE 75828
// exit ;
75826: GO 75848
// result := SortListByListDesc ( units , tmp ) ;
75828: LD_ADDR_VAR 0 3
75832: PUSH
75833: LD_VAR 0 1
75837: PPUSH
75838: LD_VAR 0 5
75842: PPUSH
75843: CALL_OW 77
75847: ST_TO_ADDR
// end ;
75848: LD_VAR 0 3
75852: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75853: LD_INT 0
75855: PPUSH
75856: PPUSH
75857: PPUSH
// result := false ;
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: LD_INT 0
75865: ST_TO_ADDR
// if not building then
75866: LD_VAR 0 2
75870: NOT
75871: IFFALSE 75875
// exit ;
75873: GO 76013
// x := GetX ( building ) ;
75875: LD_ADDR_VAR 0 4
75879: PUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: CALL_OW 250
75889: ST_TO_ADDR
// y := GetY ( building ) ;
75890: LD_ADDR_VAR 0 5
75894: PUSH
75895: LD_VAR 0 2
75899: PPUSH
75900: CALL_OW 251
75904: ST_TO_ADDR
// if not x or not y then
75905: LD_VAR 0 4
75909: NOT
75910: PUSH
75911: LD_VAR 0 5
75915: NOT
75916: OR
75917: IFFALSE 75921
// exit ;
75919: GO 76013
// if GetTaskList ( unit ) then
75921: LD_VAR 0 1
75925: PPUSH
75926: CALL_OW 437
75930: IFFALSE 76013
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75932: LD_STRING e
75934: PUSH
75935: LD_VAR 0 1
75939: PPUSH
75940: CALL_OW 437
75944: PUSH
75945: LD_INT 1
75947: ARRAY
75948: PUSH
75949: LD_INT 1
75951: ARRAY
75952: EQUAL
75953: PUSH
75954: LD_VAR 0 4
75958: PUSH
75959: LD_VAR 0 1
75963: PPUSH
75964: CALL_OW 437
75968: PUSH
75969: LD_INT 1
75971: ARRAY
75972: PUSH
75973: LD_INT 2
75975: ARRAY
75976: EQUAL
75977: AND
75978: PUSH
75979: LD_VAR 0 5
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: CALL_OW 437
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PUSH
75998: LD_INT 3
76000: ARRAY
76001: EQUAL
76002: AND
76003: IFFALSE 76013
// result := true end ;
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_INT 1
76012: ST_TO_ADDR
// end ;
76013: LD_VAR 0 3
76017: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76018: LD_INT 0
76020: PPUSH
// result := false ;
76021: LD_ADDR_VAR 0 4
76025: PUSH
76026: LD_INT 0
76028: ST_TO_ADDR
// if GetTaskList ( unit ) then
76029: LD_VAR 0 1
76033: PPUSH
76034: CALL_OW 437
76038: IFFALSE 76121
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76040: LD_STRING M
76042: PUSH
76043: LD_VAR 0 1
76047: PPUSH
76048: CALL_OW 437
76052: PUSH
76053: LD_INT 1
76055: ARRAY
76056: PUSH
76057: LD_INT 1
76059: ARRAY
76060: EQUAL
76061: PUSH
76062: LD_VAR 0 2
76066: PUSH
76067: LD_VAR 0 1
76071: PPUSH
76072: CALL_OW 437
76076: PUSH
76077: LD_INT 1
76079: ARRAY
76080: PUSH
76081: LD_INT 2
76083: ARRAY
76084: EQUAL
76085: AND
76086: PUSH
76087: LD_VAR 0 3
76091: PUSH
76092: LD_VAR 0 1
76096: PPUSH
76097: CALL_OW 437
76101: PUSH
76102: LD_INT 1
76104: ARRAY
76105: PUSH
76106: LD_INT 3
76108: ARRAY
76109: EQUAL
76110: AND
76111: IFFALSE 76121
// result := true ;
76113: LD_ADDR_VAR 0 4
76117: PUSH
76118: LD_INT 1
76120: ST_TO_ADDR
// end ; end ;
76121: LD_VAR 0 4
76125: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76126: LD_INT 0
76128: PPUSH
76129: PPUSH
76130: PPUSH
76131: PPUSH
// if not unit or not area then
76132: LD_VAR 0 1
76136: NOT
76137: PUSH
76138: LD_VAR 0 2
76142: NOT
76143: OR
76144: IFFALSE 76148
// exit ;
76146: GO 76312
// tmp := AreaToList ( area , i ) ;
76148: LD_ADDR_VAR 0 6
76152: PUSH
76153: LD_VAR 0 2
76157: PPUSH
76158: LD_VAR 0 5
76162: PPUSH
76163: CALL_OW 517
76167: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76168: LD_ADDR_VAR 0 5
76172: PUSH
76173: DOUBLE
76174: LD_INT 1
76176: DEC
76177: ST_TO_ADDR
76178: LD_VAR 0 6
76182: PUSH
76183: LD_INT 1
76185: ARRAY
76186: PUSH
76187: FOR_TO
76188: IFFALSE 76310
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76190: LD_ADDR_VAR 0 7
76194: PUSH
76195: LD_VAR 0 6
76199: PUSH
76200: LD_INT 1
76202: ARRAY
76203: PUSH
76204: LD_VAR 0 5
76208: ARRAY
76209: PUSH
76210: LD_VAR 0 6
76214: PUSH
76215: LD_INT 2
76217: ARRAY
76218: PUSH
76219: LD_VAR 0 5
76223: ARRAY
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76229: LD_VAR 0 7
76233: PUSH
76234: LD_INT 1
76236: ARRAY
76237: PPUSH
76238: LD_VAR 0 7
76242: PUSH
76243: LD_INT 2
76245: ARRAY
76246: PPUSH
76247: CALL_OW 428
76251: PUSH
76252: LD_INT 0
76254: EQUAL
76255: IFFALSE 76308
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76257: LD_VAR 0 1
76261: PPUSH
76262: LD_VAR 0 7
76266: PUSH
76267: LD_INT 1
76269: ARRAY
76270: PPUSH
76271: LD_VAR 0 7
76275: PUSH
76276: LD_INT 2
76278: ARRAY
76279: PPUSH
76280: LD_VAR 0 3
76284: PPUSH
76285: CALL_OW 48
// result := IsPlaced ( unit ) ;
76289: LD_ADDR_VAR 0 4
76293: PUSH
76294: LD_VAR 0 1
76298: PPUSH
76299: CALL_OW 305
76303: ST_TO_ADDR
// exit ;
76304: POP
76305: POP
76306: GO 76312
// end ; end ;
76308: GO 76187
76310: POP
76311: POP
// end ;
76312: LD_VAR 0 4
76316: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76317: LD_INT 0
76319: PPUSH
76320: PPUSH
76321: PPUSH
// if not side or side > 8 then
76322: LD_VAR 0 1
76326: NOT
76327: PUSH
76328: LD_VAR 0 1
76332: PUSH
76333: LD_INT 8
76335: GREATER
76336: OR
76337: IFFALSE 76341
// exit ;
76339: GO 76528
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76341: LD_ADDR_VAR 0 4
76345: PUSH
76346: LD_INT 22
76348: PUSH
76349: LD_VAR 0 1
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 21
76360: PUSH
76361: LD_INT 3
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PPUSH
76372: CALL_OW 69
76376: ST_TO_ADDR
// if not tmp then
76377: LD_VAR 0 4
76381: NOT
76382: IFFALSE 76386
// exit ;
76384: GO 76528
// enable_addtolog := true ;
76386: LD_ADDR_OWVAR 81
76390: PUSH
76391: LD_INT 1
76393: ST_TO_ADDR
// AddToLog ( [ ) ;
76394: LD_STRING [
76396: PPUSH
76397: CALL_OW 561
// for i in tmp do
76401: LD_ADDR_VAR 0 3
76405: PUSH
76406: LD_VAR 0 4
76410: PUSH
76411: FOR_IN
76412: IFFALSE 76519
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76414: LD_STRING [
76416: PUSH
76417: LD_VAR 0 3
76421: PPUSH
76422: CALL_OW 266
76426: STR
76427: PUSH
76428: LD_STRING , 
76430: STR
76431: PUSH
76432: LD_VAR 0 3
76436: PPUSH
76437: CALL_OW 250
76441: STR
76442: PUSH
76443: LD_STRING , 
76445: STR
76446: PUSH
76447: LD_VAR 0 3
76451: PPUSH
76452: CALL_OW 251
76456: STR
76457: PUSH
76458: LD_STRING , 
76460: STR
76461: PUSH
76462: LD_VAR 0 3
76466: PPUSH
76467: CALL_OW 254
76471: STR
76472: PUSH
76473: LD_STRING , 
76475: STR
76476: PUSH
76477: LD_VAR 0 3
76481: PPUSH
76482: LD_INT 1
76484: PPUSH
76485: CALL_OW 268
76489: STR
76490: PUSH
76491: LD_STRING , 
76493: STR
76494: PUSH
76495: LD_VAR 0 3
76499: PPUSH
76500: LD_INT 2
76502: PPUSH
76503: CALL_OW 268
76507: STR
76508: PUSH
76509: LD_STRING ],
76511: STR
76512: PPUSH
76513: CALL_OW 561
// end ;
76517: GO 76411
76519: POP
76520: POP
// AddToLog ( ]; ) ;
76521: LD_STRING ];
76523: PPUSH
76524: CALL_OW 561
// end ;
76528: LD_VAR 0 2
76532: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76533: LD_INT 0
76535: PPUSH
76536: PPUSH
76537: PPUSH
76538: PPUSH
76539: PPUSH
// if not area or not rate or not max then
76540: LD_VAR 0 1
76544: NOT
76545: PUSH
76546: LD_VAR 0 2
76550: NOT
76551: OR
76552: PUSH
76553: LD_VAR 0 4
76557: NOT
76558: OR
76559: IFFALSE 76563
// exit ;
76561: GO 76752
// while 1 do
76563: LD_INT 1
76565: IFFALSE 76752
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76567: LD_ADDR_VAR 0 9
76571: PUSH
76572: LD_VAR 0 1
76576: PPUSH
76577: LD_INT 1
76579: PPUSH
76580: CALL_OW 287
76584: PUSH
76585: LD_INT 10
76587: MUL
76588: ST_TO_ADDR
// r := rate / 10 ;
76589: LD_ADDR_VAR 0 7
76593: PUSH
76594: LD_VAR 0 2
76598: PUSH
76599: LD_INT 10
76601: DIVREAL
76602: ST_TO_ADDR
// time := 1 1$00 ;
76603: LD_ADDR_VAR 0 8
76607: PUSH
76608: LD_INT 2100
76610: ST_TO_ADDR
// if amount < min then
76611: LD_VAR 0 9
76615: PUSH
76616: LD_VAR 0 3
76620: LESS
76621: IFFALSE 76639
// r := r * 2 else
76623: LD_ADDR_VAR 0 7
76627: PUSH
76628: LD_VAR 0 7
76632: PUSH
76633: LD_INT 2
76635: MUL
76636: ST_TO_ADDR
76637: GO 76665
// if amount > max then
76639: LD_VAR 0 9
76643: PUSH
76644: LD_VAR 0 4
76648: GREATER
76649: IFFALSE 76665
// r := r / 2 ;
76651: LD_ADDR_VAR 0 7
76655: PUSH
76656: LD_VAR 0 7
76660: PUSH
76661: LD_INT 2
76663: DIVREAL
76664: ST_TO_ADDR
// time := time / r ;
76665: LD_ADDR_VAR 0 8
76669: PUSH
76670: LD_VAR 0 8
76674: PUSH
76675: LD_VAR 0 7
76679: DIVREAL
76680: ST_TO_ADDR
// if time < 0 then
76681: LD_VAR 0 8
76685: PUSH
76686: LD_INT 0
76688: LESS
76689: IFFALSE 76706
// time := time * - 1 ;
76691: LD_ADDR_VAR 0 8
76695: PUSH
76696: LD_VAR 0 8
76700: PUSH
76701: LD_INT 1
76703: NEG
76704: MUL
76705: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76706: LD_VAR 0 8
76710: PUSH
76711: LD_INT 35
76713: PPUSH
76714: LD_INT 875
76716: PPUSH
76717: CALL_OW 12
76721: PLUS
76722: PPUSH
76723: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76727: LD_INT 1
76729: PPUSH
76730: LD_INT 5
76732: PPUSH
76733: CALL_OW 12
76737: PPUSH
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_INT 1
76745: PPUSH
76746: CALL_OW 55
// end ;
76750: GO 76563
// end ;
76752: LD_VAR 0 5
76756: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76757: LD_INT 0
76759: PPUSH
76760: PPUSH
76761: PPUSH
76762: PPUSH
76763: PPUSH
76764: PPUSH
76765: PPUSH
76766: PPUSH
// if not turrets or not factories then
76767: LD_VAR 0 1
76771: NOT
76772: PUSH
76773: LD_VAR 0 2
76777: NOT
76778: OR
76779: IFFALSE 76783
// exit ;
76781: GO 77090
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76783: LD_ADDR_VAR 0 10
76787: PUSH
76788: LD_INT 5
76790: PUSH
76791: LD_INT 6
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 2
76800: PUSH
76801: LD_INT 4
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: LD_INT 3
76810: PUSH
76811: LD_INT 5
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 24
76825: PUSH
76826: LD_INT 25
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 23
76835: PUSH
76836: LD_INT 27
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 42
76849: PUSH
76850: LD_INT 43
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 44
76859: PUSH
76860: LD_INT 46
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 45
76869: PUSH
76870: LD_INT 47
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: LIST
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: LIST
76886: ST_TO_ADDR
// result := [ ] ;
76887: LD_ADDR_VAR 0 3
76891: PUSH
76892: EMPTY
76893: ST_TO_ADDR
// for i in turrets do
76894: LD_ADDR_VAR 0 4
76898: PUSH
76899: LD_VAR 0 1
76903: PUSH
76904: FOR_IN
76905: IFFALSE 77088
// begin nat := GetNation ( i ) ;
76907: LD_ADDR_VAR 0 7
76911: PUSH
76912: LD_VAR 0 4
76916: PPUSH
76917: CALL_OW 248
76921: ST_TO_ADDR
// weapon := 0 ;
76922: LD_ADDR_VAR 0 8
76926: PUSH
76927: LD_INT 0
76929: ST_TO_ADDR
// if not nat then
76930: LD_VAR 0 7
76934: NOT
76935: IFFALSE 76939
// continue ;
76937: GO 76904
// for j in list [ nat ] do
76939: LD_ADDR_VAR 0 5
76943: PUSH
76944: LD_VAR 0 10
76948: PUSH
76949: LD_VAR 0 7
76953: ARRAY
76954: PUSH
76955: FOR_IN
76956: IFFALSE 76997
// if GetBWeapon ( i ) = j [ 1 ] then
76958: LD_VAR 0 4
76962: PPUSH
76963: CALL_OW 269
76967: PUSH
76968: LD_VAR 0 5
76972: PUSH
76973: LD_INT 1
76975: ARRAY
76976: EQUAL
76977: IFFALSE 76995
// begin weapon := j [ 2 ] ;
76979: LD_ADDR_VAR 0 8
76983: PUSH
76984: LD_VAR 0 5
76988: PUSH
76989: LD_INT 2
76991: ARRAY
76992: ST_TO_ADDR
// break ;
76993: GO 76997
// end ;
76995: GO 76955
76997: POP
76998: POP
// if not weapon then
76999: LD_VAR 0 8
77003: NOT
77004: IFFALSE 77008
// continue ;
77006: GO 76904
// for k in factories do
77008: LD_ADDR_VAR 0 6
77012: PUSH
77013: LD_VAR 0 2
77017: PUSH
77018: FOR_IN
77019: IFFALSE 77084
// begin weapons := AvailableWeaponList ( k ) ;
77021: LD_ADDR_VAR 0 9
77025: PUSH
77026: LD_VAR 0 6
77030: PPUSH
77031: CALL_OW 478
77035: ST_TO_ADDR
// if not weapons then
77036: LD_VAR 0 9
77040: NOT
77041: IFFALSE 77045
// continue ;
77043: GO 77018
// if weapon in weapons then
77045: LD_VAR 0 8
77049: PUSH
77050: LD_VAR 0 9
77054: IN
77055: IFFALSE 77082
// begin result := [ i , weapon ] ;
77057: LD_ADDR_VAR 0 3
77061: PUSH
77062: LD_VAR 0 4
77066: PUSH
77067: LD_VAR 0 8
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: ST_TO_ADDR
// exit ;
77076: POP
77077: POP
77078: POP
77079: POP
77080: GO 77090
// end ; end ;
77082: GO 77018
77084: POP
77085: POP
// end ;
77086: GO 76904
77088: POP
77089: POP
// end ;
77090: LD_VAR 0 3
77094: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77095: LD_INT 0
77097: PPUSH
// if not side or side > 8 then
77098: LD_VAR 0 3
77102: NOT
77103: PUSH
77104: LD_VAR 0 3
77108: PUSH
77109: LD_INT 8
77111: GREATER
77112: OR
77113: IFFALSE 77117
// exit ;
77115: GO 77176
// if not range then
77117: LD_VAR 0 4
77121: NOT
77122: IFFALSE 77133
// range := - 12 ;
77124: LD_ADDR_VAR 0 4
77128: PUSH
77129: LD_INT 12
77131: NEG
77132: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: LD_VAR 0 3
77147: PPUSH
77148: LD_VAR 0 4
77152: PPUSH
77153: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77157: LD_VAR 0 1
77161: PPUSH
77162: LD_VAR 0 2
77166: PPUSH
77167: LD_VAR 0 3
77171: PPUSH
77172: CALL_OW 331
// end ;
77176: LD_VAR 0 5
77180: RET
// export function Video ( mode ) ; begin
77181: LD_INT 0
77183: PPUSH
// ingame_video = mode ;
77184: LD_ADDR_OWVAR 52
77188: PUSH
77189: LD_VAR 0 1
77193: ST_TO_ADDR
// interface_hidden = mode ;
77194: LD_ADDR_OWVAR 54
77198: PUSH
77199: LD_VAR 0 1
77203: ST_TO_ADDR
// end ;
77204: LD_VAR 0 2
77208: RET
// export function Join ( array , element ) ; begin
77209: LD_INT 0
77211: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77212: LD_ADDR_VAR 0 3
77216: PUSH
77217: LD_VAR 0 1
77221: PPUSH
77222: LD_VAR 0 1
77226: PUSH
77227: LD_INT 1
77229: PLUS
77230: PPUSH
77231: LD_VAR 0 2
77235: PPUSH
77236: CALL_OW 1
77240: ST_TO_ADDR
// end ;
77241: LD_VAR 0 3
77245: RET
// export function JoinUnion ( array , element ) ; begin
77246: LD_INT 0
77248: PPUSH
// result := array union element ;
77249: LD_ADDR_VAR 0 3
77253: PUSH
77254: LD_VAR 0 1
77258: PUSH
77259: LD_VAR 0 2
77263: UNION
77264: ST_TO_ADDR
// end ;
77265: LD_VAR 0 3
77269: RET
// export function GetBehemoths ( side ) ; begin
77270: LD_INT 0
77272: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77273: LD_ADDR_VAR 0 2
77277: PUSH
77278: LD_INT 22
77280: PUSH
77281: LD_VAR 0 1
77285: PUSH
77286: EMPTY
77287: LIST
77288: LIST
77289: PUSH
77290: LD_INT 31
77292: PUSH
77293: LD_INT 25
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PPUSH
77304: CALL_OW 69
77308: ST_TO_ADDR
// end ;
77309: LD_VAR 0 2
77313: RET
// export function Shuffle ( array ) ; var i , index ; begin
77314: LD_INT 0
77316: PPUSH
77317: PPUSH
77318: PPUSH
// result := [ ] ;
77319: LD_ADDR_VAR 0 2
77323: PUSH
77324: EMPTY
77325: ST_TO_ADDR
// if not array then
77326: LD_VAR 0 1
77330: NOT
77331: IFFALSE 77335
// exit ;
77333: GO 77434
// Randomize ;
77335: CALL_OW 10
// for i = array downto 1 do
77339: LD_ADDR_VAR 0 3
77343: PUSH
77344: DOUBLE
77345: LD_VAR 0 1
77349: INC
77350: ST_TO_ADDR
77351: LD_INT 1
77353: PUSH
77354: FOR_DOWNTO
77355: IFFALSE 77432
// begin index := rand ( 1 , array ) ;
77357: LD_ADDR_VAR 0 4
77361: PUSH
77362: LD_INT 1
77364: PPUSH
77365: LD_VAR 0 1
77369: PPUSH
77370: CALL_OW 12
77374: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77375: LD_ADDR_VAR 0 2
77379: PUSH
77380: LD_VAR 0 2
77384: PPUSH
77385: LD_VAR 0 2
77389: PUSH
77390: LD_INT 1
77392: PLUS
77393: PPUSH
77394: LD_VAR 0 1
77398: PUSH
77399: LD_VAR 0 4
77403: ARRAY
77404: PPUSH
77405: CALL_OW 2
77409: ST_TO_ADDR
// array := Delete ( array , index ) ;
77410: LD_ADDR_VAR 0 1
77414: PUSH
77415: LD_VAR 0 1
77419: PPUSH
77420: LD_VAR 0 4
77424: PPUSH
77425: CALL_OW 3
77429: ST_TO_ADDR
// end ;
77430: GO 77354
77432: POP
77433: POP
// end ;
77434: LD_VAR 0 2
77438: RET
// export function GetBaseMaterials ( base ) ; begin
77439: LD_INT 0
77441: PPUSH
// result := [ 0 , 0 , 0 ] ;
77442: LD_ADDR_VAR 0 2
77446: PUSH
77447: LD_INT 0
77449: PUSH
77450: LD_INT 0
77452: PUSH
77453: LD_INT 0
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: LIST
77460: ST_TO_ADDR
// if not base then
77461: LD_VAR 0 1
77465: NOT
77466: IFFALSE 77470
// exit ;
77468: GO 77519
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77470: LD_ADDR_VAR 0 2
77474: PUSH
77475: LD_VAR 0 1
77479: PPUSH
77480: LD_INT 1
77482: PPUSH
77483: CALL_OW 275
77487: PUSH
77488: LD_VAR 0 1
77492: PPUSH
77493: LD_INT 2
77495: PPUSH
77496: CALL_OW 275
77500: PUSH
77501: LD_VAR 0 1
77505: PPUSH
77506: LD_INT 3
77508: PPUSH
77509: CALL_OW 275
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: LIST
77518: ST_TO_ADDR
// end ;
77519: LD_VAR 0 2
77523: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77524: LD_INT 0
77526: PPUSH
77527: PPUSH
// result := array ;
77528: LD_ADDR_VAR 0 3
77532: PUSH
77533: LD_VAR 0 1
77537: ST_TO_ADDR
// if size >= result then
77538: LD_VAR 0 2
77542: PUSH
77543: LD_VAR 0 3
77547: GREATEREQUAL
77548: IFFALSE 77552
// exit ;
77550: GO 77602
// if size then
77552: LD_VAR 0 2
77556: IFFALSE 77602
// for i := array downto size do
77558: LD_ADDR_VAR 0 4
77562: PUSH
77563: DOUBLE
77564: LD_VAR 0 1
77568: INC
77569: ST_TO_ADDR
77570: LD_VAR 0 2
77574: PUSH
77575: FOR_DOWNTO
77576: IFFALSE 77600
// result := Delete ( result , result ) ;
77578: LD_ADDR_VAR 0 3
77582: PUSH
77583: LD_VAR 0 3
77587: PPUSH
77588: LD_VAR 0 3
77592: PPUSH
77593: CALL_OW 3
77597: ST_TO_ADDR
77598: GO 77575
77600: POP
77601: POP
// end ;
77602: LD_VAR 0 3
77606: RET
// export function ComExit ( unit ) ; var tmp ; begin
77607: LD_INT 0
77609: PPUSH
77610: PPUSH
// if not IsInUnit ( unit ) then
77611: LD_VAR 0 1
77615: PPUSH
77616: CALL_OW 310
77620: NOT
77621: IFFALSE 77625
// exit ;
77623: GO 77685
// tmp := IsInUnit ( unit ) ;
77625: LD_ADDR_VAR 0 3
77629: PUSH
77630: LD_VAR 0 1
77634: PPUSH
77635: CALL_OW 310
77639: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77640: LD_VAR 0 3
77644: PPUSH
77645: CALL_OW 247
77649: PUSH
77650: LD_INT 2
77652: EQUAL
77653: IFFALSE 77666
// ComExitVehicle ( unit ) else
77655: LD_VAR 0 1
77659: PPUSH
77660: CALL_OW 121
77664: GO 77675
// ComExitBuilding ( unit ) ;
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 122
// result := tmp ;
77675: LD_ADDR_VAR 0 2
77679: PUSH
77680: LD_VAR 0 3
77684: ST_TO_ADDR
// end ;
77685: LD_VAR 0 2
77689: RET
// export function ComExitAll ( units ) ; var i ; begin
77690: LD_INT 0
77692: PPUSH
77693: PPUSH
// if not units then
77694: LD_VAR 0 1
77698: NOT
77699: IFFALSE 77703
// exit ;
77701: GO 77729
// for i in units do
77703: LD_ADDR_VAR 0 3
77707: PUSH
77708: LD_VAR 0 1
77712: PUSH
77713: FOR_IN
77714: IFFALSE 77727
// ComExit ( i ) ;
77716: LD_VAR 0 3
77720: PPUSH
77721: CALL 77607 0 1
77725: GO 77713
77727: POP
77728: POP
// end ;
77729: LD_VAR 0 2
77733: RET
// export function ResetHc ; begin
77734: LD_INT 0
77736: PPUSH
// InitHc ;
77737: CALL_OW 19
// hc_importance := 0 ;
77741: LD_ADDR_OWVAR 32
77745: PUSH
77746: LD_INT 0
77748: ST_TO_ADDR
// end ;
77749: LD_VAR 0 1
77753: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77754: LD_INT 0
77756: PPUSH
77757: PPUSH
77758: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77759: LD_ADDR_VAR 0 6
77763: PUSH
77764: LD_VAR 0 1
77768: PUSH
77769: LD_VAR 0 3
77773: PLUS
77774: PUSH
77775: LD_INT 2
77777: DIV
77778: ST_TO_ADDR
// if _x < 0 then
77779: LD_VAR 0 6
77783: PUSH
77784: LD_INT 0
77786: LESS
77787: IFFALSE 77804
// _x := _x * - 1 ;
77789: LD_ADDR_VAR 0 6
77793: PUSH
77794: LD_VAR 0 6
77798: PUSH
77799: LD_INT 1
77801: NEG
77802: MUL
77803: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77804: LD_ADDR_VAR 0 7
77808: PUSH
77809: LD_VAR 0 2
77813: PUSH
77814: LD_VAR 0 4
77818: PLUS
77819: PUSH
77820: LD_INT 2
77822: DIV
77823: ST_TO_ADDR
// if _y < 0 then
77824: LD_VAR 0 7
77828: PUSH
77829: LD_INT 0
77831: LESS
77832: IFFALSE 77849
// _y := _y * - 1 ;
77834: LD_ADDR_VAR 0 7
77838: PUSH
77839: LD_VAR 0 7
77843: PUSH
77844: LD_INT 1
77846: NEG
77847: MUL
77848: ST_TO_ADDR
// result := [ _x , _y ] ;
77849: LD_ADDR_VAR 0 5
77853: PUSH
77854: LD_VAR 0 6
77858: PUSH
77859: LD_VAR 0 7
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: ST_TO_ADDR
// end ;
77868: LD_VAR 0 5
77872: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77873: LD_INT 0
77875: PPUSH
77876: PPUSH
77877: PPUSH
77878: PPUSH
// task := GetTaskList ( unit ) ;
77879: LD_ADDR_VAR 0 7
77883: PUSH
77884: LD_VAR 0 1
77888: PPUSH
77889: CALL_OW 437
77893: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77894: LD_VAR 0 7
77898: NOT
77899: PUSH
77900: LD_VAR 0 1
77904: PPUSH
77905: LD_VAR 0 2
77909: PPUSH
77910: CALL_OW 308
77914: NOT
77915: AND
77916: IFFALSE 77920
// exit ;
77918: GO 78038
// if IsInArea ( unit , area ) then
77920: LD_VAR 0 1
77924: PPUSH
77925: LD_VAR 0 2
77929: PPUSH
77930: CALL_OW 308
77934: IFFALSE 77952
// begin ComMoveToArea ( unit , goAway ) ;
77936: LD_VAR 0 1
77940: PPUSH
77941: LD_VAR 0 3
77945: PPUSH
77946: CALL_OW 113
// exit ;
77950: GO 78038
// end ; if task [ 1 ] [ 1 ] <> M then
77952: LD_VAR 0 7
77956: PUSH
77957: LD_INT 1
77959: ARRAY
77960: PUSH
77961: LD_INT 1
77963: ARRAY
77964: PUSH
77965: LD_STRING M
77967: NONEQUAL
77968: IFFALSE 77972
// exit ;
77970: GO 78038
// x := task [ 1 ] [ 2 ] ;
77972: LD_ADDR_VAR 0 5
77976: PUSH
77977: LD_VAR 0 7
77981: PUSH
77982: LD_INT 1
77984: ARRAY
77985: PUSH
77986: LD_INT 2
77988: ARRAY
77989: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77990: LD_ADDR_VAR 0 6
77994: PUSH
77995: LD_VAR 0 7
77999: PUSH
78000: LD_INT 1
78002: ARRAY
78003: PUSH
78004: LD_INT 3
78006: ARRAY
78007: ST_TO_ADDR
// if InArea ( x , y , area ) then
78008: LD_VAR 0 5
78012: PPUSH
78013: LD_VAR 0 6
78017: PPUSH
78018: LD_VAR 0 2
78022: PPUSH
78023: CALL_OW 309
78027: IFFALSE 78038
// ComStop ( unit ) ;
78029: LD_VAR 0 1
78033: PPUSH
78034: CALL_OW 141
// end ;
78038: LD_VAR 0 4
78042: RET
// export function Abs ( value ) ; begin
78043: LD_INT 0
78045: PPUSH
// result := value ;
78046: LD_ADDR_VAR 0 2
78050: PUSH
78051: LD_VAR 0 1
78055: ST_TO_ADDR
// if value < 0 then
78056: LD_VAR 0 1
78060: PUSH
78061: LD_INT 0
78063: LESS
78064: IFFALSE 78081
// result := value * - 1 ;
78066: LD_ADDR_VAR 0 2
78070: PUSH
78071: LD_VAR 0 1
78075: PUSH
78076: LD_INT 1
78078: NEG
78079: MUL
78080: ST_TO_ADDR
// end ;
78081: LD_VAR 0 2
78085: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78086: LD_INT 0
78088: PPUSH
78089: PPUSH
78090: PPUSH
78091: PPUSH
78092: PPUSH
78093: PPUSH
78094: PPUSH
78095: PPUSH
// if not unit or not building then
78096: LD_VAR 0 1
78100: NOT
78101: PUSH
78102: LD_VAR 0 2
78106: NOT
78107: OR
78108: IFFALSE 78112
// exit ;
78110: GO 78338
// x := GetX ( building ) ;
78112: LD_ADDR_VAR 0 4
78116: PUSH
78117: LD_VAR 0 2
78121: PPUSH
78122: CALL_OW 250
78126: ST_TO_ADDR
// y := GetY ( building ) ;
78127: LD_ADDR_VAR 0 6
78131: PUSH
78132: LD_VAR 0 2
78136: PPUSH
78137: CALL_OW 251
78141: ST_TO_ADDR
// d := GetDir ( building ) ;
78142: LD_ADDR_VAR 0 8
78146: PUSH
78147: LD_VAR 0 2
78151: PPUSH
78152: CALL_OW 254
78156: ST_TO_ADDR
// r := 4 ;
78157: LD_ADDR_VAR 0 9
78161: PUSH
78162: LD_INT 4
78164: ST_TO_ADDR
// for i := 1 to 5 do
78165: LD_ADDR_VAR 0 10
78169: PUSH
78170: DOUBLE
78171: LD_INT 1
78173: DEC
78174: ST_TO_ADDR
78175: LD_INT 5
78177: PUSH
78178: FOR_TO
78179: IFFALSE 78336
// begin _x := ShiftX ( x , d , r + i ) ;
78181: LD_ADDR_VAR 0 5
78185: PUSH
78186: LD_VAR 0 4
78190: PPUSH
78191: LD_VAR 0 8
78195: PPUSH
78196: LD_VAR 0 9
78200: PUSH
78201: LD_VAR 0 10
78205: PLUS
78206: PPUSH
78207: CALL_OW 272
78211: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78212: LD_ADDR_VAR 0 7
78216: PUSH
78217: LD_VAR 0 6
78221: PPUSH
78222: LD_VAR 0 8
78226: PPUSH
78227: LD_VAR 0 9
78231: PUSH
78232: LD_VAR 0 10
78236: PLUS
78237: PPUSH
78238: CALL_OW 273
78242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78243: LD_VAR 0 5
78247: PPUSH
78248: LD_VAR 0 7
78252: PPUSH
78253: CALL_OW 488
78257: PUSH
78258: LD_VAR 0 5
78262: PPUSH
78263: LD_VAR 0 7
78267: PPUSH
78268: CALL_OW 428
78272: PPUSH
78273: CALL_OW 247
78277: PUSH
78278: LD_INT 3
78280: PUSH
78281: LD_INT 2
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: IN
78288: NOT
78289: AND
78290: IFFALSE 78334
// begin ComMoveXY ( unit , _x , _y ) ;
78292: LD_VAR 0 1
78296: PPUSH
78297: LD_VAR 0 5
78301: PPUSH
78302: LD_VAR 0 7
78306: PPUSH
78307: CALL_OW 111
// result := [ _x , _y ] ;
78311: LD_ADDR_VAR 0 3
78315: PUSH
78316: LD_VAR 0 5
78320: PUSH
78321: LD_VAR 0 7
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: ST_TO_ADDR
// exit ;
78330: POP
78331: POP
78332: GO 78338
// end ; end ;
78334: GO 78178
78336: POP
78337: POP
// end ;
78338: LD_VAR 0 3
78342: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78343: LD_INT 0
78345: PPUSH
78346: PPUSH
78347: PPUSH
// result := 0 ;
78348: LD_ADDR_VAR 0 3
78352: PUSH
78353: LD_INT 0
78355: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78356: LD_VAR 0 1
78360: PUSH
78361: LD_INT 0
78363: LESS
78364: PUSH
78365: LD_VAR 0 1
78369: PUSH
78370: LD_INT 8
78372: GREATER
78373: OR
78374: PUSH
78375: LD_VAR 0 2
78379: PUSH
78380: LD_INT 0
78382: LESS
78383: OR
78384: PUSH
78385: LD_VAR 0 2
78389: PUSH
78390: LD_INT 8
78392: GREATER
78393: OR
78394: IFFALSE 78398
// exit ;
78396: GO 78473
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78398: LD_ADDR_VAR 0 4
78402: PUSH
78403: LD_INT 22
78405: PUSH
78406: LD_VAR 0 2
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PPUSH
78415: CALL_OW 69
78419: PUSH
78420: FOR_IN
78421: IFFALSE 78471
// begin un := UnitShoot ( i ) ;
78423: LD_ADDR_VAR 0 5
78427: PUSH
78428: LD_VAR 0 4
78432: PPUSH
78433: CALL_OW 504
78437: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78438: LD_VAR 0 5
78442: PPUSH
78443: CALL_OW 255
78447: PUSH
78448: LD_VAR 0 1
78452: EQUAL
78453: IFFALSE 78469
// begin result := un ;
78455: LD_ADDR_VAR 0 3
78459: PUSH
78460: LD_VAR 0 5
78464: ST_TO_ADDR
// exit ;
78465: POP
78466: POP
78467: GO 78473
// end ; end ;
78469: GO 78420
78471: POP
78472: POP
// end ;
78473: LD_VAR 0 3
78477: RET
// export function GetCargoBay ( units ) ; begin
78478: LD_INT 0
78480: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78481: LD_ADDR_VAR 0 2
78485: PUSH
78486: LD_VAR 0 1
78490: PPUSH
78491: LD_INT 2
78493: PUSH
78494: LD_INT 34
78496: PUSH
78497: LD_INT 12
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 34
78506: PUSH
78507: LD_INT 51
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 34
78516: PUSH
78517: LD_INT 32
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: LD_INT 34
78526: PUSH
78527: LD_INT 89
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: PPUSH
78541: CALL_OW 72
78545: ST_TO_ADDR
// end ;
78546: LD_VAR 0 2
78550: RET
// export function Negate ( value ) ; begin
78551: LD_INT 0
78553: PPUSH
// result := not value ;
78554: LD_ADDR_VAR 0 2
78558: PUSH
78559: LD_VAR 0 1
78563: NOT
78564: ST_TO_ADDR
// end ;
78565: LD_VAR 0 2
78569: RET
// export function Inc ( value ) ; begin
78570: LD_INT 0
78572: PPUSH
// result := value + 1 ;
78573: LD_ADDR_VAR 0 2
78577: PUSH
78578: LD_VAR 0 1
78582: PUSH
78583: LD_INT 1
78585: PLUS
78586: ST_TO_ADDR
// end ;
78587: LD_VAR 0 2
78591: RET
// export function Dec ( value ) ; begin
78592: LD_INT 0
78594: PPUSH
// result := value - 1 ;
78595: LD_ADDR_VAR 0 2
78599: PUSH
78600: LD_VAR 0 1
78604: PUSH
78605: LD_INT 1
78607: MINUS
78608: ST_TO_ADDR
// end ;
78609: LD_VAR 0 2
78613: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78614: LD_INT 0
78616: PPUSH
78617: PPUSH
78618: PPUSH
78619: PPUSH
78620: PPUSH
78621: PPUSH
78622: PPUSH
78623: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78624: LD_VAR 0 1
78628: PPUSH
78629: LD_VAR 0 2
78633: PPUSH
78634: CALL_OW 488
78638: NOT
78639: PUSH
78640: LD_VAR 0 3
78644: PPUSH
78645: LD_VAR 0 4
78649: PPUSH
78650: CALL_OW 488
78654: NOT
78655: OR
78656: IFFALSE 78669
// begin result := - 1 ;
78658: LD_ADDR_VAR 0 5
78662: PUSH
78663: LD_INT 1
78665: NEG
78666: ST_TO_ADDR
// exit ;
78667: GO 78904
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78669: LD_ADDR_VAR 0 12
78673: PUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: LD_VAR 0 2
78683: PPUSH
78684: LD_VAR 0 3
78688: PPUSH
78689: LD_VAR 0 4
78693: PPUSH
78694: CALL 77754 0 4
78698: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78699: LD_ADDR_VAR 0 11
78703: PUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: LD_VAR 0 12
78718: PUSH
78719: LD_INT 1
78721: ARRAY
78722: PPUSH
78723: LD_VAR 0 12
78727: PUSH
78728: LD_INT 2
78730: ARRAY
78731: PPUSH
78732: CALL_OW 298
78736: ST_TO_ADDR
// distance := 9999 ;
78737: LD_ADDR_VAR 0 10
78741: PUSH
78742: LD_INT 9999
78744: ST_TO_ADDR
// for i := 0 to 5 do
78745: LD_ADDR_VAR 0 6
78749: PUSH
78750: DOUBLE
78751: LD_INT 0
78753: DEC
78754: ST_TO_ADDR
78755: LD_INT 5
78757: PUSH
78758: FOR_TO
78759: IFFALSE 78902
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78761: LD_ADDR_VAR 0 7
78765: PUSH
78766: LD_VAR 0 1
78770: PPUSH
78771: LD_VAR 0 6
78775: PPUSH
78776: LD_VAR 0 11
78780: PPUSH
78781: CALL_OW 272
78785: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78786: LD_ADDR_VAR 0 8
78790: PUSH
78791: LD_VAR 0 2
78795: PPUSH
78796: LD_VAR 0 6
78800: PPUSH
78801: LD_VAR 0 11
78805: PPUSH
78806: CALL_OW 273
78810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78811: LD_VAR 0 7
78815: PPUSH
78816: LD_VAR 0 8
78820: PPUSH
78821: CALL_OW 488
78825: NOT
78826: IFFALSE 78830
// continue ;
78828: GO 78758
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78830: LD_ADDR_VAR 0 9
78834: PUSH
78835: LD_VAR 0 12
78839: PUSH
78840: LD_INT 1
78842: ARRAY
78843: PPUSH
78844: LD_VAR 0 12
78848: PUSH
78849: LD_INT 2
78851: ARRAY
78852: PPUSH
78853: LD_VAR 0 7
78857: PPUSH
78858: LD_VAR 0 8
78862: PPUSH
78863: CALL_OW 298
78867: ST_TO_ADDR
// if tmp < distance then
78868: LD_VAR 0 9
78872: PUSH
78873: LD_VAR 0 10
78877: LESS
78878: IFFALSE 78900
// begin result := i ;
78880: LD_ADDR_VAR 0 5
78884: PUSH
78885: LD_VAR 0 6
78889: ST_TO_ADDR
// distance := tmp ;
78890: LD_ADDR_VAR 0 10
78894: PUSH
78895: LD_VAR 0 9
78899: ST_TO_ADDR
// end ; end ;
78900: GO 78758
78902: POP
78903: POP
// end ;
78904: LD_VAR 0 5
78908: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78909: LD_INT 0
78911: PPUSH
78912: PPUSH
// if not driver or not IsInUnit ( driver ) then
78913: LD_VAR 0 1
78917: NOT
78918: PUSH
78919: LD_VAR 0 1
78923: PPUSH
78924: CALL_OW 310
78928: NOT
78929: OR
78930: IFFALSE 78934
// exit ;
78932: GO 79024
// vehicle := IsInUnit ( driver ) ;
78934: LD_ADDR_VAR 0 3
78938: PUSH
78939: LD_VAR 0 1
78943: PPUSH
78944: CALL_OW 310
78948: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78949: LD_VAR 0 1
78953: PPUSH
78954: LD_STRING \
78956: PUSH
78957: LD_INT 0
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: LD_INT 0
78968: PUSH
78969: LD_INT 0
78971: PUSH
78972: LD_INT 0
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: PUSH
78984: LD_STRING E
78986: PUSH
78987: LD_INT 0
78989: PUSH
78990: LD_INT 0
78992: PUSH
78993: LD_VAR 0 3
78997: PUSH
78998: LD_INT 0
79000: PUSH
79001: LD_INT 0
79003: PUSH
79004: LD_INT 0
79006: PUSH
79007: EMPTY
79008: LIST
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PPUSH
79020: CALL_OW 446
// end ;
79024: LD_VAR 0 2
79028: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79029: LD_INT 0
79031: PPUSH
79032: PPUSH
// if not driver or not IsInUnit ( driver ) then
79033: LD_VAR 0 1
79037: NOT
79038: PUSH
79039: LD_VAR 0 1
79043: PPUSH
79044: CALL_OW 310
79048: NOT
79049: OR
79050: IFFALSE 79054
// exit ;
79052: GO 79144
// vehicle := IsInUnit ( driver ) ;
79054: LD_ADDR_VAR 0 3
79058: PUSH
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 310
79068: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79069: LD_VAR 0 1
79073: PPUSH
79074: LD_STRING \
79076: PUSH
79077: LD_INT 0
79079: PUSH
79080: LD_INT 0
79082: PUSH
79083: LD_INT 0
79085: PUSH
79086: LD_INT 0
79088: PUSH
79089: LD_INT 0
79091: PUSH
79092: LD_INT 0
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: PUSH
79104: LD_STRING E
79106: PUSH
79107: LD_INT 0
79109: PUSH
79110: LD_INT 0
79112: PUSH
79113: LD_VAR 0 3
79117: PUSH
79118: LD_INT 0
79120: PUSH
79121: LD_INT 0
79123: PUSH
79124: LD_INT 0
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: LIST
79132: LIST
79133: LIST
79134: LIST
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PPUSH
79140: CALL_OW 447
// end ;
79144: LD_VAR 0 2
79148: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79149: LD_INT 0
79151: PPUSH
79152: PPUSH
79153: PPUSH
// tmp := [ ] ;
79154: LD_ADDR_VAR 0 5
79158: PUSH
79159: EMPTY
79160: ST_TO_ADDR
// for i in units do
79161: LD_ADDR_VAR 0 4
79165: PUSH
79166: LD_VAR 0 1
79170: PUSH
79171: FOR_IN
79172: IFFALSE 79210
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79174: LD_ADDR_VAR 0 5
79178: PUSH
79179: LD_VAR 0 5
79183: PPUSH
79184: LD_VAR 0 5
79188: PUSH
79189: LD_INT 1
79191: PLUS
79192: PPUSH
79193: LD_VAR 0 4
79197: PPUSH
79198: CALL_OW 256
79202: PPUSH
79203: CALL_OW 2
79207: ST_TO_ADDR
79208: GO 79171
79210: POP
79211: POP
// if not tmp then
79212: LD_VAR 0 5
79216: NOT
79217: IFFALSE 79221
// exit ;
79219: GO 79269
// if asc then
79221: LD_VAR 0 2
79225: IFFALSE 79249
// result := SortListByListAsc ( units , tmp ) else
79227: LD_ADDR_VAR 0 3
79231: PUSH
79232: LD_VAR 0 1
79236: PPUSH
79237: LD_VAR 0 5
79241: PPUSH
79242: CALL_OW 76
79246: ST_TO_ADDR
79247: GO 79269
// result := SortListByListDesc ( units , tmp ) ;
79249: LD_ADDR_VAR 0 3
79253: PUSH
79254: LD_VAR 0 1
79258: PPUSH
79259: LD_VAR 0 5
79263: PPUSH
79264: CALL_OW 77
79268: ST_TO_ADDR
// end ;
79269: LD_VAR 0 3
79273: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79274: LD_INT 0
79276: PPUSH
79277: PPUSH
// task := GetTaskList ( mech ) ;
79278: LD_ADDR_VAR 0 4
79282: PUSH
79283: LD_VAR 0 1
79287: PPUSH
79288: CALL_OW 437
79292: ST_TO_ADDR
// if not task then
79293: LD_VAR 0 4
79297: NOT
79298: IFFALSE 79302
// exit ;
79300: GO 79344
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79302: LD_ADDR_VAR 0 3
79306: PUSH
79307: LD_VAR 0 4
79311: PUSH
79312: LD_INT 1
79314: ARRAY
79315: PUSH
79316: LD_INT 1
79318: ARRAY
79319: PUSH
79320: LD_STRING r
79322: EQUAL
79323: PUSH
79324: LD_VAR 0 4
79328: PUSH
79329: LD_INT 1
79331: ARRAY
79332: PUSH
79333: LD_INT 4
79335: ARRAY
79336: PUSH
79337: LD_VAR 0 2
79341: EQUAL
79342: AND
79343: ST_TO_ADDR
// end ;
79344: LD_VAR 0 3
79348: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79349: LD_INT 0
79351: PPUSH
// SetDir ( unit , d ) ;
79352: LD_VAR 0 1
79356: PPUSH
79357: LD_VAR 0 4
79361: PPUSH
79362: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79366: LD_VAR 0 1
79370: PPUSH
79371: LD_VAR 0 2
79375: PPUSH
79376: LD_VAR 0 3
79380: PPUSH
79381: LD_VAR 0 5
79385: PPUSH
79386: CALL_OW 48
// end ;
79390: LD_VAR 0 6
79394: RET
// export function ToNaturalNumber ( number ) ; begin
79395: LD_INT 0
79397: PPUSH
// result := number div 1 ;
79398: LD_ADDR_VAR 0 2
79402: PUSH
79403: LD_VAR 0 1
79407: PUSH
79408: LD_INT 1
79410: DIV
79411: ST_TO_ADDR
// if number < 0 then
79412: LD_VAR 0 1
79416: PUSH
79417: LD_INT 0
79419: LESS
79420: IFFALSE 79430
// result := 0 ;
79422: LD_ADDR_VAR 0 2
79426: PUSH
79427: LD_INT 0
79429: ST_TO_ADDR
// end ;
79430: LD_VAR 0 2
79434: RET
// export function SortByClass ( units , class ) ; var un ; begin
79435: LD_INT 0
79437: PPUSH
79438: PPUSH
// if not units or not class then
79439: LD_VAR 0 1
79443: NOT
79444: PUSH
79445: LD_VAR 0 2
79449: NOT
79450: OR
79451: IFFALSE 79455
// exit ;
79453: GO 79550
// result := [ ] ;
79455: LD_ADDR_VAR 0 3
79459: PUSH
79460: EMPTY
79461: ST_TO_ADDR
// for un in units do
79462: LD_ADDR_VAR 0 4
79466: PUSH
79467: LD_VAR 0 1
79471: PUSH
79472: FOR_IN
79473: IFFALSE 79548
// if GetClass ( un ) = class then
79475: LD_VAR 0 4
79479: PPUSH
79480: CALL_OW 257
79484: PUSH
79485: LD_VAR 0 2
79489: EQUAL
79490: IFFALSE 79517
// result := Insert ( result , 1 , un ) else
79492: LD_ADDR_VAR 0 3
79496: PUSH
79497: LD_VAR 0 3
79501: PPUSH
79502: LD_INT 1
79504: PPUSH
79505: LD_VAR 0 4
79509: PPUSH
79510: CALL_OW 2
79514: ST_TO_ADDR
79515: GO 79546
// result := Replace ( result , result + 1 , un ) ;
79517: LD_ADDR_VAR 0 3
79521: PUSH
79522: LD_VAR 0 3
79526: PPUSH
79527: LD_VAR 0 3
79531: PUSH
79532: LD_INT 1
79534: PLUS
79535: PPUSH
79536: LD_VAR 0 4
79540: PPUSH
79541: CALL_OW 1
79545: ST_TO_ADDR
79546: GO 79472
79548: POP
79549: POP
// end ;
79550: LD_VAR 0 3
79554: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79555: LD_INT 0
79557: PPUSH
79558: PPUSH
79559: PPUSH
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
// result := [ ] ;
79564: LD_ADDR_VAR 0 4
79568: PUSH
79569: EMPTY
79570: ST_TO_ADDR
// if x - r < 0 then
79571: LD_VAR 0 1
79575: PUSH
79576: LD_VAR 0 3
79580: MINUS
79581: PUSH
79582: LD_INT 0
79584: LESS
79585: IFFALSE 79597
// min_x := 0 else
79587: LD_ADDR_VAR 0 8
79591: PUSH
79592: LD_INT 0
79594: ST_TO_ADDR
79595: GO 79613
// min_x := x - r ;
79597: LD_ADDR_VAR 0 8
79601: PUSH
79602: LD_VAR 0 1
79606: PUSH
79607: LD_VAR 0 3
79611: MINUS
79612: ST_TO_ADDR
// if y - r < 0 then
79613: LD_VAR 0 2
79617: PUSH
79618: LD_VAR 0 3
79622: MINUS
79623: PUSH
79624: LD_INT 0
79626: LESS
79627: IFFALSE 79639
// min_y := 0 else
79629: LD_ADDR_VAR 0 7
79633: PUSH
79634: LD_INT 0
79636: ST_TO_ADDR
79637: GO 79655
// min_y := y - r ;
79639: LD_ADDR_VAR 0 7
79643: PUSH
79644: LD_VAR 0 2
79648: PUSH
79649: LD_VAR 0 3
79653: MINUS
79654: ST_TO_ADDR
// max_x := x + r ;
79655: LD_ADDR_VAR 0 9
79659: PUSH
79660: LD_VAR 0 1
79664: PUSH
79665: LD_VAR 0 3
79669: PLUS
79670: ST_TO_ADDR
// max_y := y + r ;
79671: LD_ADDR_VAR 0 10
79675: PUSH
79676: LD_VAR 0 2
79680: PUSH
79681: LD_VAR 0 3
79685: PLUS
79686: ST_TO_ADDR
// for _x = min_x to max_x do
79687: LD_ADDR_VAR 0 5
79691: PUSH
79692: DOUBLE
79693: LD_VAR 0 8
79697: DEC
79698: ST_TO_ADDR
79699: LD_VAR 0 9
79703: PUSH
79704: FOR_TO
79705: IFFALSE 79806
// for _y = min_y to max_y do
79707: LD_ADDR_VAR 0 6
79711: PUSH
79712: DOUBLE
79713: LD_VAR 0 7
79717: DEC
79718: ST_TO_ADDR
79719: LD_VAR 0 10
79723: PUSH
79724: FOR_TO
79725: IFFALSE 79802
// begin if not ValidHex ( _x , _y ) then
79727: LD_VAR 0 5
79731: PPUSH
79732: LD_VAR 0 6
79736: PPUSH
79737: CALL_OW 488
79741: NOT
79742: IFFALSE 79746
// continue ;
79744: GO 79724
// if GetResourceTypeXY ( _x , _y ) then
79746: LD_VAR 0 5
79750: PPUSH
79751: LD_VAR 0 6
79755: PPUSH
79756: CALL_OW 283
79760: IFFALSE 79800
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79762: LD_ADDR_VAR 0 4
79766: PUSH
79767: LD_VAR 0 4
79771: PPUSH
79772: LD_VAR 0 4
79776: PUSH
79777: LD_INT 1
79779: PLUS
79780: PPUSH
79781: LD_VAR 0 5
79785: PUSH
79786: LD_VAR 0 6
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: PPUSH
79795: CALL_OW 1
79799: ST_TO_ADDR
// end ;
79800: GO 79724
79802: POP
79803: POP
79804: GO 79704
79806: POP
79807: POP
// end ;
79808: LD_VAR 0 4
79812: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79813: LD_INT 0
79815: PPUSH
79816: PPUSH
79817: PPUSH
79818: PPUSH
79819: PPUSH
79820: PPUSH
79821: PPUSH
79822: PPUSH
// if not units then
79823: LD_VAR 0 1
79827: NOT
79828: IFFALSE 79832
// exit ;
79830: GO 80356
// result := UnitFilter ( units , [ f_ok ] ) ;
79832: LD_ADDR_VAR 0 3
79836: PUSH
79837: LD_VAR 0 1
79841: PPUSH
79842: LD_INT 50
79844: PUSH
79845: EMPTY
79846: LIST
79847: PPUSH
79848: CALL_OW 72
79852: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79853: LD_ADDR_VAR 0 8
79857: PUSH
79858: LD_VAR 0 1
79862: PUSH
79863: LD_INT 1
79865: ARRAY
79866: PPUSH
79867: CALL_OW 255
79871: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79872: LD_ADDR_VAR 0 10
79876: PUSH
79877: LD_INT 29
79879: PUSH
79880: LD_INT 91
79882: PUSH
79883: LD_INT 49
79885: PUSH
79886: EMPTY
79887: LIST
79888: LIST
79889: LIST
79890: ST_TO_ADDR
// if not result then
79891: LD_VAR 0 3
79895: NOT
79896: IFFALSE 79900
// exit ;
79898: GO 80356
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79900: LD_ADDR_VAR 0 5
79904: PUSH
79905: LD_INT 81
79907: PUSH
79908: LD_VAR 0 8
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PPUSH
79917: CALL_OW 69
79921: ST_TO_ADDR
// for i in result do
79922: LD_ADDR_VAR 0 4
79926: PUSH
79927: LD_VAR 0 3
79931: PUSH
79932: FOR_IN
79933: IFFALSE 80354
// begin tag := GetTag ( i ) + 1 ;
79935: LD_ADDR_VAR 0 9
79939: PUSH
79940: LD_VAR 0 4
79944: PPUSH
79945: CALL_OW 110
79949: PUSH
79950: LD_INT 1
79952: PLUS
79953: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79954: LD_ADDR_VAR 0 7
79958: PUSH
79959: LD_VAR 0 4
79963: PPUSH
79964: CALL_OW 250
79968: PPUSH
79969: LD_VAR 0 4
79973: PPUSH
79974: CALL_OW 251
79978: PPUSH
79979: LD_INT 6
79981: PPUSH
79982: CALL 79555 0 3
79986: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79987: LD_VAR 0 4
79991: PPUSH
79992: CALL_OW 247
79996: PUSH
79997: LD_INT 2
79999: EQUAL
80000: PUSH
80001: LD_VAR 0 7
80005: AND
80006: PUSH
80007: LD_VAR 0 4
80011: PPUSH
80012: CALL_OW 264
80016: PUSH
80017: LD_VAR 0 10
80021: IN
80022: NOT
80023: AND
80024: IFFALSE 80063
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80026: LD_VAR 0 4
80030: PPUSH
80031: LD_VAR 0 7
80035: PUSH
80036: LD_INT 1
80038: ARRAY
80039: PUSH
80040: LD_INT 1
80042: ARRAY
80043: PPUSH
80044: LD_VAR 0 7
80048: PUSH
80049: LD_INT 1
80051: ARRAY
80052: PUSH
80053: LD_INT 2
80055: ARRAY
80056: PPUSH
80057: CALL_OW 116
80061: GO 80352
// if path > tag then
80063: LD_VAR 0 2
80067: PUSH
80068: LD_VAR 0 9
80072: GREATER
80073: IFFALSE 80281
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80075: LD_ADDR_VAR 0 6
80079: PUSH
80080: LD_VAR 0 5
80084: PPUSH
80085: LD_INT 91
80087: PUSH
80088: LD_VAR 0 4
80092: PUSH
80093: LD_INT 8
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: LIST
80100: PPUSH
80101: CALL_OW 72
80105: ST_TO_ADDR
// if nearEnemy then
80106: LD_VAR 0 6
80110: IFFALSE 80179
// begin if GetWeapon ( i ) = ru_time_lapser then
80112: LD_VAR 0 4
80116: PPUSH
80117: CALL_OW 264
80121: PUSH
80122: LD_INT 49
80124: EQUAL
80125: IFFALSE 80153
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80127: LD_VAR 0 4
80131: PPUSH
80132: LD_VAR 0 6
80136: PPUSH
80137: LD_VAR 0 4
80141: PPUSH
80142: CALL_OW 74
80146: PPUSH
80147: CALL_OW 112
80151: GO 80177
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80153: LD_VAR 0 4
80157: PPUSH
80158: LD_VAR 0 6
80162: PPUSH
80163: LD_VAR 0 4
80167: PPUSH
80168: CALL_OW 74
80172: PPUSH
80173: CALL_OW 115
// end else
80177: GO 80279
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80179: LD_VAR 0 4
80183: PPUSH
80184: LD_VAR 0 2
80188: PUSH
80189: LD_VAR 0 9
80193: ARRAY
80194: PUSH
80195: LD_INT 1
80197: ARRAY
80198: PPUSH
80199: LD_VAR 0 2
80203: PUSH
80204: LD_VAR 0 9
80208: ARRAY
80209: PUSH
80210: LD_INT 2
80212: ARRAY
80213: PPUSH
80214: CALL_OW 297
80218: PUSH
80219: LD_INT 6
80221: GREATER
80222: IFFALSE 80265
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80224: LD_VAR 0 4
80228: PPUSH
80229: LD_VAR 0 2
80233: PUSH
80234: LD_VAR 0 9
80238: ARRAY
80239: PUSH
80240: LD_INT 1
80242: ARRAY
80243: PPUSH
80244: LD_VAR 0 2
80248: PUSH
80249: LD_VAR 0 9
80253: ARRAY
80254: PUSH
80255: LD_INT 2
80257: ARRAY
80258: PPUSH
80259: CALL_OW 114
80263: GO 80279
// SetTag ( i , tag ) ;
80265: LD_VAR 0 4
80269: PPUSH
80270: LD_VAR 0 9
80274: PPUSH
80275: CALL_OW 109
// end else
80279: GO 80352
// if enemy then
80281: LD_VAR 0 5
80285: IFFALSE 80352
// begin if GetWeapon ( i ) = ru_time_lapser then
80287: LD_VAR 0 4
80291: PPUSH
80292: CALL_OW 264
80296: PUSH
80297: LD_INT 49
80299: EQUAL
80300: IFFALSE 80328
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80302: LD_VAR 0 4
80306: PPUSH
80307: LD_VAR 0 5
80311: PPUSH
80312: LD_VAR 0 4
80316: PPUSH
80317: CALL_OW 74
80321: PPUSH
80322: CALL_OW 112
80326: GO 80352
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80328: LD_VAR 0 4
80332: PPUSH
80333: LD_VAR 0 5
80337: PPUSH
80338: LD_VAR 0 4
80342: PPUSH
80343: CALL_OW 74
80347: PPUSH
80348: CALL_OW 115
// end ; end ;
80352: GO 79932
80354: POP
80355: POP
// end ;
80356: LD_VAR 0 3
80360: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80361: LD_INT 0
80363: PPUSH
80364: PPUSH
80365: PPUSH
// if not unit or IsInUnit ( unit ) then
80366: LD_VAR 0 1
80370: NOT
80371: PUSH
80372: LD_VAR 0 1
80376: PPUSH
80377: CALL_OW 310
80381: OR
80382: IFFALSE 80386
// exit ;
80384: GO 80477
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80386: LD_ADDR_VAR 0 4
80390: PUSH
80391: LD_VAR 0 1
80395: PPUSH
80396: CALL_OW 250
80400: PPUSH
80401: LD_VAR 0 2
80405: PPUSH
80406: LD_INT 1
80408: PPUSH
80409: CALL_OW 272
80413: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80414: LD_ADDR_VAR 0 5
80418: PUSH
80419: LD_VAR 0 1
80423: PPUSH
80424: CALL_OW 251
80428: PPUSH
80429: LD_VAR 0 2
80433: PPUSH
80434: LD_INT 1
80436: PPUSH
80437: CALL_OW 273
80441: ST_TO_ADDR
// if ValidHex ( x , y ) then
80442: LD_VAR 0 4
80446: PPUSH
80447: LD_VAR 0 5
80451: PPUSH
80452: CALL_OW 488
80456: IFFALSE 80477
// ComTurnXY ( unit , x , y ) ;
80458: LD_VAR 0 1
80462: PPUSH
80463: LD_VAR 0 4
80467: PPUSH
80468: LD_VAR 0 5
80472: PPUSH
80473: CALL_OW 118
// end ;
80477: LD_VAR 0 3
80481: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80482: LD_INT 0
80484: PPUSH
80485: PPUSH
// result := false ;
80486: LD_ADDR_VAR 0 3
80490: PUSH
80491: LD_INT 0
80493: ST_TO_ADDR
// if not units then
80494: LD_VAR 0 2
80498: NOT
80499: IFFALSE 80503
// exit ;
80501: GO 80548
// for i in units do
80503: LD_ADDR_VAR 0 4
80507: PUSH
80508: LD_VAR 0 2
80512: PUSH
80513: FOR_IN
80514: IFFALSE 80546
// if See ( side , i ) then
80516: LD_VAR 0 1
80520: PPUSH
80521: LD_VAR 0 4
80525: PPUSH
80526: CALL_OW 292
80530: IFFALSE 80544
// begin result := true ;
80532: LD_ADDR_VAR 0 3
80536: PUSH
80537: LD_INT 1
80539: ST_TO_ADDR
// exit ;
80540: POP
80541: POP
80542: GO 80548
// end ;
80544: GO 80513
80546: POP
80547: POP
// end ;
80548: LD_VAR 0 3
80552: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80553: LD_INT 0
80555: PPUSH
80556: PPUSH
80557: PPUSH
80558: PPUSH
// if not unit or not points then
80559: LD_VAR 0 1
80563: NOT
80564: PUSH
80565: LD_VAR 0 2
80569: NOT
80570: OR
80571: IFFALSE 80575
// exit ;
80573: GO 80665
// dist := 99999 ;
80575: LD_ADDR_VAR 0 5
80579: PUSH
80580: LD_INT 99999
80582: ST_TO_ADDR
// for i in points do
80583: LD_ADDR_VAR 0 4
80587: PUSH
80588: LD_VAR 0 2
80592: PUSH
80593: FOR_IN
80594: IFFALSE 80663
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80596: LD_ADDR_VAR 0 6
80600: PUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: LD_VAR 0 4
80610: PUSH
80611: LD_INT 1
80613: ARRAY
80614: PPUSH
80615: LD_VAR 0 4
80619: PUSH
80620: LD_INT 2
80622: ARRAY
80623: PPUSH
80624: CALL_OW 297
80628: ST_TO_ADDR
// if tmpDist < dist then
80629: LD_VAR 0 6
80633: PUSH
80634: LD_VAR 0 5
80638: LESS
80639: IFFALSE 80661
// begin result := i ;
80641: LD_ADDR_VAR 0 3
80645: PUSH
80646: LD_VAR 0 4
80650: ST_TO_ADDR
// dist := tmpDist ;
80651: LD_ADDR_VAR 0 5
80655: PUSH
80656: LD_VAR 0 6
80660: ST_TO_ADDR
// end ; end ;
80661: GO 80593
80663: POP
80664: POP
// end ;
80665: LD_VAR 0 3
80669: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80670: LD_INT 0
80672: PPUSH
// uc_side := side ;
80673: LD_ADDR_OWVAR 20
80677: PUSH
80678: LD_VAR 0 1
80682: ST_TO_ADDR
// uc_nation := 3 ;
80683: LD_ADDR_OWVAR 21
80687: PUSH
80688: LD_INT 3
80690: ST_TO_ADDR
// vc_chassis := 25 ;
80691: LD_ADDR_OWVAR 37
80695: PUSH
80696: LD_INT 25
80698: ST_TO_ADDR
// vc_engine := engine_siberite ;
80699: LD_ADDR_OWVAR 39
80703: PUSH
80704: LD_INT 3
80706: ST_TO_ADDR
// vc_control := control_computer ;
80707: LD_ADDR_OWVAR 38
80711: PUSH
80712: LD_INT 3
80714: ST_TO_ADDR
// vc_weapon := 59 ;
80715: LD_ADDR_OWVAR 40
80719: PUSH
80720: LD_INT 59
80722: ST_TO_ADDR
// result := CreateVehicle ;
80723: LD_ADDR_VAR 0 5
80727: PUSH
80728: CALL_OW 45
80732: ST_TO_ADDR
// SetDir ( result , d ) ;
80733: LD_VAR 0 5
80737: PPUSH
80738: LD_VAR 0 4
80742: PPUSH
80743: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80747: LD_VAR 0 5
80751: PPUSH
80752: LD_VAR 0 2
80756: PPUSH
80757: LD_VAR 0 3
80761: PPUSH
80762: LD_INT 0
80764: PPUSH
80765: CALL_OW 48
// end ;
80769: LD_VAR 0 5
80773: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80774: LD_INT 0
80776: PPUSH
80777: PPUSH
80778: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80779: LD_ADDR_VAR 0 2
80783: PUSH
80784: LD_INT 0
80786: PUSH
80787: LD_INT 0
80789: PUSH
80790: LD_INT 0
80792: PUSH
80793: LD_INT 0
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80802: LD_VAR 0 1
80806: NOT
80807: PUSH
80808: LD_VAR 0 1
80812: PPUSH
80813: CALL_OW 264
80817: PUSH
80818: LD_INT 12
80820: PUSH
80821: LD_INT 51
80823: PUSH
80824: LD_INT 32
80826: PUSH
80827: LD_INT 89
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: IN
80836: NOT
80837: OR
80838: IFFALSE 80842
// exit ;
80840: GO 80940
// for i := 1 to 3 do
80842: LD_ADDR_VAR 0 3
80846: PUSH
80847: DOUBLE
80848: LD_INT 1
80850: DEC
80851: ST_TO_ADDR
80852: LD_INT 3
80854: PUSH
80855: FOR_TO
80856: IFFALSE 80938
// begin tmp := GetCargo ( cargo , i ) ;
80858: LD_ADDR_VAR 0 4
80862: PUSH
80863: LD_VAR 0 1
80867: PPUSH
80868: LD_VAR 0 3
80872: PPUSH
80873: CALL_OW 289
80877: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80878: LD_ADDR_VAR 0 2
80882: PUSH
80883: LD_VAR 0 2
80887: PPUSH
80888: LD_VAR 0 3
80892: PPUSH
80893: LD_VAR 0 4
80897: PPUSH
80898: CALL_OW 1
80902: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80903: LD_ADDR_VAR 0 2
80907: PUSH
80908: LD_VAR 0 2
80912: PPUSH
80913: LD_INT 4
80915: PPUSH
80916: LD_VAR 0 2
80920: PUSH
80921: LD_INT 4
80923: ARRAY
80924: PUSH
80925: LD_VAR 0 4
80929: PLUS
80930: PPUSH
80931: CALL_OW 1
80935: ST_TO_ADDR
// end ;
80936: GO 80855
80938: POP
80939: POP
// end ;
80940: LD_VAR 0 2
80944: RET
// export function Length ( array ) ; begin
80945: LD_INT 0
80947: PPUSH
// result := array + 0 ;
80948: LD_ADDR_VAR 0 2
80952: PUSH
80953: LD_VAR 0 1
80957: PUSH
80958: LD_INT 0
80960: PLUS
80961: ST_TO_ADDR
// end ;
80962: LD_VAR 0 2
80966: RET
// export function PrepareArray ( array ) ; begin
80967: LD_INT 0
80969: PPUSH
// result := array diff 0 ;
80970: LD_ADDR_VAR 0 2
80974: PUSH
80975: LD_VAR 0 1
80979: PUSH
80980: LD_INT 0
80982: DIFF
80983: ST_TO_ADDR
// if not result [ 1 ] then
80984: LD_VAR 0 2
80988: PUSH
80989: LD_INT 1
80991: ARRAY
80992: NOT
80993: IFFALSE 81013
// result := Delete ( result , 1 ) ;
80995: LD_ADDR_VAR 0 2
80999: PUSH
81000: LD_VAR 0 2
81004: PPUSH
81005: LD_INT 1
81007: PPUSH
81008: CALL_OW 3
81012: ST_TO_ADDR
// end ;
81013: LD_VAR 0 2
81017: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81018: LD_INT 0
81020: PPUSH
81021: PPUSH
81022: PPUSH
81023: PPUSH
// sibRocketRange := 25 ;
81024: LD_ADDR_VAR 0 6
81028: PUSH
81029: LD_INT 25
81031: ST_TO_ADDR
// result := false ;
81032: LD_ADDR_VAR 0 4
81036: PUSH
81037: LD_INT 0
81039: ST_TO_ADDR
// for i := 0 to 5 do
81040: LD_ADDR_VAR 0 5
81044: PUSH
81045: DOUBLE
81046: LD_INT 0
81048: DEC
81049: ST_TO_ADDR
81050: LD_INT 5
81052: PUSH
81053: FOR_TO
81054: IFFALSE 81121
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81056: LD_VAR 0 1
81060: PPUSH
81061: LD_VAR 0 5
81065: PPUSH
81066: LD_VAR 0 6
81070: PPUSH
81071: CALL_OW 272
81075: PPUSH
81076: LD_VAR 0 2
81080: PPUSH
81081: LD_VAR 0 5
81085: PPUSH
81086: LD_VAR 0 6
81090: PPUSH
81091: CALL_OW 273
81095: PPUSH
81096: LD_VAR 0 3
81100: PPUSH
81101: CALL_OW 309
81105: IFFALSE 81119
// begin result := true ;
81107: LD_ADDR_VAR 0 4
81111: PUSH
81112: LD_INT 1
81114: ST_TO_ADDR
// exit ;
81115: POP
81116: POP
81117: GO 81123
// end ;
81119: GO 81053
81121: POP
81122: POP
// end ;
81123: LD_VAR 0 4
81127: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81128: LD_INT 0
81130: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81131: LD_VAR 0 1
81135: PPUSH
81136: LD_VAR 0 2
81140: PPUSH
81141: LD_INT 0
81143: PPUSH
81144: LD_INT 0
81146: PPUSH
81147: LD_INT 1
81149: PPUSH
81150: LD_INT 0
81152: PPUSH
81153: CALL_OW 587
// end ; end_of_file
81157: LD_VAR 0 3
81161: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81162: LD_VAR 0 1
81166: PUSH
81167: LD_INT 200
81169: DOUBLE
81170: GREATEREQUAL
81171: IFFALSE 81179
81173: LD_INT 299
81175: DOUBLE
81176: LESSEQUAL
81177: IFTRUE 81181
81179: GO 81213
81181: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81182: LD_VAR 0 1
81186: PPUSH
81187: LD_VAR 0 2
81191: PPUSH
81192: LD_VAR 0 3
81196: PPUSH
81197: LD_VAR 0 4
81201: PPUSH
81202: LD_VAR 0 5
81206: PPUSH
81207: CALL 35828 0 5
81211: GO 81290
81213: LD_INT 300
81215: DOUBLE
81216: GREATEREQUAL
81217: IFFALSE 81225
81219: LD_INT 399
81221: DOUBLE
81222: LESSEQUAL
81223: IFTRUE 81227
81225: GO 81289
81227: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81228: LD_VAR 0 1
81232: PPUSH
81233: LD_VAR 0 2
81237: PPUSH
81238: LD_VAR 0 3
81242: PPUSH
81243: LD_VAR 0 4
81247: PPUSH
81248: LD_VAR 0 5
81252: PPUSH
81253: LD_VAR 0 6
81257: PPUSH
81258: LD_VAR 0 7
81262: PPUSH
81263: LD_VAR 0 8
81267: PPUSH
81268: LD_VAR 0 9
81272: PPUSH
81273: LD_VAR 0 10
81277: PPUSH
81278: LD_VAR 0 11
81282: PPUSH
81283: CALL 32161 0 11
81287: GO 81290
81289: POP
// end ;
81290: PPOPN 11
81292: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81293: LD_VAR 0 1
81297: PPUSH
81298: LD_VAR 0 2
81302: PPUSH
81303: LD_VAR 0 3
81307: PPUSH
81308: LD_VAR 0 4
81312: PPUSH
81313: LD_VAR 0 5
81317: PPUSH
81318: CALL 35564 0 5
// end ; end_of_file
81322: PPOPN 5
81324: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81325: LD_VAR 0 1
81329: PPUSH
81330: LD_VAR 0 2
81334: PPUSH
81335: LD_VAR 0 3
81339: PPUSH
81340: LD_VAR 0 4
81344: PPUSH
81345: LD_VAR 0 5
81349: PPUSH
81350: LD_VAR 0 6
81354: PPUSH
81355: CALL 19781 0 6
// end ;
81359: PPOPN 6
81361: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81362: LD_INT 0
81364: PPUSH
// begin if not units then
81365: LD_VAR 0 1
81369: NOT
81370: IFFALSE 81374
// exit ;
81372: GO 81374
// end ;
81374: PPOPN 7
81376: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81377: CALL 19675 0 0
// end ;
81381: PPOPN 1
81383: END
